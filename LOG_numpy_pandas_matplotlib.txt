/ 7	. 

/ lees	,
https://matplotlib.org/3.1.1/tutorials/introductory/pyplot.html

/ 13	. 

plt.plot([1, 3, 10, 50])

You may be wondering why the x-axis ranges from 0-3 and the y-axis from 1-4. If you provide a single list or array to the plot() command, matplotlib assumes it is a sequence of y values, and automatically generates the x values for you. Since python ranges start with 0, the default x vector has the same length as y but starts with 0. Hence the x data are [0,1,2,3].

/ we zien gebroken lijn door 0,1 1,3 2,10 3,50

/ 13	. 

plt.plot([1, 2, 3, 4], [1, 4, 9, 16])

/ we zien gebroken lijn door 1,1 2,4 3,9 4,16


/ 7	. 

In [8163]: plt.plot([1,5],[2,6])
/ we zien lijn door 1,2 en 5,6

In [8163]: plt.plot(([1,5],[2,6]))
Out[8163]: 
/ we zien 2 lijnen, van (0,1) naar (1,2) en van 0,5 naar 1,6

In [8270]: plt.plot(([1,3],[2,5],[4,10],[7,12]))
/ [1,3] zijn values bij 0
/ [2,5] zijn values bij 1
/ [4,10] zijn values bij 2
/ [7,12] zijn values bij 3
/ dus we zien 2 gebroken lijnen , een door (0,1), (1,2), (2,4), (3,7) en de ander door (0,3), (1,5), (2,10), (3,12)

In [8272]: plt.plot([1,3],[2,5],[4,10],[7,12])
/ we zien 2 lijnstukken, de 1ste door (1,2) en (3,5) en de 2de door (4,7) en (10,12)
/ 2 aan 2 dus	, net als plt.plot(t,t,t,t**2) 	(voor **2 moet t een np.array zijn ipv een list)

/ 7	 

/ lees	,
https://matplotlib.org/3.1.0/api/markers_api.html

/ 7	. 

In [8198]: p
Out[8198]: 
array([[1, 2],
       [3, 4],
       [5, 6]])

In [8197]: q
Out[8197]: array([1, 2, 1])

In [8196]: p[q==1,0],p[q==1,1]
Out[8196]: (array([1, 5]), array([2, 6]))
/ een soort mesh grid	,
/ TODO

In [8202]: plt.plot(p[q==1,0],p[q==1,1])
/ line van 1,2 naar 5,6	,

/ 7	. 

In [8285]: p=np.array([1,2,3,4,5,6,7,8]).reshape(-1,2)
In [8286]: p
Out[8286]: 
array([[1, 2],
       [3, 4],
       [5, 6],
       [7, 8]])
In [8287]: q=np.array([1,2,1,1])

In [8288]: p[q==1,0],p[q==1,1]
Out[8288]: (array([1, 5, 7]), array([2, 6, 8]))

In [8289]: p[q==2,0],p[q==2,1]
Out[8289]: (array([3]), array([4]))

In [8291]: plt.plot(p[q==1,0],p[q==1,1])
/ we zien 1 lijn door (1,2), (5,6), (7,8)
/ en 1 punt	,

/ 7	. 

/ SAMENVATTING PLOT

/ zorg altijd dat de args van .plot met zijn 2en zijn	, dus
	.plot(t,t,t,t*2, ...)
/ of	,
	.plot([1,2,3],[4,5,6])	: we zien gebroken lijn door (1,4), (2,5), (3,6)

/ als je doet	,
	.plot(([1,2,3],[4,5,6])) 
/ dan geef je dus maar 1 ding	, en zien	we een variant van
	.plot([1,4,7])
/ deze geeft een gebroken lijn door (0,1), (1,4) (2,7)
/ bij 
	.plot(([1,2,3],[4,5,6])) 
/ zien we 2 gebroken lijnen: de 1ste door (0,1), (1,2) (2,3) en de 2de door (0,4), (1,5), (2,6)
/ als je niet 2 dingen geeft maar plot de keys zelf, en ziet hij wat je geeft als values	,



/ Einde SAMENVATTING PLOT


/ 7	. 

/ precies wat het moet doen	,
In [8218]:  a=np.linspace(10,20,21)
In [8219]: plt.figure()
In [8220]: plt.plot(a,np.sin(a))

In [8221]: a.shape
Out[8221]: (21,)
In [8222]: np.sin(a).shape
Out[8222]: (21,)

/ 7	. 

/ voor .plot maakt het niet uit of we hem een list geven of een numpy array	,

In [8229]: a=np.arange(0,10)
In [8233]: b=np.sin(a)
In [8246]: a2=a.tolist()
In [8244]: b2=np.sin(a2).tolist()

/ np.sin(a) is np.sin(a2), is een numpy array	, a is een numpy array, a2 een list	,

In [8247]: plt.plot(a2,b2)
/=
In [8248]: plt.plot(a,b)

/ we zien een grafiek, met (a[0],b[0]), ...

/ 7	. 


/ 7	 

p=np.arange(-2,2,delta)
q=np.arange(-1,1,delta)
P,Q=np.meshgrid(p,q)
plt.figure()
R=P+Q
c=plt.contour(P,Q,R)
c=plt.contour(P,Q,P*Q)

