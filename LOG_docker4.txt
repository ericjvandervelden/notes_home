/ See DOCKER NETWORK 
/ See DOCKER COMPOSE 
/ See DOCKER LOCATION
/ See DOCKER POSTGRES AGAIN
/ See DOCKER POSTGRES VOLUME
/ See HOW IMAGES ARE BUILD LAYERS
/ See DOCKER COMPOSE POSTGRES

/ DOCKER NETWORK 

/ 7		.

/ lees,	
https://docs.docker.com/network/network-tutorial-standalone/

/ 13	. 

/ als we  
[eric@almond postgres3a]$ docker run -dti --rm my/fedora-postgres3a bash
/ moeten we , anders kunnen we het cmd postgres niet overwrite met bash	,
$ vi Dockerfile
#entrypoint ["postgres"]
cmd ["postgres"]

/ 13	.

/ doe	 -dti	,
[eric@almond postgres3a]$ docker run -dti --rm my/fedora-postgres3a bash
3f87341ab58e853f3fefbb26bef1a2b81a9005b1b0b64ef3827b1a7a6c780d11
[eric@almond postgres3a]$ docker run -dti --rm my/fedora-postgres3a bash
338fc9145f355a670e3bf1d424c27f4d51d30925b027df478ca435992d8e2f11

[eric@almond postgres3a]$ docker inspect bridge
        "Containers": {
            "338fc9145f355a670e3bf1d424c27f4d51d30925b027df478ca435992d8e2f11": {
                "Name": "priceless_goodall",
                "EndpointID": "294b04bc74ccfdd00582b5d624f00eb39cc89ccfe1ca77cb43deeb090e5330cd",
                "MacAddress": "02:42:ac:11:00:03",
                "IPv4Address": "172.17.0.3/16",
                "IPv6Address": ""
            },
            "3f87341ab58e853f3fefbb26bef1a2b81a9005b1b0b64ef3827b1a7a6c780d11": {
                "Name": "silly_ramanujan",
                "EndpointID": "be360e16bb33786d80c3604d7c379aae1f9d4ec0f466e1867448909dc2a71daa",
                "MacAddress": "02:42:ac:11:00:02",
                "IPv4Address": "172.17.0.2/16",
                "IPv6Address": ""
            }
        },

/ klopt	,
[eric@almond postgres3a]$ docker container ls
CONTAINER ID        IMAGE                  COMMAND             CREATED             STATUS              PORTS               NAMES
338fc9145f35        my/fedora-postgres3a   "bash"              8 minutes ago       Up 8 minutes                            priceless_goodall
3f87341ab58e        my/fedora-postgres3a   "bash"              8 minutes ago       Up 8 minutes                            silly_ramanujan

/ we hoeven geen 
$ docker inspect priceless_goodall 
/ te doen	, omdat we de ip& al hebben	,

/ 13	. 

[eric@almond postgres3a]$ docker attach priceless_goodall 
/ Geef Enter
bash-4.3$ 
bash-4.3$ 
/ WH bug dat we Enter moeten geven	, ook attach wordt ook niet herkend	,

/ als we  in container
bash-4.3$ ctrl+pq
/ dan zien we	,
bash-4.3$ [eric@almond postgres3a]$ 
/ en de containers zijn er nog,	 en ze zijn nog up	,	

eric@almond postgres3a]$ docker container ls
CONTAINER ID        IMAGE                  COMMAND             CREATED             STATUS              PORTS               NAMES
338fc9145f35        my/fedora-postgres3a   "bash"              17 minutes ago      Up 17 minutes                           priceless_goodall
3f87341ab58e        my/fedora-postgres3a   "bash"              17 minutes ago      Up 17 minutes                           silly_ramanujan

/ 13	. 

/ als je in de container
$ exit
/ dan verdwijnt de container	, WH omdat we hem met --rm hebben start	,

/ 13	. 

/ Waarom werkt ping in de tutorial	, want wij hebben hem installed met dnf	,
/ ip hebben we niet	,
/ TODO

/ 13	. 

/ ping met ip& ging OK	, 
/ maar bij ons op container naam , gaat het goed of niet?

bash-4.3$ ping -c 2 172.17.0.4
PING 172.17.0.4 (172.17.0.4) 56(84) bytes of data.
From 172.17.0.3 icmp_seq=1 Destination Host Unreachable
From 172.17.0.3 icmp_seq=2 Destination Host Unreachable
/ Klopt, is er niet	,

--- 172.17.0.4 ping statistics ---
2 packets transmitted, 0 received, +2 errors, 100% packet loss, time 1059ms
pipe 2
bash-4.3$ ping -c 2 priceless_goodall
PING priceless_goodall.nuts.org (69.172.201.153) 56(84) bytes of data.

--- priceless_goodall.nuts.org ping statistics ---
2 packets transmitted, 0 received, 100% packet loss, time 1000ms

/ WH we zien 100% packet loss, dus 
/ ERR	,

/ 13	. 

/ nu niet op brigde, maar eigen gemaakt netwerk	,

[eric@almond postgres3a]$   docker network ls
NETWORK ID          NAME                DRIVER              SCOPE
1da8cb793d48        bridge              bridge              local
a12fa67c85ef        docker_gwbridge     bridge              local
src3ifciv47s        foo_webnet          overlay             swarm
349ef13fadf7        host                host                local
c6d3f8et1qrt        ingress             overlay             swarm
c360bb8026c9        my-bridge           bridge              local
023f75a0aec7        my-net              bridge              local
a01ab7ad5edd        none                null                local

/ WH hebben we eerder	zo het zgn. user-defined network gemaakt ,

$ docker network create --driver bridge alpine-net
/ of	,
$ docker network create alpine-net
 
[eric@almond postgres3a]$ docker run -dti --rm --network my-bridge my/fedora-postgres3a bash
e55a9cc91ac0637bf7c53d2435d327395d1895a8613d035e2b86b1b48396d90b
[eric@almond postgres3a]$ docker run -dti --rm --network my-bridge my/fedora-postgres3a bash
ffe3b656bba8ee20a69b3e20d66c9a284d801788be060f484a544c08cf859408

[eric@almond postgres3a]$ docker inspect my-bridge 
        "Containers": {
            "e55a9cc91ac0637bf7c53d2435d327395d1895a8613d035e2b86b1b48396d90b": {
                "Name": "eager_pike",
                "EndpointID": "c2d05e41fc31d8cad9f7068c81f15fa008f2ad7721d7e97c00b19a079e1f1270",
                "MacAddress": "02:42:ac:12:00:02",
                "IPv4Address": "172.18.0.2/16",
                "IPv6Address": ""
            },
            "ffe3b656bba8ee20a69b3e20d66c9a284d801788be060f484a544c08cf859408": {
                "Name": "eager_gates",
                "EndpointID": "18aedc3c90620f9d38fc0d982582fd922cd1359b81356daf57c407654df0992c",
                "MacAddress": "02:42:ac:12:00:03",
                "IPv4Address": "172.18.0.3/16",
                "IPv6Address": ""
            }
        },

/ we zien dat op container name nog steeds fout 	,

[eric@almond postgres3a]$ docker attach eager_pike 

bash-4.3$ ping -c 2 eager_gates
PING eager_gates.nuts.org (69.172.201.153) 56(84) bytes of data.

--- eager_gates.nuts.org ping statistics ---
2 packets transmitted, 0 received, 100% packet loss, time 1042ms

bash-4.3$ ping -c 2 172.18.0.3
PING 172.18.0.3 (172.18.0.3) 56(84) bytes of data.
64 bytes from 172.18.0.3: icmp_seq=1 ttl=64 time=0.271 ms
64 bytes from 172.18.0.3: icmp_seq=2 ttl=64 time=0.171 ms

--- 172.18.0.3 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 1059ms
/ ERR	,



/ 7	 .

/ DOCKER COMPOSE 

/ we hebben al installed,	
[root@almond ~]# dnf install docker-compose-1.16.1-1.fc26.noarch

/ 13	 .

[eric@almond part2]$ pwd
/home/eric/Devel/Docker2/getting-started/part2

/ 1313	. 

[eric@almond part2]$ cat Dockerfile 

workdir /app
/ of	,
workdir app 		

# Copy the current directory contents into the container at /app
copy . /app
/ of	,
copy . . 	

/ alle 4 de combinaties zijn OK	,


/ 7	 

/ DOCKER CONTAINERS

/ 13	. 

[eric@almond part2]$ docker build --rm -t friendlyhello .
Sending build context to Docker daemon  5.12 kB
Step 1/6 : FROM python:2.7-slim
 ---> f2ac6489d817
Step 2/6 : WORKDIR app
 ---> Using cache
 ---> a07acae04510
Step 3/6 : COPY . .
 ---> Using cache
 ---> 2cad98258e03
Step 4/6 : RUN pip install --trusted-host pypi.python.org -r requirements.txt
 ---> Using cache
 ---> 4d5c33be5b99
Step 5/6 : ENV NAME World
 ---> Using cache
 ---> 2ada6827edb6
Step 6/6 : CMD python app.py
 ---> Using cache
 ---> e89a62a73338
Successfully built e89a62a73338

/ 13	. 

[eric@almond part2]$ docker run -ti -p 4000:80 friendlyhello

/ in chrome	,
http://localhost:4000/

Hello World!
Hostname: 456ab9524d09
Visits: cannot connect to Redis, counter disabled

/ NB  . friendlyhello is de image name , een container heet bijv gifted_hawking  ,
/ de container id = 3d599545b86e  , en dat is ook $ hostname  ,

[eric@almond java12-study]$ docker container ls -a
CONTAINER ID        IMAGE                                                                                                       COMMAND             CREATED             STATUS              PORTS                  NAMES
456ab9524d09        friendlyhello                                                                                               "python app.py"     4 minutes ago       Up 4 minutes        0.0.0.0:4000->80/tcp   sharp_pasteur



/ 7	.  

/ fout bij rm container	,
/  containers op fs	,

[eric@almond java12-study]$ docker container ls -a
CONTAINER ID        IMAGE                                                                                                       COMMAND             CREATED             STATUS              PORTS                  NAMES
13264fa07f7a        friendlyhello       "python app.py"     About a minute ago   Up About a minute   0.0.0.0:4000->80/tcp   compassionate_kare
ea2165ed4f97        ericjvandervelden/getting-started@sha256:9c5e788110a723941a9020720d34c47a5f6fb20bfb03a907a283232c57bfd3eb   "python app.py"     3 months ago        Dead                                       foo_web.2.17uhxe3a8dn0vz76xkq8ja6ze

/ we zagen	,
$ docker rm ea2165ed4f97
...
Error response from daemon: Driver devicemapper failed to remove root filesystem ea2165ed4f97a838963ff32cec10bb11aa6f88595ab6154fc09c3b30bb5d487d: failed to remove device b3b8945f98acea24188b99c30e89f05c08cf3a1e0dd6a8a5534d28d6aeb18f20-init:devicemapper: Error running DeleteDevice dm_task_run failed

/ de oplossing was	,
# systemctl restart docker 

/ 13	 

/ we hebben gedaan	,
[eric@almond part2]$ docker run -ti -p 4000:80 friendlyhello
...
[eric@almond java12-study]$ docker inspect 13264fa07f7a
        "Image": "sha256:e89a62a73338519555756056c45035bf020be15ce94be7f2ed9f665f04b3f094",
        "ResolvConfPath": "/var/lib/docker/containers/13264fa07f7a520d5f9d70daba302d609dc494ded95dc96d91baab798f73fa67/resolv.conf",
        "HostnamePath": "/var/lib/docker/containers/13264fa07f7a520d5f9d70daba302d609dc494ded95dc96d91baab798f73fa67/hostname",
        "HostsPath": "/var/lib/docker/containers/13264fa07f7a520d5f9d70daba302d609dc494ded95dc96d91baab798f73fa67/hosts",
        "GraphDriver": {
            "Name": "devicemapper",
            "Data": {
                "DeviceId": "6079",
                "DeviceName": "docker-253:1-2504345-d5bfabb3387f417c28698adccd2da8010ddfa10137ee40f6229c7aca51f9edec",
                "DeviceSize": "107374182400"
            }
        },

/ image	,
[root@almond docker]# find -name "e89a62a73338519555756*" 
./image/devicemapper/imagedb/content/sha256/e89a62a73338519555756056c45035bf020be15ce94be7f2ed9f665f04b3f094
./image/devicemapper/imagedb/metadata/sha256/e89a62a73338519555756056c45035bf020be15ce94be7f2ed9f665f04b3f094

/ container	,
[root@almond docker]# find -name "13264fa07f7a520d5f9d70daba3*" 
./containers/13264fa07f7a520d5f9d70daba302d609dc494ded95dc96d91baab798f73fa67
./image/devicemapper/layerdb/mounts/13264fa07f7a520d5f9d70daba302d609dc494ded95dc96d91baab798f73fa67

/ ? 
[root@almond docker]# find -name "d5bfabb3387f417c28698adccd2da8*" 
./devicemapper/mnt/d5bfabb3387f417c28698adccd2da8010ddfa10137ee40f6229c7aca51f9edec-init
./devicemapper/mnt/d5bfabb3387f417c28698adccd2da8010ddfa10137ee40f6229c7aca51f9edec
./devicemapper/metadata/d5bfabb3387f417c28698adccd2da8010ddfa10137ee40f6229c7aca51f9edec-init
./devicemapper/metadata/d5bfabb3387f417c28698adccd2da8010ddfa10137ee40f6229c7aca51f9edec

/ wat zit er in de files hierboven?

[root@almond docker]# ls devicemapper/mnt/d5bfabb3387f417c28698adccd2da8010ddfa10137ee40f6229c7aca51f9edec-init
[root@almond docker]# ls devicemapper/mnt/d5bfabb3387f417c28698adccd2da8010ddfa10137ee40f6229c7aca51f9edec/rootfs/
app  bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var

/ dit zijn 2 metadata files	,
./devicemapper/metadata/d5bfabb3387f417c28698adccd2da8010ddfa10137ee40f6229c7aca51f9edec-init
./devicemapper/metadata/d5bfabb3387f417c28698adccd2da8010ddfa10137ee40f6229c7aca51f9edec

[root@almond docker]# ls ./containers/13264fa07f7a520d5f9d70daba302d609dc494ded95dc96d91baab798f73fa67/
checkpoints/      hostconfig.json   hosts             resolv.conf.hash  shm/
config.v2.json    hostname          resolv.conf       secrets/          

[root@almond docker]# ls ./image/devicemapper/layerdb/mounts/13264fa07f7a520d5f9d70daba302d609dc494ded95dc96d91baab798f73fa67/
init-id  mount-id  parent

/ na ctrl+c in $ docker run --rm -ti friendlyhello	, is de container Exited	, maar alles van de container op het fs in /var/lib/docker is er nog	,
/ na $ docker rm 456ab9524d09 is alles van de container op het fs in /var/lib/docker weg	,  

/ 13	. 

[eric@almond java12-study]$ docker inspect foo_web.2.17uhxe3a8dn0vz76xkq8ja6ze
        "Image": "sha256:ea7a60a6945398aa9841dcbd87e598890fb4c8c5716cce1bf0be428a2a060d1e",
        "ResolvConfPath": "/var/lib/docker/containers/ea2165ed4f97a838963ff32cec10bb11aa6f88595ab6154fc09c3b30bb5d487d/resolv.conf",
        "HostnamePath": "/var/lib/docker/containers/ea2165ed4f97a838963ff32cec10bb11aa6f88595ab6154fc09c3b30bb5d487d/hostname",
        "HostsPath": "/var/lib/docker/containers/ea2165ed4f97a838963ff32cec10bb11aa6f88595ab6154fc09c3b30bb5d487d/hosts",
        "GraphDriver": {
            "Name": "devicemapper",
            "Data": null
        },

/ we zagen	,
$ docker rm ea2165ed4f97
...
Error response from daemon: Driver devicemapper failed to remove root filesystem ea2165ed4f97a838963ff32cec10bb11aa6f88595ab6154fc09c3b30bb5d487d: failed to remove device b3b8945f98acea24188b99c30e89f05c08cf3a1e0dd6a8a5534d28d6aeb18f20-init:devicemapper: Error running DeleteDevice dm_task_run failed

/ image	,
[root@almond docker]# find -name "ea7a60a6945398aa9*" 
./image/devicemapper/imagedb/content/sha256/ea7a60a6945398aa9841dcbd87e598890fb4c8c5716cce1bf0be428a2a060d1e
./image/devicemapper/imagedb/metadata/sha256/ea7a60a6945398aa9841dcbd87e598890fb4c8c5716cce1bf0be428a2a060d1e

/ container	,
[root@almond docker]# find -name "ea2165ed4f97a838963f*" 
./containers/ea2165ed4f97a838963ff32cec10bb11aa6f88595ab6154fc09c3b30bb5d487d
./image/devicemapper/layerdb/mounts/ea2165ed4f97a838963ff32cec10bb11aa6f88595ab6154fc09c3b30bb5d487d

[root@almond docker]# find -name "b3b8945f98acea24188b9*" 
./devicemapper/mnt/b3b8945f98acea24188b99c30e89f05c08cf3a1e0dd6a8a5534d28d6aeb18f20-init
[root@almond docker]# ls devicemapper/mnt/b3b8945f98acea24188b99c30e89f05c08cf3a1e0dd6a8a5534d28d6aeb18f20-init/
/ leeg	,

/ 	7 

/ google	,
fedora docker change location /var/lib/docker
/ lees	,
https://forums.docker.com/t/how-do-i-change-the-docker-image-installation-directory/1169
https://linuxconfig.org/how-to-move-docker-s-default-var-lib-docker-to-another-directory-on-ubuntu-debian-linux


/ 7	 

/ how much space do the images take?

[eric@almond part3]$ docker image ls | awk '{n+=$(NF-1)}END{print n}' 
26505.4
/ that is MB	,

/ de laatsten zijn,
maven                                            3.2-jdk-7-onbuild   66e629e8f34e        4 years ago         594 MB
training/postgres                                latest              6fa973bb3c26        5 years ago         365 MB

/ 13	. 

[eric@almond part3]$ docker rmi 6fa973bb3c26
Untagged: training/postgres:latest
Deleted: sha256:6fa973bb3c26975c81e1517842a2645205ba513dedc5190e4515f2ae77bd1add
Deleted: sha256:6bb5b8675b9c767f76136430f26a5375bf99eccb316df323258287fce88ce35d
Deleted: sha256:3dd7f3145ea96bc475bfdaa9622a129b0148dada82630ca922767136ceea7075
Deleted: sha256:133fbe01d0f35ad7e6a8e28918c293d9755f31bfa20f466b20218383a5b497af
Deleted: sha256:3b8e747c9abde6f7d7c63ac2f1f860102203fe163730640fedf91021bd2e5045
Deleted: sha256:34f7dfe93b37d70522702ad4249e0c4543ebb6ed7805a0d52f7e567c233f9faa
Deleted: sha256:2547b72ab20b01db88b5cc226df44947f90ca52c1f87ecd81e0b297acdd8bd64
Deleted: sha256:762659db0e88620be57bb4e426f80cf670df935226764da72dad1005bf4bd352
Deleted: sha256:eb94483ebe519700c2a6abbb63c3f532ad811f7aa7ed8a7ced03caebacf13415
Deleted: sha256:95c8201c99066e7eee6d605f1cf1b5971472d664124c3c39798fe3d854bba23f
Deleted: sha256:b0c2d97e0a4530fadfe9349e1cf5b1a2d50546506a535b815b80f65ec470d810
Deleted: sha256:011a3c5b7a7e9b0f8f66465f9b13fb3aecdc3555d288b83e18a4643a37a6bc3e
Deleted: sha256:02b020a52826d9ff10ba3646cf55b36b4818cf53029e32456d3409d1285b8e85
Deleted: sha256:ee5def3918d29e9d40d91f85d9912a4df2405703083a0a4ea15c80457166e07f
Deleted: sha256:b65857b2991b7e284a8bdd07e56f6f5cd907dd7fc907b0e94efe08ce0ed97e5a
Deleted: sha256:f2038692277fa753adb1f94e4bc10d5a183e8edd71426faae8332cad7c1f6e04
Deleted: sha256:16caee1f24bb34a142bd03222ca7b24ef59d235271bda16df92f0ccd79780f53
Deleted: sha256:4a68c36b008e7e4455e5eff55db162cbe662056fc9ee37b0770037b68489b70f
Deleted: sha256:a367d6a62984e53d3f2c6f03fbb5479e2801854d58d6540e7314b5e0be806996
Deleted: sha256:6c96c76dfcecbc1d705c75778492ba9ac223fc85321fc3827a5cb6e0cd52d7ce
Deleted: sha256:5827e3408ef9bec2d8b1916d8728f93fc18b82cb5abf98ebc4279d9243d1f6c6
Deleted: sha256:005f7dc2f252f597a07317d02c59190c89905e474c5bac1f4884bf23fcbb1db3
Deleted: sha256:700e3f43cac3c0a3604957d22c9a8625e0e3e436cfa0f091c99333b236eefd1f
Deleted: sha256:14678841a80f279910221e10386de5343f04750ca7e81fabbece9f9c08b550f6
Deleted: sha256:716bbf2a76b6842ee2879dd68f71620b1fc74e53b1d3dac0cfb705ee8cea0fdc
Deleted: sha256:e0c3c7e7d910acab318e4ffd82963f3fbea2f191e290f04bc300b33589f6296b
Deleted: sha256:2935444c7f23efd91dd0c2b6f1bd642552b03b47a5ebdb154212f7141c083f40

[eric@almond part3]$ docker image ls | awk '{n+=$(NF-1)}END{print n}' 
26140.4
/ klopt	, 365MB er af	,

/ 13	. 

[root@almond docker]# find -name "66e6*" 
./image/devicemapper/imagedb/content/sha256/66e629e8f34e8e8b1c3b9627980a94e83cc6f28985bffeb7bb3e473a436e9886
/ hoe kun je zien welke ... er allemaal vanaf hangen, die dan ook deleted worden?

[eric@almond part3]$ docker image inspect 66e629e8f34e
...
       "RootFS": {
            "Type": "layers",
            "Layers": [
                "sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef",
                "sha256:dc7818f0ad09983722a2dbfc1e5044b2df367b8a5ee359a1a252b57fdf73bd5f",
                "sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef",
                "sha256:d3e19c04de2cef953df4b64f147787d001540aa3122f859112d4f6be01153143",
                "sha256:c5bfde1f74995ca6b8cdc0251eb7720b5a216060dc28d04d509e8bd5a05b5e97",
                "sha256:ea744fd9d88674f1088c9a82507e5a39214c95c8c20d737f75706129c54ace65",
                "sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef",
                "sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef",
                "sha256:f1cfecf0dc70a55df7ce8705a5c97e2d55cf2d86a991911adba8e171720aafcb",
                "sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef",
                "sha256:c8709654989086cabcba23313cd4af67ed27be63eaa9ef7dfd1f18c918441eb7",
                "sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef",
                "sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef",
                "sha256:256e8214af6e68113819a23680f1ac199709593fb7c4182f21699dbdd9d62e8c",
                "sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef",
                "sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef",
                "sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef"
            ]

/ we zoeken op	, 
[root@almond docker]# find -name "5f70bf18a086*" 
./image/devicemapper/distribution/v2metadata-by-diffid/sha256/5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef
./image/devicemapper/layerdb/sha256/5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef
[root@almond docker]# find -name "f1cfecf0dc70*" 
./image/devicemapper/distribution/v2metadata-by-diffid/sha256/f1cfecf0dc70a55df7ce8705a5c97e2d55cf2d86a991911adba8e171720aafcb

///////////////////////////////////////////////////////////////
[eric@almond part3]$ docker image ls
maven                                            3.2-jdk-7-onbuild   66e629e8f34e        4 years ago         594 MB
[eric@almond part3]$ docker rmi 66e629e8f34e
Error response from daemon: conflict: unable to delete 66e629e8f34e (cannot be forced) - image has dependent child images

/ 13	. 

[eric@almond part3]$ docker rmi 6fae60ef3446
Untagged: training/webapp:latest
Deleted: sha256:6fae60ef344644649a39240b94d73b8ba9c67f898ede85cf8e947a887b3e6557
Deleted: sha256:875bde2b9e2d99e7c1362993645a474fe621475c6fc1b1623c9ed5312b7bdeae
Deleted: sha256:efcef8076f3bd41ff3e77871759aced2634c1fe0d4ea8584ff4c3272690cd5dd
Deleted: sha256:bbdb5ee3757ef8f2633694016df5840fc3410422b37c22f98c0300e295ce75cc
Deleted: sha256:3fd2f2dc41693b0f56ad011f775a5b00e8c14b6035f5ebc00d5973dc1e22e0bc
Deleted: sha256:d718446240e3f48a904ad4bbf2a1f61737c5d70df35b8210d674a9517cdc9803
Deleted: sha256:99e4602542e9f58c1c15d44ef152308ad7fdf814721d9a20b20e891b30d4c311
Deleted: sha256:a890440f4933412f9aafb056eb2f07f2276ed756631a81e960d4a8a6de5857a3
Deleted: sha256:532f6e94cf4516e8cd08f9b7ebbaff7e7ad7213ee55159ed8c92088f272fb864
Deleted: sha256:68a74799a9e67953725058ef21a530f100025088943446aa60c73fba7beebd47
Deleted: sha256:22527fe016cb4e8aa14a88168c312ad893f361fcaf29e7de7ac81602b3a251bd
Deleted: sha256:b23e4b6b440d0e9ab4ffd7852fbf81edd6d5eb606e24d4950d83502e14af2856
Deleted: sha256:6e773e2e184c95df1e9cb8e4a2849d0dcb07ce9cd50159abe930bbcd5ad9c32f
Deleted: sha256:f115b0453c71fb4d21fdb6f579201984bd5033ae28ed5908978576a19282418b
Deleted: sha256:ad14f28a611d6905ebc22cbe2425e4cd753525618f051d011352f9b9873f2aad
Deleted: sha256:b0da82df3229cd06a2992449f2310caaa42f09fdfb088f4a98c5ea587ea85c7e
Deleted: sha256:ff02ebf1a559b889e763eaa50bc1ea92447b51d43e90b2a83da881cab79f3e66
Deleted: sha256:f6f162dad6e64715d3d07e21d4574733860a557f2f89228d07909c1f6f04e882
Deleted: sha256:b77d6a00f04933dada38bab2629c8d39877c4e1de792dcc0956a73961f9366c0
Deleted: sha256:088f9eb16f16713e449903f7edb4016084de8234d73a45b1882cf29b1f753a5a
Deleted: sha256:753bd8d045a1717861ef78b0accc4ab71bd5771c4d28f4d72428a1358e7aa8a5
Deleted: sha256:799115b9fdd1511e8af8a8a3c8b450d81aa842bbf3c9f88e9126d264b232c598
Deleted: sha256:3b0f09e547d533ae7c5aee678d1a4974c8a3b8f1f0243f5598435605662136c9
Deleted: sha256:3549adbf614379d5c33ef0c5c6486a0d3f577ba3341f573be91b4ba1d8c60ce4
Deleted: sha256:50d40eac64f30a13bb9139062a69edf83beb23c11f4b098cc9be7ed001a823b3
Deleted: sha256:1154ba695078d29ea6c4e1adb55c463959cd77509adf09710e2315827d66271a

/ 13	. 

[eric@almond part3]$ docker image ls 
hello-world                                      latest              690ed74de00f        3 years ago         960 B


[root@almond docker]# find -name "690ed74de00f99a7d00a9*" 
./image/devicemapper/imagedb/content/sha256/690ed74de00f99a7d00a98a5ad855ac4febd66412be132438f9b8dbd300a937d
./image/devicemapper/imagedb/metadata/sha256/690ed74de00f99a7d00a98a5ad855ac4febd66412be132438f9b8dbd300a937d

[root@almond docker]# cat ./image/devicemapper/imagedb/content/sha256/690ed74de00f99a7d00a98a5ad855ac4febd66412be132438f9b8dbd300a937d
{"architecture":"amd64","config":{"Hostname":"5428b43b1a3e","Domainname":"","User":"","AttachStdin":false,"AttachStdout":false,"AttachStderr":false,"Tty":false,"OpenStdin":false,"StdinOnce":false,"Env":null,"Cmd":["/hello"],"Image":"3f12c794407e68e515ba7f473a744e748ac8a827a2ea8b33855dec564238b2e5","Volumes":null,"WorkingDir":"","Entrypoint":null,"OnBuild":null,"Labels":null},"container":"ea6a0578b48631dd3f3b70d7ea48e73ac0b0891433fad177872e74c35d82f56d","container_config":{"Hostname":"5428b43b1a3e","Domainname":"","User":"","AttachStdin":false,"AttachStdout":false,"AttachStderr":false,"Tty":false,"OpenStdin":false,"StdinOnce":false,"Env":null,"Cmd":["/bin/sh","-c","#(nop) CMD [\"/hello\"]"],"Image":"3f12c794407e68e515ba7f473a744e748ac8a827a2ea8b33855dec564238b2e5","Volumes":null,"WorkingDir":"","Entrypoint":null,"OnBuild":null,"Labels":null},"created":"2015-10-13T23:47:48.954129267Z","docker_version":"1.8.2","history":[{"created":"2015-10-13T23:47:48.522046233Z","created_by":"/bin/sh -c #(nop) COPY file:1ad52e3eaf4327c8f846c76dfc7424152b2347bf7bed5959932fa309d7496afc in /"},{"created":"2015-10-13T23:47:48.954129267Z","created_by":"/bin/sh -c #(nop) CMD [\"/hello\"]"}],"os":"linux","rootfs":{"type":"layers","diff_ids":["sha256:b652ec3a27e758f30de4742156b5d096bb19c82f2dc836e96e430323ba166ffe","sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef"]}}

[root@almond docker]# cat ./image/devicemapper/imagedb/metadata/sha256/690ed74de00f99a7d00a98a5ad855ac4febd66412be132438f9b8dbd300a937d/parent
sha256:a3e5b6fb3fcedcdc1f7dfca29c7a23d1a1b8714cd75d1c021cc9c296bef0a6d1

[root@almond docker]# find -name "a3e5b6fb3fcedcdc1f7dfca29c7*"
./image/devicemapper/imagedb/content/sha256/a3e5b6fb3fcedcdc1f7dfca29c7a23d1a1b8714cd75d1c021cc9c296bef0a6d1
/ deze heeft WH geen parent	,

[root@almond docker]# cat ./image/devicemapper/imagedb/content/sha256/a3e5b6fb3fcedcdc1f7dfca29c7a23d1a1b8714cd75d1c021cc9c296bef0a6d1
{"architecture":"amd64","config":{"Hostname":"5428b43b1a3e","Domainname":"","User":"","AttachStdin":false,"AttachStdout":false,"AttachStderr":false,"Tty":false,"OpenStdin":false,"StdinOnce":false,"Env":null,"Cmd":null,"Image":"","Volumes":null,"WorkingDir":"","Entrypoint":null,"OnBuild":null,"Labels":null},"container":"5428b43b1a3ef166dd7447c7f4fd39168a12525458fc6320f3cc95bab9a7fe53","container_config":{"Hostname":"5428b43b1a3e","Domainname":"","User":"","AttachStdin":false,"AttachStdout":false,"AttachStderr":false,"Tty":false,"OpenStdin":false,"StdinOnce":false,"Env":null,"Cmd":["/bin/sh","-c","#(nop) COPY file:1ad52e3eaf4327c8f846c76dfc7424152b2347bf7bed5959932fa309d7496afc in /"],"Image":"","Volumes":null,"WorkingDir":"","Entrypoint":null,"OnBuild":null,"Labels":null},"created":"2015-10-13T23:47:48.522046233Z","docker_version":"1.8.2","history":[{"created":"2015-10-13T23:47:48.522046233Z","created_by":"/bin/sh -c #(nop) COPY file:1ad52e3eaf4327c8f846c76dfc7424152b2347bf7bed5959932fa309d7496afc in /"}],"os":"linux","rootfs":{"type":"layers","diff_ids":["sha256:b652ec3a27e758f30de4742156b5d096bb19c82f2dc836e96e430323ba166ffe"]}}



[eric@almond part3]$ docker image inspect hello-world 

/ Einde DOCKER LOCATION


/ HOW IMAGES ARE BUILD LAYERS

/ 7	 . 

/ bij $ docker build is --rm=true de default	,
/ je kunt --rm=false doen	,

/ 7	. 

[eric@almond study]$ docker build --rm=false -t my/fedora-study .
Sending build context to Docker daemon 2.048 kB
Step 1/2 : FROM fedora
 ---> f9873d530588
Step 2/2 : RUN echo π
 ---> Running in 1c5815a6b044
π
 ---> 4448147d1495
Successfully built 4448147d1495

[eric@almond study]$ docker image inspect my/fedora-study
[
    {
        "Id": "sha256:4448147d14951b006087823de95050f94574bc406097cb364e45844d35a53702",
...
        "Parent": "sha256:f9873d530588316311ac1d3d15e95487b947f5d8b560e72bdd6eb73a7831b2c4",
...
        "RootFS": {
            "Type": "layers",
            "Layers": [
                "sha256:6c992a0e818a94b78f7a3a271983ffb297244c8d5c2bb997cde1dd3e5b9b11d3",
                "sha256:ee888e79577b34f820d9c857959b1765329f8662e95b517eb36b411cbe101c16"
            ]
        }

/ layer ee88... zien we niet op het fs	, 
/ maar als we image rm, zien we dat 6c99... rm, en nog een	, die wel zien op fs	, ba94... hieronder	, 

[root@almond docker]# find -name "4448147d14951b006087*"
./image/devicemapper/imagedb/content/sha256/4448147d14951b006087823de95050f94574bc406097cb364e45844d35a53702
./image/devicemapper/imagedb/metadata/sha256/4448147d14951b006087823de95050f94574bc406097cb364e45844d35a53702

[root@almond docker]# find -name "f9873d530588316311ac1d*"
./image/devicemapper/imagedb/content/sha256/f9873d530588316311ac1d3d15e95487b947f5d8b560e72bdd6eb73a7831b2c4

[root@almond docker]# find -name "6c992a0e818a94b78f7a3a271983ffb*"
./image/devicemapper/distribution/v2metadata-by-diffid/sha256/6c992a0e818a94b78f7a3a271983ffb297244c8d5c2bb997cde1dd3e5b9b11d3
./image/devicemapper/layerdb/sha256/6c992a0e818a94b78f7a3a271983ffb297244c8d5c2bb997cde1dd3e5b9b11d3

[root@almond docker]# find -name "ee888e79577b34f820d9c857*"
/ vinden we niet	,

[root@almond docker]# ls -ltr image/devicemapper/layerdb/sha256/
drwx------. 2 root root 4096 Aug  3 17:09 6c992a0e818a94b78f7a3a271983ffb297244c8d5c2bb997cde1dd3e5b9b11d3
drwx------. 2 root root 4096 Aug  3 17:23 ba94601ded861da4d872ae82322fc2331b4a23aea167d33adb2fecb1843fa8c8

[root@almond docker]# ls -ltr image/devicemapper/distribution/v2metadata-by-diffid/sha256/ | grep 6c99
-rw-r--r--. 1 root root 132 Jul 23  2016 6c992a0e818a94b78f7a3a271983ffb297244c8d5c2bb997cde1dd3e5b9b11d3
/ TODO
[root@almond docker]# cat image/devicemapper/distribution/v2metadata-by-diffid/sha256/6c992a0e818a94b78f7a3a271983ffb297244c8d5c2bb997cde1dd3e5b9b11d3 
[{"Digest":"sha256:7c91a140e7a1025c3bc3aace4c80c0d9933ac4ee24b8630a6b0b5d8b9ce6b9d4","SourceRepository":"docker.io/library/fedora"}]


[eric@almond study]$ docker image rm my/fedora-study
Untagged: my/fedora-study:latest
Deleted: sha256:4448147d14951b006087823de95050f94574bc406097cb364e45844d35a53702
Deleted: sha256:ba94601ded861da4d872ae82322fc2331b4a23aea167d33adb2fecb1843fa8c8
/ De laatste layer zagen we inderdaad in image/devicemapper/layerdb/sha256/	,


/ 7	. 

/ we doen opnieuw	,

[eric@almond study]$ docker build  -t my/fedora-study .
Sending build context to Docker daemon 2.048 kB
Step 1/2 : FROM fedora
 ---> f9873d530588
Step 2/2 : RUN echo π
 ---> Running in cae1e57ab875
π
 ---> 9b277257d413
Removing intermediate container cae1e57ab875
Successfully built 9b277257d413

[eric@almond study]$ docker image inspect my/fedora-study
[
    {
        "Id": "sha256:9b277257d413edc8cb2035c8e98d54863b20f9acf26ece691761c6cb5553d8d5",
        "Parent": "sha256:f9873d530588316311ac1d3d15e95487b947f5d8b560e72bdd6eb73a7831b2c4",
        "RootFS": {
            "Type": "layers",
            "Layers": [
                "sha256:6c992a0e818a94b78f7a3a271983ffb297244c8d5c2bb997cde1dd3e5b9b11d3",
                "sha256:6137dc778b1aead17e9ad409837d3b03900046fbe1a8b8a3c65fb45b07c6ecd5"
            ]
        }

/ images 9b27... en f987... vind je in devicemapper/imagedb 
/ layers 6c99... en "6137..." vind je in devicemapper/layerdb

/ 13	. 

/ layers	,

/  layer 6137 vinden we niet op het fs, maar dit in de diff file in layer e6a9..., die met layer 6c99... tegelijk is create	,
/ TODO

[root@almond sha256]# pwd
/var/lib/docker/image/devicemapper/layerdb/sha256
[root@almond sha256]# ls -ltr
drwx------. 2 root root 4096 Aug  3 17:09 6c992a0e818a94b78f7a3a271983ffb297244c8d5c2bb997cde1dd3e5b9b11d3
drwx------. 2 root root 4096 Aug  3 17:45 e6a9ce5ca9c01d5b0aa1f30f02ffc164d1848cc2aa90563ed0772ef1d31efe56

/ 1313	. 

[root@almond sha256]# cd e6a9ce5ca9c01d5b0aa1f30f02ffc164d1848cc2aa90563ed0772ef1d31efe56/

[root@almond e6a9ce5ca9c01d5b0aa1f30f02ffc164d1848cc2aa90563ed0772ef1d31efe56]# ls
cache-id  diff  parent  size  tar-split.json.gz

[root@almond e6a9ce5ca9c01d5b0aa1f30f02ffc164d1848cc2aa90563ed0772ef1d31efe56]# cat diff 
sha256:6137dc778b1aead17e9ad409837d3b03900046fbe1a8b8a3c65fb45b07c6ecd5
/ Deze zien we in $ docker inspect	,

[root@almond e6a9ce5ca9c01d5b0aa1f30f02ffc164d1848cc2aa90563ed0772ef1d31efe56]# cat parent 
sha256:6c992a0e818a94b78f7a3a271983ffb297244c8d5c2bb997cde1dd3e5b9b11d3

/ 1313	. 

[root@almond sha256]# cd 6c992a0e818a94b78f7a3a271983ffb297244c8d5c2bb997cde1dd3e5b9b11d3/
[root@almond 6c992a0e818a94b78f7a3a271983ffb297244c8d5c2bb997cde1dd3e5b9b11d3]# cat diff 
sha256:6c992a0e818a94b78f7a3a271983ffb297244c8d5c2bb997cde1dd3e5b9b11d3

/ 13	. 

/ images	,

[root@almond sha256]# cd devicemapper/imagedb/content/sha256/
[root@almond sha256]# ls -ltr
-rw-------. 1 root root  1791 Aug  3 17:45 9b277257d413edc8cb2035c8e98d54863b20f9acf26ece691761c6cb5553d8d5

/ de parent is er al lang	,
[root@almond sha256]# ls f9873d53058831631* -ltr
-rw-------. 1 root root 1771 Jul 23  2016 f9873d530588316311ac1d3d15e95487b947f5d8b560e72bdd6eb73a7831b2c4

/ in de deze files staat wat je ziet met $ docker image inspect	,

/ 7	. 

/ we doen hetzelfde in /home/eric/Devel/Docker2/fedora/study2, met een andere from in de Dockerfile, we zien hele andere layers	,

[eric@almond study2]$ cat ../study/Dockerfile 
from fedora
run ["echo","π"]

[eric@almond study2]$ cat Dockerfile 
from my/fedora-locale
run ["echo","π"]

[eric@almond study2]$ docker build  -t my/fedora-study2 .

[eric@almond study2]$ docker image inspect my/fedora-locale
[
    {
        "Id": "sha256:033337dd16dc83bbb5d8811b1330faff83fe0b79308041d8c9f0cd673f068347",
        "Parent": "sha256:2a4a466a29671e27bf65789003882ee5d8f35447a2b1e1c635d66cb25d682b48",
...
        "RootFS": {
            "Type": "layers",
            "Layers": [
                "sha256:6c992a0e818a94b78f7a3a271983ffb297244c8d5c2bb997cde1dd3e5b9b11d3",
                "sha256:100d2e2e85cba4517decb869c2d53203cfb2bb02b721f5b33076d746b1f0d5df",
                "sha256:c5ca0b4a864ccd14f747b5dacce4c20529467669b7fc126a4f3994041058e18c",
                "sha256:72d3ad75c6662e333572e0352f37b8bb53f02f96da7f65d1cb9f5aee5493d0b5",
                "sha256:c13c731a15e09b25a149445090e593d3509ae603815a221ef83871182ddeccb2",
                "sha256:d8c8a058c2a4a8473886431a8697ea3bf4a826874fe4209c8f9932b29f9be95b"
            ]
        }
    }

/ 13	. 

[root@almond sha256]# pwd
/var/lib/docker/image/devicemapper/layerdb/sha256

[root@almond sha256]# grep 6c992a0e818a94b78f -r *
371d11e0978ef635951e880025fa94895108e4c179d099d6433b7c7f688eec1a/parent:sha256:6c992a0e818a94b78f7a3a271983ffb297244c8d5c2bb997cde1dd3e5b9b11d3
48a7cbb3ac4168ccf8427b76c50a735d29561f83a523cb8808a18e0419fa25a6/parent:sha256:6c992a0e818a94b78f7a3a271983ffb297244c8d5c2bb997cde1dd3e5b9b11d3
58c29c00953f80623471bfaf289a4892ff6a47759eb0802074a48d094cde9ecc/parent:sha256:6c992a0e818a94b78f7a3a271983ffb297244c8d5c2bb997cde1dd3e5b9b11d3
6c992a0e818a94b78f7a3a271983ffb297244c8d5c2bb997cde1dd3e5b9b11d3/diff:sha256:6c992a0e818a94b78f7a3a271983ffb297244c8d5c2bb997cde1dd3e5b9b11d3
6cc59885c18bbd094b094b63cbe97b12048e91b2a06d0d4ff591c43dda957ea8/parent:sha256:6c992a0e818a94b78f7a3a271983ffb297244c8d5c2bb997cde1dd3e5b9b11d3
8d1c4072365d5437250a106cc39ada3829d814920338b580c146b2ef3d3ddbc9/parent:sha256:6c992a0e818a94b78f7a3a271983ffb297244c8d5c2bb997cde1dd3e5b9b11d3
8ebc43a9fd22ce158b1c33cb725335e2ac0c484bf158d048b097c71c33ae1ac7/parent:sha256:6c992a0e818a94b78f7a3a271983ffb297244c8d5c2bb997cde1dd3e5b9b11d3

[root@almond sha256]# grep 100d2e2e85cba4517decb8 -r *
48a7cbb3ac4168ccf8427b76c50a735d29561f83a523cb8808a18e0419fa25a6/diff:sha256:100d2e2e85cba4517decb869c2d53203cfb2bb02b721f5b33076d746b1f0d5df

[root@almond sha256]# grep c5ca0b4a864ccd14f747b5dacce4 -r *
2d2ef6b47fe3e69e680a3bd79769a6e8a86b50188f0f2b7e8ea633155bf48648/diff:sha256:c5ca0b4a864ccd14f747b5dacce4c20529467669b7fc126a4f3994041058e18c

...

/ wat zijn dit voor layers?
/ TODO

/ 13	. 

/ hier zien we images	,

[eric@almond study2]$ docker history my/fedora-study2
IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT
c9e9663e572e        31 minutes ago      echo π                                          0 B                 
033337dd16dc        11 months ago       /bin/sh -c #(nop)  ENV TERM=xterm-256color      0 B                 
2a4a466a2967        11 months ago       /bin/sh -c #(nop)  ENV LANG=en_US.UTF-8         0 B                 
3f0b5b3053fe        11 months ago       dnf -y install net-tools                        23.5 MB             
680e70e1a5f3        11 months ago       dnf -y install procps-ng                        18.6 MB             
a3046016d8ef        11 months ago       dnf -y install vim                              58.4 MB             
f83255d9c393        11 months ago       dnf -y upgrade --refresh --setopt=deltarpm...   486 MB              
de1608558fb0        11 months ago       echo ϐ                                          0 B                 
f9873d530588        3 years ago         /bin/sh -c #(nop) ADD file:eca70e370936ac9...   204 MB              
<missing>           3 years ago         /bin/sh -c #(nop) MAINTAINER Adam Miller <...   0 B     

/ als we de image rm, zien we dat al deze layers blijven	, 

/ je kunt doen	,
$ docker image inspect c9e9663e572e		/ my/fedora-study2
$ docker image inspect 033337dd16dc		/ my/fedora-locale
$ docker image inspect 2a4a466a2967		/ heeft geen tag	,
...
/ je ziet dat die eronder de parent is van die erboven	,	

[eric@almond study2]$ docker image inspect f9873d530588
        "RootFS": {
            "Type": "layers",
            "Layers": [
                "sha256:6c992a0e818a94b78f7a3a271983ffb297244c8d5c2bb997cde1dd3e5b9b11d3"
            ]
        }
[eric@almond study2]$ docker image inspect de1608558fb0
        "RootFS": {
            "Type": "layers",
            "Layers": [
                "sha256:6c992a0e818a94b78f7a3a271983ffb297244c8d5c2bb997cde1dd3e5b9b11d3",
                "sha256:100d2e2e85cba4517decb869c2d53203cfb2bb02b721f5b33076d746b1f0d5df"
            ]
        }

[eric@almond study2]$ docker image inspect a3046016d8ef
        "RootFS": {
            "Type": "layers",
            "Layers": [
                "sha256:6c992a0e818a94b78f7a3a271983ffb297244c8d5c2bb997cde1dd3e5b9b11d3",
                "sha256:100d2e2e85cba4517decb869c2d53203cfb2bb02b721f5b33076d746b1f0d5df",
                "sha256:c5ca0b4a864ccd14f747b5dacce4c20529467669b7fc126a4f3994041058e18c",
                "sha256:72d3ad75c6662e333572e0352f37b8bb53f02f96da7f65d1cb9f5aee5493d0b5"
            ]
        }

[eric@almond study2]$ docker image inspect 680e70e1a5f3
        "RootFS": {
            "Type": "layers",
            "Layers": [
                "sha256:6c992a0e818a94b78f7a3a271983ffb297244c8d5c2bb997cde1dd3e5b9b11d3",
                "sha256:100d2e2e85cba4517decb869c2d53203cfb2bb02b721f5b33076d746b1f0d5df",
                "sha256:c5ca0b4a864ccd14f747b5dacce4c20529467669b7fc126a4f3994041058e18c",
                "sha256:72d3ad75c6662e333572e0352f37b8bb53f02f96da7f65d1cb9f5aee5493d0b5",
                "sha256:c13c731a15e09b25a149445090e593d3509ae603815a221ef83871182ddeccb2"
            ]
        }

[eric@almond study2]$ docker image inspect 3f0b5b3053fe
        "RootFS": {
            "Type": "layers",
            "Layers": [
                "sha256:6c992a0e818a94b78f7a3a271983ffb297244c8d5c2bb997cde1dd3e5b9b11d3",
                "sha256:100d2e2e85cba4517decb869c2d53203cfb2bb02b721f5b33076d746b1f0d5df",
                "sha256:c5ca0b4a864ccd14f747b5dacce4c20529467669b7fc126a4f3994041058e18c",
                "sha256:72d3ad75c6662e333572e0352f37b8bb53f02f96da7f65d1cb9f5aee5493d0b5",
                "sha256:c13c731a15e09b25a149445090e593d3509ae603815a221ef83871182ddeccb2",
                "sha256:d8c8a058c2a4a8473886431a8697ea3bf4a826874fe4209c8f9932b29f9be95b"
            ]
        }

[eric@almond study2]$ docker image inspect 2a4a466a2967
        "RootFS": {
            "Type": "layers",
            "Layers": [
                "sha256:6c992a0e818a94b78f7a3a271983ffb297244c8d5c2bb997cde1dd3e5b9b11d3",
                "sha256:100d2e2e85cba4517decb869c2d53203cfb2bb02b721f5b33076d746b1f0d5df",
                "sha256:c5ca0b4a864ccd14f747b5dacce4c20529467669b7fc126a4f3994041058e18c",
                "sha256:72d3ad75c6662e333572e0352f37b8bb53f02f96da7f65d1cb9f5aee5493d0b5",
                "sha256:c13c731a15e09b25a149445090e593d3509ae603815a221ef83871182ddeccb2",
                "sha256:d8c8a058c2a4a8473886431a8697ea3bf4a826874fe4209c8f9932b29f9be95b"
            ]
        }
/ ENV geeft geen layer erbij	, RUN wel, zoals we hierboven zagen	,


[eric@almond study2]$ docker image inspect 2a4a466a2967
/ en	,
[eric@almond study2]$ docker image inspect 033337dd16dc
        "RootFS": {
            "Type": "layers",
            "Layers": [
                "sha256:6c992a0e818a94b78f7a3a271983ffb297244c8d5c2bb997cde1dd3e5b9b11d3",
                "sha256:100d2e2e85cba4517decb869c2d53203cfb2bb02b721f5b33076d746b1f0d5df",
                "sha256:c5ca0b4a864ccd14f747b5dacce4c20529467669b7fc126a4f3994041058e18c",
                "sha256:72d3ad75c6662e333572e0352f37b8bb53f02f96da7f65d1cb9f5aee5493d0b5",
                "sha256:c13c731a15e09b25a149445090e593d3509ae603815a221ef83871182ddeccb2",
                "sha256:d8c8a058c2a4a8473886431a8697ea3bf4a826874fe4209c8f9932b29f9be95b"
            ]
        }

/ maar ook	, 
[eric@almond study2]$ docker image inspect c9e9663e572e

        "RootFS": {
            "Type": "layers",
            "Layers": [
                "sha256:6c992a0e818a94b78f7a3a271983ffb297244c8d5c2bb997cde1dd3e5b9b11d3",
                "sha256:100d2e2e85cba4517decb869c2d53203cfb2bb02b721f5b33076d746b1f0d5df",
                "sha256:c5ca0b4a864ccd14f747b5dacce4c20529467669b7fc126a4f3994041058e18c",
                "sha256:72d3ad75c6662e333572e0352f37b8bb53f02f96da7f65d1cb9f5aee5493d0b5",
                "sha256:c13c731a15e09b25a149445090e593d3509ae603815a221ef83871182ddeccb2",
                "sha256:d8c8a058c2a4a8473886431a8697ea3bf4a826874fe4209c8f9932b29f9be95b"
            ]
        }

/ we zien in layerdb/sha256/ dan ook maar 1 nieuwe layer	,

/ 13	. 

/ maar als we 	,
[eric@almond study]$ docker build  -t my/fedora-study .

[eric@almond study]$ docker history my/fedora-study
IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT
e0507eb7b23b        2 minutes ago       echo π                                          0 B                 
f9873d530588        3 years ago         /bin/sh -c #(nop) ADD file:eca70e370936ac9...   204 MB              
<missing>           3 years ago         /bin/sh -c #(nop) MAINTAINER Adam Miller <...   0 B        

[eric@almond study]$ docker image inspect f9873d530588
        "RootFS": {
            "Type": "layers",
            "Layers": [
                "sha256:6c992a0e818a94b78f7a3a271983ffb297244c8d5c2bb997cde1dd3e5b9b11d3"
            ]
        }
[eric@almond study]$ docker image inspect e0507eb7b23b
        "RootFS": {
            "Type": "layers",
            "Layers": [
                "sha256:6c992a0e818a94b78f7a3a271983ffb297244c8d5c2bb997cde1dd3e5b9b11d3",
                "sha256:4ae22624afa32ba7e46bbfb1b8ad2cdca2cdc432e1bc4cc75e0e8e654534022b"
            ]
        }

[root@almond devicemapper]# ls -ltr layerdb/sha256/
drwx------. 2 root root 4096 Aug  3 17:09 6c992a0e818a94b78f7a3a271983ffb297244c8d5c2bb997cde1dd3e5b9b11d3
drwx------. 2 root root 4096 Aug  3 22:25 ccb89a516e2dd3578865694da48110a0ee366af5aadc02d67dc32919d84e242c

[root@almond devicemapper]# cat layerdb/sha256/ccb89a516e2dd3578865694da48110a0ee366af5aadc02d67dc32919d84e242c/diff 
sha256:4ae22624afa32ba7e46bbfb1b8ad2cdca2cdc432e1bc4cc75e0e8e654534022b

/ 13	. 

/ we zien dat als we in een Dockerfile
RUN ["echo","π"]
RUN ["echo","ρ"]
/ dat we maar 1 layer zien ipv 2
/ TODO

/ 7	. 

/ we maken zelf my/hello-world

[eric@almond study3]$ pwd
/home/eric/Devel/Docker2/fedora/study3

[eric@almond study3]$ cat hello.c
#include<stdio.h>
int main(){
	printf("%s\n","Hello World!");
	return 0;
}

[eric@almond study3]$ gcc -o hello -static -L /usr/lib/debug/usr/lib64/ hello.c

[eric@almond study3]$ docker build -t my/hello-world .

[eric@almond study3]$ docker run --rm -ti my/hello-world
Hello World!

[eric@almond study3]$ docker inspect my/hello-world
        "RootFS": {
            "Type": "layers",
            "Layers": [
                "sha256:78ae1294664f44a913889fad248c620e525c9e310ae4c060d9000b4bab7b870c"
            ]
        }
[eric@almond study3]$ docker rmi my/hello-world
Untagged: my/hello-world:latest
Deleted: sha256:799f1fa6fadcf50688bb2cfa726a0be41d196d33db3ff7488e75b2c201708464
Deleted: sha256:8c948e3fa3b645be3c1f62a1b0ae79f9e996361b44b34e9f1f32c29a8bee4ccf
Deleted: sha256:78ae1294664f44a913889fad248c620e525c9e310ae4c060d9000b4bab7b870c

/ we zien maar 1 layer in $ docker inspect my/hello-world	,
/ in $ docker inspect hello-world zien we 2 layers	,
/ TODO

/ als we my/hello-world rm, zien we 3 layers	,
/ TODO



/ Einde HOW IMAGES ARE BUILD LAYERS

/ DOCKER POSTGRES AGAIN

/ 7	. 

/ connect to pg in een container	,

/ we moeten 2 dingen doen	,

-bash-4.3$ vi data/postgresql.conf 
listen_addresses = '*'
-bash-4.3$ pg_ctl restart

-bash-4.3$ vi data/pg_hba.conf 
host all all 172.17.0.1/32 trust			/ gateway van docker network bridge
-bash-4.3$ pg_ctl reload

/ dan	vanaf de host,
[eric@almond my]$ psql -h 172.17.0.2 -U postgres
psql (9.6.8, server 9.5.7)
Type "help" for help.

postgres=# \q
/ OK	,

/ 13	. 

/ in de container	,

-bash-4.3$ ifconfig
eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 172.17.0.2  netmask 255.255.0.0  broadcast 0.0.0.0

/ op de host	,

[eric@almond my]$ ifconfig |less
docker0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 172.17.0.1  netmask 255.255.0.0  broadcast 0.0.0.0

/ 13	. 

/ als we de hba conf NIET hebben set 
host all all 172.17.0.1/32 trust

/ dan	,
[eric@almond my]$ psql -h 172.17.0.2 -U postgres
psql: FATAL:  no pg_hba.conf entry for host "172.17.0.1", user "postgres", database "postgres", SSL off

/ hba staat voor host-based authentication	,

/ 13	. 

/ op de host doen we	,
[eric@almond my]$ docker network inspect bridge
[
    {
        "Name": "bridge",
...
        "IPAM": {
...
            "Config": [
                {
                    "Subnet": "172.17.0.0/16",
                    "Gateway": "172.17.0.1"

/ 13	 .

/ wat is de gateway van het netwerk van de host?

/ we hebben dit NIET nodig	,
/ als we $ psql -h 192.168.123.182 willen doen, moeten we deze machine access geven in hba	, en niet de gateway 192.168.123.254	,
/ als pg in docker draait, moeten we de gateway van het docker netwerk bridge hba geven, WH omdat je van buiten komt	,
/ TODO 

/ lees	,
https://www.unixmen.com/how-to-find-default-gateway-in-linux/

/ er zijn verschillende mogelijkheden	,

[eric@almond my]$ route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.123.254 0.0.0.0         UG    100    0        0 enp0s25
...
192.168.123.0   0.0.0.0         255.255.255.0   U     100    0        0 enp0s25

[eric@almond my]$ ip route show
default via 192.168.123.254 dev enp0s25 proto static metric 100 
192.168.123.0/24 dev enp0s25 proto kernel scope link src 192.168.123.182 metric 100

[eric@almond my]$ netstat -rn
Kernel IP routing table
Destination     Gateway         Genmask         Flags   MSS Window  irtt Iface
0.0.0.0         192.168.123.254 0.0.0.0         UG        0 0          0 enp0s25
192.168.123.0   0.0.0.0         255.255.255.0   U         0 0          0 enp0s25

[eric@almond my]$ cat /etc/sysconfig/network-scripts/ifcfg-enp0s25 
/ we zien GEEN 
GATEWAY ...

/ de gateway is dus	192.168.123.254

[eric@almond my]$ ifconfig
enp0s25: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 192.168.123.182  netmask 255.255.255.0  broadcast 192.168.123.255

/ 13	. 

/ op de host	,

[eric@almond my]$ psql -h 192.168.123.182 -U postgres
psql: could not connect to server: Connection refused
	Is the server running on host "192.168.123.182" and accepting
	TCP/IP connections on port 5432?

[eric@almond postgres3a]$ sudo su - postgres
-bash-4.4$ vi data/pg_hba.conf 
host all all 192.168.123.254/24 trust		/ 254 maakt niet uit	, 
/ of	,
host all all 192.168.123.182/32 trust
-bash-4.4$ pg_ctl  reload

eric@almond my]$ psql -h 192.168.123.182 -U postgres
/ OK	,

/ 13	. 

/ Hij vraagt om ww als we md5 geven ipv trust	,
/ dat geldt voor socket of tcp verbindingen	,

-bash-4.4$ vi data/pg_hba.conf 
local   all             all                                    md5
-bash-4.4$ pg_ctl  reload

[eric@almond my]$ psql
Password: 

/ 13	. 

/ listen_address='*' is dat hij listens naar alle hosts,	 dus ook 192.168.123.182	,

/ dit is de default	, dus je kunt hem ook weglaten	,
listen_addresses = 'localhost'  

/ we hebben op de host	,

-bash-4.4$ vi data/pg_hba.conf 
local all all trust 
host all all 192.168.123.182/32 trust

/ dan	,
[eric@almond my]$ psql -U postgres
/ OK	,
[eric@almond my]$ psql -h 192.168.123.182 -U postgres
psql: could not connect to server: Connection refused
	Is the server running on host "192.168.123.182" and accepting
	TCP/IP connections on port 5432?

/ nu doen we	,
-bash-4.4$ vi data/postgresql.conf 
listen_addresses = '*'
-bash-4.4$ pg_ctl restart

[eric@almond my]$ psql -U postgres
/ OK	,
[eric@almond my]$ psql -h 192.168.123.182 -U postgres
/ OK	,

/ 13	. 

/ we kunnen ook	,
-bash-4.4$ vi data/postgresql.conf 
listen_addresses = 'localhost,192.168.123.182'
-bash-4.4$ pg_ctl restart

[eric@almond my]$ psql -U postgres
/ OK  ,
[eric@almond my]$ psql -h 192.168.123.182 -U postgres
/ OK  ,













 




/ 7	. 

/ in een bash 	,
[eric@almond postgres3a]$ docker build --rm -t my/fedora-postgres3a .
Step 9/10 : EXPOSE 5432
/ Hoeft NIET	,
...
[eric@almond postgres3a]$ docker run --rm my/fedora-postgres3a 

/ in andere bash	,
[eric@almond java12-study]$ docker exec -ti ecstatic_fermat bash
$ ps auxw
...
bash-4.3$ ifconfig
eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 172.17.0.2  netmask 255.255.0.0  broadcast 0.0.0.0
...

/ in nog andere bash	, 
[eric@almond my]$ psql -h 172.17.0.2
psql (9.6.8, server 9.5.7)
Type "help" for help.

eric=> 
/ in Dockerfile staat dat eric een database eric heeft,	 dus gaat meteen goed	,
/ of	,
[eric@almond my]$ psql -U postgres
psql (9.6.8)
Type "help" for help.

postgres=# 

/ 7	. 

/ self	,

/ lees  , fedora/postgres3a/Dockerfile

[eric@almond postgres3a]$ docker run --network=my-bridge -ti my/fedora-locale bash
[root@c6220566d120 /]# dnf -y install postgresql-server postgresql-contrib
[root@c6220566d120 /]# dnf -y install less hostname iputils
[root@c6220566d120 /]# su - postgres
-bash-4.3$ env				/ iedere user heeft eigen env	,
...
PWD=/var/lib/pgsql
HOME=/var/lib/pgsql
LOGNAME=postgres
PGDATA=/var/lib/pgsql/data
... 
-bash-4.3$ initdb --locale=en_US.UTF8
-bash-4.3$  pg_ctl -w start
-bash-4.3$ psql
postgres=# \l
                                  List of databases
   Name    |  Owner   | Encoding |   Collate   |    Ctype    |   Access privileges

-----------+----------+----------+-------------+-------------+---------------------
--
 postgres  | postgres | UTF8     | en_US.utf-8 | en_US.utf-8 |
...
postgres=# \c - eric
You are now connected to database "postgres" as user "eric".
postgres=# \q

-bash-4.3$ psql -U eric postgres -c "create database eric"  
/ je moet een db (hier postgres) opgeven waartoe naar connect , om daarna het command uit te voeren ,

/ 7	. 

/ 13	. 

/ container 172.17.0.2	,
[eric@almond postgres3a]$ docker run  -ti my/fedora-locale bash
[root@269fbe154315 /]# dnf -y install postgresql-server postgresql-contrib
[root@269fbe154315 /]# dnf -y install less hostname iputils
[root@269fbe154315 /]# su - postgres
-bash-4.3$ initdb --locale=en_US.UTF8
-bash-4.3$ pg_ctl -w start
-bash-4.3$ psql -c "create role eric createdb login password 'eric'"
-bash-4.3$ psql -U eric postgres -c "create database eric"
-bash-4.3$ pg_ctl stop
-bash-4.3$ ifconfig
eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 172.17.0.2  netmask 255.255.0.0  broadcast 0.0.0.0
-bash-4.3$ vi data/pg_hba.conf 
host all all 172.17.0.2/24 trust
-bash-4.3$ vi data/postgresql.conf 
listen_addresses = '*'
/ of	,
listen_addresses = '172.17.0.2'
-bash-4.3$ pg_ctl -w start
-bash-4.3$ psql -h 172.17.0.3
/ OK	,

/ na $ dnf -y install postgresql-server postgresql-contrib is er
/ 1313	. 
postgres user	,  
# su - postgres
-bash-4.3$ id
uid=26(postgres) gid=26(postgres) groups=26(postgres)
/ 1313	. 
/ Nu weet initdb waar data/ is	,
-bash-4.3$ env
PGDATA=/var/lib/pgsql/data

/ 13	. 

/ als we kijken in de container	,
-bash-4.3$ ls -l /var/lib
drwx------. 4 postgres postgres 4096 Oct 12 20:01 pgsql

/ dus we kunnen	,
$ docker run -v $(pwd)/pgsql:/var/lib/pgsql ...
/ of is dit te vroeg, en moeten we volume use in Dockerfile?
/ TODO 
/ WH is /var/lib/pgsql er niet (later pas), en kan dit ook helemaal niet	,





/ container 172.17.0.3	,
[eric@almond postgres3a]$ docker run  -ti my/fedora-locale bash
[root@269fbe154315 /]# dnf -y install postgresql-server postgresql-contrib
[root@269fbe154315 /]# dnf -y install less hostname iputils
[root@269fbe154315 /]# su - postgres
-bash-4.3$ initdb --locale=en_US.UTF8
-bash-4.3$ pg_ctl -w start
-bash-4.3$ psql -c "create role eric createdb login password 'eric'"
-bash-4.3$ psql -U eric postgres -c "create database eric"
-bash-4.3$ pg_ctl stop
-bash-4.3$ ifconfig
eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 172.17.0.3  netmask 255.255.0.0  broadcast 0.0.0.0
-bash-4.3$ vi data/pg_hba.conf 
host all all 172.17.0.3/24 trust
-bash-4.3$ vi data/postgresql.conf 
listen_addresses = '*'
/ of	,
listen_addresses = '172.17.0.3'
-bash-4.3$ pg_ctl -w start
-bash-4.3$ psql -h 172.17.0.2
/ OK	,

/ 13	. 

//////////////////////////////////////////////////
/ we kunnen bij listen_address '*', of host zelf, '172.17.0.2' op node2,
/ dit zijn de intefaces op de machine zelf waarop hij luistert	,
/ als 172.17.0.2 het listen& is 	, dan alles wat op 172.17.0.2 binnenkomt	, dat verwerkt hij	,
/ dus node 3 kan dan $ psql -h node2
/ als het listen& * is, luistert hij op alle interfaces op de machine, ook socket interface	,

/ als listen_address 172.17.0.2 is	, dan gaat $ psql toch OK (socket interface),
/ TODO

/ lees	,
https://www.postgresql.org/docs/9.6/runtime-config-connection.html
Specifies the TCP/IP address(es) on which the server is to listen for connections from client applications.
listen_addresses controls which interfaces accept connection attempts, which can help prevent repeated malicious connection requests on insecure network interfaces. 


/ 13	. 

-bash-4.3$ ifconfig
eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 172.17.0.2  netmask 255.255.0.0  broadcast 0.0.0.0
-bash-4.3$ hostname
269fbe154315
-bash-4.3$ cat /etc/hosts
127.0.0.1	localhost
172.17.0.2	269fbe154315

-bash-4.3$ ifconfig
eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 172.17.0.3  netmask 255.255.0.0  broadcast 0.0.0.0
-bash-4.3$ hostname
a0060b1b5ac5
-bash-4.3$ cat /etc/hosts
127.0.0.1 localhost
172.17.0.3	a0060b1b5ac5

/ we kunnen bijv op 3 2 toevoegen in de hosts file	,
/ we moeten wel root worden, om de hosts file te kunnen edit	,
/ als we de hosts file edit, dan meteen OK	, we hoeven geen process te signal	, 
/ op 172.17.0.3	,
[root@a0060b1b5ac5 /]# cat /etc/hosts
127.0.0.1	localhost
172.17.0.2 	269fbe154315		 <-
172.17.0.3	a0060b1b5ac5
/ dan kunnen we, let op -U postgres	,
[root@a0060b1b5ac5 /]# psql -h 269fbe154315 -U postgres
/ OK,
[root@a0060b1b5ac5 /]# psql -h 269fbe154315
psql: FATAL:  role "root" does not exist

/ 13	. 

/ we doen op 2 en 3	, 
# vi /etc/hosts
127.0.0.1       localhost
172.17.0.2      269fbe154315 node2
172.17.0.3      a0060b1b5ac5 node3
[root@a0060b1b5ac5 /]# su - postgres

/ op 3	,
-bash-4.3$ psql -h node2
/ OK	,

/ 13	. 

/ op 2	,
-bash-4.3$ psql -c "create role replicator replication login password 'replicator'"
/ replication is net als createdb, login	, een actie	,
-bash-4.3$ psql -c '\du'
                                    List of roles
 Role name  |                         Attributes                         | Member o
f 
------------+------------------------------------------------------------+---------
--
 eric       | Create DB                                                  | {}
 postgres   | Superuser, Create role, Create DB, Replication, Bypass RLS | {}
 replicator | Replication                                                | {}




/ 13	. 

/ TODOS

/ 1313	. 

/ create role encrypted password

/ 1313	. 













/ Einde DOCKER POSTGRES AGAIN

/ DOCKER POSTGRES VOLUME

/ google,
docker volume owner
/ lees,
https://devops.stackexchange.com/questions/4540/how-to-change-the-owner-of-volume-directory-in-dockerfile
->
https://chapeau.freevariable.com/2014/08/docker-uid.html
docker run --privileged=true -e DEV_UID=$UID -e DEV_GID=$GID -i -t -v ${HOME}/devel:/devel willb/java-dev:centos7-spark-uid

/ lees over useradd	,
http://www.labtestproject.com/linuse/adding_user.html

/ 13	. 

[eric@almond permissionstest]$ less ../../fedora/postgres3a/Dockerfile 

run dnf -y install postgresql-server postgresql-contrib	 # create user postgres	,
user postgres
env PGDATA=/var/lib/pgsql/data
run initdb --locale=en_US.UTF8;\
...
/ TODO


[eric@almond permissionstest]$ docker container inspect friendly_jennings 
...
                "DeviceName": "docker-253:1-2504345-3ddd82001f8d23a970440ba22671e3dc1352b790ca189640480367eac17c1aa4",

[root@almond ~]# ls -l /var/lib/docker/devicemapper/mnt/3ddd82001f8d23a970440ba22671e3dc1352b790ca189640480367eac17c1aa4/rootfs/var/lib
total 44
...
drwx------. 4 postgres postgres 4096 Oct  9 19:48 pgsql
...
drwxr-xr-x. 3 root     root     4096 Jun 16  2016 selinux
/ vrijwel alles is van root, behalve pgsql en alles daarbinnen	,

/ 13	

/ google	, 
docker run as user
/ lees,
https://medium.com/redbubble/running-a-docker-container-as-a-non-root-user-7d2e00f8ee15

docker container run --rm -it \
  -v $(app):/app \                          # Mount the source code
  --workdir /app \                          # Set the working dir
  --user 1000:1000 \                        # Run as the given user
  my-docker/my-build-environment:latest \   # Our build env image
  make assets                               # ... and the command!

So instead of setting --user 1000:1000, we could use subshells to set 
--user $(id -u):$(id -g). 

/ 1313	.	 

[eric@almond test]$ docker run --rm -v $(pwd)/data:/data -ti my/fedora-locale bash
/ OK, 
/ we moeten heel heel path opgeven voor de dir op de host: $(pwd)/data
/ hij wordt create als je $ docker run doet	, maar hij en alles er in is wel van root	, omdat dat de user is de container	,

/ TODO --user $(id -u):$(id -g)

Your user will be $HOME-less








/ Einde DOCKER POSTGRES VOLUME

/ DOCKER COMPOSE

[eric@almond composetest]$ pwd
/home/eric/Devel/Docker2/compose/composetest

[eric@almond part3]$ cd ../../compose/composetest/
[eric@almond composetest]$ docker-compose up
Creating network "composetest_default" with the default driver
Creating composetest_redis_1 ... 
Creating composetest_web_1 ... 
Creating composetest_web_1
Creating composetest_web_1 ... done
Attaching to composetest_redis_1, composetest_web_1
redis_1  | 1:C 11 Oct 2019 19:12:52.480 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo
redis_1  | 1:C 11 Oct 2019 19:12:52.480 # Redis version=5.0.3, bits=64, commit=00000000, modified=0, pid=1, just started
redis_1  | 1:C 11 Oct 2019 19:12:52.480 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf
redis_1  | 1:M 11 Oct 2019 19:12:52.483 * Running mode=standalone, port=6379.
redis_1  | 1:M 11 Oct 2019 19:12:52.484 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.
redis_1  | 1:M 11 Oct 2019 19:12:52.484 # Server initialized
redis_1  | 1:M 11 Oct 2019 19:12:52.484 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add 'vm.overcommit_memory = 1' to /etc/sysctl.conf and then reboot or run the command 'sysctl vm.overcommit_memory=1' for this to take effect.
redis_1  | 1:M 11 Oct 2019 19:12:52.484 # WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command 'echo never > /sys/kernel/mm/transparent_hugepage/enabled' as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled.
redis_1  | 1:M 11 Oct 2019 19:12:52.484 * Ready to accept connections
web_1    |  * Serving Flask app "app" (lazy loading)
web_1    |  * Environment: production
web_1    |    WARNING: Do not use the development server in a production environment.
web_1    |    Use a production WSGI server instead.
web_1    |  * Debug mode: on
web_1    |  * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)
web_1    |  * Restarting with stat
web_1    |  * Debugger is active!
web_1    |  * Debugger PIN: 135-645-034

/ in ander console	,
[eric@almond composetest]$ docker container ls  -a
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES
be1534873279        composetest_web     "python app.py"          2 minutes ago       Up 2 minutes        0.0.0.0:5000->5000/tcp   composetest_web_1
2eed0bc316dc        redis:alpine        "docker-entrypoint..."   2 minutes ago       Up 2 minutes        6379/tcp                 composetest_redis_1

/ 13	. 

[eric@almond composetest]$  docker-compose down
Stopping composetest_web_1   ... done
Stopping composetest_redis_1 ... done
Removing composetest_web_1   ... done
Removing composetest_redis_1 ... done
Removing network composetest_default





/ Einde DOCKER COMPOSE

/ DOCKER COMPOSE POSTGRES

/ lees	,
https://hackernoon.com/docker-compose-install-postgresql-for-local-development-environment-ph293zxd



/ Einde DOCKER COMPOSE POSTGRES


/ DOCKER

/ 7	. 

/ build, run, attach (exec)	, command substitution	, 

/ 13	. 

[eric@almond postgres3a]$ pwd
/home/eric/Devel/Docker2/fedora/postgres3a
[eric@almond postgres3a]$ less Dockerfile 
...
#entrypoint ["postgres"]
cmd ["postgres"]

[eric@almond postgres3a]$ docker build -t my/fedora-postgres3a .
[eric@almond postgres3a]$ docker run -it --rm my/fedora-postgres3a bash
bash-4.3$ exit
exit
/ OK,
/ postgres is installed, niet started	,

/ 13	. 

/ we kunnen ook attach,

/ In Dockerfile staat nog steeds	, en we hebben niet opnieuw build,	
cmd ["pg_ctl","-w","start"]
/ daarom moeten we zelf het command: postgres geven	,

[eric@almond postgres3a]$ docker run -it --rm my/fedora-postgres3a bash
bash-4.3$ postgres
LOG:  redirecting log output to logging collector process
HINT:  Future log output will appear in directory "pg_log".

/ in andere console,
[eric@almond postgres3a]$ docker exec -ti modest_perlman bash
bash-4.3$ ps aux
USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
postgres     7  0.0  0.1 344964 19792 ?        S+   19:59   0:00 postgres
postgres     8  0.0  0.0 197828  2512 ?        Ss   19:59   0:00 postgres: logger process  
postgres    10  0.0  0.0 344964  3332 ?        Ss   19:59   0:00 postgres: checkpointer process  
postgres    11  0.0  0.0 344964  4032 ?        Ss   19:59   0:00 postgres: writer process  
postgres    12  0.0  0.0 344964  3392 ?        Ss   19:59   0:00 postgres: wal writer process  
postgres    13  0.0  0.0 345400  5864 ?        Ss   19:59   0:00 postgres: autovacuum launcher process  
postgres    14  0.0  0.0 199948  2476 ?        Ss   19:59   0:00 postgres: stats collector process  


/ 13	. 

/ als we entrypoint use ipv cmd, kunnen we zien het cml substitute met bijv: bash,

[eric@almond postgres3a]$ less Dockerfile 
...
entrypoint ["postgres"]
#cmd ["postgres"]
/ dan werkt NIET	, 
[eric@almond postgres3a]$ docker run -it --rm my/fedora-postgres3a bash
postgres: invalid argument: "bash"

/ wat wel kan met entrypoint is	,
[eric@almond postgres3a]$ docker run -it --rm my/fedora-postgres3a
/ en in andere console,	
[eric@almond postgres3a]$ docker exec -ti infallible_wilson bash
bash-4.3$ 

/ lees,
https://docs.docker.com/engine/reference/builder/#entrypoint
...
Understand how CMD and ENTRYPOINT interact
CMD will be overridden when running the container with alternative arguments.

/ 13	. 

/ werkt NIET,
cmd ["pg_ctl","-w","start"]

[eric@almond postgres3a]$ less Dockerfile 
...
#entrypoint ["postgres"]
#cmd ["postgres"]
cmd ["pg_ctl","-w","start"]

/ werkt NIET,
[eric@almond postgres3a]$ docker run -it --rm my/fedora-postgres3a
waiting for server to start....LOG:  redirecting log output to logging collector process
HINT:  Future log output will appear in directory "pg_log".
 done
server started
[eric@almond postgres3a]$
/ er is geen container meer	,

/ 13	. 

/ je kunt bij TAB 
docker stop 
docker exec -ti  
/ de container moet er wel zijn, dus bij docker run  kan het niet	,

/ 13	. 



[eric@almond postgres3a]$ cat Dockerfile 
user postgres
cmd ["postgres"]
/ al maakt dat niet uit, want we gaan hem substitude,	
[eric@almond postgres3a]$ docker build -t my/fedora-postgres3a .
bash-4.3$ whoami
postgres

/ WH omdat in de Dockerfile 
user postgres
/ TODO

/ ook, om te kijken wat er gebeurt	,
[eric@almond postgres3a]$ docker exec -ti condescending_saha bash
bash-4.3$ ps aux
USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
postgres     1  0.0  0.0 119916  3416 ?        Ss+  20:19   0:00 bash
postgres     8  0.0  0.0 119916  3472 ?        Ss   20:20   0:00 bash
postgres    18  0.0  0.0 150008  3676 ?        R+   20:22   0:00 ps aux

/ we geven in 1ste console	,
bash-4.3$ postgres
LOG:  redirecting log output to logging collector process
HINT:  Future log output will appear in directory "pg_log".

/ in 2de	,
bash-4.3$ ps aux
USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
postgres     1  0.0  0.0 119916  3416 ?        Ss   20:19   0:00 bash
postgres     8  0.0  0.0 119916  3472 ?        Ss   20:20   0:00 bash
postgres    19  0.7  0.1 344964 20120 ?        S+   20:22   0:00 postgres
postgres    20  0.0  0.0 197828  2660 ?        Ss   20:22   0:00 postgres: logger process  
postgres    22  0.0  0.0 344964  3440 ?        Ss   20:22   0:00 postgres: checkpointer process  
postgres    23  0.0  0.0 344964  3440 ?        Ss   20:22   0:00 postgres: writer process  
postgres    24  0.0  0.0 344964  3440 ?        Ss   20:22   0:00 postgres: wal writer process  
postgres    25  0.0  0.0 345400  6024 ?        Ss   20:22   0:00 postgres: autovacuum launcher process  
postgres    26  0.0  0.0 199948  2624 ?        Ss   20:22   0:00 postgres: stats collector process  
postgres    27  0.0  0.0 150008  3704 ?        R+   20:23   0:00 ps aux
/ OK,
bash-4.3$ pg_ctl stop
waiting for server to shut down.... done
server stopped
bash-4.3$ ps aux
USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
postgres     1  0.0  0.0 119916  3416 ?        Ss+  20:19   0:00 bash
postgres     8  0.0  0.0 119916  3476 ?        Ss   20:20   0:00 bash
postgres    30  0.0  0.0 150008  3636 ?        R+   20:24   0:00 ps aux

/ in 1ste console	,
/ prompt komt terug	,
bash-4.3$ 
/ nu doen we niet postgres, maar pg_ctl start	,
bash-4.3$ pg_ctl start
server starting
bash-4.3$ LOG:  redirecting log output to logging collector process
HINT:  Future log output will appear in directory "pg_log".
/ geef Enter,
bash-4.3$ 
/ de prompt komt terug, en we kunnen nu ook in deze console kijken,
bash-4.3$ ps aux
USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
postgres     1  0.0  0.0 119916  3428 ?        Ss   20:19   0:00 bash
postgres     8  0.0  0.0 119916  3476 ?        Ss+  20:20   0:00 bash
postgres    33  0.0  0.1 344964 19944 ?        S    20:25   0:00 /usr/bin/postgr
postgres    34  0.0  0.0 197828  2484 ?        Ss   20:25   0:00 postgres: logge
postgres    36  0.0  0.0 344964  3444 ?        Ss   20:25   0:00 postgres: check
postgres    37  0.0  0.0 344964  4908 ?        Ss   20:25   0:00 postgres: write
postgres    38  0.0  0.0 344964  3444 ?        Ss   20:25   0:00 postgres: wal w
postgres    39  0.0  0.0 345400  4516 ?        Ss   20:25   0:00 postgres: autov
postgres    40  0.0  0.0 199948  2508 ?        Ss   20:25   0:00 postgres: stats
postgres    48  0.0  0.0 150008  3528 ?        R+   20:31   0:00 ps aux

/ In Dockerfile's cmd werkt 'pg_ctl start' niet, maar op de command line wel	,
/ ook als we de shell form use,	 werkt het niet	,
$ cat Dockerfile	,
cmd pg_ctl -w start

/ met pg_ctl wordt postgres in de background gestart, en blijkbaar werkt dat niet in Dockerfile's cmd	,
/ met cmd postgres wordt postgres in foreground called, en dat zie je ook, als je in de container daarna Enter geeft, gebeurt er niets,	 

/ 13	. 

/ in Dockerfile	,
cmd ["postgres"]

[eric@almond postgres3a]$ docker run -it --rm my/fedora-postgres3a
/ OK,
/ je kunt hem stoppen met 
ctrl+c
/ als je bash als cmd , dan kun je op de prompt 
bash-4.3$ exit


/ 13	. 

/ maak conn met pg vanuit andere container,	
/ start postgres container, met postgres	, 
/ start andere postgres container, met bash	, zodat we psql hebben; start hem eerst als root, omdat we /etc/hosts moeten aanpassen	, en dan later in de container gaan we weer over op postgres user,

/ in Dockerfile	,
cmd ["postgres"]

[eric@almond postgres3a]$ docker run -it --rm my/fedora-postgres3a 
/ OK,
/ 

[eric@almond postgres3a]$ docker run -u root -it --rm my/fedora-postgres3a bash
[root@19e6a550e13c /] # 
/ andere container,	


/ Intermezzo 

/ we moeten de hostname weten van de postgres container, want die moeten we in /etc/hosts in de bash container zetten, 

[eric@almond postgres3a]$ docker inspect sharp_booth 
        "Config": {
            "Hostname": "9f41c4dc24f1",
            "Cmd": [
                "postgres"
            ],

[eric@almond postgres3a]$ docker inspect focused_wiles 
        "Config": {
            "Hostname": "53677b7874b6",
            "Cmd": [
                "bash"
            ],

/ Einde Intermezzo

/ ook attach we aan de postgres container, om de /etc/hosts file te lezen	,
[eric@almond postgres3a]$ docker exec -ti sharp_booth bash
bash-4.3$ cat /etc/hosts
...
172.17.0.2	9f41c4dc24f1			/ zelf,

/ docker zet altijd de host zelf in /etc/hosts	,

/ deze line cp we in de /etc/hosts/ van de bash container,	
[root@19e6a550e13c /]# vi /etc/hosts
...
172.17.0.3      19e6a550e13c 		/ zelf,
172.17.0.2      9f41c4dc24f1 		/ postgres container,
/ ga over op user postgres	,
[root@19e6a550e13c /]# su - postgres
-bash-4.3$ psql -h 9f41c4dc24f1 
psql (9.5.7)
Type "help" for help.

postgres=# 
/ OK,

/ je kunt ook het ip adres van de target gebruiken bij -h 	, 

/ 13	. 

/ we start postgres container, 
/ we attach, om postgresql.conf of pg_hba.conf aan te passen,
/ we connect met pg in de container vanaf de host	,

[eric@almond postgres3a]$ docker run -it --rm my/fedora-postgres3a 
...

[eric@almond postgres3a]$ docker exec -ti goofy_spence bash
/ we zijn weliswaar postgres, maar we starten niet in de home dir van postgres, maar in /	, 
/ TODO
bash-4.3$ cd 
bash-4.3$ pwd
/var/lib/pgsql
bash-4.3$ cd data
bash-4.3$ ifconfig
        inet 172.17.0.2  netmask 255.255.0.0  broadcast 0.0.0.0
bash-4.3$ vi pg_hba.conf 
#host all all 192.168.123.182/32 trust			/ deze niet	,
host all all 172.17.0.1/32 trust			/ <-
#host all all 0.0.0.0/0 trust				/ ook OK,
bash-4.3$ pg_ctl reload
server signaled


[eric@almond postgres3a]$ ifconfig
docker0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 172.17.0.1  netmask 255.255.0.0  broadcast 0.0.0.0
np0s25: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 192.168.123.182  netmask 255.255.255.0  broadcast 192.168.123.255


/ op almond	,
[eric@almond postgres3a]$ psql -h 172.17.0.2 -U postgres
postgres=# 












 





/ Einde DOCKER






