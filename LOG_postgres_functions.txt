/ 7	. 

/ lees	,
https://www.postgresql.org/docs/9.6/queries-with.html

WITH provides a way to write auxiliary statements for use in a larger query. These statements, which are often referred to as Common Table Expressions or CTEs, can be thought of as defining temporary tables that exist just for one query.

/ een with stmt hoort bij 1 query	,

with recursive t(n)as(
		values(1)
	union all
		select n+1
		from t
		where n<100
)
select sum(n)
from t;

/ of	,

with recursive t(n)as(
		values(1)
	union all
		select n+1
		from t
		where n<100
)
select n
from t;

/ maar NIET	, 

with recursive t(n)as(
		values(1)
	union all
		select n+1
		from t
		where n<100
)
select n
from t;
select sum(n) 
from t;

/ 7	.

/ wat er tussen () staat van de with table zijn de columns van die table	,

/ 13	. 

/ dit kan ook	, en gaan we hieronder gebruiken	,

with recursive t(n)as(
		values(1)
)
select n
from t;
 n 
---
 7
(1 row)

/ 13	. 

with recursive t as(
		values(1)
)
select n
from t;
 column1 
---
 7
(1 row)

/ 13	. 

with recursive t(n,m)as(
values(7)
)
select*
from t;
ERROR:  WITH query "t" has 1 columns available but 2 columns specified
LINE 1: with recursive t(n,m)as(

with recursive t(n,m)as(
values(7,13,3)
)
select*
from t;
 n | m  | column3 
---+----+---------
 7 | 13 |       3
(1 row)

/ dit kunnen we zelfs	,
with recursive t(n)as(
values(7,13)
)
select n,column2
from t
;
 n | column2 
---+---------
 7 |      13
(1 row)



/ 7	. 

/ Hoe vaak wordt een subpart gebruikt?

create table parts(
	subpart char(1),
	part char(1),
	qty int
);
insert 
into parts 
values
	('s','p',2),
	('t','p',2),
	('u','p',2),
	('s','t',2),
	('u','s',2)
;

/ s, bijv een schroef, is een subpart van p, en t is ook een onderdeel van p, maar s is ook een subpart van t

test-> from parts;
 subpart | part | qty 
---------+------+-----
 s       | p    |   2
 t       | p    |   2
 u       | s    |   2
 v       | s    |   2
 x       | t    |   2
(5 rows)


with recursive included_parts(subpart,part,qty)as(
	select subpart,part,qty
	from parts
	where part='p'
)
select*
from included_parts
;
 subpart | part | qty 
---------+------+-----
 s       | p    |   2
 t       | p    |   2
(2 rows)

/ column names van de with table	,
with recursive included_parts(subpart2,part2,qty2)as(
	select subpart subpart2,part part2,qty qty2
	from parts
	where part='p'
)
select*
from included_parts
;
 subpart2 | part2 | qty2 
----------+-------+------
 s        | p     |    2
 t        | p     |    2
(2 rows)


with recursive included_parts(subpart,part,qty)as(
	select subpart,part,qty
	from parts
	where part='p'
	union all
	select p.subpart,p.part,p.qty
	from parts p, included_parts ip
	where p.part=ip.subpart
)
select*
from included_parts;

/ 7	. 

/ MIHALCEA (288)

/ we hebben de post_comment (pc) en de post_comment_score (pcs) tabellen	,
/ zet eerst de parents uit pc in pcs, met root_id=id	, 
/ en daarna hun children uit pc	, want je joint pcs.id op pc.parent_id	, zo haal je de children uit pc: hun parent_id is al in pcs	.
/ de root_id van een entry in psc is de root_id van de parent, 

/ 7	. 

https://www.citusdata.com/blog/2018/05/15/fun-with-sql-recursive-ctes/

https://www.postgresonline.com/journal/archives/131-Using-Recursive-Common-table-expressions-to-represent-Tree-structures.html			<-

/ 7	. 


