/ 7	. 

/ deferred	, 

[eric@almond html]$ pwd
/home/eric/Devel/Apache/site.cgi/html
[eric@almond html]$ ls
deferred.html ...

/ 7	. 

/  $.Callbacks().fire

/ Lees	, 
http://api.jquery.com/callbacks.fire/

$ vi callbacks_fire.html

<head>
  <meta charset="utf-8">
  <title>callbacks fire</title>
  <script src="jquery-3.1.1.js"></script>
<script>

// A sample logging function to be added to a callbacks list
var foo = function( value ) {
  console.log( "foo:" + value );
};
 
var callbacks = $.Callbacks();
 
// Add the function "foo" to the list
callbacks.add( foo );
 
// Fire the items on the list
callbacks.fire( "hello" ); // Outputs: "foo: hello"
callbacks.fire( "world" ); // Outputs: "foo: world"
 
// Add another function to the list
var bar = function( value ){
  console.log( "bar:" + value );
};
 
// Add this function to the list
callbacks.add( bar );
 
// Fire the items on the list again
callbacks.fire( "hello again" );
// Outputs:
// "foo: hello again"
// "bar: hello again"

</script>
</head>

/ $.Callbacks (de fct) heeft een list en een queue	, en returns $.Callbacks()	, een Object met fcts	, zoals fire	, maar $.Callbacks heeft zelf ook een fire	,
/ op de list staan de callbacks, en op de queue $.Callbacks(), en de args van de callbacks	, als een callback wordt called, is this = $.Callbacks()	, als wordt dat hier niet used	, 

/ 7	.  

/ Lees		,
http://api.jquery.com/jQuery.Callbacks/

/ flags to $.Callbacks	,

/ $ vi callback_flags.html

<head>
  <meta charset="utf-8">
  <title>callbacks fire</title>
  <script src="jquery-3.1.1.js"></script>
<script>

function fn1( value ) {
  console.log( "fn1 says: "+value );
}
 
function fn2( value ) {
  console.log( "fn2 says: " + value );
  return false;
}

//var callbacks = $.Callbacks( "once" );
var callbacks = $.Callbacks( "memory" );
callbacks.add( fn1 );
callbacks.fire( "foo" );	/ fires fn1 says: foo
callbacks.fire( "baz" );	/ fires fn1 says: baz
callbacks.add( fn2 );	 /fires fn2 says: baz
callbacks.add( fn3 );	/ fires fn3 says: baz
callbacks.fire( "bar" ); fires fn1 says: bar, fn2 says: bar, fn3 says: bar
callbacks.remove( fn2 );
callbacks.fire( "foobar" ); fires fn1 says: foobar, fn3 says: foobar


</script>
</head>

/ 13	. 
/ "once" 

fn1 says: foo

/ 13	. 

/ "memory"

fn1 says: foo
fn2 says: foo
fn1 says: bar
fn2 says: bar
fn1 says: foobar

/ 13	 

/ we debug "memory"

/ list= list van fcts	, queue = queue van args	,

(anonymous function) (callbacks_flags.html:22)
var callbacks = $.Callbacks( "memory" );
callbacks.add( fn1 );																		/ list.add(fn1)
/s
		self = {										/= $.Callbacks("memory")

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {				/ []
/j
					if ( memory && !firing ) {
/n
									list.push( arg );

					if ( memory && !firing ) {

https://www.kernel.org/pub/linux/kernel/people/jwessel/kdb/EnableKGDB.html
/n
/t
callbacks.add( fn1 );	 
/d
callbacks.fire( "foo" );				/ Eerst queue.add("foo")	,  dan call alle fcts uit list op alle items in queue
...
/s
		self = { 	/= $.Callbacks("memory")	={fcts zoals fire, fireWith}, maar elke fct sluit in een fire fct, memory, queue	, firingIndex	, 
			fireWith: function( context, args ) {
					queue.push( args );									/ sluit in 	, WAS queue=[], NU queue=["foo"]
					if ( !firing ) {
						fire();						/ sluit in	,
/s
jQuery.callbacks.fire(){
																							/ firingIndex==-1
			for ( ; queue.length; firingIndex = -1 ) {	/ na iedere queue item wordt firingIndex=-1 set	,
				memory = queue.shift();														<- WAS memory==undefined	, queue=["foo"],
																													/ NU memory=="foo"	, queue=[]	,
				while ( ++firingIndex < list.length ) {	/ list=[fn1]	, NU firingIndex==0

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&			<- dit is de call	,
						options.stopOnFalse ) {
/n
				while ( ++firingIndex < list.length ) {	/ NIET 1 < 1 	, dus geen volgende fct call
/n
			for ( ; queue.length; firingIndex = -1 ) { / NU firingIndex==-1	
			for ( ; queue.length; firingIndex = -1 ) { / queue.length=0, dus er is geen volgende	, 
/n
/t
callbacks.fire( "foo" );			/ fn1 says: foo
/d
callbacks.add( fn2 );
/s
jQuery.Callbacks.self.add (jquery-3.1.1.js:3346)
				if ( list ) {																/ fn1

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) { / memory=="foo"	,  queue==[]
						firingIndex = list.length - 1;				/ 0
						queue.push( memory );					/ queue==["foo"], memory=="foo"

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( jQuery.isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );															/ [fn1,fn2]
					} )( arguments );
					if ( memory && !firing ) {
						fire();
/s
jQuery.Callbacks.fire																	/ we zitten in $.Callbacks("memory").add(fn2)	,
																									/ firingIndex==0
			for ( ; queue.length; firingIndex = -1 ) {		/ queue=["foo"]	, list=[fn1,fn2]
				memory = queue.shift();		 							/ 	memory=="bar"	, WAS "foo"	, is voor de volgende	,  niet voor nu	,
				while ( ++firingIndex < list.length ) {		/ 1<2
/j
					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&		/ list[1]=fn2
			for ( ; queue.length; firingIndex = -1 ) {		/ firingIndex=-1
			for ( ; queue.length; firingIndex = -1 ) {		/ queue.length==0, dus geen volgende	, 
 

/t
callbacks.add( fn2 ); 	/ als je fn2 add	, execs hij ook fn2 op de vorige arg, "foo"	: fn2 says foo	,
/d
callbacks.fire( "bar" ); 
/s
		self = {
			fireWith: function( context, args ) {
					queue.push( args );					["bar"]
					if ( !firing ) {
						fire();
/s
$.Callbacks.fire
																									/ firingIndex==-1
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();										/ overrides memory, WAS ["foo"], NU ["bar"]	,
				while ( ++firingIndex < list.length ) {	/ WAS firingIndex=-1 , nu 0	,	 TODO
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false && 	/ fn1 says: bar
				while ( ++firingIndex < list.length ) {	/ WAS firingIndex=0 , nu 1	
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&	 / fn2 says bar
/t
callbacks.fire( "bar" );
/d
callbacks.remove( fn2 );
/s
		self = {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {		/ index=1	 list=[fn1,fn2]	,
						list.splice( index, 1 );		[fn1]
						// Handle firing indexes
						if ( index <= firingIndex ) {	/ NIET 1 <= -1 
/n
							firingIndex--;
/n
/t
callbacks.remove( fn2 );
/d
callbacks.fire( "foobar" );

/ 7	 .

/ deferred.html

var dfd = $.Deferred();
/s
jQuery.extend.Deferred (jquery-3.1.1.js:3507)
		var tuples = [

				// action, add listener, callbacks,handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ), jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ), jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ), jQuery.Callbacks( "once memory" ), 1, "rejected" ]
/ TODO

deferred : Object
func : undefined
promise : Object
	always : (function)
	catch : (function fn )
	pipe : function( /* fnDone, fnFail, fnProgress */ )
	promise : function( obj )
	state : function()
	then : function( onFulfilled, onRejected, onProgress )
	__proto__ : Object
state : "pending"
this : ( selector, context )
tuples : Array[3]
	0 : Array[5]
		0 : "notify"
		1 : "progress"
		2 : Object
			add : function()
			disable : function()
			disabled : function()
			empty : function()
			fire : function()
			fireWith : function( context, args )
			fired : function()
			has : function( fn )
			lock : function()
			locked : function()
			remove : function()
			__proto__ : Object
			4 : 2
			length : 5
			__proto__ : Array[0]
	1 : Array[6]
	2 : Array[6]
	length : 3
	__proto__ : Array[0]

		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(									/ add 3 fct aan 1ste $.Callbacks	, 
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );		/ add nog een fct aan 1ste $.Callback TODO  

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

deferred : Object
	notify : ()
	notifyWith : ( context, args )
	resolve : ()
	resolveWith : ( context, args )
	reject: ()
	rejectWith : ( context, args )
	__proto__ : Object
/ See de promise hierboven	,

		// Make the deferred a promise
		promise.promise( deferred );
/s
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;

deferred : Object
	always : ()
	catch : ( fn )
	done : ()
	fail : ()
	notify : ()
	notifyWith : ( context, args )
	pipe : ( /* fnDone, fnFail, fnProgress */ )
	progress : ()
	promise : ( obj )
	reject : ()
	rejectWith : ( context, args )
	resolve : ()
	resolveWith : ( context, args )
	state : ()
	then : ( onFulfilled, onRejected, onProgress )
	__proto__ : Object

		// All done!
		return deferred;
/t
var dfd = $.Deferred();
/d
dfd
// .done() can take any number of functions or arrays of functions
  .done( [ fn1, fn2 ], fn3, [ fn2, fn1 ] )







