/ See MAIN WICKET FILTERING / See WICKET FORM SUBMIT ON FORM OR ON BUTTON / See WICKET FORM VALIDATION
/ See TEST FORM SUBMIT	 / er moet een submit elem zijn in het form	,

/ See WICKET JS LOAD PAGE BEHAVIOR (CONTROLLER) SCRIPTS
/ See WICKET JS REPLACE HTML BY AJAXLINK IN LABEL 
/ See TARGET.ADD OR NOT	,

/ See TODO Zoek uit met die 5 en 2 fcts	, en welke hierboven worden called	, 
/ See WICKET ORDERLINK SORTS  


/ See CREATE IFORMSUBMITLISTENER AND URL ON NORMAL FORM
/ 	CREATE MARKUP LIST
/ 	ADDS ATTRIBUTES TO COMPONENTTAG	,
/ 		GENERATE ID
/ 		ADDS ACTION ATTRIBUTE TO FORM
/ 	CONTROLLERS
/  	BUILD URL

/ See USE IFORMSUBMITLISTENER AND URL ON NORMAL FORM
/ 	POST/GET REQUEST IN FORM CONTROLLER LISTENER
/ 	CONTROLLERS
/ 	FORMCOMPONENT KNOWS INPUT GIVEN BY USER	,
/ See WH Waarom handler	?

/ See CREATE AJAX URL OF AJAX LINK 
/	CREATE URL 
/ 	REGISTER LISTENER/CONTROLLER OF ... IN JS
/ 	CLICK ... 
/ 	WICKET JS CREATES URL
/ 	DIFFERENCE NORMAL COMPONENT OR AJAX COMPONENT
/ 	EXPLANATION URL
/ 	EXPLAIN AJAX IN WICKET 		

/ See CREATE IBEHAVIORLISTENER AND URL ON AJAX FORM
/ 	ROLE ACTION ATTR IN NORMAL FORM, BUILDS URL FROM IT. AJAX FORM BUILDS OWN URL
/ 	SCRIPT IN <HEAD>
/ 		EXPLAIN SCRIPTS IN <HEAD>
/ 	RENDER PAGE WITH SCRIPTS IN <HEAD>

/ 	POST REQUEST IN JS TO SERVER 
/ 	SERVER AJAX CALL
/ 	FORMCOMPONENT KNOWS INPUT GIVEN BY USER	,

/ See WITH MODELS ISO DIRECT 

/ WEBMARKUPCONTAINER
/ 	CHILD GET MARKUP FROM PAGE
/ 	CHILD GETS MARKUP FROM REPEATINGVIEW
/ 	TEXTFIELD TO REPEATINGVIEW ERROR
/ 	TEXTFIELD TO REPEATINGVIEW OK 
/ 	LINK TO REPEATINGVIEW OK 
/ WEBMARKUPCONTAINER SAMENVATTING
/ 	LINK WITH CHILD TO REPEATINGVIEW WITHOUT WEBMARKUPCONTAINER 
/ 	LINK WITH CHILD TO REPEATINGVIEW WITH WEBMARKUPCONTAINER 
		RENDER REPEATER

/ PANEL IN REPEATER WITH AND WITHOUT REPEATER
/ 		STACKTRACE RENDER WITH REPEATER STACKTRACE RENDER WEBMARKUPCONTAINERS WITHOUT REPEATER
/ 		STACKTRACE RENDER WEBMARKUPCONTAINERS WITHOUT REPEATER
/ 		WEBMARKUPCONTAINER VS PANEL 

/ DATATABLE ACTION IN PANEL OR WEBMARKUPCONTAINER

/ DATATABLE ACTION MODALWINDOW 
/ PROPERTYMODEL AND OBJECTS

/ DATATABLE FORM BUTTON OR LINK
/	WICKET PATH RESOLVEMENT

/ REPEATINGVIEW WICKETID
/ 	CLICK LINK WICKET FOLLOWS WICKETPATH IN URL
/ 	EVERY COMPONENT HAS ITS OWN BEHAVIORS
/ 	LOOKUP COMPONENT GIVEN WICKETID
	RENDER PAGE AND COMPONENTS
/ 	SAMENVATTING REPEATINGVIEW WICKETID

/ REPEATINGVIEW AND CHILDREN IN WICKETPATH STACK RENDERING	
/ 	REPEATINGVIEW AND CHILDREN IN WICKETPATH BUT ONLY REPEATINGVIEW MARKUP IN HTML BECAUSE YOU WANT TO REPEAT THIS STACK RENDERING	
/ PANEL IN HTML STACK RENDERING	

/ See REPEATER
/ See RESOURCES

/ STRINGRESOURCEMODEL KEY-VALUE STORES
/ STRINGRESOURCEMODEL

/ DATAPROVIDER
/ WICKETTESTER RENDER PAGE
/ HIER BLIJFT DE RESPONSE HTML

/ WICKETTESTER FORMTESTER
/ SUBMIT BUTTON RETRIEVES POST PARAMETERS, THESE WERE ADDED IN TEST BY FORMTESTER.SETVALUE
/ VALIDATE FORM RETRIEVES POST PARAMETERS, THESE WERE ADDED IN TEST BY FORMTESTER.SETVALUE,  PUTS THEM IN FORMCOMPONENT'S CONVERTEDINPUT, LATER UPDATEMODELS PUTS THEM IN THE FORMCOMPONENT'S MODELS

/ WICKETTESTER FORMTESTER AJAX FORM ERROR

/ WICKETTESTER LINK
/ WICKETTESTER AJAXLINK WITH CLICKLINK 
/ WICKETTESTER AJAXLINK WITH EXECUTEAJAXEVENT
/ WICKETTESTER NORMAL FORM ON PAGE FIND SUBMITTINGBUTTON
/ WICKETTESTER NORMAL FORM ON PAGE SUBMIT POST PARAMETERS OF SUBMITTING BUTTON 
/ WICKETTESTER AJAXFORM WITHOUT FORMTESTER
/ WICKETTESTER AJAXFORM WITH FORMTESTER 


/ See BUTTON IN FORM
/ See VALUE ATTR OF BUTTON 
/ See BUTTON OUT OF FORM

/ SPRINGBEAN ANNOTATION , ws spring7_5, proj wicket-spring

/ BEHAVIORS
/ AJAXBEHAVIOR AJAXLINK
/ 	THEORY AJAXBEHAVIOR

/ MODALWINDOW AJAXBEHAVIOR
/ 	XMLS MODALWINDOW
/ 	COMPLETE ROUNDTRIP CREATE MODALWINDOW WITH PAGE
/ 		TODO LOAD PAGE IN MODAL WINDOW LOCATION 
/ 		CLOSE LINK ON MODALWINDOW 
/ 	COMPLETE ROUNDTRIP CLOSE MODALWINDOW	
/ 	COMPLETE ROUNDTRIP CREATE MODALWINDOW WITH PANEL
/ 	CLOSE LINK ON MODALWINDOW COMPLETE 
/ 		SHOW MODAL	,
/ 		ABSTRACT CLOSE FIRST XML SECOND XML	
		ClOSE FIRST XML
		ClOSE SECOND XML
/ MODALWINDOW PAGE SELF
/ MODALWINDOW PANEL SELF
/ MODALWINDOW AND PAGES
/ MODALWINDOW SAMENVATTING
/ MODALWINDOW PANEL DEBUG
/ See MODALWINDOW PAGE PANEL
/ See MODALWINDOW DOMREADY SCRIPT
/ 	See FINALLY MODALWINDOW DOMREADY SCRIPT
/ CONNECTION LISTENERINTERFACEREQUESTHANDLER AND BEHAVIOR
/ 	See IMPORTANT METHOD
/ See MODALWINDOW RESULTS NO DEBUG WHAT WE SEE See MORGENOCHTEND Debug in MODALWINDOW DEBUG JS SERVER 
/ See MODALWINDOW DEBUG JS SERVER 

/ See WICKET ONCONFIGURE ONBEFORERENDER
/ 	See VISIBLE -> RENDER
/ 		See ONBEFORERENDER
/ 		See RENDER
/ See SAMENVATTING HOW RENDER DIFFERENT COMPONENTS 
/ 	See LINK WITH CHILD TO REPEATINGVIEW WITHOUT WEBMARKUPCONTAINER 
/ 	See LINK WITH CHILD TO REPEATINGVIEW WITH WEBMARKUPCONTAINER 
/ See STRINGRESOURCEMODEL 
/ 	See WHY STRINGRESOURCEMODEL$ASSIGNMENTWRAPPER
/ 	See PROPERTY IN RESOURCEPAGE.PROPERTIES->COMPONENTSTRINGRESOURCELOADER
/ 	See RESOLVE MODEL 
/ 		See CENTRAL METHOD STRINGRESOURCEMODEL
/ 	See PROPERTY IN REPEATERAPPLICATION.PROPERTIES->CLASSTRINGRESOURCELOADER
	See CLASSTRINGRESOURCELOADER.<INIT> 
/ 	See PROPERTY'S KEY RESOLVED IN STRINGRESOURCEMODEL'S MODEL
/ See STRINGRESOURCEMODEL WITH RESOURCE KEY
/ See STRINGRESOURCEMODEL WITH RESOURCE KEY AND MODEL
/ See STRINGRESOURCEMODEL WITH RESOURCE KEY AND COMPONENT
/ See STRINGRESOURCEMODEL WITH SUBMODEL=HASHMAP 
/ See STRINGRESOURCEMODEL WITH SUBMODEL=HASHMAP 
/ See LOADABLEDETACHABLEMODEL
/ See LOADABLEDETACHABLEMODEL (MODEL VS LOADABLEDETACHABLEMODEL)
/ See SERIALIZE WICKET
	/ See TOMCAT'S REQUEST.GETSESION WITH CREATE=TRUE
	/ See REAL SESSION CREATED
	/ See TOMCAT REGISTERS SESSION
	/ See STORE WICKET SESSION IN TOMCAT SESSION

/ See MODALWINDOW TITLE

/ See SECOND TIME STRINGRESOURCEMODEL
/ See DEBUG STRINGRESOURCEMODEL

/ 7	. 

/ we waren in 
/ ws wicket7_3
/ proj wicket-examples-step-by-step
/ ClockPage	,

/ ws wicket7_4
/ proj wicket-examples-step-by-step

/ Geef	, 
http://localhost:9090/wicket-examples-step-by-step/repeater/repeating

/ 7	. 

/ Debug tomcat7-remote-debug
/ Geef	, 
http://localhost:9090/wicket-examples-step-by-step/repeater/repeating

/ In iedere rij zit een action panel, 
/ action panel heeft link	, en dit action panel heeft een model met object deze contact	, 
/ Als we later deze link click, wordt deze contact uit de panel's model gehaald, en als selected set in de page, de RepeatingPage>BasePage	, 

/ De page RepeatingPage>BasePage heeft GEEN model	, model==null	,  heeft alleen children	, 

$ vi BasePage.java

	private Contact selected;
	public BasePage()
	{
		add(new Label("selectedLabel", new PropertyModel<>(this, "selectedContactLabel")));
	public String getSelectedContactLabel()

/ Als we later op een row (met 'n ActionPanel, die een detachable model heeft met als object een Contact)	,  
/ dus initial heeft dit label's model object=null	, en wordt steeds reset als we een link click	,	 (*) 

/ we hebben hier ook Item's	, deze hebben model==null	, 
/ TODO


/s
RepeatingPage.<init>() line: 44	

		Iterator<Contact> contacts = new ContactDataProvider().iterator(0, 10);
contacts	ArrayList$SubList$1  (id=90)	
	this$1	ArrayList$SubList  (id=110)	
		this$0	ArrayList<E>  (id=117)	
			elementData	Object[73]  (id=120)	
				[0]	Contact  (id=122)	
[Contact id=26 firstName=Abby lastName=Williams homePhone=751-555-8877 cellPhone=265-555-4523]
				[1]	Contact  (id=124)	
				...

		RepeatingView repeating = new RepeatingView("repeating");
repeating	RepeatingView  (id=205)	
	children	null	
	data	null	
	id	"repeating" (id=210)	

			AbstractItem item = new AbstractItem(repeating.newChildId());
item	AbstractItem  (id=244)	
	children	null	
	data	null	
	id	"1" (id=250)	

			repeating.add(item);

		while (contacts.hasNext())
{
			Contact contact = contacts.next();
	bornDate	Date  (id=235)	
	cellPhone	"265-555-4523" (id=237)	
	firstName	"Abby" (id=238)	
	homePhone	"751-555-8877" (id=239)	
	id	26	
	lastName	"Williams" (id=240)	

			item.add(new ActionPanel("actions", new DetachableContactModel(contact)));

/ action panel heeft link	, en dit action panel heeft een model met object deze contact	, 
/ Als we later deze link click, wordt deze contact uit de panel's model gehaald, en als selected set in de page, de RepeatingPage>BasePage	, 

item	AbstractItem  (id=244)	
	data	 null
	children	ArrayList<E>  (id=379)	
		elementData	Object[12]  (id=380)	
			[0]	BasePage$ActionPanel  (id=353)	
				children	BasePage$ActionPanel$1  (id=361)	/= Link	, heeft geen model	,
					children 	null	
					data		null
				data	DetachableContactModel  (id=366)		/= de action panel's model	, zijn object=Contact	,	
				id	"actions" (id=370)	
			[1]	Label  (id=386)	
				data	Model<T>  (id=651)	
					object	"26" (id=669)	
				id	"contactid" (id=654)	
			[2]	Label  (id=440)	
			[3]	Label  (id=446)	
			[4]	Label  (id=452)	
			[5]	Label  (id=458)	
		size	6	

		index++;
}

/ (*)
/ we click een link	, 
/ valt niet in b	, TODO
/ valt wel in getSelectedContactLabel	, 
/ we zien bij (**) dat model.getObject()	, maar deze  moet worden bepaald	, 
/ een PropertyModel heeft geen object	, het is een expression + target	, en model.getObject() is een call	, (model is de PropertyModel)	, 
/s
	RepeatingPage(BasePage).getSelectedContactLabel() line: 55	
			return selected.getFirstName() + " " + selected.getLastName();

	PropertyResolver$MethodGetAndSet.getValue(Object) line: 1154	
				ret = getMethod.invoke(object, (Object[])null);

	PropertyResolver$ObjectAndGetSetter.getValue() line: 659	
			return getAndSetter.getValue(value);

	PropertyResolver.getValue(String, Object) line: 110	
		ObjectAndGetSetter getter = getObjectAndGetSetter(expression, object, RETURN_NULL);
		return getter.getValue();
	
	PropertyModel<T>(AbstractPropertyModel<T>).getObject() line: 86	
			return (T)PropertyResolver.getValue(expression, target);

	Label(Component).getDefaultModelObject() line: 1626	
				return model.getObject();							/ (**)
model	PropertyModel<T>  (id=11443)	
	expression	"selectedContactLabel" (id=11451)	
	target	RepeatingPage  (id=11436)	

	Label(Component).getDefaultModelObjectAsString() line: 1654	
	Label.onComponentTagBody(MarkupStream, ComponentTag) line: 115	
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
	Label(Component).internalRenderComponent() line: 2565	
	Label(WebComponent).onRender() line: 60	
	Label(Component).internalRender() line: 2380	
	Label(Component).render() line: 2308	
	RepeatingPage(MarkupContainer).renderNext(MarkupStream) line: 1524	
	RepeatingPage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	RepeatingPage(Page).onRender() line: 879	
	RepeatingPage(WebPage).onRender() line: 141	
	RepeatingPage(Component).internalRender() line: 2380	
	RepeatingPage(Component).render() line: 2308	
	RepeatingPage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 97	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ 7	. 

/ RefreshingView	, 

/ Nu hebben de Item's WEL een model	, 

/ Geef	,
http://localhost:9090/wicket-examples-step-by-step/repeater/refreshing

/ Intermezzo

/ Overzicht	, 

/ De data provider geeft (een iterator van de ) Contacts	, en een DetachableModel	, met de Contact's id als je een Contact geeft	, 

public class ContactDataProvider implements IDataProvider<Contact>
	public Iterator<Contact> iterator(long first, long count)
	{
		return getContactsDB().find(first, count, new SortParam<String>("firstName", true))
			.iterator();
	}
	@Override
	public IModel<Contact> model(Contact object)
	{
		return new DetachableContactModel(object);
	}


	public RefreshingPage()
	{
		final List<IModel<Contact>> contacts = new ArrayList<>(10);

		ContactDataProvider dp = new ContactDataProvider();

		Iterator<Contact> it = dp.iterator(0, 10);		/ Contacts 
		while (it.hasNext())
		{
			contacts.add(dp.model(it.next()));			/ DetachableModels met Contact's id 
 
		}

/ Deze 2 methods horen bij elkaar , see (***) hieronder	, 
			@Override
			protected Iterator<IModel<Contact>> getItemModels()		
			{
				return contacts.iterator();
			}

			@Override
			protected void populateItem(final Item<Contact> item)
			{
				Contact contact = item.getModelObject();
				item.add(new Label("itemid", item.getId()));

/ Einde Intermezzo




		final List<IModel<Contact>> contacts = new ArrayList<>(10);

		// populate list of contacts to be displayed
		ContactDataProvider dp = new ContactDataProvider();
		Iterator<Contact> it = dp.iterator(0, 10);
/ Contact's uit de data provider	, 

		while (it.hasNext())
		{
			contacts.add(dp.model(it.next()));
/s
ContactDataProvider.model(Contact) line: 71	
/=
	public IModel<Contact> model(Contact object)
object	Contact  (id=12125)	
	bornDate	Date  (id=12127)	
	cellPhone	"355-555-6401" (id=12128)	
	firstName	"Abner" (id=12129)	
	homePhone	"260-555-3548" (id=12407)	
	id	3	
	lastName	"Ortiz" (id=12408)	

		return new DetachableContactModel(object);
/s
DetachableContactModel.<init>(Contact) line: 41	
		this(c.getId());
/s
			this.id = id;
/t
/ Zo gaan ze (Contact's ) allemaal	, 

		}
contacts	ArrayList<E>  (id=11507)	
	elementData	Object[10]  (id=11513)	
		[0]	DetachableContactModel  (id=11514)	
			id	3	
			state	LoadableDetachableModel$InternalState  (id=11525)	/= DETACHED	
			transientModelObject	null	
		[1]	DetachableContactModel  (id=11515)	
		...

/ We zien de id in de model	, en de object==null	,

/c
/s
RefreshingPage$1(RefreshingView<T>).onPopulate() line: 93	
	{
->		Iterator<IModel<T>> models = getItemModels();
		Iterator<Item<T>> items = getItemReuseStrategy().getItems(newItemFactory(), models,
			getItems());
		removeAll();
->>		addItems(items);
/s ->
RefreshingPage$1.getItemModels() line: 69	
				return contacts.iterator();
/ Klopt	, contacts is een array van detachable models	, 

/c
/s -->
RefreshingPage$1(RefreshingView<T>).onPopulate() line: 97	
		Iterator<IModel<T>> models = getItemModels();
		Iterator<Item<T>> items = getItemReuseStrategy().getItems(newItemFactory(), models,
			getItems());
		removeAll();
/d
->>		addItems(items);
items	DefaultItemReuseStrategy$1  (id=12079)	
	index	0	
	this$0	DefaultItemReuseStrategy  (id=12083)	
	val$factory	RefreshingView$1  (id=12078)	
	val$newModels	ArrayList$Itr  (id=12081)	
		cursor	1	
		expectedModCount	10	
		lastRet	0	
		this$0	ArrayList<E>  (id=11507)	
			elementData	Object[10]  (id=11513)	
				[0]	DetachableContactModel  (id=11514)	
				[1]	DetachableContactModel  (id=11515)	
				[2]	DetachableContactModel  (id=11516)	
				[3]	DetachableContactModel  (id=11517)	
				[4]	DetachableContactModel  (id=11518)	
				[5]	DetachableContactModel  (id=11519)	
				[6]	DetachableContactModel  (id=11520)	
				[7]	DetachableContactModel  (id=11521)	
				[8]	DetachableContactModel  (id=12085)	
				[9]	DetachableContactModel  (id=12086)	
			size	10	
/s
RefreshingPage$1(RefreshingView<T>).addItems(Iterator<Item<T>>) line: 189	

items	DefaultItemReuseStrategy$1  (id=12079)	/ 'n Iterator	,

		while (items.hasNext())
		{
			Item<T> item = items.next();
/s
DefaultItemReuseStrategy$1.next() line: 75	
/=
public class DefaultItemReuseStrategy implements IItemReuseStrategy
	@Override
	public <T> Iterator<Item<T>> getItems(final IItemFactory<T> factory,
		final Iterator<IModel<T>> newModels, Iterator<Item<T>> existingItems)
	{
		return new Iterator<Item<T>>()
		{
			@Override
			public Item<T> next()
			{
				IModel<T> model = newModels.next();
				Item<T> item = factory.newItem(index, model);
/s
RefreshingView$1.newItem(int, IModel<T>) line: 114	
/=
	protected IItemFactory<T> newItemFactory()
	{
		return new IItemFactory<T>()
		{
			@Override
			public Item<T> newItem(int index, IModel<T> model)
			{
				String id = RefreshingView.this.newChildId();
				Item<T> item = RefreshingView.this.newItem(id, index, model);
->				RefreshingView.this.populateItem(item);

item	Item<T>  (id=12077)	
	children null
	data	DetachableContactModel  (id=11514)	
		id	3	
		state	LoadableDetachableModel$InternalState  (id=11525)	
		transientModelObject	null	
/s
RefreshingPage$1.populateItem(Item<Contact>) line: 75	
/=
			protected void populateItem(final Item<Contact> item)
				Contact contact = item.getModelObject();
/////////////////////////////////////
/ MODEL LOADS OBJECT
/s
Item<T>(ListItem<T>).getModelObject() line: 94	
		return (T)getDefaultModelObject();
/s
Item<T>(Component).getDefaultModelObject() line: 1626	

this	Item<T>  (id=12077)	

		final IModel<?> model = getDefaultModel();	 / DetachableContactModel  (id=11514)
		if (model != null)
		{
			try
			{
				// Get model value for this component.
				return model.getObject();
/s
DetachableContactModel(LoadableDetachableModel<T>).getObject() line: 129	

this	DetachableContactModel  (id=11515)	
	id	17	
	state	LoadableDetachableModel$InternalState  (id=12135)	
	transientModelObject	null	

		if (state == null || state == InternalState.DETACHED)
		{
			// prevent infinite attachment loops
			state = InternalState.ATTACHING;

			transientModelObject = load();				<-
/s
DetachableContactModel.load() line: 97	
		// loads contact from the database
		return getContactsDB().get(id);
/t
DetachableContactModel(LoadableDetachableModel<T>).getObject() line: 142	
			transientModelObject = load();
/d
			state = InternalState.ATTACHED;
			onAttach();
		}
		return transientModelObject;
	}
/t
RefreshingPage$1.populateItem(Item<Contact>) line: 76	
			@Override
			protected void populateItem(final Item<Contact> item)
			{
				Contact contact = item.getModelObject();
/d
				item.add(new Label("itemid", item.getId()));
				item.add(new ActionPanel("actions", item.getModel()));
				item.add(new Label("contactid", String.valueOf(contact.getId())));
				item.add(new Label("firstname", contact.getFirstName()));
				item.add(new Label("lastname", contact.getLastName()));
				item.add(new Label("homephone", contact.getHomePhone()));
				item.add(new Label("cellphone", contact.getCellPhone()));

/ item heeft een model, met object=Contact	, 
/ item heeft ook children	, 
/ deze hebben zelf ook models	, 
/ de labels hebben een model met een string er in	,
/ de action panel heeft hetzelfde model als het item	, 
	en heeft ook een child	, een link	,  

/ Als we clicked hebben op een link in een row	,
item	Item<T>  (id=12161)	
	children	ArrayList<E>  (id=12167)	
		elementData	Object[12]  (id=12168)	
			[0]	Label  (id=12163)	
				data	Model<T>  (id=12165)	
					object	"10" (id=12164)	
				flags	1074864282	
				generatedMarkupId	-1	
				id	"itemid" (id=12166)	
				markup	null	
				markupSourcingStrategy	null	
				parent	Item<T>  (id=12161)	
				requestFlags	0	
			[1]	BasePage$ActionPanel  (id=12169)	
				children	BasePage$ActionPanel$1  (id=12178)	
				data	DetachableContactModel  (id=12086)	
					id	42	
					state	LoadableDetachableModel$InternalState  (id=12130)	
					transientModelObject	Contact  (id=12162)	
				flags	1074864282	
				generatedMarkupId	-1	
				id	"actions" (id=12179)	
				markup	null	
				markupSourcingStrategy	null	
				modCounter	1	
				parent	Item<T>  (id=12161)	
				queue	null	
				requestFlags	0	
				this$0	RefreshingPage  (id=11504)	
			[2]	Label  (id=12170)	
			[3]	Label  (id=12171)	
			[4]	Label  (id=12172)	
			[5]	Label  (id=12173)	
			[6]	Label  (id=12174)	
		size	7	
	data	DetachableContactModel  (id=12086)	
		id	42	
		state	LoadableDetachableModel$InternalState  (id=12130)	
		transientModelObject	Contact  (id=12162)	

/ 13	, 
/ click Link op een row (Contact)	, 
/ de action panel's model zal object==null hebben	, 
/s
		public ActionPanel(String id, IModel<Contact> model)
		{
			super(id, model);
			add(new Link("select")
			{
				@Override
				public void onClick()
				{
					selected = (Contact)getParent().getDefaultModelObject();
/s
BasePage$ActionPanel(Component).getDefaultModelObject() line: 1620	
		final IModel<?> model = getDefaultModel();
		if (model != null)
		{
			try
			{
				// Get model value for this component.
				return model.getObject();
/s
DetachableContactModel(LoadableDetachableModel<T>).getObject() line: 129	
		if (state == null || state == InternalState.DETACHED)
		{
			// prevent infinite attachment loops
			state = InternalState.ATTACHING;

			transientModelObject = load();
[Contact id=29 firstName=Brianna lastName=Hall homePhone=200-555-8543 cellPhone=447-555-8480]

/ Voor ieder item	, 
/c
	DetachableContactModel(LoadableDetachableModel<T>).detach() line: 117	
	Item<T>(Component).detachModel() line: 3636	
	Item<T>(Component).detachModels() line: 1262	
	Item<T>(Component).detach() line: 1174	
	RefreshingPage$1(MarkupContainer).removeAll() line: 739	
	RefreshingPage$1(RefreshingView<T>).onPopulate() line: 96	
	RefreshingPage$1(AbstractRepeater).onBeforeRender() line: 124	
	RefreshingPage$1(Component).internalBeforeRender() line: 949	
	RefreshingPage$1(Component).beforeRender() line: 1017	
	RefreshingPage(MarkupContainer).onBeforeRenderChildren() line: 1866	
	RefreshingPage(Component).onBeforeRender() line: 3877	
	RefreshingPage(Page).onBeforeRender() line: 801	
	RefreshingPage(Component).internalBeforeRender() line: 949	
	RefreshingPage(Component).beforeRender() line: 1017	
	RefreshingPage(Component).internalPrepareForRender(boolean) line: 2215	
	RefreshingPage(Page).internalPrepareForRender(boolean) line: 242	
	RefreshingPage(Component).render() line: 2304	
	RefreshingPage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 97	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ 1 keer	,
/c
public class BasePage extends ExamplePage
	public String getSelectedContactLabel()
	{
		if (selected == null)
		else
		{
			return selected.getFirstName() + " " + selected.getLastName();
		}
	}

/ TODO (Run nog een keer	, )

/ 7	. 

/ we willen snappen	,

public HomePage(final PageParameters parameters) {

   final List<IModel<Person>> persons = new ArrayList<IModel<Person>>();
   persons.add(Model.of(new Person("John", "Smith"))); 
   persons.add(Model.of(new Person("Dan", "Wong")));

   add(new RefreshingView<Person>("persons") {
	@Override
	protected void populateItem(Item<Person> item) {			/ elk Item heeft een Model uit de Iterator hieronder	, 
	   item.add(new Label("fullName", new PropertyModel(item.getModel(), "fullName")));
	}

	@Override
	protected Iterator<IModel<Person>> getItemModels() {		/ Iterator van Models	,
	   return persons.iterator();
	}			
   });
}

/ we gaan debug	, 

/ (***)

/ RefreshingView	, 

/ je moet een Iterator van Models hebben en dan wordt er een Iterator van Items create	, elk Item heeft een Model	, 

/ we willen begrijpen	, 

RefreshingPage$1(RefreshingView<T>).onPopulate() line: 94	
		Iterator<IModel<T>> models = getItemModels();	 / (?)
		Iterator<Item<T>> items = getItemReuseStrategy().getItems(newItemFactory(), models,
			getItems());
		removeAll();
		addItems(items);

$ vi RefreshingPage.java

		final List<IModel<Contact>> contacts = new ArrayList<>(10);
		ContactDataProvider dp = new ContactDataProvider();
		Iterator<Contact> it = dp.iterator(0, 10);
		while (it.hasNext()) {
			contacts.add(dp.model(it.next())); }
/ data provider geeft de models	,

		RefreshingView<Contact> view = new RefreshingView<Contact>("view")
		{
			/**
			 * Return an iterator over models for items in the view
			 */
			@Override
			protected Iterator<IModel<Contact>> getItemModels()	/ called by (?)
			{
				return contacts.iterator();
			}

			@Override
			protected void populateItem(final Item<Contact> item)
			{
				Contact contact = item.getModelObject();
	
/ debug	, 
        Iterator<IModel<T>> models = getItemModels();    / (?)

models	ArrayList$Itr  (id=12429)	
	this$0	ArrayList<E>  (id=12396)	
		elementData	Object[10]  (id=12430)	
			[0]	DetachableContactModel  (id=12423)	
				id	3	
				state	LoadableDetachableModel$InternalState  (id=11525)	
				transientModelObject	null	
			[1]	DetachableContactModel  (id=12431)	
			...

		Iterator<Item<T>> items = getItemReuseStrategy().getItems(newItemFactory(), models,
			getItems());
/s
RefreshingPage$1(RefreshingView<T>).getItemReuseStrategy() line: 210	
			return DefaultItemReuseStrategy.getInstance();
/t
/s
RefreshingPage$1(RefreshingView<T>).newItemFactory() line: 107	
/=
	protected IItemFactory<T> newItemFactory()
	{
		return new IItemFactory<T>()
		{
			@Override
			public Item<T> newItem(int index, IModel<T> model)
			{
				String id = RefreshingView.this.newChildId();
				Item<T> item = RefreshingView.this.newItem(id, index, model);
				RefreshingView.this.populateItem(item);
				return item;
/t
/s
RefreshingPage$1(RefreshingView<T>).getItems() line: 174	
/=
	public Iterator<Item<T>> getItems()
	{
		return Generics.iterator(iterator());
/t
/s
DefaultItemReuseStrategy.getItems(IItemFactory<T>, Iterator<IModel<T>>, Iterator<Item<T>>) line: 55	
/=
	public <T> Iterator<Item<T>> getItems(final IItemFactory<T> factory,
		final Iterator<IModel<T>> newModels, Iterator<Item<T>> existingItems)
	{
		return new Iterator<Item<T>>()
		{
			private int index = 0;

			@Override
			public void remove()
			{
				throw new UnsupportedOperationException();
			}

			@Override
			public boolean hasNext()
			{
				return newModels.hasNext();
			}

			@Override
			public Item<T> next()
			{
				IModel<T> model = newModels.next();					(??)
				Item<T> item = factory.newItem(index, model);
				index++;
				return item;
			}
/t
RefreshingPage$1(RefreshingView<T>).onPopulate() line: 96	
		Iterator<IModel<T>> models = getItemModels();
		Iterator<Item<T>> items = getItemReuseStrategy().getItems(newItemFactory(), models,
			getItems());
/d
		addItems(items);
/s
RefreshingPage$1(RefreshingView<T>).addItems(Iterator<Item<T>>) line: 186	
/=
	protected void addItems(Iterator<Item<T>> items)
		while (items.hasNext())
		{
			Item<T> item = items.next();
/s
DefaultItemReuseStrategy$1.next() line: 75		/ (??)
				IModel<T> model = newModels.next();
model	DetachableContactModel  (id=12423)	
	id	3	
	state	LoadableDetachableModel$InternalState  (id=11525)	
	transientModelObject	null	

				Item<T> item = factory.newItem(index, model);
/s
RefreshingView$1.newItem(int, IModel<T>) line: 114	
/=
	protected IItemFactory<T> newItemFactory()
	{
		return new IItemFactory<T>()
		{
			@Override
			public Item<T> newItem(int index, IModel<T> model)
			{
				String id = RefreshingView.this.newChildId();
				Item<T> item = RefreshingView.this.newItem(id, index, model);
/s
					return new Item<>(id, index, model);
/t
				RefreshingView.this.populateItem(item);
/s
RefreshingPage$1.populateItem(Item<Contact>) line: 75	
				Contact contact = item.getModelObject();
				item.add(new Label("itemid", item.getId()));
				item.add(new ActionPanel("actions", item.getModel()));
				item.add(new Label("contactid", String.valueOf(contact.getId())));
				item.add(new Label("firstname", contact.getFirstName()));
				item.add(new Label("lastname", contact.getLastName()));
				item.add(new Label("homephone", contact.getHomePhone()));
				item.add(new Label("cellphone", contact.getCellPhone()));
...

/ TODO (Afmaken)	,

/ 7	. 

/ Bij RepeatingView is er een List van Models	, en heeft de RepeatingView een method getItemModels()	,  die een Iterator op deze Models geeft	, 
/ Bij ListView is er een List van Objects	, en deze wordt arg van de ListView.<init>	, 

/ Bij ListView: werk met Objects ipv bij RefreshingView met Models	,


$ vi MyListPage.java

	public MyListPage()
	{
		final List<Contact> contacts = new ArrayList<>(10);

		// populate list of contacts to be displayed
		ContactDataProvider dp = new ContactDataProvider();
		Iterator<Contact> it = dp.iterator(0, 10);
		while (it.hasNext())
		{
			contacts.add(it.next());	 / RefreshingView: contacts.add(dp.model(it.next()));
		}

		ListView<Contact> view = new ListView<Contact>("view",contacts)	/ contacts is arg <init> ,  
																	/ bij RefreshingView: Iterator<IModel<Contact>> getItemModels()
		{
			@Override
			protected void populateItem(final ListItem<Contact> item) / RefreshingView: final Item<Contact> item
			{
				Contact contact = item.getModelObject();

/ 13	.

/ we gaan debug	, 
/c
	public ListView(final String id, final List<T> list)
	{
		this(id, Model.ofList(list));
/s
Model<T>.ofList(List<C>) line: 83	
		return new ListModel<>(list);
/s
ListModel<T>.<init>(List<T>) line: 47	
		setObject(list);
/s
ListModel<T>(GenericBaseModel<T>).setObject(T) line: 64	
		if (!(object instanceof Serializable))
/ NEE
		{
			object = createSerializableVersionOf(object);
/ NIET
		}
		this.object = object;

/ Dus ListModel is gewoon Model voor ons WH	, 
/ TODO
/ ListItemModel is het aparte 	,

/c
/s
	MyListPage$1(ListView<T>).onPopulate() line: 472	
	MyListPage$1(AbstractRepeater).onBeforeRender() line: 124	
	MyListPage$1(Component).internalBeforeRender() line: 949	
	MyListPage$1(Component).beforeRender() line: 1017	
	MyListPage(MarkupContainer).onBeforeRenderChildren() line: 1866	
this	MyListPage  (id=7071)	
child	MyListPage$1  (id=7075)	
			for (final Component child : this)
			{
				// Get next child
				// Call begin request on the child
				// We need to check whether the child's wasn't removed from the
				// component in the meanwhile (e.g. from another's child
				// onBeforeRender)
				if (child.getParent() == this)
				{
					child.beforeRender();

	MyListPage(Component).onBeforeRender() line: 3877	
	MyListPage(Page).onBeforeRender() line: 801	
	MyListPage(Component).internalBeforeRender() line: 949	
	MyListPage(Component).beforeRender() line: 1017	
	MyListPage(Component).internalPrepareForRender(boolean) line: 2215	
	MyListPage(Page).internalPrepareForRender(boolean) line: 242	
	MyListPage(Component).render() line: 2304	
	MyListPage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/s
MyListPage$1(ListView<T>).onPopulate() line: 472	
		final int size = getViewSize();
/s
MyListPage$1(ListView<T>).getViewSize() line: 218	
this	MyListPage$1  (id=7075)	

		int size = viewSize;
2147483647
		final Object modelObject = getDefaultModelObject();
/s
MyListPage$1(Component).getDefaultModelObject() line: 1621	
		final IModel<?> model = getDefaultModel();
model	ListModel<T>  (id=7106)	
	object	ArrayList<E>  (id=7108)	
		elementData	Object[10]  (id=7110)	
			[0]	Contact  (id=7112)	
			[1]	Contact  (id=7113)	
			...
				return model.getObject();
/s
ListModel<T>(GenericBaseModel<T>).getObject() line: 47	
		return object;												/ ArrayList met Contacts	,
/t
MyListPage$1(ListView<T>).getViewSize() line: 225	
		final Object modelObject = getDefaultModelObject();
/d
modelObject	ArrayList<E>  (id=7108)	

		final int modelSize = getList().size();
/s
MyListPage$1(ListView<T>).getList() line: 179	
		final List<T> list = (List<T>)getDefaultModelObject();
list	ArrayList<E>  (id=7108)	
		return list;
/t
MyListPage$1(ListView<T>).getViewSize() line: 225	
        final int modelSize = getList().size();
/d
10
		if ((size == Integer.MAX_VALUE) || ((firstIndex + size) > modelSize))
		{
			size = modelSize - firstIndex;
		return size;
10
/t
MyListPage$1(ListView<T>).onPopulate() line: 473	
			if (getReuseItems())
false
/ TODO
			else
			{
				// Automatically rebuild all ListItems before rendering the
				// list view
				removeAll();
/s
MyListPage$1(MarkupContainer).removeAll() line: 730	
		if (children != null)
/ NEE
children	null	
data	ListModel<T>  (id=7106)	
	object	ArrayList<E>  (id=7108)	
/t
MyListPage$1(ListView<T>).onPopulate() line: 500	
				removeAll();
/d
			boolean hasChildren = size() != 0;
false
			// Loop through the markup in this container for each item
			for (int i = 0; i < size; i++)
/size=10
			{
				// Get index
				final int index = firstIndex + i;
1
				ListItem<T> item = null;
				if (hasChildren)
/ NEE
				{
					// If this component does not already exist, populate it
					item = (ListItem<T>)get(Integer.toString(index));
				}
				if (item == null)
/ JA
					// Create item for index
					item = newItem(index, getListItemModel(getModel(), index));
/s
MyListPage$1(ListView<T>).getModel() line: 622	
		return (IModel<? extends List<T>>)getDefaultModel();
/s
MyListPage$1(Component).getDefaultModel() line: 1600	
		IModel<?> model = getModelImpl();
/s
MyListPage$1(Component).getModelImpl() line: 3018	
			return (IModel<?>)data_get(0);
/t
MyListPage$1(Component).getDefaultModel() line: 1600	
		IModel<?> model = getModelImpl();
/d
model	ListModel<T>  (id=7106)	
	object	ArrayList<E>  (id=7108)	
		return model;
/t
MyListPage$1(ListView<T>).onPopulate() line: 516	
					item = newItem(index, getListItemModel(getModel(), index));
/pd
/s
MyListPage$1(ListView<T>).getListItemModel(IModel<List<T>>, int) line: 448	
/=
	protected IModel<T> getListItemModel(final IModel<? extends List<T>> listViewModel, final int index) {

this	MyListPage$1  (id=7075)	

listViewModel	ListModel<T>  (id=7106)	
	object	ArrayList<E>  (id=7108)	
/ WH NOT USED 

		return new ListItemModel<>(this, index);
	}

/ Intermezzo

public class ListItemModel<T> implements IModel<T>
{
	private static final long serialVersionUID = 1L;

	/** The ListView itself */
	private final ListView<T> listView;

	/** The list item's index */
	private final int index;

/ Einde Intermezzo

/t
MyListPage$1(ListView<T>).onPopulate() line: 516	
					item = newItem(index, getListItemModel(getModel(), index));
/pd
/s
MyListPage$1(ListView<T>).newItem(int, IModel<T>) line: 461	
		return new ListItem<>(index, itemModel);

this	MyListPage$1  (id=7075)	
index	0	
itemModel	ListItemModel<T>  (id=7161)	
	index	0	
	listView	MyListPage$1  (id=7075)	

/t
MyListPage$1(ListView<T>).onPopulate() line: 519	
					item = newItem(index, getListItemModel(getModel(), index));
/d
					add(item);				/ De ListItem wordt dus child van de ListView	,
this	MyListPage$1  (id=7075)	
	children	ListItem<T>  (id=7171)	
		children	null	
		data	ListItemModel<T>  (id=7161)	
			index	0	
			listView	MyListPage$1  (id=7075)	
		id	"0" (id=7190)	
	data	ListModel<T>  (id=7106)	
		object	ArrayList<E>  (id=7108)	
			elementData	Object[10]  (id=7110)	
				[0]	Contact  (id=7112)	
				[1]	Contact  (id=7113)	
				...
/ Dus in de ListModel zitten de Contacts	, 
/ in de ListItemModel de index van de ListItem	,

					// Populate the list item
					onBeginPopulateItem(item);
/ NIETS
					populateItem(item);
MyListPage$1.populateItem(ListItem<Contact>) line: 71	
				Contact contact = item.getModelObject();		/ (*)
				item.add(new Label("itemid", item.getId()));
				item.add(new ActionPanel("actions", item.getModel()));
				item.add(new Label("contactid", String.valueOf(contact.getId())));
				item.add(new Label("firstname", contact.getFirstName()));
				item.add(new Label("lastname", contact.getLastName()));
				item.add(new Label("homephone", contact.getHomePhone()));
				item.add(new Label("cellphone", contact.getCellPhone()));
/s (*)
ListItem<T>.getModelObject() line: 94	
		return (T)getDefaultModelObject();
/s
ListItem<T>(Component).getDefaultModelObject() line: 1626	
		final IModel<?> model = getDefaultModel();
model	ListItemModel<T>  (id=7161)	
	index	0	
	listView	MyListPage$1  (id=7075)	

				return model.getObject();
/s
ListItemModel<T>.getObject() line: 61	
/ LISTITEMMODEL.GETOBJECT
		return listView.getModelObject().get(index);		
/s
MyListPage$1(ListView<T>).getModelObject() line: 643	
		return (List<T>)getDefaultModelObject();
/s
MyListPage$1(Component).getDefaultModelObject() line: 1620	
this	MyListPage$1  (id=7075)	
		final IModel<?> model = getDefaultModel();
/s
MyListPage$1(Component).getDefaultModel() line: 1600	
		IModel<?> model = getModelImpl();
/s
MyListPage$1(Component).getModelImpl() line: 3018	
			return (IModel<?>)data_get(0);
/=
				return data;
...
/t
MyListPage$1(Component).getDefaultModelObject() line: 1621	
		final IModel<?> model = getDefaultModel();
/d
model	ListModel<T>  (id=7106)	
	object	ArrayList<E>  (id=7108)	

				return model.getObject();
/t
ListItemModel<T>.getObject() line: 61	
		return listView.getModelObject().get(index);
/pd
/ listView.getModelObject()=ArrayList met Contacts	,
/t
MyListPage$1.populateItem(ListItem<Contact>) line: 72	
				Contact contact = item.getModelObject();
contact	Contact  (id=7112)	

/ Intermezzo

/ Dus 
				Contact contact = item.getModelObject();		/ (*)
item	ListItem<T>  (id=7171)	
	children	null	
	data	ListItemModel<T>  (id=7161)	
		index	0	
		listView	MyListPage$1  (id=7075)	

/ item.getModelObject() is via methods	, aan het ListItemModel zie je het niet	, 
/ hij doet het zo	, waar index in ListItemModel	, 
		return listView.getModelObject().get(index);		


/ BREAKPOINTS DISABLE
ListView [line: 129] - ListView(String)	
ListView [line: 139] - ListView(String, IModel<? extends List<T>>)	
ListView [line: 161] - ListView(String, List<T>)	
ListView [line: 472] - onPopulate()	
ListView [line: 505] - onPopulate()	
GenericBaseModel [line: 60] - setObject(T)	

/ 13	. 

/ We doen	,
		add(new Link<Void>("refreshLink")
		{
			private static final long serialVersionUID = 1L;

			@Override
			public void onClick()
			{
->				boolean b=false;
			}
/ click	, we vallen bij ->

this	MyListPage$2  (id=8205)	
	this$0	MyListPage  (id=8213)	
		autoIndex	0	
		children	ArrayList<E>  (id=8214)	
			elementData	Object[12]  (id=8216)	
				[0]	WicketExampleHeader  (id=8217)	
				[1]	Label  (id=8218)	
				[2]	FeedbackPanel  (id=8219)	
				[3]	MyListPage$1  (id=8220)						/ ListView	
					children	ArrayList<E>  (id=8223)	
						elementData	Object[12]  (id=8226)	
							[0]	ListItem<T>  (id=8227)	
								children	ArrayList<E>  (id=8250)	
									elementData	Object[12]  (id=8253)	
										[0]	Label  (id=8254)	
										[1]	BasePage$ActionPanel  (id=8255)	
										[2]	Label  (id=8256)	
										[3]	Label  (id=8258)	
										[4]	Label  (id=8259)	
										[5]	Label  (id=8260)	
										[6]	Label  (id=8261)	
									modCount	7	
									size	7	
								data	Object[2]  (id=8251)	
									[0]	ListItemModel<T>  (id=8263)	
										index	0	
										listView	MyListPage$1  (id=8220)	
									[1]	AttributeModifier  (id=8264)	
								flags	1074999450	
								generatedMarkupId	-1	
								id	"0" (id=8252)	
								index	0	
								markup	null	
								markupSourcingStrategy	DefaultMarkupSourcingStrategy  (id=8212)	
								modCounter	0	
								parent	MyListPage$1  (id=8220)	
								queue	null	
								requestFlags	32	
							[1]	ListItem<T>  (id=8228)	
							[2]	ListItem<T>  (id=8229)	
							[3]	ListItem<T>  (id=8230)	
							[4]	ListItem<T>  (id=8231)	
							[5]	ListItem<T>  (id=8232)	
							[6]	ListItem<T>  (id=8233)	
							[7]	ListItem<T>  (id=8234)	
							[8]	ListItem<T>  (id=8235)	
							[9]	ListItem<T>  (id=8236)	
						modCount	10	
						size	10	
					data	ListModel<T>  (id=8224)	
						object	ArrayList<E>  (id=8238)	
							elementData	Object[10]  (id=8240)	
								[0]	Contact  (id=8241)	
								[1]	Contact  (id=8242)	
								[2]	Contact  (id=8243)	
								[3]	Contact  (id=8244)	
								[4]	Contact  (id=8245)	
								[5]	Contact  (id=8246)	
								[6]	Contact  (id=8247)	
								[7]	Contact  (id=8248)	
								[8]	Contact  (id=8324)	
								[9]	Contact  (id=8325)	
							modCount	10	
							size	10	
					firstIndex	0	
					flags	1074999450	
					generatedMarkupId	-1	
					id	"view" (id=8237)	
					markup	null	
					markupSourcingStrategy	DefaultMarkupSourcingStrategy  (id=8212)	
					modCounter	0	
					parent	MyListPage  (id=8213)	
					queue	null	
					requestFlags	32	
					reuseItems	false	
					this$0	MyListPage  (id=8213)	
					viewSize	2147483647	
				[4]	MyListPage$2  (id=8205)	
				[5]	HtmlHeaderContainer  (id=8221)	
				[6]	TransparentWebMarkupContainer  (id=8222)	
			modCount	7	
			size	7	
		data	null	
		flags	1074475162	
		generatedMarkupId	-1	
		id	null	
		markup	null	
		markupSourcingStrategy	DefaultMarkupSourcingStrategy  (id=8212)	
		modCounter	0	
		numericId	0	
		pageParameters	PageParameters  (id=8215)	
		parent	null	
		queue	ComponentQueue  (id=8322)	
		renderCount	2	
		renderedComponents	null	
		requestFlags	35	
		selected	null	
		stateless	Boolean  (id=8323)	

/ OVERZICHT LISTVIEW LISTMODEL LISTITEM LISTITEMMODEL
/ Dus de ListView heeft data=list van Contacts
/ Dus de ListView heeft children=list van ListItems	, 
/ ListItem heeft model ListItemModel	, met de index  	, de model van de ListView wordt used om de Contact te vinden bij (item.)getModelObject()

/ 13	. 

////////////////////////////
/ LISTITEMS CHILDREN OF LISTVIEW
/ Herinner	, 
	protected final void onPopulate()
			for (int i = 0; i < size; i++)
			{
				if (item == null)
				{
					// Create item for index
					item = newItem(index, getListItemModel(getModel(), index));

					// Add list item
					add(item)				;			/ Hier gebeurt het	,

					// Populate the list item
					onBeginPopulateItem(item);
					populateItem(item);
				}

/ Als we met debug in de populateItem vallen	, is het arg, de ListItem al child van de ListView	, 
/ de ListView is de ListItem.parent	(voor debug),


/ Einde Intermezzo

/ 13	. 

/ als we in populateItem vallen	, 

item	ListItem<T>  (id=8449)	
	children	null	
	data	ListItemModel<T>  (id=8450)	
		index	2	
		listView	MyListPage$1  (id=8375)				/ gewoon doorlopen	,
			children	ArrayList<E>  (id=8443)	
			data	ListModel<T>  (id=8400)	
				object	ArrayList<E>  (id=8369)	
					elementData	Object[10]  (id=8403)	
						[0]	Contact  (id=8404)	
						[1]	Contact  (id=8405)	
						[2]	Contact  (id=8406)	
						[3]	Contact  (id=8409)	
						[4]	Contact  (id=8410)	
						[5]	Contact  (id=8452)	
						[6]	Contact  (id=8453)	
						[7]	Contact  (id=8454)	
						[8]	Contact  (id=8475)	
						[9]	Contact  (id=8476)	
					size	10	


/ Einde 

/ REPEATINGVIEW REFRESHINGVIEW

/ Geef	,
http://localhost:9090/wicket-examples-step-by-step/repeater/repeating

$ vi RepeatingPage.java

	public RepeatingPage()
	{
		Iterator<Contact> contacts = new ContactDataProvider().iterator(0, 10);

		RepeatingView repeating = new RepeatingView("repeating");
		add(repeating);

		int index = 0;
		while (contacts.hasNext())
		{
			AbstractItem item = new AbstractItem(repeating.newChildId());

			repeating.add(item);
			Contact contact = contacts.next();

			item.add(new ActionPanel("actions", new DetachableContactModel(contact)));
			item.add(new Label("contactid", String.valueOf(contact.getId())));
			item.add(new Label("firstname", contact.getFirstName()));
			item.add(new Label("lastname", contact.getLastName()));
			item.add(new Label("homephone", contact.getHomePhone()));
			item.add(new Label("cellphone", contact.getCellPhone()));

			index++;
		}
	}

$ vi RepeatingView.java

public class RepeatingView extends AbstractRepeater
	/**
	 * @see org.apache.wicket.markup.repeater.AbstractRepeater#onPopulate()
	 */
	@Override
	protected void onPopulate()									/ called door AbstractRepeater.onBeforeRender	,
	{
		// noop - population of this repeater is manual
	}

$ vi RefreshingView.java

public abstract class RefreshingView<T> extends RepeatingView
	@Override
	protected final void onPopulate()
	{
		Iterator<IModel<T>> models = getItemModels();			/ called door AbstractRepeater.onBeforeRender	,
		Iterator<Item<T>> items = getItemReuseStrategy().getItems(newItemFactory(), models,
			getItems());
		removeAll();
		addItems(items);
	}

$ vi RefreshingPage.java

/ 7	. 

/ RefreshingView	,
/ Er is dus onPopulate	, en populateItem	, 
/ onPopulate calls (via via) populateItem	,

/ In RepeatingView < RefreshingView is data==null	, er zijn children	,
/ RefreshingView maakt zelf de Items	, en we moeten daarom in subclass RefreshingView populateItem  maken , en daarin doen, wat we zelf ook in RepeatingPage doen	, een RepeatingView , zelf Items add, en doen wat in populateItem gebeurt, 

public class DefaultItemReuseStrategy implements IItemReuseStrategy
	@Override
	public <T> Iterator<Item<T>> getItems(final IItemFactory<T> factory, final Iterator<IModel<T>> newModels, Iterator<Item<T>> existingItems) {
		return new Iterator<Item<T>>() {
			private int index = 0;
			@Override
			public Item<T> next()
			{
				IModel<T> model = newModels.next();
				Item<T> item = factory.newItem(index, model);	/ V
				index++;
				return item;
			}
/s
public abstract class RefreshingView<T> extends RepeatingView


	@Override
	protected final void onPopulate()
	{
		Iterator<IModel<T>> models = getItemModels();
		Iterator<Item<T>> items = getItemReuseStrategy().getItems(newItemFactory(), models,		/ ^			/ 'n row
			getItems());
		removeAll();
		addItems(items);	 / add de rows	,
	}

	public Iterator<Item<T>> getItems()
	{
		return Generics.iterator(iterator());
	}

	/**
	 * Create a new IItemFactory based upon the RefreshingView
	 * 
	 * @return An Item factory that delegates to the RefreshingView
	 */
	protected IItemFactory<T> newItemFactory()
	{
		return new IItemFactory<T>()
		{
			@Override
			public Item<T> newItem(int index, IModel<T> model)
			{
				String id = RefreshingView.this.newChildId();
				Item<T> item = RefreshingView.this.newItem(id, index, model);
				RefreshingView.this.populateItem(item);								<- / Def we zelf in subclas RefreshingView
				return item;
			}
		};
	}

	protected abstract void populateItem(final Item<T> item);	 

$ vi RefreshingPage.java

		RefreshingView<Contact> view = new RefreshingView<Contact>("view")
			@Override
			protected void populateItem(final Item<Contact> item)
			{
				Contact contact = item.getModelObject();
				item.add(new Label("itemid", item.getId()));
				item.add(new ActionPanel("actions", item.getModel()));
				...
/ We zien al aan Item<Contact> dat Item een row is	, 

/ Einde REPEATINGVIEW REFRESHINGVIEW

/ DATAGRIDVIEW 

DataGridView
AbstractDataGridView / GridView
DataViewBase
AbstractPageableView
RefreshingView
RepeatingView
AbstractRepeater
WebMarkupContainer
MarkupContainer
Component



/ Geef	, 
http://localhost:9090/wicket-examples-step-by-step/repeater/
/ click 'DataGridView Example - a view that generates grids where rows are representing by items of the data provider and columns are represented by an array of ICellPopulators objects
/s
public class DataGridPage extends BasePage
{
	/**
	 * constructor
	 */
	public DataGridPage()
	{
		List<ICellPopulator<Contact>> columns = new ArrayList<>();

		columns.add(new PropertyPopulator<Contact>("id"));
		columns.add(new PropertyPopulator<Contact>("firstName"));
		columns.add(new PropertyPopulator<Contact>("lastName"));
		columns.add(new PropertyPopulator<Contact>("homePhone"));
		columns.add(new PropertyPopulator<Contact>("cellPhone"));

		add(new DataGridView<>("rows", columns, new SortableContactDataProvider()));

/ Intermezzo

/ SortableContactDataProvider: een DataGridView heeft geen headers	, maar bij render wordt hij sort op firstName	,
	public SortableContactDataProvider()
		// set default sort
		setSort("firstName", SortOrder.ASCENDING); 

/ maar dit is voor (Default)DataTable	, 

	@Override
	public Iterator<Contact> iterator(long first, long count)
	{
		List<Contact> contactsFound = getContactsDB().getIndex(getSort());
		
		return filterContacts(contactsFound).
			subList((int)first, (int)(first + count)).
			iterator();
	}

	private List<Contact> filterContacts(List<Contact> contactsFound)
	{
	    ArrayList<Contact> result = new ArrayList<>();
	    Date dateFrom = contactFilter.getDateFrom();
	    Date dateTo = contactFilter.getDateTo();
		...

/ Einde Intermezzo


$ vi AbstractDataGridView.java

	/**
	 * Factory method for Item container that represents a cell.
	 */
	protected Item<ICellPopulator<T>> newCellItem(final String id, final int index,
		final IModel<ICellPopulator<T>> model)
	{
		return new Item<>(id, index, model);
	}

	@Override
	protected final Item<T> newItem(final String id, final int index, final IModel<T> model)
	{
		return newRowItem(id, index, model);
	}

	/**
	 * Factory method for Item container that represents a row.
	 */
	protected Item<T> newRowItem(final String id, final int index, final IModel<T> model)
	{
		return new Item<>(id, index, model);
	}

	@Override
	protected final void populateItem(final Item<T> item)
	{
		RepeatingView cells = new RepeatingView(CELL_REPEATER_ID);
		item.add(cells);

		int populatorsNumber = populators.size();
		for (int i = 0; i < populatorsNumber; i++)
		{
			ICellPopulator<T> populator = populators.get(i);
			IModel<ICellPopulator<T>> populatorModel = new Model<>(populator);
			Item<ICellPopulator<T>> cellItem = newCellItem(cells.newChildId(), i, populatorModel);
			cells.add(cellItem);

			populator.populateItem(cellItem, CELL_ITEM_ID, item.getModel());

//////////////////////////////////////////////////////////////////////
/ Vertical is er een RefreshingView	, newItem calls newRowItem	, die ook new Item calls 	, en dat is een vertical Item	,  
/ Horizontal een RepeatingView	, populateItem (de vertical Item) calls in for loops multiple times newCellItem	,

/ we gaan debug	, 

/c
/ stack
	DataGridView<T>(AbstractDataGridView<T>).newItem(String, int, IModel<T>) line: 99	
		return newRowItem(id, index, model);
/cb
	RefreshingView$1.newItem(int, IModel<T>) line: 113	
/=
	protected IItemFactory<T> newItemFactory()
	{
		return new IItemFactory<T>()
		{
			@Override
			public Item<T> newItem(int index, IModel<T> model)
			{
				String id = RefreshingView.this.newChildId();
->				Item<T> item = RefreshingView.this.newItem(id, index, model);	/ row Item
				RefreshingView.this.populateItem(item);

/cb
	DefaultItemReuseStrategy$1.next() line: 75	
/=
	@Override
	public <T> Iterator<Item<T>> getItems(final IItemFactory<T> factory, final Iterator<IModel<T>> newModels, Iterator<Item<T>> existingItems) {
		return new Iterator<Item<T>>() {
			private int index = 0;
			@Override
			public Item<T> next()
			{
				IModel<T> model = newModels.next();	 / DetachableModelContactModel	, id=31, transientModelObject=null	, komt uit IDataProvider	, 1 Contact -> 1 row	, 
->				Item<T> item = factory.newItem(index, model);	/ row Item	, 
/cb
	DataGridView<T>(RefreshingView<T>).addItems(Iterator<Item<T>>) line: 189	
/=
	protected void addItems(Iterator<Item<T>> items)
	{
		int index = 0;
		while (items.hasNext())
		{
->			Item<T> item = items.next();
/cb
	DataGridView<T>(RefreshingView<T>).onPopulate() line: 97	
/=
	@Override
	protected final void onPopulate()
	{
		Iterator<IModel<T>> models = getItemModels();	/ DataViewBase$ModelIterator<T>	, de IDataProvider levert de Models	, bij ons ContactDataProvider.model: new DetachableContactModel(Contact object)	, dit zijn de Models van ALLE 50 Contacts	,  iedere Contact geeft 1 row	, 
		Iterator<Item<T>> items = getItemReuseStrategy().getItems(newItemFactory(), models, getItems()); / hier zijn nog GEEN Items create	, alleen de ItemFactory	, 
		removeAll();
->		addItems(items);	/ creates de Items	,   
/cb
	DataGridView<T>(AbstractRepeater).onBeforeRender() line: 124	
		onPopulate();

	DataGridView<T>(AbstractPageableView<T>).onBeforeRender() line: 115	
	DataGridView<T>(Component).internalBeforeRender() line: 949	
	DataGridView<T>(Component).beforeRender() line: 1017	
	DataGridPage(MarkupContainer).onBeforeRenderChildren() line: 1866	
	DataGridPage(Component).onBeforeRender() line: 3877	
	DataGridPage(Page).onBeforeRender() line: 801	
	DataGridPage(Component).internalBeforeRender() line: 949	
	DataGridPage(Component).beforeRender() line: 1017	
	DataGridPage(Component).internalPrepareForRender(boolean) line: 2215	
	DataGridPage(Page).internalPrepareForRender(boolean) line: 242	
	DataGridPage(Component).render() line: 2304	
	DataGridPage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/s
DataGridView<T>(AbstractDataGridView<T>).newItem(String, int, IModel<T>) line: 99	
		return newRowItem(id, index, model);
/s
DataGridView<T>(AbstractDataGridView<T>).newRowItem(String, int, IModel<T>) line: 119	
		return new Item<>(id, index, model);
/t
RefreshingView$1.newItem(int, IModel<T>) line: 114	
				Item<T> item = RefreshingView.this.newItem(id, index, model);
/d
				RefreshingView.this.populateItem(item);
/s
DataGridView<T>(AbstractDataGridView<T>).populateItem(Item<T>) line: 145	
/=
	protected final void populateItem(final Item<T> item)		/ item = row Item	,

/ item is created by een ItemFactory	, en add aan RefreshingView	,  (ItemFactory calls newRowItem)
/ Nu worden er newCellItem called, zonder een ItemFactory, en add aan een RepeatingView	,

		RepeatingView cells = new RepeatingView(CELL_REPEATER_ID);
		item.add(cells);													/ item = vertical Item in RefreshingView	,

		int populatorsNumber = populators.size();
		for (int i = 0; i < populatorsNumber; i++)	/ een Contact is een row	, en iedere cell is een property van de Contact	,
		{
			ICellPopulator<T> populator = populators.get(i);
populator	PropertyPopulator<T>  (id=11521)	
	property	"id" (id=11524)	

			IModel<ICellPopulator<T>> populatorModel = new Model<>(populator);
			Item<ICellPopulator<T>> cellItem = newCellItem(cells.newChildId(), i, populatorModel);
/s
DataGridView<T>(AbstractDataGridView<T>).newCellItem(String, int, IModel<ICellPopulator<T>>) line: 93	
		return new Item<>(id, index, model);
/t
			cells.add(cellItem);
			populator.populateItem(cellItem, CELL_ITEM_ID, item.getModel());	/ item=row=lazy Contact	,  want de Contact is er nog niet	, alleen de id	,

/ Intermezzo

this	DataGridView<T>  (id=7297)									/= RefreshingView	,
	data	null	
	dataProvider	SortableContactDataProvider  (id=7296)	
	id	"rows" (id=6389)	
	children	
	 elementData 	ArrayList<E>
	  [0] Item<T>  (id=7309)										/ row	,
		data	DetachableContactModel  (id=7334)					/ row= lazy Contact	,
			id	31	
			state	LoadableDetachableModel$InternalState  (id=6431)	
			transientModelObject	null	
		children	RepeatingView  (id=7333)	
			data	null	
			id	"cells" (id=6435)	
			childIdCounter	5	
			children	ArrayList<E>  (id=7337)	
				elementData	Object[12]  (id=7342)	
					[0]	Item<T>  (id=7344)						/ cell=property Contact	,	
						data	Model<T>  (id=7351)	
							object	PropertyPopulator<T>  (id=7323)	
								property	"id" (id=6377)	
						children	Label  (id=7350)	
							data	PropertyModel<T>  (id=7355)	
								expression	"id" (id=6377)	
								target	DetachableContactModel  (id=7334)	
									id	31	
									state	LoadableDetachableModel$InternalState  (id=6431)	
									transientModelObject	null	
							flags	1074995354	
							generatedMarkupId	-1	
							id	"cell" (id=7356)	
							markup	null	
							markupSourcingStrategy	null	
							parent	Item<T>  (id=7344)	
							requestFlags	0	
						flags	1074995354	
						generatedMarkupId	-1	
						id	"1" (id=6432)	
						index	0	
						markup	MarkupFragment  (id=7338)	
						markupSourcingStrategy	null	
						modCounter	1	
						parent	RepeatingView  (id=7333)	
						queue	null	
						requestFlags	0	
					[1]	Item<T>  (id=7345)	
					[2]	Item<T>  (id=7346)	
					[3]	Item<T>  (id=7347)	
					[4]	Item<T>  (id=7348)	
				modCount	5	
				size	5	
			flags	1073946778	
			generatedMarkupId	-1	
			markup	MarkupFragment  (id=7338)	
			markupSourcingStrategy	null	
			modCounter	5	
			parent	Item<T>  (id=7309)	
			queue	null	
			requestFlags	0	
		flags	1074995354	
		generatedMarkupId	-1	
		id	"1" (id=6432)	
		index	0	
		markup	MarkupFragment  (id=7331)	
		markupSourcingStrategy	DefaultMarkupSourcingStrategy  (id=7335)	
		modCounter	1	
		parent	DataGridView<T>  (id=7297)	
		queue	null	
		requestFlags	0	
	currentPage	0	
	flags	1073946778	
	generatedMarkupId	-1	
	itemReuseStrategy	null	
	itemsPerPage	9223372036854775807	
	markup	MarkupFragment  (id=7331)	
	markupSourcingStrategy	null	
	modCounter	1	
	parent	DataGridPage  (id=7293)	
	populators	ArrayList<E>  (id=7298)	
	queue	null	
	requestFlags	17	
item	Item<T>  (id=7317)	
cells	RepeatingView  (id=7318)	
populatorsNumber	5	
i	0	
populator	PropertyPopulator<T>  (id=7323)	
populatorModel	Model<T>  (id=7324)	
cellItem	Item<T>  (id=7329)	

/ Einde Intermezzo

/ we zijn nog in	,
			populator.populateItem(cellItem, CELL_ITEM_ID, item.getModel());
/////////
/ updates cellItem	, 
/s
PropertyPopulator<T>.populateItem(Item<ICellPopulator<T>>, String, IModel<T>) line: 75	
/=
	@Override
	public void populateItem(final Item<ICellPopulator<T>> cellItem, final String componentId, final IModel<T> rowModel) {
		cellItem.add(new Label(componentId, new PropertyModel<>(rowModel, property)));
/s
/ rowModel=Model om lazy Contact	, 
componentId="cell"
property="id"
rowModel	DetachableContactModel  (id=7312)	
	id	10	
	state	LoadableDetachableModel$InternalState  (id=6431)	
	transientModelObject	null	

/t
DataGridView<T>(AbstractDataGridView<T>).populateItem(Item<T>) line: 158	
			populator.populateItem(cellItem, CELL_ITEM_ID, item.getModel());
/d
cellItem	Item<T>  (id=7329)	
	children	Label  (id=7421)	
		data	PropertyModel<T>  (id=7420)	
			expression	"id" (id=6377)	
			target	DetachableContactModel  (id=7312)	
				id	10	
				state	LoadableDetachableModel$InternalState  (id=6431)	
				transientModelObject	null	

/ volgende	,
		for (int i = 0; i < populatorsNumber; i++)
		{
			ICellPopulator<T> populator = populators.get(i);
populator	PropertyPopulator<T>  (id=7451)	
	property	"firstName" (id=7452)	
			IModel<ICellPopulator<T>> populatorModel = new Model<>(populator);
			Item<ICellPopulator<T>> cellItem = newCellItem(cells.newChildId(), i, populatorModel);
			cells.add(cellItem);

			populator.populateItem(cellItem, CELL_ITEM_ID, item.getModel());

cellItem	Item<T>  (id=7457)	
	children	Label  (id=7458)	
		data	PropertyModel<T>  (id=7459)	
			expression	"firstName" (id=7452)	
			target	DetachableContactModel  (id=7312)	
				id	10	
				state	LoadableDetachableModel$InternalState  (id=6431)	
				transientModelObject	null	







/ Einde DATAGRIDVIEW

/ DATAGRIDVIEW SELF

/ 7	. 

public class PropertyColumn<T, S> extends AbstractColumn<T, S> implements IExportableColumn<T, S>
	@Override
	public IModel<?> getDataModel(IModel<T> rowModel)
		PropertyModel<?> propertyModel = new PropertyModel<>(rowModel, propertyExpression);

/ dus T is row model object type, dus Contact bij ons	,

	@Override
	public void populateItem(final Item<ICellPopulator<T>> item, final String componentId, final IModel<T> rowModel)
		item.add(new Label(componentId, getDataModel(rowModel)));
/ TODO ( Item<ICellPopulator<T>> item ) 

public abstract class AbstractColumn<T, S> implements IStyledColumn<T, S>
{
	private final IModel<String> displayModel;
	private final S sortProperty;

/ Dus S is de sort type	, 

/ Einde DATAGRIDVIEW SELF

/ DATAGRIDVIEW SELF

/ ws wicket7_5

/ data grid view , met links in de 1ste column	, 
/ we nu PropertyPopulator, new ICellPopulator	, en niet PropertyColumn, AbstractColumn, omdat we geen headers hebben	, 
 
/ rows = repeatingview	, 
/ cells= refreshingview	,

$ vi DataGridPage_my2.java

public class DataGridPage_my2 extends BasePage
{
	/**
	 * constructor
	 */
	public DataGridPage_my2()
	{
	
		List<ICellPopulator<Contact>> columns = new ArrayList<>();
		
		ICellPopulator<Contact>link=new ICellPopulator<Contact>() {
			@Override
			public void populateItem(Item<ICellPopulator<Contact>> cellItem,
					String componentId, IModel<Contact> rowModel) {
				cellItem.add(new ActionPanel(componentId, rowModel));
				
			}
			@Override
			public void detach() {
			}
		};
		columns.add(link);
		
		ICellPopulator<Contact>id=new PropertyPopulator<Contact>("id");
		columns.add(id);
		ICellPopulator<Contact>firstName=new PropertyPopulator<Contact>("firstName");
		columns.add(firstName);
		ICellPopulator<Contact>lastName=new PropertyPopulator<Contact>("lastName");
		columns.add(lastName);
		ICellPopulator<Contact>homePhone=new PropertyPopulator<Contact>("homePhone");
		columns.add(homePhone);
		ICellPopulator<Contact>cellPhone=new PropertyPopulator<Contact>("cellPhone");
		columns.add(cellPhone);

		
		add(new DataGridView<>("rows", columns, new SortableContactDataProvider()));
	}

$ vi  DataGridPage_my2.html

<wicket:extend xmlns:wicket="http://wicket.apache.org">

<table cellspacing="0" cellpadding="2" border="1">
	<tr wicket:id="rows">
		<td wicket:id="cells">
			<span wicket:id="cell">cell content goes here</span>
		</td>
	</tr>
</table>
</wicket:extend>

/ 7	. 

/ onthoud:
ICellPopulator doet propertyItem	,
public interface IColumn<T, S> extends ICellPopulator<T>
	Component getHeader(String componentId);
	S getSortProperty();
	boolean isSortable();
/ Dus PropertyPopulator zoals 
/ PropertyColumns op een DataGridView alleen is zinloos, want de headers ( en dus sort) komen er niet, PropertyPopulator is genoeg

/ onthoud: 
/ row item heeft als model een detachable model met object een contact	, 
/ cell item heeft als model de ICellPopulator, dat kan zijn een PropertyPopulator/ICellPopulator/new AbstractColumn/PropertyColumn	, 
/ cell item heeft 1 child: 
	label, met model 'n property model, hier komt cell item's model terug, met de property expression
	action panel, die als children een link heeft, en als model de row item's model	,

/ 1313	. 

DataGridView<T>(AbstractRepeater).onBeforeRender() line: 126	
		onPopulate();
/d

/ DataGridView	, in  DataGridPage_my1	, met PropertyPopulators	,

/ de datagridview heeft model null	, id="view"
/ de rows zijn in een LinkedMap	, / die zijn toch in een RefreshingView	?  / TODO
/ de row items id="8", model=DetachableContactModel	, 
/ de rowitems hebben 1 child, een repeatingview  "cells" , model=null	,  heeft children een array van cellitems,
/ cellitem "1" heeft model=Model, met object=PropertyPopulator TODO, en 1 child , een Label	,
/  het label heeft een propertymodel, target= row item's model, en property de property in de property populator,

this	DataGridView<T>  (id=8204)	
	data	null	
	dataProvider	ContactDataProvider  (id=8230)	
	id	"view" (id=8205)	
	children	LinkedMap<K,V>  (id=8241)	
		data	AbstractHashedMap$HashEntry<K,V>[128]  (id=8242)	
			[0...99]	
				[2]	AbstractLinkedMap$LinkEntry<K,V>  (id=8245)	
					value	Item<T>  (id=8254)	
						data	DetachableContactModel  (id=8256)	
						id	"8" (id=8253)	
						children	RepeatingView  (id=8255)	
							data	null	
							id	"cells" (id=8235)	
							children	ArrayList<E>  (id=8259
								elementData	Object[12]  (id=8261)	
									[0]	Item<T>  (id=8262)	
										data	Model<T>  (id=8268)	
											object	PropertyPopulator<T>  (id=8269)	
										children	Label  (id=8267)	
											data	PropertyModel<T>  (id=8270)	
												expression	"id" (id=8239)	
												target	DetachableContactModel  (id=8256)	
										flags	1074995354	
										id	"1" (id=8232)	
										index	0	
									[1]	Item<T>  (id=8263)	
									[2]	Item<T>  (id=8264)	
									[3]	Item<T>  (id=8265)	
									[4]	Item<T>  (id=8266)	
								size	5	
				[7]	AbstractLinkedMap$LinkEntry<K,V>  (id=8246)	
					value	Item<T>  (id=)	
				[12]	AbstractLinkedMap$LinkEntry<K,V>  (id=8247)	
					value	Item<T>  (id=)	
				...
				[96]	AbstractLinkedMap$LinkEntry<K,V>  (id=8342)	
					value	Item<T>  (id=)	

/ Waar is deze hieronder	?
/ TODO
this	DataTable$DefaultDataGridView  (id=7709)	
	cachedItemCount	50	
	childIdCounter	8	
	data	null	
	dataProvider	SortableContactDataProvider  (id=7716)	
	id	"rows" (id=7750)	
	children	ArrayList<E>  (id=7751)	
		elementData	Object[12]  (id=7753)	
			[0]	OddEvenItem<T>  (id=7724)	
				children	RepeatingView  (id=7725)	
					childIdCounter	6	
					children	ArrayList<E>  (id=7762)	
						elementData	Object[12]  (id=7765)	
							[0]	Item<T>  (id=7728)	
								children	BasePage$ActionPanel  (id=7771)	
									children	BasePage$ActionPanel$1  (id=7772)	
									data	DetachableContactModel  (id=7720)	
									flags	1074995354	
									generatedMarkupId	-1	
									id	"cell" (id=7734)	
									markup	null	
									markupSourcingStrategy	null	
									modCounter	1	
									parent	Item<T>  (id=7728)	
									queue	null	
									requestFlags	0	
									this$0	DataTablePage_my  (id=7695)	
								data	Object[2]  (id=7729)	
									[0]	Model<T>  (id=7727)	
										object	DataTablePage_my$1  (id=7726)	
											displayModel	Model<T>  (id=7731)	
											sortProperty	null	
											this$0	DataTablePage_my  (id=7695)	
									[1]	DataTable$DefaultDataGridView$1  (id=7730)	
								flags	1074995354	
								generatedMarkupId	-1	
								id	"1" (id=7723)	
								index	0	
								markup	MarkupFragment  (id=7764)	
								markupSourcingStrategy	null	
								modCounter	1	
								parent	RepeatingView  (id=7725)	
								queue	null	
								requestFlags	0	
							[1]	Item<T>  (id=7766)	
							[2]	Item<T>  (id=7767)	
							[3]	Item<T>  (id=7768)	
								children	Label  (id=7784)	
									data	PropertyModel<T>  (id=7792)	
										expression	"lastName" (id=7791)	
										target	DetachableContactModel  (id=7720)	
									flags	1074995354	
									generatedMarkupId	-1	
									id	"cell" (id=7734)	
									markup	null	
									markupSourcingStrategy	null	
									parent	Item<T>  (id=7768)	
									requestFlags	0	
								data	Object[2]  (id=7785)	
								flags	1074995354	
								generatedMarkupId	-1	
								id	"4" (id=7786)	
								index	3	
								markup	MarkupFragment  (id=7764)	
								markupSourcingStrategy	null	
								modCounter	1	
								parent	RepeatingView  (id=7725)	
								queue	null	
								requestFlags	0	
							[4]	Item<T>  (id=7769)	
							[5]	Item<T>  (id=7770)	
						modCount	6	
						size	6	
					data	null	
					flags	1073946778	
					generatedMarkupId	-1	
					id	"cells" (id=7763)	
					markup	MarkupFragment  (id=7764)	
					markupSourcingStrategy	null	
					modCounter	6	
					parent	OddEvenItem<T>  (id=7724)	
					queue	null	
					requestFlags	0	
				data	DetachableContactModel  (id=7720)	
					id	25	
					state	LoadableDetachableModel$InternalState  (id=7721)	
					transientModelObject	null	
				flags	1074995354	
				generatedMarkupId	-1	
				id	"1" (id=7723)	
				index	0	
				markup	MarkupFragment  (id=7752)	
				markupSourcingStrategy	DefaultMarkupSourcingStrategy  (id=7761)	
				modCounter	1	
				parent	DataTable$DefaultDataGridView  (id=7709)	
				queue	null	
				requestFlags	0	
			[1]	OddEvenItem<T>  (id=7754)	
			[2]	OddEvenItem<T>  (id=7755)	
			[3]	OddEvenItem<T>  (id=7756)	
			[4]	OddEvenItem<T>  (id=7757)	
			[5]	OddEvenItem<T>  (id=7758)	
			[6]	OddEvenItem<T>  (id=7759)	
			[7]	OddEvenItem<T>  (id=7760)	
		modCount	8	
		size	8	
	currentPage	0	
	itemReuseStrategy	null	
	itemsPerPage	8	
	markup	MarkupFragment  (id=7752)	
	markupSourcingStrategy	null	
	modCounter	8	
	parent	WebMarkupContainer  (id=7745)	
	populators	ArrayList<E>  (id=7748)	
		elementData	Object[10]  (id=7793)	
			[0]	DataTablePage_my$1  (id=7726)	
				displayModel	Model<T>  (id=7731)	
				sortProperty	null	
				this$0	DataTablePage_my  (id=7695)	
			[1]	DataTablePage_my$2  (id=7794)	
				displayModel	Model<T>  (id=7801)	
				propertyExpression	"id" (id=7802)	
				sortProperty	null	
				this$0	DataTablePage_my  (id=7695)	
			[2]	PropertyColumn<T,S>  (id=7781)	
				displayModel	Model<T>  (id=7782)	
				propertyExpression	"firstName" (id=7783)	
				sortProperty	"firstName" (id=7783)	
			[3]	DataTablePage_my$3  (id=7789)	
				displayModel	Model<T>  (id=7790)	
				propertyExpression	"lastName" (id=7791)	
				sortProperty	"lastName" (id=7791)	
				this$0	DataTablePage_my  (id=7695)	
			[4]	PropertyColumn<T,S>  (id=7795)	
				displayModel	Model<T>  (id=7799)	
				propertyExpression	"homePhone" (id=7800)	
				sortProperty	null	
			[5]	PropertyColumn<T,S>  (id=7796)	
				displayModel	Model<T>  (id=7797)	
				propertyExpression	"cellPhone" (id=7798)	
				sortProperty	null	
		modCount	6	
		size	6	
	queue	null	
	requestFlags	17	
	this$0	DefaultDataTable<T,S>  (id=7708)	


/ Einde DATAGRIDVIEW SELF



/ DATATABLE

/ ws wicket7_5

$ vi DataTablePage_my.java/html
...

/ Geef	,
http://localhost:9090/wicket-examples-step-by-step/repeater/wicket/bookmarkable/org.apache.wicket.examples.repeater.DataTablePage_my

/ 	7	.

/ PropertyColumn.populateItem==PropertyPopulator.populateItem	,
/ maar PropertyColumn is IColumn, dus heeft ook getHeader, getSortProperty	, zodat je later kunt sort 	,

public class PropertyColumn<T, S> extends AbstractColumn<T, S> implements IExportableColumn<T, S>
	@Override public void populateItem(final Item<ICellPopulator<T>> item, final String componentId, final IModel<T> rowModel) {
		item.add(new Label(componentId, getDataModel(rowModel)));
	}
	@Override
	public IModel<?> getDataModel(IModel<T> rowModel)
	{
		PropertyModel<?> propertyModel = new PropertyModel<>(rowModel, propertyExpression);
		return propertyModel;
	}
public abstract class AbstractColumn<T, S> implements IStyledColumn<T, S>
public interface IStyledColumn<T, S> extends IColumn<T, S>
public interface IColumn<T, S> extends ICellPopulator<T>
	Component getHeader(String componentId);
	S getSortProperty();
	boolean isSortable();
public interface ICellPopulator<T> extends IClusterable, IDetachable
	void populateItem(final Item<ICellPopulator<T>> cellItem, final String componentId, final IModel<T> rowModel);

/ bij DataGridView	,
public class PropertyPopulator<T> implements ICellPopulator<T>
	@Override public void populateItem(final Item<ICellPopulator<T>> cellItem, final String componentId, final IModel<T> rowModel) {
		cellItem.add(new Label(componentId, new PropertyModel<>(rowModel, property)));
	}

/ 	7	.

/s
DataTablePage_my.<init>() line: 73	
		columns.add(new PropertyColumn<Contact, String>(new Model<>("First Name"), "firstName", "firstName"));
/s
PropertyColumn<T,S>.<init>(IModel<String>, S, String) line: 68	
/=
	public PropertyColumn(final IModel<String> displayModel, final S sortProperty, final String propertyExpression)
		super(displayModel, sortProperty);
		this.propertyExpression = propertyExpression;

/ Intermezzo

/ Dus het 1ste arg van PropertyColumn.<init> = new Model<>("First Name") is display	, 
/ Het 2de arg is de sort property	, 
/ Het 3de arg is de property	, 

columns	ArrayList<E>  (id=9041)	
	elementData	Object[10]  (id=9042)	
		[2]	PropertyColumn<T,S>  (id=9060)	
			displayModel	Model<T>  (id=9059)	
			propertyExpression	"firstName" (id=9061)	
			sortProperty	"firstName" (id=9061)	

/ de methods die we zien override in DataTablePage_my.<init> zijn IStyledColumn, ICellPopulator methods	, 
			@Override
			public void populateItem(Item<ICellPopulator<Contact>> cellItem, String componentId,
			@Override
			public String getCssClass()

/ Einde Intermezzo

		DataTable<Contact, String> dataTable = new DefaultDataTable<>("table", columns, dataProvider, 8);
/s
DefaultDataTable<T,S>.<init>(String, List<IColumn<T,S>>, ISortableDataProvider<T,S>, int) line: 63	
		super(id, columns, dataProvider, rowsPerPage);
/s
DefaultDataTable<T,S>(DataTable<T,S>).<init>(String, List<IColumn<T,S>>, IDataProvider<T>, long) line: 135	
		super(id);
Panel.<init>

/ Intermezzo

/ een panel heeft eigen .html file	, terwijl webmarkupcontainer inline htmt heeft in de parent's html page	,
/ we zien inderdaad	, 

$ vi DataTablePage_my.java
    <table class="dataview" cellspacing="0" wicket:id="table">[table]</table>

/ we zien helemaal niet zoals in 
$ vi DataGridPage.html
<table cellspacing="0" cellpadding="2" border="1">
	<tr wicket:id="rows">
		<td wicket:id="cells">
			<span wicket:id="cell">cell content goes here</span>
		</td>
	</tr>
</table>
</wicket:extend>

/ inderdaad	, de .html file van de DataTable, die een panel is	,
$ vi ./wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/repeater/data/table/DataTable.html
<wicket:panel xmlns:wicket="http://wicket.apache.org">
<caption wicket:id="caption"></caption>
<colgroup wicket:id="colGroup"></colgroup>
<thead wicket:id="topToolbars">
	<wicket:container wicket:id="toolbars"></wicket:container>
</thead>
<tfoot wicket:id="bottomToolbars">
	<wicket:container wicket:id="toolbars"></wicket:container>
</tfoot>
<tbody wicket:id="body">
	<tr wicket:id="rows">
		<td wicket:id="cells">
			<div wicket:id="cell">[cell]</div>
		</td>
	</tr>
</tbody>
</wicket:panel>

/ Einde Intermezzo

		this.columns = columns;
		this.caption = new Caption("caption", getCaptionModel());

DataTable.class
	protected IModel<String> getCaptionModel()
	{
		return null;
	}

this	DefaultDataTable<T,S>  (id=12072)	
	caption	DataTable$Caption  (id=12074)	
		data	null	

/ Intermezzo

public class DataTable<T, S> extends Panel implements IPageableItems
	public static class Caption extends Label

/ Einde Intermezzo

		add(caption);
		this.colGroup = new ColGroup("colGroup");
/s
ColGroup.<init>(String) line: 48	
/=
public class ColGroup extends Panel
	private final RepeatingView colgroupCols;
	public ColGroup(String id)
		super(id);
		this.colgroupCols = new RepeatingView("col");	/ repeatingview van behaviors	,
		add(colgroupCols);

/ Intermezzo

/ Dus is ook een panel,	

$ vi ./wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/repeater/data/table/ColGroup.html
<wicket:panel>
    <col wicket:id="col"/>		/ 'n repeating view	,
</wicket:panel>

/ een repeating view heeft een lege onPopulate fct	, want je add manually dus met add	, 
/ een voorbeeld daarvan is in DataTablePage	, 
		ColGroup colgroup = tableWithColGroup.getColGroup();	/ 'n repeatingview	,
		colgroup.add(AttributeModifier.append("style", "border: solid 1px green;"));
		colgroup.addCol(colgroup.new Col(AttributeModifier.append("style", "background-color: lightblue;")));
		...
/ TODO

/ Einde Intermezzo

/t
DefaultDataTable<T,S>(DataTable<T,S>).<init>(String, List<IColumn<T,S>>, IDataProvider<T>, long) line: 143	
		this.colGroup = new ColGroup("colGroup");
/d
		add(colGroup);
		body = newBodyContainer("body");
/s
DefaultDataTable<T,S>(DataTable<T,S>).newBodyContainer(String) line: 196	
		return new WebMarkupContainer(id);
/t
DefaultDataTable<T,S>(DataTable<T,S>).<init>(String, List<IColumn<T,S>>, IDataProvider<T>, long) line: 143	
		body = newBodyContainer("body");
/d

/ Klopt, body is een webmarkupcontainer, dus zien we de html internal, niet in een eigen html page zoals bij deen panel, 
$ vi DataTable.html
...
<tbody wicket:id="body">
	<tr wicket:id="rows">

		datagrid = newDataGridView("rows", columns, dataProvider);
/s
DefaultDataTable<T,S>(DataTable<T,S>).newDataGridView(String, List<IColumn<T,S>>, IDataProvider<T>) line: 168	
		return new DefaultDataGridView(id, columns, dataProvider);
/s
public class DataTable<T, S> extends Panel implements IPageableItems
	private class DefaultDataGridView extends DataGridView<T>
			super(id, columns, dataProvider);
/t
DefaultDataTable<T,S>(DataTable<T,S>).<init>(String, List<IColumn<T,S>>, IDataProvider<T>, long) line: 143	
		datagrid = newDataGridView("rows", columns, dataProvider);
/d
		datagrid.setItemsPerPage(rowsPerPage);
8
/ komt uit DataTablePage_my	,

		body.add(datagrid);
		add(body);
		topToolbars = new ToolbarsContainer("topToolbars");
/s
	private static class ToolbarsContainer extends WebMarkupContainer
		private ToolbarsContainer(final String id)
			super(id);
			toolbars = new RepeatingView("toolbars");
			add(toolbars);
/t
DefaultDataTable<T,S>(DataTable<T,S>).<init>(String, List<IColumn<T,S>>, IDataProvider<T>, long) line: 150	
		topToolbars = new ToolbarsContainer("topToolbars");
/d
		bottomToolbars = new ToolbarsContainer("bottomToolbars");
		add(topToolbars);
		add(bottomToolbars);
/t
DefaultDataTable<T,S>.<init>(String, List<IColumn<T,S>>, ISortableDataProvider<T,S>, int) line: 65	
		super(id, columns, dataProvider, rowsPerPage);
/d
		addTopToolbar(new NavigationToolbar(this));
/s
NavigationToolbar.<init>(DataTable<?,?>) line: 43	
		super(table);

/ Intermezzo

public class NavigationToolbar extends AbstractToolbar
public abstract class AbstractToolbar extends Panel

/ panel heeft eigen html file	,

$ vi ./wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/repeater/data/table/NavigationToolbar.html

<wicket:panel xmlns:wicket="http://wicket.apache.org">
    <tr class="navigation">
        <td wicket:id="span">
            <div class="navigatorLabel"><div wicket:id="navigatorLabel">[navigator-label]</div></div>
            <div class="navigator"><div wicket:id="navigator">[navigator]</div></div>
        </td>
    </tr>
</wicket:panel>

/ Einde Intermezzo

/s
NavigationToolbar(AbstractToolbar).<init>(DataTable<?,?>) line: 58	
		this(null, table);
/s
NavigationToolbar(AbstractToolbar).<init>(IModel<?>, DataTable<?,?>) line: 46	
->		super(table.newToolbarId(), model);
model=null
		this.table = table;
/s
NavigationToolbar(Panel).<init>(String, IModel<?>) line: 75	
		super(id, model);
id="1"
model=null
/d
NavigationToolbar.<init>(DataTable<?,?>) line: 45	
		super(table);
/d
		WebMarkupContainer span = new WebMarkupContainer("span");
/ zien we internal in NavigationToolbar.html,	
		span.add(AttributeModifier.replace("colspan", new AbstractReadOnlyModel<String>()
			...
/ colspan is een attr, <... colspan=... />

		span.add(newPagingNavigator("navigator", table));
/s
NavigationToolbar.newPagingNavigator(String, DataTable<?,?>) line: 74	
		return new PagingNavigator(navigatorId, table);
/s
PagingNavigator.<init>(String, IPageable) line: 52	
		this(id, pageable, null);
/s
PagingNavigator.<init>(String, IPageable, IPagingLabelProvider) line: 70	
		super(id);
		this.pageable = pageable;
pageable	DefaultDataTable<T,S>  (id=12072)	
		this.labelProvider = labelProvider;
null

/ Intermezzo

public class PagingNavigator extends Panel

$ vi ./wicket-core/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigator.html
<html xmlns:wicket="http://wicket.apache.org">
<body>
<wicket:panel>
    <a wicket:id="first" class="first">&lt;&lt;</a>
    <a wicket:id="prev" rel="prev" class="prev">&lt;</a>
    <span wicket:id="navigation" class="goto">
        <a wicket:id="pageLink" href="#"><span wicket:id="pageNumber">5</span></a>
    </span>
    <a wicket:id="next" rel="next" class="next">&gt;</a>
    <a wicket:id="last" class="last">&gt;&gt;</a>
</wicket:panel>
</body>
</html>

/ Einde Intermezzo

/t
NavigationToolbar.<init>(DataTable<?,?>) line: 59	
		span.add(newPagingNavigator("navigator", table));
/d
		span.add(newNavigatorLabel("navigatorLabel", table));
/s
NavigationToolbar.newNavigatorLabel(String, DataTable<?,?>) line: 89	
		return new NavigatorLabel(navigatorId, table);
/s
NavigatorLabel.<init>(String, IPageableItems) line: 48	
public class NavigatorLabel extends Label
		super(id);
		setDefaultModel(new StringResourceModel("NavigatorLabel", this, new Model<>(new LabelModelObject(pageable))));
this	NavigatorLabel  (id=12139)	
/ TODO

/t
DefaultDataTable<T,S>.<init>(String, List<IColumn<T,S>>, ISortableDataProvider<T,S>, int) line: 66	
		addTopToolbar(new NavigationToolbar(this));
/d
		addTopToolbar(new HeadersToolbar<>(this, dataProvider));
/s
public class HeadersToolbar<S> extends AbstractToolbar
HeadersToolbar<S>.<init>(DataTable<T,S>, ISortStateLocator<S>) line: 60	

		super(table);

/ Intermezzo

/ is een panel	,

$ vi ./wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/repeater/data/table/HeadersToolbar.html
<wicket:panel xmlns:wicket="http://wicket.apache.org">
    <tr class="headers">									
        <wicket:container wicket:id="headers">											/ refreshingview	,
            <th wicket:id="header"><span wicket:id="label">[header-label]</span></th>
        </wicket:container>
    </tr>
</wicket:panel>

/ Einde Intermezzo

		RefreshingView<IColumn<T, S>> headers = new RefreshingView<IColumn<T, S>>("headers")
			...
		add(headers);
/t
DefaultDataTable<T,S>.<init>(String, List<IColumn<T,S>>, ISortableDataProvider<T,S>, int) line: 66	
		addTopToolbar(new HeadersToolbar<>(this, dataProvider));
/ pd
/s
DefaultDataTable<T,S>(DataTable<T,S>).addTopToolbar(AbstractToolbar) line: 232	
		addToolbar(toolbar, topToolbars);
/s
DefaultDataTable<T,S>(DataTable<T,S>).addToolbar(AbstractToolbar, DataTable$ToolbarsContainer) line: 368	
		container.getRepeatingView().add(toolbar);
container	DataTable$ToolbarsContainer  (id=12114)	
/t
DefaultDataTable<T,S>.<init>(String, List<IColumn<T,S>>, ISortableDataProvider<T,S>, int) line: 67	
		addTopToolbar(new HeadersToolbar<>(this, dataProvider));
/d
		addBottomToolbar(new NoRecordsToolbar(this));
/ TODO

/ BREAKPOINT
Panel [line: 96] - getRegionMarkup()	

/c
/ RENDER 
/s
	DataTable$DefaultDataGridView.newCellItem(String, int, IModel) line: 561	
			Item item = DataTable.this.newCellItem(id, index, model);
/cb
	DataTable$DefaultDataGridView(AbstractDataGridView<T>).populateItem(Item<T>) line: 153
		RepeatingView cells = new RepeatingView(CELL_REPEATER_ID);
		item.add(cells);
		int populatorsNumber = populators.size();
		for (int i = 0; i < populatorsNumber; i++)
		{
			ICellPopulator<T> populator = populators.get(i);
/ AbstractColumn, PropertyColumn	,
			IModel<ICellPopulator<T>> populatorModel = new Model<>(populator);
			Item<ICellPopulator<T>> cellItem = newCellItem(cells.newChildId(), i, populatorModel);
/cb	
	RefreshingView$1.newItem(int, IModel<T>) line: 114	
		return new IItemFactory<T>()
			@Override
			public Item<T> newItem(int index, IModel<T> model)
				String id = RefreshingView.this.newChildId();
				Item<T> item = RefreshingView.this.newItem(id, index, model); / row item, met detach model met contact id	,
				RefreshingView.this.populateItem(item);
/cb
	DefaultItemReuseStrategy$1.next() line: 75	
				IModel<T> model = newModels.next();
				Item<T> item = factory.newItem(index, model);
/cb
	DefaultItemReuseStrategy$1.next() line: 56	
	DataTable$DefaultDataGridView(RefreshingView<T>).addItems(Iterator<Item<T>>) line: 189	
		while (items.hasNext())
		{
			Item<T> item = items.next();
/cb
	DataTable$DefaultDataGridView(RefreshingView<T>).onPopulate() line: 97	
		Iterator<IModel<T>> models = getItemModels();	
		Iterator<Item<T>> items = getItemReuseStrategy().getItems(newItemFactory(), models,
			getItems());
		removeAll();
		addItems(items);
/cb
	DataTable$DefaultDataGridView(AbstractRepeater).onBeforeRender() line: 124	
	DataTable$DefaultDataGridView(AbstractPageableView<T>).onBeforeRender() line: 115	
	DataTable$DefaultDataGridView(Component).internalBeforeRender() line: 949	
	DataTable$DefaultDataGridView(Component).beforeRender() line: 1017	
	WebMarkupContainer(MarkupContainer).onBeforeRenderChildren() line: 1866	
	WebMarkupContainer(Component).onBeforeRender() line: 3877	
	WebMarkupContainer(Component).internalBeforeRender() line: 949	
	WebMarkupContainer(Component).beforeRender() line: 1017	
	DefaultDataTable<T,S>(MarkupContainer).onBeforeRenderChildren() line: 1866	
	DefaultDataTable<T,S>(Component).onBeforeRender() line: 3877	
	DefaultDataTable<T,S>(Component).internalBeforeRender() line: 949	
	DefaultDataTable<T,S>(Component).beforeRender() line: 1017	
	DataTablePage_my(MarkupContainer).onBeforeRenderChildren() line: 1866	
	DataTablePage_my(Component).onBeforeRender() line: 3877	
	DataTablePage_my(Page).onBeforeRender() line: 801	
	DataTablePage_my(Component).internalBeforeRender() line: 949	
	DataTablePage_my(Component).beforeRender() line: 1017	
	DataTablePage_my(Component).internalPrepareForRender(boolean) line: 2215	
	DataTablePage_my(Page).internalPrepareForRender(boolean) line: 242	
	DataTablePage_my(Component).render() line: 2304	
	DataTablePage_my(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/s
DataTable$DefaultDataGridView.newCellItem(String, int, IModel) line: 561	
			Item item = DataTable.this.newCellItem(id, index, model);		/ cell item	,
/ model met object AbstractColumn/PropertyColumn	, 
object	DataTablePage_my$1  (id=16192)		/ AbstractColumn, heeft GEEN propertyExpression	,
	displayModel	Model<T>  (id=16212)	
	sortProperty	null	
/s
DefaultDataTable<T,S>(DataTable<T,S>).newCellItem(String, int, IModel<IColumn<T,S>>) line: 390	
		return new Item<>(id, index, model);
/t
DataTable$DefaultDataGridView.newCellItem(String, int, IModel) line: 562	
			Item item = DataTable.this.newCellItem(id, index, model);
/d
			final IColumn<T, S> column = DataTable.this.columns.get(index);
			if (column instanceof IStyledColumn)
/j
			{
				item.add(new CssAttributeBehavior()
				{
					private static final long serialVersionUID = 1L;

					@Override
					protected String getCssClass()
					{
						return ((IStyledColumn<T, S>)column).getCssClass();
					}
				});
			}
/ TODO
			return item;
/t
DataTable$DefaultDataGridView(AbstractDataGridView<T>).populateItem(Item<T>) line: 156	
			Item<ICellPopulator<T>> cellItem = newCellItem(cells.newChildId(), i, populatorModel);
/d
			cells.add(cellItem);			/ cells = repeating view	,
			populator.populateItem(cellItem, CELL_ITEM_ID, item.getModel()); / row item's model
/s
DataTablePage_my$1.populateItem(Item<ICellPopulator<Contact>>, String, IModel<Contact>) line: 60	
/=
	public DataTablePage_my()
		columns.add(new AbstractColumn<Contact, String>(new Model<>("Actions"))
		{
			@Override
			public void populateItem(Item<ICellPopulator<Contact>> cellItem, String componentId,
				IModel<Contact> model)
			{
				cellItem.add(new ActionPanel(componentId, model));
model= row item's model	,

/ er staat Item<ICellPopulator<Contact>> cellItem	, want de item's model heeft object van type ICellPopulator<Contact>	, en klopt: het is een AbstractColumn<Contact,String>/PropertyColumn<Contact, String>	,  
/ klopt: in DataGridView was de object van de model van een cell item new PropertyPopulator<Contact>("id") bijv	, later verschijnt deze ook in het label, die een PropertyModel heeft	, met de property expression "id" uit de cell item's model	, 

/ volgende	, 
DataTable$DefaultDataGridView(AbstractDataGridView<T>).populateItem(Item<T>) line: 151	
/=
	protected final void populateItem(final Item<T> item)
/ item = row item	,

		for (int i = 0; i < populatorsNumber; i++)
		{
			ICellPopulator<T> populator = populators.get(i);
populator	PropertyColumn<T,S>  (id=16194)	
	displayModel	Model<T>  (id=16264)	
	propertyExpression	"firstName" (id=16265)	
	sortProperty	"firstName" (id=16265)	

			IModel<ICellPopulator<T>> populatorModel = new Model<>(populator);
			Item<ICellPopulator<T>> cellItem = newCellItem(cells.newChildId(), i, populatorModel);
			cells.add(cellItem);
			populator.populateItem(cellItem, CELL_ITEM_ID, item.getModel());
/s
PropertyColumn<T,S>.populateItem(Item<ICellPopulator<T>>, String, IModel<T>) line: 97	
		item.add(new Label(componentId, getDataModel(rowModel)));

this	PropertyColumn<T,S>  (id=16194)	
item	Item<T>  (id=16276)	
	children	Label  (id=16285)	
		data	PropertyModel<T>  (id=16287)	
			expression	"firstName" (id=16265)	
			target	DetachableContactModel  (id=16180)	
				id	14	
				state	LoadableDetachableModel$InternalState  (id=16184)	
				transientModelObject	null	
		flags	1074864282	
		generatedMarkupId	-1	
		id	"cell" (id=16250)	
		markup	null	
		markupSourcingStrategy	null	
		parent	Item<T>  (id=16276)	
		requestFlags	0	
	data	Object[2]  (id=16281)	
		[0]	Model<T>  (id=16273)	
			object	PropertyColumn<T,S>  (id=16194)	
				displayModel	Model<T>  (id=16264)	
				propertyExpression	"firstName" (id=16265)	
				sortProperty	"firstName" (id=16265)	
		[1]	DataTable$DefaultDataGridView$1  (id=16283)		
/=
			if (column instanceof IStyledColumn)
			{
				item.add(new CssAttributeBehavior()
				{
					private static final long serialVersionUID = 1L;

					@Override
					protected String getCssClass()
					{
						return ((IStyledColumn<T, S>)column).getCssClass();
					}
				});

	id	"3" (id=16282)	
	parent	RepeatingView  (id=16186)	
...
/t
DataTable$DefaultDataGridView(AbstractRepeater).onBeforeRender() line: 126	
		onPopulate();
/d
this	DataTable$DefaultDataGridView  (id=15862)	
	data	null	
	dataProvider	SortableContactDataProvider  (id=16130)	
	id	"rows" (id=16187)	
	parent	WebMarkupContainer  (id=16146)	
	children	ArrayList<E>  (id=16309)	
		elementData	Object[12]  (id=16311)	
			[0]	OddEvenItem<T>  (id=16174)	
				children	RepeatingView  (id=16186)	
					data	null	
					id	"cells" (id=16172)	
					parent	OddEvenItem<T>  (id=16174)	
					children	ArrayList<E>  (id=16323)	
						elementData	Object[12]  (id=16325)	
							[0]	Item<T>  (id=16252)	
								children	BasePage$ActionPanel  (id=16333)	
									children	BasePage$ActionPanel$1  (id=16356)		 / Link	,
									data	DetachableContactModel  (id=16180)	
										id	14	
										state	LoadableDetachableModel$InternalState  (id=16184)	
										transientModelObject	null	
									id	"cell" (id=16250)	
									parent	Item<T>  (id=16252)	
								data	Object[2]  (id=16253)	
									[0]	Model<T>  (id=16209)	
										object	DataTablePage_my$1  (id=16192)	
											displayModel	Model<T>  (id=16212)	
											sortProperty	null	
											this$0	DataTablePage_my  (id=15827)	
									[1]	DataTable$DefaultDataGridView$1  (id=16254)	
								id	"1" (id=16183)	
								parent	RepeatingView  (id=16186)	
							[1]	Item<T>  (id=16263)	
							[2]	Item<T>  (id=16276)	
								children	Label  (id=16285)	
									data	PropertyModel<T>  (id=16287)	
										expression	"firstName" (id=16265)	
										target	DetachableContactModel  (id=16180)	
								data	Object[2]  (id=16281)	
									[0]	Model<T>  (id=16273)	
										object	PropertyColumn<T,S>  (id=16194)	
											displayModel	Model<T>  (id=16264)	
											propertyExpression	"firstName" (id=16265)	
											sortProperty	"firstName" (id=16265)	
									[1]	DataTable$DefaultDataGridView$1  (id=16283)	
								id	"3" (id=16282)	
								parent	RepeatingView  (id=16186)	
							[3]	Item<T>  (id=16328)	
							[4]	Item<T>  (id=16329)	
							[5]	Item<T>  (id=16330)	
						size	6	
				data	DetachableContactModel  (id=16180)	
					id	14	
					state	LoadableDetachableModel$InternalState  (id=16184)	
					transientModelObject	null	
				id	"1" (id=16183)	
				parent	DataTable$DefaultDataGridView  (id=15862)	
			[1]	OddEvenItem<T>  (id=16312)	
			[2]	OddEvenItem<T>  (id=16313)	
			[3]	OddEvenItem<T>  (id=16314)	
			[4]	OddEvenItem<T>  (id=16315)	
			[5]	OddEvenItem<T>  (id=16316)	
			[6]	OddEvenItem<T>  (id=16317)	
			[7]	OddEvenItem<T>  (id=16318)	
		size	8	
	parent	WebMarkupContainer  (id=16146)	
	populators	ArrayList<E>  (id=16188)	
		elementData	Object[10]  (id=16190)	
			[0]	DataTablePage_my$1  (id=16192)	
				displayModel	Model<T>  (id=16212)	
				sortProperty	null	
				this$0	DataTablePage_my  (id=15827)	
			[1]	DataTablePage_my$2  (id=16193)	
				displayModel	Model<T>  (id=16428)	
				propertyExpression	"id" (id=16429)	
				sortProperty	null	
				this$0	DataTablePage_my  (id=15827)	
			[2]	PropertyColumn<T,S>  (id=16194)	
				displayModel	Model<T>  (id=16264)	
				propertyExpression	"firstName" (id=16265)	
				sortProperty	"firstName" (id=16265)	
			[3]	DataTablePage_my$3  (id=16195)	
				displayModel	Model<T>  (id=16426)	
				propertyExpression	"lastName" (id=16427)	
				sortProperty	"lastName" (id=16427)	
				this$0	DataTablePage_my  (id=15827)	
			[4]	PropertyColumn<T,S>  (id=16196)	
				displayModel	Model<T>  (id=16424)	
				propertyExpression	"homePhone" (id=16425)	
				sortProperty	null	
			[5]	PropertyColumn<T,S>  (id=16198)	
				displayModel	Model<T>  (id=16422)	
				propertyExpression	"cellPhone" (id=16423)	
				sortProperty	null	
		size	6	

/c
/ RESOLVE PROPERTY MODEL
/s
	PropertyModel<T>(AbstractPropertyModel<T>).getObject() line: 71	
	Label(Component).getDefaultModelObject() line: 1626	
	Label(Component).getDefaultModelObjectAsString() line: 1654	
	Label.onComponentTagBody(MarkupStream, ComponentTag) line: 115	
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
	Label(Component).internalRenderComponent() line: 2565	
	Label(WebComponent).onRender() line: 60	
	Label(Component).internalRender() line: 2380	
	Label(Component).render() line: 2308	
	Item<T>(MarkupContainer).renderNext(MarkupStream) line: 1524	
	Item<T>(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	Item<T>(MarkupContainer).renderComponentTagBody(MarkupStream, ComponentTag) line: 1734	
	Item<T>(MarkupContainer).onComponentTagBody(MarkupStream, ComponentTag) line: 1657	
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
	Item<T>(Component).internalRenderComponent() line: 2565	
	Item<T>(MarkupContainer).onRender() line: 1698	
	Item<T>(Component).internalRender() line: 2380	
	Item<T>(Component).render() line: 2308	
	RepeatingView(AbstractRepeater).renderChild(Component) line: 115	
	RepeatingView(AbstractRepeater).onRender() line: 102	
	RepeatingView(Component).internalRender() line: 2380	
	RepeatingView(Component).render() line: 2308	
	OddEvenItem<T>(MarkupContainer).renderNext(MarkupStream) line: 1524	
	OddEvenItem<T>(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	OddEvenItem<T>(MarkupContainer).renderComponentTagBody(MarkupStream, ComponentTag) line: 1734	
	OddEvenItem<T>(MarkupContainer).onComponentTagBody(MarkupStream, ComponentTag) line: 1657	
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
	OddEvenItem<T>(Component).internalRenderComponent() line: 2565	
	OddEvenItem<T>(MarkupContainer).onRender() line: 1698	
	OddEvenItem<T>(Component).internalRender() line: 2380	
	OddEvenItem<T>(Component).render() line: 2308	
	DataTable$DefaultDataGridView(AbstractRepeater).renderChild(Component) line: 115	
	DataTable$DefaultDataGridView(AbstractRepeater).onRender() line: 102	
	DataTable$DefaultDataGridView(Component).internalRender() line: 2380	
	DataTable$DefaultDataGridView(Component).render() line: 2308	
	WebMarkupContainer(MarkupContainer).renderNext(MarkupStream) line: 1524	
	WebMarkupContainer(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	WebMarkupContainer(MarkupContainer).renderComponentTagBody(MarkupStream, ComponentTag) line: 1734	
	WebMarkupContainer(MarkupContainer).onComponentTagBody(MarkupStream, ComponentTag) line: 1657	
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
	WebMarkupContainer(Component).internalRenderComponent() line: 2565	
	WebMarkupContainer(MarkupContainer).onRender() line: 1698	
	WebMarkupContainer(Component).internalRender() line: 2380	
	WebMarkupContainer(Component).render() line: 2308	
	DefaultDataTable<T,S>(MarkupContainer).renderNext(MarkupStream) line: 1524	
	DefaultDataTable<T,S>(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	DefaultDataTable<T,S>(MarkupContainer).renderComponentTagBody(MarkupStream, ComponentTag) line: 1734	
	DefaultDataTable<T,S>(MarkupContainer).renderAssociatedMarkup(String, String) line: 797	
	PanelMarkupSourcingStrategy(AssociatedMarkupSourcingStrategy).renderAssociatedMarkup(Component) line: 77	
	PanelMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 112	
	DefaultDataTable<T,S>(Component).internalRenderComponent() line: 2565	
	DefaultDataTable<T,S>(MarkupContainer).onRender() line: 1698	
	DefaultDataTable<T,S>(Component).internalRender() line: 2380	
	DefaultDataTable<T,S>(Component).render() line: 2308	
	DataTablePage_my(MarkupContainer).renderNext(MarkupStream) line: 1524	
	DataTablePage_my(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	DataTablePage_my(Page).onRender() line: 879	
	DataTablePage_my(WebPage).onRender() line: 141	
	DataTablePage_my(Component).internalRender() line: 2380	
	DataTablePage_my(Component).render() line: 2308	
	DataTablePage_my(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/ OK

/ LINK, 





 














 

















/ Einde DATATABLE



/ GRIDVIEW

DataGridView
AbstractDataGridView / GridView
DataViewBase
AbstractPageableView
RefreshingView
RepeatingView
AbstractRepeater
WebMarkupContainer
MarkupContainer
Component


GridView Example - demonstrates a grid view
/s
public class GridViewPage extends BasePage
{
	/**
	 * Constructor
	 */
	public GridViewPage()
	{
		IDataProvider<Contact> dataProvider = new ContactDataProvider();
		GridView<Contact> gridView = new GridView<Contact>("rows", dataProvider)
		{
			@Override
			protected void populateItem(Item<Contact> item)			/ populates een cell	,
			{
				final Contact contact = item.getModelObject();
				item.add(new Label("firstName", contact.getFirstName() + " " +
					contact.getLastName()));
			}

			@Override
			protected void populateEmptyItem(Item<Contact> item)
			{
				item.add(new Label("firstName", "*empty*"));
			}
		};

		gridView.setRows(4);
		gridView.setColumns(3);

		add(gridView);
		add(new PagingNavigator("navigator", gridView));
	}
}

/s
GridViewPage$1(DataViewBase<T>).<init>(String, IDataProvider<T>) line: 59	
		super(id);
/d
		this.dataProvider = Args.notNull(dataProvider, "dataProvider");
/t
GridViewPage$1(GridView<T>).<init>(String, IDataProvider<T>) line: 75	
	private int columns = 1;
	private int rows = Integer.MAX_VALUE;
/t
GridViewPage.<init>() line: 55	
		gridView.setRows(4);
		gridView.setColumns(3);
/c
GridViewPage$1(AbstractRepeater).onBeforeRender() line: 124	
		onPopulate();
/s
GridViewPage$1(RefreshingView<T>).onPopulate() line: 93	
		Iterator<IModel<T>> models = getItemModels();
		Iterator<Item<T>> items = getItemReuseStrategy().getItems(newItemFactory(), models,
			getItems());
		removeAll();
		addItems(items);
/s
GridViewPage$1(AbstractPageableView<T>).getItemModels() line: 101	

/ Intermezzo

/ Dit is 1 van de methods die je moet geven als je een RefreshingModel subclass	, see RefreshingView.java	, 
   add(new RefreshingView<Contract>("view") {
	@Override protected void populateItem(Item<Contract> item) {
	@Override protected Iterator<IModel<Contract>> getItemModels() {

/ Einde Intermezzo

		long offset = getFirstItemOffset();
0
		long size = getViewSize();
12
/ TODO
		Iterator<IModel<T>> models = getItemModels(offset, size);
/s
GridViewPage$1(DataViewBase<T>).getItemModels(long, long) line: 74	
		return new ModelIterator<T>(internalGetDataProvider(), offset, count);
/s
DataViewBase$ModelIterator<T>.<init>(IDataProvider<T>, long, long) line: 107	
			this.dataProvider = dataProvider;
			max = count;
			items = count > 0 ? dataProvider.iterator(offset, count) : null;
/t
GridViewPage$1(AbstractPageableView<T>).getItemModels() line: 101	
		Iterator<IModel<T>> models = getItemModels(offset, size);
/d
		return models;
/t
GridViewPage$1(RefreshingView<T>).onPopulate() line: 94	
		Iterator<IModel<T>> models = getItemModels();
/d
		Iterator<Item<T>> items = getItemReuseStrategy().getItems(newItemFactory(), models,
			getItems());
		removeAll();
		addItems(items);
/s
GridViewPage$1(GridView<T>).addItems(Iterator<Item<T>>) line: 170	
/=
	protected void addItems(Iterator<Item<T>> items)

			final int cols = getColumns();								/ 3
			int row = 0;
			do
			{
				// Build a row
				Item<?> rowItem = newRowItem(newChildId(), row);
/s
GridViewPage$1(GridView<T>).newRowItem(String, int) line: 256	
		return new Item<Object>(id, index, null);
/t
GridViewPage$1(GridView<T>).addItems(Iterator<Item<T>>) line: 170	
				Item<?> rowItem = newRowItem(newChildId(), row);
/d
				RepeatingView rowView = new RepeatingView("cols");
				rowItem.add(rowView);
				add(rowItem);

/ we zijn in een GridView>RefreshingView = {row}	, denk vertical	, en in ieder Item komt een RepeatingView 	, een row={cell}	, denk horizontaal	,

				// Populate the row
				for (int index = 0; index < cols; index++)
				{
					final Item<T> cellItem;
					if (items.hasNext())
						cellItem = items.next();
/s
DefaultItemReuseStrategy$1.next() line: 74	
/=
	@Override
	public <T> Iterator<Item<T>> getItems(final IItemFactory<T> factory, final Iterator<IModel<T>> newModels, Iterator<Item<T>> existingItems)
	{
		return new Iterator<Item<T>>()
		{
			private int index = 0;

			public boolean hasNext()
			{
				return newModels.hasNext();
			}

			@Override
			public Item<T> next()
			{
				IModel<T> model = newModels.next();
model	DetachableContactModel  (id=11449)	
	id	2	
	state	LoadableDetachableModel$InternalState  (id=11451)	
	transientModelObject	null	

				Item<T> item = factory.newItem(index, model);
/s
RefreshingView$1.newItem(int, IModel<T>) line: 112	
/=
	protected IItemFactory<T> newItemFactory()
	{
		return new IItemFactory<T>()
		{
			@Override
			public Item<T> newItem(int index, IModel<T> model)
			{
				String id = RefreshingView.this.newChildId();
"3"
				Item<T> item = RefreshingView.this.newItem(id, index, model);
/ new Item
				RefreshingView.this.populateItem(item);
/s
GridViewPage$1.populateItem(Item<Contact>) line: 43	
/=
	{
		GridView<Contact> gridView = new GridView<Contact>("rows", dataProvider)
		{
			@Override
			protected void populateItem(Item<Contact> item)
			{
				final Contact contact = item.getModelObject();
				item.add(new Label("firstName", contact.getFirstName() + " " +
					contact.getLastName()));
			}
/s
Item<T>(ListItem<T>).getModelObject() line: 94	
		return (T)getDefaultModelObject();
/s
Item<T>(Component).getDefaultModelObject() line: 1620	
		final IModel<?> model = getDefaultModel();

model	DetachableContactModel  (id=11449)	
	id	2	
	state	LoadableDetachableModel$InternalState  (id=11451)	
	transientModelObject	null	

				// Get model value for this component.
				return model.getObject();
/s
DetachableContactModel(LoadableDetachableModel<T>).getObject() line: 129	
		if (state == null || state == InternalState.DETACHED)
		{
			// prevent infinite attachment loops
			state = InternalState.ATTACHING;

			transientModelObject = load();
/s
DetachableContactModel.load() line: 97	
		return getContactsDB().get(id);

/ TODO AFMAKEN 

/ Wat doet PropertyColumn	?
/ TODO

/ Einde GRIDVIEW


/ DATATABLE

DataTable Example - demonstrates data table component that wraps dataview to offer easy paging and sorting

DataGridView
AbstractDataGridView
DataViewBase
AbstractPageableView
RefreshingView
RepeatingView
AbstractRepeater
WebMarkupContainer
MarkupContainer  				/ A MarkupContainer holds a map of child components.
Component

/s
/ stack
	DataTable$DefaultDataGridView(Component).<init>(String, IModel<?>) line: 682	

	DataTable$DefaultDataGridView(MarkupContainer).<init>(String, IModel<?>) line: 178	
		super(id, model);

	DataTable$DefaultDataGridView(WebMarkupContainer).<init>(String, IModel<?>) line: 53	
		super(id, model);

	DataTable$DefaultDataGridView(WebMarkupContainer).<init>(String) line: 45	
		this(id, null);

	DataTable$DefaultDataGridView(AbstractRepeater).<init>(String) line: 64	
		super(id);

	DataTable$DefaultDataGridView(RepeatingView).<init>(String) line: 81	
		super(id);

	DataTable$DefaultDataGridView(RefreshingView<T>).<init>(String) line: 70	
		super(id);

	DataTable$DefaultDataGridView(AbstractPageableView<T>).<init>(String) line: 85	
		super(id);

	DataTable$DefaultDataGridView(DataViewBase<T>).<init>(String, IDataProvider<T>) line: 57	
->		super(id);
		this.dataProvider = Args.notNull(dataProvider, "dataProvider");

	DataTable$DefaultDataGridView(AbstractDataGridView<T>).<init>(String, List<ICellPopulator<T>>, IDataProvider<T>) line: 64	
->		super(id, dataProvider);
		this.populators = populators;

	DataTable$DefaultDataGridView(DataGridView<T>).<init>(String, List<ICellPopulator<T>>, IDataProvider<T>) line: 84	
		super(id, populators, dataProvider);

	DataTable$DefaultDataGridView.<init>(String, List<IColumn<T,S>>, IDataProvider<T>) line: 554	
/=
	private class DefaultDataGridView extends DataGridView<T> {
		public DefaultDataGridView(String id, List<? extends IColumn<T, S>> columns, IDataProvider<T> dataProvider) {
			super(id, columns, dataProvider);

	DefaultDataTable<T,S>(DataTable<T,S>).newDataGridView(String, List<IColumn<T,S>>, IDataProvider<T>) line: 168	
		return new DefaultDataGridView(id, columns, dataProvider);

	DefaultDataTable<T,S>(DataTable<T,S>).<init>(String, List<IColumn<T,S>>, IDataProvider<T>, long) line: 145	
		datagrid = newDataGridView("rows", columns, dataProvider);

	DefaultDataTable<T,S>.<init>(String, List<IColumn<T,S>>, ISortableDataProvider<T,S>, int) line: 63	
		super(id, columns, dataProvider, rowsPerPage);

	DataTablePage.<init>() line: 88	
		DataTable<Contact, String> dataTable = new DefaultDataTable<>("table", columns,
				dataProvider, 8);

	NativeConstructorAccessorImpl.newInstance0(Constructor, Object[]) line: not available [native method]	
	NativeConstructorAccessorImpl.newInstance(Object[]) line: 57	
	DelegatingConstructorAccessorImpl.newInstance(Object[]) line: 45	
	Constructor<T>.newInstance(Object...) line: 526	
	DefaultPageFactory.newPage(Constructor<C>, PageParameters) line: 175	
	DefaultPageFactory.newPage(Class<C>) line: 67	
	DefaultMapperContext.newPageInstance(Class<IRequestablePage>, PageParameters) line: 102	
	PageProvider.resolvePageInstance(Integer, Class<IRequestablePage>, PageParameters, Integer) line: 271	
	PageProvider.getPageInstance() line: 169	
	WebPageRenderer(PageRenderer).getPage() line: 78	
	WebPageRenderer.isPageStateless() line: 287	
	WebPageRenderer.shouldRenderPageAndWriteResponse(RequestCycle, Url, Url) line: 329	
	WebPageRenderer.respond(RequestCycle) line: 193	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/s
DataTable$DefaultDataGridView(Component).<init>(String, IModel<?>) line: 700	
/=
	public Component(final String id, final IModel<?> model)
model=null
		if (model != null)
/ NEE
		{
			setModelImpl(wrap(model));
/ NIET
/ TODO
/t
	DataTable$DefaultDataGridView(DataViewBase<T>).<init>(String, IDataProvider<T>) line: 57	
		super(id);
/d
		this.dataProvider = Args.notNull(dataProvider, "dataProvider");
/t
	DataTable$DefaultDataGridView(AbstractDataGridView<T>).<init>(String, List<ICellPopulator<T>>, IDataProvider<T>) line: 64	
		super(id, dataProvider);
/d
		this.populators = populators;
/t
DefaultDataTable<T,S>(DataTable<T,S>).<init>(String, List<IColumn<T,S>>, IDataProvider<T>, long) line: 146	
		datagrid = newDataGridView("rows", columns, dataProvider);
/d



/ Einde DATATABLE


/ WICKET 

/ we hadden 	,
http://localhost:9090/wicket-examples-step-by-step/repeater/wicket/bookmarkable/org.apache.wicket.examples.repeater.DataGridPage

/ ws wicket7_3
/ proj wicket-testing

/ 7	. 

/ Als we geen <head></head> geven	, verschijnt deze toch in HTML	, dat doet Tomcat WH,	  

$ vi WEB-INF/my.html

<!DOCTYPE html>
<html>
<body>
<div>Foo</div>
</body>
</html>

/ deploy wicket-testing

/ In HTML zien we 	, 

<!doctype html>
<html>
<head></head>
<body>
	<div>Foo</div>
</body>
</html>

/  Als we wel <head></head> geven	, verschijnt hij precies zo	, 

$ vi WEB-INF/my.html

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
<div>Foo</div>
</body>
</html> 

/ we zien in HTML	,
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
<div>Foo</div>
</body>
</html>

$ vi Page71.html

<!DOCTYPE html>
<html>
<body>
<div wicket:id="container">
	<blockquote wicket:id="foo"></blockquote>
	<blockquote wicket:id="bar"></blockquote>
</div>
</body>
</html>

$ vi Page71.java

package my.test.own;

import org.apache.wicket.Component;
import org.apache.wicket.MarkupContainer;
import org.apache.wicket.markup.html.WebMarkupContainer;
import org.apache.wicket.markup.html.WebPage;
import org.apache.wicket.markup.html.basic.Label;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.Model;

public class Container71 extends WebPage{
	public Container71() {
		MarkupContainer container=new WebMarkupContainer("container");
		add(container);
		IModel<String>model=Model.<String>of("Foo");
		Component label=new Label("foo", model);
		container.add(label);
		IModel<String>model2=Model.<String>of("Bar");
		Component label2=new Label("bar", model2);
		container.add(label2);
				
	}
}

/ we zien in HTML toch
<head></head>
/ See boven	, 

/ 7	. 

$ vi Page179.html

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Page712</title>
</head>
<body>
<div wicket:id="panel">this gets replaced</div>
</body>
</html>

$ vi Panel179.html

<wicket:head>
	<wicket:link>
		<link href="Panel179.css" rel="stylesheet">
	</wicket:link>
</wicket:head>
<wicket:panel>
	<h3 wicket:id="title"></h3>
</wicket:panel>

/ Dit is het enigste wat nodig is	, de rest wordt genegeerd	, 

$ vi Panel179.java 

public class Panel179 extends Panel{
	public Panel179(String id) {
		super(id);
		IModel<String>model=Model.<String>of("Foo");
		Component label=new Label("title", model);
		add(label);
	}
}

$ vi Page179.java

public class Page179 extends WebPage{
	public Page179() {
		Panel panel=new Panel179("panel");
		add(panel);
	}
}


/ 13	. 

/ Als we <wicket:head/> NIET	, dan in HTML zien we de <head/> zoals in Page179.html staat	, dus we zien de Panel179.css niet	, 
/ Als we <wicket:link/>  NIET	, dan zien we in HTML Panel179.css wel, maar wordt niet gevonden	, 

/ 13	. 

/ Maar we zien in HTML dat <head/> helemaal leeg is  en dat wat in <head/> staat in Page179.html in <body/> verschijnt , net als Panel179.css	, 

<html>
<head>
	</head>
<body>
	<wicket:link wicketpath="__header_____Panel179Header0_wicket__link1">
		<link href="./wicket/resource/my.test.own.Panel179/Panel179-ver-1474370490000.css" rel="stylesheet" wicketpath="__header_____Panel179Header0_wicket__link1___autolink__2">
	</wicket:link>

	<meta charset="UTF-8">
	<title>Page712</title>

	<div wicket:id="panel" wicketpath="panel">
		<wicket:panel>
			<h3 wicket:id="title" wicketpath="panel_title">Foo</h3>
		</wicket:panel>
	</div>
</body>
</html>

/ we zien <wicket:link> in HTML	, maar <wicket:head> NIET	, 
/ TODO

/ Inderdaad, in <div wicket:id="panel"/> zien we <wicket:panel/>	, 

/ Alles in <wicket:head/> 	, in een panel, of child page	, komt in de uiteindelijke page	, 
/ Maar we zien dat de <meta> en <title/> uit Page179.html in HTML ook in <body/> terecht komen	, 
/ TODO

/ 7	. 

/ Als we in Page179.html <wicket:head/> use	, verschijnt deze in HTML in <body/> 	, maar de rest in <head/> verschijnt in HTML wel in <head/>

$ vi Page179.html

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Page712</title>
<wicket:head>
	<wicket:link>
		<link href="Page179.css" rel="stylesheet">
	</wicket:link>
</wicket:head>
</head>
<body>
<div wicket:id="panel">this gets replaced</div>
</body>
</html>

$ vi Panel179.html

<wicket:panel>
	<h3 wicket:id="title"></h3>
</wicket:panel>

/ we zien in HTML	,

<html>
<head>
	<meta charset="UTF-8">
	<title>Page712</title>
</head>
<body>
	<wicket:link wicketpath="__header_____header___wicket__link3">
		<link href="./wicket/resource/my.test.own.Page179/Page179-ver-1474372960000.css" rel="stylesheet" wicketpath="__header_____header___wicket__link3___autolink__4">
	</wicket:link>

	<div wicket:id="panel" wicketpath="panel">
		<wicket:panel>
			<h3 wicket:id="title" wicketpath="panel_title">Foo</h3>
		</wicket:panel>
	</div>
</body>
</html>

/ 7	. 

/ ook in het voorbeeld hieronder wordt <wicket:link/> used, om te zorgen dat in de <a/ href="..."> die er in staat,  de href wordt gevonden	,

/ In de template van een child page use we <wicket:extend/> 	, net als bij <wicket:panel/> ziet Wicket wat daarbuiten staat NIET, behalve <wicket:head/>	, 

/ we mount PageBase188	, want dat is de 1ste page die we willen zien	, met de 2 links	, 
/ Aan PageBase188 add we NIETS	, we inherit alleen van deze	, 
/ Als we op PageFoo188.html zijn (eig. wat Wicket van dit template heeft gemaakt)	, dan verdwijnt de link PageFoo188	, de href verdwijnt	, want we zijn er op	, de link PageBar188 is wel active	, 

$ vi WicketApplication.java
	@Override
	public void init() {
		mountPage("pagebase188", PageBase188.class);

$ vi PageBase188.html

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>PageBase188</title>
</head>
<body>
<div id="contents">
	<wicket:link>
		<a href="PageFoo188.html">PageFoo188</a>
		<a href="PageBar188.html">PageBar188</a>
	</wicket:link>
	<wicket:child/>
</div>
</body>
</html>

$ vi PageFoo188.html

<wicket:extend>
	<div wicket:id="foos">
		<h3 wicket:id="name"></h3>
		<p wicket:id="desc"></p>
	</div>
</wicket:extend>

$ vi PageBar188.html

<wicket:extend>
	<div wicket:id="bars">
		<h3 wicket:id="name"></h3>
		<p wicket:id="desc"></p>
	</div>
</wicket:extend>

$ vi PageBase188.java

public class PageBase188 extends WebPage{
	public PageBase188() {				
	}
}

$ vi PageFoo188.java

public class PageFoo188 extends PageBase188{
	public PageFoo188() {
		List<Foo>foos=Arrays.asList(new Foo("foo","software"),new Foo("foo2","it"));
		PropertyListView<Foo>fooView=new PropertyListView<Foo>("foos",foos) {
			@Override
			protected void populateItem(ListItem<Foo> item) {
				item.add(new Label("name"));
				item.add(new Label("desc"));	
			}
		};
		add(fooView);
	}
}

$ vi PageBar188.java

public class PageBar188 extends PageBase188{
	public PageBar188() {
		List<Bar>bars=Arrays.asList(new Bar("bar","software"),new Bar("bar2","it"));
		PropertyListView<Bar>barView=new PropertyListView<Bar>("bars",bars) {
			@Override
			protected void populateItem(ListItem<Bar> item) {
				item.add(new Label("name"));
				item.add(new Label("desc"));	
			}
		};
		add(barView);
	}
}

/ 7	. 

/ Lees	,
 LOG_8_sep_2014.txt

/ Als we een page in een modal window hebben    , dan moeten we altijd een <head/> tag zetten in de template, 
/ Anders werkt de close link op de modal page niet      ,  

/ we konden het niet reproduce	, ook zonder <head></head> verschijnt de js in <head></head>
/ TODO


/ Einde WICKET 


/ WICKET SPRING

/ in manual	,
20 Integration with enterprise containers - Reference Documentation



/ google	, 
wicket spring bean annotation
/ Lees	, 
https://cwiki.apache.org/confluence/display/WICKET/Spring#Spring-UnitTestingtheProxyApproach
https://www.petrikainulainen.net/programming/tips-and-tricks/mocking-spring-beans-with-apache-wicket-and-mockito/





/ Einde WICKET SPRING


/ FILTER

/ we hadden	, 
http://localhost:9090/wicket-testing/modalwindow2

[eric@localhost apache-tomcat-8.0.28]$ bin/catalina.sh jpda run
...

/ ws wicket7_4
/ proj wicket-examples-step-by-step

/ Geef	,
http://localhost:9090/wicket-examples-step-by-step/repeater
/ we zien Index.class	,
http://localhost:9090/wicket-examples-step-by-step/repeater/listing
/ we zien MyListPage.class

/ op Index.class	,
DataTable Example - demonstrates data table component with a FilterToolbar on its data set
/ click op deze link	,

/c
	DataTable$DefaultDataGridView(RefreshingView<T>).onPopulate() line: 93	
	DataTable$DefaultDataGridView(AbstractRepeater).onBeforeRender() line: 124	
	DataTable$DefaultDataGridView(AbstractPageableView<T>).onBeforeRender() line: 115	
	DataTable$DefaultDataGridView(Component).internalBeforeRender() line: 949	
	DataTable$DefaultDataGridView(Component).beforeRender() line: 1017 		/ this	DataTable$DefaultDataGridView  (id=8811)	
	WebMarkupContainer(MarkupContainer).onBeforeRenderChildren() line: 1866	
	WebMarkupContainer(Component).onBeforeRender() line: 3877	
	WebMarkupContainer(Component).internalBeforeRender() line: 949	
	WebMarkupContainer(Component).beforeRender() line: 1017 			/ this	WebMarkupContainer  (id=8857)	
	DataTable<T,S>(MarkupContainer).onBeforeRenderChildren() line: 1866	
	DataTable<T,S>(Component).onBeforeRender() line: 3877	
	DataTable<T,S>(Component).internalBeforeRender() line: 949	
	DataTable<T,S>(Component).beforeRender() line: 1017				/ this DataTable<T,S>(Component).beforeRender() line: 1017	
	FilterForm<T>(MarkupContainer).onBeforeRenderChildren() line: 1866	
	FilterForm<T>(Component).onBeforeRender() line: 3877	
	FilterForm<T>(Form<T>).onBeforeRender() line: 1807	
	FilterForm<T>(Component).internalBeforeRender() line: 949	
	FilterForm<T>(Component).beforeRender() line: 1017								/ this this	FilterForm<T>  (id=8832)	
	DataTableFilterToolbarPage(MarkupContainer).onBeforeRenderChildren() line: 1866 
	DataTableFilterToolbarPage(Component).onBeforeRender() line: 3877	
	DataTableFilterToolbarPage(Page).onBeforeRender() line: 801	
	DataTableFilterToolbarPage(Component).internalBeforeRender() line: 949	
	DataTableFilterToolbarPage(Component).beforeRender() line: 1017	
	DataTableFilterToolbarPage(Component).internalPrepareForRender(boolean) line: 2215	
	DataTableFilterToolbarPage(Page).internalPrepareForRender(boolean) line: 242	
	DataTableFilterToolbarPage(Component).render() line: 2304	
	DataTableFilterToolbarPage(Page).renderPage() line: 1018					/ this DataTableFilterToolbarPage (id=8777)	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ we zitten dus in de respond	,  maar ook nog in de processRequest	, 
/ is de tx nu committed in osiv	?
/ TODO

/s
DataTable$DefaultDataGridView(RefreshingView<T>).onPopulate() line: 93	
		Iterator<IModel<T>> models = getItemModels();
		Iterator<Item<T>> items = getItemReuseStrategy().getItems(newItemFactory(), models,
			getItems());
		removeAll();
		addItems(items);
/ Dit gaan we doen	,
/=
DataTable$DefaultDataGridView(RefreshingView<T>).onPopulate() line: 93	
		Iterator<IModel<T>> models = getItemModels();
/s
DataTable$DefaultDataGridView(AbstractPageableView<T>).getItemModels() line: 101	
		long offset = getFirstItemOffset();
0
		long size = getViewSize();
8
/ intermezzo
/ de data provider heeft geen ref naar de db	, 
public class ContactDataProvider implements IDataProvider<Contact>
{
	protected ContactsDatabase getContactsDB()
	{
		return DatabaseLocator.getDatabase();
	}
/ einde intermezzo

/t
DataTable$DefaultDataGridView(RefreshingView<T>).onPopulate() line: 93	
		Iterator<IModel<T>> models = getItemModels(offset, size);
/d
/ in models is een list van Contacts	, niet van models
/ TODO
		Iterator<Item<T>> items = getItemReuseStrategy().getItems(newItemFactory(), models,
			getItems());
/s
DataTable$DefaultDataGridView(RefreshingView<T>).newItemFactory() line: 107	
/=
	protected IItemFactory<T> newItemFactory()
	{
		return new IItemFactory<T>()
		{
			@Override
			public Item<T> newItem(int index, IModel<T> model)
			{
				String id = RefreshingView.this.newChildId();
				Item<T> item = RefreshingView.this.newItem(id, index, model);
				RefreshingView.this.populateItem(item);
				return item;

/ 7	.

/ Hier zien we dat er een model wordt gemaakt, omdat we niet begrepen dat er een iterator van models wordt gemaakt, terwijl de iterator alleen Contacts heeft	, 
/c
	SortableContactDataProvider.model(Contact) line: 105	
		return new DetachableContactModel(object);
object	Contact  (id=8914)	
	bornDate	Date  (id=8916)	
	cellPhone	"557-555-7163" (id=9147)	
	firstName	"Abby" (id=9029)	
	homePhone	"507-555-4370" (id=9148)	
	id	14	
	lastName	"Black" (id=9149)	
/s
DetachableContactModel.<init>(Contact) line: 41	
		this(c.getId());
/ dus detachable model neemt alleen de id over	, 



	DataViewBase$ModelIterator<T>.next() line: 135	
			return dataProvider.model(items.next());		 / items=java.util.ArrayList$SubList$1 (id=8978)	, hier worden 
															/ de models create	,

	DataViewBase$ModelIterator<T>.next() line: 85	
	AbstractPageableView$CappedIteratorAdapter<T>.next() line: 377	
			return delegate.next();

	AbstractPageableView$CappedIteratorAdapter<T>.next() line: 328	
	DefaultItemReuseStrategy$1.next() line: 74	
			@Override
			public Item<T> next()
			{
->				IModel<T> model = newModels.next();	/ klopt, items heeft val$newModels
this	DefaultItemReuseStrategy$1  (id=8990)	
	val$newModels	AbstractPageableView$CappedIteratorAdapter<T>  (id=8970)	
		delegate	DataViewBase$ModelIterator<T>  (id=8975)	
			items	ArrayList$SubList$1  (id=8978)	

-->				Item<T> item = factory.newItem(index, model);	/ straks	,


	DefaultItemReuseStrategy$1.next() line: 56	
	DataTable$DefaultDataGridView(RefreshingView<T>).addItems(Iterator<Item<T>>) line: 189	
		int index = 0;
		while (items.hasNext())
		{
			Item<T> item = items.next();

	DataTable$DefaultDataGridView(RefreshingView<T>).onPopulate() line: 97	
		Iterator<IModel<T>> models = getItemModels();
		Iterator<Item<T>> items = getItemReuseStrategy().getItems(newItemFactory(), models,
			getItems());
		removeAll();
->		addItems(items);
models	AbstractPageableView$CappedIteratorAdapter<T>  (id=8970)	/ heeft list van Contacts	
items	DefaultItemReuseStrategy$1  (id=8990)	
	index	0	
	this$0	DefaultItemReuseStrategy  (id=8961)	
	val$factory	RefreshingView$1  (id=8971)	
	val$newModels	AbstractPageableView$CappedIteratorAdapter<T>  (id=8970)	/= models	

/ we gaan verder debug bij -->	, 
/t
DefaultItemReuseStrategy$1.next() line: 75		/ in DefaultItemReuseStrategy worden de items create	, en we zagen hierboven eerst een model	, een detachable model	,	
			@Override
			public Item<T> next()
			{
				IModel<T> model = newModels.next();
				Item<T> item = factory.newItem(index, model);
/s
RefreshingView$1.newItem(int, IModel<T>) line: 112	
				String id = RefreshingView.this.newChildId();
				Item<T> item = RefreshingView.this.newItem(id, index, model);
/s
DataTable$DefaultDataGridView(AbstractDataGridView<T>).newItem(String, int, IModel<T>) line: 99	
		return newRowItem(id, index, model);
model	DetachableContactModel  (id=9032)	
	id	10	
	state	LoadableDetachableModel$InternalState  (id=9034)	
	transientModelObject	null	
/t
				RefreshingView.this.populateItem(item);
/s
DataTable$DefaultDataGridView(AbstractDataGridView<T>).populateItem(Item<T>) line: 145	
/=
	protected final void populateItem(final Item<T> item)
/ item=item in refreshingview "rows"=row

		RepeatingView cells = new RepeatingView(CELL_REPEATER_ID); / 'cells'
		item.add(cells);
item	Item<T>  (id=9045)	
	children	RepeatingView  (id=9047)	
	data	DetachableContactModel  (id=9032)	

/ dus item in refreshingview "rows" heeft child repeatingview "cells" en als model een (detached now) Contact	, 

		int populatorsNumber = populators.size();	 / property columns
		for (int i = 0; i < populatorsNumber; i++)
		{
			ICellPopulator<T> populator = populators.get(i);
			IModel<ICellPopulator<T>> populatorModel = new Model<>(populator);
			Item<ICellPopulator<T>> cellItem = newCellItem(cells.newChildId(), i, populatorModel);
/s
DataTable$DefaultDataGridView.newCellItem(String, int, IModel) line: 561	
			Item item = DataTable.this.newCellItem(id, index, model);
item	Item<T>  (id=9240)	
	children	null	
	data	Model<T>  (id=9236)								/ model met property column
		object	DataTableFilterToolbarPage$1  (id=9235)	/ property column	

			final IColumn<T, S> column = DataTable.this.columns.get(index);
			if (column instanceof IStyledColumn)
			{
				item.add(new CssAttributeBehavior()		/ komt in item.data	, niet in item.children	 
					...
/s
Item<T>(Component).add(Behavior...) line: 4559	
		new Behaviors(this).add(behaviors);
/s
Behaviors.add(Behavior...) line: 51	
		for (Behavior behavior : behaviors)
		{
			internalAdd(behavior);
/s
Behaviors.internalAdd(Behavior) line: 65	
		component.data_add(behavior);				/ hier zien we dat een behavior in item.data komt, niet in item.children	,
this	Behaviors  (id=9290)	
	component	Item<T>  (id=9283)	

/t
item	Item<T>  (id=9240)	
	data	Object[2]  (id=9269)	
		[0]	Model<T>  (id=9236)												/ property column	,
		[1]	DataTable$DefaultDataGridView$1  (id=9267)/ de behavior	,	

/t
			cells.add(cellItem);
			populator.populateItem(cellItem, CELL_ITEM_ID, item.getModel());
/ item=row, is item in de refreshingview "rows", item's model heeft detached Contact	,
/s
DataTableFilterToolbarPage$1(PropertyColumn<T,S>).populateItem(Item<ICellPopulator<T>>, String, IModel<T>) line: 97	
/=
	public void populateItem(final Item<ICellPopulator<T>> item, final String componentId, final IModel<T> rowModel)
		item.add(new Label(componentId, getDataModel(rowModel)));
/ rowModel=row item's model	,
/ item=cell item	,
/ getDataModel(rowModel) is een propertymodel op rowModel	,
/s
DataTableFilterToolbarPage$1(PropertyColumn<T,S>).getDataModel(IModel<T>) line: 118	
		PropertyModel<?> propertyModel = new PropertyModel<>(rowModel, propertyExpression);
		return propertyModel;

/ alle andere property columns net zo	,
/t
RefreshingView$1.newItem(int, IModel<T>) line: 115	
/=
	protected IItemFactory<T> newItemFactory()
	{
		return new IItemFactory<T>()
		{
			@Override
			public Item<T> newItem(int index, IModel<T> model)
			{
				String id = RefreshingView.this.newChildId();
				Item<T> item = RefreshingView.this.newItem(id, index, model);
				RefreshingView.this.populateItem(item);
/d
				return item;
/ row item	, 
/t
DefaultItemReuseStrategy$1.next() line: 76	
/=
			@Override
			public Item<T> next()
			{
				IModel<T> model = newModels.next();
				Item<T> item = factory.newItem(index, model);
/d
/ row item
				index++;
/t
DataTable$DefaultDataGridView(RefreshingView<T>).addItems(Iterator<Item<T>>) line: 190	
	protected void addItems(Iterator<Item<T>> items)
	{
		int index = 0;
		while (items.hasNext())
		{
			Item<T> item = items.next();
/d
			item.setIndex(index);

/ volgende	,

/ overzicht

DataTable$DefaultDataGridView(RefreshingView<T>).addItems(Iterator<Item<T>>) line: 192	
		int index = 0;
		while (items.hasNext())
		{
			Item<T> item = items.next();
			item.setIndex(index);
			add(item);
			++index;

/ als we 2 rows hebben add	,

/ this=DataTable$DefaultDataGridView= de refreshingview
/ een (row)item heeft model een detachable contact
/ een (row)item heeft 1 child: repeatingview 
/ een cell item heeft model property column en 1 css behavior	,
/ een cell item heeft 1 child: label met als model de property column , een label heeft geen child	,  


this	DataTable$DefaultDataGridView  (id=9220)	
	cachedItemCount	50	
	childIdCounter	2	
	children	ArrayList<E>  (id=9354)	
		elementData	Object[12]  (id=9355)	
			[0]	Item<T>  (id=9233)	
				children	RepeatingView  (id=9234)	
					childIdCounter	6	
					children	ArrayList<E>  (id=9304)	
						elementData	Object[12]  (id=9306)	
							[0]	Item<T>  (id=9283)	
							[1]	Item<T>  (id=9307)	
								children	Label  (id=9312)	
									data	PropertyModel<T>  (id=9316)	
									flags	1074995354	
									generatedMarkupId	-1	
									id	"cell" (id=9093)	
									markup	null	
									markupSourcingStrategy	null	
									parent	Item<T>  (id=9307)	
									requestFlags	0	
								data	Object[2]  (id=9313)	
									[0]	Model<T>  (id=9314)	
									[1]	DataTable$DefaultDataGridView$1  (id=9315)	
								flags	1074995354	
								generatedMarkupId	-1	
								id	"2" (id=9033)	
								index	1	
								markup	MarkupFragment  (id=9305)	
								markupSourcingStrategy	null	
								modCounter	1	
								parent	RepeatingView  (id=9234)	
								queue	null	
								requestFlags	0	
							[2]	Item<T>  (id=9308)	
							[3]	Item<T>  (id=9309)	
							[4]	Item<T>  (id=9310)	
							[5]	Item<T>  (id=9311)	
						modCount	6	
						size	6	
					data	null	
					flags	1073946778	
					generatedMarkupId	-1	
					id	"cells" (id=8969)	
					markup	MarkupFragment  (id=9305)	
					markupSourcingStrategy	null	
					modCounter	6	
					parent	Item<T>  (id=9233)	
					queue	null	
					requestFlags	0	
				data	DetachableContactModel  (id=9230)	
					id	10	
					state	LoadableDetachableModel$InternalState  (id=9034)	
					transientModelObject	null	
				flags	1074995354	
				generatedMarkupId	-1	
				id	"1" (id=8967)	
				index	0	
				markup	MarkupFragment  (id=9301)	
				markupSourcingStrategy	DefaultMarkupSourcingStrategy  (id=9303)	
				modCounter	1	
				parent	DataTable$DefaultDataGridView  (id=9220)	
				queue	null	
				requestFlags	0	
			[1]	Item<T>  (id=9352)	
		modCount	2	
		size	2	
	currentPage	0	
	data	null	
	dataProvider	SortableContactDataProvider  (id=9216)	
	flags	1073946778	
	generatedMarkupId	-1	
	id	"rows" (id=8810)	
	itemReuseStrategy	null	
	itemsPerPage	8	
	markup	MarkupFragment  (id=9301)	
	markupSourcingStrategy	null	
	modCounter	2	
	parent	WebMarkupContainer  (id=9227)	
	populators	ArrayList<E>  (id=9215)	
	queue	null	
	requestFlags	16	
	this$0	DataTable<T,S>  (id=9219)	
items	DefaultItemReuseStrategy$1  (id=9229)	
index	1	
item	Item<T>  (id=9352)	

/ 13	. 
 
/ de ... in een Label wordt gevonden door naar de models van de beide items te kijken,	 de expression en de contact	, 

/ set een b in LoadableDetachableModel.getObject,	 
/s
	DetachableContactModel(LoadableDetachableModel<T>).getObject() line: 129	
			state = InternalState.ATTACHING;
			transientModelObject = load();

	PropertyModel<T>(AbstractPropertyModel<T>).getInnermostModelOrObject() line: 264	
		Object object = getTarget();
object	DetachableContactModel  (id=9772)	
	id	10	
	state	LoadableDetachableModel$InternalState  (id=9034)	
	transientModelObject	null	

		while (object instanceof IModel)
		{
->			Object tmp = ((IModel<?>)object).getObject();

	PropertyModel<T>(AbstractPropertyModel<T>).getObject() line: 83	
		final String expression = propertyExpression();
id
->		final Object target = getInnermostModelOrObject();
-->			return (T)PropertyResolver.getValue(expression, target);

	Label(Component).getDefaultModelObject() line: 1626	
		final IModel<?> model = getDefaultModel();
		if (model != null)
		{
			try
			{
				// Get model value for this component.
				return model.getObject();

	Label(Component).getDefaultModelObjectAsString() line: 1654	
		return getDefaultModelObjectAsString(getDefaultModelObject());

	Label.onComponentTagBody(MarkupStream, ComponentTag) line: 115	
		replaceComponentTagBody(markupStream, openTag, getDefaultModelObjectAsString());

	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
	Label(Component).internalRenderComponent() line: 2565	
	Label(WebComponent).onRender() line: 60	
	Label(Component).internalRender() line: 2380	
	Label(Component).render() line: 2308	
	Item<T>(MarkupContainer).renderNext(MarkupStream) line: 1524	
	Item<T>(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	Item<T>(MarkupContainer).renderComponentTagBody(MarkupStream, ComponentTag) line: 1734	
	Item<T>(MarkupContainer).onComponentTagBody(MarkupStream, ComponentTag) line: 1657	
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
	Item<T>(Component).internalRenderComponent() line: 2565	
	Item<T>(MarkupContainer).onRender() line: 1698	
	Item<T>(Component).internalRender() line: 2380	
	Item<T>(Component).render() line: 2308	
	RepeatingView(AbstractRepeater).renderChild(Component) line: 115	
	RepeatingView(AbstractRepeater).onRender() line: 102	
	RepeatingView(Component).internalRender() line: 2380	
	RepeatingView(Component).render() line: 2308	
	Item<T>(MarkupContainer).renderNext(MarkupStream) line: 1524	
	Item<T>(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	Item<T>(MarkupContainer).renderComponentTagBody(MarkupStream, ComponentTag) line: 1734	
	Item<T>(MarkupContainer).onComponentTagBody(MarkupStream, ComponentTag) line: 1657	
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
	Item<T>(Component).internalRenderComponent() line: 2565	
	Item<T>(MarkupContainer).onRender() line: 1698	
	Item<T>(Component).internalRender() line: 2380	
	Item<T>(Component).render() line: 2308	
	DataTable$DefaultDataGridView(AbstractRepeater).renderChild(Component) line: 115	
	DataTable$DefaultDataGridView(AbstractRepeater).onRender() line: 102	
	DataTable$DefaultDataGridView(Component).internalRender() line: 2380	
	DataTable$DefaultDataGridView(Component).render() line: 2308	
	WebMarkupContainer(MarkupContainer).renderNext(MarkupStream) line: 1524	
	WebMarkupContainer(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	WebMarkupContainer(MarkupContainer).renderComponentTagBody(MarkupStream, ComponentTag) line: 1734	
	WebMarkupContainer(MarkupContainer).onComponentTagBody(MarkupStream, ComponentTag) line: 1657	
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
	WebMarkupContainer(Component).internalRenderComponent() line: 2565	
	WebMarkupContainer(MarkupContainer).onRender() line: 1698	
	WebMarkupContainer(Component).internalRender() line: 2380	
	WebMarkupContainer(Component).render() line: 2308	
	DataTable<T,S>(MarkupContainer).renderNext(MarkupStream) line: 1524	
	DataTable<T,S>(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	DataTable<T,S>(MarkupContainer).renderComponentTagBody(MarkupStream, ComponentTag) line: 1734	
	DataTable<T,S>(MarkupContainer).renderAssociatedMarkup(String, String) line: 797	
	PanelMarkupSourcingStrategy(AssociatedMarkupSourcingStrategy).renderAssociatedMarkup(Component) line: 77	
	PanelMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 112	
	DataTable<T,S>(Component).internalRenderComponent() line: 2565	
	DataTable<T,S>(MarkupContainer).onRender() line: 1698	
	DataTable<T,S>(Component).internalRender() line: 2380	
	DataTable<T,S>(Component).render() line: 2308	
	FilterForm<T>(MarkupContainer).renderNext(MarkupStream) line: 1524	
	FilterForm<T>(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	FilterForm<T>(MarkupContainer).renderComponentTagBody(MarkupStream, ComponentTag) line: 1734	
	FilterForm<T>(MarkupContainer).onComponentTagBody(MarkupStream, ComponentTag) line: 1657	
	FilterForm<T>(Form<T>).onComponentTagBody(MarkupStream, ComponentTag) line: 1705	
	FilterForm<T>.onComponentTagBody(MarkupStream, ComponentTag) line: 86	
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
	FilterForm<T>(Component).internalRenderComponent() line: 2565	
	FilterForm<T>(MarkupContainer).onRender() line: 1698	
	FilterForm<T>(Component).internalRender() line: 2380	
	FilterForm<T>(Component).render() line: 2308	
	DataTableFilterToolbarPage(MarkupContainer).renderNext(MarkupStream) line: 1524	
	DataTableFilterToolbarPage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	DataTableFilterToolbarPage(Page).onRender() line: 879	
	DataTableFilterToolbarPage(WebPage).onRender() line: 141	
	DataTableFilterToolbarPage(Component).internalRender() line: 2380	
	DataTableFilterToolbarPage(Component).render() line: 2308	
	DataTableFilterToolbarPage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 195	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ we gaan verder debug	, 
/s
DetachableContactModel(LoadableDetachableModel<T>).getObject() line: 134	
			transientModelObject = load();
/s
DetachableContactModel.load() line: 97	
		// loads contact from the database
		return getContactsDB().get(id);
/s
DetachableContactModel.getContactsDB() line: 33	
		return DatabaseLocator.getDatabase();		/ global lookup	,
/t
/s
ContactsDatabase.get(long) line: 65	
this	ContactsDatabase  (id=8889)	
	fnameDescIdx	Collections$SynchronizedRandomAccessList<E>  (id=8890)	
	fnameIdx	Collections$SynchronizedRandomAccessList<E>  (id=8891)	
	lnameDescIdx	Collections$SynchronizedRandomAccessList<E>  (id=8892)	
	lnameIdx	Collections$SynchronizedRandomAccessList<E>  (id=8893)	
	map	Collections$SynchronizedMap<K,V>  (id=8894)	
id	10	
		Contact c = map.get(id);
/t
DetachableContactModel(LoadableDetachableModel<T>).getObject() line: 136	
			transientModelObject = load();
/d
this	DetachableContactModel  (id=9772)	
	id	10	
	state	LoadableDetachableModel$InternalState  (id=9831)	
	transientModelObject	Contact  (id=8905)	
		bornDate	Date  (id=8908)	
		cellPhone	"330-555-5210" (id=9028)	
		firstName	"Abby" (id=9029)	
		homePhone	"602-555-3632" (id=9030)	
		id	10	
		lastName	"Smiith" (id=9031)	
			state = InternalState.ATTACHED;
/t
PropertyModel<T>(AbstractPropertyModel<T>).getInnermostModelOrObject() line: 269	
		while (object instanceof IModel)
		{
			Object tmp = ((IModel<?>)object).getObject();
/d
			if (tmp == object)
			{
				break;
			}
			object = tmp;
		}
		return object;
/t
PropertyModel<T>(AbstractPropertyModel<T>).getObject() line: 86	
		final Object target = getInnermostModelOrObject();
/d
		if (target != null)
		{
			return (T)PropertyResolver.getValue(expression, target);
/s
PropertyResolver.getValue(String, Object) line: 104	
		ObjectAndGetSetter getter = getObjectAndGetSetter(expression, object, RETURN_NULL);
expression	"id" (id=8788)	
object	Contact  (id=8905)	/ resolved met load() door het model, 	
getter	PropertyResolver$ObjectAndGetSetter  (id=9855)	
	getAndSetter	PropertyResolver$MethodGetAndSet  (id=9857)	
		field	Field  (id=9859)	
		getMethod	Method  (id=9860)	
public long org.apache.wicket.examples.repeater.Contact.getId()
		setMethod	Method  (id=9861)	

		return getter.getValue();
/t
Label.onComponentTagBody(MarkupStream, ComponentTag) line: 115	
		replaceComponentTagBody(markupStream, openTag, getDefaultModelObjectAsString());
/pd
/s
...
/ todo afmaken

/ 7	. 

/ filter	,

/ we geven
from: 11/6/60
to: 7/18/68

/ we zien 4 entries	,
46 Michael Moore 482-555-2270 438-555-2122 1/4/62
8 Nicholas Nelson 271-555-8420 570-555-8073 7/16/64
19 Sarah Moore 800-555-6246 286-555-1624 5/1/66
26 Willie Nelson 545-555-5765 827-555-8163 5/22/67

/ we hebben een b set in

package org.apache.wicket.markup.html.form;
public class Form<T> extends WebMarkupContainer
	implements
		IFormSubmitListener,
		IGenericComponent<T>
{
	public void process(IFormSubmitter submittingComponent)
			// Update model using form data
			updateFormComponentModels();
/ MORGENOCHTEND

















/ einde FILTER

/ VIEWS 

/ GridViewPage -> GridView > DataViewBase > AbstractPageableView > RefreshingView > RepeatingView > AbstractRepeater > WebMarkupContainer > MarkupContainer > Component

this	RefreshingView$1  (id=7345)	
	this$0	GridViewPage$1  (id=7339)		/ RefreshingView	
		cachedItemCount	50	
		childIdCounter	7	
		children	ArrayList<E>  (id=7358)	
			elementData	Object[12]  (id=7359)	
				[0]	Item<T>  (id=7360)	
					children	RepeatingView  (id=7341)	
						childIdCounter	0	
						children	ArrayList<E>  (id=7363)	
							elementData	Object[12]  (id=7365)	
								[0]	Item<T>  (id=7347)	
									children	Label  (id=7375)	
										data	Model<T>  (id=7376)	
											object	"Abby Nelson" (id=7377)	
										flags	1074995354	
										generatedMarkupId	-1	
										id	"firstName" (id=7373)	
										markup	null	
										markupSourcingStrategy	null	
										parent	Item<T>  (id=7347)	
										requestFlags	0	
									data	DetachableContactModel  (id=7346)	
										id	32	
										state	LoadableDetachableModel$InternalState  (id=7371)	
										transientModelObject	Contact  (id=7241)	
									flags	1074995354	
									generatedMarkupId	-1	
									id	"2" (id=7285)	
									index	0	
									markup	MarkupFragment  (id=7364)	
									markupSourcingStrategy	null	
									modCounter	1	
									parent	RepeatingView  (id=7341)	
									queue	null	
									requestFlags	0	
								[1]	Item<T>  (id=7349)	
									children	Label  (id=7378)	
										data	Model<T>  (id=7379)	
											object	"Abner Graham" (id=7380)	
										flags	1074995354	
										generatedMarkupId	-1	
										id	"firstName" (id=7373)	
										markup	null	
										markupSourcingStrategy	null	
										parent	Item<T>  (id=7349)	
										requestFlags	0	
									data	DetachableContactModel  (id=7348)	
									flags	1074995354	
									generatedMarkupId	-1	
									id	"3" (id=7288)	
									index	1	
									markup	MarkupFragment  (id=7364)	
									markupSourcingStrategy	null	
									modCounter	1	
									parent	RepeatingView  (id=7341)	
									queue	null	
									requestFlags	0	
								[2]	Item<T>  (id=7351)	
							modCount	3	
							size	3	
						data	null	
						flags	1073946778	
						generatedMarkupId	-1	
						id	"cols" (id=7247)	
						markup	MarkupFragment  (id=7364)	
						markupSourcingStrategy	null	
						modCounter	3	
						parent	Item<T>  (id=7360)	
						queue	null	
						requestFlags	0	
					data	null	
					flags	1073946778	
					generatedMarkupId	-1	
					id	"1" (id=7277)	
					index	0	
					markup	MarkupFragment  (id=7362)	
					markupSourcingStrategy	DefaultMarkupSourcingStrategy  (id=7264)	
					modCounter	1	
					parent	GridViewPage$1  (id=7339)	
					queue	null	
					requestFlags	0	
				[1]	Item<T>  (id=7361)	
					children	RepeatingView  (id=7352)	
						childIdCounter	0	
						children	ArrayList<E>  (id=7367)	
							elementData	Object[12]  (id=7369)	
								[0]	Item<T>  (id=7354)	
									children	Label  (id=7370)	
										data	Model<T>  (id=7372)	
											object	"Abner Lee" (id=7374)	
										flags	1074995354	
										generatedMarkupId	-1	
										id	"firstName" (id=7373)	
										markup	null	
										markupSourcingStrategy	null	
										parent	Item<T>  (id=7354)	
										requestFlags	0	
									data	DetachableContactModel  (id=7353)	
										id	45	
										state	LoadableDetachableModel$InternalState  (id=7371)	
										transientModelObject	Contact  (id=7244)	
									flags	1074995354	
									generatedMarkupId	-1	
									id	"6" (id=7299)	
									index	3	
									markup	MarkupFragment  (id=7368)	
									markupSourcingStrategy	null	
									modCounter	1	
									parent	RepeatingView  (id=7352)	
									queue	null	
									requestFlags	0	
								[1]	Item<T>  (id=7356)	
							modCount	2	
							size	2	
						data	null	
						flags	1073946778	
						generatedMarkupId	-1	
						id	"cols" (id=7247)	
						markup	MarkupFragment  (id=7368)	
						markupSourcingStrategy	null	
						modCounter	2	
						parent	Item<T>  (id=7361)	
						queue	null	
						requestFlags	0	
					data	null	
					flags	1073946778	
					generatedMarkupId	-1	
					id	"5" (id=7366)	
					index	1	
					markup	MarkupFragment  (id=7362)	
					markupSourcingStrategy	DefaultMarkupSourcingStrategy  (id=7264)	
					modCounter	1	
					parent	GridViewPage$1  (id=7339)	
					queue	null	
					requestFlags	0	
			modCount	2	
			size	2	
		columns	3	
		currentPage	0	
		data	null	
		dataProvider	ContactDataProvider  (id=7340)	
		flags	1073946778	
		generatedMarkupId	-1	
		id	"rows" (id=7233)	
		itemReuseStrategy	null	
		itemsPerPage	12	
		markup	MarkupFragment  (id=7362)	
		markupSourcingStrategy	null	
		modCounter	2	
		parent	GridViewPage  (id=7337)	
		queue	null	
		requestFlags	17	
		rows	4	
		this$0	GridViewPage  (id=7337)	
index	5	
model	DetachableContactModel  (id=7357)	

/ 7	. 

/ GridViewPage -> GridView > DataViewBase > AbstractPageableView > RefreshingView > RepeatingView > AbstractRepeater > WebMarkupContainer > MarkupContainer > Component

/ DataGridPage -> DataGridView > AbstractDataGridView > DataViewBase > AbstractPageableView > RefreshingView > RepeatingView > AbstractRepeater > WebMarkupContainer > MarkupContainer > Component

this	RefreshingView$1  (id=7530)	
	this$0	DataGridView<T>  (id=7526)	
		cachedItemCount	50	
		childIdCounter	3	
		children	ArrayList<E>  (id=7566)	
			elementData	Object[12]  (id=7567)	
				[0]	Item<T>  (id=7532)	
					children	RepeatingView  (id=7533)	
						childIdCounter	5	
						children	ArrayList<E>  (id=7569)	
							elementData	Object[12]  (id=7571)	
								[0]	Item<T>  (id=7536)	
									children	Label  (id=7575)	
										data	PropertyModel<T>  (id=7577)	
											expression	"id" (id=7576)	
											target	DetachableContactModel  (id=7531)	
										flags	1074995354	
										generatedMarkupId	-1	
										id	"cell" (id=7484)	
										markup	null	
										markupSourcingStrategy	null	
										parent	Item<T>  (id=7536)	
										requestFlags	0	
									data	Model<T>  (id=7534)	
										object	PropertyPopulator<T>  (id=7535)	
											property	"id" (id=7576)	
									flags	1074995354	
									generatedMarkupId	-1	
									id	"1" (id=7277)	
									index	0	
									markup	MarkupFragment  (id=7570)	
									markupSourcingStrategy	null	
									modCounter	1	
									parent	RepeatingView  (id=7533)	
									queue	null	
									requestFlags	0	
								[1]	Item<T>  (id=7572)	
								[2]	Item<T>  (id=7573)	
								[3]	Item<T>  (id=7574)	
								[4]	Item<T>  (id=7542)	
							modCount	5	
							size	5	
						data	null	
						flags	1073946778	
						generatedMarkupId	-1	
						id	"cells" (id=7480)	
						markup	MarkupFragment  (id=7570)	
						markupSourcingStrategy	null	
						modCounter	5	
						parent	Item<T>  (id=7532)	
						queue	null	
						requestFlags	0	
					data	DetachableContactModel  (id=7531)	
						id	32	
						state	LoadableDetachableModel$InternalState  (id=7568)	
						transientModelObject	null	
					flags	1074995354	
					generatedMarkupId	-1	
					id	"1" (id=7277)	
					index	0	
					markup	MarkupFragment  (id=7554)	
					markupSourcingStrategy	DefaultMarkupSourcingStrategy  (id=7264)	
					modCounter	1	
					parent	DataGridView<T>  (id=7526)	
					queue	null	
					requestFlags	0	
				[1]	Item<T>  (id=7544)	
				[2]	Item<T>  (id=7557)	
			modCount	3	
			size	3	
		currentPage	0	
		data	null	
		dataProvider	SortableContactDataProvider  (id=7525)	
		flags	1073946778	
		generatedMarkupId	-1	
		id	"rows" (id=7233)	
		itemReuseStrategy	null	
		itemsPerPage	9223372036854775807	
		markup	MarkupFragment  (id=7554)	
		markupSourcingStrategy	null	
		modCounter	3	
		parent	DataGridPage  (id=7523)	
		populators	ArrayList<E>  (id=7612)	
		queue	null	
		requestFlags	17	
index	3	
model	DetachableContactModel  (id=7565)	

/ 7	. 

/ GridViewPage -> GridView > DataViewBase > AbstractPageableView > RefreshingView > RepeatingView > AbstractRepeater > WebMarkupContainer > MarkupContainer > Component

/ DataGridPage -> DataGridView > AbstractDataGridView > DataViewBase > AbstractPageableView > RefreshingView > RepeatingView > AbstractRepeater > WebMarkupContainer > MarkupContainer > Component

/ DataTablePage -> DataTable -> DefaultDataGridView >  DataGridView > AbstractDataGridView > DataViewBase > AbstractPageableView > RefreshingView > RepeatingView > AbstractRepeater > WebMarkupContainer > MarkupContainer > Component

this	DataTablePage$1  (id=7700)	
	displayModel	Model<T>  (id=7710)	
	sortProperty	null	
	this$0	DataTablePage  (id=7657)	
		autoIndex	0	
		children	ArrayList<E>  (id=7711)	
			elementData	Object[12]  (id=7712)	
				[0]	WicketExampleHeader  (id=7713)	
				[1]	Label  (id=7714)	
				[2]	FeedbackPanel  (id=7715)	
				[3]	DefaultDataTable<T,S>  (id=7667)	
					body	WebMarkupContainer  (id=7693)	
					bottomToolbars	DataTable$ToolbarsContainer  (id=7674)	
					caption	DataTable$Caption  (id=7717)	
					children	ArrayList<E>  (id=7718)	
					colGroup	ColGroup  (id=7666)	
					columns	ArrayList<E>  (id=7669)	
					data	null	
					datagrid	DataTable$DefaultDataGridView  (id=7668)	
						cachedItemCount	50	
						childIdCounter	3	
						children	ArrayList<E>  (id=7721)	
							elementData	Object[12]  (id=7723)	
								[0]	OddEvenItem<T>  (id=7698)	
								[1]	OddEvenItem<T>  (id=7703)	
									children	RepeatingView  (id=7704)	
										childIdCounter	6	
										children	ArrayList<E>  (id=7738)	
											elementData	Object[12]  (id=7740)	
												[0]	Item<T>  (id=7705)	
												[1]	Item<T>  (id=7741)	
													children	Label  (id=7745)	
														data	PropertyModel<T>  (id=7751)	
															expression	"id" (id=7576)	
															target	DetachableContactModel  (id=7702)	
														flags	1074995354	
														generatedMarkupId	-1	
														id	"cell" (id=7484)	
														markup	null	
														markupSourcingStrategy	null	
														parent	Item<T>  (id=7741)	
														requestFlags	0	
													data	Object[2]  (id=7746)	
														[0]	Model<T>  (id=7747)	
															object	DataTablePage$2  (id=7749)	
																displayModel	Model<T>  (id=7750)	
																	object	"ID" (id=7752)	
																propertyExpression	"id" (id=7576)	
																sortProperty	null	
																this$0	DataTablePage  (id=7657)	
														[1]	DataTable$DefaultDataGridView$1  (id=7748)	
													flags	1074995354	
													generatedMarkupId	-1	
													id	"2" (id=7285)	
													index	1	
													markup	MarkupFragment  (id=7739)	
													markupSourcingStrategy	null	
													modCounter	1	
													parent	RepeatingView  (id=7704)	
													queue	null	
													requestFlags	0	
												[2]	Item<T>  (id=7742)	
													children	Label  (id=7796)	
														data	PropertyModel<T>  (id=7798)	
															expression	"firstName" (id=7373)	
															target	DetachableContactModel  (id=7702)	
														flags	1074995354	
														generatedMarkupId	-1	
														id	"cell" (id=7484)	
														markup	null	
														markupSourcingStrategy	null	
														parent	Item<T>  (id=7742)	
														requestFlags	0	
													data	Object[2]  (id=7797)	
														[0]	Model<T>  (id=7801)	
															object	PropertyColumn<T,S>  (id=7805)	
																displayModel	Model<T>  (id=7808)	
																propertyExpression	"firstName" (id=7373)	
																sortProperty	"firstName" (id=7373)	
														[1]	DataTable$DefaultDataGridView$1  (id=7802)	
													flags	1074995354	
													generatedMarkupId	-1	
													id	"3" (id=7288)	
													index	2	
													markup	MarkupFragment  (id=7739)	
													markupSourcingStrategy	null	
													modCounter	1	
													parent	RepeatingView  (id=7704)	
													queue	null	
													requestFlags	0	
												[3]	Item<T>  (id=7743)	
												[4]	Item<T>  (id=7744)	
												[5]	Item<T>  (id=7795)	
											modCount	6	
											size	6	
										data	null	
										flags	1073946778	
										generatedMarkupId	-1	
										id	"cells" (id=7480)	
										markup	MarkupFragment  (id=7739)	
										markupSourcingStrategy	null	
										modCounter	6	
										parent	OddEvenItem<T>  (id=7703)	
										queue	null	
										requestFlags	0	
									data	DetachableContactModel  (id=7702)	
									flags	1074995354	
									generatedMarkupId	-1	
									id	"2" (id=7285)	
									index	1	
									markup	MarkupFragment  (id=7722)	
									markupSourcingStrategy	DefaultMarkupSourcingStrategy  (id=7264)	
									modCounter	1	
									parent	DataTable$DefaultDataGridView  (id=7668)	
									queue	null	
									requestFlags	0	
							modCount	2	
							size	2	
						currentPage	0	
						data	null	
						dataProvider	SortableContactDataProvider  (id=7663)	
						flags	1073946778	
						generatedMarkupId	-1	
						id	"rows" (id=7233)	
						itemReuseStrategy	null	
						itemsPerPage	8	
						markup	MarkupFragment  (id=7722)	
						markupSourcingStrategy	null	
						modCounter	2	
						parent	WebMarkupContainer  (id=7693)	
						populators	ArrayList<E>  (id=7669)	
						queue	null	
						requestFlags	17	
						this$0	DefaultDataTable<T,S>  (id=7667)	
					flags	1141055642	
					generatedMarkupId	-1	
					id	"table" (id=7719)	
					markup	null	
					markupSourcingStrategy	PanelMarkupSourcingStrategy  (id=7720)	
					modCounter	5	
					parent	DataTablePage  (id=7657)	
					queue	null	
					requestFlags	17	
					toolbarIdCounter	4	
					topToolbars	DataTable$ToolbarsContainer  (id=7672)	
				[4]	DataTable<T,S>  (id=7680)	
				[5]	HtmlHeaderContainer  (id=7716)	
			modCount	6	
			size	6	
		data	null	
		flags	1141583002	
		generatedMarkupId	-1	
		id	null	
		markup	null	
		markupSourcingStrategy	null	
		modCounter	6	
		numericId	49	
		pageParameters	PageParameters  (id=7793)	
		parent	null	
		queue	ComponentQueue  (id=7794)	
		renderCount	1	
		renderedComponents	null	
		requestFlags	17	
		selected	null	
		stateless	null	
cellItem	Item<T>  (id=7709)	
componentId	"cell" (id=7484)	
model	DetachableContactModel  (id=7706)	

/ TODO




/ einde VIEWS

/ AJAX LINK

/ eerst	,
http://localhost:9090/wicket-examples-step-by-step/repeater/wicket/bookmarkable/org.apache.wicket.examples.repeater.DataTablePage?49

/ ws workspace-wicket7_3
/ proj wicket-testing
/ AjaxLinkStudyPage

/ er zijn	,

./wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-ajax-jquery.js
./wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-event-jquery.js

$ vi wicket-ajax-jquery.js
	Wicket.Class = {
		create: function () {
			return function () {						/= (*)	, ctor
				this.initialize.apply(this, arguments);
			};
		}
	};

	Wicket.Channel = Wicket.Class.create();	/= (*) 	, ctor	

	Wicket.ChannelManager.prototype = {
		initialize: function () {
			this.channels = {};
		},
		// Schedules the callback to channel with given name.
		schedule: function (channel, callback) {
			var parsed = new Wicket.Channel(channel);	/ ctor (*) invoke	, 

/ Dus new Wicket.Channel("0|s") calls initialize()	, 

$ vi jquery.js
jQuery.ajaxTransport( function( options ) {
		return {
			send: function( headers, complete ) {
					xhr.send( options.hasContent && options.data || null );

/ 7	. 

/ wicket server	, 

/s
	Behaviors.getBehaviors(Class<M>) line: 90	
	AjaxLinkStudyPage$1(Component).getBehaviors(Class<M>) line: 3695	

this	AjaxLinkStudyPage$1  (id=8103)				/ AjaxLink
	data	Object[2]  (id=8170)	
		[0]	AjaxLink$1  (id=8104)			/ AjaxEventBehavior, 
												protected void onEvent(AjaxRequestTarget target)
													onClick(target); 
		[1]	Behaviors$BehaviorIdList  (id=8370)	
	id	"ajaxlink" (id=8171)	
/cb
	AjaxLinkStudyPage$1(Component).getBehaviors() line: 4571	
	AjaxLinkStudyPage$1(Component).isStateless() line: 2085	
		for (Behavior behavior : getBehaviors())
/cb
	AjaxLinkStudyPage$1(Component).canCallListenerInterfaceAfterExpiry() line: 4577	
	ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 193	
->		final boolean canCallListenerInterfaceAfterExpiry = component != null
				? component.canCallListenerInterfaceAfterExpiry()
				: false;
-->		invokeListener();	 / straks	,
/cb
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/s
/ stack trace	, 
	AjaxLinkStudyPage$1.onClick(AjaxRequestTarget) line: 42	
	AjaxLink$1.onEvent(AjaxRequestTarget) line: 84	
/=
		return new AjaxEventBehavior(event)
		{
			private static final long serialVersionUID = 1L;

			@Override
			protected void onEvent(AjaxRequestTarget target)
			{
				onClick(target);
/cb
	AjaxLink$1(AjaxEventBehavior).respond(AjaxRequestTarget) line: 155	
		onEvent(target);
/cb
	AjaxLink$1(AbstractDefaultAjaxBehavior).onRequest() line: 593	
		WebApplication app = (WebApplication)getComponent().getApplication();
		AjaxRequestTarget target = app.newAjaxRequestTarget(getComponent().getPage());

		RequestCycle requestCycle = RequestCycle.get();
		requestCycle.scheduleRequestHandlerAfterCurrent(target);

		respond(target);
/cb
	RequestListenerInterface.internalInvoke(Component, Object) line: 258	
			method.invoke(target);
public abstract void org.apache.wicket.behavior.IBehaviorListener.onRequest()
/cb
	RequestListenerInterface.invoke(IRequestableComponent, Behavior) line: 241	
		internalInvoke(component, behavior);
/cb
	ListenerInterfaceRequestHandler.invokeListener() line: 248	
				Behavior behavior = getComponent().getBehaviorById(behaviorId); / (*)
				listenerInterface.invoke(getComponent(), behavior);
/cb
-->	ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 234				/ zonet	,
		final boolean canCallListenerInterfaceAfterExpiry = component != null
				? component.canCallListenerInterfaceAfterExpiry()
				: false;
->		invokeListener();

	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ (*)
behavior	AjaxLink$1  (id=8104)	

/ Intermezzo

	protected AjaxEventBehavior newAjaxEventBehavior(String event)
	{
		return new AjaxEventBehavior(event)							/= AjaxLink$1	,
		{
			private static final long serialVersionUID = 1L;

			@Override
			protected void onEvent(AjaxRequestTarget target)
			{
				onClick(target);
			}

			@Override
			protected void updateAjaxAttributes(AjaxRequestAttributes attributes)
			{
				super.updateAjaxAttributes(attributes);
				AjaxLink.this.updateAjaxAttributes(attributes);
			}
		};
	}

/ Einde Intermezzo

/ we gaan debug, 
/s
AjaxLinkStudyPage$1.onClick(AjaxRequestTarget) line: 42	
this	AjaxLinkStudyPage$1  (id=8103)						/ de AjaxLink	, 
target	AjaxRequestHandler  (id=8114)	

/ Intermezzo

		AjaxLink<Void>ajaxLink=new AjaxLink<Void>("ajaxlink") {	/= AjaxLinkStudyPage$1	,
			@Override
			public void onClick(AjaxRequestTarget target) {

/ Einde Intermezzo

				text="["+text+"]";	/ model obj van textl	, krijgt nu z'n value	,
				counter+=13;		/ model obj van counterl	,
				target.add(textl);
/s
AjaxRequestHandler.add(Component...) line: 221	
		for (final Component component : components)
component	Label  (id=8174)	
			add(component, component.getMarkupId());
/s
AjaxRequestHandler.add(Component, String) line: 238	
		update.add(component, markupId);
update	AjaxRequestHandler$1  (id=8113)	

/ Intermezzo

	public AjaxRequestHandler(final Page page)
	{
		update = new XmlPartialPageUpdate(page)

/ Einde Intermezzo
/s
AjaxRequestHandler$1(PartialPageUpdate).add(Component, String) line: 369	
		component.setMarkupId(markupId);
"text2"			/ "text" -> "text2"
		markupIdToComponent.put(markupId, component);
/t
AjaxLinkStudyPage$1.onClick(AjaxRequestTarget) line: 45	
				target.add(textl);
/d
				target.add(counterl);
...
/s
AjaxRequestHandler$1(PartialPageUpdate).add(Component, String) line: 391	
		markupIdToComponent.put(markupId, component);

this	AjaxRequestHandler$1  (id=8113)					/ 'n PartialPageUpdate	,
	markupIdToComponent	LinkedHashMap<K,V>  (id=8144)	
{text2=[Component id = text], counter3=[Component id = counter]}

/t
RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 97	
/=
	public void execute(final IRequestHandler handler)
handler	ListenerInterfaceRequestHandler  (id=8095)	
			respond(handler);
/d
			execute(scheduled);
scheduled	AjaxRequestHandler  (id=8114)	
/s
RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
/=
	public void execute(final IRequestHandler handler)
handler	AjaxRequestHandler  (id=8114)	

/ Recursive call van , met een ander arg	,

			respond(handler);
...
/s
AjaxRequestHandler.respond(IRequestCycle) line: 324	
		page.send(app, Broadcast.BREADTH, this);
/ OVERSLAAN	,
		update.writeTo(bodyResponse, encoding);
/s
AjaxRequestHandler$1(PartialPageUpdate).writeTo(Response, String) line: 153	
			// process added components
			writeComponents(response, encoding);
/s
AjaxRequestHandler$1(PartialPageUpdate).writeComponents(Response, String) line: 236	
////////////////////////////////////////////////////////
/ we komen weer in PartialPageUpdate, de AjaxRequestTarget, en aan deze hadden we add	, 
markupIdToComponent	LinkedHashMap<K,V>  (id=8414)	
{text2=[Component id = text], counter3=[Component id = counter]}
/ in 	,
		AjaxLink<Void>ajaxLink=new AjaxLink<Void>("ajaxlink") {
			public void onClick(AjaxRequestTarget target) {
				text="["+text+"]";
				counter+=13;
->				target.add(textl);
->				target.add(counterl); 


/ 13	. 

/ In JavaScript	, 
/s
jQuery.ajaxTransport( function( options ) {
		return {
			send: function( headers, complete ) {
				callback = function( type ) {
					return function() {
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
xhr.responseText=
<?xml version="1.0" encoding="UTF-8"?><ajax-response><component id="text2" ><![CDATA[<span wicket:id="text" id="text2" wicketpath="text">[null]</span>]]></component><component id="counter3" ><![CDATA[<span wicket:id="counter" id="counter3" wicketpath="counter">13</span>]]></component></ajax-response>
/s
	ajax: function( url, options ) {
		function done( status, nativeStatusText, responses, headers ) {
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );
...
/s
		doAjax: function (attrs) {
			var jqXHR = jQuery.ajax({
				complete: function (jqXHR, textStatus) {
					var executer = new FunctionsExecuter(context.steps);
					executer.start();

/c
/ stack	,
(anonymous function) (wicket-ajax-jqu…568000.js:1152)
					Wicket.DOM.replace(element, text);
/cb
processNext.run (wicket-ajax-jqu…3568000.js:157)
						return f(n);
/cb
proxy (jquery-2.2.0-ve…3568000.js:492)

processNext (wicket-ajax-jqu…3568000.js:172)
				} else {
					var retValue = run();
/cb
start (wicket-ajax-jqu…3568000.js:184)
				retValue = this.processNext();
/cb
jQuery.ajax.complete (wicket-ajax-jqu…3568000.js:729)
					var executer = new FunctionsExecuter(context.steps);
					executer.start();
/cb
fire (jquery-2.2.0-ve…568000.js:3182)
self.fireWith (jquery-2.2.0-ve…568000.js:3312)
done (jquery-2.2.0-ve…568000.js:8769)
send.callback (jquery-2.2.0-ve…568000.js:9120)
/
/ debug	, 
/s
(anonymous function) (wicket-ajax-jqu…568000.js:1152)
			context.steps.push(function (notify) {
				// get the component id
				var compId = node.getAttribute("id");
"text2"
				// get existing component
				var element = Wicket.$(compId);
span#text2
				} else {
					var text = Wicket.DOM.text(node);
"<span wicket:id="text" id="text2" wicketpath="text">[null]</span>"
					// replace the component
					Wicket.DOM.replace(element, text);




/ Einde AJAX LINK

/ AJAX CHECKBOX 

/ boek 156	, 



/ Einde AJAX CHECKBOX 

/ WICKETTESTER

/ EERDER	, 
http://localhost:9090/wicket-examples-step-by-step/repeater/repeating?50
http://localhost:9090/wicket-testing/ajaxcheckboxstudy?0

/ 7	. 

/ NU	, 
/ we maken MiscPage.java/html
/ ga naar	,
http://localhost:9090/wicket-testing/misc

$ vi MiscPage.java
public class MiscTest {
	private WicketTester wicketTester;
	
	@Before
	public void setUp(){
		WebApplication webApplication =new WicketApplication();
		wicketTester=new WicketTester(webApplication);
	}
	
	@Test
	public void f(){
		Page page= wicketTester.startPage(MiscPage.class);
->		boolean b=false;
	}
}

$ vi MiscPage.html

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>WicketTesterStudy</title>
</head>
<body>
<span wicket:id="text"></span>
</body>
</html>

/ Bij -> zien we	, 

this	MiscTest  (id=142)	
	wicketTester	WicketTester  (id=2197)	
		lastRenderedPage	MiscPage  (id=2223)	
		lastRequest	MockHttpServletRequest  (id=2244)	
		lastResponse	MockHttpServletResponse  (id=2245)	
			stringWriter	StringWriter  (id=2260)	
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>WicketTesterStudy</title>
</head>
<body>
<span wicket:id="text" wicketpath="text">Foo Bar</span>
</body>
</html>

/ en page=this.wicketTester.lastRenderedPage	,

/ 7	. 

/ debug de test	,
/c 
/s
/ stack	,
	WicketTester(BaseWicketTester).setupNextRequestCycle() line: 410	
	WicketTester(BaseWicketTester).<init>(WebApplication, ServletContext, boolean) line: 375	
	WicketTester(BaseWicketTester).<init>(WebApplication, ServletContext) line: 266	
	WicketTester(BaseWicketTester).<init>(WebApplication) line: 239	
	WicketTester.<init>(WebApplication) line: 203	
	MiscTest.setUp() line: 17	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 57	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 606	
	FrameworkMethod$1.runReflectiveCall() line: 47	
	FrameworkMethod$1(ReflectiveCallable).run() line: 12	
	FrameworkMethod.invokeExplosively(Object, Object...) line: 44	
	RunBefores.evaluate() line: 24	
	BlockJUnit4ClassRunner(ParentRunner<T>).runLeaf(Statement, Description, RunNotifier) line: 271	
	BlockJUnit4ClassRunner.runChild(FrameworkMethod, RunNotifier) line: 70	
	BlockJUnit4ClassRunner.runChild(Object, RunNotifier) line: 50	
	ParentRunner$3.run() line: 238	
	ParentRunner$1.schedule(Runnable) line: 63	
	BlockJUnit4ClassRunner(ParentRunner<T>).runChildren(RunNotifier) line: 236	
	ParentRunner<T>.access$000(ParentRunner, RunNotifier) line: 53	
	ParentRunner$2.evaluate() line: 229	
	BlockJUnit4ClassRunner(ParentRunner<T>).run(RunNotifier) line: 309	
	JUnit4TestClassReference(JUnit4TestReference).run(TestExecution) line: 50	
	TestExecution.run(ITestReference[]) line: 38	
	RemoteTestRunner.runTests(String[], String, TestExecution) line: 467	
	RemoteTestRunner.runTests(TestExecution) line: 683	
	RemoteTestRunner.run() line: 390	
	RemoteTestRunner.main(String[]) line: 197	
/ debug
/s
WicketTester(BaseWicketTester).setupNextRequestCycle() line: 410	
		request = new MockHttpServletRequest(application, httpSession, servletContext);
		request.setURL(request.getContextPath() + request.getServletPath() + "/");
/context/servlet/

		response = new MockHttpServletResponse(request);

		ServletWebRequest servletWebRequest = newServletWebRequest();

		requestCycle = application.createRequestCycle(servletWebRequest, newServletWebResponse(servletWebRequest));
/s
WicketTester(BaseWicketTester).newServletWebResponse(ServletWebRequest) line: 527	
		return new WicketTesterServletWebResponse(servletWebRequest, response);
/t
/s
WicketApplication(Application).createRequestCycle(Request, Response) line: 1774	

		RequestCycleContext context = new RequestCycleContext(request, response, getRootRequestMapper(), getExceptionMapperProvider().get());
/ getRootRequestMapper()==SystemMapper	,
/t
/s
BaseWicketTester$TestRequestCycleProvider.get(RequestCycleContext) line: 2819	
			context.setRequestMapper(new TestRequestMapper(context.getRequestMapper()));
/ context.getRequestMapper()=SystemMapper
			...
			return delegate.get(context);
/s
Application$DefaultRequestCycleProvider.get(RequestCycleContext) line: 1762	
			return new RequestCycle(context);
/t
WicketTester(BaseWicketTester).setupNextRequestCycle() line: 484	

		ThreadContext.setRequestCycle(requestCycle);

		if (session == null)
		{
			newSession();
/s
WicketTester(BaseWicketTester).newSession() line: 548	
		ThreadContext.setSession(null);

		// the following will create a new session and put it in the thread context
		session = Session.get();
/s
Session.get() line: 169	
			return Application.get().fetchCreateAndSetSession(RequestCycle.get());
/s
WicketApplication(Application).fetchCreateAndSetSession(RequestCycle) line: 1711	
		Session session = getSessionStore().lookup(requestCycle.getRequest());
/s
HttpSessionStore.lookup(Request) line: 198	
		String sessionId = getSessionId(request, false);
/s
HttpSessionStore.getSessionId(Request, boolean) line: 159	
		HttpSession httpSession = getHttpSession(request, false);
null
		return id;
null
/t
WicketApplication(Application).fetchCreateAndSetSession(RequestCycle) line: 1712	
		Session session = getSessionStore().lookup(requestCycle.getRequest());
/d
null
		if (session == null)
		{
			session = newSession(requestCycle.getRequest(), requestCycle.getResponse());
/s
WicketApplication(WebApplication).newSession(Request, Response) line: 641	
		return new WebSession(request);
/t
WicketApplication(Application).fetchCreateAndSetSession(RequestCycle) line: 1716	
		Session session = getSessionStore().lookup(requestCycle.getRequest());
/d
			ThreadContext.setSession(session);
			internalGetPageManager().newSessionCreated();
			sessionListeners.onCreated(session);
		return session;
/t
MiscTest.setUp() line: 17	
		WebApplication webApplication =new WicketApplication();
/d
/ Hij weet hierboven dat hij in test is	, 
/ TODO

		wicketTester=new WicketTester(webApplication);

/c
/s
MiscTest.f() line: 22	
		wicketTester.startPage(MiscPage.class);
/s
WicketTester(BaseWicketTester).startPage(Class<C>, PageParameters) line: 1252	
		// prepare the request
		request.setUrl(application.getRootRequestMapper().mapHandler( new BookmarkablePageRequestHandler(new PageProvider(pageClass, parameters))));
pageClass	Class<T> (my.test.own.MiscPage) (id=2536)	
parameters	null	
this	WicketTester  (id=149)	
	request	MockHttpServletRequest  (id=2405)	
		path	"/misc" (id=2560)	
		url	"/context/servlet/misc" (id=2565)	

		// process the request
		processRequest();
...
/s
WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler, boolean) line: 686	
/=
	protected boolean processRequest(final MockHttpServletRequest forcedRequest, final IRequestHandler forcedRequestHandler, final boolean redirect)
forcedRequest	null	
forcedRequestHandler	null	
redirect	false	

		applyRequest();
/s
WicketTester(BaseWicketTester).applyRequest() line: 2540	
		Request req = newServletWebRequest();				/ net als hierboven	,
req	ServletWebRequest  (id=2577)	
	errorAttributes	null	
	filterPrefix	"servlet" (id=2578)	
	forwardAttributes	null	
	httpServletRequest	MockHttpServletRequest  (id=2405)	
	postParameters	null	
	postRequestParameters	ServletWebRequest$1  (id=2579)	
	url	Url  (id=2580)	
misc
		requestCycle.setRequest(req);
		if (useRequestUrlAsBase)
		{
			requestCycle.getUrlRenderer().setBaseUrl(req.getUrl());
/t
WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler, boolean) line: 718	
		applyRequest();
/d
			if (!requestCycle.processRequestAndDetach())
...
/s
BaseWicketTester$LastPageRecordingPageRendererProvider$1.respond(RequestCycle) line: 2747	
					delegate.get(handler).respond(requestCycle);
/s
WebPageRenderer.respond(RequestCycle) line: 185	
			// redirect to buffer
			BufferedWebResponse response = renderPage(beforeRenderUrl, requestCycle);
/ TODO
			if (currentUrl.equals(afterRenderUrl))
			{
				// no need to redirect when both urls are exactly the same
				response.writeTo((WebResponse)requestCycle.getResponse());

this	WebPageRenderer  (id=2626)	
requestCycle	RequestCycle  (id=2510)	
	request	ServletWebRequest  (id=2577)	
	activeResponse	BaseWicketTester$WicketTesterServletWebResponse  (id=2460)	
		httpServletResponse	MockHttpServletResponse  (id=2430)	
			stringWriter	StringWriter  (id=2679)	
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>WicketTesterStudy</title>
</head>
<body>
<span wicket:id="text" wicketpath="text">Foo Bar</span>
</body>
</html><!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>WicketTesterStudy</title>
</head>
<body>
<span wicket:id="text" wicketpath="text">Foo Bar</span>
</body>
</html>

/ het antwoord komt dus uiteindelijk in requestCycle	,

/t
BaseWicketTester$LastPageRecordingPageRendererProvider$1.respond(RequestCycle) line: 2750	
					delegate.get(handler).respond(requestCycle);
/d
/t
RequestCycle.processRequestAndDetach() line: 297	
			result = processRequest();
/d
true
this	RequestCycle  (id=2510)	
	activeResponse	BaseWicketTester$WicketTesterServletWebResponse  (id=2460)	
		httpServletResponse	MockHttpServletResponse  (id=2430)	
			stringWriter	StringWriter  (id=2679)	
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>WicketTesterStudy</title>
</head>
<body>
<span wicket:id="text" wicketpath="text">Foo Bar</span>
</body>
</html><!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>WicketTesterStudy</title>
</head>
<body>
<span wicket:id="text" wicketpath="text">Foo Bar</span>
</body>
</html>

			detach();
...
/s
MiscPage(Component).detach() line: 1162	
this	MiscPage  (id=2752)	
			detachModels();
/ bij ons heeft MiscPage geen IModel<>	,
			// detach any behaviors
			new Behaviors(this).detach();
/ ook niet, er zitten geen Behaviors in .data_get()	,

		detachChildren();
...
/s
Label(Component).detach() line: 1161	
			detachModels();
/s
Label(Component).detachModel() line: 3636	
			model.detach();
model	PropertyModel<T>  (id=2772)	
/s
PropertyModel<T>(ChainingModel<T>).detach() line: 67	
		// Detach nested object if it's a detachable
		if (target instanceof IDetachable)
/n
target=MiscPage
/t
Label(Component).detach() line: 1177	
			detachModels();
/d
			// detach any behaviors
			new Behaviors(this).detach();
/ TODO
/t
RequestCycle.onDetach() line: 654	
			requestHandlerExecutor.detach();
/d
			listeners.onDetach(this);
/todo
			Session.get().detach();
/t
WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler, boolean) line: 725	
			if (!requestCycle.processRequestAndDetach())
/d
			recordRequestResponse();
			setupNextRequestCycle();
/s
WicketTester(BaseWicketTester).setupNextRequestCycle() line: 410	
		request = new MockHttpServletRequest(application, httpSession, servletContext);
		request.setURL(request.getContextPath() + request.getServletPath() + "/");
this	WicketTester  (id=149)	
	request	MockHttpServletRequest  (id=2795)	
		url	"/context/servlet/" (id=2809)	

		// resume request processing with scheme://host:port from last request
		if (assignBaseLocation)
		{
			request.setScheme(lastRequest.getScheme());
			request.setSecure(lastRequest.isSecure());
			request.setServerName(lastRequest.getServerName());
			request.setServerPort(lastRequest.getServerPort());

		response = new MockHttpServletResponse(request);

		if (lastResponse != null)
/ response van zonet	,
		{
			List<Cookie> lastResponseCookies = lastResponse.getCookies();

/ Dit is inderdaad typisch WicketTester	, 

		ServletWebRequest servletWebRequest = newServletWebRequest();
/ heeft this.request van hier vlakboven in zich	,

		requestCycle = application.createRequestCycle(servletWebRequest, newServletWebResponse(servletWebRequest));
this.requestCycle wordt geheel vervangen	,
/ de response HTML zijn we NIET kwijt	,  want is this.lastRenderedPage	, (zat in requestCycle, maar die is weg)	,

		ThreadContext.setRequestCycle(requestCycle);

		if (session == null)
 /NEE	
		{
			newSession();
/ NIET		

/t
WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler, boolean) line: 786	
			setupNextRequestCycle();
/d
			return true;
/t
WicketTester(BaseWicketTester).startPage(Class<C>, PageParameters) line: 1262	
		// process the request
		processRequest();
/d
		// The last rendered page
		return (C)getLastRenderedPage();
/t
MiscTest.f() line: 22	
		wicketTester.startPage(MiscPage.class);
/d

/ 7	. 

$ vi MiscTest.java
	@Test
	public void f(){
		Page page= wicketTester.startPage(MiscPage.class);
		wicketTester.assertRenderedPage(MiscPage.class);
/s
WicketTester.assertRenderedPage(Class<Page>) line: 670	
		assertResult(isRenderedPage(expectedRenderedPageClass));
/s
WicketTester(BaseWicketTester).isRenderedPage(Class<C>) line: 2061	
this	WicketTester  (id=159)	
		Page page = getLastRenderedPage();
page	MiscPage  (id=2207)	
		if (!expectedRenderedPageClass.isAssignableFrom(page.getClass()))
/n
		return Result.pass();
/s
	public static final Result PASS = new Result(false);
Result.pass() line: 62	
		return PASS;
/t
WicketTester.assertRenderedPage(Class<Page>) line: 670	
		assertResult(isRenderedPage(expectedRenderedPageClass));
/pd
/s
WicketTester.assertResult(Result) line: 758	
		if (result.wasFailed())
/s
Result.wasFailed() line: 72	
		return failed;
false
/t
WicketTester.assertResult(Result) line: 758	
		if (result.wasFailed())
/d
/n
		{
			throw new AssertionFailedError(result.getMessage());
/ NIET

/ 7	. 

/ we doen het expres fout	,

/ Waarom een AssertionFailedError	?
/ TODO

$ vi MiscTest.java

	@Test
	public void f(){
		Page page= wicketTester.startPage(MiscPage.class);
		wicketTester.assertRenderedPage(AjaxCheckBoxStudyPage.class);

/s
/ stack	,
	WicketTester.assertResult(Result) line: 760	
	WicketTester.assertRenderedPage(Class<Page>) line: 670	
	MiscTest.f() line: 26	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 57	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 606	
	FrameworkMethod$1.runReflectiveCall() line: 47				/ junit	,
	FrameworkMethod$1(ReflectiveCallable).run() line: 12	
	FrameworkMethod.invokeExplosively(Object, Object...) line: 44	
	InvokeMethod.evaluate() line: 17	
	RunBefores.evaluate() line: 26	
	BlockJUnit4ClassRunner(ParentRunner<T>).runLeaf(Statement, Description, RunNotifier) line: 271	
	BlockJUnit4ClassRunner.runChild(FrameworkMethod, RunNotifier) line: 70	
	BlockJUnit4ClassRunner.runChild(Object, RunNotifier) line: 50	
	ParentRunner$3.run() line: 238	
	ParentRunner$1.schedule(Runnable) line: 63	
	BlockJUnit4ClassRunner(ParentRunner<T>).runChildren(RunNotifier) line: 236	
	ParentRunner<T>.access$000(ParentRunner, RunNotifier) line: 53	
	ParentRunner$2.evaluate() line: 229	
	BlockJUnit4ClassRunner(ParentRunner<T>).run(RunNotifier) line: 309	
	JUnit4TestClassReference(JUnit4TestReference).run(TestExecution) line: 50	
	TestExecution.run(ITestReference[]) line: 38	
	RemoteTestRunner.runTests(String[], String, TestExecution) line: 467	
	RemoteTestRunner.runTests(TestExecution) line: 683	
	RemoteTestRunner.run() line: 390	
	RemoteTestRunner.main(String[]) line: 197	
/debug
/s
WicketTester.assertResult(Result) line: 760	
			throw new AssertionFailedError(result.getMessage());
result	Result  (id=2219)	
	failed	true	
	message	"classes not the same, expected 'class my.test.own.AjaxCheckBoxStudyPage', current 'class my.test.own.MiscPage'" (id=2223)	
/t
BlockJUnit4ClassRunner(ParentRunner<T>).runLeaf(Statement, Description, RunNotifier) line: 275	
            statement.evaluate();
/d
        } catch (Throwable e) {
            eachNotifier.addFailure(e);
       } finally {
            eachNotifier.fireTestFinished();
/ TODO

/ 7	. 

$ vi MiscPage.java

public class MiscPage extends WebPage {
	private String text="Foo Bar",text2="Gee Hee";
	private Label label,label2;
	public MiscPage() {
		
		IModel<String>model=new PropertyModel<String>(this, "text");
		label=new Label("text", model);
		IModel<String>model2=new PropertyModel<String>(this, "text2");
		label2=new Label("text", model2);
		add(label);
		
		Link<Void>link=new Link<Void>("reload") {
			@Override
			public void onClick() {
			}
		};
		add(link);
	}
	@Override
	protected void onBeforeRender() {
		if(contains(label, true)){
			replace(label2);
		}else{
			replace(label);
		}
		super.onBeforeRender();
	}
	public String getText() {
		return text;
	}
	public String getText2() {
		return text2;
	}
}

$ vi MiscTest.java

	@Test
	public void f(){
		Page page= wicketTester.startPage(MiscPage.class);
		wicketTester.assertRenderedPage(MiscPage.class);
		wicketTester.assertLabel("text", "Gee Hee");
		wicketTester.clickLink("reload");
		wicketTester.assertLabel("text", "Foo Bar");
		
		boolean b=false;
	}


/s
/ stack	,
	MiscPage.onBeforeRender() line: 29	
	MiscPage(Component).internalBeforeRender() line: 949	
	MiscPage(Component).beforeRender() line: 1017	
	MiscPage(Component).internalPrepareForRender(boolean) line: 2215	
	MiscPage(Page).internalPrepareForRender(boolean) line: 242	
	MiscPage(Component).render() line: 2304	
	MiscPage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	BaseWicketTester$LastPageRecordingPageRendererProvider$1.respond(RequestCycle) line: 2747	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler, boolean) line: 718	
	WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler) line: 657	
	WicketTester(BaseWicketTester).processRequest() line: 629	
	WicketTester(BaseWicketTester).startPage(Class<C>, PageParameters) line: 1262	
	WicketTester(BaseWicketTester).startPage(Class<C>) line: 1235	
	MiscTest.f() line: 25	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 57	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 606	
	FrameworkMethod$1.runReflectiveCall() line: 47	
	FrameworkMethod$1(ReflectiveCallable).run() line: 12	
	FrameworkMethod.invokeExplosively(Object, Object...) line: 44	
	InvokeMethod.evaluate() line: 17	
	RunBefores.evaluate() line: 26	
	BlockJUnit4ClassRunner(ParentRunner<T>).runLeaf(Statement, Description, RunNotifier) line: 271	
	BlockJUnit4ClassRunner.runChild(FrameworkMethod, RunNotifier) line: 70	
	BlockJUnit4ClassRunner.runChild(Object, RunNotifier) line: 50	
	ParentRunner$3.run() line: 238	
	ParentRunner$1.schedule(Runnable) line: 63	
	BlockJUnit4ClassRunner(ParentRunner<T>).runChildren(RunNotifier) line: 236	
	ParentRunner<T>.access$000(ParentRunner, RunNotifier) line: 53	
	ParentRunner$2.evaluate() line: 229	
	BlockJUnit4ClassRunner(ParentRunner<T>).run(RunNotifier) line: 309	
	JUnit4TestClassReference(JUnit4TestReference).run(TestExecution) line: 50	
	TestExecution.run(ITestReference[]) line: 38	
	RemoteTestRunner.runTests(String[], String, TestExecution) line: 467	
	RemoteTestRunner.runTests(TestExecution) line: 683	
	RemoteTestRunner.run() line: 390	
	RemoteTestRunner.main(String[]) line: 197	

/ 7	. 

/ we set de code van onBeforeRender in de onClick method	, 
/ we moeten in de test de 2 assert lines omdraaien	,
/ zo moet het	,

$ vi MiscPage.java

public class MiscPage extends WebPage {
	private String text="Foo Bar",text2="Gee Hee";
	private Label label,label2;
	public MiscPage() {
		
		IModel<String>model=new PropertyModel<String>(this, "text");
		label=new Label("text", model);
		IModel<String>model2=new PropertyModel<String>(this, "text2");
		label2=new Label("text", model2);
		add(label);

		Link<Void>link=new Link<Void>("reload") {
			@Override
			public void onClick() {
				MarkupContainer page=MiscPage.this;
				if(page.contains(label, true)){
					page.replace(label2);
				}else{
					page.replace(label);
				}

			}
		};
		add(link);
	}
	public String getText() {
		return text;
	}
	public String getText2() {
		return text2;
	}
}

$ vi MiscTest.java

	@Test
	public void f(){
->		Page page= wicketTester.startPage(MiscPage.class);
		wicketTester.assertRenderedPage(MiscPage.class);
		wicketTester.assertLabel("text", "Foo Bar");
-->		wicketTester.clickLink("reload");
		wicketTester.assertLabel("text", "Gee Hee");
		
		boolean b=false;
	}

/ BaseWicketTester neemt de rol over van WicketFilter	,	 in
	WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler, boolean) line: 713	
/ Ad ->

WicketTester(BaseWicketTester).startPage(Class<C>, PageParameters) line: 1258	
		// prepare the request
		request.setUrl(application.getRootRequestMapper().mapHandler(
			new BookmarkablePageRequestHandler(new PageProvider(pageClass, parameters))));
/ antwoord	,
this	WicketTester  (id=169)	
	request	MockHttpServletRequest  (id=2260)	
		url	"/context/servlet/misc" (id=2284)	
/ want	,
/ de root request mapper= de SystemMapper	,
/s
SystemMapper(CompoundRequestMapper).mapHandler(IRequestHandler) line: 213	
this	SystemMapper  (id=166)	
	mappers	CopyOnWriteArrayList<E>  (id=2294)	
[MountedMapper [mountSegments=misc], MountedMapper [mountSegments=ajaxcheckboxstudy], MountedMapper [mountSegments=pagebase188], ...

		for (IRequestMapper mapper : mappers)
		{
			Url url = mapper.mapHandler(handler);
/s
MountedMapper.mapHandler(IRequestHandler) line: 159	
		Url url = super.mapHandler(requestHandler);
/s
MountedMapper(AbstractBookmarkableMapper).mapHandler(IRequestHandler) line: 396	
		if (requestHandler instanceof BookmarkablePageRequestHandler)
		{
			// simple bookmarkable URL with no page instance information
			BookmarkablePageRequestHandler handler = (BookmarkablePageRequestHandler)requestHandler;
			return buildUrl(urlInfo);
/s
MountedMapper.buildUrl(AbstractBookmarkableMapper$UrlInfo) line: 198	
		Url url = new Url();
		for (String s : mountSegments)
		{
			url.getSegments().add(s);
		}
this	MountedMapper  (id=2203)	
	mountSegments	String[1]  (id=2232)	
		[0]	"misc" (id=2231)	
/ WH set in AbstractBookmarkableMapper(String mountPath, IPageParametersEncoder pageParametersEncoder)
/ TODO 

/t
WicketTester(BaseWicketTester).startPage(Class<C>, PageParameters) line: 1258	
		// prepare the request
		request.setUrl(application.getRootRequestMapper().mapHandler(
			new BookmarkablePageRequestHandler(new PageProvider(pageClass, parameters))));
/d
this	WicketTester  (id=169)	
	request	MockHttpServletRequest  (id=2260)	
		url	"/context/servlet/misc" (id=2284)	

		// process the request
		processRequest();
/s
WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler, boolean) line: 713	
		applyRequest();
/s
WicketTester(BaseWicketTester).applyRequest() line: 2538	
		Request req = newServletWebRequest();
/s
WicketTester(BaseWicketTester).newServletWebRequest() line: 537	
		return (ServletWebRequest)application.newWebRequest(request, request.getFilterPrefix());
/s
WicketApplication(WebApplication).newWebRequest(HttpServletRequest, String) line: 548	
		return new ServletWebRequest(servletRequest, filterPath);
filterPath	"servlet" (id=2345)	
/s
ServletWebRequest.<init>(HttpServletRequest, String, Url) line: 112	
			this.url = getContextRelativeUrl(httpServletRequest.getRequestURI(), filterPrefix);
/s
ServletWebRequest.getContextRelativeUrl(String, String) line: 178	
/=
	private Url getContextRelativeUrl(String uri, String filterPrefix)
uri	"/context/servlet/misc" (id=2350)	
filterPrefix	"servlet" (id=2345)	

		StringBuilder url = new StringBuilder();
		...
misc
		return setParameters(Url.parse(url.toString(), getCharset(), false));	/ sets port, host, protocol	, 
																				/ returns url	,
/t
WicketTester(BaseWicketTester).applyRequest() line: 2539	
		Request req = newServletWebRequest();
/d
req	ServletWebRequest  (id=2353)	
	url	Url  (id=2385)	
misc
		...
/t
WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler, boolean) line: 718	
		applyRequest();
/d
			if (!requestCycle.processRequestAndDetach())
/s
RequestCycle.processRequest() line: 216	
			IRequestHandler handler = resolveRequestHandler();
/s
RequestCycle.resolveRequestHandler() line: 189	
		return requestMapper.mapRequest(request);
/s
BaseWicketTester$TestRequestMapper.mapRequest(Request) line: 2859	
				return delegate.mapRequest(request);
/s
SystemMapper(CompoundRequestMapper).mapRequest(Request) line: 132	

/ van this.mappers=[MountedMapper [mountSegments=misc], ...] wordt list create	, en de mapper van misc gaat:

		for (MapperWithScore mapperWithScore : list)
		{
			IRequestMapper mapper = mapperWithScore.getMapper();
			IRequestHandler handler = mapper.mapRequest(request);
/s
MountedMapper(AbstractBookmarkableMapper).mapRequest(Request) line: 358	

		UrlInfo urlInfo = parseRequest(request);
urlInfo	AbstractBookmarkableMapper$UrlInfo  (id=2689)	
	pageClass	Class<T> (my.test.own.MiscPage) (id=2209)	
	pageComponentInfo	null								/ bij een link is dat niet zo	,	
	pageParameters	null	

			if (info == null)
			{
				// if there are is no page instance information
				// then this is a simple bookmarkable URL
				return processBookmarkable(pageClass, pageParameters);
/s
MountedMapper(AbstractBookmarkableMapper).processBookmarkable(Class<IRequestablePage>, PageParameters) line: 238	
		PageProvider provider = new PageProvider(pageClass, pageParameters);
		provider.setPageSource(getContext());
/ getContext() is in feite de Application	,
		return new RenderPageRequestHandler(provider);
/t
SystemMapper(CompoundRequestMapper).mapRequest(Request) line: 151	
			IRequestHandler handler = mapper.mapRequest(request);
/d
handler	RenderPageRequestHandler  (id=2706)	
		return handler;
/t
RequestCycle.processRequest() line: 220	
			IRequestHandler handler = resolveRequestHandler();
/d
				execute(handler);
/ TODO (Afmaken)



/ Ad -->

/s
WicketTester(BaseWicketTester).clickLink(String, boolean) line: 1983	
			else
			{
				executeListener(link, ILinkListener.INTERFACE);
/s
WicketTester(BaseWicketTester).executeListener(Component, RequestListenerInterface) line: 1111	

		// there are two ways to do this. RequestCycle could be forced to call the handler
		// directly but constructing and parsing the URL increases the chance of triggering bugs
		IRequestHandler handler = new ListenerInterfaceRequestHandler(new PageAndComponentProvider(
			component.getPage(), component), listener);

		Url url = urlFor(handler);
/s
WicketTester(BaseWicketTester).urlFor(IRequestHandler) line: 1076	
		Url url = application.getRootRequestMapper().mapHandler(handler);
/s
SystemMapper(CompoundRequestMapper).mapHandler(IRequestHandler) line: 213	
		for (IRequestMapper mapper : mappers)
		{
			Url url = mapper.mapHandler(handler);
/s
MountedMapper.mapHandler(IRequestHandler) line: 159	
/=
	public Url mapHandler(IRequestHandler requestHandler)
requestHandler	ListenerInterfaceRequestHandler  (id=2487)	

		Url url = super.mapHandler(requestHandler);
null
/ onze handler is niet een van de handlers in super.mapHandler,	

		if (url == null && requestHandler instanceof ListenerInterfaceRequestHandler && getRecreateMountedPagesAfterExpiry()) {
			ListenerInterfaceRequestHandler handler = (ListenerInterfaceRequestHandler)requestHandler;

				String componentPath = handler.getComponentPath();
reload
				RequestListenerInterface listenerInterface = handler.getListenerInterface();
listenerInterface	RequestListenerInterface  (id=2490)	
	method	Method  (id=2562)	
public abstract void org.apache.wicket.markup.html.link.ILinkListener.onLinkClicked()
	name	"ILinkListener" (id=2563)	

/ CREATE URL
				ComponentInfo componentInfo = new ComponentInfo(renderCount, requestListenerInterfaceToString(listenerInterface), componentPath, handler.getBehaviorIndex());
componentInfo	ComponentInfo  (id=2617)	
	behaviorId	null	
	componentPath	"reload" (id=2572)	
	listenerInterface	"ILinkListener" (id=2563)	
	renderCount	Integer  (id=2579)	

				PageComponentInfo pageComponentInfo = new PageComponentInfo(pageInfo, componentInfo);
				PageParameters parameters = new PageParameters(page.getPageParameters());
				UrlInfo urlInfo = new UrlInfo(pageComponentInfo, page.getClass(),
					parameters.mergeWith(handler.getPageParameters()));
				url = buildUrl(urlInfo);
/s
MountedMapper.buildUrl(AbstractBookmarkableMapper$UrlInfo) line: 199	
		for (String s : mountSegments)
misc
		{
			url.getSegments().add(s);
		}
		encodePageComponentInfo(url, info.getPageComponentInfo());
misc?0-1.ILinkListener-reload

info	AbstractBookmarkableMapper$UrlInfo  (id=2633)	
	pageComponentInfo	PageComponentInfo  (id=2635)	
		componentInfo	ComponentInfo  (id=2617)	
			behaviorId	null	
			componentPath	"reload" (id=2572)	
			listenerInterface	"ILinkListener" (id=2563)	
			renderCount	Integer  (id=2579)	
1
		pageInfo	PageInfo  (id=2580)	
			pageId	Integer  (id=2613)	
0
/t
WicketTester(BaseWicketTester).urlFor(IRequestHandler) line: 1077	
		Url url = application.getRootRequestMapper().mapHandler(handler);
/d
misc?0-1.ILinkListener-reload
		return transform(url);
/t
WicketTester(BaseWicketTester).executeListener(Component, RequestListenerInterface) line: 1112	
		Url url = urlFor(handler);
/d
misc?0-1.ILinkListener-reload
		request.setUrl(url);
/s
MockHttpServletRequest.setUrl(Url) line: 1818	
		String path = url.getPath(getCharset());
misc
		if (path.startsWith("/") == false)
		{
			path = getContextPath() + getServletPath() + '/' + path;
/context/servlet/misc
		this.url = path;
		if (path.startsWith(getContextPath()))
		{
			path = path.substring(getContextPath().length());
/servlet/misc
		if (path.startsWith(getServletPath()))
		{
			path = path.substring(getServletPath().length());
/misc
		setPath(path);

		//
		// We can't clear the parameters here because users may have set custom
		// parameters in request. An better place to clear they is when tester
		// setups the next request cycle
		//
		// parameters.clear();

		for (QueryParameter parameter : url.getQueryParameters())
		{
			addParameter(parameter.getName(), parameter.getValue());
/ 1 for loop	,
url	Url  (id=2494)	
	parameters	ArrayList<E>  (id=2528)	
[0-1.ILinkListener-reload]
/ en	,
this	MockHttpServletRequest  (id=2495)	
	parameters	LinkedHashMap<K,V>  (id=2519)	
[0-1.ILinkListener-reload]
	url	"/context/servlet/misc" (id=2503)	
/ in beide in parameters	,

/t
WicketTester(BaseWicketTester).executeListener(Component, RequestListenerInterface) line: 1115	
		request.setUrl(url);
/d
		// Process the request
		processRequest(request, null);
/s
/ stack	,
Thread [main] (Suspended (breakpoint at line 713 in BaseWicketTester))	
	WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler, boolean) line: 713	
	WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler) line: 657	
	WicketTester(BaseWicketTester).processRequest() line: 629	
	WicketTester(BaseWicketTester).startPage(Class<C>, PageParameters) line: 1262	
	WicketTester(BaseWicketTester).startPage(Class<C>) line: 1235	
	MiscTest.f() line: 25	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 57	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 606	
	FrameworkMethod$1.runReflectiveCall() line: 47	
	FrameworkMethod$1(ReflectiveCallable).run() line: 12	
	FrameworkMethod.invokeExplosively(Object, Object...) line: 44	
	InvokeMethod.evaluate() line: 17	
	RunBefores.evaluate() line: 26	
	BlockJUnit4ClassRunner(ParentRunner<T>).runLeaf(Statement, Description, RunNotifier) line: 271	
	BlockJUnit4ClassRunner.runChild(FrameworkMethod, RunNotifier) line: 70	
	BlockJUnit4ClassRunner.runChild(Object, RunNotifier) line: 50	
	ParentRunner$3.run() line: 238	
	ParentRunner$1.schedule(Runnable) line: 63	
	BlockJUnit4ClassRunner(ParentRunner<T>).runChildren(RunNotifier) line: 236	
	ParentRunner<T>.access$000(ParentRunner, RunNotifier) line: 53	
	ParentRunner$2.evaluate() line: 229	
	BlockJUnit4ClassRunner(ParentRunner<T>).run(RunNotifier) line: 309	
	JUnit4TestClassReference(JUnit4TestReference).run(TestExecution) line: 50	
	TestExecution.run(ITestReference[]) line: 38	
	RemoteTestRunner.runTests(String[], String, TestExecution) line: 467	
	RemoteTestRunner.runTests(TestExecution) line: 683	
	RemoteTestRunner.run() line: 390	
	RemoteTestRunner.main(String[]) line: 197	
/ debug	,
/s
WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler, boolean) line: 713	
		applyRequest();
/s
WicketTester(BaseWicketTester).applyRequest() line: 2542	
		Request req = newServletWebRequest();
/s
WicketTester(BaseWicketTester).newServletWebRequest() line: 537	
		return (ServletWebRequest)application.newWebRequest(request, request.getFilterPrefix());
/s
WicketApplication(WebApplication).newWebRequest(HttpServletRequest, String) line: 548	
		return new ServletWebRequest(servletRequest, filterPath);
/s
ServletWebRequest.<init>(HttpServletRequest, String) line: 82	
		this(httpServletRequest, filterPrefix, null);
/s
ServletWebRequest.<init>(HttpServletRequest, String, Url) line: 112	
			this.url = getContextRelativeUrl(httpServletRequest.getRequestURI(), filterPrefix);
/s
ServletWebRequest.getContextRelativeUrl(String, String) line: 201	
			String query = httpServletRequest.getQueryString();
0-1.ILinkListener-reload=
/ want	,
this	ServletWebRequest  (id=2569)	
	httpServletRequest	MockHttpServletRequest  (id=2489)	
		parameters	LinkedHashMap<K,V>  (id=2514)	
{0-1.ILinkListener-reload=[""]}									/ TODO
	url	null	

			if (!Strings.isEmpty(query))
			{
				url.append('?');
				url.append(query);
misc?0-1.ILinkListener-reload=

		return setParameters(Url.parse(url.toString(), getCharset(), false));
/ sets url in ServletWebRequest	, 
this	ServletWebRequest  (id=2569)	
	httpServletRequest	MockHttpServletRequest  (id=2489)	
		parameters	LinkedHashMap<K,V>  (id=2514)	
{0-1.ILinkListener-reload=[Ljava.lang.String;@7b103353}			/ zonet was er al	,
	url	Url  (id=2679)	
misc?0-1.ILinkListener-reload									<-

/t
WicketTester(BaseWicketTester).applyRequest() line: 2539	
		Request req = newServletWebRequest();
/d
req	ServletWebRequest  (id=2569)	
	httpServletRequest	MockHttpServletRequest  (id=2495)	
	url	Url  (id=2679)	
misc?0-1.ILinkListener-reload

/t
WicketTester(BaseWicketTester).applyRequest() line: 2539	
		Request req = newServletWebRequest();
/d
		requestCycle.setRequest(req);
		if (useRequestUrlAsBase)
		{
			requestCycle.getUrlRenderer().setBaseUrl(req.getUrl());
this	WicketTester  (id=169)	
	requestCycle	RequestCycle  (id=2594)	
		request	ServletWebRequest  (id=2569)	
		urlRenderer	UrlRenderer  (id=2613)	
			baseUrl	Url  (id=2614)	
misc?0-1.ILinkListener-reload

/t
WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler, boolean) line: 718	
		applyRequest();
/d
			if (!requestCycle.processRequestAndDetach())
/cb
	WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler) line: 657	
	WicketTester(BaseWicketTester).executeListener(Component, RequestListenerInterface) line: 1115	
	WicketTester(BaseWicketTester).clickLink(String, boolean) line: 1983	
	WicketTester(BaseWicketTester).clickLink(String) line: 1827	
	MiscTest.f() line: 28	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 57	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 606	
	FrameworkMethod$1.runReflectiveCall() line: 47	
	FrameworkMethod$1(ReflectiveCallable).run() line: 12	
	FrameworkMethod.invokeExplosively(Object, Object...) line: 44	
	InvokeMethod.evaluate() line: 17	
	RunBefores.evaluate() line: 26	
	BlockJUnit4ClassRunner(ParentRunner<T>).runLeaf(Statement, Description, RunNotifier) line: 271	
	BlockJUnit4ClassRunner.runChild(FrameworkMethod, RunNotifier) line: 70	
	BlockJUnit4ClassRunner.runChild(Object, RunNotifier) line: 50	
	ParentRunner$3.run() line: 238	
	ParentRunner$1.schedule(Runnable) line: 63	
	BlockJUnit4ClassRunner(ParentRunner<T>).runChildren(RunNotifier) line: 236	
	ParentRunner<T>.access$000(ParentRunner, RunNotifier) line: 53	
	ParentRunner$2.evaluate() line: 229	
	BlockJUnit4ClassRunner(ParentRunner<T>).run(RunNotifier) line: 309	
	JUnit4TestClassReference(JUnit4TestReference).run(TestExecution) line: 50	
	TestExecution.run(ITestReference[]) line: 38	
	RemoteTestRunner.runTests(String[], String, TestExecution) line: 467	
	RemoteTestRunner.runTests(TestExecution) line: 683	
	RemoteTestRunner.run() line: 390	
	RemoteTestRunner.main(String[]) line: 197	
/s
RequestCycle.processRequest() line: 219	
			IRequestHandler handler = resolveRequestHandler();
/s
RequestCycle.resolveRequestHandler() line: 189	

		return requestMapper.mapRequest(request);
/s
BaseWicketTester$TestRequestMapper.mapRequest(Request) line: 2867	
				return delegate.mapRequest(request);
/s
SystemMapper(CompoundRequestMapper).mapRequest(Request) line: 132	

this	SystemMapper  (id=165)	
	mappers	CopyOnWriteArrayList<E>  (id=2561)	
		array	Object[18]  (id=2565)	
			[0]	MountedMapper  (id=2202)	
MountedMapper [mountSegments=misc]
			[1]	MountedMapper  (id=2571)	
MountedMapper [mountSegments=ajaxcheckboxstudy]
			[2]	MountedMapper  (id=2572)	
			[3]	MountedMapper  (id=2573)	
			[4]	MountedMapper  (id=2574)	
			[5]	MountedMapper  (id=2575)	
			[6]	MountedMapper  (id=2576)	
			[7]	MountedMapper  (id=2577)	
			[8]	MountedMapper  (id=2578)	
			[9]	MountedMapper  (id=2584)	
			[10]	MountedMapper  (id=2585)	
			[11]	BufferedResponseMapper  (id=2225)	
			[12]	RestartResponseAtInterceptPageException$1  (id=2587)	
			[13]	UrlResourceReferenceMapper  (id=2589)	
			[14]	ResourceReferenceMapper  (id=2590)	
			[15]	HomePageMapper  (id=2607)	
			[16]	BookmarkableMapper  (id=155)	
			[17]	PageInstanceMapper  (id=2609)	

		for (MapperWithScore mapperWithScore : list)
		{
			IRequestMapper mapper = mapperWithScore.getMapper();
MountedMapper [mountSegments=misc]
			IRequestHandler handler = mapper.mapRequest(request);
/s
MountedMapper(AbstractBookmarkableMapper).mapRequest(Request) line: 346	

		UrlInfo urlInfo = parseRequest(request);
urlInfo	AbstractBookmarkableMapper$UrlInfo  (id=2709)	
	pageClass	Class<T> (my.test.own.MiscPage) (id=2231)	
	pageComponentInfo	PageComponentInfo  (id=2711)	
		componentInfo	ComponentInfo  (id=2713)	
			behaviorId	null	
			componentPath	"reload" (id=2733)	
			listenerInterface	"ILinkListener" (id=2734)	
			renderCount	Integer  (id=2735)	
1
		pageInfo	PageInfo  (id=2714)	
			pageId	Integer  (id=2777)	
0
	pageParameters	null	

			if (info == null)
/ NEE
			{
				// if there are is no page instance information
				// then this is a simple bookmarkable URL
				return processBookmarkable(pageClass, pageParameters);
/ NIET
/ WEL, bij page

			else if (info.getComponentInfo() != null)
			{
				// with both page instance and component+listener this is a listener interface URL
				return processListener(info, pageClass, pageParameters);
/s
MountedMapper(AbstractBookmarkableMapper).processListener(PageComponentInfo, Class<IRequestablePage>, PageParameters) line: 300	
		if (componentInfo != null)
		{
			renderCount = componentInfo.getRenderCount();
1
			listenerInterface = requestListenerInterfaceFromString(componentInfo.getListenerInterface());
/s
MountedMapper(AbstractComponentMapper).requestListenerInterfaceFromString(String) line: 71	
		return getContext().requestListenerInterfaceFromString(interfaceName);
interfaceName	"ILinkListener" (id=2734)	
/s
DefaultMapperContext.requestListenerInterfaceFromString(String) line: 87	
		return RequestListenerInterface.forName(interfaceName);
/s
RequestListenerInterface.forName(String) line: 59	

interfaces	Collections$SynchronizedMap<K,V>  (id=2837)	
	m	HashMap<K,V>  (id=2839)	
		table	HashMap$Entry<K,V>[16]  (id=2844)	
			[0]	HashMap$Entry<K,V>  (id=2845)	
IFormSubmitListener=[RequestListenerInterface name=IFormSubmitListener, method=public abstract void org.apache.wicket.markup.html.form.IFormSubmitListener.onFormSubmitted()]
			[1]	HashMap$Entry<K,V>  (id=2846)	
IOnChangeListener=[RequestListenerInterface name=IOnChangeListener, method=public abstract void org.apache.wicket.markup.html.form.IOnChangeListener.onSelectionChanged()]
			[6]	HashMap$Entry<K,V>  (id=2847)	
ILinkListener=[RequestListenerInterface name=ILinkListener, method=public abstract void org.apache.wicket.markup.html.link.ILinkListener.onLinkClicked()]
			[13]	HashMap$Entry<K,V>  (id=2848)	
IResourceListener=[RequestListenerInterface name=IResourceListener, method=public abstract void org.apache.wicket.IResourceListener.onResourceRequested()]

/ WH zijn deze er altijd	, en bij een link is het de ene, bij een form submit de andere	, ...
/ omdat we "ILinkListener" hebben	, pakt hij die	,

/t
MountedMapper(AbstractBookmarkableMapper).processListener(PageComponentInfo, Class<IRequestablePage>, PageParameters) line: 311	
			listenerInterface = requestListenerInterfaceFromString(componentInfo.getListenerInterface());
/d
listenerInterface	RequestListenerInterface  (id=2501)	

			PageAndComponentProvider provider = new PageAndComponentProvider(pageInfo.getPageId(),
				pageClass, pageParameters, renderCount, componentInfo.getComponentPath());
componentInfo.getComponentPath()="reload"


			return new ListenerInterfaceRequestHandler(provider, listenerInterface,
				componentInfo.getBehaviorId());
listenerInterface	RequestListenerInterface  (id=2493)	

/ Intermezzo

public class ListenerInterfaceRequestHandler
	public void respond(final IRequestCycle requestCycle)
		invokeListener();
	}
	private void invokeListener()
	{
		if (getBehaviorIndex() == null)
		{
			listenerInterface.invoke(getComponent());

public class RequestListenerInterface
	public final void invoke(final IRequestableComponent rcomponent)

/ Dus de ListenerInterfaceRequestHandler heeft respond method, die RequestListenerInterface.invoke calls	,
/ de RequestListenerInterface.invoke calls de onClick method in de Link die we zelf hebben programmed	,
/ MORGENOCHTEND

/ Einde Intermezzo

/t
RequestCycle.processRequest() line: 220	
			IRequestHandler handler = resolveRequestHandler();
/d
				execute(handler);
/s
RequestCycle.execute(IRequestHandler) line: 265	
			requestHandlerExecutor.execute(handler);
/s
RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
			respond(handler);
/s
RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
				handler.respond(RequestCycle.this);
/s
ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 157	

/ Hier komen we in de handler	,
/ Via de handler komen we in de listener, en die hebben we zelf program : we hebben de onClick method in de Link create	,

		if (page instanceof Page)
		{
			// initialize the page to be able to check whether it is stateless
			((Page)page).internalInitialize();
		}
		final boolean isStateless = page.isPageStateless();
false

		RedirectPolicy policy = isStateless
			? RedirectPolicy.NEVER_REDIRECT
->			: RedirectPolicy.AUTO_REDIRECT;

		if (isAjax == false && listenerInterface.isRenderPageAfterInvocation())
		{
			// schedule page render after current request handler is done. this can be
			// overridden during invocation of listener
			// method (i.e. by calling RequestCycle#setResponsePage)
			requestCycle.scheduleRequestHandlerAfterCurrent(new RenderPageRequestHandler( pageProvider, policy));

/ Intermezzo

/ we zien dat hierna de page render wordt called, 
/ Dit lezen we ook op 
https://ci.apache.org/projects/wicket/guide/7.x/guide/testing.html
/ waar ze een lege onClick method hebben	, maar inderdaad dat er een redirect naar de page achteraan komt	, 
In the code above we have used clickLink to click on the "reload" button and force page to be rendered again. 

/ Einde Intermezzo

		invokeListener();
/s
ListenerInterfaceRequestHandler.invokeListener() line: 239	
		if (getBehaviorIndex() == null)
		{
			listenerInterface.invoke(getComponent());
/s
RequestListenerInterface.invoke(IRequestableComponent) line: 205	
/=
	public final void invoke(final IRequestableComponent rcomponent)
rcomponent	MiscPage$1  (id=2492)	
/ de Link "reload"

		internalInvoke(component, component);
/s
RequestListenerInterface.internalInvoke(Component, Object) line: 258	
			method.invoke(target);

target	MiscPage$1  (id=2492)	
/ Link "reload"
this	RequestListenerInterface  (id=2493)	
	method	Method  (id=2720)	
public abstract void org.apache.wicket.markup.html.link.ILinkListener.onLinkClicked()
...
/s
MiscPage$1(Link<T>).onLinkClicked() line: 190	
		// Invoke subclass handler
		onClick();
/s
MiscPage$1.onClick() line: 24	
/=
public class MiscPage extends WebPage {
	public MiscPage() {
		Link<Void>link=new Link<Void>("reload") {
			@Override
			public void onClick() {
->				MarkupContainer page=MiscPage.this;
				if(page.contains(label, true)){
					page.replace(label2);
				}else{
					page.replace(label);
/ MORGENOCHTEND

/ 7	. 

/ we testen een AjaxLink	, 
/ Erg gemakkelijk	,

$ vi MiscPage.java

public class MiscPage extends WebPage {
	public MiscPage() {
		IModel<String>model=new PropertyModel<String>(this, "text");
		label=new Label("text", model);
		add(label);
		label.setOutputMarkupId(true);

		AjaxLink<Void>link2=new AjaxLink<Void>("click") {
			@Override
			public void onClick(AjaxRequestTarget target) {
				text+=" Again";
				target.add(MiscPage.this.label);
			}
		};
		add(link2);
	}
	public String getText() {
		return text;
	}

$ vi MiscTest.java

	@Before
	public void setUp(){
		WebApplication webApplication =new WicketApplication();
		wicketTester=new WicketTester(webApplication);
	}

	@Test
	public void f2(){
		Page page= wicketTester.startPage(MiscPage.class);
		wicketTester.assertRenderedPage(MiscPage.class);
		wicketTester.assertLabel("text", "Foo Bar");
		wicketTester.clickLink("click");
		wicketTester.assertLabel("text", "Foo Bar Again");
	}

/ @Before method setUp wordt called voor iedere @Test method, dus voor f en voor f2	, 

/ 7	. 

/s
MiscTest.f2() line: 38	
		wicketTester.clickLink("click");
/s
WicketTester(BaseWicketTester).clickLink(String) line: 1827	
		clickLink(path, true);
/s
WicketTester(BaseWicketTester).clickLink(String, boolean) line: 1873	
		Component linkComponent = getComponentFromLastRenderedPage(path);
linkComponent	MiscPage$2  (id=2568)	

		// if the link is an AjaxLink, we process it differently
		// than a normal link
		if (linkComponent instanceof AjaxLink)
		{
			List<AjaxEventBehavior> behaviors = WicketTesterHelper.findAjaxEventBehaviors( linkComponent, "click");
/s
WicketTesterHelper.findAjaxEventBehaviors(Component, String) line: 208	
/=
	public static List<AjaxEventBehavior> findAjaxEventBehaviors(Component component, String event)
component	MiscPage$2  (id=2568)	
event	"click" (id=2564)	

/ event kan ook een comma separator string zijn	, "click,focus"

			for (Behavior behavior : component.getBehaviors())
/s
MiscPage$2(Component).getBehaviors() line: 4571	
		return getBehaviors(null);
/s
MiscPage$2(Component).getBehaviors(Class<M>) line: 3695	
		return new Behaviors(this).getBehaviors(type);
type==null
/s
Behaviors.getBehaviors(Class<M>) line: 75	
/=
	public <M extends Behavior> List<M> getBehaviors(Class<M> type)
this	Behaviors  (id=2593)	
	component	MiscPage$2  (id=2568)	
type==null

this	Behaviors  (id=2593)	
	component	MiscPage$2  (id=2568)	
		data	Object[2]  (id=2650)	
			[0]	AjaxLink$1  (id=2662)	
			[1]	Behaviors$BehaviorIdList  (id=2663)	
				elementData	Object[1]  (id=2667)	
					[0]	AjaxLink$1  (id=2662)	

/ Intermezzo

/ AjaxLink$1 is de AjaxEventBehavior	, 

public abstract class AjaxLink<T> extends AbstractLink implements IAjaxLink, IGenericComponent<T>
        protected AjaxEventBehavior newAjaxEventBehavior(String event)
        {
                return new AjaxEventBehavior(event)
                {
                        private static final long serialVersionUID = 1L;

                        @Override
                        protected void onEvent(AjaxRequestTarget target)
                        {
                                onClick(target);
                        }

                        @Override
                        protected void updateAjaxAttributes(AjaxRequestAttributes attributes)
                        {
                                super.updateAjaxAttributes(attributes);
                                AjaxLink.this.updateAjaxAttributes(attributes);

/ Einde Intermezzo

		for (int i = component.data_start(); i < len; i++)
true / i==0
		{
			Object obj = component.data_get(i);
obj	AjaxLink$1  (id=2662)	
				if (type == null || type.isAssignableFrom(obj.getClass()))
				{
					subset.add((M)obj);
		return Collections.unmodifiableList(subset);
/t
WicketTesterHelper.findAjaxEventBehaviors(Component, String) line: 226	
			for (Behavior behavior : component.getBehaviors())
/d
				if (behavior instanceof AjaxEventBehavior)
				{
					String behaviorEvent = ((AjaxEventBehavior)behavior).getEvent();
"click"
					String[] behaviorEventNames = Strings.split(behaviorEvent, ' ');
					for (String behaviorEventName : behaviorEventNames)
					{
						if (behaviorEventName.startsWith("on"))
/n
						if (eventName.equalsIgnoreCase(behaviorEventName))
/j
						{
							behaviors.add((AjaxEventBehavior)behavior);
/ volgende	, 
		for (String eventName : eventNames)
/ GEEN 
		return behaviors;
/t
WicketTester(BaseWicketTester).clickLink(String, boolean) line: 1875	
			List<AjaxEventBehavior> behaviors = WicketTesterHelper.findAjaxEventBehaviors(
				linkComponent, "click");
\d
			for (AjaxEventBehavior behavior : behaviors)
			{
				executeBehavior(behavior);
/s
WicketTester(BaseWicketTester).executeBehavior(AbstractAjaxBehavior) line: 1168	
		Url url = Url.parse(behavior.getCallbackUrl().toString(), Charset.forName(request.getCharacterEncoding()));
/s
AjaxLink$1(AbstractAjaxBehavior).getCallbackUrl() line: 88	
		if (getComponent() == null)
/n
/=AjaxLink 
		rli = IBehaviorListener.INTERFACE;
rli	RequestListenerInterface  (id=2679)	
	interfaces	Collections$SynchronizedMap<K,V>  (id=2784)	
{	
	IFormSubmitListener=[RequestListenerInterface name=IFormSubmitListener, method=public abstract void org.apache.wicket.markup.html.form.IFormSubmitListener.onFormSubmitted()], 
	IBehaviorListener=[RequestListenerInterface name=IBehaviorListener, method=public abstract void org.apache.wicket.behavior.IBehaviorListener.onRequest()], 
	IOnChangeListener=[RequestListenerInterface name=IOnChangeListener, method=public abstract void org.apache.wicket.markup.html.form.IOnChangeListener.onSelectionChanged()], 
	ILinkListener=[RequestListenerInterface name=ILinkListener, method=public abstract void org.apache.wicket.markup.html.link.ILinkListener.onLinkClicked()], 
	IResourceListener=[RequestListenerInterface name=IResourceListener, method=public abstract void org.apache.wicket.IResourceListener.onResourceRequested()]
}
	method	Method  (id=2786)	
public abstract void org.apache.wicket.behavior.IBehaviorListener.onRequest()
	name	"IBehaviorListener" (id=2787)	

/ rli is een local	,


/ Intermezzo

	AjaxLink$1
	|
	AjaxEventBehavior
	|
	AbstractDefaultAjaxBehavior
		onRequest
	|
	AbstractAjaxBehavior
	|
	IBehaviorListener
	
this	AjaxLink$1  (id=2662)	
	INTERFACE	RequestListenerInterface  (id=2679)	
		interfaces	Collections$SynchronizedMap<K,V>  (id=2784)	
		listenerInterfaceClass	Class<T> (org.apache.wicket.behavior.IBehaviorListener) (id=642)	
		method	Method  (id=2786)	
public abstract void org.apache.wicket.behavior.IBehaviorListener.onRequest()
		name	"IBehaviorListener" (id=2787)	
	component	MiscPage$2  (id=2568)	
	event	"click" (id=2564)	

/  AbstractDefaultAjaxBehavior INTERFACE	, want IBehaviorListener heeft deze	, 
/ een RequestListenerInterface inst heeft de Method van de interface die arg is van z'n ctor, bijv IBehaviorListener	, dus IBehaviorListener.INTERFACE heeft de Method public abstract void org.apache.wicket.behavior.IBehaviorListener.onRequest(). 
/ dus dat is wat een RequestListenerInterface doet: het hebben van een Method	, 
/ een Method uit de interface die arg is van z'n ctor, bijv IBehaviorListener	,

/ Einde Intermezzo

		return getComponent().urlFor(this, rli, new PageParameters());
/s
MiscPage$2(Component).urlFor(Behavior, RequestListenerInterface, PageParameters) line: 3347	
this	MiscPage$2  (id=2568)	
behaviour	AjaxLink$1  (id=2662)	
listener	RequestListenerInterface  (id=2679)	
parameters	PageParameters  (id=2863)	

		IRequestHandler handler = createRequestHandler(listener, parameters, id);
/s
MiscPage$2(Component).createRequestHandler(RequestListenerInterface, PageParameters, Integer) line: 3358	
		if (page.isPageStateless()
/n
			|| (getApplication().getPageSettings().getRecreateBookmarkablePagesAfterExpiry()
				&& page.isBookmarkable() && page.wasCreatedBookmarkable()))
/j
		{
			return new BookmarkableListenerInterfaceRequestHandler(provider, listener, id);
/t
MiscPage$2(Component).urlFor(Behavior, RequestListenerInterface, PageParameters) line: 3349	
		IRequestHandler handler = createRequestHandler(listener, parameters, id);
/d
		return getRequestCycle().urlFor(handler);
/s
RequestCycle.urlFor(IRequestHandler) line: 534	
			Url mappedUrl = mapUrlFor(handler);
/s
RequestCycle.mapUrlFor(IRequestHandler) line: 434	
this	RequestCycle  (id=2899)	
	requestMapper	BaseWicketTester$TestRequestMapper  (id=2901)	

		final Url url = requestMapper.mapHandler(handler);
/s
BaseWicketTester$TestRequestMapper.mapHandler(IRequestHandler) line: 2853	
			return delegate.mapHandler(requestHandler);
/s
SystemMapper(CompoundRequestMapper).mapHandler(IRequestHandler) line: 211	
		for (IRequestMapper mapper : mappers)
		{
			Url url = mapper.mapHandler(handler);
/s
MountedMapper.mapHandler(IRequestHandler) line: 159	
		Url url = super.mapHandler(requestHandler);
requestHandler	BookmarkableListenerInterfaceRequestHandler  (id=2896)	
/s
MountedMapper(AbstractBookmarkableMapper).mapHandler(IRequestHandler) line: 460	
		else if (requestHandler instanceof BookmarkableListenerInterfaceRequestHandler)

			ComponentInfo componentInfo = new ComponentInfo(renderCount, requestListenerInterfaceToString(handler.getListenerInterface()), handler.getComponentPath(), handler.getBehaviorIndex());

requestListenerInterfaceToString(handler.getListenerInterface())=RequestListenerInterface, RequestListenerInterface.getName()="IBehaviorListener"	, 
handler.getComponentPath()="click"

			PageParameters parameters = getRecreateMountedPagesAfterExpiry() ? new PageParameters( handler.getPage().getPageParameters()).mergeWith(handler.getPageParameters()) : handler.getPageParameters();
/ leeg	,

			UrlInfo urlInfo = new UrlInfo(new PageComponentInfo(pageInfo, componentInfo), pageClass, parameters);
			return buildUrl(urlInfo);
/s
MountedMapper.buildUrl(AbstractBookmarkableMapper$UrlInfo) line: 199	
		Url url = new Url();
		for (String s : mountSegments)
this	MountedMapper  (id=2556)	
	mountSegments	String[1]  (id=2941)	
[misc]
/t
MountedMapper.mapHandler(IRequestHandler) line: 161	
		Url url = super.mapHandler(requestHandler);
/d
misc?0-1.IBehaviorListener.0-click
/ WH de laatste 0 is de behavior index	, 
		return url;
/t
RequestCycle.urlFor(IRequestHandler) line: 535	
			Url mappedUrl = mapUrlFor(handler);
/d
			CharSequence url = renderUrl(mappedUrl, handler);
url	"./misc?0-1.IBehaviorListener.0-click" (id=3003)	
			return url;
/t
WicketTester(BaseWicketTester).executeBehavior(AbstractAjaxBehavior) line: 1172	
		Url url = Url.parse(behavior.getCallbackUrl().toString(), Charset.forName(request.getCharacterEncoding()));
/d
./misc?0-1.IBehaviorListener.0-click

this	WicketTester  (id=2546)	
	request	MockHttpServletRequest  (id=3016)	
		parameters	LinkedHashMap<K,V>  (id=3034)	
{0-1.IBehaviorListener.0-click=[Ljava.lang.String;@21630fdf}
		url	"/context/servlet/misc" (id=3043)	

		request.addHeader(WebRequest.HEADER_AJAX_BASE_URL, url.toString());
		request.addHeader(WebRequest.HEADER_AJAX, "true");
		processRequest();
/s
WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler, boolean) line: 686	
		applyRequest();
/s
WicketTester(BaseWicketTester).applyRequest() line: 2538	
		Request req = newServletWebRequest();
		requestCycle.setRequest(req);
/d
		if (useRequestUrlAsBase)
		{
			requestCycle.getUrlRenderer().setBaseUrl(req.getUrl());


req	ServletWebRequest  (id=3063)	
	httpServletRequest	MockHttpServletRequest  (id=3016)	
		parameters	LinkedHashMap<K,V>  (id=3034)	
{0-1.IBehaviorListener.0-click=[Ljava.lang.String;@21630fdf}
		url	"/context/servlet/misc" (id=3043)	
	url	Url  (id=3075)	
		parameters	ArrayList<E>  (id=3100)	
[0-1.IBehaviorListener.0-click]
	segments	ArrayList<E>  (id=3103)	
[misc]

/ of print req.url in 1 keer	,
req	ServletWebRequest  (id=2580)	
	url	Url  (id=2589)	
misc?0-1.IBehaviorListener.0-click

/t
WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler, boolean) line: 714	
		applyRequest();
/d
			if (!requestCycle.processRequestAndDetach())
/s
RequestCycle.processRequest() line: 216	
			IRequestHandler handler = resolveRequestHandler();
/s
RequestCycle.resolveRequestHandler() line: 189	
		return requestMapper.mapRequest(request);
/s
BaseWicketTester$TestRequestMapper.mapRequest(Request) line: 2859	
				return delegate.mapRequest(request);
/s
SystemMapper(CompoundRequestMapper).mapRequest(Request) line: 132	
			IRequestHandler handler = mapper.mapRequest(request);
/s
MountedMapper(AbstractBookmarkableMapper).mapRequest(Request) line: 346	
		UrlInfo urlInfo = parseRequest(request);
/s
MountedMapper.parseRequest(Request) line: 126	
		Url url = request.getUrl();
misc?0-1.IBehaviorListener.0-click

		// check if the URL starts with the proper segments
		else if (urlStartsWithMountedSegments(url))
		{
			// try to extract page and component information from URL
			PageComponentInfo info = getPageComponentInfo(url);
info	PageComponentInfo  (id=2666)	
	componentInfo	ComponentInfo  (id=2668)	
		behaviorId	Integer  (id=2654)	
0
		componentPath	"click" (id=2671)	
		listenerInterface	"IBehaviorListener" (id=2672)	
		renderCount	Integer  (id=2658)	
1
	pageInfo	PageInfo  (id=2669)	
		pageId	Integer  (id=2654)	
0
			Class<? extends IRequestablePage> pageClass = getPageClass();
			PageParameters pageParameters = extractPageParameters(request, url);

			return new UrlInfo(info, pageClass, pageParameters);
/t
MountedMapper(AbstractBookmarkableMapper).mapRequest(Request) line: 350	
		UrlInfo urlInfo = parseRequest(request);
/d
		if (urlInfo != null)
		{
			PageComponentInfo info = urlInfo.getPageComponentInfo();
			Class<? extends IRequestablePage> pageClass = urlInfo.getPageClass();
			PageParameters pageParameters = urlInfo.getPageParameters();

			else if (info.getComponentInfo() != null)
			{
				// with both page instance and component+listener this is a listener interface URL
				return processListener(info, pageClass, pageParameters);
/s
MountedMapper(AbstractBookmarkableMapper).processListener(PageComponentInfo, Class<IRequestablePage>, PageParameters) line: 300	
		if (componentInfo != null)
		{
			renderCount = componentInfo.getRenderCount();
			listenerInterface = requestListenerInterfaceFromString(componentInfo.getListenerInterface());
/s
DefaultMapperContext.requestListenerInterfaceFromString(String) line: 87	
		return RequestListenerInterface.forName(interfaceName);
/s
RequestListenerInterface.forName(String) line: 59	
		return interfaces.get(interfaceName);
/t
MountedMapper(AbstractBookmarkableMapper).processListener(PageComponentInfo, Class<IRequestablePage>, PageParameters) line: 300	
			listenerInterface = requestListenerInterfaceFromString(componentInfo.getListenerInterface());
/d
listenerInterface	RequestListenerInterface  (id=2695)	
	interfaces	Collections$SynchronizedMap<K,V>  (id=2697)	
	listenerInterfaceClass	Class<T> (org.apache.wicket.behavior.IBehaviorListener) (id=320)	
	method	Method  (id=2699)	
	name	"IBehaviorListener" (id=2700)	

		if (listenerInterface != null)
		{
			PageAndComponentProvider provider = new PageAndComponentProvider(pageInfo.getPageId(),
				pageClass, pageParameters, renderCount, componentInfo.getComponentPath());

			provider.setPageSource(getContext());

			return new ListenerInterfaceRequestHandler(provider, listenerInterface,
				componentInfo.getBehaviorId());
/t
RequestCycle.processRequest() line: 220	
			IRequestHandler handler = resolveRequestHandler();
handler	ListenerInterfaceRequestHandler  (id=2734)	
	behaviorId	Integer  (id=2654)	
	listenerInterface	RequestListenerInterface  (id=2695)			<-
	pageComponentProvider	PageAndComponentProvider  (id=2733)	 	
		component	null	
		componentPath	"click" (id=2671)							<-
		pageClass	Class<T> (my.test.own.MiscPage) (id=2202)	
		pageId	Integer  (id=2654)	
		renderCount	Integer  (id=2658)	

				execute(handler);
/s
RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
			respond(handler);
/s
RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
				handler.respond(RequestCycle.this);
/s
ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 157	

/ we zijn nu in de handler	,

		final boolean isAjax = ((WebRequest)requestCycle.getRequest()).isAjax();
/s
ServletWebRequest(WebRequest).isAjax() line: 117	
		return Strings.isTrue(getHeader(HEADER_AJAX)) ||	...
true
			component = getComponent();
component	MiscPage$2  (id=2561)	
/ uses	,
this	ListenerInterfaceRequestHandler  (id=2734)	
	pageComponentProvider	PageAndComponentProvider  (id=2733)	
		componentPath	"click" (id=2671)	

		if (!canCallListenerInterfaceAfterExpiry && freshPage && (isStateless == false || component == null))
/n
		if (isAjax == false && listenerInterface.isRenderPageAfterInvocation())
/ NEE
/ Bij gewone Link JA
		{
			// schedule page render after current request handler is done. this can be
			// overridden during invocation of listener
			// method (i.e. by calling RequestCycle#setResponsePage)
			requestCycle.scheduleRequestHandlerAfterCurrent(new RenderPageRequestHandler(
				pageProvider, policy));
/ NIET
		}

		invokeListener();
/s
ListenerInterfaceRequestHandler.invokeListener() line: 247	
				Behavior behavior = getComponent().getBehaviorById(behaviorId);
/s
MiscPage$2(Component).getBehaviorById(int) line: 4540	
		return new Behaviors(this).getBehaviorById(id);
this=de component=MiscPage$2, de AjaxLink	,
/s
Behaviors.getBehaviorById(int) line: 303	
		ArrayList<Behavior> ids = getBehaviorsIdList(false);
/s
Behaviors.getBehaviorsIdList(boolean) line: 203	
		for (int i = component.data_start(); i < len; i++)
		{
			Object obj = component.data_get(i);
obj	AjaxLink$1  (id=2562)	
			if (obj != null && obj instanceof BehaviorIdList)
/n
/ volgende	,
		for (int i = component.data_start(); i < len; i++)
		{
			Object obj = component.data_get(i);
			if (obj != null && obj instanceof BehaviorIdList)
			{
				return (BehaviorIdList)obj;
/t
Behaviors.getBehaviorById(int) line: 308	
		ArrayList<Behavior> ids = getBehaviorsIdList(false);
/d
		if (ids != null)
		{
			if (id >= 0 && id < ids.size())
			{
				behavior = ids.get(id);
			return behavior;
/t
ListenerInterfaceRequestHandler.invokeListener() line: 248	
				Behavior behavior = getComponent().getBehaviorById(behaviorId);
/d
				listenerInterface.invoke(getComponent(), behavior);
/s
RequestListenerInterface.invoke(IRequestableComponent, Behavior) line: 231	

/ we zijn in de RequestListenerInterface

		if (!behavior.canCallListenerInterface(component, method))
/ TODO
		internalInvoke(component, behavior);
/s
RequestListenerInterface.internalInvoke(Component, Object) line: 248	
			method.invoke(target);
target	AjaxLink$1  (id=2562)	
/s
AjaxLink$1(AbstractDefaultAjaxBehavior).onRequest() line: 587	
		WebApplication app = (WebApplication)getComponent().getApplication();
		AjaxRequestTarget target = app.newAjaxRequestTarget(getComponent().getPage());
/s
WicketApplication(WebApplication).newAjaxRequestTarget(Page) line: 907	
		AjaxRequestTarget target = getAjaxRequestTargetProvider().get(page);
/s
WebApplication$DefaultAjaxRequestTargetProvider.get(Page) line: 1073	
			return new AjaxRequestHandler(page);
/s
AjaxRequestHandler$1.<init>(AjaxRequestHandler, Page) line: 116	
		update = new XmlPartialPageUpdate(page)
/s
AjaxRequestHandler$1(PartialPageUpdate).<init>(Page) line: 137	
		this.page = page;

		WebResponse response = (WebResponse) page.getResponse();
		bodyBuffer = new ResponseBuffer(response);
		headerBuffer = new ResponseBuffer(response);
/t
WicketApplication(WebApplication).newAjaxRequestTarget(Page) line: 908	
		AjaxRequestTarget target = getAjaxRequestTargetProvider().get(page);
/d
target	AjaxRequestHandler  (id=2866)	
	update	AjaxRequestHandler$1  (id=2872)	
		bodyBuffer	PartialPageUpdate$ResponseBuffer  (id=2874)	
		headerBuffer	PartialPageUpdate$ResponseBuffer  (id=2876)	

		return target;
/t
AjaxLink$1(AbstractDefaultAjaxBehavior).onRequest() line: 591	

/ we zijn terug in de behavior,	

		AjaxRequestTarget target = app.newAjaxRequestTarget(getComponent().getPage());
/d
/ target heeft buffers op de response	,

		RequestCycle requestCycle = RequestCycle.get();
		requestCycle.scheduleRequestHandlerAfterCurrent(target);
/ TODO
		respond(target);
/s
AjaxLink$1(AjaxEventBehavior).respond(AjaxRequestTarget) line: 155	
		onEvent(target);
/s
AjaxLink$1.onEvent(AjaxRequestTarget) line: 84	
/=
	protected AjaxEventBehavior newAjaxEventBehavior(String event)
	{
		return new AjaxEventBehavior(event)
		{
			private static final long serialVersionUID = 1L;

			@Override
			protected void onEvent(AjaxRequestTarget target)
			{
->				onClick(target);
/s
MiscPage$2.onClick(AjaxRequestTarget) line: 40	
/=
		AjaxLink<Void>link2=new AjaxLink<Void>("click") {
			@Override
			public void onClick(AjaxRequestTarget target) {
->				text+=" Again";
				target.add(MiscPage.this.label);
/s
AjaxRequestHandler.add(Component...) line: 221	
			add(component, component.getMarkupId());
component	Label  (id=2940)	
/s
AjaxRequestHandler.add(Component, String) line: 238	
		update.add(component, markupId);
/s
AjaxRequestHandler$1(PartialPageUpdate).add(Component, String) line: 369	
		component.setMarkupId(markupId);
/ TODO
		markupIdToComponent.put(markupId, component);	<- dit is dus target.add	,
/t
RequestListenerInterface.internalInvoke(Component, Object) line: 277	

/ terug in de RequestListenerInterface	,
			method.invoke(target);
/d
/t
RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 97	
/=
	public void execute(final IRequestHandler handler)
handler	ListenerInterfaceRequestHandler  (id=2734)	

			respond(handler);
/d
		else if (scheduled != null)
		{
			execute(scheduled);
/s
RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 58	
/=
	public void execute(final IRequestHandler handler)
handler	AjaxRequestHandler  (id=2866)	

/ recursive call	, met een andere handler	,

			respond(handler);
/s
RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
				handler.respond(RequestCycle.this);
/s
AjaxRequestHandler.respond(IRequestCycle) line: 324	
		update.setContentType(response, encoding);
"UTF-8"
		final StringResponse bodyResponse = new StringResponse();
		update.writeTo(bodyResponse, encoding);
encoding="UTF-8"
/s
AjaxRequestHandler$1(PartialPageUpdate).writeTo(Response, String) line: 153	

/ we zijn in PartialPageUpdate

			writeHeader(response, encoding);
response=
<?xml version="1.0" encoding="UTF-8"?><ajax-response>

			// process added components
			writeComponents(response, encoding);
/s
AjaxRequestHandler$1(PartialPageUpdate).writeComponents(Response, String) line: 239	
		for (Map.Entry<String, Component> stringComponentEntry : markupIdToComponent.entrySet())

this	AjaxRequestHandler$1  (id=2872)	
	markupIdToComponent	LinkedHashMap<K,V>  (id=2891)	
{text2=[Component id = text]}

			final Component component = stringComponentEntry.getValue();
component	Label  (id=2940)	

			if (!containsAncestorFor(component))
/ JA
/ z'n parent MiscPage is niet added aan target	, dus zit niet in markupIdToComponent	,
			{
				writeComponent(response, component.getAjaxRegionMarkupId(), component, encoding);
/s
AjaxRequestHandler$1(XmlPartialPageUpdate).writeComponent(Response, String, Component, String) line: 66	

		component.setOutputMarkupId(true);
/ Dat moesten we toch zelf doen	?
/ TODO

				component.render();
/ TODO
		response.write("<component id=\"");
		response.write(markupId);
		response.write("\" ><![CDATA[");
		response.write(encode(bodyBuffer.getContents()));
		response.write("]]></component>");

response=
<?xml version="1.0" encoding="UTF-8"?><ajax-response><component id="text2" ><![CDATA[<span wicket:id="text" id="text2" wicketpath="text">Foo Bar Again</span>]]></component>

/t
AjaxRequestHandler.respond(IRequestCycle) line: 359	
		update.writeTo(bodyResponse, encoding);
/d
bodyResponse=
<?xml version="1.0" encoding="UTF-8"?><ajax-response><component id="text2" ><![CDATA[<span wicket:id="text" id="text2" wicketpath="text">Foo Bar Again</span>]]></component></ajax-response>

		CharSequence filteredResponse = invokeResponseFilters(bodyResponse);
		response.write(filteredResponse);

response	BaseWicketTester$WicketTesterServletWebResponse  (id=2577)	
	httpServletResponse	MockHttpServletResponse  (id=2787)	
		stringWriter	StringWriter  (id=3090)	
<?xml version="1.0" encoding="UTF-8"?><ajax-response><component id="text2" ><![CDATA[<span wicket:id="text" id="text2" wicketpath="text">Foo Bar Again</span>]]></component></ajax-response>
/ TODO Is dit de plaats waar het antwoord moet zijn	?

/t
RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 99	
			respond(handler);
/d
		else if (scheduled != null)
/n
/t
RequestCycle.processRequestAndDetach() line: 297	
			result = processRequest();
true
this	RequestCycle  (id=2563)	
	activeResponse	BaseWicketTester$WicketTesterServletWebResponse  (id=2577)	
		httpServletResponse	MockHttpServletResponse  (id=2787)	
			printWriter	MockHttpServletResponse$2  (id=3085)	
			stringWriter	StringWriter  (id=3090)	
<?xml version="1.0" encoding="UTF-8"?><ajax-response><component id="text2" ><![CDATA[<span wicket:id="text" id="text2" wicketpath="text">Foo Bar Again</span>]]></component></ajax-response>

		finally
		{
			detach();
/ TODO Slaan we over	,
/t
WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler, boolean) line: 725	
			if (!requestCycle.processRequestAndDetach())
/d
		finally
		{
			recordRequestResponse();
WicketTester(BaseWicketTester).recordRequestResponse() line: 859	
		lastRequest = request;
		setLastResponse(response);

		previousRequests.add(request);
		previousResponses.add(response);
/t
WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler, boolean) line: 726	
			recordRequestResponse();
/d
			setupNextRequestCycle();
/ TODO
			return true;
/t
WicketTester(BaseWicketTester).clickLink(String, boolean) line: 1878	
			for (AjaxEventBehavior behavior : behaviors)
			{
				executeBehavior(behavior);
/d
WicketTester(BaseWicketTester).clickLink(String, boolean) line: 1996	
			else
			{
				executeListener(link, ILinkListener.INTERFACE);
/d
/t
MiscTest.f2() line: 39	
		wicketTester.clickLink("click");
/d
		wicketTester.assertLabel("text", "Foo Bar Again");
/s
WicketTester.assertLabel(String, String) line: 601	
		Label label = (Label)getComponentFromLastRenderedPage(path);
path="text"
/s
WicketTester(BaseWicketTester).getComponentFromLastRenderedPage(String, boolean) line: 1571	
		Component component = getLastRenderedPage().get(path);
/s
WicketTester(BaseWicketTester).getComponentFromLastRenderedPage(String, boolean) line: 1580	
		Component component = getLastRenderedPage().get(path);
component	Label  (id=2940)	
	data	Object[2]  (id=3016)	
		[0]	PropertyModel<T>  (id=3193)	
			expression	"text" (id=3017)	
			target	MiscPage  (id=2558)	
/t
WicketTester.assertLabel(String, String) line: 602	
		Label label = (Label)getComponentFromLastRenderedPage(path);
/d
		assertEquals(expectedLabelText, label.getDefaultModelObjectAsString());

/ deze test gaat parallel aan de gen HTML in StringWriter hierboven	,

/ 7	. 

/ ws wicket7_3

/ we import in eclipse	,
/home/eric/Devel/Java/Wicket/Wicket-tutorial-examples

/ Het zijn allemaal aparte proj	, net als wicket-testing	, 

/ we moeten de pom.xml van deze proj aanpassen	, 

/ we bekijken proj CustomDatepickerAjax	,

$ vi pom.xml

<project ...>

	<packaging>war</packaging>							/ was jar	,

	<properties>
			<tomcat.version>2.2</tomcat.version>
	</properties>

			<plugin>
				<groupId>org.apache.tomcat.maven</groupId>
				<artifactId>tomcat7-maven-plugin</artifactId>
				<version>${tomcat.version}</version>
				<configuration>
	    			<port>8080</port>
	    			<path>/${project.artifactId}</path>
	    			<url>http://localhost:9090/manager/text</url>
	    			<server>my_tomcat</server>
 	 			</configuration>
			</plugin>
		</plugins>

/ Nu kunnen we	, in	, 
/home/eric/Devel/Java/Wicket/Wicket-tutorial-examples/CustomDatepickerAjax
tomcat7:undeploy clean tomcat7:deploy

/ Geef in chrome	,
http://localhost:9090/CustomDatepickerAjax

/s
	HomePage.<init>(PageParameters) line: 36	
	NativeConstructorAccessorImpl.newInstance0(Constructor, Object[]) line: not available [native method]	
	NativeConstructorAccessorImpl.newInstance(Object[]) line: 57	
	DelegatingConstructorAccessorImpl.newInstance(Object[]) line: 45	
	Constructor<T>.newInstance(Object...) line: 526	
	DefaultPageFactory.newPage(Constructor<C>, PageParameters) line: 171	
	DefaultPageFactory.newPage(Class<C>) line: 76	
	DefaultMapperContext.newPageInstance(Class<IRequestablePage>, PageParameters) line: 102	
	PageProvider.resolvePageInstance(Integer, Class<IRequestablePage>, PageParameters, Integer) line: 271	
	PageProvider.getPageInstance() line: 169	
	WebPageRenderer(PageRenderer).getPage() line: 78	
	WebPageRenderer.isPageStateless() line: 287	
	WebPageRenderer.shouldRenderPageAndWriteResponse(RequestCycle, Url, Url) line: 329	
	WebPageRenderer.respond(RequestCycle) line: 193	
		if (shouldRenderPageAndWriteResponse(requestCycle, currentUrl, targetUrl))
/cb
	BaseWicketTester$LastPageRecordingPageRendererProvider$1.respond(RequestCycle) line: 2747	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler, boolean) line: 718	
	WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler) line: 657	
	WicketTester(BaseWicketTester).processRequest() line: 629	
	WicketTester(BaseWicketTester).startPage(Class<C>, PageParameters) line: 1262	
	WicketTester(BaseWicketTester).startPage(Class<C>) line: 1235	
	TestHomePage.testDisableDatePickerWithButton() line: 42	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 57	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 606	
	FrameworkMethod$1.runReflectiveCall() line: 47	
	FrameworkMethod$1(ReflectiveCallable).run() line: 12	
	FrameworkMethod.invokeExplosively(Object, Object...) line: 44	
	InvokeMethod.evaluate() line: 17	
	RunBefores.evaluate() line: 26	
	BlockJUnit4ClassRunner(ParentRunner<T>).runLeaf(Statement, Description, RunNotifier) line: 271	
	BlockJUnit4ClassRunner.runChild(FrameworkMethod, RunNotifier) line: 70	
	BlockJUnit4ClassRunner.runChild(Object, RunNotifier) line: 50	
	ParentRunner$3.run() line: 238	
	ParentRunner$1.schedule(Runnable) line: 63	
	BlockJUnit4ClassRunner(ParentRunner<T>).runChildren(RunNotifier) line: 236	
	ParentRunner<T>.access$000(ParentRunner, RunNotifier) line: 53	
	ParentRunner$2.evaluate() line: 229	
	BlockJUnit4ClassRunner(ParentRunner<T>).run(RunNotifier) line: 309	
	JUnit4TestClassReference(JUnit4TestReference).run(TestExecution) line: 50	
	TestExecution.run(ITestReference[]) line: 38	
	RemoteTestRunner.runTests(String[], String, TestExecution) line: 467	
	RemoteTestRunner.runTests(TestExecution) line: 683	
	RemoteTestRunner.run() line: 390	
	RemoteTestRunner.main(String[]) line: 197	
/debug	, 
/s
HomePage.<init>(PageParameters) line: 36	
		super(parameters);
/s
HomePage(Component).<init>(String, IModel<?>) line: 687	
		setId(id);
id==null
		init();
/s
HomePage(Page).init() line: 714	
		if (isBookmarkable() == false)
/s
DefaultPageFactory.isBookmarkable(Class<C>) line: 244	
				if (pageClass.getDeclaredConstructor(new Class[] { }) != null)
/ of
					if (pageClass.getDeclaredConstructor(new Class[] { PageParameters.class }) != null)
						bookmarkable = Boolean.TRUE;
/ TODO
/t
HomePage(Page).init() line: 714	
		if (isBookmarkable() == false)
/n
			setStatelessHint(false);
/ NIET
/ logisch	,

		// All Pages are born dirty so they get clustered right away
		dirty(true);

		// this is a bit of a dirty hack, but calling dirty(true) results in isStateless called
		// which is bound to set the stateless cache to true as there are no components yet
		stateless = null;
/t
HomePage(Component).<init>(String, IModel<?>) line: 696	
		init();
/d
		if (model != null)
/n
/t
HomePage.<init>(PageParameters) line: 37	
		super(parameters);
/d
		Form form = new Form("form");
/s
Form<T>(Component).<init>(String, IModel<?>) line: 687	
		setId(id);
"form"
		init();
/ Component.init()=={}
		if (model != null)
/n
/ Dit form heeft geen model	,

/t
Form<T>.<init>(String, IModel<T>) line: 321	
		super(id, model);
/d
		setOutputMarkupId(true);
/t
HomePage.<init>(PageParameters) line: 39	
		Form form = new Form("form");
/d
		final JQueryDateFieldAjax datepicker= new JQueryDateFieldAjax("datepicker", new Model<Date>());
/s
JQueryDateFieldAjax(DateTextField).<init>(String, IModel<Date>) line: 86	
		this(id, model, defaultDatePattern());
/s
DateTextField.defaultDatePattern() line: 184	
		Locale locale = Session.get().getLocale();
en_US
			DateFormat format = DateFormat.getDateInstance(DateFormat.SHORT, locale);
				return ((SimpleDateFormat)format).toPattern();
/t
/s
JQueryDateFieldAjax(DateTextField).<init>(String, IModel<Date>, String) line: 118	

id	"datepicker" (id=1432)	
model	Model<T>  (id=1427)	
datePattern	"M/d/yy" (id=1448)	

		super(id, model, Date.class);
/s
JQueryDateFieldAjax(Component).<init>(String, IModel<?>) line: 698	
		setId(id);
"datepicker"
		init();
/ Component.init is leeg	,
		if (model != null)
		{
			setModelImpl(wrap(model));
/t
JQueryDateFieldAjax(FormComponent<T>).<init>(String, IModel<T>) line: 474	
/t
JQueryDateFieldAjax(TextField<T>).<init>(String, IModel<T>, Class<T>) line: 75	
/=
	public TextField(final String id, IModel<T> model, Class<T> type)
		super(id, model);
/d
		setType(type);
java.util.Date
		// don't double encode the value. it is encoded by ComponentTag.writeOutput()
		setEscapeModelStrings(false);
/t
JQueryDateFieldAjax(DateTextField).<init>(String, IModel<Date>, String) line: 119	
		super(id, model, Date.class);
/d
		this.datePattern = datePattern;
		converter = new DateConverter()
/t
























	























 
















 








/ Einde WICKETTESTER

/ WICKET SOURCE AJAX TEST 

/ In wicket's source heb je ook tests	,  en bijbehorende pages	, 
/ de bijbehorende pages zijn ook in src/test/java	, het zijn pages om mee te testen	,

/ we zoeken in wicket (source) op getLastRenderedPage	,

/ 7	. 

[eric@localhost wicket]$  pwd
/home/eric/Devel/Java/Wicket/wicket

$ vi ./wicket-core/src/test/java/org/apache/wicket/ajax/markup/html/ajaxLink/AjaxLinkTest.java
...
$ vi ./wicket-core/src/test/java/org/apache/wicket/ajax/markup/html/ajaxLink/AjaxLinkPage.java
...
$ vi ./wicket-core/src/test/java/org/apache/wicket/ajax/markup/html/ajaxLink/AjaxLinkPage.html
...



/ 7. 	

$ vi ./wicket-core/src/test/java/org/apache/wicket/markup/html/basic/SimplePageTest.java
...
$ vi ./wicket-core/src/main/java/org/apache/wicket/util/tester/WicketTestCase.java
/ in src/main/java	, NIET in src/test/java	,
...
/ er is ook,	
$ ls wicket-core/src/test/java/org/apache/wicket/util/tester/
...

public class SimplePageTest extends WicketTestCase
	@Test
	public void renderHomePage_2() throws Exception
		executeTest(SimplePage.class, "SimplePageExpectedResult.html");
		String document = tester.getLastResponseAsString();

		Label label = (Label)tester.getLastRenderedPage().get("myLabel");
		assertNotNull(label);
		assertTrue(document.contains("<span wicket:id=\"myLabel\">Test Label</span>"));

/ Ze use
	protected <T extends Page> void executeTest(final Class<T> pageClass, final String filename) throws Exception {
		tester.executeTest(getClass(), pageClass, filename);
/s
	public <T extends Page> void executeTest(final Class<?> testClass, final Class<T> pageClass, final String filename) throws Exception {
		startPage(pageClass);
		assertRenderedPage(pageClass);
		assertResultPage(testClass, filename);
	}

/ HIER EN NU

/ Einde WICKET SOURCE AJAX TEST 

/ WICKET AJAX JS

/ zonet	, 
http://localhost:9090/CustomDatepickerAjax/?2
/ nu	, 
http://localhost:9090/wicket-testing/ajaxlinkstudy

/ AJAX ABSTRACT

/ 13	. 

/ Wicket's ajax gives a partial page, in XML. So there is always also JavaScript , to pick up this XML and parses it, and acts acoordingly. This JavaScript is part of Wicket. 
/ Daarom is er altijd JavaScript bij ajax	,

/ preciezer	, 	
Wicket.Ajax.Call.loadedCallback (wicket-ajax-jqu…568000.js:1036)
				var root = envelope.getElementsByTagName("ajax-response")[0];
/ root is een DOM elem	, 
/ JavaScript werkt alleen op DOM elems, niet op XML

/ with ajax, everything is done serverside	, but you do not render the whole page and send it over, 
/ but you send a partial page, and let JavaScript render the page
/ for example below of the swap with an ajax link, still on the server the labels are switched	, and only 


/ 13	. 

public class MiscPage extends WebPage {
		AjaxLink<Void>linkajax=new AjaxLink<Void>("textajax") {
			@Override
			public void onClick(AjaxRequestTarget target) {
				text+=" Again";
				target.add(MiscPage.this.label);

		AjaxLink<Void>swapajax=new AjaxLink<Void>("swapajax") {
			
			@Override
			public void onClick(AjaxRequestTarget target) {
				MarkupContainer page=MiscPage.this;
				if(page.contains(label, true)){
					page.replace(labelalt);
					target.add(MiscPage.this.labelalt);
				}else{
					page.replace(label);
					target.add(MiscPage.this.label);

wicketTester.getLastRenderedPage
wicketTester.getLastResponse
wicketTester.getLastResponseAsString









/ Einde AJAX ABSTRACT


/ 7	. 

/ LOAD PAGE

/ 13	. 

	Wicket.ChannelManager = Wicket.Class.create();
/=
			return function () {
				this.initialize.apply(this, arguments);
			};
/ ctor
/ want later	, 
		channelManager: new Wicket.ChannelManager(),

/ dus ctor  die ChannelManager.prototype.initialize calls	,

/ 13	. 

	Wicket.Ajax = {};
	Wicket.Ajax.Call = Wicket.Class.create();
	Wicket.Ajax.Call.prototype = {
		initialize: jQuery.noop,

/ Dus de ctor Wicket.Ajax.Call doet niets	,

/ 13	. 

	Wicket.Event.add(window, 'focusin', Wicket.Focus.focusin);
/s
					jQuery(el).on(type, selector, data, fn);
el=window
type='focusin'
fn=
	jQuery.extend(true, Wicket, {
		Focus: {
			focusin: function (event) {
				event = Wicket.Event.fix(event);

				var target = event.target;
				if (target) {
					var WF = Wicket.Focus;
					WF.refocusLastFocusedComponentAfterResponse = false;
					var id = target.id;
					WF.lastFocusId = id;
					Wicket.Log.info("focus set on " + id);
				}
			},
/t

	Wicket.Event.add(window, "unload", function() {
		...
/s
                    jQuery(el).on(type, selector, data, fn);
/t
	Wicket.Event.subscribe('/dom/node/removing', function(jqEvent, element) {
/s
					jQuery(document).on(topic, subscriber);
topic: "/dom/node/removing"
/t
	Wicket.Event.subscribe('/dom/node/added', function() {

/c
/ Nu komen we op de pagina	,
Wicket.Event.add(window, "domready", function(event) { 
	Wicket.Ajax.ajax({"u":"./ajaxlinkstudy?0-2.IBehaviorListener.0-ajaxlink","c":"ajaxlink1","e":"click"});;
/s
			add: function (element, type, fn, data, selector) {
				if (type === 'domready') {
					jQuery(fn);
/ TODO

/c
/ stack	,
(anonymous function) (ajaxlinkstudy?0:23)
/=
Wicket.Ajax.ajax({"u":"./ajaxlinkstudy?0-2.IBehaviorListener.0-ajaxlink","c":"ajaxlink1","e":"click"});;
/cb
jQuery.Callbacks.fire (jquery-2.2.0-ve…568000.js:3182)
					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
/cb
jQuery.Callbacks.self.fireWith (jquery-2.2.0-ve…568000.js:3312)
						fire();
/cb
jQuery.extend.ready (jquery-2.2.0-ve…568000.js:3531)
		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
/cb
completed (jquery-2.2.0-ve…568000.js:3547)
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();

/ debug	, 
/s
jQuery.extend.Ajax.ajax (wicket-ajax-jqu…568000.js:1955)

attrs: Object
	c: "ajaxlink1"
	e: Array[1]
		0: "click"
		length: 1
		__proto__: Array[0]
	u: "./ajaxlinkstudy?0-2.IBehaviorListener.0-ajaxlink"
	__proto__: Object

				jQuery.each(attrs.e, function (idx, evt) {
					Wicket.Event.add(attrs.c, evt, function (jqEvent, data) {
						...
/s
jQuery.extend.Event.add (wicket-event-jq…3568000.js:205)
/=
			add: function (element, type, fn, data, selector) {
element="ajaxlink1"
type="click"
fn= ...			/ de callback hier vlakboven	,
data=null
selector=undefined
					jQuery(el).on(type, selector, data, fn);
/t

/ 7	. 

/ CLICK LINK

/ AJAX CALL

/ we komen in de callback	,

/ we gaan straks zien in network	,

<?xml version="1.0" encoding="UTF-8"?>
<ajax-response>
	<component id="texte" ><![CDATA[<span wicket:id="text" id="texte" wicketpath="text">[null]</span>]]></component>
	<component id="counterf" ><![CDATA[<span wicket:id="counter" id="counterf" wicketpath="counter">13</span>]]></component>
</ajax-response>


/s
/ stack	,
(anonymous function) (wicket-ajax-jqu…568000.js:1957)
jQuery.event.dispatch (jquery-2.2.0-ve…568000.js:4732)
jQuery.event.add.elemData.handle (jquery-2.2.0-ve…568000.js:4544)
/ mouse event	, 
/ debug	,
/s
				jQuery.each(attrs.e, function (idx, evt) {
					Wicket.Event.add(attrs.c, evt, function (jqEvent, data) {
->						var call = new Wicket.Ajax.Call();
attrs: Object
c: "ajaxlink1"
e: Array[1]
u: "./ajaxlinkstudy?0-2.IBehaviorListener.0-ajaxlink"

						var call = new Wicket.Ajax.Call();
						var attributes = jQuery.extend({}, attrs);
						attributes.event = Wicket.Event.fix(jqEvent);
						else {
							call.ajax(attributes);
/s
Wicket.Ajax.Call.ajax (wicket-ajax-jqu…3568000.js:560)
			this._initializeDefaults(attrs);
/s
Wicket.Ajax.Call._initializeDefaults (wicket-ajax-jqu…3568000.js:405)

/ defaults	,
			// (ajax channel)
			if (typeof(attrs.ch) !== 'string') {
				attrs.ch = '0|s';
			}
			// (wicketAjaxResponse) be default the Ajax result should be processed for <ajax-response>
			if (typeof(attrs.wr) !== 'boolean') {
				attrs.wr = true;
			}

			// (dataType) by default we expect XML responses from the Ajax behaviors
			if (typeof(attrs.dt) !== 'string') {
				attrs.dt = 'xml';
			}

			if (typeof(attrs.m) !== 'string') {
				attrs.m = 'GET';
			}

			if (attrs.async !== false) {
				attrs.async = true;
			}

			if (!jQuery.isNumeric(attrs.rt)) {
				attrs.rt = 0;
			}

			if (attrs.pd !== true) {
				attrs.pd = false;
			}

			if (!attrs.sp) {
				attrs.sp = "bubble";
			}

			if (!attrs.sr) {
				attrs.sr = false;
			}
/t
Wicket.Ajax.Call.ajax (wicket-ajax-jqu…3568000.js:562)
/=
		ajax: function (attrs) {
			this._initializeDefaults(attrs);
/d
			var res = Wicket.channelManager.schedule(attrs.ch, Wicket.bind(function () {
				this.doAjax(attrs);
/s
Wicket.ChannelManager.schedule (wicket-ajax-jqu…3568000.js:350)
/=
	Wicket.ChannelManager.prototype = {
		// Schedules the callback to channel with given name.
		schedule: function (channel, callback) {
->			var parsed = new Wicket.Channel(channel);
/s
Wicket.Class.create (wicket-ajax-jqu…3568000.js:228)
				this.initialize.apply(this, arguments);
/s
Wicket.Channel.initialize (wicket-ajax-jqu…3568000.js:287)
			var res = name.match(/^([^|]+)\|(d|s|a)$/);
			else {
				this.name = res[1];
"0"
				this.type = res[2];
"s"
			this.callbacks = [];
			this.busy = false;
/t
Wicket.ChannelManager.schedule (wicket-ajax-jqu…3568000.js:350)
			var parsed = new Wicket.Channel(channel);
/d
parsed: Wicket.Class.create
	busy: false
	callbacks: Array[0]
	name: "0"
	type: "s"
	__proto__: Object

			var c = this.channels[parsed.name];
/j
			if (isUndef(c)) {
				c = parsed;
				this.channels[c.name] = c;
			return c.schedule(callback);
callback=
			var res = Wicket.channelManager.schedule(attrs.ch, Wicket.bind(function () {
->				this.doAjax(attrs);
			}, this));
/s
Wicket.Channel.schedule (wicket-ajax-jqu…3568000.js:295)
					return callback();
/s
			var res = Wicket.channelManager.schedule(attrs.ch, Wicket.bind(function () {
->				this.doAjax(attrs);
			}, this));
/s
Wicket.Ajax.Call.doAjax (wicket-ajax-jqu…3568000.js:575)

/ Intermezzo

[eric@localhost wicket]$  find -name "*.java" | xargs grep bh
./wicket-core/src/main/java/org/apache/wicket/ajax/attributes/AjaxAttributeName.java:	 
         * throttling settings (tr)
         * throttling - postpone timer on upate (p)
         * throttling - delay (d)
         * throttling - id (id)
         * datatype (dt)
         * is wicket ajax response (wr)
         * request timeout (rt)
        IS_PREVENT_DEFAULT("pd"),
        EVENT_PROPAGATION("sp"),	/ stop propagation	,
         * channel (ch)
         * event name (e)
         * is async (async)
         * dynamic parameters (dep)
         * extra parameters (ep)
         * precondition (pre)
         * complete handler (coh)
         * failure handler (fh)
         * success handler (sh)
         * after handler (ah)
         * before send handler (bsh)
         * before handler (bh)
         * init handler (ih)
         * done handler (dh)
         * the indicator id, if any found (i)
         * submitting component name (sc)
         * is multipart (mp)
         * form id (f)
         * markup id of behavior attached component (c)
         * http method (m)
        URL("u"),
        CHILD_SELECTOR("sel"),
        SERIALIZE_RECURSIVELY("sr");

attrs: Object
async: true			/ async
c: "ajaxlink1"	 / markup id of behavior attached component (c)
ch: "0|s"		/ channel
dt: "xml"		/ datatype	
e: Array[1]		/ event name
	0: "click"
	length: 1
	__proto__: Array[0]
	event: jQuery.Event
		currentTarget: a#ajaxlink1
		originalEvent: MouseEvent
m: "GET"							/ http method
pd: false	/ prevent default
rt: 0			/ request timeout
sp: "bubble"		/ stop propagation
sr: false			/ serialize recursively
u: "./ajaxlinkstudy?0-2.IBehaviorListener.0-ajaxlink"	/ url
wr: true		/ is wicket ajax response

				// the request (extra) parameters
				data = this._asParamArray(attrs.ep),
[]
				self = this,	 / 'n new Wicket.Ajax.Call	,

/ Intermezzo

/ Vooraan in de callback was gedaan	, 
						var call = new Wicket.Ajax.Call();
						else {
							call.ajax(attributes);

this: Wicket.Class.create
__proto__: Object
_asParamArray: function (parameters) {
_calculateDynamicParameters: function (attrs) {
_executeHandlers: function (handlers) {
_getTarget: function (attrs) {
_initializeDefaults: function (attrs) {
ajax: function (attrs) {
doAjax: function (attrs) {
done: function (attrs) {
failure: function (context, jqXHR, errorMessage, textStatus) {
handleMultipartComplete: function (event) {
initialize: function () {}
loadedCallback: function (envelope, context) {
process: function (data) {
processAjaxResponse: function (data, textStatus, jqXHR, context) {
processComponent: function (context, node) {
processEvaluation: function (context, node) {
processFocusedComponentMark: function (context) {
processFocusedComponentReplaceCheck: function (steps, lastReplaceComponentStep) {
processHeaderContribution: function (context, node) {
processRedirect: function (context, node) {
submitMultipartForm: function (context) {
success: function (context) {
__proto__: Object

/ Einde Intermezzo

				headers = {
					'Wicket-Ajax': 'true',
					'Wicket-Ajax-BaseURL': getAjaxBaseUrl()	/ Wicket.Ajax.baseUrl="ajaxlinkstudy?0"
 
			self._executeHandlers(attrs.bh, attrs);
/ bh=before handler	,
/ zijn er niet	,

			} else if (attrs.c && !jQuery.isWindow(attrs.c)) {
				// serialize just the form component with id == attrs.c
				var el = Wicket.$(attrs.c);
				data = data.concat(Wicket.Form.serializeElement(el, attrs.sr));
/ doet niets	,
[]
			// convert to URL encoded string
			data = jQuery.param(data);
""
			var jqXHR = jQuery.ajax({
				url: attrs.u,			/ "./ajaxlinkstudy?0-2.IBehaviorListener.0-ajaxlink"
				type: attrs.m,			/ "GET"
				context: self,			/ this, = new Wicket.Ajax.Call 
				data: data,
				dataType: attrs.dt,		/ "xml"
				async: attrs.async,		/ true
				timeout: attrs.rt,		/ 0 (timeout)
				cache: false,
				headers: headers,		headers: Object
											Wicket-Ajax: "true"
											Wicket-Ajax-BaseURL: "ajaxlinkstudy?0"

				success: function(data, textStatus, jqXHR) {
				complete: function (jqXHR, textStatus) {
				...
/ Dit zijn alle options	,
/s
jQuery.extend.ajax (jquery-2.2.0-ve…568000.js:8626)
/=
	ajax: function( url, options ) {
			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

				transport.send( requestHeaders, done );
/s
jQuery.ajaxTransport.send (jquery-2.2.0-ve…568000.js:9058)
/=
jQuery.ajaxTransport( function( options ) {
		return {
			send: function( headers, complete ) {
->				var i,

				// Listen to events
				xhr.onload = callback();
					xhr.send( options.hasContent && options.data || null );
/c

/ 7	. 

/ AJAX RECEIVE

/s
jQuery.ajaxTransport.send.callback (jquery-2.2.0-ve…568000.js:9098)
/=
				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,
									( xhr.responseType || "text" ) !== "text"  || typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },	<-
									xhr.getAllResponseHeaders()
								);

/ Intermezzo

<?xml version="1.0" encoding="UTF-8"?>
<ajax-response>
	<component id="text2" >
		<![CDATA[<span wicket:id="text" id="text2" wicketpath="text">[null]</span>]]></component>
	<component id="counter3" >
		<![CDATA[<span wicket:id="counter" id="counter3" wicketpath="counter">13</span>]]></component>
</ajax-response>

/ Einde Intermezzo

/s
done (jquery-2.2.0-ve…568000.js:8669)
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
/s
Wicket.Ajax.Call.doAjax.jQuery.ajax.success (wicket-ajax-jqu…3568000.js:704)
jQuery.Callbacks.fire (jquery-2.2.0-ve…568000.js:3182)
jQuery.Callbacks.self.fireWith (jquery-2.2.0-ve…568000.js:3312)
done (jquery-2.2.0-ve…568000.js:8754)
jQuery.ajaxTransport.send.callback (jquery-2.2.0-ve…568000.js:9120)

/ we komen weer in Wicket code	,

				success: function(data, textStatus, jqXHR) {
					if (attrs.wr) {
/ wr= is wicket response	,
						self.processAjaxResponse(data, textStatus, jqXHR, context);
/s
Wicket.Ajax.Call.processAjaxResponse (wicket-ajax-jqu…3568000.js:766)
					redirectUrl = jqXHR.getResponseHeader('Ajax-Location');
/s
jQuery.extend.ajax.jqXHR.getResponseHeader (jquery-2.2.0-ve…568000.js:8427)

							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
							}
responseHeaders: Object
cache-control: "no-cache, no-store"
content-type: "text/xml;charset=UTF-8"
date: "Sun, 16 Oct 2016 08:25:19 GMT"
expires: "Thu, 01 Jan 1970 00:00:00 GMT"
pragma: "no-cache"
server: "Apache-Coyote/1.1"
transfer-encoding: "chunked"
__proto__: Object
						}
						match = responseHeaders[ key.toLowerCase() ];
key="Ajax-Location"
match=undefined

					return match == null ? null : match;
/j
null
/t
Wicket.Ajax.Call.processAjaxResponse (wicket-ajax-jqu…3568000.js:766)
					redirectUrl = jqXHR.getResponseHeader('Ajax-Location');
null
				else {
					// no redirect, just regular response
					if (Wicket.Log.enabled()) {
						var responseAsText = jqXHR.responseText;
/=
"<?xml version="1.0" encoding="UTF-8"?>
<ajax-response>
	<component id="text2" ><![CDATA[<span wicket:id="text" id="text2" wicketpath="text">[null]</span>]]></component>
	<component id="counter3" ><![CDATA[<span wicket:id="counter" id="counter3" wicketpath="counter">13</span>]]></component>
</ajax-response>"

					// invoke the loaded callback with an xml document
					return this.loadedCallback(data, context);
/s
Wicket.Ajax.Call.loadedCallback (wicket-ajax-jqu…568000.js:1036)
				var root = envelope.getElementsByTagName("ajax-response")[0];
/ DOM elem	,
root: ajax-response
	childNodes: NodeList[2]
		0: component#texte
		1: component#counterf
/ Het zijn de DOM elems	, we zien dat wicket id "text" > id "tesx

				// go through the ajax response and execute all priority-invocations first
/n
				// go through the ajax response and for every action (component, js evaluation, header contribution)
				// ad the proper closure to steps
				var stepIndexOfLastReplacedComponent = -1;
				for (var c = 0; c < root.childNodes.length; ++c) {
					var node = root.childNodes[c];

					if (node.tagName === "component") {
						if (stepIndexOfLastReplacedComponent === -1) {
/ 1 keer	,
							this.processFocusedComponentMark(context);
/s
Wicket.Ajax.Call.processFocusedComponentMark (wicket-ajax-jqu…568000.js:1257)
/=
		// mark the focused component so that we know if it has been replaced by response
		processFocusedComponentMark: function (context) {
			context.steps.push(function (notify) {
				...

/t
Wicket.Ajax.Call.processComponent (wicket-ajax-jqu…568000.js:1137)
							this.processFocusedComponentMark(context);
/d
						}
						stepIndexOfLastReplacedComponent = steps.length;
						this.processComponent(context, node);
/ 2 keer	,
/s
Wicket.Ajax.Call.processComponent (wicket-ajax-jqu…568000.js:1137)
/=
		// Adds a closure that replaces a component
		processComponent: function (context, node) {
			context.steps.push(function (notify) {
				...

context: Object
attrs: Object
steps: Array[3]
0: function (notify) {
1: function (notify) {
2: function (notify) {
length: 3
__proto__: Array[0]
__proto__: Object

				if (stepIndexOfLastReplacedComponent !== -1) {
/j
					this.processFocusedComponentReplaceCheck(steps, stepIndexOfLastReplacedComponent);
/s
Wicket.Ajax.Call.processFocusedComponentReplaceCheck (wicket-ajax-jqu…568000.js:1274)
/=
		// detect if the focused component was replaced
		processFocusedComponentReplaceCheck: function (steps, lastReplaceComponentStep) {
			// add this step imediately after all components have been replaced
			steps.splice(lastReplaceComponentStep + 1, 0, function (notify) {
				...
/t
Wicket.Ajax.Call.loadedCallback (wicket-ajax-jqu…568000.js:1085)
					this.processFocusedComponentReplaceCheck(steps, stepIndexOfLastReplacedComponent);
/d
				// add the last step, which should trigger the success call the done method on request
				this.success(context);
/s
		// Adds a closure to steps that should be invoked after all other steps have been successfully executed
		success: function (context) {
			context.steps.push(jQuery.proxy(function (notify) {
				...

/c
Wicket.Ajax.Call.doAjax.jQuery.ajax.complete (wicket-ajax-jqu…3568000.js:716)
					context.steps.push(jQuery.proxy(function (notify) {
						...
					var executer = new FunctionsExecuter(context.steps);
					executer.start();
/s
FunctionsExecuter.start (wicket-ajax-jqu…3568000.js:182)
			var retValue = FunctionsExecuter.DONE;
			while (retValue === FunctionsExecuter.DONE) {
				retValue = this.processNext();
/s
FunctionsExecuter.processNext (wicket-ajax-jqu…3568000.js:150)
			if (this.current < this.functions.length) {
1<
				f = this.functions[this.current];
				run = function () {
					...
				run = jQuery.proxy(run, this);
				this.current++;
				} else {
					var retValue = run();
/s
FunctionsExecuter.processNext.run (wicket-ajax-jqu…3568000.js:156)
jQuery.extend.proxy.proxy (jquery-2.2.0-ve…3568000.js:492)
...
						var n = jQuery.proxy(this.notify, this);
/todo
						return f(n);
/s
		// mark the focused component so that we know if it has been replaced by response
		processFocusedComponentMark: function (context) {
			context.steps.push(function (notify) {
->				Wicket.Focus.markFocusedComponent();
/ todo
				// continue to next step
				return FunctionsExecuter.DONE;
/t
FunctionsExecuter.start (wicket-ajax-jqu…3568000.js:183)
			while (retValue === FunctionsExecuter.DONE) {
				retValue = this.processNext();
/s
FunctionsExecuter.processNext (wicket-ajax-jqu…3568000.js:172)
			if (this.current < this.functions.length) {
2<
				f = this.functions[this.current];
				run = function () {
					...
				run = jQuery.proxy(run, this);
				this.current++;
				} else {
					var retValue = run();
/s
FunctionsExecuter.processNext.run (wicket-ajax-jqu…3568000.js:156)
jQuery.extend.proxy.proxy (jquery-2.2.0-ve…3568000.js:492)
...
						var n = jQuery.proxy(this.notify, this);
						return f(n);
/s
		// Adds a closure that replaces a component
		processComponent: function (context, node) {
			context.steps.push(function (notify) {
				// get the component id
				var compId = node.getAttribute("id");
"texte"
				// get existing component
				var element = Wicket.$(compId);
element: span#texte
				} else {
					var text = Wicket.DOM.text(node);
/s
jQuery.extend.DOM.text (wicket-ajax-jqu…568000.js:1878)
node: component#texte
	childNodes: NodeList[1]
		0: cdata-section
			childNodes: NodeList[0]
			nodeValue:"<span wicket:id="text" id="texte" wicketpath="text">[null]</span>"

				if (node.childNodes.length > 0) {
					for (var i = 0; i < node.childNodes.length; i++) {
						var thisNode = node.childNodes[i];
						switch (thisNode.nodeType) {
							case 3: // TEXT_NODE
							case 4: // CDATA_SECTION_NODE
								result.push(thisNode.nodeValue);
								break;
				return result.join("");
/t
		// Adds a closure that replaces a component
		processComponent: function (context, node) {
			context.steps.push(function (notify) {
				} else {
					var text = Wicket.DOM.text(node);
"<span wicket:id="text" id="texte" wicketpath="text">[null]</span>"
					// replace the component
					Wicket.DOM.replace(element, text);
/s
jQuery.extend.DOM.replace (wicket-ajax-jqu…568000.js:1757)
				we.publish(topic.DOM_NODE_REMOVING, element);
/ TODO ERICJ
/ jQuery's triggerHandler,

				} else {
					var $newElement = jQuery(cleanedText);
...
/s
jQuery.parseHTML (jquery-2.2.0-ve…568000.js:9392)
jQuery.fn.init (jquery-2.2.0-ve…568000.js:2861)
jQuery (jquery-2.2.0-ve…23568000.js:75)
jQuery.extend.DOM.replace (wicket-ajax-jqu…568000.js:1771)
(anonymous function) (wicket-ajax-jqu…568000.js:1152)
FunctionsExecuter.processNext.run (wicket-ajax-jqu…3568000.js:157)
jQuery.extend.proxy.proxy (jquery-2.2.0-ve…3568000.js:492)
FunctionsExecuter.processNext (wicket-ajax-jqu…3568000.js:172)
FunctionsExecuter.start (wicket-ajax-jqu…3568000.js:184)
Wicket.Ajax.Call.doAjax.jQuery.ajax.complete (wicket-ajax-jqu…3568000.js:729)
jQuery.Callbacks.fire (jquery-2.2.0-ve…568000.js:3182)
jQuery.Callbacks.self.fireWith (jquery-2.2.0-ve…568000.js:3312)
done (jquery-2.2.0-ve…568000.js:8769)
jQuery.ajaxTransport.send.callback (jquery-2.2.0-ve…568000.js:9120)

	parsed = buildFragment( [ data ], context, scripts );
context: document
data: "<span wicket:id="text" id="texte" wicketpath="text">[null]</span>"
scripts: false
/s
buildFragment (jquery-2.2.0-ve…568000.js:4305)
/ TODO
/t
jQuery.extend.DOM.replace (wicket-ajax-jqu…568000.js:1772)
					var $newElement = jQuery(cleanedText);
/d
$newElement: jQuery.fn.init[1]
	0: span#texte
	childNodes: NodeList[1]
		0: text
			nodeValue: "[null]"

/ Dus met dezelfde id	,
					jQuery(element).replaceWith($newElement);
/ OK



 
/ MORGENOCHTEND
wicket-examples, AjaxTest
/ hoe behavior & ajax



/ Einde WICKET AJAX JS

/ WICKETTESTER

/ 7	. 

/ MiscTest extends WicketTestCase	, 
/ Als we WicketTestCase.executeTest dan moeten we NIET de method	, 
@Before
public void _(){
        WebApplication webApplication =new WicketApplication();
      	tester=new WicketTester(webApplication);
/ of	,
        tester=new WicketTester();

/ @Ignore bij @Before doet niets	,

/ Als we tester.executeTest	, dan moeten we @Before	, en extends WicketTestCase maakt niet uit	,


/ eclipse wicket7_3	, project wicket-testing	,

$ vi /home/eric/Devel/Java/Wicket/wicket-testing/src/main/java/my/test/own/MiscPage.java
...
$ vi /home/eric/Devel/Java/Wicket/wicket-testing/src/test/java/my/test/own/MiscTest.java

public class MiscTest extends WicketTestCase{
	private WicketTester tester;
	
	@Before 
	public void setUp(){
		WebApplication webApplication =new WicketApplication();
//		tester=new WicketTester(webApplication);
		tester=new WicketTester();
	}
	@Test
	public void f2c(){
		try {
->			executeTest(MiscPage.class, "MiscPage_expectedresult_mockapplication.html");
		} catch (Exception e) {
			Assert.fail(e.getMessage());
		}
	}
this	MiscTest  (id=172)	
	tester	WicketTester  (id=161)	
	tester	WicketTester  (id=2207)	

/c
/ stack
		BaseWicketTester$LastPageRecordingPageRendererProvider$1.respond(RequestCycle) line: 2761	
		RenderPageRequestHandler.respond(IRequestCycle) line: 175	
		RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
		RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
		RequestCycle.execute(IRequestHandler) line: 265	
		RequestCycle.processRequest() line: 222	
		RequestCycle.processRequestAndDetach() line: 293	
		WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler, boolean) line: 718	
		WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler) line: 657	
		WicketTester(BaseWicketTester).processRequest() line: 629	
		WicketTester(BaseWicketTester).startPage(Class<C>, PageParameters) line: 1262	
		WicketTester(BaseWicketTester).startPage(Class<C>) line: 1235	
		WicketTester.executeTest(Class<?>, Class<T>, String) line: 827	
		MiscTest(WicketTestCase).executeTest(Class<T>, String) line: 99	
		MiscTest.f2c() line: 72	
		NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
		NativeMethodAccessorImpl.invoke(Object, Object[]) line: 57	
		DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
		Method.invoke(Object, Object...) line: 606	
		FrameworkMethod$1.runReflectiveCall() line: 47	
		FrameworkMethod$1(ReflectiveCallable).run() line: 12	
		FrameworkMethod.invokeExplosively(Object, Object...) line: 44	
		InvokeMethod.evaluate() line: 17	
		RunBefores.evaluate() line: 26	
		RunAfters.evaluate() line: 27	
		BlockJUnit4ClassRunner(ParentRunner<T>).runLeaf(Statement, Description, RunNotifier) line: 271	
		BlockJUnit4ClassRunner.runChild(FrameworkMethod, RunNotifier) line: 70	
		BlockJUnit4ClassRunner.runChild(Object, RunNotifier) line: 50	
		ParentRunner$3.run() line: 238	
		ParentRunner$1.schedule(Runnable) line: 63	
		BlockJUnit4ClassRunner(ParentRunner<T>).runChildren(RunNotifier) line: 236	
		ParentRunner<T>.access$000(ParentRunner, RunNotifier) line: 53	
		ParentRunner$2.evaluate() line: 229	
		BlockJUnit4ClassRunner(ParentRunner<T>).run(RunNotifier) line: 309	
		JUnit4TestClassReference(JUnit4TestReference).run(TestExecution) line: 50	
		TestExecution.run(ITestReference[]) line: 38	
		RemoteTestRunner.runTests(String[], String, TestExecution) line: 467	
		RemoteTestRunner.runTests(TestExecution) line: 683	
		RemoteTestRunner.run() line: 390	
		RemoteTestRunner.main(String[]) line: 197	
/ debug	, 
/s
BaseWicketTester$LastPageRecordingPageRendererProvider$1.respond(RequestCycle) line: 2761	
/=
		@Override
		public PageRenderer get(final RenderPageRequestHandler handler)
		{
			return new PageRenderer(handler)
			{
				@Override
				public void respond(RequestCycle requestCycle)
				{
->				 	...
this	BaseWicketTester$LastPageRecordingPageRendererProvider$1  (id=2663)	
	this$1	BaseWicketTester$LastPageRecordingPageRendererProvider  (id=2288)	
		this$0	WicketTester  (id=2207)	
requestCycle	RequestCycle  (id=2236)	
	exceptionMapper	BaseWicketTester$TestExceptionMapper  (id=2264)	
		this$0	WicketTester  (id=161)	
	
						lastRenderedPage = lastPage = renderedPage;
/ in WicketTester (id=2007) zelf created	, 
/ WicketTester (id=161) is uit WicketTestCase	, 

/ TODO (Waarom door elkaar lopen)

/ 7	. 

/ containers	, 

$ vi MiscPage.java

public class MiscPage extends WebPage {
	public MiscPage() {
		WebMarkupContainer container=new WebMarkupContainer("container");
		add(container);
		container.add(new Label("label2", Model.<String>of("foo")));

$ vi MiscPageTest.java
	@Test
	public void test4(){
		tester.startPage(MiscPage.class);
		tester.assertRenderedPage(MiscPage.class);
		tester.assertEnabled("container:label2");
		
	}
/ OK

/ 7	.

/ containers testing	, 

/ de id van een panel in een container gaat met :	, dus cont:panel	,

/ ws wicket7_3	,
/ proj. wicket-testing 

/ Als we een inner panel class maken in de page, moeten we page$panel.html maken, 
/ als de panel in de eigen class file, of naast de page , dan moeten we panel.html maken	, 

/ er zijn 3 panels	, 
MiscPanel.class / outer class, def in own MiscPanel.java file, 
MiscPanel.html
MiscOtherPanel.class / outer class, def in MiscPage.java ,  along MiscPage.class
MiscOtherPanel.html
MiscInnerPanel.class / inner class, def in MiscPage.java ,  
MiscPanel$MiscInnerPanel.html

$ vi MiscPage.html

<div wicket:id="container">
	<span wicket:id="label"></span>
</div>
<div wicket:id="panel"></div>
<div wicket:id="innerpanel"></div>
<div wicket:id="otherpanel"></div>

$ vi MiscPage.java

public class MiscPage extends WebPage {
	private String text="Foo Bar",textalt="Gee Hee";
	private Label label,labelalt;
	public MiscPage() {
		
		WebMarkupContainer container=new WebMarkupContainer("container");
		add(container);
		container.add(new Label("label", Model.<String>of("foo")));
		
		Panel panel=new MiscPanel("panel");
		add(panel);
		
		Panel innerPanel=new MiscInnerPanel("innerpanel");
		add(innerPanel);
		
		Panel otherPanel=new MiscOtherPanel("otherpanel");
		add(otherPanel);
		
	}
	
	public class MiscInnerPanel extends Panel {

		private String text="";
		public MiscInnerPanel(String id) {
			super(id);
			IModel<String>model=new PropertyModel<String>(this, "text");
			add(new Label("label",model));
			Link<Void>link=new Link<Void>("link") {
				@Override
				public void onClick() {
					MiscInnerPanel.this.text+="bar ";
				}
			};
			add(link);
		}
		public String getText() {
			return text;
		}
		public void setText(String text) {
			this.text = text;
		}
	}
}

class MiscOtherPanel extends Panel {

	private String text="";
	public MiscOtherPanel(String id) {
		super(id);
		IModel<String>model=new PropertyModel<String>(this, "text");
		add(new Label("label",model));
		Link<Void>link=new Link<Void>("link") {
			@Override
			public void onClick() {
				MiscOtherPanel.this.text+="baz ";
			}
		};
		add(link);
	}
	public String getText() {
		return text;
	}
	public void setText(String text) {
		this.text = text;
	}
	

}

$ vi MiscPanel.html

<wicket:panel>
	<span wicket:id="label"></span>
	<a wicket:id="link"></a>
</wicket:panel>

$ vi MiscOtherPanel.html

<wicket:panel>
	<span wicket:id="label"></span>
	<a wicket:id="link"></a>
</wicket:panel>

$ vi MiscPage$MiscInnerPanel.html

<wicket:panel>
	<span wicket:id="label"></span>
	<a wicket:id="link"></a>
</wicket:panel>

$ vi MiscPanel.java

public class MiscPanel extends Panel {

	private String text="";
	public MiscPanel(String id) {
		super(id);
		IModel<String>model=new PropertyModel<String>(this, "text");
		add(new Label("label",model));
		Link<Void>link=new Link<Void>("link") {
			@Override
			public void onClick() {
				MiscPanel.this.text+="foo ";
			}
		};
		add(link);
	}
	public String getText() {
		return text;
	}
	public void setText(String text) {
		this.text = text;
	}
}

$ vi MiscPageTest.java

public class MiscPageTest 
{
	private WicketTester tester;
	
	@Before 
	public void setUp(){
		tester=new WicketTester();
	}

	@Test
	public void test4(){
		tester.startPage(MiscPage.class);
		tester.assertRenderedPage(MiscPage.class);
		
		tester.assertEnabled("container");
		tester.assertEnabled("container:label");
		
		tester.assertEnabled("panel");
		tester.assertEnabled("panel:label");
		tester.clickLink("panel:link");
		tester.assertLabel("panel:label", "foo ");
		tester.clickLink("panel:link");
		tester.assertLabel("panel:label", "foo foo ");
		
		tester.assertEnabled("innerpanel");
		tester.assertEnabled("innerpanel:label");
		tester.clickLink("innerpanel:link");
		tester.assertLabel("innerpanel:label", "bar ");
		tester.clickLink("innerpanel:link");
		tester.assertLabel("innerpanel:label", "bar bar ");
		
		tester.assertEnabled("otherpanel");
		tester.assertEnabled("otherpanel:label");
		tester.clickLink("otherpanel:link");
		tester.assertLabel("otherpanel:label", "baz ");
		tester.clickLink("otherpanel:link");
		tester.assertLabel("otherpanel:label", "baz baz ");
		
	}

/ 7	. 

/ hierarchy	testing	,

/ 13	. 

/ de kleinste page die er bestaat	, 

$ vi Misc2BasePage.html

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Misc2BasePage</title>
</head>
<body>
</body>
</html>

$ vi Misc2BasePage.java
public class Misc2BasePage extends WebPage {
}

$ vi Misc2BasePageTest.java
public class Misc2BasePageTest {

	private WicketTester tester;
	
	@Before
	public void init(){
		tester=new WicketTester();
	}
	@Test
	public void test(){
		tester.startPage(new Misc2BasePage());
		tester.assertRenderedPage(Misc2BasePage.class);
	}
}
/ OK

/ 13	. 

/ kleinste wicket extend 

$ vi Misc2Page.java
public class Misc2Page extends Misc2BasePage {
}

$ vi Misc2Page.html
<wicket:extend></wicket:extend>

$ vi Misc2BasePage.html
<body>
	<wicket:child></wicket:child>
</body>

$ vi Misc2BasePageTest.java
public class Misc2BasePageTest {

	private WicketTester tester;
	
	@Before
	public void init(){
		tester=new WicketTester();
	}
	@Test
	public void test(){
		tester.startPage(new Misc2Page());
		tester.assertRenderedPage(Misc2Page.class);
	}
}
/ OK

/ 13	. 

/ in een container kunnen we opnieuw een wicket:id="label" use	,
/ maar bij hierarchy niet	, 

$ vi Misc2BasePage.java
public class Misc2BasePage extends WebPage {
	public Misc2BasePage() {
		add(new Label("baselabel",Model.<String>of("Base")));
	}
}
$ vi Misc2Page.java
public class Misc2Page extends Misc2BasePage {
	public Misc2Page() {
		add(new Label("childlabel",Model.<String>of("Child")));
	}
}

$ vi Misc2BasePage.html
<body>
	<span wicket:id="baselabel"></span>
	<wicket:child></wicket:child>
</body>


$ vi Misc2Page.html
<wicket:extend>
		<span wicket:id="childlabel"></span>
</wicket:extend>

$ vi Misc2BasePageTest.java

public class Misc2BasePageTest {

	private WicketTester tester;
	
	@Before
	public void init(){
		tester=new WicketTester();
	}
	@Test
	public void test(){
		tester.startPage(new Misc2Page());
		tester.assertRenderedPage(Misc2Page.class);
		String s=tester.getLastResponseAsString();
		System.out.println(s);
	}
}

/ OK

/ we zien de html,

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
	<span wicket:id="baselabel">Base</span>
	<wicket:child><wicket:extend>
		<span wicket:id="childlabel">Child</span>
</wicket:extend></wicket:child>
</body>
</html>

		container.add(new Label("label", Model.<String>of("foo")));


/ 7	. 

/ hierarchy testing

/ 13	. 

/ we hebben een list van models van persons. Verschil mocked list iterator  en list iterator zelf	,

		Misc2Person person=new Misc2Person();person.setFirstName("foo");person.setLastName("bar");
		Misc2Person person2=new Misc2Person();person2.setFirstName("foo2");person2.setLastName("bar2");
		IModel<Misc2Person>model,model2;
		model=Model.<Misc2Person>of(person);
		model2=Model.<Misc2Person>of(person2);
/ Dit moet altijd	, 

		Iterator<IModel<Misc2Person>>iterator=Mockito.mock(Iterator.class);
		Mockito.when(iterator.hasNext()).thenReturn(true,true,false);
		Mockito.when(iterator.next()).thenReturn(model,model2);
/ mock	,

		List<IModel<Misc2Person>>models=new ArrayList<IModel<Misc2Person>>();
		models.add(model);
		models.add(model2);
/ real	,

/ 13	. 


$ vi Misc2Page.java

public class Misc2Page extends Misc2BasePage {
	public Misc2Page(final Iterator<IModel<Misc2Person>>iterator) {
		add(new Label("childlabel",Model.<String>of("Child")));
		
		RefreshingView<Misc2Person>view=new RefreshingView<Misc2Person>("view") {
			
			@Override
			protected void populateItem(Item<Misc2Person> item) {
				IModel<String>model=new PropertyModel<String>(item.getDefaultModel(),"firstName");
				Label label=new Label("namelabel",model);
				item.add(label);
				label.setOutputMarkupId(true);
				
			}
			
			@Override
			protected Iterator<IModel<Misc2Person>> getItemModels() {
				return iterator;
			}
		};
		add(view);
	}
}

$ vi Misc2BasePage.java

public class Misc2BasePage extends WebPage {
	
	public Misc2BasePage() {
		add(new Label("baselabel",Model.<String>of("Base")));
	}
}

$ vi Misc2BasePage.java

<body>
	<span wicket:id="baselabel"></span>
	<wicket:child></wicket:child>
</body>


$ vi Misc2Page.html
 
<wicket:extend>
		<span wicket:id="childlabel"></span>
		<ul wicket:id="view">
			<li wicket:id="namelabel"></li>
		</ul>
</wicket:extend>

$ vi Misc2Person.java
public class Misc2Person implements Serializable{
	private String firstName;
	private String lastName;
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
}

/ we moeten  implements Serializable	, anders gaat Model.<Misc2Person>.of niet ok	,


$ vi Misc2BasePageTest.java

public class Misc2BasePageTest {

	private WicketTester tester;
	
	private IModel<Misc2Person>model,model2;
	
	@Before
	public void init(){
		tester=new WicketTester();
		
		Misc2Person person=new Misc2Person();person.setFirstName("foo");person.setLastName("bar");
		Misc2Person person2=new Misc2Person();person2.setFirstName("foo2");person2.setLastName("bar2");
		model=Model.<Misc2Person>of(person);
		model2=Model.<Misc2Person>of(person2);
		

	}
	@Test
	public void test(){
		
		Iterator<IModel<Misc2Person>>iterator=Mockito.mock(Iterator.class);
		Mockito.when(iterator.hasNext()).thenReturn(true,true,false);
		Mockito.when(iterator.next()).thenReturn(model,model2);
		
		tester.startPage(new Misc2Page(iterator));
		tester.assertRenderedPage(Misc2Page.class);
		
		String s=tester.getLastResponseAsString();
		System.out.println(s);
	}
	
}

/ 7	.

/ click link op een panel	,

/ use wicket id "panel:link"	,

/ de link is op de base page	,

$ vi Misc3BasePage.java 

public class Misc3BasePage extends WebPage {
	
	private Misc3Person person;
	
	public Misc3BasePage(final IModel<Misc3Person>model) {
		Panel  panel=new Misc3Panel("panel", model);
		add(panel);
	}
	
	public Misc3Person getPerson() {
		return person;
	}

	public void setPerson(Misc3Person person) {
		this.person = person;
	}

	class Misc3Panel extends Panel{
		public Misc3Panel(String id,final IModel<Misc3Person>model) {
			super(id, model);
			Link<Void>link=new Link<Void>("link") {
				@Override
				public void onClick() {
					setPerson(model.getObject());
					
				}
			};
			add(link);
		}
	}
}

$ vi Misc3Page.java 

public class Misc3Page extends Misc3BasePage {

	public Misc3Page(final IModel<Misc3Person>model) {
		super(model);
	}
	
	
}

/ we kunnen deze ook rm	,
$ vi Misc3Page.html
<wicket:extend>
</wicket:extend>

$ vi Misc3BasePage.html

<body>
	<div wicket:id="panel"></div>
	<wicket:child></wicket:child>
</body>

$ vi Misc3BasePageTest.html

public class Misc3BasePageTest {

	private WicketTester tester;
	
	private IModel<Misc3Person>model;
	
	@Before
	public void init(){
		tester=new WicketTester();
		
		Misc3Person person=new Misc3Person();person.setFirstName("foo");person.setLastName("bar");
		model=Model.<Misc3Person>of(person);
		

	}
	@Test
	public void test(){
		
		
		tester.startPage(new Misc3Page(model));
		tester.assertRenderedPage(Misc3Page.class);
		Link<Void>link=(Link<Void>)tester.getLastRenderedPage().get("panel:link");
		tester.clickLink(link);
		Misc3Person person=((Misc3Page)tester.getLastRenderedPage()).getPerson();
		Assert.assertEquals("foo", person.getFirstName());
		
		String s=tester.getLastResponseAsString();
		System.out.println(s);
	}
	
}

/ 	7	.

/ path, colon separated	,

    <table class="dataview" cellspacing="0" wicket:id="table"><wicket:panel xmlns:wicket="http://wicket.apache.org">
<tbody wicket:id="body">
	<tr wicket:id="rows" class="even">
		<td wicket:id="cells">
			<div wicket:id="cell"><wicket:panel xmlns:wicket="http://wicket.apache.org">
<a href="./page?0-1.ILinkListener-table-body-rows-1-cells-1-cell-select" wicket:id="select">select</a>
</wicket:panel></div>
		</td><td wicket:id="cells" class="numeric">
			<div wicket:id="cell">7</div>

	</tr><tr wicket:id="rows" class="odd">
		<td wicket:id="cells">
			<div wicket:id="cell"><wicket:panel xmlns:wicket="http://wicket.apache.org">
<a href="./page?0-1.ILinkListener-table-body-rows-2-cells-1-cell-select" wicket:id="select">select</a>
</wicket:panel></div>
		</td><td wicket:id="cells" class="numeric">
			<div wicket:id="cell">13</div>


	public DataTable(final String id, final List<? extends IColumn<T, S>> columns,
		final IDataProvider<T> dataProvider, final long rowsPerPage)
	{
		super(id);

		Args.notNull(columns, "columns");

		this.columns = columns;
		this.caption = new Caption("caption", getCaptionModel());
		add(caption);
		this.colGroup = new ColGroup("colGroup");
		add(colGroup);
		body = newBodyContainer("body");
		datagrid = newDataGridView("rows", columns, dataProvider);
		datagrid.setItemsPerPage(rowsPerPage);
		body.add(datagrid);
		add(body);
		topToolbars = new ToolbarsContainer("topToolbars");
		bottomToolbars = new ToolbarsContainer("bottomToolbars");
		add(topToolbars);
		add(bottomToolbars);

$ vi ./wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/repeater/data/table/DataTable.html

<wicket:panel xmlns:wicket="http://wicket.apache.org">
<caption wicket:id="caption"></caption>
<colgroup wicket:id="colGroup"></colgroup>
<thead wicket:id="topToolbars">
        <wicket:container wicket:id="toolbars"></wicket:container>
</thead>
<tfoot wicket:id="bottomToolbars">
        <wicket:container wicket:id="toolbars"></wicket:container>
</tfoot>
<tbody wicket:id="body">			/ WebMarkupContainer	,
        <tr wicket:id="rows">		/ DataTable$DefaultDataGridView	,
                <td wicket:id="cells">	/ RepeatingView
                        <div wicket:id="cell">[cell]</div>
                </td>
        </tr>
</tbody>
</wicket:panel>

$ less DataTable.java

	private class DefaultDataGridView extends DataGridView<T>
	{
		public DefaultDataGridView(String id, List<? extends IColumn<T, S>> columns, IDataProvider<T> dataProvider)
		{
			super(id, columns, dataProvider);
		}

		@SuppressWarnings({ "rawtypes", "unchecked" })
		@Override
		protected Item newCellItem(final String id, final int index, final IModel model)
		{
			Item item = DataTable.this.newCellItem(id, index, model);
			...



/ 7	. 

/ Zo gaat het	, 

		tester.assertEnabled("table");
		tester.assertEnabled("table:body");			/ WebMarkupContainer	, heeft 1 child	, "rows" 
		tester.assertEnabled("table:body:rows");	/ DataTable$DefaultDataGridView	, 'n RefreshingView	, heeft 2 children: 1 en 2	,
		tester.assertEnabled("table:body:rows:1");	/ OddEvenItem	, heeft 1 child	,	
		tester.assertEnabled("table:body:rows:1:cells");	/ RepeatingView, heeft 5 children, 1,2,3,4,5
		tester.assertEnabled("table:body:rows:1:cells:1");/ Item, heeft 1 child, "cell" 
		tester.assertEnabled("table:body:rows:1:cells:1:cell"); / BasePage$ActionPanel, 1 child "select"
		tester.assertEnabled("table:body:rows:1:cells:1:cell:select"); / BasePage$ActionPanel$1
		tester.assertEnabled("table:body:rows:1:cells:2");/ Item, heeft 1 child, "cell" 
		tester.assertEnabled("table:body:rows:1:cells:2:cell"); / Label, 

/ de getalletjes zijn dus items,

/ 13	. 

		columns.add(new PropertyColumn<Contact, String>(new Model<>("First Name"), "firstName", "firstName"));
/ dit model wordt model in de cell item	,



/ 13	. 

/ path	,
/s
	DataTablePage_my(MarkupContainer).get(String) line: 372	
	WicketTester(BaseWicketTester).getComponentFromLastRenderedPage(String, boolean) line: 1580	
	WicketTester(BaseWicketTester).getComponentFromLastRenderedPage(String) line: 1609	
	WicketTester(BaseWicketTester).isEnabled(String) line: 1712	
	WicketTester.assertEnabled(String) line: 727	
	DataTablePage_myTest.test() line: 103	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 57	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 606	
	FrameworkMethod$1.runReflectiveCall() line: 47	
	FrameworkMethod$1(ReflectiveCallable).run() line: 12	
	FrameworkMethod.invokeExplosively(Object, Object...) line: 44	
	InvokeMethod.evaluate() line: 17	
	RunBefores.evaluate() line: 26	
	SilentJUnitRunner$1(ParentRunner<T>).runLeaf(Statement, Description, RunNotifier) line: 271	
	SilentJUnitRunner$1(BlockJUnit4ClassRunner).runChild(FrameworkMethod, RunNotifier) line: 70	
	SilentJUnitRunner$1(BlockJUnit4ClassRunner).runChild(Object, RunNotifier) line: 50	
	ParentRunner$3.run() line: 238	
	ParentRunner$1.schedule(Runnable) line: 63	
	SilentJUnitRunner$1(ParentRunner<T>).runChildren(RunNotifier) line: 236	
	ParentRunner<T>.access$000(ParentRunner, RunNotifier) line: 53	
	ParentRunner$2.evaluate() line: 229	
	SilentJUnitRunner$1(ParentRunner<T>).run(RunNotifier) line: 309	
	SilentJUnitRunner.run(RunNotifier) line: 39	
	StrictRunner.run(RunNotifier) line: 35	
	MockitoJUnitRunner.run(RunNotifier) line: 104	
	JUnit4TestClassReference(JUnit4TestReference).run(TestExecution) line: 50	
	TestExecution.run(ITestReference[]) line: 38	
	RemoteTestRunner.runTests(String[], String, TestExecution) line: 467	
	RemoteTestRunner.runTests(TestExecution) line: 683	
	RemoteTestRunner.run() line: 390	
	RemoteTestRunner.main(String[]) line: 197	
/s

/ 13	. 

/ when test, after click , the rows are removed	,

/s
/ stack	,
	DataTable$DefaultDataGridView(AbstractRepeater).onBeforeRender() line: 124	
		onPopulate();
/cb
	DataTable$DefaultDataGridView(AbstractPageableView<T>).onBeforeRender() line: 115	
	DataTable$DefaultDataGridView(Component).internalBeforeRender() line: 949	
	DataTable$DefaultDataGridView(Component).beforeRender() line: 1017	
	WebMarkupContainer(MarkupContainer).onBeforeRenderChildren() line: 1866	
	WebMarkupContainer(Component).onBeforeRender() line: 3877	
	WebMarkupContainer(Component).internalBeforeRender() line: 949	
	WebMarkupContainer(Component).beforeRender() line: 1017	
	DefaultDataTable<T,S>(MarkupContainer).onBeforeRenderChildren() line: 1866	
	DefaultDataTable<T,S>(Component).onBeforeRender() line: 3877	
	DefaultDataTable<T,S>(Component).internalBeforeRender() line: 949	
	DefaultDataTable<T,S>(Component).beforeRender() line: 1017	
	DataTablePage_my(MarkupContainer).onBeforeRenderChildren() line: 1866	
	DataTablePage_my(Component).onBeforeRender() line: 3877	
	DataTablePage_my(Page).onBeforeRender() line: 801	
	DataTablePage_my(Component).internalBeforeRender() line: 949	
	DataTablePage_my(Component).beforeRender() line: 1017	
	DataTablePage_my(Component).internalPrepareForRender(boolean) line: 2215	
	DataTablePage_my(Page).internalPrepareForRender(boolean) line: 242	
	DataTablePage_my(Component).render() line: 2304	
	DataTablePage_my(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	BaseWicketTester$LastPageRecordingPageRendererProvider$1.respond(RequestCycle) line: 2747	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 97	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler, boolean) line: 718	
	WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler) line: 657	
	WicketTester(BaseWicketTester).executeListener(Component, RequestListenerInterface) line: 1115	
	WicketTester(BaseWicketTester).clickLink(String, boolean) line: 1983	
	WicketTester(BaseWicketTester).clickLink(String) line: 1827	
	WicketTester.clickLink(Component) line: 780	
	DataTablePage_myTest.test() line: 115	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 57	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 606	
	FrameworkMethod$1.runReflectiveCall() line: 47	
	FrameworkMethod$1(ReflectiveCallable).run() line: 12	
	FrameworkMethod.invokeExplosively(Object, Object...) line: 44	
	InvokeMethod.evaluate() line: 17	
	RunBefores.evaluate() line: 26	
	SilentJUnitRunner$1(ParentRunner<T>).runLeaf(Statement, Description, RunNotifier) line: 271	
	SilentJUnitRunner$1(BlockJUnit4ClassRunner).runChild(FrameworkMethod, RunNotifier) line: 70	
	SilentJUnitRunner$1(BlockJUnit4ClassRunner).runChild(Object, RunNotifier) line: 50	
	ParentRunner$3.run() line: 238	
	ParentRunner$1.schedule(Runnable) line: 63	
	SilentJUnitRunner$1(ParentRunner<T>).runChildren(RunNotifier) line: 236	
	ParentRunner<T>.access$000(ParentRunner, RunNotifier) line: 53	
	ParentRunner$2.evaluate() line: 229	
	SilentJUnitRunner$1(ParentRunner<T>).run(RunNotifier) line: 309	
	SilentJUnitRunner.run(RunNotifier) line: 39	
	StrictRunner.run(RunNotifier) line: 35	
	MockitoJUnitRunner.run(RunNotifier) line: 104	
	JUnit4TestClassReference(JUnit4TestReference).run(TestExecution) line: 50	
	TestExecution.run(ITestReference[]) line: 38	
	RemoteTestRunner.runTests(String[], String, TestExecution) line: 467	
	RemoteTestRunner.runTests(TestExecution) line: 683	
	RemoteTestRunner.run() line: 390	
	RemoteTestRunner.main(String[]) line: 197	
/ debug	, 
/s
DataTable$DefaultDataGridView(AbstractRepeater).onBeforeRender() line: 124	
		onPopulate();
/s
DataTable$DefaultDataGridView(RefreshingView<T>).onPopulate() line: 93	
		Iterator<IModel<T>> models = getItemModels();

/ 7	. 

/ WICKETTESTER DATATABLE 

/ ws wicket7_5
/ proj. wicket-examples-step-by-step

/ als we de link click, wordt AbstractRepeater.onBefore op [DefaultDataGridView [Component id = rows]] called 	, which calls RefreshingView.onPopulate on TODO, wich will run over the iterator again	, dus rows were 1,2 but now will be 3,4	,
/ so in the first row , 	,
		tester.assertEnabled("table:body:rows:3:cells:2");
/ the cell numbers are not changed	, 

/ after a click you could maybe make a new iterator	, so probably it is the best to start a new test	,

/ beter is om iterator, provider in @Before te maken, en de 2 contacts in @BeforeClass	,

/ 13	.

/s
DataTable$DefaultDataGridView(AbstractRepeater).onBeforeRender() line: 124	
		onPopulate();
/s
DataTable$DefaultDataGridView(RefreshingView<T>).onPopulate() line: 93	
		Iterator<IModel<T>> models = getItemModels();
		Iterator<Item<T>> items = getItemReuseStrategy().getItems(newItemFactory(), models,
			getItems());
		removeAll();
		addItems(items);
/s
DataTable$DefaultDataGridView(RefreshingView<T>).addItems(Iterator<Item<T>>) line: 186	
		while (items.hasNext())
		{
			Item<T> item = items.next();
			item.setIndex(index);
			add(item);
			++index;





$ less DataTablePage_myTest.java

@RunWith(MockitoJUnitRunner.class)
public class DataTablePage_myTest {
	
	private WicketTester tester;
	
	private Contact contact,contact2;
	private List<IColumn<Contact, String>>columns;
	
	@Before
	public void init(){
		tester=new WicketTester();
		
		contact=new Contact();
		contact.setId(7);contact.setFirstName("Abby");contact.setLastName("Moore");contact.setHomePhone("201-555-6524");contact.setCellPhone("303-555-8015");
		contact2=new Contact();
		contact2.setId(13);contact2.setFirstName("Debra");contact2.setLastName("Clark");contact2.setHomePhone("276-555-4117");contact2.setCellPhone("447-555-6164");

	}
	

	@Test
	public void test(){
		ISortableDataProvider<Contact,String>provider=Mockito.mock(ISortableDataProvider.class);
		Iterator<? extends Contact>iterator=Mockito.mock(Iterator.class);
		DetachableContactModel model=Mockito.mock(DetachableContactModel.class);
		DetachableContactModel model2=Mockito.mock(DetachableContactModel.class);

		
//		Mockito.when(provider.iterator(Mockito.anyLong(), Mockito.anyLong())).thenReturn(iterator);// TODO	
		Mockito.doReturn(iterator).when(provider).iterator(Mockito.anyLong(), Mockito.anyLong());
		Mockito.when(iterator.hasNext()).thenReturn(true);
		
//		Mockito.when(iterator.next()).thenReturn(contact,contact2); // TODO
		Mockito.doReturn(contact,contact2).when(iterator).next();
		Mockito.when(provider.size()).thenReturn(2l);
		
//		Mockito.when(model.hashCode()).thenReturn(Long.valueOf(1l).hashCode());
//		Mockito.when(model.equals(Mockito.any())).thenCallRealMethod();
		Mockito.when(model.load()).thenReturn(contact);

//		Mockito.when(model.hashCode()).thenReturn(Long.valueOf(2l).hashCode());
//		Mockito.when(model.equals(Mockito.any())).thenCallRealMethod();
		Mockito.when(model2.load()).thenReturn(contact2);
			
		Mockito.when(provider.model(contact)).thenReturn(model);
		Mockito.when(provider.model(contact2)).thenReturn(model2);
		Mockito.doNothing().when(provider).detach();
		
		ISortState<String>sortState=new SingleSortState<String>();
		sortState.setPropertySortOrder("firstName",SortOrder.ASCENDING);
		Mockito.when(provider.getSortState()).thenReturn(sortState);

//		tester.startPage(new DataTablePage_my("table", columns, provider));
		tester.startPage(new  DataTablePage_my("table",provider));
		tester.assertRenderedPage(DataTablePage_my.class);
		
		tester.assertEnabled("table");
		tester.assertEnabled("table:body");
		tester.assertEnabled("table:body:rows");
		tester.assertEnabled("table:body:rows:1");			
		tester.assertEnabled("table:body:rows:2");		
		tester.assertEnabled("table:body:rows:1:cells");
		tester.assertEnabled("table:body:rows:1:cells:1");
		tester.assertEnabled("table:body:rows:1:cells:1:cell");
		tester.assertEnabled("table:body:rows:1:cells:1:cell:select");

		tester.clickLink(tester.getComponentFromLastRenderedPage("table:body:rows:1:cells:1:cell:select"));
		String r=((DataTablePage_my)tester.getLastRenderedPage()).getSelectedContactLabel();
		System.out.println(r);
		
		tester.assertEnabled("table:body:rows:3:cells:2");
		Label c2=(Label)tester.getComponentFromLastRenderedPage("table:body:rows:3:cells:2:cell");
		String r2=c2.getDefaultModelObjectAsString();
		System.out.println(r2);
		
		tester.assertEnabled("table:body:rows:3:cells:3");
		Label c3=(Label)tester.getComponentFromLastRenderedPage("table:body:rows:3:cells:3:cell");
		String r3=c3.getDefaultModelObjectAsString();
		System.out.println(r3);

//		String s=tester.getLastResponseAsString();
//		System.out.println(s);
		
	}
	
}

$ vi DataTablePage_my.java

public class DataTablePage_my extends BasePage
	public DataTablePage_my(String id,ISortableDataProvider<Contact,String>provider){
		
		List<IColumn<Contact, String>> columns = new ArrayList<>();

		columns.add(new AbstractColumn<Contact, String>(new Model<>("Actions"))
		{
			@Override
			public void populateItem(Item<ICellPopulator<Contact>> cellItem, String componentId,
				IModel<Contact> model)
			{
				cellItem.add(new ActionPanel(componentId, model));
			}
		});

		columns.add(new PropertyColumn<Contact, String>(new Model<>("ID"), "id")
		{
			@Override
			public String getCssClass()
			{
				return "numeric";
			}
		});

		columns.add(new PropertyColumn<Contact, String>(new Model<>("First Name"), "firstName", "firstName"));

		columns.add(new PropertyColumn<Contact, String>(new Model<>("Last Name"), "lastName", "lastName")
		{
			@Override
			public String getCssClass()
			{
				return "last-name";
			}
		});


		columns.add(new PropertyColumn<Contact, String>(new Model<>("Home Phone"), "homePhone"));
		columns.add(new PropertyColumn<Contact, String>(new Model<>("Cell Phone"), "cellPhone"));
		
		DataTable<Contact, String>dataTable=new DefaultDataTable<Contact, String>(id, columns, provider,8);
		add(dataTable);
	}
}


/ Einde WICKETTESTER DATATABLE 

/ 7	. 

/ WICKETTESTER ACTIONPANEL OUTER CLASS

/ we refactor ActionPanel uit BasePage	, 

/ we maken Action2Panel, Base2Page, en   DataTable2Page_my	, .java/.html	,


/ Zoals het nu is	, 

/ Waar wordt new ActionPanel called	?

/ stack	,
	BasePage$ActionPanel.<init>(String, IModel<Contact>) line: 72	
/=
		public ActionPanel(String id, IModel<Contact> model)
			super(id, model);
/cb
	DataTablePage_my$4.populateItem(Item<ICellPopulator<Contact>>, String, IModel<Contact>) line: 116	
/=
		columns.add(new AbstractColumn<Contact, String>(new Model<>("Actions"))
		{
			@Override
			public void populateItem(Item<ICellPopulator<Contact>> cellItem, String componentId,
				IModel<Contact> model)
			{
->				cellItem.add(new ActionPanel(componentId, model));
/cb
	DataTable$DefaultDataGridView(AbstractDataGridView<T>).populateItem(Item<T>) line: 156	
/=
	@Override
	protected final void populateItem(final Item<T> item)
item is row item	,
	{
		RepeatingView cells = new RepeatingView(CELL_REPEATER_ID);
		item.add(cells);

		int populatorsNumber = populators.size();
		for (int i = 0; i < populatorsNumber; i++)
		{
			ICellPopulator<T> populator = populators.get(i);
			IModel<ICellPopulator<T>> populatorModel = new Model<>(populator);
			Item<ICellPopulator<T>> cellItem = newCellItem(cells.newChildId(), i, populatorModel);
			cells.add(cellItem);

->			populator.populateItem(cellItem, CELL_ITEM_ID, item.getModel());
/cb
	RefreshingView$1.newItem(int, IModel<T>) line: 114	
/=
		return new IItemFactory<T>()
		{
			@Override
			public Item<T> newItem(int index, IModel<T> model)
			{
				String id = RefreshingView.this.newChildId();
				Item<T> item = RefreshingView.this.newItem(id, index, model);
->				RefreshingView.this.populateItem(item);
/cb
	DefaultItemReuseStrategy$1.next() line: 75	
	DefaultItemReuseStrategy$1.next() line: 56	
	DataTable$DefaultDataGridView(RefreshingView<T>).addItems(Iterator<Item<T>>) line: 189	
	DataTable$DefaultDataGridView(RefreshingView<T>).onPopulate() line: 97	
	DataTable$DefaultDataGridView(AbstractRepeater).onBeforeRender() line: 124	
	DataTable$DefaultDataGridView(AbstractPageableView<T>).onBeforeRender() line: 115	
	DataTable$DefaultDataGridView(Component).internalBeforeRender() line: 949	
	DataTable$DefaultDataGridView(Component).beforeRender() line: 1017	
	WebMarkupContainer(MarkupContainer).onBeforeRenderChildren() line: 1866	
	WebMarkupContainer(Component).onBeforeRender() line: 3877	
	WebMarkupContainer(Component).internalBeforeRender() line: 949	
	WebMarkupContainer(Component).beforeRender() line: 1017	
	DefaultDataTable<T,S>(MarkupContainer).onBeforeRenderChildren() line: 1866	
	DefaultDataTable<T,S>(Component).onBeforeRender() line: 3877	
	DefaultDataTable<T,S>(Component).internalBeforeRender() line: 949	
	DefaultDataTable<T,S>(Component).beforeRender() line: 1017	
	DataTablePage_my(MarkupContainer).onBeforeRenderChildren() line: 1866	
	DataTablePage_my(Component).onBeforeRender() line: 3877	
	DataTablePage_my(Page).onBeforeRender() line: 801	
	DataTablePage_my(Component).internalBeforeRender() line: 949	
	DataTablePage_my(Component).beforeRender() line: 1017	
	DataTablePage_my(Component).internalPrepareForRender(boolean) line: 2215	
	DataTablePage_my(Page).internalPrepareForRender(boolean) line: 242	
	DataTablePage_my(Component).render() line: 2304	
	DataTablePage_my(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	BaseWicketTester$LastPageRecordingPageRendererProvider$1.respond(RequestCycle) line: 2747	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler, boolean) line: 718	
	WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler, boolean) line: 781	
	WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler) line: 657	
	WicketTester(BaseWicketTester).startPage(IPageProvider) line: 887	
	WicketTester(BaseWicketTester).startPage(T) line: 904	
	DataTablePage_myTest.test() line: 105	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 57	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 606	
	FrameworkMethod$1.runReflectiveCall() line: 47	
	FrameworkMethod$1(ReflectiveCallable).run() line: 12	
	FrameworkMethod.invokeExplosively(Object, Object...) line: 44	
	InvokeMethod.evaluate() line: 17	
	RunBefores.evaluate() line: 26	
	SilentJUnitRunner$1(ParentRunner<T>).runLeaf(Statement, Description, RunNotifier) line: 271	
	SilentJUnitRunner$1(BlockJUnit4ClassRunner).runChild(FrameworkMethod, RunNotifier) line: 70	
	SilentJUnitRunner$1(BlockJUnit4ClassRunner).runChild(Object, RunNotifier) line: 50	
	ParentRunner$3.run() line: 238	
	ParentRunner$1.schedule(Runnable) line: 63	
	SilentJUnitRunner$1(ParentRunner<T>).runChildren(RunNotifier) line: 236	
	ParentRunner<T>.access$000(ParentRunner, RunNotifier) line: 53	
	ParentRunner$2.evaluate() line: 229	
	SilentJUnitRunner$1(ParentRunner<T>).run(RunNotifier) line: 309	
	SilentJUnitRunner.run(RunNotifier) line: 39	
	StrictRunner.run(RunNotifier) line: 35	
	MockitoJUnitRunner.run(RunNotifier) line: 104	
	JUnit4TestClassReference(JUnit4TestReference).run(TestExecution) line: 50	
	TestExecution.run(ITestReference[]) line: 38	
	RemoteTestRunner.runTests(String[], String, TestExecution) line: 467	
	RemoteTestRunner.runTests(TestExecution) line: 683	
	RemoteTestRunner.run() line: 390	
	RemoteTestRunner.main(String[]) line: 197	

/ 7	.

/ FINAL

/ in Action2Panel : Page page2	, 
/ TODO Component.getPage()

/ in test ,
public Action2Panel(String id, IModel<Contact> model)
/ en set we later de page in dit panel, in de test,
				cellItem.add(new Action2Panel(componentId,model));
/ en,
		((Action2Panel)tester.getComponentFromLastRenderedPage("table:body:rows:1:cells:1:cell")).setPage2(tester.getLastRenderedPage());

/ in page,
	public Action2Panel(String id,final Page page, IModel<Contact> model)
/ nl,
				cellItem.add(new Action2Panel(componentId,getPage(),model));

/ omdat
$ vi Base2Page.java
	public Base2Page()
	{
		add(new Label("selectedLabel", new PropertyModel<>(this, "selectedContactLabel")));
/ moet de property in de page, 
	private Contact selected;
	public String getSelectedContactLabel()
	{
		if (selected == null)
		{
			return "No Contact Selected";
		}
		else
		{
			return selected.getFirstName() + " " + selected.getLastName();
		}

/ kan de property niet in de Action2Panel	?
/ De Action2Panel moet zich register bij de page
/ TODO 

	public Action2Panel(String id, IModel<Contact> model)
	{
		super(id, model);
		add(new Link<Void>("select")
		{
			@Override
			public void onClick()
			{
/ Ga hier op zoek naar de page,	 en register deze panel daar	,
/ TODO
				((Base2Page)page2).setSelected((Contact)getParent().getDefaultModelObject());


$ less DataTable2Page_my.java

	public DataTable2Page_my(String id,ISortableDataProvider<Contact,String>provider){
		
		List<IColumn<Contact, String>> columns = new ArrayList<>();

		columns.add(new AbstractColumn<Contact, String>(new Model<>("Actions"))
		{
			@Override
			public void populateItem(Item<ICellPopulator<Contact>> cellItem, String componentId,
				IModel<Contact> model)
			{
				cellItem.add(new Action2Panel(componentId,getPage(),model));	 <-
			}
		});
...

$ vi Action2Panel.java

	Page page2;

	public void setPage2(Page page) {
		this.page2 = page;
	}
	public Page getPage2() {
		return page2;
	}

/ voor de test	,
	public Action2Panel(String id, IModel<Contact> model)
	{
		super(id, model);
		add(new Link<Void>("select")
		{
			@Override
			public void onClick()
			{
				((Base2Page)page2).setSelected((Contact)getParent().getDefaultModelObject());
			}
		});
	}

/ voor de page	,
	public Action2Panel(String id,final Page page, IModel<Contact> model)
	{
		super(id, model);
		add(new Link<Void>("select")
		{
			@Override
			public void onClick()
			{
				((Base2Page)page).setSelected((Contact)getParent().getDefaultModelObject());
			}
		});
	}

$ less DataTable2Page_myTest.java

@RunWith(MockitoJUnitRunner.class)
public class DataTable2Page_myTest {
	
	private WicketTester tester;
	
//	@Mock
//	private IDataProvider<Contact>provider;
//	
//	@Mock
//	private Iterator<Contact>iterator;
//	
//	@Mock
//	private LoadableDetachableModel<Contact>model;
	
	private Contact contact,contact2;
	private List<IColumn<Contact, String>>columns;
	
	@Before
	public void init(){
//		MockitoAnnotations.initMocks(this);
//		WebApplication application=new RepeaterApplication();
		tester=new WicketTester();
		
		contact=new Contact();
		contact.setId(7);contact.setFirstName("Abby");contact.setLastName("Moore");contact.setHomePhone("201-555-6524");contact.setCellPhone("303-555-8015");
		contact2=new Contact();
		contact2.setId(13);contact2.setFirstName("Debra");contact2.setLastName("Clark");contact2.setHomePhone("276-555-4117");contact2.setCellPhone("447-555-6164");

		columns = new ArrayList<>();

		columns.add(new AbstractColumn<Contact, String>(new Model<>("Actions"))
		{
			@Override
			public void populateItem(Item<ICellPopulator<Contact>> cellItem, String componentId,
				IModel<Contact> model)
			{
				cellItem.add(new Action2Panel(componentId,model));			<-, see (*)
			}
		});

		columns.add(new PropertyColumn<Contact, String>(new Model<>("ID"), "id")
		{
			@Override
			public String getCssClass()
			{
				return "numeric";
			}
		});

		columns.add(new PropertyColumn<Contact, String>(new Model<>("First Name"), "firstName", "firstName"));

		columns.add(new PropertyColumn<Contact, String>(new Model<>("Last Name"), "lastName", "lastName")
		{
			@Override
			public String getCssClass()
			{
				return "last-name";
			}
		});


		columns.add(new PropertyColumn<Contact, String>(new Model<>("Home Phone"), "homePhone"));
		columns.add(new PropertyColumn<Contact, String>(new Model<>("Cell Phone"), "cellPhone"));

	}
	


// test with columns def in the page	,
	@Test
	public void test(){
		ISortableDataProvider<Contact,String>provider=Mockito.mock(ISortableDataProvider.class);
		Iterator<? extends Contact>iterator=Mockito.mock(Iterator.class);
		DetachableContactModel model=Mockito.mock(DetachableContactModel.class);
		DetachableContactModel model2=Mockito.mock(DetachableContactModel.class);

		
//		Mockito.when(provider.iterator(Mockito.anyLong(), Mockito.anyLong())).thenReturn(iterator);// TODO	
		Mockito.doReturn(iterator).when(provider).iterator(Mockito.anyLong(), Mockito.anyLong());
		Mockito.when(iterator.hasNext()).thenReturn(true);
		
//		Mockito.when(iterator.next()).thenReturn(contact,contact2); // TODO
		Mockito.doReturn(contact,contact2).when(iterator).next();
		Mockito.when(provider.size()).thenReturn(2l);
		
//		Mockito.when(model.hashCode()).thenReturn(Long.valueOf(1l).hashCode());
//		Mockito.when(model.equals(Mockito.any())).thenCallRealMethod();
		Mockito.when(model.load()).thenReturn(contact);

//		Mockito.when(model.hashCode()).thenReturn(Long.valueOf(2l).hashCode());
//		Mockito.when(model.equals(Mockito.any())).thenCallRealMethod();
		Mockito.when(model2.load()).thenReturn(contact2);
			
		Mockito.when(provider.model(contact)).thenReturn(model);
		Mockito.when(provider.model(contact2)).thenReturn(model2);
		Mockito.doNothing().when(provider).detach();
		
		ISortState<String>sortState=new SingleSortState<String>();
		sortState.setPropertySortOrder("firstName",SortOrder.ASCENDING);
		Mockito.when(provider.getSortState()).thenReturn(sortState);

//		tester.startPage(new DataTable2Page_my("table", columns, provider));
		tester.startPage(new  DataTable2Page_my("table",provider));
		tester.assertRenderedPage(DataTable2Page_my.class);

		tester.assertEnabled("table");
		tester.assertEnabled("table:body");
		tester.assertEnabled("table:body:rows");
		tester.assertEnabled("table:body:rows:1");			
		tester.assertEnabled("table:body:rows:2");		

		
		tester.assertEnabled("table:body:rows:1:cells");
		tester.assertEnabled("table:body:rows:1:cells:1");
		tester.assertEnabled("table:body:rows:1:cells:1:cell");
		tester.assertEnabled("table:body:rows:1:cells:1:cell:select");

		tester.clickLink(tester.getComponentFromLastRenderedPage("table:body:rows:1:cells:1:cell:select"));
		String r=((DataTable2Page_my)tester.getLastRenderedPage()).getSelectedContactLabel();
		System.out.println(r);
		
		tester.assertEnabled("table:body:rows:3:cells:2");
		Label c2=(Label)tester.getComponentFromLastRenderedPage("table:body:rows:3:cells:2:cell");
		String r2=c2.getDefaultModelObjectAsString();
		System.out.println(r2);
		
		tester.assertEnabled("table:body:rows:3:cells:3");
		Label c3=(Label)tester.getComponentFromLastRenderedPage("table:body:rows:3:cells:3:cell");
		String r3=c3.getDefaultModelObjectAsString();
		System.out.println(r3);

//		String s=tester.getLastResponseAsString();
//		System.out.println(s);


		
	}

// test with columns def here in the test,
	@Test
	public void test2(){
		ISortableDataProvider<Contact,String>provider=Mockito.mock(ISortableDataProvider.class);
		Iterator<? extends Contact>iterator=Mockito.mock(Iterator.class);
		DetachableContactModel model=Mockito.mock(DetachableContactModel.class);
		DetachableContactModel model2=Mockito.mock(DetachableContactModel.class);
		
//		Mockito.when(provider.iterator(Mockito.anyLong(), Mockito.anyLong())).thenReturn(iterator);// TODO	
		Mockito.doReturn(iterator).when(provider).iterator(Mockito.anyLong(), Mockito.anyLong());
		Mockito.when(iterator.hasNext()).thenReturn(true);
		
//		Mockito.when(iterator.next()).thenReturn(contact,contact2); // TODO
		Mockito.doReturn(contact,contact2).when(iterator).next();
		Mockito.when(provider.size()).thenReturn(2l);
		
//		Mockito.when(model.hashCode()).thenReturn(Long.valueOf(1l).hashCode());
//		Mockito.when(model.equals(Mockito.any())).thenCallRealMethod();
		Mockito.when(model.load()).thenReturn(contact);

//		Mockito.when(model.hashCode()).thenReturn(Long.valueOf(2l).hashCode());
//		Mockito.when(model.equals(Mockito.any())).thenCallRealMethod();
		Mockito.when(model2.load()).thenReturn(contact2);
			
		Mockito.when(provider.model(contact)).thenReturn(model);
		Mockito.when(provider.model(contact2)).thenReturn(model2);
		Mockito.doNothing().when(provider).detach();
		
		ISortState<String>sortState=new SingleSortState<String>();
		sortState.setPropertySortOrder("firstName",SortOrder.ASCENDING);
		Mockito.when(provider.getSortState()).thenReturn(sortState);

		tester.startPage(new DataTable2Page_my("table", columns, provider));		<-
//		tester.startPage(new  DataTable2Page_my("table",provider));
		tester.assertRenderedPage(DataTable2Page_my.class);
		((Action2Panel)tester.getComponentFromLastRenderedPage("table:body:rows:1:cells:1:cell")).setPage2(tester.getLastRenderedPage());	/ (*)
		((Action2Panel)tester.getComponentFromLastRenderedPage("table:body:rows:2:cells:1:cell")).setPage2(tester.getLastRenderedPage()); / (*)

		tester.assertEnabled("table");
		tester.assertEnabled("table:body");
		tester.assertEnabled("table:body:rows");
		tester.assertEnabled("table:body:rows:1");			
		tester.assertEnabled("table:body:rows:2");		

		
		tester.assertEnabled("table:body:rows:1:cells");
		tester.assertEnabled("table:body:rows:1:cells:1");
		tester.assertEnabled("table:body:rows:1:cells:1:cell");
		tester.assertEnabled("table:body:rows:1:cells:1:cell:select");

		tester.clickLink(tester.getComponentFromLastRenderedPage("table:body:rows:1:cells:1:cell:select"));
		String r=((DataTable2Page_my)tester.getLastRenderedPage()).getSelectedContactLabel();
		System.out.println(r);
		
		tester.assertEnabled("table:body:rows:3:cells:2");
		Label c2=(Label)tester.getComponentFromLastRenderedPage("table:body:rows:3:cells:2:cell");
		String r2=c2.getDefaultModelObjectAsString();
		System.out.println(r2);
		
		tester.assertEnabled("table:body:rows:3:cells:3");
		Label c3=(Label)tester.getComponentFromLastRenderedPage("table:body:rows:3:cells:3:cell");
		String r3=c3.getDefaultModelObjectAsString();
		System.out.println(r3);

//		String s=tester.getLastResponseAsString();
//		System.out.println(s);


		
	}

	
}

/ WICKETTESTER ACTIONPANEL OUTER CLASS


/ Einde WICKETTESTER

/ WICKET DATATABLE 

DataGridView < AbstractDataGridView < DataViewBase < AbstractPagebleView < RefreshingView < RepeatingView < AbstractRepeater
					|				  |		|			
				populators		      |		provider
									ModelIterator	

/ 13	. 

/ ModelIterator krijgt alles van de provider	,

public abstract class DataViewBase<T> extends AbstractPageableView<T>

	@Override
	protected final Iterator<IModel<T>> getItemModels(long offset, long count)
	{
		return new ModelIterator<T>(internalGetDataProvider(), offset, count);
	}

	private static final class ModelIterator<T> implements Iterator<IModel<T>>
	{
		private final Iterator<? extends T> items;		
		private final IDataProvider<T> dataProvider;

		public ModelIterator(IDataProvider<T> dataProvider, long offset, long count)
		{
			this.dataProvider = dataProvider;
			items = count > 0 ? dataProvider.iterator(offset, count) : null;  / iterator van Contacts

		@Override
		public boolean hasNext()
		{
			return items != null && items.hasNext() && (index < max);
		}

		/**
		 * @see java.util.Iterator#next()
		 */
		@Override
		public IModel<T> next()
		{
			index++;
			return dataProvider.model(items.next());

/ 13	. 

/ het begint met
public abstract class AbstractRepeater extends WebMarkupContainer
	@Override
	protected void onBeforeRender()
	{
		onPopulate();
/s
public abstract class RefreshingView<T> extends RepeatingView
	@Override
	protected final void onPopulate()
	{
		Iterator<IModel<T>> models = getItemModels();	/ = ModelIterator = Iterator van LoadableDetachableModels
		Iterator<Item<T>> items = getItemReuseStrategy().getItems(newItemFactory(), models, / Iterator van Items 
		removeAll();
		addItems(items); / while (items.hasNext()) { Item<T> item = items.next(); 
	}
	protected IItemFactory<T> newItemFactory()
	{
		return new IItemFactory<T>()
		{
			@Override
			public Item<T> newItem(int index, IModel<T> model)	
			{
				String id = RefreshingView.this.newChildId();
				Item<T> item = RefreshingView.this.newItem(id, index, model);
				RefreshingView.this.populateItem(item);
				return item;
			}
		};
	}

public abstract class AbstractDataGridView<T> extends DataViewBase<T>
	@Override
	protected final void populateItem(final Item<T> item)	/ item= row item	,
	{
		RepeatingView cells = new RepeatingView(CELL_REPEATER_ID);
		item.add(cells);

		int populatorsNumber = populators.size();
		for (int i = 0; i < populatorsNumber; i++)
		{
			ICellPopulator<T> populator = populators.get(i);
			IModel<ICellPopulator<T>> populatorModel = new Model<>(populator);	
			Item<ICellPopulator<T>> cellItem = newCellItem(cells.newChildId(), i, populatorModel); / cell item's model=Model met populator er in	,
			cells.add(cellItem);

			populator.populateItem(cellItem, CELL_ITEM_ID, item.getModel());
/s
public class PropertyColumn<T, S> extends AbstractColumn<T, S> implements IExportableColumn<T, S>
		item.add(new Label(componentId, getDataModel(rowModel)));
getDataModel=
propertyModel	PropertyModel<T>  (id=8857)	
	expression	"firstName" (id=8786)	
	target	DetachableContactModel  (id=8789)	


public class DefaultItemReuseStrategy implements IItemReuseStrategy
	public <T> Iterator<Item<T>> getItems(final IItemFactory<T> factory,final Iterator<IModel<T>> newModels)
		return new Iterator<Item<T>>() {
			@Override
			public boolean hasNext()		/ zolang er LoadableDetachableModels zijn, dus zolang er rows zijn	,
			{
				return newModels.hasNext();
			}
			@Override
			public Item<T> next()
			{
				IModel<T> model = newModels.next();			 / LoadableDetachableModel	
				Item<T> item = factory.newItem(index, model); / zolang er een LoadableDetachableModel is, wordt er een Item create	,
				index++;
				return item;
			}

/ Zolang er row(model)s zijn, wordt er steeds  een row item create	, en een repeating view, en zolang er populators zijn worden er cell items create, die een model krijgen, en een label child met de property model, die bestaat uit de property expression uit de populator en de target=row item's model	,  

/ Dus 
model row item=LoadableDetachableModel, met id van Contact,
model cell/column item=Model met populator	
model label= child cell item=property model, die wordt create met row item's model & populator's expression	,


		columns.add(new AbstractColumn<Contact, String>(new Model<>("Actions"))
		{
			@Override
			public void populateItem(Item<ICellPopulator<Contact>> cellItem, String componentId,
				IModel<Contact> model)
			{
				cellItem.add(new ActionPanel(componentId, model)); 
/s
		public ActionPanel(String id, IModel<Contact> model)
		{
			super(id, model);
			add(new Link("select")
			{
				@Override
				public void onClick()
				{
					selected = (Contact)getParent().getDefaultModelObject();
/ de parent van de link is de cell item, en deze heeft als model 


/ 13	. 
/ in 
			populator.populateItem(cellItem, CELL_ITEM_ID, item.getModel()); / item=row item
/ the LoadableDetachableModel in the row item is given, 
/ but it depends on the populator what is done with it,
/ the ActionColumn.populateItem gives the model to the action panel,   
/ the PropertyColumn.populateItem takes the (row)model and mixes it with the property expression to a PropertyModel	, so which has the row model as target and the property expression from the PropertyColumn	,   

/ de action panel 

DataTable$DefaultDataGridView(AbstractDataGridView<T>).populateItem(Item<T>) line: 156	
/ =
	protected final void populateItem(final Item<T> item) 			/ item= row item
		RepeatingView cells = new RepeatingView(CELL_REPEATER_ID);
		item.add(cells);

		int populatorsNumber = populators.size();
		for (int i = 0; i < populatorsNumber; i++)
		{
			ICellPopulator<T> populator = populators.get(i);
			IModel<ICellPopulator<T>> populatorModel = new Model<>(populator);
			Item<ICellPopulator<T>> cellItem = newCellItem(cells.newChildId(), i, populatorModel);
			cells.add(cellItem);

			populator.populateItem(cellItem, CELL_ITEM_ID, item.getModel()); / item=row item
/s
DataTablePage_my$1.populateItem(Item<ICellPopulator<Contact>>, String, IModel<Contact>) line: 63	
/=
		columns.add(new AbstractColumn<Contact, String>(new Model<>("Actions"))
		{
			@Override
			public void populateItem(Item<ICellPopulator<Contact>> cellItem, String componentId,
				IModel<Contact> model)
			{
				cellItem.add(new ActionPanel(componentId, model)); / the panel gets the model of the row item!
/t
/s
/ volgende	,
	@Override
	protected final void populateItem(final Item<T> item)
	{
		RepeatingView cells = new RepeatingView(CELL_REPEATER_ID);
		item.add(cells);

		int populatorsNumber = populators.size();
		for (int i = 0; i < populatorsNumber; i++)
		{
			ICellPopulator<T> populator = populators.get(i);
			IModel<ICellPopulator<T>> populatorModel = new Model<>(populator);
			Item<ICellPopulator<T>> cellItem = newCellItem(cells.newChildId(), i, populatorModel);
			cells.add(cellItem);

			populator.populateItem(cellItem, CELL_ITEM_ID, item.getModel());
/s
DataTablePage_my$2(PropertyColumn<T,S>).populateItem(Item<ICellPopulator<T>>, String, IModel<T>) line: 97	
/=
	@Override
	public void populateItem(final Item<ICellPopulator<T>> item, final String componentId, final IModel<T> rowModel)
	{
		item.add(new Label(componentId, getDataModel(rowModel))); / the label gets a PropertyModel , with target=row model	, and a property expression 

/ 13	. 

/ Again, 

/ kijk in de provider , en je ziet welke methods je moet mock	,


$ less SortableContactDataProvider.java

public class SortableContactDataProvider extends SortableDataProvider<Contact, String> implements IFilterStateLocator<ContactFilter>
	@Override
	public Iterator<Contact> iterator(long first, long count)
	public long size()
	public IModel<Contact> model(Contact object)

/ deze worden used in	,

$ vi DataViewBase.java
public abstract class DataViewBase<T> extends AbstractPageableView<T>

	private static final class ModelIterator<T> implements Iterator<IModel<T>>
	{
		private final Iterator<? extends T> items;
		private final IDataProvider<T> dataProvider;

		public ModelIterator(IDataProvider<T> dataProvider, long offset, long count)
		{
			this.dataProvider = dataProvider;
			max = count;
			items = count > 0 ? dataProvider.iterator(offset, count) : null;
		}
		public boolean hasNext()
		{
			return items != null && items.hasNext() && (index < max);
		}
		@Override
		public IModel<T> next()
		{
			index++;
			return dataProvider.model(items.next());

/ Daarom zien we in de test,	

		Mockito.when(((Iterator<Contact>)provider.iterator(Mockito.anyLong(), Mockito.anyLong()))).thenReturn((Iterator<Contact>)iterator);
		Mockito.when(iterator.hasNext()).thenReturn(true);
		Mockito.when(((Iterator<Contact>)iterator).next()).thenReturn(contact,contact2); 
		Mockito.when(provider.model(contact)).thenReturn(model);






/ Einde WICKET DATATABLE 




/ Einde WICKET SORT

/ WICKET GITHUB

/ Lees	,
https://wicket.apache.org/contribute/
->
https://wicket.apache.org/contribute/#clone

/ we clone eerst wicket in github	, 
[eric@localhost git]$ git clone git@github.com:ericjvandervelden/wicket.git
/ fails
Permission denied (publickey).

/ lees	,
https://help.github.com/articles/error-permission-denied-publickey/

[eric@localhost git]$ ssh -vT git@github.com
Permission denied (publickey).

/ lees	,
https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/
->
https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/

/ TODO ssh-agent

/ Einde WICKET GITHUB

/ WICKET FILTER

/ 7 .

http://www.programcreek.com/java-api-examples/index.php?source_dir=wicket-examples-master/jaulp.wicket.data.provider.examples/src/main/java/de/alpharogroup/wicket/data/provider/examples/datatable/DefaultDataTablePanel.java#

/ in jaulp.wicket.data.provider.examples.datatable  ,
    package de.alpharogroup.wicket.data.provider.examples.datatable;
    public class DefaultDataTablePanel extends Panel

/ in jaulp.wicket.data.provider.examples.data   ,
    package de.alpharogroup.wicket.data.provider.examples.data.provider;
    public class PersonFilter implements Serializable

/ TODO overnemen en run ,

/ lees	,
http://stackoverflow.com/questions/20270330/how-to-create-date-filtered-column-property-in-wicket

/ Einde WICKET FILTER

/ WICKET FILTER

/ 7. 	

public class DataTableFilterToolbarPage extends ExamplePage

		FilterForm<ContactFilter> filterForm = new FilterForm<>("filterForm", dataProvider);	
/s
FilterForm<T>.<init>(String, IFilterStateLocator<T>) line: 64	
		super(id, new FilterStateModel<>(locator));

/ we maken het filter form, het form waar straks ook de table in komt, 
/ TODO wat is het belang hiervan, dat de table in het form zit	, wordt de table data meegestuurd	?

/ de provider heeft ook de filter state	,

/ intermezzo

/ 13	. 

/ een IModel heeft een get/setObject	, 
/ dit model heeft een locator	, di de provider	, want die heeft de filter state	,

class FilterStateModel<T> implements IModel<T>
	@Override
	public T getObject()
	{
		return locator.getFilterState();

/ 13	. 

/ als je in eclipse debugger kijkt zien het het model van de form terug als "data"	,
filterForm	FilterForm<T>  (id=7947)	
	data	FilterStateModel<T>  (id=7952)	
		locator	SortableContactDataProvider  (id=7915)	

/ dat gebeurt in Component	,
	public Component(final String id, final IModel<?> model)
			setModelImpl(wrap(model));
/s
	void setModelImpl(IModel<?> model)
				data_set(0, model);
/s
	final void data_set(int index, Object object)
			data = object;

/ einde intermezzo

locator	SortableContactDataProvider  (id=7915)	
	contactFilter	ContactFilter  (id=7929)	
		dateFrom	null	
		dateTo	null	
	...
/t
DataTableFilterToolbarPage.<init>() line: 83	
		FilterForm<ContactFilter> filterForm = new FilterForm<>("filterForm", dataProvider);	
/d
		filterForm.add(new TextField<>("dateFrom", PropertyModel.of(dataProvider, "filterState.dateFrom")));
/ hier zien we waarom model: de data zelf is er nog niet, alleen de property	, 

		filterForm.add(new TextField<>("dateTo", PropertyModel.of(dataProvider, "filterState.dateTo")));	
		add(filterForm);

		FilterToolbar filterToolbar = new FilterToolbar(tableWithFilterForm, filterForm);
/s
FilterToolbar.<init>(DataTable<T,S>, FilterForm<F>) line: 65	
		super(table);
/s
FilterToolbar(AbstractToolbar).<init>(DataTable<?,?>) line: 58	
		this(null, table);
/s
FilterToolbar(AbstractToolbar).<init>(IModel<?>, DataTable<?,?>) line: 46	
/=
	public AbstractToolbar(final IModel<?> model, final DataTable<?, ?> table)
model	null
		super(table.newToolbarId(), model);
/s
DataTable<T,S>.newToolbarId() line: 439	
		toolbarIdCounter++;
1
		return String.valueOf(toolbarIdCounter).intern();
/t
FilterToolbar(AbstractToolbar).<init>(IModel<?>, DataTable<?,?>) line: 46	
		super(table.newToolbarId(), model);
/pd
model	null
this	FilterToolbar  (id=8035)	
	data	null	
	id	"1" (id=8036)	

		this.table = table;
/t
FilterToolbar.<init>(DataTable<T,S>, FilterForm<F>) line: 69	
		super(table);
/d
		IModel<List<IColumn<T, S>>> model = new AbstractReadOnlyModel<List<IColumn<T,S>>>() {
			@Override
			public List<IColumn<T, S>> getObject() {
				...
		// populate the toolbar with components provided by filtered columns
		ListView<IColumn<T, S>> filters = new ListView<IColumn<T, S>>("filters", model) {
			@Override
			protected void populateItem(ListItem<IColumn<T, S>> item)
				...
		filters.setReuseItems(true);
		add(filters);
/ add to the toolbar	,

/t
DataTableFilterToolbarPage.<init>() line: 88	
		FilterToolbar filterToolbar = new FilterToolbar(tableWithFilterForm, filterForm);
/d
		tableWithFilterForm.addTopToolbar(filterToolbar);
/s
DataTable<T,S>.addTopToolbar(AbstractToolbar) line: 232	
		addToolbar(toolbar, topToolbars);

/ intermezzo

	public DataTable(final String id, final List<? extends IColumn<T, S>> columns,
		topToolbars = new ToolbarsContainer("topToolbars");

	private static class ToolbarsContainer extends WebMarkupContainer
		private ToolbarsContainer(final String id)
		{
			super(id);
			toolbars = new RepeatingView("toolbars");
			add(toolbars);

/ einde intermezzo


/s
DataTable<T,S>.addToolbar(AbstractToolbar, DataTable$ToolbarsContainer) line: 368	

		container.getRepeatingView().add(toolbar);

this	DataTable<T,S>  (id=7916)	
	children	ArrayList<E>  (id=8069)	
		elementData	Object[12]  (id=8078)	
			[0]	DataTable$Caption  (id=7928)	
			[1]	ColGroup  (id=8070)	
			[2]	WebMarkupContainer  (id=7919)	
			[3]	DataTable$ToolbarsContainer  (id=8055)	
				id	"topToolbars" (id=8073)	
				children	RepeatingView  (id=8060)	
					id	"toolbars" (id=8074)	
					children	FilterToolbar  (id=8035)	
						children	FilterToolbar$2  (id=8047)	
						id	"filters" (id=8050)	
				toolbars	RepeatingView  (id=8060)	
	topToolbars	DataTable$ToolbarsContainer  (id=8055)	

/t
DataTableFilterToolbarPage.<init>() line: 90	
		FilterToolbar filterToolbar = new FilterToolbar(tableWithFilterForm, filterForm);
		tableWithFilterForm.addTopToolbar(filterToolbar);
/d
		tableWithFilterForm.addTopToolbar(new NavigationToolbar(tableWithFilterForm));
/s
DataTable<T,S>.addTopToolbar(AbstractToolbar) line: 232	
		addToolbar(toolbar, topToolbars);

toolbar	NavigationToolbar  (id=8190)	
	id	"2" (id=8192)	
	children	WebMarkupContainer  (id=8191)	
		id	"span" (id=8195)	
		children	ArrayList<E>  (id=8193)	
			elementData	Object[12]  (id=8196)	
				[0]	PagingNavigator  (id=8197)	
				[1]	NavigatorLabel  (id=8198)	
/s
DataTable<T,S>.addToolbar(AbstractToolbar, DataTable$ToolbarsContainer) line: 370	
		container.getRepeatingView().add(toolbar);

this	DataTable<T,S>  (id=7916)	
	id	"tableWithFilterForm" (id=8072)	
	topToolbars	DataTable$ToolbarsContainer  (id=8055)	
	body	WebMarkupContainer  (id=7919)	
	datagrid	DataTable$DefaultDataGridView  (id=8071)	
	bottomToolbars	DataTable$ToolbarsContainer  (id=7927)	
	children	ArrayList<E>  (id=8069)	
		elementData	Object[12]  (id=8078)	
			[0]	DataTable$Caption  (id=7928)	
			[1]	ColGroup  (id=8070)	
			[2]	WebMarkupContainer  (id=7919)	
				id	"body" (id=8316)	
				children	DataTable$DefaultDataGridView  (id=8071)	
			[3]	DataTable$ToolbarsContainer  (id=8055)	
				id	"topToolbars" (id=8073)	
				children	RepeatingView  (id=8060)	
					id	"toolbars" (id=8074)	
					children	ArrayList<E>  (id=8266)	
						elementData	Object[12]  (id=8267)	
							[0]	FilterToolbar  (id=8035)	
								id	"1" (id=8036)	
								children	FilterToolbar$2  (id=8047)		/ ListView
									id	"filters" (id=8050)	
									children	null	
									data	FilterToolbar$1  (id=8044)	/ AbstractReadOnlyModel<List<IColumn<T,S>>>	
								data	null	
							[1]	NavigationToolbar  (id=8190)	
								id	"2" (id=8192)	
								children	WebMarkupContainer  (id=8191)	
									id	"span" (id=8195)	
									children	ArrayList<E>  (id=8193)	
										elementData	Object[12]  (id=8196)	
											[0]	PagingNavigator  (id=8197)	
											[1]	NavigatorLabel  (id=8198)	
										modCount	2	
										size	2	
									data	AttributeModifier  (id=8194)	
								data	null	
					data	null	
				data	null	
				toolbars	RepeatingView  (id=8060)	
			[4]	DataTable$ToolbarsContainer  (id=7927)	
				id	"bottomToolbars" (id=8323)	
				children	RepeatingView  (id=8322)	
	columns	ArrayList<E>  (id=7914)	
	data	null	

/t
DataTableFilterToolbarPage.<init>() line: 91	
		tableWithFilterForm.addTopToolbar(new NavigationToolbar(tableWithFilterForm));
/d
		tableWithFilterForm.addTopToolbar(new HeadersToolbar<>(tableWithFilterForm, dataProvider));
/s
HeadersToolbar<S>.<init>(DataTable<T,S>, ISortStateLocator<S>) line: 60	
		super(table);
id	3
		RefreshingView<IColumn<T, S>> headers = new RefreshingView<IColumn<T, S>>("headers")
		{
			@Override
			protected Iterator<IModel<IColumn<T, S>>> getItemModels()
				...
			@Override
			protected void populateItem(Item<IColumn<T, S>> item)
				...
		add(headers);

this	HeadersToolbar<S>  (id=8328)	
	id	"3" (id=8332)	
	children	HeadersToolbar$1  (id=8330) / RefreshingView<IColumn<T, S>>	
		id	"headers" (id=8334)	

/t
/s
DataTable<T,S>.addToolbar(AbstractToolbar, DataTable$ToolbarsContainer) line: 371	
		container.getRepeatingView().add(toolbar);

this	DataTable<T,S>  (id=7916)	
	topToolbars	DataTable$ToolbarsContainer  (id=8055)	
		id	"topToolbars" (id=8073)	
		children	RepeatingView  (id=8060)	
			id	"toolbars" (id=8074)	
			children	ArrayList<E>  (id=8266)	
				elementData	Object[12]  (id=8267)	
					[0]	FilterToolbar  (id=8035)	
					[1]	NavigationToolbar  (id=8190)	
					[2]	HeadersToolbar<S>  (id=8328)	

/ topToolbars heeft maar 1 child, 
/ waarom is topToolbars er	?
/ TODO

/t
DataTableFilterToolbarPage.<init>() line: 93	
		filterForm.add(tableWithFilterForm);
/d

/ intermezzo

$ less DataTableFilterFilterToolbarPage.html

    <form wicket:id="filterForm">
    	<fieldset style="display: inline-block;">
    		<legend>Born date</legend>
	    	<span style="float: right;">from: <input wicket:id="dateFrom"/></span> <br/>
	    	<span style="float: right;">to: <input wicket:id="dateTo"/></span>
    	</fieldset>
    	<table class="dataview" wicket:id="tableWithFilterForm">[table]</table>
    </form>

$ less  DataTable.html

<wicket:panel xmlns:wicket="http://wicket.apache.org">
<caption wicket:id="caption"></caption>
<colgroup wicket:id="colGroup"></colgroup>
<thead wicket:id="topToolbars">
        <wicket:container wicket:id="toolbars"></wicket:container>
</thead>
<tfoot wicket:id="bottomToolbars">
        <wicket:container wicket:id="toolbars"></wicket:container>
</tfoot>
<tbody wicket:id="body">
        <tr wicket:id="rows">
                <td wicket:id="cells">
                        <div wicket:id="cell">[cell]</div>
                </td>
        </tr>
</tbody>
</wicket:panel>

$ less ./wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/repeater/data/table/filter/FilterToolbar.html
<wicket:panel>
        <tr class="filters-tr">
                <wicket:container wicket:id="filters">								/ ListView	,
                        <td wicket:id="filter" class="filter-td">[filter]</td>
                </wicket:container>
        </tr>
</wicket:panel>

$ less ./wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/repeater/data/table/HeadersToolbar.html
<wicket:panel xmlns:wicket="http://wicket.apache.org">
        <tr class="headers">
                <wicket:container wicket:id="headers">
                        <th wicket:id="header"><span wicket:id="label">[header-label]</span></th>
                </wicket:container>
        </tr>
</wicket:panel>

$ less ./wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/repeater/data/table/NavigationToolbar.html
<wicket:panel xmlns:wicket="http://wicket.apache.org">
        <tr class="navigation">
                <td wicket:id="span">
                        <div class="navigatorLabel"><div wicket:id="navigatorLabel">[navigator-label]</div></div>
                        <div class="navigator"><div wicket:id="navigator">[navigator]</div></div>
                </td>
        </tr>
</wicket:panel>


/ Einde intermezzo


/c
	FilterToolbar$1.getObject() line: 74	
	FilterToolbar$1.getObject() line: 69	
	FilterToolbar$2(Component).getDefaultModelObject() line: 1626	
	FilterToolbar$2(ListView<T>).getViewSize() line: 218	
	FilterToolbar$2(ListView<T>).onPopulate() line: 472	
	FilterToolbar$2(AbstractRepeater).onBeforeRender() line: 124	
	FilterToolbar$2(Component).internalBeforeRender() line: 949	
	FilterToolbar$2(Component).beforeRender() line: 1017						/ ListView "filters"
	FilterToolbar(MarkupContainer).onBeforeRenderChildren() line: 1866	
	FilterToolbar(Component).onBeforeRender() line: 3877	
	FilterToolbar.onBeforeRender() line: 158	
	FilterToolbar(Component).internalBeforeRender() line: 949	
	FilterToolbar(Component).beforeRender() line: 1017							/ "1"	
	RepeatingView(MarkupContainer).onBeforeRenderChildren() line: 1866	
	RepeatingView(Component).onBeforeRender() line: 3877	
	RepeatingView(AbstractRepeater).onBeforeRender() line: 143	
	RepeatingView(Component).internalBeforeRender() line: 949	
	RepeatingView(Component).beforeRender() line: 1017									/ "toolbars"
	DataTable$ToolbarsContainer(MarkupContainer).onBeforeRenderChildren() line: 1866	
	DataTable$ToolbarsContainer(Component).onBeforeRender() line: 3877	
	DataTable$ToolbarsContainer(Component).internalBeforeRender() line: 949	
	DataTable$ToolbarsContainer(Component).beforeRender() line: 1017	
	DataTable<T,S>(MarkupContainer).onBeforeRenderChildren() line: 1866		/ "topToolbars"
	DataTable<T,S>(Component).onBeforeRender() line: 3877	
	DataTable<T,S>(Component).internalBeforeRender() line: 949	
	DataTable<T,S>(Component).beforeRender() line: 1017						/ data table is child van de form,	
	FilterForm<T>(MarkupContainer).onBeforeRenderChildren() line: 1866	
	FilterForm<T>(Component).onBeforeRender() line: 3877	
	FilterForm<T>(Form<T>).onBeforeRender() line: 1807	
	FilterForm<T>(Component).internalBeforeRender() line: 949	
	FilterForm<T>(Component).beforeRender() line: 1017						/ filterform is child van de page,	 
	DataTableFilterToolbarPage(MarkupContainer).onBeforeRenderChildren() line: 1866	
	DataTableFilterToolbarPage(Component).onBeforeRender() line: 3877	
	DataTableFilterToolbarPage(Page).onBeforeRender() line: 801	
	DataTableFilterToolbarPage(Component).internalBeforeRender() line: 949	
	DataTableFilterToolbarPage(Component).beforeRender() line: 1017	
	DataTableFilterToolbarPage(Component).internalPrepareForRender(boolean) line: 2215	
	DataTableFilterToolbarPage(Page).internalPrepareForRender(boolean) line: 242	
	DataTableFilterToolbarPage(Component).render() line: 2304	
	DataTableFilterToolbarPage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/ debug
/ s
FilterToolbar$1.getObject() line: 74	
/=
		IModel<List<IColumn<T, S>>> model = new AbstractReadOnlyModel<List<IColumn<T,S>>>() {
			@Override
			public List<IColumn<T, S>> getObject() {
				List<IColumn<T, S>> columnsModels = new LinkedList<>();
				for (IColumn<T, S> column : table.getColumns())				/ PropertyColumn	,
				{
					columnsModels.add(column);
/t
FilterToolbar$2(ListView<T>).getViewSize() line: 219	
		final Object modelObject = getDefaultModelObject();
/d
this	FilterToolbar$2  (id=8047)		/ ListView "filters"
	children	null	
	data	FilterToolbar$1  (id=8044)	/ AbstractReadOnlyModel<List<IColumn<T,S>>>
modelObject = LinkedList van PropertyColumns	,

		// Adjust view size to model object's list size
		final int modelSize = getList().size();
6
			size = modelSize - firstIndex;
6
/t
FilterToolbar$2(ListView<T>).onPopulate() line: 473	
		final int size = getViewSize();
/d
this	[ListView [Component id = filters]]

			for (int i = 0; i < size; i++)
			{
				if (item == null)
				{
					// Create item for index
					item = newItem(index, getListItemModel(getModel(), index));
/s
FilterToolbar$2(ListView<T>).getListItemModel(IModel<List<T>>, int) line: 448	
/=
	protected IModel<T> getListItemModel(final IModel<? extends List<T>> listViewModel, final int index)
listViewModel	FilterToolbar$1  (id=8044)	/ AbstractReadOnlyModel<List<IColumn<T,S>>> met PropertyColumns	,

		return new ListItemModel<>(this, index);
/ doet NIETS met listViewModel	,
/ doet niets met de propery columns	, alleen de index zit er in	,
/ TODO
/t
FilterToolbar$2(ListView<T>).onPopulate() line: 516	
					// Create item for index
					item = newItem(index, getListItemModel(getModel(), index));
/pd
/s
FilterToolbar$2(ListView<T>).newItem(int, IModel<T>) line: 461	
		return new ListItem<>(index, itemModel);
/t
FilterToolbar$2(ListView<T>).onPopulate() line: 519	
					// Create item for index
					item = newItem(index, getListItemModel(getModel(), index));
/d
item	ListItem<T>  (id=8493)	
	data	ListItemModel<T>  (id=8489)	
		index	0	
		listView	FilterToolbar$2  (id=8047)	
	id	"0" (id=8495)	
	index	0	

					// Add list item
					add(item);
/ to ListView	,
					// Populate the list item
					onBeginPopulateItem(item);
/ leeg	,
					populateItem(item);
/s
FilterToolbar$2.populateItem(ListItem<IColumn<T,S>>) line: 94	
/=
	public <T, S, F> FilterToolbar(final DataTable<T, S> table, final FilterForm<F> form)
		// populate the toolbar with components provided by filtered columns
		ListView<IColumn<T, S>> filters = new ListView<IColumn<T, S>>("filters", model)
			@Override
			protected void populateItem(ListItem<IColumn<T, S>> item)
				final IColumn<T, S> col = item.getModelObject();
col	DataTableFilterToolbarPage$1  (id=8441)		/ PropertyColumn	,

	/**
	 * If false the component's tag will be printed as well as its body (which is default). If true
	 * only the body will be printed, but not the component's tag.
	 */
				item.setRenderBodyOnly(true);

				if (col instanceof IFilteredColumn)
/ NEE
				{
					IFilteredColumn<T, S> filteredCol = (IFilteredColumn<T, S>)col;
/ NEE
					filter = filteredCol.getFilter(FILTER_ID, form);
/ NEE
				}
				if (filter == null)
				{
					filter = new NoFilter(FILTER_ID);
/s
public class NoFilter extends Panel {
	public NoFilter(final String id)
	{
		super(id);
/ leeg panel dus	,

				if (col instanceof IStyledColumn)
				{
					filter.add(new Behavior()
						public void onComponentTag(final Component component, final ComponentTag tag)
						{
							String className = ((IStyledColumn<?, S>)col).getCssClass();
							if (!Strings.isEmpty(className))
							{
								tag.append("class", className, " ");
				item.add(filter);

/ klopt	, want 
public class DataTableFilterToolbarPage extends ExamplePage
	public DataTableFilterToolbarPage()
		columns.add(new PropertyColumn<Contact, String>(new Model<>("ID"), "id")
		{
			@Override
			public String getCssClass()
			{
				return "numeric";
			}
		});
/t
FilterToolbar$2(ListView<T>).onPopulate() line: 505	
			for (int i = 0; i < size; i++)
					populateItem(item);
/d
/ volgende
			for (int i = 0; i < size; i++)
			{
				// Get index
				final int index = firstIndex + i;
1
				ListItem<T> item = null;
				if (item == null)
				{
					// Create item for index
					item = newItem(index, getListItemModel(getModel(), index));

					// Add list item
					add(item);

					// Populate the list item
					onBeginPopulateItem(item);
					populateItem(item);

/ etc.
/t
FilterToolbar$2(AbstractRepeater).onBeforeRender() line: 124	
		onPopulate();
/d


/ WICKET FILTERING
/ Hier classes
/ See MAIN WICKET FILTERING

/ 7	. 

/ onze classes

/ ze hebben een aparte date from/to fields gemaakt	, want hoe anders boven column born date ?
/ TODO

public class DataTableFilterToolbarPage_my extends ExamplePage
	public DataTableFilterToolbarPage_my()
		columns.add(new TextFilteredPropertyColumn<Contact, String,String>(new Model<>("First Name"), "firstName", "firstName"));
		SortableContactDataProvider_my dataProvider = new SortableContactDataProvider_my();

public class SortableContactDataProvider_my extends SortableDataProvider<Contact, String> implements IFilterStateLocator<ContactFilter_my>
	private ContactFilter_my contactFilter = new ContactFilter_my();

	@Override
	public ContactFilter_my getFilterState()
	{
	    return contactFilter;
	}

	@Override
	public void setFilterState(ContactFilter_my state)
	{
	    contactFilter  = state;
	}

	private List<Contact> filterContacts(List<Contact> contactsFound)
	{
	    ArrayList<Contact> result = new ArrayList<>();
	    Date dateFrom = contactFilter.getDateFrom();
	    Date dateTo = contactFilter.getDateTo();
	    String firstName=contactFilter.getFirstName();		/ <- waarop je wilt filter, moet erbij	,
	    String lastName=contactFilter.getLastName();		/ <- waarop je wilt filter, moet erbij	,
	    
	    for (Contact contact : contactsFound)
	    {
		Date bornDate = contact.getBornDate();
		
		if(dateFrom != null && bornDate.before(dateFrom))
		{
		    continue;
		}
		
		if(dateTo != null && bornDate.after(dateTo))
		{
		    continue;
		}
		if (firstName!=null && !contact.getFirstName().equals(firstName)){/ <- waarop je wilt filter, moet erbij	,
			continue;
		}
		if(lastName!=null && !contact.getLastName().equals(lastName)){/ <- waarop je wilt filter, moet erbij	,
			continue;
		}
		
		result.add(contact);
	    }
	    
	    return result;
	}

/ Alle textfilteredpropertycolumn's textfields hebben deze als model	,
/ TODO hoe textfields created with these textfilteredpropertycolumns	?
public class ContactFilter_my implements Serializable
{
    private String firstName;/ <- waarop je wilt filter, moet erbij	,
    private String lastName;/ <- waarop je wilt filter, moet erbij	,
	private Date dateFrom;
    private Date dateTo;
    
    public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

/c
/ stack	,
	TextFilteredPropertyColumn<T,F,S>.getFilter(String, FilterForm<?>) line: 70	
		return new TextFilter<>(componentId, getFilterModel(form), form);
/cb
	FilterToolbar$2.populateItem(ListItem<IColumn<T,S>>) line: 102	
				final IColumn<T, S> col = item.getModelObject();
col	TextFilteredPropertyColumn<T,F,S>  (id=13379)	

				item.setRenderBodyOnly(true);
				Component filter = null;
				if (col instanceof IFilteredColumn)
				{
					IFilteredColumn<T, S> filteredCol = (IFilteredColumn<T, S>)col;
					filter = filteredCol.getFilter(FILTER_ID, form);
/cb
	FilterToolbar$2(ListView<T>).onPopulate() line: 523	
			for (int i = 0; i < size; i++)
			{
				// Get index
				final int index = firstIndex + i;

				ListItem<T> item = null;
				if (item == null)
				{
					// Create item for index
					item = newItem(index, getListItemModel(getModel(), index));

					// Add list item
					add(item);

					// Populate the list item
					onBeginPopulateItem(item);
					populateItem(item);
/cb
	FilterToolbar$2(AbstractRepeater).onBeforeRender() line: 124	
	FilterToolbar$2(Component).internalBeforeRender() line: 949	
	FilterToolbar$2(Component).beforeRender() line: 1017	
	FilterToolbar(MarkupContainer).onBeforeRenderChildren() line: 1866	
	FilterToolbar(Component).onBeforeRender() line: 3877	
	FilterToolbar.onBeforeRender() line: 158	
	FilterToolbar(Component).internalBeforeRender() line: 949	
	FilterToolbar(Component).beforeRender() line: 1017	
	RepeatingView(MarkupContainer).onBeforeRenderChildren() line: 1866	
	RepeatingView(Component).onBeforeRender() line: 3877	
	RepeatingView(AbstractRepeater).onBeforeRender() line: 143	
	RepeatingView(Component).internalBeforeRender() line: 949	
	RepeatingView(Component).beforeRender() line: 1017	
	DataTable$ToolbarsContainer(MarkupContainer).onBeforeRenderChildren() line: 1866	
	DataTable$ToolbarsContainer(Component).onBeforeRender() line: 3877	
	DataTable$ToolbarsContainer(Component).internalBeforeRender() line: 949	
	DataTable$ToolbarsContainer(Component).beforeRender() line: 1017	
	DataTable<T,S>(MarkupContainer).onBeforeRenderChildren() line: 1866	
	DataTable<T,S>(Component).onBeforeRender() line: 3877	
	DataTable<T,S>(Component).internalBeforeRender() line: 949	
	DataTable<T,S>(Component).beforeRender() line: 1017	
	FilterForm<T>(MarkupContainer).onBeforeRenderChildren() line: 1866	
	FilterForm<T>(Component).onBeforeRender() line: 3877	
	FilterForm<T>(Form<T>).onBeforeRender() line: 1807	
	FilterForm<T>(Component).internalBeforeRender() line: 949	
	FilterForm<T>(Component).beforeRender() line: 1017	
	DataTableFilterToolbarPage_my(MarkupContainer).onBeforeRenderChildren() line: 1866	
	DataTableFilterToolbarPage_my(Component).onBeforeRender() line: 3877	
	DataTableFilterToolbarPage_my(Page).onBeforeRender() line: 801	
	DataTableFilterToolbarPage_my(Component).internalBeforeRender() line: 949	
	DataTableFilterToolbarPage_my(Component).beforeRender() line: 1017	
	DataTableFilterToolbarPage_my(Component).internalPrepareForRender(boolean) line: 2215	
	DataTableFilterToolbarPage_my(Page).internalPrepareForRender(boolean) line: 242	
	DataTableFilterToolbarPage_my(Component).render() line: 2304	
	DataTableFilterToolbarPage_my(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/ debug	, 
/c
TextFilteredPropertyColumn<T,F,S>.getFilter(String, FilterForm<?>) line: 70	
		return new TextFilter<>(componentId, getFilterModel(form), form);
componentId="filter"
/s
TextFilteredPropertyColumn<T,F,S>.getFilterModel(FilterForm<?>) line: 83	
		return new PropertyModel<>(form.getDefaultModel(), getPropertyExpression());
/s
FilterForm<T>(Component).getDefaultModel() line: 1602	
		IModel<?> model = getModelImpl();

model	FilterStateModel<T>  (id=13392)	
	locator	SortableContactDataProvider_my  (id=13396)	
		contactFilter	ContactFilter_my  (id=13398)	
			dateFrom	null	
			dateTo	null	
			firstName	null	
			lastName	null	
		state	SingleSortState<T>  (id=13399)	
/t
TextFilteredPropertyColumn<T,F,S>.getFilterModel(FilterForm<?>) line: 83	
		return new PropertyModel<>(form.getDefaultModel(), getPropertyExpression());
/pd
/s
TextFilteredPropertyColumn<T,F,S>(PropertyColumn<T,S>).getPropertyExpression() line: 105	
		return propertyExpression;
"firstName"
/ want	,
this	TextFilteredPropertyColumn<T,F,S>  (id=13379)	
	displayModel	Model<T>  (id=13430)	
		object	"First Name" (id=13438)	
	propertyExpression	"firstName" (id=7964)	
	sortProperty	"firstName" (id=7964)	
/t
TextFilteredPropertyColumn<T,F,S>.getFilter(String, FilterForm<?>) line: 70	
		return new TextFilter<>(componentId, getFilterModel(form), form);
/pd
/s
TextFilter<T>.<init>(String, IModel<T>, FilterForm<?>) line: 48	
		super(id, form);
id="filter"
/ panel, en sets this.form=form
		filter = new TextField<>("filter", model);

model	PropertyModel<T>  (id=13447)	
	expression	"firstName" (id=7964)	
	target	FilterStateModel<T>  (id=13392)	
		locator	SortableContactDataProvider_my  (id=13396)	
			contactFilter	ContactFilter_my  (id=13398)	
				dateFrom	null	
				dateTo	null	
				firstName	null	
				lastName	null	
			state	SingleSortState<T>  (id=13399)	

		enableFocusTracking(filter);
/ TODO
		add(filter);
this	TextFilter<T>  (id=13446)	

/t
FilterToolbar$2.populateItem(ListItem<IColumn<T,S>>) line: 143	
					filter = filteredCol.getFilter(FILTER_ID, form);
/d
filter	TextFilter<T>  (id=13446)	
	children	TextField<T>  (id=13488)	
		data	Object[2]  (id=13494)	
			[0]	PropertyModel<T>  (id=13447)	
			[1]	FilterForm$1  (id=13496)	
		id	"filter" (id=8518)	

				item.add(filter);
/ volgende	,
			for (int i = 0; i < size; i++)
			{
				// Get index
				final int index = firstIndex + i;

				ListItem<T> item = null;
				if (item == null)
				{
					// Create item for index
					item = newItem(index, getListItemModel(getModel(), index));

					// Add list item
					add(item);

					// Populate the list item
					onBeginPopulateItem(item);
					populateItem(item);
/ etc	,

/ 13	. 

/ we geven Abby in first name filter field, en geven Enter	,
/ we zien in devtools	,
Request URL:http://localhost:9090/wicket-examples-step-by-step/repeater/filter_my?7-5.IFormSubmitListener-filterForm
filterForm5_hf_0:
dateFrom:
dateTo:
tableWithFilterForm:topToolbars:toolbars:1:filters:1:filter:filter:Abby
tableWithFilterForm:topToolbars:toolbars:1:filters:2:filter:filter:
filterForm5focus:filter7

/s
/ stack	,
	RequestCycle.processRequest() line: 219	
			IRequestHandler handler = resolveRequestHandler();

	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/ debug,
handler	ListenerInterfaceRequestHandler  (id=13810)	
	listenerInterface	RequestListenerInterface  (id=13796)	
name	"IFormSubmitListener" (id=13819)	
method	Method  (id=13818)	
public abstract void org.apache.wicket.markup.html.form.IFormSubmitListener.onFormSubmitted()

/c
/ stack	,
	ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 175		

this	ListenerInterfaceRequestHandler  (id=13810)					/ controller	,
	listenerInterface	RequestListenerInterface  (id=13796)		/ of controller	,	
		name	"IFormSubmitListener" (id=13819)	
		method	Method  (id=13818)	
public abstract void org.apache.wicket.markup.html.form.IFormSubmitListener.onFormSubmitted()

			component = getComponent();
component	FilterForm<T>  (id=13356)	

	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/ debug	, 
		invokeListener();
/s
ListenerInterfaceRequestHandler.invokeListener() line: 239	
			listenerInterface.invoke(getComponent());
/s
RequestListenerInterface.invoke(IRequestableComponent) line: 205	
		internalInvoke(component, component);
/s
RequestListenerInterface.internalInvoke(Component, Object) line: 248	
			method.invoke(target);
target	FilterForm<T>  (id=13356)	
/c
FilterForm<T>(Form<T>).onFormSubmitted() line: 689	
		onFormSubmitted(null);
/s
FilterForm<T>(Form<T>).onFormSubmitted(IFormSubmitter) line: 737	
			inputChanged();
/s
FilterForm<T>(Form<T>).inputChanged() line: 1215	
		visitFormComponentsPostOrder(new IVisitor<FormComponent<?>, Void>()
		{
			@Override
			public void component(final FormComponent<?> formComponent, IVisit<Void> visit)
			{
				formComponent.inputChanged();
achtereenvolgens
formComponent	TextField<T>  (id=13881)	
	data	PropertyModel<T>  (id=13883)	
		expression	"filterState.dateFrom" (id=14460)	
		target	SortableContactDataProvider_my  (id=13396)	
	id	"dateFrom" (id=14458)	
formComponent	TextField<T>  (id=14434)	
	data	PropertyModel<T>  (id=14474)	
		expression	"filterState.dateTo" (id=14476)	
		target	SortableContactDataProvider_my  (id=13396)	
	id	"dateTo" (id=14475)	
formComponent	TextField<T>  (id=13488)	
	data	Object[2]  (id=13494)	
		[0]	PropertyModel<T>  (id=13447)	
			expression	"firstName" (id=7964)	
			target	FilterStateModel<T>  (id=13392)	
	id	"filter" (id=8518)	
/s
TextField<T>(FormComponent<T>).inputChanged() line: 899	

this	TextField<T>  (id=7824)	
	data	Object[2]  (id=7825)	
		[0]	PropertyModel<T>  (id=7831)	
			expression	"firstName" (id=7835)	
			target	FilterStateModel<T>  (id=7803)	
	id	"filter" (id=7826)	
	parent	TextFilter<T>  (id=7827)	


			// Get input as String array
			final String[] input = getInputAsArray();
/s
TextField<T>(FormComponent<T>).getInputAsArray() line: 755	
		List<StringValue> list = getRequest().getRequestParameters().getParameterValues(
			getInputName());
/ antwoord	,
[]				/ bij andere dan firstName	,
[Douglas]		/ bij firstName

"getRequest()"	 (id=7069)	
	filterPrefix	"repeater/" (id=7075)	
	forwardAttributes	null	
	httpServletRequest	RequestFacade  (id=7076)	
		request	Request  (id=7608)	
			asyncContext	null	
			asyncSupported	Boolean  (id=7609)	
			attributes	ConcurrentHashMap<K,V>  (id=7610)	
			authType	null	
			comet	false	
			connector	Connector  (id=7611)	
			cookies	null	
			cookiesConverted	false	
			cookiesParsed	true	
			coyoteRequest	Request  (id=7612)	
			event	null	
			facade	RequestFacade  (id=7076)	
			filterChain	ApplicationFilterChain  (id=7037)	
			formats	SimpleDateFormat[3]  (id=7613)	
			inputBuffer	InputBuffer  (id=7614)	
			inputStream	CoyoteInputStream  (id=7615)	
			internalDispatcherType	DispatcherType  (id=7616)	
			localAddr	null	
			locales	ArrayList<E>  (id=7617)	
			localesParsed	false	
			localName	null	
			localPort	-1	
			mappingData	MappingData  (id=7618)	
			notes	HashMap<K,V>  (id=7619)	
			parameterMap	ParameterMap<K,V>  (id=7620)	
				accessOrder	false	
				entrySet	HashMap$EntrySet  (id=7629)	
				hashSeed	0	
				header	LinkedHashMap$Entry<K,V>  (id=7630)	
				keySet	null	
				loadFactor	0.75	
				locked	true	
				modCount	11	
				size	7	
				table	HashMap$Entry<K,V>[16]  (id=7631)	
					[1]	LinkedHashMap$Entry<K,V>  (id=7632)	
						after	LinkedHashMap$Entry<K,V>  (id=7630)	
						before	LinkedHashMap$Entry<K,V>  (id=7637)	
						hash	-1103325983	
						key	"filterForm9focus" (id=7638)	
						next	null	
						value	String[1]  (id=7639)	
							[0]	"filterb" (id=7640)	
					[2]	LinkedHashMap$Entry<K,V>  (id=7633)	
						after	LinkedHashMap$Entry<K,V>  (id=7636)	
						before	LinkedHashMap$Entry<K,V>  (id=7641)	
						hash	-1175483710	
						key	"filterForm9_hf_0" (id=7642)				/ hidden field	,
						next	LinkedHashMap$Entry<K,V>  (id=7641)	
						value	String[1]  (id=7643)	
							[0]	"" (id=7644)	
					[6]	LinkedHashMap$Entry<K,V>  (id=7634)	
						after	LinkedHashMap$Entry<K,V>  (id=7635)	
						before	LinkedHashMap$Entry<K,V>  (id=7636)	
						hash	-1168566362	
						key	"dateTo" (id=7645)	
						next	null	
						value	String[1]  (id=7646)	
							[0]	"" (id=7644)	
					[8]	LinkedHashMap$Entry<K,V>  (id=7635)	
						after	LinkedHashMap$Entry<K,V>  (id=7637)	
						before	LinkedHashMap$Entry<K,V>  (id=7634)	
						hash	1341775496	
						key	"tableWithFilterForm:topToolbars:toolbars:1:filters:1:filter:filter" (id=7647)	
						next	null	
						value	String[1]  (id=7648)	
							[0]	"Douglas" (id=7649)	
					[12]	LinkedHashMap$Entry<K,V>  (id=7636)	
						after	LinkedHashMap$Entry<K,V>  (id=7634)	
						before	LinkedHashMap$Entry<K,V>  (id=7633)	
						hash	1823137500	
						key	"dateFrom" (id=7650)	
						next	null	
						value	String[1]  (id=7651)	
							[0]	"" (id=7644)	
					[14]	LinkedHashMap$Entry<K,V>  (id=7637)	
						after	LinkedHashMap$Entry<K,V>  (id=7632)	
						before	LinkedHashMap$Entry<K,V>  (id=7635)	
						hash	-1364595506	
						key	"tableWithFilterForm:topToolbars:toolbars:1:filters:2:filter:filter" (id=7652)	
						next	null	
						value	String[1]  (id=7653)	
							[0]	"" (id=7644)	
				threshold	12	
				values	null	
			parametersParsed	true	
			parts	null	
			partsParseException	null	
			pathParameters	HashMap<K,V>  (id=7621)	
			postData	(id=7622)	
			reader	CoyoteReader  (id=7623)	
			remoteAddr	null	
			remoteHost	null	
			remotePort	-1	
			requestDispatcherPath	MessageBytes  (id=7624)	
			requestedSessionCookie	true	
			requestedSessionId	"899D36C8866C924277922BF824A5F33C" (id=7625)	
			requestedSessionSSL	false	
			requestedSessionURL	false	
			response	Response  (id=7626)	
			secure	false	
			session	StandardSession  (id=7777)	
			sslAttributesParsed	false	
			subject	null	
			URIConverter	B2CConverter  (id=7778)	
			userPrincipal	null	
			usingInputStream	false	
			usingReader	false	
	postParameters	HashMap<K,V>  (id=7078)	
	postRequestParameters	ServletWebRequest$1  (id=7074)	
	url	Url  (id=7591)	
filter_my?8-1.IFormSubmitListener-filterForm
		_charset	UTF_8  (id=7596)	
		charsetName	"UTF-8" (id=7597)	
		fragment	null	
		host	"localhost" (id=7598)	
		parameters	ArrayList<E>  (id=7599)	
[8-1.IFormSubmitListener-filterForm]
		port	Integer  (id=7600)	
		protocol	"http" (id=7601)	
		segments	ArrayList<E>  (id=7602)	
[filter_my]

/s
TextField<T>(FormComponent<T>).getInputName() line: 793	

this	TextField<T>  (id=7876)	
	data	Object[2]  (id=7877)	
		[0]	PropertyModel<T>  (id=7879)	
			expression	"lastName" (id=7881)	
			target	FilterStateModel<T>  (id=7803)	
	id	"filter" (id=7826)	
	parent	TextFilter<T>  (id=7878)	

		String inputName = Form.getRootFormRelativeId(this);
/s
Form<T>.getRootFormRelativeId(Component) line: 2142	
		String id = component.getId();
filter
		while (true)
		{
			inputName.prepend(id);
filter
filter:filter
2:filter:filter
filters:2:filter:filter
1:filters:2:filter:filter
topToolbars:toolbars:1:filters:2:filter:filter
tableWithFilterForm:topToolbars:toolbars:1:filters:2:filter:filter
			c = c.getParent();			/ bij dateFrom is c=FilterForm meteen	, dus stopt deze while loop al 
														
[TextFilter [Component id = filter]]
[ListItem [Component id = 2]]
[ListView [Component id = filters]]		/ FilterToolbar$2
[FilterToolbar [Component id = 1]]
[RepeatingView [Component id = toolbars]]
[ToolbarsContainer [Component id = topToolbars]]
[DataTable [Component id = tableWithFilterForm]]
[FilterForm [Component id = filterForm]]
			if (c == null || (c instanceof Form<?> && ((Form<?>)c).isRootForm()) ||
				c instanceof Page)
			{
				break;
			}
			inputName.prepend(Component.PATH_SEPARATOR);
:filter
:filter:filter
:2:filter:filter
:filters:2:filter:filter
:1:filters:2:filter:filter
:toolbars:1:filters:2:filter:filter
:topToolbars:toolbars:1:filters:2:filter:filter
			id = c.getId();
filter
2
filters
1
toolbars
topToolbars
tableWithFilterForm
		}

		return inputName.toString();
/t
TextField<T>(FormComponent<T>).getInputName() line: 794	
		String inputName = Form.getRootFormRelativeId(this);
/d
tableWithFilterForm:topToolbars:toolbars:1:filters:2:filter:filter

		Form<?> form = findParent(Form.class);
[FilterForm [Component id = filterForm]]
		if (form != null)
		{
			return form.getInputNamePrefix() + inputName;
"tableWithFilterForm:topToolbars:toolbars:1:filters:2:filter:filter"
form.getInputNamePrefix()==""

/t
TextField<T>(FormComponent<T>).getInputAsArray() line: 755	
		List<StringValue> list = getRequest().getRequestParameters().getParameterValues(
			getInputName());
[Douglas]
[]
/ klopt	, de 2 textfields hebben id dateFrom en dateTo, en dat is ook hun id in het form	,  want ze zijn direct add aan het form	,
/ de 2 textfilterpropertycolumn's textfields hebben id filter, maar hun hierarchy-id in het form is bijv "tableWithFilterForm:topToolbars:toolbars:1:filters:2:filter:filter", want ze zijn niet direct add aan het form, maar hebben veel parents totaan het form	, 

			values = new String[list.size()];
			for (int i = 0; i < list.size(); ++i)
			{
				values[i] = list.get(i).toString();


		return values;
[Douglas]
[]

/t
TextField<T>(FormComponent<T>).inputChanged() line: 902	
			// Get input as String array
			final String[] input = getInputAsArray();
/d
[Douglas]
[]j

			// If there is any input
			if (input != null && input.length > 0 && input[0] != null)
/j
			{
				// join the values together with ";", for example, "id1;id2;id3"
				rawInput = StringList.valueOf(input).join(VALUE_SEPARATOR);
this	TextField<T>  (id=13488)	
	rawInput	"" (id=14519)	
	rawInput	"Douglas" (id=14519)	

/ Dus elk input in het form krijgt een rawInput, dat is "" of "Douglas" bijv	,

/t
Form$9.component(FormComponent<?>, IVisit<Void>) line: 1220	
		visitFormComponentsPostOrder(new IVisitor<FormComponent<?>, Void>()
		{
			@Override
			public void component(final FormComponent<?> formComponent, IVisit<Void> visit)
			{
				formComponent.inputChanged();
/ achtereenvolgens	,
formComponent	TextField<T>  (id=14438)	
	data	Object[2]  (id=14442)	
		[0]	PropertyModel<T>  (id=14446)	
			expression	"lastName" (id=8476)	
			target	FilterStateModel<T>  (id=13392)	
	id	"filter" (id=8518)	
/c
/t
FilterForm<T>(Form<T>).onFormSubmitted(IFormSubmitter) line: 744	
			// Tells FormComponents that a new user input has come
			inputChanged();
/ 1 text field heeft rawInput "Douglas", de rest ""


/ we zijn in 	,
	FilterForm<T>(Form<T>).process(IFormSubmitter) line: 933	
	FilterForm<T>(Form<T>).onFormSubmitted(IFormSubmitter) line: 795	
	FilterForm<T>(Form<T>).onFormSubmitted() line: 708	
	RequestListenerInterface.internalInvoke(Component, Object) line: 258		 / controller	?
	RequestListenerInterface.invoke(IRequestableComponent) line: 216	
	ListenerInterfaceRequestHandler.invokeListener() line: 241					/ controller	?
	ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 234	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
			IRequestHandler handler = resolveRequestHandler(); / in spring mvc handler mapping:url ->controller
				execute(handler);

	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

			String url = getRequest().getRequestParameters()
				.getParameterValue(getHiddenFieldId())
				.toString();
""
getHiddenFieldId()="filterForm9_hf_0"

			if (!Strings.isEmpty(url))
/n
			else
				// First, see if the processing was triggered by a Wicket IFormSubmittingComponent
				if (submitter == null)
				{
					submitter = findSubmittingButton();
/n
/ we gaven Enter in text field	,
				// When processing was triggered by a Wicket IFormSubmittingComponent and that
				// component indicates it wants to be called immediately
				// (without processing), call the IFormSubmittingComponent.onSubmit* methods right
				// away.
				if (submitter != null && !submitter.getDefaultFormProcessing())
/n
				else
					// the submit request might be for one of the nested forms, so let's
					// find the right one:
					final Form<?> formToProcess = findFormToProcess(submitter);
submitter==null
/s
FilterForm<T>(Form<T>).findFormToProcess(IFormSubmitter) line: 853	
		if (submitter == null)
		{
			// no submitting component => default form submit => so *this* is the
			// form to process
			return this;
/t
FilterForm<T>(Form<T>).onFormSubmitted(IFormSubmitter) line: 795	
					final Form<?> formToProcess = findFormToProcess(submitter);
/d

					// process the form for this request
					formToProcess.process(submitter);
/s
FilterForm<T>(Form<T>).process(IFormSubmitter) line: 933	

/ 13	. 

/ MAIN WICKET FILTERING

/ ABSTRACT

/ 1313	.

/ main method

/s
FilterForm<T>(Form<T>).onFormSubmitted(IFormSubmitter) line: 795	
					// process the form for this request
					formToProcess.process(submitter);
/s
FilterForm<T>(Form<T>).process(IFormSubmitter) line: 943	
		// run validation
		validate();			/ sets convertedInput	, I.

		// Update model using form data
		updateFormComponentModels(); / sets de strings die we in de UI in de textfields hebben gegeven , en die dus in het request zitten, in de textfields' models	, II.

			// Form has no error
			delegateSubmit(submittingComponent);	/ III. daadwerkelijk submit	,

/ 1313	.

public class DataTableFilterToolbarPage_my extends ExamplePage
	public DataTableFilterToolbarPage_my()
		DataTable<Contact, String> tableWithFilterForm = new DataTable<>("tableWithFilterForm", columns,dataProvider, 8);
		FilterForm<ContactFilter_my> filterForm = new FilterForm<>("filterForm", dataProvider);	
		add(filterForm);
		filterForm.add(new TextField<>("dateFrom", PropertyModel.of(dataProvider, "filterState.dateFrom")));
		filterForm.add(new TextField<>("dateTo", PropertyModel.of(dataProvider, "filterState.dateTo")));	
		filterForm.add(tableWithFilterForm);
		
		FilterToolbar filterToolbar = new FilterToolbar(tableWithFilterForm, filterForm);
		tableWithFilterForm.addTopToolbar(filterToolbar);
		tableWithFilterForm.addTopToolbar(new NavigationToolbar(tableWithFilterForm));
		tableWithFilterForm.addTopToolbar(new HeadersToolbar<>(tableWithFilterForm, dataProvider));

/ de filterform heeft 3 directe kinderen: 2 textfields en 1 table. Maar de table heeft de filter textfields als kinderen, indirect	, 
/ het filterform heeft als model een FilterStateModel, en deze heeft als obj de data provider's filter state, de ContactFilter_my	; een filter textfield heeft een property model, met target=FilterStateModel, expression= die van de filter  
/ als je het form submit	, door Enter te geven bijv in 1 van de filter textfields, dan 

public class FilterToolbar extends AbstractToolbar
component	FilterForm<T>  (id=7039)	
	data	FilterStateModel<T>  (id=7067)	
	id	"filterForm" (id=7068)	
	children	ArrayList<E>  (id=7066)	
		elementData	Object[10]  (id=7071)	
			[0]	TextField<T>  (id=7055)	
			[1]	TextField<T>  (id=7072)	
			[2]	DataTable<T,S>  (id=7073)	
				body	WebMarkupContainer  (id=7074)	
				colGroup	ColGroup  (id=7078)	
				columns	ArrayList<E>  (id=7079)	
				data	null	
				datagrid	DataTable$DefaultDataGridView  (id=7080)	
				id	"tableWithFilterForm" (id=7081)	
				children	ArrayList<E>  (id=7077)	
					elementData	Object[10]  (id=7090)	
						[0]	DataTable$Caption  (id=7076)	
						[1]	ColGroup  (id=7078)	
						[2]	WebMarkupContainer  (id=7074)	
						[3]	DataTable$ToolbarsContainer  (id=7091)	
							data	null	
							id	"topToolbars" (id=7093)	
							children	RepeatingView  (id=7092)	
								data	null	
								id	"toolbars" (id=7095)	
								children	ArrayList<E>  (id=7094)	
									elementData	Object[10]  (id=7096)	
										[0]	FilterToolbar  (id=7097)	
											data	null	
											id	"1" (id=7101)	
											children	FilterToolbar$2  (id=7100)	 / ListView	,
												data	FilterToolbar$1  (id=7104)	
												id	"filters" (id=7105)	
												children	ArrayList<E>  (id=7103)	
													elementData	Object[10]  (id=7106)	
														[0]	ListItem<T>  (id=7107)	
														[1]	ListItem<T>  (id=7108)	
															id	"1" (id=7101)	
															data	ListItemModel<T>  (id=7114)	
															children	TextFilter<T>  (id=7113)	
																id	"filter" (id=7117)	
																data	FilterToolbar$2$1  (id=7116)	
																children	TextField<T>  (id=7115)	
																	id	"filter" (id=7117)	
																	children	null	
																	convertedInput	null	
																	data	Object[2]  (id=7119)	
																		[0]	PropertyModel<T>  (id=7120)	
																			expression	"firstName" (id=7122)	
																			target	FilterStateModel<T>  (id=7067)	
																				locator	SortableContactDataProvider_my  (id=7062)	
																					contactFilter	ContactFilter_my  (id=7123)	
																						dateFrom	null	
																						dateTo	null	
																						firstName	"Abby" (id=7125)	
																						lastName	null	
																					state	SingleSortState<T>  (id=7124)	
																		[1]	FilterForm$1  (id=7121)	
																filter	TextField<T>  (id=7115)	
														[2]	ListItem<T>  (id=7109)	
														[3]	ListItem<T>  (id=7110)	
														[4]	ListItem<T>  (id=7111)	
														[5]	ListItem<T>  (id=7112)	
													size	6	
										[1]	NavigationToolbar  (id=7098)	
										[2]	HeadersToolbar<S>  (id=7099)	
									size	3	
					size	5	
		size	3	

/ 1313	.

		
public class TextFilteredPropertyColumn<T, F, S> extends FilteredPropertyColumn<T, S>
	public Component getFilter(final String componentId, final FilterForm<?> form) {
		return new TextFilter<>(componentId, getFilterModel(form), form);
	protected IModel<F> getFilterModel(final FilterForm<?> form) {
		return new PropertyModel<>(form.getDefaultModel(), getPropertyExpression());
////////
/ textfilter is een panel, met een textfield er op, deze heeft als model die van de textfilter	, dat staat ook bij de 1313 hierboven, en hier vlakboven zien dat dat dat inderdaad zo is,	 
/ als we het form submit, wordt in Form.process, updateFormComponentModels called, die van ieder filter textfield zijn model updates, dus de property in ContactFilter_my, dus de totale filter wordt update met alle data die in de fields staat	; 

public class FilterToolbar extends AbstractToolbar
		IModel<List<IColumn<T, S>>> model = new AbstractReadOnlyModel<List<IColumn<T,S>>>() {
			public List<IColumn<T, S>> getObject() {
				for (IColumn<T, S> column : table.getColumns()) {
					columnsModels.add(column);
//////////
/ Dit zijn die TextFilteredPropertyColumns	,

		ListView<IColumn<T, S>> filters = new ListView<IColumn<T, S>>("filters", model) {
			protected void populateItem(ListItem<IColumn<T, S>> item) {
				final IColumn<T, S> col = item.getModelObject();
				item.setRenderBodyOnly(true);
				Component filter = null;
				if (col instanceof IFilteredColumn) {
					IFilteredColumn<T, S> filteredCol = (IFilteredColumn<T, S>)col;
					filter = filteredCol.getFilter(FILTER_ID, form);
				item.add(filter);
		add(filters);
//////////
/ hier worden de filter textfields create 

/ en filterform submit -> update ContactFilter_my,
	public void process(IFormSubmitter submittingComponent)
			updateFormComponentModels();
	protected final void updateFormComponentModels() {
		internalUpdateFormComponentModels();
	private void internalUpdateFormComponentModels() {
		FormComponent.visitComponentsPostOrder(this, new FormModelUpdateVisitor(this));
	private static class FormModelUpdateVisitor implements IVisitor<Component, Void> {
		public void component(final Component component, final IVisit<Void> visit) {
								((IFormModelUpdateListener)component).updateModel();

public abstract class FormComponent<T> extends LabeledWebMarkupContainer implements
	public void updateModel() {
		setModelObject(getConvertedInput());
	public final void setModelObject(T object) {
		setDefaultModelObject(object);
	public final Component setDefaultModelObject(final Object object)
		if (!getModelComparator().compare(this, object)) {
			modelChanging();
			model.setObject(object);
			modelChanged();

public abstract class AbstractPropertyModel<T> extends ChainingModel<T>
	public void setObject(T object)
			PropertyResolver.setValue(expression, getInnermostModelOrObject(), object, prc);
getInnermostModelOrObject()=ContactFilter_my
expression="firstName" bijv	,
/ hij writes firstName in ContactFilter_my, object="Abby" bijv	, 






/ Einde ABSTRACT

/ I	.

/ validate
/ set TextField.convertedInput	,

		// run validation
		validate();

/ we komen in 	,
/ stack	,
/s
	TextField<T>(FormComponent<T>).convertInput() line: 1183	
	TextField<T>(AbstractTextComponent<T>).convertInput() line: 129	
		String[] value = getInputAsArray();
[eric]
			super.convertInput();

/cb
	TextField<T>(FormComponent<T>).validate() line: 1130	
			convertInput();
/cb
	Form$18.validate(FormComponent<?>) line: 1948	
/=
		visitFormComponentsPostOrder(new ValidationVisitor()
		{
			@Override
			public void validate(final FormComponent<?> formComponent)
			{
				final Form<?> form = formComponent.getForm();
				if (form == Form.this && form.isEnabledInHierarchy() && form.isVisibleInHierarchy())
				{
					formComponent.validate();		/ formComponent=[TextField [Component id = name]]
/cb
	Form$18(Form$ValidationVisitor).component(FormComponent<?>, IVisit<Void>) line: 177	
				validate(formComponent);
/cb
	Form$18(Form$ValidationVisitor).component(Object, IVisit) line: 161	
	Visits.visitPostOrderHelper(Object, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 274	
/ recursive call	,
		if (component instanceof Iterable<?>)	/ component=[TextField [Component id = name]]
/n
		if (filter.visitObject(component))
		{
			visitor.component((S)component, visit);
/cb
	Visits.visitPostOrderHelper(Object, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 262	
		if (component instanceof Iterable<?>)			/ component=Form
		{
			final Iterable<?> container = (Iterable<?>)component;
			if (filter.visitChildren(container))
			{
				Visit<R> childTraversal = new Visit<>();
				for (final Object child : ((Iterable<?>)component)) / child=[TextField [Component id = name]]
				{
					visitPostOrderHelper(child, visitor, filter, childTraversal);
/cb
	Visits.visitPostOrder(Object, IVisitor<S,R>, IVisitFilter) line: 245	
		visitPostOrderHelper(root, visitor, filter, visit);
root	Form<T>  (id=15161)	
/cb
	FormComponent<T>.visitFormComponentsPostOrder(Component, IVisitor<FormComponent<?>,R>) line: 382	
		return Visits.visitPostOrder(component, visitor, new IVisitFilter()		<- 	/ we blijven hier	, 
		{
			@Override
			public boolean visitChildren(Object object)
				...
			@Override
			public boolean visitObject(Object object)
				...
/cb
	Form<T>.visitFormComponentsPostOrder(IVisitor<FormComponent<?>,R>) line: 1153	
		return FormComponent.visitFormComponentsPostOrder(this, visitor);		/ this=Form	,
/cb
	Form<T>.validateComponents() line: 1940	
->		visitFormComponentsPostOrder(new ValidationVisitor()		/ we blijven nu in deze call hierboven	,
		{
			@Override
			public void validate(final FormComponent<?> formComponent)
			{
				final Form<?> form = formComponent.getForm();
				if (form == Form.this && form.isEnabledInHierarchy() && form.isVisibleInHierarchy())
				{
					formComponent.validate();
				}
/cb
	Form<T>.validate() line: 1882	
			validateComponents();
/cb
	Form<T>.process(IFormSubmitter) line: 943	
->		validate();
			updateFormComponentModels();
/cb
	Form<T>.onFormSubmitted(IFormSubmitter) line: 795	
	Form<T>.onFormSubmitted() line: 708	
	RequestListenerInterface.internalInvoke(Component, Object) line: 258	
	RequestListenerInterface.invoke(IRequestableComponent) line: 216	
	ListenerInterfaceRequestHandler.invokeListener() line: 241	
	ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 234	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ debug	, 
/s
TextField<T>(AbstractTextComponent<T>).convertInput() line: 121	
		String[] value = getInputAsArray();				/ deze haalt hij uit het request	,
/s
TextField<T>(FormComponent<T>).getInputAsArray() line: 755	

		List<StringValue> list = getRequest().getRequestParameters().getParameterValues(
			getInputName());
getInputName()="dateFrom"
[]
		return values;
[]
/t
TextField<T>(AbstractTextComponent<T>).convertInput() line: 122	
		String[] value = getInputAsArray();
[""]
		String tmp = value != null && value.length > 0 ? value[0] : null;
""
		if (getConvertEmptyInputStringToNull() && Strings.isEmpty(tmp))
/j
			setConvertedInput(null);
/s
TextField<T>(FormComponent<T>).setConvertedInput(T) line: 713	
		this.convertedInput = convertedInput;
this	TextField<T>  (id=7081)	
convertedInput	null	

/t
TextField<T>(AbstractTextComponent<T>).convertInput() line: 129	
this	TextField<T>  (id=7088)	
	id	"filter" (id=7091)	
	data	Object[2]  (id=7090)	
		[0]	PropertyModel<T>  (id=7096)	
			expression	"firstName" (id=7098)	
			target	FilterStateModel<T>  (id=7099)	

		String[] value = getInputAsArray();
["Douglas"]
		if (getConvertEmptyInputStringToNull() && Strings.isEmpty(tmp))
/n
			super.convertInput();
/s
TextField<T>(FormComponent<T>).convertInput() line: 1166	
		if (typeName == null)
/n
"java.lang.String"
		else
		{
			final IConverter<T> converter = getConverter(getType());
/s
TextField<T>(Component).getConverter(Class<C>) line: 1373	
		return getApplication().getConverterLocator().getConverter(type);
/s
ConverterLocator.getConverter(Class<C>) line: 216	
		final IConverter<C> converter = get(type);
/s
ConverterLocator.get(Class<C>) line: 199	
		return  (IConverter<C>) classToConverter.get(c.getName());
/t
/s
ConverterLocator.getConverter(Class<C>) line: 216	
		final IConverter<C> converter = get(type);
/d
null
		if (converter == null)
		{
			return new DefaultConverter<C>(type);
/t
TextField<T>(FormComponent<T>).convertInput() line: 1183	
			final IConverter<T> converter = getConverter(getType());
/d
converter	ConverterLocator$DefaultConverter<C>  (id=7473)	

				convertedInput = converter.convertToObject(getInput(), getLocale());

/ FORMCOMPONENT KNOWS INPUT GIVEN BY USER	,
/ Dus FormComponent.convertedInput is set	, dus de FormComponent kent de input die is gegeven door de user	,
/ dit wordt later used in Form.updateFormComponentModels	,

/s
ConverterLocator$DefaultConverter<C>.convertToObject(String, Locale) line: 89	
/=
		public C convertToObject(String value, Locale locale)
value	"Douglas" (id=7406)	
locale	Locale  (id=7480)	 en_US

				C converted = Objects.convertValue(value, theType);
converted	"Douglas" (id=7406)	
	return converted;
/t
TextField<T>(FormComponent<T>).validate() line: 1131	

this	TextField<T>  (id=7088)	
	convertedInput	"Douglas" (id=7406)	

			if (isValid())
			{
				if (isRequired() && getConvertedInput() == null && isInputNullable())
/n
				else
				{
					validateValidators();
/s
TextField<T>(FormComponent<T>).validateValidators() line: 1497	
/ TODO


/ II	. 

/c
			// Update model using form data
			updateFormComponentModels();
/s
FilterForm<T>(Form<T>).updateFormComponentModels() line: 1829	
		internalUpdateFormComponentModels();
/s
FilterForm<T>(Form<T>).internalUpdateFormComponentModels() line: 1864	
		FormComponent.visitComponentsPostOrder(this, new FormModelUpdateVisitor(this));
/ Eerst de children, dan zichzelf	,

/ Intermezzo

public class Form<T> extends WebMarkupContainer
	private static class FormModelUpdateVisitor implements IVisitor<Component, Void>
		public void component(final Component component, final IVisit<Void> visit)
								((IFormModelUpdateListener)component).updateModel();

/ Einde Intermezzo

/ we komen in 	,
/ stack
/s
	Form$FormModelUpdateVisitor.component(Component, IVisit<Void>) line: 229	
/=
		public void component(final Component component, final IVisit<Void> visit) / component=[TextField [Component id = name]]
		{
			if (component instanceof IFormModelUpdateListener)
			{
				final Form<?> form = Form.findForm(component);
				if (form != null)
				{
					if (this.formFilter == null || this.formFilter == form)
					{
						if (form.isEnabledInHierarchy())
						{
							if (component.isVisibleInHierarchy() &&
								component.isEnabledInHierarchy())
							{
								((IFormModelUpdateListener)component).updateModel();
							}
/cb
	Form$FormModelUpdateVisitor.component(Object, IVisit) line: 199	
	Visits.visitPostOrderHelper(Object, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 274	
/ recursive call	,
		if (component instanceof Iterable<?>) / component=[TextField [Component id = name]]
/n
		if (filter.visitObject(component))
		{
			visitor.component((S)component, visit);
/cb
	Visits.visitPostOrderHelper(Object, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 262	
		if (component instanceof Iterable<?>)
		{
			final Iterable<?> container = (Iterable<?>)component;	 / Form
			if (filter.visitChildren(container))
			{
				Visit<R> childTraversal = new Visit<>();
				for (final Object child : ((Iterable<?>)component)) / [TextField [Component id = name]]
				{
					visitPostOrderHelper(child, visitor, filter, childTraversal);
/cb
	Visits.visitPostOrder(Object, IVisitor<S,R>, IVisitFilter) line: 245	
		visitPostOrderHelper(root, visitor, filter, visit);
/cb
	FormComponent<T>.visitComponentsPostOrder(Component, IVisitor<Component,R>) line: 423	
->		return Visits.visitPostOrder(component, visitor, new IVisitFilter()	/ we gaan niet de filter fcts in	, 
		{
			@Override
			public boolean visitObject(Object object)
				...
			@Override
			public boolean visitChildren(Object object)
/cb
	Form<T>.internalUpdateFormComponentModels() line: 1864	
		FormComponent.visitComponentsPostOrder(this, new FormModelUpdateVisitor(this));
/cb
	Form<T>.updateFormComponentModels() line: 1829	
		internalUpdateFormComponentModels();
/cb
	Form<T>.process(IFormSubmitter) line: 963	
	Form<T>.onFormSubmitted(IFormSubmitter) line: 795	
	Form<T>.onFormSubmitted() line: 708	
	RequestListenerInterface.internalInvoke(Component, Object) line: 258	
	RequestListenerInterface.invoke(IRequestableComponent) line: 216	
	ListenerInterfaceRequestHandler.invokeListener() line: 241	
	ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 234	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	


/ Einde intermezzo

/ debug	,
/s
Form$FormModelUpdateVisitor.component(Component, IVisit<Void>) line: 229	
			if (component instanceof IFormModelUpdateListener)
			{
				final Form<?> form = Form.findForm(component);
				if (form != null)
				{
					if (this.formFilter == null || this.formFilter == form)
					{
						if (form.isEnabledInHierarchy())
						{
							if (component.isVisibleInHierarchy() &&
								component.isEnabledInHierarchy())
							{
								((IFormModelUpdateListener)component).updateModel();
/s
TextField<T>(FormComponent<T>).updateModel() line: 1097	
	/**
	 * Updates this components model from the request, 
	 */
		setModelObject(getConvertedInput());
/s
getConvertedInput()=="eric"	/ Dat vulde ik in in 1ste text field	,

/ intermezzo

/ een hele rij recursive calls	, net zo lang totdat een component geen children meer heeft	, 

/stack
	Form$FormModelUpdateVisitor.component(Component, IVisit<Void>) line: 229	
	Form$FormModelUpdateVisitor.component(Object, IVisit) line: 199	
	Visits.visitPostOrderHelper(Object, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 274	
		if (component instanceof Iterable<?>)
/j
			final Iterable<?> container = (Iterable<?>)component;
			if (filter.visitChildren(container))
/n
		if (filter.visitObject(component))
		{
			visitor.component((S)component, visit);
component=[TextField [Component id = filter]]
/cb
	Visits.visitPostOrderHelper(Object, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 262	
		if (component instanceof Iterable<?>)
		{
			final Iterable<?> container = (Iterable<?>)component;
			if (filter.visitChildren(container))
			{
				Visit<R> childTraversal = new Visit<>();
				for (final Object child : ((Iterable<?>)component))
				{
					visitPostOrderHelper(child, visitor, filter, childTraversal);
component=[TextFilter [Component id = filter]]
child=[TextField [Component id = filter]]
/cb
	Visits.visitPostOrderHelper(Object, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 262	
		if (component instanceof Iterable<?>)
		{
			final Iterable<?> container = (Iterable<?>)component;
			if (filter.visitChildren(container))
			{
				Visit<R> childTraversal = new Visit<>();
				for (final Object child : ((Iterable<?>)component))
				{
					visitPostOrderHelper(child, visitor, filter, childTraversal);
component=[ListItem [Component id = 1]]
child=[TextFilter [Component id = filter]]
/cb
	Visits.visitPostOrderHelper(Object, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 262	
		if (component instanceof Iterable<?>)
		{
			final Iterable<?> container = (Iterable<?>)component;
			if (filter.visitChildren(container))
			{
				Visit<R> childTraversal = new Visit<>();
				for (final Object child : ((Iterable<?>)component))
				{
					visitPostOrderHelper(child, visitor, filter, childTraversal);
component=[ListView [Component id = filters]]
child=[ListItem [Component id = 1]]
/cb
	Visits.visitPostOrderHelper(Object, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 262	
		if (component instanceof Iterable<?>)
		{
			final Iterable<?> container = (Iterable<?>)component;
			if (filter.visitChildren(container))
			{
				Visit<R> childTraversal = new Visit<>();
				for (final Object child : ((Iterable<?>)component))
				{
					visitPostOrderHelper(child, visitor, filter, childTraversal);
component=[FilterToolbar [Component id = 1]]
child=[ListView [Component id = filters]]
/cb
	Visits.visitPostOrderHelper(Object, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 262	
		if (component instanceof Iterable<?>)
		{
			final Iterable<?> container = (Iterable<?>)component;
			if (filter.visitChildren(container))
			{
				Visit<R> childTraversal = new Visit<>();
				for (final Object child : ((Iterable<?>)component))
				{
					visitPostOrderHelper(child, visitor, filter, childTraversal);
component=[RepeatingView [Component id = toolbars]]
child=[FilterToolbar [Component id = 1]]
/cb
	Visits.visitPostOrderHelper(Object, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 262	
		if (component instanceof Iterable<?>)
		{
			final Iterable<?> container = (Iterable<?>)component;
			if (filter.visitChildren(container))
			{
				Visit<R> childTraversal = new Visit<>();
				for (final Object child : ((Iterable<?>)component))
				{
					visitPostOrderHelper(child, visitor, filter, childTraversal);
component=[ToolbarsContainer [Component id = topToolbars]]
child=[RepeatingView [Component id = toolbars]]
/cb
	Visits.visitPostOrderHelper(Object, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 262	
		if (component instanceof Iterable<?>)
		{
			final Iterable<?> container = (Iterable<?>)component;
			if (filter.visitChildren(container))
			{
				Visit<R> childTraversal = new Visit<>();
				for (final Object child : ((Iterable<?>)component))
				{
					visitPostOrderHelper(child, visitor, filter, childTraversal);
component=[DataTable [Component id = tableWithFilterForm]]
child=[ToolbarsContainer [Component id = topToolbars]]
/cb
	Visits.visitPostOrderHelper(Object, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 262	
		if (component instanceof Iterable<?>)
		{
			final Iterable<?> container = (Iterable<?>)component;
			if (filter.visitChildren(container))
			{
				Visit<R> childTraversal = new Visit<>();
				for (final Object child : ((Iterable<?>)component))
				{
					visitPostOrderHelper(child, visitor, filter, childTraversal);
component=[FilterForm [Component id = filterForm]]
child=[DataTable [Component id = tableWithFilterForm]]

	Visits.visitPostOrder(Object, IVisitor<S,R>, IVisitFilter) line: 245	
		visitPostOrderHelper(root, visitor, filter, visit);
root=FilterForm	,
	FormComponent<T>.visitComponentsPostOrder(Component, IVisitor<Component,R>) line: 423	
		return Visits.visitPostOrder(component, visitor, new IVisitFilter(){
component=FilterForm	,
/cb
	FilterForm<T>(Form<T>).internalUpdateFormComponentModels() line: 1864	
		FormComponent.visitComponentsPostOrder(this, new FormModelUpdateVisitor(this));
/cb
	FilterForm<T>(Form<T>).updateFormComponentModels() line: 1829	
	FilterForm<T>(Form<T>).process(IFormSubmitter) line: 963	
	FilterForm<T>(Form<T>).onFormSubmitted(IFormSubmitter) line: 795	
	FilterForm<T>(Form<T>).onFormSubmitted() line: 708	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 57	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 606	
	RequestListenerInterface.internalInvoke(Component, Object) line: 258	
	RequestListenerInterface.invoke(IRequestableComponent) line: 216	
	ListenerInterfaceRequestHandler.invokeListener() line: 241	
	ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 234	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ debug	, 
/s
Form$FormModelUpdateVisitor.component(Component, IVisit<Void>) line: 217	
			if (component instanceof IFormModelUpdateListener)
			{
				final Form<?> form = Form.findForm(component);
				if (form != null)
				{
					if (this.formFilter == null || this.formFilter == form)
					{
						if (form.isEnabledInHierarchy())
						{
							if (component.isVisibleInHierarchy() &&
								component.isEnabledInHierarchy())
							{
								((IFormModelUpdateListener)component).updateModel();
/s
TextField<T>(FormComponent<T>).updateModel() line: 1097	
		setModelObject(getConvertedInput());
getConvertedInput()=="eric"						/ Eerder set in validate	,  
/s
TextField<T>(FormComponent<T>).setModelObject(T) line: 1579	
		setDefaultModelObject(object);
object="Douglas"
/s
TextField<T>(Component).setDefaultModelObject(Object) line: 3063	

		final IModel<Object> model = (IModel<Object>)getDefaultModel();
model	PropertyModel<T>  (id=7531)	
	expression	"firstName" (id=7533)	
	target	FilterStateModel<T>  (id=7534)	

		// Check whether this will result in an actual change
		if (!getModelComparator().compare(this, object))
/s
TextField<T>(Component).getModelComparator() line: 3752	
		return defaultModelComparator;
/t
/s
Component$3.compare(Component, Object) line: 303	
/=
public abstract class Component
	/** Basic model IModelComparator implementation for normal object models */
	private static final IModelComparator defaultModelComparator = new IModelComparator()
	{
		private static final long serialVersionUID = 1L;

		@Override
		public boolean compare(Component component, Object b)
		{
			final Object a = component.getDefaultModelObject();
/s
TextField<T>(Component).getDefaultModelObject() line: 1620	

		final IModel<?> model = getDefaultModel();
this	TextField<T>  (id=7524)	
model	PropertyModel<T>  (id=7531)	
	expression	"firstName" (id=7533)	
	target	FilterStateModel<T>  (id=7534)	
		locator	SortableContactDataProvider_my  (id=7565)	
			contactFilter	ContactFilter_my  (id=7569)	
				dateFrom	null	
				dateTo	null	
				firstName	"Douglas" (id=7573)	
				lastName	null	
			state	SingleSortState<T>  (id=7570)	

/ intermezzo

/ TODO hoe is dit gedaan, het form heeft dit model	, en de textfilteredpropertycolumn krijgt de property model op dit model	, met een bepaalde property	, 
/ see FILTER TEXTFIELD MODEL
/ MORGENOCHTEND

public class DataTableFilterToolbarPage_my extends ExamplePage
	public DataTableFilterToolbarPage_my()
		FilterForm<ContactFilter_my> filterForm = new FilterForm<>("filterForm", dataProvider);	
/s
	public FilterForm(final String id, final IFilterStateLocator<T> locator)
	{
		super(id, new FilterStateModel<>(locator));
/t
		tableWithFilterForm.addTopToolbar(filterToolbar);


/ Einde intermezzo

				// Get model value for this component.
				return model.getObject();
/s
PropertyModel<T>(AbstractPropertyModel<T>).getObject() line: 71	
		final String expression = propertyExpression();
firstName
		final Object target = getInnermostModelOrObject();
/s
PropertyModel<T>(AbstractPropertyModel<T>).getInnermostModelOrObject() line: 261	
		Object object = getTarget();
object	FilterStateModel<T>  (id=7534)	
		while (object instanceof IModel)
		{
			Object tmp = ((IModel<?>)object).getObject();
/s
FilterStateModel<T>.getObject() line: 61	
		return locator.getFilterState();
/s
SortableContactDataProvider_my.getFilterState() line: 143	
	    return contactFilter;

this	SortableContactDataProvider_my  (id=7565)	
	contactFilter	ContactFilter_my  (id=7569)	
		dateFrom	null	
		dateTo	null	
		firstName	"Douglas" (id=7573)	
		lastName	null	
/t
PropertyModel<T>(AbstractPropertyModel<T>).getInnermostModelOrObject() line: 265	
			Object tmp = ((IModel<?>)object).getObject();
tmp	ContactFilter_my  (id=7569)	
			object = tmp;
		return object;
/t
PropertyModel<T>(AbstractPropertyModel<T>).getObject() line: 84	
		final Object target = getInnermostModelOrObject();
/d
		if (target != null)
		{
			return (T)PropertyResolver.getValue(expression, target);
/s
PropertyResolver.getValue(String, Object) line: 99	

		ObjectAndGetSetter getter = getObjectAndGetSetter(expression, object, RETURN_NULL);
object	ContactFilter_my  (id=7569)	
/s
PropertyResolver.getObjectAndGetSetter(String, Object, int) line: 254	
		return getObjectAndGetSetter(expression, object, tryToCreateNull, object.getClass());
/s
PropertyResolver.getObjectAndGetSetter(String, Object, int, Class<?>) line: 270	

		IGetAndSet getAndSetter = getGetAndSetter(exp, clz);
exp	"firstName" (id=7533)	
clz	Class<T> (org.apache.wicket.examples.repeater.ContactFilter_my) (id=3025)	
/s
PropertyResolver.getGetAndSetter(String, Class<?>) line: 385	

				method = findGetter(clz, exp);
/s
PropertyResolver.findGetter(Class<?>, String) line: 578	
		String name = Character.toUpperCase(expression.charAt(0)) + expression.substring(1);
FirstName
		Method method = null;
		try
		{
			method = clz.getMethod(GET + name, (Class[])null);
public java.lang.String org.apache.wicket.examples.repeater.ContactFilter_my.getFirstName()
/t
PropertyResolver.getGetAndSetter(String, Class<?>) line: 414	
				method = findGetter(clz, exp);
/d
			if (method == null)
/n
			else
			{
				field = findField(clz, exp);
/s
PropertyResolver.findField(Class<?>, String) line: 548	
		Field field = null;
		try
		{
			field = clz.getField(expression);
null
		catch (Exception e)
		{
			Class<?> tmp = clz;
			while (tmp != null && tmp != Object.class)
			{
				Field[] fields = tmp.getDeclaredFields();
[private java.lang.String org.apache.wicket.examples.repeater.ContactFilter_my.firstName, private java.lang.String org.apache.wicket.examples.repeater.ContactFilter_my.lastName, private java.util.Date org.apache.wicket.examples.repeater.ContactFilter_my.dateFrom, private java.util.Date org.apache.wicket.examples.repeater.ContactFilter_my.dateTo]
					if (aField.getName().equals(expression))
					{
						aField.setAccessible(true);
						return aField;
/t
PropertyResolver.getGetAndSetter(String, Class<?>) line: 529	
				field = findField(clz, exp);
/d
				getAndSetter = new MethodGetAndSet(method, MethodGetAndSet.findSetter(method, clz),
					field);
/s
PropertyResolver$MethodGetAndSet.findSetter(Method, Class<?>) line: 1267	
			String name = getMethod.getName();
name	"setFirstName" (id=7643)	
			try
			{
				Method method = clz.getMethod(name, new Class[] { getMethod.getReturnType() });
				if (method != null)
				{
					method.setAccessible(true);
				}
				return method;
/t
PropertyResolver.getGetAndSetter(String, Class<?>) line: 529	
				getAndSetter = new MethodGetAndSet(method, MethodGetAndSet.findSetter(method, clz), field);
/pd
/s
PropertyResolver$MethodGetAndSet.<init>(Method, Method, Field) line: 1143	
			this.getMethod = getMethod;
public java.lang.String org.apache.wicket.examples.repeater.ContactFilter_my.getFirstName()
			this.getMethod.setAccessible(true);
			this.field = field;
private java.lang.String org.apache.wicket.examples.repeater.ContactFilter_my.firstName
			this.setMethod = setMethod;
public void org.apache.wicket.examples.repeater.ContactFilter_my.setFirstName(java.lang.String)

/t
PropertyResolver.getGetAndSetter(String, Class<?>) line: 534	
		return getAndSetter;
/t
PropertyResolver.getObjectAndGetSetter(String, Object, int, Class<?>) line: 352	
		IGetAndSet getAndSetter = getGetAndSetter(exp, clz);
/d
		return new ObjectAndGetSetter(getAndSetter, value);
value	ContactFilter_my  (id=7569)	
/t
PropertyResolver.getValue(String, Object) line: 110	
		ObjectAndGetSetter getter = getObjectAndGetSetter(expression, object, RETURN_NULL);
/d
		return getter.getValue();
/s
PropertyResolver$ObjectAndGetSetter.getValue() line: 659	
			return getAndSetter.getValue(value);
/s
PropertyResolver$MethodGetAndSet.getValue(Object) line: 1154	

				ret = getMethod.invoke(object, (Object[])null);
object	ContactFilter_my  (id=7569)	
this	PropertyResolver$MethodGetAndSet  (id=7647)	
	getMethod	Method  (id=7624)	
/s
ContactFilter_my.getFirstName() line: 30	
		return firstName;
Douglas
/t
Component$3.compare(Component, Object) line: 304	
/=
	private static final IModelComparator defaultModelComparator = new IModelComparator()
		public boolean compare(Component component, Object b)
component=TextField
b="Douglas"=component.convertedInput	, uit request, van de user	,

			final Object a = component.getDefaultModelObject();
/d
Douglas								/ Douglas staat al in het model, van de vorige keer	,
			return a.equals(b);
true
/t
TextField<T>(Component).setDefaultModelObject(Object) line: 3086	
		// Check whether this will result in an actual change
		if (!getModelComparator().compare(this, object))
/n
/ maar stel object="Abby"
		{
			modelChanging();
			model.setObject(object);
/s
PropertyModel<T>(AbstractPropertyModel<T>).setObject(T) line: 129	
			PropertyResolverConverter prc = new PropertyResolverConverter(
					Application.get().getConverterLocator(), Session.get().getLocale());
			PropertyResolver.setValue(expression, getInnermostModelOrObject(), object, prc);
getInnermostModelOrObject()=ContactFilter_my
/s
PropertyResolver.setValue(String, Object, Object, PropertyResolverConverter) line: 133	
/=
	public static void setValue(final String expression, final Object object,
		final Object value, final PropertyResolverConverter converter)

		ObjectAndGetSetter setter = getObjectAndGetSetter(expression, object, CREATE_NEW_VALUE);
expression	"firstName" (id=7533)	
object	ContactFilter_my  (id=7569)	
		setter.setValue(value, converter == null ? new PropertyResolverConverter(Application.get()
			.getConverterLocator(), Session.get().getLocale()) : converter);
object	ContactFilter_my  (id=7569)	
	dateFrom	null	
	dateTo	null	
	firstName	"Abby" (id=7676)	
	lastName	null	

/ Klopt	, de ContactFilter_my is de model van de filter text field in de toolbar	, en ze doen alles via de text fields, maar die text fields zijn niet belangrijk, het gaat om de ContactFilter_my	, deze heeft de te filter data	, hier kijkt providers's iterator bijv naar	, 
/ we zijn bijv in 
FilterForm<T>(Form<T>).process(IFormSubmitter) line: 963	
			// Update model using form data
			updateFormComponentModels();	/ II



			model.setObject(object);
/d
			modelChanged();
		}


/ III.

/ SUBMIT FORM, BUT DOES NOTHING

			// Form has no error
			delegateSubmit(submittingComponent);
/s
FilterForm<T>(Form<T>).delegateSubmit(IFormSubmitter) line: 1287	
		final Form<?> processingForm = findFormToProcess(submittingComponent);
this
		Visits.visitPostOrder(processingForm, new IVisitor<Form<?>, Void>()
		{
			@Override
			public void component(Form<?> form, IVisit<Void> visit)
			{
				if (form.isSubmitted())
				{
					forms.add(form);		/ 1 keer	,
				}
			}
		}, new ClassVisitFilter(Form.class));	/ TODO
forms= [[FilterForm [Component id = filterForm]]]

		// invoke Form#onSubmit(..)
		for (Form<?> form : forms)
		{
			form.onSubmit();
/ NIETS
/t
RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 97	
			respond(handler);
handler	ListenerInterfaceRequestHandler  (id=8050)		 / 1ste controller	,

/d
			execute(scheduled);
scheduled	RenderPageRequestHandler  (id=8090)	 / 2de controller	,

/c
/ stack 	,
	SortableContactDataProvider_my.size() line: 96	
		return filterContacts(getContactsDB().getIndex(getSort())).size();
/cb
	DataTable$DefaultDataGridView(DataViewBase<T>).internalGetItemCount() line: 142	
		return internalGetDataProvider().size();
/cb
	DataTable$DefaultDataGridView(AbstractPageableView<T>).getItemCount() line: 235	
		long count = internalGetItemCount();
/cb
	DataTable$DefaultDataGridView(AbstractPageableView<T>).getRowCount() line: 216	
		return getItemCount();
/cb
	DataTable$DefaultDataGridView(AbstractPageableView<T>).getViewSize() line: 314	
		return Math.min(getItemsPerPage(), getRowCount() - getFirstItemOffset());
/cb
	DataTable$DefaultDataGridView(AbstractPageableView<T>).getItemModels() line: 99	
->		long size = getViewSize();
		Iterator<IModel<T>> models = getItemModels(offset, size);
/cb
	DataTable$DefaultDataGridView(RefreshingView<T>).onPopulate() line: 93	
->		Iterator<IModel<T>> models = getItemModels();
		Iterator<Item<T>> items = getItemReuseStrategy().getItems(newItemFactory(), models,
			getItems());
		removeAll();
		addItems(items);
/cb
	DataTable$DefaultDataGridView(AbstractRepeater).onBeforeRender() line: 124	
		onPopulate();
/cb
	DataTable$DefaultDataGridView(AbstractPageableView<T>).onBeforeRender() line: 115	
	DataTable$DefaultDataGridView(Component).internalBeforeRender() line: 949	
	DataTable$DefaultDataGridView(Component).beforeRender() line: 1017	
	WebMarkupContainer(MarkupContainer).onBeforeRenderChildren() line: 1866	
	WebMarkupContainer(Component).onBeforeRender() line: 3877	
	WebMarkupContainer(Component).internalBeforeRender() line: 949	
	WebMarkupContainer(Component).beforeRender() line: 1017	
	DataTable<T,S>(MarkupContainer).onBeforeRenderChildren() line: 1866	
	DataTable<T,S>(Component).onBeforeRender() line: 3877	
	DataTable<T,S>(Component).internalBeforeRender() line: 949	
	DataTable<T,S>(Component).beforeRender() line: 1017	
	FilterForm<T>(MarkupContainer).onBeforeRenderChildren() line: 1866	
	FilterForm<T>(Component).onBeforeRender() line: 3877	
	FilterForm<T>(Form<T>).onBeforeRender() line: 1807	
	FilterForm<T>(Component).internalBeforeRender() line: 949	
	FilterForm<T>(Component).beforeRender() line: 1017	
	DataTableFilterToolbarPage_my(MarkupContainer).onBeforeRenderChildren() line: 1866	
	DataTableFilterToolbarPage_my(Component).onBeforeRender() line: 3877	
	DataTableFilterToolbarPage_my(Page).onBeforeRender() line: 801	
	DataTableFilterToolbarPage_my(Component).internalBeforeRender() line: 949	
	DataTableFilterToolbarPage_my(Component).beforeRender() line: 1017	
	DataTableFilterToolbarPage_my(Component).internalPrepareForRender(boolean) line: 2215	
	DataTableFilterToolbarPage_my(Page).internalPrepareForRender(boolean) line: 242	
	DataTableFilterToolbarPage_my(Component).render() line: 2304	
	DataTableFilterToolbarPage_my(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
		PageRenderer renderer = Application.get().getPageRendererProvider().get(this);
		renderer.respond((RequestCycle)requestCycle);
/cb
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
			respond(handler);
/cb
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 97	
			respond(handler);				
handler	ListenerInterfaceRequestHandler  (id=8050)		/ 1ste controller	, 
			execute(scheduled);
scheduled	RenderPageRequestHandler  (id=8090)	 	/ wanneer set	?	/ 2de controller	, dwz render	,
/cb
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
			IRequestHandler handler = resolveRequestHandler();
handler	ListenerInterfaceRequestHandler  (id=8050)	
				execute(handler);
/cb
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/ debug	,
SortableContactDataProvider_my.size() line: 96	
		return filterContacts(getContactsDB().getIndex(getSort())).size();
/s
	protected ContactsDatabase getContactsDB()
	{
		return DatabaseLocator.getDatabase(); 	/ DatabaseLocator is een singleton	, 
/t
SortableContactDataProvider_my.size() line: 96	
		return filterContacts(getContactsDB().getIndex(getSort())).size();
/ pd
/s
SortableContactDataProvider_my(SortableDataProvider<T,S>).getSort() line: 61	
		return state.getSort();

this	SortableContactDataProvider_my  (id=7805)	
	state	SingleSortState<T>  (id=8126)	
		param	SortParam<T>  (id=8127)	
			ascending	true	
			property	"firstName" (id=7835)	
/s
SingleSortState<T>.getSort() line: 74	
		return param;
/t
SortableContactDataProvider_my.size() line: 96	
		return filterContacts(getContactsDB().getIndex(getSort())).size();
/ pd
/s
ContactsDatabase.getIndex(SortParam) line: 104	
		if (sort.getProperty().equals("firstName"))
		{
			return sort.isAscending() ? fnameIdx : fnameDescIdx;
/t
SortableContactDataProvider_my.size() line: 96	
		return filterContacts(getContactsDB().getIndex(getSort())).size();
/ pd
/s
SortableContactDataProvider_my.filterContacts(List<Contact>) line: 66	

/ Waarom als een filter field niet is filled in , is de property null ipv "", of new Date() 
	    Date dateFrom = contactFilter.getDateFrom();
null
	    String lastName=contactFilter.getLastName();
null
/ TODO


/ Einde MAIN WICKET FILTERING



/ ook,
http://stackoverflow.com/questions/20270330/how-to-create-date-filtered-column-property-in-wicket
/ TODO	





/ Einde WICKET FILTERING

/ WICKETTESTER DEBUG

/ wicket7_3
/ proj wicket-testing

$ vi MiscPageTest.java

public class MiscPageTest 
//extends WicketTestCase
{
	private WicketTester tester;
	
	@Before 
	public void setUp(){
		WebApplication webApplication =new WicketApplication();
//		tester=new WicketTester(webApplication);
		tester=new WicketTester();
	}
/s
WicketTester.<init>() line: 181	
/s
WicketTester(BaseWicketTester).<init>() line: 209	
		this(new MockApplication());
/s
MockApplication.<init>() line: 39	
/t
WicketTester(BaseWicketTester).<init>() line: 209	
		this(new MockApplication());
/s
WicketTester(BaseWicketTester).<init>(WebApplication) line: 239	
		this(application, (MockServletContext)null);
/s
WicketTester(BaseWicketTester).<init>(WebApplication, ServletContext) line: 266	
		this(application, servletCtx, true);
/s
WicketTester(BaseWicketTester).<init>(WebApplication, ServletContext, boolean) line: 340	
			// initialize the application
			application.initApplication();
/s
MockApplication(Application).initApplication() line: 948	
		internalInit();
/s
MockApplication.internalInit() line: 71	
		super.internalInit();
/= WebApplication.internalInit()
/ TODO

/ MORGENOCHTEND
MiscPage, 7_3


/ Einde WICKETTESTER DEBUG

/ WICKET ADD JS TO COMPONENT

/ 7	.  

/ Lees, 
https://cwiki.apache.org/confluence/display/WICKET/Calling+JavaScript+function+on+wicket+component's+onclick

/ 13	.

new AjaxLink("link") {
  protected onClick(AjaxRequestTarget target) { ...}
 
  @Override
  protected IAjaxCallDecorator getAjaxCallDecorator() {
    return new AjaxCallDecorator() {
      @Override
      public CharSequence decorateScript(Component c, CharSequence script) {
        return super.decorateScript(c, "alert('This is my javascript call'); " + script);
      }
    };
  }
}
/ AjaxCallDecorator is NIET in wicket 7	, 

/ 1313	. 

/ Lees	,
http://stackoverflow.com/questions/16483035/wicket-1-4-6-7-replacing-ajaxbutton-getajaxcalldecorator
/ ->
https://cwiki.apache.org/confluence/display/WICKET/Wicket+Ajax#WicketAjax-AjaxRequestAttributes

add(new AjaxLink("btn"){
    @Override
    protected void updateAjaxAttributes(AjaxRequestAttributes attributes) {
        super.updateAjaxAttributes(attributes); 
        attributes.getAjaxCallListeners().add(new AjaxCallListener(){
            @Override
            public CharSequence getSuccessHandler(Component component) {
                return " document.getElementById('inputBlocker').style.display='none';";
            }

        });
    }

});

/ 1313

/home/eric/Devel/Java/Wicket/wicket/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/LinksPage.java
/ uses new AjaxCallListener	,

/ 1313	. 

/ Lees	, 
http://stackoverflow.com/questions/23293905/wicket-decorator-to-listener-when-upgrade-from-1-5-x-to-6-x

o.a.w.ajax.IAjaxCallDecorator is replaced with o.a.w.ajax.attributes.IAjaxCallListener.
/ Lees	, 
https://cwiki.apache.org/confluence/display/WICKET/Wicket+Ajax#WicketAjax-o.a.w.ajax.IAjaxCallDecoratorisreplacedwitho.a.w.ajax.attributes.IAjaxCallListener

protected void updateAjaxAttributes(AjaxRequestAttributes attributes)
{
    super.updateAjaxAttributes(attributes);
 
    AjaxCallListener myAjaxCallListener = new AjaxCallListener() {
 
        @Override
        public CharSequence getBeforeHandler(Component component) {
            return "alert('I\'m executed before the firing of the Ajax call')";
        }
    };
    attributes.getAjaxCallListeners().add(myAjaxCallListener);
}

/ 1313	. 

/ boek (135) SimpleAttributeModifier is NIET in wicket 7	, 
/ maar is WH zoals hierboven	,
add(new AjaxLink("btn"){
    @Override
    protected void updateAjaxAttributes(AjaxRequestAttributes attributes) {
		...
/ TODO (Maak voorbeeld in boek)



/ 13	. 

/ of	,

link.add(new AttributeAppender("onclick", new Model("alert('This is my JS script');"), ";"));

 


/ 7	. 

/ examples	,

/ 13	. 

[eric@localhost wicket]$ find wicket-examples/ -name "*.js"
wicket-examples/src/main/java/org/apache/wicket/examples/resourcedecoration/ajax.js
	new Behavior

/ 13	. 

/home/eric/Devel/Java/Wicket/Wicket-tutorial-examples/CustomDatepickerAjax/src/main/java/org/wicketTutorial/ajaxdatepicker/HomePage.java
/ subclass, geen behavior + custom javascript	, 
/ TODO: vervang subclass door behavior	,

/ 13	. 

/home/eric/Devel/Java/Wicket/wicket/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/LinksPage.java
/ uses new AjaxCallListener	,
		add(new AjaxLink<Void>("success-link")
		{
			@Override
			protected void updateAjaxAttributes(AjaxRequestAttributes attributes)
			{
				super.updateAjaxAttributes(attributes);

				IAjaxCallListener ajaxCallListener = new AjaxCallListener() {
					...
				attributes.getAjaxCallListeners().add(ajaxCallListener);

					

/ 7	. 

/ google, 
wicket add javascript to component

/ Lees	,
http://stackoverflow.com/questions/9248459/calling-a-javascript-function-from-wicket

/ Lees	, 
https://jsoftbiz.wordpress.com/2011/06/01/add-your-own-javascript-on-a-wicket-ajax-component/

/ 7	. 

/ examples	, 

[eric@localhost Wicket-tutorial-examples]$ grep updateAjaxAttributes -r *

/ TODO ERICJ
/ Helemaal bestuderen	,

/ adds JS to behavior	,

/ we hebben deployed naar tomcat	,
http://localhost:9090/CustomAjaxListenerExample/?1

$ vi CustomAjaxListenerExample/src/main/java/org/wicketTutorial/ajaxlistener/HomePage.java:

	    form.add(new AjaxButton("ajaxButton"){
//////////////////////
/ called door de behavior's updateAjaxAttributes
			@Override
			protected void updateAjaxAttributes(AjaxRequestAttributes attributes) {
				super.updateAjaxAttributes(attributes);
				attributes.getAjaxCallListeners().add(new DisableComponentListener(form));
			}
		});		

$ vi 
public class DisableComponentListener extends AjaxCallListener {
	private static PackageResourceReference customScriptReference = 
			new PackageResourceReference(DisableComponentListener.class, "moveHiderAndIndicator.js");
	
	private static PackageResourceReference jqueryUiPositionRef = 
			new PackageResourceReference(DisableComponentListener.class, "jquery-ui-position.min.js");
	
	private static PackageResourceReference indicatorReference = 
			new PackageResourceReference(DisableComponentListener.class, "ajax-loader.gif");
	
	private Component targetComponent;
	
	public DisableComponentListener(Component targetComponent){
		this.targetComponent = targetComponent;
	}
	
	@Override
	public CharSequence getBeforeHandler(Component component) {	
		CharSequence indicatorUrl = getIndicatorUrl(component);
		return ";DisableComponentListener.disableElement('" + targetComponent.getMarkupId() + "'," +
				"'" + indicatorUrl + "');";
	}

	@Override
	public CharSequence getCompleteHandler(Component component) {
		return ";DisableComponentListener.hideComponent('" + targetComponent.getMarkupId() + "');";
	}
	
	protected CharSequence getIndicatorUrl(Component component) {
		return component.urlFor(indicatorReference, null);
	}

////////////////////
/ Hier komen we als we render page header	,	
	@Override
	public void renderHead(Component component, IHeaderResponse response) {	
		ResourceReference jqueryReference =
				Application.get().getJavaScriptLibrarySettings().getJQueryReference();
		
		response.render(JavaScriptHeaderItem.forReference(jqueryReference));
		response.render(JavaScriptHeaderItem.forReference(jqueryUiPositionRef));
		response.render(JavaScriptHeaderItem.forReference(customScriptReference));
	}
}

$ vi AjaxButton.java
public abstract class AjaxButton extends Button

/////////////////////////
/ Hebben we override	, 
	protected void updateAjaxAttributes(AjaxRequestAttributes attributes)
	{
	}

	protected AjaxFormSubmitBehavior newAjaxFormSubmitBehavior(String event)
	{
		return new AjaxFormSubmitBehavior(form, event)
		{
			private static final long serialVersionUID = 1L;
//////////////////////////
/ Hierin komen we als click button	,
			@Override
			protected void onSubmit(AjaxRequestTarget target)
			{
				AjaxButton.this.onSubmit(target, AjaxButton.this.getForm());
			}

			@Override
			protected void onAfterSubmit(AjaxRequestTarget target)
			{
				AjaxButton.this.onAfterSubmit(target, AjaxButton.this.getForm());
			}

			@Override
			protected void onError(AjaxRequestTarget target)
			{
				AjaxButton.this.onError(target, AjaxButton.this.getForm());
			}

////////////////////////
/ Hierin komen we als render page,
			@Override
			protected void updateAjaxAttributes(AjaxRequestAttributes attributes)
			{
				super.updateAjaxAttributes(attributes);

				// do not allow normal form submit to happen
				attributes.setPreventDefault(true);
////////////////////
/ calls AjaxButton's updateAjaxAttributes	,
				AjaxButton.this.updateAjaxAttributes(attributes);
			}

			@Override
			public boolean getDefaultProcessing()
			{
				return AjaxButton.this.getDefaultFormProcessing();
			}
		};
	}


/ 13	. 

/ RENDER PAGE

/c
/s
	AjaxButton$1.updateAjaxAttributes(AjaxRequestAttributes) line: 131	
	AjaxButton$1(AbstractDefaultAjaxBehavior).getAttributes() line: 146	
	AjaxButton$1(AbstractDefaultAjaxBehavior).renderExtraHeaderContributors(Component, IHeaderResponse) line: 119	
	AjaxButton$1(AbstractDefaultAjaxBehavior).renderHead(Component, IHeaderResponse) line: 104	
	AjaxButton$1(AjaxEventBehavior).renderHead(Component, IHeaderResponse) line: 90	
	HomePage$1(Component).internalRenderHead(HtmlHeaderContainer) line: 2727	
	ChildFirstHeaderRenderStrategy$1.component(Component, IVisit<Void>) line: 85	
	ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component, Visit<Void>) line: 96	
	ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component, Visit<Void>) line: 87	
	ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component, Visit<Void>) line: 87	
	ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component) line: 51	
	ChildFirstHeaderRenderStrategy.renderChildHeaders(HtmlHeaderContainer, Component) line: 78	
	ChildFirstHeaderRenderStrategy.renderHeader(HtmlHeaderContainer, HtmlHeaderContainer$HeaderStreamState, Component) line: 57	
	HtmlHeaderContainer.onComponentTagBody(MarkupStream, ComponentTag) line: 171	
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
	HtmlHeaderContainer(Component).internalRenderComponent() line: 2565	
	HtmlHeaderContainer(MarkupContainer).onRender() line: 1698	
	HtmlHeaderContainer(Component).internalRender() line: 2380	
	HtmlHeaderContainer(Component).render() line: 2308	
	HomePage(MarkupContainer).renderNext(MarkupStream) line: 1524	
	HomePage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	HomePage(Page).onRender() line: 879	
	HomePage(WebPage).onRender() line: 141	
	HomePage(Component).internalRender() line: 2380	
	HomePage(Component).render() line: 2308	
	HomePage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/ debug
/s
AjaxButton$1.updateAjaxAttributes(AjaxRequestAttributes) line: 131	
/=
	protected AjaxFormSubmitBehavior newAjaxFormSubmitBehavior(String event)
	{
		return new AjaxFormSubmitBehavior(form, event)
		{
			@Override
			protected void updateAjaxAttributes(AjaxRequestAttributes attributes)

/ Dit is de fct die we hierboven de hele tijd bekeken	,

			{
				super.updateAjaxAttributes(attributes);
/s
AjaxButton$1(AjaxFormSubmitBehavior).updateAjaxAttributes(AjaxRequestAttributes) line: 143	
		super.updateAjaxAttributes(attributes);
/s
AjaxButton$1(AjaxEventBehavior).updateAjaxAttributes(AjaxRequestAttributes) line: 103	

/ we zijn in AjaxEventBehavior	,

/t
				super.updateAjaxAttributes(attributes);
/d
				// do not allow normal form submit to happen
				attributes.setPreventDefault(true);

				AjaxButton.this.updateAjaxAttributes(attributes);
			}

/c
/ stack	,
	DisableComponentListener.renderHead(Component, IHeaderResponse) line: 62	
	AjaxButton$1(AbstractDefaultAjaxBehavior).renderExtraHeaderContributors(Component, IHeaderResponse) line: 127	
	AjaxButton$1(AbstractDefaultAjaxBehavior).renderHead(Component, IHeaderResponse) line: 104	
	AjaxButton$1(AjaxEventBehavior).renderHead(Component, IHeaderResponse) line: 90	
	HomePage$1(Component).internalRenderHead(HtmlHeaderContainer) line: 2727	
	ChildFirstHeaderRenderStrategy$1.component(Component, IVisit<Void>) line: 85	
	ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component, Visit<Void>) line: 96	
	ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component, Visit<Void>) line: 87	
	ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component, Visit<Void>) line: 87	
	ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component) line: 51	
	ChildFirstHeaderRenderStrategy.renderChildHeaders(HtmlHeaderContainer, Component) line: 78	
	ChildFirstHeaderRenderStrategy.renderHeader(HtmlHeaderContainer, HtmlHeaderContainer$HeaderStreamState, Component) line: 57	
	HtmlHeaderContainer.onComponentTagBody(MarkupStream, ComponentTag) line: 171	
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
	HtmlHeaderContainer(Component).internalRenderComponent() line: 2565	
	HtmlHeaderContainer(MarkupContainer).onRender() line: 1698	
	HtmlHeaderContainer(Component).internalRender() line: 2380	
	HtmlHeaderContainer(Component).render() line: 2308	
	HomePage(MarkupContainer).renderNext(MarkupStream) line: 1524	
	HomePage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	HomePage(Page).onRender() line: 879	
	HomePage(WebPage).onRender() line: 141	
	HomePage(Component).internalRender() line: 2380	
	HomePage(Component).render() line: 2308	
	HomePage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ 13	. 

/ CLICK

/s
/ stack
	AjaxButton$1.onSubmit(AjaxRequestTarget) line: 113	
	AjaxFormSubmitBehavior$AjaxFormSubmitter.onSubmit() line: 215	
	Form<T>.delegateSubmit(IFormSubmitter) line: 1307	
	Form<T>.process(IFormSubmitter) line: 974	
	Form<T>.onFormSubmitted(IFormSubmitter) line: 795	
	AjaxButton$1(AjaxFormSubmitBehavior).onEvent(AjaxRequestTarget) line: 171	
	AjaxButton$1(AjaxEventBehavior).respond(AjaxRequestTarget) line: 155	
	AjaxButton$1(AbstractDefaultAjaxBehavior).onRequest() line: 593	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 57	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 606	
	RequestListenerInterface.internalInvoke(Component, Object) line: 258	
	RequestListenerInterface.invoke(IRequestableComponent, Behavior) line: 241	
	ListenerInterfaceRequestHandler.invokeListener() line: 248	
	ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 234	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ we komen in de behavior	,
/ debug
/s
	protected AjaxFormSubmitBehavior newAjaxFormSubmitBehavior(String event)
	{
		return new AjaxFormSubmitBehavior(form, event)
		{
			private static final long serialVersionUID = 1L;

			@Override
			protected void onSubmit(AjaxRequestTarget target)
			{
->				AjaxButton.this.onSubmit(target, AjaxButton.this.getForm());
 




/ Einde WICKET ADD JS TO COMPONENT


/ 7	. 

/ REPEATINGVIEW 

/ we doen voorlopig repeaters in eclipse op wicket7_5	, 

/ RepeatingPage	,

/ Geef	, 
http://localhost:9090/wicket-examples-step-by-step/repeater/repeating

/ edit source lookup path: in debug view (niet perspective), right click 'tomcat-remote-debug', en kies in custom menu 'Edit source lookup', 

/  7	.

/ models, structure	,

/ een repeatingview heeft GEEN model	, children zijn hier Items	, 
/ de Items hier hebben GEEN model, alleen 1 style behavior, en ze hebben 6 children,
/ de Label children hebben een model met een string als object, en 
/ de ActionPanel heeft een detachable model met de Contact id er in	, en een Link als children,  als we op de link click, wordt de detachable model resolved	, en bij detach WH weer leeg gemaakt	, TODO

public class AbstractItem extends WebMarkupContainer
/ is dus een MarkupContainer	,

			item.add(new ActionPanel("actions", new DetachableContactModel(contact)));
item	AbstractItem  (id=7591)	
	children	BasePage$ActionPanel  (id=7593)	
		children	BasePage$ActionPanel$1  (id=7595)	/ ActionPanel$1=new Link("select")	, 	
			id	"select" (id=7598)	
		data	DetachableContactModel  (id=7596) 		
		id	"actions" (id=7597)	

/c
this	RepeatingPage  (id=7572)	
	children	ArrayList<E>  (id=7658)	
		elementData	Object[12]  (id=7662)	
			[0]	WicketExampleHeader  (id=7663)	
			[1]	Label  (id=7664)	
			[2]	FeedbackPanel  (id=7665)	
			[3]	RepeatingView  (id=7578)	
				children	ArrayList<E>  (id=7667)	
					elementData	Object[12]  (id=7669)	
						[0]	AbstractItem  (id=7591)	
							children	ArrayList<E>  (id=7679)	
								elementData	Object[12]  (id=7683)	
									[0]	BasePage$ActionPanel  (id=7593)	
										children	BasePage$ActionPanel$1  (id=7595) /= new Link("select")	
										data	DetachableContactModel  (id=7596)	
									[1]	Label  (id=7684)	
										data	Model<T>  (id=7691)	
											object	"47" (id=7693)	
									[2]	Label  (id=7685)	
									[3]	Label  (id=7686)	
									[4]	Label  (id=7687)	
									[5]	Label  (id=7688)	
								size	6	
							data	AttributeModifier  (id=7680)	
							flags	1107501210	
							generatedMarkupId	-1	
							id	"1" (id=7594)	
							markup	null	
							markupSourcingStrategy	null	
							modCounter	6	
							parent	RepeatingView  (id=7578)	
							queue	null	
							requestFlags	49	
						[1]	AbstractItem  (id=7670)	
						[2]	AbstractItem  (id=7671)	
						[3]	AbstractItem  (id=7672)	
						[4]	AbstractItem  (id=7673)	
						[5]	AbstractItem  (id=7674)	
						[6]	AbstractItem  (id=7675)	
						[7]	AbstractItem  (id=7676)	
						[8]	AbstractItem  (id=7677)	
						[9]	AbstractItem  (id=7678)	
					size	10	
				data	null	
				flags	1107501210	
				generatedMarkupId	-1	
				id	"repeating" (id=7668)	
				markup	null	
				markupSourcingStrategy	null	
				modCounter	10	
				parent	RepeatingPage  (id=7572)	
				queue	null	
				requestFlags	49	
			[4]	HtmlHeaderContainer  (id=7666)	
		size	5	
	data	null	
	flags	1108032666	
	generatedMarkupId	-1	
	id	null	
	markup	MergedMarkup  (id=7645)	
	markupSourcingStrategy	null	
	modCounter	5	
	numericId	2	
	pageParameters	PageParameters  (id=7659)	
	parent	null	
	queue	ComponentQueue  (id=7660)	
	renderCount	1	
	renderedComponents	null	
	requestFlags	49	
	selected	null	
	stateless	null	
markupStream	MarkupStream  (id=7657)	
openTag	null	
index	0	


/ 7	. 

/ rendering

/ BREAKPOINT
/ we maken een b	, 
MarkupContainer [line: 1498] [conditional] - renderNext(MarkupStream)	
if
element instanceof ComponentTag && ((ComponentTag)element).getId().equals("view")

/ Hij valt er in 1 keer in	,
/s
RepeatingPage(MarkupContainer).renderNext(MarkupStream) line: 1498	
		final MarkupElement element = markupStream.get();
element	ComponentTag  (id=8166)	
<tr wicket:id="view">

/ id uit tag wordt used om component te vinden	, 
			// Get component id
			final String id = tag.getId();
			// Get the component for the id from the given container
			Component component = get(id);
component	RepeatingView  (id=8181)	

				component.render();
/s
RepeatingView(AbstractRepeater).onRender() line: 92	
		Iterator<? extends Component> it = renderIterator();
		while (it.hasNext())
		{
			Component child = it.next();
child	AbstractItem  (id=8302)	
		child.render();
/s
AbstractItem(Component).internalRender() line: 2345	
		IMarkupFragment markup = getMarkup();
/s
AbstractItem(Component).getMarkup() line: 755	
		if (markup != null)
/n
		// Ask the parent for find the markup for me
		markup = parent.getMarkup(this);

///////////////////////////////////////////////
/ de item heeft zelf geen markup, vraag dan die van je parent	, 

/t
AbstractItem(Component).internalRender() line: 2380	
		IMarkupFragment markup = getMarkup();
<tr wicket:id="view">
		<td><span wicket:id="actions">[actions]</span></td>
		<td><span wicket:id="contactid">[contactid]</span> </td>
		<td><span wicket:id="firstname">[firstname]</span></td>
		<td><span wicket:id="lastname">[lastname]</span></td>
		<td><span wicket:id="homephone">[homephone]</span></td>
		<td><span wicket:id="cellphone">[cellphone]</span></td>
	</tr>
				onRender();
/s
AbstractItem(Component).internalRenderComponent() line: 2556	
				renderComponentTag(tag);
/s
AbstractItem(Component).renderComponentTag(ComponentTag) line: 4034	

			// Apply behavior modifiers
			List<? extends Behavior> behaviors = getBehaviors();
				for (Behavior behavior : behaviors)
				{
						behavior.onComponentTag(this, tag);

			// Write the tag
			tag.writeOutput(getResponse(), !needToRenderTag(null),
				getMarkup().getMarkupResourceStream().getWicketNamespace());

/ 7	.  

/ click link "select"	, 

/s
public class BasePage extends ExamplePage
	class ActionPanel extends Panel {
		public ActionPanel(String id, IModel<Contact> model) {
			add(new Link("select") {
				@Override
				public void onClick() {
					selected = (Contact)getParent().getDefaultModelObject();

this	BasePage$ActionPanel$1  (id=7595)	
	parent	BasePage$ActionPanel  (id=7593)	
		data	DetachableContactModel  (id=7596)	
			id	47	
			state	LoadableDetachableModel$InternalState  (id=7694)	
			transientModelObject	null	
/s
BasePage$ActionPanel(Component).getDefaultModelObject() line: 1626	
		final IModel<?> model = getDefaultModel();
				return model.getObject();
/s
DetachableContactModel(LoadableDetachableModel<T>).getObject() line: 134	
			state = InternalState.ATTACHING;
			transientModelObject = load();
/s
DetachableContactModel.load() line: 97	
		// loads contact from the database
		return getContactsDB().get(id);
/t
DetachableContactModel(LoadableDetachableModel<T>).getObject() line: 134	
			transientModelObject = load();
/d
			state = InternalState.ATTACHED;
	return transientModelObject 
/t
BasePage$ActionPanel$1.onClick() line: 78	
					selected = (Contact)getParent().getDefaultModelObject();
/ selected is property van RepeatingPage	, en is een Contact	, 

/ TODO selectedLabel, feedback	, 


/ Einde REPEATINGVIEW

/ REPEATERS

/ view				page on which	,
------------------------------------
/ DataView			SimplePage
/ GridView			GridViewPage
/ DataGridView		DataGridPage
/ DataTable			DataTable

/ DataTable has a DataGridView	,

package org.apache.wicket.markup.repeater.data;
public abstract class DataViewBase<T> extends AbstractPageableView<T>
/e
package org.apache.wicket.markup.repeater;
public abstract class AbstractPageableView<T> extends RefreshingView<T> implements IPageableItems

package org.apache.wicket.markup.repeater.data;
public abstract class GridView<T> extends DataViewBase<T>

package org.apache.wicket.markup.repeater.data;
public abstract class DataView<T> extends DataViewBase<T>

package org.apache.wicket.extensions.markup.html.repeater.data.grid;
public class DataGridView<T> extends AbstractDataGridView<T>
/e
package org.apache.wicket.extensions.markup.html.repeater.data.grid;
public abstract class AbstractDataGridView<T> extends DataViewBase<T>

package org.apache.wicket.extensions.markup.html.repeater.data.table;
public class DataTable<T, S> extends Panel implements IPageableItems
	private final DataGridView<T> datagrid;

RefreshingView
	AbstractPageableView		/ implements IPageableItems
		DataViewBase			/ has data provider en  ModelIterator, die  calls data provider's .iterator, .model , die de model creates	,
			GridView
			DataView
			AbstractDataGridView		/ populators
				DataGridView

/ DataView heeft alleen row items in een refreshingview, de labels in de columns zijn children van deze items,

/ DataGridView heeft row items in een refreshingview en column items in een repeatingview, en er zijn property populators	,
/ PropertyPopulator.populateItem geeft altijd een Label	, 

/ vergelijk	,

$ vi SimplePage.java

	public SimplePage()
	{
		add(new DataView<Contact>("view", new ContactDataProvider())
		{
			@Override
			protected void populateItem(final Item<Contact> item)
			{
				Contact contact = item.getModelObject();
				item.add(new ActionPanel("actions", item.getModel()));
				item.add(new Label("contactid", String.valueOf(contact.getId())));
				item.add(new Label("firstname", contact.getFirstName()));
				item.add(new Label("lastname", contact.getLastName()));
				item.add(new Label("homephone", contact.getHomePhone()));
				item.add(new Label("cellphone", contact.getCellPhone()));

				item.add(AttributeModifier.replace("class", new AbstractReadOnlyModel<String>()


$ vi DataGridPage.java

	public DataGridPage()
	{
		List<ICellPopulator<Contact>> columns = new ArrayList<>();

		columns.add(new PropertyPopulator<Contact>("id"));
		columns.add(new PropertyPopulator<Contact>("firstName"));
		columns.add(new PropertyPopulator<Contact>("lastName"));
		columns.add(new PropertyPopulator<Contact>("homePhone"));
		columns.add(new PropertyPopulator<Contact>("cellPhone"));

		add(new DataGridView<>("rows", columns, new SortableContactDataProvider()));
	}


 





/ Einde REPEATERS

/ MODELS REPEATERS 

/ we zien dat de ListView een ListModel heeft met de Contacts	, en children de ListItems	, 
/ een ListItem heeft een ListItemModel, met de ListView en de index	, 
	en children de Labels en een ActionPanel	,  
		de ActionPanel heeft als model dezelfde als z'n parent, de ListItemModel	, en als child een Link	,

/ als we de link click	, dan wordt de ActionPanel's model=ListItemModel used, die de ListView en de index heeft	, en dan wordt	, 
		return listView.getModelObject().get(index);

/ en de ListView heeft als Model object de ArrayList van Contacts	, 

/ de RepeatingView hierboven heeft geen model	, 
/ daar heeft de ActionPanel een DetachableContactModel met de id van de Contact uit de db (bij init ging dat zo, dat hij alleen de id onthield),  die een load fct heeft, die een db call doet	, met de id van de Contact	, 
/ in ons voorbeeld heeft de AbstractItem GEEN model	, 
/ bij een RefreshingView heeft de Item wel een model, en de ActionPanel heeft dezelfde	, 

/ bij ons werken we steeds met de model uit de ActionPanel	, waarom heeft de item eigenlijk een model?
/ TODO	

/ Bij RefreshingView heeft de ActionPanel hetzelfde DetachableContactModel als zijn parent, de Item	, 
/ Bij RepeatingView bij ons, die ook items heeft, heeft de item geen model	,

////////////////////////////////////////////
/ Dus bij click zoekt de repeatingview de contact op in db, bij de listview in de listview's model	,
 
/ Einde MODELS REPEATERS 


/ LISTVIEW

/ ws wicket7_5	, 

/ Geef	, 
http://localhost:9090/wicket-examples-step-by-step/repeater/listing

/ 7	. 

/ BREAKPOINT
/ we hebben b , 
MarkupContainer [line: 1498] [conditional] - renderNext(MarkupStream)	
/ if	,
element instanceof ComponentTag && ((ComponentTag)element).getId().equals("view")

/ 7	. 

/ comment out DebugBar	,

/ in wicket-examples-step-by-step
/ src/main/java
	org.apache.wicket.examples

package org.apache.wicket.examples;
public final class WicketExampleHeader extends Panel
	public WicketExampleHeader(String id, String exampleTitle, WebPage page)
	{
		super(id);
//		add(new DebugBar("debug"));

$ vi WicketExampleHeader.html
    <a href="index.html" style="color: #E9601A" target="_top"><img src="logo.png" /></a><!--<div wicket:id="debug"></div>-->      



/ 7	. 


/c
		ListView<Contact> view = new ListView<Contact>("view",contacts)
/ het 2de arg is model object	, 
/s
MyListPage$1(ListView<T>).<init>(String, List<T>) line: 161	
		this(id, Model.ofList(list));
list=[[Contact id=47 firstName=Christopher lastName=Graham homePhone=287-555-1841 cellPhone=318-555-5426], [Contact id=21 firstName=Debra lastName=Johnson homePhone=408-555-2342 cellPhone=447-555-1235], ... 
/s
Model<T>.ofList(List<C>) line: 83	
		return new ListModel<>(list);


/c
	MyListPage$1.populateItem(ListItem<Contact>) line: 71	
->	MyListPage$1(ListView<T>).onPopulate() line: 523	
	MyListPage$1(AbstractRepeater).onBeforeRender() line: 124	
	MyListPage$1(Component).internalBeforeRender() line: 949	
	MyListPage$1(Component).beforeRender() line: 1017	
	MyListPage(MarkupContainer).onBeforeRenderChildren() line: 1866	
	MyListPage(Component).onBeforeRender() line: 3877	
	MyListPage(Page).onBeforeRender() line: 801	
	MyListPage(Component).internalBeforeRender() line: 949	
	MyListPage(Component).beforeRender() line: 1017	
	MyListPage(Component).internalPrepareForRender(boolean) line: 2215	
	MyListPage(Page).internalPrepareForRender(boolean) line: 242	
	MyListPage(Component).render() line: 2304	
	MyListPage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/ debug	,
/s
MyListPage$1(ListView<T>).onPopulate() line: 523	
			for (int i = 0; i < size; i++)
				if (item == null)
				{
					// Create item for index
					item = newItem(index, getListItemModel(getModel(), index));


					populateItem(item);
/s
MyListPage$1.populateItem(ListItem<Contact>) line: 71	

/ tot nu toe,	
/ we zien dat de ListView een ListModel heeft met de Contacts	, en children de ListItems	, 
/ een ListItem heeft een ListItemModel, met de ListView en de index	, en children de Labels en een ActionPanel	,  
this	MyListPage$1  (id=9307)	
	children	ArrayList<E>  (id=9355)	
		elementData	Object[12]  (id=9370)	
			[0]	ListItem<T>  (id=9332)	
				children	ArrayList<E>  (id=9375)	
					elementData	Object[12]  (id=9387)	
						[0]	Label  (id=9388)	
						[1]	BasePage$ActionPanel  (id=9389)	
							children	BasePage$ActionPanel$1  (id=9878)	
							data	ListItemModel<T>  (id=9347)			/= ListItemModel van parent,		
						[2]	Label  (id=9390)	
						[3]	Label  (id=9391)	
						[4]	Label  (id=9392)	
						[5]	Label  (id=9393)	
						[6]	Label  (id=9394)	
					modCount	7	
					size	7	
				data	Object[2]  (id=9376)	
					[0]	ListItemModel<T>  (id=9347)	
						index	0							/ 1ste	, 	
						listView	MyListPage$1  (id=9307)	
					[1]	AttributeModifier  (id=9398)			/ Behavior	, 
				flags	1074995354	
				generatedMarkupId	-1	
				id	"0" (id=8369)	
				index	0	
				markup	MarkupFragment  (id=9360)	
				markupSourcingStrategy	null	
				modCounter	7	
				parent	MyListPage$1  (id=9307)	
				queue	null	
				requestFlags	0	
			[1]	ListItem<T>  (id=9371)	
			[2]	ListItem<T>  (id=9372)	
			[3]	ListItem<T>  (id=9373)	
			[4]	ListItem<T>  (id=9374)	
			[5]	ListItem<T>  (id=9354)	
		modCount	6	
		size	6	
	data	ListModel<T>  (id=9356)	
		object	ArrayList<E>  (id=9377)	
			elementData	Object[10]  (id=9378)	
				[0]	Contact  (id=9379)	
				[1]	Contact  (id=9380)	
				[2]	Contact  (id=9381)	
				[3]	Contact  (id=9382)	
				[4]	Contact  (id=9383)	
				[5]	Contact  (id=9384)	
				[6]	Contact  (id=9385)	
				[7]	Contact  (id=9445)	
				[8]	Contact  (id=9446)	
				[9]	Contact  (id=9447)	
			modCount	10	
			size	10	
	firstIndex	0	
	flags	1074995354	
	generatedMarkupId	-1	
	id	"view" (id=8372)	
	markup	MarkupFragment  (id=9360)	
	markupSourcingStrategy	null	
	modCounter	6	
	parent	MyListPage  (id=9303)	
	queue	null	
	requestFlags	17	
	reuseItems	false	
	this$0	MyListPage  (id=9303)	
	viewSize	2147483647	
item	ListItem<T>  (id=9354)	

				Contact contact = item.getModelObject();

/c
/ stack
	MyListPage(MarkupContainer).renderNext(MarkupStream) line: 1498	
	MyListPage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	MyListPage(Page).onRender() line: 879	
	MyListPage(WebPage).onRender() line: 141	
	MyListPage(Component).internalRender() line: 2380	
	MyListPage(Component).render() line: 2308	
	MyListPage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/debug
/s
		final MarkupElement element = markupStream.get();
element	ComponentTag  (id=11862)	
<tr wicket:id="view">

			// Get component id
			final String id = tag.getId();

			// Get the component for the id from the given container
			Component component = get(id);
component	MyListPage$1  (id=11779)	
[ListView [Component id = view]]
...
/s
MyListPage$1(AbstractRepeater).onRender() line: 95	
		while (it.hasNext())
		{
			Component child = it.next();
			renderChild(child);
/s
MyListPage$1(ListView<T>).renderChild(Component) line: 573		/ ListView method	,
		renderItem((ListItem<?>)child);
/s
MyListPage$1(ListView<T>).renderItem(ListItem<?>) line: 584	
		item.render();
/s
ListItem<T>(Component).render() line: 2296	
			// Do the render
			internalRender();
/s
ListItem<T>(Component).internalRender() line: 2345	
this	ListItem<T>  (id=8922)	

/////////////////////////////////////////////
/ de list item zelf heeft geen markup	, dus krijgt hij die van zijn parent	,

		IMarkupFragment markup = getMarkup();
<tr wicket:id="view">
		<td><span wicket:id="itemid">[item id]</span></td>
		<td><span wicket:id="actions">[actions]</span></td>
		<td><span wicket:id="contactid">[contactid]</span> </td>
		<td><span wicket:id="firstname">[firstname]</span></td>
		<td><span wicket:id="lastname">[lastname]</span></td>
		<td><span wicket:id="homephone">[homephone]</span></td>
		<td><span wicket:id="cellphone">[cellphone]</span></td>
	</tr>
				onRender();
/s
ListItem<T>(Component).internalRenderComponent() line: 2517	
		final ComponentTag openTag = markupStream.getTag();
<tr wicket:id="view">
				renderComponentTag(tag);
/s
ListItem<T>(Component).renderComponentTag(ComponentTag) line: 4004	
			// Apply behavior modifiers
			List<? extends Behavior> behaviors = getBehaviors();
			if ((behaviors != null) && !behaviors.isEmpty() && !tag.isClose() && (isIgnoreAttributeModifier() == false))
				...
			// Write the tag
			tag.writeOutput(getResponse(), !needToRenderTag(null),
				getMarkup().getMarkupResourceStream().getWicketNamespace());

/ 7	. 

/ click Link "select"	,
/s
	BasePage$ActionPanel$1.onClick() line: 78	
->	BasePage$ActionPanel$1(Link<T>).onLinkClicked() line: 190	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 57	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 606	
	RequestListenerInterface.internalInvoke(Component, Object) line: 258	
this	RequestListenerInterface  (id=9685)	
	method	Method  (id=9684)	
public abstract void org.apache.wicket.markup.html.link.ILinkListener.onLinkClicked()
/cb
	RequestListenerInterface.invoke(IRequestableComponent) line: 216	
	ListenerInterfaceRequestHandler.invokeListener() line: 241	
	ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 234	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/ debug	, 
/s
	class ActionPanel extends Panel {
		public ActionPanel(String id, IModel<Contact> model) {
			add(new Link("select") {
				@Override
				public void onClick() {
					selected = (Contact)getParent().getDefaultModelObject();	/  parent=ActionPanel	,
/s
BasePage$ActionPanel(Component).getDefaultModelObject() line: 1620	
this	BasePage$ActionPanel  (id=9909)	

		final IModel<?> model = getDefaultModel();	/ de ActionPanel heeft dezefde model als de ListItem	,
model	ListItemModel<T>  (id=10007)	

				// Get model value for this component.
				return model.getObject();
/s
ListItemModel<T>.getObject() line: 61	

this	ListItemModel<T>  (id=10007)	
	index	4	
	listView	MyListPage$1  (id=9798)	

		return listView.getModelObject().get(index);

/ listView.getModelObject() is ArrayList van Contacts	, 


/ Einde LISTVIEW

/ REFRESHINGVIEW

/ 7	. 

/ BREAKPOINTS
/ we hebben b 	,
MarkupContainer [line: 1498] [conditional] - renderNext(MarkupStream)	
element instanceof ComponentTag && ((ComponentTag)element).getId().equals("refreshing")

/ 7	.  

public abstract class RefreshingView<T> extends RepeatingView

/ bij ListView geeft je een IModel	, NIET bij Repeating/RefeshingView	, 

/ 7	. 

/ Intermezzo

public abstract class RefreshingView<T> extends RepeatingView
	@Override
	protected final void onPopulate()
	{
		Iterator<IModel<T>> models = getItemModels();
/ iterator over de models	,
		Iterator<Item<T>> items = getItemReuseStrategy().getItems(newItemFactory(), models,
			/* not used */ getItems());
/ iterator over actions, die de factory een item laat maken met een van de models zoals er nog models zijn	,
		removeAll();				<-
		addItems(items);
/ invokes de iterator items	, dus zoals er models zijn wordt er een item create	, 

	protected IItemFactory<T> newItemFactory()
	{
/ creates item met model	,
/ zit WH hier omdat RefreshingView.this.populateItem	, RefreshingView.this.newChildId
		return new IItemFactory<T>()
		{
			@Override
			public Item<T> newItem(int index, IModel<T> model)
			{
				String id = RefreshingView.this.newChildId();
				Item<T> item = RefreshingView.this.newItem(id, index, model);
				RefreshingView.this.populateItem(item);
				return item;

/ zwengelt iterator uit DefaultItemReuseStrategy aan om  de items met de models er in te gaan maken,  
	protected void addItems(Iterator<Item<T>> items)
	{
		int index = 0;
		while (items.hasNext())
		{
			Item<T> item = items.next();
			item.setIndex(index);
			add(item);
			++index;
		}

public class DefaultItemReuseStrategy implements IItemReuseStrategy
	@Override
	public <T> Iterator<Item<T>> getItems(final IItemFactory<T> factory,
		final Iterator<IModel<T>> newModels, Iterator<Item<T>> existingItems)
	{
		return new Iterator<Item<T>>()
		{
			public boolean hasNext()
			{
				return newModels.hasNext();
			}

/ creates new item with model
/ calls back on RefreshingView's factory	, 
			@Override
			public Item<T> next()
			{
				IModel<T> model = newModels.next();
				Item<T> item = factory.newItem(index, model);
				index++;
				return item;


/ Einde Intermezzo

/s
	DefaultItemReuseStrategy$1.next() line: 74	
	RefreshingPage$1(RefreshingView<T>).onPopulate() line: 97	
		Iterator<IModel<T>> models = getItemModels();
		Iterator<Item<T>> items = getItemReuseStrategy().getItems(newItemFactory(), models,
			getItems());
		removeAll();															<- 
		addItems(items);	/ creates item with models in them	, 
/cb
	RefreshingPage$1(AbstractRepeater).onBeforeRender() line: 124	
		onPopulate();
/cb
	RefreshingPage$1(Component).internalBeforeRender() line: 949	
	RefreshingPage$1(Component).beforeRender() line: 1017	
	RefreshingPage(MarkupContainer).onBeforeRenderChildren() line: 1866	
	RefreshingPage(Component).onBeforeRender() line: 3877	
	RefreshingPage(Page).onBeforeRender() line: 801	
	RefreshingPage(Component).internalBeforeRender() line: 949	
	RefreshingPage(Component).beforeRender() line: 1017	
	RefreshingPage(Component).internalPrepareForRender(boolean) line: 2215	
	RefreshingPage(Page).internalPrepareForRender(boolean) line: 242	
	RefreshingPage(Component).render() line: 2304	
	RefreshingPage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/s
DefaultItemReuseStrategy$1.next() line: 74	
				IModel<T> model = newModels.next();
model	DetachableContactModel  (id=10400)	
	id	36	
	transientModelObject	null	

				Item<T> item = factory.newItem(index, model);
/s
RefreshingView$1.newItem(int, IModel<T>) line: 112	
/=
	protected IItemFactory<T> newItemFactory() {
		return new IItemFactory<T>() {
			@Override public Item<T> newItem(int index, IModel<T> model) {
				String id = RefreshingView.this.newChildId();
"1"
				Item<T> item = RefreshingView.this.newItem(id, index, model);
id="1"
index=0
/s
RefreshingPage$1(RefreshingView<T>).newItem(String, int, IModel<T>) line: 166	
		return new Item<>(id, index, model);
/t
RefreshingView$1.newItem(int, IModel<T>) line: 114	
				Item<T> item = RefreshingView.this.newItem(id, index, model);
/d
				RefreshingView.this.populateItem(item);
/s
RefreshingPage$1.populateItem(Item<Contact>) line: 77	

item	Item<T>  (id=10477)	
	data	DetachableContactModel  (id=10400)	
		id	36	
		state	LoadableDetachableModel$InternalState  (id=10465)	
		transientModelObject	null	

				Contact contact = item.getModelObject();
/ resolves met DetachableContactModel.load()	, want is een RepeatingView	, dus anders als bij ListView	,

				item.add(new Label("itemid", item.getId()));
				item.add(new ActionPanel("actions", item.getModel()));
				item.add(new Label("contactid", String.valueOf(contact.getId())));
				item.add(new Label("firstname", contact.getFirstName()));
				item.add(new Label("lastname", contact.getLastName()));
				item.add(new Label("homephone", contact.getHomePhone()));
				item.add(new Label("cellphone", contact.getCellPhone()));

				item.add(AttributeModifier.replace("class", new AbstractReadOnlyModel<String>()

/c
this	RefreshingPage$1  (id=10122)	
	children	ArrayList<E>  (id=10540)	
		elementData	Object[12]  (id=10541)	
			[0]	Item<T>  (id=10477)	
			[1]	Item<T>  (id=10527)	
				children	ArrayList<E>  (id=10542)	
					elementData	Object[12]  (id=10545)	
						[0]	Label  (id=10546)	
						[1]	BasePage$ActionPanel  (id=10547)	
							children	BasePage$ActionPanel$1  (id=10552)	/ Link "select"
							data	DetachableContactModel  (id=10401)		/= model van de item	, 
							flags	1074995354	
							generatedMarkupId	-1	
							id	"actions" (id=10553)	
							markup	null	
							markupSourcingStrategy	null	
							modCounter	1	
							parent	Item<T>  (id=10527)	
							queue	null	
							requestFlags	0	
							this$0	RefreshingPage  (id=10123)	
						[2]	Label  (id=10548)	
						[3]	Label  (id=10549)	
						[4]	Label  (id=10550)	
						[5]	Label  (id=10551)	
						[6]	Label  (id=10554)	
					modCount	7	
					size	7	
				data	Object[2]  (id=10543)	
					[0]	DetachableContactModel  (id=10401)	
					[1]	AttributeModifier  (id=10544)	
				flags	1074995354	
				generatedMarkupId	-1	
				id	"2" (id=10538)	
				index	1	
				markup	MarkupFragment  (id=10528)	
				markupSourcingStrategy	null	
				modCounter	7	
				parent	RefreshingPage$1  (id=10122)	
				queue	null	
				requestFlags	0	
		modCount	2	
		size	2	
	data	null	
	flags	1073946778	
	generatedMarkupId	-1	
	id	"view" (id=10393)	
	itemReuseStrategy	null	
	markup	MarkupFragment  (id=10528)	
	markupSourcingStrategy	null	
	modCounter	2	
	parent	RefreshingPage  (id=10123)	
	queue	null	
	requestFlags	17	
	this$0	RefreshingPage  (id=10123)	
	val$contacts	ArrayList<E>  (id=10394)	
item	Item<T>  (id=10539)	

/ we zien dat de action panel dezelfde model heeft als de item , z'n parent,	 
/ in ons voorbeeld heeft de repeating view ook items, maar die hebben geen model
/ wordt in een refreshing view de item's model ook used	, of alleen die in de action panel	?
/ TODO





/ Einde REFRESHINGVIEW

/ DATAVIEW

/ Geef	,
http://localhost:9090/wicket-examples-step-by-step/repeater/wicket/bookmarkable/org.apache.wicket.examples.repeater.SimplePage

/ Een data view is een refreshing view	, 
public abstract class DataView<T> extends DataViewBase<T>
public abstract class DataViewBase<T> extends AbstractPageableView<T>
public abstract class AbstractPageableView<T> extends RefreshingView<T> implements IPageableItems

/ 7	. 

/ DataView verschilt nauwelijks van RefreshingView	, 
/ behalve dat je geen list van Contacts geeft of een model met deze list als object, maar de IDataProvider	, 

public interface IDataProvider<T> extends IDetachable {
	Iterator<? extends T> iterator(long first, long count);
	long size();
	IModel<T> model(T object);
}

/ 7	. 

/ 13	. 

/ ModelIterator<T> is een Iterator<IModel<T>>	, want heeft IModel<T> next()  method	,
/ heeft items = iterator over Contacts	, 
/ je stelt het maken van de model uit	, in .next, calls IDataProvider.model	!  

/s
SimplePage$1(AbstractRepeater).onBeforeRender() line: 124	
		onPopulate();
/s
SimplePage$1(RefreshingView<T>).onPopulate() line: 93	
		Iterator<IModel<T>> models = getItemModels();			(+)				/ specifiek voor DataView,	
			/=ModelIterator<Contact> = iterator row models	, die straks in de row items komen	,
		Iterator<Item<T>> items = getItemReuseStrategy().getItems(newItemFactory(), models)	 /onveranderd
			/=new Iterator<Item<T>>()=neemt row model, en laat factory een row item maken bij (-)
		
		removeAll();		/ onveranderd	, 
		addItems(items);	/ onveranderd	,  (-)= factory sets row model in row item,  en laat children maken door te call RefreshingView.this.populateItem(item):
			protected void populateItem(final Item<Contact> item) {
				Contact contact = item.getModelObject();
				item.add(new ActionPanel("actions", item.getModel()));
				item.add(new Label("contactid", String.valueOf(contact.getId())));
				item.add(new Label("firstname", contact.getFirstName()));
				item.add(new Label("lastname", contact.getLastName()));
				item.add(new Label("homephone", contact.getHomePhone()));
				item.add(new Label("cellphone", contact.getCellPhone()));
				item.add(AttributeModifier.replace("class", new AbstractReadOnlyModel<String>() / behavior	,

/ Bij DataGridView is er een RepeatingView , en ColumnPopulators	, 
/ Bij DataView zijn er alleen row items, die de labels als children hebben	, 



/ (+)
/ er moet een iterator komen die de models levert	,

	private static final class ModelIterator<T> implements Iterator<IModel<T>>
		private final Iterator<? extends T> items;

		public ModelIterator(IDataProvider<T> dataProvider, long offset, long count)
		{
			this.dataProvider = dataProvider;
			max = count;

			items = count > 0 ? dataProvider.iterator(offset, count) : null;	/ (*)
							/ .iterator is ook 1 van de methods van IDataProvider, maar we zien dat hij 
							/ een iterator over Contacts geeft	, met IDataProvider.model wordt later in .nextvoor 
							/ ieder contact een model create	, 
		}
		@Override
		public IModel<T> next()
		{
			index++;
			return dataProvider.model(items.next());	/ (**) .model: precies de mth die een IDataPrvider moet hebben	,
		}
/s
public class ContactDataProvider implements IDataProvider<Contact>
	@Override
	public Iterator<Contact> iterator(long first, long count)	/ (*)
	{
		return getContactsDB().find(first, count, new SortParam<String>("firstName", true))
			.iterator();
	}
	@Override
	public IModel<Contact> model(Contact object)		/ (**)
	{
		return new DetachableContactModel(object);
	}




/ Einde DATAVIEW

/ GRIDVIEW 

/ Geef	,
http://localhost:9090/wicket-examples-step-by-step/repeater/wicket/bookmarkable/org.apache.wicket.examples.repeater.GridViewPage

/ schrijft de (first name van de ) contacts vlnr vbno , je moet aantal rows en columns geven	, 
/ dus als contacts: a b c d e f g h i j k l	, en er zijn 4 rows en 3 columns	, dan	,
/ dan 
a b c 
d e f 
g h i 
j k l 

/ Einde GRIDVIEW 

/ DATAGRIDVIEW

http://localhost:9090/wicket-examples-step-by-step/repeater/wicket/bookmarkable/org.apache.wicket.examples.repeater.DataGridPage

/ 7	. 

public class DataGridView<T> extends AbstractDataGridView<T>	/ uit extensions	,
public abstract class AbstractDataGridView<T> extends DataViewBase<T>	/ populators	, uit extensions
public abstract class DataViewBase<T> extends AbstractPageableView<T>	/ data provider en  ModelIterator, die  calls data provider's .iterator, .model , die de model creates	,
public abstract class AbstractPageableView<T> extends RefreshingView<T> implements IPageableItems

/ s
DataGridPage.<init>() line: 48	
		add(new DataGridView<>("rows", columns, new SortableContactDataProvider()));

/ Intermezzo

public class SortableContactDataProvider extends SortableDataProvider<Contact, String> implements IFilterStateLocator<ContactFilter>
/e
public abstract class SortableDataProvider<T, S> implements ISortableDataProvider<T, S>
/e
public interface ISortableDataProvider<T, S> extends IDataProvider<T>, ISortStateLocator<S>

/ we hadden	,
public class ContactDataProvider implements IDataProvider<Contact>

/ Einde Intermezzo

/c
DataGridView<T>.<init>(String, List<ICellPopulator<T>>, IDataProvider<T>) line: 84	
		super(id, populators, dataProvider);
id="view"
/s
DataGridView<T>(AbstractDataGridView<T>).<init>(String, List<ICellPopulator<T>>, IDataProvider<T>) line: 64	
->		super(id, dataProvider);
		this.populators = populators;
/s
DataGridView<T>(DataViewBase<T>).<init>(String, IDataProvider<T>) line: 57	
->		super(id);
		this.dataProvider = Args.notNull(dataProvider, "dataProvider");

/c

/ Hetzelfde als in DataView	,

DataGridView<T>(RefreshingView<T>).onPopulate() line: 93	
->		Iterator<IModel<T>> models = getItemModels();
		Iterator<Item<T>> items = getItemReuseStrategy().getItems(newItemFactory(), models,
			getItems());
		removeAll();
		addItems(items);
/s
DataGridView<T>(AbstractPageableView<T>).getItemModels() line: 98	
		...
		Iterator<IModel<T>> models = getItemModels(offset, size);
/s
DataGridView<T>(DataViewBase<T>).getItemModels(long, long) line: 74	
		return new ModelIterator<T>(internalGetDataProvider(), offset, count);
/s
DataViewBase$ModelIterator<T>.<init>(IDataProvider<T>, long, long) line: 107	
			items = count > 0 ? dataProvider.iterator(offset, count) : null;

/ Intermezzo

/ er is ook	,

	private static final class ModelIterator<T> implements Iterator<IModel<T>>
		@Override public IModel<T> next() {
			index++;
			return dataProvider.model(items.next());
		}

/ Daarom is  ModelIterator<T> een Iterator<IModel<T>>

/ Einde Intermezzo

/s
SortableContactDataProvider.iterator(long, long) line: 57	
		List<Contact> contactsFound = getContactsDB().getIndex(getSort());
		return filterContacts(contactsFound).
			subList((int)first, (int)(first + count)).
			iterator();
	}
/t
DataViewBase$ModelIterator<T>.<init>(IDataProvider<T>, long, long) line: 107	
			items = count > 0 ? dataProvider.iterator(offset, count) : null;
/d
DataGridView<T>(AbstractPageableView<T>).getItemModels() line: 103	
		Iterator<IModel<T>> models = getItemModels(offset, size);
/d
		return models;

/c
DataGridView<T>(RefreshingView<T>).onPopulate() line: 97	
		Iterator<IModel<T>> models = getItemModels();
		Iterator<Item<T>> items = getItemReuseStrategy().getItems(newItemFactory(), models,
			getItems());
		removeAll();
/d
		addItems(items); 	/ zwengelt de ModelIterator aan	,
/s
DataGridView<T>(RefreshingView<T>).addItems(Iterator<Item<T>>) line: 189	
		while (items.hasNext())
		{
			Item<T> item = items.next();
/s
DefaultItemReuseStrategy$1.next() line: 74	
				IModel<T> model = newModels.next();
/s
DataViewBase$ModelIterator<T>.next() line: 135		/ 2de data provider method call, op .model	, 
													/ dat ModelIterator een Iterator<Model<T>> maakt,	
			index++;
			return dataProvider.model(items.next());	/ items in ModelIterator is list van contacts	,
/s
SortableContactDataProvider.model(Contact) line: 105	
		return new DetachableContactModel(object);

/c
RefreshingView$1.newItem(int, IModel<T>) line: 113	
/=
	protected IItemFactory<T> newItemFactory()
	{
		return new IItemFactory<T>()
		{
			@Override
			public Item<T> newItem(int index, IModel<T> model)
			{
				String id = RefreshingView.this.newChildId();
->				Item<T> item = RefreshingView.this.newItem(id, index, model);
				RefreshingView.this.populateItem(item);

/s
DataGridView<T>(AbstractDataGridView<T>).newItem(String, int, IModel<T>) line: 99	/ uit extensions	,	
		return newRowItem(id, index, model);

/ Maar is uiteindelijk toch hetzelfde als RefreshingView.newItem	,

/ Intermezzo

/ Eerst	, 
public abstract class RefreshingView<T> extends RepeatingView
	protected Item<T> newItem(final String id, int index, final IModel<T> model)
	{
		return new Item<>(id, index, model);
	}

/ en dan 
				RefreshingView.this.populateItem(item);
/ die 	, 

			item.add(new ActionPanel("actions", new DetachableContactModel(contact)));
			item.add(new Label("contactid", String.valueOf(contact.getId())));
			item.add(new Label("firstname", contact.getFirstName()));
			item.add(new Label("lastname", contact.getLastName()));
			item.add(new Label("homephone", contact.getHomePhone()));
			item.add(new Label("cellphone", contact.getCellPhone()));

/ en item heeft template van parent	, 
	<tr wicket:id="view">
		<td><span wicket:id="actions">[actions]</span></td>
		<td><span wicket:id="contactid">[contactid]</span> </td>
		<td><span wicket:id="firstname">[firstname]</span></td>
		<td><span wicket:id="lastname">[lastname]</span></td>
		<td><span wicket:id="homephone">[homephone]</span></td>
		<td><span wicket:id="cellphone">[cellphone]</span></td>
	</tr>

/ Dus we add de action panel en labels aan de item	, 

/ Einde Intermezzo

/s
DataGridView<T>(AbstractDataGridView<T>).newRowItem(String, int, IModel<T>) line: 119	
		return new Item<>(id, index, model);

/ Dus toch	, 

/t
RefreshingView$1.newItem(int, IModel<T>) line: 114	
				String id = RefreshingView.this.newChildId();
				Item<T> item = RefreshingView.this.newItem(id, index, model);
/d
				RefreshingView.this.populateItem(item);
/s
DataGridView<T>(AbstractDataGridView<T>).populateItem(Item<T>) line: 145		/ uit extensions	, 
		RepeatingView cells = new RepeatingView(CELL_REPEATER_ID);
		item.add(cells);
		int populatorsNumber = populators.size();
		for (int i = 0; i < populatorsNumber; i++)
		{
			ICellPopulator<T> populator = populators.get(i);
populator	PropertyPopulator<T>  (id=14149)	
	property	"id" (id=14209)	
			IModel<ICellPopulator<T>> populatorModel = new Model<>(populator);
			Item<ICellPopulator<T>> cellItem = newCellItem(cells.newChildId(), i, populatorModel);
/s
DataGridView<T>(AbstractDataGridView<T>).newCellItem(String, int, IModel<ICellPopulator<T>>) line: 93	
		return new Item<>(id, index, model);

/ Ook weer	, 

/t
DataGridView<T>(AbstractDataGridView<T>).populateItem(Item<T>) line: 154	


		RepeatingView cells = new RepeatingView(CELL_REPEATER_ID);
		item.add(cells);

item	Item<T>  (id=14203)	
	children	RepeatingView  (id=14206)	
	data	DetachableContactModel  (id=14193)	
		id	8	
		state	LoadableDetachableModel$InternalState  (id=14202)	
		transientModelObject	null	
	id	"2" (id=14201)	
	index	0	

		for (int i = 0; i < populatorsNumber; i++)
		{
			ICellPopulator<T> populator = populators.get(i);
			IModel<ICellPopulator<T>> populatorModel = new Model<>(populator);
			Item<ICellPopulator<T>> cellItem = newCellItem(cells.newChildId(), i, populatorModel);
/d
cellItem	Item<T>  (id=14219)	
	children	null	
	data	Model<T>  (id=14214)	
		object	PropertyPopulator<T>  (id=14149)	
			property	"id" (id=14209)	
	id	"1" (id=14194)	
	index	0	

			cells.add(cellItem);
			populator.populateItem(cellItem, CELL_ITEM_ID, item.getModel());
/s
PropertyPopulator<T>.populateItem(Item<ICellPopulator<T>>, String, IModel<T>) line: 75	
		cellItem.add(new Label(componentId, new PropertyModel<>(rowModel, property)));

//////////////////////////////////////////////////////
/ Maakt dus altijd een Label	, 


cellItem	Item<T>  (id=14219)	
	children	Label  (id=14278)	
		data	PropertyModel<T>  (id=14279)	
			expression	"id" (id=14209)	
			target	DetachableContactModel  (id=14193)	
				id	8	
				state	LoadableDetachableModel$InternalState  (id=14202)	
				transientModelObject	null	
		id	"cell" (id=14277)	
	data	Model<T>  (id=14214)	
		object	PropertyPopulator<T>  (id=14149)	
			property	"id" (id=14209)	
	id	"1" (id=14194)	
	index	0	

/t
DataGridView<T>(AbstractDataGridView<T>).populateItem(Item<T>) line: 158	
		for (int i = 0; i < populatorsNumber; i++)
		{
			ICellPopulator<T> populator = populators.get(i);
			IModel<ICellPopulator<T>> populatorModel = new Model<>(populator);
			Item<ICellPopulator<T>> cellItem = newCellItem(cells.newChildId(), i, populatorModel);
			cells.add(cellItem);

			populator.populateItem(cellItem, CELL_ITEM_ID, item.getModel());
/d
...
/t
DataGridView<T>(AbstractRepeater).onBeforeRender() line: 126	
		onPopulate();
/d

/ de views zelf hebben geen models, de items wel,
/ de row items hebben als model de contacts
/ de row items hebben 1 child: een repeating view
/ de column items hebben als model de property uit de property column,
/ de column items hebben 1 child: een label
/ de label heeft een property model die combineert de models uit de row item en die uit de column item	, 



this	DataGridView<T>  (id=7607)			/ is RefreshingView	,	
	data	null	
	children	LinkedMap<K,V>  (id=7618)	
		data	AbstractHashedMap$HashEntry<K,V>[128]  (id=7622)	
			[0...99]	
				[7]	AbstractLinkedMap$LinkEntry<K,V>  (id=7626)	
					value	Item<T>  (id=7666)							/  row item	,
						data	DetachableContactModel  (id=7668)	
							id	6	
							state	LoadableDetachableModel$InternalState  (id=7670)	
							transientModelObject	null	
						children	RepeatingView  (id=7667)	/ row item heeft 1 child	
							data	null	
							children	ArrayList<E>  (id=7671)	
								elementData	Object[12]  (id=7674)	
									[0]	Item<T>  (id=7675)				/ column item	,
										data	Model<T>  (id=7681)	
											object	PropertyPopulator<T>  (id=7686)	
												property	"id" (id=7687)	
										children	Label  (id=7680)	/ column item heeft 1 child	,
											data	PropertyModel<T>  (id=7688)	
												expression	"id" (id=7687)	
												target	DetachableContactModel  (id=7668)/ from the Item,	
											id	"cell" (id=7689)	
											parent	Item<T>  (id=7675)	
										id	"1" (id=7682)	
										parent	RepeatingView  (id=7667)	
									[1]	Item<T>  (id=7676)	
									[2]	Item<T>  (id=7677)	
									[3]	Item<T>  (id=7678)	
									[4]	Item<T>  (id=7679)	
								size	5	
							id	"cells" (id=7672)	
							parent	Item<T>  (id=7666)	
						id	"22" (id=7665)	
						parent	DataGridView<T>  (id=7607)	
				[12]	AbstractLinkedMap$LinkEntry<K,V>  (id=7627)	
				...
				[123]	AbstractLinkedMap$LinkEntry<K,V>  (id=7722)	
		size	50	
	dataProvider	SortableContactDataProvider  (id=7619)	
	id	"rows" (id=7620)	
	parent	DataGridPage  (id=7595)	
	populators	ArrayList<E>  (id=7721)	
		elementData	Object[10]  (id=7748)	
			[0]	PropertyPopulator<T>  (id=7686)	
				property	"id" (id=7687)	
			[1]	PropertyPopulator<T>  (id=7749)	
				property	"firstName" (id=7753)	
			[2]	PropertyPopulator<T>  (id=7750)	
				property	"lastName" (id=7754)	
			[3]	PropertyPopulator<T>  (id=7751)	
				property	"homePhone" (id=7755)	
			[4]	PropertyPopulator<T>  (id=7752)	
				property	"cellPhone" (id=7756)	
		size	5	




/ RESOLVE PROPERTY MODEL IN LABEL IN ITEM IN REPEATINGVIEW IN REFRESHINGVIEW IN DATAGRIDVIEW	,
/c
/ stack	,
	PropertyModel<T>(AbstractPropertyModel<T>).getObject() line: 72	
	Label(Component).getDefaultModelObject() line: 1626	
	Label(Component).getDefaultModelObjectAsString() line: 1654	
	Label.onComponentTagBody(MarkupStream, ComponentTag) line: 115	
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
	Label(Component).internalRenderComponent() line: 2565	
	Label(WebComponent).onRender() line: 60	
	Label(Component).internalRender() line: 2380	
	Label(Component).render() line: 2308	
	Item<T>(MarkupContainer).renderNext(MarkupStream) line: 1524	
	Item<T>(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	Item<T>(MarkupContainer).renderComponentTagBody(MarkupStream, ComponentTag) line: 1734	
	Item<T>(MarkupContainer).onComponentTagBody(MarkupStream, ComponentTag) line: 1657	
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
	Item<T>(Component).internalRenderComponent() line: 2565	
	Item<T>(MarkupContainer).onRender() line: 1698	
	Item<T>(Component).internalRender() line: 2380	
	Item<T>(Component).render() line: 2308	
	RepeatingView(AbstractRepeater).renderChild(Component) line: 115	
	RepeatingView(AbstractRepeater).onRender() line: 102	
	RepeatingView(Component).internalRender() line: 2380	
	RepeatingView(Component).render() line: 2308	
	Item<T>(MarkupContainer).renderNext(MarkupStream) line: 1524	
	Item<T>(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	Item<T>(MarkupContainer).renderComponentTagBody(MarkupStream, ComponentTag) line: 1734	
	Item<T>(MarkupContainer).onComponentTagBody(MarkupStream, ComponentTag) line: 1657	
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
	Item<T>(Component).internalRenderComponent() line: 2565	
	Item<T>(MarkupContainer).onRender() line: 1698	
	Item<T>(Component).internalRender() line: 2380	
	Item<T>(Component).render() line: 2308	
	DataGridView<T>(AbstractRepeater).renderChild(Component) line: 115	
	DataGridView<T>(AbstractRepeater).onRender() line: 102	
	DataGridView<T>(Component).internalRender() line: 2380	
	DataGridView<T>(Component).render() line: 2308	
	DataGridPage(MarkupContainer).renderNext(MarkupStream) line: 1524	
	DataGridPage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	DataGridPage(Page).onRender() line: 879	
	DataGridPage(WebPage).onRender() line: 141	
	DataGridPage(Component).internalRender() line: 2380	
	DataGridPage(Component).render() line: 2308	
	DataGridPage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/debug	,
/s
PropertyModel<T>(AbstractPropertyModel<T>).getObject() line: 72	
		final String expression = propertyExpression();
"id"
		final Object target = getInnermostModelOrObject();
/s
PropertyModel<T>(AbstractPropertyModel<T>).getInnermostModelOrObject() line: 261	
		Object object = getTarget();
object	DetachableContactModel  (id=14193)	
	id	8	
	transientModelObject	null	
/ Model van de row item	,

		while (object instanceof IModel)
		{
			Object tmp = ((IModel<?>)object).getObject();
/s
DetachableContactModel(LoadableDetachableModel<T>).getObject() line: 129	
			transientModelObject = load();
/s
DetachableContactModel.load() line: 97	
		// loads contact from the database
		return getContactsDB().get(id);
/t
PropertyModel<T>(AbstractPropertyModel<T>).getInnermostModelOrObject() line: 265	
		while (object instanceof IModel)
		{
			Object tmp = ((IModel<?>)object).getObject();
/d
tmp	Contact  (id=14447)	
			object = tmp;
		while (object instanceof IModel)
/n
		return object;
/t
PropertyModel<T>(AbstractPropertyModel<T>).getObject() line: 86	
		final Object target = getInnermostModelOrObject();
target	Contact  (id=14447)	
			return (T)PropertyResolver.getValue(expression, target);
/s
PropertyResolver.getValue(String, Object) line: 99	
		ObjectAndGetSetter getter = getObjectAndGetSetter(expression, object, RETURN_NULL);
/s
PropertyResolver.getObjectAndGetSetter(String, Object, int, Class<?>) line: 351	
		IGetAndSet getAndSetter = getGetAndSetter(exp, clz);
getAndSetter	PropertyResolver$MethodGetAndSet  (id=14457)	
	field	Field  (id=14461)	
private long org.apache.wicket.examples.repeater.Contact.id
	getMethod	Method  (id=14462)	
public long org.apache.wicket.examples.repeater.Contact.getId()
	setMethod	Method  (id=14463)	

		return new ObjectAndGetSetter(getAndSetter, value);
value	Contact  (id=14447)	
/t
PropertyResolver.getValue(String, Object) line: 110	
		ObjectAndGetSetter getter = getObjectAndGetSetter(expression, object, RETURN_NULL);
/d
		return getter.getValue();
/s
PropertyResolver$ObjectAndGetSetter.getValue() line: 659	
			return getAndSetter.getValue(value);
/s
PropertyResolver$MethodGetAndSet.getValue(Object) line: 1154	
				ret = getMethod.invoke(object, (Object[])null);
ret	Long  (id=14486)	
8

























/ Einde DATAGRIDVIEW



/ Einde WICKET REPEATERS

/ WICKET SOURCE GIT

/ 7	. 

/ eclipse	, 
/ ws wicket7_4

/ we hebben , 
[eric@localhost wicket]$ git checkout wicket-7.1.0

/ in eclipse we zien error in root pom.xml
Failure to transfer org.apache.maven.plugins:maven-plugins:pom:27 from http://repo.maven.apache.org/maven2 was cached in the local repository, resolution will not be reattempted until the update interval of central has elapsed or updates are forced. Original error: Could not transfer artifact org.apache.maven.plugins:maven-plugins:pom:27 from/to central (http://repo.maven.apache.org/maven2): The operation was cancelled.

/ google
Failure to transfer org.apache.maven.plugins:maven-plugins:pom:27 from http://repo.maven.apache.org/maven2 was cached in the local repository
/ lees	,
http://stackoverflow.com/questions/5074063/maven-error-failure-to-transfer

[eric@localhost bin]$ vi ~/.m2/settings.xml 

  <activeProfiles>
    <!-- Optionally, make the repositories active by default -->
<!--
    <activeProfile>jboss-ga-repository</activeProfile>
    <activeProfile>jboss-earlyaccess-repository</activeProfile>
-->
  </activeProfiles>

[eric@localhost bin]$ find ~/.m2  -name "*.lastUpdated" -exec grep -q "Could not transfer" {} \;
/ NIETS
/ Op stackoverflow	,
find ~/.m2  -name "*.lastUpdated" -exec grep -q "Could not transfer" {} \; -print -exec rm {} \;
/ TODO

/ We hebben WEL in eclipse in run config 'wicket-clean' checked
Update snapshots
/ TODO
/ MISSCHIEN	 dat dit geholpen heeft	, 
/ in eclipse als je option wilt geven, gewoon achter de goal, 
Goals: clean -U

[eric@localhost wicket]$ git checkout wicket-7.1.0
/ en refresh in eclipse

/ Nu kunnen we unit tests exec, bijv in 
/wicket-examples/src/test/java/org/apache/wicket/examples/repeater/RepeaterTest.java


/ Lees	,
http://stackoverflow.com/questions/9529497/what-is-origin-in-git
http://stackoverflow.com/questions/10312521/how-to-fetch-all-git-branches	 <-
https://git-scm.com/book/en/v2/Git-Basics-Getting-a-Git-Repository
http://stackoverflow.com/questions/67699/how-to-clone-all-remote-branches-in-git <-





/ Einde WICKET SOURCE GIT

/ GIT 

git checkout -b newbranch v1.0

/ als we een tag checkout	, kunnen we NIET git pull	, we moeten op een branch	,
/ TODO

/ Einde GIT

/ WICKET APPLICATION

/ ws wicket7_5
/ deploy wicket-examples-step-by-step
/ we deploy verschillende applications, waaronder repeater

/s
WicketFilter.init(FilterConfig) line: 353	
		init(false, filterConfig);

/ we vallen hier in voor elke wicket application	,

filterConfig	ApplicationFilterConfig  (id=9451)	
	filterDef	FilterDef  (id=9452)	
		filterName	"HelloWorldApplication" (id=10426)	
/c
filterConfig	ApplicationFilterConfig  (id=10458)	
	filterDef	FilterDef  (id=10459)	
		filterName	"AjaxApplication" (id=10461)	
/c
filterConfig	ApplicationFilterConfig  (id=10467)	
	filterDef	FilterDef  (id=10468)	
		filterName	"MediaApplication" (id=10470)	
/c
filterConfig	ApplicationFilterConfig  (id=10477)	
	filterDef	FilterDef  (id=10478)	
		filterName	"RepeaterExamplesApplication" (id=10480)	

/ in deze laatste step we in	,

/ Intermezzo

/s
	WicketFilter.init(FilterConfig) line: 353	
	ApplicationFilterConfig.initFilter() line: 279	
	ApplicationFilterConfig.getFilter() line: 260	
	ApplicationFilterConfig.<init>(Context, FilterDef) line: 105	
	StandardContext.filterStart() line: 4583	
->           for (Entry<String,FilterDef> entry : filterDefs.entrySet()) {
                String name = entry.getKey();
                if (getLogger().isDebugEnabled()) {
                    getLogger().debug(" Starting filter '" + name + "'");
                }
                try {
->                    ApplicationFilterConfig filterConfig =
                            new ApplicationFilterConfig(this, entry.getValue());
/cb
	StandardContext.startInternal() line: 5207	
	StandardContext(LifecycleBase).start() line: 150	
	StandardHost(ContainerBase).addChildInternal(Container) line: 725	
	StandardHost(ContainerBase).addChild(Container) line: 701	
	StandardHost.addChild(Container) line: 717	
	HostConfig.deployWAR(ContextName, File) line: 945	
	HostConfig.deployApps(String) line: 466	
	HostConfig.check(String) line: 1586	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 57	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 606	
	BaseModelMBean.invoke(String, Object[], String[]) line: 300	
	DefaultMBeanServerInterceptor.invoke(ObjectName, String, Object[], String[]) line: 819	
	JmxMBeanServer.invoke(ObjectName, String, Object[], String[]) line: 801	
	ManagerServlet.check(String) line: 1460	
	ManagerServlet.deploy(PrintWriter, ContextName, String, boolean, HttpServletRequest, StringManager) line: 733	
	ManagerServlet.doPut(HttpServletRequest, HttpServletResponse) line: 432	
	ManagerServlet(HttpServlet).service(HttpServletRequest, HttpServletResponse) line: 651	
	ManagerServlet(HttpServlet).service(ServletRequest, ServletResponse) line: 729	
	ApplicationFilterChain.internalDoFilter(ServletRequest, ServletResponse) line: 291	
	ApplicationFilterChain.doFilter(ServletRequest, ServletResponse) line: 206	
	WsFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 52	
	ApplicationFilterChain.internalDoFilter(ServletRequest, ServletResponse) line: 239	
	ApplicationFilterChain.doFilter(ServletRequest, ServletResponse) line: 206	
	SetCharacterEncodingFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 108	
	ApplicationFilterChain.internalDoFilter(ServletRequest, ServletResponse) line: 239	
	ApplicationFilterChain.doFilter(ServletRequest, ServletResponse) line: 206	
	StandardWrapperValve.invoke(Request, Response) line: 217	
	StandardContextValve.invoke(Request, Response) line: 106	
	BasicAuthenticator(AuthenticatorBase).invoke(Request, Response) line: 614	
	StandardHostValve.invoke(Request, Response) line: 142	
	ErrorReportValve.invoke(Request, Response) line: 79	
	AccessLogValve(AbstractAccessLogValve).invoke(Request, Response) line: 616	
	StandardEngineValve.invoke(Request, Response) line: 88	
	CoyoteAdapter.service(Request, Response) line: 518	
	Http11NioProcessor(AbstractHttp11Processor<S>).process(SocketWrapper<S>) line: 1091	
	Http11NioProtocol$Http11ConnectionHandler(AbstractProtocol$AbstractConnectionHandler<S,P>).process(SocketWrapper<S>, SocketStatus) line: 673	
	NioEndpoint$SocketProcessor.doRun() line: 1500	
	NioEndpoint$SocketProcessor.run() line: 1456	
	ThreadPoolExecutor(ThreadPoolExecutor).runWorker(ThreadPoolExecutor$Worker) line: 1145	
	ThreadPoolExecutor$Worker.run() line: 615	
	TaskThread$WrappingRunnable.run() line: 61	
	TaskThread(Thread).run() line: 745	


$ less WEB-INF/web.xml

<web-app ...>

 <filter>
    <filter-name>RepeaterExamplesApplication</filter-name>
    <filter-class>org.apache.wicket.protocol.http.WicketFilter</filter-class>
    <init-param>
      <param-name>applicationClassName</param-name>
      <param-value>org.apache.wicket.examples.repeater.RepeaterApplication</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>RepeaterExamplesApplication</filter-name>
    <url-pattern>/repeater/*</url-pattern>
    <dispatcher>REQUEST</dispatcher>
    <dispatcher>INCLUDE</dispatcher>
  </filter-mapping>

</web-app>

/ Einde Intermezzo

/ in meer detail	,
filterConfig	ApplicationFilterConfig  (id=8037)	
	filterDef	FilterDef  (id=9094)	
		filterClass	"org.apache.wicket.protocol.http.WicketFilter" (id=9154)	
		filterName	"RepeaterExamplesApplication" (id=9121)	
		parameters	HashMap<K,V>  (id=9155)	
			table	HashMap$Entry<K,V>[16]  (id=9161)	
				[11]	HashMap$Entry<K,V>  (id=9165)	
					key	"applicationClassName" (id=9167)	
					value	"org.apache.wicket.examples.repeater.RepeaterApplication" (id=9151)	

/s
WicketFilter.init(boolean, FilterConfig) line: 387	
			// locate application instance unless it was already specified during construction
			if (application == null)
/j
			{
				applicationFactory = getApplicationFactory();
this	WicketFilter  (id=8036)	
	applicationFactory	ContextParamWebApplicationFactory  (id=8035)	

				application = applicationFactory.createApplication(this);
/s
ContextParamWebApplicationFactory.createApplication(WicketFilter) line: 38	
		final String applicationClassName = filter.getFilterConfig().getInitParameter(
			APP_CLASS_PARAM);
APP_CLASS_PARAM="applicationClassName"
org.apache.wicket.examples.repeater.RepeaterApplication

		return createApplication(applicationClassName);
/s
ContextParamWebApplicationFactory.createApplication(String) line: 76	
				// Construct WebApplication subclass
				return (WebApplication)applicationClass.newInstance();

/ bij de 1ste WebApplication,
/s
Application.<clinit>() line: 175	
	/**
	 * Applications keyed on the {@link #getApplicationKey()} so that they can be retrieved even
	 * without being in a request/ being set in the thread local (we need that e.g. for when we are
	 * in a destruction thread).
	 */
	private static final Map<String, Application> applicationKeyToApplication = Generics.newHashMap(1);

	/** Log. */
	private static final Logger log = LoggerFactory.getLogger(Application.class);
	private static final String META_INF_WICKET_PATH = File.separatorChar+ "META-INF" + File.separatorChar + "wicket" + File.separatorChar;
/n
WebApplication.<clinit>() line: 135	


/s
ContextParamWebApplicationFactory.createApplication(String) line: 65	
			final Class<?> applicationClass = Class.forName(applicationClassName, false, loader);
class org.apache.wicket.examples.repeater.RepeaterApplication
				return (WebApplication)applicationClass.newInstance();
/s
RepeaterApplication.<init>() line: 39	
	private final ContactsDatabase contactsDB = new ContactsDatabase(50);

/t
WicketFilter.init(boolean, FilterConfig) line: 390	
				application = applicationFactory.createApplication(this);
/pd
/s
RepeaterApplication.<init>() line: 39	
/s
RepeaterApplication(WebApplication).<init>() line: 186	
/s
RepeaterApplication(Application).<init>() line: 273	
	/** list of initializers. */
	private final List<IInitializer> initializers = Generics.newArrayList();
...
/ TODO afmaken

/T
WicketFilter.init(boolean, FilterConfig) line: 392	
				application = applicationFactory.createApplication(this);
/d
this	WicketFilter  (id=10476)	
	application	RepeaterApplication  (id=10492)	
		ajaxRequestTargetListeners	AjaxRequestTargetListenerCollection  (id=10537)	
		ajaxRequestTargetProvider	null	
		applicationListeners	ApplicationListenerCollection  (id=10538)	
		applicationSettings	null	
		behaviorInstantiationListeners	BehaviorInstantiationListenerCollection  (id=10540)	
		componentInitializationListeners	ComponentInitializationListenerCollection  (id=10541)	
		componentInstantiationListeners	ComponentInstantiationListenerCollection  (id=10542)	
		componentOnAfterRenderListeners	ComponentOnAfterRenderListenerCollection  (id=10543)	
		componentOnConfigureListeners	ComponentOnConfigureListenerCollection  (id=10544)	
		componentPostOnBeforeRenderListeners	ComponentOnBeforeRenderListenerCollection  (id=10545)	
		componentPreOnBeforeRenderListeners	ComponentOnBeforeRenderListenerCollection  (id=10546)	
		configurationType	null	
		contactsDB	ContactsDatabase  (id=10547)	
		converterLocator	null	
		debugSettings	null	
		encoderContext	null	
		exceptionMapperProvider	null	
		exceptionSettings	null	
		filterFactoryManager	null	
		frameworkSettings	null	
		headerContributorListeners	HeaderContributorListenerCollection  (id=10549)	
		headerResponseDecorator	null	
		initializers	ArrayList<E>  (id=10550)	
		javaScriptLibrarySettings	null	
		markupSettings	null	
		metaData	null	
		name	null	
		pageFactory	null	
		pageManager	null	
		pageManagerContext	DefaultPageManagerContext  (id=10551)	
		pageManagerProvider	null	
		pageRendererProvider	null	
		pageSettings	null	
		requestCycleListeners	RequestCycleListenerCollection  (id=10552)	
		requestCycleProvider	null	
		requestCycleSettings	null	
		requestLogger	null	
		requestLoggerSettings	null	
		resourceBundles	null	
		resourceReferenceRegistry	null	
		resourceSettings	null	
		rootRequestMapper	null	
		securitySettings	null	
		servletContext	null	
		sessionAttributePrefix	null	
		sessionListeners	SessionListenerCollection  (id=10553)	
		sessionStore	null	
		sessionStoreProvider	null	
		settingsAccessible	false	
		sharedResources	null	
		storedResponses	StoredResponsesMap  (id=10554)	
		storeSettings	null	
		wicketFilter	null	

				application.setName(filterConfig.getFilterName());



/ Einde WICKET APPLICATION

/ WICKET

/ ws wicket7_5
/ proj wicket-examples-step-by-step

/ 7	. 

/ we kunnen op 2 manieren het model van een label write	,

public class PnlPanel extends Panel {
	Integer count=new Integer(0);
	private Label label;
	public PnlPanel(String id) {
		super(id);
		IModel<Integer>m=new PropertyModel<Integer>(this, "count");
		label=new Label("label",m);
		add(label);
		AjaxLink<Void>link=new AjaxLink<Void>("link") {
			@Override
			public void onClick(AjaxRequestTarget target) {
				count++;
			}
		};
		add(link);

	}
}

/ of	,

public class PnlPanel extends Panel {
	Integer count=new Integer(0);
	private Label label;
	public PnlPanel(String id) {
		super(id);
		IModel<Integer>m2=new Model<Integer>();
		label=new Label("label",m2);
		add(label);
		AjaxLink<Void>link=new AjaxLink<Void>("link") {
			@Override
			public void onClick(AjaxRequestTarget target) {
				count++;
				label.setDefaultModelObject(count);
			}
		};
		add(link);

	}
}

/ we maken de test, die in beide gevallen werkt	,

public class PnlTest {
	
	private WicketTester wicketTester;
	@Before
	public void init(){
		wicketTester=new WicketTester();
	}
	@Test
	public void test3(){
		wicketTester.startPage(new PnlPage());
		wicketTester.assertRenderedPage(PnlPage.class);
		wicketTester.assertEnabled("panel:link");
		AjaxLink<Void> link=(AjaxLink<Void>) wicketTester.getComponentFromLastRenderedPage("panel:link");
		wicketTester.clickLink(link);
		Integer i=(Integer)wicketTester.getComponentFromLastRenderedPage("panel:label").getDefaultModelObject();
		Assert.assertEquals(Integer.valueOf(1), i);
	}
}

/ lees	,
http://stackoverflow.com/questions/22374650/mock-a-parent-class-in-a-child-class-with-mockito

/ 7	. 

/ we refactor PnlPage	, en maken meerdere tests	,

/ we maken een mock van PnlPanel, maar dat geeft op dit moment ERR
/ we moeten meer doen	,
/ TODO 

/ we refactor PnlPanel, en willen de model van de label veranderen	, 
/ we maken daarom een spy van de panel, en mock dat label een ander model krijgt	, 
/ we wilden eerst een set label method mock, maar void methods kan je niet mock op een spy	,
/ TODO

/ we moeten corrigeren dat de children van de panel als parent de spy krijgen	, 
/ dat kan op 2 manieren	, 

		Iterator<Component>iterator=panel.iterator();
		while(iterator.hasNext()){
			iterator.next().setParent(spy);
		}
// or	,
		panel.visitChildren(new IVisitor<Component, Void>() {
			@Override
			public void component(Component object, IVisit<Void> visit) {
				object.setParent(spy);
				
			}
		});

$ vi PnlPage.java

public class PnlPage extends WebPage {
	public PnlPage() {
		this(new PnlPanel("panel"));
	}
	public PnlPage(Panel panel){
		add(panel);
	}
}

/ 1313	.

/ maar toch is het NIET OK	, 
want	,
$ vi PnlTest.java

		PnlPanel panel=new PnlPanel("panel");
		final PnlPanel spy=Mockito.spy(panel);
		...
		Mockito.when(spy.getModel()).thenReturn(model);
/ in new PnlPanel("panel") is 
		label=new Label("label",getModel());
/ dus het model van het label is al set	, dus when(spy.getModel()) heeft geen zin	,

/ 1313


$ vi PnlPanel.java

public class PnlPanel extends Panel {
	Integer count=new Integer(0);
	private Label label;
	public PnlPanel(String id) {
		super(id);
		AjaxLink<Void>link=new AjaxLink<Void>("link") {
			@Override
			public void onClick(AjaxRequestTarget target) {
				count++;			}
		};
		add(link);
		label=new Label("label",getModel());
		add(label);
	}
	public IModel<Integer> getModel(){
		return new PropertyModel<Integer>(this, "count");
		
	}
}

$ vi PnlTest.java

public class PnlTest {
	
	private WicketTester wicketTester;
	@Before
	public void init(){
		wicketTester=new WicketTester();
	}

	@Test@Ignore//TODO ERR
	public void test5(){
		Panel panel=Mockito.mock(PnlPanel.class);
		wicketTester.startPage(new PnlPage(panel));
	}	

	Integer count=new Integer(7);
	@Test
	public void test6(){
		PnlPanel panel=new PnlPanel("panel");
		final PnlPanel spy=Mockito.spy(panel);

//		Iterator<Component>iterator=panel.iterator();
//		while(iterator.hasNext()){
//			iterator.next().setParent(spy);
//		}
// or	,
		panel.visitChildren(new IVisitor<Component, Void>() {
			@Override
			public void component(Component object, IVisit<Void> visit) {
				object.setParent(spy);
				
			}
		});
		IModel<Integer>model=new PropertyModel<Integer>(this, "count");
		Mockito.when(spy.getModel()).thenReturn(model);
		wicketTester.startPage(new PnlPage(spy)); 


/ we maken een spy van de panel	, 
/ 
/ maar dan moeten we wel correct dat de children van de panel als parent de spy krijgen	,

/ 13	. 

/ we proberen het panel te mock	,


$ vi PnlPanel.java

public class PnlPanel extends Panel {
	Integer count=new Integer(0);
	public PnlPanel(String id) {
		super(id);
		add(getLink());
		add(getLabel());
	}
	public AjaxLink<Void>getLink(){
		AjaxLink<Void>link=new AjaxLink<Void>("link") {
			@Override
			public void onClick(AjaxRequestTarget target) {
			}
		};
		return link;
	}
	public Label getLabel(){
		Label label=new Label("label",getModel());
		return label;
	}
	public IModel<Integer> getModel(){
		return new PropertyModel<Integer>(this, "count");
		
	}
}

$ vi PnlTest.java

	public AjaxLink<Void>getLink(){
		AjaxLink<Void>link=new AjaxLink<Void>("link") {
			@Override
			public void onClick(AjaxRequestTarget target) {
			}
		};
		return link;
	}
	public Label getLabel(){
		Label label=new Label("label",getModel());
		return label;
	}
	public IModel<Integer> getModel(){
		return new PropertyModel<Integer>(this, "count");
		
	}
	Integer count=new Integer(7);
	
	@Test//TODO ERR
	public void test5(){
		PnlPanel panel=mock(PnlPanel.class);
		when(panel.getId()).thenReturn("panel");
		when(panel.getLink()).thenReturn(getLink());
		when(panel.getLabel()).thenReturn(getLabel());
		wicketTester.startPage(new PnlPage(panel));
	}	

/s
PnlPage(MarkupContainer).onInitialize() line: 1664	
this	PnlPage  (id=213)	
	children	ArrayList<E>  (id=246)	
		elementData	Object[12]  (id=254)	
			[0]	PnlPanel$MockitoMock$244803686  (id=197)	/ ons mocked panel	,
			[1]	HtmlHeaderContainer  (id=232)	
		size	2	
	data	null	

/c

public class HtmlHeaderContainer extends TransparentWebMarkupContainer
public class TransparentWebMarkupContainer extends WebMarkupContainer implements IComponentResolver
public class WebMarkupContainer extends MarkupContainer
public abstract class MarkupContainer extends Component implements Iterable<Component>

/s
/ stack	,
	HtmlHeaderContainer.<init>(String) line: 130	
		super(id);

	HtmlHeaderSectionHandler$1.newComponent(MarkupContainer, ComponentTag) line: 86	
/=
	private static final IAutoComponentFactory HTML_HEADER_FACTORY = new IAutoComponentFactory()
	{
		@Override
		public Component newComponent(MarkupContainer container, ComponentTag tag)
container	PnlPage  (id=213)	
tag	ComponentTag  (id=239)	 <head>
		{
			return new HtmlHeaderContainer(tag.getId());
tag.getId() __header__
/cb
	PnlPage(MarkupContainer).dequeueAutoComponents() line: 1679	
			for (ComponentTag tag = context.takeTag(); tag != null; tag = context.takeTag())
<head>
			{
				ComponentTag.IAutoComponentFactory autoComponentFactory = tag
					.getAutoComponentFactory();
				if (autoComponentFactory != null)
				{
->					queue(autoComponentFactory.newComponent(this, tag));
this	PnlPage  (id=213)	
tag	ComponentTag  (id=239)	 <head>
/cb
	PnlPage(MarkupContainer).onInitialize() line: 1664	
		super.onInitialize();
		dequeueAutoComponents();
/cb
	PnlPage(Page).onInitialize() line: 299	
this	org.apache.wicket.examples.repeater.PnlPage  (id=213)	
		super.onInitialize();
/cb
	PnlPage(Component).fireInitialize() line: 877	
	PnlPage(MarkupContainer).internalInitialize() line: 1084	
	PnlPage(Page).isPageStateless() line: 465	
	WebPageRenderer.isPageStateless() line: 287	
	WebPageRenderer.shouldRedirectToTargetUrl(RequestCycle, Url, Url) line: 305	
	WebPageRenderer.respond(RequestCycle) line: 201	
	BaseWicketTester$LastPageRecordingPageRendererProvider$1.respond(RequestCycle) line: 2747	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler, boolean) line: 718	
	WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler) line: 657	
	WicketTester(BaseWicketTester).startPage(IPageProvider) line: 887	
	WicketTester(BaseWicketTester).startPage(T) line: 904	
	PnlTest.test5() line: 87	

MarkupContainer.class
	/**
	 * Queues one or more components to be dequeued later. The advantage of this method over the
	 * {@link #add(Component...)} method is that the component does not have to be added to its
	 * direct parent, only to a parent upstream; it will be dequeued into the correct parent using
	 * the hierarchy defined in the markup. This allows the component hierarchy to be maintained only
	 * in markup instead of in markup and in java code; affording designers and developers more
	 * freedom when moving components in markup.
	 * 
	 * @param components
	 *             the components to queue
	 * @return {@code this} for method chaining             
	 */
	public MarkupContainer queue(Component... components)

/ Lees	,
https://ci.apache.org/projects/wicket/guide/7.x/guide/single.html#howToSource

Component Queueing To The Rescue
The idea behind component queueing is simple: instead of adding components to their parents directly, the developer can queue them in any ancestor and have Wicket automatically ‘dequeue’ them to the correct parent using the hierarchy defined in the markup. This will give us the best of both worlds: the developer only has to define the hierarchy once in markup, and have it automatically constructed in Java land.

/c
	PnlPage(MarkupContainer).children_get(String) line: 1184	
	PnlPage(MarkupContainer).get(String) line: 400	
	PnlPage(MarkupContainer).dequeue(DequeueContext) line: 2141	
	PnlPage(MarkupContainer).dequeuePreamble(DequeueContext) line: 2112	
dequeue	DequeueContext  (id=293)	
	containers	ArrayListStack<T>  (id=325)	
[[Page class = org.apache.wicket.examples.repeater.PnlPage, id = 0, render count = 0]]
	first	null	
	index	3	
	markup	Markup  (id=327)	
<!doctype html>
<html>
<head></head><body>
<div wicket:id="panel"></div>
</body>
</html>
	next	ComponentTag  (id=330)	
</head>
	skipFirst	false	
	tags	ArrayListStack<T>  (id=332)	
[<head>]

	PnlPage(MarkupContainer).dequeue() line: 2030	
		if (this instanceof IQueueRegion)
this=PnlPage
		{
			DequeueContext dequeue = newDequeueContext();
			dequeuePreamble(dequeue);
/cb
	PnlPage(MarkupContainer).queue(Component...) line: 2016	
/=
	public MarkupContainer queue(Component... components)
	{
		queue.add(components);
components=[[HtmlHeaderContainer [Component id = _header_]]]
		Page page = findPage();
		if (page != null)
		{
			dequeue();			
/cb
	PnlPage(MarkupContainer).dequeueAutoComponents() line: 1679	
/=
			for (ComponentTag tag = context.takeTag(); tag != null; tag = context.takeTag())
			{
				ComponentTag.IAutoComponentFactory autoComponentFactory = tag
					.getAutoComponentFactory();
				if (autoComponentFactory != null)
				{
->					queue(autoComponentFactory.newComponent(this, tag));
/ zonet waren we in autoComponentFactory.newComponent	, 
/ nu in queue	,
/cb
	PnlPage(MarkupContainer).onInitialize() line: 1664	
	PnlPage(Page).onInitialize() line: 299	
	PnlPage(Component).fireInitialize() line: 877	
	PnlPage(MarkupContainer).internalInitialize() line: 1084	
	PnlPage(Page).isPageStateless() line: 465	
	WebPageRenderer.isPageStateless() line: 287	
	WebPageRenderer.shouldRedirectToTargetUrl(RequestCycle, Url, Url) line: 305	
	WebPageRenderer.respond(RequestCycle) line: 201	
	BaseWicketTester$LastPageRecordingPageRendererProvider$1.respond(RequestCycle) line: 2747	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler, boolean) line: 718	
	WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler) line: 657	
	WicketTester(BaseWicketTester).startPage(IPageProvider) line: 887	
	WicketTester(BaseWicketTester).startPage(T) line: 904	
	PnlTest.test5() line: 87	


/c
/ MORGENOCHTEND,
/ het probleem is dat onze mock (pnl panel) geen onInitialize method heeft	,

/ we zien	,
java.lang.IllegalStateException: org.apache.wicket.Component has not been properly initialized. Something in the hierarchy of org.apache.wicket.examples.repeater.PnlPanel$MockitoMock$206877348 has not called super.onInitialize() in the override of onInitialize() method
	at org.apache.wicket.Component.fireInitialize(Component.java:880) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.MarkupContainer$3.component(MarkupContainer.java:1090) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.MarkupContainer$3.component(MarkupContainer.java:1086) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.util.visit.Visits.visitChildren(Visits.java:144) ~[wicket-util-7.2.0.jar:7.2.0]
	at org.apache.wicket.util.visit.Visits.visitChildren(Visits.java:123) ~[wicket-util-7.2.0.jar:7.2.0]
	at org.apache.wicket.util.visit.Visits.visitChildren(Visits.java:192) ~[wicket-util-7.2.0.jar:7.2.0]
	at org.apache.wicket.MarkupContainer.visitChildren(MarkupContainer.java:981) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.MarkupContainer.internalInitialize(MarkupContainer.java:1085) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.Page.isPageStateless(Page.java:465) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.request.handler.render.WebPageRenderer.isPageStateless(WebPageRenderer.java:287) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.request.handler.render.WebPageRenderer.shouldRedirectToTargetUrl(WebPageRenderer.java:305) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.request.handler.render.WebPageRenderer.respond(WebPageRenderer.java:201) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.util.tester.BaseWicketTester$LastPageRecordingPageRendererProvider$1.respond(BaseWicketTester.java:2747) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.core.request.handler.RenderPageRequestHandler.respond(RenderPageRequestHandler.java:175) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:895) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:64) ~[wicket-request-7.2.0.jar:7.2.0]
	at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:265) [wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:222) [wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:293) [wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.util.tester.BaseWicketTester.processRequest(BaseWicketTester.java:718) [wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.util.tester.BaseWicketTester.processRequest(BaseWicketTester.java:657) [wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.util.tester.BaseWicketTester.startPage(BaseWicketTester.java:887) [wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.util.tester.BaseWicketTester.startPage(BaseWicketTester.java:904) [wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.examples.repeater.PnlTest.test5(PnlTest.java:87) [test-classes/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.7.0_71]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) ~[?:1.7.0_71]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.7.0_71]
	at java.lang.reflect.Method.invoke(Method.java:606) ~[?:1.7.0_71]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47) [junit-4.11.jar:?]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) [junit-4.11.jar:?]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44) [junit-4.11.jar:?]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) [junit-4.11.jar:?]
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26) [junit-4.11.jar:?]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271) [junit-4.11.jar:?]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70) [junit-4.11.jar:?]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50) [junit-4.11.jar:?]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238) [junit-4.11.jar:?]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63) [junit-4.11.jar:?]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236) [junit-4.11.jar:?]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53) [junit-4.11.jar:?]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229) [junit-4.11.jar:?]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309) [junit-4.11.jar:?]
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50) [.cp/:?]
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) [.cp/:?]
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467) [.cp/:?]
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683) [.cp/:?]
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390) [.cp/:?]
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197) [.cp/:?]
13:21:01.809 [main] WARN  RequestCycleExtra - ********************************

/ kunnen we onInitialize() op het panel mock?
/ wat doet deze op het gewone panel	?
MarkupContainer.class
	@Override
	protected void onInitialize()
	{
		super.onInitialize();
		dequeueAutoComponents();
	}

/ het probleem is dat onze mock geen onInitialize method heeft	,

/ 1313	. 

/ we proberen toch spy	,

/ we hebben refactor	,

$ vi PnlPanel.java

public class PnlPanel extends Panel {
	Integer count=new Integer(0);
//	private Label label;
	public PnlPanel(String id) {
		super(id);
		AjaxLink<Void>link=new AjaxLink<Void>("link") {
			@Override
			public void onClick(AjaxRequestTarget target) {
			}
		};
		add(link);
		Label label=new Label("label",getModel());
		add(label);
	}
	public PnlPanel(String id,AjaxLink<Void>link,Label label){
		super(id);
		add(link);
		add(label);
	}

	public  IModel<Integer> getModel(){
		return new PropertyModel<Integer>(this, "count");
		
	}
}

	@Test
	public void test6(){
		PnlPanel panel=new PnlPanel("panel",getLink(),getLabel());
		final PnlPanel spy=spy(panel);
		panel.visitChildren(new IVisitor<Component, Void>() {
			@Override
			public void component(Component object, IVisit<Void> visit) {
				object.setParent(spy);
				
			}
		});
		IModel<Integer>model=new PropertyModel<Integer>(this, "count");
		when(spy.getModel()).thenReturn(model);
		wicketTester.startPage(new PnlPage(spy));
		wicketTester.assertRenderedPage(PnlPage.class);
		AjaxLink<Void> link=(AjaxLink<Void>) wicketTester.getComponentFromLastRenderedPage("panel:link");
		wicketTester.clickLink(link);
		Integer i=(Integer)wicketTester.getComponentFromLastRenderedPage("panel:label").getDefaultModelObject();
		Assert.assertEquals(Integer.valueOf(7), i);
	}

/ we moeten wel children reparent	, 
/ OK

/ Als we children NIET reparent	, dan
/ ERR	,
org.apache.wicket.WicketRuntimeException: No Page found for component [AjaxLink [Component id = link]]
	at org.apache.wicket.Component.getPage(Component.java:1736) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.Component.createRequestHandler(Component.java:3358) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.Component.urlFor(Component.java:3348) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.behavior.AbstractAjaxBehavior.getCallbackUrl(AbstractAjaxBehavior.java:88) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.ajax.AbstractDefaultAjaxBehavior.renderAjaxAttributes(AbstractDefaultAjaxBehavior.java:201) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.ajax.AbstractDefaultAjaxBehavior.renderAjaxAttributes(AbstractDefaultAjaxBehavior.java:185) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.ajax.AbstractDefaultAjaxBehavior.getCallbackScript(AbstractDefaultAjaxBehavior.java:465) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.ajax.AjaxEventBehavior.renderHead(AjaxEventBehavior.java:94) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.Component.internalRenderHead(Component.java:2727) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.markup.renderStrategy.ChildFirstHeaderRenderStrategy$1.component(ChildFirstHeaderRenderStrategy.java:85) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.markup.renderStrategy.DeepChildFirstVisitor.visit(DeepChildFirstVisitor.java:96) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.markup.renderStrategy.DeepChildFirstVisitor.visit(DeepChildFirstVisitor.java:87) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.markup.renderStrategy.DeepChildFirstVisitor.visit(DeepChildFirstVisitor.java:87) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.markup.renderStrategy.DeepChildFirstVisitor.visit(DeepChildFirstVisitor.java:51) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.markup.renderStrategy.ChildFirstHeaderRenderStrategy.renderChildHeaders(ChildFirstHeaderRenderStrategy.java:78) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.markup.renderStrategy.ChildFirstHeaderRenderStrategy.renderHeader(ChildFirstHeaderRenderStrategy.java:57) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.markup.html.internal.HtmlHeaderContainer.onComponentTagBody(HtmlHeaderContainer.java:171) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.markup.html.panel.DefaultMarkupSourcingStrategy.onComponentTagBody(DefaultMarkupSourcingStrategy.java:70) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.Component.internalRenderComponent(Component.java:2565) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.MarkupContainer.onRender(MarkupContainer.java:1698) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.Component.internalRender(Component.java:2380) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.Component.render(Component.java:2308) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.MarkupContainer.renderNext(MarkupContainer.java:1524) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.MarkupContainer.renderAll(MarkupContainer.java:1759) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.Page.onRender(Page.java:879) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.markup.html.WebPage.onRender(WebPage.java:141) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.Component.internalRender(Component.java:2380) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.Component.render(Component.java:2308) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.Page.renderPage(Page.java:1018) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.request.handler.render.WebPageRenderer.renderPage(WebPageRenderer.java:124) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.request.handler.render.WebPageRenderer.respond(WebPageRenderer.java:236) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.util.tester.BaseWicketTester$LastPageRecordingPageRendererProvider$1.respond(BaseWicketTester.java:2747) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.core.request.handler.RenderPageRequestHandler.respond(RenderPageRequestHandler.java:175) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:895) ~[wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:64) ~[wicket-request-7.2.0.jar:7.2.0]
	at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:265) [wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:222) [wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:293) [wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.util.tester.BaseWicketTester.processRequest(BaseWicketTester.java:718) [wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.util.tester.BaseWicketTester.processRequest(BaseWicketTester.java:657) [wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.util.tester.BaseWicketTester.startPage(BaseWicketTester.java:887) [wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.util.tester.BaseWicketTester.startPage(BaseWicketTester.java:904) [wicket-core-7.2.0.jar:7.2.0]
	at org.apache.wicket.examples.repeater.PnlTest.test6(PnlTest.java:109) [test-classes/:?]
/ TODO

/ over test6
/ kunnen we het model van het label later niet reset	?
/ in scs	, provider get WH ook te vroeg	, kunnen we niet later reset	?

/ 1313	. 

/ we hebben opnieuw refactor, en we 
/ see test7	, 

/ 1313	. 

/ ook in scs 
	public void initialize() {
		if (tableDataProviderBuilder == null) {
			tableDataProviderBuilder = getDefaultTableDataProviderBuilder();
/ called in <init>
/ dus spy heeft geen zin: te laat	, 
/ ook voor 
	public void initialize() {
		myColumnsList.add(new FilteredAbstractColumn(filterColTitle) {

			@Override
			public Component getFilter(final String componentId, final FilterForm form) {
				ResetableGoAndClearFilter resetableGoAndClearFilter = new ResetableGoAndClearFilter(componentId, form, dataProvider, GenericListPanel.this);
^^^
/ te laat	, 

/  we moeten mock	, niet spy	, 
/ maar hoe om onInitialize probleem heen	?

/ 1313	

/ Truc	, 
public class PnlPanel extends Panel {
	@Override
	protected final void onInitialize() {
		// TODO Auto-generated method stub
		super.onInitialize();
	}
/ Mockito zal deze NIET mock	,

/ maar dan 
Visits.visitChildren(Iterable<? super S>, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 134	
		for (final Object child : container)
container	PnlPanel$MockitoMock$1062401432  (id=219)	
	children null
/ Waarom ERR als er geen children zijn	?
/ TODO

/ 1313	. 

	public PnlPanel(String id) {
		this(id,getDefaultLink(),getDefaultLabel());
/ ERR, kan niet inst method call in ctor	, 

/ maar dit is OK	,

	public PnlPanel(String id) {
		super(id);
		AjaxLink< Void>link=new AjaxLink<Void>("link") {
			@Override
			public void onClick(AjaxRequestTarget target) {
//				count++;
//				Integer integer=(Integer)label.getDefaultModelObject();
//				System.out.println(integer);
//				label.setDefaultModelObject(new Integer(integer++));
			}
		};
		add(link);
		Label label=new Label("label",getDefaultModel_()); 	<-
		add(label);
	}
/ we use een inst method bij <- in ctor, nu OK	, 
/ misschien omdat na super 	,
/ TODO

/ 1313	.

/ TODO
/ test5
/ MORGENOCHTEND

/ in ctor te vroeg	, mock setters	?
/ lees	,
https://static.javadoc.io/org.mockito/mockito-core/2.2.19/org/mockito/InjectMocks.html
https://stackoverflow.com/questions/9076302/using-mock-and-injectmocks



/ Einde WICKET

/ WICKET MOCKAPPLICATION



/ Einde WICKET MOCKAPPLICATION

/ FORM MET BUTTON EN AJAXBUTTON

/ ws wicket7_5
/ proj wicket-examples-step-by-step

$ less FrmPage.html 

<form wicket:id="form">
	<input type="text" wicket:id="name">
	<input type="text" wicket:id="age">
	<input type="submit"wicket:id="normal">
	<input type="button" wicket:id="ajx">		<-
	
</form>
<span wicket:id="result"></span>

$ less FrmTest.java

	private WicketTester wicketTester;
	@Before
	public void init(){
		wicketTester=new WicketTester();
	}
	@Test
	public void test(){
		wicketTester.startPage(FrmPage.class);
		wicketTester.assertRenderedPage(FrmPage.class);
		Page page=wicketTester.getLastRenderedPage();
		System.out.println(wicketTester.getLastResponse().getDocument());
	}
/ we zien	,

<!doctype html>
<html>
<head><script type="text/javascript" src="../resource/org.apache.wicket.resource.JQueryResourceReference/jquery/jquery-1.12.0.js"></script>
<script type="text/javascript" src="../resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-event-jquery.js"></script>
<script type="text/javascript" src="../resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-ajax-jquery.js"></script>
<script type="text/javascript" src="../resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-ajax-jquery-debug.js"></script>
<script type="text/javascript" id="wicket-ajax-debug-enable">
</script>
<script type="text/javascript" id="wicket-ajax-base-url">
/*<![CDATA[*/
Wicket.Ajax.baseUrl="wicket/bookmarkable/org.apache.wicket.examples.repeater.FrmPage?0"; / (*)
/*]]>*/
</script>
<script type="text/javascript" >
/*<![CDATA[*/
Wicket.Event.add(window, "domready", function(event) { 
	Wicket.Ajax.ajax({"u":"./org.apache.wicket.examples.repeater.FrmPage?0-1.IBehaviorListener.0-form-ajx","m":"POST","c":"ajx2","f":"form1","sc":"ajx","e":"click","pd":true});;
	Wicket.Event.publish(Wicket.Event.Topic.AJAX_HANDLERS_BOUND);
;});
/*]]>*/
</script>
</head><body>
<form wicket:id="form" id="form1" method="post" action="./org.apache.wicket.examples.repeater.FrmPage?0-1.IFormSubmitListener-form"><div style="width:0px;height:0px;position:absolute;left:-100px;top:-100px;overflow:hidden"><input type="hidden" name="form1_hf_0" id="form1_hf_0" /></div>
	<input type="text" wicket:id="name" value="" name="p::name">				<-
	<input type="text" wicket:id="age" value="" name="age">
	<input type="submit" wicket:id="normal" name="normal" id="normal3">
	<input type="button" wicket:id="ajx" name="ajx" id="ajx2">				<-
	
</form>
<span wicket:id="result"></span>
</body>
</html>

/ 13	. 

/ als we de ajax button click, worden dan ook de fields in het form meegegeven	, en doet Wicket's JS dat zelf, dat collect van deze fields, terwijl als we de gewone button click , de browser die collect doet	?
/ ja	,
/ we zien	, 

/ request,	

Request URL:http://localhost:9090/wicket-examples-step-by-step/repeater/frm?0-2.IBehaviorListener.0-form-ajx
Request Method:POST
Status Code:200 OK
Request Headersview source
Accept:application/xml, text/xml, */*; q=0.01
Accept-Encoding:gzip,deflate
Accept-Language:en-US,en;q=0.8
Connection:keep-alive
Content-Length:41
Content-Type:application/x-www-form-urlencoded; charset=UTF-8
Cookie:wicketDebugBarState=expanded; JSESSIONID=CCB9D845D374BBB40C09F0AA2F95359B; visited=yes; JSESSIONID=1llua8yc8hq0d14hmf8vs3f621
Host:localhost:9090
Origin:http://localhost:9090
Referer:http://localhost:9090/wicket-examples-step-by-step/repeater/frm?0
User-Agent:Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.104 Safari/537.36
Wicket-Ajax:true
Wicket-Ajax-BaseURL:frm?0
Wicket-FocusedElementId:ajx2
X-Requested-With:XMLHttpRequest
Query String Parametersview sourceview URL encoded
0-2.IBehaviorListener.0-form-ajx:
Form Dataview sourceview URL encoded
form1_hf_0:
p::name:eric
age:13
ajx:1															<- TODO
/ we zien dat de form components worden meegestuurd	, 

/ response	,

<?xml version="1.0" encoding="UTF-8"?><ajax-response><component id="result4" ><![CDATA[<span wicket:id="result" id="result4">eric,13</span>]]></component></ajax-response>



/ 13	. 

/ Als we input type="submit" wicket:id="ajx"> 
/ Dus we zien in HTML tochtype button ipv submit	, 	, 
	<input type="button" wicket:id="ajx">		<-

/ we moeten wel type="submit" geven bij ajx, anders krijgen we geen type="button"	, 
/ in de wicket-example TodoList.html geven ze meteen type="button"	,

$ less AjaxButton.java
        @Override
        protected void onComponentTag(ComponentTag tag)
        {
                // WICKET-5594 prevent non-Ajax submit
                if ("submit".equals(tag.getAttribute("type")))
                {
                        tag.put("type", "button");
                }

/ als we geen type geven, is type "text", want dat is de default	, 
/ als we dan click op de text field, wordt er toch een post gedaan	, 

/ lees	,
http://stackoverflow.com/questions/290215/difference-between-input-type-button-and-input-type-submit

<input type="button" /> buttons will not submit a form - they don't do anything by default. They're generally used in conjunction with JavaScript as part of an AJAX application.

<input type="submit"> buttons will submit the form they are in when the user clicks on them, unless you specify otherwise with JavaScript.

/ Dit laatste zien we inderdaad in 	,
http://api.jquery.com/jQuery.post/
/ TODO	
/ en WH ook in wicket	, 

/ 13	. 

/ we geven in de tpl <input type="text" wicket:id="ajx">	, en geven in Java de button een property model	,
/ maar in Wicket een ajax button werkt niet met een property model zoals label of text field , blijkbaar	, 
/ TODO

$ vi FrmPage.html

<form wicket:id="form">
	<input type="text" wicket:id="name">
	<input type="text" wicket:id="age">
	<input type="submit" wicket:id="normal">
	<input type="text" wicket:id="ajx">
</form>

$ vi FrmPage.java

public class FrmPage extends WebPage {
	TextField<String>name;
	String name_;
	TextField<Integer>age;
	Integer age_;
	private Label result;
	String result_;
	private AjaxButton ajx;
	String ajx_;
	
	public FrmPage() {
		
		Form<Void>form=new Form<Void>("form");
		add(form);
		
		name=new TextField<String>("name");
		form.add(name);
		IModel<String>mdl=new PropertyModel<String>(this, "name_");
		name.setDefaultModel(mdl);
		age=new TextField<Integer>("age");
		form.add(age);
		mdl=new PropertyModel<String>(this, "age_");
		age.setDefaultModel(mdl);

		Button normal=new Button("normal"){
			@Override
			public void onSubmit() {
				result_=name_+","+age_;
				name_="";
				age_=0;
			};
		};
		form.add(normal);
		ajx=new AjaxButton("ajx") {
			@Override
			protected void onSubmit(AjaxRequestTarget target, Form<?> form) {
				result_=name_+","+age_+","+ajx_;
				name_="";
				age_=0;
				target.add(result);
			}
		};
		form.add(ajx);
		mdl=new PropertyModel<String>(this, "ajx_"); 			<-
		ajx.setDefaultModel(mdl);								<-
		
		result=new Label("result");
		mdl=new PropertyModel<String>(this, "result_");
		result.setDefaultModel(mdl);
		result.setOutputMarkupId(true);
		add(result);
	
	}
}

/ Als we op het scherm foo geven in het ajx-textfield	, dan zien we die niet terug in result	, als we click op het ajx-textfield, wordt er een post gedaan	, 
/ als we Enter geven op de name-textfield, wordt er een post gedaan	, maar dat komt door het gewone button 
/ TODO 


/ 13	. 

/ Als we input ajx geen type geven, dwz toch type=text	, dan zien we een textfield	, omdat we <input> in HTML	, 



/ 13	. 

/ omdat we 
		wicketTester.startPage(FrmPage.class);
/ zien we bij (*) 
Wicket.Ajax.baseUrl="wicket/bookmarkable/org.apache.wicket.examples.repeater.FrmPage?0";
/ maar als we 
		wicketTester.startPage(new FrmPage());
/ dan zien we 	,
Wicket.Ajax.baseUrl="wicket/page?0";

/ maar in de browser zien we	,
Wicket.Ajax.baseUrl="frm?1";
/ WH omdat we mount point hebben in RepeaterApplication	, terwijl we in de test MockApplication hebben	,
		mountPage("frm", FrmPage.class);

/ TODO

/ 13	. 

/ als we ajaxfallbackbutton in Java, dan moeten we in HTML type="submit" geven WH	, 

$ vi FrmPage.html

<form wicket:id="form">
	<input type="text" wicket:id="name">
	<input type="text" wicket:id="age">
	<input type="submit" wicket:id="ajxf">
</form>
<span wicket:id="result"></span>

$ vi FrmPage.java

		ajxf=new AjaxFallbackButton("ajxf",form) {
			@Override
			protected void onSubmit(AjaxRequestTarget target, Form<?> form) {
				result_=name_+","+age_+","+ajx_;
				name_="";
				age_=0;
				target.add(result);
			}
		};
		form.add(ajxf);

/ we zien ajax reponse	,
<?xml version="1.0" encoding="UTF-8"?><ajax-response><component id="result3" ><![CDATA[<span wicket:id="result" id="result3">eric,13,null</span>]]></component></ajax-response>

/ 13	. 

/ Als we in Java een gewoon button hebben , en in HTML <input type="button">, dan gebeurt er GEEN submit	, 

/ 13	. 

/ MORGENOCHTEND
/ lees	,
https://ci.apache.org/projects/wicket/guide/6.x/guide/testing.html



/ Einde FORM MET BUTTON EN AJAXBUTTON

/ BUTTON AND FORM

/ Als we een parent en child page hebben	, en we add een button in Java aan de child page, maar in HTML we set de button in de parent, dan is dat OK.
/ we hoeven in Java niet op de volgorde te letten, als components naast elkaar	, 

/ 7	.

/ als een button niet in een form, dan pass de test, en de page is OK, maar de button doet niets,

/ een ajaxbutton moet in een form, anders pass de test niet	, en de page is NIET OK, als in een button werkt de ajaxbutton OK,	
/s
/ stack	,
	AjaxButton$1(AjaxFormSubmitBehavior).getForm() line: 93	
	AjaxButton$1(AjaxFormSubmitBehavior).updateAjaxAttributes(AjaxRequestAttributes) line: 145	
	AjaxButton$1.updateAjaxAttributes(AjaxRequestAttributes) line: 131	
	AjaxButton$1(AbstractDefaultAjaxBehavior).getAttributes() line: 146	
	AjaxButton$1(AbstractDefaultAjaxBehavior).renderExtraHeaderContributors(Component, IHeaderResponse) line: 119	
		renderExtraHeaderContributors(component, response);
/cb
	AjaxButton$1(AbstractDefaultAjaxBehavior).renderHead(Component, IHeaderResponse) line: 104	
		renderExtraHeaderContributors(component, response);
/cb
	AjaxButton$1(AjaxEventBehavior).renderHead(Component, IHeaderResponse) line: 90	
		super.renderHead(component, response);
/cb
	HierarchyChildPage$2(Component).internalRenderHead(HtmlHeaderContainer) line: 2727	
		ChildFirstHeaderRenderStrategy$1.component(Component, IVisit<Void>) line: 85	
			// Then ask all behaviors
			for (Behavior behavior : getBehaviors())
			{
				if (isBehaviorAccepted(behavior))
				{
					if (response.wasRendered(behavior) == false)
					{
						behavior.renderHead(this, response);
/cb
	ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component, Visit<Void>) line: 96	
	ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component, Visit<Void>) line: 87	
	ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component) line: 51	
	ChildFirstHeaderRenderStrategy.renderChildHeaders(HtmlHeaderContainer, Component) line: 78	
	ChildFirstHeaderRenderStrategy.renderHeader(HtmlHeaderContainer, HtmlHeaderContainer$HeaderStreamState, Component) line: 57	
		// Then its child hierarchy
		renderChildHeaders(headerContainer, rootComponent);
/cb
	HtmlHeaderContainer.onComponentTagBody(MarkupStream, ComponentTag) line: 171	
			// Render the header sections of all components on the page
			AbstractHeaderRenderStrategy.get().renderHeader(this,
				new HeaderStreamState(markupStream, openTag), getPage());
/cb
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
		component.onComponentTagBody(markupStream, openTag);
/cb
	HtmlHeaderContainer(Component).internalRenderComponent() line: 2565	
			// Render the body only if open-body-close. Do not render if open-close.
			if (tag.isOpen())
			{
				// Render the body. The default strategy will simply call the component's
				// onComponentTagBody() implementation.
				getMarkupSourcingStrategy().onComponentTagBody(this, markupStream, tag);
/cb
	HtmlHeaderContainer(MarkupContainer).onRender() line: 1698	
	HtmlHeaderContainer(Component).internalRender() line: 2380	
	HtmlHeaderContainer(Component).render() line: 2308	
	HierarchyChildPage(MarkupContainer).renderNext(MarkupStream) line: 1524	
	HierarchyChildPage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	HierarchyChildPage(Page).onRender() line: 879	
	HierarchyChildPage(WebPage).onRender() line: 141	
	HierarchyChildPage(Component).internalRender() line: 2380	
	HierarchyChildPage(Component).render() line: 2308	
	HierarchyChildPage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ 7	. 

/ een wicket page met ajax components moet altijd in zijn template
<head>
</head>
/ Anders komen je js files er niet in	,

/ we hebben 
public class HierarchyParentPage extends WebPage{
public class HierarchyChildPage extends HierarchyParentPage {

/ we hoeven alleen in een van de templates 
<head>
</head>
/ we hebben ze set in de parent's template	,

/ 13	. 

$ less HierarchyParentPage.html

<head>
</head>
<span wicket:id="name"></span>
<span wicket:id="address"></span>
<wicket:child/>

$ less HierarchyParentPage.java

package org.apache.wicket.examples.repeater;

import org.apache.wicket.markup.html.WebPage;

public class HierarchyParentPage extends WebPage{
	private String name;
	private String address;
	public HierarchyParentPage() {
		IModel<String>model2=new PropertyModel<String>(this, "address");
		Label label2=new Label("address", model2);
		add(label2);
		IModel<String >model=new PropertyModel<String>(this, "name");
		Label label=new Label("name", model);
		add(label);
		
	}
}

$ less HierarchyChildPage.html

<wicket:extend>
	<span wicket:id="age"></span>
	<span wicket:id="grade"></span>
	<form wicket:id="form">
		<button type="submit" wicket:id="button">button</button>
		<button type="button" wicket:id="ajaxButton">ajaxButton</button>
	</form>

	<a wicket:id="link">link</a>
	<a href="#" wicket:id="ajaxLink">ajaxLink</a>
</wicket:extend>

$ less HierarchyChildPage.java

package org.apache.wicket.examples.repeater;

import org.apache.wicket.ajax.AjaxRequestTarget;

public class HierarchyChildPage extends HierarchyParentPage {
	private Integer age;
	private Integer grade;
	public HierarchyChildPage() {
		
		IModel<String >model2=new PropertyModel<String>(this, "grade");
		Label grade=new Label("grade", model2);
		add(grade);
		IModel<String >model=new PropertyModel<String>(this, "age");
		Label age=new Label("age", model);
		add(age);
		
		Form form=new Form<Void>("form");
		add(form);
		
		Button button=new Button("button"){
			@Override
			public void onSubmit() {
				setResponsePage(HierarchyResponsePage.class);
			}
		};
		form.add(button);
		
		
		AjaxButton ajaxButton=new AjaxButton("ajaxButton") {
			@Override
			protected void onSubmit(AjaxRequestTarget target, Form<?> form) {
				setResponsePage(HierarchyResponsePage.class);
			}
		};
		form.add(ajaxButton);
		
		Link< Void>link=new Link<Void>("link") {
			@Override
			public void onClick() {
				setResponsePage(HierarchyResponsePage.class);
				
			}
		};
		add(link);
		
		AjaxLink< Void>ajaxLink=new AjaxLink<Void>("ajaxLink") {
			@Override
			public void onClick(AjaxRequestTarget target) {
				setResponsePage(HierarchyResponsePage.class);
				
			}
		};
		add(ajaxLink);



	}
}

/ 7	.	

/ interessant, met cookies	,

/ we komen hier als we een form submit	,

		WicketTester(BaseWicketTester).setupNextRequestCycle() line: 477	
		WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler, boolean) line: 726	
		WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler) line: 657	
		WicketTester(BaseWicketTester).processRequest() line: 629	
		WicketTester(BaseWicketTester).submitForm(String) line: 2031	
		FormTester.submit() line: 707	
		HierarchyTest.testForm4() line: 74	
		NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
		NativeMethodAccessorImpl.invoke(Object, Object[]) line: 57	
		DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
		Method.invoke(Object, Object...) line: 606	
		FrameworkMethod$1.runReflectiveCall() line: 47	
		FrameworkMethod$1(ReflectiveCallable).run() line: 12	
		FrameworkMethod.invokeExplosively(Object, Object...) line: 44	
		InvokeMethod.evaluate() line: 17	
		RunBefores.evaluate() line: 26	
		BlockJUnit4ClassRunner(ParentRunner<T>).runLeaf(Statement, Description, RunNotifier) line: 271	
		BlockJUnit4ClassRunner.runChild(FrameworkMethod, RunNotifier) line: 70	
		BlockJUnit4ClassRunner.runChild(Object, RunNotifier) line: 50	
		ParentRunner$3.run() line: 238	
		ParentRunner$1.schedule(Runnable) line: 63	
		BlockJUnit4ClassRunner(ParentRunner<T>).runChildren(RunNotifier) line: 236	
		ParentRunner<T>.access$000(ParentRunner, RunNotifier) line: 53	
		ParentRunner$2.evaluate() line: 229	
		BlockJUnit4ClassRunner(ParentRunner<T>).run(RunNotifier) line: 309	
		JUnit4TestClassReference(JUnit4TestReference).run(TestExecution) line: 50	
		TestExecution.run(ITestReference[]) line: 38	
		RemoteTestRunner.runTests(String[], String, TestExecution) line: 467	
		RemoteTestRunner.runTests(TestExecution) line: 683	
		RemoteTestRunner.run() line: 390	
		RemoteTestRunner.main(String[]) line: 197	

/ 7	. 

/ WICKET FORM SUBMIT ON FORM OR ON BUTTON

$ vi HierarchyChildPage.html

	<form wicket:id="form4">
		<input wicket:id="name4">
		<input wicket:id="age4">
		<input type="submit" value="submit">
	</form>
	
	<form wicket:id="form4a">
		<input type="text" wicket:id="name4">
		<input type="text" wicket:id="age4">
		<!-- <input type="submit" wicket:id="submit" value="submit"> -->
		<button type="submit" wicket:id="submit">button</button>
		
	</form>

/ we zien dat form4 een submit button heeft: we kunnen nu Enter geven in een van de textfields,  zonder dit button kan dit niet, zodat het form posts	; maar we kunnen natuurlijk ook op het button click	,
/ we def een onSubmit op het form	,

/ in form4a is de submit button een wicket component, en kunnen we een onSubmit def op het button	,

$ vi HierarchyChildPage.java

		Form form4=new Form<Bean>("form4"){
			@Override
			protected void onSubmit() {
				HierarchyChildPage.this.getBean().setName4("Foo Bar");
				HierarchyChildPage.this.getBean().setAge4(new Integer(13));
				setResponsePage(HierarchyResponsePage.class);
			};
		};
		add(form4);
		bean=new Bean();
		IModel<Bean>model4=new CompoundPropertyModel<Bean>(bean);
		form4.setDefaultModel(model4);
		FormComponent<String>name4=new TextField<String>("name4");
		form4.add(name4);
		FormComponent<Integer>age4=new TextField<Integer>("age4");
		form4.add(age4);
		
		Form form4a=new Form<Bean>("form4a");
		add(form4a);
		bean=new Bean();
		IModel<Bean>model4a=new CompoundPropertyModel<Bean>(bean);
		form4a.setDefaultModel(model4a);
		FormComponent<String>name4a=new TextField<String>("name4");
		form4a.add(name4a);
		FormComponent<Integer>age4a=new TextField<Integer>("age4");
		form4a.add(age4a);
		Button button4a=new Button("submit"){
			@Override
			public void onSubmit() {
				HierarchyChildPage.this.getBean().setName4("Foo Bar");
				HierarchyChildPage.this.getBean().setAge4(new Integer(13));
				setResponsePage(HierarchyResponsePage.class);
			}
		};
		form4a.add(button4a);



/ we submit form4/form4a	, die onSubmit op het button heeft	,

/ als een 

/s
/ stack	,
	Form<T>.onFormSubmitted() line: 689	
	RequestListenerInterface.internalInvoke(Component, Object) line: 258	
	RequestListenerInterface.invoke(IRequestableComponent) line: 216	
	ListenerInterfaceRequestHandler.invokeListener() line: 241	
	ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 234	
		invokeListener();
/cb
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/ debug	,
/s
    Form<T>.onFormSubmitted() line: 689
		onFormSubmitted(null);
/s
Form<T>.onFormSubmitted(IFormSubmitter) line: 756	
				// First, see if the processing was triggered by a Wicket IFormSubmittingComponent
				if (submitter == null)
				{
					submitter = findSubmittingButton();
[Button [Component id = submit]]	/ form4a
null	/ form4

				// When processing was triggered by a Wicket IFormSubmittingComponent and that
				// component indicates it wants to be called immediately
				// (without processing), call the IFormSubmittingComponent.onSubmit* methods right
				// away.
				if (submitter != null && !submitter.getDefaultFormProcessing())
/ NEE
				{
					submitter.onSubmit();
/ niet
					submitter.onAfterSubmit();
/ niet
				}

/ intermezzo

public class Button extends FormComponent<String> implements IFormSubmittingComponent
	/**
	 * If false, all standard processing like validating and model updating is skipped.
	 */
	private boolean defaultFormProcessing = true;


	/**
	 * Sets the defaultFormProcessing property. When false (default is true), all validation and
	 * form updating is bypassed and the onSubmit method of that button is called directly, and the
	 * onSubmit method of the parent form is not called. A common use for this is to create a cancel
	 * button.
	 * 
	 * @param defaultFormProcessing
	 *            defaultFormProcessing
	 * @return This
	 */
	@Override
	public final Button setDefaultFormProcessing(boolean defaultFormProcessing)
	{
		if (this.defaultFormProcessing != defaultFormProcessing)
		{
			addStateChange();
		}

		this.defaultFormProcessing = defaultFormProcessing;
		return this;
	}
/ Einde intermezzo

				else
				{
					// the submit request might be for one of the nested forms, so let's
					// find the right one:
					final Form<?> formToProcess = findFormToProcess(submitter);

					// process the form for this request
					formToProcess.process(submitter);
/s
Form<T>.process(IFormSubmitter) line: 933	
/=
	public void process(IFormSubmitter submittingComponent)
submittingComponent=Button 	/ bij form4a
submittingComponent=null	/ bij form4 
...
			// Update model using form data
			updateFormComponentModels();
...
			// Form has no error
			delegateSubmit(submittingComponent);
/s
	/**
	 * Called (by the default implementation of 'process') when all fields validated, the form was
	 * updated and it's data was allowed to be persisted. It is meant for delegating further
	 * processing to clients.
	 * <p>
	 * This implementation first finds out whether the form processing was triggered by a nested
	 * IFormSubmittingComponent of this form. If that is the case, that component's
	 * onSubmitBefore/AfterForm methods are called appropriately..
	 * </p>
	 * <p>
	 * Regardless of whether a submitting component was found, the form's onSubmit method is called
	 * next.
	 * </p>
	 * 
	 * @param submittingComponent
	 *            the component that triggered this form processing, or null if the processing was
	 *            triggered by something else (like a non-Wicket submit button or a javascript
	 *            execution)
	 */
	protected void delegateSubmit(IFormSubmitter submittingComponent)
submittingComponent=Button 	/ bij form4a
submittingComponent=null	/ bij form4 

		final Form<?> processingForm = findFormToProcess(submittingComponent);
Form 
		// process submitting component (if specified)
		if (submittingComponent != null)
/ JA bij form4a	, 
/ NEE  bij form4	,
		{
			// invoke submit on component
			submittingComponent.onSubmit();
/s
HierarchyChildPage$1.onSubmit() line: 39	
/=
		Button button=new Button("submit"){
			@Override
			public void onSubmit() {
				HierarchyChildPage.this.getBean().setName4("Foo Bar");
				HierarchyChildPage.this.getBean().setAge4(new Integer(13));
				setResponsePage(HierarchyResponsePage.class);
/t
Form<T>.delegateSubmit(IFormSubmitter) line: 1313	
			submittingComponent.onSubmit();
/d
		// invoke Form#onSubmit(..)
		for (Form<?> form : forms)
/ JA
		{
			form.onSubmit();
/s
Form<T>.onSubmit() line: 1815	
{
}/ bij form4a

/s
HierarchyChildPage$3.onSubmit() line: 60	
/=
		Form form4=new Form<Bean>("form4"){
			@Override
			protected void onSubmit() {
				HierarchyChildPage.this.getBean().setName4("Foo Bar");
				HierarchyChildPage.this.getBean().setAge4(new Integer(13));
				setResponsePage(HierarchyResponsePage.class);
			};
		};

/ 7	. 

/ we maken een form die een form-submit heeft , en een button submit	, 

/ in feite is er altijd een form-submit fct, die is default {}	, deze wordt altijd called	, 
/ als er een submitting button is, wordt eerst van deze de submit fct called	,

$ vi HierarchyChildPage.html

	<form wicket:id="form4b">
		<input type="text" wicket:id="name4">
		<input type="text" wicket:id="age4">
		<!-- <input type="submit" wicket:id="submit" value="submit"> -->
		<button type="submit" wicket:id="submit">button</button>	
	</form>

$ vi HierarchyChildPage.java

		Form form4b=new Form<Bean>("form4b"){
			@Override
			protected void onSubmit() {
				HierarchyChildPage.this.getBean().setName4("Foo Bar");
				HierarchyChildPage.this.getBean().setAge4(new Integer(13));
			};
		};
		add(form4b);
		bean=new Bean();
		IModel<Bean>model4b=new CompoundPropertyModel<Bean>(bean);
		form4b.setDefaultModel(model4b);
		FormComponent<String>name4b=new TextField<String>("name4");
		form4b.add(name4b);
		FormComponent<Integer>age4b=new TextField<Integer>("age4");
		form4b.add(age4b);
		Button button4b=new Button("submit"){
			@Override
			public void onSubmit() {
				setResponsePage(HierarchyResponsePage.class);
			}
		};
		form4b.add(button4b);

/ we zien dat beide submits worden called	,

/ 7	. 

/ TEST FORM SUBMIT

/ lees ,
http://apache-wicket.1842946.n4.nabble.com/wicket-1-1-1-FormTester-clicking-a-specific-button-td1912347.html
FormTester formTester = wicketTester.newFormTester(false);
formTester.setValue("myButton", "whatever");
formTester.submit() ;
/ lees ook	,
https://paulszulc.wordpress.com/2009/08/03/wicket-testing-pitfalls-and-api-issues/

/ lees	, 
https://cwiki.apache.org/confluence/display/WICKET/Testing+Pages

/ click button in form, zodat button-submit wordt called	,

$ vi HierarchyChildPage.html

	<form wicket:id="form4a">
		<input type="text" wicket:id="name4">
		<input type="text" wicket:id="age4">
		<!-- <input type="submit" wicket:id="submit" value="submit"> -->
		<button type="submit" wicket:id="submit">button</button>	
	</form>


$ vi HierarchyChildPage.java

		Form form4a=new Form<Bean>("form4a");
		add(form4a);
		bean=new Bean();
		IModel<Bean>model4a=new CompoundPropertyModel<Bean>(bean);
		form4a.setDefaultModel(model4a);
		FormComponent<String>name4a=new TextField<String>("name4");
		form4a.add(name4a);
		FormComponent<Integer>age4a=new TextField<Integer>("age4");
		form4a.add(age4a);
		Button button4a=new Button("submit"){
			@Override
			public void onSubmit() {
				HierarchyChildPage.this.getBean().setName4("Foo Bar");
				HierarchyChildPage.this.getBean().setAge4(new Integer(13));
				setResponsePage(HierarchyResponsePage.class);
			}
		};
		form4a.add(button4a);


$ less HierarchyTest.java

	@Test
	public void testForm4a(){	
		WebPage page=new HierarchyChildPage();
		wicketTester.startPage(page);
		FormTester formTester=wicketTester.newFormTester("form4a");
		formTester.setValue("name4", "Foo Bar");
		formTester.setValue("age4", "13");
->		formTester.setValue("submit", "E=mc²");
		formTester.submit();    //	 calls 	wicketTester.submitForm("form4a"), which also works TODO
		Assert.assertEquals(((HierarchyChildPage)page).getBean().getName4(),"Foo Bar");
		Assert.assertEquals(((HierarchyChildPage)page).getBean().getAge4(),new Integer(13));
		wicketTester.assertLabel("message","Hierarchy Response Page");
		String pageAsString=wicketTester.getLastResponse().getDocument();
		System.out.println(pageAsString);		
	}




/ 7	. 






/ 7	. 

/ WICKET FORM VALIDATION

/ Geef in form4a in 2de veld een integer, anders validates het form niet	,

/ we gaven "f" in Integer-textfield	, dat geeft een validation error	,

/ lees	,
https://www.mkyong.com/wicket/wicket-password-field-example/

$ vi HierarchyParentPage.java
	public HierarchyParentPage() {
		add(new FeedbackPanel("feedback"));

/ Dit is alles	, 
/ Als we dan een "f" geven in een Integer field, zien we bovenin de page	
The value of 'age4' is not a valid Integer.

/ 13	

/ op 
https://www.mkyong.com/wicket/wicket-password-field-example/
/ maken ze zelf ook validators	,

	//1 digit, 1 lower, 1 upper, 1 symbol "@#$%", from 6 to 20
	private final String PASSWORD_PATTERN = "((?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%]).{6,20})";

		password.add(new PatternValidator(PASSWORD_PATTERN));
		form.add(new EqualPasswordInputValidator(password, cpassword));

/ 13	. 

/ lees	,
http://stackoverflow.com/questions/21627899/how-to-validate-number-format-textfield-in-wicket

IModel<Integer> model =
    new PropertyModel<Integer>(personModel, "age");
Component ageField = new TextField<Integer>("age", model);
add(ageField).add(RangeValidator.<Integer>range(0, 99));

/ of	,
IModel<Integer> model = new PropertyModel<Integer>(personModel, "age");
add(new NumberTextField<Integer>("age", model).setMinimum(0).setMaximum(99));

/ 13	. 

/ lees	,
https://www.mkyong.com/wicket/create-custom-validator-in-wicket/

/ lees	,
https://ci.apache.org/projects/wicket/guide/7.x/guide/forms2.html

12 Wicket forms in detail - Reference Documentation

/ 13	. 

/ Verschil in controllers,	

/ vraag page	,
WebPageRenderer.respond(RequestCycle) line: 186	

/ click button	,
ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 175	
		invokeListener();

/ 13	. 

/ We debug een stuk form validation	, 
/ hier we geven "f" in een string field, dus dat gaat OK	,

/ we geven stack	,
/s
	TextField<T>(AbstractTextComponent<T>).convertInput() line: 120	
	TextField<T>(FormComponent<T>).validate() line: 1130	
			convertInput();
/cb
	Form$18.validate(FormComponent<?>) line: 1948	
/=
public class Form<T> extends WebMarkupContainer
	protected final void validateComponents() {
		visitFormComponentsPostOrder(new ValidationVisitor() {
			@Override
			public void validate(final FormComponent<?> formComponent) {
				final Form<?> form = formComponent.getForm();
				if (form == Form.this && form.isEnabledInHierarchy() && form.isVisibleInHierarchy()) {
					formComponent.validate();
/cb
	Form$18(Form$ValidationVisitor).component(FormComponent<?>, IVisit<Void>) line: 177	
/=
		@Override
		public void component(final FormComponent<?> formComponent, final IVisit<Void> visit) {
			if (formComponent.isVisibleInHierarchy() && formComponent.isEnabledInHierarchy())
			{
				validate(formComponent);
/cb
	Visits.visitPostOrderHelper(Object, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 274	
/ recursive call	, component=TextField	,
		if (component instanceof Iterable<?>)
/n
		if (filter.visitObject(component))
		{
			visitor.component((S)component, visit);
/cb
	Visits.visitPostOrderHelper(Object, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 262	
/=
	private static <S, R> void visitPostOrderHelper(final Object component, final org.apache.wicket.util.visit.IVisitor<S, R> visitor, final IVisitFilter filter, final Visit<R> visit)	/ component=Form, visitor=Form$18, filter=FormComponent$1, visit=Visit
		if (component instanceof Iterable<?>)	/ een Form heeft children	,
		{
			final Iterable<?> container = (Iterable<?>)component;
			if (filter.visitChildren(container))
			{
				Visit<R> childTraversal = new Visit<>();
				for (final Object child : ((Iterable<?>)component))
				{
					visitPostOrderHelper(child, visitor, filter, childTraversal);
/cb
	Visits.visitPostOrder(Object, IVisitor<S,R>, IVisitFilter) line: 245	
		Visit<R> visit = new Visit<>();
		visitPostOrderHelper(root, visitor, filter, visit);
/cb
	FormComponent<T>.visitFormComponentsPostOrder(Component, IVisitor<FormComponent<?>,R>) line: 382	
/=
		return Visits.visitPostOrder(component, visitor, new IVisitFilter() {	/= FormComponent$1
			@Override
			public boolean visitChildren(Object object) {
				if (object instanceof IFormVisitorParticipant) {
					return ((IFormVisitorParticipant)object).processChildren();
				}
				return true;
			}
			@Override
			public boolean visitObject(Object object) {
				return (object instanceof FormComponent<?>);
			}
		});
/cb
	Form<T>.visitFormComponentsPostOrder(IVisitor<FormComponent<?>,R>) line: 1153	
		return FormComponent.visitFormComponentsPostOrder(this, visitor);	/ this=Form, visitor=Form$18
/cb
	Form<T>.validateComponents() line: 1940	
		visitFormComponentsPostOrder(new ValidationVisitor()	/ = Form$18
		{
			@Override
			public void validate(final FormComponent<?> formComponent)	/ straks, formComponent=TextField	,
			{
				final Form<?> form = formComponent.getForm();
				if (form == Form.this && form.isEnabledInHierarchy() && form.isVisibleInHierarchy())
				{
					formComponent.validate();		/ straks komen we hier , als we de TextField validate	,
/cb
	Form<T>.validate() line: 1882	
			validateComponents();
/cb
	Form<T>.process(IFormSubmitter) line: 943	
		// run validation
		validate();
/cb
	Form<T>.onFormSubmitted(IFormSubmitter) line: 795	
				if (submitter != null && !submitter.getDefaultFormProcessing())
/n
				else
				{
					// the submit request might be for one of the nested forms, so let's
					// find the right one:
					final Form<?> formToProcess = findFormToProcess(submitter);

					// process the form for this request
					formToProcess.process(submitter);
/cb
	Form<T>.onFormSubmitted() line: 708				/ controller
		onFormSubmitted(null);
/cb
	RequestListenerInterface.internalInvoke(Component, Object) line: 258	
			method.invoke(target);
/cb
	RequestListenerInterface.invoke(IRequestableComponent) line: 216	
		internalInvoke(component, component);
/cb
	ListenerInterfaceRequestHandler.invokeListener() line: 241	
		if (getBehaviorIndex() == null)
/todo
		{
			listenerInterface.invoke(getComponent());
/cb
	ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 234	
		invokeListener();
/cb
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/ debug	,
/s
TextField<T>(AbstractTextComponent<T>).convertInput() line: 121	
		String[] value = getInputAsArray();
/s
TextField<T>(FormComponent<T>).getInputAsArray() line: 755	
		List<StringValue> list = getRequest().getRequestParameters().getParameterValues(
			getInputName());
input name="name4"
list=["f"] 		/ dit gaven we in name4 field	,
/t
TextField<T>(AbstractTextComponent<T>).convertInput() line: 129	
		String[] value = getInputAsArray();
/d
			super.convertInput();
/s
TextField<T>(FormComponent<T>).convertInput() line: 1179	
		if (typeName == null)
"java.lang.String"
/ TODO Wanneer set	?
/s
TextField<T>(Component).getConverter(Class<C>) line: 1373	
		return getApplication().getConverterLocator().getConverter(type);
type=Class<String>
/s
ConverterLocator.getConverter(Class<C>) line: 216	
		// Get type converter for class
		final IConverter<C> converter = get(type);
/s
ConverterLocator.get(Class<C>) line: 199	
		return  (IConverter<C>) classToConverter.get(c.getName());
this	ConverterLocator  (id=7634)	
	classToConverter	HashMap<K,V>  (id=7636)	
		size	23	
		table	HashMap$Entry<K,V>[32]  (id=7641)	
			[3]	HashMap$Entry<K,V>  (id=7643)	
java.util.Calendar=org.apache.wicket.util.convert.converter.CalendarConverter@236ff568
			[5]	HashMap$Entry<K,V>  (id=7644)	
java.lang.Boolean=org.apache.wicket.util.convert.converter.BooleanConverter@b589105
			[6]	HashMap$Entry<K,V>  (id=7645)	
int=org.apache.wicket.util.convert.converter.IntegerConverter@f970193
			[8]	HashMap$Entry<K,V>  (id=7647)	
java.sql.Timestamp=org.apache.wicket.util.convert.converter.SqlTimestampConverter@4ae7b721
			[9]	HashMap$Entry<K,V>  (id=7648)	
java.lang.Integer=org.apache.wicket.util.convert.converter.IntegerConverter@f970193
			[11]	HashMap$Entry<K,V>  (id=7650)	
java.util.Date=org.apache.wicket.util.convert.converter.DateConverter@331134d9
			[12]	HashMap$Entry<K,V>  (id=7652)	
long=org.apache.wicket.util.convert.converter.LongConverter@32a7fdf2
			[13]	HashMap$Entry<K,V>  (id=7653)	
float=org.apache.wicket.util.convert.converter.FloatConverter@26ccc723
			[16]	HashMap$Entry<K,V>  (id=7655)	
short=org.apache.wicket.util.convert.converter.ShortConverter@2ea4acc0
			[18]	HashMap$Entry<K,V>  (id=7656)	
java.sql.Date=org.apache.wicket.util.convert.converter.SqlDateConverter@4e25debb
			[19]	HashMap$Entry<K,V>  (id=7658)	
java.math.BigInteger=org.apache.wicket.util.convert.converter.BigIntegerConverter@1841ef12
			[20]	HashMap$Entry<K,V>  (id=7660)	
java.lang.Double=org.apache.wicket.util.convert.converter.DoubleConverter@3d49892c
			[21]	HashMap$Entry<K,V>  (id=7661)	
byte=org.apache.wicket.util.convert.converter.ByteConverter@10b6932f
			[24]	HashMap$Entry<K,V>  (id=7663)	
java.lang.Character=org.apache.wicket.util.convert.converter.CharacterConverter@6398e514
			[25]	HashMap$Entry<K,V>  (id=7664)	
java.sql.Time=org.apache.wicket.util.convert.converter.SqlTimeConverter@4278fb3b
			[26]	HashMap$Entry<K,V>  (id=7666)	
boolean=org.apache.wicket.util.convert.converter.BooleanConverter@b589105
			[27]	HashMap$Entry<K,V>  (id=7668)	
java.lang.Byte=org.apache.wicket.util.convert.converter.ByteConverter@10b6932f

/t
ConverterLocator.getConverter(Class<C>) line: 225	
		final IConverter<C> converter = get(type);
null
		if (converter == null)
		{
			return new DefaultConverter<C>(type);
/t
TextField<T>(FormComponent<T>).convertInput() line: 1183	
			final IConverter<T> converter = getConverter(getType());
/d
			try
			{
				convertedInput = converter.convertToObject(getInput(), getLocale());
/s
ConverterLocator$DefaultConverter<C>.convertToObject(String, Locale) line: 93	

			Class<C> theType = type.get();
Class<String>
this	ConverterLocator$DefaultConverter<C>  (id=7718)	
	type	WeakReference<T>  (id=7721)	
		discovered	null	
		next	null	
		queue	ReferenceQueue$Null  (id=7724)	
		referent	Class<T> (java.lang.String) (id=5176)	

			try {
				C converted = Objects.convertValue(value, theType);
value="f"
theType=Class<String>
/s
Objects.convertValue(Object, Class<T>) line: 297	
				if (toType == String.class)
				{
					result = stringValue(value);
/s
Objects.stringValue(Object) line: 717	
		return stringValue(value, false);
/s
Objects.stringValue(Object, boolean) line: 754	
			result = value.toString();
		return result;
/ TODO (Afmaken)


/ Einde WICKET FORM VALIDATION

/ Einde BUTTON AND FORM

/ TEST AJAX EVENTS

/ 7	. 

[eric@localhost wicket]$ find -name "*Ajax*Behavior.java"
./wicket-core/src/test/java/org/apache/wicket/util/tester/MockPageWithFormAndAjaxFormSubmitBehavior.java
./wicket-core/src/main/java/org/apache/wicket/ajax/AjaxEventBehavior.java
./wicket-core/src/main/java/org/apache/wicket/ajax/markup/html/navigation/paging/AjaxPagingNavigationBehavior.java
./wicket-core/src/main/java/org/apache/wicket/ajax/form/OnChangeAjaxBehavior.java
./wicket-core/src/main/java/org/apache/wicket/ajax/form/AjaxFormComponentUpdatingBehavior.java
./wicket-core/src/main/java/org/apache/wicket/ajax/form/AjaxFormChoiceComponentUpdatingBehavior.java
./wicket-core/src/main/java/org/apache/wicket/ajax/form/AjaxFormValidatingBehavior.java
./wicket-core/src/main/java/org/apache/wicket/ajax/form/AjaxFormSubmitBehavior.java
./wicket-core/src/main/java/org/apache/wicket/ajax/AjaxNewWindowNotifyingBehavior.java
./wicket-core/src/main/java/org/apache/wicket/ajax/AjaxSelfUpdatingTimerBehavior.java
./wicket-core/src/main/java/org/apache/wicket/ajax/AbstractAjaxTimerBehavior.java
./wicket-core/src/main/java/org/apache/wicket/ajax/AjaxClientInfoBehavior.java
./wicket-core/src/main/java/org/apache/wicket/ajax/AbstractDefaultAjaxBehavior.java
./wicket-core/src/main/java/org/apache/wicket/behavior/AbstractAjaxBehavior.java

[eric@localhost wicket]$ find -name "*Ajax*Behavior*Test*java"
./wicket-core/src/test/java/org/apache/wicket/ajax/form/OnChangeAjaxBehaviorTest.java
./wicket-core/src/test/java/org/apache/wicket/ajax/form/AjaxFormValidatingBehaviorTestPage.java
./wicket-core/src/test/java/org/apache/wicket/ajax/form/AjaxFormValidatingBehaviorTest.java
./wicket-core/src/test/java/org/apache/wicket/ajax/form/OnChangeAjaxBehaviorTestPage.java
./wicket-core/src/test/java/org/apache/wicket/ajax/form/AjaxFormSubmitBehaviorTest.java
./wicket-core/src/test/java/org/apache/wicket/ajax/form/AjaxFormSubmitBehaviorTestPage.java
./wicket-core/src/test/java/org/apache/wicket/ajax/form/AjaxFormChoiceComponentUpdatingBehaviorTest.java
./wicket-core/src/test/java/org/apache/wicket/ajax/AjaxBehaviorAndMetaDataTest.java
./wicket-core/src/test/java/org/apache/wicket/ajax/AjaxBehaviorEnabledTest.java
./wicket-core/src/test/java/org/apache/wicket/ajax/AbstractDefaultAjaxBehaviorTest.java
./wicket-core/src/test/java/org/apache/wicket/ajax/AjaxTimerBehaviorTest.java
./wicket-core/src/test/java/org/apache/wicket/ajax/AjaxEventBehaviorTest.java

public abstract class AjaxFormSubmitBehavior extends AjaxEventBehavior
public abstract class AjaxEventBehavior extends AbstractDefaultAjaxBehavior
public abstract class AbstractDefaultAjaxBehavior extends AbstractAjaxBehavior
public abstract class AbstractAjaxBehavior extends Behavior implements IBehaviorListener

/ 13	. 

/ AjaxFormSubmitBehavior	,

$ less ./wicket-core/src/test/java/org/apache/wicket/ajax/form/AjaxFormSubmitBehaviorTestPage.html

<html>
    <body>
        <form wicket:id="form">
          <input type="text" wicket:id="textField" />
          <a wicket:id="ajaxSubmitLink"></a>
          <input type="submit" wicket:id="submit" value="Submit"/>
        </form>
    </body>
</html>


$ less ./wicket-core/src/test/java/org/apache/wicket/ajax/form/AjaxFormSubmitBehaviorTest.java

/**
 * Homepage
 */
public class AjaxFormSubmitBehaviorTestPage extends WebPage
{
        private static final long serialVersionUID = 1L;
        private final TestForm form;

        /**
         * Construct.
         */
        public AjaxFormSubmitBehaviorTestPage()
        {
                add(form = new TestForm("form"));
        }

        /**
         * @return form
         */
        public TestForm getForm()
        {
                return form;
        }
}
class TestForm extends Form<Void>
{
        private static final long serialVersionUID = 1L;
        private final Button submitButton;
        private final TextField<String> textField;
        private boolean submitedByAjaxBehavior;

        public TestForm(String id)
        {
                super(id);
                textField = new TextField<String>("textField", new Model<String>());
                textField.add(new AjaxFormSubmitBehavior("change")
                {
                        private static final long serialVersionUID = 1L;

                        @Override
                        protected void onError(AjaxRequestTarget target)
                        {
                        }

                        @Override
                        protected void onSubmit(AjaxRequestTarget target)
                        {
                                submitedByAjaxBehavior = true;
                        }
                });
                add(textField);
                add(new SubmitLink("ajaxSubmitLink")
                {
                        private static final long serialVersionUID = 1L;

                        @Override
                        public void onSubmit()
                        {
                                throw new IllegalStateException("Submit link hit!");
                        }
                });

                add((submitButton = new Button("submit")
                {
                        private static final long serialVersionUID = 1L;

                        @Override
                        public void onSubmit()
                        {
                                throw new IllegalStateException("Submit button hit!");
                        }
                }));
        }
        /**
         * @return the textField
         */
        public TextField<String> getTextField()
        {
                return textField;
        }


        /**
         * @return the submitedByAjaxBehavior
         */
        public boolean isSubmitedByAjaxBehavior()
        {
                return submitedByAjaxBehavior;
        }

}


$ less ./wicket-core/src/test/java/org/apache/wicket/ajax/form/AjaxFormSubmitBehaviorTestPage.java

public class AjaxFormSubmitBehaviorTest extends WicketTestCase
{
        /**      */
        @Test
        public void ajaxFormSubmitBehavior()
        {
                // start and render the test page
                tester.startPage(AjaxFormSubmitBehaviorTestPage.class);
                // assert rendered page class
                tester.assertRenderedPage(AjaxFormSubmitBehaviorTestPage.class);
                // assert rendered page class
                AjaxFormSubmitBehaviorTestPage homePage = (AjaxFormSubmitBehaviorTestPage)tester.getLastRenderedPage();
                TestForm testForm = homePage.getForm();
                tester.executeAjaxEvent(testForm.getTextField(), "change");
                assertTrue(testForm.isSubmitedByAjaxBehavior());
        }
}


/ lees	, 
https://issues.apache.org/jira/browse/WICKET-1743


/ 7	. 

/ lees manual	,
Testing AJAX events

/ 13	. 

/ wicket haalt "on" van de event af	,
/s
AjaxEventBehavior.class
	public String getEvent()
	{
				if (evt.startsWith("on"))
				{
					String shortName = evt.substring(2);


 

$ less AjaxFormPage.html

<head>
	<meta charset="utf-8">
</head>
<body>
	<div wicket:id="feedback"></div>
	<span wicket:id="label"></span>
</body>

$ less AjaxFormPage.java

public class AjaxFormPage extends WebPage {
	
	public static String INIT_VALUE = "Initial value";
	public static String OTHER_VALUE = "Other value";
	
	public AjaxFormPage() {
		
		Panel panel=new FeedbackPanel("feedback");
		add(panel);
		
		Label label=new Label("label", INIT_VALUE);
		AjaxEventBehavior behavior=new AjaxEventBehavior("foo") {
			@Override
			protected void onEvent(AjaxRequestTarget target) {
				target.add(getComponent());
				getComponent().setDefaultModelObject(OTHER_VALUE);
				
			}
		};
		add(label);
		label.add(behavior);
		label.setOutputMarkupId(true);
	}
}

$ less AjaxFormTest.java

public class AjaxFormTest {
	
	private WicketTester wicketTester;
	
	@Before
	public void init(){
		wicketTester=new WicketTester();
	}
	
	@Test
	public void testBehaviorOnLabel(){
		WebPage page=new AjaxFormPage();
		wicketTester.startPage(page);
		wicketTester.assertLabel("label", AjaxFormPage.INIT_VALUE);
		wicketTester.executeAjaxEvent("label", "foo");
		wicketTester.assertLabel("label", AjaxFormPage.OTHER_VALUE);
		
	}
}

/ OK

/ 7	 

/ lees	,
http://stackoverflow.com/questions/8415330/how-to-test-ajaxeventbehavioronclick-for-apache-wicket-radio-button

/ hier zien we ook AjaxEventBehavior	, WicketTester.executeAjaxEvent	, 

/ page	,

RadioGroup<Boolean> selectPageRadioGroup =
        new RadioGroup<Boolean>("selectPageRadioGroup", new Model<Boolean>(Boolean.TRUE));
selectPageRadioGroup.setDefaultModel(new Model<Boolean>(Boolean.TRUE));
final Radio<Boolean> radioButton1 =
        new Radio<Boolean>("radioButton1", new Model<Boolean>(Boolean.FALSE));
radioButton1.add(new AjaxEventBehavior("onclick") {
    @Override
    protected void onEvent(AjaxRequestTarget target) {
        setResponsePage(MyWebPage.class);
    }
});
selectPageRadioGroup.add(radioButton1);

/ test	,

tester.executeAjaxEvent("blabla:form:selectPageRadioGroup:radioButton1", "onclick");
tester.assertRenderedPage(MyWebPage.class);  


/ Einde TEST AJAX EVENTS

/ DEBUG AJAX 

/ 7	. 

/ click label op AjaxFormPage	,

public class AjaxFormPage extends WebPage {
  public AjaxFormPage() {
	AjaxEventBehavior behavior=new AjaxEventBehavior("click") {
			@Override
			protected void onEvent(AjaxRequestTarget target) {
				target.add(getComponent());
				getComponent().setDefaultModelObject(OTHER_VALUE);

/s
/ stack
	AjaxFormPage$1.onEvent(AjaxRequestTarget) line: 30	
/=
		AjaxEventBehavior behavior=new AjaxEventBehavior("click") {
			@Override
			protected void onEvent(AjaxRequestTarget target) {
				target.add(getComponent());								/ self done	,
				getComponent().setDefaultModelObject(OTHER_VALUE);
/cb
	AjaxFormPage$1(AjaxEventBehavior).respond(AjaxRequestTarget) line: 155	
		onEvent(target);
/cb
	AjaxFormPage$1(AbstractDefaultAjaxBehavior).onRequest() line: 593					/ controller	,	
		AjaxRequestTarget target = app.newAjaxRequestTarget(getComponent().getPage());
		respond(target);
/cb
 	RequestListenerInterface.internalInvoke(Component, Object) line: 258	
	RequestListenerInterface.invoke(IRequestableComponent, Behavior) line: 241 / interface naar alle controllers,	
	ListenerInterfaceRequestHandler.invokeListener() line: 248	
		if (getBehaviorIndex() == null)		
/ NEE	, er is een behavior ( en deze heeft index 0)			/ (*)
				Behavior behavior = getComponent().getBehaviorById(behaviorId);
				listenerInterface.invoke(getComponent(), behavior);
/cb
	ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 234	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
		invokeListener();											/ WH invoke controller	,
/cb
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ Eerst gingen we bij (*) toen er geen behavior was,  naar de controller	,
	Form<T>.onFormSubmitted() line: 708				/ controller
/ TODO
/ Dus zijn behaviors controllers, die je toevoegt	?

/ 7	. 

public abstract class AjaxFormSubmitBehavior extends AjaxEventBehavior
	protected void onEvent(final AjaxRequestTarget target)
/e
public abstract class AjaxEventBehavior extends AbstractDefaultAjaxBehavior
	protected abstract void onEvent(final AjaxRequestTarget target);


public class AjaxForm extends Form<Void> {
	public AjaxForm(String id) {
        textField = new TextField<String>("textField", new Model<String>());
        textField.add(new AjaxFormSubmitBehavior("keydown") {
                @Override
                protected void onSubmit(AjaxRequestTarget target) {
                        submitedByAjaxBehavior = true;

/ er wordt een AjaxSubmitter create	, die als een gewone Button werkt	, hij zet de onSubmit door naar die we hier in de behavior (=controller ) zien	, 

/s
/ stack	,
	AjaxForm$1(AjaxFormSubmitBehavior).onEvent(AjaxRequestTarget) line: 171	
	AjaxForm$1(AjaxEventBehavior).respond(AjaxRequestTarget) line: 155	
		onEvent(target);
/cb
	AjaxForm$1(AbstractDefaultAjaxBehavior).onRequest() line: 593	
		AjaxRequestTarget target = app.newAjaxRequestTarget(getComponent().getPage());
		respond(target);
/cb
	Method.invoke(Object, Object...) line: 606	
	RequestListenerInterface.internalInvoke(Component, Object) line: 258	
	RequestListenerInterface.invoke(IRequestableComponent, Behavior) line: 241	
	ListenerInterfaceRequestHandler.invokeListener() line: 248	
				Behavior behavior = getComponent().getBehaviorById(behaviorId);
				listenerInterface.invoke(getComponent(), behavior);
/cb
	ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 234	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/s
AjaxForm$1(AjaxFormSubmitBehavior).onEvent(AjaxRequestTarget) line: 171	
		getForm().getRootForm().onFormSubmitted(new AjaxFormSubmitter(this, target));

/ intermezzo

/ een  AjaxFormSubmitter  replaces een normal button , als we button-submit van het form doen	, 
/ TODO	

/**
	 * A publicly reachable class that allows to introspect the submitter, e.g. to
	 * check what is the input name of the submitting component if there is such.
	 */
	public static class AjaxFormSubmitter implements IFormSubmitter
		private AjaxFormSubmitter(AjaxFormSubmitBehavior submitBehavior, AjaxRequestTarget target)
		{
			this.submitBehavior = submitBehavior;	
			this.target = target;				

/ Einde intermezzo

/s
AjaxForm(Form<T>).onFormSubmitted(IFormSubmitter) line: 737	
/=
	public final void onFormSubmitted(IFormSubmitter submitter)
submitter	AjaxFormSubmitBehavior$AjaxFormSubmitter  (id=22184)	

/ Dit is de default controller , waar we altijd komen	,

				else
				{
					// the submit request might be for one of the nested forms, so let's
					// find the right one:
					final Form<?> formToProcess = findFormToProcess(submitter);

					// process the form for this request
					formToProcess.process(submitter);
/s
AjaxForm(Form<T>).process(IFormSubmitter) line: 933	
			delegateSubmit(submittingComponent);
/s
AjaxForm(Form<T>).delegateSubmit(IFormSubmitter) line: 1287	

/ hier komen we altijd	,

/ Eerst was bij een button-submit de button de submittingComponent, of bij een form-submit is submittingComponent==null	, 

		// process submitting component (if specified)
		if (submittingComponent != null)
		{
			// invoke submit on component
			submittingComponent.onSubmit();
/s
AjaxFormSubmitBehavior$AjaxFormSubmitter.onSubmit() line: 215	
			submitBehavior.onSubmit(target);
/s
AjaxForm$1.onSubmit(AjaxRequestTarget) line: 34 (out of synch)	
/=
       textField.add(new AjaxFormSubmitBehavior("keydown")
        {
                @Override
                protected void onSubmit(AjaxRequestTarget target)
                {
->                        submitedByAjaxBehavior = true;

/t
AjaxForm(Form<T>).delegateSubmit(IFormSubmitter) line: 1311	
		// process submitting component (if specified)
		if (submittingComponent != null)
		{
			// invoke submit on component
			submittingComponent.onSubmit();
		}
/d
		// invoke Form#onSubmit(..)
		for (Form<?> form : forms)
		{
			form.onSubmit();
/s
AjaxForm(Form<T>).onSubmit() line: 1815	
	{
	}




/ 7	. 

public abstract class OnChangeAjaxBehavior extends AjaxFormComponentUpdatingBehavior
/e
public abstract class AjaxFormComponentUpdatingBehavior extends AjaxEventBehavior
	protected final void onEvent(final AjaxRequestTarget target)
/e
public abstract class AjaxEventBehavior extends AbstractDefaultAjaxBehavior
	protected abstract void onEvent(final AjaxRequestTarget target);


public class AjaxForm extends Form<Void> {
	public AjaxForm(String id) {
        textField.add(new OnChangeAjaxBehavior() {
			@Override
			protected void onUpdate(AjaxRequestTarget target) {
				submitedByAjaxBehavior = true;

/ we geven in de textfield een char, op de server valt hij in 
RequestCycle.processRequest() line: 219	


/s
/ stack
	AjaxForm$1(AjaxFormComponentUpdatingBehavior).onEvent(AjaxRequestTarget) line: 135	
	AjaxForm$1(AjaxEventBehavior).respond(AjaxRequestTarget) line: 155	
		onEvent(target);
/cb
	AjaxForm$1(AbstractDefaultAjaxBehavior).onRequest() line: 593	
		AjaxRequestTarget target = app.newAjaxRequestTarget(getComponent().getPage());
		respond(target);
/cb
	RequestListenerInterface.internalInvoke(Component, Object) line: 258	
	RequestListenerInterface.invoke(IRequestableComponent, Behavior) line: 241	
	ListenerInterfaceRequestHandler.invokeListener() line: 248	
				Behavior behavior = getComponent().getBehaviorById(behaviorId);
				listenerInterface.invoke(getComponent(), behavior);
/cb
	ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 234	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/s
/ debug
AjaxForm$1(AjaxFormComponentUpdatingBehavior).onEvent(AjaxRequestTarget) line: 135	
...
				onUpdate(target);
/s
       textField.add(new OnChangeAjaxBehavior() {
			
			@Override
			protected void onUpdate(AjaxRequestTarget target) {
				submitedByAjaxBehavior = true;							/ self	,

/ 7	. 

/ lees	,
http://stackoverflow.com/questions/5564634/getting-a-wicket-text-boxs-value-in-an-ajax-onchange-event

$ less AjaxForm.java

        textField.add(new OnChangeAjaxBehavior() {
			
			@Override
			protected void onUpdate(AjaxRequestTarget target) {
				submitedByAjaxBehavior = true;
				
			}
		});

/ Maar we kunnen ook 1 superclass hoger blijven	, AjaxFormComponentUpdatingBehavior	, 

/ 13	. 

$ less AjxFrm.java

        textField.add(new OnChangeAjaxBehavior() {
			
			@Override
			protected void onUpdate(AjaxRequestTarget target) {
				submitedByAjaxBehavior = true;
				
				target.add(getComponent());
				getComponent().setDefaultModelObject("Foo Bar");
				
			}
		});

/ of	,

        textField.add(new AjaxFormComponentUpdatingBehavior("inputchange change") {
			
			@Override
			protected void onUpdate(AjaxRequestTarget target) {
				submitedByAjaxBehavior = true;
				
			}
		});


/ Met OnChangeAjaxBehavior zien we 
Wicket.Ajax.ajax({"u":"./ajaxform?0-2.IBehaviorListener.0-form-textField","m":"POST","c":"textField2","e":"inputchange change"});;

/ Met AjaxFormComponentUpdatingBehavior moeten we inputchange	, en niet change	, 
/ Met change moeten we nadat we een char hebben gegeven in de textfield, de focus van het textfield halen door te click op de page	, 
/ Met inputchange hoeven we alleen een char te geven, en de ajax call wordt gedaan	,
/ we geven, net als OnChangeAjaxBehavior, "inputchange change"

/ 7	 


/s
/ stack	,
	AjaxForm$1(AjaxFormComponentUpdatingBehavior).onEvent(AjaxRequestTarget) line: 151	
	AjaxForm$1(AjaxEventBehavior).respond(AjaxRequestTarget) line: 155	
		onEvent(target);
/cb
	AjaxForm$1(AbstractDefaultAjaxBehavior).onRequest() line: 593	
		AjaxRequestTarget target = app.newAjaxRequestTarget(getComponent().getPage());
		respond(target);
/cb
	RequestListenerInterface.internalInvoke(Component, Object) line: 258	
	RequestListenerInterface.invoke(IRequestableComponent, Behavior) line: 241	
	ListenerInterfaceRequestHandler.invokeListener() line: 248	
				Behavior behavior = getComponent().getBehaviorById(behaviorId);
				listenerInterface.invoke(getComponent(), behavior);
/cb
	ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 234	
		invokeListener();
/cb
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/s
AjaxForm$1(AjaxFormComponentUpdatingBehavior).onEvent(AjaxRequestTarget) line: 151	
					formComponent.updateModel();
				onUpdate(target);
/s
AjaxForm$1.onUpdate(AjaxRequestTarget) line: 50 (out of synch)	
       textField.add(new AjaxFormComponentUpdatingBehavior("change") {		/ self	,
			@Override
			protected void onUpdate(AjaxRequestTarget target) {
				submitedByAjaxBehavior = true;





/ 7	. 



/ Einde DEBUG AJAX 

/ WICKET JS LOAD PAGE BEHAVIOR (CONTROLLER) SCRIPTS

/ in AjxPage hebben we ajax components, 	
/ Daarom staat er in de page	,

Wicket.Event.add(window, "domready", function(event) { 
	Wicket.Ajax.ajax({"u":"./ajax?0-3.IBehaviorListener.0-link","c":"link1","e":"click"});;
	Wicket.Event.publish(Wicket.Event.Topic.AJAX_HANDLERS_BOUND);
;});

/ wat doet dit	?
/ register handler als we click op de link	, dus als we request	,

(anonymous function) (wicket-ajax-jqu…568000.js:1956)
				jQuery.each(attrs.e, function (idx, evt) {
->					Wicket.Event.add(attrs.c, evt, function (jqEvent, data) {
attrs: Object
c: "link1"
e: Array[1]
	0: "click"
u: "./ajax?0-3.IBehaviorListener.0-link"
__proto__: Object
						var call = new Wicket.Ajax.Call();

jQuery.extend.each (jquery-1.12.0-v…3568000.js:370)
jQuery.extend.Ajax.ajax (wicket-ajax-jqu…568000.js:1955)
->				jQuery.each(attrs.e, function (idx, evt) {
					Wicket.Event.add(attrs.c, evt, function (jqEvent, data) {
/cb
(anonymous function) (ajax?0:29)
	Wicket.Ajax.ajax({"u":"./ajax?0-3.IBehaviorListener.0-link","c":"link1","e":"click"});;	 /het script op de page	,
/cb
jQuery.Callbacks.fire (jquery-1.12.0-v…568000.js:3232)
jQuery.Callbacks.self.fireWith (jquery-1.12.0-v…568000.js:3362)
jQuery.extend.ready (jquery-1.12.0-v…568000.js:3582)
completed (jquery-1.12.0-v…568000.js:3617)
		jQuery.ready();



/ Einde WICKET JS LOAD PAGE BEHAVIOR (CONTROLLER) SCRIPTS

/ WICKET JS REPLACE HTML BY AJAXLINK IN LABEL 

/ 7	. 

/ Op de page	, 

public class AjxFrmPage extends WebPage {


		AjaxEventBehavior behavior=new AjaxEventBehavior("click") {
			@Override
			protected void onEvent(AjaxRequestTarget target) {
				target.add(getComponent());
				getComponent().setDefaultModelObject(OTHER_VALUE);
			}
		}
		label.add(behavior);
/ en	,
public class AjxFrm extends Form<Void> {

        textField.add(new OnChangeAjaxBehavior() {
			@Override
			protected void onUpdate(AjaxRequestTarget target) {
				submitedByAjaxBehavior = true;
				target.add(getComponent());
				getComponent().setDefaultModelObject("Foo Bar");


/ we zien in HTML dat er op de page staat	,
Wicket.Event.add(window, "domready", function(event) { 
	Wicket.Ajax.ajax({"u":"./ajaxform?0-2.IBehaviorListener.0-label","c":"label1","e":"click"});;
	Wicket.Ajax.ajax({"u":"./ajaxform?0-2.IBehaviorListener.0-form-textField","m":"POST","c":"textField2","e":"inputchange change"});;
	Wicket.Event.publish(Wicket.Event.Topic.AJAX_HANDLERS_BOUND);
;});

/ set in wicket-ajax-jquery.js b's, 
Wicket.Ajax.Call.doAjax (wicket-ajax-jqu…3568000.js:575)			/ request
		doAjax: function (attrs) {
/ en	,
jQuery.extend.Ajax.ajax (wicket-ajax-jqu…568000.js:1948)			/ response
				attrs.c = attrs.c || window;

/ we vallen altijd in 575	, 
/ of we nu in de behavior target.add doen of niet	, er is altijd een reponse en wordt processed	, 
/ maar als we target.add doen, zijn er meer fcts, 5 , en als we niet doen 2	, 

/ 13	. 

/ TARGET.ADD OR NOT	,

/ we zien dat we in 2 verschillende fcts komen,  

$ less wicket-ajax-jquery.js


		// Processes the response
		loadedCallback: function (envelope, context) {
			...

		// Adds a closure to steps that should be invoked after all other steps have been successfully executed
		success: function (context) {
			context.steps.push(jQuery.proxy(function (notify) {
				Wicket.Log.info("Response processed successfully.");	/ hier als we geen target.add	,

		// Adds a closure that replaces a component
		processComponent: function (context, node) {
			context.steps.push(function (notify) {
				// get the component id
				var compId = node.getAttribute("id");			/ hier als we target.add 	, 

				// get existing component
				var element = Wicket.$(compId);

				} else {
					var text = Wicket.DOM.text(node);			/ replaces DOM elem	,

					// replace the component
					Wicket.DOM.replace(element, text);

/ TODO Zoek uit met die 5 en 2 fcts	, en welke hierboven worden called	,
/ MORGENOCHTEND

/ Einde TARGET.ADD

/ Einde intermezzo


/ hierboven hebben we in beide controllers target.add, dus valt hij bij beide in 1948	,

/ 7	 
 
/ op AjxFrmPage, we click op het label, 
/ kijk in devtools' Sources, en naar Initiator, 
/ we zien 

/ request	, 

text/xml	jquery-1.12.0-ver-1455723568000.js:10243

jQuery.ajaxTransport.send	@	jquery-1.12.0-ver-1455723568000.js:10243
jQuery.extend.ajax	@	jquery-1.12.0-ver-1455723568000.js:9732
Wicket.Ajax.Call.doAjax	@	wicket-ajax-jquery-ver-1455723568000.js:667
(anonymous function)	@	wicket-ajax-jquery-ver-1455723568000.js:563
jQuery.extend.proxy.proxy	@	jquery-1.12.0-ver-1455723568000.js:529
Wicket.Channel.schedule	@	wicket-ajax-jquery-ver-1455723568000.js:298
Wicket.ChannelManager.schedule	@	wicket-ajax-jquery-ver-1455723568000.js:358
Wicket.Ajax.Call.ajax	@	wicket-ajax-jquery-ver-1455723568000.js:562
(anonymous function)	@	wicket-ajax-jquery-ver-1455723568000.js:1977
jQuery.event.dispatch	@	jquery-1.12.0-ver-1455723568000.js:5227
jQuery.event.add.elemData.handle	@	jquery-1.12.0-ver-1455723568000.js:4879

/ dus we zien dat het via wicket's ajax gaat	,
Request URL:http://localhost:9090/wicket-examples-step-by-step/repeater/ajaxform?0-5.IBehaviorListener.0-label&_=1480493043973
GET

/ als we een char add in het textfield zien we 	,

/ request	,

text/xml	jquery-1.12.0-ver-1455723568000.js:10243

jQuery.ajaxTransport.send	@	jquery-1.12.0-ver-1455723568000.js:10243
jQuery.extend.ajax	@	jquery-1.12.0-ver-1455723568000.js:9732
Wicket.Ajax.Call.doAjax	@	wicket-ajax-jquery-ver-1455723568000.js:667
(anonymous function)	@	wicket-ajax-jquery-ver-1455723568000.js:563
jQuery.extend.proxy.proxy	@	jquery-1.12.0-ver-1455723568000.js:529
Wicket.Channel.schedule	@	wicket-ajax-jquery-ver-1455723568000.js:298
Wicket.ChannelManager.schedule	@	wicket-ajax-jquery-ver-1455723568000.js:358
Wicket.Ajax.Call.ajax	@	wicket-ajax-jquery-ver-1455723568000.js:562
(anonymous function)	@	wicket-ajax-jquery-ver-1455723568000.js:1977
jQuery.event.dispatch	@	jquery-1.12.0-ver-1455723568000.js:5227
jQuery.event.add.elemData.handle	@	jquery-1.12.0-ver-1455723568000.js:4879
jQuery.event.trigger	@	jquery-1.12.0-ver-1455723568000.js:5131
(anonymous function)	@	jquery-1.12.0-ver-1455723568000.js:5861
jQuery.extend.each	@	jquery-1.12.0-ver-1455723568000.js:370
jQuery.fn.jQuery.each	@	jquery-1.12.0-ver-1455723568000.js:137
jQuery.fn.extend.trigger	@	jquery-1.12.0-ver-1455723568000.js:5860
jQuery.event.special.inputchange.handler	@	wicket-ajax-jquery-ver-1455723568000.js:2842
jQuery.event.dispatch	@	jquery-1.12.0-ver-1455723568000.js:5227
jQuery.event.add.elemData.handle	@	jquery-1.12.0-ver-1455723568000.js:4879


/ Dan vallen we in de server	, 
RequestCycle.processRequest() line: 219	

/ dan de response	,

/ dan vallen we in	, 
jQuery.extend.Ajax.ajax (wicket-ajax-jqu…568000.js:1948)
(anonymous function) (VM4092:1)
(anonymous function) (VM4092:1)
Wicket.Ajax.Call.processEvaluation.evaluate (wicket-ajax-jqu…568000.js:1204)
FunctionsExecuter.processNext.run (wicket-ajax-jqu…3568000.js:157)
jQuery.extend.proxy.proxy (jquery-1.12.0-v…3568000.js:529)
FunctionsExecuter.processNext (wicket-ajax-jqu…3568000.js:172)
FunctionsExecuter.start (wicket-ajax-jqu…3568000.js:184)
Wicket.Ajax.Call.doAjax.jQuery.ajax.complete (wicket-ajax-jqu…3568000.js:729)
jQuery.Callbacks.fire (jquery-1.12.0-v…568000.js:3232)
jQuery.Callbacks.self.fireWith (jquery-1.12.0-v…568000.js:3362)
done (jquery-1.12.0-v…568000.js:9849)
jQuery.ajaxTransport.send.callback (jquery-1.12.0-v…68000.js:10300)

/ 7	. 

$ less  AjxPage.html

<head>
	<meta charset="utf-8">
</head>
<body>
	<div wicket:id="feedback"></div>
	<span wicket:id="label"></span>
	<a wicket:id="link">click</a>	
</body>

$ less  AjxPage.java

public class AjxPage extends WebPage {
	
	private String name;
	private Label label;
	
	public AjxPage() {
		
		Panel panel=new FeedbackPanel("feedback");
		add(panel);
		
		name="foo";
		IModel<String>model=new PropertyModel<String>(this, "name");
		label=new Label("label",model);
		add(label);
		label.setOutputMarkupId(true);
		AjaxLink<Void>ajaxLink=new AjaxLink<Void>("link") {
			@Override
			public void onClick(AjaxRequestTarget target) {
				name+="bar";
				target.add(label);
				
			}
		};
		add(ajaxLink);
	}
}

/ we click op de link	,

/ request	,

Request URL:http://localhost:9090/wicket-examples-step-by-step/repeater/ajax?0-1.IBehaviorListener.0-link&_=1480500731293
Request Method:GET

/ request, we click	,

jQuery.ajaxTransport.send (jquery-1.12.0-v…68000.js:10320)
						xhr.onreadystatechange = xhrCallbacks[ id ] = callback;
/cb
jQuery.extend.ajax (jquery-1.12.0-v…568000.js:9732)
				transport.send( requestHeaders, done );
/cb
Wicket.Ajax.Call.doAjax (wicket-ajax-jqu…3568000.js:667)
			var jqXHR = jQuery.ajax({
/cb
(anonymous function) (wicket-ajax-jqu…3568000.js:563)
/=
		Wicket.Ajax.Call.prototype.ajax: function (attrs) {
			this._initializeDefaults(attrs);

			var res = Wicket.channelManager.schedule(attrs.ch, Wicket.bind(function () {
				this.doAjax(attrs);

jQuery.extend.proxy.proxy (jquery-1.12.0-v…3568000.js:529)
Wicket.Channel.schedule (wicket-ajax-jqu…3568000.js:298)
					return callback();
/cb
Wicket.ChannelManager.schedule (wicket-ajax-jqu…3568000.js:358)
			return c.schedule(callback);
/cb
Wicket.Ajax.Call.ajax (wicket-ajax-jqu…3568000.js:562)
			var res = Wicket.channelManager.schedule(attrs.ch, Wicket.bind(function () {
				this.doAjax(attrs);
			}, this));
/cb
(anonymous function) (wicket-ajax-jqu…568000.js:1977)
/=
				jQuery.each(attrs.e, function (idx, evt) {
					Wicket.Event.add(attrs.c, evt, function (jqEvent, data) {
						var call = new Wicket.Ajax.Call();
						var attributes = jQuery.extend({}, attrs);
async: true
c: "link1"
ch: "0|s"
dt: "xml"
e: Array[1]
event: jQuery.Event
m: "GET"
pd: false
rt: 0
sp: "bubble"
sr: false
u: "./ajax?0-1.IBehaviorListener.0-link"
wr: true
						else {
							call.ajax(attributes);
/cb
jQuery.event.dispatch (jquery-1.12.0-v…568000.js:5227)
					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle || handleObj.handler ).apply( matched.elem, args );
/cb
jQuery.event.add.elemData.handle (jquery-1.12.0-v…568000.js:4879)
					jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :


/ response	, 

<?xml version="1.0" encoding="UTF-8"?><ajax-response><component id="label2" ><![CDATA[<span wicket:id="label" id="label2">foobarbarbar</span>]]></component></ajax-response>

/ Waar in js wordt de label vervangen	?

/ eerst register	,
/s
Wicket.Ajax.Call.processComponent (wicket-ajax-jqu…568000.js:1137)
Wicket.Ajax.Call.loadedCallback (wicket-ajax-jqu…568000.js:1072)
						this.processComponent(context, node);
/cb
->			context.steps.push(function (notify) {						/ register	,
				} else {
					var text = Wicket.DOM.text(node);
					// replace the component
					Wicket.DOM.replace(element, text);					/ straks	,
/cb
Wicket.Ajax.Call.processAjaxResponse (wicket-ajax-jqu…3568000.js:825)
					// invoke the loaded callback with an xml document
					return this.loadedCallback(data, context);
/cb
Wicket.Ajax.Call.doAjax.jQuery.ajax.success (wicket-ajax-jqu…3568000.js:705)
						self.processAjaxResponse(data, textStatus, jqXHR, context);
/cb
jQuery.Callbacks.fire (jquery-1.12.0-v…568000.js:3232)
jQuery.Callbacks.self.fireWith (jquery-1.12.0-v…568000.js:3362)
done (jquery-1.12.0-v…568000.js:9834)
			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
/cb
jQuery.ajaxTransport.send.callback (jquery-1.12.0-v…68000.js:10300)
						// Call complete if needed
						if ( responses ) {
							complete( status, statusText, responses, xhr.getAllResponseHeaders() );


/ dan wordt called	, 

/s
(anonymous function) (wicket-ajax-jqu…568000.js:1152)
			context.steps.push(function (notify) {
				} else {
					var text = Wicket.DOM.text(node);
					// replace the component
					Wicket.DOM.replace(element, text);
/cb
FunctionsExecuter.processNext.run (wicket-ajax-jqu…3568000.js:157)
						return f(n);
/cb
jQuery.extend.proxy.proxy (jquery-1.12.0-v…3568000.js:529)
FunctionsExecuter.processNext (wicket-ajax-jqu…3568000.js:172)
				} else {
					var retValue = run();
/cb
FunctionsExecuter.start (wicket-ajax-jqu…3568000.js:184)
Wicket.Ajax.Call.doAjax.jQuery.ajax.complete (wicket-ajax-jqu…3568000.js:729)
					var executer = new FunctionsExecuter(context.steps);
					executer.start();
/cb
jQuery.Callbacks.fire (jquery-1.12.0-v…568000.js:3232)
jQuery.Callbacks.self.fireWith (jquery-1.12.0-v…568000.js:3362)
done (jquery-1.12.0-v…568000.js:9849)
			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );
/cb
jQuery.ajaxTransport.send.callback (jquery-1.12.0-v…68000.js:10300)
						// Call complete if needed
						if ( responses ) {
							complete( status, statusText, responses, xhr.getAllResponseHeaders() );

/ eerder	,
jQuery.ajaxTransport.send: 10320
					} else {
						// Register the callback, but delay it in case `xhr.send` throws
						// Add to the list of active xhr callbacks
						xhr.onreadystatechange = xhrCallbacks[ id ] = callback;

/ Einde WICKET JS REPLACE HTML BY AJAXLINK IN LABEL 

/ WICKET JS REPLACE HTML BY AJAXLINK IN LABEL 

/ SPRING

/ lees	,
https://www.mkyong.com/wicket/wicket-spring-integration-example/
/ TODO

/ we install buildship (gradle) in eclipse-jee-test 	,
/ maar we hebben gradle-1.11	ipv gradle-2.6
/ TODO	
in wicket7_5 we import a4 projects	,

/ 7	. 



/ Einde SPRING

/ WICKET SPRING

/ 7	. 

/ we moeten geven in chrome	,
http://localhost:9090/wicket-spring/first-steps/hello
/ =
http://localhost:9090/<...-name>/<app-name>/<page>


/ in eclipse heet project wicket-spring, dit wordt de context-root	,



$ vi src/main/webapp/WEB-INF/web.xml
 <filter>
    <filter-name>HelloApplication</filter-name>
    <filter-class>org.apache.wicket.protocol.http.WicketFilter</filter-class>
    <init-param>
      <param-name>applicationClassName</param-name>
      <param-value>web.HelloApplication</param-value>
    </init-param>
  </filter>
 <filter-mapping>
    <filter-name>HelloApplication</filter-name>
    <url-pattern>/first-steps/*</url-pattern>
  </filter-mapping>

$ vi src/main/java/web/HelloApplication

	protected void init() {
		super.init();
		getComponentInstantiationListeners().add(new SpringComponentInjector(this));
		mountPage("hello", HelloPage.class);

/ 7	. 

org.apache.wicket.markup.MarkupNotFoundException: Can not determine Markup. Component is not yet connected to a parent. [Page class = web.HelloPage, id = 0, render count = 1]
     at org.apache.wicket.Component.getMarkup(Component.java:749)
     at org.apache.wicket.Component.internalRender(Component.java:2345)
     at org.apache.wicket.Component.render(Component.java:2308)
     at org.apache.wicket.Page.renderPage(Page.java:1018)
     at org.apache.wicket.request.handler.render.WebPageRenderer.renderPage(WebPageRenderer.java:124)
     at org.apache.wicket.request.handler.render.WebPageRenderer.respond(WebPageRenderer.java:236)
     at org.apache.wicket.core.request.handler.RenderPageRequestHandler.respond(RenderPageRequestHandler.java:175)
     at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:895)
     at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:64)
     at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:265)
     at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:222)
     at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:293)
     at org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(WicketFilter.java:261)
     at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:203)
     at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:284)

/ we moeten in 
$ vi pom.xml

	<build>
		<resources>
			<resource>
				<filtering>false</filtering>
				<directory>src/main/resources</directory> 	/ cp .xml als er is	,
			</resource>
			<resource>
				<filtering>false</filtering>
				<directory>src/main/java</directory>		/ cp ...Page.html files	, 
				<includes>
					<include>**</include>
				</includes>
				<excludes>
					<exclude>**/*.java</exclude>
				</excludes>
			</resource>
		</resources>
		<testResources>
			<testResource>
				<filtering>false</filtering>
				<directory>src/test/resources</directory>
			</testResource>
			<testResource>
				<filtering>false</filtering>
				<directory>src/test/java</directory>
				<includes>
					<include>**</include>
				</includes>
				<excludes>
					<exclude>**/*.java</exclude>
				</excludes>
			</testResource>
		</testResources>	

/ lees	,
https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html

/ 13	. 

process-resources
	resources:resources


[INFO] Copying 2 resources
[DEBUG] file IndexPage.html has a filtered file extension
[DEBUG] copy /home/eric/Devel/Java/Eclipse/eclipse-jee-test/workspace-wicket7_5/wicket-spring/src/main/java/web/IndexPage.html to /home/eric/Devel/Java/Eclipse/eclipse-jee-test/workspace-wicket7_5/wicket-spring/target/classes/web/IndexPage.html
[DEBUG] file HelloPage.html has a filtered file extension
[DEBUG] copy /home/eric/Devel/Java/Eclipse/eclipse-jee-test/workspace-wicket7_5/wicket-spring/src/main/java/web/HelloPage.html to /home/eric/Devel/Java/Eclipse/eclipse-jee-test/workspace-wicket7_5/wicket-spring/target/classes/web/HelloPage.html
[DEBUG] no use filter components

/ 13	. 

process-test-resources
	resources:testRresources

[INFO] Copying 1 resource
[DEBUG] file HelloTest-context.xml has a filtered file extension
[DEBUG] copy /home/eric/Devel/Java/Eclipse/eclipse-jee-test/workspace-wicket7_5/wicket-spring/src/test/resources/web/HelloTest-context.xml to /home/eric/Devel/Java/Eclipse/eclipse-jee-test/workspace-wicket7_5/wicket-spring/target/test-classes/web/HelloTest-context.xml
[DEBUG] resource with targetPath null
directory /home/eric/Devel/Java/Eclipse/eclipse-jee-test/workspace-wicket7_5/wicket-spring/src/test/java

/ MORGENOCHTEND	,

/ 13	. 

$ mvn clean package

/ Geef in run config in eclipse 
Debug output : check	,

/ NIET 
[eric@localhost wicket_spring]$ pwd
/home/eric/Devel/Java/Wicket/wicket_spring/wicket_spring

/ WEL	,
[eric@localhost wicket-spring]$ pwd
/home/eric/Devel/Java/Eclipse/eclipse-jee-test/workspace-wicket7_5/wicket-spring

[eric@localhost wicket-spring]$ find -name "*.war"| xargs jar tvf

     0 Mon Dec 05 16:03:42 CET 2016 META-INF/
   123 Mon Dec 05 16:03:40 CET 2016 META-INF/MANIFEST.MF

     0 Mon Dec 05 16:03:40 CET 2016 WEB-INF/
     0 Mon Dec 05 16:03:40 CET 2016 WEB-INF/classes/
     0 Mon Dec 05 16:03:40 CET 2016 WEB-INF/classes/services/
     0 Mon Dec 05 16:03:40 CET 2016 WEB-INF/classes/web/
     0 Mon Dec 05 16:03:40 CET 2016 WEB-INF/lib/
   156 Mon Dec 05 16:03:40 CET 2016 WEB-INF/classes/services/HelloService.class
   276 Mon Dec 05 16:03:40 CET 2016 WEB-INF/classes/services/HelloConfig.class
   513 Mon Dec 05 16:03:40 CET 2016 WEB-INF/classes/services/HelloServiceImpl.class
  1130 Mon Dec 05 16:03:40 CET 2016 WEB-INF/classes/web/HelloApplication.class
   281 Mon Dec 05 16:03:40 CET 2016 WEB-INF/classes/web/IndexPage.class
   117 Mon Dec 05 16:03:38 CET 2016 WEB-INF/classes/web/IndexPage.html
  1087 Mon Dec 05 16:03:40 CET 2016 WEB-INF/classes/web/HelloPage.class
   148 Mon Dec 05 16:03:38 CET 2016 WEB-INF/classes/web/HelloPage.html

   816 Mon Dec 05 13:22:42 CET 2016 WEB-INF/web.xml
  1153 Mon Dec 05 13:57:52 CET 2016 WEB-INF/applicationContext.xml

185140 Fri Oct 31 15:25:18 CET 2014 WEB-INF/lib/commons-io-2.4.jar
379115 Wed Feb 17 16:39:28 CET 2016 WEB-INF/lib/wicket-util-7.2.0.jar
 51287 Fri Oct 14 12:44:14 CEST 2016 WEB-INF/lib/objenesis-2.4.jar
751238 Wed Feb 17 16:39:28 CET 2016 WEB-INF/lib/commons-collections4-4.1.jar
 43296 Mon Nov 24 09:39:58 CET 2014 WEB-INF/lib/asm-util-5.0.3.jar
380082 Tue Nov 15 16:21:38 CET 2016 WEB-INF/lib/spring-aop-4.3.4.RELEASE.jar
 31213 Fri Oct 14 10:00:36 CEST 2016 WEB-INF/lib/wicket-spring-7.2.0.jar
1112602 Tue Nov 15 16:12:36 CET 2016 WEB-INF/lib/spring-core-4.3.4.RELEASE.jar
 69002 Fri Oct 31 15:25:18 CET 2014 WEB-INF/lib/commons-fileupload-1.3.1.jar
813854 Mon Dec 05 09:09:10 CET 2016 WEB-INF/lib/spring-web-4.3.4.RELEASE.jar
 24624 Thu Nov 17 14:53:02 CET 2016 WEB-INF/lib/byte-buddy-agent-1.5.5.jar
 28505 Fri Oct 14 10:00:30 CEST 2016 WEB-INF/lib/wicket-ioc-7.2.0.jar
596161 Mon Dec 05 14:01:22 CET 2016 WEB-INF/lib/spring-test-4.3.4.RELEASE.jar
  2497 Wed Jul 30 17:40:34 CEST 2014 WEB-INF/lib/javax.inject-1.jar
 29036 Mon Nov 24 09:39:58 CET 2014 WEB-INF/lib/asm-tree-5.0.3.jar
 32127 Wed Feb 17 16:39:28 CET 2016 WEB-INF/lib/slf4j-api-1.7.12.jar
 61829 Thu Jan 08 09:45:04 CET 2015 WEB-INF/lib/commons-logging-1.2.jar
2652987 Thu Nov 17 14:53:02 CET 2016 WEB-INF/lib/byte-buddy-1.5.5.jar
1135493 Tue Nov 15 16:21:38 CET 2016 WEB-INF/lib/spring-context-4.3.4.RELEASE.jar
 53231 Mon Nov 24 09:39:58 CET 2014 WEB-INF/lib/asm-5.0.3.jar
761236 Tue Nov 15 16:21:38 CET 2016 WEB-INF/lib/spring-beans-4.3.4.RELEASE.jar
2224061 Wed Feb 17 16:39:28 CET 2016 WEB-INF/lib/wicket-core-7.2.0.jar
 87976 Wed Feb 17 16:39:28 CET 2016 WEB-INF/lib/wicket-request-7.2.0.jar
  9988 Fri Oct 14 12:44:14 CEST 2016 WEB-INF/lib/slf4j-log4j12-1.7.21.jar
894659 Thu Nov 17 14:53:02 CET 2016 WEB-INF/lib/mockito-core-2.2.19.jar
283080 Mon Nov 24 09:39:58 CET 2014 WEB-INF/lib/cglib-3.1.jar
263392 Tue Nov 15 16:21:38 CET 2016 WEB-INF/lib/spring-expression-4.3.4.RELEASE.jar
489884 Mon Jul 07 15:41:44 CEST 2014 WEB-INF/lib/log4j-1.2.17.jar

     0 Mon Dec 05 16:03:42 CET 2016 META-INF/maven/
     0 Mon Dec 05 16:03:42 CET 2016 META-INF/maven/my.own/
     0 Mon Dec 05 16:03:42 CET 2016 META-INF/maven/my.own/wicket-spring/
  3478 Mon Dec 05 15:43:44 CET 2016 META-INF/maven/my.own/wicket-spring/pom.xml
   113 Mon Dec 05 16:03:40 CET 2016 META-INF/maven/my.own/wicket-spring/pom.properties

./target/test-classes
./target/test-classes/web
./target/test-classes/web/HelloTest.class
./target/test-classes/web/HelloTest-context.xml

/ 13	. 

/ als we via 'mvn test' willen debug	 , lees over surefire	,
http://maven.apache.org/surefire/maven-surefire-plugin/examples/debugging.html

/ 7	. 

/ SPRINGBEAN ANNOTATION

[eric@localhost wicket-spring]$  pwd
/home/eric/Devel/Java/Eclipse/eclipse-jee-test/workspace-wicket7_5/wicket-spring

/ Met de web.xml hieronder kunnen we de appl deploy in tomcat	, maar de test werkt NIET	,
/ Ook werkt Java config niet, in HelloConfig.java, 
/ TODO
/ maar WEB-INF/applicationContext.xml werkt WEL	,
$ less WEB-INF/applicationContext.xml
  	<context:component-scan base-package="services" />
/ en daardoor kunnen we 	,
@Service
public class HelloServiceImpl implements HelloService {


// ./src/main/java/services/HelloConfig.java 	// werkt NIET TODO
./src/main/java/services/HelloService.java
./src/main/java/services/HelloServiceImpl.java

./src/main/java/web/HelloApplication.java
./src/main/java/web/HelloPage.html
./src/main/java/web/HelloPage.java

./src/main/webapp/WEB-INF/applicationContext.xml	/ werkt WEL	,
./src/main/webapp/WEB-INF/web.xml

/ We hebben services, web packages	,

$ less ./src/main/java/services/HelloService.java

public interface HelloService {
	String getHello();
}

$ less ./src/main/java/services/HelloServiceImpl.java

@Service
public class HelloServiceImpl implements HelloService {

	public String getHello(){
		return "Hello World";
	}

}

$ less ./src/main/java/web/HelloApplication.java

public class HelloApplication extends WebApplication {
	@Override
	protected void init() {
		super.init();
		getComponentInstantiationListeners().add(new SpringComponentInjector(this));
		mountPage("hello", HelloPage.class);
	}

	@Override
	public Class<? extends Page> getHomePage() {
		return null; 
	}
	
}
$ less ./src/main/java/web/HelloPage.html

<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
<span wicket:id="label"></span>
</body>


$ less ./src/main/java/web/HelloPage.java

public class HelloPage extends WebPage {
	
	@SpringBean
	private HelloService helloService;
	
	public HelloPage() {
		IModel<String>model=new Model<String>(helloService.getHello());
		Label label=new Label("label", model);
		add(label);
	}
}

$ less ./src/main/webapp/WEB-INF/applicationContext.xml

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:context="http://www.springframework.org/schema/context"
  xmlns:c="http://www.springframework.org/schema/c"
  xmlns:p="http://www.springframework.org/schema/p"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
  <context:component-scan base-package="services" />

</beans>

./src/main/webapp/WEB-INF/web.xml

?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" version="2.5">
 <filter>
    <filter-name>HelloApplication</filter-name>
    <filter-class>org.apache.wicket.protocol.http.WicketFilter</filter-class>
    <init-param>
      <param-name>applicationClassName</param-name>
      <param-value>web.HelloApplication</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>HelloApplication</filter-name>
    <url-pattern>/first-steps/*</url-pattern>
  </filter-mapping>
  
  <listener>
  	<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
</web-app>

/ 7	. 

/ We hebben gewerkt aan integration testing	, 
https://ci.apache.org/projects/wicket/guide/7.x/guide/testingspring.html
/ TODO Afmaken

/ we hebben WEB-INF/web.xml edit	,  en HelloApplication	, 

$ vi web.xml

 <filter>
    <filter-name>HelloApplication</filter-name>
    <filter-class>org.apache.wicket.protocol.http.WicketFilter</filter-class>
    <init-param>
      <param-name>applicationFactoryClassName</param-name>
      <param-value>org.apache.wicket.spring.SpringWebApplicationFactory</param-value>
    </init-param>
  </filter>
  
 <!--  
 	<filter-mapping/> is unnecessary for testing
  -->
  
  <listener>
  	<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
  
  <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>/WEB-INF/applicationContext.xml</param-value>
   </context-param>
  
</web-app>



/ en  
$ vi HelloApplication.java  
@Component
public class HelloApplication extends WebApplication {




/ Einde WICKET SPRING

/ WICKET 

/ 7	. 

/ boek(126) WebMarkupContainer	,
/ TODO

/ 7	. 

/ wicket:container	,

$ vi FilterFoolbar.h

<wicket:panel>
	<tr class="filters-tr">
		<wicket:container wicket:id="filters">
			<td wicket:id="filter" class="filter-td">[filter]</td>
		</wicket:container>
	</tr>
</wicket:panel>

$ vi FilterToolbar.java

	public <T, S, F> FilterToolbar(final DataTable<T, S> table, final FilterForm<F> form)
		// populate the toolbar with components provided by filtered columns
		ListView<IColumn<T, S>> filters = new ListView<IColumn<T, S>>("filters", model)




/ Einde WICKET 

/ WICKET FORM DEBUG

/ 7	. 

/ wanneer wordt action attr set op form	?
/ wanneer krijgt het filterform de <input type="submit">	, zodat we Enter kunnen geven in een textfield in het form	?

/ we zien	, 

	protected void onComponentTag(final ComponentTag tag)
	{
		super.onComponentTag(tag);

		checkComponentTag(tag, "form");

		if (isRootForm())
		{
			String method = getMethod().toLowerCase(Locale.ENGLISH);
			tag.put("method", method);
			String url = getActionUrl().toString();
			if (encodeUrlInHiddenFields())
			{
				int i = url.indexOf('?');
				String action = (i > -1) ? url.substring(0, i) : "";
				tag.put("action", action);
				// alternatively, we could just put an empty string here, so
				// that mounted paths stay in good order. I decided against this
				// as I'm not sure whether that could have side effects with
				// other encoders
			}
			else
			{
				tag.put("action", url);

public class FilterForm<T> extends Form<T>
	@Override
	public void onComponentTagBody(final MarkupStream markupStream, final ComponentTag openTag)
	{
		super.onComponentTagBody(markupStream, openTag);

		String id = Strings.escapeMarkup(getFocusTrackerFieldCssId()).toString();
		String value = getRequest().getPostParameters().getParameterValue(id).toString("");
		getResponse().write(
			String.format(
				"<div style='position: absolute; left: -9999px; width: 1px; height: 1px;'><input type='hidden' name='%s' id='%s' value='%s'/><input type='submit'/></div>",
				id, id, Strings.escapeMarkup(value)));
	}

/ in wicket 1.4	,
/ TODO



/ 7	 .

/ Voor action, we debug AjxFrmPage	, 

/s
/ stack	,
	AjxFrm(Form<T>).onComponentTag(ComponentTag) line: 1578	
	AjxFrm(Component).internalRenderComponent() line: 2521	
	AjxFrm(MarkupContainer).onRender() line: 1698	
	AjxFrm(Component).internalRender() line: 2380	
	AjxFrm(Component).render() line: 2308	
	AjxFrmPage(MarkupContainer).renderNext(MarkupStream) line: 1524	
	AjxFrmPage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	AjxFrmPage(Page).onRender() line: 879	
	AjxFrmPage(WebPage).onRender() line: 141	
	AjxFrmPage(Component).internalRender() line: 2380	
	AjxFrmPage(Component).render() line: 2308	
	AjxFrmPage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/ debug	,
/s
AjxFrm(Form<T>).onComponentTag(ComponentTag) line: 1586	
			String url = getActionUrl().toString();
/s
AjxFrm(Form<T>).getActionUrl() line: 1650	
		return urlFor(IFormSubmitListener.INTERFACE, new PageParameters());
/s
AjxFrm(Component).urlFor(RequestListenerInterface, PageParameters) line: 3403	
/=
	public final CharSequence urlFor(final RequestListenerInterface listener, final PageParameters parameters)

listener	RequestListenerInterface  (id=7564)	
	listenerInterfaceClass	Class<T> (org.apache.wicket.markup.html.form.IFormSubmitListener) (id=1542)	
	method	Method  (id=7567)	public abstract void org.apache.wicket.markup.html.form.IFormSubmitListener.onFormSubmitted()
	name	"IFormSubmitListener" (id=7574)	

		IRequestHandler handler = createRequestHandler(listener, parameters, null);
/s
AjxFrm(Component).createRequestHandler(RequestListenerInterface, PageParameters, Integer) line: 3358	
			return new BookmarkableListenerInterfaceRequestHandler(provider, listener, id);
/t
AjxFrm(Component).urlFor(RequestListenerInterface, PageParameters) line: 3404	
		IRequestHandler handler = createRequestHandler(listener, parameters, null);
/d
handler	BookmarkableListenerInterfaceRequestHandler  (id=7598)	
		return getRequestCycle().urlFor(handler);
/s
RequestCycle.urlFor(IRequestHandler) line: 534	
			Url mappedUrl = mapUrlFor(handler);
/s
RequestCycle.mapUrlFor(IRequestHandler) line: 434	
		final Url url = requestMapper.mapHandler(handler);
/s
SystemMapper(CompoundRequestMapper).mapHandler(IRequestHandler) line: 211	
		for (IRequestMapper mapper : mappers)
mapper	MountedMapper  (id=7611)	
			Url url = mapper.mapHandler(handler);
/s
MountedMapper.mapHandler(IRequestHandler) line: 159	
		Url url = super.mapHandler(requestHandler);
/s
MountedMapper(AbstractBookmarkableMapper).mapHandler(IRequestHandler) line: 396	
		else if (requestHandler instanceof BookmarkableListenerInterfaceRequestHandler)
		{
			// listener interface URL with page class information
			BookmarkableListenerInterfaceRequestHandler handler = (BookmarkableListenerInterfaceRequestHandler)requestHandler;
/ TODO Afmaken	,


/c
/ stack	,
	AjxFrm(Form<T>).onComponentTagBody(MarkupStream, ComponentTag) line: 1698	
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
	AjxFrm(Component).internalRenderComponent() line: 2565	
	AjxFrm(MarkupContainer).onRender() line: 1698	
	AjxFrm(Component).internalRender() line: 2380	
	AjxFrm(Component).render() line: 2308	
	AjxFrmPage(MarkupContainer).renderNext(MarkupStream) line: 1524	
	AjxFrmPage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	AjxFrmPage(Page).onRender() line: 879	
	AjxFrmPage(WebPage).onRender() line: 141	
	AjxFrmPage(Component).internalRender() line: 2380	
	AjxFrmPage(Component).render() line: 2308	
	AjxFrmPage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/ debug	,
/s
/ TODO Afmaken	,

/ 13	. 

/ voor FilterForm, we debug DataTableFilterToolbar_my	, 

/ stack	,
/s
	FilterForm<T>.onComponentTagBody(MarkupStream, ComponentTag) line: 86	
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
	FilterForm<T>(Component).internalRenderComponent() line: 2565	
	FilterForm<T>(MarkupContainer).onRender() line: 1698	
	FilterForm<T>(Component).internalRender() line: 2380	
	FilterForm<T>(Component).render() line: 2308	
	DataTableFilterToolbarPage_my(MarkupContainer).renderNext(MarkupStream) line: 1524	
	DataTableFilterToolbarPage_my(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	DataTableFilterToolbarPage_my(Page).onRender() line: 879	
	DataTableFilterToolbarPage_my(WebPage).onRender() line: 141	
	DataTableFilterToolbarPage_my(Component).internalRender() line: 2380	
	DataTableFilterToolbarPage_my(Component).render() line: 2308	
	DataTableFilterToolbarPage_my(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 195	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/ TODO Afmaken	,

/ 7	. 




/ Einde WICKET FORM DEBUG

/ WICKET TABLE

DataTableFilterToolbarPage_my	, 

/ 7	. 

/ pager	, 

/ we click op de pager	, >

Request URL:http://localhost:9090/wicket-examples-step-by-step/repeater/filter_my?0-2.ILinkListener-filterForm-tableWithFilterForm-topToolbars-toolbars-2-span-navigator-next

/ in wicket7	, 

public class DataTable<T, S> extends Panel implements IPageableItems
	private class DefaultDataGridView extends DataGridView<T>
/e
public class DataGridView<T> extends AbstractDataGridView<T>
/e
public abstract class AbstractDataGridView<T> extends DataViewBase<T>
/e
public abstract class DataViewBase<T> extends AbstractPageableView<T>
/e
public abstract class AbstractPageableView<T> extends RefreshingView<T> implements IPageableItems
	@Override
	protected Iterator<IModel<T>> getItemModels()
	{
		long offset = getFirstItemOffset();



/s
/ stack	,
	SortableContactDataProvider_my.iterator(long, long) line: 57	

	DataViewBase$ModelIterator<T>.<init>(IDataProvider<T>, long, long) line: 107	
	DataTable$DefaultDataGridView(DataViewBase<T>).getItemModels(long, long) line: 74	
	DataTable$DefaultDataGridView(AbstractPageableView<T>).getItemModels() line: 101	
		long offset = getFirstItemOffset();
		long size = getViewSize();

		Iterator<IModel<T>> models = getItemModels(offset, size);
/cb
	DataTable$DefaultDataGridView(RefreshingView<T>).onPopulate() line: 93	
		Iterator<IModel<T>> models = getItemModels();
		Iterator<Item<T>> items = getItemReuseStrategy().getItems(newItemFactory(), models,
			getItems());
		removeAll();
		addItems(items);
/cb
	DataTable$DefaultDataGridView(AbstractRepeater).onBeforeRender() line: 124	
	DataTable$DefaultDataGridView(AbstractPageableView<T>).onBeforeRender() line: 115	
	DataTable$DefaultDataGridView(Component).internalBeforeRender() line: 949	
	DataTable$DefaultDataGridView(Component).beforeRender() line: 1017	
	WebMarkupContainer(MarkupContainer).onBeforeRenderChildren() line: 1866	
	WebMarkupContainer(Component).onBeforeRender() line: 3877	
	WebMarkupContainer(Component).internalBeforeRender() line: 949	
	WebMarkupContainer(Component).beforeRender() line: 1017	
	DataTable<T,S>(MarkupContainer).onBeforeRenderChildren() line: 1866	
	DataTable<T,S>(Component).onBeforeRender() line: 3877	
	DataTable<T,S>(Component).internalBeforeRender() line: 949	
	DataTable<T,S>(Component).beforeRender() line: 1017	
	FilterForm<T>(MarkupContainer).onBeforeRenderChildren() line: 1866	
	FilterForm<T>(Component).onBeforeRender() line: 3877	
	FilterForm<T>(Form<T>).onBeforeRender() line: 1807	
	FilterForm<T>(Component).internalBeforeRender() line: 949	
	FilterForm<T>(Component).beforeRender() line: 1017	
	DataTableFilterToolbarPage_my(MarkupContainer).onBeforeRenderChildren() line: 1866	
	DataTableFilterToolbarPage_my(Component).onBeforeRender() line: 3877	
	DataTableFilterToolbarPage_my(Page).onBeforeRender() line: 801	
	DataTableFilterToolbarPage_my(Component).internalBeforeRender() line: 949	
	DataTableFilterToolbarPage_my(Component).beforeRender() line: 1017	
	DataTableFilterToolbarPage_my(Component).internalPrepareForRender(boolean) line: 2215	
	DataTableFilterToolbarPage_my(Page).internalPrepareForRender(boolean) line: 242	
	DataTableFilterToolbarPage_my(Component).render() line: 2304	
	DataTableFilterToolbarPage_my(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 97	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/debug	,
/s
SortableContactDataProvider_my.iterator(long, long) line: 57	
/=
	public Iterator<Contact> iterator(long first, long count)
first	8	
count	8	
		List<Contact> contactsFound = getContactsDB().getIndex(getSort());
		
		return filterContacts(contactsFound).
			subList((int)first, (int)(first + count)).
			iterator();
/ We moeten first en count verwerken in de query	,

/ we gaan eerder debug	,
/s
DataTable$DefaultDataGridView(AbstractPageableView<T>).getItemModels() line: 98	

this	DataTable$DefaultDataGridView  (id=112)	

		long offset = getFirstItemOffset();
/s
DataTable$DefaultDataGridView(AbstractPageableView<T>).getFirstItemOffset() line: 305	
		return getCurrentPage() * getItemsPerPage();
/s
DataTable$DefaultDataGridView(AbstractPageableView<T>).getCurrentPage() line: 247	
		long page = currentPage;
1
		return page;
/t
DataTable$DefaultDataGridView(AbstractPageableView<T>).getItemsPerPage() line: 167	
		return getCurrentPage() * getItemsPerPage();

/ wicket-1.4

public class DataTable<T> extends Panel implements IPageable

public class DataTable<T> extends Panel implements IPageable
		datagrid = new DataGridView<T>("rows", columns, dataProvider)
/e
public class DataGridView<T> extends AbstractDataGridView<T>
/e
public abstract class AbstractDataGridView<T> extends DataViewBase<T>
/e
public abstract class DataViewBase<T> extends AbstractPageableView<T>
/e
public abstract class AbstractPageableView<T> extends RefreshingView<T> implements IPageable
	@Override
	protected Iterator<IModel<T>> getItemModels()
	{
		int offset = getViewOffset();

/ we click in pager op <	,
Request URL:http://localhost:8080/tms/wicket/?wicket:interface=:35:filterForm:table:topToolbars:2:toolbar:span:navigator:prev:8:ILinkListener::

/s
	DataTable$1(AbstractPageableView).getItemModels() line: 104	
	DataTable$1(RefreshingView).onPopulate() line: 94	
	DataTable$1(AbstractRepeater).onBeforeRender() line: 131	
	DataTable$1(AbstractPageableView).onBeforeRender() line: 121	
	DataTable$1(Component).internalBeforeRender() line: 1069	
	DataTable$1(Component).beforeRender() line: 1103	
	WebMarkupContainer(MarkupContainer).onBeforeRenderChildren() line: 1777	
	WebMarkupContainer(Component).onBeforeRender() line: 4001	
	WebMarkupContainer(Component).internalBeforeRender() line: 1069	
	WebMarkupContainer(Component).beforeRender() line: 1103	
	DataTable(MarkupContainer).onBeforeRenderChildren() line: 1777	
	DataTable(Component).onBeforeRender() line: 4001	
	DataTable(Component).internalBeforeRender() line: 1069	
	DataTable(Component).beforeRender() line: 1103	
	FilterForm(MarkupContainer).onBeforeRenderChildren() line: 1777	
	FilterForm(Component).onBeforeRender() line: 4001	
	FilterForm(Form).onBeforeRender() line: 2104	
	FilterForm(Component).internalBeforeRender() line: 1069	
	FilterForm(Component).beforeRender() line: 1103	
	SoftDeletableSearchPage(MarkupContainer).onBeforeRenderChildren() line: 1777	
	SoftDeletableSearchPage(Component).onBeforeRender() line: 4001	
	SoftDeletableSearchPage(Page).onBeforeRender() line: 1555	
	SoftDeletableSearchPage(Component).internalBeforeRender() line: 1069	
	SoftDeletableSearchPage(Component).beforeRender() line: 1103	
	SoftDeletableSearchPage(Component).prepareForRender(boolean) line: 2297	
	SoftDeletableSearchPage(Page).prepareForRender(boolean) line: 1545	
	SoftDeletableSearchPage(Component).prepareForRender() line: 2329	
	SoftDeletableSearchPage(Page).renderPage() line: 912	
	MpoWebRequestCycle(WebRequestCycle).redirectTo(Page) line: 201	
	PageRequestTarget.respond(RequestCycle) line: 58	
	WebRequestCycleProcessor(AbstractRequestCycleProcessor).respond(RequestCycle) line: 105	
	MpoWebRequestCycle(RequestCycle).processEventsAndRespond() line: 1287	
	MpoWebRequestCycle(RequestCycle).step() line: 1358	
	MpoWebRequestCycle(RequestCycle).steps() line: 1465	
	MpoWebRequestCycle(RequestCycle).request() line: 545	
	WicketFilter.doGet(HttpServletRequest, HttpServletResponse) line: 486	
	WicketServlet.doGet(HttpServletRequest, HttpServletResponse) line: 138	
	WicketServlet(HttpServlet).service(HttpServletRequest, HttpServletResponse) line: 697	
	WicketServlet(HttpServlet).service(ServletRequest, ServletResponse) line: 810	
/ debug	,
/s
DataTable$1(AbstractPageableView).getItemModels() line: 104	
		int offset = getViewOffset();
/s
DataTable$1(AbstractPageableView).getViewOffset() line: 343	
		return getCurrentPage() * internalGetRowsPerPage();

/c

/ 7	. 

/ we hebben workspace-wicket7_6 	,

/ click op header	, 
/s
	OrderByBorder$1(OrderByLink<S>).<init>(String, S, ISortStateLocator<S>) line: 73	
	OrderByBorder$1.<init>(OrderByBorder, String, Object, ISortStateLocator) line: 91	
	HeadersToolbar$2(OrderByBorder<S>).newOrderByLink(String, S, ISortStateLocator<S>) line: 90	
	HeadersToolbar$2(OrderByBorder<S>).<init>(String, S, ISortStateLocator<S>) line: 71	
	HeadersToolbar$2.<init>(HeadersToolbar, String, Object, ISortStateLocator) line: 135	
	HeadersToolbar<S>.newSortableHeader(String, S, ISortStateLocator<S>) line: 134	
	HeadersToolbar$1.populateItem(Item<IColumn<T,S>>) line: 88	
	RefreshingView$1.newItem(int, IModel<T>) line: 114	
	DefaultItemReuseStrategy$1.next() line: 75	
	DefaultItemReuseStrategy$1.next() line: 56	
	HeadersToolbar$1(RefreshingView<T>).addItems(Iterator<Item<T>>) line: 189	
	HeadersToolbar$1(RefreshingView<T>).onPopulate() line: 97	
	HeadersToolbar$1(AbstractRepeater).onBeforeRender() line: 124	
	HeadersToolbar$1(Component).internalBeforeRender() line: 949	
	HeadersToolbar$1(Component).beforeRender() line: 1017	
	HeadersToolbar<S>(MarkupContainer).onBeforeRenderChildren() line: 1866	
	HeadersToolbar<S>(Component).onBeforeRender() line: 3877	
	HeadersToolbar<S>(Component).internalBeforeRender() line: 949	
	HeadersToolbar<S>(Component).beforeRender() line: 1017	
	RepeatingView(MarkupContainer).onBeforeRenderChildren() line: 1866	
	RepeatingView(Component).onBeforeRender() line: 3877	
	RepeatingView(AbstractRepeater).onBeforeRender() line: 143	
	RepeatingView(Component).internalBeforeRender() line: 949	
	RepeatingView(Component).beforeRender() line: 1017	
	DataTable$ToolbarsContainer(MarkupContainer).onBeforeRenderChildren() line: 1866	
	DataTable$ToolbarsContainer(Component).onBeforeRender() line: 3877	
	DataTable$ToolbarsContainer(Component).internalBeforeRender() line: 949	
	DataTable$ToolbarsContainer(Component).beforeRender() line: 1017	
	DataTable<T,S>(MarkupContainer).onBeforeRenderChildren() line: 1866	
	DataTable<T,S>(Component).onBeforeRender() line: 3877	
	DataTable<T,S>(Component).internalBeforeRender() line: 949	
	DataTable<T,S>(Component).beforeRender() line: 1017	
	FilterForm<T>(MarkupContainer).onBeforeRenderChildren() line: 1866	
	FilterForm<T>(Component).onBeforeRender() line: 3877	
	FilterForm<T>(Form<T>).onBeforeRender() line: 1807	
	FilterForm<T>(Component).internalBeforeRender() line: 949	
	FilterForm<T>(Component).beforeRender() line: 1017	
	DataTableFilterToolbarPage_my(MarkupContainer).onBeforeRenderChildren() line: 1866	
	DataTableFilterToolbarPage_my(Component).onBeforeRender() line: 3877	
	DataTableFilterToolbarPage_my(Page).onBeforeRender() line: 801	
	DataTableFilterToolbarPage_my(Component).internalBeforeRender() line: 949	
	DataTableFilterToolbarPage_my(Component).beforeRender() line: 1017	
	DataTableFilterToolbarPage_my(Component).internalPrepareForRender(boolean) line: 2215	
	DataTableFilterToolbarPage_my(Page).internalPrepareForRender(boolean) line: 242	
	DataTableFilterToolbarPage_my(Component).render() line: 2304	
	DataTableFilterToolbarPage_my(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 97	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	



/ Einde WICKET TABLE

/ WICKET TABLE SORT

/ 7	. 


/ we hebben 2 
		columns.add(new TextFilteredPropertyColumn<Contact, String,String>(new Model<>("First Name"), "firstName", "firstName"));
		columns.add(new TextFilteredPropertyColumn<Contact, String ,String>(new Model<>("Last Name"), "lastName", "lastName")
/ het 2de arg is waarop sort	,

/ we click op firstname	,

Request URL:http://localhost:9090/wicket-examples-step-by-step/repeater/filter_my?14-14.ILinkListener-filterForm-tableWithFilterForm-topToolbars-toolbars-3-headers-80-header-orderByLink
Request Method:GET
/ Geen response	,

Request URL:http://localhost:9090/wicket-examples-step-by-step/repeater/filter_my?16
Request Method:GET
/ response is hele page	, dus de header link waarmee je sort is geen ajax ...
/ TODO	,
/ We zien dat de link ook veranderd is	,
<a href="./filter_my?19-19.ILinkListener-filterForm-tableWithFilterForm-topToolbars-toolbars-3-headers-110-header-orderByLink" wicket:id="orderByLink"><wicket:body><span wicket:id="label">First Name</span></wicket:body></a>

/ 7	. 

/ in de provider set we de sort	,

/ vraag om de page	,
/s
	SortableContactDataProvider_my(SortableDataProvider<T,S>).setSort(S, SortOrder) line: 85	
		state.setPropertySortOrder(property, order);
/cb
	SortableContactDataProvider_my.<init>() line: 46	
		setSort("firstName", SortOrder.ASCENDING);
/cb
	DataTableFilterToolbarPage_my.<init>() line: 79	
		SortableContactDataProvider_my dataProvider = new SortableContactDataProvider_my();
/cb
	DefaultPageFactory.newPage(Constructor<C>, PageParameters) line: 175	
	DefaultPageFactory.newPage(Class<C>) line: 67	
	DefaultMapperContext.newPageInstance(Class<IRequestablePage>, PageParameters) line: 102	
	PageProvider.resolvePageInstance(Integer, Class<IRequestablePage>, PageParameters, Integer) line: 271	
	PageProvider.getPageInstance() line: 169	
	WebPageRenderer(PageRenderer).getPage() line: 78	
	WebPageRenderer.isPageStateless() line: 287	
	WebPageRenderer.shouldRenderPageAndWriteResponse(RequestCycle, Url, Url) line: 329	
	WebPageRenderer.respond(RequestCycle) line: 193	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/debug	,
/s
SortableContactDataProvider_my(SortableDataProvider<T,S>).setSort(S, SortOrder) line: 85	
		state.setPropertySortOrder(property, order);
/s
SingleSortState<T>.setPropertySortOrder(T, SortOrder) line: 41	
			param = new SortParam<>(property, order == SortOrder.ASCENDING);
property	"firstName" (id=7369)	
order	SortOrder  (id=7370)	
	name	"ASCENDING" (id=7372)	

/ 13	. 

/c
	HeadersToolbar<S>.<init>(DataTable<T,S>, ISortStateLocator<S>) line: 60	
		super(table);
/cb
	DataTableFilterToolbarPage_my.<init>() line: 93	
		SortableContactDataProvider_my dataProvider = new SortableContactDataProvider_my();
/d
		tableWithFilterForm.addTopToolbar(new HeadersToolbar<>(tableWithFilterForm, dataProvider));
/cb
	DefaultPageFactory.newPage(Constructor<C>, PageParameters) line: 175	
	DefaultPageFactory.newPage(Class<C>) line: 67	
	DefaultMapperContext.newPageInstance(Class<IRequestablePage>, PageParameters) line: 102	
	PageProvider.resolvePageInstance(Integer, Class<IRequestablePage>, PageParameters, Integer) line: 271	
	PageProvider.getPageInstance() line: 169	
	WebPageRenderer(PageRenderer).getPage() line: 78	
	WebPageRenderer.isPageStateless() line: 287	
	WebPageRenderer.shouldRenderPageAndWriteResponse(RequestCycle, Url, Url) line: 329	
	WebPageRenderer.respond(RequestCycle) line: 193	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/debug	,
/s
HeadersToolbar<S>.<init>(DataTable<T,S>, ISortStateLocator<S>) line: 60	
		super(table); 		/ Panel.<init>
		RefreshingView<IColumn<T, S>> headers = new RefreshingView<IColumn<T, S>>("headers")
			@Override
			protected Iterator<IModel<IColumn<T, S>>> getItemModels()
			@Override
			protected void populateItem(Item<IColumn<T, S>> item)
		add(headers);


$ less HeadersToolbar.html

<wicket:panel xmlns:wicket="http://wicket.apache.org">
	<tr class="headers">
		<wicket:container wicket:id="headers">
			<th wicket:id="header"><span wicket:id="label">[header-label]</span></th>
		</wicket:container>
	</tr>
</wicket:panel>

/ 13	. 

/ gewone data	,
/c
	...(RefreshingView<T>).onPopulate() line: 93	
		Iterator<IModel<T>> models = getItemModels();
		Iterator<Item<T>> items = getItemReuseStrategy().getItems(newItemFactory(), models,
			getItems());
		removeAll();
 		addItems(items);
/ TODO 

/ 13	. 

/ eerst models, met IColumns,  maken, dan items	, met een Label, of een Border met een Link	,
/c
	HeadersToolbar$1(RefreshingView<T>).onPopulate() line: 93	
		Iterator<IModel<T>> models = getItemModels();
		Iterator<Item<T>> items = getItemReuseStrategy().getItems(newItemFactory(), models,
			getItems());
		removeAll();
		addItems(items);
/cb
	HeadersToolbar$1(AbstractRepeater).onBeforeRender() line: 124	
	HeadersToolbar$1(Component).internalBeforeRender() line: 949	
	HeadersToolbar$1(Component).beforeRender() line: 1017	
	HeadersToolbar<S>(MarkupContainer).onBeforeRenderChildren() line: 1866	
	HeadersToolbar<S>(Component).onBeforeRender() line: 3877	
	HeadersToolbar<S>(Component).internalBeforeRender() line: 949	
	HeadersToolbar<S>(Component).beforeRender() line: 1017	
	RepeatingView(MarkupContainer).onBeforeRenderChildren() line: 1866	
	RepeatingView(Component).onBeforeRender() line: 3877	
	RepeatingView(AbstractRepeater).onBeforeRender() line: 143	
	RepeatingView(Component).internalBeforeRender() line: 949	
	RepeatingView(Component).beforeRender() line: 1017	
	DataTable$ToolbarsContainer(MarkupContainer).onBeforeRenderChildren() line: 1866	
	DataTable$ToolbarsContainer(Component).onBeforeRender() line: 3877	
	DataTable$ToolbarsContainer(Component).internalBeforeRender() line: 949	
	DataTable$ToolbarsContainer(Component).beforeRender() line: 1017	
	DataTable<T,S>(MarkupContainer).onBeforeRenderChildren() line: 1866	
	DataTable<T,S>(Component).onBeforeRender() line: 3877	
	DataTable<T,S>(Component).internalBeforeRender() line: 949	
	DataTable<T,S>(Component).beforeRender() line: 1017	
	FilterForm<T>(MarkupContainer).onBeforeRenderChildren() line: 1866	
	FilterForm<T>(Component).onBeforeRender() line: 3877	
	FilterForm<T>(Form<T>).onBeforeRender() line: 1807	
	FilterForm<T>(Component).internalBeforeRender() line: 949	
	FilterForm<T>(Component).beforeRender() line: 1017	
	DataTableFilterToolbarPage_my(MarkupContainer).onBeforeRenderChildren() line: 1866	
	DataTableFilterToolbarPage_my(Component).onBeforeRender() line: 3877	
	DataTableFilterToolbarPage_my(Page).onBeforeRender() line: 801	
	DataTableFilterToolbarPage_my(Component).internalBeforeRender() line: 949	
	DataTableFilterToolbarPage_my(Component).beforeRender() line: 1017	
	DataTableFilterToolbarPage_my(Component).internalPrepareForRender(boolean) line: 2215	
	DataTableFilterToolbarPage_my(Page).internalPrepareForRender(boolean) line: 242	
	DataTableFilterToolbarPage_my(Component).render() line: 2304	
	DataTableFilterToolbarPage_my(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/debug	,
/s
HeadersToolbar$1(RefreshingView<T>).onPopulate() line: 93	
		Iterator<IModel<T>> models = getItemModels();
/s
HeadersToolbar$1.getItemModels() line: 69		/ onze IColumns in Models	,
/=
	public <T> HeadersToolbar(final DataTable<T, S> table, final ISortStateLocator<S> stateLocator)
		RefreshingView<IColumn<T, S>> headers = new RefreshingView<IColumn<T, S>>("headers")
			@Override
			protected Iterator<IModel<IColumn<T, S>>> getItemModels()
			{
				List<IModel<IColumn<T, S>>> columnsModels = new LinkedList<>();

				for (IColumn<T, S> column : table.getColumns())
				{
					columnsModels.add(Model.of(column));
				}

				return columnsModels.iterator();
			}

/c
/ dan gaan we de Items maken	, 
/s
	RefreshingView$1.newItem(int, IModel<T>) line: 112	
/=
		return new IItemFactory<T>()
		{
			@Override
			public Item<T> newItem(int index, IModel<T> model)
			{
				String id = RefreshingView.this.newChildId();
				Item<T> item = RefreshingView.this.newItem(id, index, model);
				RefreshingView.this.populateItem(item);
				return item;
/cb
	DefaultItemReuseStrategy$1.next() line: 75	
	DefaultItemReuseStrategy$1.next() line: 56	
	HeadersToolbar$1(RefreshingView<T>).addItems(Iterator<Item<T>>) line: 189	
	HeadersToolbar$1(RefreshingView<T>).onPopulate() line: 97	
		Iterator<IModel<T>> models = getItemModels();
/d
		Iterator<Item<T>> items = getItemReuseStrategy().getItems(newItemFactory(), models,
			getItems());
		removeAll();
		addItems(items);
/cb
	HeadersToolbar$1(AbstractRepeater).onBeforeRender() line: 124	
	HeadersToolbar$1(Component).internalBeforeRender() line: 949	
	HeadersToolbar$1(Component).beforeRender() line: 1017	
	HeadersToolbar<S>(MarkupContainer).onBeforeRenderChildren() line: 1866	
	HeadersToolbar<S>(Component).onBeforeRender() line: 3877	
	HeadersToolbar<S>(Component).internalBeforeRender() line: 949	
	HeadersToolbar<S>(Component).beforeRender() line: 1017	
	RepeatingView(MarkupContainer).onBeforeRenderChildren() line: 1866	
	RepeatingView(Component).onBeforeRender() line: 3877	
	RepeatingView(AbstractRepeater).onBeforeRender() line: 143	
	RepeatingView(Component).internalBeforeRender() line: 949	
	RepeatingView(Component).beforeRender() line: 1017	
	DataTable$ToolbarsContainer(MarkupContainer).onBeforeRenderChildren() line: 1866	
	DataTable$ToolbarsContainer(Component).onBeforeRender() line: 3877	
	DataTable$ToolbarsContainer(Component).internalBeforeRender() line: 949	
	DataTable$ToolbarsContainer(Component).beforeRender() line: 1017	
	DataTable<T,S>(MarkupContainer).onBeforeRenderChildren() line: 1866	
	DataTable<T,S>(Component).onBeforeRender() line: 3877	
	DataTable<T,S>(Component).internalBeforeRender() line: 949	
	DataTable<T,S>(Component).beforeRender() line: 1017	
	FilterForm<T>(MarkupContainer).onBeforeRenderChildren() line: 1866	
	FilterForm<T>(Component).onBeforeRender() line: 3877	
	FilterForm<T>(Form<T>).onBeforeRender() line: 1807	
	FilterForm<T>(Component).internalBeforeRender() line: 949	
	FilterForm<T>(Component).beforeRender() line: 1017	
	DataTableFilterToolbarPage_my(MarkupContainer).onBeforeRenderChildren() line: 1866	
	DataTableFilterToolbarPage_my(Component).onBeforeRender() line: 3877	
	DataTableFilterToolbarPage_my(Page).onBeforeRender() line: 801	
	DataTableFilterToolbarPage_my(Component).internalBeforeRender() line: 949	
	DataTableFilterToolbarPage_my(Component).beforeRender() line: 1017	
	DataTableFilterToolbarPage_my(Component).internalPrepareForRender(boolean) line: 2215	
	DataTableFilterToolbarPage_my(Page).internalPrepareForRender(boolean) line: 242	
	DataTableFilterToolbarPage_my(Component).render() line: 2304	
	DataTableFilterToolbarPage_my(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/ debug	,
/s
RefreshingView$1.newItem(int, IModel<T>) line: 114	
				String id = RefreshingView.this.newChildId();
				Item<T> item = RefreshingView.this.newItem(id, index, model);
				RefreshingView.this.populateItem(item);
/s
HeadersToolbar$1.populateItem(Item<IColumn<T,S>>) line: 82	
				final IColumn<T, S> column = item.getModelObject();
				WebMarkupContainer header = null;
				if (column.isSortable())
column=
new TextFilteredPropertyColumn<Contact, String,String>(new Model<>("First Name"), "firstName", "firstName")
new TextFilteredPropertyColumn<Contact, String ,String>(new Model<>("Last Name"), "lastName", "lastName")
				{
					header = newSortableHeader("header", column.getSortProperty(), stateLocator);
				}
				else
column=
new PropertyColumn<Contact, String>(new Model<>("ID"), "id")
				{
					header = new WebMarkupContainer("header");

				item.add(header);
				item.setRenderBodyOnly(true);
				header.add(column.getHeader("label"));
/s
DataTableFilterToolbarPage_my$1(AbstractColumn<T,S>).getHeader(String) line: 93	
		return new Label(componentId, getDisplayModel());

/ We add een WebMarkupContainer ertussen, maar hierdoor zien we deze niet in de HTML	, terwijl hij ( "header" ) er wel is in het template	,
$ less HeadersToolbar.html
<wicket:panel xmlns:wicket="http://wicket.apache.org">
	<tr class="headers">
		<wicket:container wicket:id="headers">
			<th wicket:id="header"><span wicket:id="label">[header-label]</span></th>
		</wicket:container>
	</tr>
</wicket:panel>

/ In het 2de geval	,
/s
HeadersToolbar<S>.newSortableHeader(String, S, ISortStateLocator<S>) line: 134	
		return new OrderByBorder<S>(headerId, property, locator)
/s
HeadersToolbar$2(OrderByBorder<S>).<init>(String, S, ISortStateLocator<S>) line: 71	/ ook een WebMarkupContainer	, net als bij "id"	,

		super(id);
		this.stateLocator = stateLocator;
		this.property = property;

		OrderByLink<S> link = newOrderByLink("orderByLink", property, stateLocator);
/s
HeadersToolbar$2(OrderByBorder<S>).newOrderByLink(String, S, ISortStateLocator<S>) line: 90	
		return new OrderByLink<S>(id, property, stateLocator)
/s
OrderByBorder$1(OrderByLink<S>).<init>(String, S, ISortStateLocator<S>) line: 73	
		super(id);
		this.property = property;
		this.stateLocator = stateLocator;
/t
HeadersToolbar$2(OrderByBorder<S>).<init>(String, S, ISortStateLocator<S>) line: 72	
		OrderByLink<S> link = newOrderByLink("orderByLink", property, stateLocator);
/d
		addToBorder(link);
		link.add(getBodyContainer());
/ TODO

/ 13	. 

/c

/ we komen eerst in de firstName header, dan in de lastName header	,

/ stack	,
/s
	HeadersToolbar$2(OrderByBorder<S>).onComponentTag(ComponentTag) line: 117	
		final ISortState<S> sortState = stateLocator.getSortState();
/cb
	HeadersToolbar$2(Component).internalRenderComponent() line: 2521	
	HeadersToolbar$2(MarkupContainer).onRender() line: 1698	
	HeadersToolbar$2(Component).internalRender() line: 2380	
	HeadersToolbar$2(Component).render() line: 2308	/= newSortableHeader("header", column.getSortProperty(), stateLocator)	
	Item<T>(MarkupContainer).renderNext(MarkupStream) line: 1524	
	Item<T>(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	Item<T>(MarkupContainer).renderComponentTagBody(MarkupStream, ComponentTag) line: 1734	
	Item<T>(MarkupContainer).onComponentTagBody(MarkupStream, ComponentTag) line: 1657	
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
	Item<T>(Component).internalRenderComponent() line: 2565	
	Item<T>(MarkupContainer).onRender() line: 1698	
	Item<T>(Component).internalRender() line: 2380	
	Item<T>(Component).render() line: 2308			/= Item 158	
	HeadersToolbar$1(AbstractRepeater).renderChild(Component) line: 115	
	HeadersToolbar$1(AbstractRepeater).onRender() line: 102	
	HeadersToolbar$1(Component).internalRender() line: 2380	
	HeadersToolbar$1(Component).render() line: 2308		/= new RefreshingView<IColumn<T, S>>("headers")
	HeadersToolbar<S>(MarkupContainer).renderNext(MarkupStream) line: 1524	
	HeadersToolbar<S>(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	HeadersToolbar<S>(MarkupContainer).renderComponentTagBody(MarkupStream, ComponentTag) line: 1734	
	HeadersToolbar<S>(MarkupContainer).renderAssociatedMarkup(String, String) line: 797	
	PanelMarkupSourcingStrategy(AssociatedMarkupSourcingStrategy).renderAssociatedMarkup(Component) line: 77	
	PanelMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 112	
	HeadersToolbar<S>(Component).internalRenderComponent() line: 2565	
	HeadersToolbar<S>(MarkupContainer).onRender() line: 1698	
	HeadersToolbar<S>(Component).internalRender() line: 2380	
	HeadersToolbar<S>(Component).render() line: 2308	
	RepeatingView(AbstractRepeater).renderChild(Component) line: 115	
	RepeatingView(AbstractRepeater).onRender() line: 102	
	RepeatingView(Component).internalRender() line: 2380	
	RepeatingView(Component).render() line: 2308	
	DataTable$ToolbarsContainer(MarkupContainer).renderNext(MarkupStream) line: 1524	
	DataTable$ToolbarsContainer(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	DataTable$ToolbarsContainer(MarkupContainer).renderComponentTagBody(MarkupStream, ComponentTag) line: 1734	
	DataTable$ToolbarsContainer(MarkupContainer).onComponentTagBody(MarkupStream, ComponentTag) line: 1657	
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
	DataTable$ToolbarsContainer(Component).internalRenderComponent() line: 2565	
	DataTable$ToolbarsContainer(MarkupContainer).onRender() line: 1698	
	DataTable$ToolbarsContainer(Component).internalRender() line: 2380	
	DataTable$ToolbarsContainer(Component).render() line: 2308	
	DataTable<T,S>(MarkupContainer).renderNext(MarkupStream) line: 1524	
	DataTable<T,S>(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	DataTable<T,S>(MarkupContainer).renderComponentTagBody(MarkupStream, ComponentTag) line: 1734	
	DataTable<T,S>(MarkupContainer).renderAssociatedMarkup(String, String) line: 797	
	PanelMarkupSourcingStrategy(AssociatedMarkupSourcingStrategy).renderAssociatedMarkup(Component) line: 77	
	PanelMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 112	
	DataTable<T,S>(Component).internalRenderComponent() line: 2565	
	DataTable<T,S>(MarkupContainer).onRender() line: 1698	
	DataTable<T,S>(Component).internalRender() line: 2380	
	DataTable<T,S>(Component).render() line: 2308	
	FilterForm<T>(MarkupContainer).renderNext(MarkupStream) line: 1524	
	FilterForm<T>(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	FilterForm<T>(MarkupContainer).renderComponentTagBody(MarkupStream, ComponentTag) line: 1734	
	FilterForm<T>(MarkupContainer).onComponentTagBody(MarkupStream, ComponentTag) line: 1657	
	FilterForm<T>(Form<T>).onComponentTagBody(MarkupStream, ComponentTag) line: 1705	
	FilterForm<T>.onComponentTagBody(MarkupStream, ComponentTag) line: 86	
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
	FilterForm<T>(Component).internalRenderComponent() line: 2565	
	FilterForm<T>(MarkupContainer).onRender() line: 1698	
	FilterForm<T>(Component).internalRender() line: 2380	
	FilterForm<T>(Component).render() line: 2308	
	DataTableFilterToolbarPage_my(MarkupContainer).renderNext(MarkupStream) line: 1524	
	DataTableFilterToolbarPage_my(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	DataTableFilterToolbarPage_my(Page).onRender() line: 879	
	DataTableFilterToolbarPage_my(WebPage).onRender() line: 141	
	DataTableFilterToolbarPage_my(Component).internalRender() line: 2380	
	DataTableFilterToolbarPage_my(Component).render() line: 2308	
	DataTableFilterToolbarPage_my(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 195	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/ debug	,
/s
HeadersToolbar$2(OrderByBorder<S>).onComponentTag(ComponentTag) line: 117	
		final ISortState<S> sortState = stateLocator.getSortState();
/s
SortableContactDataProvider_my(SortableDataProvider<T,S>).getSortState() line: 51	
		return state;
/t
HeadersToolbar$2(OrderByBorder<S>).onComponentTag(ComponentTag) line: 117	
		final ISortState<S> sortState = stateLocator.getSortState();
/d
state	SingleSortState<T>  (id=7378)	
	param	SortParam<T>  (id=7418)	
		ascending	true	
		property	"firstName" (id=7369)	
/ klopt	,
		SortOrder dir = sortState.getPropertySortOrder(property);
		if (dir == SortOrder.ASCENDING)
		{
			cssClass = getString(SORT_ASCENDING_CSS_CLASS_KEY);
cssClass	"wicket_orderUp" (id=7428)	

		if (!Strings.isEmpty(cssClass))
		{
			tag.append("class", cssClass, " ");

/c
/ nu de lastName	,
/s
HeadersToolbar$2(OrderByBorder<S>).onComponentTag(ComponentTag) line: 132	
		final ISortState<S> sortState = stateLocator.getSortState();
sortState	SingleSortState<T>  (id=7378)	
	param	SortParam<T>  (id=7418)	
		ascending	true	
		property	"firstName" (id=7369)	

		SortOrder dir = sortState.getPropertySortOrder(property);
this	HeadersToolbar$2  (id=7415)	
	property	"lastName" (id=7437)	
/s
SingleSortState<T>.getPropertySortOrder(T) line: 62	
this	SingleSortState<T>  (id=7378)	
	param	SortParam<T>  (id=7418)	
		ascending	true	
		property	"firstName" (id=7369)	

		if ((param == null) || (param.getProperty().equals(property) == false))
/j
		{
			return SortOrder.NONE;
/t
HeadersToolbar$2(OrderByBorder<S>).onComponentTag(ComponentTag) line: 119	
		SortOrder dir = sortState.getPropertySortOrder(property);
/d
NONE
		else
		{
			cssClass = getString(SORT_NONE_CSS_CLASS_KEY);
cssClass	"wicket_orderNone" (id=7434)	
		if (!Strings.isEmpty(cssClass))
		{
			tag.append("class", cssClass, " ");

/ 7	.

/ we click lastName header	,

Request URL:http://localhost:9090/wicket-examples-step-by-step/repeater/filter_my?26-27.ILinkListener-filterForm-tableWithFilterForm-topToolbars-toolbars-3-headers-159-header-orderByLink

/ stack	,
/s
	SortableContactDataProvider_my(SortableDataProvider<T,S>).getSortState() line: 51	
		return state;
/cb
	OrderByBorder$1(OrderByLink<S>).sort() line: 112	
		ISortState<S> state = stateLocator.getSortState();
/cb
	OrderByBorder$1(OrderByLink<S>).onClick() line: 87	
->		sort();
		onSortChanged();
	OrderByBorder$1(Link<T>).onLinkClicked() line: 190	
		onClick();
/cb
	RequestListenerInterface.internalInvoke(Component, Object) line: 258	
			method.invoke(target);
this	RequestListenerInterface  (id=7617)	
	method	Method  (id=7616)	public abstract void org.apache.wicket.markup.html.link.ILinkListener.onLinkClicked()
target	OrderByBorder$1  (id=7613)	 / link	,
/cb
	RequestListenerInterface.invoke(IRequestableComponent) line: 216	
	ListenerInterfaceRequestHandler.invokeListener() line: 241	
		if (getBehaviorIndex() == null)
		{
			listenerInterface.invoke(getComponent());
/ TODO getComponent	,
/cb
	ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 234	
		invokeListener();
/cb
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	

			IRequestHandler handler = resolveRequestHandler();
handler	ListenerInterfaceRequestHandler  (id=7618)	
	listenerInterface	RequestListenerInterface  (id=7617)	
		listenerInterfaceClass	Class<T> (org.apache.wicket.markup.html.link.ILinkListener) (id=315)	
		method	Method  (id=7616)	public abstract void org.apache.wicket.markup.html.link.ILinkListener.onLinkClicked()
		name	"ILinkListener" (id=7625)	

				execute(handler);
/cb
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ intermezzo

public interface ILinkListener extends IRequestListener
{
	public static final RequestListenerInterface INTERFACE = new RequestListenerInterface( ILinkListener.class);
	void onLinkClicked();
}
/debug
/s
SortableContactDataProvider_my(SortableDataProvider<T,S>).getSortState() line: 51	
this	SortableContactDataProvider_my  (id=7612)	
	contactFilter	ContactFilter_my  (id=7663)	
	state	SingleSortState<T>  (id=7664)	
		param	SortParam<T>  (id=7665)	
			ascending	false	
			property	"lastName" (id=7666)	

		return state;
/t
OrderByBorder$1(OrderByLink<S>).sort() line: 115	
		ISortState<S> state = stateLocator.getSortState();
/d
state	SingleSortState<T>  (id=7664)	
	param	SortParam<T>  (id=7665)	
		ascending 	true	
		property	"firstName" (id=7666)	

		// get current sort order
		SortOrder order = state.getPropertySortOrder(property);

this	OrderByBorder$1  (id=7717)	
	property	"lastName" (id=7437)	

/ state is de ahw global sort state, zit in de provider	,
/ property is van deze link	,

/s
SingleSortState<T>.getPropertySortOrder(T) line: 60	
		if ((param == null) || (param.getProperty().equals(property) == false))
		{
			return SortOrder.NONE;
/t
OrderByBorder$1(OrderByLink<S>).sort() line: 118	
		// get current sort order
		SortOrder order = state.getPropertySortOrder(property);
NONE
		// set next sort order
		state.setPropertySortOrder(property, nextSortOrder(order));
/s
OrderByBorder$1(OrderByLink<S>).nextSortOrder(SortOrder) line: 133	
		// init / flip order
		if (order == SortOrder.NONE)
		{
			return SortOrder.ASCENDING;
/t
OrderByBorder$1(OrderByLink<S>).sort() line: 120	
		// set next sort order
		state.setPropertySortOrder(property, nextSortOrder(order));
/pd
/s
SingleSortState<T>.setPropertySortOrder(T, SortOrder) line: 41	
			param = new SortParam<>(property, order == SortOrder.ASCENDING);

/ we rewrite the 'global' sort state, which is in the provider	,
/t
OrderByBorder$1(OrderByLink<S>).sort() line: 120	
		// set next sort order
		state.setPropertySortOrder(property, nextSortOrder(order));
/d
		return this; 	/ link	,
/t
OrderByBorder$1(OrderByLink<S>).onClick() line: 88	
		sort();
		onSortChanged();
/d

this	OrderByBorder$1  (id=7717)									/ link	,
	children	Border$BorderBodyContainer  (id=7724)	
		children	Label  (id=7731)	
			data	Model<T>  (id=7735)	
				object	"Last Name" (id=7737)	
			id	"label" (id=7107)	
		data	null	
		id	"header_body" (id=7732)	
	data	null	
	id	"orderByLink" (id=7130)	
	parent	HeadersToolbar$2  (id=7725)	
	property	"lastName" (id=7437)	
	stateLocator	SortableContactDataProvider_my  (id=7716)	
		contactFilter	ContactFilter_my  (id=7721)	
		state	SingleSortState<T>  (id=7722)	
			param	SortParam<T>  (id=7751)	
				ascending	false	
				property	"lastName" (id=7437)	


/ intermezzo

this	OrderByBorder$1  (id=7717) 		/ link	,	
	id	"orderByLink" (id=7130)	
	markup	null	
	markupSourcingStrategy	DefaultMarkupSourcingStrategy  (id=7152)	
	modCounter	0	
	parent	HeadersToolbar$2  (id=7725)			/ newSortableHeader("header",...) of WebMarkupContainer("header")
		id	"header" (id=7105)	
		body	Border$BorderBodyContainer  (id=7724)		 / TODO
			children	Label  (id=7731)	
				data	Model<T>  (id=7735)	
					object	"Last Name" (id=7737)	
				flags	1074999450	
				generatedMarkupId	-1	
				id	"label" (id=7107)	
				markup	null	
				markupSourcingStrategy	DefaultMarkupSourcingStrategy  (id=7152)	
				parent	Border$BorderBodyContainer  (id=7724)	
				requestFlags	32	
			data	null	
			id	"header_body" (id=7732)	
		children	OrderByBorder$1  (id=7717)	 		/ this	,
		data	HeadersToolbar$1$1  (id=7770)			/ TODO	,	
			this$1	HeadersToolbar$1  (id=7773)			/ new RefreshingView<IColumn<T, S>>("headers") 
				id	"headers" (id=7776)	
				data	null	
				childIdCounter	6	
				children	ArrayList<E>  (id=7775)	
					elementData	Object[12]  (id=7777)	
						[0]	Item<T>  (id=7778)	
						[1]	Item<T>  (id=7779)	
							children	HeadersToolbar$2  (id=7785)	
							data	Model<T>  (id=7786)	
								object	TextFilteredPropertyColumn<T,F,S>  (id=7788)	/ model met IColumn	,	
							id	"2" (id=7787)	
							index	1	
						[2]	Item<T>  (id=7772)	
						[3]	Item<T>  (id=7780)	
						[4]	Item<T>  (id=7781)	
						[5]	Item<T>  (id=7784)	
					size	6	
	property	"lastName" (id=7437)	

/ Einde intermezzo

/s
OrderByBorder$1.onSortChanged() line: 97	
/=
		return new OrderByLink<S>(id, property, stateLocator)
		{
			@Override
			protected void onSortChanged()
			{
				OrderByBorder.this.onSortChanged();
/s
HeadersToolbar$2.onSortChanged() line: 141	
/=
		return new OrderByBorder<S>(headerId, property, locator)
		{
			private static final long serialVersionUID = 1L;

			@Override
			protected void onSortChanged()
			{
				getTable().setCurrentPage(0);
/s
DataTable<T,S>.setCurrentPage(long) line: 324	
		datagrid.setCurrentPage(page);
page=0
		onPageChanged();
/ noop	,

/ 13	. 

/ Maar de provider's iterator, en size vragen om sort	,
/ dit gebeurt on onPopulate	, 

/c
/stack	,
/s
	SortableContactDataProvider_my.iterator(long, long) line: 57	
	DataViewBase$ModelIterator<T>.<init>(IDataProvider<T>, long, long) line: 107	
	DataTable$DefaultDataGridView(DataViewBase<T>).getItemModels(long, long) line: 74	
	DataTable$DefaultDataGridView(AbstractPageableView<T>).getItemModels() line: 101	
	DataTable$DefaultDataGridView(RefreshingView<T>).onPopulate() line: 93	
	DataTable$DefaultDataGridView(AbstractRepeater).onBeforeRender() line: 124	
	DataTable$DefaultDataGridView(AbstractPageableView<T>).onBeforeRender() line: 115	
	DataTable$DefaultDataGridView(Component).internalBeforeRender() line: 949	
	DataTable$DefaultDataGridView(Component).beforeRender() line: 1017	
	WebMarkupContainer(MarkupContainer).onBeforeRenderChildren() line: 1866	
	WebMarkupContainer(Component).onBeforeRender() line: 3877	
	WebMarkupContainer(Component).internalBeforeRender() line: 949	
	WebMarkupContainer(Component).beforeRender() line: 1017	
	DataTable<T,S>(MarkupContainer).onBeforeRenderChildren() line: 1866	
	DataTable<T,S>(Component).onBeforeRender() line: 3877	
	DataTable<T,S>(Component).internalBeforeRender() line: 949	
	DataTable<T,S>(Component).beforeRender() line: 1017	
	FilterForm<T>(MarkupContainer).onBeforeRenderChildren() line: 1866	
	FilterForm<T>(Component).onBeforeRender() line: 3877	
	FilterForm<T>(Form<T>).onBeforeRender() line: 1807	
	FilterForm<T>(Component).internalBeforeRender() line: 949	
	FilterForm<T>(Component).beforeRender() line: 1017	
	DataTableFilterToolbarPage_my(MarkupContainer).onBeforeRenderChildren() line: 1866	
	DataTableFilterToolbarPage_my(Component).onBeforeRender() line: 3877	
	DataTableFilterToolbarPage_my(Page).onBeforeRender() line: 801	
	DataTableFilterToolbarPage_my(Component).internalBeforeRender() line: 949	
	DataTableFilterToolbarPage_my(Component).beforeRender() line: 1017	
	DataTableFilterToolbarPage_my(Component).internalPrepareForRender(boolean) line: 2215	
	DataTableFilterToolbarPage_my(Page).internalPrepareForRender(boolean) line: 242	
	DataTableFilterToolbarPage_my(Component).render() line: 2304	
	DataTableFilterToolbarPage_my(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 97	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/ debug	, 
/s
SortableContactDataProvider_my.iterator(long, long) line: 57	
		List<Contact> contactsFound = getContactsDB().getIndex(getSort());
/s
ContactsDatabase.getIndex(SortParam) line: 97	
/=
	public List<Contact> getIndex(SortParam sort)
ascending	false	
property	"lastName" (id=7437)	
		else if (sort.getProperty().equals("lastName"))
		{
			return sort.isAscending() ? lnameIdx : lnameDescIdx;


/ intermezzo

/ WICKET ORDERLINK SORTS  


/ Dus we hebben gedaan in de provider	, 

public class SortableContactDataProvider_my extends SortableDataProvider<Contact, String> implements IFilterStateLocator<ContactFilter_my>
{
	private ContactFilter_my contactFilter = new ContactFilter_my();

	/**
	 * constructor
	 */
	public SortableContactDataProvider_my()
	{
		// set default sort
		setSort("firstName", SortOrder.ASCENDING);

/////////////////////////////////////////////////////////////////////////////////////
/ Maar wicket doet dit zelf doet ook , niet precies via setSort	, maar	,
OrderByBorder$1(OrderByLink<S>).sort() line: 120	
		// set next sort order
		state.setPropertySortOrder(property, nextSortOrder(order));

/ Einde intermezzo

















/ Einde WICKET TABLE SORT

/ WICKET REPEATINGVIEW WEBMARKUPCONTAINER

/ see book (126)

/ wicket-examples-step-by-step	, 
public class WebMarkupContainerPage extends WebPage {
/ with WebMarkupContainer	,
/ OK
/ without WebMarkupContainer	,
/ ERR	, 

public class WebMarkupContainer2Page extends WebPage {
/ met Strings	, 
/ OK

$ less WebMarkupContainer2Page.html

<ul>
	<li wicket:id="x">
		<a href="javascript:;" wicket:id="link">
			<span wicket:id="label"></span>
		</a>
	</li>
</ul>

/ Dus de tag van de repeating view is ,

    <li wicket:id="x">
        <a href="javascript:;" wicket:id="link">
            <span wicket:id="label"></span>
        </a>
    </li>

/ Deze gaat hij af	, 
<li wicket:id="x">	 
/ en met deze wicket id "x" gaat hij op zoek naar de component in de page	, en die vindt hij, RepeatingView	,
/ en dan	, 
<a href="javascript:;" wicket:id="link">
/ en dan op de een of andere manier	, gaat op zoek naar component met id "link" in Link	, 
/ TODO 

/ wicket:container
/ TODO


	
/ Einde WICKET REPEATINGVIEW WEBMARKUPCONTAINER

/ WICKET REPEATINGVIEW WEBMARKUPCONTAINER DEBUG

/ 7	. 

/ we kijken eerst naar een repeatingview template die OK is	,

$ vi WebMarkupContainer2Page.html

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
<ul>
	<li wicket:id="names">
	</li>
</ul>
</body>
</html>

$ vi WebMarkupContainer2Page.java

public class WebMarkupContainer2Page extends WebPage {
	
	public WebMarkupContainer2Page() {
		
		RepeatingView repeatingView=new RepeatingView("names");
		add(repeatingView);
		
		String id=repeatingView.newChildId();
		repeatingView.add(new Label(id,"foo"));
		id=repeatingView.newChildId();
		repeatingView.add(new Label(id,"bar"));
	}
}

/ stack
/s
	WebMarkupContainer2Page(Component).getMarkup() line: 730	
		if (markup != null)
		{
			return markup;
/cb
	WebMarkupContainer2Page(Page).onRender() line: 878	
		MarkupStream markupStream = new MarkupStream(getMarkup());
/cb
	WebMarkupContainer2Page(WebPage).onRender() line: 141	
	WebMarkupContainer2Page(Component).internalRender() line: 2380	
	WebMarkupContainer2Page(Component).render() line: 2308	
	WebMarkupContainer2Page(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	BaseWicketTester$LastPageRecordingPageRendererProvider$1.respond(RequestCycle) line: 2747	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler, boolean) line: 718	
	WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler) line: 657	
	WicketTester(BaseWicketTester).processRequest() line: 629	
	WicketTester(BaseWicketTester).startPage(Class<C>, PageParameters) line: 1262	
	WicketTester(BaseWicketTester).startPage(Class<C>) line: 1235	
	WebMarkupContainer2Test.test() line: 18	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 57	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 606	
	FrameworkMethod$1.runReflectiveCall() line: 47	
	FrameworkMethod$1(ReflectiveCallable).run() line: 12	
	FrameworkMethod.invokeExplosively(Object, Object...) line: 44	
	InvokeMethod.evaluate() line: 17	
	RunBefores.evaluate() line: 26	
	BlockJUnit4ClassRunner(ParentRunner<T>).runLeaf(Statement, Description, RunNotifier) line: 271	
	BlockJUnit4ClassRunner.runChild(FrameworkMethod, RunNotifier) line: 70	
	BlockJUnit4ClassRunner.runChild(Object, RunNotifier) line: 50	
	ParentRunner$3.run() line: 238	
	ParentRunner$1.schedule(Runnable) line: 63	
	BlockJUnit4ClassRunner(ParentRunner<T>).runChildren(RunNotifier) line: 236	
	ParentRunner<T>.access$000(ParentRunner, RunNotifier) line: 53	
	ParentRunner$2.evaluate() line: 229	
	BlockJUnit4ClassRunner(ParentRunner<T>).run(RunNotifier) line: 309	
	JUnit4TestClassReference(JUnit4TestReference).run(TestExecution) line: 50	
	TestExecution.run(ITestReference[]) line: 38	
	RemoteTestRunner.runTests(String[], String, TestExecution) line: 467	
	RemoteTestRunner.runTests(TestExecution) line: 683	
	RemoteTestRunner.run() line: 390	
	RemoteTestRunner.main(String[]) line: 197	
/ debug	,
/s
WebMarkupContainer2Page(Component).getMarkup() line: 730	
		if (markup != null)
		{
			return markup;
this	WebMarkupContainer2Page  (id=154)	
	markup	Markup  (id=169)	
		markupElements	Collections$UnmodifiableRandomAccessList<E>  (id=175)	
			c	ArrayList<E>  (id=200)	
				elementData	Object[10]  (id=201)	
					[0]	RawMarkup  (id=203)	
<!DOCTYPE html>
<html>
					[1]	ComponentTag  (id=204)	
<head>
					[2]	RawMarkup  (id=205)	

<meta charset="UTF-8">
<title>Insert title here</title>
					[3]	ComponentTag  (id=206)	
</head>
					[4]	RawMarkup  (id=210)	

<body>
<ul>
					[5]	ComponentTag  (id=211)	
<li wicket:id="names">
					[6]	RawMarkup  (id=212)	

					[7]	ComponentTag  (id=213)	
</li>
					[8]	RawMarkup  (id=214)	

</ul>
</body>
</html>
				size	9	

/ het template is	,

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
<ul>
	<li wicket:id="names">
	</li>
</ul>
</body>
</html>

/ intermezzo

/ Waar is markup array create	?

/ als de 1ste keer in 	,
/s
FrmPage(Component).getMarkup() line: 740	
this	FrmPage  (id=242)		/ page	,

	if (markup != null)
/n
		if (parent == null)
		{
			// Must be a MarkupContainer to have associated markup file
			if (this instanceof MarkupContainer)
			{
				MarkupContainer container = (MarkupContainer)this;
				Markup associatedMarkup = container.getAssociatedMarkup();
/ in deze call wordt de markup gemaakt	, splits op head en wicket:id's	,

/ See CREATE MARKUP LIST	,

/ Einde  intermezzo

/c
WebMarkupContainer2Page(MarkupContainer).renderNext(MarkupStream) line: 1498	
		final MarkupElement element = markupStream.get();
element	RawMarkup  (id=205)	
<!DOCTYPE html>
<html>

/c
WebMarkupContainer2Page(MarkupContainer).renderNext(MarkupStream) line: 1498	
		final MarkupElement element = markupStream.get();
element	ComponentTag  (id=204)	
<head>

/c
WebMarkupContainer2Page(MarkupContainer).renderNext(MarkupStream) line: 1498	
		final MarkupElement element = markupStream.get();
element	RawMarkup  (id=205)	

<meta charset="UTF-8">
<title>Insert title here</title>

/c
WebMarkupContainer2Page(MarkupContainer).renderNext(MarkupStream) line: 1498	
		final MarkupElement element = markupStream.get();
element	RawMarkup  (id=205)	

<body>
<ul>

/c
WebMarkupContainer2Page(MarkupContainer).renderNext(MarkupStream) line: 1498	
		final MarkupElement element = markupStream.get();
element	ComponentTag  (id=204)	
<li wicket:id="names">

this	WebMarkupContainer2Page  (id=154)	
			// Get component id
			final String id = tag.getId();
names
			// Get the component for the id from the given container
			Component component = get(id);
component	RepeatingView  (id=300)	
				component.render();

/ recursive call	,
/ want we zijn nu in	, 
	WebMarkupContainer2Page(MarkupContainer).renderNext(MarkupStream) line: 1524	
	WebMarkupContainer2Page(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	WebMarkupContainer2Page(Page).onRender() line: 879	
	WebMarkupContainer2Page(WebPage).onRender() line: 141	
	WebMarkupContainer2Page(Component).internalRender() line: 2380	
->	WebMarkupContainer2Page(Component).render() line: 2308	
	WebMarkupContainer2Page(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	

/s
RepeatingView(Component).render() line: 2308	
			internalRender();
/s
RepeatingView(Component).internalRender() line: 2345	
this	RepeatingView  (id=300)	
	markup	null	
		IMarkupFragment markup = getMarkup();
/s
RepeatingView(Component).getMarkup() line: 755	
		markup = parent.getMarkup(this);
/s
WebMarkupContainer2Page(MarkupContainer).getMarkup(Component) line: 502	
		return getMarkupSourcingStrategy().getMarkup(this, child);
/s
DefaultMarkupSourcingStrategy.getMarkup(MarkupContainer, Component) line: 81	
		IMarkupFragment containerMarkup = container.getMarkup();
container	WebMarkupContainer2Page  (id=154)	
containerMarkup	Markup  (id=169)	
	markupElements	Collections$UnmodifiableRandomAccessList<E>  (id=175)	
		c	ArrayList<E>  (id=200)	
			elementData	Object[10]  (id=201)	
				[0]	RawMarkup  (id=203)	
				[1]	ComponentTag  (id=204)	
				[2]	RawMarkup  (id=205)	
				[3]	ComponentTag  (id=206)	
				[4]	RawMarkup  (id=210)	
				[5]	ComponentTag  (id=211)	
				[6]	RawMarkup  (id=212)	
				[7]	ComponentTag  (id=213)	
				[8]	RawMarkup  (id=214)	
			size	9	
		IMarkupFragment childMarkup = containerMarkup.find(child.getId());
/s
Markup(AbstractMarkupFragment).find(String, int) line: 55	
/=
	protected final IMarkupFragment find(final String id, int streamOffset)
this	Markup  (id=169)	
id	"names"
/ het hele ding	,
		MarkupStream stream = new MarkupStream(this);
		stream.setCurrentIndex(streamOffset);
		while (stream.hasMore())
		{
			MarkupElement elem = stream.get();
elem	RawMarkup  (id=203)	
<!DOCTYPE html>
<html>
			if (elem instanceof ComponentTag)
/n
			stream.next();
/ volgende	,
		while (stream.hasMore())
		{
			MarkupElement elem = stream.get();
elem	ComponentTag  (id=204)	
<head>
			if (elem instanceof ComponentTag)
			{
				ComponentTag tag = stream.getTag();
				if (tag.isOpen() || tag.isOpenClose())
				{
					if (canFind && tag.getId().equals(id))
/n
__header__ != names
					else if (tag.isOpen() && !tag.hasNoCloseTag())
					{
						openTagUsability.push(canFind);

						if (tag instanceof WicketTag)
/n
						else if (!"head".equals(tag.getName()) && !tag.isAutoComponentTag())
/n
			stream.next();
/ volgende	,
/ raw markup	,
/ volgende	,
		while (stream.hasMore())
		{
			MarkupElement elem = stream.get();
</head>
			if (elem instanceof ComponentTag)
				ComponentTag tag = stream.getTag();

				if (tag.isOpen() || tag.isOpenClose())
/n
				else if (tag.isClose())
				{
					else
					{
						canFind = openTagUsability.pop();
true
/ TODO
			stream.next();
/ volgende	,
/ raw markup	,
/ volgende	,
		while (stream.hasMore())
		{
			MarkupElement elem = stream.get();

			if (elem instanceof ComponentTag)
			{
				ComponentTag tag = stream.getTag();
tag	ComponentTag  (id=211)	
<li wicket:id="names">
				if (tag.isOpen() || tag.isOpenClose())
				{
					if (canFind && tag.getId().equals(id))
					{
						return stream.getMarkupFragment();
/t
DefaultMarkupSourcingStrategy.getMarkup(MarkupContainer, Component) line: 94	
		// Find the child's markup
		IMarkupFragment childMarkup = containerMarkup.find(child.getId());
/d
<li wicket:id="names">
	</li>

			return childMarkup;
/t
RepeatingView(Component).getMarkup() line: 756	
		markup = parent.getMarkup(this);
/d
		return markup;
/t
RepeatingView(Component).internalRender() line: 2346	
		IMarkupFragment markup = getMarkup();
/d
this	RepeatingView  (id=300)	
markup	MarkupFragment  (id=414)	
	markup	Markup  (id=169)	
		markupElements	Collections$UnmodifiableRandomAccessList<E>  (id=175)	
			c	ArrayList<E>  (id=200)	
				elementData	Object[10]  (id=201)	
					[0]	RawMarkup  (id=203)	
					[1]	ComponentTag  (id=204)	
					[2]	RawMarkup  (id=205)	
					[3]	ComponentTag  (id=206)	
					[4]	RawMarkup  (id=210)	
					[5]	ComponentTag  (id=211)	
					[6]	RawMarkup  (id=212)	
					[7]	ComponentTag  (id=213)	
					[8]	RawMarkup  (id=214)	
				size	9	
			list	ArrayList<E>  (id=200)	
		markupResourceStream	MarkupResourceStream  (id=179)	
	size	3	
	startIndex	5	

/ de markupElements zijn onveranderd	,  maar de size en startIndex zijn veranderd	, 
/ de string repr van de markup is nu	,
<li wicket:id="names">
	</li>

				onRender();
/s
RepeatingView(AbstractRepeater).onRender() line: 92	
		Iterator<? extends Component> it = renderIterator();
		while (it.hasNext())
		{
			Component child = it.next();
child	Label  (id=485)	
			renderChild(child);
/s
RepeatingView(AbstractRepeater).renderChild(Component) line: 115	
		child.render();
/s
Label(Component).render() line: 2296	

/ weer rec call	,
this	Label  (id=485)	
			internalRender();
/s
Label(Component).internalRender() line: 2345	
		IMarkupFragment markup = getMarkup();
/s
Label(Component).getMarkup() line: 755	
		if (markup != null)
/n
		// Ask the parent for find the markup for me
		markup = parent.getMarkup(this);
/s
RepeatingView(AbstractRepeater).getMarkup(Component) line: 153	
		// each direct child gets the markup of this repeater
		return getMarkup();
/ deze is er 	, zie boven	,
/t
Label(Component).getMarkup() line: 756	
		// Ask the parent for find the markup for me
		markup = parent.getMarkup(this);
/d
this	Label  (id=485)	
	markup	MarkupFragment  (id=414)	
		markup	Markup  (id=169)	
		size	3	
		startIndex	5	
/ Dit is de page markup	, maar met andere start index en size	,

/ intermezzo

/ Dus het label krijgt de markup van de repeatingview	, 
<li wicket:id="names">
	</li>

/ dit is de bedoeling	, maar 
/ het label heeft een andere wicket id	,

	public WebMarkupContainer2Page() {
		
		RepeatingView repeatingView=new RepeatingView("names");
		add(repeatingView);
		
		String id=repeatingView.newChildId();
		repeatingView.add(new Label(id,"foo"));
		id=repeatingView.newChildId();
		repeatingView.add(new Label(id,"bar"));
	}

/ intermezzo

/ intermezzo

/ de repeating view heeft een tag met zijn wicket id	, dus krijgt gedeelte van de page markup	, nl dat stuk bij de wicket id	, 
/ als een component geen tag met zijn wicket id heeft	, krijgt hij WH de markup van zijn parent	,  of is dat alleen voor repeaters als parent zo?
/ TODO
/ Voorbeeld is in  WebMarkupContainer(id) in	,
public class WebMarkupContainerPage extends WebPage {
	public WebMarkupContainerPage() {
		RepeatingView repeatingView=new RepeatingView("x");
		add(repeatingView);
		for(X x:list){
			String id=repeatingView.newChildId();
			WebMarkupContainer webMarkupContainer=new WebMarkupContainer(id);
			repeatingView.add(webMarkupContainer);

/ Einde intermezzo

/t
Label(Component).internalRender() line: 2346	
		IMarkupFragment markup = getMarkup();
/d
<li wicket:id="names">
	</li>

		MarkupElement elem = markup.get(0);
<li wicket:id="names">
				onRender();
/s
Label(WebComponent).onRender() line: 60	
		internalRenderComponent();
/s
Label(Component).internalRenderComponent() line: 2508	
		final IMarkupFragment markup = getMarkup();
/ al gedaan in Label(Component).internalRender() line: 2380	

/ MORGENOCHTEND wordt label's wicket id niet used, of wel	?

				renderComponentTag(tag);
/s
Label(Component).renderComponentTag(ComponentTag) line: 4034	
			// Write the tag
			tag.writeOutput(getResponse(), !needToRenderTag(null),
				getMarkup().getMarkupResourceStream().getWicketNamespace());
/s
ComponentTag.writeOutput(Response, boolean, String) line: 720	
	<li wicket:id="names">

/ MORGENOCHTEND repeatingview template met link	,

























/ Einde WICKET REPEATINGVIEW WEBMARKUPCONTAINER DEBUG

/ AJAX COMPONENTS



package org.apache.wicket.ajax.markup.html;
public abstract class AjaxLink<T> extends AbstractLink implements IAjaxLink, IGenericComponent<T>
       @Override
        protected void onInitialize()
        {
                super.onInitialize();
                add(newAjaxEventBehavior("click"));
        }

         * @param event
         *            the name of the default event on which this link will listen to
         * @return the ajax behavior which will be executed when the user clicks the link
         */
        protected AjaxEventBehavior newAjaxEventBehavior(String event)
        {
                return new AjaxEventBehavior(event)
               {
                        private static final long serialVersionUID = 1L;

                        @Override
                        protected void onEvent(AjaxRequestTarget target)
                        {
                                onClick(target);
                        }
						...
	@Override
	public abstract void onClick(final AjaxRequestTarget target);

package org.apache.wicket.ajax.markup.html.form;
public abstract class AjaxButton extends Button
	@Override
	protected void onInitialize()
	{
		super.onInitialize();

		add(newAjaxFormSubmitBehavior("click"));
	}

	protected AjaxFormSubmitBehavior newAjaxFormSubmitBehavior(String event)
	{
		return new AjaxFormSubmitBehavior(form, event)
		{
			private static final long serialVersionUID = 1L;

			@Override
			protected void onSubmit(AjaxRequestTarget target)
			{
				AjaxButton.this.onSubmit(target, AjaxButton.this.getForm());
			}
			...
	protected void onSubmit(AjaxRequestTarget target, Form<?> form)
	{
	}

/ Waarom in onInitialize	?
/ TODO


/ 7	. 

/ ajax	,


 * It is important that the component whose markup needs to be updated contains an id attribute in
 * the generated markup that is equal to the value retrieved from Component#getMarkupId(). This can
 * be accomplished by either setting the id attribute in the html template, or using an attribute
 * modifier that will add the attribute with value Component#getMarkupId() to the tag ( such as
 * MarkupIdSetter )
public class AjaxRequestHandler implements AjaxRequestTarget

/ dus in het template moet er een id attr zijn , naast de wicket:id attr	, of je doet het zoals we altijd doen, met setOutputMarkupId	,
/ <form> heeft een id	,  de <input>s niet	,
/ als we 
		result=new Label("result");
		result.setOutputMarkupId(true);
/ dan heeft <span> een id	, en anders NIET	,

/ Waarom heeft <form> een id	?

/ bijv	,

/ proj wicket-examples-step-by-step

$ vi FrmPage.html

<form wicket:id="form">
	<input type="text" wicket:id="name">
	<input type="text" wicket:id="age">
	<input type="submit" wicket:id="normal">
</form>
<span wicket:id="result"></span>

$ vi FrmPage.java

		result=new Label("result");
		result.setOutputMarkupId(true);


/ we zien in HTML	,

<body>
<form wicket:id="form" id="form4" method="post" action="./frm?2-2.IFormSubmitListener-form">
	<div style="width:0px;height:0px;position:absolute;left:-100px;top:-100px;overflow:hidden">
		<input type="hidden" name="form4_hf_0" id="form4_hf_0"></div>
	<input type="text" wicket:id="name" value="" name="p::name">
	<input type="text" wicket:id="age" value="0" name="age">
	<input type="submit" wicket:id="normal" name="normal" id="normal5">
</form>
<span wicket:id="result" id="result6">eric,13</span>

/ we zien dat de inputs in het form geen id hebben, en result wel	, 
/ we zien dat form ook een id heeft	, TODO

/ 7	. 

/ CREATE IFORMSUBMITLISTENER AND ACTION URL ON NORMAL FORM

/ proj. wicket-examples-step-by-step
/ prog. FrmPage
/ we maken normal form,	

/ hoe komt action attr op form	, en waarom heeft form een id attr	?

/ stack	,
/s
	FrmPage(Component).getMarkup() line: 728	
		if (markup != null)
/n
	FrmPage(Component).internalRender() line: 2345	
	FrmPage(Component).render() line: 2308	
			if ((parent == null) || (parent.getFlag(FLAG_RENDERING) == false) || isAuto())
			{
				internalPrepareForRender(true);
/ TODO
			}
			// Do the render
			internalRender();
/cb
	FrmPage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
		PageRenderer renderer = Application.get().getPageRendererProvider().get(this);
		renderer.respond((RequestCycle)requestCycle);
/cb
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
			IRequestHandler handler = resolveRequestHandler();
handler	RenderPageRequestHandler  (id=256)									<-
				execute(handler);
/cb
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ debug	,
/s
FrmPage(Component).getMarkup() line: 728	
		if (markup != null)
/n
		if (parent == null)
		{
			// Must be a MarkupContainer to have associated markup file
			if (this instanceof MarkupContainer)
			{
				MarkupContainer container = (MarkupContainer)this;
				Markup associatedMarkup = container.getAssociatedMarkup();
/ CREATE MARKUP LIST
/ create list of markup, splits on header an wicket:id's for a MarkupContainer, bijv een Page	, die .html heeft 	,
/s
FrmPage(MarkupContainer).getAssociatedMarkup() line: 456	
			Markup markup = MarkupFactory.get().getMarkup(this, false);
/s
MarkupFactory.getMarkup(MarkupContainer, boolean) line: 194	
		return getMarkup(container, container.getClass(), enforceReload);
/s
/ TODO

/ Einde CREATE MARKUP LIST

/t
FrmPage(Component).getMarkup() line: 741	
				Markup associatedMarkup = container.getAssociatedMarkup();
/d
this	FrmPage  (id=242)	
associatedMarkup	Markup  (id=416)	
	markupElements	Collections$UnmodifiableRandomAccessList<E>  (id=433)	
		c	ArrayList<E>  (id=442)	
			elementData	Object[22]  (id=443)	
				[0]	RawMarkup  (id=428)	
<!doctype html>
<html>
				[1]	ComponentTag  (id=445)	
<head>
				[2]	ComponentTag  (id=446)	
</head>
				[3]	RawMarkup  (id=447)	
<body>
				[4]	ComponentTag  (id=448)	
<form wicket:id="form">
				[5]	RawMarkup  (id=449)	

				[6]	ComponentTag  (id=450)	
<input type="text" wicket:id="name">
				[7]	RawMarkup  (id=451)	

				[8]	ComponentTag  (id=453)	
<input type="text" wicket:id="age">
				[9]	RawMarkup  (id=454)	

				[10]	ComponentTag  (id=455)	
<input type="submit" wicket:id="normal">
				[11]	RawMarkup  (id=456)	

				[12]	ComponentTag  (id=457)	
</form>
				[13]	RawMarkup  (id=458)	

				[14]	ComponentTag  (id=459)	
<span wicket:id="result">
				[15]	ComponentTag  (id=460)	
</span>
				[16]	RawMarkup  (id=461)	
</body>
</html>
			size	17	
/t
FrmPage(Component).internalRender() line: 2380	
		IMarkupFragment markup = getMarkup();
/d
				onRender();
/s
FrmPage(Page).onRender() line: 879	
		MarkupStream markupStream = new MarkupStream(getMarkup());
		renderAll(markupStream, null);
/s
FrmPage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1746	
		while (markupStream.hasMore())
/ die hele lijst	,
			boolean rawMarkup = renderNext(markupStream);
/s
FrmPage(MarkupContainer).renderNext(MarkupStream) line: 1498	
		final MarkupElement element = markupStream.get();
<form wicket:id="form">
			// Get component id
			final String id = tag.getId();
			// Get the component for the id from the given container
			Component component = get(id);
component	Form<T>  (id=598)	
				component.render();
/s
Form<T>(Component).render() line: 2296	
/ recursive call
			// Do the render
			internalRender();
/s
Form<T>(Component).internalRender() line: 2345	
		final IMarkupFragment markup = getMarkup();
/s
Form<T>(Component).getMarkup() line: 734	
		if (markup != null)
/n
		// No parent, than check associated markup files
		if (parent == null)												/ dit was zojuist zo, toen this=page	, toen werd lijst van markup bepaald	,
/n
				Markup associatedMarkup = container.getAssociatedMarkup();
/niet	,

		// Ask the parent for find the markup for me
		markup = parent.getMarkup(this);
/s
FrmPage(MarkupContainer).getMarkup(Component) line: 502	
		// Delegate request to attached markup sourcing strategy.
		return getMarkupSourcingStrategy().getMarkup(this, child);
/s
DefaultMarkupSourcingStrategy.getMarkup(MarkupContainer, Component) line: 81	
		IMarkupFragment containerMarkup = container.getMarkup();
/ container=page	, containerMarkup is die hele lijst	,
		// Find the child's markup
		IMarkupFragment childMarkup = containerMarkup.find(child.getId());
/s
Markup.find(String) line: 210	
		return find(id, 0);
/t
Form<T>(Component).getMarkup() line: 756	
		markup = parent.getMarkup(this);
/d
this	Form<T>  (id=598)	
	id	"form" (id=637)	
	markup	MarkupFragment  (id=658)	
		markup	Markup  (id=416)	
		size	9	
		startIndex	4	
/ See boven, 4 is <form ...> en 4+9-1=12 is </form>

/t
Form<T>(Component).internalRender() line: 2358	
		IMarkupFragment markup = getMarkup();
/d

		// Get mutable copy of next tag
		final ComponentTag openTag = markupStream.getTag();
		final ComponentTag tag = openTag.mutable();
/ we gaan in tag attrs add	, maar de tag in markupStream blijft onveranderd <form wicket:id="form">

				onRender();
/s
Form<T>(MarkupContainer).onRender() line: 1698		 / MarkupContainer.onRender is overwritten , anders dan Page.onRender	, die MarkupContainer.renderAll calls	,
		internalRenderComponent();
/s
Form<T>(Component).internalRenderComponent() line: 2508	
		final IMarkupFragment markup = getMarkup();
/j
		// Call any tag handler
/ ADDS ATTRIBUTES TO COMPONENTTAG	,
/ See below GENERATE ID
/ See below ADDS ACTION ATTRIBUTE TO FORM
		onComponentTag(tag);			/ hier worden de attrs id, action add aan de tag <form>
/s
Form<T>.onComponentTag(ComponentTag) line: 1578	
		super.onComponentTag(tag);					/ adds id	,
/s
Form<T>(Component).onComponentTag(ComponentTag) line: 3897	

		// We can't try to get the ID from markup. This could be different than
		// id returned from getMarkupId() prior first rendering the component
		// (due to transparent resolvers and borders which break the 1:1
		// component <-> markup relation)
		if (getFlag(FLAG_OUTPUT_MARKUP_ID))
		{
			tag.putInternal(MARKUP_ID_ATTR_NAME, getMarkupId());
MARKUP_ID_ATTR_NAME="id"
/s
Form<T>(Component).getMarkupId() line: 1544	
		return getMarkupId(true);
/s
/ GENERATE ID
Form<T>(Component).getMarkupId(boolean) line: 1523	
		IMarkupIdGenerator markupIdGenerator = getApplication().getMarkupSettings().getMarkupIdGenerator();
		String markupId = markupIdGenerator.generateMarkupId(this, createIfDoesNotExist);
/s
DefaultMarkupIdGenerator.generateMarkupId(Component, boolean) line: 32	
/=
/**
 * An implementation of IMarkupIdGenerator that uses the Session to generate
 * sequence numbers for the component markup ids.
 * As a prefix for the generated markup id in development mode it uses the component id
 * and in production mode the string <em>id</em>.
 */
public class DefaultMarkupIdGenerator implements IMarkupIdGenerator
{
	@Override
	public String generateMarkupId(Component component, boolean createIfDoesNotExist)
/ TODO later	,																		/ from WebSession TODO	,
/t
Form<T>(Component).onComponentTag(ComponentTag) line: 3900	
			tag.putInternal(MARKUP_ID_ATTR_NAME, getMarkupId());
/d
/t
Form<T>.onComponentTag(ComponentTag) line: 1582	
		super.onComponentTag(tag);
/d
<form wicket:id="form" id="form1">

		if (isRootForm())
		{
			String method = getMethod().toLowerCase(Locale.ENGLISH);
/s
Form<T>.getMethod() line: 1345	
		String method = getMarkupAttributes().getString("method");
/s
Form<T>(Component).getMarkupAttributes() line: 1467	
		ComponentTag tag = getMarkupTag();
<form wicket:id="form"> = 1ste item in de list van Form's markup	, 
		if (tag != null)
		{
			ValueMap attrs = new ValueMap(tag.getAttributes());
			attrs.makeImmutable();
			return attrs;
/ alleen wicket:id="form"
/t
Form<T>.getMethod() line: 1346	
		String method = getMarkupAttributes().getString("method");
/pd
/d
null
		return (method != null) ? method : METHOD_POST;
/t
Form<T>.onComponentTag(ComponentTag) line: 1585	
			String method = getMethod().toLowerCase(Locale.ENGLISH);
/d
post
			tag.put("method", method);
			String url = getActionUrl().toString();
/s
Form<T>.getActionUrl() line: 1650	
		return urlFor(IFormSubmitListener.INTERFACE, new PageParameters());	
/s
Form<T>(Component).urlFor(RequestListenerInterface, PageParameters) line: 3403	

this	Form<T>  (id=598)	
listener	RequestListenerInterface  (id=809)	
	listenerInterfaceClass	Class<T> (org.apache.wicket.markup.html.form.IFormSubmitListener) (id=600)	
	method	Method  (id=810)	public abstract void org.apache.wicket.markup.html.form.IFormSubmitListener.onFormSubmitted()
	name	"IFormSubmitListener" (id=811)	

		IRequestHandler handler = createRequestHandler(listener, parameters, null);
/ WH Waarom handler	? WH om daar de component (Form in ons geval in te onthouden	, om daar dan (door RequestListenerInterface) de method op te invoke	, 
/ TODO HANDLER
/s
	/**
	 * Create a suitable request handler depending whether the page is stateless or bookmarkable.
	 */
Form<T>(Component).createRequestHandler(RequestListenerInterface, PageParameters, Integer) line: 3358	
		PageAndComponentProvider provider = new PageAndComponentProvider(page, this, parameters);

		if (page.isPageStateless()
/ n
			|| (getApplication().getPageSettings().getRecreateBookmarkablePagesAfterExpiry()
				&& page.isBookmarkable() && page.wasCreatedBookmarkable()))
/j
		{
			return new BookmarkableListenerInterfaceRequestHandler(provider, listener, id);
/ TODO
/ Wat is id	? Is er dus voor iedere ... apart een controller	, een ...ListenerInterfaceRequestHandler	? 
		}
		else
/n
		{
			return new ListenerInterfaceRequestHandler(provider, listener, id);
/t
Form<T>(Component).urlFor(RequestListenerInterface, PageParameters) line: 3404	
		IRequestHandler handler = createRequestHandler(listener, parameters, null);
/d
handler	BookmarkableListenerInterfaceRequestHandler  (id=901)	
		return getRequestCycle().urlFor(handler);
/s
RequestCycle.urlFor(IRequestHandler) line: 534	
			Url mappedUrl = mapUrlFor(handler);
/s
RequestCycle.mapUrlFor(IRequestHandler) line: 434	
		final Url url = requestMapper.mapHandler(handler);
/s
SystemMapper(CompoundRequestMapper).mapHandler(IRequestHandler) line: 211	
		for (IRequestMapper mapper : mappers)
mapper=MountedMapper [mountSegments=frm]
			Url url = mapper.mapHandler(handler);
/s
MountedMapper.mapHandler(IRequestHandler) line: 159	
		Url url = super.mapHandler(requestHandler);
/s
MountedMapper(AbstractBookmarkableMapper).mapHandler(IRequestHandler) line: 396	
		else if (requestHandler instanceof BookmarkableListenerInterfaceRequestHandler)	

/ inderdaad requesthandler, WH creates url die naar de controller RequestListenerInterface, IFormSubmitListener maps	, deze wordt later bij form submit in MountedMapper(AbstractBookmarkableMapper).mapRequest gevraagd	, om gegeven de url achter de controller te komen	, WH de ListenerInterfaceRequestHandler-RequestListenerInterface-IFormSubmitListener	,

			if (handler.getListenerInterface().isIncludeRenderCount())
			{
				renderCount = handler.getRenderCount();
/s
BookmarkableListenerInterfaceRequestHandler.getRenderCount() line: 177	
		return pageComponentProvider.getRenderCount();
/s
PageAndComponentProvider(PageProvider).getRenderCount() line: 379	
		return renderCount;
/t
MountedMapper(AbstractBookmarkableMapper).mapHandler(IRequestHandler) line: 474	
				renderCount = handler.getRenderCount();
/d
1
			PageInfo pageInfo = getPageInfo(handler);
/s
MountedMapper(AbstractBookmarkableMapper).getPageInfo(IPageRequestHandler) line: 501	
			if (page.isPageStateless() == false)
			{
				pageId = page.getPageId();
0
		return new PageInfo(pageId);
/t
MountedMapper(AbstractBookmarkableMapper).mapHandler(IRequestHandler) line: 475	
			PageInfo pageInfo = getPageInfo(handler);
/d
			ComponentInfo componentInfo = new ComponentInfo(renderCount,
				requestListenerInterfaceToString(handler.getListenerInterface()),
				handler.getComponentPath(), handler.getBehaviorIndex());
/s
MountedMapper(AbstractComponentMapper).requestListenerInterfaceToString(RequestListenerInterface) line: 58	
listenerInterface [RequestListenerInterface name=IFormSubmitListener, method=public abstract void org.apache.wicket.markup.html.form.IFormSubmitListener.onFormSubmitted()]
		return getContext().requestListenerInterfaceToString(listenerInterface);
IFormSubmitListener
/t
/s
BookmarkableListenerInterfaceRequestHandler.getComponentPath() line: 86	
		return pageComponentProvider.getComponentPath();
form
/t
behaviorIndex=null
/s
	public ComponentInfo(final Integer renderCount, final String listenerInterface,
		final String componentPath, final Integer behaviorId)
	{
		this.listenerInterface = listenerInterface;
		this.componentPath = componentPath;
		this.behaviorId = behaviorId;
		this.renderCount = renderCount;
/t
			UrlInfo urlInfo = new UrlInfo(new PageComponentInfo(pageInfo, componentInfo),
				pageClass, parameters);
			return buildUrl(urlInfo);
frm?0-1.IFormSubmitListener-form
/ BUILD URL
/ app?page 0-renderCount 1.controller-component form 

/t
MountedMapper.mapHandler(IRequestHandler) line: 161	
		Url url = super.mapHandler(requestHandler);
/d
frm?0-1.IFormSubmitListener-form
		return url;
/t

/ we zijn nog steeds in render page	,
	MountedMapper.mapHandler(IRequestHandler) line: 189	
	SystemMapper(CompoundRequestMapper).mapHandler(IRequestHandler) line: 213	
	RequestCycle.mapUrlFor(IRequestHandler) line: 434	
	RequestCycle.urlFor(IRequestHandler) line: 534	
	Form<T>(Component).urlFor(RequestListenerInterface, PageParameters) line: 3404	
	Form<T>.getActionUrl() line: 1650	
	Form<T>.onComponentTag(ComponentTag) line: 1586	
	Form<T>(Component).internalRenderComponent() line: 2521	
	Form<T>(MarkupContainer).onRender() line: 1698	
	Form<T>(Component).internalRender() line: 2380	
	Form<T>(Component).render() line: 2308	
	FrmPage(MarkupContainer).renderNext(MarkupStream) line: 1524	
	FrmPage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	FrmPage(Page).onRender() line: 879	
	FrmPage(WebPage).onRender() line: 141	
	FrmPage(Component).internalRender() line: 2380	
	FrmPage(Component).render() line: 2308	
	FrmPage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/t
SystemMapper(CompoundRequestMapper).mapHandler(IRequestHandler) line: 214	
		for (IRequestMapper mapper : mappers)
		{
			Url url = mapper.mapHandler(handler);
/d
frm?0-1.IFormSubmitListener-form
			if (url != null)
			{
				return url;
/t
RequestCycle.mapUrlFor(IRequestHandler) line: 435	
		final Url url = requestMapper.mapHandler(handler);
/d
handler	BookmarkableListenerInterfaceRequestHandler  (id=901)	
url	Url  (id=1060)	
frm?0-1.IFormSubmitListener-form

		listeners.onUrlMapped(this, handler, url);
/ TODO
/t
RequestCycle.urlFor(IRequestHandler) line: 535	
			Url mappedUrl = mapUrlFor(handler);
/d
			CharSequence url = renderUrl(mappedUrl, handler);
./frm?0-1.IFormSubmitListener-form
			return url;
/t
Form<T>.getActionUrl() line: 1650	
		return urlFor(IFormSubmitListener.INTERFACE, new PageParameters());
/d
Form<T>.onComponentTag(ComponentTag) line: 1587	
			String url = getActionUrl().toString();
/d
			else
			{
				tag.put("action", url);
/ ADDS ACTION ATTRIBUTE TO FORM
/t
Form<T>(Component).internalRenderComponent() line: 2524	
		onComponentTag(tag);
/d
			else
			{
				renderComponentTag(tag);
/s
Form<T>(Component).renderComponentTag(ComponentTag) line: 4034	
			// Write the tag
			tag.writeOutput(getResponse(), !needToRenderTag(null),
				getMarkup().getMarkupResourceStream().getWicketNamespace());

/ we weten genoeg	,


/ Einde CREATE IFORMSUBMITLISTENER AND ACTION URL ON NORMAL FORM 

/ USE IFORMSUBMITLISTENER AND URL ON NORMAL FORM

/ proj. wicket-examples-step-by-step
/ prog. FrmPage
/ click normal button	,

/ chrome maakt	 een post	,,
Request URL:http://localhost:9090/wicket-examples-step-by-step/repeater/frm?0-1.IFormSubmitListener-form

Form Dataview sourceview URL encoded
form1_hf_0:
p::name:eric
age:13
normal:Submit

/ stack
/s
	RequestCycle.processRequest() line: 222	
			IRequestHandler handler = resolveRequestHandler();
handler	ListenerInterfaceRequestHandler  (id=1120)	
				execute(handler);
/cb
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ debug	,
RequestCycle.processRequest() line: 219	

this	RequestCycle  (id=1130)	
	request	ServletWebRequest  (id=1134)	
		filterPrefix	"repeater/" (id=283)	
		httpServletRequest	RequestFacade  (id=287)	
			request	Request  (id=1169)	
				cookies	null	
				requestedSessionId	"ACC6A70AC2B14243E1E73D6DA77E7A90" (id=1364)	
				session	StandardSession  (id=1388)	
				...
		url	Url  (id=1152)	frm?1-2.IFormSubmitListener-form

			IRequestHandler handler = resolveRequestHandler();
/s
RequestCycle.resolveRequestHandler() line: 189	
		return requestMapper.mapRequest(request);
/s
SystemMapper(CompoundRequestMapper).mapRequest(Request) line: 132	
		for (MapperWithScore mapperWithScore : list)
		{
			IRequestMapper mapper = mapperWithScore.getMapper();
MountedMapper [mountSegments=frm]
			IRequestHandler handler = mapper.mapRequest(request);
/s
MountedMapper(AbstractBookmarkableMapper).mapRequest(Request) line: 346	

/ hierboven bij render page waren we in MountedMapper(AbstractBookmarkableMapper).mapHandler	,

		UrlInfo urlInfo = parseRequest(request);
/ haalt alles uit de url	,

/ NB. De component ('s wicket id, "form") staat in de url	, Dit heeft de ListenerInterfaceRequestHandler straks nodig om op deze de IFormSubmitListener's method te invoke, dit doet RequestListenerInterface	,

/s
MountedMapper.parseRequest(Request) line: 139	
		Url url = request.getUrl();
frm?0-1.IFormSubmitListener-form

		// check if the URL starts with the proper segments
		else if (urlStartsWithMountedSegments(url))
		{
			// try to extract page and component information from URL
			PageComponentInfo info = getPageComponentInfo(url);
info	PageComponentInfo  (id=10856)	
	componentInfo	ComponentInfo  (id=10859)	
		behaviorId	null	
		componentPath	"form" (id=10862)	
		listenerInterface	"IFormSubmitListener" (id=10863)	
		renderCount	Integer  (id=10864)	
	pageInfo	PageInfo  (id=10860)	
		pageId	Integer  (id=10866)	
			Class<? extends IRequestablePage> pageClass = getPageClass();
class org.apache.wicket.examples.repeater.FrmPage.class
/ asks	,
this	MountedMapper  (id=10840)	
	pageClassProvider	ClassReference<T>  (id=10892)	
		cache	WeakReference<T>  (id=10896)	
		name	"org.apache.wicket.examples.repeater.FrmPage" (id=10897)	

			PageParameters pageParameters = extractPageParameters(request, url);

			return new UrlInfo(info, pageClass, pageParameters);
/t
MountedMapper(AbstractBookmarkableMapper).mapRequest(Request) line: 348	
		UrlInfo urlInfo = parseRequest(request);
/d
urlInfo	AbstractBookmarkableMapper$UrlInfo  (id=3052)			
	pageClass	Class<T> (org.apache.wicket.examples.repeater.FrmPage) (id=243)	
	pageComponentInfo	PageComponentInfo  (id=3053)	
		componentInfo	ComponentInfo  (id=3055)	
			behaviorId	null	
			componentPath	"form" (id=3057)	
			listenerInterface	"IFormSubmitListener" (id=3058)	
			renderCount	Integer  (id=3060)	
		pageInfo	PageInfo  (id=3056)	
			pageId	Integer  (id=720)	
	pageParameters	null	

			else if (info.getComponentInfo() != null)
			{
				// with both page instance and component+listener this is a listener interface URL
				return processListener(info, pageClass, pageParameters);
/s
MountedMapper(AbstractBookmarkableMapper).processListener(PageComponentInfo, Class<IRequestablePage>, PageParameters) line: 300	

/ CONTROLLERS
/ uses url om RequestListenerInterface  te vinden	,
/ PageComponentInfo komt uit de url, gaat hieruit RequestListenerInterface vinden, WH = IFormSubmitListener.INTERFACE	, en maakt ListenerInterfaceRequestHandler WH om de component (Form in ons geval) te onthouden	, om daarop de method te invoke	,
 
		if (componentInfo != null) 
		{
			renderCount = componentInfo.getRenderCount();
2
			listenerInterface = requestListenerInterfaceFromString(componentInfo.getListenerInterface());

/ calls 
		return RequestListenerInterface.forName(interfaceName);

componentInfo.getListenerInterface()="IFormSubmitListener"
listenerInterface	RequestListenerInterface  (id=809)	
	interfaces	Collections$SynchronizedMap<K,V>  (id=838)	
	listenerInterfaceClass	Class<T> (org.apache.wicket.markup.html.form.IFormSubmitListener) (id=600)	
	method	Method  (id=810)	public abstract void org.apache.wicket.markup.html.form.IFormSubmitListener.onFormSubmitted()
	name	"IFormSubmitListener" (id=811)	
/ looks up in RequestListenerInterface.class in listeners coll op "IFormSubmitListener"


/ we zijn in resolve request handler	,
/s
	MountedMapper(AbstractBookmarkableMapper).processListener(PageComponentInfo, Class<IRequestablePage>, PageParameters) line: 308	
	MountedMapper(AbstractBookmarkableMapper).mapRequest(Request) line: 370	
	SystemMapper(CompoundRequestMapper).mapRequest(Request) line: 150	
	RequestCycle.resolveRequestHandler() line: 189								<-
	RequestCycle.processRequest() line: 219	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ einde intermezzo

		if (listenerInterface != null)
		{
			PageAndComponentProvider provider = new PageAndComponentProvider(pageInfo.getPageId(),
				pageClass, pageParameters, renderCount, componentInfo.getComponentPath());

			provider.setPageSource(getContext());

			return new ListenerInterfaceRequestHandler(provider, listenerInterface, componentInfo.getBehaviorId());

/ een component die voorkomt in de url (met wicket id "form" nu) krijgt een eigen controller	, de component zit in provider	, ook is er de RequestListenerInterface listenerInterface 	, die de interface IFromSubmitListener   heeft	, en de method daaruit zal invoke op de component	, TODO ajax 

/ wicket zet er een ListenerInterfaceRequestHandler omheen	, WH omdat de RequestListenerInterface moet worden toegepast op de component die in de provider zit	,

/ Dus de controller is WH het trio ListenerInterfaceRequestHandler-RequestListenerInterface-IFormSubmitListener	, de ListenerInterfaceRequestHandler is apart voor iedere component (die in de url voorkomt), en de RequestListenerInterface is er apart voor iedere RequestListener type	, dus voor IFormSubmitListener is er een, en voor ILinkListener, ... en voor TODO ajax	, 

/ Bij page render hadden we een Bookmarkable ListenerInterfaceRequestHandler, die alleen dient om generate urls	,
/ TODO

/t
RequestCycle.processRequest() line: 220	
			IRequestHandler handler = resolveRequestHandler();
/d
handler	ListenerInterfaceRequestHandler  (id=3112)	
	behaviorId	null	
	listenerInterface	RequestListenerInterface  (id=809)	
	pageComponentProvider	PageAndComponentProvider  (id=3111)	

				execute(handler);
/s
RequestCycle.execute(IRequestHandler) line: 265	
			requestHandlerExecutor.execute(handler);
/s
RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
			respond(handler);
/s
RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
				handler.respond(RequestCycle.this);
/s
ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 157	
		final IRequestablePage page = getPage();
		final boolean isAjax = ((WebRequest)requestCycle.getRequest()).isAjax();
false

		IRequestableComponent component;
		try
		{
			component = getComponent();

/ uses the controller's provider	,
/ gegeven wicket id in url	, find the component	,
/s
ListenerInterfaceRequestHandler.getComponent() line: 90	
		return pageComponentProvider.getComponent();
/s
PageAndComponentProvider.getComponent() line: 160	
			IRequestablePage page = getPageInstance();
			component = page.get(componentPath);
this	PageAndComponentProvider  (id=3111)	
	componentPath	"form" (id=3057)	
		return component;
component	Form<T>  (id=598)	
/t
ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 173	
			component = getComponent();
/d
component	Form<T>  (id=10938)	

		if (page instanceof Page)
		{
			// initialize the page to be able to check whether it is stateless
			((Page)page).internalInitialize();
		final boolean isStateless = page.isPageStateless();
false
		RedirectPolicy policy = isStateless
			? RedirectPolicy.NEVER_REDIRECT
->			: RedirectPolicy.AUTO_REDIRECT;
		final IPageProvider pageProvider = new PageProvider(page);

		if (isAjax == false && listenerInterface.isRenderPageAfterInvocation())
		{
			// schedule page render after current request handler is done. this can be
			// overridden during invocation of listener
			// method (i.e. by calling RequestCycle#setResponsePage)
			requestCycle.scheduleRequestHandlerAfterCurrent(new RenderPageRequestHandler( pageProvider, policy));
/ toont hierna de page weer	,

		invokeListener();

/ we zijn nog steeds in de controller van het form	, in RequestCycle.processRequest werd resolveRequestHandler called, en die maakte de controller voor dit form	, iedere component uit de url krijgt een aparte controller: wicket kijkt naar de url in het request	, en als een form een action attr heeft	, en je submit, dan maakt de browser de url met de action er in	, 


/ er is altijd een controller	, 
/ bij een gewoon form is dat het form zelf, beter: ListenerInterfaceRequestHandler-RequestListenerInterface-Form implements IFormSubmitListener
/ bij een ajax form is er een AjaxFormSubmitBehavior add aan de AjaxButton in het form	, dus , beter: ListenerInterfaceRequestHandler-RequestListenerInterface-AjaxFormSubmitBehavior implements IBehaviorListener	,
/ in de url zien we IFormSubmitListener bij een gewoon form, en bij een ajax form IBehaviorListener	, en de controllers die deze implements worden gevonden: Form resp. AjaxFormSubmitBehavior	, 

/s
/ DIFFERENCE NORMAL COMPONENT OR AJAX COMPONENT
ListenerInterfaceRequestHandler.invokeListener() line: 241	
		if (getBehaviorIndex() == null)									/ normal component
/j
		{
			listenerInterface.invoke(getComponent());
		else															/ ajax component
/n
		{
			try
			{
				Behavior behavior = getComponent().getBehaviorById(behaviorId);
/niet
				listenerInterface.invoke(getComponent(), behavior);
/niet

/ het is precies wat hier staat	, we gaan de RequestListenerInterface's method toepassen op de component=Form	,

/s
RequestListenerInterface.invoke(IRequestableComponent) line: 205	

/ we zijn nu dus in de RequestListenerInterface, die er apart is voor iedere RequestListener type	,

this	RequestListenerInterface  (id=809)	
	listenerInterfaceClass	Class<T> (org.apache.wicket.markup.html.form.IFormSubmitListener) (id=600)	
	method	Method  (id=810)	
	name	"IFormSubmitListener" (id=811)	

		internalInvoke(component, component);
/s
RequestListenerInterface.internalInvoke(Component, Object) line: 248	
			method.invoke(target);
this	RequestListenerInterface  (id=809)	
	method	Method  (id=810)	public abstract void org.apache.wicket.markup.html.form.IFormSubmitListener.onFormSubmitted()
target	Form<T>  (id=598)	
/s
Form<T>.onFormSubmitted() line: 689			/ Dus het Form zelf is de IFormSubmitListener	,
		// check methods match
		if (getRequest().getContainerRequest() instanceof HttpServletRequest)

/ POST/GET REQUEST IN FORM CONTROLLER LISTENER
/ Dit is NIET zo bij een request vanuit een link	 WH	, 

			String desiredMethod = getMethod();
"post"
/ via de markup	, TODO
			String actualMethod = ((HttpServletRequest)getRequest().getContainerRequest()).getMethod();
"POST"
		onFormSubmitted(null);
/s
Form<T>.onFormSubmitted(IFormSubmitter) line: 737	
/=
	public final void onFormSubmitted(IFormSubmitter submitter)
submitter	null	

			else
			{
				// First, see if the processing was triggered by a Wicket IFormSubmittingComponent
				if (submitter == null)
				{
					submitter = findSubmittingButton();	/ TODO hoe werkt deze method	?
submitter	FrmPage$1  (id=3222)	
[Button [Component id = normal]]

				else
				{
					// the submit request might be for one of the nested forms, so let's
					// find the right one:
					final Form<?> formToProcess = findFormToProcess(submitter);

					// process the form for this request
					formToProcess.process(submitter);
/s
Form<T>.process(IFormSubmitter) line: 933	
/=
	public void process(IFormSubmitter submittingComponent)
submittingComponent	FrmPage$3  (id=15182)	 [Button [Component id = normal]]

		// run validation
		validate();

		// If a validation error occurred
		if (hasError())
		{
			// mark all children as invalid
			markFormComponentsInvalid();

			// let subclass handle error
			callOnError(submittingComponent);
		}
		else
		{
			// mark all children as valid
			markFormComponentsValid();

			// before updating, call the interception method for clients
			beforeUpdateFormComponentModels();

			// Update model using form data
			updateFormComponentModels();																
/s
Form<T>.updateFormComponentModels() line: 1830	
		internalUpdateFormComponentModels();
/ TODO
		updateNestedFormComponentModels();
/s




			// validate model objects after input values have been bound
			internalOnValidateModelObjects();
			if (hasError())
			{
				callOnError(submittingComponent);
				return;
			}

			// Form has no error
			delegateSubmit(submittingComponent);	 / submittingComponent=Button 	, 
/s
Form<T>.delegateSubmit(IFormSubmitter) line: 1287	
		// process submitting component (if specified)
		if (submittingComponent != null)
		{
			// invoke submit on component
			submittingComponent.onSubmit();
/s
FrmPage$1.onSubmit() line: 44	
			@Override
			public void onSubmit() {
				result_=name_+","+age_;			
				name_="";					/ we write rechtstreeks in form component's models	, die we zojuist geupdate 
				age_=0;
			};
/t
Form<T>.delegateSubmit(IFormSubmitter) line: 1311	
			// invoke submit on component
			submittingComponent.onSubmit();
/d
		// invoke Form#onSubmit(..)
		for (Form<?> form : forms)
		{
			form.onSubmit();
/s
Form<T>.onSubmit() line: 1815	
	{
	}

/ Einde USE IFORMSUBMITLISTENER AND URL ON NORMAL FORM

/ CREATE AJAX URL OF AJAX LINK 

/ proj wicket-examples-step-by-step
/ prog FrmPage

$ less FrmPage.html

<a href="javascript:;" wicket:id="ajaxLink">ajax link</a>
<span wicket:id="result"></span>

$ less FrmPage.java

	private Label result;
	String result_;

	public FrmPage() {
		AjaxLink<Void>ajaxLink=new AjaxLink<Void>("ajaxLink") {
			@Override
			public void onClick(AjaxRequestTarget target) {
				result_="From AjaxLink";	
				target.add(result);
			}
		};
		add(ajaxLink);

		result=new Label("result");
		mdl=new PropertyModel<String>(this, "result_");
		result.setDefaultModel(mdl);
		result.setOutputMarkupId(true);
		add(result);

/ we zien in HTML	,

<head>
<script type="text/javascript">
/*<![CDATA[*/
var clientTimeVariable = new Date().getTime();
/*]]>*/
</script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.resource.JQueryResourceReference/jquery/jquery-1.12.0-ver-1455723568000.js"></script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-event-jquery-ver-1455723568000.js"></script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-ajax-jquery-ver-1455723568000.js"></script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-ajax-jquery-debug-ver-1455723568000.js"></script>
<script type="text/javascript" id="wicket-ajax-debug-enable">
/*<![CDATA[*/
</script>
<script type="text/javascript" id="wicket-ajax-base-url">
/*<![CDATA[*/
Wicket.Ajax.baseUrl="frm?4";
/*]]>*/
</script>
<script type="text/javascript">
/*<![CDATA[*/
Wicket.Event.add(window, "domready", function(event) { 
Wicket.Ajax.ajax({"u":"./frm?4-2.IBehaviorListener.0-ajaxLink","c":"ajaxLink1","e":"click"});;
Wicket.Event.publish(Wicket.Event.Topic.AJAX_HANDLERS_BOUND);
;});
/*]]>*/
</script>
</head><body>

/ Als we de ajax link click	, zien we	,
/ TODO


/c

/ van iedere component wordt gevraagd WH of er iets van hem in de header moet	,
/stack
/s
	AjaxLink$1(AjaxEventBehavior).renderHead(Component, IHeaderResponse) line: 90	
	FrmPage$1(Component).internalRenderHead(HtmlHeaderContainer) line: 2727	
this	FrmPage$1  (id=11021)														/ AjaxLink	,
			// Then ask all behaviors
			for (Behavior behavior : getBehaviors())
			{
				if (isBehaviorAccepted(behavior))
				{
					if (response.wasRendered(behavior) == false)
					{
						behavior.renderHead(this, response);
/cb
	ChildFirstHeaderRenderStrategy$1.component(Component, IVisit<Void>) line: 85	
	ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component, Visit<Void>) line: 96	
	ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component, Visit<Void>) line: 87	
	ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component) line: 51	
	ChildFirstHeaderRenderStrategy.renderChildHeaders(HtmlHeaderContainer, Component) line: 78	
			new DeepChildFirstVisitor()								/ loops WH over de components op de page		,
			{
				@Override
				public void component(final Component component, final IVisit<Void> visit)
				{
					if (component != rootComponent)
					{
						component.internalRenderHead(headerContainer);
/cb
	ChildFirstHeaderRenderStrategy.renderHeader(HtmlHeaderContainer, HtmlHeaderContainer$HeaderStreamState, Component) line: 57	
		// Then its child hierarchy
		renderChildHeaders(headerContainer, rootComponent);
/cb
	HtmlHeaderContainer.onComponentTagBody(MarkupStream, ComponentTag) line: 171	
			// Render the header sections of all components on the page
			AbstractHeaderRenderStrategy.get().renderHeader(this,
				new HeaderStreamState(markupStream, openTag), getPage());
/cb
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
		component.onComponentTagBody(markupStream, openTag);
component	HtmlHeaderContainer  (id=11019)	
openTag	ComponentTag  (id=11039)				<head>
/cb
	HtmlHeaderContainer(Component).internalRenderComponent() line: 2565	
				// Render the body. The default strategy will simply call the component's
				// onComponentTagBody() implementation.
				getMarkupSourcingStrategy().onComponentTagBody(this, markupStream, tag);
/cb
	HtmlHeaderContainer(MarkupContainer).onRender() line: 1698	
	HtmlHeaderContainer(Component).internalRender() line: 2380	
	HtmlHeaderContainer(Component).render() line: 2308	
	FrmPage(MarkupContainer).renderNext(MarkupStream) line: 1524	
	FrmPage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	FrmPage(Page).onRender() line: 879	
	FrmPage(WebPage).onRender() line: 141	
	FrmPage(Component).internalRender() line: 2380	
	FrmPage(Component).render() line: 2308	
	FrmPage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ debug
/s
AjaxLink$1(AjaxEventBehavior).renderHead(Component, IHeaderResponse) line: 90	
/s
AjaxLink$1(AbstractDefaultAjaxBehavior).renderHead(Component, IHeaderResponse) line: 94	
		CoreLibrariesContributor.contributeAjax(component.getApplication(), response);
/s
CoreLibrariesContributor.contributeAjax(Application, IHeaderResponse) line: 62	
		JavaScriptLibrarySettings jsLibrarySettings = application.getJavaScriptLibrarySettings();
jsLibrarySettings	JavaScriptLibrarySettings  (id=11056)	
	jQueryReference	JQueryResourceReference  (id=11058)	
	wicketAjaxDebugReference	WicketAjaxDebugJQueryResourceReference  (id=11059)	
	wicketAjaxReference	WicketAjaxJQueryResourceReference  (id=11060)	
	wicketEventReference	WicketEventJQueryResourceReference  (id=11061)	

		final DebugSettings debugSettings = application.getDebugSettings();
		if (debugSettings.isAjaxDebugModeEnabled())
		{
			response.render(JavaScriptHeaderItem.forReference(jsLibrarySettings.getWicketAjaxDebugReference()));
			response.render(JavaScriptHeaderItem.forScript("Wicket.Ajax.DebugWindow.enabled=true;",
				"wicket-ajax-debug-enable"));

/ worden hierdoor ook wicket-ajax en wicket-event rendered, of waren ze dat al?
/ TODO

/t
AjaxLink$1(AbstractDefaultAjaxBehavior).renderHead(Component, IHeaderResponse) line: 98	
		CoreLibrariesContributor.contributeAjax(component.getApplication(), response);
/d

response	ResourceAggregator  (id=11022)	
		table	HashMap$Entry<K,V>[16]  (id=11122)	
			[0]	LinkedHashMap$Entry<K,V>  (id=11125)	
JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-ajax-jquery.js; locale: null; style: null; variation: null, null)=[AjaxEventBehavior@2]:JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-ajax-jquery.js; locale: null; style: null; variation: null, null)
			[3]	LinkedHashMap$Entry<K,V>  (id=11126)	
JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-event-jquery.js; locale: null; style: null; variation: null, null)=[AjaxEventBehavior@1]:JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-event-jquery.js; locale: null; style: null; variation: null, null)
			[6]	LinkedHashMap$Entry<K,V>  (id=11127)	
JavaScriptHeaderItem(Wicket.Ajax.DebugWindow.enabled=true;)=[AjaxEventBehavior@4]:JavaScriptHeaderItem(Wicket.Ajax.DebugWindow.enabled=true;)
			[13]	LinkedHashMap$Entry<K,V>  (id=11128)	
JavaScriptReferenceHeaderItem(scope: org.apache.wicket.resource.JQueryResourceReference; name: jquery/jquery-1.12.0.js; locale: null; style: null; variation: null, null)=[AjaxEventBehavior@0]:JavaScriptReferenceHeaderItem(scope: org.apache.wicket.resource.JQueryResourceReference; name: jquery/jquery-1.12.0.js; locale: null; style: null; variation: null, null)


		RequestCycle requestCycle = component.getRequestCycle();
		Url baseUrl = requestCycle.getUrlRenderer().getBaseUrl();
frm?6
		CharSequence ajaxBaseUrl = Strings.escapeMarkup(baseUrl.toString());
		response.render(JavaScriptHeaderItem.forScript("Wicket.Ajax.baseUrl=\"" + ajaxBaseUrl
			+ "\";", "wicket-ajax-base-url"));

response	ResourceAggregator  (id=11022)	
		table	HashMap$Entry<K,V>[16]  (id=11122)	
			[0]	LinkedHashMap$Entry<K,V>  (id=11125)	
			[3]	LinkedHashMap$Entry<K,V>  (id=11126)	
			[6]	LinkedHashMap$Entry<K,V>  (id=11127)	
			[10]	LinkedHashMap$Entry<K,V>  (id=11204)	
JavaScriptHeaderItem(Wicket.Ajax.baseUrl="frm?6";)=[AjaxEventBehavior@5]:JavaScriptHeaderItem(Wicket.Ajax.baseUrl="frm?6";)
			[13]	LinkedHashMap$Entry<K,V>  (id=11128)	

/t
AjaxLink$1(AjaxEventBehavior).renderHead(Component, IHeaderResponse) line: 92	
		super.renderHead(component, response);
/d
			CharSequence js = getCallbackScript(component);
/s
AjaxLink$1(AbstractDefaultAjaxBehavior).getCallbackScript(Component) line: 465	
		AjaxRequestAttributes attributes = getAttributes();
/s
AjaxLink$1(AbstractDefaultAjaxBehavior).getAttributes() line: 146	

this	AjaxLink$1  (id=11020)	
attributes	AjaxRequestAttributes  (id=11452)	 	/ de default values	,
	ajaxCallListeners	null	
	async	true	
	channel	null	
	childSelector	null	
	dataType	"xml" (id=11437)	
	dynamicExtraParameters	null	
	eventNames	String[0]  (id=11467)	
	eventPropagation	AjaxRequestAttributes$EventPropagation  (id=11438)	
	extraParameters	null	
	formId	null	
	method	AjaxRequestAttributes$Method  (id=11402)	
GET
	multipart	false	
	preventDefault	false							<- TODO
	requestTimeout	null	
	serializeRecursively	false	
	submittingComponentName	null	
	throttlingSettings	null	
	wicketAjaxResponse	true	

		updateAjaxAttributes(attributes);
/s
AjaxLink$1.updateAjaxAttributes(AjaxRequestAttributes) line: 90	

/ intermezzo

/ we komen in de behavior	, def in AjaxLink	, 

	protected AjaxEventBehavior newAjaxEventBehavior(String event)
	{
		return new AjaxEventBehavior(event)
		{
			protected void onEvent(AjaxRequestTarget target)
			{
				onClick(target);
			}

			@Override
			protected void updateAjaxAttributes(AjaxRequestAttributes attributes)
			{
->				super.updateAjaxAttributes(attributes);
				AjaxLink.this.updateAjaxAttributes(attributes);

/ Einde intermezzo

				super.updateAjaxAttributes(attributes);
/s
AjaxLink$1(AjaxEventBehavior).updateAjaxAttributes(AjaxRequestAttributes) line: 105	
		String evt = getEvent();
"click"
		attributes.setEventNames(evt);

/t
AjaxLink$1(AbstractDefaultAjaxBehavior).renderAjaxAttributes(Component) line: 185	
		AjaxRequestAttributes attributes = getAttributes();
/d
		CharSequence ajaxAttributes = renderAjaxAttributes(component);
/s
/ CREATE URL
AjaxLink$1(AbstractDefaultAjaxBehavior).renderAjaxAttributes(Component, AjaxRequestAttributes) line: 197	
		JSONObject attributesJson = new JSONObject();

		try
		{
			attributesJson.put(AjaxAttributeName.URL.jsonName(), getCallbackUrl());
/s

/ intermezzo

public interface IBehaviorListener extends IRequestListener
{
	/** Behavior listener interface */
	public static final RequestListenerInterface INTERFACE = new RequestListenerInterface(
		IBehaviorListener.class);

	/**
	 * Called when a request to a behavior is received.
	 */
	void onRequest();
}

public abstract class AjaxLink<T> extends AbstractLink implements IAjaxLink, IGenericComponent<T>
	@Override
	protected void onInitialize()
	{
		super.onInitialize();
		add(newAjaxEventBehavior("click"));
	}

	protected AjaxEventBehavior newAjaxEventBehavior(String event)
	{
		return new AjaxEventBehavior(event)
		{
			private static final long serialVersionUID = 1L;

			@Override
			protected void onEvent(AjaxRequestTarget target)
			{
				onClick(target);
			}

/ vergl met	, 
public interface ILinkListener extends IRequestListener
{
	/** Listener interface */
	public static final RequestListenerInterface INTERFACE = new RequestListenerInterface(
		ILinkListener.class);

	/**
	 * Called when a link is clicked.
	 */
	void onLinkClicked();
}
/ Hoe komt deze in de onClick method	?
/ TODO
/ Wat is nu het verschil met ajax? 
/ TODO

/ Einde intermezzo

AjaxLink$1(AbstractAjaxBehavior).getCallbackUrl() line: 86	
		final RequestListenerInterface rli;

		rli = IBehaviorListener.INTERFACE;

		return getComponent().urlFor(this, rli, new PageParameters());
this	AjaxLink$1  (id=11020)	
/s
FrmPage$1(Component).urlFor(Behavior, RequestListenerInterface, PageParameters) line: 3347	
		int id = getBehaviorId(behaviour);
/s
FrmPage$1(Component).getBehaviorId(Behavior) line: 4547	
		return new Behaviors(this).getBehaviorId(behavior);		/  WH moet je new Behaviors(this) zien als alle behaviors op deze component	, het is een truc	, want hij loops over de component's data	, 
/s
Behaviors.getBehaviorId(Behavior) line: 259	
		for (int i = component.data_start(); i < component.data_length(); i++)
		{
			if (behavior == component.data_get(i))
/j
			{
				found = true;
				break;
/t
FrmPage$1(Component).urlFor(Behavior, RequestListenerInterface, PageParameters) line: 3348	
		int id = getBehaviorId(behaviour);
		IRequestHandler handler = createRequestHandler(listener, parameters, id);
id=0	, 
/ als gewone component, is id=null	,

		PageAndComponentProvider provider = new PageAndComponentProvider(page, this, parameters);
/ Heeft de component 	, 'n AjaxLink in dit geval	,

		if (page.isPageStateless()
			|| (getApplication().getPageSettings().getRecreateBookmarkablePagesAfterExpiry()
				&& page.isBookmarkable() && page.wasCreatedBookmarkable()))
		{
			return new BookmarkableListenerInterfaceRequestHandler(provider, listener, id);
/t
FrmPage$1(Component).urlFor(Behavior, RequestListenerInterface, PageParameters) line: 3349	
		IRequestHandler handler = createRequestHandler(listener, parameters, id);
/d
/ de controller voor de component AjaxLink	, 

handler	BookmarkableListenerInterfaceRequestHandler  (id=11289)	
	behaviorIndex	Integer  (id=10866)	
	listenerInterface	RequestListenerInterface  (id=11259)	
		includeRenderCount	true	
		listenerInterfaceClass	Class<T> (org.apache.wicket.behavior.IBehaviorListener) (id=8561)	
		method	Method  (id=11282)	
		name	"IBehaviorListener" (id=11291)	
	handler	BookmarkableListenerInterfaceRequestHandler  (id=11289)	
		pageComponentProvider	PageAndComponentProvider  (id=11285)	
			component	FrmPage$1  (id=11021)	
			pageId	Integer  (id=11286)	
			pageInstance	FrmPage  (id=11013)	

		return getRequestCycle().urlFor(handler);
/s
RequestCycle.urlFor(IRequestHandler) line: 534l
			Url mappedUrl = mapUrlFor(handler);
/s
RequestCycle.mapUrlFor(IRequestHandler) line: 434	
		final Url url = requestMapper.mapHandler(handler);
/s
SystemMapper(CompoundRequestMapper).mapHandler(IRequestHandler) line: 213	
		for (IRequestMapper mapper : mappers)
		{
			Url url = mapper.mapHandler(handler);
/s
MountedMapper.mapHandler(IRequestHandler) line: 159	
		Url url = super.mapHandler(requestHandler);
/s
MountedMapper(AbstractBookmarkableMapper).mapHandler(IRequestHandler) line: 396	
		else if (requestHandler instanceof BookmarkableListenerInterfaceRequestHandler)
		{
			Integer renderCount = null;
			if (handler.getListenerInterface().isIncludeRenderCount())
			{
				renderCount = handler.getRenderCount();
1
/s
		return pageComponentProvider.getRenderCount();
/t
			}

			PageInfo pageInfo = getPageInfo(handler);
			ComponentInfo componentInfo = new ComponentInfo(renderCount,
				requestListenerInterfaceToString(handler.getListenerInterface()), 
				handler.getComponentPath(), handler.getBehaviorIndex());
/ handler.getListenerInterface()=RequestListenerInterface, listenerInterfaceClass=interface org.apache.wicket.behavior.IBehaviorListener.class	, name="IBehaviorListener"	, en deze name wordt de componentInfo.listenerInterface	,
componentInfo	ComponentInfo  (id=11374)	
	behaviorId	Integer  (id=10866)			/ de component AjaxLink kan meerdere behaviors hebben WH, ook meerdere IBehaviorListeners WH	, TODO
0
	componentPath	"ajaxLink" (id=11375)					
	listenerInterface	"IBehaviorListener" (id=11291)	
	renderCount	Integer  (id=10864)	


			PageParameters parameters = getRecreateMountedPagesAfterExpiry() ? new PageParameters(
				handler.getPage().getPageParameters()).mergeWith(handler.getPageParameters())
				: handler.getPageParameters();
			UrlInfo urlInfo = new UrlInfo(new PageComponentInfo(pageInfo, componentInfo),
				pageClass, parameters);
			return buildUrl(urlInfo);

/ Antwoord	, 
frm?6-1.IBehaviorListener.0-ajaxLink
/ we zien pageId 6	, render count 1	, maar nu ook een extra index 0 = index behavior	, TODO

/t
AjaxLink$1(AbstractDefaultAjaxBehavior).renderAjaxAttributes(Component, AjaxRequestAttributes) line: 202	
			attributesJson.put(AjaxAttributeName.URL.jsonName(), getCallbackUrl());
/d
{"u":"./frm?6-1.IBehaviorListener.0-ajaxLink"}
/ Einde CREATE URL

			Method method = attributes.getMethod();
GET
			if (Method.POST == method)
/n
			{
				attributesJson.put(AjaxAttributeName.METHOD.jsonName(), method);
/niet	,

			if (component instanceof Page == false)
			{
				String componentId = component.getMarkupId();
				attributesJson.put(AjaxAttributeName.MARKUP_ID.jsonName(), componentId);
			}
{"u":"./frm?6-1.IBehaviorListener.0-ajaxLink","c":"ajaxLink15"}

			String[] eventNames = attributes.getEventNames();
[click]
			if (eventNames.length == 1)
			{
				attributesJson.put(AjaxAttributeName.EVENT_NAME.jsonName(), eventNames[0]);
			}
{"u":"./frm?6-1.IBehaviorListener.0-ajaxLink","c":"ajaxLink15","e":"click"}

/ frm?6-1.IBehaviorListener.0-ajaxLink komt helemaal uit de server	, want AjaxLink heeft een behavior, met index 0	, en name IBehaviorListener	, TODO Waarom een name en index	, 

/t
AjaxLink$1(AbstractDefaultAjaxBehavior).getCallbackScript(Component) line: 466	
		CharSequence ajaxAttributes = renderAjaxAttributes(component);
/d
{"u":"./frm?6-1.IBehaviorListener.0-ajaxLink","c":"ajaxLink15","e":"click"}
		return "Wicket.Ajax.ajax(" + ajaxAttributes + ");";
/t
AjaxLink$1(AjaxEventBehavior).renderHead(Component, IHeaderResponse) line: 96	
			CharSequence js = getCallbackScript(component);
/d
			response.render(OnDomReadyHeaderItem.forScript(js.toString()));
/ we geloven het	, 

/ 7	 

/ REGISTER LISTENER/CONTROLLER IN JS

/ ABSTRACT

Wicket.Event.add(window, "domready", function(event) { 
	Wicket.Ajax.ajax({"u":"./frm?6-1.IBehaviorListener.0-ajaxLink","c":"ajaxLink15","e":"click"});;

/ installs listener/controller on client side	,

				jQuery.each(attrs.e, function (idx, evt) {
					Wicket.Event.add(attrs.c, evt, function (jqEvent, data) {
						var call = new Wicket.Ajax.Call();								<- straks , als we de link click
/ Einde ABSTRACT

/s
/stack	,
jQuery.extend.Ajax.ajax (wicket-ajax-jqu…568000.js:1948)
(anonymous function) (frm?6:29)
	Wicket.Ajax.ajax({"u":"./frm?6-1.IBehaviorListener.0-ajaxLink","c":"ajaxLink15","e":"click"});;
/cb
jQuery.Callbacks.fire (jquery-1.12.0-v…568000.js:3232)
jQuery.Callbacks.self.fireWith (jquery-1.12.0-v…568000.js:3362)
jQuery.extend.ready (jquery-1.12.0-v…568000.js:3582)
completed (jquery-1.12.0-v…568000.js:3617)

/ debug	, 
/s
	jQuery.extend(true, Wicket, {
		 Ajax: {
			Call: Wicket.Ajax.Call,			/ TODO

			ajax: function(attrs) {

/ Intermezzo

Wicket: Object
	$: function (arg) {
	$$: function (element) {
	Ajax: Object
		ajax: function (attrs) {
			prototype: jQuery.extend.Ajax.ajax
				constructor: function (attrs) {
				__proto__: Object
					__defineGetter__: function __defineGetter__() { [native code] }
					__defineSetter__: function __defineSetter__() { [native code] }
					__lookupGetter__: function __lookupGetter__() { [native code] }
					__lookupSetter__: function __lookupSetter__() { [native code] }
					constructor: function Object() { [native code] }
					hasOwnProperty: function hasOwnProperty() { [native code] }
					isPrototypeOf: function isPrototypeOf() { [native code] }
					propertyIsEnumerable: function propertyIsEnumerable() { [native code] }
					toLocaleString: function toLocaleString() { [native code] }
					toString: function toString() { [native code] }
					valueOf: function valueOf() { [native code] }
					get __proto__: function __proto__() { [native code] }
					set __proto__: function __proto__()
		Call: function () {
		prototype: Object
			_asParamArray: function (parameters) {
			_calculateDynamicParameters: function (attrs) {
			_executeHandlers: function (handlers) {
			_getTarget: function (attrs) {
			_initializeDefaults: function (attrs) {
			ajax: function (attrs) {
			doAjax: function (attrs) {
			done: function (attrs) {
			failure: function (context, jqXHR, errorMessage, textStatus) {
			handleMultipartComplete: function (event) {
			initialize: function () {}
			loadedCallback: function (envelope, context) {
			process: function (data) {
			processAjaxResponse: function (data, textStatus, jqXHR, context) {
			processComponent: function (context, node) {
			processEvaluation: function (context, node) {
			processFocusedComponentMark: function (context) {
			processFocusedComponentReplaceCheck: function (steps, lastReplaceComponentStep) {
			processHeaderContribution: function (context, node) {
			processRedirect: function (context, node) {
			submitMultipartForm: function (context) {
			success: function (context) {
			__proto__: Object
				__defineGetter__: function __defineGetter__() { [native code] }
				__defineSetter__: function __defineSetter__() { [native code] }
				__lookupGetter__: function __lookupGetter__() { [native code] }
				__lookupSetter__: function __lookupSetter__() { [native code] }
				constructor: function Object() { [native code] }
				hasOwnProperty: function hasOwnProperty() { [native code] }
				isPrototypeOf: function isPrototypeOf() { [native code] }
				propertyIsEnumerable: function propertyIsEnumerable() { [native code] }
				toLocaleString: function toLocaleString() { [native code] }
				toString: function toString() { [native code] }
				valueOf: function valueOf() { [native code] }
				get __proto__: function __proto__() { [native code] }
				set __proto__: function __proto__() { [native code] }

			__proto__: function Empty() {}
			<function scope>
	
	/ Einde Intermezzo

				attrs.c = attrs.c || window;
				attrs.e = attrs.e || [ 'domready' ];

				if (!jQuery.isArray(attrs.e)) {
					attrs.e = [ attrs.e ];
				}

				jQuery.each(attrs.e, function (idx, evt) {
					Wicket.Event.add(attrs.c, evt, function (jqEvent, data) {
						var call = new Wicket.Ajax.Call();								<- straks , als we de link click
/s
jQuery.extend.Event.add (wicket-event-jq…3568000.js:223)
					jQuery(el).on(type, selector, data, fn);
/ fn = (jqEvent, data) {
                        var call = new Wicket.Ajax.Call();                              <- straks , als we de link click

/c
/ Einde REGISTER LISTENER/CONTROLLER OF ... IN JS

/ CLICK ...  IN JS

/s
/stack

(anonymous function) (wicket-ajax-jqu…568000.js:1957)
jQuery.event.dispatch (jquery-1.12.0-v…568000.js:5227)
jQuery.event.add.elemData.handle (jquery-1.12.0-v…568000.js:4879)

/ debug	, 
ajax: function(attrs) {
				jQuery.each(attrs.e, function (idx, evt) {
					Wicket.Event.add(attrs.c, evt, function (jqEvent, data) {	/ deze listener/controller is een closure, want 
																				/ hij sluit attrs in	,
						var call = new Wicket.Ajax.Call();
attrs: Object
	c: "ajaxLink15"
	e: Array[1]
	u: "./frm?6-1.IBehaviorListener.0-ajaxLink"

						else {
							call.ajax(attributes);
/s
/ we geloven het voor nu	
/ TODO

/ WICKET JS CREATES URL
/ de wicket JS maakt de url frm?6-1.IBehaviorListener.0-ajaxLink
/ TODO

/ Einde CLICK ...  IN JS

/ BEHAVIOR ON SERVER

/ we zien 	,
Request URL:
http://localhost:9090/wicket-examples-step-by-step/repeater/frm?6-1.IBehaviorListener.0-ajaxLink&_=1482848511771

/ stack
/s
	RequestCycle.processRequest() line: 219	
			IRequestHandler handler = resolveRequestHandler();	 / controller	,
/cb
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ hij haalt de handler uit het request, preciezer uit de url van het request	,

/ debug	, 
/s
RequestCycle.resolveRequestHandler() line: 189	
		return requestMapper.mapRequest(request);
...
/s
MountedMapper.parseRequest(Request) line: 131	
		Url url = request.getUrl();
frm?6-1.IBehaviorListener.0-ajaxLink&_=1482848511771

		// check if the URL starts with the proper segments
		else if (urlStartsWithMountedSegments(url))
		{
			// try to extract page and component information from URL
			PageComponentInfo info = getPageComponentInfo(url);
info	PageComponentInfo  (id=11539)	
	componentInfo	ComponentInfo  (id=11541)	
		behaviorId	Integer  (id=10866)	
0
		componentPath	"ajaxLink" (id=11544)	
		listenerInterface	"IBehaviorListener" (id=11545)		/ is name in RequestListenerInterface	, die hij hieronder gaat 															/ vinden, hier zoekt hij op in  RequestListenerInterface.forName
		renderCount	Integer  (id=10864)	
1
	pageInfo	PageInfo  (id=11542)	
		pageId	Integer  (id=11286)	
6
			return new UrlInfo(info, pageClass, pageParameters);
/t
MountedMapper(AbstractBookmarkableMapper).mapRequest(Request) line: 370	
		UrlInfo urlInfo = parseRequest(request);
/d
			else if (info.getComponentInfo() != null)
			{
				// with both page instance and component+listener this is a listener interface URL
				return processListener(info, pageClass, pageParameters);
/s
MountedMapper(AbstractBookmarkableMapper).processListener(PageComponentInfo, Class<IRequestablePage>, PageParameters) line: 308	
		if (componentInfo != null)
		{
			renderCount = componentInfo.getRenderCount();
			listenerInterface = requestListenerInterfaceFromString(componentInfo.getListenerInterface());
/s
		return RequestListenerInterface.forName(interfaceName);
/t
		if (listenerInterface != null)
		{
			PageAndComponentProvider provider = new PageAndComponentProvider(pageInfo.getPageId(),
				pageClass, pageParameters, renderCount, componentInfo.getComponentPath());

			provider.setPageSource(getContext());

			return new ListenerInterfaceRequestHandler(provider, listenerInterface, componentInfo.getBehaviorId());
/ componentInfo.getBehaviorId()=0
/ provider heeft de component AjaxLink , waarop de method moet worden invoke	,

////////////////////////
/ wicket kijkt naar de url, en die components die daar in staan	, wicket id="ajaxLink" hier	, krijgen een controller	, in dit geval een ListenerInterfaceRequestHandler-RequestListenerInterface-IBehaviorListener	,

/ In url = frm?6-1.IBehaviorListener.0-ajaxLink is IBehaviorListener de naam van de RequestListenerInterface	, die de IBehaviorInterface in zich heeft	, de name is lookup key in static list in  RequestListenerInterface 

/ EXPLANATION URL
/ de name IBehaviorListener wordt used als key om in RequestListenerInterface static list de RequestListenerInterface-IBehaviorListener te vinden	, met method IBehaviorListener.onRequest	, 
/ de index 0 wordt used als key in de component's data	, om de behavior te vinden	, daarin staat de uiteindelijke method onRequest die called wordt door  RequestListenerInterface.invoke
/ Dus IBehaviorListener.0 worden achter elkaar set	, 

/t
RequestCycle.processRequest() line: 220	
			IRequestHandler handler = resolveRequestHandler();
/d
				execute(handler);
/s
ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 157	
		invokeListener();
/s

/ DIFFERENCE NORMAL COMPONENT OR AJAX COMPONENT
ListenerInterfaceRequestHandler.invokeListener() line: 247	
		if (getBehaviorIndex() == null)										
/n
		{
			listenerInterface.invoke(getComponent());
		}
		else
		{
			try
			{
				Behavior behavior = getComponent().getBehaviorById(behaviorId);
/s
FrmPage$1(Component).getBehaviorById(int) line: 4540	
		return new Behaviors(this).getBehaviorById(id);
/t
ListenerInterfaceRequestHandler.invokeListener() line: 247	
				Behavior behavior = getComponent().getBehaviorById(behaviorId);
/d
behavior	AjaxLink$1  (id=11020)	
				listenerInterface.invoke(getComponent(), behavior);
/s
RequestListenerInterface.invoke(IRequestableComponent, Behavior) line: 231	
		internalInvoke(component, behavior);
component FrmPage$1
behavior	AjaxLink$1  (id=8686)	
/s
RequestListenerInterface.internalInvoke(Component, Object) line: 248	
/=
	private void internalInvoke(final Component component, final Object target)
component	FrmPage$1  (id=8683)	
target	AjaxLink$1  (id=8686)	

			method.invoke(target);
method=public abstract void org.apache.wicket.behavior.IBehaviorListener.onRequest()
target	AjaxLink$1  (id=8686)			/ de behavior	,
/s
AjaxLink$1(AbstractDefaultAjaxBehavior).onRequest() line: 587		 / de behavior wordt called	, want hij is de controller	,
												/ dus de behavior is de IBehaviorListener, zoals Form de IFormSubmitListener is	, 												/ en implements onFormSubmitted	,
		/ de behavior is dus de controller	, niet de AjaxLink	, zoals Form dat wel was	, 

/ we zijn in	, 
/ stack	,
/s
	AjaxLink$1(AbstractDefaultAjaxBehavior).onRequest() line: 587	
	RequestListenerInterface.internalInvoke(Component, Object) line: 258	
	RequestListenerInterface.invoke(IRequestableComponent, Behavior) line: 241	
	ListenerInterfaceRequestHandler.invokeListener() line: 248	
	ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 234	
/ we zien 
ListenerInterfaceRequestHandler calls RequestListenerInterface	, calls AjaxLink$1(AbstractDefaultAjaxBehavior)
/
/ we zien dat een behavior inderdaad een controller is	, want zonder ajax	, hierboven	,
/ bij submit form , geen ajax form	, 
ListenerInterfaceRequestHandler calls RequestListenerInterface	, calls IFormSubmitListener.onFormSubmitted	,  

		WebApplication app = (WebApplication)getComponent().getApplication();
		AjaxRequestTarget target = app.newAjaxRequestTarget(getComponent().getPage());
/s
RepeaterApplication(WebApplication).newAjaxRequestTarget(Page) line: 908	
		AjaxRequestTarget target = getAjaxRequestTargetProvider().get(page);
target	AjaxRequestHandler  (id=11635)	
	listeners	null	
	listenersFrozen	false	
	logData	null	
	page	FrmPage  (id=11013)	
	respondersFrozen	false	
	respondListeners	HashSet<E>  (id=11639)	
	update	AjaxRequestHandler$1  (id=11640)	

/ iedere page krijgt een aparte target, een AjaxRequestHandler	, met een update=XmlPartialPageUpdate	, 

/t
AjaxLink$1(AbstractDefaultAjaxBehavior).onRequest() line: 593	
		AjaxRequestTarget target = app.newAjaxRequestTarget(getComponent().getPage());
		respond(target);
/s
AjaxLink$1(AjaxEventBehavior).respond(AjaxRequestTarget) line: 155	
		onEvent(target);																<-
/s
AjaxLink$1.onEvent(AjaxRequestTarget) line: 84	
/=
	protected AjaxEventBehavior newAjaxEventBehavior(String event)
	{
		return new AjaxEventBehavior(event)
		{
			private static final long serialVersionUID = 1L;

			@Override
			protected void onEvent(AjaxRequestTarget target)
			{
				onClick(target);

/ EXPLAIN AJAX IN WICKET 		
/ Met ajax wordt er een AjaxRequestHandler, met z'n PartialPageUpdate,  tussen gezet	,  de onClick adds een iha andere component, een result label	, aan de target	, eig aan de   PartialPageUpdate	, in een list in de PartialPageUpdate	,

/ De behavior's onRequest method heeft de target create, de AjaxRequestHandler	, met de PartialPageUpdate	, deze calls de behavior's respond, die de behavior's onEvent(target) calls	,  Daarom moeten we in een Behavior / de onEvent method implement	, terwijl de IBehaviorListener's method onRequest is	, maar deze doet dus meer (maakt de target)	,

/ intermezzo

public abstract class AjaxLink<T> extends AbstractLink implements IAjaxLink, IGenericComponent<T>
	protected AjaxEventBehavior newAjaxEventBehavior(String event)
	{
		return new AjaxEventBehavior(event)
		{
			private static final long serialVersionUID = 1L;

			@Override
			protected void onEvent(AjaxRequestTarget target)
			{
				onClick(target);

	@Override
	public abstract void onClick(final AjaxRequestTarget target);

/ Dus de behavior's onEvent calls de component's onClick	, 

/s
FrmPage$1.onClick(AjaxRequestTarget) line: 34	
	public FrmPage() {
		
		AjaxLink<Void>ajaxLink=new AjaxLink<Void>("ajaxLink") {
			@Override
			public void onClick(AjaxRequestTarget target) {
				result_="From AjaxLink";	
				target.add(result);
/s
AjaxRequestHandler.add(Component...) line: 221	
		for (final Component component : components)
			add(component, component.getMarkupId());
component.getMarkupId()="result1c"
/ TODO
/s
AjaxRequestHandler.add(Component, String) line: 238	
		update.add(component, markupId);
/s
AjaxRequestHandler$1(PartialPageUpdate).add(Component, String) line: 369	
		component.setMarkupId(markupId);
/ TODO
		markupIdToComponent.put(markupId, component);
{result18=[Component id = result]}								/ list	,

/t
RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 97	
			respond(handler);
handler	ListenerInterfaceRequestHandler  (id=8681)	
/d
		else if (scheduled != null)
		{
			execute(scheduled);
scheduled	AjaxRequestHandler  (id=8721)	
	update	AjaxRequestHandler$1  (id=8749)	
		markupIdToComponent	LinkedHashMap<K,V>  (id=8750)	{result1c=[Component id = result]}
/s
RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
			respond(handler);
/s
RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
				handler.respond(RequestCycle.this);
/s
AjaxRequestHandler.respond(IRequestCycle) line: 324	
		update.writeTo(bodyResponse, encoding);
/s
AjaxRequestHandler$1(PartialPageUpdate).writeTo(Response, String) line: 153	
			writeHeader(response, encoding);

			onBeforeRespond(response);

			// process added components
			writeComponents(response, encoding);
/ TODO
/ We geloven het	,


/ Einde BEHAVIOR ON SERVER

/ Einde CREATE AJAX URL OF AJAX LINK 


/ GEWONE LINK 

public class FrmPage extends WebPage {
	public FrmPage() {
		
		Link<Void>link=new Link<Void>("link") {
			@Override
			public void onClick() {
				result_="From AjaxLink";	
			}
		};
		add(link);

$ less FrmPage.html
<a href="javascript:;" wicket:id="link">link</a>

/ In HTML zien we zoiets als de action attribute op een form	, 
<a href="./frm?0-1.ILinkListener-link" wicket:id="link">link</a>

/ Dit gebeurde  in 	,
public class Form<T> extends WebMarkupContainer
	protected void onComponentTag(final ComponentTag tag)
			String url = getActionUrl().toString();
				tag.put("action", url);
/ en we zien 	,
public abstract class Link<T> extends AbstractLink implements ILinkListener, IGenericComponent<T>
	@Override
	protected void onComponentTag(final ComponentTag tag)
	{
			// Set href to link to this link's linkClicked method
			CharSequence url = getURL();

			// append any anchor
			url = appendAnchor(tag, url);

			// if the tag is an anchor proper
			if (tag.getName().equalsIgnoreCase("a") || tag.getName().equalsIgnoreCase("link") ||
				tag.getName().equalsIgnoreCase("area"))
			{
				// generate the href attribute
				tag.put("href", url);


/ Dus wicket zegt welke controller er moet worden called,	


/ CLICK LINK

/ we zien	, 
Request URL:http://localhost:9090/wicket-examples-step-by-step/repeater/frm?0-1.ILinkListener-link

/s
RequestCycle.processRequest() line: 220	
			IRequestHandler handler = resolveRequestHandler();

handler	ListenerInterfaceRequestHandler  (id=9990)	
	behaviorId	null	
	listenerInterface	RequestListenerInterface  (id=10001)	
		includeRenderCount	true	
		listenerInterfaceClass	Class<T> (org.apache.wicket.markup.html.link.ILinkListener) (id=8996)	
		method	Method  (id=10526)	public abstract void org.apache.wicket.markup.html.link.ILinkListener.onLinkClicked()
		name	"ILinkListener" (id=10527)	
		renderPageAfterInvocation	true	
	logData	null	
	pageComponentProvider	PageAndComponentProvider  (id=10524)
		component	null							/ later, na PageAndComponentProvider.getComponent() = FrmPage$1	,
		componentPath	"link" (id=10530)	
		pageClass	Class<T> (org.apache.wicket.examples.repeater.FrmPage) (id=9108)	
		pageId	Integer  (id=10532)	
		pageInstance	null	
		pageInstanceIsFresh	false	
		pageParameters	null	
		pageSource	DefaultMapperContext  (id=10535)	
		renderCount	Integer  (id=10537)	


				execute(handler);
/s
ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 157		/ controller	,
		invokeListener();
/s
ListenerInterfaceRequestHandler.invokeListener() line: 239	
		if (getBehaviorIndex() == null)
		{
			listenerInterface.invoke(getComponent());
/s
RequestListenerInterface.invoke(IRequestableComponent) line: 216	
		internalInvoke(component, component);
/s
RequestListenerInterface.internalInvoke(Component, Object) line: 258	
			method.invoke(target);
/s
FrmPage$1(Link<T>).onLinkClicked() line: 190	 	/ Link zelf is de controller	, 
		// Invoke subclass handler
		onClick();
/s
FrmPage$1.onClick() line: 34 (out of synch)	
		Link<Void>link=new Link<Void>("link") {
			@Override
			public void onClick() {
->				result_="From AjaxLink";	


/ Dus we moeten Form.onFormSubmitted, Link.onLinkClicked, AbstractDefaultAjaxBehavior.onRequest vergl	, 
/ Form.onFormSubmitted calls via via submittingComponent.onSubmit en form.onSubmit	, 
/ Link.onLinkClicked calls Link.onClick	,
/ AbstractDefaultAjaxBehavior.onRequest call AjaxEventBehavior's subclass.onEvent	,
 



/ Einde CLICK LINK


/ Einde GEWONE LINK 

/ CREATE IBEHAVIORLISTENER AND URL ON AJAX FORM

email@engage.redhat.com
marketingbenelux@redhat.com

/ 7	 .

/ proj wicket-examples-step-by-step
/ prog FrmPage

$ less FrmPage.html

<form wicket:id="form">
	<input type="text" wicket:id="name">
	<input type="text" wicket:id="age">
	<input type="button" wicket:id="ajx">	 <- type button	,
</form>
<span wicket:id="result"></span>

$ less FrmPage.java

		ajx=new AjaxButton("ajx") {
			@Override
			protected void onSubmit(AjaxRequestTarget target, Form<?> form) {
				result_=name_+","+age_+","+ajx_;
				name_="";
				age_=0;
				target.add(result);
			}
		};
		form.add(ajx);
		mdl=new PropertyModel<String>(this, "ajx_");
		ajx.setDefaultModel(mdl);

		result=new Label("result");
		mdl=new PropertyModel<String>(this, "result_");
		result.setDefaultModel(mdl);
		result.setOutputMarkupId(true);
		add(result);

/ we zien in HTML	,

<head>
<script type="text/javascript">
/*<![CDATA[*/
var clientTimeVariable = new Date().getTime();
/*]]>*/
</script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.resource.JQueryResourceReference/jquery/jquery-1.12.0-ver-1455723568000.js"></script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-event-jquery-ver-1455723568000.js"></script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-ajax-jquery-ver-1455723568000.js"></script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-ajax-jquery-debug-ver-1455723568000.js"></script>
<script type="text/javascript" id="wicket-ajax-debug-enable">
/*<![CDATA[*/
</script>
<script type="text/javascript" id="wicket-ajax-base-url">
/*<![CDATA[*/
Wicket.Ajax.baseUrl="frm?0";
/*]]>*/
</script>
/*<![CDATA[*/
Wicket.Event.add(window, "domready", function(event) { 
	Wicket.Ajax.ajax({"u":"./frm?0-1.IBehaviorListener.0-ajaxLink","c":"ajaxLink1","e":"click"});;
	Wicket.Ajax.ajax({"u":"./frm?0-1.IBehaviorListener.0-form-ajx","m":"POST","c":"ajx3","f":"form2","sc":"ajx","e":"click","pd":true});;
	Wicket.Event.publish(Wicket.Event.Topic.AJAX_HANDLERS_BOUND);
;});
/*]]>*/
</script>
</head><body>

<form wicket:id="form" id="form1" method="post" action="./frm?0-1.IFormSubmitListener-form" _lpchecked="1">
	<div style="width:0px;height:0px;position:absolute;left:-100px;top:-100px;overflow:hidden"><input type="hidden" name="form1_hf_0" id="form1_hf_0"></div>
	<input type="text" wicket:id="name" value="" name="p::name">
	<input type="text" wicket:id="age" value="" name="age">
	<input type="button" wicket:id="ajx" name="ajx" id="ajx2">
	
</form>

/ Als we de button click	, zien we	,

Request URL:http://localhost:9090/wicket-examples-step-by-step/repeater/frm?0-1.IBehaviorListener.0-form-ajx
Request Method:POST

/ Let op: form-ajx dus als component	, dat is wat wicket's js creates	, de form's action wordt niet gezien	,

Form Dataview sourceview URL encoded
form1_hf_0:
p::name:eric
age:13
ajx:1

/ De action op het form wordt niet gezien	, 
/ de wicket js maakt de post ipv chrome	,

/ ROLE ACTION ATTR IN NORMAL FORM, BUILDS URL FROM IT. AJAX FORM BUILDS OWN URL
/ Dus de browser pakt de action op de form, en dat wordt part of de url 	, nl de controller waar het request naartoe moet worden mapped	, 
/ maar met ajax maakt wicket js de url 
/ Nogmaals: chrome uses action attr on normal form, to create the url

/ 7	. 

/ SCRIPTS IN <HEAD>

/ Wanneer wordt dit script add	in <head> ?
 
<script type="text/javascript" >
/*<![CDATA[*/
Wicket.Event.add(window, "domready", function(event) { 
	Wicket.Ajax.ajax({"u":"./frm?0-3.IBehaviorListener.0-form-ajx","m":"POST","c":"ajx2","f":"form1","sc":"ajx","e":"click","pd":true});;
	Wicket.Event.publish(Wicket.Event.Topic.AJAX_HANDLERS_BOUND);
;});
/*]]>*/
</script>

/s
RequestCycle.processRequest() line: 219	
			IRequestHandler handler = resolveRequestHandler();
...
/s
MountedMapper(AbstractBookmarkableMapper).mapRequest(Request) line: 358	
		UrlInfo urlInfo = parseRequest(request);
urlInfo	AbstractBookmarkableMapper$UrlInfo  (id=134)	
	pageClass	Class<T> (org.apache.wicket.examples.repeater.FrmPage) (id=136)	
	pageComponentInfo	null	
	pageParameters	null	
/ Omdat url=frm,  en geen frm?0-3.IFormSubmitListener... of zoiets	, is pageComponentInfo=null	,

			if (info == null)
			{
				// if there are is no page instance information
				// then this is a simple bookmarkable URL
				return processBookmarkable(pageClass, pageParameters);
/s
MountedMapper(AbstractBookmarkableMapper).processBookmarkable(Class<IRequestablePage>, PageParameters) line: 238	
		PageProvider provider = new PageProvider(pageClass, pageParameters);
		provider.setPageSource(getContext());
		return new RenderPageRequestHandler(provider);
/t
RequestCycle.processRequest() line: 220	
			IRequestHandler handler = resolveRequestHandler();
/d
				execute(handler);
/c

/ intermezzo

[eric@localhost wicket]$ find -name "*.java" | xargs grep 'Wicket.Ajax.ajax' 
./wicket-core/src/test/java/org/apache/wicket/ajax/AjaxCallbackFunctionTest.java:				+ "Wicket.Ajax.ajax(attrs);\n" //
./wicket-core/src/main/java/org/apache/wicket/ajax/AbstractDefaultAjaxBehavior.java:		return "Wicket.Ajax.ajax(" + ajaxAttributes + ");";
./wicket-extensions/src/test/java/org/apache/wicket/extensions/ajax/markup/html/autocomplete/AutoCompleteTest.java:		int eventHandler = lastResponseAsString.indexOf("Wicket.Ajax.ajax");


package org.apache.wicket.ajax;
public abstract class AjaxEventBehavior extends AbstractDefaultAjaxBehavior

	@Override
	public void renderHead(final Component component, final IHeaderResponse response)
	{
		super.renderHead(component, response);

		if (component.isEnabledInHierarchy())
		{
			CharSequence js = getCallbackScript(component);

			response.render(OnDomReadyHeaderItem.forScript(js.toString()));
		}
	}

}

/s

package org.apache.wicket.ajax;
public abstract class AbstractDefaultAjaxBehavior extends AbstractAjaxBehavior

	@Override
	public void renderHead(final Component component, final IHeaderResponse response)
	{
		super.renderHead(component, response);

		CoreLibrariesContributor.contributeAjax(component.getApplication(), response);

		RequestCycle requestCycle = component.getRequestCycle();
		Url baseUrl = requestCycle.getUrlRenderer().getBaseUrl();
		CharSequence ajaxBaseUrl = Strings.escapeMarkup(baseUrl.toString());
		response.render(JavaScriptHeaderItem.forScript("Wicket.Ajax.baseUrl=\"" + ajaxBaseUrl
			+ "\";", "wicket-ajax-base-url"));

		renderExtraHeaderContributors(component, response);
	}


	/**
	 * <pre>
	 * 				{
	 * 					u: 'editable-label?6-1.IBehaviorListener.0-text1-label',  // url
	 * 					m: 'POST',          // method name. Default: 'GET'
	 * 					c: 'label7',        // component id (String) or window for page
	 * 					e: 'click',         // event name
	 * 					sh: [],             // list of success handlers
	 * 					fh: [],             // list of failure handlers
	 * 					pre: [],            // list of preconditions. If empty set default : Wicket.$(settings{c}) !== null
	 * 					ep: {},             // extra parameters
	 * 					async: true|false,  // asynchronous XHR or not
	 * 					ch: 'someName|d',   // AjaxChannel
	 * 					i: 'indicatorId',   // indicator component id
	 * 					ad: true,           // allow default
	 * 				}
	 * </pre>
	 * 
	 * @param component
	 *            the component with that behavior
	 * @return the attributes as string in JSON format
	 */
	protected final CharSequence renderAjaxAttributes(final Component component)
		...
	}

	protected CharSequence getCallbackScript(final Component component)
	{
		CharSequence ajaxAttributes = renderAjaxAttributes(component);
		return "Wicket.Ajax.ajax(" + ajaxAttributes + ");";
	}
}
/ Einde intermezzo

/ EXPLAIN SCRIPTS IN <HEAD>

/c
/ stack	,
/s
	AjaxButton$1(AjaxEventBehavior).renderHead(Component, IHeaderResponse) line: 90	
	FrmPage$2(Component).internalRenderHead(HtmlHeaderContainer) line: 2727	
			// Then ask all behaviors
			for (Behavior behavior : getBehaviors())		/ this=[AjaxButton [Component id = ajx]], heeft behavior	, 
															/ een gewone button niet	, dus  dan geen script in <head>	, 
			{
				if (isBehaviorAccepted(behavior))
				{
					if (response.wasRendered(behavior) == false)
					{
						behavior.renderHead(this, response);
/cb
	ChildFirstHeaderRenderStrategy$1.component(Component, IVisit<Void>) line: 85	
		if (rootComponent instanceof MarkupContainer)
		{
			new DeepChildFirstVisitor()
			{
				@Override
				public void component(final Component component, final IVisit<Void> visit)
				{
					if (component != rootComponent)
					{
->						component.internalRenderHead(headerContainer);	/ Moet er voor component een script in de <head> komen?
/cb
	ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component, Visit<Void>) line: 96	
	ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component, Visit<Void>) line: 87	
	ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component, Visit<Void>) line: 87	
	ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component) line: 51	
	ChildFirstHeaderRenderStrategy.renderChildHeaders(HtmlHeaderContainer, Component) line: 78	
		if (rootComponent instanceof MarkupContainer)
		{
->			new DeepChildFirstVisitor()
			{
				@Override
				public void component(final Component component, final IVisit<Void> visit)
				{
					if (component != rootComponent)
					{
						component.internalRenderHead(headerContainer); 	/ Moet er voor component een script in de <head> komen?
/cb
	ChildFirstHeaderRenderStrategy.renderHeader(HtmlHeaderContainer, HtmlHeaderContainer$HeaderStreamState, Component) line: 57	
		// Then its child hierarchy
		renderChildHeaders(headerContainer, rootComponent);
/cb
	HtmlHeaderContainer.onComponentTagBody(MarkupStream, ComponentTag) line: 171	
			// Render the header sections of all components on the page
			AbstractHeaderRenderStrategy.get().renderHeader(this,
				new HeaderStreamState(markupStream, openTag), getPage());
/cb
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
		component.onComponentTagBody(markupStream, openTag);
/cb
	HtmlHeaderContainer(Component).internalRenderComponent() line: 2565	
				// Render the body. The default strategy will simply call the component's
				// onComponentTagBody() implementation.
				getMarkupSourcingStrategy().onComponentTagBody(this, markupStream, tag);
/cb
	HtmlHeaderContainer(MarkupContainer).onRender() line: 1698	
		internalRenderComponent();
/cb
	HtmlHeaderContainer(Component).internalRender() line: 2380	
	HtmlHeaderContainer(Component).render() line: 2308	
	FrmPage(MarkupContainer).renderNext(MarkupStream) line: 1524	
	FrmPage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	FrmPage(Page).onRender() line: 879													/ page.onRender is 2 fcts, zie als 1	,
		renderAll(markupStream, null);
/cb
	FrmPage(WebPage).onRender() line: 141	
		super.onRender();
/cb
	FrmPage(Component).internalRender() line: 2380	
	FrmPage(Component).render() line: 2308	
	FrmPage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ debug	,
/s
	 * Print to the web response what ever the component wants to contribute to the head section.
	 * Make sure that all attached behaviors are asked as well.
	 *
FrmPage$2(Component).internalRenderHead(HtmlHeaderContainer) line: 2727	

this	FrmPage$2  (id=256)	
[AjaxButton [Component id = ajx]]

			// Then ask all behaviors
			for (Behavior behavior : getBehaviors())
			{
				if (isBehaviorAccepted(behavior))
				{
					if (response.wasRendered(behavior) == false)
					{
						behavior.renderHead(this, response);

/ Intermezzo

package org.apache.wicket.ajax.markup.html.form;
public abstract class AjaxButton extends Button
	@Override
	protected void onInitialize()
	{
		super.onInitialize();
		add(newAjaxFormSubmitBehavior("click"));
	}
	protected AjaxFormSubmitBehavior newAjaxFormSubmitBehavior(String event)
	{
		return new AjaxFormSubmitBehavior(form, event)
		{
			@Override
			protected void onSubmit(AjaxRequestTarget target)
			{
				AjaxButton.this.onSubmit(target, AjaxButton.this.getForm());
			}
	@Override
	public final void onSubmit()											/ deze moeten we override in new AjaxButton	,
	{
		logger.warn("unexpected invocation of #onSubmit() on {}", this);
	}
/ Dus de controller=behavior calls deze	,

/ Einde Intermezzo

/s
AjaxButton$1(AjaxEventBehavior).renderHead(Component, IHeaderResponse) line: 90	
		super.renderHead(component, response);
/s
AjaxButton$1(AbstractDefaultAjaxBehavior).renderHead(Component, IHeaderResponse) line: 94	
		super.renderHead(component, response);
/ niets	,
		CoreLibrariesContributor.contributeAjax(component.getApplication(), response);
/s
CoreLibrariesContributor.contributeAjax(Application, IHeaderResponse) line: 60	
		JavaScriptLibrarySettings jsLibrarySettings = application.getJavaScriptLibrarySettings();

jsLibrarySettings	JavaScriptLibrarySettings  (id=9825)	
	jQueryReference	JQueryResourceReference  (id=9827)	
		data	ResourceReference$Key  (id=9865)	
			serialVersionUID	1	
			locale	null	
			name	"jquery/jquery-1.12.0.js" (id=9863)	
			scope	"org.apache.wicket.resource.JQueryResourceReference" (id=9871)	
			style	null	
			variation	null	
	wicketAjaxDebugReference	WicketAjaxDebugJQueryResourceReference  (id=9828)	
		data	ResourceReference$Key  (id=9920)	
			serialVersionUID	1	
			locale	null	
			name	"res/js/wicket-ajax-jquery-debug.js" (id=9923)	
			scope	"org.apache.wicket.ajax.AbstractDefaultAjaxBehavior" (id=9914)	
			style	null	
			variation	null	
	wicketAjaxReference	WicketAjaxJQueryResourceReference  (id=9829)	
		data	ResourceReference$Key  (id=9842)	
			serialVersionUID	1	
			locale	null	
			name	"res/js/wicket-ajax-jquery.js" (id=9913)	
			scope	"org.apache.wicket.ajax.AbstractDefaultAjaxBehavior" (id=9914)	
			style	null	
			variation	null	
	wicketEventReference	WicketEventJQueryResourceReference  (id=9830)	
		data	ResourceReference$Key  (id=9917)	
			serialVersionUID	1	
			locale	null	
			name	"res/js/wicket-event-jquery.js" (id=9926)	
			scope	"org.apache.wicket.ajax.AbstractDefaultAjaxBehavior" (id=9914)	
			style	null	
			variation	null	

		if (debugSettings.isAjaxDebugModeEnabled())
		{
			response.render(JavaScriptHeaderItem.forReference(jsLibrarySettings.getWicketAjaxDebugReference()));
			response.render(JavaScriptHeaderItem.forScript("Wicket.Ajax.DebugWindow.enabled=true;",
				"wicket-ajax-debug-enable"));
/t
AjaxButton$1(AbstractDefaultAjaxBehavior).renderHead(Component, IHeaderResponse) line: 98	
		CoreLibrariesContributor.contributeAjax(component.getApplication(), response);
/d
		Url baseUrl = requestCycle.getUrlRenderer().getBaseUrl();
frm?1
		CharSequence ajaxBaseUrl = Strings.escapeMarkup(baseUrl.toString());
frm?1
		response.render(JavaScriptHeaderItem.forScript("Wicket.Ajax.baseUrl=\"" + ajaxBaseUrl + "\";", "wicket-ajax-base-url"));
/s
JavaScriptHeaderItem.forScript(CharSequence, String) line: 243	
		return forScript(javascript, id, null);
javascript	"Wicket.Ajax.baseUrl="frm?1";" (id=10025)	
id	"wicket-ajax-base-url" (id=10026)	
/s
JavaScriptHeaderItem.forScript(CharSequence, String, String) line: 260	
		return new JavaScriptContentHeaderItem(javascript, id, condition);
/ TODO Afmaken	,
/t
AjaxButton$1(AbstractDefaultAjaxBehavior).renderHead(Component, IHeaderResponse) line: 101	
		response.render(JavaScriptHeaderItem.forScript("Wicket.Ajax.baseUrl=\"" + ajaxBaseUrl
			+ "\";", "wicket-ajax-base-url"));
/d
		renderExtraHeaderContributors(component, response);
/ TODO Afmaken	,
/t
AjaxButton$1(AjaxEventBehavior).renderHead(Component, IHeaderResponse) line: 92	
		super.renderHead(component, response);
/d
		if (component.isEnabledInHierarchy())
		{
			CharSequence js = getCallbackScript(component);
/s
AjaxButton$1(AbstractDefaultAjaxBehavior).getCallbackScript(Component) line: 465		/ this is nog steeds de behavior	,
		CharSequence ajaxAttributes = renderAjaxAttributes(component);
/ TODO Afmaken	,
{"u":"./frm?1-1.IBehaviorListener.0-form-ajx","m":"POST","c":"ajx5","f":"form4","sc":"ajx","e":"click","pd":true}

		return "Wicket.Ajax.ajax(" + ajaxAttributes + ");";



/ 7	. 

/ RENDER PAGE WITH SCRIPTS IN <HEAD>


/ als we de page request	, we vallen in	, 
<script type="text/javascript" >
/*<![CDATA[*/
Wicket.Event.add(window, "domready", function(event) { 
	Wicket.Ajax.ajax({"u":"./frm?0-3.IBehaviorListener.0-form-ajx","m":"POST","c":"ajx2","f":"form1","sc":"ajx","e":"click","pd":true});;
	Wicket.Event.publish(Wicket.Event.Topic.AJAX_HANDLERS_BOUND);
;});
/*]]>*/
</script>

/ stack	,
jQuery.extend.Ajax.ajax (wicket-ajax-jqu…568000.js:1948)
(anonymous function) (frm?0:29)
	Wicket.Ajax.ajax({"u":"./frm?0-3.IBehaviorListener.0-form-ajx","m":"POST","c":"ajx2","f":"form1","sc":"ajx","e":"click","pd":true});;
/cb
jQuery.Callbacks.fire (jquery-1.12.0-v…568000.js:3232)
					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
/cb
jQuery.Callbacks.self.fireWith (jquery-1.12.0-v…568000.js:3362)
						fire();
/cb
jQuery.extend.ready (jquery-1.12.0-v…568000.js:3582)
		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
/cb
completed (jquery-1.12.0-v…568000.js:3617)
		jQuery.ready();

/ debug	,
/s

/ intermezzo

	Wicket.Class = {
		create: function () {
			return function () {
				this.initialize.apply(this, arguments);
			};
		}
	};
	Wicket.Channel = Wicket.Class.create();

	Wicket.Channel.prototype = {
		initialize: function (name) {
			...

	Wicket.ChannelManager = Wicket.Class.create();

	Wicket.ChannelManager.prototype = {
		initialize: function () {
			this.channels = {};
		},

		// Schedules the callback to channel with given name.
		schedule: function (channel, callback) {
			var parsed = new Wicket.Channel(channel); 					<-


/ Einde intermezzo

/ intermezzo

	Wicket.Ajax.Call = Wicket.Class.create();

	Wicket.Ajax.Call.prototype = {
		_initializeDefaults: function (attrs) {
		ajax: function (attrs) {
		doAjax: function (attrs) {
		processAjaxResponse: function (data, textStatus, jqXHR, context) {
		...

	jQuery.extend(true, Wicket, {
		 Ajax: {
			Call: Wicket.Ajax.Call,
/ TODO
			ajax: function(attrs) {
->				...
				jQuery.each(attrs.e, function (idx, evt) {
					Wicket.Event.add(attrs.c, evt, function (jqEvent, data) {
						var call = new Wicket.Ajax.Call();										<-


/ Als we in -> zijn	, dan	,

this: Object
	Call: function () {
	DebugWindow: Object
	_handleEventCancelation: function (attrs) {
	ajax: function (attrs) {
	baseUrl: "frm?0"
	get: function (attrs) {
	post: function (attrs) {
	process: function (data) {
	redirect: function (url) {
	__proto__: Object
		__defineGetter__: function __defineGetter__() { [native code] }
		__defineSetter__: function __defineSetter__() { [native code] }
		__lookupGetter__: function __lookupGetter__() { [native code] }
		__lookupSetter__: function __lookupSetter__() { [native code] }
		constructor: function Object() { [native code] }
		hasOwnProperty: function hasOwnProperty() { [native code] }
		isPrototypeOf: function isPrototypeOf() { [native code] }
		propertyIsEnumerable: function propertyIsEnumerable() { [native code] }
		toLocaleString: function toLocaleString() { [native code] }
		toString: function toString() { [native code] }
		valueOf: function valueOf() { [native code] }
		get __proto__: function __proto__() { [native code] }
		set __proto__: function __proto__() { [native code] }


/ in meer detail	, 
this: Object
	Call: function () {


this: Object
	Call: function () {
		arguments: (...)
		get arguments: function ThrowTypeError() { [native code] }
		set arguments: function ThrowTypeError() { [native code] }
		caller: (...)
		get caller: function ThrowTypeError() { [native code] }
		set caller: function ThrowTypeError() { [native code] }
		length: 0
		name: ""
		prototype: Object
			_asParamArray: function (parameters) {
			_calculateDynamicParameters: function (attrs) {
			_executeHandlers: function (handlers) {
			_getTarget: function (attrs) {
			_initializeDefaults: function (attrs) {
			ajax: function (attrs) {
			doAjax: function (attrs) {
			done: function (attrs) {
			failure: function (context, jqXHR, errorMessage, textStatus) {
			handleMultipartComplete: function (event) {
			initialize: function () {}
			loadedCallback: function (envelope, context) {
			process: function (data) {
			processAjaxResponse: function (data, textStatus, jqXHR, context) {
			processComponent: function (context, node) {
			processEvaluation: function (context, node) {
			processFocusedComponentMark: function (context) {
			processFocusedComponentReplaceCheck: function (steps, lastReplaceComponentStep) {
			processHeaderContribution: function (context, node) {
			processRedirect: function (context, node) {
			submitMultipartForm: function (context) {
			success: function (context) {
			__proto__: Object
				__defineGetter__: function __defineGetter__() { [native code] }
				__defineSetter__: function __defineSetter__() { [native code] }
				__lookupGetter__: function __lookupGetter__() { [native code] }
				__lookupSetter__: function __lookupSetter__() { [native code] }
				constructor: function Object() { [native code] }
				hasOwnProperty: function hasOwnProperty() { [native code] }
				isPrototypeOf: function isPrototypeOf() { [native code] }
				propertyIsEnumerable: function propertyIsEnumerable() { [native code] }
				toLocaleString: function toLocaleString() { [native code] }
				toString: function toString() { [native code] }
				valueOf: function valueOf() { [native code] }
				get __proto__: function __proto__() { [native code] }
				set __proto__: function __proto__() { [native code] }
		__proto__: function Empty() {}
		<function scope>

/ Einde intermezzo

/s
(anonymous function) (frm?0:29)
Wicket.Ajax.ajax({"u":"./frm?0-3.IBehaviorListener.0-form-ajx","m":"POST","c":"ajx2","f":"form1","sc":"ajx","e":"click","pd":true});;
/s
jQuery.extend.Ajax.ajax (wicket-ajax-jqu…568000.js:1951)

attrs: Object
	c: "ajx2"	/ markup id of behavior attached component (c)
	e: "click"	/ event name
	f: "form1"	/ form id
	m: "POST"	/ method
	pd: true	/ is prevent default			/ deze moeten we hebben	, laat de browser niet op de event (click) react	,
	sc: "ajx"	/  submitting component name
	u: "./frm?0-3.IBehaviorListener.0-form-ajx"

/ Lees	,
./wicket-core/src/main/java/org/apache/wicket/ajax/attributes/AjaxAttributeName.java:

				jQuery.each(attrs.e, function (idx, evt) {
					Wicket.Event.add(attrs.c, evt, function (jqEvent, data) {	/ reg. listener/controller van button click	,
						var call = new Wicket.Ajax.Call();
						...
/s
			ajax: function(attrs) {
				jQuery.extend.Event.add (wicket-event-jq…3568000.js:223)
						el = document.getElementById(element);
DOM elem input#ajx2
					jQuery(el).on(type, selector, data, fn);
fn=function (jqEvent, data) {
/t
(anonymous function) (frm?0:30)
	Wicket.Ajax.ajax({"u":"./frm?0-3.IBehaviorListener.0-form-ajx","m":"POST","c":"ajx2","f":"form1","sc":"ajx","e":"click","pd":true});;
/d
/ Dus Wicket.Ajax.ajax registers listener button click, = controller, 
	function (jqEvent, data) {   
    	var call = new Wicket.Ajax.Call();
		var attributes = jQuery.extend({}, attrs);
/ maar we zien dat deze controller een closure is	, want hij sluit attrs in	,

/ 7	. 

/ POST REQUEST IN JS TO SERVER 

/ proj wicket-examples-step-by-step
/ prog	FrmPage

/ we fill in 2 textfield	, en click ajaxbutton	,

<form wicket:id="form" id="form4" method="post" action="./frm?1-1.IFormSubmitListener-form" _lpchecked="1">
	<div style="width:0px;height:0px;position:absolute;left:-100px;top:-100px;overflow:hidden">
		<input type="hidden" name="form4_hf_0" id="form4_hf_0"></div>
	<input type="text" wicket:id="name" value="" name="p::name">
	<input type="text" wicket:id="age" value="" name="age">
	<input type="button" wicket:id="ajx" name="ajx" id="ajx5">
</form>

/ de action van de form wordt niet bekeken	, de browser doet dat wel	, maar nu is prevent default=true	,

/ debug	,
/s
jQuery.event.add.elemData.handle (jquery-1.12.0-v…568000.js:4879)
					jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
/s
jQuery.event.dispatch (jquery-1.12.0-v…568000.js:5227)
						handleObj.handler ).apply( matched.elem, args );
/s
(anonymous function) (wicket-ajax-jqu…568000.js:1957)
	jQuery.extend(true, Wicket, {
		 Ajax: {
			ajax: function(attrs) {
				jQuery.each(attrs.e, function (idx, evt) {
					Wicket.Event.add(attrs.c, evt, function (jqEvent, data) {
						var call = new Wicket.Ajax.Call();
call: Wicket.Class.create
	__proto__: Object
		_asParamArray: function (parameters) {
		_calculateDynamicParameters: function (attrs) {
		_executeHandlers: function (handlers) {
		_getTarget: function (attrs) {
		_initializeDefaults: function (attrs) {
		ajax: function (attrs) {
		doAjax: function (attrs) {
		done: function (attrs) {
		failure: function (context, jqXHR, errorMessage, textStatus) {
		handleMultipartComplete: function (event) {
		initialize: function () {}
		loadedCallback: function (envelope, context) {
		process: function (data) {
		processAjaxResponse: function (data, textStatus, jqXHR, context) {
		processComponent: function (context, node) {
		processEvaluation: function (context, node) {
		processFocusedComponentMark: function (context) {
		processFocusedComponentReplaceCheck: function (steps, lastReplaceComponentStep) {
		processHeaderContribution: function (context, node) {
		processRedirect: function (context, node) {
		submitMultipartForm: function (context) {
		success: function (context) {
		__proto__: Object
			__defineGetter__: function __defineGetter__() { [native code] }
			__defineSetter__: function __defineSetter__() { [native code] }
			__lookupGetter__: function __lookupGetter__() { [native code] }
			__lookupSetter__: function __lookupSetter__() { [native code] }
			constructor: function Object() { [native code] }
			hasOwnProperty: function hasOwnProperty() { [native code] }
			isPrototypeOf: function isPrototypeOf() { [native code] }
			propertyIsEnumerable: function propertyIsEnumerable() { [native code] }
			toLocaleString: function toLocaleString() { [native code] }
			toString: function toString() { [native code] }
			valueOf: function valueOf() { [native code] }
			get __proto__: function __proto__() { [native code] }
			set __proto__: function __proto__() { [native code] }

						var attributes = jQuery.extend({}, attrs);
attrs: Object															/ closed in	,
	c: "ajx5"
	e: Array[1]
	f: "form4"
	m: "POST"
	pd: true
	sc: "ajx"
	u: "./frm?1-1.IBehaviorListener.0-form-ajx"

						else {
							call.ajax(attributes);
/s
Wicket.Ajax.Call.ajax (wicket-ajax-jqu…3568000.js:560)
			this._initializeDefaults(attrs);
/s
Wicket.Ajax.Call._initializeDefaults (wicket-ajax-jqu…3568000.js:423)
			// (ajax channel)
			if (typeof(attrs.ch) !== 'string') {
				attrs.ch = '0|s';
			}

			// (wicketAjaxResponse) be default the Ajax result should be processed for <ajax-response>
			if (typeof(attrs.wr) !== 'boolean') {
				attrs.wr = true;
			}

			// (dataType) by default we expect XML responses from the Ajax behaviors
			if (typeof(attrs.dt) !== 'string') {
				attrs.dt = 'xml';
			}
			if (typeof(attrs.m) !== 'string') {
/n
			if (attrs.async !== false) {
				attrs.async = true;
			}

			if (!jQuery.isNumeric(attrs.rt)) {
				attrs.rt = 0;
			}

			if (attrs.pd !== true) {
/n
			if (!attrs.sp) {
				attrs.sp = "bubble";
			}

			if (!attrs.sr) {
				attrs.sr = false;
			}
/t
Wicket.Ajax.Call.ajax (wicket-ajax-jqu…3568000.js:562)
			this._initializeDefaults(attrs);
/d
			var res = Wicket.channelManager.schedule(attrs.ch, Wicket.bind(function () {
				this.doAjax(attrs);
/c
Wicket.Ajax.Call.doAjax (wicket-ajax-jqu…3568000.js:652)
			if (attrs.f) {
				// serialize the form with id == attrs.f
				var form = Wicket.$(attrs.f);
				data = data.concat(Wicket.Form.serializeForm(form));
data: Array[3]
	0: Object
		name: "form4_hf_0"
		value: ""
		__proto__: Object
	1: Object
		name: "p::name"
		value: "eric"
		__proto__: Object
	2: Object
		name: "age"
		value: "13"
		__proto__: Object
	length: 3
	__proto__: Array[0]														/ Array prototype	,
		concat: function concat() { [native code] }
		...

				// set the submitting component input name
				if (attrs.sc) {
ajx
					var scName = attrs.sc;
					data = data.concat({name: scName, value: 1});
	3: Object
		name: "ajx"
		value: 1

			// convert to URL encoded string
			data = jQuery.param(data);
data: "form4_hf_0=&p%3A%3Aname=eric&age=13&ajx=1"

///////////////////////////////
/ Dus wat we hebben ingevuld wordt verzameld, net als de browser dat doet in de gewoon form	, 

			// execute the request
			var jqXHR = jQuery.ajax({
				url: attrs.u, 			"./frm?1-1.IBehaviorListener.0-form-ajx"
				type: attrs.m,			"POST"
				context: self,
				data: data,				"form4_hf_0=&p%3A%3Aname=eric&age=13&ajx=1"
				dataType: attrs.dt,		"xml"
				async: attrs.async,
				timeout: attrs.rt,
				cache: false,
				headers: headers,
				success: function(data, textStatus, jqXHR) {
				complete: function (jqXHR, textStatus) {
/ TODO Afmaken

/ intermezzo

public abstract class AjaxButton extends Button
	@Override
	protected void onInitialize()
	{
		super.onInitialize();

		add(newAjaxFormSubmitBehavior("click"));
	}

	protected AjaxFormSubmitBehavior newAjaxFormSubmitBehavior(String event)
	{
		return new AjaxFormSubmitBehavior(form, event)
		{
			private static final long serialVersionUID = 1L;

			@Override
			protected void onSubmit(AjaxRequestTarget target)
			{
				AjaxButton.this.onSubmit(target, AjaxButton.this.getForm());
			}

/ en de url	"./frm?1-1.IBehaviorListener.0-form-ajx"


/ einde intermezzo



/ SERVER AJAX CALL


/ we zien	, 
Request URL:http://localhost:9090/wicket-examples-step-by-step/repeater/frm?0-1.IBehaviorListener.0-form-ajx
form2_hf_0:
p::name:eric
age:13
ajx:1


/s
RequestCycle.processRequest() line: 219	
			IRequestHandler handler = resolveRequestHandler();
/s
RequestCycle.resolveRequestHandler() line: 189	
		return requestMapper.mapRequest(request);
/s
SystemMapper(CompoundRequestMapper).mapRequest(Request) line: 150	
		for (MapperWithScore mapperWithScore : list)
		{
			IRequestMapper mapper = mapperWithScore.getMapper();
MountedMapper [mountSegments=frm]
			IRequestHandler handler = mapper.mapRequest(request);			/ controller vinden	,
/s
MountedMapper(AbstractBookmarkableMapper).mapRequest(Request) line: 346	
		UrlInfo urlInfo = parseRequest(request);
...
/s
ComponentInfo.parse(String) line: 238	
/=
	public static ComponentInfo parse(final String string)
string	"1.IBehaviorListener.0-form-ajx" (id=13694)	

		int i = string.indexOf(SEPARATOR);
21
			String listenerInterface = string.substring(0, i);
1.IBehaviorListener.0
			String componentPath = decodeComponentPath(string.substring(i + 1));
/s
ComponentInfo.decodeComponentPath(CharSequence) line: 84	
/=
	private static String decodeComponentPath(CharSequence path)
path	"form-ajx" (id=13696)	

			for (int i = 0; i < length; i++)
			{
				char c = path.charAt(i);
				switch (c)
				{
					case SEPARATOR :
SEPARATOR='-"
						result.append(COMPONENT_SEPARATOR);
COMPONENT_SEPARATOR=':"
						break;
					default :
						result.append(c);

/t
urlInfo	AbstractBookmarkableMapper$UrlInfo  (id=10063)	
	pageClass	Class<T> (org.apache.wicket.examples.repeater.FrmPage) (id=136)	
	pageComponentInfo	PageComponentInfo  (id=10065)	
		componentInfo	ComponentInfo  (id=10067)	
			behaviorId	Integer  (id=10072)	0
			componentPath	"form:ajx" (id=10074)							<-
			listenerInterface	"IBehaviorListener" (id=10076)	
			renderCount	Integer  (id=10077)	1
		pageInfo	PageInfo  (id=10068)	
			pageId	Integer  (id=10077)	0
	pageParameters	null	

			else if (info.getComponentInfo() != null)
			{
				// with both page instance and component+listener this is a listener interface URL
				return processListener(info, pageClass, pageParameters);
/s
MountedMapper(AbstractBookmarkableMapper).processListener(PageComponentInfo, Class<IRequestablePage>, PageParameters) line: 300	
		if (componentInfo != null)
		{
			renderCount = componentInfo.getRenderCount();
			listenerInterface = requestListenerInterfaceFromString(componentInfo.getListenerInterface());

listenerInterface	RequestListenerInterface  (id=10147)	
	listenerInterfaceClass	Class<T> (org.apache.wicket.behavior.IBehaviorListener) (id=262)	
	method	Method  (id=10150)	public abstract void org.apache.wicket.behavior.IBehaviorListener.onRequest()
	name	"IBehaviorListener" (id=10152)	

		if (listenerInterface != null)
		{
			PageAndComponentProvider provider = new PageAndComponentProvider(pageInfo.getPageId(),
				pageClass, pageParameters, renderCount, componentInfo.getComponentPath());
/ componentInfo.getComponentPath()="form:ajx"	, de button	,	<input type="button" wicket:id="ajx">	, dus in provider zit de component	, 

			provider.setPageSource(getContext());

provider	PageAndComponentProvider  (id=13715)	
	component	null								/ later na PageAndComponentProvider.getComponent() niet meer	,
	componentPath	"form:ajx" (id=13700)	
	pageClass	Class<T> (org.apache.wicket.examples.repeater.FrmPage) (id=11143)	
	pageId	Integer  (id=10532)	0 
	pageInstance	null	
	pageInstanceIsFresh	false	
	pageParameters	null	
	pageSource	DefaultMapperContext  (id=13721)		 / TODO
	renderCount	Integer  (id=10537)	

			return new ListenerInterfaceRequestHandler(provider, listenerInterface, componentInfo.getBehaviorId());

/t
RequestCycle.processRequest() line: 220	
			IRequestHandler handler = resolveRequestHandler();	 / we hebben de controller	,

/ op dit moment is er nog geen behavior, TODO 

				execute(handler);
...
/s
	ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 234	
		invokeListener();
/s
ListenerInterfaceRequestHandler.invokeListener() line: 247	
		if (getBehaviorIndex() == null)
/n
		{
			listenerInterface.invoke(getComponent());
/niet
		}
		else
/j
		{
			try
			{
				Behavior behavior = getComponent().getBehaviorById(behaviorId);
/s
ListenerInterfaceRequestHandler.getComponent() line: 90	
		return pageComponentProvider.getComponent();

this	ListenerInterfaceRequestHandler  (id=13751)	
	pageComponentProvider	PageAndComponentProvider  (id=13715)	
		component	FrmPage$4  (id=13760)	
		componentPath	"form:ajx" (id=13700)	
/t
ListenerInterfaceRequestHandler.invokeListener() line: 247	
				Behavior behavior = getComponent().getBehaviorById(behaviorId); 
/s
FrmPage$4(Component).getBehaviorById(int) line: 4540	
		return new Behaviors(this).getBehaviorById(id);
this [AjaxButton [Component id = ajx]]

/ intermezzo

public abstract class AjaxButton extends Button
	@Override
	protected void onInitialize()
	{
		super.onInitialize();

		add(newAjaxFormSubmitBehavior("click"));
	}

	protected AjaxFormSubmitBehavior newAjaxFormSubmitBehavior(String event)
	{
		return new AjaxFormSubmitBehavior(form, event)
		{
			@Override
			protected void onSubmit(AjaxRequestTarget target)
			{
				AjaxButton.this.onSubmit(target, AjaxButton.this.getForm());
			}

	public AjaxFormSubmitBehavior(Form<?> form, String event)
	{
		super(event);
		__form = form;

		if (form != null)
		{
			form.setOutputMarkupId(true);		 / het form krijgt dus een id	,
		}
	}

/ Einde intermezzo


/d
behavior	AjaxButton$1  (id=13773)		/ 'n AjaxFormSubmitBehavior	,
	__form	Form<T>  (id=13776)	
	component	FrmPage$4  (id=13760)	
	defaultProcessing	true	
	event	"click" (id=8705)	
	this$0	FrmPage$4  (id=13760)	


/ intermezzo

public abstract class AjaxButton extends Button
	protected void onInitialize()
	{
		super.onInitialize();

		add(newAjaxFormSubmitBehavior("click"));
	}

	protected AjaxFormSubmitBehavior newAjaxFormSubmitBehavior(String event)
	{
		return new AjaxFormSubmitBehavior(form, event)
		{
			private static final long serialVersionUID = 1L;

			@Override
			protected void onSubmit(AjaxRequestTarget target)
			{
				AjaxButton.this.onSubmit(target, AjaxButton.this.getForm());
			}

/ Einde intermezzo

				listenerInterface.invoke(getComponent(), behavior);
/s
RequestListenerInterface.invoke(IRequestableComponent, Behavior) line: 241	
/=
	public final void invoke(final IRequestableComponent rcomponent, final Behavior behavior)
rcomponent	FrmPage$4  (id=13760)	 	/ speelt geen rol	, TODO
behavior	AjaxButton$1  (id=13773)	
		internalInvoke(component, behavior);
/s
RequestListenerInterface.internalInvoke(Component, Object) line: 258	

			method.invoke(target);	/ invoke method op de controller, dat is de behavior	,	
target	AjaxButton$1  (id=13773)		/ de behavior	,

this	RequestListenerInterface  (id=10147)	
	method	Method  (id=10150)	public abstract void org.apache.wicket.behavior.IBehaviorListener.onRequest()
target	AjaxButton$1  (id=254)		 / controller	,
/s
AjaxButton$1(AbstractDefaultAjaxBehavior).onRequest() line: 587					/ Dit is de controller fct	, onRequest	,

/ intermezzo

/ er zijn 5 RequestListenerInterfaces	. Elk heeft een IRequestListener, bijv IBehaviorListener	. Maar een RequestListenerInterface kan de IBehaviorListener method invoke,	een ListenerInterfaceRequestHandler heeft de target waarop invoke	,

/ Zijn er ook 5 ListenerInterfaceRequestHandlers	?
/ TODO

package org.apache.wicket.ajax;
public abstract class AbstractDefaultAjaxBehavior extends AbstractAjaxBehavior
/e
public abstract class AbstractAjaxBehavior extends Behavior implements IBehaviorListener
/i
public interface IBehaviorListener extends IRequestListener
{
	/** Behavior listener interface */
	public static final RequestListenerInterface INTERFACE = new RequestListenerInterface(
		IBehaviorListener.class);

	/**
	 * Called when a request to a behavior is received.
	 */
	void onRequest();
}


/ einde intermezzo

		WebApplication app = (WebApplication)getComponent().getApplication();
		AjaxRequestTarget target = app.newAjaxRequestTarget(getComponent().getPage());
/s
RepeaterApplication(WebApplication).newAjaxRequestTarget(Page) line: 907	
		AjaxRequestTarget target = getAjaxRequestTargetProvider().get(page);
/s
WebApplication$DefaultAjaxRequestTargetProvider.get(Page) line: 1073	
/=
package org.apache.wicket.protocol.http;
public abstract class WebApplication extends Application
	private static class DefaultAjaxRequestTargetProvider implements
		IContextProvider<AjaxRequestTarget, Page>
	{
		@Override
		public AjaxRequestTarget get(Page page)
		{
			return new AjaxRequestHandler(page);
/t
RepeaterApplication(WebApplication).newAjaxRequestTarget(Page) line: 908	
		AjaxRequestTarget target = getAjaxRequestTargetProvider().get(page);
/d
		return target;
/t
AjaxButton$1(AbstractDefaultAjaxBehavior).onRequest() line: 590	
		AjaxRequestTarget target = app.newAjaxRequestTarget(getComponent().getPage());
/d
		RequestCycle requestCycle = RequestCycle.get();
		requestCycle.scheduleRequestHandlerAfterCurrent(target);
		respond(target);							/ AjaxRequestHandler is ook een controller	? TODO
/s
AjaxButton$1(AjaxEventBehavior).respond(AjaxRequestTarget) line: 155	
		onEvent(target);
/s
AjaxButton$1(AjaxFormSubmitBehavior).onEvent(AjaxRequestTarget) line: 171	
		getForm().getRootForm().onFormSubmitted(new AjaxFormSubmitter(this, target));

this	AjaxButton$1  (id=13773) 	/ behavior	,	
	__form	Form<T>  (id=13776)	
	component	FrmPage$4  (id=13760)	/ de behavior kent z'n component	, want je hebt een controller aan een component toegevoegd	, 
	defaultProcessing	true	
	event	"click" (id=8705)	

/ intermezzo

/ zoals we aan een label een controller kunnen add	, dat is dan een behavior	, deze behavior kent z'n component	,  TODO
/ kunnen we ook aan een button in een form een controller add, een AjaxFormSubmitBehavior, deze kent ook z'n component	, TODO

/ Einde intermezzo


/ intermezzo

/ vergl met  AjaxLink	, waar geen aparte behavior class is zoals AjaxFormSubmitBehavior	, 

public abstract class AjaxLink<T> extends AbstractLink implements IAjaxLink, IGenericComponent<T>
	@Override
	protected void onInitialize()
	{
		super.onInitialize();
		add(newAjaxEventBehavior("click"));
	}
	protected AjaxEventBehavior newAjaxEventBehavior(String event)
	{
		return new AjaxEventBehavior(event)
		{
			@Override
			protected void onEvent(AjaxRequestTarget target)
			{
				onClick(target);
			}

/ Einde intermezzo

/s
Form<T>.onFormSubmitted(IFormSubmitter) line: 737	
/=
	public final void onFormSubmitted(IFormSubmitter submitter)

submitter	AjaxFormSubmitBehavior$AjaxFormSubmitter  (id=13806)	
	submitBehavior	AjaxButton$1  (id=13773)	
	target	AjaxRequestHandler  (id=13800)	
/ bij normal form is submitter=null	,
/ maar het gaat toch hetzelfde in deze method	,

			else
			{
				// First, see if the processing was triggered by a Wicket IFormSubmittingComponent
				if (submitter == null)
					submitter = findSubmittingButton();

					if (submitter instanceof IFormSubmittingComponent)
submitter	AjaxFormSubmitBehavior$AjaxFormSubmitter  (id=10209)	
/nee
/ wel bij gewoon form	,
/ maar is niet zo belangrijk WH	,
				else
				{
					// the submit request might be for one of the nested forms, so let's
					// find the right one:
					final Form<?> formToProcess = findFormToProcess(submitter);

					// process the form for this request
					formToProcess.process(submitter);
/s
Form<T>.process(IFormSubmitter) line: 933	
		// run validation
		validate();
/s
/ stack
/s
	TextField<T>(AbstractTextComponent<T>).convertInput() line: 122	
		String[] value = getInputAsArray();								/ haalt uit Request	,
[eric]
	TextField<T>(FormComponent<T>).validate() line: 1130	
	Form$18.validate(FormComponent<?>) line: 1948	
	Form$18(Form$ValidationVisitor).component(FormComponent<?>, IVisit<Void>) line: 177	
	Form$18(Form$ValidationVisitor).component(Object, IVisit) line: 161	
	Visits.visitPostOrderHelper(Object, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 274	
	Visits.visitPostOrderHelper(Object, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 262	
	Visits.visitPostOrder(Object, IVisitor<S,R>, IVisitFilter) line: 245	
	FormComponent<T>.visitFormComponentsPostOrder(Component, IVisitor<FormComponent<?>,R>) line: 382	
	Form<T>.visitFormComponentsPostOrder(IVisitor<FormComponent<?>,R>) line: 1153	
	Form<T>.validateComponents() line: 1940	
	Form<T>.validate() line: 1882	
	Form<T>.process(IFormSubmitter) line: 943	
	Form<T>.onFormSubmitted(IFormSubmitter) line: 795	
	AjaxButton$1(AjaxFormSubmitBehavior).onEvent(AjaxRequestTarget) line: 171	
	AjaxButton$1(AjaxEventBehavior).respond(AjaxRequestTarget) line: 155	
	AjaxButton$1(AbstractDefaultAjaxBehavior).onRequest() line: 593	
	RequestListenerInterface.internalInvoke(Component, Object) line: 258	
	RequestListenerInterface.invoke(IRequestableComponent, Behavior) line: 241	
	ListenerInterfaceRequestHandler.invokeListener() line: 248	
	ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 234	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

		// If a validation error occurred
		if (hasError())
		{
			// mark all children as invalid
			markFormComponentsInvalid();

			// let subclass handle error
			callOnError(submittingComponent);
		}
		else
		{
			// mark all children as valid
			markFormComponentsValid();

			// before updating, call the interception method for clients
			beforeUpdateFormComponentModels();

			// Update model using form data
			updateFormComponentModels();	
/s
/ stack
/s
	Form$FormModelUpdateVisitor.component(Component, IVisit<Void>) line: 229	
								((IFormModelUpdateListener)component).updateModel();
/cb
	Form$FormModelUpdateVisitor.component(Object, IVisit) line: 199	
	Visits.visitPostOrderHelper(Object, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 274	
	Visits.visitPostOrderHelper(Object, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 262	
	Visits.visitPostOrder(Object, IVisitor<S,R>, IVisitFilter) line: 245	
	FormComponent<T>.visitComponentsPostOrder(Component, IVisitor<Component,R>) line: 423	
	Form<T>.internalUpdateFormComponentModels() line: 1864	
	Form<T>.updateFormComponentModels() line: 1829	
	Form<T>.process(IFormSubmitter) line: 963	
	Form<T>.onFormSubmitted(IFormSubmitter) line: 795	
	AjaxButton$1(AjaxFormSubmitBehavior).onEvent(AjaxRequestTarget) line: 171	
	AjaxButton$1(AjaxEventBehavior).respond(AjaxRequestTarget) line: 155	
	AjaxButton$1(AbstractDefaultAjaxBehavior).onRequest() line: 593	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 57	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 606	
	RequestListenerInterface.internalInvoke(Component, Object) line: 258	
	RequestListenerInterface.invoke(IRequestableComponent, Behavior) line: 241	
	ListenerInterfaceRequestHandler.invokeListener() line: 248	
	ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 234	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/ debug
/s
TextField<T>(FormComponent<T>).updateModel() line: 1097	
		setModelObject(getConvertedInput());			/ data uit Request is in de FormComponent.convertedInput	,

/t
Form<T>.process(IFormSubmitter) line: 963	

			// validate model objects after input values have been bound
			internalOnValidateModelObjects();
			if (hasError())
			{
				callOnError(submittingComponent);
				return;
			}

			// Form has no error
			delegateSubmit(submittingComponent);
/s
Form<T>.delegateSubmit(IFormSubmitter) line: 1287	
		// process submitting component (if specified)
		if (submittingComponent != null)
		{
			// invoke submit on component
			submittingComponent.onSubmit();	 

/ intermezzo

/ bij normal form was submittingComponent=Button	, nu is dat de AjaxFormSubmitBehavior$AjaxFormSubmitter	, 
submitBehavior	AjaxButton$1  (id=13773)	
	__form	Form<T>  (id=13776)	
	component	FrmPage$4  (id=13760)	
	event	"click" (id=8705)	
	page	FrmPage  (id=13759)	
	update	AjaxRequestHandler$1  (id=13899)	


/ Einde intermezzo
 
/s
AjaxFormSubmitBehavior$AjaxFormSubmitter.onSubmit() line: 215	
			submitBehavior.onSubmit(target);
/s
AjaxButton$1.onSubmit(AjaxRequestTarget) line: 113	
/=
		return new AjaxFormSubmitBehavior(form, event)
		{
			private static final long serialVersionUID = 1L;

			@Override
			protected void onSubmit(AjaxRequestTarget target)
			{
				AjaxButton.this.onSubmit(target, AjaxButton.this.getForm());

/ intermezzo

/ we zien hetzelfde als bij AjaxLink	, 

public abstract class AjaxLink<T> extends AbstractLink implements IAjaxLink, IGenericComponent<T>
	protected AjaxEventBehavior newAjaxEventBehavior(String event)
	{
		return new AjaxEventBehavior(event)
		{
			@Override
			protected void onEvent(AjaxRequestTarget target)
			{
				onClick(target);

	public abstract void onClick(final AjaxRequestTarget target);

/ waar de behavior's onClick de component's onClick called,	


/ Einde intermezzo
/s
FrmPage$2.onSubmit(AjaxRequestTarget, Form<?>) line: 53	
/=
		ajx=new AjaxButton("ajx") {
			@Override
			protected void onSubmit(AjaxRequestTarget target, Form<?> form) {
				result_=name_+","+age_+","+ajx_;
				name_="";
				age_=0;
				target.add(result);

/ intermezzo

/ we zijn in 	,
/s
	FrmPage$4.onSubmit(AjaxRequestTarget, Form<?>) line: 73 (out of synch)	
	AjaxButton$1.onSubmit(AjaxRequestTarget) line: 113	
	AjaxFormSubmitBehavior$AjaxFormSubmitter.onSubmit() line: 215		/ ipv Button.onSubmit	, nu AjaxFormSubmitBehavior$AjaxFormSubmitter	
	Form<T>.delegateSubmit(IFormSubmitter) line: 1307	
	Form<T>.process(IFormSubmitter) line: 974	
	Form<T>.onFormSubmitted(IFormSubmitter) line: 795	
	AjaxButton$1(AjaxFormSubmitBehavior).onEvent(AjaxRequestTarget) line: 171		/ controller	,
	AjaxButton$1(AjaxEventBehavior).respond(AjaxRequestTarget) line: 155	
	AjaxButton$1(AbstractDefaultAjaxBehavior).onRequest() line: 593	
	RequestListenerInterface.internalInvoke(Component, Object) line: 258	
	RequestListenerInterface.invoke(IRequestableComponent, Behavior) line: 241	
	ListenerInterfaceRequestHandler.invokeListener() line: 248	
	ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 234				/ controller	,
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/s
public class AjaxRequestHandler implements AjaxRequestTarget
	/**
	 * Collector of page updates.
	 */
	private final PartialPageUpdate update;

AjaxRequestHandler.add(Component, String) line: 238	
		update.add(component, markupId);
/s
AjaxRequestHandler$1(PartialPageUpdate).add(Component, String) line: 390	
		component.setMarkupId(markupId);
result6
		markupIdToComponent.put(markupId, component);
this	AjaxRequestHandler$1  (id=10242)	
	markupIdToComponent	LinkedHashMap<K,V>  (id=10260)	
/t
Form<T>.delegateSubmit(IFormSubmitter) line: 1311	
		// process submitting component (if specified)
		if (submittingComponent != null)
		{
			// invoke submit on component
			submittingComponent.onSubmit();
		}
/d
		// invoke Form#onSubmit(..)
		for (Form<?> form : forms)
		{
			form.onSubmit();
/ leeg	,

/ Einde CREATE IBEHAVIORLISTENER AND URL ON AJAX FORM

/ ILINKLISTENER AND IBEHAVIORLISTENER ON AJAX FORM

/ proj wicket-examples-step-by-step
/ prog FrmPage

$ less FrmPage.html

<a href="javascript:;" wicket:id="ajaxLink">ajax link</a>
<form wicket:id="form">
	<input type="text" wicket:id="name">
	<input type="text" wicket:id="age">
	<input type="button" wicket:id="ajx">
</form>
<span wicket:id="result"></span>

$ less FrmPage.java

		AjaxLink<Void>ajaxLink=new AjaxLink<Void>("ajaxLink") {
			@Override
			public void onClick(AjaxRequestTarget target) {
				result_="From AjaxLink";	
				target.add(result);													<- niet vergeten	,
			}
		};
		add(ajaxLink);

		Form<Void>form=new Form<Void>("form");
		add(form);
		ajx=new AjaxButton("ajx") {
			@Override
			protected void onSubmit(AjaxRequestTarget target, Form<?> form) {
				result_=name_+","+age_+","+ajx_;
				name_="";
				age_=0;
				target.add(result);
			}
		};
		form.add(ajx);

/ we zien in HTML	,

<script type="text/javascript">
/*<![CDATA[*/
Wicket.Event.add(window, "domready", function(event) { 
	Wicket.Ajax.ajax({"u":"./frm?0-3.IBehaviorListener.0-ajaxLink","c":"ajaxLink1","e":"click"});;
	Wicket.Ajax.ajax({"u":"./frm?0-3.IBehaviorListener.0-form-ajx","m":"POST","c":"ajx3","f":"form2","sc":"ajx","e":"click","pd":true});;
	Wicket.Event.publish(Wicket.Event.Topic.AJAX_HANDLERS_BOUND);
;});
/*]]>*/
</script>

/ SERVER

/ stack	,
/s
	RequestCycle.processRequest() line: 219	
			IRequestHandler handler = resolveRequestHandler();
/cb
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ debug	,
/s
RequestCycle.processRequest() line: 219	
			IRequestHandler handler = resolveRequestHandler();
...
/s
MountedMapper(AbstractBookmarkableMapper).mapRequest(Request) line: 346	
		UrlInfo urlInfo = parseRequest(request);

urlInfo	AbstractBookmarkableMapper$UrlInfo  (id=8686)	
	pageClass	Class<T> (org.apache.wicket.examples.repeater.FrmPage) (id=8445)	
	pageComponentInfo	PageComponentInfo  (id=8687)	
		componentInfo	ComponentInfo  (id=8688)	
			behaviorId	Integer  (id=8690)	
0
			componentPath	"ajaxLink" (id=8691)	
			listenerInterface	"IBehaviorListener" (id=8692)	
			renderCount	Integer  (id=8693)	
3
		pageInfo	PageInfo  (id=8689)	
			pageId	Integer  (id=8690)	
0
	pageParameters	null	

			else if (info.getComponentInfo() != null)
			{
				// with both page instance and component+listener this is a listener interface URL
				return processListener(info, pageClass, pageParameters);
/s
MountedMapper(AbstractBookmarkableMapper).processListener(PageComponentInfo, Class<IRequestablePage>, PageParameters) line: 300	
		if (componentInfo != null)
		{
			renderCount = componentInfo.getRenderCount();
3
			listenerInterface = requestListenerInterfaceFromString(componentInfo.getListenerInterface());
/s
MountedMapper(AbstractComponentMapper).requestListenerInterfaceFromString(String) line: 71	
		return getContext().requestListenerInterfaceFromString(interfaceName);
interfaceName	"IBehaviorListener" (id=8692)	
/s
DefaultMapperContext.requestListenerInterfaceFromString(String) line: 87	
		return RequestListenerInterface.forName(interfaceName);
/s
RequestListenerInterface.forName(String) line: 59	
		return interfaces.get(interfaceName);
/t
MountedMapper(AbstractBookmarkableMapper).processListener(PageComponentInfo, Class<IRequestablePage>, PageParameters) line: 311	
			listenerInterface = requestListenerInterfaceFromString(componentInfo.getListenerInterface());
/d
listenerInterface	RequestListenerInterface  (id=8724)	
	listenerInterfaceClass	Class<T> (org.apache.wicket.behavior.IBehaviorListener) (id=5279)	
	method	Method  (id=8731)	public abstract void org.apache.wicket.behavior.IBehaviorListener.onRequest()
	name	"IBehaviorListener" (id=8732)	

		if (listenerInterface != null)
		{
			PageAndComponentProvider provider = new PageAndComponentProvider(pageInfo.getPageId(),
				pageClass, pageParameters, renderCount, componentInfo.getComponentPath());

			provider.setPageSource(getContext());

			return new ListenerInterfaceRequestHandler(provider, listenerInterface,
				componentInfo.getBehaviorId());

/ Einde ILINKLISTENER AND IBEHAVIORLISTENER ON AJAX FORM

/ FORM CONTROLLER 

/ we hebben FrmPage.java

public class FrmPage extends WebPage {
	public FrmPage() {
		Form<Void>form=new Form<Void>("form");
		add(form);
		
		name=new TextField<String>("name");
		form.add(name);
		IModel<String>mdl=new PropertyModel<String>(this, "name_");
		name.setDefaultModel(mdl);
		age=new TextField<Integer>("age");
		form.add(age);
		mdl=new PropertyModel<String>(this, "age_");
		age.setDefaultModel(mdl);

		Button normal=new Button("normal"){
			@Override
			public void onSubmit() {
				result_=name_+","+age_;
				name_="";
				age_=0;
			};
		};

/ WITH MODELS ISO DIRECT 

public class FrmPage extends WebPage {
	public FrmPage() {
		Button normal=new Button("normal"){
			@Override
			public void onSubmit() {
				String s=name.getModel().getObject()+","+age.getModelObject();
				result.setDefaultModelObject(s); // or ((IModel<Object>)result.getDefaultModel()).setObject(s);
				name.setDefaultModelObject(null);
				age.setDefaultModelObject(null);

//				result_=name_+","+age_;
//				name_=null;
//				age_=null;
			};
		};
		form.add(normal);

		ajx=new AjaxButton("ajx") {
			@Override
			protected void onSubmit(AjaxRequestTarget target, Form<?> form) {
				String s=name.getModel().getObject()+","+age.getModelObject();
				result.setDefaultModelObject(s);
				//		or		((IModel<Object>)result.getDefaultModel()).setObject(s);
				name.setDefaultModelObject(null);
				age.setDefaultModelObject(null);
				
//				result_=name_+","+age_+","+ajx_;
//				name_="";
//				age_=0;
				target.add(result);
			}
		};
		form.add(ajx);

/ normal: de browser collects data in components in form, en sends deze in de POST request als data
/ ajax: wicket's js collects data in components in form, en sends deze in de POST request als data

/ bij normal zien we een url=frm?1-2.IFormSubmitListener-form, bij ajax url=frm?2-3.IBehaviorListener.0-form-ajx	,

/ de server writes de data uit het request in component's models	, altijd,  normal of ajax (see Form.onFormSubmitted)

/we hebben beide buttons add 	, 
/ bij normal zien we een url=frm?1-2.IFormSubmitListener-form, bij ajax url=frm?2-3.IBehaviorListener.0-form-ajx	,

/ Einde WITH MODELS ISO DIRECT 

/ Einde FORM CONTROLLER 




/ Einde AJAX COMPONENTS

/ WEBMARKUPCONTAINER 


/ CHILD GET MARKUP FROM PAGE

/ ws wicket-examples-step-by-step
/ prog WebMarkupContainer2Page

/ we hebben een repeating view add aan de page	,

public class WebMarkupContainer2Page extends WebPage {

		RepeatingView repeatingView=new RepeatingView("names");
		add(repeatingView);
		
<ul>
	<li wicket:id="names">
	</li>
</ul>

/stack
/s
	DefaultMarkupSourcingStrategy.getMarkup(MarkupContainer, Component) line: 81	
/=
	public IMarkupFragment getMarkup(final MarkupContainer container, final Component child)
container	WebMarkupContainer2Page  (id=15360)	
child	RepeatingView  (id=15373)	
		IMarkupFragment containerMarkup = container.getMarkup();
		// Find the child's markup
		IMarkupFragment childMarkup = containerMarkup.find(child.getId());
childMarkup	MarkupFragment  (id=15467)	
	markup	Markup  (id=15389)	
	size	3	
	startIndex	5	
			return childMarkup;
/cb
	WebMarkupContainer2Page(MarkupContainer).getMarkup(Component) line: 502	
		// Delegate request to attached markup sourcing strategy.
		return getMarkupSourcingStrategy().getMarkup(this, child);	 / this=de page
/cb
	RepeatingView(Component).getMarkup() line: 755	
		if (markup != null)
/n
		// Ask the parent for find the markup for me
		markup = parent.getMarkup(this);
/cb
	RepeatingView(Component).internalRender() line: 2345	
		IMarkupFragment markup = getMarkup();							<- nu
				onRender();												<- straks
/cb
	RepeatingView(Component).render() line: 2308	
			// Do the render
			internalRender();
/cb
	WebMarkupContainer2Page(MarkupContainer).renderNext(MarkupStream) line: 1524	
				component.render();
/cb
	WebMarkupContainer2Page(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
		while (markupStream.hasMore())
		{
			// Render the markup element
			boolean rawMarkup = renderNext(markupStream);

	WebMarkupContainer2Page(Page).onRender() line: 879	
		// Loop through the markup in this container
		MarkupStream markupStream = new MarkupStream(getMarkup());
		renderAll(markupStream, null);
markupStream	MarkupStream  (id=15364)	
	current	ComponentTag  (id=15372)		/ <li wicket:id="names">
	currentIndex	5	
	markup	Markup  (id=15389)	
		markupElements	Collections$UnmodifiableRandomAccessList<E>  (id=15404)	
			c	ArrayList<E>  (id=15407)	
				elementData	Object[10]  (id=15409)	
					[0]	RawMarkup  (id=15365)	
					[1]	ComponentTag  (id=15366)	
					[2]	RawMarkup  (id=15369)	
					[3]	ComponentTag  (id=15411)	
					[4]	RawMarkup  (id=15371)	
					[5]	ComponentTag  (id=15372)	
					[6]	RawMarkup  (id=15413)	
					[7]	ComponentTag  (id=15415)	
					[8]	RawMarkup  (id=15416)	
/cb
	WebMarkupContainer2Page(WebPage).onRender() line: 141	
	WebMarkupContainer2Page(Component).internalRender() line: 2380	
	WebMarkupContainer2Page(Component).render() line: 2308	
	WebMarkupContainer2Page(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ debug	,

RepeatingView(AbstractRepeater).onRender() line: 102	
		Iterator<? extends Component> it = renderIterator();
		while (it.hasNext())
		{
			Component child = it.next();
			renderChild(child);
/s
RepeatingView(AbstractRepeater).renderChild(Component) line: 115	
		child.render();
/s
Label(Component).render() line: 2308	
			internalRender();
/s
Label(Component).internalRender() line: 2345	
		IMarkupFragment markup = getMarkup();
/s
Label(Component).getMarkup() line: 755	
		if (markup != null)
/n
		// Ask the parent for find the markup for me
		markup = parent.getMarkup(this);
/s
RepeatingView(AbstractRepeater).getMarkup(Component) line: 153	
		// each direct child gets the markup of this repeater
		return getMarkup();

/ Einde CHILD GET MARKUP FROM PAGE

/c

/ CHILD GETS MARKUP FROM REPEATINGVIEW

/ ws wicket-examples-step-by-step
/ prog WebMarkupContainer2Page

/ we hebben 2 labels add aan de repeating view	,

public class WebMarkupContainer2Page extends WebPage {

		RepeatingView repeatingView=new RepeatingView("names");
		add(repeatingView);
		
		String id=repeatingView.newChildId();
		repeatingView.add(new Label(id,"foo"));
		id=repeatingView.newChildId();
		repeatingView.add(new Label(id,"bar"));

<ul>
	<li wicket:id="names">
	</li>
</ul>


/ stack
/s
Component [1] (path = [0:names:1]) must be applied to a tag of type [input], not:  '<li wicket:id="names">' (line 0, column 0)
 MarkupStream: [markup = file:/home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28/webapps/wicket-examples-step-by-step/WEB-INF/classes/org/apache/wicket/examples/repeater/WebMarkupContainer2Page.html
<li wicket:id="names">
	</li>, index = 0, current =  '<li wicket:id="names">' (line 0, column 0)]
     at org.apache.wicket.markup.MarkupStream.throwMarkupException(MarkupStream.java:526)
     at org.apache.wicket.Component.checkComponentTag(Component.java:3564)
     at org.apache.wicket.markup.html.form.TextField.onComponentTag(TextField.java:92)
     at org.apache.wicket.Component.internalRenderComponent(Component.java:2521)
     at org.apache.wicket.MarkupContainer.onRender(MarkupContainer.java:1698)
     at org.apache.wicket.Component.internalRender(Component.java:2380)
		IMarkupFragment markup = getMarkup();
/cb
     at org.apache.wicket.Component.render(Component.java:2308)
			// Do the render
			internalRender();
/cb
     at org.apache.wicket.markup.repeater.AbstractRepeater.renderChild(AbstractRepeater.java:115)
		child.render();
/cb
     at org.apache.wicket.markup.repeater.AbstractRepeater.onRender(AbstractRepeater.java:102)
		Iterator<? extends Component> it = renderIterator();
		while (it.hasNext())
		{
			Component child = it.next();		/ Label
			renderChild(child);
/cb
     at org.apache.wicket.Component.internalRender(Component.java:2380)
		IMarkupFragment markup = getMarkup();			/ part in page markup	,
				onRender();
/cb
     at org.apache.wicket.Component.render(Component.java:2308)
     at org.apache.wicket.MarkupContainer.renderNext(MarkupContainer.java:1524)
     at org.apache.wicket.MarkupContainer.renderAll(MarkupContainer.java:1759)
     at org.apache.wicket.Page.onRender(Page.java:879)

/ debug	,
Label(Component).internalRender() line: 2345	
		IMarkupFragment markup = getMarkup();
/s
Label(Component).getMarkup() line: 728	
		if (markup != null)
/n
		// Ask the parent for find the markup for me
		markup = parent.getMarkup(this);
/s
RepeatingView(AbstractRepeater).getMarkup(Component) line: 153	
		// each direct child gets the markup of this repeater
		return getMarkup();
/t
Label(Component).getMarkup() line: 756	
		markup = parent.getMarkup(this);
this	Label  (id=15484)	
	markup	MarkupFragment  (id=15467)	
<li wicket:id="names">
	</li>

/ Einde CHILD GETS MARKUP FROM REPEATINGVIEW

/ c

/ we debug verder	,

/s
Label(WebComponent).onRender() line: 60	
		internalRenderComponent();
/s
Label(Component).internalRenderComponent() line: 2514	
		final IMarkupFragment markup = getMarkup();
/ al	,
		// Call any tag handler
		onComponentTag(tag);
/ niets,	
				renderComponentTag(tag);
/s
Label(Component).renderComponentTag(ComponentTag) line: 4034	
			// Write the tag
			tag.writeOutput(getResponse(), !needToRenderTag(null),
				getMarkup().getMarkupResourceStream().getWicketNamespace());
/ we geloven het	,

/ TEXTFIELD TO REPEATINGVIEW ERROR

/ ws wicket-examples-step-by-step
/ prog WebMarkupContainer2Page

/ we hebben textfield add aan de repeating view	, met een verkeerde markup	,

public class WebMarkupContainer2Page extends WebPage {
	
	public WebMarkupContainer2Page() {
		
		RepeatingView repeatingView=new RepeatingView("names");
		add(repeatingView);
		String id=repeatingView.newChildId();
		repeatingView.add(new TextField<String>(id));

<li wicket:id="names">
	</li>

/ Deze markup van de repeatingview wordt ook de markup van de child	, een textfield nu, 	maar dit moet een <input> zijn	,/ geen <li> 

/s
RepeatingView(AbstractRepeater).onRender() line: 96	
		Iterator<? extends Component> it = renderIterator();
		while (it.hasNext())
		{
			Component child = it.next();
			renderChild(child);
/s
RepeatingView(AbstractRepeater).renderChild(Component) line: 115	
		child.render();
/s
TextField<T>(Component).render() line: 2296	
			// Do the render
			internalRender();
/s
TextField<T>(Component).internalRender() line: 2345	
		IMarkupFragment markup = getMarkup();
/s
TextField<T>(Component).getMarkup() line: 755	
		// Ask the parent for find the markup for me
		markup = parent.getMarkup(this);
/t
TextField<T>(Component).internalRender() line: 2345	
		IMarkupFragment markup = getMarkup();
/d
<li wicket:id="names">
	</li>
				onRender();
/s
TextField<T>(MarkupContainer).onRender() line: 1698	
		internalRenderComponent();
/s
TextField<T>(Component).internalRenderComponent() line: 2508	
		final IMarkupFragment markup = getMarkup();
/ al	,
<li wicket:id="names">
	</li>

		// Call any tag handler
		onComponentTag(tag);
/s
TextField<T>.onComponentTag(ComponentTag) line: 92	
		// Must be attached to an input tag
		checkComponentTag(tag, "input");
/s
TextField<T>(Component).checkComponentTag(ComponentTag, String) line: 3558	
		if (!tag.getName().equalsIgnoreCase(name))
/j





/ Einde TEXTFIELD TO REPEATINGVIEW ERROR

/ TEXTFIELD TO REPEATINGVIEW OK 

/ ws wicket-examples-step-by-step
/ prog WebMarkupContainer2Page

/ we hebben textfield add aan de repeating view	, met een verkeerde markup	,

public class WebMarkupContainer2Page extends WebPage {
	
	public WebMarkupContainer2Page() {
		
		RepeatingView repeatingView=new RepeatingView("names");
		add(repeatingView);
		String id=repeatingView.newChildId();
		repeatingView.add(new TextField<String>(id));

<ul>
	<li>
		<input wicket:id="names">
	</li>
</ul>

/ Deze markup van de repeatingview 
		<input wicket:id="names">
/ wordt ook de markup van de child	, textfields nu, 	

/ we zien in HTML	,
<ul>
	<li>
		<input wicket:id="names" value="" name="names:1">
		<input wicket:id="names" value="" name="names:2">
	</li>
</ul>

/ Waar komt dat name attr vandaan	,	?

/ we zien dus repeatingView.newChildId() terug in de name attr: names:1 en names:2	, waarin names de id is van de repeatingview	,


/ stack
/s
	TextField<T>(Component).internalRenderComponent() line: 2521	
	TextField<T>(MarkupContainer).onRender() line: 1698	
	TextField<T>(Component).internalRender() line: 2380	
	TextField<T>(Component).render() line: 2308	
	RepeatingView(AbstractRepeater).renderChild(Component) line: 115	
	RepeatingView(AbstractRepeater).onRender() line: 102	
	RepeatingView(Component).internalRender() line: 2380	
	RepeatingView(Component).render() line: 2308	
	WebMarkupContainer2Page(MarkupContainer).renderNext(MarkupStream) line: 1524	
	WebMarkupContainer2Page(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	WebMarkupContainer2Page(Page).onRender() line: 879	
	WebMarkupContainer2Page(WebPage).onRender() line: 141	
	WebMarkupContainer2Page(Component).internalRender() line: 2380	
	WebMarkupContainer2Page(Component).render() line: 2308	
	WebMarkupContainer2Page(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ debug	,
/s
TextField<T>(Component).internalRenderComponent() line: 2521	
		final IMarkupFragment markup = getMarkup();
<input wicket:id="names">
		// Call any tag handler
		onComponentTag(tag);
/s
TextField<T>.onComponentTag(ComponentTag) line: 92	
		// Must be attached to an input tag
		checkComponentTag(tag, "input");
		else
		{
			if (tag.getAttributes().containsKey("type"))
/ n
/ alleen wicket:id="name" is attr	,

		tag.put("value", getValue());
<input wicket:id="names" value="">
/ requests model	,

		// Default handling for component tag
		super.onComponentTag(tag);
/s
TextField<T>(FormComponent<T>).onComponentTag(ComponentTag) line: 1380	/ inderdaad, FormComponent puts name attr	,	
		tag.put("name", getInputName());
/s
TextField<T>(FormComponent<T>).getInputName() line: 793	
		String inputName = Form.getRootFormRelativeId(this);	/ this=TextField	,
/s
Form<T>.getRootFormRelativeId(Component) line: 2142	
		String id = component.getId();
1
		while (true)
		{
			inputName.prepend(id);
1
names:1
			c = c.getParent();
[RepeatingView [Component id = names]]
c	WebMarkupContainer2Page  (id=23184)	
			if (c == null || (c instanceof Form<?> && ((Form<?>)c).isRootForm()) ||
				c instanceof Page)
			{
/n
/j
				break;
			inputName.prepend(Component.PATH_SEPARATOR);
:1
			id = c.getId();
names

		if (JavaScriptReservedNames.isNameReserved(inputName.toString()))	/ als inputName="name"	,
/n
		{
			inputName.prepend(Component.PATH_SEPARATOR);
/niet
			inputName.prepend(Component.PATH_SEPARATOR);
/niet
			inputName.prepend("p");
/niet
		}
/ Maar we hebben dit wel gezien	, als de wicket id "name" is	, wordt dus de name attr "p::name"	,

/t
TextField<T>(FormComponent<T>).getInputName() line: 794	
		String inputName = Form.getRootFormRelativeId(this);
/d
names:1
		if (form != null)
/n
		{
			return form.getInputNamePrefix() + inputName;	/ bij forms bij ons is ""
		}
		else
/j
		{
			return inputName;

/ Einde TEXTFIELD TO REPEATINGVIEW OK 

/ LINK TO REPEATINGVIEW OK 

/ ws wicket-examples-step-by-step
/ prog WebMarkupContainer2Page

/ we hebben links add aan de repeating view	, 

public class WebMarkupContainer2Page extends WebPage {
	
	public WebMarkupContainer2Page() {
		
		RepeatingView repeatingView=new RepeatingView("names");
		add(repeatingView);
		id=repeatingView.newChildId();	
		repeatingView.add(new Link<Void>(id) {
			@Override
			public void onClick() {
			}
		});
		id=repeatingView.newChildId();	
		repeatingView.add(new Link<Void>(id) {
			@Override
			public void onClick() {
			}
		});

<ul>
	<li>
		<a wicket:id="names">link</a>
	</li>
</ul>

/ Deze markup van de repeatingview 
        <a wicket:id="names">link</a>
/ wordt ook de markup van de children	, links	, 

/ we zien in HTML	,
<ul>
	<li>
		<a wicket:id="names" href="./webmarkupcontainer2?0-1.ILinkListener-names-1">link</a>
		<a wicket:id="names" href="./webmarkupcontainer2?0-1.ILinkListener-names-2">link</a>
	</li>
</ul>

/ we zien dus weer de repeatingView.newChildId()'s terug	, in names-1 en names-2	, 
/ deze worden names:1 en names:2 gemaakt	, path ids	, 
/ en via controller komt de server in de onClick methods uit	,

/ Einde LINK TO REPEATINGVIEW OK 

/ WEBMARKUPCONTAINER SAMENVATTING

/ 7	. 

/ WebMarkupContainerPage is NIET OK	, WebMarkupContainer1Page is OK	,

/ WebMarkupContainer2Page is net als WebMarkupContainerPage NIET OK	,

/ 7	. 

$ vi WebMarkupContainerPage.html
<ul>
	<li>
		<a wicket:id="x">
			<span wicket:id="label"></span>
		</a>
	</li>
</ul>

/ en "x" is de repeater	, 
/ we krijgen wel meerdere <a>s	, maar het moeten meerdere <li>s zijn, want we zien 

<ul>
	<li>
		<a wicket:id="x" href="./webmarkupcontainer?4-1.ILinkListener-x-1">
			<span wicket:id="label">foo-1</span>
		</a><a wicket:id="x" href="./webmarkupcontainer?4-1.ILinkListener-x-2">
			<span wicket:id="label">foo-2</span>
		</a>
	</li>
</ul>

$ vi WebMarkupContainerPage.java

		List<X>list=new ArrayList<X>();
		list.add(new X("Foo",7));
		list.add(new X("Bar",13));
		
		RepeatingView repeatingView=new RepeatingView("x");
		add(repeatingView);
		for(X x:list){
			String id=repeatingView.newChildId();
			Link<Void>link=new Link<Void>(id) {
				@Override
				public void onClick() {
				}
			};
			repeatingView.add(link);
			Label label=new Label("label","foo-"+id);
			link.add(label);
		}

/ 7	. 

/ Daarom moeten we <li> <-> WebMarkupContainer	,

$ vi WebMarkupContainer1Page.html

<ul>
	<li wicket:id="x">
		<a wicket:id="link">
			<span wicket:id="label"></span>
		</a>
	</li>
</ul>

$ vi WebMarkupContainer1Page.java

		List<X1>list=new ArrayList<X1>();
		list.add(new X1("Foo",7));
		list.add(new X1("Bar",13));
		
		RepeatingView repeatingView=new RepeatingView("x");
		add(repeatingView);
		for(X1 x1:list){

			String id=repeatingView.newChildId();
			WebMarkupContainer webMarkupContainer=new WebMarkupContainer(id);
			repeatingView.add(webMarkupContainer);

			Link<Void>link=new Link<Void>("link") {
				@Override
				public void onClick() {
				}
			};
			webMarkupContainer.add(link);

			Label label=new Label("label",x1.getName()+","+x1.getAge());
			link.add(label);
		}


/ we zien	,
<ul>
	<li wicket:id="x">
		<a wicket:id="link" href="./webmarkupcontainer1?5-1.ILinkListener-x-1-link">
			<span wicket:id="label">Foo,7</span>
		</a>
	</li><li wicket:id="x">
		<a wicket:id="link" href="./webmarkupcontainer1?5-1.ILinkListener-x-2-link">
			<span wicket:id="label">Bar,13</span>
		</a>
	</li>
</ul>

/ MORGENOCHTEND
/ WebMarkupContainer1Page debug	, wat met id van WebMarkupContainer		?

/ Einde WEBMARKUPCONTAINER SAMENVATTING

/ REPEATINGVIEW WICKETID

public class WebMarkupContainer2Page extends WebPage {
	
	public WebMarkupContainer2Page() {
		
		RepeatingView repeatingView=new RepeatingView("names");
		add(repeatingView);

		String id=repeatingView.newChildId();
		repeatingView.add(new AjaxLink<Void>(id) {
			@Override
			public void onClick(AjaxRequestTarget target) {
				boolean b=false;
				
			}
		});
		id=repeatingView.newChildId();	
		repeatingView.add(new AjaxLink<Void>(id) {
			@Override
			public void onClick(AjaxRequestTarget target) {
				boolean b=false;
				
			}
		});

		
	}
}

<ul>
	<li>
		<a wicket:id="names">link</a>
	</li>
</ul>

/ we zien	,
/ Als we Link	, 
<ul>
	<li>
		<a wicket:id="names" href="./webmarkupcontainer2?2-1.ILinkListener-names-1">link</a>
		<a wicket:id="names" href="./webmarkupcontainer2?2-1.ILinkListener-names-2">link</a>
	</li>
</ul>

/ Als we AjaxLink	,

<script type="text/javascript"> /*<![CDATA[*/
Wicket.Event.add(window, "domready", function(event) { 
	Wicket.Ajax.ajax({"u":"./webmarkupcontainer2?0-1.IBehaviorListener.0-names-1","c":"id11","e":"click"});;
	Wicket.Ajax.ajax({"u":"./webmarkupcontainer2?0-1.IBehaviorListener.0-names-2","c":"id22","e":"click"});;
;});
/*]]>*/
</script>
<ul>
	<li>
		<a wicket:id="names" id="id11" href="javascript:;">link</a>
		<a wicket:id="names" id="id22" href="javascript:;">link</a>
	</li>
</ul>
/ op zich is dit helemaal niet de bedoeling, 2 links in 1 <li>	, maar afgezien daarvan	, 

/ we zien names-1	, maar er is geen component met wicket:id="1"	, 

/ we zien de repeatingView.newChildId()s 1 en 2	, 
/ Hoe gaat het met behavior call	?

/ CLICK LINK WICKET FOLLOWS WICKETPATH IN URL

/ we click 
		<a wicket:id="names" href="./webmarkupcontainer2?2-1.ILinkListener-names-1">link</a>
/ SERVER
/s
/ stack	,
	MountedMapper(AbstractBookmarkableMapper).mapRequest(Request) line: 348	
	SystemMapper(CompoundRequestMapper).mapRequest(Request) line: 150	
		for (MapperWithScore mapperWithScore : list)
		{
			IRequestMapper mapper = mapperWithScore.getMapper();
MountedMapper [mountSegments=webmarkupcontainer2]
			IRequestHandler handler = mapper.mapRequest(request);
/cb
	RequestCycle.resolveRequestHandler() line: 189	
		return requestMapper.mapRequest(request);
/cb
	RequestCycle.processRequest() line: 219	
			IRequestHandler handler = resolveRequestHandler();		<-
				execute(handler);
/cb
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/ debug	,
/s
MountedMapper(AbstractBookmarkableMapper).mapRequest(Request) line: 348	
		UrlInfo urlInfo = parseRequest(request);
urlInfo	AbstractBookmarkableMapper$UrlInfo  (id=2075)	
	pageClass	Class<T> (org.apache.wicket.examples.repeater.WebMarkupContainer2Page) (id=1254)	
	pageComponentInfo	PageComponentInfo  (id=2076)	
		componentInfo	ComponentInfo  (id=2077)	
			behaviorId	Integer  (id=303)				0
			componentPath	"names:1" (id=2079)	
			listenerInterface	"IBehaviorListener" (id=2080)	
			renderCount	Integer  (id=124)	
		pageInfo	PageInfo  (id=2078)	
			pageId	Integer  (id=303)	

			else if (info.getComponentInfo() != null)
			{
				// with both page instance and component+listener this is a listener interface URL
				return processListener(info, pageClass, pageParameters);
/s
MountedMapper(AbstractBookmarkableMapper).processListener(PageComponentInfo, Class<IRequestablePage>, PageParameters) line: 300	
			PageAndComponentProvider provider = new PageAndComponentProvider(pageInfo.getPageId(),
				pageClass, pageParameters, renderCount, componentInfo.getComponentPath());

			provider.setPageSource(getContext());

			return new ListenerInterfaceRequestHandler(provider, listenerInterface,
				componentInfo.getBehaviorId());
provider	PageAndComponentProvider  (id=2143)	
	component	null	
	componentPath	"names:1" (id=2079)	
	...
/t
RequestCycle.processRequest() line: 220	
			IRequestHandler handler = resolveRequestHandler();
/d
				execute(handler);
/s
RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
			respond(handler);
/s
RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
				handler.respond(RequestCycle.this);
/s
ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 158	
			component = getComponent();
/s
PageAndComponentProvider.getComponent() line: 160	
			IRequestablePage page = getPageInstance(); 	/ TODO /s 	resolvePageInstance(pageId, pageClass, pageParameters, renderCount);
			component = page.get(componentPath);
this	PageAndComponentProvider  (id=2143)	
	component	null	
	componentPath	"names:1" (id=2079)	

page	WebMarkupContainer2Page  (id=2171)	
	children	ArrayList<E>  (id=2185)	
		[0]	RepeatingView  (id=2195)	
			id	"names" (id=2200)	
			children	ArrayList<E>  (id=2199)	
				[0]	WebMarkupContainer2Page$1  (id=2203)			/ AjaxLink
					id	"1" (id=2208)	
					data	Object[2]  (id=2206)	
						[0]	AjaxLink$1  (id=2238)	
						[1]	Behaviors$BehaviorIdList  (id=2239)	
				[1]	WebMarkupContainer2Page$2  (id=2204)	/ AjaxLink	,	
					id	"2" (id=2220)	
					data	Object[2]  (id=2217)	
						[0]	AjaxLink$1  (id=2288)	
						[1]	Behaviors$BehaviorIdList  (id=2289)	

/ Intermezzo

/ Dit is precies zoals het in Java staat	,

		RepeatingView repeatingView=new RepeatingView("names");
		add(repeatingView);
		
		String id=repeatingView.newChildId();
		repeatingView.add(new AjaxLink<Void>(id) {
			@Override
			public void onClick(AjaxRequestTarget target) {
				boolean b=false;
				
			}
		});
		id=repeatingView.newChildId();	
		repeatingView.add(new AjaxLink<Void>(id) {
			@Override
			public void onClick(AjaxRequestTarget target) {
				boolean b=false;
				
			}
		});

/ In HTML	,
<a wicket:id="names" id=id11">link</a>
<a wicket:id="names" id=id22">link</a>
/ Dit is het template van de repeater + id	, 
/ De 2 children hebben wicket:id="1" en "2"	, 
/ Met de id's van de tags wordt een controller in js bind	, die in zijn url -names-1 resp -names-2 heeft

/ Einde Intermezzo

PageAndComponentProvider.getComponent() line: 161	
			component = page.get(componentPath);
/d
this	PageAndComponentProvider  (id=2143)	
	component	WebMarkupContainer2Page$1  (id=2203)		<-
	componentPath	"names:1" (id=2079)	
	...
		invokeListener();
/s
/ EVERY COMPONENT HAS ITS OWN BEHAVIORS
ListenerInterfaceRequestHandler.invokeListener() line: 247	
				Behavior behavior = getComponent().getBehaviorById(behaviorId);		<- een component, een AjaxLink hier, heeft zijn eigen behaviors	, 
																			/ dus we komen straks in de onClick van deze component uit	,  en niet in die
																			/ van de andere link	,
behavior	AjaxLink$1  (id=2238)	
	component	WebMarkupContainer2Page$1  (id=2203)									<-
	event	"click" (id=2478)	

				listenerInterface.invoke(getComponent(), behavior);
/s
RequestListenerInterface.invoke(IRequestableComponent, Behavior) line: 241	
		internalInvoke(component, behavior);
/s
RequestListenerInterface.internalInvoke(Component, Object) line: 258	
			method.invoke(target);												/ target= behavior	,
/s
AjaxLink$1(AbstractDefaultAjaxBehavior).onRequest() line: 587	
		WebApplication app = (WebApplication)getComponent().getApplication();
		AjaxRequestTarget target = app.newAjaxRequestTarget(getComponent().getPage());

		RequestCycle requestCycle = RequestCycle.get();
		requestCycle.scheduleRequestHandlerAfterCurrent(target);

		respond(target);
/s
AjaxLink$1(AjaxEventBehavior).respond(AjaxRequestTarget) line: 155	
		onEvent(target);
/s
AjaxLink$1.onEvent(AjaxRequestTarget) line: 84	
/=
		return new AjaxEventBehavior(event)
		{
			private static final long serialVersionUID = 1L;

			@Override
			protected void onEvent(AjaxRequestTarget target)
			{
				onClick(target);							<- dit is de onClick method van AjaxLink	, de behavior is een inner class van AjaxLink	,
/s
WebMarkupContainer2Page$1.onClick(AjaxRequestTarget) line: 26 (out of synch)	
/=
		repeatingView.add(new AjaxLink<Void>(id) {
			@Override
			public void onClick(AjaxRequestTarget target) {
				boolean b=false;										<- Inderdaad in de onClick method van de AjaxLink	,

/ Einde CLICK LINK WICKET FOLLOWS WICKETPATH IN URL

/ RENDER PAGE AND COMPONENTS 

/ Omdat het een AjaxLink is	, wordt er na deze behavior een AjaxRequestHandler scheduled	, die partial page update XML levert	, en geen PageRequesthandler	, die een hele page geeft	, 
/ we willen weten hoe het gaat met wicket ids bij repeating views	, we moeten dus de page opnieuw opvragen	,

////////////////////////////
/ Elke component (ook een Page) heeft zijn eigen markup	, d
/ Deze wordt set in Component.getMarkup	,

////////////////////////////////////////////////////////
/ MarkupContainer.renderNext (called door .renderAll) looks up component ogv wicket:id in de tag	,

/ de Page heeft alle markup uit het template	,  opgedeeld in stukken,	 elk met een index	,
/ de RepeatingView's markup is startIndex & size in de Page's markup	,
/ de AjaxLinks die een child zijn van de RepeatingView krijgen elk de  markup van de RepeatingView 

/ 13	. 

/ Page sets z'n markup	,
/s
/ stack
	WebMarkupContainer2Page(Component).getMarkup() line: 737	
	WebMarkupContainer2Page(Component).internalRender() line: 2345	
		IMarkupFragment markup = getMarkup();
/cb
	WebMarkupContainer2Page(Component).render() line: 2308	
	WebMarkupContainer2Page(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
			BufferedWebResponse response = renderPage(beforeRenderUrl, requestCycle);
/cb
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
		PageRenderer renderer = Application.get().getPageRendererProvider().get(this);
		renderer.respond((RequestCycle)requestCycle);
/cb
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
				handler.respond(RequestCycle.this);
/cb
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
			IRequestHandler handler = resolveRequestHandler();	/ handler	RenderPageRequestHandler  (id=112)	
				execute(handler);
/cb
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/ debug	,
/s
WebMarkupContainer2Page(Component).getMarkup() line: 737	
		if (markup != null)
/n
		// No parent, than check associated markup files
		if (parent == null)
		{
			// Must be a MarkupContainer to have associated markup file
			if (this instanceof MarkupContainer)
			{
				MarkupContainer container = (MarkupContainer)this;
				Markup associatedMarkup = container.getAssociatedMarkup();
				if (associatedMarkup != null)
				{
					markup = associatedMarkup;								/ writes markup in Component, een Page in dit geval	,
					return markup;

/ 13	. 

/ we komen onverwacht in Component.getMarkup , this=AjaxLink	, vanwege js in <head>	, 
/ hier wordt dus al de markup set in de AjaxLink	,

/c
/ stack
	WebMarkupContainer2Page$1(Component).getMarkup() line: 734	
	WebMarkupContainer2Page$1(Component).getMarkupTag() line: 1438	
		IMarkupFragment markup = getMarkup();
/cb
	WebMarkupContainer2Page$1(Component).getMarkupIdFromMarkup() line: 764	
		ComponentTag tag = getMarkupTag();
/cb
	WebMarkupContainer2Page$1(Component).getMarkupIdImpl() line: 1495	
			id = getMarkupIdFromMarkup();
/cb
	DefaultMarkupIdGenerator.generateMarkupId(Component, boolean) line: 32	
		Object storedMarkupId = component.getMarkupIdImpl();
/cb
	WebMarkupContainer2Page$1(Component).getMarkupId(boolean) line: 1524	
		IMarkupIdGenerator markupIdGenerator = getApplication().getMarkupSettings().getMarkupIdGenerator();
		String markupId = markupIdGenerator.generateMarkupId(this, createIfDoesNotExist);	
/cb
	WebMarkupContainer2Page$1(Component).getMarkupId() line: 1544	
	AjaxLink$1(AbstractDefaultAjaxBehavior).renderAjaxAttributes(Component, AjaxRequestAttributes) line: 210	
			if (component instanceof Page == false)
			{
				String componentId = component.getMarkupId();										<-	klopt, staat in Wicket.Ajax.ajax	, die calls
																						/ jQuery(el).on(type, selector, data, fn)	,
				attributesJson.put(AjaxAttributeName.MARKUP_ID.jsonName(), componentId);
/cb
	AjaxLink$1(AbstractDefaultAjaxBehavior).renderAjaxAttributes(Component) line: 185	
		AjaxRequestAttributes attributes = getAttributes();
		return renderAjaxAttributes(component, attributes);
/cb
	AjaxLink$1(AbstractDefaultAjaxBehavior).getCallbackScript(Component) line: 465	
		CharSequence ajaxAttributes = renderAjaxAttributes(component);
		return "Wicket.Ajax.ajax(" + ajaxAttributes + ");";
/cb
	AjaxLink$1(AjaxEventBehavior).renderHead(Component, IHeaderResponse) line: 94	
			CharSequence js = getCallbackScript(component);										<-
/cb
	WebMarkupContainer2Page$1(Component).internalRenderHead(HtmlHeaderContainer) line: 2727	
			// Then ask all behaviors
			for (Behavior behavior : getBehaviors())		/ behavior	AjaxLink$1  (id=248)	= new AjaxEventBehavior	,	
			{
				if (isBehaviorAccepted(behavior))
				{
					if (response.wasRendered(behavior) == false)
					{
						behavior.renderHead(this, response);
/cb
	ChildFirstHeaderRenderStrategy$1.component(Component, IVisit<Void>) line: 85	
	ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component, Visit<Void>) line: 96	
	ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component, Visit<Void>) line: 87	
	ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component, Visit<Void>) line: 87	
	ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component) line: 51	
	ChildFirstHeaderRenderStrategy.renderChildHeaders(HtmlHeaderContainer, Component) line: 78	
	ChildFirstHeaderRenderStrategy.renderHeader(HtmlHeaderContainer, HtmlHeaderContainer$HeaderStreamState, Component) line: 57	
		// Then its child hierarchy
		renderChildHeaders(headerContainer, rootComponent);
/cb
	HtmlHeaderContainer.onComponentTagBody(MarkupStream, ComponentTag) line: 171	
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
	HtmlHeaderContainer(Component).internalRenderComponent() line: 2565	
				renderComponentTag(tag);
				getMarkupSourcingStrategy().onComponentTagBody(this, markupStream, tag);			<-
/cb
	HtmlHeaderContainer(MarkupContainer).onRender() line: 1698	
	HtmlHeaderContainer(Component).internalRender() line: 2380	
	HtmlHeaderContainer(Component).render() line: 2308	
	WebMarkupContainer2Page(MarkupContainer).renderNext(MarkupStream) line: 1524	
				component.render();								/ component	HtmlHeaderContainer  (id=232)				<-
/cb
	WebMarkupContainer2Page(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
		while (markupStream.hasMore())
			boolean rawMarkup = renderNext(markupStream);
/cb
	WebMarkupContainer2Page(Page).onRender() line: 879	
	WebMarkupContainer2Page(WebPage).onRender() line: 141	
	WebMarkupContainer2Page(Component).internalRender() line: 2380	
	WebMarkupContainer2Page(Component).render() line: 2308	
	WebMarkupContainer2Page(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/ debug	,
/s
WebMarkupContainer2Page$1(Component).getMarkup() line: 734			/ this AjaxLink	
		if (markup != null)
/n
		if (parent == null)
/n											/j bij Page	,
		// Ask the parent for find the markup for me
		markup = parent.getMarkup(this);
/s
RepeatingView(AbstractRepeater).getMarkup(Component) line: 153	
		// each direct child gets the markup of this repeater
		return getMarkup();
/s
RepeatingView(Component).getMarkup() line: 728						/ this RepeatingView
		if (markup != null)
/n
		if (parent == null)
n
		// Ask the parent for find the markup for me
		markup = parent.getMarkup(this);
/s
WebMarkupContainer2Page(MarkupContainer).getMarkup(Component) line: 502	
		// Delegate request to attached markup sourcing strategy.
		return getMarkupSourcingStrategy().getMarkup(this, child);
/s
DefaultMarkupSourcingStrategy.getMarkup(MarkupContainer, Component) line: 81	
/=
	public IMarkupFragment getMarkup(final MarkupContainer container, final Component child)
container	WebMarkupContainer2Page  (id=122)	
child	RepeatingView  (id=255)	

		IMarkupFragment containerMarkup = container.getMarkup();
/ is er, markup van de Page,
		// Find the child's markup
		IMarkupFragment childMarkup = containerMarkup.find(child.getId());

containerMarkup	Markup  (id=186)	
	markupElements	Collections$UnmodifiableRandomAccessList<E>  (id=190)	
	markupResourceStream	MarkupResourceStream  (id=193)	
childMarkup	MarkupFragment  (id=328)	
	markup	Markup  (id=186)	
	size	3	
	startIndex	5	

			return childMarkup;
/t
RepeatingView(Component).getMarkup() line: 756				/ this RepeatingView
		// Ask the parent for find the markup for me
		markup = parent.getMarkup(this);
		return markup;
/t
WebMarkupContainer2Page$1(Component).getMarkup() line: 756	 	/ this [AjaxLink [Component id = 1]]
		// Ask the parent for find the markup for me
		markup = parent.getMarkup(this);
/d
this	WebMarkupContainer2Page$1  (id=240)	
	markup	MarkupFragment  (id=328)			/ = markup RepeatingView
		markup	Markup  (id=186)	
		size	3	
		startIndex	5	

		return markup;

/ 13	. 

/ render the rest of the page	, after de <head>	, 
 
/c

WebMarkupContainer2Page(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
		while (markupStream.hasMore())														/ er is meer , na <head>
		{
			// Render the markup element
			boolean rawMarkup = renderNext(markupStream);
markupStream	MarkupStream  (id=2626)	
	current	ComponentTag  (id=2604)	
	currentIndex	5	
	markup	Markup  (id=2595)			/ hele template	,	

/s
WebMarkupContainer2Page(MarkupContainer).renderNext(MarkupStream) line: 1495			<- hier komen we steeds	,
		if ((element instanceof ComponentTag) && !markupStream.atCloseTag())
		{
			// Get element as tag
			final ComponentTag tag = (ComponentTag)element;
<a wicket:id="names">
			// Get component id
			final String id = tag.getId(); 							/ "names"

			// Get the component for the id from the given container
/ LOOKUP COMPONENT GIVEN WICKETID
			Component component = get(id);										/ this Page
component	RepeatingView  (id=2684)	
	markup	MarkupFragment  (id=2689)		<- iedere component heeft z'n markup	, set in Component.getMarkup	, omdat Wicket.Ajax.ajax tag's id 
																/ wilde , moest eerst de tag resolved	, 
																/ TODO Hoe met NIET ajax components	, een Link bijv	, WH zal hij hem hier vlak onder
																/ met getMarkup() alsnog bepalen	, 
		markup	Markup  (id=2595)	
		size	3	
		startIndex	5	

				component.render();
/s
RepeatingView(Component).internalRender() line: 2346	
				onRender();
/s
RepeatingView(AbstractRepeater).onRender() line: 92					/ this RepeatingView, hier staat wat betekent: render een RepeatingView	,
		Iterator<? extends Component> it = renderIterator();		/ See LOOKUP COMPONENT GIVEN WICKETID, de Page iterates over de tags 
																	/ en looks up component in MarkupContainer.renderNext  (this=Page) met de wicket:id 
																	/ in de tag en doet dan get(id)	, maar RepeatingView iterates over zijn children	,
		while (it.hasNext())
		{
			Component child = it.next(); 		/ [AjaxLink [Component id = 1]]
			renderChild(child);
/s
WebMarkupContainer2Page$1(MarkupContainer).onRender() line: 1698 	/ this [AjaxLink [Component id = 1]]	
		internalRenderComponent();
/s
WebMarkupContainer2Page$1(Component).internalRenderComponent() line: 2508	/ [AjaxLink [Component id = 1]]	
		final IMarkupFragment markup = getMarkup();
this	WebMarkupContainer2Page$1  (id=240)	
	markup	MarkupFragment  (id=328)	
		markup	Markup  (id=186)	
		size	3	
		startIndex	5	

				renderComponentTag(tag);
/s
WebMarkupContainer2Page$1(Component).renderComponentTag(ComponentTag) line: 4001	
			// apply behaviors that are attached to the component tag.
			if (tag.hasBehaviors())
/n
			// Apply behavior modifiers
			List<? extends Behavior> behaviors = getBehaviors();
			if ((behaviors != null) && !behaviors.isEmpty() && !tag.isClose() &&
				(isIgnoreAttributeModifier() == false))
			{
				tag = tag.mutable();
				for (Behavior behavior : behaviors)
				{
					// Components may reject some behavior components
					if (isBehaviorAccepted(behavior))
					{
						behavior.onComponentTag(this, tag);
/s
AjaxLink$1(AbstractAjaxBehavior).onComponentTag(Component, ComponentTag) line: 98	
		onComponentTag(tag);
/s
	/**
	 * Called any time a component that has this handler registered is rendering the component tag.
	 * Use this method e.g. to bind to javascript event handlers of the tag
	 * 
	 * @param tag
	 *            the tag that is rendered
	 */
AjaxLink$1(AbstractAjaxBehavior).onComponentTag(ComponentTag) line: 129	
	{
	}
/t
WebMarkupContainer2Page$1(Component).renderComponentTag(ComponentTag) line: 4034	
			// Write the tag
			tag.writeOutput(getResponse(), !needToRenderTag(null),
				getMarkup().getMarkupResourceStream().getWicketNamespace());

RequestCycle.get().getResponse()
	...
		<a wicket:id="names" id="id19" href="javascript:;">

/ Einde RENDER PAGE AND COMPONENTS 

/ SAMENVATTING REPEATINGVIEW WICKETID

<script type="text/javascript">
/*<![CDATA[*/
Wicket.Event.add(window, "domready", function(event) { 
	Wicket.Ajax.ajax({"u":"./webmarkupcontainer2?0-2.IBehaviorListener.0-names-1","c":"id11","e":"click"});;
	Wicket.Ajax.ajax({"u":"./webmarkupcontainer2?0-2.IBehaviorListener.0-names-2","c":"id22","e":"click"});;
;});
/*]]>*/
</script>

<ul>
	<li>
		<a wicket:id="names" id="id11" href="javascript:;">link</a>
		<a wicket:id="names" id="id22" href="javascript:;">link</a>
	</li>
</ul>

/ we zien in tag van child van een repeatingview niet de wicket id van de child	, 1 of 2 bijv	, want de tag van de child is die van de repeating view	, dus we zien de wicket id van de repeater	, 
/ maar de child krijgt wel een id	, en met Wicket.Ajax.ajax wordt een controller bind, die een ajax call zal doen	op een bepaalde url	, 
/ deze url bevat de wicketpath van de child van de repeater	, -names-1	, en de type van de behavior, zodat hij weet welke method hij moet call	, bijv .onRequest	, en de index van de behavior in de list van behaviors in de component	,  

/ Einde SAMENVATTING REPEATINGVIEW WICKETID



/ Einde REPEATINGVIEW WICKETID




/ LINK WITH CHILD TO REPEATINGVIEW WITH WEBMARKUPCONTAINER 

/ ws wicket-examples-step-by-step
/ prog WebMarkupContainer1Page

public class WebMarkupContainer1Page extends WebPage {

		Label result=new Label("result", new Model<String>());
		result.setOutputMarkupId(true);
		add(result);
		
		List<X1>list=new ArrayList<X1>();
		list.add(new X1("Foo",7));
		list.add(new X1("Bar",13));
		
		RepeatingView repeatingView=new RepeatingView("x");
		add(repeatingView);
		for(X1 x1:list){
			String id=repeatingView.newChildId();
			WebMarkupContainer webMarkupContainer=new WebMarkupContainer(id);
			repeatingView.add(webMarkupContainer);
			AjaxLink<Void>link=new AjaxLink<Void>("link") {
				@Override
				public void onClick(AjaxRequestTarget target) {
					WebMarkupContainer1Page.this.get("result").setDefaultModelObject(this.getMarkupId());
					target.add(WebMarkupContainer1Page.this.get("result"));
				}
			};
			webMarkupContainer.add(link);
			Label label=new Label("label",x1.getName()+","+x1.getAge());
			link.add(label);
		}
	}

<ul>
	<li wicket:id="x">
		<a wicket:id="link">
			<span wicket:id="label"></span>
		</a>
	</li>
</ul>

/ Het template van elke  WebMarkupContainer is die van de repeater	,	
	<li wicket:id="x">
		<a wicket:id="link">
			<span wicket:id="label"></span>
		</a>
	</li>

/ Dus in Java zien we dat de directe children van de repeater "worden overgeslagen" bij render	,
		
/ we zien in HTML	,

<script type="text/javascript">
/*<![CDATA[*/
Wicket.Event.add(window, "domready", function(event) { 
	Wicket.Ajax.ajax({"u":"./webmarkupcontainer1?0-1.IBehaviorListener.0-x-1-link","c":"link1","e":"click"});;
	Wicket.Ajax.ajax({"u":"./webmarkupcontainer1?0-1.IBehaviorListener.0-x-2-link","c":"link2","e":"click"});;
;});
/*]]>*/
</script>

<ul>
	<li wicket:id="x">
		<a wicket:id="link" id="link1" href="javascript:;">
			<span wicket:id="label">Foo,7</span>
		</a>
	</li><li wicket:id="x">
		<a wicket:id="link" id="link2" href="javascript:;">
			<span wicket:id="label">Bar,13</span>
		</a>
	</li>
</ul>

<body>
<ul>
	<li wicket:id="x">
		<a wicket:id="link" href="./webmarkupcontainer1?0-1.ILinkListener-x-1-link">
			<span wicket:id="label">Foo,7</span>
		</a>
	</li><li wicket:id="x">
		<a wicket:id="link" href="./webmarkupcontainer1?0-1.ILinkListener-x-2-link">
			<span wicket:id="label">Bar,13</span>
		</a>
	</li>
</ul>

/ we zien de repeatingView.childId() terug in x-1-link en x-2-link	, 

</body>

/ DEBUG

/ 13	. 

/ markup bepalen	,

/ Als 1ste is de Page's markup bepaald	,

/ Daarna	,

/stack
/s
	WebMarkupContainer1Page$1(Component).getMarkup() line: 728	
	WebMarkupContainer1Page$1(Component).getMarkupTag() line: 1438	
	WebMarkupContainer1Page$1(Component).getMarkupIdFromMarkup() line: 764	
	WebMarkupContainer1Page$1(Component).getMarkupIdImpl() line: 1495	
	DefaultMarkupIdGenerator.generateMarkupId(Component, boolean) line: 32	
	WebMarkupContainer1Page$1(Component).getMarkupId(boolean) line: 1524	
	WebMarkupContainer1Page$1(Component).getMarkupId() line: 1544	
	AjaxLink$1(AbstractDefaultAjaxBehavior).renderAjaxAttributes(Component, AjaxRequestAttributes) line: 210	
	AjaxLink$1(AbstractDefaultAjaxBehavior).renderAjaxAttributes(Component) line: 185	
	AjaxLink$1(AbstractDefaultAjaxBehavior).getCallbackScript(Component) line: 465	
	AjaxLink$1(AjaxEventBehavior).renderHead(Component, IHeaderResponse) line: 94	
			CharSequence js = getCallbackScript(component);			/ component [AjaxLink [Component id = link]]
/cb
	WebMarkupContainer1Page$1(Component).internalRenderHead(HtmlHeaderContainer) line: 2727	
/=
	public void internalRenderHead(final HtmlHeaderContainer container)			/ this	WebMarkupContainer1Page$1  (id=810) 	
			// Then ask all behaviors
			for (Behavior behavior : getBehaviors())
			{
				if (isBehaviorAccepted(behavior))
				{
					if (response.wasRendered(behavior) == false)
					{
						behavior.renderHead(this, response);
/cb
	ChildFirstHeaderRenderStrategy$1.component(Component, IVisit<Void>) line: 85	
	ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component, Visit<Void>) line: 96	
	ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component, Visit<Void>) line: 87	
	ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component, Visit<Void>) line: 87	
	ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component, Visit<Void>) line: 87	
	ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component) line: 51	
	ChildFirstHeaderRenderStrategy.renderChildHeaders(HtmlHeaderContainer, Component) line: 78	
			new DeepChildFirstVisitor()																		<-<-<-
			{
				@Override
				public void component(final Component component, final IVisit<Void> visit)
				{
					if (component != rootComponent)
					{
						component.internalRenderHead(headerContainer);
/cb
	ChildFirstHeaderRenderStrategy.renderHeader(HtmlHeaderContainer, HtmlHeaderContainer$HeaderStreamState, Component) line: 57	
		// Then its child hierarchy
		renderChildHeaders(headerContainer, rootComponent);
/cb
	HtmlHeaderContainer.onComponentTagBody(MarkupStream, ComponentTag) line: 171			/ this	HtmlHeaderContainer  (id=802)	
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
	HtmlHeaderContainer(Component).internalRenderComponent() line: 2565	
	HtmlHeaderContainer(MarkupContainer).onRender() line: 1698	
	HtmlHeaderContainer(Component).internalRender() line: 2380	
	HtmlHeaderContainer(Component).render() line: 2308	
	WebMarkupContainer1Page(MarkupContainer).renderNext(MarkupStream) line: 1524	
	WebMarkupContainer1Page(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	WebMarkupContainer1Page(Page).onRender() line: 879	
	WebMarkupContainer1Page(WebPage).onRender() line: 141	
	WebMarkupContainer1Page(Component).internalRender() line: 2380	
	WebMarkupContainer1Page(Component).render() line: 2308	
	WebMarkupContainer1Page(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/debug
/s
WebMarkupContainer1Page$1(Component).getMarkup() line: 728			/ this	WebMarkupContainer1Page$1  (id=810) [AjaxLink [Component id = link]]	
		if (markup != null)
/n
		if (parent == null)
/n
		markup = parent.getMarkup(this);		
/s
WebMarkupContainer(MarkupContainer).getMarkup(Component) line: 502		/ this	WebMarkupContainer  (id=835)	
															/ schakelt helper in, die in this de markup van de child finds	, 
															/ een repeater schakelt geen helper in	, die geeft zijn eigen markup af	,
/=
	public IMarkupFragment getMarkup(final Component child)				/ child= [AjaxLink [Component id = link]]

		return getMarkupSourcingStrategy().getMarkup(this, child);					
/s
DefaultMarkupSourcingStrategy.getMarkup(MarkupContainer, Component) line: 81	/ helper	, finds markup child in container=caller	,	
/=
	public IMarkupFragment getMarkup(final MarkupContainer container, final Component child)
container	WebMarkupContainer  (id=835)	[WebMarkupContainer [Component id = 1]]				/ 1 = repeater.childId()
child	WebMarkupContainer1Page$1  (id=810)	 [AjaxLink [Component id = link]] 

		IMarkupFragment containerMarkup = container.getMarkup();				<- nu		
		IMarkupFragment childMarkup = containerMarkup.find(child.getId());		<- straks
/s
WebMarkupContainer(Component).getMarkup() line: 734	
		if (markup != null)
/n
		if (parent == null)
/n
		markup = parent.getMarkup(this);
/s
RepeatingView(AbstractRepeater).getMarkup(Component) line: 153		/ this	RepeatingView  (id=906)		/ schakelt geen helper in	,
		// each direct child gets the markup of this repeater
		return getMarkup();
/s
RepeatingView(Component).getMarkup() line: 728	
		if (markup != null)
/n
		if (parent == null)
/n
		markup = parent.getMarkup(this);
/s
WebMarkupContainer1Page(MarkupContainer).getMarkup(Component) line: 502		/ this	WebMarkupContainer1Page  (id=776)	/ schakelt helper in	,	
		return getMarkupSourcingStrategy().getMarkup(this, child);
/s
DefaultMarkupSourcingStrategy.getMarkup(MarkupContainer, Component) line: 81	
/=
	public IMarkupFragment getMarkup(final MarkupContainer container, final Component child)
container	WebMarkupContainer1Page  (id=776)	
child	RepeatingView  (id=906)	

		IMarkupFragment containerMarkup = container.getMarkup();		/ 1ste stap	, is er al	,

		// Find the child's markup
		IMarkupFragment childMarkup = containerMarkup.find(child.getId());	/ 2de stap	,
childMarkup	MarkupFragment  (id=935)	
	markup	Markup  (id=925)	
	size	10	
	startIndex	8	
<li wicket:id="x">
		<a wicket:id="link">
			<span wicket:id="label"></span>
		</a>
	</li>
/ Klopt	,
childMarkup	MarkupFragment  (id=935)	
	markup	Markup  (id=925)	
		markupElements	Collections$UnmodifiableRandomAccessList<E>  (id=928)	
			[8]	ComponentTag  (id=956)				<li wicket:id="x">
			[9]	RawMarkup  (id=958)	
			[10]	ComponentTag  (id=959)				<a wicket:id="link">	
			[11]	RawMarkup  (id=960)	
			[12]	ComponentTag  (id=962)					<span wicket:id="label">	
			[13]	ComponentTag  (id=963)					</span>
			[14]	RawMarkup  (id=968)	
			[15]	ComponentTag  (id=969)				</a>	
			[16]	RawMarkup  (id=971)	
			[17]	ComponentTag  (id=975)			</li>	

			return childMarkup;										/ child	RepeatingView  (id=906)	
/t
RepeatingView(Component).getMarkup() line: 756	
		markup = parent.getMarkup(this);			/ this	RepeatingView  (id=906)	
/t
WebMarkupContainer(Component).getMarkup() line: 755	
		markup = parent.getMarkup(this);			/ this	WebMarkupContainer  (id=835)	heeft markup van z'n parent=repeater	,
/t
DefaultMarkupSourcingStrategy.getMarkup(MarkupContainer, Component) line: 82	
		IMarkupFragment containerMarkup = container.getMarkup();				/ 1ste stap	,
/d
		// Find the child's markup
		IMarkupFragment childMarkup = containerMarkup.find(child.getId());	/ 2de stap	, child [AjaxLink [Component id = link]]
childMarkup	MarkupFragment  (id=1080)	
	markup	MarkupFragment  (id=935)	
		markup	Markup  (id=925)	
			markupElements	Collections$UnmodifiableRandomAccessList<E>  (id=928)	
				[0]	RawMarkup  (id=946)	
				[1]	ComponentTag  (id=798)	
				[2]	RawMarkup  (id=947)	
				[3]	ComponentTag  (id=948)	
				[4]	RawMarkup  (id=949)	
				[5]	ComponentTag  (id=950)	
				[6]	ComponentTag  (id=953)	
				[7]	RawMarkup  (id=955)	
				[8]	ComponentTag  (id=956)			/ <li wicket:id="x">	
				[9]	RawMarkup  (id=958)	
				[10]	ComponentTag  (id=959)		/ 	<a wicket:id="link">	
				[11]	RawMarkup  (id=960)	
				[12]	ComponentTag  (id=962)		/ 		<span wicket:id="label">	
				[13]	ComponentTag  (id=963)				</span>	
				[14]	RawMarkup  (id=968)	
				[15]	ComponentTag  (id=969)		/   </a>
				[16]	RawMarkup  (id=971)	
				[17]	ComponentTag  (id=975)	
				[18]	RawMarkup  (id=976)	
			markupResourceStream	MarkupResourceStream  (id=929)	
		size	10	
		startIndex	8	
	size	6	
	startIndex	2	 									/ Dit is index 2 binnen [8,18)	, dus  [10,16)
/ Klopt	,

			return childMarkup;			/ child [AjaxLink [Component id = link]]
/t
WebMarkupContainer1Page$1(Component).getMarkup() line: 755	
		markup = parent.getMarkup(this);							/ this [AjaxLink [Component id = link]] 
/d
		return markup;

/ 13	. 

/c

/ render Label	,

/ stack
/s
	Label(Component).getMarkup() line: 734	
		if (markup != null)								/ Label was niet in js in de <head>
/n
		if (parent == null)
/n
		markup = parent.getMarkup(this); 	/ schakelt helper in	,
this	Label  (id=1292)	
	markup	MarkupFragment  (id=1384)	
		markup	Markup  (id=925)	
		size	2	
		startIndex	5	
/cb
	Label(Component).internalRender() line: 2345	
	Label(Component).render() line: 2308	
	WebMarkupContainer1Page(MarkupContainer).renderNext(MarkupStream) line: 1524	

		// Get the current markup element
		final MarkupElement element = markupStream.get();			/ <h3 wicket:id="result">	/ Dit is 1 tag	, maar de markup die wordt opgezocht	
																	/ heeft 2 tags	, ook de sluit tag	,
			// Get element as tag
			final ComponentTag tag = (ComponentTag)element;
			// Get component id
			final String id = tag.getId();
			// Get the component for the id from the given container
			Component component = get(id);								/ Label [Component id = result]

				component.render();
/cb
	WebMarkupContainer1Page(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	

markupStream	MarkupStream  (id=796)	
	current	ComponentTag  (id=950)	
	currentIndex	5	
	markup	Markup  (id=925)	
		markupElements	Collections$UnmodifiableRandomAccessList<E>  (id=928)	
			[5]	ComponentTag  (id=950)											/ <h3 wicket:id="result">
			[6]	ComponentTag  (id=953)											/ </h3>

		while (markupStream.hasMore())
		{
			// Render the markup element
			boolean rawMarkup = renderNext(markupStream);
/cb
	WebMarkupContainer1Page(Page).onRender() line: 879	
	WebMarkupContainer1Page(WebPage).onRender() line: 141	
	WebMarkupContainer1Page(Component).internalRender() line: 2380	
	WebMarkupContainer1Page(Component).render() line: 2308	
	WebMarkupContainer1Page(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/ debug
/s
Label(Component).internalRender() line: 2380		/ this Label("result")	
		IMarkupFragment markup = getMarkup();
/d
<h3 wicket:id="result"></h3>
				onRender();

/ 13

/c

/ render repeater	,
/ RENDER REPEATER

/ stack	,
/s
WebMarkupContainer1Page(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1746	
		while (markupStream.hasMore())
			// Render the markup element
			boolean rawMarkup = renderNext(markupStream);
/s
	WebMarkupContainer1Page(MarkupContainer).renderNext(MarkupStream) line: 1507	
		// Get the current markup element
		final MarkupElement element = markupStream.get();		/ <li wicket:id="x">

		// If it's a tag like <wicket..> or <span wicket:id="..." >
		if ((element instanceof ComponentTag) && !markupStream.atCloseTag())
		{
			// Get element as tag
			final ComponentTag tag = (ComponentTag)element;	 / <li wicket:id="x">

			// Get component id
			final String id = tag.getId();	/ "x"

			// Get the component for the id from the given container
			Component component = get(id);								/ component	RepeatingView  (id=906)	

				component.render();
/cb
	WebMarkupContainer1Page(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	WebMarkupContainer1Page(Page).onRender() line: 879	
	WebMarkupContainer1Page(WebPage).onRender() line: 141	
	WebMarkupContainer1Page(Component).internalRender() line: 2380	
	WebMarkupContainer1Page(Component).render() line: 2308	
	WebMarkupContainer1Page(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/ debug	,
/s
RepeatingView(Component).internalRender() line: 2345	
		IMarkupFragment markup = getMarkup();			/ is er al	, door de js	, = markup van de repeater	,
markup	MarkupFragment  (id=935)		
	markup	Markup  (id=925)	
	size	10	
	startIndex	8	
<li wicket:id="x">																	
		<a wicket:id="link">
			<span wicket:id="label"></span>
		</a>
</li>
				onRender();
/s
RepeatingView(AbstractRepeater).onRender() line: 92					/ een repeater heeft een markup	, zijn children krijgen deze markup , en iterates over zijn children	, 
		Iterator<? extends Component> it = renderIterator();
		while (it.hasNext())
		{
			Component child = it.next();
			renderChild(child);
/s
RepeatingView(AbstractRepeater).renderChild(Component) line: 115	
		child.render();
/s
WebMarkupContainer(Component).internalRender() line: 2345	/ this [WebMarkupContainer [Component id = 1]]	
		IMarkupFragment markup = getMarkup();					/ heeft markup van repeater	,	dit is dus ook de markup van de WebMarkupContainer	,
<li wicket:id="x">
		<a wicket:id="link">
			<span wicket:id="label"></span>
		</a>
	</li>

				onRender();
/s
WebMarkupContainer(Component).internalRenderComponent() line: 2509		/ this	WebMarkupContainer  (id=835)	
															/ print eerst tag	, 
															/ dan de body	,  daarvoor wordt .renderAll called	, die iterates over de tags in de body	, 																	/ waarvan er maar 1 is hier	, 
		final IMarkupFragment markup = getMarkup();
<li wicket:id="x">											/ print eerst deze	,
		<a wicket:id="link">								/ . renderAll iterates over de tags in de body	, 
																/ voor deze AjaxLink geldt precies hetzelfde: print tag, en daarna de body	, 
															/ waarvoor de .renderAll word called	, die iterates over de tags in de body	, 
															/ waarvan er maar 1 is hier	, 
			<span wicket:id="label"></span>
		</a>
	</li>

		// Get mutable copy of next tag
		final ComponentTag openTag = markupStream.getTag();
		final ComponentTag tag = openTag.mutable(); 			/ <li wicket:id="x">

		// Call any tag handler
		onComponentTag(tag);
				renderComponentTag(tag); 		/ renders	 <li wicket:id="x">

			markupStream.next();
			if (tag.isOpen())
			{
				// Render the body. The default strategy will simply call the component's
				// onComponentTagBody() implementation.
				getMarkupSourcingStrategy().onComponentTagBody(this, markupStream, tag);
/s
DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
		component.onComponentTagBody(markupStream, openTag);
/s
WebMarkupContainer(MarkupContainer).onComponentTagBody(MarkupStream, ComponentTag) line: 1657		/ we komen weer in een MarkupContainer	,
		renderComponentTagBody(markupStream, openTag);
/s
WebMarkupContainer(MarkupContainer).renderComponentTagBody(MarkupStream, ComponentTag) line: 1734	
			renderAll(markupStream, openTag);
/s
WebMarkupContainer(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1746			/ this	WebMarkupContainer  (id=835)	

this	WebMarkupContainer  (id=835)	
openTag	ComponentTag  (id=243)				/ <li wicket:id="x">
markupStream	MarkupStream  (id=1463)	
	current	RawMarkup  (id=958)	
	currentIndex	1	
	markup	MarkupFragment  (id=935)	
		markup	Markup  (id=925)	
			markupElements	Collections$UnmodifiableRandomAccessList<E>  (id=928)	
				[0]	RawMarkup  (id=946)	
				[1]	ComponentTag  (id=798)	
				[2]	RawMarkup  (id=947)	
				[3]	ComponentTag  (id=948)	
				[4]	RawMarkup  (id=949)	
				[5]	ComponentTag  (id=950)	
				[6]	ComponentTag  (id=953)	
				[7]	RawMarkup  (id=955)	
				[8]	ComponentTag  (id=956)		<li wicket:id="x">
				[9]	RawMarkup  (id=958)									<- hier zijn we	, dat is het begin van de body van de <li wicket:id="x"> tag
				[10]	ComponentTag  (id=959)		<a wicket:id="link">
				[11]	RawMarkup  (id=960)	
				[12]	ComponentTag  (id=962)	
				[13]	ComponentTag  (id=963)	
				[14]	RawMarkup  (id=968)	
				[15]	ComponentTag  (id=969)	
				[16]	RawMarkup  (id=971)	
				[17]	ComponentTag  (id=975)	
				[18]	RawMarkup  (id=976)	
			markupResourceStream	MarkupResourceStream  (id=929)	
		size	10	
		startIndex	8	

		while (markupStream.hasMore())
		{
			// Render the markup element
			boolean rawMarkup = renderNext(markupStream);
/s
WebMarkupContainer(MarkupContainer).renderNext(MarkupStream) line: 1504	
		final MarkupElement element = markupStream.get();

		// If it's a tag like <wicket..> or <span wicket:id="..." >
		if ((element instanceof ComponentTag) && !markupStream.atCloseTag())
		{
			// Get element as tag
			final ComponentTag tag = (ComponentTag)element;			/ <a wicket:id="link">

			// Get component id
			final String id = tag.getId();

			// Get the component for the id from the given container
			Component component = get(id);								/ [AjaxLink [Component id = link]]

				component.render();
/s
WebMarkupContainer1Page$1(Component).internalRenderComponent() line: 2517	
		final IMarkupFragment markup = getMarkup();
<a wicket:id="link">
			<span wicket:id="label"></span>
		</a>

		// Get mutable copy of next tag
		final ComponentTag openTag = markupStream.getTag();
		final ComponentTag tag = openTag.mutable();
<a wicket:id="link">

		// Call any tag handler
		onComponentTag(tag);
<a wicket:id="link" id="link1" href="javascript:;">

				renderComponentTag(tag);
	<li wicket:id="x">
		<a wicket:id="link" id="link1" href="javascript:;">								<-

			// Render the body only if open-body-close. Do not render if open-close.
			if (tag.isOpen())
			{
				// Render the body. The default strategy will simply call the component's
				// onComponentTagBody() implementation.
				getMarkupSourcingStrategy().onComponentTagBody(this, markupStream, tag);
/s
DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
		component.onComponentTagBody(markupStream, openTag);
/s
WebMarkupContainer1Page$1(AbstractLink).onComponentTagBody(MarkupStream, ComponentTag) line: 72			/ this [AjaxLink [Component id = link]]
		// Get a copy of the body model from the getBody() method. This method could be overridden.
		IModel<?> tmpBodyModel = getBody();
null
		else
		{
			// Render the body of the link
			super.onComponentTagBody(markupStream, openTag);
/s
WebMarkupContainer1Page$1(MarkupContainer).onComponentTagBody(MarkupStream, ComponentTag) line: 1657	
		renderComponentTagBody(markupStream, openTag);
/s
WebMarkupContainer1Page$1(MarkupContainer).renderComponentTagBody(MarkupStream, ComponentTag) line: 1734	
		if (render)
		{
			renderAll(markupStream, openTag);
/s
WebMarkupContainer1Page$1(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1746	
		while (markupStream.hasMore())
		{
			// Render the markup element
			boolean rawMarkup = renderNext(markupStream);
/s
WebMarkupContainer1Page$1(MarkupContainer).renderNext(MarkupStream) line: 1504	
		// Get the current markup element
		final MarkupElement element = markupStream.get();

		// If it's a tag like <wicket..> or <span wicket:id="..." >
		if ((element instanceof ComponentTag) && !markupStream.atCloseTag())
		{
			// Get element as tag
			final ComponentTag tag = (ComponentTag)element;		/ <span wicket:id="label">

			// Get component id
			final String id = tag.getId();

			// Get the component for the id from the given container
			Component component = get(id);						/ component	Label  (id=828)	
/ Afgemaakt, 	see STACKTRACE RENDER WEBMARKUPCONTAINERS WITH REPEATER









/ Einde DEBUG

/ Einde LINK WITH CHILD TO REPEATINGVIEW WITH WEBMARKUPCONTAINER 

/ WEBMARKUPCONTAINER NOT IN REPEATER 

/ We kunnen WH een WebMarkupContainer link aan WH elke tag	, 

$ vi WebMarkupContainer1bPage.java

		Label result=new Label("result", new Model<String>());
		result.setOutputMarkupId(true);
		add(result);
		
		List<X1>list=new ArrayList<X1>();
		list.add(new X1("Foo",7));
		list.add(new X1("Bar",13));
		

		WebMarkupContainer webMarkupContainer=new WebMarkupContainer("11");
		add(webMarkupContainer);
		AjaxLink<Void>link=new AjaxLink<Void>("link") {
			
			@Override
			public void onClick(AjaxRequestTarget target) {
				WebMarkupContainer1bPage.this.get("result").setDefaultModelObject(this.getMarkupId());
				target.add(WebMarkupContainer1bPage.this.get("result"));
			}
		};
		webMarkupContainer.add(link);
		Label label=new Label("label",list.get(0).getName()+","+list.get(0).getAge());
		link.add(label);

		webMarkupContainer=new WebMarkupContainer("12");
		add(webMarkupContainer);
		link=new AjaxLink<Void>("link") {
			
			@Override
			public void onClick(AjaxRequestTarget target) {
				WebMarkupContainer1bPage.this.get("result").setDefaultModelObject(this.getMarkupId());
				target.add(WebMarkupContainer1bPage.this.get("result"));
			}
		};
		webMarkupContainer.add(link);
		label=new Label("label",list.get(1).getName()+","+list.get(1).getAge());
		link.add(label);


$ vi WebMarkupContainer1bPage.html

<h3 wicket:id="result"></h3>
<ul>
	<li wicket:id="11">
		<a wicket:id="link">
			<span wicket:id="label"></span>
		</a>
	</li>
	<li wicket:id="12">
		<a wicket:id="link">
			<span wicket:id="label"></span>
		</a>
	</li>
</ul>

/ OK	,

/ Einde WEBMARKUPCONTAINER NOT IN REPEATER 

/ PANEL IN REPEATER WITH AND WITHOUT REPEATER

/ proj wicket-examples-step-by-step 

WebMarkupContainer1Page			/ WebMarkupContainers in repeater	,
WebMarkupContainer1bPage		/ 2 WebMarkupContainers , niet in repeater	,
WePanel1Page, WePanel1Panel		/ Panels in repeater
WePanel1bPage, WePanel1Panel		/ 2 Panels,  niet in repeater		, same WePanel1Panel ! 

/ we use 	,

$ vi X2.java

public class X2 {
	private String name;
	private Integer age;
	public X2(String name,Integer age) {
		setName(name);
		setAge(age);
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public Integer getAge() {
		return age;
	}
	public void setAge(Integer age) {
		this.age = age;
	}
}


 7	. 

/ With repeater	,

/ prog WePanel1Page, WePanel1Panel 

public class WePanel1Page extends WebPage {
	
	public WePanel1Page() {
		
		Label result=new Label("result", new Model<String>());
		result.setOutputMarkupId(true);
		add(result);
		
		List<X2>list=new ArrayList<X2>();
		list.add(new X2("Foo",7));
		list.add(new X2("Bar",13));
		
		RepeatingView repeatingView=new RepeatingView("x");
		add(repeatingView);
		for(final X2 x2:list){
			String id=repeatingView.newChildId();
			Panel panel=new WePanel1Panel(id) {
				@Override
				void click(AjaxRequestTarget target) {
					WePanel1Page.this.get("result").setDefaultModelObject(this.getMarkupId());
					target.add(WePanel1Page.this.get("result"));
				}
				@Override
				X2 getX2() {
					return x2;
				}
			};
			repeatingView.add(panel);
		}
	}
}

public abstract class WePanel1Panel extends Panel {

	public WePanel1Panel(String id) {
		super(id);
		AjaxLink<Void>link=new AjaxLink<Void>("link") {
			@Override
			public void onClick(AjaxRequestTarget target) {
				WePanel1Panel.this.click(target);
			}
		};
		add(link);
		Label label=new Label("label",getX2().getName()+","+getX2().getAge());
		link.add(label);
	}
	abstract void click(AjaxRequestTarget target);
	abstract X2 getX2();
}

$ less WePanel1Page.html

<body>
	<h3 wicket:id="result"></h3>
	<ul>
		<li wicket:id="x">
		</li>
</ul>
</body>

$ less WePanel1Panel.html

<wicket:panel>
	<a wicket:id="link">
		<span wicket:id="label"></span>
	</a>
</wicket:panel>


/ we zien in HTML	,

<script type="text/javascript">
/*<![CDATA[*/
Wicket.Event.add(window, "domready", function(event) { 
	Wicket.Ajax.ajax({"u":"./wepanel1?1-1.IBehaviorListener.0-x-1-link","c":"link6","e":"click"});;
	Wicket.Ajax.ajax({"u":"./wepanel1?1-1.IBehaviorListener.0-x-2-link","c":"link7","e":"click"});;
;});
/*]]>*/
</script>

<ul>
		<li wicket:id="x"><wicket:panel>
			<a wicket:id="link" id="link6" href="javascript:;">
				<span wicket:id="label">Foo,7</span>
			</a>
		</wicket:panel></li>
			<li wicket:id="x"><wicket:panel>
				<a wicket:id="link" id="link7" href="javascript:;">
					<span wicket:id="label">Bar,13</span>
				</a>
		</wicket:panel></li>
</ul>

/ 7	.  

/ Without repeater	,

public class WePanel1bPage extends WebPage {
	
	public WePanel1bPage() {
		
		Label result=new Label("result", new Model<String>());
		result.setOutputMarkupId(true);
		add(result);
		
		final List<X2>list=new ArrayList<X2>();
		list.add(new X2("Foo",7));
		list.add(new X2("Bar",13));
		
		Panel panel=new WePanel1Panel("13") {
			@Override
			void click(AjaxRequestTarget target) {
				WePanel1bPage.this.get("result").setDefaultModelObject(this.getMarkupId());
				target.add(WePanel1bPage.this.get("result"));
			}
			@Override
			X2 getX2() {
				return list.get(0);
			}
		};
		add(panel);
		
		panel=new WePanel1Panel("77") {
			@Override
			void click(AjaxRequestTarget target) {
				WePanel1bPage.this.get("result").setDefaultModelObject(this.getMarkupId());
				target.add(WePanel1bPage.this.get("result"));
			}
			@Override
			X2 getX2() {
				return list.get(1);
			}
		};
		add(panel);

	}

$ less WePanel1bPage.html

<body>
	<h3 wicket:id="result"></h3>
	<ul>
		<li wicket:id="13">
		</li>
		<li wicket:id="77">
		</li>
</ul>
</body>

$ less WePanel1Panel.html

<wicket:panel>
	<a wicket:id="link">
		<span wicket:id="label"></span>
	</a>
</wicket:panel>

/ we zien in HTML	,

<ul>
		<li wicket:id="13"><wicket:panel>
			<a wicket:id="link" id="link1" href="javascript:;">
				<span wicket:id="label">Foo,7</span>
			</a>
		</wicket:panel></li>
		<li wicket:id="77"><wicket:panel>
			<a wicket:id="link" id="link2" href="javascript:;">
				<span wicket:id="label">Bar,13</span>
			</a>
		</wicket:panel></li>
</ul>

/ STACKTRACE RENDER WEBMARKUPCONTAINERS WITH REPEATER

/ Geef	,
http://localhost:9090/wicket-examples-step-by-step/repeater/webmarkupcontainer1
/ we zijn in	,
/s
	WebMarkupContainer1Page$1(MarkupContainer).renderNext(MarkupStream) line: 1508	
			// Get element as tag
			final ComponentTag tag = (ComponentTag)element;			/ <span wicket:id="label">
			// Get component id
			final String id = tag.getId();
			// Get the component for the id from the given container
			Component component = get(id);								/ component	Label  (id=349)	
				component.render();
/cb
	WebMarkupContainer1Page$1(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
		while (markupStream.hasMore())
		{
			// Render the markup element
			boolean rawMarkup = renderNext(markupStream);
/cb
	WebMarkupContainer1Page$1(MarkupContainer).renderComponentTagBody(MarkupStream, ComponentTag) line: 1734	
			renderAll(markupStream, openTag);
/cb
	WebMarkupContainer1Page$1(MarkupContainer).onComponentTagBody(MarkupStream, ComponentTag) line: 1657	
		renderComponentTagBody(markupStream, openTag);
/cb
	WebMarkupContainer1Page$1(AbstractLink).onComponentTagBody(MarkupStream, ComponentTag) line: 82	
			super.onComponentTagBody(markupStream, openTag);
/cb
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
		component.onComponentTagBody(markupStream, openTag);
/cb
	WebMarkupContainer1Page$1(Component).internalRenderComponent() line: 2565	
		final IMarkupFragment markup = getMarkup();								/ <a wicket:id="link">
																						<span wicket:id="label"></span>
																					</a>
		final MarkupStream markupStream = new MarkupStream(markup);
		// Get mutable copy of next tag
		final ComponentTag openTag = markupStream.getTag();
		final ComponentTag tag = openTag.mutable();										
		// Call any tag handler
		onComponentTag(tag);												/ <a wicket:id="link" id="link9" href="javascript:;">
				renderComponentTag(tag);
/cb
	WebMarkupContainer1Page$1(MarkupContainer).onRender() line: 1698	
		internalRenderComponent();
/cb
	WebMarkupContainer1Page$1(Component).internalRender() line: 2380	
				onRender();
/cb
	WebMarkupContainer1Page$1(Component).render() line: 2308	
			internalRender();
/cb
	WebMarkupContainer(MarkupContainer).renderNext(MarkupStream) line: 1524	
		// Get the current markup element
		final MarkupElement element = markupStream.get();
			// Get element as tag
			final ComponentTag tag = (ComponentTag)element;		/ <a wicket:id="link">
			// Get component id
			final String id = tag.getId();
			// Get the component for the id from the given container
			Component component = get(id);							/ [AjaxLink [Component id = link]]
				component.render();
/cb
	WebMarkupContainer(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
		while (markupStream.hasMore())
		{
			// Render the markup element
			boolean rawMarkup = renderNext(markupStream);
/cb
	WebMarkupContainer(MarkupContainer).renderComponentTagBody(MarkupStream, ComponentTag) line: 1734	
			renderAll(markupStream, openTag);
/cb
	WebMarkupContainer(MarkupContainer).onComponentTagBody(MarkupStream, ComponentTag) line: 1657	
		renderComponentTagBody(markupStream, openTag);
/cb
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
		component.onComponentTagBody(markupStream, openTag);
/cb
	WebMarkupContainer(Component).internalRenderComponent() line: 2565	
				renderComponentTag(tag);
			markupStream.next();
				getMarkupSourcingStrategy().onComponentTagBody(this, markupStream, tag);
/cb
	WebMarkupContainer(MarkupContainer).onRender() line: 1698	
		internalRenderComponent();
/cb
	WebMarkupContainer(Component).internalRender() line: 2380	
				onRender();
/cb
	WebMarkupContainer(Component).render() line: 2308	
			internalRender();
/cb
	RepeatingView(AbstractRepeater).renderChild(Component) line: 115	
		child.render();
/cb
	RepeatingView(AbstractRepeater).onRender() line: 102	
		Iterator<? extends Component> it = renderIterator();
		while (it.hasNext())
		{
			Component child = it.next();	/ [WebMarkupContainer [Component id = 1]]
			renderChild(child);
/cb
	RepeatingView(Component).internalRender() line: 2380	
				onRender();
/cb
	RepeatingView(Component).render() line: 2308	
			internalRender();
/cb
	WebMarkupContainer1Page(MarkupContainer).renderNext(MarkupStream) line: 1524	
		// Get the current markup element
		final MarkupElement element = markupStream.get();
			// Get element as tag
			final ComponentTag tag = (ComponentTag)element;		/ <li wicket:id="x">
			// Get component id
			final String id = tag.getId();
			// Get the component for the id from the given container
			Component component = get(id);						/ [RepeatingView [Component id = x]]
				component.render();
/cb
	WebMarkupContainer1Page(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
		while (markupStream.hasMore())
		{
			// Render the markup element
			boolean rawMarkup = renderNext(markupStream);
/cb
	WebMarkupContainer1Page(Page).onRender() line: 879	
		// Loop through the markup in this container
		MarkupStream markupStream = new MarkupStream(getMarkup());
		renderAll(markupStream, null);
/cb
	WebMarkupContainer1Page(WebPage).onRender() line: 141	
		super.onRender();
/cb
	WebMarkupContainer1Page(Component).internalRender() line: 2380	
				onRender();
/cb
	WebMarkupContainer1Page(Component).render() line: 2308	
			internalRender();
/cb
	WebMarkupContainer1Page(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/ debug	,
/s
Label(Component).render() line: 2308	
			internalRender();
/s
Label(Component).internalRender() line: 2345	
		IMarkupFragment markup = getMarkup();			/ is er nog niet	,
/s
Label(Component).getMarkup() line: 734	
		if (markup != null)
/n
		if (parent == null)
/n
		markup = parent.getMarkup(this);
/s
WebMarkupContainer1Page$1(MarkupContainer).getMarkup(Component) line: 502		/ this [AjaxLink [Component id = link]]
		// Delegate request to attached markup sourcing strategy.
		return getMarkupSourcingStrategy().getMarkup(this, child);
/s
DefaultMarkupSourcingStrategy.getMarkup(MarkupContainer, Component) line: 81	
		IMarkupFragment containerMarkup = container.getMarkup();		/ is er al	,
containerMarkup	MarkupFragment  (id=339)	
	markup	MarkupFragment  (id=233)	
		markup	Markup  (id=313)	
		size	10	
		startIndex	8	
	size	6	
	startIndex	2	
/=
<a wicket:id="link">
			<span wicket:id="label"></span>
		</a>

		// Find the child's markup
		IMarkupFragment childMarkup = containerMarkup.find(child.getId());
childMarkup	MarkupFragment  (id=387)	
	markup	MarkupFragment  (id=339)	
		markup	MarkupFragment  (id=233)	
			markup	 Markup
				size 10	
				startIndex 8
		size	6	
		startIndex	2	
	size	2	
	startIndex	2	
/t
Label(Component).internalRender() line: 2346	
		IMarkupFragment markup = getMarkup();
/d
				onRender();
/s
Label(WebComponent).onRender() line: 60	
		internalRenderComponent();
/s
Label(Component).internalRenderComponent() line: 2508	
		final IMarkupFragment markup = getMarkup();
		// Get mutable copy of next tag
		final ComponentTag openTag = markupStream.getTag();
		final ComponentTag tag = openTag.mutable();

		// Call any tag handler
		onComponentTag(tag);			/ <span wicket:id="label">
				renderComponentTag(tag);
			}
			markupStream.next();
				getMarkupSourcingStrategy().onComponentTagBody(this, markupStream, tag);
/s
DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
		component.onComponentTagBody(markupStream, openTag);
/s
Label.onComponentTagBody(MarkupStream, ComponentTag) line: 115									/ Label method	,
		replaceComponentTagBody(markupStream, openTag, getDefaultModelObjectAsString());
/s
Label(Component).replaceComponentTagBody(MarkupStream, ComponentTag, CharSequence) line: 4054	
			// Write the new body
			getResponse().write(body);

/ Einde STACKTRACE RENDER WEBMARKUPCONTAINERS WITH REPEATER

/ STACKTRACE RENDER WEBMARKUPCONTAINERS WITHOUT REPEATER

/ Geef	,
http://localhost:9090/wicket-examples-step-by-step/repeater/webmarkupcontainer1b

/ stack	,
/s
	Label(Component).replaceComponentTagBody(MarkupStream, ComponentTag, CharSequence) line: 4054	
			// Write the new body
			getResponse().write(body);			/ body "Foo,7"
/cb
	Label.onComponentTagBody(MarkupStream, ComponentTag) line: 115	
		replaceComponentTagBody(markupStream, openTag, getDefaultModelObjectAsString());
/cb
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
		component.onComponentTagBody(markupStream, openTag);
/cb
	Label(Component).internalRenderComponent() line: 2508										/ 	Component fct	, this Label	
		final IMarkupFragment markup = getMarkup(); 			/	<span wicket:id="label"></span>
		final MarkupStream markupStream = new MarkupStream(markup);
		// Get mutable copy of next tag
		final ComponentTag openTag = markupStream.getTag();
		final ComponentTag tag = openTag.mutable();
		// Call any tag handler
		onComponentTag(tag);									/ <span wicket:id="label">
				renderComponentTag(tag);
			markupStream.next();
				getMarkupSourcingStrategy().onComponentTagBody(this, markupStream, tag);
/cb
	Label(WebComponent).onRender() line: 60	
		internalRenderComponent();
/cb
/s
	WebMarkupContainer1bPage$1(MarkupContainer).renderNext(MarkupStream) line: 1504	
		IMarkupFragment markup = getMarkup();				/ finds markup from parent in DefaultMarkupSourcingStrategy.getMarkup	,
		MarkupStream markupStream = new MarkupStream(markup);
				onRender();
/cb
	WebMarkupContainer1bPage$1(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1746	/ MarkupContainer fct, this AjaxLink	
		while (markupStream.hasMore())
		{
			// Render the markup element
			boolean rawMarkup = renderNext(markupStream);
/cb
	WebMarkupContainer1bPage$1(MarkupContainer).renderComponentTagBody(MarkupStream, ComponentTag) line: 1734	
			renderAll(markupStream, openTag);
/cb
	WebMarkupContainer1bPage$1(MarkupContainer).onComponentTagBody(MarkupStream, ComponentTag) line: 1657	
		renderComponentTagBody(markupStream, openTag);
/cb
	WebMarkupContainer1bPage$1(AbstractLink).onComponentTagBody(MarkupStream, ComponentTag) line: 82		
			// Render the body of the link
			super.onComponentTagBody(markupStream, openTag);
/cb
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
		component.onComponentTagBody(markupStream, openTag);
/cb
	WebMarkupContainer1bPage$1(Component).internalRenderComponent() line: 2565  / Component fct	, this AjaxLink	
		final IMarkupFragment markup = getMarkup();
		final MarkupStream markupStream = new MarkupStream(markup);
		// Get mutable copy of next tag
		final ComponentTag openTag = markupStream.getTag();
		final ComponentTag tag = openTag.mutable();
		onComponentTag(tag);									/ <a wicket:id="link" id="linkc" href="javascript:;">
				renderComponentTag(tag);
			markupStream.next();
				getMarkupSourcingStrategy().onComponentTagBody(this, markupStream, tag);
/cb
	WebMarkupContainer1bPage$1(MarkupContainer).onRender() line: 1698	
		internalRenderComponent();
/cb
	WebMarkupContainer1bPage$1(Component).internalRender() line: 2380	
				onRender();
/cb
	WebMarkupContainer1bPage$1(Component).render() line: 2308	
			// Do the render
			internalRender();
/cb
	WebMarkupContainer(MarkupContainer).renderNext(MarkupStream) line: 1524 	/ MarkupContainer fct, this WebMarkupContainer	
		// Get the current markup element
		final MarkupElement element = markupStream.get();
			// Get element as tag
			final ComponentTag tag = (ComponentTag)element;		/ <a wicket:id="link">
			// Get component id
			final String id = tag.getId();
			// Get the component for the id from the given container
			Component component = get(id);						/ [AjaxLink [Component id = link]]
				component.render();
/cb
	WebMarkupContainer(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759  / MarkupContainer fct, this WebMarkupContainer	
		while (markupStream.hasMore())
		{
			// Render the markup element
			boolean rawMarkup = renderNext(markupStream);
/cb
	WebMarkupContainer(MarkupContainer).renderComponentTagBody(MarkupStream, ComponentTag) line: 1734	
			renderAll(markupStream, openTag);
/cb
	WebMarkupContainer(MarkupContainer).onComponentTagBody(MarkupStream, ComponentTag) line: 1657	
		renderComponentTagBody(markupStream, openTag);
/cb
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
		component.onComponentTagBody(markupStream, openTag);
/cb
	WebMarkupContainer(Component).internalRenderComponent() line: 2565 			/ Component fct	, this WebMarkupContainer	
		final IMarkupFragment markup = getMarkup();
<li wicket:id="11">
		<a wicket:id="link">
			<span wicket:id="label"></span>
		</a>
	</li>
		final MarkupStream markupStream = new MarkupStream(markup);
		// Get mutable copy of next tag
		final ComponentTag openTag = markupStream.getTag();
		final ComponentTag tag = openTag.mutable();						/ <li wicket:id="11">
		// Call any tag handler
		onComponentTag(tag);
				renderComponentTag(tag);
			markupStream.next();
				// Render the body. The default strategy will simply call the component's onComponentTagBody() implementation.
				getMarkupSourcingStrategy().onComponentTagBody(this, markupStream, tag);
/cb
	WebMarkupContainer(MarkupContainer).onRender() line: 1698			/ MarkupContainer fct	, this WebMarkupContainer	
		internalRenderComponent();
/cb
	WebMarkupContainer(Component).internalRender() line: 2380	
				onRender();
/cb
	WebMarkupContainer(Component).render() line: 2308	
			// Do the render
			internalRender();
/cb
	WebMarkupContainer1bPage(MarkupContainer).renderNext(MarkupStream) line: 1524 	/ Component fct	, this WebPage	
		// Get the current markup element
		final MarkupElement element = markupStream.get();
			// Get element as tag
			final ComponentTag tag = (ComponentTag)element;						/ <li wicket:id="11">
			// Get component id
			final String id = tag.getId();
			// Get the component for the id from the given container
			Component component = get(id);										/ [WebMarkupContainer [Component id = 11]]
				component.render();
/cb
	WebMarkupContainer1bPage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
		while (markupStream.hasMore())
		{
			// Render the markup element
			boolean rawMarkup = renderNext(markupStream);
/cb
	WebMarkupContainer1bPage(Page).onRender() line: 879								/ Page fct	,	 this WebPage
		// Loop through the markup in this container
		MarkupStream markupStream = new MarkupStream(getMarkup());
		renderAll(markupStream, null);
/cb
	WebMarkupContainer1bPage(WebPage).onRender() line: 141							/ Component fct , this WebPage
		super.onRender();
/cb
	WebMarkupContainer1bPage(Component).internalRender() line: 2380	
				onRender();
/cb
	WebMarkupContainer1bPage(Component).render() line: 2308						
			// Do the render
			internalRender();
/cb
	WebMarkupContainer1bPage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ MORGENOCHTEND  Afmaken Let op onRender fct	,


/ Einde STACKTRACE RENDER WEBMARKUPCONTAINERS WITHOUT REPEATER


/ Einde PANEL IN REPEATER WITH AND WITHOUT REPEATER


/ WEBMARKUPCONTAINER VS PANEL 

/ 7	. 

/ met repeater	, vergl templates	,

$ vi WebMarkupContainer1Page.html

<ul>
	<li wicket:id="x">
		<a wicket:id="link">
			<span wicket:id="label"></span>
		</a>
	</li>
</ul>

$ vi WePanel1Page.html

<ul>
		<li wicket:id="x">
		</li>
</ul>

$ vi WePanel1Panel.html

<wicket:panel>
	<a wicket:id="link">
		<span wicket:id="label"></span>
	</a>
</wicket:panel>


/ zonder repeater	, vergl template 

$ vi WebMarkupContainer1bPage.html

<ul>
	<li wicket:id="11">
		<a wicket:id="link">
			<span wicket:id="label"></span>
		</a>
	</li>
	<li wicket:id="12">
		<a wicket:id="link">
			<span wicket:id="label"></span>
		</a>
	</li>
</ul>

$ vi WePanel1bPage.html

<ul>
		<li wicket:id="13">
		</li>
		<li wicket:id="77">
		</li>
</ul>

$ vi WePanel1Panel.html

<wicket:panel>
	<a wicket:id="link">
		<span wicket:id="label"></span>
	</a>
</wicket:panel>

/ Een Panel moet eigen markup page hebben	, een WebMarkupContainer niet	,

/ Einde WEBMARKUPCONTAINER VS PANEL 


/ LINK WITH CHILD TO REPEATINGVIEW WITHOUT WEBMARKUPCONTAINER 

/ ws wicket-examples-step-by-step
/ prog WebMarkupContainerPage

/ we hebben links add aan de repeating view	,  de links hebben een child	,

/we doen nog niets met de list	, behalve hoeveel elems het heeft	,

public class WebMarkupContainerPage extends WebPage {

		List<X>list=new ArrayList<X>();
		list.add(new X("Foo",7)); list.add(new X("Bar",13));
		
		RepeatingView repeatingView=new RepeatingView("x");
		add(repeatingView);
		for(X x:list){
			String id=repeatingView.newChildId();
			Link<Void>link=new Link<Void>(id) {
				@Override
				public void onClick() {
				}
			};
			repeatingView.add(link);
			Label label=new Label("label","foo-"+id);
			link.add(label);
		}
	
<ul>
	<li>
		<a wicket:id="x">
			<span wicket:id="label"></span>
		</a>
	</li>
</ul>

/ de id van de repeatingview is "x", de ids van de links zijn 1 en 2	, en die van de labels "label" , 
/ maar de template van de link is die van de repeatingview	, en ergens in een render method gaat hij op zoek naar de component met de id... TODO 
		

/ Deze markup van de repeatingview 
	<a wicket:id="x">
			<span wicket:id="label"></span>
		</a>
/ wordt ook de markup van de children	, links	, 

/ we zien in HTML	,
<ul>
	<li>
		<a wicket:id="x" href="./webmarkupcontainer?0-1.ILinkListener-x-1">
			<span wicket:id="label">foo-1</span>
		</a><a wicket:id="x" href="./webmarkupcontainer?0-1.ILinkListener-x-2">
			<span wicket:id="label">foo-2</span>
		</a>
	</li>
</ul>


/ stack	,
/s
	WebMarkupContainerPage$1(Component).render() line: 2301	
			// Do the render
			internalRender();
/cb
	RepeatingView(AbstractRepeater).renderChild(Component) line: 115	
		child.render();
/cb
	RepeatingView(AbstractRepeater).onRender() line: 102	
		Iterator<? extends Component> it = renderIterator();
		while (it.hasNext())
		{
			Component child = it.next();	/ [Link [Component id = 1]]
			renderChild(child);
/cb
	RepeatingView(Component).internalRender() line: 2380	
	RepeatingView(Component).render() line: 2308	
	WebMarkupContainerPage(MarkupContainer).renderNext(MarkupStream) line: 1524	
	WebMarkupContainerPage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	WebMarkupContainerPage(Page).onRender() line: 879	
	WebMarkupContainerPage(WebPage).onRender() line: 141	
	WebMarkupContainerPage(Component).internalRender() line: 2380	
	WebMarkupContainerPage(Component).render() line: 2308	
	WebMarkupContainerPage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 195	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ debug	,
/s
WebMarkupContainerPage$1(Component).render() line: 2308	
			// Do the render
			internalRender();
/s
		IMarkupFragment markup = getMarkup();
<a wicket:id="x">
			<span wicket:id="label"></span>
		</a>

				onRender();
/s
WebMarkupContainerPage$1(MarkupContainer).onRender() line: 1698		/ de link is ook een markupcontainer	, 
														/ dat zien we goed nu, want de link heeft een label als child	,
		internalRenderComponent();
/s
WebMarkupContainerPage$1(Component).internalRenderComponent() line: 2508	
		final IMarkupFragment markup = getMarkup();
/ al	,
		// Call any tag handler
		onComponentTag(tag);
/s
WebMarkupContainerPage$1(Link<T>).onComponentTag(ComponentTag) line: 353	

/ intermezzo

/ We komen in de Link.class.onComponentTag	, bij een AjaxLink kom je in AjaxLink.onComponentTag	,
/ AjaxLink.onComponentTag doet	,
	tag.put("href", "javascript:;");
/ Link.onComponentTag doet	,
				tag.put("href", url);

/ we zien het verschil in HTML tussen een Link en een AjaxLink	, 

<a href="./frm?2-1.ILinkListener-link" wicket:id="link">link</a>

<a href="javascript:;" wicket:id="ajaxLink" id="ajaxLink6">ajax link</a>
<script type="text/javascript">
/*<![CDATA[*/
Wicket.Event.add(window, "domready", function(event) { 
	Wicket.Ajax.ajax({"u":"./frm?2-1.IBehaviorListener.0-ajaxLink","c":"ajaxLink6","e":"click"});;
;});
/*]]>*/
</script>

/ Ze gaan naar verschillende controllers	,

/ Einde intermezzo

		// Default handling for tag
		super.onComponentTag(tag);
/ niets	,
			// Set href to link to this link's linkClicked method
			CharSequence url = getURL();
/s
WebMarkupContainerPage$1(Link<T>).getURL() line: 327	
		return urlFor(ILinkListener.INTERFACE, new PageParameters());
/s
WebMarkupContainerPage$1(Component).urlFor(RequestListenerInterface, PageParameters) line: 3403	 / this = [Link [Component id = 1]]
		IRequestHandler handler = createRequestHandler(listener, parameters, null);
/s
WebMarkupContainerPage$1(Component).createRequestHandler(RequestListenerInterface, PageParameters, Integer) line: 3358	
		PageAndComponentProvider provider = new PageAndComponentProvider(page, this, parameters);
/ hier staat het component in	,  this	
this	WebMarkupContainerPage$1  (id=123)	
	children	Label  (id=287)	
		data	Model<T>  (id=290)	
			object	"foo-1" (id=337)	
		flags	1108553882	
		generatedMarkupId	-1	
		id	"label" (id=295)	
		markup	null	
		markupSourcingStrategy	DefaultMarkupSourcingStrategy  (id=122)	
		parent	WebMarkupContainerPage$1  (id=123)	
		requestFlags	48	
	data	null	
	flags	1107505306	
	generatedMarkupId	-1	
	id	"1" (id=300)	
	markup	MarkupFragment  (id=161)	
	markupSourcingStrategy	DefaultMarkupSourcingStrategy  (id=122)	
	modCounter	0	
	parent	RepeatingView  (id=120)	
	popupSettings	null	
	queue	null	
	requestFlags	51	
	this$0	WebMarkupContainerPage  (id=108)	

/ intermezzo

/ Dus daarom kan hij maken	,
		<a wicket:id="x" href="./webmarkupcontainer?0-1.ILinkListener-x-1">

/ Einde intermezzo

			return new BookmarkableListenerInterfaceRequestHandler(provider, listener, id);
/t
WebMarkupContainerPage$1(Component).urlFor(RequestListenerInterface, PageParameters) line: 3404	
		IRequestHandler handler = createRequestHandler(listener, parameters, null);
/d
handler	BookmarkableListenerInterfaceRequestHandler  (id=215)	
		return getRequestCycle().urlFor(handler);

/ we geloven het	,

/c
/ stack	,
	WebMarkupContainerPage$1(Component).internalRenderComponent() line: 2531	
this=[Link [Component id = 1]]
	WebMarkupContainerPage$1(MarkupContainer).onRender() line: 1698	
	WebMarkupContainerPage$1(Component).internalRender() line: 2380	
	WebMarkupContainerPage$1(Component).render() line: 2308	
	RepeatingView(AbstractRepeater).renderChild(Component) line: 115	
		child.render();
/cb
	RepeatingView(AbstractRepeater).onRender() line: 102	
		Iterator<? extends Component> it = renderIterator();
		while (it.hasNext())
		{
			Component child = it.next();	/ [Link [Component id = 1]]
			renderChild(child);
/cb
	RepeatingView(Component).internalRender() line: 2380	
	RepeatingView(Component).render() line: 2308	
	WebMarkupContainerPage(MarkupContainer).renderNext(MarkupStream) line: 1524	/ this=WebMarkupContainerPage
		final MarkupElement element = markupStream.get();
element	ComponentTag  (id=12767)	 <a wicket:id="x">
			// Get element as tag
			final ComponentTag tag = (ComponentTag)element;
			// Get component id
			final String id = tag.getId();
"x"
			// Get the component for the id from the given container
			Component component = get(id);
[RepeatingView [Component id = x]]
				component.render();
/cb
	WebMarkupContainerPage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759 / this=WebMarkupContainerPage
		while (markupStream.hasMore())
			// Remember where we are
			final int index = markupStream.getCurrentIndex();
			// Render the markup element
			boolean rawMarkup = renderNext(markupStream);
/cb
	WebMarkupContainerPage(Page).onRender() line: 879	
	WebMarkupContainerPage(WebPage).onRender() line: 141	
	WebMarkupContainerPage(Component).internalRender() line: 2380	
	WebMarkupContainerPage(Component).render() line: 2308	
	WebMarkupContainerPage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ debug
/s
	WebMarkupContainerPage$1(Component).internalRenderComponent() line: 2531	
this=[Link [Component id = 1]]

		final IMarkupFragment markup = getMarkup();
<a wicket:id="x"> <span wicket:id="label"></span> </a>


		// Call any tag handler
		onComponentTag(tag);
<a wicket:id="x" href="./webmarkupcontainer?4-1.ILinkListener-x-1">

/ we zien dat de wicket id van this niet klopt met die in de tag	, 

				renderComponentTag(tag);
/s
WebMarkupContainerPage$1(Component).renderComponentTag(ComponentTag) line: 3982	

this	ComponentTag  (id=12783)	
<a wicket:id="x" href="./webmarkupcontainer?4-1.ILinkListener-x-1">
/ we renderen tags en niet components, we render NIET de Link	, met wicket:id=1	,
/ maar deze tag heeft attributes
wicket:id = "x" href = "./webmarkupcontainer?4-1.ILinkListener-x-1"
/ en we zien de Link component hierin terug , nl in x-1	, dat wordt als wicket process de click op de link het path x:1	, waar x de RepeatingView component is 	, en 1 de link	,
/ Als we de link click , doet wicket:id er niet toe	, alleen de controller url	,
/ de wicket id wordt alleen bij render used	, als hij de component moet opzoeken in MarkupContainer.renderNext	, daar wordt de RepeatingView gevonden op grond van de wicket id "x"	, maar dit wordt toch ook het template=tag van de children	,  

			// Write the tag
			tag.writeOutput(getResponse(), !needToRenderTag(null),
				getMarkup().getMarkupResourceStream().getWicketNamespace());
/s
ComponentTag.writeOutput(Response, boolean, String) line: 757	
		response.write("<");
<
		response.write(getName());
<a
		if (getAttributes().size() > 0)
wicket:id = "x" href = "./webmarkupcontainer?4-1.ILinkListener-x-1"
		{
			for (String key : getAttributes().keySet())
wicket:id
href
			{
				if ((namespacePrefix == null) || (key.startsWith(namespacePrefix) == false))
				{
					response.write(" ");
					response.write(key);
<a wicket:id
					CharSequence value = getAttribute(key);
"x"
./webmarkupcontainer?4-1.ILinkListener-x-1
					// attributes without values are possible, e.g.' disabled'
					if (value != null)
					{
						response.write("=\"");
						value = Strings.escapeMarkup(value);
						response.write(value);
						response.write("\"");
					}
		response.write(">");

/ MORGENOCHTEND	,




/ Einde LINK WITH CHILD TO REPEATINGVIEW WITHOUT WEBMARKUPCONTAINER 

/ Einde WEBMARKUPCONTAINER 

/ DATATABLE ACTION IN PANEL OR WEBMARKUPCONTAINER

/ See MORGENOCHTEND

/ 7	. 

public class DataTableFilterToolbarMy3Page extends BaseMy3Page
{
	public DataTableFilterToolbarMy3Page()
	{
		List<IColumn<Contact, String>> columns = new ArrayList<>();
		columns.add(new AbstractColumn<Contact, String>(new Model<>("Actions"))
		{
			@Override
			public void populateItem(Item<ICellPopulator<Contact>> cellItem, String componentId,
				final IModel<Contact> model)
			{
				cellItem.add(new ActionMy3Panel(componentId){
					@Override
					protected void click() {
						DataTableFilterToolbarMy3Page.this.setSelected(model.getObject());
						
					}
				});
			}
		});

public abstract class ActionMy3Panel extends Panel {
	public ActionMy3Panel(String id)
	{
		super(id);
		add(new Link<Void>("select")
		{
			@Override
			public void onClick()
			{
				click();
			}
		});
	}
	protected abstract void click();
}

$ vi DataTableFilterToolbarMy3Page.html

    <form wicket:id="filterForm">
    	<table class="dataview" wicket:id="tableWithFilterForm"></table>
    </form>

/////////////////////////////////////////////////////
/ We moeten zelf <form> en <table>  

$ vi ActionMy3Panel.html

<wicket:panel xmlns:wicket="http://wicket.apache.org">
	<a wicket:id="select">select</a>
</wicket:panel>

/ Ook,	


$ vi DataTable.html

<wicket:panel xmlns:wicket="http://wicket.apache.org">
<caption wicket:id="caption"></caption>
<colgroup wicket:id="colGroup"></colgroup>
<thead wicket:id="topToolbars">
	<wicket:container wicket:id="toolbars"></wicket:container>
</thead>
<tfoot wicket:id="bottomToolbars">
	<wicket:container wicket:id="toolbars"></wicket:container>
</tfoot>
<tbody wicket:id="body">
	<tr wicket:id="rows">
		<td wicket:id="cells">
			<div wicket:id="cell">[cell]</div>
		</td>
	</tr>
</tbody>
</wicket:panel>

/ <wicket:container wicket:id="..."> is een tag die je nodig hebt	, omdat hij een wicket:id heeft	,
/ wordt WH used	, als er geen andere valid tag is	,
/ WH used door een repeater	,
/ in production wordt hij niet rendered	, maar hij is er wel met zijn wicket id	, 
/ in <tbody> zien we er geen	, want  we hebben <tr> al en die is OK	,

/ De rendering verloopt vreemd	,

/ we zien in HTML	,

<table>
	<wicket:container wicket:id="toolbars">
		<wicket:panel></wicket:panel>
	<thead wicket:id="topToolbars">
		<tr class="filter-tr">
			<td wicket:id="filter" 	
			<td wicket:id="filter" 
			<td wicket:id="filter" 
				<wicket:panel >
					<input wicket:id="filter" ...>			/ input fields waar we mee filter	, 
			<td wicket:id="filter" 
		<tr class="navigation">
			<td wicket:id="span"
/ TODO	

/ 7	. 

/ we probeerden zonder panel	,

public class DataTableFilterToolbarMy3aPage extends BaseMy3Page
		columns.add(new AbstractColumn<Contact, String>(new Model<>("Actions"))
		{
			@Override
			public void populateItem(Item<ICellPopulator<Contact>> cellItem, String componentId,
				final IModel<Contact> model)
			{
				AjaxLink<Void>ajaxLink=new AjaxLink<Void>(componentId) {			<- ipv new ...Panel(componentId)
					@Override
					public void onClick(AjaxRequestTarget target) {
						DataTableFilterToolbarMy3aPage.this.setSelected(model.getObject());
						
					}
				};
				cellItem.add(ajaxLink);
			}
		});

/ Maar omdat	,

<wicket:panel xmlns:wicket="http://wicket.apache.org">
<caption wicket:id="caption"></caption>
<colgroup wicket:id="colGroup"></colgroup>
<thead wicket:id="topToolbars">
	<wicket:container wicket:id="toolbars"></wicket:container>
</thead>
<tfoot wicket:id="bottomToolbars">
	<wicket:container wicket:id="toolbars"></wicket:container>
</tfoot>
<tbody wicket:id="body">
	<tr wicket:id="rows">
		<td wicket:id="cells">
			<div wicket:id="cell">[cell]</div>							<-
		</td>
	</tr>
</tbody>
</wicket:panel>

/ we zien dus dat <div wicket:id="cell">[cell]</div> de markup is van de AjaxLink	,

/ Alleen Pages en Panels kunnen eigen markup file hebben	, 
/ omdat de markup van DataTable (Panel) vastligt	, tenzij je overwrite WH, moeten we een Panel maken	,  
/ De markup van het panel komt dan binnen die van div#cell	
<div wicket:id="cell">
	<wicket:panel xmlns:wicket="http://wicket.apache.org">
		<a wicket:id="select" href="./filter_my3?2-1.ILinkListener-filterForm-tableWithFilterForm-body-rows-1-cells-1-cell-select">select</a>
	</wicket:panel>
</div>
/ See ADDSPAGE


/ Einde DATATABLE ACTION IN PANEL OR WEBMARKUPCONTAINER

	public ActionMy3Panel(String id)
	{
		super(id);
		Component link=new AjaxLink<Void>("select") {
			@Override
			public void onClick(AjaxRequestTarget target) {
				click(target);
			}
		};
		add(link);
	}

	protected abstract void click(AjaxRequestTarget target);
	
}

/ ADDSPAGE

/ 7.	 

		Label result=new Label("result",new Model<String>());
		result.setOutputMarkupId(true);
		add(result);
		
		AjaxLink<Void>ajaxLink=new AjaxLink<Void>("cell") {
			@Override
			public void onClick(AjaxRequestTarget target) {
				getPage().get("result").setDefaultModelObject("from cell");
				target.add(getPage().get("result"));
			}
		};
		add(ajaxLink);

/ Vergeet niet: target.add call	,

/ Want als je dit vergeet	,

/ Onthoud	,
/ click een ajax link	,
/s
RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 97	
			respond(handler);
/s
ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 234	
		invokeListener();
/s
AjaxLink$1(AbstractDefaultAjaxBehavior).onRequest() line: 587	
		WebApplication app = (WebApplication)getComponent().getApplication();
		AjaxRequestTarget target = app.newAjaxRequestTarget(getComponent().getPage());

		RequestCycle requestCycle = RequestCycle.get();
		requestCycle.scheduleRequestHandlerAfterCurrent(target);

		respond(target);
/s
AjaxLink$1(AjaxEventBehavior).respond(AjaxRequestTarget) line: 155	
		onEvent(target);
/t
RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 97	
			respond(handler);
/d
			execute(scheduled);
/s
AjaxRequestHandler.respond(IRequestCycle) line: 358	
		update.writeTo(bodyResponse, encoding);
/s
AjaxRequestHandler$1(PartialPageUpdate).writeTo(Response, String) line: 153	
			writeComponents(response, encoding);
/s
AjaxRequestHandler$1(PartialPageUpdate).writeComponents(Response, String) line: 236	
		for (Map.Entry<String, Component> stringComponentEntry : markupIdToComponent.entrySet())
this	AjaxRequestHandler$1  (id=27480)	
	markupIdToComponent	LinkedHashMap<K,V>  (id=27485)	
{}
/ TODO

/ markupIdToComponent={}	, want we hebben NIET 

public class AjaxRequestHandler implements AjaxRequestTarget
	@Override
	public void add(Component... components)
	{
		for (final Component component : components)
		{
			add(component, component.getMarkupId());
		}
	}
/s
	@Override
	public void add(Component component, String markupId)
	{
		update.add(component, markupId);
	}
/s
$ vi PartialPageUpdate.java

public abstract class PartialPageUpdate
	public final void add(final Component component, final String markupId)
		markupIdToComponent.put(markupId, component);

/ 7	. 

/ proj wicket-examples-step-by-step

public class AddsPage extends WebPage {
	public AddsPage() {
		
		Label result=new Label("result",new Model<String>());
		result.setOutputMarkupId(true);
		add(result);
		
		AjaxLink<Void>ajaxLink=new AjaxLink<Void>("cell") {
			@Override
			public void onClick(AjaxRequestTarget target) {
				getPage().get("result").setDefaultModelObject("from cell");
				target.add(getPage().get("result"));
			}
		};
		add(ajaxLink);
		
		Panel panel=new MyPanel("cell1");
		add(panel);
		
		WebMarkupContainer webMarkupContainer=new MyContainer("cell2");
		add(webMarkupContainer);
	}
	private static class MyPanel extends Panel{
		public MyPanel(String id) {
			super(id);
			AjaxLink<Void>ajaxLink=new AjaxLink<Void>("inner") {
				@Override
				public void onClick(AjaxRequestTarget target) {
				}
			};
			add(ajaxLink);
		}
	}
	private static class MyContainer extends WebMarkupContainer{
		public MyContainer(String id) {
			super(id);
			AjaxLink<Void>ajaxLink=new AjaxLink<Void>("inner") {
				@Override
				public void onClick(AjaxRequestTarget target) {
				}
			};
			add(ajaxLink);

		}
	}

}

$ vi AddsPage.html

<body>
	<span wicket:id="result"></span>
	<div wicket:id="cell">cell</div>
	<div wicket:id="cell1"></div>
	<div wicket:id="cell2">
		<a wicket:id="inner">inner</a>
	</div>
</body>

$ vi AddsPage$MyPanel.html

<wicket:panel>
	<a wicket:id="inner">inner</a>
</wicket:panel>


/ we zien in HTML	,

<script type="text/javascript">
/*<![CDATA[*/
Wicket.Event.add(window, "domready", function(event) { 
	Wicket.Ajax.ajax({"u":"./adds?0-1.IBehaviorListener.0-cell","c":"cell1","e":"click"});;
	Wicket.Ajax.ajax({"u":"./adds?0-1.IBehaviorListener.0-cell1-inner","c":"inner2","e":"click"});;
	Wicket.Ajax.ajax({"u":"./adds?0-1.IBehaviorListener.0-cell2-inner","c":"inner3","e":"click"});;
	Wicket.Event.publish(Wicket.Event.Topic.AJAX_HANDLERS_BOUND);
;});
/*]]>*/
</script>

<div wicket:id="cell" id="cell1">cell</div>

<div wicket:id="cell1">
	<wicket:panel>
		<a wicket:id="inner" id="inner2" href="javascript:;">inner</a>
	</wicket:panel>
</div>

<div wicket:id="cell2">
		<a wicket:id="inner" id="inner3" href="javascript:;">inner</a>
</div>

/ we zien dat de ajax link en WH de panel, en de web markup container ge linked zijn aan hun markup	, 
/ bij panels is het zo dat z'n markup file binnen z'n markup komt	, TODO
/ alleen panels en pages kunnen een eigen markup file hebben	,



/ Einde ADDSPAGE

/ DATATABLE ACTION MODALWINDOW 

/ 7	 

/ we maken een ajax link op het action panel	, 

public interface SelectionMyLocator {
	public Contact getSelected();
	public void setSelected(Contact selected);
}

public class BaseMy3Page extends ExamplePage implements SelectionMyLocator
	public BaseMy3Page()
	{
		add(new Label("selectedLabel", new PropertyModel<>(this, "selectedContactLabel")).setOutputMarkupId(true));
																							^^^^^
		...

	@Override												<-
	public Contact getSelected()
	{
		return selected;
	}

	@Override												<-
	public void setSelected(Contact selected)
	{
		addStateChange();
		this.selected = selected;
	}														

public class DataTableFilterToolbarMy3aPage extends BaseMy3Page
{
	public DataTableFilterToolbarMy3aPage()
	{
		...
		columns.add(new AbstractColumn<Contact, String>(new Model<>("Actions"))
		{
			@Override
			public void populateItem(Item<ICellPopulator<Contact>> cellItem, String componentId,
				final IModel<Contact> model)
			{
				Panel panel=new ActionMy3aPanel(componentId) {
					@Override
					protected void click(AjaxRequestTarget target) {
						((SelectionMyLocator)getPage()).setSelected(model.getObject());
						target.add(getPage().get("selectedLabel"));									< dit gaat OK	, getPage().get("<wicket-id>")	,
					}
				};
				cellItem.add(panel);
			}
		});
		...
		ModalWindow modalWindow=new ModalWindow("modal");
		add(modalWindow);

/ 7	. 

/ herhalen	,

/s
	DataTableFilterToolbarMy3aPage$1$1(ActionMy3aPanel).<init>(String) line: 12	
	DataTableFilterToolbarMy3aPage$1$1.<init>(DataTableFilterToolbarMy3aPage$1, String, IModel) line: 66	
	DataTableFilterToolbarMy3aPage$1.populateItem(Item<ICellPopulator<Contact>>, String, IModel<Contact>) line: 66	
				Panel action=new ActionMy3aPanel(componentId) {
					...
/cb
	DataTable$DefaultDataGridView(AbstractDataGridView<T>).populateItem(Item<T>) line: 156	
		RepeatingView cells = new RepeatingView(CELL_REPEATER_ID);		/ "cells"
		item.add(cells);

		int populatorsNumber = populators.size();
		for (int i = 0; i < populatorsNumber; i++)
		{
			ICellPopulator<T> populator = populators.get(i);
			IModel<ICellPopulator<T>> populatorModel = new Model<>(populator);
			Item<ICellPopulator<T>> cellItem = newCellItem(cells.newChildId(), i, populatorModel);
			cells.add(cellItem);

			populator.populateItem(cellItem, CELL_ITEM_ID, item.getModel());
/cb
	RefreshingView$1.newItem(int, IModel<T>) line: 114	
/=
		return new IItemFactory<T>()
		{
			@Override
			public Item<T> newItem(int index, IModel<T> model)
			{
				String id = RefreshingView.this.newChildId();
				Item<T> item = RefreshingView.this.newItem(id, index, model);
				RefreshingView.this.populateItem(item);
/cb
	DefaultItemReuseStrategy$1.next() line: 75	
/=
		return new Iterator<Item<T>>()
			@Override
			public Item<T> next()
			{
				IModel<T> model = newModels.next();					/ model	DetachableContactModel  (id=19426)	
				Item<T> item = factory.newItem(index, model);		<-
				index++;
				return item;
/cb
	DefaultItemReuseStrategy$1.next() line: 56	
	DataTable$DefaultDataGridView(RefreshingView<T>).addItems(Iterator<Item<T>>) line: 189	
		while (items.hasNext())
		{
			Item<T> item = items.next();			<-
			item.setIndex(index);
			add(item);
			++index;
/cb
	DataTable$DefaultDataGridView(RefreshingView<T>).onPopulate() line: 97	
		Iterator<IModel<T>> models = getItemModels();
		Iterator<Item<T>> items = getItemReuseStrategy().getItems(newItemFactory(), models,
			getItems());
		removeAll();
		addItems(items);
/cb
	DataTable$DefaultDataGridView(AbstractRepeater).onBeforeRender() line: 124	
this	DataTable$DefaultDataGridView  (id=19410)	
	id	"rows" (id=19468)	

		onPopulate();
/cb
	DataTable$DefaultDataGridView(AbstractPageableView<T>).onBeforeRender() line: 115	
	DataTable$DefaultDataGridView(Component).internalBeforeRender() line: 949	
	DataTable$DefaultDataGridView(Component).beforeRender() line: 1017	
	WebMarkupContainer(MarkupContainer).onBeforeRenderChildren() line: 1866	
	WebMarkupContainer(Component).onBeforeRender() line: 3877	
	WebMarkupContainer(Component).internalBeforeRender() line: 949	
	WebMarkupContainer(Component).beforeRender() line: 1017	
	DataTable<T,S>(MarkupContainer).onBeforeRenderChildren() line: 1866	
	DataTable<T,S>(Component).onBeforeRender() line: 3877	
	DataTable<T,S>(Component).internalBeforeRender() line: 949	
	DataTable<T,S>(Component).beforeRender() line: 1017	
	FilterForm<T>(MarkupContainer).onBeforeRenderChildren() line: 1866	
	FilterForm<T>(Component).onBeforeRender() line: 3877	
	FilterForm<T>(Form<T>).onBeforeRender() line: 1807	
	FilterForm<T>(Component).internalBeforeRender() line: 949	
	FilterForm<T>(Component).beforeRender() line: 1017	
	DataTableFilterToolbarMy3aPage(MarkupContainer).onBeforeRenderChildren() line: 1866	
	DataTableFilterToolbarMy3aPage(Component).onBeforeRender() line: 3877	
	DataTableFilterToolbarMy3aPage(Page).onBeforeRender() line: 801	
	DataTableFilterToolbarMy3aPage(Component).internalBeforeRender() line: 949	
	DataTableFilterToolbarMy3aPage(Component).beforeRender() line: 1017	
	DataTableFilterToolbarMy3aPage(Component).internalPrepareForRender(boolean) line: 2215	
	DataTableFilterToolbarMy3aPage(Page).internalPrepareForRender(boolean) line: 242	
	DataTableFilterToolbarMy3aPage(Component).render() line: 2304	
	DataTableFilterToolbarMy3aPage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

	public DataTable(final String id, final List<? extends IColumn<T, S>> columns,
		final IDataProvider<T> dataProvider, final long rowsPerPage)
	{
		datagrid = newDataGridView("rows", columns, dataProvider);
/s
	protected DataGridView<T> newDataGridView(String id, List<? extends IColumn<T, S>> columns, IDataProvider<T> dataProvider)
	{
		return new DefaultDataGridView(id, columns, dataProvider);
/s

/ we zien 	,
public abstract class RefreshingView<T> extends RepeatingView
	@Override
	protected final void onPopulate()
	{
		Iterator<IModel<T>> models = getItemModels();
		Iterator<Item<T>> items = getItemReuseStrategy().getItems(newItemFactory(), models,
			getItems());
		removeAll();
		addItems(items);											
/s
		while (items.hasNext())
		{
			Item<T> item = items.next();
			item.setIndex(index);
			add(item);																				<- Via onPopulate	,	

/e
public class RepeatingView extends AbstractRepeater
	@Override
	protected void onPopulate()
	{
		// noop - population of this repeater is manual
	}

/ Klopt	,
public abstract class AbstractDataGridView<T> extends DataViewBase<T>
		RepeatingView cells = new RepeatingView(CELL_REPEATER_ID);
		item.add(cells);

		int populatorsNumber = populators.size();
		for (int i = 0; i < populatorsNumber; i++)
		{
			ICellPopulator<T> populator = populators.get(i);
			IModel<ICellPopulator<T>> populatorModel = new Model<>(populator);
			Item<ICellPopulator<T>> cellItem = newCellItem(cells.newChildId(), i, populatorModel);
			cells.add(cellItem);																	<- Manual add	,

			populator.populateItem(cellItem, CELL_ITEM_ID, item.getModel());

/ 7	. 

/ Iedere row heeft eigen ActionMy3aPanel	,

/ 7	. 

/ we maken geen Java property x	, maar set x in de page's model	,

/ we kunnen de page's model update	, met een nieuw model, met een nieuwe x er in	, 
/ of de page's model ongewijzigd laten, en de model's object update	,





/ updateModelDoesNotWork(): als we een label een property model geven	, met object=page's model	, en we update de page's model	, dan houdt de label's property model de oude page's model als object,


public class ModelPage extends WebPage {

	private X x;
	public ModelPage() {
//		updateModelDoesNotWork();
//		updateModelObjectDoesWork();
		withModelAsPropertyDoesWork();

	}
	
	private void updateModelDoesNotWork(){
		setDefaultModel(new Model<X>(new X("bar",7)));
		Label name=new Label("name", new PropertyModel<String>(getDefaultModel(), "name"));
		add(name);
		name.setOutputMarkupId(true);
		AjaxLink<Void>change=new AjaxLink<Void>("change") {
			@Override
			public void onClick(AjaxRequestTarget target) {
				getPage().setDefaultModel(new Model<X>(new X("foo",13)));
				target.add(getPage().get("name"));									/  label's model's object is 
			}
		};
		add(change);

	}
	private void updateModelObjectDoesWork(){
		setDefaultModel(new Model<X>(new X("bar",7)));
		Label name=new Label("name", new PropertyModel<String>(getDefaultModel(), "name"));
		add(name);
		name.setOutputMarkupId(true);
		AjaxLink<Void>change=new AjaxLink<Void>("change") {
			@Override
			public void onClick(AjaxRequestTarget target) {
				getPage().setDefaultModelObject(new X("foo",13));
				target.add(getPage().get("name"));	
			}
		};
		add(change);

	}
	private void withModelAsPropertyDoesWork(){
		setDefaultModel(new Model<X>(new X("bar",7)));
		Label name=new Label("name",new PropertyModel<String>(this,"defaultModelObject.name"));
/ or	,
		Label name=new Label("name",new PropertyModel<String>(this,"defaultModel.object.name"));
		add(name);
		name.setOutputMarkupId(true);
		AjaxLink<Void>change=new AjaxLink<Void>("change") {
			@Override
			public void onClick(AjaxRequestTarget target) {
				getPage().setDefaultModel(new Model<X>(new X("foo",13)));
				target.add(getPage().get("name"));
			}
		};
		add(change);
	}
	
	private class X implements Serializable{
		private String name;
		private Integer index;
		public X(String name,Integer index) {
			this.setName(name);
			this.setIndex(index);
		}
		public String getName() {
			return name;
		}
		public void setName(String name) {
			this.name = name;
		}
		public Integer getIndex() {
			return index;
		}
		public void setIndex(Integer index) {
			this.index = index;
		}
	}
}

/ Als we de page load	, zien we bar	, als we click, zien we nog steeds bar	, omdat de property model's target model onveranderd blijft	, 

/ we moeten de model's object update	, niet de model	, 



/ als we click , veranderen we de page's model's object	, 
/ Als we de page load	, zien we bar	, als we click, zien we foo	,

/ Lees	,
https://cwiki.apache.org/confluence/display/WICKET/Working+with+Wicket+models


/ Einde DATATABLE ACTION MODALWINDOW 


/ MODALWINDOW PAGE PANEL  

/ Component.getPage() finds the nearest page	, 

public class ModalWindow extends Panel
	public ModalWindow setPageCreator(final PageCreator creator)
	{
		setContent(empty);		/ so empty is the child	,
		pageCreator = creator;
		return this;
	}

public class ModalWindowMyPage extends WebPage {
	public ModalWindowMyPage() {
		modalWindow.setPageCreator(new ModalWindow.PageCreator() {
			@Override
			public Page createPage() {
				return new ModalContentMyPage(){
					@Override
					protected void click(AjaxRequestTarget ajaxRequestTarget) {
						getParent()	/ null												/ empty is de child	,
						getPage()	/= ModalWindowMyPage$2$1=ModalContentMyPage						/ dichtsbijzijnde page	,

		modalWindow2.setContent(new ModalMyPanel(ModalWindow.CONTENT_ID){
			@Override
			protected void click(AjaxRequestTarget ajaxRequestTarget) {
				getPage();	/ ModalWindowMyPage											/ dichtsbijzijnde page	,
				getParent();	/ ModalWindow 												/ setContent sets this panel als child	, 

/ 


/ Einde MODALWINDOW PAGE PANEL  

/ DATATABLE FORM BUTTON OR LINK

/ sort op "First name"
Request URL:http://localhost:9090/wicket-examples-step-by-step/repeater/filtermy3a?2-6.ILinkListener-filterForm-tableWithFilterForm-topToolbars-toolbars-3-headers-38-header-orderByLink
Request Method:GET
Request URL:http://localhost:9090/wicket-examples-step-by-step/repeater/filtermy3a?5-9.ILinkListener-filterForm-tableWithFilterForm-topToolbars-toolbars-3-headers-59-header-orderByLink
Request Method:GET


/ sort op "Last name"
Request URL:http://localhost:9090/wicket-examples-step-by-step/repeater/filtermy3a?3-7.ILinkListener-filterForm-tableWithFilterForm-topToolbars-toolbars-3-headers-46-header-orderByLink
Request Method:GET
Request URL:http://localhost:9090/wicket-examples-step-by-step/repeater/filtermy3a?7-11.ILinkListener-filterForm-tableWithFilterForm-topToolbars-toolbars-3-headers-74-header-orderByLink
Request Method:GET

/ click select	,
Request URL:http://localhost:9090/wicket-examples-step-by-step/repeater/filtermy3a?8-12.IBehaviorListener.0-filterForm-tableWithFilterForm-body-rows-59-cells-1-cell-select&_=1485953414693
Request Method:GET
Request URL:http://localhost:9090/wicket-examples-step-by-step/repeater/filtermy3a?8-12.IBehaviorListener.0-filterForm-tableWithFilterForm-body-rows-60-cells-1-cell-select&_=1485953414696
Request Method:GET

/ 7	 

/ In de scripts in head staat	, 
<script type="text/javascript">
/*<![CDATA[*/
Wicket.Event.add(window, "domready", function(event) { 
	Wicket.Ajax.ajax({"u":"./filtermy3a?9-13.IBehaviorListener.0-filterForm-tableWithFilterForm-body-rows-62-cells-1-cell-select","c":"select4f","e":"click"});;
	Wicket.Ajax.ajax({"u":"./filtermy3a?9-13.IBehaviorListener.0-filterForm-tableWithFilterForm-body-rows-63-cells-1-cell-select","c":"select50","e":"click"});;
	Wicket.Ajax.ajax({"u":"./filtermy3a?9-13.IBehaviorListener.0-filterForm-tableWithFilterForm-body-rows-64-cells-1-cell-select","c":"select51","e":"click"});;
	Wicket.Ajax.ajax({"u":"./filtermy3a?9-13.IBehaviorListener.0-filterForm-tableWithFilterForm-body-rows-65-cells-1-cell-select","c":"select52","e":"click"});;
	Wicket.Ajax.ajax({"u":"./filtermy3a?9-13.IBehaviorListener.0-filterForm-tableWithFilterForm-body-rows-66-cells-1-cell-select","c":"select53","e":"click"});;
	Wicket.Ajax.ajax({"u":"./filtermy3a?9-13.IBehaviorListener.0-filterForm-tableWithFilterForm-body-rows-67-cells-1-cell-select","c":"select54","e":"click"});;
	Wicket.Ajax.ajax({"u":"./filtermy3a?9-13.IBehaviorListener.0-filterForm-tableWithFilterForm-body-rows-68-cells-1-cell-select","c":"select55","e":"click"});;
	Wicket.Ajax.ajax({"u":"./filtermy3a?9-13.IBehaviorListener.0-filterForm-tableWithFilterForm-body-rows-69-cells-1-cell-select","c":"select56","e":"click"});;
	Wicket.Event.publish(Wicket.Event.Topic.AJAX_HANDLERS_BOUND);
	;});
/*]]>*/
</script>

	Wicket.Ajax.Call = Wicket.Class.create();

	Wicket.Ajax.Call.prototype = {
		_initializeDefaults: function (attrs) {
			...
		ajax: function (attrs) {															/ called when ajax link clicked	, en bij ajax buttons TODO 
																								/ schedules de call	,
			var res = Wicket.channelManager.schedule(attrs.ch, Wicket.bind(function () {
				this.doAjax(attrs);

		doAjax: function (attrs) {															/ de echte ajax call	,
			...
			// execute the request
			var jqXHR = jQuery.ajax({
				url: attrs.u,
				type: attrs.m,
				context: self,
				success: function(data, textStatus, jqXHR) {
					...
				complete: function (jqXHR, textStatus) {
					...
			});
			return jqXHR;
		}
		processAjaxResponse: function (data, textStatus, jqXHR, context) {



	jQuery.extend(true, Wicket, {
		 Ajax: {

			Call: Wicket.Ajax.Call,												/ TODO
			ajax: function(attrs) {											/ called in scripts hierboven	, registers deze controller	,
				jQuery.each(attrs.e, function (idx, evt) {
					Wicket.Event.add(attrs.c, evt, function (jqEvent, data) {
						var call = new Wicket.Ajax.Call();
							call.ajax(attributes);							/ controller calls Wicket.Ajax.Call.ajax	, 
				});
			},

/ 7	. 

/we zien dus al deze select links	, zoals	, 
	Wicket.Ajax.ajax({"u":"./filtermy3a?9-13.IBehaviorListener.0-filterForm-tableWithFilterForm-body-rows-62-cells-1-cell-select","c":"select4f","e":"click"});;
// wanneer created?

/s
/ stack	,
	AjaxLink$1(AjaxEventBehavior).renderHead(Component, IHeaderResponse) line: 94	
	ActionMy3aPanel$1(Component).internalRenderHead(HtmlHeaderContainer) line: 2727	
			// Then ask all behaviors
			for (Behavior behavior : getBehaviors())	/ behavior	AjaxLink$1  (id=10240)	
			{
				if (isBehaviorAccepted(behavior))
				{
					if (response.wasRendered(behavior) == false)
					{
						behavior.renderHead(this, response);
/cb
	ChildFirstHeaderRenderStrategy$1.component(Component, IVisit<Void>) line: 85	
			new DeepChildFirstVisitor()
			{
				@Override
				public void component(final Component component, final IVisit<Void> visit)
				{
					if (component != rootComponent)
					{
						component.internalRenderHead(headerContainer);										<-
/cb
	ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component, Visit<Void>) line: 96	
			for (Component child : (MarkupContainer)rootComponent)
/n
		// visit "this"
		component(rootComponent, visit);	/ rootComponent	ActionMy3aPanel$1  (id=10241)	= [AjaxLink [Component id = select]]
/cb
	ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component, Visit<Void>) line: 87	
			for (Component child : (MarkupContainer)rootComponent)	/ rootComponent	DataTableFilterToolbarMy3aPage$1$2  (id=10196)	
			{
				// visit the child
				visit(child, visit);	/ child	ActionMy3aPanel$1  (id=10241)	= child	ActionMy3aPanel$1  (id=10241)	
/cb
	ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component, Visit<Void>) line: 87	
			for (Component child : (MarkupContainer)rootComponent)	/ rootComponent	Item<T>  (id=10306)	
			{
				// visit the child
				visit(child, visit);	/ child	DataTableFilterToolbarMy3aPage$1$2  (id=10196)	= [ActionMy3aPanel [Component id = cell]]
/cb
	ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component, Visit<Void>) line: 87	
			for (Component child : (MarkupContainer)rootComponent)	/ rootComponent	RepeatingView  (id=10296)	
			{
				// visit the child
				visit(child, visit);	/ child	Item<T>  (id=10306)	
/cb
	ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component, Visit<Void>) line: 87	
			for (Component child : (MarkupContainer)rootComponent)	/ rootComponent	Item<T>  (id=10291)	
			{
				// visit the child
				visit(child, visit);	/ child	RepeatingView  (id=10296)	
/cb
	ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component, Visit<Void>) line: 87	
			for (Component child : (MarkupContainer)rootComponent)	/ rootComponent	DataTable$DefaultDataGridView  (id=10161)	
			{
				// visit the child
				visit(child, visit);	/ child	Item<T>  (id=10291)	
/cb
	ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component, Visit<Void>) line: 87	
			for (Component child : (MarkupContainer)rootComponent)	/ rootComponent	WebMarkupContainer  (id=10174)	
			{
				// visit the child
				visit(child, visit);	/ child	DataTable$DefaultDataGridView  (id=10161)	
/cb
	ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component, Visit<Void>) line: 87	
			for (Component child : (MarkupContainer)rootComponent)	/ rootComponent	DataTable<T,S>  (id=10273)	
			{
				// visit the child
				visit(child, visit);	/ child	WebMarkupContainer  (id=10174)	
/ cb
	ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component, Visit<Void>) line: 87	
			for (Component child : (MarkupContainer)rootComponent)	/ rootComponent	FilterForm<T>  (id=10271)	
			{
				// visit the child
				visit(child, visit); / child	DataTable<T,S>  (id=10273)	
/cb
	ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component, Visit<Void>) line: 87	
			for (Component child : (MarkupContainer)rootComponent)	/ rootComponent	DataTableFilterToolbarMy3aPage  (id=10158)	
			{
				// visit the child
				visit(child, visit);	/ child	FilterForm<T>  (id=10271)	

/cb
	ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component) line: 51	
		return visit(rootComponent, visitor); 						/ rootComponent	DataTableFilterToolbarMy3aPage  (id=10158)	
/cb
	ChildFirstHeaderRenderStrategy.renderChildHeaders(HtmlHeaderContainer, Component) line: 78	
			new DeepChildFirstVisitor()																		<-
			{
				@Override
				public void component(final Component component, final IVisit<Void> visit)
				{
					if (component != rootComponent)
					{
						component.internalRenderHead(headerContainer);
/cb
	ChildFirstHeaderRenderStrategy.renderHeader(HtmlHeaderContainer, HtmlHeaderContainer$HeaderStreamState, Component) line: 57	
	HtmlHeaderContainer.onComponentTagBody(MarkupStream, ComponentTag) line: 171	
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
	HtmlHeaderContainer(Component).internalRenderComponent() line: 2565	
	HtmlHeaderContainer(MarkupContainer).onRender() line: 1698	
	HtmlHeaderContainer(Component).internalRender() line: 2380	
	HtmlHeaderContainer(Component).render() line: 2308	
	DataTableFilterToolbarMy3aPage(MarkupContainer).renderNext(MarkupStream) line: 1524	
	DataTableFilterToolbarMy3aPage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	DataTableFilterToolbarMy3aPage(Page).onRender() line: 879	
	DataTableFilterToolbarMy3aPage(WebPage).onRender() line: 141	
	DataTableFilterToolbarMy3aPage(Component).internalRender() line: 2380	
	DataTableFilterToolbarMy3aPage(Component).render() line: 2308	
	DataTableFilterToolbarMy3aPage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/ debug	,
AjaxLink$1(AjaxEventBehavior).renderHead(Component, IHeaderResponse) line: 94	
			CharSequence js = getCallbackScript(component); / component	ActionMy3aPanel$1  (id=10241)	 [AjaxLink [Component id = select]]
/s
AjaxLink$1(AbstractDefaultAjaxBehavior).getCallbackScript(Component) line: 465	
		CharSequence ajaxAttributes = renderAjaxAttributes(component);
/s
AjaxLink$1(AbstractDefaultAjaxBehavior).renderAjaxAttributes(Component) line: 184	
		AjaxRequestAttributes attributes = getAttributes();		/ defaults	+ "click"
		return renderAjaxAttributes(component, attributes);
/s
AjaxLink$1(AbstractDefaultAjaxBehavior).renderAjaxAttributes(Component, AjaxRequestAttributes) line: 197	
		JSONObject attributesJson = new JSONObject();

		try
		{
			attributesJson.put(AjaxAttributeName.URL.jsonName(), getCallbackUrl());
/s
AjaxLink$1(AbstractAjaxBehavior).getCallbackUrl() line: 88	
		rli = IBehaviorListener.INTERFACE;
		return getComponent().urlFor(this, rli, new PageParameters());
/s
ActionMy3aPanel$1(Component).urlFor(Behavior, RequestListenerInterface, PageParameters) line: 3347	
		int id = getBehaviorId(behaviour);
		IRequestHandler handler = createRequestHandler(listener, parameters, id);
		return getRequestCycle().urlFor(handler);
/s
RequestCycle.urlFor(IRequestHandler) line: 534	
			Url mappedUrl = mapUrlFor(handler);
/s
RequestCycle.mapUrlFor(IRequestHandler) line: 434	
		final Url url = requestMapper.mapHandler(handler);
/s
SystemMapper(CompoundRequestMapper).mapHandler(IRequestHandler) line: 211	
		for (IRequestMapper mapper : mappers)
		{
			Url url = mapper.mapHandler(handler);
/s
MountedMapper.mapHandler(IRequestHandler) line: 159	
		Url url = super.mapHandler(requestHandler);
/s
MountedMapper(AbstractBookmarkableMapper).mapHandler(IRequestHandler) line: 396	
			...
			ComponentInfo componentInfo = new ComponentInfo(renderCount,
				requestListenerInterfaceToString(handler.getListenerInterface()),
				handler.getComponentPath(), handler.getBehaviorIndex());
/s
BookmarkableListenerInterfaceRequestHandler.getComponentPath() line: 86	
		return pageComponentProvider.getComponentPath();
/s
PageAndComponentProvider.getComponentPath() line: 200	
this	PageAndComponentProvider  (id=10350)	
	component	ActionMy3aPanel$1  (id=10241)	
	componentPath	null	
	...
			return component.getPageRelativePath();
/s
ActionMy3aPanel$1(Component).getPageRelativePath() line: 1751	
		return Strings.afterFirstPathComponent(getPath(), PATH_SEPARATOR);
/s
ActionMy3aPanel$1(Component).getPath() line: 1773	
		for (Component c = this; c != null; c = c.getParent())	/ c=[AjaxLink [Component id = select]]
		{
			if (buffer.length() > 0)
			{
				buffer.prepend(PATH_SEPARATOR);
			}
			buffer.prepend(c.getId());
"select"
/ volgende	,
		for (Component c = this; c != null; c = c.getParent())	/ c=[ActionMy3aPanel [Component id = cell]]
		{
			if (buffer.length() > 0)
			{
				buffer.prepend(PATH_SEPARATOR);
			}
			buffer.prepend(c.getId());
"cell:select"
/ volgende	,
        for (Component c = this; c != null; c = c.getParent())  / c=[Item [Component id = 1]] 
        {
            if (buffer.length() > 0)
            {
                buffer.prepend(PATH_SEPARATOR);
            }
            buffer.prepend(c.getId());
1:cell:select
/ volgende	,
		for (Component c = this; c != null; c = c.getParent())	/ c=[RepeatingView [Component id = cells]]
		{
			if (buffer.length() > 0)
			{
				buffer.prepend(PATH_SEPARATOR);
			}
			buffer.prepend(c.getId());
cells:1:cell:select
/ volgende	,
		for (Component c = this; c != null; c = c.getParent())	/ c=[Item [Component id = 5]]
		{
			if (buffer.length() > 0)
			{
				buffer.prepend(PATH_SEPARATOR);
			}
			buffer.prepend(c.getId());
5:cells:1:cell:select
/ volgende	,
		for (Component c = this; c != null; c = c.getParent())	/ c=[DefaultDataGridView [Component id = rows]]
		{
			if (buffer.length() > 0)
			{
				buffer.prepend(PATH_SEPARATOR);
			}
			buffer.prepend(c.getId());
rows:5:cells:1:cell:select
/ volgende	,
		for (Component c = this; c != null; c = c.getParent())	/ c=[WebMarkupContainer [Component id = body]]
		{
			if (buffer.length() > 0)
			{
				buffer.prepend(PATH_SEPARATOR);
			}
			buffer.prepend(c.getId());
body:rows:5:cells:1:cell:select
/ volgende	,
		for (Component c = this; c != null; c = c.getParent())	/ c=[DataTable [Component id = tableWithFilterForm]]
		{
			if (buffer.length() > 0)
			{
				buffer.prepend(PATH_SEPARATOR);
			}
			buffer.prepend(c.getId());
tableWithFilterForm:body:rows:5:cells:1:cell:select
/ volgende	,
		for (Component c = this; c != null; c = c.getParent())	/ c=[FilterForm [Component id = filterForm]]
		{
			if (buffer.length() > 0)
			{
				buffer.prepend(PATH_SEPARATOR);
			}
			buffer.prepend(c.getId());
filterForm:tableWithFilterForm:body:rows:5:cells:1:cell:select
/ volgende	,
		for (Component c = this; c != null; c = c.getParent())	/ c=[Page class = org.apache.wicket.examples.repeater.DataTableFilterToolbarMy3aPage, id = 11, render count = 1]
		{
			if (buffer.length() > 0)
			{
				buffer.prepend(PATH_SEPARATOR);
			}
			buffer.prepend(c.getId());
11:filterForm:tableWithFilterForm:body:rows:5:cells:1:cell:select
/ volgende	,
		for (Component c = this; c != null; c = c.getParent())	/ c=null

		return buffer.toString();
/t
MountedMapper(AbstractBookmarkableMapper).mapHandler(IRequestHandler) line: 479	
			ComponentInfo componentInfo = new ComponentInfo(renderCount,
				requestListenerInterfaceToString(handler.getListenerInterface()),
				handler.getComponentPath(), handler.getBehaviorIndex());
/d
componentInfo	ComponentInfo  (id=10515)	
	behaviorId	Integer  (id=10349)	
	componentPath	"filterForm:tableWithFilterForm:body:rows:5:cells:1:cell:select" (id=10516)	/ filterForm:tableWithFilterForm:body:rows:5:cells:1:cell:select
	listenerInterface	"IBehaviorListener" (id=10435)	
	renderCount	Integer  (id=10357)	

			UrlInfo urlInfo = new UrlInfo(new PageComponentInfo(pageInfo, componentInfo),
				pageClass, parameters);
urlInfo	AbstractBookmarkableMapper$UrlInfo  (id=10530)	
	pageComponentInfo	PageComponentInfo  (id=10534)	
			behaviorId	Integer  (id=10349)	
			componentPath	"filterForm:tableWithFilterForm:body:rows:5:cells:1:cell:select" (id=10516)	
			listenerInterface	"IBehaviorListener" (id=10435)	
			renderCount	Integer  (id=10357)	
		pageInfo	PageInfo  (id=10438)		11

/ De component path was
11:filterForm:tableWithFilterForm:body:rows:5:cells:1:cell:select
/ en de page id 11 hebben ze eraf gehaald	,

			return buildUrl(urlInfo);
/t
AjaxLink$1(AjaxEventBehavior).renderHead(Component, IHeaderResponse) line: 96	
			CharSequence js = getCallbackScript(component);
/d
			response.render(OnDomReadyHeaderItem.forScript(js.toString()));
/s
ResourceAggregator.render(HeaderItem) line: 262	
		item = getItemToBeRendered(item);
item	OnDomReadyHeaderItem  (id=10580)	
	javaScript	"Wicket.Ajax.ajax({"u":"./filtermy3a?11-1.IBehaviorListener.0-filterForm-tableWithFilterForm-body-rows-5-cells-1-cell-select","c":"select6f","e":"click"});" (id=10582)	

		if (item instanceof OnDomReadyHeaderItem || item instanceof OnEventHeaderItem)
		{
			renderDependencies(item, new LinkedHashSet<HeaderItem>());
			domReadyItemsToBeRendered.add(item);

this	ResourceAggregator  (id=10226)	
	domReadyItemsToBeRendered	ArrayList<E>  (id=10244)	
		[0]	OnDomReadyHeaderItem  (id=10227)	
		[1]	OnDomReadyHeaderItem  (id=10231)	
		[2]	OnDomReadyHeaderItem  (id=10235)	
		[3]	OnDomReadyHeaderItem  (id=10239)	
		[4]	OnDomReadyHeaderItem  (id=10580)	
			javaScript	"Wicket.Ajax.ajax({"u":"./filtermy3a?11-1.IBehaviorListener.0-filterForm-tableWithFilterForm-body-rows-5-cells-1-cell-select","c":"select6f","e":"click"});" (id=10582)	

/ Dus 5 = row index	, 1=cell index	, deze indices starts met 1	,

/ intermezzo

/ Als we de page request, zien we inderdaad row 1,2,3,...

<script type="text/javascript">
/*<![CDATA[*/
Wicket.Event.add(window, "domready", function(event) { 
Wicket.Ajax.ajax({"u":"./filtermy3a?15-1.IBehaviorListener.0-filterForm-tableWithFilterForm-body-rows-1-cells-1-cell-select","c":"selectab","e":"click"});;
Wicket.Ajax.ajax({"u":"./filtermy3a?15-1.IBehaviorListener.0-filterForm-tableWithFilterForm-body-rows-2-cells-1-cell-select","c":"selectac","e":"click"});;
Wicket.Ajax.ajax({"u":"./filtermy3a?15-1.IBehaviorListener.0-filterForm-tableWithFilterForm-body-rows-3-cells-1-cell-select","c":"selectae","e":"click"});;
Wicket.Ajax.ajax({"u":"./filtermy3a?15-1.IBehaviorListener.0-filterForm-tableWithFilterForm-body-rows-4-cells-1-cell-select","c":"selectaf","e":"click"});;
Wicket.Ajax.ajax({"u":"./filtermy3a?15-1.IBehaviorListener.0-filterForm-tableWithFilterForm-body-rows-5-cells-1-cell-select","c":"selectb0","e":"click"});;
Wicket.Ajax.ajax({"u":"./filtermy3a?15-1.IBehaviorListener.0-filterForm-tableWithFilterForm-body-rows-6-cells-1-cell-select","c":"selectb1","e":"click"});;
Wicket.Ajax.ajax({"u":"./filtermy3a?15-1.IBehaviorListener.0-filterForm-tableWithFilterForm-body-rows-7-cells-1-cell-select","c":"selectb2","e":"click"});;
Wicket.Ajax.ajax({"u":"./filtermy3a?15-1.IBehaviorListener.0-filterForm-tableWithFilterForm-body-rows-8-cells-1-cell-select","c":"selectb3","e":"click"});;
Wicket.Event.publish(Wicket.Event.Topic.AJAX_HANDLERS_BOUND);
;});
/*]]>*/
</script>

/ maar als we sorteren , of de page opnieuw opvragen, nummert hij door	,

/ Geef	, met ?26	,
http://localhost:9090/wicket-examples-step-by-step/repeater/filtermy3a?26

<script type="text/javascript">
/*<![CDATA[*/
Wicket.Event.add(window, "domready", function(event) { 
Wicket.Ajax.ajax({"u":"./filtermy3a?26-2.IBehaviorListener.0-filterForm-tableWithFilterForm-body-rows-9-cells-1-cell-select","c":"select128","e":"click"});;
Wicket.Ajax.ajax({"u":"./filtermy3a?26-2.IBehaviorListener.0-filterForm-tableWithFilterForm-body-rows-10-cells-1-cell-select","c":"select129","e":"click"});;
Wicket.Ajax.ajax({"u":"./filtermy3a?26-2.IBehaviorListener.0-filterForm-tableWithFilterForm-body-rows-11-cells-1-cell-select","c":"select12a","e":"click"});;
Wicket.Ajax.ajax({"u":"./filtermy3a?26-2.IBehaviorListener.0-filterForm-tableWithFilterForm-body-rows-12-cells-1-cell-select","c":"select12b","e":"click"});;
Wicket.Ajax.ajax({"u":"./filtermy3a?26-2.IBehaviorListener.0-filterForm-tableWithFilterForm-body-rows-13-cells-1-cell-select","c":"select12c","e":"click"});;
Wicket.Ajax.ajax({"u":"./filtermy3a?26-2.IBehaviorListener.0-filterForm-tableWithFilterForm-body-rows-14-cells-1-cell-select","c":"select12d","e":"click"});;
Wicket.Ajax.ajax({"u":"./filtermy3a?26-2.IBehaviorListener.0-filterForm-tableWithFilterForm-body-rows-15-cells-1-cell-select","c":"select12e","e":"click"});;
Wicket.Ajax.ajax({"u":"./filtermy3a?26-2.IBehaviorListener.0-filterForm-tableWithFilterForm-body-rows-16-cells-1-cell-select","c":"select12f","e":"click"});;
Wicket.Event.publish(Wicket.Event.Topic.AJAX_HANDLERS_BOUND);
;});
/*]]>*/
</script>

/ sort op lastname Lee	,
<script type="text/javascript">
/*<![CDATA[*/
Wicket.Event.add(window, "domready", function(event) { 
Wicket.Ajax.ajax({"u":"./filtermy3a?27-3.IBehaviorListener.0-filterForm-tableWithFilterForm-body-rows-17-cells-1-cell-select","c":"select130","e":"click"});;
Wicket.Ajax.ajax({"u":"./filtermy3a?27-3.IBehaviorListener.0-filterForm-tableWithFilterForm-body-rows-18-cells-1-cell-select","c":"select131","e":"click"});;
Wicket.Event.publish(Wicket.Event.Topic.AJAX_HANDLERS_BOUND);
;});
/*]]>*/
</script>

/ Einde intermezzo

/ 7	. 

/ click op select	,

Request URL:http://localhost:9090/wicket-examples-step-by-step/repeater/filtermy3a?27-3.IBehaviorListener.0-filterForm-tableWithFilterForm-body-rows-17-cells-1-cell-select&_=1486022648928

/ SERVER
/s
RequestCycle.processRequest() line: 219	
			IRequestHandler handler = resolveRequestHandler(); / handler heeft 
										/ componentPath filterForm:tableWithFilterForm:body:rows:17:cells:1:cell:select
										/ maar component null	, is nog niet resolved	, later	,
/s
RequestCycle.resolveRequestHandler() line: 189	
		return requestMapper.mapRequest(request);
/s
SystemMapper(CompoundRequestMapper).mapRequest(Request) line: 150	
		for (IRequestMapper mapper : mappers)
		{
			int score = mapper.getCompatibilityScore(request);
			list.add(new MapperWithScore(mapper, score));
		}

		Collections.sort(list);

		for (MapperWithScore mapperWithScore : list)
		{
			IRequestMapper mapper = mapperWithScore.getMapper();
MountedMapper [mountSegments=filtermy3a]
			IRequestHandler handler = mapper.mapRequest(request);
/s
MountedMapper(AbstractBookmarkableMapper).mapRequest(Request) line: 346	
request	ServletWebRequest  (id=10231)	
	url	Url  (id=10249)	
filtermy3a?27-3.IBehaviorListener.0-filterForm-tableWithFilterForm-body-rows-17-cells-1-cell-select&_=1486022648940
																			 ^^^

/ Intermezzo

SystemMapper(CompoundRequestMapper).mapHandler(IRequestHandler) line: 211	
		for (IRequestMapper mapper : mappers)			/ hij gaat alle mappers af	, er is niet een .getCompatibilityScore  call	,
		{
			Url url = mapper.mapHandler(handler);
/s
MountedMapper.mapHandler(IRequestHandler) line: 159	
		Url url = super.mapHandler(requestHandler);
/s
MountedMapper(AbstractBookmarkableMapper).mapHandler(IRequestHandler) line: 396	
	...

/ .mapRequest en .mapHandler staan vlak bij elkaar	,


/ Einde Intermezzo

		UrlInfo urlInfo = parseRequest(request);
request
	url filtermy3a?27-3.IBehaviorListener.0-filterForm-tableWithFilterForm-body-rows-17-cells-1-cell-select&_=1486022648940
urlInfo	AbstractBookmarkableMapper$UrlInfo  (id=10256)	
	pageClass	Class<T> (org.apache.wicket.examples.repeater.DataTableFilterToolbarMy3aPage) (id=5270)	
	pageComponentInfo	PageComponentInfo  (id=10259)	
		componentInfo	ComponentInfo  (id=10261)	
			behaviorId	Integer  (id=10265)	
			componentPath	"filterForm:tableWithFilterForm:body:rows:17:cells:1:cell:select" (id=10266)	
			listenerInterface	"IBehaviorListener" (id=10268)	
			renderCount	Integer  (id=10269)	
		pageInfo	PageInfo  (id=10263)	
			pageId	Integer				27

			else if (info.getComponentInfo() != null)
			{
				// with both page instance and component+listener this is a listener interface URL
				return processListener(info, pageClass, pageParameters);
/s
MountedMapper(AbstractBookmarkableMapper).processListener(PageComponentInfo, Class<IRequestablePage>, PageParameters) line: 300	
		if (componentInfo != null)
		{
			renderCount = componentInfo.getRenderCount();
			listenerInterface = requestListenerInterfaceFromString(componentInfo.getListenerInterface());

		if (listenerInterface != null)
		{
			PageAndComponentProvider provider = new PageAndComponentProvider(pageInfo.getPageId(),
				pageClass, pageParameters, renderCount, componentInfo.getComponentPath());
			provider.setPageSource(getContext());

			return new ListenerInterfaceRequestHandler(provider, listenerInterface,
				componentInfo.getBehaviorId());
/t
SystemMapper(CompoundRequestMapper).mapRequest(Request) line: 151	
			IRequestHandler handler = mapper.mapRequest(request);
/d
handler	ListenerInterfaceRequestHandler  (id=10326)	
	pageComponentProvider	PageAndComponentProvider  (id=10324)	
		component	null	
		componentPath	"filterForm:tableWithFilterForm:body:rows:17:cells:1:cell:select" (id=10266)	
/t
RequestCycle.processRequest() line: 220	
			IRequestHandler handler = resolveRequestHandler();
			if (handler != null)
			{
				execute(handler);
/s
ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 158	
			component = getComponent();										/ Hier wordt de component resolved	,
/s
ListenerInterfaceRequestHandler.getComponent() line: 90	
		return pageComponentProvider.getComponent();
/s
PageAndComponentProvider.getComponent() line: 157	
		if (component == null)
		{
			IRequestablePage page = getPageInstance();
			component = page.get(componentPath); / filterForm:tableWithFilterForm:body:rows:17:cells:1:cell:select

/ Intermezzo

/ 7	. 

/ path 

/ WICKET PATH RESOLVEMENT
			
/ het path is filterForm:tableWithFilterForm:body:rows:17:cells:1:cell:select	, op de huidige page	, 
/ op een volgende page	, met andere renderCount (getal achter ?)	, is 17 bijv 24	, 
/ maar dat maakt niet uit: hij zoekt op de huidige pagina naar Component "select"	, en op de huidige pagina heeft de Item index 17 of 24, wat het is	, passert hem , en komt op "select"	, de click fct die onClick calls, sluit model in , arg van populateItem	, en daar zit de contact in	, 
/ Dus filterForm:tableWithFilterForm:body:rows:17:cells:1:cell:select is het wicket path naar de component	, 

$ vi DataTableFilterToolbarMy3aPage.html

<wicket:extend>
    <form wicket:id="filterForm">												/ FilterForm
    	<table class="dataview" wicket:id="tableWithFilterForm"></table>		/ DataTable, a Panel	,
    </form>
    <div wicket:id="modal"></div>
</wicket:extend>

$ vi DataTable.html
<wicket:panel xmlns:wicket="http://wicket.apache.org">				/ komt in/onder waar het Panel aan binds, table#tableWithFilterForm
																			/ zo werken panels	,
<tbody wicket:id="body">										 				/ WebMarkupContainer	,
	<tr wicket:id="rows">														/ DefaultDataGridView, een RefreshingView, een RepeatingView, 
																					/ maar ook iedere child !
		<td wicket:id="cells">													/ RepeatingView	, maar ook van iedere child	,	
			<div wicket:id="cell">[cell]</div>									/ ActionMy3aPanel
		</td>
	</tr>
</tbody>
</wicket:panel>

$ vi ActionMy3aPanel.html	
<wicket:panel>										/ komt onder/in waar het panel aan binds, div#cell	, 											
	<a wicket:id="select">select</a>
</wicket:panel>

/ 7	. 

public class DataTableFilterToolbarMy3aPage extends BaseMy3aPage
		columns.add(new AbstractColumn<Contact, String>(new Model<>("Actions"))
		{
			@Override
			public void populateItem(Item<ICellPopulator<Contact>> cellItem, String componentId,
				final IModel<Contact> model)
			{
				Panel action=new ActionMy3aPanel(componentId) {
					@Override
					protected void click(AjaxRequestTarget target) {
						((ModalWindow)getPage().get("modal")).setContent(confirm).show(target);
						getPage().setDefaultModel(model);		// click is closure, closes model in	,
					}
				};
				cellItem.add(action);

/ Als we op select click	, wordt deze click method exec	, maar deze sluit model in dat een arg is van populateItem	, en hier zit de Contact in	,


/ Einde Intermezzo

/ Einde DATATABLE FORM BUTTON OR LINK

/ IMAGE ON LINK

/ Lees	,
http://stackoverflow.com/questions/3070485/how-to-make-a-wicket-link-appear-as-an-image

$ vi MyPanel.java

public class MyPanel extends Panel {
	public MyPanel(String id) {
		super(id);
		AjaxLink<Void>ajaxLink=new AjaxLink<Void>("link") {
			@Override
			public void onClick(AjaxRequestTarget target) {
			};
		};
		add(ajaxLink);
		PackageResourceReference packageResourceReference=new PackageResourceReference(getClass(), "lst_remove.png");
		ajaxLink.add(new Image("icon", packageResourceReference));
		IModel<String>model=new PropertyModel<String>(this, "class.simpleName");
		Label label=new Label("result",model);
		add(label);
	}

}

$ vi Image.java 
	public Image(final String id, final ResourceReference resourceReference,
		final ResourceReference... resourceReferences)

/ blijkbaar kunnen we het laatste arg met ... weglaten	, 
/ TODO

<wicket:panel>
	<a wicket:id="link">
		<img wicket:id="icon">
	</a>
	<span wicket:id="result"></span>
</wicket:panel>

/ in HTML	,

<div wicket:id="panel"><wicket:panel>
	<a wicket:id="link" id="link1" href="javascript:;">
		<img wicket:id="icon" src="./wicket/resource/org.apache.wicket.examples.repeater.MyPanel/lst_remove.png">
	</a>
	<span wicket:id="result">MyPanel</span>
</wicket:panel>
</div>

/ Hoe met "./wicket/resource/org.apache.wicket.examples.repeater.MyPanel/lst_remove.png"	?
/ TODO

/ Einde IMAGE ON LINK

/ ONCONFIGURE ONBEFORERENDER 

/ 7	.

/ voorbeelden van onConfigure uit source	,

NOTE: Why should onBeforeRender() not be used for this? Because if a component's visibility is controlled inside onBeforeRender(), once invisible the component will never become visible again.
/ WH omdat onConfigure 1 keer wordt called	, en onBeforeRender meerdere keren	, 

/ lees	,
http://superuser.com/questions/400078/how-can-i-search-a-file-by-its-name-and-partial-path

/ zoek in src/main/java 	,
[eric@localhost wicket]$ find -type f -path "*src/main/java*java" | xargs grep onConfigure | grep void

	public FeedbackPanel(final String id, IFeedbackMessageFilter filter)
	{
		super(id);
		WebMarkupContainer messagesContainer = new WebMarkupContainer("feedbackul")
		{
			private static final long serialVersionUID = 1L;

			@Override
			protected void onConfigure()
			{
				super.onConfigure();
				setVisible(anyMessage());
			}
		};

DataTable.class
	private static class ToolbarsContainer extends WebMarkupContainer

		@Override
		public void onConfigure()
		{
			super.onConfigure();

			toolbars.configure();

			Boolean visible = toolbars.visitChildren(new IVisitor<Component, Boolean>()
			{
				@Override
				public void component(Component object, IVisit<Boolean> visit)
				{
					object.configure();
					if (object.isVisible())
					{
						visit.stop(Boolean.TRUE);
					}
					else
					{
						visit.dontGoDeeper();
					}
				}
			});
			if (visible == null)
			{
				visible = false;
			}
			setVisible(visible);
		}
	}

NavigationToolbar.class
	@Override
	protected void onConfigure()
	{
		super.onConfigure();
		setVisible(getTable().getPageCount() > 1);
	}

AjaxFormValidatingBehavior.class
	protected final void addFeedbackPanels(final AjaxRequestTarget target)
	{
		form.getPage().visitChildren(IFeedback.class, new IVisitor<Component, Void>()
		{
			@Override
			public void component(final Component component, final IVisit<Void> visit)
			{
				component.configure(); // feedback component might change its visibility
				if (component.isVisibleInHierarchy())
				{
					target.add(component);
				}
				else
				{
					visit.dontGoDeeper();
				}
			}
		});
	}

/ Einde WICKET ONCONFIGURE ONBEFORERENDER

/ WICKET ONCONFIGURE ONBEFORERENDER

/ 7	. 

/ een page met alleen een label en een input is stateless	,
/ met een link is stateful
/ met een form is stateful

/ 7	. 

/ lees manual	, par 7.4

/ 13	. 

/ abstract	,

 render 
	beforeRender 
		configure 
			onConfigure
		if visible
			onBeforeRender

/ dus render calls beforeRender	, en die calls configure om te bepalen of hij visible is	, en alleen als ja calls onBeforeRender	,
/ TODO wordt daarom oon niet rendered?


/ als we de link click , dan schedules Wicket de page render erachter aan	,
/ TODO
/ dit itt een ajax link	,
/ ook f5 geeft een render page request	, dat zien we in devtools	,

/ we hebben het 2de label setVisible false set	, daardoor wordt inderdaad de onBeforeRender method niet called	 op het 2de label	,

/ we click de link meerdere keren	,
/ we zien	, 
11:03:12.654 [http-nio-9090-exec-44] INFO  org.apache.wicket.response.filter.ServerAndClientTimeFilter - 2ms server time taken for request onbeforerender?0 response size: 451
*********** onConfigure page ***********
*********** onBeforeRender page ***********
*********** onConfigure second ***********
11:03:12.769 [http-nio-9090-exec-36] INFO  org.apache.wicket.response.filter.ServerAndClientTimeFilter - 0ms server time taken for request onbeforerender?0 response size: 449
*********** onConfigure page ***********
*********** onBeforeRender page ***********
*********** onConfigure first ***********
*********** onBeforeRender first ***********
11:03:15.050 [http-nio-9090-exec-48] INFO  org.apache.wicket.response.filter.ServerAndClientTimeFilter - 2ms server time taken for request onbeforerender?0 response size: 483
*********** onConfigure page ***********
*********** onBeforeRender page ***********
*********** onConfigure second ***********
...

/ WH de cruciale method ,
OnBeforeRenderPage$2(Component).internalBeforeRender() line: 940	
		configure();																					/ altijd	,
		if ((determineVisibility()) && !getFlag(FLAG_RENDERING) && !getFlag(FLAG_PREPARED_FOR_RENDER))	/ kijkt of visible	,
		{
			onBeforeRender();														

/ 13 

/ het voorbeeld	,

$ vi OnBeforeRenderPage.java

public class OnBeforeRenderPage extends WebPage{

	private Label first;
	private Label second;
	public OnBeforeRenderPage() {
		first=new Label("label",new Model<String>("First")){
			@Override
			protected void onBeforeRender() {
				System.out.println("*********** onBeforeRender first ***********");
				super.onBeforeRender();
			}
			@Override
			protected void onConfigure() {
				super.onConfigure();
				System.out.println("*********** onConfigure first ***********");
			}
		};
		add(first);
		second=new Label("label",new Model<String>("Second")){
			@Override
			protected void onBeforeRender() {
				System.out.println("*********** onBeforeRender second **********");
				super.onBeforeRender();
			}
			@Override
			protected void onConfigure() {
				super.onConfigure();
				setVisible(false);																		<-
				System.out.println("*********** onConfigure second ***********");
			}
		};
		Link<Void>link=new Link<Void>("link") {
			 @Override
			public void onClick() {
			}
		};
		add(link);
	}
	@Override
	protected void onBeforeRender() {
		if(contains(first, true)){
			replace(second);
		}else{
			replace(first);
		}
		System.out.println("*********** onBeforeRender page ***********");
		super.onBeforeRender();
	}
	@Override
	protected void onConfigure() {
		
		super.onConfigure();
		System.out.println("*********** onConfigure page ***********");

	}
}

$ less OnBeforeRenderPage.html
	<h3 wicket:id="label"></h3>
	<a wicket:id="link">Reload</a>

/ 13	. 

/ debug	,


/we render de page ( de 1ste keer)	,
/stack
/s
	OnBeforeRenderPage$2.onConfigure() line: 33	
				super.onConfigure();
				setVisible(false);
				System.out.println("*********** onConfigure second ***********");
/cb
	OnBeforeRenderPage$2(Component).configure() line: 1055	
	OnBeforeRenderPage$2(Component).internalBeforeRender() line: 940	
		configure();
/cb
	OnBeforeRenderPage$2(Component).beforeRender() line: 1017	
	OnBeforeRenderPage(MarkupContainer).onBeforeRenderChildren() line: 1866	
			for (final Component child : this)
			{
				// Get next child
				// Call begin request on the child
				// We need to check whether the child's wasn't removed from the
				// component in the meanwhile (e.g. from another's child
				// onBeforeRender)
				if (child.getParent() == this)
				{
					child.beforeRender();
/cb
	OnBeforeRenderPage(Component).onBeforeRender() line: 3877	
		onBeforeRenderChildren();
/cb
	OnBeforeRenderPage(Page).onBeforeRender() line: 801	
	OnBeforeRenderPage.onBeforeRender() line: 53	
		if(contains(first, true)){
			replace(second);
		}else{
			replace(first);
		}
		System.out.println("*********** onBeforeRender page ***********");
		super.onBeforeRender();
/cb
	OnBeforeRenderPage(Component).internalBeforeRender() line: 949	
		configure();

		if ((determineVisibility()) && !getFlag(FLAG_RENDERING) &&
			!getFlag(FLAG_PREPARED_FOR_RENDER))
		{
			setRequestFlag(RFLAG_BEFORE_RENDER_SUPER_CALL_VERIFIED, false);

			getApplication().getComponentPreOnBeforeRenderListeners().onBeforeRender(this);

			onBeforeRender();
/cb
	OnBeforeRenderPage(Component).beforeRender() line: 1017	
	OnBeforeRenderPage(Component).internalPrepareForRender(boolean) line: 2215	
	OnBeforeRenderPage(Page).internalPrepareForRender(boolean) line: 242	
	OnBeforeRenderPage(Component).render() line: 2304	
	OnBeforeRenderPage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/ debug
/s
OnBeforeRenderPage$2.onConfigure() line: 33	
				super.onConfigure();
				setVisible(false);
/s
OnBeforeRenderPage$2(Component).setVisible(boolean) line: 3222	
		// Is new visibility state a change?
		if (visible != getFlag(FLAG_VISIBLE))
/j
/want	,
visible=false
/s
OnBeforeRenderPage$2(Component).getFlag(int) line: 3707	
		return (flags & flag) != 0;
true
/t
OnBeforeRenderPage$2(Component).setVisible(boolean) line: 3225	
		// Is new visibility state a change?
		if (visible != getFlag(FLAG_VISIBLE))
/j
		{
			// record component's visibility change
			addStateChange();

			// Change visibility
			setFlag(FLAG_VISIBLE, visible);
/s
OnBeforeRenderPage$2(Component).setFlag(int, boolean) line: 4119	
		else
		{
			flags &= ~flag;
4013208a
/t
OnBeforeRenderPage$2(Component).setVisible(boolean) line: 3229	
			// Change visibility
			setFlag(FLAG_VISIBLE, visible);
/d
			onVisibleStateChanged();
		return this;
/t
OnBeforeRenderPage$2.onConfigure() line: 34	
				super.onConfigure();
				setVisible(false);
/d
				System.out.println("*********** onConfigure second ***********");
/t
OnBeforeRenderPage$2(Component).internalBeforeRender() line: 942	
		configure();
		if ((determineVisibility()) && !getFlag(FLAG_RENDERING) &&
			!getFlag(FLAG_PREPARED_FOR_RENDER))
/s
OnBeforeRenderPage$2(Component).determineVisibility() line: 4400	
		return isVisible() && isRenderAllowed() && isVisibilityAllowed();
/s
OnBeforeRenderPage$2(Component).isVisible() line: 2135	
		return getFlag(FLAG_VISIBLE);
false
/t
OnBeforeRenderPage$2(Component).internalBeforeRender() line: 960	
		configure();
/d
		if ((determineVisibility()) && !getFlag(FLAG_RENDERING) &&
/n
			!getFlag(FLAG_PREPARED_FOR_RENDER))
		{
			onBeforeRender();
/n

/ 7	. 

/ VISIBLE -> RENDER

/ Waarom als onConfigure setVisible(false), en onBeforeRender wordt NIET called	, wordt de Component ook helemaal niet rendered	,

/s
	OnBeforeRenderPage(Component).render() line: 2308	
				internalPrepareForRender(true);				/ beforeRender -> configure (-> onConfigure), onBeforeRender	,
			// Do the render
			internalRender();
/cb
	OnBeforeRenderPage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/s
OnBeforeRenderPage(Component).render() line: 2308	
this	OnBeforeRenderPage  (id=14635)	
	children	ArrayList<E>  (id=14664)	
		[0]	OnBeforeRenderPage$2  (id=14668)	
			data	Model<T>  (id=14674)	
				object	"Second" (id=14677)	
			flags	1108549770				/ 420b2c9a
			id	"label" (id=14675)	

	/** Visibility boolean */
	private static final int FLAG_VISIBLE = 0x0010;

/ Onthoud	,
Component.render
	Component.internalRender
		MarkupContainer.onRender
			Component.internalRenderComponent

Component.internalRender
		IMarkupFragment markup = getMarkup();
		if (determineVisibility())									<-
			setFlag(FLAG_HAS_BEEN_RENDERED, true);
				onRender();

/ 13	. 

/ ONBEFORERENDER
/ internalPrepareForRender wordt alleen called in Component.render	, als this=WebPage	, deze calls beforeRender op alle children	, 
/s
	OnBeforeRenderPage(MarkupContainer).onBeforeRenderChildren() line: 1864	
	OnBeforeRenderPage(Component).onBeforeRender() line: 3877	
	OnBeforeRenderPage(Page).onBeforeRender() line: 801	
	OnBeforeRenderPage.onBeforeRender() line: 53	
	OnBeforeRenderPage(Component).internalBeforeRender() line: 949	
		configure();
		if ((determineVisibility()) && !getFlag(FLAG_RENDERING) &&
			!getFlag(FLAG_PREPARED_FOR_RENDER))
		{
			onBeforeRender();
/cb
	OnBeforeRenderPage(Component).beforeRender() line: 1017	
	OnBeforeRenderPage(Component).internalPrepareForRender(boolean) line: 2215	
		beforeRender();
/cb
	OnBeforeRenderPage(Page).internalPrepareForRender(boolean) line: 242	
	OnBeforeRenderPage(Component).render() line: 2304	
			// Invoke prepareForRender only if this is the root component to be rendered
			MarkupContainer parent = getParent();
			if ((parent == null) || (parent.getFlag(FLAG_RENDERING) == false) || isAuto())
/j
			{
				internalPrepareForRender(true);			<-
			}

			// Do the render
			internalRender();				/ later	,
/c
	OnBeforeRenderPage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ 13	. 

/ RENDER

/ stack
/s
	OnBeforeRenderPage(MarkupContainer).renderNext(MarkupStream) line: 1498	
	OnBeforeRenderPage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	OnBeforeRenderPage(Page).onRender() line: 879	
	OnBeforeRenderPage(WebPage).onRender() line: 141	
	OnBeforeRenderPage(Component).internalRender() line: 2380	
	OnBeforeRenderPage(Component).render() line: 2308	
			// Invoke prepareForRender only if this is the root component to be rendered
			MarkupContainer parent = getParent();
			if ((parent == null) || (parent.getFlag(FLAG_RENDERING) == false) || isAuto())
/ j
			{
				internalPrepareForRender(true);
/d
			// Do the render
			internalRender();
/cb
	OnBeforeRenderPage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/ debug	, 
/s
OnBeforeRenderPage(MarkupContainer).renderNext(MarkupStream) line: 1498	
		final MarkupElement element = markupStream.get(); 				/ <h3 wicket:id="label">
			final ComponentTag tag = (ComponentTag)element;
			// Get component id
			final String id = tag.getId();
			// Get the component for the id from the given container
			Component component = get(id);	/ component	OnBeforeRenderPage$2  (id=14744)	
				component.render();
/s
OnBeforeRenderPage$2(Component).render() line: 2296	

			// Invoke prepareForRender only if this is the root component to be rendered
			MarkupContainer parent = getParent();
			if ((parent == null) || (parent.getFlag(FLAG_RENDERING) == false) || isAuto())
/n
			{
				internalPrepareForRender(true);
/n

			// Do the render
			internalRender();
/s
OnBeforeRenderPage$2(Component).internalRender() line: 2345	
		if (determineVisibility())
/n
/ want	,
/s
OnBeforeRenderPage$2(Component).determineVisibility() line: 4400	
		return isVisible() && isRenderAllowed() && isVisibilityAllowed();
/s
OnBeforeRenderPage$2(Component).isVisible() line: 2135	
		return getFlag(FLAG_VISIBLE);
this	OnBeforeRenderPage$2  (id=14744)	
	flags	1108549770		/ 4213208a en private static final int FLAG_VISIBLE = 0x0010;	/ dus NIET visible	,
	id	"label" (id=14675)	
/t
OnBeforeRenderPage$2(Component).internalRender() line: 2397	
		if (determineVisibility())
/n
				onRender();
/n

/ MORGENOCHTEND I
/ render Label	,


/ Einde WICKET ONCONFIGURE ONBEFORERENDER

/ SAMENVATTING HOW RENDER DIFFERENT COMPONENTS

/ See	,
/ STACKTRACE RENDER WEBMARKUPCONTAINERS WITH REPEATER

/ als debug	, lees van boven naar onder	,

/ Page	,
    WebMarkupContainer1bPage(Component).render() line: 2308         / this=WebPage
    WebMarkupContainer1bPage(Component).internalRender() line: 2380
    WebMarkupContainer1bPage(WebPage).onRender() line: 141
    WebMarkupContainer1bPage(Page).onRender() line: 879
    WebMarkupContainer1bPage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759
    WebMarkupContainer1bPage(MarkupContainer).renderNext(MarkupStream) line: 1524   

/ RepeatingView
    RepeatingView(Component).render() line: 2308
    RepeatingView(Component).internalRender() line: 2380
    RepeatingView(AbstractRepeater).onRender() line: 102
    RepeatingView(AbstractRepeater).renderChild(Component) line: 115

/ MarkupContainer
    WebMarkupContainer(Component).render() line: 2308           / this=WebMarkupContainer
    WebMarkupContainer(Component).internalRender() line: 2380
    WebMarkupContainer(MarkupContainer).onRender() line: 1698
    WebMarkupContainer(Component).internalRenderComponent() line: 2565
    DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70
    WebMarkupContainer(MarkupContainer).onComponentTagBody(MarkupStream, ComponentTag) line: 1657
    WebMarkupContainer(MarkupContainer).renderComponentTagBody(MarkupStream, ComponentTag) line: 1734
    WebMarkupContainer(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759
    WebMarkupContainer(MarkupContainer).renderNext(MarkupStream) line: 1524      

   	Label(Component).render() line: 2308
    Label(Component).internalRender() line: 2380
    Label(WebComponent).onRender() line: 60
    Label(Component).internalRenderComponent() line: 2565
    DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70
    Label.onComponentTagBody(MarkupStream, ComponentTag) line: 115          / dus NIET MarkupContainer.onComponentTagBody, die renderAll calls  ,


/ Einde SAMENVATTING RENDERING DIFFERENT COMPONENTS 


/ MODALWINDOW TITLE

/ prg DataTableFilterToolbarMy3aPage	, 

		@Override
			public void populateItem(Item<ICellPopulator<Contact>> cellItem, String componentId,
				IModel<Contact> m)
			{
				
				final IModel<Contact> model=m;
				
				final Panel confirm=new ModalMy3aPanel(ModalWindow.CONTENT_ID) {
					
					@Override
					protected void click(AjaxRequestTarget target) {
						((ModalWindow)getPage().get("modal")).close(target);
					}
					
					@Override
					protected IModel<String> modelForTitle() {
						return new PropertyModel<String>(model, "cellPhone");
					}
				};
				
				Panel action=new ActionMy3aPanel(componentId) {
					@Override
					protected void click(AjaxRequestTarget target) {
						// first setTitle, then show	, because show calls getTitle	, 
						((ModalWindow)getPage().get("modal")).setTitle(new PropertyModel<String>(model, "cellPhone"));
						((ModalWindow)getPage().get("modal")).setContent(confirm).show(target);
						getPage().setDefaultModel(model);
						
						
					}
				};
				cellItem.add(action);
				
			}
		});

/ click select op een row	,

/ stack
/s
	ModalWindow.getWindowOpenJavaScript() line: 1015	
	ModalWindow.show(IPartialPageRequestHandler) line: 370	
		if (shown == false)
		{
			getContent().setVisible(true);
			target.add(this);
			target.appendJavaScript(getWindowOpenJavaScript());		<-
			shown = true;
/cb
	DataTableFilterToolbarMy3aPage$1$2.click(AjaxRequestTarget) line: 86	
/=
				Panel action=new ActionMy3aPanel(componentId) {
					@Override
					protected void click(AjaxRequestTarget target) {
						((ModalWindow)getPage().get("modal")).setContent(confirm).show(target);
/cb
	ActionMy3aPanel$1.onClick(AjaxRequestTarget) line: 17	
	AjaxLink$1.onEvent(AjaxRequestTarget) line: 84	
	AjaxLink$1(AjaxEventBehavior).respond(AjaxRequestTarget) line: 155	
	AjaxLink$1(AbstractDefaultAjaxBehavior).onRequest() line: 593	
	RequestListenerInterface.internalInvoke(Component, Object) line: 258	
	RequestListenerInterface.invoke(IRequestableComponent, Behavior) line: 241	
	ListenerInterfaceRequestHandler.invokeListener() line: 248	
	ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 234	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/s
ModalWindow.getWindowOpenJavaScript() line: 1015	
		if (isCustomComponent())
		{
			buffer.append("var element = document.getElementById(\"");
			buffer.append(getContentMarkupId());
			buffer.append("\");\n");
		}
		String title = getTitle() != null ? getTitle().getObject() : null;
/s
PropertyModel<T>(AbstractPropertyModel<T>).getObject() line: 71	
this	PropertyModel<T>  (id=18976)	
	expression	"cellPhone" (id=18978)	
	target	DetachableContactModel  (id=18884)	
		id	49	
		state	LoadableDetachableModel$InternalState  (id=19012)	
		transientModelObject	null	
/s
PropertyModel<T>(AbstractPropertyModel<T>).getObject() line: 83	
		final String expression = propertyExpression();
		final Object target = getInnermostModelOrObject();
/s
PropertyModel<T>(AbstractPropertyModel<T>).getInnermostModelOrObject() line: 264	
		Object object = getTarget();	/ object	DetachableContactModel  (id=18884)	
		while (object instanceof IModel)
		{
			Object tmp = ((IModel<?>)object).getObject();
/s
DetachableContactModel(LoadableDetachableModel<T>).getObject() line: 136	
		if (state == null || state == InternalState.DETACHED)
		{
			// prevent infinite attachment loops
			state = InternalState.ATTACHING;
			transientModelObject = load();
transientModelObject	Contact  (id=19037)	
	bornDate	Date  (id=19038)	
	cellPhone	"877-555-4106" (id=19039)	
	firstName	"Abner" (id=19040)	
	homePhone	"524-555-7333" (id=19041)	
	id	49	
	lastName	"Black" (id=19042)	








/ Einde MODALWINDOW TITLE

/ STRINGRESOURCEMODEL 

/ 7		.

/ WHY STRINGRESOURCEMODEL$ASSIGNMENTWRAPPER

/**
 * Models that wish to substitute themselves with a wrapper when they are bound to a component
 * (either through IModel parameter in a constructor or via a call to
 * {@link Component#setDefaultModel(IModel)}) should implement this interface. One reason for a
 * model to want to do this is if it needs to be aware of the component it is bound to.
 * 
public interface IComponentAssignedModel<T> extends IModel<T>

public class StringResourceModel extends LoadableDetachableModel<String> implements IComponentAssignedModel<String>
	/** The relative component used for lookups. */
	private final Component component;
	private class AssignmentWrapper extends LoadableDetachableModel<String>
		implements
			IWrapModel<String>
	{
		private final Component component;
		@Override
		protected String load()
		{
			if (StringResourceModel.this.component != null)
			{
				// ignore assignment if component was specified explicitly
				return StringResourceModel.this.getObject();
			}
			else
			{
				return getString(component);
			}
		}

/ Als we 	,
		IModel<String>model=new StringResourceModel("title");
/ dan is de component in de StringResourceModel null, maar omdat 

	public Component(final String id, final IModel<?> model)
			setModelImpl(wrap(model));
/ en	,
	Label(Component).wrap(IModel<V>) line: 4169	
		if (model instanceof IComponentAssignedModel)		/ model=StringResourceModel[key:title,default:null,params:]
			return ((IComponentAssignedModel<V>)model).wrapOnAssignment(this);	/ this=Label
/ is de StringResourceModel$AssignmentWrapper's component=Label	, 

/ Als we	,
		IModel<String>model=new StringResourceModel("title",page,...) TODO	, dan is StringResourceModel's component= page	, en StringResourceModel$AssignmentWrapper's component=Label	, maar in de StringResourceModel$AssignmentWrapper.load fct zien we dat de StringResourceModel's component voor gaat	, de label's model= StringResourceModel$AssignmentWrapper

/ 7	. 

/ PROPERTY IN RESOURCEPAGE.PROPERTIES->COMPONENTSTRINGRESOURCELOADER

		IModel<String>model=new StringResourceModel("title");
		Label label=new Label("title", model);
		add(label);
/s
	/**
	 * Creates a new string resource model using the supplied parameters.
	 * <p>
	 * The relative component parameter should generally be supplied, as without it resources can
	 * not be obtained from resource bundles that are held relative to a particular component or
	 * page. However, for application that use only global resources then this parameter may be
	 * null.
	 * 
	 * @param resourceKey
	 *            The resource key for this string resource
	 * @param component
	 *            The component that the resource is relative to
	 * @param model
	 *            The model to use for property substitutions
	 */
StringResourceModel.<init>(String, Component, IModel<?>) line: 309	
/=
	public StringResourceModel(final String resourceKey, final Component component, final IModel<?> model)
resourceKey	"title" (id=11535)	
component	null	
model	null	

/c
	StringResourceModel.wrapOnAssignment(Component) line: 223	
	Label(Component).wrap(IModel<V>) line: 4169	
		if (model instanceof IComponentAssignedModel)		/ model=StringResourceModel[key:title,default:null,params:]
		{
			return ((IComponentAssignedModel<V>)model).wrapOnAssignment(this);
/cb
	Label(Component).<init>(String, IModel<?>) line: 698	
		if (model != null)
		{
			setModelImpl(wrap(model));
/cb
	Label(WebComponent).<init>(String, IModel<?>) line: 54	
	Label.<init>(String, IModel<?>) line: 106	
	ResourcePage.<init>() line: 18	
		IModel<String>model=new StringResourceModel("title");
/d
		Label label=new Label("title", model);
/cb
	DefaultPageFactory.newPage(Constructor<C>, PageParameters) line: 175	
	DefaultPageFactory.newPage(Class<C>) line: 67	
	DefaultMapperContext.newPageInstance(Class<IRequestablePage>, PageParameters) line: 102	
	PageProvider.resolvePageInstance(Integer, Class<IRequestablePage>, PageParameters, Integer) line: 271	
	PageProvider.getPageInstance() line: 169	
	WebPageRenderer(PageRenderer).getPage() line: 78	
	WebPageRenderer.isPageStateless() line: 287	
	WebPageRenderer.shouldRenderPageAndWriteResponse(RequestCycle, Url, Url) line: 329	
	WebPageRenderer.respond(RequestCycle) line: 193	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/s
StringResourceModel.wrapOnAssignment(Component) line: 223	
		return new AssignmentWrapper(component);	/ component=Label	,
/t
Label(Component).<init>(String, IModel<?>) line: 698	
		if (model != null)
		{
			setModelImpl(wrap(model));
/ pd
/d
this	Label  (id=12413)	
	id	"title" (id=11535)	
	data	StringResourceModel$AssignmentWrapper  (id=12434)	
		component	Label  (id=12413)	
		state	LoadableDetachableModel$InternalState  (id=12436)		/ DETACHED, ATTACHED, ...
		this$0	StringResourceModel  (id=12399)	
			component	null	
			defaultValue	null	
			model	null	
			parameters	null	
			resourceKey	"title" (id=11535)	
			state	LoadableDetachableModel$InternalState  (id=12436)	
			transientModelObject	null	
		transientModelObject	null	

/c

/ RESOLVE MODEL 

/ CENTRAL METHOD STRINGRESOURCEMODEL
Localizer.getStringIgnoreSettings(String, Component, IModel<?>, Locale, String, String) line: 422	
			// Iterate over all registered string resource loaders until the property has been found
			Iterator<IStringResourceLoader> iter = getStringResourceLoaders().iterator();
"getStringResourceLoaders()"	 (pending)	
	[0]	ComponentStringResourceLoader  (id=14196)	
	[1]	PackageStringResourceLoader  (id=14751)	
	[2]	ClassStringResourceLoader  (id=14752)	
	[3]	ValidatorStringResourceLoader  (id=14753)	
	[4]	InitializerStringResourceLoader  (id=14754)	
			value = null;
			while (iter.hasNext() && (value == null))
			{
				IStringResourceLoader loader = iter.next();
				value = loader.loadStringResource(component, key, locale, style, variation);
			}

			return substitutePropertyExpressions(component, value, model);			/ de resolved value kan ook nog $'s bevatten	,  

/stack	,
/s
	Label.onComponentTagBody(MarkupStream, ComponentTag) line: 115			/ dus NIET MarkupContainer.onComponentTagBody, die renderAll calls	,
		replaceComponentTagBody(markupStream, openTag, getDefaultModelObjectAsString());
/cb
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
		component.onComponentTagBody(markupStream, openTag);
/cb
	Label(Component).internalRenderComponent() line: 2565	
				renderComponentTag(tag);
				getMarkupSourcingStrategy().onComponentTagBody(this, markupStream, tag);
/cb
	Label(WebComponent).onRender() line: 60	
	Label(Component).internalRender() line: 2380	
	Label(Component).render() line: 2308	

	ResourcePage(MarkupContainer).renderNext(MarkupStream) line: 1524	
	ResourcePage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	ResourcePage(Page).onRender() line: 879	
	ResourcePage(WebPage).onRender() line: 141	
	ResourcePage(Component).internalRender() line: 2380	
	ResourcePage(Component).render() line: 2308	

	ResourcePage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/ debug	,
/s
Label.onComponentTagBody(MarkupStream, ComponentTag) line: 115	
		replaceComponentTagBody(markupStream, openTag, getDefaultModelObjectAsString());
/s
Label(Component).getDefaultModelObjectAsString() line: 1654	
		return getDefaultModelObjectAsString(getDefaultModelObject());
/s
Label(Component).getDefaultModelObject() line: 1620	
		final IModel<?> model = getDefaultModel(); / model	StringResourceModel$AssignmentWrapper  (id=11586), is een LoadableDetachableModel	,
model	StringResourceModel$AssignmentWrapper  (id=12434)	
	component	Label  (id=12413)	
	state	LoadableDetachableModel$InternalState  (id=12436)	
	this$0	StringResourceModel  (id=12399)	
		component	null	
		defaultValue	null	
		model	null	
		parameters	null	
		resourceKey	"title" (id=11535)	
		state	LoadableDetachableModel$InternalState  (id=12436)	
		transientModelObject	null	
	transientModelObject	null	

				return model.getObject();												<-
/s
StringResourceModel$AssignmentWrapper(LoadableDetachableModel<T>).getObject() line: 129	
		if (state == null || state == InternalState.DETACHED)
		{
			// prevent infinite attachment loops
			state = InternalState.ATTACHING;

			transientModelObject = load();
/s
StringResourceModel$AssignmentWrapper.load() line: 264	
			if (StringResourceModel.this.component != null)
/n
			else
			{
				return getString(component);	/ component=Label	,
/s
StringResourceModel.getString(Component) line: 429	
		final Localizer localizer = getLocalizer();	/ return Application.get().getResourceSettings().getLocalizer()

		// Substitute any parameters if necessary
		Object[] parameters = getParameters();
null
		if (parameters == null || parameters.length == 0)
		{
			// Get the string resource, doing any property substitutions as part
			// of the get operation
			value = localizer.getString(getResourceKey(), component, model, null, null, defaultValue);
/ resourceKey is 1ste arg van ctor	, bij ons "title" toevallig = wicket:id	,	IModel<String>model=new StringResourceModel("title")	,
/s
	/**
	 * Get the localized string using all of the supplied parameters. This method is left public to
	 * allow developers full control over string resource loading. However, it is recommended that
	 * one of the other convenience methods in the class are used as they handle all of the work
	 * related to obtaining the current user locale and style information.
	 *
Localizer.getString(String, Component, IModel<?>, Locale, String, IModel<String>) line: 230	
		final ResourceSettings resourceSettings = Application.get().getResourceSettings();

		String value = getStringIgnoreSettings(key, component, model, locale, style, null);
key=title
component=Label
/ overigen zijn null	,
/s
Localizer.getStringIgnoreSettings(String, Component, IModel<?>, Locale, String, String) line: 323	
		if ((locale == null) && (component != null))
		{
			locale = component.getLocale();
en_US
		// If this component is not yet added to page we do not want to check
		// cache as we can generate an invalid cache key
		if ((cache != null) && ((component == null) || addedToPage))
		{
			cacheKey = getCacheKey(key, component, locale, style, variation); 	/ title-1:title-2-en_US-null-null
/s
Localizer.getCacheKey(String, Component, Locale, String, String) line: 499	
/=
	protected String getCacheKey(final String key, final Component component, final Locale locale, final String style, final String variation)
key	"title" (id=11535)	
component	Label  (id=12413)	
locale	Locale  (id=11664)	
style	null	
variation	null	

		if (component != null)
		{
			StringBuilder buffer = new StringBuilder(200);
			buffer.append(key);
title
			Component cursor = component;
			while (cursor != null)
			{
				buffer.append('-').append(metaDatabase.id(cursor.getClass()));
/s
		/**
		 * Returns a unique id that represents this class' name. This can be used for compressing
		 * class names. Notice this id should not be used across cluster nodes.
		 * 
Localizer$ClassMetaDatabase.id(Class<?>) line: 643	
			final String name = clazz.getName();
			Long id = nameToId.get(name);
null
			if (id == null)
			{
				id = nameCounter.incrementAndGet();
1
				Long previousId = nameToId.putIfAbsent(name, id); / nameToId={org.apache.wicket.markup.html.basic.Label=1}
null
				if (previousId != null)
/n
			return id;
1
/t
Localizer.getCacheKey(String, Component, Locale, String, String) line: 510	
			while (cursor != null)
			{
				buffer.append('-').append(metaDatabase.id(cursor.getClass()));
/d
title-1
				/*
				 * only append component id if component is not a loop item because (a) these ids
				 * are irrelevant when generating resource cache keys (b) they cause a lot of
				 * redundant keys to be generated
				 * 
				 * also if the cursor component is an auto component we append a constant string
				 * instead of component's id because auto components have a newly generated id on
				 * every render.
				 */
				final Component parent = cursor.getParent();
				final boolean skip = parent instanceof AbstractRepeater;
false
				if (skip == false)
				{
					String cursorKey = cursor.isAuto() ? "wicket-auto" : cursor.getId();		/ /n
					buffer.append(':').append(cursorKey);
title-1:title
				cursor = parent;
/ volgende,	
			while (cursor != null)
				buffer.append('-').append(metaDatabase.id(cursor.getClass()));
/s
Localizer$ClassMetaDatabase.id(Class<?>) line: 643	
			final String name = clazz.getName();	/ org.apache.wicket.examples.repeater.ResourcePage
			Long id = nameToId.get(name);
null
			if (id == null)
			{
				id = nameCounter.incrementAndGet();
2
				Long previousId = nameToId.putIfAbsent(name, id);	/ {org.apache.wicket.examples.repeater.ResourcePage=2, org.apache.wicket.markup.html.basic.Label=1}
null
				if (previousId != null)
/n
			return id;
2
/t
Localizer.getCacheKey(String, Component, Locale, String, String) line: 510	
				buffer.append('-').append(metaDatabase.id(cursor.getClass()));
/d
title-1:title-2
				if (cursor instanceof Page)
				{
					break;
			buffer.append('-').append(locale);
title-1:title-2-en_US
			buffer.append('-').append(style);
title-1:title-2-en_US-null
			buffer.append('-').append(variation);
title-1:title-2-en_US-null-null
			return buffer.toString();
/t
Localizer.getStringIgnoreSettings(String, Component, IModel<?>, Locale, String, String) line: 373	
			cacheKey = getCacheKey(key, component, locale, style, variation);
/d
title-1:title-2-en_US-null-null

		// Value not found are cached as well (value = null)
		if ((cacheKey != null) && cache.containsKey(cacheKey))
/n
		else
		{
			// Iterate over all registered string resource loaders until the property has been found
			Iterator<IStringResourceLoader> iter = getStringResourceLoaders().iterator();

"getStringResourceLoaders()"	 (pending)	
	[0]	ComponentStringResourceLoader  (id=12640)	
	[1]	PackageStringResourceLoader  (id=12646)	
		filename	"wicket-package" (id=11651)	
	[2]	ClassStringResourceLoader  (id=12647)	
		clazzRef	WeakReference<T>  (id=12653)	
	[3]	ValidatorStringResourceLoader  (id=12648)	
	[4]	InitializerStringResourceLoader  (id=12649)	
		initializers	Collections$UnmodifiableRandomAccessList<E>  (id=12652)	

			value = null;
			while (iter.hasNext() && (value == null))
			{
				IStringResourceLoader loader = iter.next(); /	 loader	ComponentStringResourceLoader  (id=12640)	
				value = loader.loadStringResource(component, key, locale, style, variation);
/s
ComponentStringResourceLoader.loadStringResource(Component, String, Locale, String, String) line: 213	
		// The key prefix is equal to the component path relative to the
		// current component on the top of the stack.
		String prefix = getResourcePath(component);			/ wicket path	,
"title"	
		// walk downwards starting with page going down to component
		for (Component current : getComponentTrail(component))
/  getComponentTrail(component)= ArrayList (ResourcePage, Label)
current=ResourcePage

			// first, try the fully qualified resource name relative to the
			// component on the path from page down.
			if (Strings.isEmpty(prefix) == false)		/ prefix="title" wicket path component	,
			{
				// lookup fully qualified path
				string = loadStringResource(clazz, prefix + '.' + key, locale, style, variation);	/ GEEN recursive call	, is een andere	,
/s
ComponentStringResourceLoader.loadStringResource(Class<?>, String, Locale, String, String) line: 119	
clazz	Class<T> (org.apache.wicket.examples.repeater.ResourcePage) (id=12392)	
key	"title.title" (id=12738)	
locale	Locale  (id=11664)	
style	null	
variation	null	

		// Load the properties associated with the path
		IPropertiesFactory propertiesFactory = getPropertiesFactory();	/= return Application.get().getResourceSettings().getPropertiesFactory()

propertiesFactory	PropertiesFactory  (id=12753)	
	afterReloadListeners	ArrayList<E>  (id=12757)	
	context	ResourceSettings  (id=12547)	
		application	RepeaterApplication  (id=12546)	
		cssCompressor	null	
		defaultCacheDuration	Duration  (id=12770)	
		encodeJSessionId	false	
		fileCleaner	FileCleaner  (id=12772)	
		headerItemComparator	PriorityFirstComparator  (id=12774)	
		javascriptCompressor	null	
		localizer	Localizer  (id=12550)	
		nameToResourceFactory	HashMap<K,V>  (id=12777)	
		packageResourceGuard	SecurePackageResourceGuard  (id=12778)	
		parentFolderPlaceholder	"::" (id=11631)	
		propertiesFactory	PropertiesFactory  (id=12753)	
		resourceCachingStrategy	null	
		resourceFinders	ArrayList<E>  (id=12782)	
		resourcePollFrequency	Duration  (id=12784)	
		resourceStreamLocator	CachingResourceStreamLocator  (id=12785)	
		resourceWatcher	ModificationWatcher  (id=12789)	
		stringResourceLoaders	ArrayList<E>  (id=12642)	
		throwExceptionOnMissingResource	true	
		useDefaultOnMissingResource	true	
		useMinifiedResources	false	
	propertiesCache	ConcurrentHashMap<K,V>  (id=12758)	{}
	propertiesLoader	ArrayList<E>  (id=12759)	
		[0]	IsoPropertiesFilePropertiesLoader  (id=12826)	
		[1]	UtfPropertiesFilePropertiesLoader  (id=12827)	
		[2]	XmlFilePropertiesLoader  (id=12831)	

		while (true)
		{
			// Create the base path
			String path = clazz.getName().replace('.', '/');	/ org/apache/wicket/examples/repeater/ResourcePage
			// Iterator over all the combinations
			IResourceNameIterator iter = newResourceNameIterator(path, locale, style, variation);
/s
ComponentStringResourceLoader.newResourceNameIterator(String, Locale, String, String) line: 188	
		return Application.get()
			.getResourceSettings()
			.getResourceStreamLocator()
			.newResourceNameIterator(path, locale, style, variation, null, false);
/t
ComponentStringResourceLoader.loadStringResource(Class<?>, String, Locale, String, String) line: 141	
			IResourceNameIterator iter = newResourceNameIterator(path, locale, style, variation);
/d
			while (iter.hasNext())
			{
				String newPath = iter.next();	/ org/apache/wicket/examples/repeater/ResourcePage_en_US
				Properties props = propertiesFactory.load(clazz, newPath);	/ clazz	Class<T> (org.apache.wicket.examples.repeater.ResourcePage) (id=12392)	
null
			while (iter.hasNext())
			{
				String newPath = iter.next();	/ org/apache/wicket/examples/repeater/ResourcePage_en
				Properties props = propertiesFactory.load(clazz, newPath);	/ null

			while (iter.hasNext())
			{
				String newPath = iter.next();	/ org/apache/wicket/examples/repeater/ResourcePage
				Properties props = propertiesFactory.load(clazz, newPath);
props	Properties  (id=12812)	
	key	"org/apache/wicket/examples/repeater/ResourcePage" (id=12811)		/ ResourcePage.properties
	strings	ValueMap  (id=13070)	
		[0]	LinkedHashMap$Entry<K,V>  (id=13077)	
			key	"title5" (id=13115)	
			value	"Resource Page5" (id=13116)	
		[1]	LinkedHashMap$Entry<K,V>  (id=13078)	
			key	"title4.key4" (id=13118)	
			value	"Resource Page4" (id=13119)	
		[2]	LinkedHashMap$Entry<K,V>  (id=13079)	
			key	"title2" (id=13122)	
			value	"Resource Page2" (id=13123)	
		[3]	LinkedHashMap$Entry<K,V>  (id=13080)	
			key	"title3.key3" (id=13125)	
			value	"Resource Page3" (id=13126)	
		[4]	LinkedHashMap$Entry<K,V>  (id=13081)	
			key	"title" (id=13129)	
			value	"Resource Page" (id=12710)	
/ want	, 
/s
PropertiesFactory.load(Class<?>, String) line: 138	
/=
	public Properties load(final Class<?> clazz, final String path)
clazz	Class<T> (org.apache.wicket.examples.repeater.ResourcePage) (id=12392)	
path	"org/apache/wicket/examples/repeater/ResourcePage" (id=13150)	

		if (propertiesCache != null)	/ {}
		{
			properties = propertiesCache.get(path);
null
		if (properties == null)
		{
			Iterator<IPropertiesLoader> iter = propertiesLoader.iterator();

this	PropertiesFactory  (id=14193)	
	propertiesLoader	ArrayList<E>  (id=14205)	
		[0]	IsoPropertiesFilePropertiesLoader  (id=14210)	
		[1]	UtfPropertiesFilePropertiesLoader  (id=14211)	
		[2]	XmlFilePropertiesLoader  (id=14212)	

/ Intermezzo

/**
 * Load properties from properties file. The encoding of the file must be ISO 8859-1.
 * 
public class IsoPropertiesFilePropertiesLoader implements IPropertiesLoader

/**
 * Load properties from properties file via a Reader, which allows to provide the charset and thus
 * the encoding can be different than ISO 8859-1.
 * 
public class UtfPropertiesFilePropertiesLoader implements IPropertiesLoader

/**
 * Load properties from XML file
 * 
public class XmlFilePropertiesLoader implements IPropertiesLoader
{

/ Einde Intermezzo

			while ((properties == null) && iter.hasNext())
			{
				IPropertiesLoader loader = iter.next();	/ org.apache.wicket.resource.IsoPropertiesFilePropertiesLoader@27cebb3e
				String fullPath = path + "." + loader.getFileExtension(); / org/apache/wicket/examples/repeater/ResourcePage_en_US.properties

				// If not in the cache than try to load properties
				IResourceStream resourceStream = context.getResourceStreamLocator() .locate(clazz, fullPath);
/s
CachingResourceStreamLocator.locate(Class<?>, String) line: 76	
clazz	Class<T> (org.apache.wicket.examples.repeater.ResourcePage) (id=14126)	
path	"org/apache/wicket/examples/repeater/ResourcePage.properties" (id=14264)	

		CacheKey key = new CacheKey(clazz.getName(), path, null, null, null, null, true);
		IResourceStreamReference resourceStreamReference = cache.get(key);
null
		if (resourceStreamReference == null)
		{
			result = delegate.locate(clazz, path);
/s
ResourceStreamLocator.locate(Class<?>, String) line: 120	
		// First try with the resource finder registered with the application
		// (allows for markup reloading)
		if (finders == null)
		{
			finders = Application.get().getResourceSettings().getResourceFinders();
this	ResourceStreamLocator  (id=14277)	
	finders	ArrayList<E>  (id=14299)	
		[0]	ClassPathResourceFinder  (id=14567)	
			prefix	"" (id=14587)	
		[1]	WebApplicationPath  (id=14568)	
			path	"/" (id=14588)	
			servletContext	ApplicationContextFacade  (id=14589)	
		[2]	ClassPathResourceFinder  (id=14569)	
			prefix	"META-INF/resources/" (id=14590)	

		IResourceStream result;
		for (IResourceFinder finder : finders)
		{
			result = finder.find(clazz, path);
/s
ClassPathResourceFinder.find(Class<?>, String) line: 66	
		String fullPath = prefix + (path.startsWith("/") ? path.substring(1) : path);
		IResourceStream resourceStream;
		if (clazz != null)
		{
			resourceStream = getResourceStreamWithClassLoader(clazz.getClassLoader(), fullPath);
			if (resourceStream != null)
			{
				return resourceStream;	
resourceStream	UrlResourceStream  (id=14617)	
	url	URL  (id=14619)	
		file	"/home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28/webapps/wicket-examples-step-by-step/WEB-INF/classes/org/apache/wicket/examples/repeater/ResourcePage.properties" (id=14623)	
		path	"/home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28/webapps/wicket-examples-step-by-step/WEB-INF/classes/org/apache/wicket/examples/repeater/ResourcePage.properties" (id=14623)	
		protocol	"file" (id=14629)	
/t
CachingResourceStreamLocator.locate(Class<?>, String) line: 84	
			result = delegate.locate(clazz, path);
/d
			updateCache(key, result);
/s
CachingResourceStreamLocator.updateCache(CachingResourceStreamLocator$CacheKey, IResourceStream) line: 107	
		else if (stream instanceof UrlResourceStream)
		{
			UrlResourceStream urlResourceStream = (UrlResourceStream)stream;
			cache.put(key, new UrlResourceStreamReference(urlResourceStream));
/t
PropertiesFactory.load(Class<?>, String) line: 155	
				// If not in the cache than try to load properties
				IResourceStream resourceStream = context.getResourceStreamLocator()
					.locate(clazz, fullPath);
/d
				// Watch file modifications
				final IModificationWatcher watcher = context.getResourceWatcher(true);
				if (watcher != null)
				{
 					addToWatcher(path, resourceStream, watcher);
/ TODO
				ValueMap props = loadFromLoader(loader, resourceStream);
loader	IsoPropertiesFilePropertiesLoader  (id=14210)	
resourceStream	UrlResourceStream  (id=14617)	

			// Get the InputStream
			in = new BufferedInputStream(resourceStream.getInputStream());
			ValueMap data = loader.loadWicketProperties(in);
null
			if (data == null)
			{
				java.util.Properties props = loader.loadJavaProperties(in);
/s
IsoPropertiesFilePropertiesLoader.loadJavaProperties(InputStream) line: 61	
		java.util.Properties properties = new java.util.Properties();
		properties.load(in);

properties	Properties  (id=14660)	
	[0]	Hashtable$Entry<K,V>  (id=14666)	
		key	"title5" (id=14679)	
		value	"Resource Page5" (id=14680)	
	[1]	Hashtable$Entry<K,V>  (id=14667)	
		key	"title4.key4" (id=14677)	
		value	"Resource Page4" (id=14678)	
	[2]	Hashtable$Entry<K,V>  (id=14668)	
		key	"title3.key3" (id=14675)	
		value	"Resource Page3" (id=14676)	
	[3]	Hashtable$Entry<K,V>  (id=14669)	
		key	"title2" (id=14673)	
		value	"Resource Page2" (id=14674)	
	[4]	Hashtable$Entry<K,V>  (id=14670)	
		key	"title" (id=14671)	
		value	"Resource Page" (id=14672)	

		return properties;
/t
PropertiesFactory.loadFromLoader(IPropertiesLoader, IResourceStream) line: 225	
				java.util.Properties props = loader.loadJavaProperties(in);
/d
				if (props != null)
				{
					// Copy the properties into the ValueMap
					data = new ValueMap();
					Enumeration<?> enumeration = props.propertyNames();
					while (enumeration.hasMoreElements())
					{
						String property = (String)enumeration.nextElement();
						data.put(property, props.getProperty(property));
					}
				}
			}
			return data;
/t
PropertiesFactory.load(Class<?>, String) line: 168	
				ValueMap props = loadFromLoader(loader, resourceStream);
/d
				else
				{
					propertiesCache.put(path, properties);
		return properties;
/t
ComponentStringResourceLoader.loadStringResource(Class<?>, String, Locale, String, String) line: 144	
			// Iterator over all the combinations
			IResourceNameIterator iter = newResourceNameIterator(path, locale, style, variation);
			while (iter.hasNext())
			{
				String newPath = iter.next();	/ org/apache/wicket/examples/repeater/ResourcePage

				Properties props = propertiesFactory.load(clazz, newPath);
/d
				if (props != null)
				{
					// Lookup the value
					String value = props.getString(key);	/ key=title.title
null
			// Move to the next superclass
			clazz = clazz.getSuperclass();
/ volgende	,
		while (true)
		{
			// Create the base path
			String path = clazz.getName().replace('.', '/');	/ org/apache/wicket/markup/html/WebPage

			// Iterator over all the combinations
			IResourceNameIterator iter = newResourceNameIterator(path, locale, style, variation);
			while (iter.hasNext())
			{
				String newPath = iter.next();	/ org/apache/wicket/markup/html/WebPage_en_US
				Properties props = propertiesFactory.load(clazz, newPath);
null
/ volgende	,
			while (iter.hasNext())
			{
				String newPath = iter.next();	/ org/apache/wicket/markup/html/WebPage_en
				Properties props = propertiesFactory.load(clazz, newPath);
null
/ volgende	,
			while (iter.hasNext())
			{
				String newPath = iter.next();	/ org/apache/wicket/markup/html/WebPage
				Properties props = propertiesFactory.load(clazz, newPath);
null
			// Didn't find the key yet, continue searching if possible
			if (isStopResourceSearch(clazz))	/ stopt bij oa. WebPage
			{
				break;
		// not found
		return null;
/t
ComponentStringResourceLoader.loadStringResource(Component, String, Locale, String, String) line: 244	
				// lookup fully qualified path
				string = loadStringResource(clazz, prefix + '.' + key, locale, style, variation);
/d
null
				// shorten resource key prefix when going downwards (skip for repeaters)
				if ((current instanceof AbstractRepeater) == false)
				{
					prefix = Strings.afterFirst(prefix, '.');		/ het voorste stuk van het path gaat eraf	, bij ons nu de hele wicket:id 
""
			// If not found, than check if a property with the 'key' provided by
			// the user can be found.
			string = loadStringResource(clazz, key, locale, style, variation);
 key="title" 	, 
Resource Page
				return string;
/t
Localizer.getStringIgnoreSettings(String, Component, IModel<?>, Locale, String, String) line: 397	
			// Iterate over all registered string resource loaders until the property has been found
			Iterator<IStringResourceLoader> iter = getStringResourceLoaders().iterator();
			value = null;
			while (iter.hasNext() && (value == null))
			{
				IStringResourceLoader loader = iter.next();	/ loader	ComponentStringResourceLoader  (id=14196)	
				value = loader.loadStringResource(component, key, locale, style, variation);	/ Resource Page

			// Cache the result incl null if not found
			if (cacheKey != null)
			{
				putIntoCache(cacheKey, value);
cacheKey	"title-1:title-2-en_US-null-null" (id=14305)	
value	"Resource Page" (id=14672)	

		// If a property value has been found, or a default value was given,
		// than replace the placeholder and we are done
		if (value != null)
		{
			return substitutePropertyExpressions(component, value, model);	/ model==null	
/ NIETS NU	, want Label's model=StringResourceModel, en deze heeft model==null	, returns "Resource Page"
/t
Localizer.getString(String, Component, IModel<?>, Locale, String, IModel<String>) line: 232	
		String value = getStringIgnoreSettings(key, component, model, locale, style, null);
/d
			return value;
StringResourceModel.getString(Component) line: 439	
			value = localizer.getString(getResourceKey(), component, model, null, null, defaultValue);
/d
		return value;
/t
StringResourceModel$AssignmentWrapper.load() line: 271	
				return getString(component);
/d

/ 7	. 

/ PROPERTY IN REPEATERAPPLICATION.PROPERTIES->CLASSTRINGRESOURCELOADER

		IModel<String>model=new StringResourceModel("title6");
		Label label=new Label("title", model);
		add(label);

/ public class ClassStringResourceLoader extends ComponentStringResourceLoader
/ is nu de loader	, maar hij extends ComponentStringResourceLoader	, die properties in ResourcePage.properties vindt	,


/ stack	,
/s
	Localizer.getStringIgnoreSettings(String, Component, IModel<?>, Locale, String, String) line: 323	
	Localizer.getString(String, Component, IModel<?>, Locale, String, IModel<String>) line: 232	
	StringResourceModel.getString(Component) line: 439	
	StringResourceModel$AssignmentWrapper.load() line: 271	
			if (StringResourceModel.this.component != null)
/n																	/ we hebben new StringResourceModel("..."), dus geen component 	,
			{
				// ignore assignment if component was specified explicitly
				return StringResourceModel.this.getObject();
			}
			else
			{
				return getString(component);
/cb
	StringResourceModel$AssignmentWrapper.load() line: 226	
	StringResourceModel$AssignmentWrapper(LoadableDetachableModel<T>).getObject() line: 134	
	Label(Component).getDefaultModelObject() line: 1626	
	Label(Component).getDefaultModelObjectAsString() line: 1654	
	Label.onComponentTagBody(MarkupStream, ComponentTag) line: 115	
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
	Label(Component).internalRenderComponent() line: 2565	
	Label(WebComponent).onRender() line: 60	
	Label(Component).internalRender() line: 2380	
	Label(Component).render() line: 2308	
	ResourcePage(MarkupContainer).renderNext(MarkupStream) line: 1524	
	ResourcePage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	ResourcePage(Page).onRender() line: 879	
	ResourcePage(WebPage).onRender() line: 141	
	ResourcePage(Component).internalRender() line: 2380	
	ResourcePage(Component).render() line: 2308	
	ResourcePage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/debug	,
/s
Localizer.getStringIgnoreSettings(String, Component, IModel<?>, Locale, String, String) line: 323	

			// Iterate over all registered string resource loaders until the property has been found
			Iterator<IStringResourceLoader> iter = getStringResourceLoaders().iterator();
			value = null;
			while (iter.hasNext() && (value == null))
			{
				IStringResourceLoader loader = iter.next();	/ loader	ComponentStringResourceLoader  (id=17344)	
				value = loader.loadStringResource(component, key, locale, style, variation);	/ null
			}
			while (iter.hasNext() && (value == null))
			{
				IStringResourceLoader loader = iter.next();	/ loader	PackageStringResourceLoader  (id=17358)	
				value = loader.loadStringResource(component, key, locale, style, variation);	/ null
			}
			while (iter.hasNext() && (value == null))
			{
				IStringResourceLoader loader = iter.next();	/ loader	ClassStringResourceLoader  (id=17360)	
				value = loader.loadStringResource(component, key, locale, style, variation);	/ Repeater Application6 
/ want	,
/s
ClassStringResourceLoader.loadStringResource(Component, String, Locale, String, String) line: 80	
		return super.loadStringResource(component, key, locale, style, variation);
/s
ClassStringResourceLoader(ComponentStringResourceLoader).loadStringResource(Component, String, Locale, String, String) line: 213	

		// The key prefix is equal to the component path relative to the
		// current component on the top of the stack.
		String prefix = getResourcePath(component);	/ "title", wicket path	,

		// walk downwards starting with page going down to component
		for (Component current : getComponentTrail(component))
			// get current component class
			final Class<?> clazz = current.getClass(); / clazz	Class<T> (org.apache.wicket.examples.repeater.ResourcePage) (id=17262)	
				// lookup fully qualified path
				string = loadStringResource(clazz, prefix + '.' + key, locale, style, variation);	/ clazz=ResourcePage
/s
ClassStringResourceLoader.loadStringResource(Class<?>, String, Locale, String, String) line: 65	
		return super.loadStringResource(clazzRef.get(), key, locale, style, variation);

/ intermezzo

this	ClassStringResourceLoader  (id=17360)	
	clazzRef	WeakReference<T>  (id=17386)	
		discovered	null	
		next	null	
		queue	ReferenceQueue$Null  (id=17397)	
		referent	Class<T> (org.apache.wicket.examples.repeater.RepeaterApplication) (id=16672)	


/ Einde intermezzo
/s
ClassStringResourceLoader(ComponentStringResourceLoader).loadStringResource(Class<?>, String, Locale, String, String)	/ ! ClassStringResourceLoader
/=
	public String loadStringResource(Class<?> clazz, final String key, final Locale locale, final String style, final String variation)
clazz	Class<T> (org.apache.wicket.examples.repeater.RepeaterApplication) (id=16672)	
key	"title.title6" (id=17385)	
locale	Locale  (id=11664)	
style	null	
variation	null	
		return super.loadStringResource(clazzRef.get(), key, locale, style, variation);
/s
ClassStringResourceLoader(ComponentStringResourceLoader).loadStringResource(Class<?>, String, Locale, String, String) line: 119	

		// Load the properties associated with the path
		IPropertiesFactory propertiesFactory = getPropertiesFactory();

this	ClassStringResourceLoader  (id=17360)	
clazz	Class<T> (org.apache.wicket.examples.repeater.RepeaterApplication) (id=16672)	
key	"title.title6" (id=17385)	
locale	Locale  (id=11664)	
style	null	
variation	null	
propertiesFactory	PropertiesFactory  (id=17347)	
	afterReloadListeners	ArrayList<E>  (id=17417)	
	context	ResourceSettings  (id=17333)	
	propertiesCache	ConcurrentHashMap<K,V>  (id=17418)	
		[0]	ConcurrentHashMap$WriteThroughEntry  (id=17423)	
			key	"org/apache/wicket/examples/repeater/wicket-package" (id=17486)	
			value	Properties  (id=17487)	
		[1]	ConcurrentHashMap$WriteThroughEntry  (id=17425)	
			key	"org/apache/wicket/markup/html/WebComponent_en_US" (id=17490)	
			value	Properties  (id=17487)	
		[2]	ConcurrentHashMap$WriteThroughEntry  (id=17426)	
			key	"org/apache/wicket/examples/repeater/ResourcePage_en_US" (id=17349)	
			value	Properties  (id=17487)	
		[3]	ConcurrentHashMap$WriteThroughEntry  (id=17427)	
			key	"org/apache/wicket/examples/repeater/ResourcePage" (id=17493)	
			value	Properties  (id=17494)	
				key	"org/apache/wicket/examples/repeater/ResourcePage" (id=17493)	
				strings	ValueMap  (id=17497)	
					[0]	LinkedHashMap$Entry<K,V>  (id=17503)	
						key	"title5" (id=17516)	
						value	"Resource Page5" (id=17517)	
					[1]	LinkedHashMap$Entry<K,V>  (id=17504)	
						key	"title4.key4" (id=17519)	
						value	"Resource Page4" (id=17520)	
					[2]	LinkedHashMap$Entry<K,V>  (id=17505)	
						key	"title2" (id=17528)	
						value	"Resource Page2" (id=17529)	
					[3]	LinkedHashMap$Entry<K,V>  (id=17506)	
						key	"title3.key3" (id=17525)	
						value	"Resource Page3" (id=17526)	
					[4]	LinkedHashMap$Entry<K,V>  (id=17508)	
						key	"title" (id=17522)	
						value	"Resource Page" (id=17523)	
		[4]	ConcurrentHashMap$WriteThroughEntry  (id=17428)	
			key	"org/apache/wicket/Application_en_US" (id=17537)	
			value	Properties  (id=17487)	
		[5]	ConcurrentHashMap$WriteThroughEntry  (id=17429)	
			key	"org/apache/wicket/protocol/http/WebApplication_en_US" (id=17535)	
			value	Properties  (id=17487)	
		[6]	ConcurrentHashMap$WriteThroughEntry  (id=17430)	
			key	"java/lang/wicket-package" (id=17533)	
			value	Properties  (id=17487)	
		[7]	ConcurrentHashMap$WriteThroughEntry  (id=17431)	
			key	"org/apache/wicket/examples/repeater/wicket-package_en" (id=17531)	
			value	Properties  (id=17487)	
		[8]	ConcurrentHashMap$WriteThroughEntry  (id=17432)	
			key	"java/lang/wicket-package_en_US" (id=17625)	
			value	Properties  (id=17487)	
		[9]	ConcurrentHashMap$WriteThroughEntry  (id=17434)	
			key	"org/apache/wicket/markup/html/wicket-package_en_US" (id=17623)	
			value	Properties  (id=17487)	
		[10]	ConcurrentHashMap$WriteThroughEntry  (id=17436)	
			key	"org/apache/wicket/Application" (id=17620)	
			value	Properties  (id=17621)	
		[11]	ConcurrentHashMap$WriteThroughEntry  (id=17437)	
			key	"org/apache/wicket/markup/html/basic/Label_en" (id=17618)	
			value	Properties  (id=17487)	
		[12]	ConcurrentHashMap$WriteThroughEntry  (id=17438)	
			key	"org/apache/wicket/protocol/http/WebApplication" (id=17616)	
			value	Properties  (id=17487)	
		[13]	ConcurrentHashMap$WriteThroughEntry  (id=17439)										<-
			key	"org/apache/wicket/examples/repeater/RepeaterApplication" (id=17613)	
			value	Properties  (id=17614)	
				key	"org/apache/wicket/examples/repeater/RepeaterApplication" (id=17613)	
				strings	ValueMap  (id=17743)	
					[0]	LinkedHashMap$Entry<K,V>  (id=17747)	
						key	"orderStatus.0" (id=17766)	
						value	"Your payment submitted on ${name} has been inited." (id=17767)	
					[1]	LinkedHashMap$Entry<K,V>  (id=17749)	
						key	"title6" (id=17764)	
						value	"Repeater Application6" (id=17362)	
					[2]	LinkedHashMap$Entry<K,V>  (id=17750)	
						key	"alt6" (id=17761)	
						value	"Alternative6" (id=17762)	
					[3]	LinkedHashMap$Entry<K,V>  (id=17752)	
						key	"msg" (id=17758)	
						value	"Yor name is ${name}" (id=17759)	
					[4]	LinkedHashMap$Entry<K,V>  (id=17753)	
						key	"orderStatus.1" (id=17755)	
						value	"Your order submitted on ${name} has finished." (id=17756)	
		[14]	ConcurrentHashMap$WriteThroughEntry  (id=17440)	
			key	"org/apache/wicket/markup/html/basic/Label" (id=17611)	
			value	Properties  (id=17487)	
		[15]	ConcurrentHashMap$WriteThroughEntry  (id=17441)	
			key	"org/apache/wicket/examples/wicket-package_en" (id=17609)	
			value	Properties  (id=17487)	
		[16]	ConcurrentHashMap$WriteThroughEntry  (id=17443)	
			key	"java/lang/wicket-package_en" (id=17607)	
			value	Properties  (id=17487)	
		[17]	ConcurrentHashMap$WriteThroughEntry  (id=17444)	
			key	"org/apache/wicket/examples/repeater/RepeaterApplication_en" (id=17605)	
			value	Properties  (id=17487)	
		[18]	ConcurrentHashMap$WriteThroughEntry  (id=17446)	
			key	"org/apache/wicket/markup/html/basic/wicket-package" (id=17603)	
			value	Properties  (id=17487)	
		[19]	ConcurrentHashMap$WriteThroughEntry  (id=17448)	
			key	"org/apache/wicket/markup/html/WebComponent" (id=17601)	
			value	Properties  (id=17487)	
		[20]	ConcurrentHashMap$WriteThroughEntry  (id=17449)	
			key	"org/apache/wicket/protocol/http/WebApplication_en" (id=17599)	
			value	Properties  (id=17487)	
		[21]	ConcurrentHashMap$WriteThroughEntry  (id=17450)	
			key	"org/apache/wicket/Application_en" (id=17597)	
			value	Properties  (id=17487)	
		[22]	ConcurrentHashMap$WriteThroughEntry  (id=17451)	
			key	"org/wicket-package_en_US" (id=17595)	
			value	Properties  (id=17487)	
		[23]	ConcurrentHashMap$WriteThroughEntry  (id=17452)	
			key	"java/wicket-package_en" (id=17593)	
			value	Properties  (id=17487)	
		[24]	ConcurrentHashMap$WriteThroughEntry  (id=17453)	
			key	"org/apache/wicket/markup/html/WebPage_en" (id=17591)	
			value	Properties  (id=17487)	
		[25]	ConcurrentHashMap$WriteThroughEntry  (id=17454)	
			key	"org/apache/wicket/markup/wicket-package_en_US" (id=17589)	
			value	Properties  (id=17487)	
		[26]	ConcurrentHashMap$WriteThroughEntry  (id=17455)	
			key	"org/apache/wicket/markup/wicket-package_en" (id=17587)	
			value	Properties  (id=17487)	
		[27]	ConcurrentHashMap$WriteThroughEntry  (id=17457)	
			key	"org/apache/wicket/markup/html/basic/Label_en_US" (id=17585)	
			value	Properties  (id=17487)	
		[28]	ConcurrentHashMap$WriteThroughEntry  (id=17459)	
			key	"org/apache/wicket/markup/html/wicket-package" (id=17583)	
			value	Properties  (id=17487)	
		[29]	ConcurrentHashMap$WriteThroughEntry  (id=17460)	
			key	"org/wicket-package_en" (id=17581)	
			value	Properties  (id=17487)	
		[30]	ConcurrentHashMap$WriteThroughEntry  (id=17461)	
			key	"org/apache/wicket/markup/html/WebPage" (id=17579)	
			value	Properties  (id=17487)	
		[31]	ConcurrentHashMap$WriteThroughEntry  (id=17462)	
			key	"org/apache/wicket/examples/repeater/wicket-package_en_US" (id=17577)	
			value	Properties  (id=17487)	
		[32]	ConcurrentHashMap$WriteThroughEntry  (id=17463)	
			key	"org/apache/wicket-package_en_US" (id=17575)	
			value	Properties  (id=17487)	
		[33]	ConcurrentHashMap$WriteThroughEntry  (id=17465)	
			key	"org/apache/wicket/wicket-package_en_US" (id=17573)	
			value	Properties  (id=17487)	
		[34]	ConcurrentHashMap$WriteThroughEntry  (id=17467)	
			key	"org/apache/wicket/markup/html/WebComponent_en" (id=17571)	
			value	Properties  (id=17487)	
		[35]	ConcurrentHashMap$WriteThroughEntry  (id=17468)	
			key	"org/apache/wicket/examples/repeater/ResourcePage_en" (id=17569)	
			value	Properties  (id=17487)	
		[36]	ConcurrentHashMap$WriteThroughEntry  (id=17469)	
			key	"org/wicket-package" (id=17567)	
			value	Properties  (id=17487)	
		[37]	ConcurrentHashMap$WriteThroughEntry  (id=17470)	
			key	"org/apache/wicket-package" (id=17565)	
			value	Properties  (id=17487)	
		[38]	ConcurrentHashMap$WriteThroughEntry  (id=17471)	
			key	"org/apache/wicket/wicket-package_en" (id=17563)	
			value	Properties  (id=17487)	
		[39]	ConcurrentHashMap$WriteThroughEntry  (id=17472)	
			key	"java/wicket-package_en_US" (id=17561)	
			value	Properties  (id=17487)	
		[40]	ConcurrentHashMap$WriteThroughEntry  (id=17473)	
			key	"org/apache/wicket/examples/repeater/RepeaterApplication_en_US" (id=17559)	
			value	Properties  (id=17487)	
		[41]	ConcurrentHashMap$WriteThroughEntry  (id=17474)	
			key	"org/apache/wicket/wicket-package" (id=17557)	
			value	Properties  (id=17487)	
		[42]	ConcurrentHashMap$WriteThroughEntry  (id=17476)	
			key	"org/apache/wicket/markup/wicket-package" (id=17555)	
			value	Properties  (id=17487)	
		[43]	ConcurrentHashMap$WriteThroughEntry  (id=17477)	
			key	"org/apache/wicket/examples/wicket-package" (id=17553)	
			value	Properties  (id=17487)	
		[44]	ConcurrentHashMap$WriteThroughEntry  (id=17478)	
			key	"org/apache/wicket/markup/html/basic/wicket-package_en_US" (id=17551)	
			value	Properties  (id=17487)	
		[45]	ConcurrentHashMap$WriteThroughEntry  (id=17479)	
			key	"org/apache/wicket/markup/html/WebPage_en_US" (id=17549)	
			value	Properties  (id=17487)	
		[46]	ConcurrentHashMap$WriteThroughEntry  (id=17480)	
			key	"org/apache/wicket/examples/wicket-package_en_US" (id=17547)	
			value	Properties  (id=17487)	
		[47]	ConcurrentHashMap$WriteThroughEntry  (id=17481)	
			key	"org/apache/wicket/markup/html/basic/wicket-package_en" (id=17545)	
			value	Properties  (id=17487)	
		[48]	ConcurrentHashMap$WriteThroughEntry  (id=17482)	
			key	"java/wicket-package" (id=17543)	
			value	Properties  (id=17487)	
		[49]	ConcurrentHashMap$WriteThroughEntry  (id=17483)	
			key	"org/apache/wicket/markup/html/wicket-package_en" (id=17541)	
			value	Properties  (id=17487)	
		[50]	ConcurrentHashMap$WriteThroughEntry  (id=17484)	
			key	"org/apache/wicket-package_en" (id=17539)	
			value	Properties  (id=17487)	

		while (true)
		{
			// Create the base path
			String path = clazz.getName().replace('.', '/');	/ org/apache/wicket/examples/repeater/RepeaterApplication

			// Iterator over all the combinations
			IResourceNameIterator iter = newResourceNameIterator(path, locale, style, variation);

			while (iter.hasNext())
			{
				String newPath = iter.next();	/ org/apache/wicket/examples/repeater/RepeaterApplication_en_US
				Properties props = propertiesFactory.load(clazz, newPath);	/ null
			}
			while (iter.hasNext())
			{
				String newPath = iter.next();	/ org/apache/wicket/examples/repeater/RepeaterApplication_en
				Properties props = propertiesFactory.load(clazz, newPath);	/ null
			}
			while (iter.hasNext())
			{
				String newPath = iter.next();	/ org/apache/wicket/examples/repeater/RepeaterApplication
				Properties props = propertiesFactory.load(clazz, newPath);	/ null	, title.title6 is geen key	, alleen title6	, 
			}

			// Move to the next superclass
			clazz = clazz.getSuperclass();	/ clazz	Class<T> (org.apache.wicket.protocol.http.WebApplication) (id=15319)	

/ volgende	,
		while (true)
		{
			// Create the base path
			String path = clazz.getName().replace('.', '/');	/ org/apache/wicket/protocol/http/WebApplication

			// Iterator over all the combinations
			IResourceNameIterator iter = newResourceNameIterator(path, locale, style, variation);
			while (iter.hasNext())
			{
				String newPath = iter.next();	/ org/apache/wicket/protocol/http/WebApplication_en_US	
												/ org/apache/wicket/protocol/http/WebApplication_en
												/ org/apache/wicket/protocol/http/WebApplication
				Properties props = propertiesFactory.load(clazz, newPath);	/ null

			// Move to the next superclass
			clazz = clazz.getSuperclass();		/ class org.apache.wicket.Application
/ volgende	,
		while (true)
		{
			// Create the base path
			String path = clazz.getName().replace('.', '/');	/ org/apache/wicket/Application 

			// Iterator over all the combinations
			IResourceNameIterator iter = newResourceNameIterator(path, locale, style, variation);
			while (iter.hasNext())
			{
				String newPath = iter.next(); 	/ org/apache/wicket/Application_en_US	
												/ org/apache/wicket/Application_en
				Properties props = propertiesFactory.load(clazz, newPath);	/ null

			while (iter.hasNext())
			{
				String newPath = iter.next(); 	/ org/apache/wicket/Application
				Properties props = propertiesFactory.load(clazz, newPath);	
props	Properties  (id=17621)	
	key	"org/apache/wicket/Application" (id=17620)	
	strings	ValueMap  (id=18019)	
		[0]	LinkedHashMap$Entry<K,V>  (id=18022)	
			key	"AutoLabel.CSS.required" (id=18230)	
			value	"required" (id=18231)	
		[1]	LinkedHashMap$Entry<K,V>  (id=18023)	
			key	"DateValidator.range" (id=18227)	
			value	"The value of '${label}' is not between ${minimum} and ${maximum}." (id=18228)	
		[2]	LinkedHashMap$Entry<K,V>  (id=18024)	
			key	"StringValidator.range" (id=18224)	
			value	"The value of '${label}' is not between ${minimum} and ${maximum} characters long." (id=18225)	
		[3]	LinkedHashMap$Entry<K,V>  (id=18025)	
			key	"RangeValidator.range" (id=18221)	
			value	"The value of '${label}' must be between ${minimum} and ${maximum}." (id=18222)	
		[4]	LinkedHashMap$Entry<K,V>  (id=18026)	
			key	"PagingNavigator.previous" (id=18218)	
			value	"Go to previous page" (id=18219)	
		[5]	LinkedHashMap$Entry<K,V>  (id=18027)	
			key	"OddEvenItem.CSS.odd" (id=18215)	
			value	"odd" (id=18216)	
		[6]	LinkedHashMap$Entry<K,V>  (id=18028)	
			key	"org.apache.wicket.mfu.delete" (id=18212)	
			value	"Delete" (id=18213)	
		[7]	LinkedHashMap$Entry<K,V>  (id=18029)	
			key	"NumberValidator.positive" (id=18209)	
			value	"The value of '${label}' must be a positive number." (id=18210)	
		[8]	LinkedHashMap$Entry<K,V>  (id=18030)	
			key	"IConverter" (id=18206)	
			value	"The value of '${label}' is not a valid ${type}." (id=18207)	
		[9]	LinkedHashMap$Entry<K,V>  (id=18031)	
			key	"MaximumValidator" (id=18203)	
			value	"The value of '${label}' must be at most ${maximum}." (id=18204)	
		[10]	LinkedHashMap$Entry<K,V>  (id=18032)	
			key	"DateValidator.minimum" (id=18200)	
			value	"The value of '${label}' is less than the minimum of ${minimum}." (id=18201)	
		[11]	LinkedHashMap$Entry<K,V>  (id=18033)	
			key	"CreditCardValidator" (id=18197)	
			value	"The credit card number is invalid." (id=18198)	
		[12]	LinkedHashMap$Entry<K,V>  (id=18034)	
			key	"StringValidator.minimum" (id=18194)	
			value	"The value of '${label}' is shorter than the minimum of ${minimum} characters." (id=18195)	
		[13]	LinkedHashMap$Entry<K,V>  (id=18035)	
			key	"null" (id=18191)	
			value	"Choose One" (id=18192)	
		[14]	LinkedHashMap$Entry<K,V>  (id=18036)	
			key	"EmailAddressValidator" (id=18188)	
			value	"The value of '${label}' is not a valid email address." (id=18189)	
		[15]	LinkedHashMap$Entry<K,V>  (id=18037)	
			key	"AutoLabel.CSS.disabled" (id=18185)	
			value	"disabled" (id=18186)	
		[16]	LinkedHashMap$Entry<K,V>  (id=18038)	
			key	"UrlValidator" (id=18182)	
			value	"The value of '${label}' is not a valid URL." (id=18183)	
		[17]	LinkedHashMap$Entry<K,V>  (id=18039)	
			key	"DateValidator.maximum" (id=18179)	
			value	"The value of '${label}' is larger than the maximum of ${maximum}." (id=18180)	
		[18]	LinkedHashMap$Entry<K,V>  (id=18040)	
			key	"StringValidator.maximum" (id=18176)	
			value	"The value of '${label}' is longer than the maximum of ${maximum} characters." (id=18177)	
		[19]	LinkedHashMap$Entry<K,V>  (id=18041)	
			key	"PagingNavigation.page" (id=18173)	
			value	"Go to page ${page}" (id=18174)	
		[20]	LinkedHashMap$Entry<K,V>  (id=18042)	
			key	"PagingNavigator.next" (id=18170)	
			value	"Go to next page" (id=18171)	
		[21]	LinkedHashMap$Entry<K,V>  (id=18043)	
			key	"EqualPasswordInputValidator" (id=18167)	
			value	"${label0} and ${label1} must be equal." (id=18168)	
		[22]	LinkedHashMap$Entry<K,V>  (id=18044)	
			key	"FeedbackMessage.CSS.success" (id=18164)	
			value	"feedbackPanelSUCCESS" (id=18165)	
		[23]	LinkedHashMap$Entry<K,V>  (id=18045)	
			key	"PatternValidator" (id=18161)	
			value	"The value of '${label}' does not match pattern '${pattern}'." (id=18162)	
		[24]	LinkedHashMap$Entry<K,V>  (id=18046)	
			key	"FormComponentLabel.CSS.required" (id=18158)	
			value	"required" (id=18159)	
		[25]	LinkedHashMap$Entry<K,V>  (id=18047)	
			key	"nullValid" (id=18155)	
			value	"" (id=18156)	
		[26]	LinkedHashMap$Entry<K,V>  (id=18048)	
			key	"RangeValidator.minimum" (id=18152)	
			value	"The value of '${label}' must be at least ${minimum}." (id=18153)	
		[27]	LinkedHashMap$Entry<K,V>  (id=18049)	
			key	"uploadTooLarge" (id=18149)	
			value	"File must be less than ${maxSize}." (id=18150)	
		[28]	LinkedHashMap$Entry<K,V>  (id=18050)	
			key	"OddEvenListItem.CSS.odd" (id=18146)	
			value	"odd" (id=18147)	
		[29]	LinkedHashMap$Entry<K,V>  (id=18051)	
			key	"FeedbackMessage.CSS.debug" (id=18143)	
			value	"feedbackPanelDEBUG" (id=18144)	
		[30]	LinkedHashMap$Entry<K,V>  (id=18052)	
			key	"org.apache.wicket.mfu.caption.limited" (id=18140)	
			value	"Files (maximum ${max}): " (id=18141)	
		[31]	LinkedHashMap$Entry<K,V>  (id=18053)	
			key	"PagingNavigator.first" (id=18137)	
			value	"Go to first page" (id=18138)	
		[32]	LinkedHashMap$Entry<K,V>  (id=18054)	
			key	"FeedbackMessage.CSS.error" (id=18134)	
			value	"feedbackPanelERROR" (id=18135)	
		[33]	LinkedHashMap$Entry<K,V>  (id=18055)	
			key	"PagingNavigator.last" (id=18131)	
			value	"Go to last page" (id=18132)	
		[34]	LinkedHashMap$Entry<K,V>  (id=18056)	
			key	"org.apache.wicket.mfu.caption.unlimited" (id=18128)	
			value	"Files:" (id=18129)	
		[35]	LinkedHashMap$Entry<K,V>  (id=18057)	
			key	"RangeValidator.maximum" (id=18125)	
			value	"The value of '${label}' must be at most ${maximum}." (id=18126)	
		[36]	LinkedHashMap$Entry<K,V>  (id=18058)	
			key	"StringValidator.exact" (id=18122)	
			value	"The value of '${label}' is not exactly ${exact} characters long." (id=18123)	
		[37]	LinkedHashMap$Entry<K,V>  (id=18059)	
			key	"uploadFailed" (id=18119)	
			value	"File failed to upload: ${exception.localizedMessage}" (id=18120)	
		[38]	LinkedHashMap$Entry<K,V>  (id=18060)	
			key	"RangeValidator.exact" (id=18116)	
			value	"The value of '${label}' must be exactly ${minimum}." (id=18117)	
		[39]	LinkedHashMap$Entry<K,V>  (id=18061)	
			key	"FeedbackMessage.CSS.info" (id=18113)	
			value	"feedbackPanelINFO" (id=18114)	
		[40]	LinkedHashMap$Entry<K,V>  (id=18062)	
			key	"FormComponentLabel.CSS.invalid" (id=18110)	
			value	"error" (id=18111)	
		[41]	LinkedHashMap$Entry<K,V>  (id=18063)	
			key	"FormComponentLabel.CSS.disabled" (id=18107)	
			value	"disabled" (id=18108)	
		[42]	LinkedHashMap$Entry<K,V>  (id=18064)	
			key	"AutoLabel.CSS.invalid" (id=18104)	
			value	"error" (id=18105)	
		[43]	LinkedHashMap$Entry<K,V>  (id=18065)	
			key	"FeedbackMessage.CSS.fatal" (id=18101)	
			value	"feedbackPanelFATAL" (id=18102)	
		[44]	LinkedHashMap$Entry<K,V>  (id=18066)	
			key	"OddEvenListItem.CSS.even" (id=18098)	
			value	"even" (id=18099)	
		[45]	LinkedHashMap$Entry<K,V>  (id=18067)	
			key	"uploadSingleFileTooLarge" (id=18095)	
			value	"Each of files must be less than ${fileMaxSize}." (id=18096)	
		[46]	LinkedHashMap$Entry<K,V>  (id=18068)	
			key	"MinimumValidator" (id=18092)	
			value	"The value of '${label}' must be at least ${minimum}." (id=18093)	
		[47]	LinkedHashMap$Entry<K,V>  (id=18069)	
			key	"FeedbackMessage.CSS.warning" (id=18089)	
			value	"feedbackPanelWARNING" (id=18090)	
		[48]	LinkedHashMap$Entry<K,V>  (id=18070)	
			key	"Required" (id=18077)	
			value	"'${label}' is required." (id=18078)	
		[49]	LinkedHashMap$Entry<K,V>  (id=18071)	
			key	"FeedbackMessage.CSS.undefined" (id=18075)	
			value	"feedbackPanelUNDEFINED" (id=18076)	
		[50]	LinkedHashMap$Entry<K,V>  (id=18072)	
			key	"OddEvenItem.CSS.even" (id=18084)	
			value	"even" (id=18085)	
		[51]	LinkedHashMap$Entry<K,V>  (id=18073)	
			key	"NumberValidator.negative" (id=18081)	
			value	"The value of '${label}' must be a negative number." (id=18082)	
		[52]	LinkedHashMap$Entry<K,V>  (id=18074)	
			key	"EqualInputValidator" (id=18079)	
			value	"'${input0}' from ${label0} and '${input1}' from ${label1} must be equal." (id=18080)	
/ TODO
					// Lookup the value
					String value = props.getString(key);	/ null

			// Didn't find the key yet, continue searching if possible
			if (isStopResourceSearch(clazz))		/ stop bij Application	,
			{
				break;			
		// not found
		return null;
/t
ClassStringResourceLoader(ComponentStringResourceLoader).loadStringResource(Component, String, Locale, String, String) line: 241	
		// walk downwards starting with page going down to component
		for (Component current : getComponentTrail(component))	/ current=ResourcePage
		{
			// get current component class
			final Class<?> clazz = current.getClass();

			// first, try the fully qualified resource name relative to the
			// component on the path from page down.
			if (Strings.isEmpty(prefix) == false)
			{
				// lookup fully qualified path
				string = loadStringResource(clazz, prefix + '.' + key, locale, style, variation);	/ null	, op key title:title6	, 

				// shorten resource key prefix when going downwards (skip for repeaters)
				if ((current instanceof AbstractRepeater) == false)
				{
					prefix = Strings.afterFirst(prefix, '.');	/ ""

			// If not found, than check if a property with the 'key' provided by
			// the user can be found.
			string = loadStringResource(clazz, key, locale, style, variation);	/ Repeater Application6, op key title6	,

/ CLASSSTRINGRESOURCELOADER.<INIT> 

/ Wanneer wordt ClassStringResourceLoader.<init> called	? 
/ Tijdens deployment	, voor alle apps	,

/stack	
/s
	ClassStringResourceLoader.<init>(Class<?>) line: 49	
		clazzRef = new WeakReference<Class<?>>(clazz);
/cb
	ResourceSettings.<init>(Application) line: 222	
		stringResourceLoaders.add(new ComponentStringResourceLoader());
		stringResourceLoaders.add(new PackageStringResourceLoader());
		stringResourceLoaders.add(new ClassStringResourceLoader(application.getClass()));		<-
		stringResourceLoaders.add(new ValidatorStringResourceLoader());
		stringResourceLoaders.add(new InitializerStringResourceLoader(application.getInitializers()));
/cb
	AjaxApplication(Application).getResourceSettings() line: 1422	
			resourceSettings = new ResourceSettings(this);
/cb
	AjaxApplication(Application).internalInit() line: 826	
		getResourceSettings().getResourceFinders().add(new ClassPathResourceFinder(""));
/cb
	AjaxApplication(WebApplication).internalInit() line: 723	
		super.internalInit();
/cb
	AjaxApplication(Application).initApplication() line: 948	
		internalInit();
/cb
	WicketFilter.init(boolean, FilterConfig) line: 429	
				application.initApplication();
/cb
	WicketFilter.init(FilterConfig) line: 353	
		init(false, filterConfig);

/c
	ClassStringResourceLoader.<init>(Class<?>) line: 49	
	ResourceSettings.<init>(Application) line: 222	
	VideosApplication(Application).getResourceSettings() line: 1422	
	VideosApplication(Application).internalInit() line: 826	
	VideosApplication(WebApplication).internalInit() line: 723	
	VideosApplication(Application).initApplication() line: 948	
	WicketFilter.init(boolean, FilterConfig) line: 429	
	WicketFilter.init(FilterConfig) line: 353	
/c
...

/ PROPERTY'S KEY RESOLVED IN STRINGRESOURCEMODEL'S MODEL 

/ ResourcePage	,

		IModel<String>model=new StringResourceModel("${key}",new Model<Serializable>(new X()));
		Label label=new Label("title", model);
		add(label);

	private String key;
	public static class X implements Serializable{
		private String key;
		public X() {
			key="page";
		}
	}

$ vi ResourcePage.properties
title.page=Resource Page

/ we kunnen ook 	,
		IModel<String>model=new StringResourceModel("title.${key}",new Model<Serializable>(new X()));

/maar dat is overbodig: het algorithm puts the wicket path of the component before the key	, and the result is called the resourceKey	,

/ 13	. 
/s
StringResourceModel$AssignmentWrapper.load() line: 271	
			if (StringResourceModel.this.component != null)
/n
				return getString(component);	/ component in de wrapper	, en dat is de component waar wrapper het model van is	,
/s
StringResourceModel.getString(Component) line: 439	
		final Localizer localizer = getLocalizer();
			// Get the string resource, doing any property substitutions as part
			// of the get operation
			value = localizer.getString(getResourceKey(), component, model, null, null, defaultValue);
/s
StringResourceModel.getResourceKey() line: 590	
		if (model != null)
		{
			return new PropertyVariableInterpolator(resourceKey, model.getObject()) {	/ resourceKey="${key}"	, 
														/ Model.getObject(){return object;} direct	, 	object=ResourcePage$X
														/ itt LoadableDetachableModel, die load() calls	,
				protected String getValue(String variableName) {
					String result = super.getValue(variableName);
					
					// WICKET-5820 interpolate null with 'null'
					return result == null ? "null" : result;
				};
			}.toString();		<-
/s
StringResourceModel$1(VariableInterpolator).toString() line: 110	
		// For each occurrences of "${"or "$$"
		int start;
		int pos = 0;

		while ((start = lowerPositive(string.indexOf("$$", pos), string.indexOf("${", pos))) != -1)
0
			// Get start and end of variable name
			final int startVariableName = start + 2;
2
			final int endVariableName = string.indexOf('}', startVariableName);
5
			// Found a close brace?
			if (endVariableName != -1)
			{
				// Get variable name inside brackets
				final String variableName = string.substring(startVariableName, endVariableName);
"key"
				// Get value of variable
				final String value = getValue(variableName);
/s
StringResourceModel$1.getValue(String) line: 594	
/=
			return new PropertyVariableInterpolator(resourceKey, model.getObject()) {
				protected String getValue(String variableName) {						
					String result = super.getValue(variableName);			<-		,  variableName="key"
					
					// WICKET-5820 interpolate null with 'null'
					return result == null ? "null" : result;
				};
			}.toString();
/s
StringResourceModel$1(PropertyVariableInterpolator).getValue(String) line: 65	
		Object value = PropertyResolver.getValue(variableName, oject);
this	StringResourceModel$1  (id=23900)	
	oject	ResourcePage$X  (id=23113)	
		key	"page" (id=23122)	
variableName	"key" (id=23906)	
value "page"
			return toString(value);
/t
StringResourceModel$1(VariableInterpolator).toString() line: 152	
				// Get value of variable
				final String value = getValue(variableName);
/d
"page"
				else
				{
					// Append variable value
					buffer.append(value);		/ page
				}

				// Move past variable
				pos = endVariableName + 1;		/ 6
			}
/ volgende	,
		while ((start = lowerPositive(string.indexOf("$$", pos), string.indexOf("${", pos))) != -1)
/n
		// Convert result to String
		return buffer.toString();
/t
StringResourceModel.getString(Component) line: 439	
			value = localizer.getString(getResourceKey(), component, model, null, null, defaultValue);
/pd
/s
Localizer.getString(String, Component, IModel<?>, Locale, String, IModel<String>) line: 232	
/=
	public String getString(final String key, final Component component, final IModel<?> model, final Locale locale, final String style, final IModel<String> defaultValue)
key	"page" (id=23919)					<-
component	Label  (id=23055)	
model	Model<T>  (id=23044)	
locale	null	
style	null	
defaultValue	null	
		String value = getStringIgnoreSettings(key, component, model, locale, style, null);
/s
Localizer.getStringIgnoreSettings(String, Component, IModel<?>, Locale, String, String) line: 323	
			cacheKey = getCacheKey(key, component, locale, style, variation);
page-1:title-2-en_US-null-null

			// Iterate over all registered string resource loaders until the property has been found
			Iterator<IStringResourceLoader> iter = getStringResourceLoaders().iterator();
"getStringResourceLoaders()"	 (pending)	
	[0]	ComponentStringResourceLoader  (id=23935)	
	[1]	PackageStringResourceLoader  (id=23936)	
	[2]	ClassStringResourceLoader  (id=23937)	
	[3]	ValidatorStringResourceLoader  (id=23938)	
	[4]	InitializerStringResourceLoader  (id=23939)	

			value = null;
			while (iter.hasNext() && (value == null))
			{
				IStringResourceLoader loader = iter.next();
				value = loader.loadStringResource(component, key, locale, style, variation);		/ key="page"
/s
ComponentStringResourceLoader.loadStringResource(Component, String, Locale, String, String) line: 213		 /mth waar hij wicket path:key probeert	, 
																										/ en daarna key
		String prefix = getResourcePath(component);	/ "title"
		for (Component current : getComponentTrail(component))	/ current=ResourcePage
				// lookup fully qualified path
				string = loadStringResource(clazz, prefix + '.' + key, locale, style, variation);	/ Resource Page
			return string;
/t
Localizer.getStringIgnoreSettings(String, Component, IModel<?>, Locale, String, String) line: 397	
			// Iterate over all registered string resource loaders until the property has been found
			Iterator<IStringResourceLoader> iter = getStringResourceLoaders().iterator();
			value = null;
			while (iter.hasNext() && (value == null))
			{
				IStringResourceLoader loader = iter.next();	/ loader	ComponentStringResourceLoader  (id=23935)	
				value = loader.loadStringResource(component, key, locale, style, variation);
/d
				putIntoCache(cacheKey, value);
			return substitutePropertyExpressions(component, value, model);		<-
component	Label  (id=23055)	
model	Model<T>  (id=23044)	
value	"Resource Page" (id=24004)	
/s
/**
	 * Helper method to handle property variable substitution in strings.
	 * 
Localizer.substitutePropertyExpressions(Component, String, IModel<?>) line: 563	
			else
			{
				locator = component;
				locale = component.getLocale();
			}

			return new ConvertingPropertyVariableInterpolator(string, model.getObject(), locator, locale).toString();
/s
ConvertingPropertyVariableInterpolator.<init>(String, Object, IConverterLocator, Locale) line: 52	
		super(string, object);	 /string="Resource Page"	, object=ResourcePage$X

		this.locator = locator;	/ Label
		this.locale = locale;	/ en_US
/t
ConvertingPropertyVariableInterpolator(VariableInterpolator).toString() line: 110	

		// If there's any reason to go to the expense of property expressions
		if (!string.contains("${"))
		{
			return string;
		}
/t
Localizer.getString(String, Component, IModel<?>, Locale, String, IModel<String>) line: 236	
		String value = getStringIgnoreSettings(key, component, model, locale, style, null);
/d
"Resource Page"
			return value;
/t
StringResourceModel.getString(Component) line: 439	
			value = localizer.getString(getResourceKey(), component, model, null, null, defaultValue);
/d
		return value;
/t
StringResourceModel$AssignmentWrapper.load() line: 271	
				return getString(component);
/d

















/ Einde STRINGRESOURCEMODEL 

/ STRINGRESOURCEMODEL WITH RESOURCE KEY 

/ 7	 . 


/ We hebben een Label met wicket id "title", het Label's model= StringResourceModel("name")	, dus de StringResourceModel heeft geen component en model	, "name" is de resource key	, 
/ de resource key zelf wordt altijd geprobeerd	,
/ als we de property in ResourcePage.properties	,  neem dan container.title.name=Resource Page	, omdat het tov de page is	,
/ als we de property in ResourceContainer.properties	,  neem dan title.name=Resource Page	, omdat het tov de container is	,
/ als we de property in ResourceLabel.properties	,  neem dan name=Resource Page	, omdat name tov de resource label is	, 

/ een WebMarkupContainer hoeft geen eigen markup file, we kunnen de markup in de markup file van de page set	,

/ TestApplication.properties werkt zo:
container.title.name	/ alsof in ResourcePage.properties
title.name				/ alsof in ResourceContainer.properties
name			/ altijd resource key	,
 

$ vi ResourcePage.java
		{
		MarkupContainer container=new ResourceContainer("container");
		add(container);
		IModel<String>model=new StringResourceModel("name");	
		ResourceLabel label=new ResourceLabel("title", model);
		container.add(label);
		}

$ vi ResourcePage.html
<div wicket:id="container">
	<h3 wicket:id="title"></h3>
</div>

$ vi ResourcePage.properties
container.title.name=Resource Page		/ container:title is de wicket path (in the page)	, = wicket path: resource key	,
/ or	,
name=Resource Page		/ the resource key	, always OK

/ or	,

$ vi ResourceContainer.properties
title.name=Resource Page		/ title is de wicket path (in the container)	, = wicket path: resource key	,
name=Resource Page		/ the resource key	, always OK

/ or	,

$ vi ResourceLabel.properties
name=Resource Page		

/ or	,

$ vi TestApplication.java
container.title.name=Resource Page
/ or	,
title.name=Resource Page
/ or	,
name=Resource Page


$ vi ResourcePageTest.java

	WicketTester tester=new WicketTester();

	@Before public void init(){
		WebApplication webApplication=new TestApplication();
		tester=new WicketTester(webApplication);
		tester.startPage(ResourcePage.class);
	}
	@Test public void testLabel(){
		tester.assertLabel("container:title", "Resource Page");
	}

/ Maar we kunnen ook een andere resource key nemen, bijv	,	 (maar debug we hieronder niet)	,

$ vi ResourcePage.java
		{
		MarkupContainer container=new ResourceContainer("container");
		add(container);
		IModel<String>model=new StringResourceModel("foo.name");			<-
		ResourceLabel label=new ResourceLabel("title", model);
		container.add(label);
		}

$ vi ResourcePage.properties
container.title.foo.name=Resource Page
/ or the reource key	,  always	,
foo.name=Resource Page

/ or	,

$ vi ResourceContainer.properties
title.foo.name=Resource Page
/ or the reource key	,  always	,
foo.name=Resource Page

/ 7	. 

$ vi ResourcePage.properties
container.title.name=Resource Page	

/ debug de test	,
/s
Localizer.getStringIgnoreSettings(String, Component, IModel<?>, Locale, String, String) line: 397	
			// Iterate over all registered string resource loaders until the property has been found
			Iterator<IStringResourceLoader> iter = getStringResourceLoaders().iterator();
			value = null;
			while (iter.hasNext() && (value == null))
			{
				IStringResourceLoader loader = iter.next();	/ loader	ComponentStringResourceLoader  (id=295)	
				value = loader.loadStringResource(component, key, locale, style, variation);
/s
ComponentStringResourceLoader.loadStringResource(Component, String, Locale, String, String) line: 231	
		// The key prefix is equal to the component path relative to the
		// current component on the top of the stack.
		String prefix = getResourcePath(component); / "container.title"	, is path totaan de page	,

		// walk downwards starting with page going down to component
		for (Component current : getComponentTrail(component))		/ ResourcePage, ResourceContainer, ResourceLabel	,
			// get current component class
			final Class<?> clazz = current.getClass();	/ clazz	Class<T> (org.apache.wicket.examples.repeater.ResourcePage) (id=198)	

			// component on the path from page down.
			if (Strings.isEmpty(prefix) == false)
			{
				// lookup fully qualified path
				string = loadStringResource(clazz, prefix + '.' + key, locale, style, variation);	/ prefix.key="container.title.name"
"Resource Page"
/ OK

/ 7	. 

$ vi ResourceContainer.properties
title.name=Resource Page		

/ debug de test	,
/s
StringResourceModel.getString(Component) line: 439	
			value = localizer.getString(getResourceKey(), component, model, null, null, defaultValue);	/ getResourceKey()="name"	, omdat we 
															/ new StringResourceModel("name")	, er komen geen $'s in voor, dus hoeft niet te resolve
...
/s
Localizer.getStringIgnoreSettings(String, Component, IModel<?>, Locale, String, String) line: 323	
			// Iterate over all registered string resource loaders until the property has been found
			Iterator<IStringResourceLoader> iter = getStringResourceLoaders().iterator();
			value = null;
			while (iter.hasNext() && (value == null))
			{
				IStringResourceLoader loader = iter.next();	/ loader	ComponentStringResourceLoader  (id=296)	
				value = loader.loadStringResource(component, key, locale, style, variation);	/ key="name" , de resource key uit de string resource model	,
/s
ComponentStringResourceLoader.loadStringResource(Component, String, Locale, String, String) line: 231	
		// The key prefix is equal to the component path relative to the
		// current component on the top of the stack.
		String prefix = getResourcePath(component); / container.title 	, is wicket path Label	,j

		// walk downwards starting with page going down to component
		for (Component current : getComponentTrail(component))	/ ResourcePage, ResourceContainer, ResourceLabel	,

			// get current component class
			final Class<?> clazz = current.getClass();	/ clazz	Class<T> (org.apache.wicket.examples.repeater.ResourcePage) (id=199)	

			// first, try the fully qualified resource name relative to the
			// component on the path from page down.
			if (Strings.isEmpty(prefix) == false)
			{
				// lookup fully qualified path
				string = loadStringResource(clazz, prefix + '.' + key, locale, style, variation);	/ prefix.key=container.title.name
null
					prefix = Strings.afterFirst(prefix, '.'); /	title		/ voor de volgende,	
			// If not found, than check if a property with the 'key' provided by	/ maar gaat toch ook de resource key zelf proberen	,
			// the user can be found.
			string = loadStringResource(clazz, key, locale, style, variation);	/ key="name",	 de resource key	,
null
/ volgende	,
		// walk downwards starting with page going down to component
		for (Component current : getComponentTrail(component))
		{
			// get current component class
			final Class<?> clazz = current.getClass();	/ clazz	Class<T> (org.apache.wicket.examples.repeater.ResourceContainer) (id=251)	

			// first, try the fully qualified resource name relative to the
			// component on the path from page down.
			if (Strings.isEmpty(prefix) == false)
			{
				// lookup fully qualified path
				string = loadStringResource(clazz, prefix + '.' + key, locale, style, variation);	/ prefix.key=title.name
Resource Page

/ 7	. 

/ 13	. 

$ vi TestApplication.properties
container.title.name=Resource Page

/ intermezzo

/**
 * This is one of Wicket's default string resource loaders.
 * <p>
 * The component based string resource loader attempts to find the resource from a bundle that
 * corresponds to the supplied component object or one of its parent containers.
 * <p>
 * The search order for resources is built around the containers that hold the component (if it is
 * not a page). Consider a Page that contains a Panel that contains a Label. If we pass the Label as
 * the component then resource loading will first look for the resource against the page, then
 * against the panel and finally against the label.
 * <p>
 *
public class ComponentStringResourceLoader implements IStringResourceLoader

/**
 * This string resource loader attempts to find a single resource bundle that has the same name and
 * location as the clazz provided in the constructor. If the bundle is found than strings are	/ these classes are Applications	,
 * obtained from here. This implementation is fully aware of both locale and style values when
 * trying to obtain the appropriate bundle.
 * <p>
 * An instance of this loader is registered with the Application by default.
 * 
public class ClassStringResourceLoader extends ComponentStringResourceLoader		/ voor Application classes	,

/ Tijdens deployment	,
	ResourceSettings.<init>(Application) line: 222	
	...
		stringResourceLoaders.add(new ClassStringResourceLoader(application.getClass()));




Localizer.getStringIgnoreSettings(String, Component, IModel<?>, Locale, String, String) line: 397	
			// Iterate over all registered string resource loaders until the property has been found
			Iterator<IStringResourceLoader> iter = getStringResourceLoaders().iterator();
			value = null;
			while (iter.hasNext() && (value == null))
			{
				IStringResourceLoader loader = iter.next();	/ loader	ClassStringResourceLoader  (id=299)		, de 3de, dus niet ComponentStringResourceLoader	, de 1ste	,
				value = loader.loadStringResource(component, key, locale, style, variation);
/s
ClassStringResourceLoader.loadStringResource(Component, String, Locale, String, String) line: 80	
		return super.loadStringResource(component, key, locale, style, variation);
/s
ClassStringResourceLoader(ComponentStringResourceLoader).loadStringResource(Component, String, Locale, String, String) line: 241	
component	ResourceLabel  (id=237)	
key	"name" (id=211)	

		// The key prefix is equal to the component path relative to the
		// current component on the top of the stack.
		String prefix = getResourcePath(component);			/ "container.title"

		// walk downwards starting with page going down to component
		for (Component current : getComponentTrail(component))	/ ResourcePage, ResourceContainer, ResourceLabel
		{
			// get current component class
			final Class<?> clazz = current.getClass();	/ Doet er niet toe	, 

			// first, try the fully qualified resource name relative to the
			// component on the path from page down.
			if (Strings.isEmpty(prefix) == false)
			{
				// lookup fully qualified path
				string = loadStringResource(clazz, prefix + '.' + key, locale, style, variation);	/ prefix.key=container.title.name
/s
ClassStringResourceLoader.loadStringResource(Class<?>, String, Locale, String, String) line: 65	
		return super.loadStringResource(clazzRef.get(), key, locale, style, variation);
/s
ClassStringResourceLoader(ComponentStringResourceLoader).loadStringResource(Class<?>, String, Locale, String, String) line: 119	
clazz	Class<T> (org.apache.wicket.examples.repeater.TestApplication) (id=351)	

		// Load the properties associated with the path
		IPropertiesFactory propertiesFactory = getPropertiesFactory();
		while (true)
		{
			// Create the base path
			String path = clazz.getName().replace('.', '/');	/ org/apache/wicket/examples/repeater/TestApplication

			// Iterator over all the combinations
			IResourceNameIterator iter = newResourceNameIterator(path, locale, style, variation);
			while (iter.hasNext())
			{
				String newPath = iter.next();	/ org/apache/wicket/examples/repeater/TestApplication_en_US

				Properties props = propertiesFactory.load(clazz, newPath);	/ null
			}
			while (iter.hasNext())
			{
				String newPath = iter.next();	/ org/apache/wicket/examples/repeater/TestApplication_en

				Properties props = propertiesFactory.load(clazz, newPath);	/ null
			}
			while (iter.hasNext())
			{
				String newPath = iter.next();	/ org/apache/wicket/examples/repeater/TestApplication

				Properties props = propertiesFactory.load(clazz, newPath);	/ null
props	Properties  (id=2634)	
	key	"org/apache/wicket/examples/repeater/TestApplication" (id=2633)	
	strings	ValueMap  (id=2635)	
		[0]	LinkedHashMap$Entry<K,V>  (id=2638)	
			key	"orderStatus.0" (id=2703)	
			value	"Your payment submitted on ${name} has been inited." (id=2704)	
		[1]	LinkedHashMap$Entry<K,V>  (id=2639)	
			key	"title6" (id=2701)	
			value	"Test Application 6" (id=2702)	
		[2]	LinkedHashMap$Entry<K,V>  (id=2640)	
			key	"alt6" (id=2699)	
			value	"TestAlternative6" (id=2700)	
		[3]	LinkedHashMap$Entry<K,V>  (id=2641)	
			key	"title72.title7key" (id=2697)	
			value	"Label72 in TestApplication.properties" (id=2698)	
		[4]	LinkedHashMap$Entry<K,V>  (id=2642)	
			key	"container.title.name" (id=2695)										<-
			value	"Resource Page" (id=2696)	
		[5]	LinkedHashMap$Entry<K,V>  (id=2643)	
			key	"title7.title7key" (id=2693)	
			value	"Label7 in TestApplication.properties" (id=2694)	
		[6]	LinkedHashMap$Entry<K,V>  (id=2644)	
			key	"orderStatus.1" (id=2691)	
			value	"Your order submitted on ${name} has finished." (id=2692)	
				if (props != null)
				{
					// Lookup the value
					String value = props.getString(key); / Resource Page	, key="container.title.name"
						return value;

/ 13	. 

$ vi TestApplication.properties
title.name=Resource Page

/s
Localizer.getStringIgnoreSettings(String, Component, IModel<?>, Locale, String, String) line: 397	
			// Iterate over all registered string resource loaders until the property has been found
			Iterator<IStringResourceLoader> iter = getStringResourceLoaders().iterator();
			value = null;
			while (iter.hasNext() && (value == null))
			{
				IStringResourceLoader loader = iter.next();		/ loader	ClassStringResourceLoader  (id=299)		
				value = loader.loadStringResource(component, key, locale, style, variation);
/s
ClassStringResourceLoader.loadStringResource(Component, String, Locale, String, String) line: 80	
		return super.loadStringResource(component, key, locale, style, variation);
/s
ClassStringResourceLoader(ComponentStringResourceLoader).loadStringResource(Component, String, Locale, String, String) line: 241	
		// The key prefix is equal to the component path relative to the
		// current component on the top of the stack.
		String prefix = getResourcePath(component);		/ "container.title"

		// walk downwards starting with page going down to component
		for (Component current : getComponentTrail(component))		/ ResourcePage, ResourceContainer, ResourceLabel	,
		{
			// get current component class
			final Class<?> clazz = current.getClass();

			// first, try the fully qualified resource name relative to the
			// component on the path from page down.
			if (Strings.isEmpty(prefix) == false)
			{
				// lookup fully qualified path
				string = loadStringResource(clazz, prefix + '.' + key, locale, style, variation);	/ prefix.key="container.title.name"
/s
ClassStringResourceLoader.loadStringResource(Class<?>, String, Locale, String, String) line: 65	
		return super.loadStringResource(clazzRef.get(), key, locale, style, variation);
/s
ClassStringResourceLoader(ComponentStringResourceLoader).loadStringResource(Class<?>, String, Locale, String, String) line: 148	
/=
	public String loadStringResource(Class<?> clazz, final String key, final Locale locale, final String style, final String variation)
clazz	Class<T> (org.apache.wicket.examples.repeater.TestApplication) (id=1917)	
key	"container.title.name" (id=2497)	

		// Load the properties associated with the path
		IPropertiesFactory propertiesFactory = getPropertiesFactory();
		while (true)
		{
			// Create the base path
			String path = clazz.getName().replace('.', '/');	/ org/apache/wicket/examples/repeater/TestApplication

			// Iterator over all the combinations
			IResourceNameIterator iter = newResourceNameIterator(path, locale, style, variation);
			while (iter.hasNext())
			{
				String newPath = iter.next(); 	/ org/apache/wicket/examples/repeater/TestApplication_en_US
												/ org/apache/wicket/examples/repeater/TestApplication_en

				Properties props = propertiesFactory.load(clazz, newPath);	/ null
				if (props != null)
/n
			while (iter.hasNext())
			{
				String newPath = iter.next(); 	/ org/apache/wicket/examples/repeater/TestApplication
				Properties props = propertiesFactory.load(clazz, newPath);
					// Lookup the value
					String value = props.getString(key);	/ null

			// Move to the next superclass
			clazz = clazz.getSuperclass();	/ class org.apache.wicket.protocol.http.WebApplication
/ volgende	,
		while (true)
		{
			// Create the base path
			String path = clazz.getName().replace('.', '/');	/ org/apache/wicket/protocol/http/WebApplication

			// Iterator over all the combinations
			IResourceNameIterator iter = newResourceNameIterator(path, locale, style, variation);
			...
			// Move to the next superclass
			clazz = clazz.getSuperclass();	/ class org.apache.wicket.Application
/ volgende	,
		while (true)
		{
			// Create the base path
			String path = clazz.getName().replace('.', '/');	/ org/apache/wicket/Application 

			// Iterator over all the combinations
			IResourceNameIterator iter = newResourceNameIterator(path, locale, style, variation);
			...
			// Move to the next superclass
			clazz = clazz.getSuperclass();	/ class org.apache.wicket.Application
			...
			// Didn't find the key yet, continue searching if possible
			if (isStopResourceSearch(clazz))
/j
			{
				break;
/t
ClassStringResourceLoader(ComponentStringResourceLoader).loadStringResource(Component, String, Locale, String, String) line: 241	
		// walk downwards starting with page going down to component
		for (Component current : getComponentTrail(component))			/ current=ResourcePage	,
		{
			// get current component class
			final Class<?> clazz = current.getClass();

			// first, try the fully qualified resource name relative to the
			// component on the path from page down.
			if (Strings.isEmpty(prefix) == false)
			{
				// lookup fully qualified path
				string = loadStringResource(clazz, prefix + '.' + key, locale, style, variation);
/d
null
				// shorten resource key prefix when going downwards (skip for repeaters)
				if ((current instanceof AbstractRepeater) == false)
				{
					prefix = Strings.afterFirst(prefix, '.');	/ title
			}
			// If not found, than check if a property with the 'key' provided by
			// the user can be found.
			string = loadStringResource(clazz, key, locale, style, variation);	/ null	, 
														/ key="name" en in TestApplication.properties hebben we NIET name=Resource Page
/ volgende,	
		for (Component current : getComponentTrail(component))	/ current=ResourceContainer	,
		{
			// get current component class
			final Class<?> clazz = current.getClass();

			// first, try the fully qualified resource name relative to the
			// component on the path from page down.
			if (Strings.isEmpty(prefix) == false)
			{
				// lookup fully qualified path
				string = loadStringResource(clazz, prefix + '.' + key, locale, style, variation);	/ prefix.key=title.name
/s
ClassStringResourceLoader.loadStringResource(Class<?>, String, Locale, String, String) line: 65	
		return super.loadStringResource(clazzRef.get(), key, locale, style, variation);
/s
ClassStringResourceLoader(ComponentStringResourceLoader).loadStringResource(Class<?>, String, Locale, String, String) line: 119	
clazz	Class<T> (org.apache.wicket.examples.repeater.TestApplication) (id=1917)	
key	"title.name" (id=2555)	
		// Load the properties associated with the path
		IPropertiesFactory propertiesFactory = getPropertiesFactory();
		while (true)
		{
			// Create the base path
			String path = clazz.getName().replace('.', '/');	/ org/apache/wicket/examples/repeater/TestApplication

			// Iterator over all the combinations
			IResourceNameIterator iter = newResourceNameIterator(path, locale, style, variation);
			while (iter.hasNext())
			{
				String newPath = iter.next();	/ org/apache/wicket/examples/repeater/TestApplication_en_US	, org/apache/wicket/examples/repeater/TestApplication_en

				Properties props = propertiesFactory.load(clazz, newPath);	/ null
				if (props != null)
/n
			while (iter.hasNext())
			{
				String newPath = iter.next();	/ org/apache/wicket/examples/repeater/TestApplication
				Properties props = propertiesFactory.load(clazz, newPath);	/ Resource Page
				if (props != null)
						return value;



/ Einde STRINGRESOURCEMODEL WITH RESOURCE KEY

/ STRINGRESOURCEMODEL WITH RESOURCE KEY AND MODEL

$ vi ResourcePage.java
		{
		MarkupContainer container=new ResourceContainer("container");
		add(container);
		IModel<Serializable>subModel=new Model<Serializable>(new X());
		IModel<String>model=new StringResourceModel("${myKey}",subModel);	
		ResourceLabel label=new ResourceLabel("title", model);
		container.add(label);
		}
	public static class X implements Serializable{
		private String myKey;
		public X() {
			myKey="name";
		}
	}
$ vi ResourcePage.properties
container.title.name=Resource Page
name=Resource Page

$ vi ResourceContainer.properties
title.name=Resource Page
name=Resource Page

$ vi ResourceLabel.properties
name=Resource Page

$ vi TestApplication.properties
container.title.name=Resource Page
title.name=Resource Page
name=Resource Page

/ we kunnen ook	, (maar debug we hieronder niet)	,

$ vi ResourcePage.java
		{
		MarkupContainer container=new ResourceContainer("container");
		add(container);
		IModel<X>subModel=Model.<X>of(new X());
		IModel<String>model=new StringResourceModel("foo.${myKey}",subModel);	
		ResourceLabel label=new ResourceLabel("title", model);
		container.add(label);
		}
	public static class X implements Serializable{
		private String myKey;
		public X() {
			myKey="name";
		}
	}
$ vi ResourcePage.properties
container.title.foo.name=Resource Page
/ of	,
foo.name=Resource Page

/s
StringResourceModel$AssignmentWrapper.load() line: 271	
			else
			{
				return getString(component);
/s
StringResourceModel.getString(Component) line: 439	
			value = localizer.getString(getResourceKey(), component, model, null, null, defaultValue);	/ getResourceKey resolves $'s in de resource key	,	
/s
StringResourceModel.getResourceKey() line: 592	
			return new PropertyVariableInterpolator(resourceKey, model.getObject()) {
				protected String getValue(String variableName) {
					String result = super.getValue(variableName);
					
					// WICKET-5820 interpolate null with 'null'
					return result == null ? "null" : result;
				};
			}.toString();
/s
StringResourceModel$1(VariableInterpolator).toString() line: 110	
this	StringResourceModel$1  (id=355)	
	oject	ResourcePage$X  (id=349)	
		myKey	"name" (id=213)	
	string	"${myKey}" (id=240)	
	this$0	StringResourceModel  (id=239)	
/ TODO Afmaken
/t
StringResourceModel.getString(Component) line: 439	
			value = localizer.getString(getResourceKey(), component, model, null, null, defaultValue);
/pd
/s
Localizer.getString(String, Component, IModel<?>, Locale, String, IModel<String>) line: 230	
/=
	public String getString(final String key, final Component component, final IModel<?> model,
	                        final Locale locale, final String style, final IModel<String> defaultValue)
key	"name" (id=313)					/ klopt, new StringResourceModel("${key}",model)	, de resource key is eig. ${myKey}, maar is resolved tot "name"j
component	ResourceLabel  (id=242)	
...
/ Dan weer de wicket path ervoor	, ...


		String value = getStringIgnoreSettings(key, component, model, locale, style, null);
/s

/ Einde STRINGRESOURCEMODEL WITH RESOURCE KEY AND MODEL

/ STRINGRESOURCEMODEL WITH RESOURCE KEY AND MODEL

/ CENTRAL METHODS STRINGRESOURCEMODEL
StringResourceModel.getString(Component) line: 439		/ resolves resource key	,
Localizer.getStringIgnoreSettings(String, Component, IModel<?>, Locale, String, String) line: 392	/ resolves value	,

$ vi ResourcePage.java
	public ResourcePage(){
		{
		MarkupContainer container=new ResourceContainer("container");
		add(container);
		IModel<X>subModel=Model.<X>of(new X());
		IModel<String>model=new StringResourceModel("bar.${myKey}",subModel);	
		ResourceLabel label=new ResourceLabel("title", model);
		container.add(label);
		}
	}
	public static class X implements Serializable{
		private String myKey;
		private String myValue;
		public X() {
			myKey="name";
			myValue="Resource Page";
		}
	}	

$ vi ResourcePage.properties
container.title.bar.name=${myValue}

/ StringResourceModel.getString(Component) resolves resource key , Localizer.getStringIgnoreSettings(String, Component, IModel<?>, Locale, String, String) resolves value    ,

/ debug ResourcePageTest	,
/s
StringResourceModel.getString(Component) line: 439	
			value = localizer.getString(getResourceKey(), component, model, null, null, defaultValue);	
					/ resolves resource key foo.${mykey} tot foo.name
/s
Localizer.getString(String, Component, IModel<?>, Locale, String, IModel<String>) line: 232	
		String value = getStringIgnoreSettings(key, component, model, locale, style, null);
/s
Localizer.getStringIgnoreSettings(String, Component, IModel<?>, Locale, String, String) line: 392	
			// Iterate over all registered string resource loaders until the property has been found
			Iterator<IStringResourceLoader> iter = getStringResourceLoaders().iterator();
			value = null;
			while (iter.hasNext() && (value == null))
			{
				IStringResourceLoader loader = iter.next();		/ loader	ComponentStringResourceLoader  (id=322)	
				value = loader.loadStringResource(component, key, locale, style, variation);	/ "${myValue}" 
			}
			putIntoCache(cacheKey, value);
			return substitutePropertyExpressions(component, value, model);
component	ResourceLabel  (id=247)	
string	"${myValue}" (id=323)	
model	Model<T>  (id=244)	
	object	ResourcePage$X  (id=240)	
/s
Localizer.substitutePropertyExpressions(Component, String, IModel<?>) line: 582	
			else
			{
				locator = component;
				locale = component.getLocale();
			}

			return new ConvertingPropertyVariableInterpolator(string, model.getObject(), locator,
				locale).toString();
/s
ConvertingPropertyVariableInterpolator(VariableInterpolator).toString() line: 110	
this	ConvertingPropertyVariableInterpolator  (id=2527)	
	oject	ResourcePage$X  (id=249)	
		myKey	"name" (id=214)	
		myValue	"Resource Page" (id=2538)	
	string	"${myValue}" (id=323)	

				// Get variable name inside brackets
				final String variableName = string.substring(startVariableName, endVariableName);
myValue
				final String value = getValue(variableName);
/s
ConvertingPropertyVariableInterpolator(PropertyVariableInterpolator).getValue(String) line: 65	
		Object value = PropertyResolver.getValue(variableName, oject);
/s
PropertyResolver.getValue(String, Object) line: 104	
		ObjectAndGetSetter getter = getObjectAndGetSetter(expression, object, RETURN_NULL);
getter	PropertyResolver$ObjectAndGetSetter  (id=2548)	
	getAndSetter	PropertyResolver$FieldGetAndSetter  (id=2549)	
		field	Field  (id=2550)	
	value	ResourcePage$X  (id=249)	

		return getter.getValue();
...
/s
PropertyResolver$FieldGetAndSetter.getValue(Object) line: 1385	
				return field.get(object);
/t
ConvertingPropertyVariableInterpolator(PropertyVariableInterpolator).getValue(String) line: 69	
		Object value = PropertyResolver.getValue(variableName, oject);
/d
"Resource Page"
			return toString(value);
/t
ConvertingPropertyVariableInterpolator(VariableInterpolator).toString() line: 152	
				// Get value of variable
				final String value = getValue(variableName);
/d
"Resource Page"
				else
				{
					// Append variable value
					buffer.append(value);
		// Convert result to String
		return buffer.toString();
/t
Localizer.substitutePropertyExpressions(Component, String, IModel<?>) line: 586	
			return new ConvertingPropertyVariableInterpolator(string, model.getObject(), locator,
				locale).toString();
/t
Localizer.getStringIgnoreSettings(String, Component, IModel<?>, Locale, String, String) line: 422	
			return substitutePropertyExpressions(component, value, model);
/d
Localizer.getString(String, Component, IModel<?>, Locale, String, IModel<String>) line: 236	
		String value = getStringIgnoreSettings(key, component, model, locale, style, null);
/d

/ Einde STRINGRESOURCEMODEL WITH RESOURCE KEY AND MODEL

/ STRINGRESOURCEMODEL WITH RESOURCE KEY AND COMPONENT 

/ Intermezzo

/ Op een StringResourceModel doe je ook getObject()	, al denk je altijd aan load()	, 
/ getObject doet 1 keer load()	, en transientObject=load() set	, en getObject returns transientObject	, 

/ Einde Intermezzo

$ vi ResourcePage.java
		{
		MarkupContainer container=new ResourceContainer("container");
		add(container);
		IModel<String>model=new StringResourceModel("foo.name",this);		
		ResourceLabel label=new ResourceLabel("title",model);
		container.add(label);
		}
$ vi ResourcePage.html
<div wicket:id="container">
	<h3 wicket:id="title"></h3>
</div>

$ vi ResourcePage.properties
foo.name=Resource Page
/ Dus NIET	,	
container.title.foo.name=Resource Page

/ want AssignmentWrapper.this.component=this=ResourcePage overshadows de StringResourceModel's component=Label	, dus de wicket path is ""	, dus wicket path+resource key="foo.name"	,
/ de rij waarin hij zoekt is alleen ResourcePage	,

/ zonder een component arg gaat het zo: hij kijkt naar StringResourceModel's component=Label , dus de wicket path is  "container:title"	, dus wicket path+key= "container.title.foo.name" en de zoekrij is ResourcePage, ResourceContainer, ResourceLabel	,
/ hij zoekt in ResourcePage naar container.title.foo.name en foo.name	,
/ hij zoekt in ResourceContainer naar title.foo.name en foo.name	,
/ hij zoekt in ResourceLabel naar foo.name en foo.name	,

/ 13	. 

/ StringResourceModel$AssignmentWrapper is ook een LoadableDetachable model, net als StringResourceModel	, heeft ook een load fct	,
/ Een AssignmentWrapper heeft net als een  StringResourceModel een component field	, die bepaalt tot waar er gezocht wordt in de properties files	, 
/ Als de StringResourceModel ctor geen Component heeft	, dan krijgt de AssignmentWrapper de Component waar de StringResourceModel het model van is, deze als compnent field	, 
/ Als de StringResourceModel ctor wel een Component heeft, dan krijgt de AssignmentWrapper de Component waar de StringResourceModel het model van is, deze als compnent field    , maar deze wordt in de AssignmentWrapper.load buiten spel gezet	, zodat de Component uit de StringResourceModel ctor bepaalt totwaar er gezocht gaat worden	, (maar de AssignemtWrapper heeft wel altijd als component field de Component waar de StringResourceModel het model van is (de Component ctor doet dat))


/ 13	. 

/ Of je een Component geeft aan de StringResourceModel of niet	,  je komt altijd uit op StringResourceModel.getString(Component component)	, en this=StringResourceModel inst altijd	, 
/ De StringResourceModel$AssignmentWrapper's component field is altijd de Component waar de StringResourceModel het Model van is	,
/ Als je een Component geeft aan de StringResourceModel is de Component arg dat Component	,  de AssignmentWrapper's component wordt omzeilt	,
/ Als je geen Component geeft aan de StringResourceModel is de Component arg het Component uit de AssignentWrapper	,  

/ 1313	. 

public class StringResourceModel extends LoadableDetachableModel<String>
	private class AssignmentWrapper extends LoadableDetachableModel<String>
		@Override
		protected String load()
		{
			if (StringResourceModel.this.component != null)
/n
			else
			{
				return getString(component);			/ this=StringResourceModel$AssignentWrapper

	protected String getString(final Component component)
	{
		final Localizer localizer = getLocalizer();				/ this=StringResourceModel	,

/ 1313	. 

public class StringResourceModel extends LoadableDetachableModel<String>
	private class AssignmentWrapper extends LoadableDetachableModel<String>
		@Override
		protected String load()
		{
			if (StringResourceModel.this.component != null)
				// ignore assignment if component was specified explicitly
				return StringResourceModel.this.getObject();
/s
StringResourceModel(LoadableDetachableModel<T>).getObject() line: 129	
		if (state == null || state == InternalState.DETACHED)
		{
			// prevent infinite attachment loops
			state = InternalState.ATTACHING;

			transientModelObject = load();
/s
StringResourceModel.load() line: 617	
		return getString();
/s
StringResourceModel.getString() line: 424	
		return getString(component);
/s
StringResourceModel.getString(Component) line: 429	
		final Localizer localizer = getLocalizer();				/ this=StringResourceModel	,







/ 13	. 

/ Dus de Component heeft een StringResourceModel$AssignmentWrapper als model	, en deze heeft altijd de Component als "component" field
/s
Component.class
	public Component(final String id, final IModel<?> model)
			setModelImpl(wrap(model));
/s
	protected final <V> IModel<V> wrap(final IModel<V> model)
	{
		if (model instanceof IComponentAssignedModel)
		{
			return ((IComponentAssignedModel<V>)model).wrapOnAssignment(this);
		}
		return model;
	}
/s
public class StringResourceModel extends LoadableDetachableModel<String>
	@Override
	public IWrapModel<String> wrapOnAssignment(Component component)
	{
		return new AssignmentWrapper(component);
	}
/s
	private class AssignmentWrapper extends LoadableDetachableModel<String> implements IWrapModel<String> {
		private final Component component;
		public AssignmentWrapper(Component component)
		{
			this.component = component;
		}

/ 13	. 

/ als je een Label ctor een StringResourceModel geeft	, dan wordt het model van het Label een StringResourceModel$AssignmentWrapper 		, die het Label als "component" field heeft	, 
/ StringResourceModel is een LoadableDetachableModel	, en AssignmentWapper is ook een StringResourceModel	,
/ getObject() calls load() en AssignmentWrapper.load() doet getString(component=Label)	, behalve als de StringResourceModel ctor een Component arg heeft	, dan wordt getString(that Component) called	, 
/ TODO role van this in getString	, of het de AssignmentWrapper inst is 	, of de StringResourceModel	, 

/ MORGENOCHTEND 8 mei

/ 13	. 

$ vi ResourcePage.java
public class ResourcePage extends WebPage {
		MarkupContainer container=new ResourceContainer("container");
		add(container);
		IModel<Map<String,String>>subModel=new LoadableDetachableModel<Map<String, String>>() {
			@Override
			protected Map<String,String> load() {
				HashMap<String,String>map=new HashMap<>();
				map.put("answer",getAnswer());
				return map;
			}
		};
		IModel<String>model=new StringResourceModel("bar.answer",subModel);	
		ResourceLabel label=new ResourceLabel("title", model);
		container.add(label);

$ vi ResourcePage.properties
container.title.bar.answer=The Answer is ${answer}

/ Dus de Component in de StringResourceModel wordt used op in je juiste properties file de string te vinden	, en als daar variables in staan, worden deze opgezocht in de model uit de StringResourceModel ctor	, 
/ Als er geen model is in de StringResourceModel , in welk model worden dan de variables opgezocht	?
/ TODO MORGENOCHTEND 8 mei



/s
StringResourceModel$AssignmentWrapper.load() line: 267	
			if (StringResourceModel.this.component != null)		/ ResourcePage	,
			{
				// ignore assignment if component was specified explicitly	
				return StringResourceModel.this.getObject();	/ StringResourceModel is een LoadableDetachableModel, LoadableDetachableModel.getObject 
												/ calls load(), en dat is nu StringResourceModel.load()	, calls getString = getString(component)	, 
										/ en component = extra argument StringResourceModel ctor	,
			}
			else
/n
			{
				return getString(component);	/ component==ResourceLabel,	 dat is altijd	, wat Component.<init> doet setModelImpl(wrap(model))	,
						/ Dit is dus StringResourceModel$AssignmentWrapper.getString
/n
/s
StringResourceModel(LoadableDetachableModel<T>).getObject() line: 129	
			transientModelObject = load();
/s
StringResourceModel.load() line: 617	
		return getString();
/s
StringResourceModel.getString() line: 424	
		return getString(component);		/ ResourcePage
/c
Localizer.getStringIgnoreSettings(String, Component, IModel<?>, Locale, String, String) line: 392	
key	"name" (id=211)	
component	ResourcePage  (id=218)	
model	null	
			// Iterate over all registered string resource loaders until the property has been found
			Iterator<IStringResourceLoader> iter = getStringResourceLoaders().iterator();
			value = null;
			while (iter.hasNext() && (value == null))
			{
				IStringResourceLoader loader = iter.next();
				value = loader.loadStringResource(component, key, locale, style, variation);
/s
ComponentStringResourceLoader.loadStringResource(Component, String, Locale, String, String) line: 213	
		// The key prefix is equal to the component path relative to the
		// current component on the top of the stack.
		String prefix = getResourcePath(component);		/ ""

		// walk downwards starting with page going down to component
		for (Component current : getComponentTrail(component))	/ ResourcePage
		{
			// get current component class
			final Class<?> clazz = current.getClass();

			// first, try the fully qualified resource name relative to the
			// component on the path from page down.
			if (Strings.isEmpty(prefix) == false)
			{
				// lookup fully qualified path
				string = loadStringResource(clazz, prefix + '.' + key, locale, style, variation);	/ prefix.key="name"
/s

/ Einde STRINGRESOURCEMODEL WITH RESOURCE KEY AND COMPONENT 

/ STRINGRESOURCEMODEL WITH SUBMODEL=HASHMAP 

$ vi ResourcePage.java

	private String answer="Resource Page";
	
	public ResourcePage() {
		{
		MarkupContainer container=new ResourceContainer("container");
		add(container);
		IModel<Map<String,String>>subModel=new LoadableDetachableModel<Map<String, String>>() {
			@Override
			protected Map<String,String> load() {
				HashMap<String,String>map=new HashMap<>();
				map.put("answer",getAnswer());		/ of map.put("answer",answer)
				return map;
			}
		};
		IModel<String>model=new StringResourceModel("bar.answer",subModel);	
		ResourceLabel label=new ResourceLabel("title", model);
		container.add(label);
		}
	}
	public String getAnswer() {
		return answer;
	}

$ vi ResourcePage.properties
container.title.bar.answer=The Answer is ${answer}

$ vi ResourcePageTest.java
	@Test
	public void testAnswer(){
		tester.assertLabel("container:title", "The Answer is Resource Page");
				
	}

/s
StringResourceModel$AssignmentWrapper(LoadableDetachableModel<T>).getObject() line: 134	
		if (state == null || state == InternalState.DETACHED)
		{
			// prevent infinite attachment loops
			state = InternalState.ATTACHING;

			transientModelObject = load();
/s
StringResourceModel$AssignmentWrapper.load() line: 271	
			if (StringResourceModel.this.component != null)
/n
			else
			{
				return getString(component);	/ component=ResourceLabel
/s
StringResourceModel.getString(Component) line: 439	
			value = localizer.getString(getResourceKey(), component, model, null, null, defaultValue);
/s
StringResourceModel.getResourceKey() line: 592	
			return new PropertyVariableInterpolator(resourceKey, model.getObject()) {	<-	/ model=subModel van StringResourceModel	,
				protected String getValue(String variableName) {
					String result = super.getValue(variableName);
					
					// WICKET-5820 interpolate null with 'null'
					return result == null ? "null" : result;
				};
			}.toString();
/s
ResourcePage$1(LoadableDetachableModel<T>).getObject() line: 134	
		if (state == null || state == InternalState.DETACHED)
		{
			// prevent infinite attachment loops
			state = InternalState.ATTACHING;

			transientModelObject = load();
/s
ResourcePage$1.load() line: 68	
/=
		IModel<Map<String,String>>subModel=new LoadableDetachableModel<Map<String, String>>() {
			@Override
			protected Map<String,String> load() {
				HashMap<String,String>map=new HashMap<>();		<-
				map.put("answer",getAnswer());
				return map;
			}
map	HashMap<K,V>  (id=315)	
	[0]	HashMap$Entry<K,V>  (id=326)	
		key	"answer" (id=329)	
		value	"Resource Page" (id=330)	
/t
ResourcePage$1(LoadableDetachableModel<T>).getObject() line: 136	
			transientModelObject = load();
/d
this	ResourcePage$1  (id=255)	
	transientModelObject	HashMap<K,V>  (id=315)	
		[0]	HashMap$Entry<K,V>  (id=326)	
			key	"answer" (id=329)	
			value	"Resource Page" (id=330)	

			state = InternalState.ATTACHED;		
	return transientModelObject;
/t
StringResourceModel.getResourceKey() line: 592	
			return new PropertyVariableInterpolator(resourceKey, model.getObject()) {
				protected String getValue(String variableName) {
					String result = super.getValue(variableName);
					
					// WICKET-5820 interpolate null with 'null'
					return result == null ? "null" : result;
				};
			}.toString();
/pd
/s
StringResourceModel$1(PropertyVariableInterpolator).<init>(String, Object) line: 59	
/=
	public PropertyVariableInterpolator(final String string, final Object object)
string	"bar.answer" (id=276)	
object	HashMap<K,V>  (id=350)	
	[0]	HashMap$Entry<K,V>  (id=365)	
		key	"answer" (id=369)	
		value	"Resource Page" (id=370)	
/t
StringResourceModel.getResourceKey() line: 592	
			return new PropertyVariableInterpolator(resourceKey, model.getObject()) {
				protected String getValue(String variableName) {
					String result = super.getValue(variableName);
					
					// WICKET-5820 interpolate null with 'null'
					return result == null ? "null" : result;
				};
			}.toString();
/ pd
/s
StringResourceModel$1(VariableInterpolator).toString() line: 110	
this	StringResourceModel$1  (id=354)	
	oject	HashMap<K,V>  (id=350)	
	string	"bar.answer" (id=276)	
		return string;
/t
StringResourceModel.getString(Component) line: 439	
			value = localizer.getString(getResourceKey(), component, model, null, null, defaultValue);
/pd
this	StringResourceModel  (id=275)		/ waar is die oject	? TODO
	component	null	
	defaultValue	null	
	model	ResourcePage$1  (id=277)	
		state	LoadableDetachableModel$InternalState  (id=384)	
		this$0	ResourcePage  (id=232)	
		transientModelObject	HashMap<K,V>  (id=350)	
			[0]	HashMap$Entry<K,V>  (id=365)	
				key	"answer" (id=369)	
				value	"Resource Page" (id=370)	
	parameters	null	
	resourceKey	"bar.answer" (id=276)	
	state	LoadableDetachableModel$InternalState  (id=340)	
	transientModelObject	null	

/ Intermezzo

/ je hebt de ResourcePage$1=LoadableDetachableModel=StringResourceModel's subModel	, en StringResourceModel$1=AssignmentWrapper	, en oject
/ TODO
/ MORGENOCHTEND II

/ Einde Intermezzo

/s
Localizer.getString(String, Component, IModel<?>, Locale, String, IModel<String>) line: 232	
		String value = getStringIgnoreSettings(key, component, model, locale, style, null);
/s
Localizer.getStringIgnoreSettings(String, Component, IModel<?>, Locale, String, String) line: 323	
/=
	public String getStringIgnoreSettings(final String key, final Component component, final IModel<?> model, Locale locale, String style, final String defaultValue)
key	"bar.answer" (id=276)	
component	ResourceLabel  (id=278)	
model	ResourcePage$1  (id=277)		/ LoadableDetachableModel	, the StringResourceModel's subModel	,

			// Iterate over all registered string resource loaders until the property has been found
			Iterator<IStringResourceLoader> iter = getStringResourceLoaders().iterator();
			value = null;
			while (iter.hasNext() && (value == null))
			{
				IStringResourceLoader loader = iter.next();	/ loader	ComponentStringResourceLoader  (id=405)	
				value = loader.loadStringResource(component, key, locale, style, variation);	/ we zien StringResourceModel's sub model niet	,dus gewoon step over	,
value	"The Answer is ${answer}" (id=411)	
			return substitutePropertyExpressions(component, value, model);
/s
Localizer.substitutePropertyExpressions(Component, String, IModel<?>) line: 563	
				locator = component;	/ ResourceLabel	,
			return new ConvertingPropertyVariableInterpolator(string, model.getObject(), locator, locale).toString();
model.object() is er al	, de transient	,	 en is de HashMap, 	answer:"Resource Page"
/s
ConvertingPropertyVariableInterpolator.<init>(String, Object, IConverterLocator, Locale) line: 52	
		super(string, object);
		this.locator = locator;
		this.locale = locale;
this	ConvertingPropertyVariableInterpolator  (id=2698)	
	exceptionOnNullVarValue	false	
	locale	Locale  (id=2660)	
	locator	ResourceLabel  (id=278)	
	oject	HashMap<K,V>  (id=350)	
	string	"The Answer is ${answer}" (id=2680)	
/t
Localizer.substitutePropertyExpressions(Component, String, IModel<?>) line: 586	
			return new ConvertingPropertyVariableInterpolator(string, model.getObject(), locator,
				locale).toString();
/pd
/s
ConvertingPropertyVariableInterpolator(VariableInterpolator).toString() line: 110	
				// Get variable name inside brackets
				final String variableName = string.substring(startVariableName, endVariableName);
"answer"
				// Get value of variable
				final String value = getValue(variableName);
/s
ConvertingPropertyVariableInterpolator(PropertyVariableInterpolator).getValue(String) line: 65	
		Object value = PropertyResolver.getValue(variableName, oject);
variableName	"answer" (id=2715)	
this	ConvertingPropertyVariableInterpolator  (id=2698)	
	oject	HashMap<K,V>  (id=350)	
		[0]	HashMap$Entry<K,V>  (id=365)	
			key	"answer" (id=369)	
			value	"Resource Page" (id=370)	
/s
PropertyResolver.getValue(String, Object) line: 99	
		ObjectAndGetSetter getter = getObjectAndGetSetter(expression, object, RETURN_NULL);
expression="answer"
object HashMap
/s
PropertyResolver.getObjectAndGetSetter(String, Object, int, Class<?>) line: 351	
		IGetAndSet getAndSetter = getGetAndSetter(exp, clz);
clz	Class<T> (java.util.HashMap) (id=351)	
exp	"answer" (id=2715)	
/s
PropertyResolver.getGetAndSetter(String, Class<?>) line: 385	
		IClassCache classesToGetAndSetters = getClassesToGetAndSetters();
		Map<String, IGetAndSet> getAndSetters = classesToGetAndSetters.get(clz);
		if (getAndSetters == null)
		{
			getAndSetters = new ConcurrentHashMap<String, IGetAndSet>(8);
			classesToGetAndSetters.put(clz, getAndSetters);
		}
		IGetAndSet getAndSetter = getAndSetters.get(exp);
		if (getAndSetter == null)
				method = findGetter(clz, exp);
/s
PropertyResolver.findGetter(Class<?>, String) line: 579	
		String name = Character.toUpperCase(expression.charAt(0)) + expression.substring(1);		/ "Answer"
			method = clz.getMethod(GET + name, (Class[])null);	/ null
				method = clz.getMethod(IS + name, (Class[])null);	/ null
		return method;/ null
/t
PropertyResolver.getGetAndSetter(String, Class<?>) line: 414	
				method = findGetter(clz, exp);
null
			if (method == null)
			{
				if (List.class.isAssignableFrom(clz))	/ clz=HashMap
/n
				else if (Map.class.isAssignableFrom(clz))
				{
					getAndSetter = new MapGetSet(exp);
getAndSetter	PropertyResolver$MapGetSet  (id=2770)	
	key	"answer" (id=2715)	
			getAndSetters.put(exp, getAndSetter);
		return getAndSetter;
/t
PropertyResolver.getObjectAndGetSetter(String, Object, int, Class<?>) line: 352	
		IGetAndSet getAndSetter = getGetAndSetter(exp, clz);
/d
		return new ObjectAndGetSetter(getAndSetter, value);
getAndSetter	PropertyResolver$MapGetSet  (id=2770)	
	key	"answer" (id=2715)	
value	HashMap<K,V>  (id=350)	
/t
PropertyResolver.getValue(String, Object) line: 110	
		ObjectAndGetSetter getter = getObjectAndGetSetter(expression, object, RETURN_NULL);
/d
		return getter.getValue();
/s
PropertyResolver$ObjectAndGetSetter.getValue() line: 659	
			return getAndSetter.getValue(value);
/s
PropertyResolver$MapGetSet.getValue(Object) line: 799				/ we komen in PropertyResolver$MapGetSet
			return ((Map<?, ?>)object).get(key);	/ key="answer"
object	HashMap<K,V>  (id=350)	
/t
ConvertingPropertyVariableInterpolator(PropertyVariableInterpolator).getValue(String) line: 67	
		Object value = PropertyResolver.getValue(variableName, oject); / Resource Page
			return toString(value);
/t
ConvertingPropertyVariableInterpolator(VariableInterpolator).toString() line: 152	
				// Get value of variable
				final String value = getValue(variableName);
/d
Resource Page
					// Append variable value
					buffer.append(value); 	/ The Answer is Resource Page
		// Convert result to String
		return buffer.toString();


/ Einde STRINGRESOURCEMODEL WITH SUBMODEL=HASHMAP 

/ LOADABLEDETACHABLEMODEL

/ Lees	,

https://cwiki.apache.org/confluence/display/WICKET/Working+with+Wicket+models#WorkingwithWicketmodels-SimpleModels

/ 7	.  

/ proj wicket-examples-step-by-step

$ vi DetachablePage.java

public class DetachablePage extends WebPage {
	public DetachablePage() {
		IModel<String>model=new LoadableDetachableModel<String>() {
			@Override
			protected String load() {
				return "foo";
			}
			@Override
			protected void onAttach() {
				super.onAttach();
			}
			@Override
			protected void onDetach() {
				super.onDetach();
			}
		};
		Label label=new Label("label",model);
		add(label);
	}
}

$ vi DetachablePage.html

	<span wicket:id="label"></span>

$ vi DetachablePageTest.html

public class DetachablePageTest {
	
	WicketTester wicketTester;
	public DetachablePageTest() {
		WebApplication webApplication=new TestApplication();
		wicketTester=new WicketTester(webApplication);
		wicketTester.startPage(DetachablePage.class);
	}
	
	@Test
	public void testPage(){
		wicketTester.assertRenderedPage(DetachablePage.class);
	}
	
	@Test
	public void testLabel(){
		wicketTester.assertLabel("label", "foo");
	}
}

/ 13	. 

/ attach	,

/ stack	,
/s
Thread [main] (Suspended (breakpoint at line 129 in LoadableDetachableModel))	
	DetachablePage$1(LoadableDetachableModel<T>).getObject() line: 129	
	Label(Component).getDefaultModelObject() line: 1626	
	Label(Component).getDefaultModelObjectAsString() line: 1654	
	Label.onComponentTagBody(MarkupStream, ComponentTag) line: 115	
		replaceComponentTagBody(markupStream, openTag, getDefaultModelObjectAsString());
/cb
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
	Label(Component).internalRenderComponent() line: 2565	
	Label(WebComponent).onRender() line: 60	
	Label(Component).internalRender() line: 2380	
	Label(Component).render() line: 2308	

	DetachablePage(MarkupContainer).renderNext(MarkupStream) line: 1524	
	DetachablePage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	DetachablePage(Page).onRender() line: 879	
	DetachablePage(WebPage).onRender() line: 141	
	DetachablePage(Component).internalRender() line: 2380	
	DetachablePage(Component).render() line: 2308	

	DetachablePage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	BaseWicketTester$LastPageRecordingPageRendererProvider$1.respond(RequestCycle) line: 2747	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler, boolean) line: 718	
	WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler) line: 657	
	WicketTester(BaseWicketTester).processRequest() line: 629	
	WicketTester(BaseWicketTester).startPage(Class<C>, PageParameters) line: 1262	
	WicketTester(BaseWicketTester).startPage(Class<C>) line: 1235	
	DetachablePageTest.<init>() line: 13	
/debug
/s
DetachablePage$1(LoadableDetachableModel<T>).getObject() line: 134	
		if (state == null || state == InternalState.DETACHED)
		{
			// prevent infinite attachment loops
			state = InternalState.ATTACHING;

			transientModelObject = load();
this	DetachablePage$1  (id=258)	
	state	LoadableDetachableModel$InternalState  (id=276)	
	this$0	DetachablePage  (id=209)	
	transientModelObject	"foo" (id=278)	
			state = InternalState.ATTACHED;
			onAttach();
/s
DetachablePage$1.onAttach() line: 18	
/=
		IModel<String>model=new LoadableDetachableModel<String>() {
			@Override
			protected void onAttach() {
				super.onAttach();			/ LoadableDetachableModel.onAttach is leeg	,
/t
DetachablePage$1(LoadableDetachableModel<T>).getObject() line: 134	
			onAttach();
/d
		return transientModelObject;
/t
Component.class
	public final Object getDefaultModelObject()
	{
		final IModel<?> model = getDefaultModel();
				// Get model value for this component.
				return model.getObject();
/t
Label(Component).getDefaultModelObjectAsString() line: 1654	
		return getDefaultModelObjectAsString(getDefaultModelObject());
/pd
/s
Label(Component).getDefaultModelObjectAsString(Object) line: 1674	
/ TODO
/t
Label.onComponentTagBody(MarkupStream, ComponentTag) line: 115	
		replaceComponentTagBody(markupStream, openTag, getDefaultModelObjectAsString());
/pd
/s
Label(Component).replaceComponentTagBody(MarkupStream, ComponentTag, CharSequence) line: 4054	
/=
	protected final void replaceComponentTagBody(final MarkupStream markupStream, final ComponentTag tag, final CharSequence body)
tag = <span wicket:id="label">
body = "foo"
				// skip any raw markup in the body
				markupStream.skipRawMarkup();			
			getResponse().write(body);
<!doctype>
<html>
<head>
</head>
<body>
	<span wicket:id="label">foo

/ Intermezzo

/ In meer detail,	
org.apache.wicket.request.cycle.RequestCycle.get().getResponse()
	actions	ArrayList<E>  (id=324)	
	charSequenceAction	BufferedWebResponse$WriteCharSequenceAction  (id=325)	
		builder	StringBuilder  (id=345)														<- builder.append("foo") 
<!doctype>
<html>
<head>
</head>
<body>
	<span wicket:id="label">foo

/ Einde Intermezzo

/ 13	. 

/ detach	,

/c
/ stack	,
	DetachablePage$1(LoadableDetachableModel<T>).detach() line: 106	
		if (state == InternalState.ATTACHED)
		{
			try
			{
				onDetach();
/cb
	Label(Component).detachModel() line: 3636	
		IModel<?> model = getModelImpl();
		if (model != null)
		{
			model.detach();
/cb
	Label(Component).detachModels() line: 1262	
		// Detach any detachable model from this component
		detachModel();
/cb
	Label(Component).detach() line: 1174	
			onDetach();
			// always detach models because they can be attached without the
			// component. eg component has a compoundpropertymodel and one of its
			// children component's getmodelobject is called
			detachModels();
/cb
	DetachablePage(MarkupContainer).detachChildren() line: 1802	
		super.detachChildren();

		for (Component component : this)
		{
			component.detach();
/cb
	DetachablePage(Component).detach() line: 1186	
			onDetach();
			// always detach models because they can be attached without the
			// component. eg component has a compoundpropertymodel and one of its
			// children component's getmodelobject is called
			detachModels();
			// detach any behaviors
			new Behaviors(this).detach();
		// always detach children because components can be attached
		// independently of their parents
		detachChildren();
/cb
	PageProvider.detach() line: 330	
			pageInstance.detach();
/cb
	RenderPageRequestHandler.detach(IRequestCycle) line: 156	
		pageProvider.detach();
/cb
	RequestCycle$HandlerExecutor.detach(IRequestHandler) line: 906	
			handler.detach(RequestCycle.this);
/cb
	RequestCycle$HandlerExecutor(RequestHandlerStack).detach() line: 180	
		for (IRequestHandler handler : inactiveRequestHandlers)			/ handler=RenderPageRequestHandler,	
		{
			try
			{
				detach(handler);
/cb
	RequestCycle.onDetach() line: 641	
			requestHandlerExecutor.detach();
/cb
	RequestCycle.detach() line: 594	
			onDetach();
/cb
	RequestCycle.processRequestAndDetach() line: 297	
			result = processRequest();
/d
			detach();
/cb
	WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler, boolean) line: 718	
			if (!requestCycle.processRequestAndDetach())
/cb
	WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler) line: 657	
	WicketTester(BaseWicketTester).processRequest() line: 629	
	WicketTester(BaseWicketTester).startPage(Class<C>, PageParameters) line: 1262	
	WicketTester(BaseWicketTester).startPage(Class<C>) line: 1235	
/debug	,
/s
DetachablePage$1(LoadableDetachableModel<T>).detach() line: 110	
		if (state == InternalState.ATTACHED)
		{
			try
			{
				onDetach();
/s
DetachablePage$1.onDetach() line: 22	
/=
		IModel<String>model=new LoadableDetachableModel<String>() {
			@Override
			protected void onDetach() {
				super.onDetach();		/ LoadableDetachableModel.onDetach is leeg	,
/t
DetachablePage$1(LoadableDetachableModel<T>).detach() line: 114	
				onDetach();
/d
			}
			finally
			{
				state = InternalState.DETACHED;
				transientModelObject = null;
/t
Label(Component).detach() line: 1177	
			detachModels();
/d
			// detach any behaviors
			new Behaviors(this).detach();
...
		internalDetach();
/s
Label(Component).internalDetach() line: 1254	
		markup = null;
/t
...
/ TODO Afmaken	,

/ 7	. 

/ Wat doet detachModels als we een gewoon model hebben	?

/s
	Label(Component).detach() line: 1162	
			onDetach();
/cb
	DetachablePage(MarkupContainer).detachChildren() line: 1802	
	DetachablePage(Component).detach() line: 1186	
	PageProvider.detach() line: 330	
	RenderPageRequestHandler.detach(IRequestCycle) line: 156	
	RequestCycle$HandlerExecutor.detach(IRequestHandler) line: 906	
	RequestCycle$HandlerExecutor(RequestHandlerStack).detach() line: 180	
	RequestCycle.onDetach() line: 641	
	RequestCycle.detach() line: 594	
	RequestCycle.processRequestAndDetach() line: 297	
	WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler, boolean) line: 718	
	WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler) line: 657	
	WicketTester(BaseWicketTester).processRequest() line: 629	
	WicketTester(BaseWicketTester).startPage(Class<C>, PageParameters) line: 1262	
	WicketTester(BaseWicketTester).startPage(Class<C>) line: 1235	
	DetachablePageTest.<init>() line: 13	
/s
Label(Component).onDetach() line: 3939	
		setFlag(FLAG_DETACHING, false);
/t
Label(Component).detach() line: 1163	
			onDetach();
			// always detach models because they can be attached without the
			// component. eg component has a compoundpropertymodel and one of its
			// children component's getmodelobject is called
			detachModels();
/s
Label(Component).detachModels() line: 1262	
		// Detach any detachable model from this component
		detachModel();
/s
Label(Component).detachModel() line: 3633	
		IModel<?> model = getModelImpl();
		if (model != null)
		{
			model.detach();
/s
Model<T>.detach() line: 208	
		if (object instanceof IDetachable)		/ object="foo"
/n
		{
			((IDetachable)object).detach();
/n
/ Zonet kwamen we in	,
	DetachablePage$1(LoadableDetachableModel<T>).detach() line: 106	

/ Intermezzo

/ 13	. 

public class Model<T extends Serializable> implements IObjectClassAwareModel<T>
	@Override
	public void detach()
	{
		if (object instanceof IDetachable)
		{
			((IDetachable)object).detach();
		}
	}
/e
public interface IObjectClassAwareModel<T> extends IModel<T>
/e
public interface IModel<T> extends IDetachable
/e
public interface IDetachable extends IClusterable
{
	/**
	 * Detaches model after use. This is generally used to null out transient references that can be
	 * re-attached later.
	 */
	void detach();
}

/ 13	. 

public abstract class LoadableDetachableModel<T> implements IModel<T>
	@Override
	public final T getObject()														/ attach	, call load()	,
	{
		if (state == null || state == InternalState.DETACHED)
		{
			// prevent infinite attachment loops
			state = InternalState.ATTACHING;

			transientModelObject = load();

			if (log.isDebugEnabled())
			{
				log.debug("loaded transient object " + transientModelObject + " for " + this +
					", requestCycle " + RequestCycle.get());
			}

			state = InternalState.ATTACHED;
			onAttach();
		}
		return transientModelObject;
	}
	@Override
	public void detach()													/ detach	,
	{
		if (state == InternalState.ATTACHED)
		{
			try
			{
				onDetach();
			}
			finally
			{
				state = InternalState.DETACHED;
				transientModelObject = null;

				log.debug("removed transient object for {}, requestCycle {}", this,
					RequestCycle.get());
			}
		}
	}
	protected void onDetach()
	{
	}
	protected abstract T load();



/ 13	. 

public class PropertyModel<T> extends AbstractPropertyModel<T>
/e
public abstract class AbstractPropertyModel<T> extends ChainingModel<T> implements IObjectClassAwareModel<T>, IPropertyReflectionAwareModel<T>
/e
public abstract class ChainingModel<T> implements IChainingModel<T>
	@Override												/ ChainingModel implements IDetachable	,
	public void detach()
		// Detach nested object if it's a detachable
		if (target instanceof IDetachable)
		{
			((IDetachable)target).detach();
		}
/i
public interface IChainingModel<T> extends IModel<T>
/e
public interface IModel<T> extends IDetachable
	T getObject();
	void setObject(final T object);
/e
public interface IDetachable extends IClusterable
{
	/**
	 * Detaches model after use. This is generally used to null out transient references that can be
	 * re-attached later.
	 */
	void detach();
}
/ Einde Intermezzo

/ 7	. 

/ Lees	,
https://cwiki.apache.org/confluence/display/WICKET/Detachable+Models




/ Einde LOADABLEDETACHABLEMODEL

/ LOADABLEDETACHABLEMODEL (MODEL VS LOADABLEDETACHABLEMODEL)

/ we hebben in server config 'Tomcat v7.0 Server at localhost (2)' AJP/1.3 op port 8909 set (was 8009, maar al in use door scs)
/ we kunnen conf/server.xml edit, maar dan komt het niet in eclipse's server config	, dus moeten ook in 'Tomcat v7.0 Server at localhost (2)' AJP/1.3 port op 8909 set
/ TODO We kunnen de server config 'Tomcat v7.0 Server at localhost (2)' niet refresh of zoiets	,

/ Het object in een LoadableDetachableModel verandert per request	, die van een Model niet	, die is constant	,

/ proj. wicket-examples-step-by-step	, 
/ pkg repeater

$ vi ClockPage.java

public class ClockPage extends WebPage{
	private Label label;

	public ClockPage() {
		SimpleDateFormat format=new SimpleDateFormat("hh:mm:ss");
		Date date=new Date();
		String time=format.format(date);
		IModel<String>model=new Model<String>(time);						/ constant tussen requests	,
		IModel<String>model2=new LoadableDetachableModel<String>() {		/ variable tussen requests	,
			@Override
			protected String load() {
				SimpleDateFormat format=new SimpleDateFormat("hh:mm:ss");
				Date date=new Date();
				String time=format.format(date);
				return time;
			}
		};
		label=new Label("label",model2);									/ model of model2	,
		add(label);
		label.setOutputMarkupId(true);
		AjaxLink<Void>link=new AjaxLink<Void>("link") {
			
			@Override
			public void onClick(AjaxRequestTarget target) {
				target.add(label);
				
			}
		};
		add(link);
	}
}

$ vi ClockPageTest.html
<body>
	<span wicket:id="label"></span>
	<br>
	<a wicket:id="link">Link</a>
</body>

$ vi ClockPageTest.java

public class ClockPageTest {
	private WicketTester wicketTester;
	private String text;

	public ClockPageTest() {
		WebApplication application=new TestApplication();
		wicketTester=new WicketTester(application);
		wicketTester.startPage(ClockPage.class);
	}
	@Before
	public void testPage(){
		wicketTester.assertRenderedPage(ClockPage.class);
		text=wicketTester.getComponentFromLastRenderedPage("label").getDefaultModelObjectAsString();
	}
	@Test
	public void testLink(){
		try{Thread.sleep(1000);}catch(InterruptedException e){}
		wicketTester.clickLink("link");
		Assert.assertNotEquals(wicketTester.getComponentFromLastRenderedPage("label").getDefaultModelObjectAsString(), text);
	}
}
/ passes	,


/ Einde LOADABLEDETACHABLEMODEL (MODEL VS LOADABLEDETACHABLEMODEL)

/ SERIALIZE WICKET

tomcat7:undeploy clean tomcat7:deploy
/ Hoe in WicketTester	?
/ TODO

/ 7	. 

/ undeploy	,

/ debug	, 
/s
WicketFilter.destroy() line: 612	
				ThreadContext.setApplication(application);
				application.internalDestroy();
/s
RepeaterApplication(Application).internalDestroy() line: 799	
		internalGetPageManager().destroy();
/s
RepeaterApplication(Application).internalGetPageManager() line: 1543	
					pageManager = pageManagerProvider.get(getPageManagerContext()); / getPageManagerContext()=return pageManagerContext;
/s
DefaultPageManagerProvider.get(IPageManagerContext) line: 56	
		IDataStore dataStore = newDataStore();
/s
DefaultPageManagerProvider.newDataStore() line: 81	
		StoreSettings storeSettings = getStoreSettings();			/ = 		return application.getStoreSettings();
		Bytes maxSizePerSession = storeSettings.getMaxSizePerSession();
		File fileStoreFolder = storeSettings.getFileStoreFolder();	/ = /home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28/work/Catalina/localhost/wicket-examples-step-by-step
storeSettings	StoreSettings  (id=9186)	
	asynchronousQueueCapacity	100	
	fileStoreFolder	File  (id=9190)	/home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28/work/Catalina/localhost/wicket-examples-step-by-step
	inmemoryCacheSize	0	
	isAsynchronous	true	
	maxSizePerSession	Bytes  (id=9188) 	10M	
maxSizePerSession	Bytes  (id=9188)	
fileStoreFolder	File  (id=9190)	

		return new DiskDataStore(application.getName(), fileStoreFolder, maxSizePerSession);
/s
DiskDataStore.<init>(String, File, Bytes) line: 73	
/=
	public DiskDataStore(final String applicationName, final File fileStoreFolder, final Bytes maxSizePerSession)
applicationName	"RepeaterExamplesApplication" (id=9206)	
fileStoreFolder	File  (id=9190)	 /home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28/work/Catalina/localhost/wicket-examples-step-by-step
maxSizePerSession	Bytes  (id=9188) 10M

			if (this.fileStoreFolder.exists() || this.fileStoreFolder.mkdirs())
			{
				loadIndex();
/ NIETS	, /home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28/work/Catalina/localhost/wicket-examples-step-by-step/RepeaterExamplesApplication-filestore/DiskDataStoreIndex bestaat niet	,
/t
DefaultPageManagerProvider.get(IPageManagerContext) line: 63	
		IDataStore dataStore = newDataStore();
/d
dataStore	DiskDataStore  (id=9285)	
	applicationName	"RepeaterExamplesApplication" (id=9283)	
	fileStoreFolder	File  (id=9279)	/ /home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28/work/Catalina/localhost/wicket-examples-step-by-step	
	maxSizePerPageSession	Bytes  (id=9278)	
	sessionEntryMap	ConcurrentHashMap<K,V>  (id=9290)	
/ dataStore is dus die work/ dir	,

		StoreSettings storeSettings = getStoreSettings();

		if (dataStore.canBeAsynchronous())
/j
		{
			int capacity = storeSettings.getAsynchronousQueueCapacity();	/ = return asynchronousQueueCapacity
100
			dataStore = new AsynchronousDataStore(dataStore, capacity);
/s
AsynchronousDataStore.<init>(IDataStore, int) line: 94	
		this.dataStore = dataStore;
		entries = new LinkedBlockingQueue<Entry>(capacity);
		entryMap = new ConcurrentHashMap<String, Entry>();

		PageSavingRunnable savingRunnable = new PageSavingRunnable(dataStore, entries, entryMap);
		pageSavingThread = new Thread(savingRunnable, "Wicket-PageSavingThread");
		pageSavingThread.setDaemon(true);
		pageSavingThread.start();
		}
/ intermezzo

		@Override
		public void run()
		{
			while (!Thread.interrupted())
			{
				Entry entry = null;
				try
				{
					entry = entries.poll(POLL_WAIT, TimeUnit.MILLISECONDS);
				}
				catch (InterruptedException e)
				{
					Thread.currentThread().interrupt();
				}

				if (entry != null)
				{
					log.debug("Saving asynchronously: {}...", entry);
					dataStore.storeData(entry.sessionId, entry.pageId, entry.data);
					entryMap.remove(getKey(entry));
				}
			}
		}
	}

/ Einde intermezzo
/t
DefaultPageManagerProvider.newPageStore(IDataStore) line: 73	
			dataStore = new AsynchronousDataStore(dataStore, capacity);
/d
		IPageStore pageStore = newPageStore(dataStore);
/s
DefaultPageManagerProvider.newPageStore(IDataStore) line: 73	
		int inmemoryCacheSize = getStoreSettings().getInmemoryCacheSize();									/ 0
		ISerializer pageSerializer = application.getFrameworkSettings().getSerializer();

/ intermezzo

this	DefaultPageManagerProvider  (id=9268)	
	application	RepeaterApplication  (id=9247)	
		ajaxRequestTargetListeners	AjaxRequestTargetListenerCollection  (id=9264)	
		ajaxRequestTargetProvider	WebApplication$DefaultAjaxRequestTargetProvider  (id=9265)	
		applicationListeners	ApplicationListenerCollection  (id=9252)	
		applicationSettings	ApplicationSettings  (id=9314)	
		behaviorInstantiationListeners	BehaviorInstantiationListenerCollection  (id=9315)	
		componentInitializationListeners	ComponentInitializationListenerCollection  (id=9316)	
		componentInstantiationListeners	ComponentInstantiationListenerCollection  (id=9317)	
		componentOnAfterRenderListeners	ComponentOnAfterRenderListenerCollection  (id=9318)	
		componentOnConfigureListeners	ComponentOnConfigureListenerCollection  (id=9319)	
		componentPostOnBeforeRenderListeners	ComponentOnBeforeRenderListenerCollection  (id=9320)	
		componentPreOnBeforeRenderListeners	ComponentOnBeforeRenderListenerCollection  (id=9321)	
		configurationType	RuntimeConfigurationType  (id=9322)	
		contactsDB	ContactsDatabase  (id=9323)	
		converterLocator	ConverterLocator  (id=9324)	
		debugSettings	DebugSettings  (id=9325)	
		encoderContext	null	
		exceptionMapperProvider	Application$DefaultExceptionMapperProvider  (id=9326)	
		exceptionSettings	ExceptionSettings  (id=9327)	
		filterFactoryManager	null	
		frameworkSettings	FrameworkSettings  (id=9328)	
		headerContributorListeners	HeaderContributorListenerCollection  (id=9329)	
		headerResponseDecorator	null	
		initializers	ArrayList<E>  (id=9330)	
		javaScriptLibrarySettings	null	
		markupSettings	MarkupSettings  (id=9331)	
		metaData	MetaDataEntry<T>[1]  (id=9332)	
		name	"RepeaterExamplesApplication" (id=9283)	
		pageFactory	DefaultPageFactory  (id=9333)	
		pageManager	null	
		pageManagerContext	DefaultPageManagerContext  (id=9272)	
		pageManagerProvider	DefaultPageManagerProvider  (id=9268)	
		pageRendererProvider	WebApplication$WebPageRendererProvider  (id=9334)	
		pageSettings	PageSettings  (id=9335)	
		requestCycleListeners	RequestCycleListenerCollection  (id=9338)	
		requestCycleProvider	Application$DefaultRequestCycleProvider  (id=9339)	
		requestCycleSettings	RequestCycleSettings  (id=9340)	
		requestLogger	null	
		requestLoggerSettings	null	
		resourceBundles	ResourceBundles  (id=9341)	
		resourceReferenceRegistry	ResourceReferenceRegistry  (id=9342)	
		resourceSettings	ResourceSettings  (id=9343)	
		rootRequestMapper	SystemMapper  (id=9344)	
		securitySettings	null	
		servletContext	ApplicationContextFacade  (id=9345)	
		sessionAttributePrefix	null	
		sessionListeners	SessionListenerCollection  (id=9346)	
		sessionStore	null	
		sessionStoreProvider	WebApplication$WebSessionStoreProvider  (id=9347)	
		settingsAccessible	true	
		sharedResources	SharedResources  (id=9348)	
		storedResponses	StoredResponsesMap  (id=9349)	
		storeSettings	StoreSettings  (id=9276)	
		wicketFilter	WicketFilter  (id=9243)	

/ Einde intermezzo

		return new DefaultPageStore(pageSerializer, dataStore, inmemoryCacheSize);
/s
DefaultPageManagerProvider.newPageStore(IDataStore) line: 75	
		super(pageSerializer, dataStore, new SerializedPagesCache(cacheSize));
/s
DefaultPageStore$SerializedPagesCache.<init>(int) line: 319	
			this.maxSize = maxSize;												/ 0	, de default	,
			cache = new ConcurrentLinkedDeque<>();

/ Intermezzo

/ Lees	,
https://ci.apache.org/projects/wicket/guide/6.x/guide/versioningCaching.html

Wicket pages can be divided into two categories: stateful and stateless pages. Stateful pages are those which rely on user session to store their internal state and to keep track of user interaction. On the contrary stateless pages are those which don't change their internal state during their lifecycle and they don't need to occupy space into user session.

From Wicket's point of view the biggest difference between these two types of page is that stateful pages are versioned, meaning that they will be saved into user session every time their internal state has changed. 
/////////////////////////////////////////////////////////////////
Wicket automatically assigns a session to the user the first time a stateful page is requested. 
Page versions are stored into user session using Java Serialization mechanism. Stateless pages are never versioned and that's why they don't require a valid user session. 

As we have stated at the beginning of this chapter, page versions are stored using Java serialization, therefore every object referenced inside a page must be serializable. In paragraph 11.6 we will see how to overcome this limit and work with non-serializable objects in our components using detachable Wicket models.

Wicket serializes pages using an implementation of interface org.apache.wicket.serialize.ISerializer. The default implementation is org.apache.wicket.serialize.java.JavaSerializer and it uses the standard Java serialization mechanism based on classes ObjectOutputStream and ObjectInputStream.

By default Wicket persists versions of pages into a session-relative file on disk, but it uses a two-levels cache to speed up this process. The first level of the cache uses a http session attribute called “wicket:persistentPageManagerData-<APPLICATION_NAME>” to store pages. The second level cache stores pages into application-scoped variables which are identified by a session id and a page id.

The session-scoped cache is faster then the other memory levels but it contains only the pages used to serve the last request. Wicket allows us to set the maximum amount of memory allowed for the application-scoped cache and for the page store file. Both parameters can be configured via setting interface org.apache.wicket.settings.IStoreSettings.
/ TODO (page store file)

@Override
public void init()
{
	super.init();
	getStoreSettings().setMaxSizePerSession(Bytes.kilobytes(500));		/ page store file
}

@Override
public void init()
{
	super.init();
	getStoreSettings().setInmemoryCacheSize(50);		/ 2nd level cache	,
}

Page instances are not kept in the user session forever. They can be discarded when the limit set with the setMaxSizePerSession method is reached or (more often) when user session expires. When we ask Wicket for a page id corresponding to a page instance removed from the session, we bump into a PageExpiredException and we get the following default error page:

/ Einde Intermezzo

/t
DefaultPageStore.<init>(ISerializer, IDataStore, int) line: 55	
		super(pageSerializer, dataStore, new SerializedPagesCache(cacheSize));
/ pd
/s
DefaultPageStore(AbstractCachingPageStore<P>).<init>(ISerializer, IDataStore, SecondLevelPageCache<String,Integer,P>) line: 50	
		super(pageSerializer, dataStore);	/ dataStore = work/ in Tomcat	,
		this.pagesCache = Args.notNull(pagesCache, "pagesCache");		/ 2nd level	,
/t
DefaultPageManagerProvider.get(IPageManagerContext) line: 67	
		IPageStore pageStore = newPageStore(dataStore);
/d
		return new PageStoreManager(application.getName(), pageStore, pageManagerContext); 	/ ..., MANAGERS.put(applicationName, this);
/t
RepeaterApplication(Application).internalGetPageManager() line: 1547	
					pageManager = pageManagerProvider.get(getPageManagerContext());
/d
		return pageManager;
/t
RepeaterApplication(Application).internalDestroy() line: 799	
		internalGetPageManager().destroy();
/pd
/s
PageStoreManager.destroy() line: 436	
		MANAGERS.remove(applicationName);	 / zojuist added	, 
		pageStore.destroy();
/s
DefaultPageStore(AbstractCachingPageStore<P>).destroy() line: 102	
		super.destroy();
/s
DefaultPageStore(AbstractPageStore).destroy() line: 53	
		dataStore.destroy();
/s
AsynchronousDataStore.destroy() line: 118	
		if (pageSavingThread.isAlive())
		{
			pageSavingThread.interrupt();
			try
			{
				pageSavingThread.join();			/ TODO
			} catch (InterruptedException e)
			{
				log.error(e.getMessage(), e);
			}
		}
		dataStore.destroy();
/s
DiskDataStore.destroy() line: 105	
		saveIndex();								/ TODO
/t
DefaultPageStore(AbstractCachingPageStore<P>).destroy() line: 103	
		super.destroy();
/d
		pagesCache.destroy();
/s
DefaultPageStore$SerializedPagesCache.destroy() line: 460	
			cache.clear();
/t
RepeaterApplication(Application).internalDestroy() line: 800	
		internalGetPageManager().destroy();
/d
		getSessionStore().destroy();
/s
	/**
	 * Gets the facade object for working getting/ storing session instances.
	 * 
RepeaterApplication(Application).getSessionStore() line: 469	
		if (sessionStore == null)
		{
			synchronized (this)
			{
				if (sessionStore == null)
				{
					sessionStore = sessionStoreProvider.get();
/s
WebApplication$WebSessionStoreProvider.get() line: 1030	
			return new HttpSessionStore();
/t
RepeaterApplication(Application).getSessionStore() line: 470	
					sessionStore = sessionStoreProvider.get();
/d
					sessionStore.registerUnboundListener(this);
/t
RepeaterApplication(Application).internalDestroy() line: 802	
		getSessionStore().destroy();
/d
		applicationKeyToApplication.remove(getApplicationKey());
/t
WicketFilter.destroy() line: 616	
				application.internalDestroy();
			}
			finally
			{
				ThreadContext.detach();
				application = null;

				applicationFactory.destroy(this);	/ NIETS
				applicationFactory = null;

/c

/ 7	. 

/ Verder met undeploy	, 

/ Gebeurde maar 1 keer	, 
/ TODO

/ stack	, 
/s
	PageStoreManager$SessionEntry.writeObject(ObjectOutputStream) line: 229	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 57	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 606	
	ObjectStreamClass.invokeWriteObject(Object, ObjectOutputStream) line: 988	
	ObjectOutputStream.writeSerialData(Object, ObjectStreamClass) line: 1495	

	ObjectOutputStream.writeOrdinaryObject(Object, ObjectStreamClass, boolean) line: 1431	
            } else {
                writeSerialData(obj, desc);
/cb
	ObjectOutputStream.writeObject0(Object, boolean) line: 1177	
            } else if (obj instanceof Serializable) {
                writeOrdinaryObject(obj, desc, unshared);
/cb
	ObjectOutputStream.writeObject(Object) line: 347	
/=
    public final void writeObject(Object obj) throws IOException {
obj	PageStoreManager$SessionEntry  (id=9473)	
	serialVersionUID	1	
	afterReadObject	ArrayList<E>  (id=9493)		/ [[Page class = org.apache.wicket.examples.repeater.ClockPage, id = 0, render count = 6]]	
	applicationName	"RepeaterExamplesApplication" (id=9494)	
	sessionCache	null	
	sessionId	"509919174A224E33D041A52A0FC1BCE2" (id=9495)	
        try {
            writeObject0(obj, false);
/cb
	StandardSession.doWriteObject(ObjectOutputStream) line: 1710	
	StandardSession.writeObjectData(ObjectOutputStream) line: 1109	
	StandardManager.doUnload() line: 401	
	StandardManager.unload() line: 320	
	StandardManager.stopInternal() line: 487	
	StandardManager(LifecycleBase).stop() line: 232	
	StandardContext.stopInternal() line: 5400	
	StandardContext(LifecycleBase).stop() line: 232	
	ManagerServlet.undeploy(PrintWriter, ContextName, StringManager) line: 1398	
	ManagerServlet.doGet(HttpServletRequest, HttpServletResponse) line: 370	
	ManagerServlet(HttpServlet).service(HttpServletRequest, HttpServletResponse) line: 622	
	ManagerServlet(HttpServlet).service(ServletRequest, ServletResponse) line: 729	
	ApplicationFilterChain.internalDoFilter(ServletRequest, ServletResponse) line: 291	
	ApplicationFilterChain.doFilter(ServletRequest, ServletResponse) line: 206	
	WsFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 52	
	ApplicationFilterChain.internalDoFilter(ServletRequest, ServletResponse) line: 239	
	ApplicationFilterChain.doFilter(ServletRequest, ServletResponse) line: 206	
	SetCharacterEncodingFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 108	
	ApplicationFilterChain.internalDoFilter(ServletRequest, ServletResponse) line: 239	
	ApplicationFilterChain.doFilter(ServletRequest, ServletResponse) line: 206	
	StandardWrapperValve.invoke(Request, Response) line: 217	
	StandardContextValve.invoke(Request, Response) line: 106	
	BasicAuthenticator(AuthenticatorBase).invoke(Request, Response) line: 614	
	StandardHostValve.invoke(Request, Response) line: 142	
	ErrorReportValve.invoke(Request, Response) line: 79	
	AccessLogValve(AbstractAccessLogValve).invoke(Request, Response) line: 616	
	StandardEngineValve.invoke(Request, Response) line: 88	
	CoyoteAdapter.service(Request, Response) line: 518	
	Http11NioProcessor(AbstractHttp11Processor<S>).process(SocketWrapper<S>) line: 1091	
	Http11NioProtocol$Http11ConnectionHandler(AbstractProtocol$AbstractConnectionHandler<S,P>).process(SocketWrapper<S>, SocketStatus) line: 673	
	NioEndpoint$SocketProcessor.doRun() line: 1500	
	NioEndpoint$SocketProcessor.run() line: 1456	
	ThreadPoolExecutor(ThreadPoolExecutor).runWorker(ThreadPoolExecutor$Worker) line: 1145	
	ThreadPoolExecutor$Worker.run() line: 615	
	TaskThread$WrappingRunnable.run() line: 61	
	TaskThread(Thread).run() line: 745	

/ 7	. 

/ Geef in chrome	, 
http://localhost:9090/wicket-examples-step-by-step/repeater/clock?0			/ we geven page id erbij	, 0

/ stack	,
/s
	HttpSessionStore.lookup(Request) line: 198	
	BufferedResponseMapper.getSessionId() line: 59	
			ISessionStore sessionStore = Application.get().getSessionStore();		/ TODO
sessionStore	HttpSessionStore  (id=9478)	
	bindListeners	CopyOnWriteArraySet<E>  (id=10726)			[]
	unboundListeners	CopyOnWriteArraySet<E>  (id=10727)	[0]	RepeaterApplication  (id=10641)	

			IRequestCycle requestCycle = RequestCycle.get();
			Session session = sessionStore.lookup(requestCycle.getRequest());
/cb
	BufferedResponseMapper.hasBufferedResponse(Url) line: 71	
/=
	protected boolean hasBufferedResponse(Url url)	/ clock?0
	{
		String sessionId = getSessionId();
/cb
	BufferedResponseMapper.getCompatibilityScore(Request) line: 144	
		if (hasBufferedResponse(request.getUrl()))
/cb
	SystemMapper(CompoundRequestMapper).mapRequest(Request) line: 136	
		for (IRequestMapper mapper : mappers)
		{
			int score = mapper.getCompatibilityScore(request);		<-
			list.add(new MapperWithScore(mapper, score));
		}

		Collections.sort(list);
	RequestCycle.resolveRequestHandler() line: 189	
		return requestMapper.mapRequest(request);
/cb
	RequestCycle.processRequest() line: 219	
			IRequestHandler handler = resolveRequestHandler();
/cb
	RequestCycle.processRequestAndDetach() line: 293	
			result = processRequest();									<-
		}
		finally
		{
			detach();
/cb
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
		if (requestCycle.processRequestAndDetach())
/cb
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
				res = processRequestCycle(requestCycle, webResponse, httpServletRequest, httpServletResponse, chain);
/cb
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
		processRequest(request, response, chain);
/debug
/s
HttpSessionStore.lookup(Request) line: 198	
		String sessionId = getSessionId(request, false);
/s
HttpSessionStore.getSessionId(Request, boolean) line: 159	
		HttpSession httpSession = getHttpSession(request, false);
/s
	 * @return The HttpSession associated with this request or null if {@code create} is false and
	 *         the {@code request} has no valid session
	 */
HttpSessionStore.getHttpSession(Request, boolean) line: 95	
		HttpSession httpSession = getHttpSession(request, false);
/s
org.apache.wicket.session.HttpSessionStore.getHttpSession(org.apache.wicket.request.Request, boolean) line: 95	/ wicket method	, 
		return getHttpServletRequest(request).getSession(create);

/ intermezzo

//////////////////////////////////////////
/ Dit is inderdaad de manier om een session te create	, Request.getSession(true)	, 

request	ServletWebRequest  (id=9707)		/ wicket class	, 
getHttpServletRequest(request)=RequestFacade	/ tomcat class
 
/ Einde intermezzo

/s
org.apache.catalina.connector.RequestFacade.getSession(boolean) line: 895			/ tomcat method	,
            return request.getSession(create);
this	RequestFacade  (id=9783)					/ TODO Hadden we dat thuis ook	, 'n RequestFacade	? 
/s
org.apache.catalina.connector.Request.getSession(boolean) line: 2256	
        Session session = doGetSession(create);
/s
org.apache.catalina.connector.Request.doGetSession(boolean) line: 2879	
        // Create a new session if requested and the response is not committed
        if (!create) {
            return (null);
        }
/t
org.apache.wicket.session.HttpSessionStore.getSessionId(org.apache.wicket.request.Request, boolean) line: 175	
		HttpSession httpSession = getHttpSession(request, false);
null
		else if (create)
/n
		return id;
null
/t
org.apache.wicket.session.HttpSessionStore.lookup(org.apache.wicket.request.Request) line: 203	
		String sessionId = getSessionId(request, false);
/d
null
		return null;
/t
org.apache.wicket.core.request.mapper.BufferedResponseMapper.getSessionId() line: 59	
			Session session = sessionStore.lookup(requestCycle.getRequest());
/d
null
		return sessionId;
null
/t
BufferedResponseMapper.hasBufferedResponse(Url) line: 71	
		String sessionId = getSessionId();
/d
null
		return hasResponse;
false
/t
BufferedResponseMapper.getCompatibilityScore(Request) line: 144	
		if (hasBufferedResponse(request.getUrl()))
/n
			return 0;
/t
SystemMapper(CompoundRequestMapper).mapRequest(Request) line: 137	
		for (IRequestMapper mapper : mappers)
		{
			int score = mapper.getCompatibilityScore(request);
/d
0
/ TODO Soms vraagt om session	, die er niet is	, soms niet	, return een getal	,  

/c
/ even later	,
/s
SystemMapper(CompoundRequestMapper).mapRequest(Request) line: 150	
		for (IRequestMapper mapper : mappers)
		{
			int score = mapper.getCompatibilityScore(request);
			list.add(new MapperWithScore(mapper, score));
		}
		Collections.sort(list);
/d

		for (MapperWithScore mapperWithScore : list)
		{
			IRequestMapper mapper = mapperWithScore.getMapper();
MountedMapper [mountSegments=clock]
			IRequestHandler handler = mapper.mapRequest(request);	/ zoek ctrl bij deze handler	,
/s
MountedMapper(AbstractBookmarkableMapper).mapRequest(Request) line: 365	
			else if (info.getPageInfo().getPageId() != null && info.getComponentInfo() == null)
			{
				// if there is page instance information in the URL but no component and listener
				// interface then this is a hybrid URL - we need to try to reuse existing page
				// instance
				return processHybrid(info.getPageInfo(), pageClass, pageParameters, null);
/s
	/**
	 * Creates a {@code IRequestHandler} that processes a hybrid request. When the page identified
	 * by {@code pageInfo} was not available, the request should be treated as a bookmarkable
	 * request.
	 * 
MountedMapper(AbstractBookmarkableMapper).processHybrid(PageInfo, Class<IRequestablePage>, PageParameters, Integer) line: 261	
		if (provider.isNewPageInstance() && !getRecreateMountedPagesAfterExpiry())
/s
	/**
	 * The page instance is new only if there is no cached instance or the data stores doesn't have
	 * a page with that id with the same {@linkplain #pageClass}.
	 * 
PageProvider.isNewPageInstance() line: 211	
		boolean isNew = pageInstance == null;
/j
		if (isNew && pageId != null)	/ clock?0 , dus pageId==0	,
		{
			IRequestablePage storedPageInstance = getStoredPage(pageId);
/s
	/**
	 * Looks up a page by id from the {@link IPageStore}. <br/>
	 * If {@linkplain #pageClass} is specified then compares it against the stored instance class
	 * and returns the found instance only if they match.
	 * 
PageProvider.getStoredPage(int) line: 299	
		IRequestablePage storedPageInstance = getPageSource().getPageInstance(pageId);
/s
DefaultMapperContext.getPageInstance(int) line: 113	
		IManageablePage manageablePage = Session.get().getPageManager().getPage(pageId); <- Wat we lazen in manual: bij request voor page wordt session create	,
/s
	/**
	 * Returns session associated to current thread. Always returns a session during a request
	 * cycle, even though the session might be temporary
	 * 
Session.get() line: 169																		/ Wicket class
		Session session = ThreadContext.getSession();
null
		if (session != null)
/n
		else
		{
			return Application.get().fetchCreateAndSetSession(RequestCycle.get());
/s
RepeaterApplication(Application).fetchCreateAndSetSession(RequestCycle) line: 1711	
		Session session = getSessionStore().lookup(requestCycle.getRequest());
/s
HttpSessionStore.lookup(Request) line: 198										/ Wicket type	,	
		String sessionId = getSessionId(request, false);
/s
HttpSessionStore.getSessionId(Request, boolean) line: 159	
		HttpSession httpSession = getHttpSession(request, false);
/s
HttpSessionStore.getHttpSession(Request, boolean) line: 95	
		return getHttpServletRequest(request).getSession(create);	/ request is van Wicket, getHttpServletRequest(request) is van Tomcat	,
null
/t
HttpSessionStore.getSessionId(Request, boolean) line: 159	
		HttpSession httpSession = getHttpSession(request, false);
null
		if (httpSession != null)
/n
		else if (create)
/n
		return id;
null
/t
HttpSessionStore.lookup(Request) line: 199	
		String sessionId = getSessionId(request, false);
null
		return null;
/s
RepeaterApplication(Application).fetchCreateAndSetSession(RequestCycle) line: 1712	
		Session session = getSessionStore().lookup(requestCycle.getRequest());
null
		if (session == null)
/j
		{
			session = newSession(requestCycle.getRequest(), requestCycle.getResponse());	/ requestCycle.request	, requestCycle.activeResponse	,
/s
RepeaterApplication(WebApplication).newSession(Request, Response) line: 641	
		return new WebSession(request);
/s
WebSession.<init>(Request) line: 49	
		super(request);
/s
WebSession.<init>(Request) line: 49	
		super(request);
/s
WebSession(Session).<init>(Request) line: 225	

/t
RepeaterApplication(Application).fetchCreateAndSetSession(RequestCycle) line: 1715	
			session = newSession(requestCycle.getRequest(), requestCycle.getResponse());	/ TODO verband met Tomcat's sessions?
/d
			ThreadContext.setSession(session);
			internalGetPageManager().newSessionCreated();
/s
RepeaterApplication(Application).internalGetPageManager() line: 1543	
					pageManager = pageManagerProvider.get(getPageManagerContext());
/s
DefaultPageManagerProvider.get(IPageManagerContext) line: 56	
		IDataStore dataStore = newDataStore();											/ TODO Waarom new	?
/s
DefaultPageManagerProvider.newDataStore() line: 81	
		StoreSettings storeSettings = getStoreSettings();	/ Application.storeSettings
storeSettings	StoreSettings  (id=10987)	
	DEFAULT_ASYNCHRONOUS_QUEUE_CAPACITY	100	
	DEFAULT_CACHE_SIZE	0	
	DEFAULT_MAX_SIZE_PER_SESSION	Bytes  (id=10989)	
	asynchronousQueueCapacity	100	
	fileStoreFolder	null	
	inmemoryCacheSize	0	
	isAsynchronous	true	
	maxSizePerSession	Bytes  (id=10989)	

		Bytes maxSizePerSession = storeSettings.getMaxSizePerSession();
10M
		File fileStoreFolder = storeSettings.getFileStoreFolder();
/s
StoreSettings.getFileStoreFolder() line: 132	
		if (fileStoreFolder == null)
		{
			if (WebApplication.exists())
			{
				fileStoreFolder = (File) WebApplication.get().getServletContext()	/ org.apache.catalina.core.ApplicationContextFacade@1dee865c
					.getAttribute("javax.servlet.context.tempdir");
				return fileStoreFolder;
/home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28/work/Catalina/localhost/wicket-examples-step-by-step
/t
DefaultPageManagerProvider.newDataStore() line: 85	
		File fileStoreFolder = storeSettings.getFileStoreFolder();
/d
		return new DiskDataStore(application.getName(), fileStoreFolder, maxSizePerSession);
/t
DefaultPageManagerProvider.get(IPageManagerContext) line: 58	
		IDataStore dataStore = newDataStore();
/d
		StoreSettings storeSettings = getStoreSettings();

		if (dataStore.canBeAsynchronous())
/j
		{
			int capacity = storeSettings.getAsynchronousQueueCapacity();
100
			dataStore = new AsynchronousDataStore(dataStore, capacity);
/s
AsynchronousDataStore.<init>(IDataStore, int) line: 90	
		this.dataStore = dataStore;
		entries = new LinkedBlockingQueue<Entry>(capacity);
		entryMap = new ConcurrentHashMap<String, Entry>();

		PageSavingRunnable savingRunnable = new PageSavingRunnable(dataStore, entries, entryMap);

/ intermezzo

/ entries is queue waar de producer op put, en de consumer (asynchr. thread) van leest om ze in de datastore te set	, 
/ maar op een entries kun je niet zoeken, daarom is er ook een entryMap	, alle Entry's die op entries komen, komen ook in de entryMap	, en als de asynchr. thread een Entry van entries haalt (en hem in de data store set), wordt de Entry ook uit de entryMap gehaald	, 

/ Einde intermezzo

/ intermezzo

/ Waar wordt page naar disk write?

public class DiskDataStore implements IDataStore
	public void storeData(final String sessionId, final int id, final byte[] data)
			sessionEntry.savePage(id, data);
	protected static class SessionEntry implements Serializable
		public synchronized void savePage(int pageId, byte data[])
				FileChannel channel = getFileChannel(true);
						// write the content
						channel.write(ByteBuffer.wrap(data), window.getFilePartOffset());

/ Einde intermezzo

/ intermezzo

/ we hebbeen een DefaultPageStore op een AsynchronousDataStore op een DistDataStore	,

DefaultPageManager.class
	@Override
	public IPageManager get(IPageManagerContext pageManagerContext)
	{
		IDataStore dataStore = newDataStore();
			dataStore = new AsynchronousDataStore(dataStore, capacity);
		IPageStore pageStore = newPageStore(dataStore);
/s
		return new DefaultPageStore(pageSerializer, dataStore, inmemoryCacheSize);
/s 
		super(pageSerializer, dataStore, new SerializedPagesCache(cacheSize));

/ SerializedPagesCache is de 2nd level cache	,
/ de DefaultPageStore = page serializer + onderliggende datastore, waar het result van de page serializer in wordt write	,
/ dat result wordt ook in de 2nd level cache write	, 

DefaultPageStore.class
	public void storePage(final String sessionId, final IManageablePage page)
	{
		byte[] data = serializePage(page);
			int pageId = page.getPageId();
			pagesCache.storePage(sessionId, pageId,  (P) page);
			storePageData(sessionId, pageId, data);

/ Dit is de folder waarin de ser. pages worden write	, 
/home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28/work/Catalina/localhost/wicket-examples-step-by-step/RepeaterExamplesApplication-filestore


/ Einde intermezzo


/ intermezzo

public class AsynchronousDataStore implements IDataStore

	/**
	 * The queue where the entries which have to be saved are temporary stored
	 */
	private final BlockingQueue<Entry> entries;									/ queue for entries die de dataStore in moeten	,

	/**
	 * A map 'sessionId:::pageId' -> {@link Entry}. Used for fast retrieval of {@link Entry}s which
	 * are not yet stored by the wrapped {@link IDataStore}
	 */
	private final ConcurrentMap<String, Entry> entryMap;						/ bestaat NAAST dataStore	, = for tmp lookup	,  als nog niet in dataStore	,

	public void storeData(final String sessionId, final int id, final byte[] data)
	{
		Entry entry = new Entry(sessionId, id, data);
		String key = getKey(entry);
		entryMap.put(key, entry);

		try
		{
			boolean added = entries.offer(entry, OFFER_WAIT, TimeUnit.MILLISECONDS);	/ Dus entry is in queue om in dataStore te gaan	, en is in tmp lookup entries	,

			if (added == false)
			{
				log.debug("Storing synchronously page with id '{}' in session '{}'", id, sessionId);
				entryMap.remove(key);
				dataStore.storeData(sessionId, id, data);
			}

	private static class PageSavingRunnable implements Runnable
		@Override
		public void run()
		{
			while (!Thread.interrupted())
			{
				Entry entry = null;
				try
				{
					entry = entries.poll(POLL_WAIT, TimeUnit.MILLISECONDS);		/ haal entry van queue
				}
				catch (InterruptedException e)
				{
					Thread.currentThread().interrupt();
				}

				if (entry != null)
				{
					log.debug("Saving asynchronously: {}...", entry);
					dataStore.storeData(entry.sessionId, entry.pageId, entry.data);	/ stop in dataStore	, 
					entryMap.remove(getKey(entry));											/ haal uit tmp lookup	,
				}
			}
		}

/ Einde intermezzo

		pageSavingThread = new Thread(savingRunnable, "Wicket-PageSavingThread");
		pageSavingThread.setDaemon(true);
		pageSavingThread.start();
/t
DefaultPageManagerProvider.get(IPageManagerContext) line: 66	
			dataStore = new AsynchronousDataStore(dataStore, capacity);	/ 
dataStore	DiskDataStore  (id=8744)	
/d
		IPageStore pageStore = newPageStore(dataStore);
/s
DefaultPageStore.<init>(ISerializer, IDataStore, int) line: 55	
		super(pageSerializer, dataStore, new SerializedPagesCache(cacheSize));
/s
	static class SerializedPagesCache implements SecondLevelPageCache<String, Integer, SerializedPage>	/ 2nd level cache	,
DefaultPageStore$SerializedPagesCache.<init>(int) line: 317	
			this.maxSize = maxSize;
			cache = new ConcurrentLinkedDeque<>();
/t
DefaultPageStore.<init>(ISerializer, IDataStore, int) line: 55	
		super(pageSerializer, dataStore, new SerializedPagesCache(cacheSize));
/pd
/s
/**
 * An abstract {@link org.apache.wicket.pageStore.IPageStore} that uses
 * {@link org.apache.wicket.pageStore.SecondLevelPageCache} to cache the stored pages in memory
 *
public abstract class AbstractCachingPageStore<P> extends AbstractPageStore
{
	protected final SecondLevelPageCache<String, Integer, P> pagesCache;
/
DefaultPageStore(AbstractCachingPageStore<P>).<init>(ISerializer, IDataStore, SecondLevelPageCache<String,Integer,P>) line: 50	
		super(pageSerializer, dataStore);
		this.pagesCache = Args.notNull(pagesCache, "pagesCache");
/t
DefaultPageManagerProvider.get(IPageManagerContext) line: 67	
		IPageStore pageStore = newPageStore(dataStore);
/d
pageStore	DefaultPageStore  (id=11048)	
	dataStore	AsynchronousDataStore  (id=11037)	
	pagesCache	DefaultPageStore$SerializedPagesCache  (id=11054)	
	pageSerializer	JavaSerializer  (id=11046)	
		return new PageStoreManager(application.getName(), pageStore, pageManagerContext);
/t
RepeaterApplication(Application).fetchCreateAndSetSession(RequestCycle) line: 1716	
		if (session == null)
		{
			session = newSession(requestCycle.getRequest(), requestCycle.getResponse());
			ThreadContext.setSession(session);
			internalGetPageManager().newSessionCreated();
/pd
/s
geStoreManager(AbstractPageManager).newSessionCreated() line: 93	
		getRequestAdapter().newSessionCreated();
/s
PageStoreManager(AbstractPageManager).getRequestAdapter() line: 67	
		RequestAdapter adapter = (RequestAdapter)getContext().getRequestData();
null
		if (adapter == null)
		{
			adapter = newRequestAdapter(getContext());
/s
PageStoreManager.newRequestAdapter(IPageManagerContext) line: 412	
		return new PersistentRequestAdapter(context);
/s
/**
 * Request scoped helper class for {@link IPageManager}.
 * 
public abstract class RequestAdapter
/
PageStoreManager$PersistentRequestAdapter.<init>(PageStoreManager, IPageManagerContext) line: 339	
/t
PageStoreManager(AbstractPageManager).getRequestAdapter() line: 70	
			adapter = newRequestAdapter(getContext());
			getContext().setRequestData(adapter);	/ puts adapter in RequestCycle.get().metaData
/t
PageStoreManager(AbstractPageManager).newSessionCreated() line: 93	
		getRequestAdapter().newSessionCreated();
/pd
"org.apache.wicket.request.cycle.RequestCycle.get()"	 (pending)	
	metaData	MetaDataEntry<T>[1]  (id=11099)	
		[0]	MetaDataEntry<T>  (id=11102)	
			key	DefaultPageManagerContext$1  (id=11078)	
			object	PageStoreManager$PersistentRequestAdapter  (id=11088)	
/s
PageStoreManager$PersistentRequestAdapter.newSessionCreated() line: 387	
			// if the session is not temporary bind a session entry to it
			if (getSessionId() != null)
/s
PageStoreManager$PersistentRequestAdapter(RequestAdapter).getSessionId() line: 111	
		return context.getSessionId();
/s
DefaultPageManagerContext.getSessionId() line: 75	
		return Session.get().getId();
/s
	/**
	 * Gets the unique id for this session from the underlying SessionStore. May be
	 * <code>null</code> if a concrete session is not yet created.
	 * 
WebSession(Session).getId() line: 380	
		if (id == null)
		{
			updateId();
/s
WebSession(Session).updateId() line: 395	
		RequestCycle requestCycle = RequestCycle.get();
		if (requestCycle != null)
		{
			id = getSessionStore().getSessionId(requestCycle.getRequest(), false);
/s
WebSession(Session).getSessionStore() line: 784	
		if (sessionStore == null)
		{
			sessionStore = getApplication().getSessionStore();	/ is er al	,
this	RepeaterApplication  (id=10641)	
	sessionStore	HttpSessionStore  (id=9478)	
		bindListeners	CopyOnWriteArraySet<E>  (id=10726)	
		unboundListeners	CopyOnWriteArraySet<E>  (id=10727)	
			[0]	RepeaterApplication  (id=10641)	

		return sessionStore;
/t
WebSession(Session).updateId() line: 398	
			id = getSessionStore().getSessionId(requestCycle.getRequest(), false);
/pd
/s
HttpSessionStore.getSessionId(Request, boolean) line: 157	
		HttpSession httpSession = getHttpSession(request, false);
/s
HttpSessionStore.getHttpSession(Request, boolean) line: 95	
		return getHttpServletRequest(request).getSession(create);
/t
HttpSessionStore.getSessionId(Request, boolean) line: 157	
		HttpSession httpSession = getHttpSession(request, false);
null
		if (httpSession != null)
/n
		{
			id = httpSession.getId();
/n
		}
		else if (create)
/n
		{
			httpSession = getHttpSession(request, true);
/n
			id = httpSession.getId();
/n

		return id;
null
/t
WebSession(Session).getId() line: 385	
			updateId();
/d
			// we have one?
			if (id != null)
/n
			{
				dirty();
/n
			}
		}
		return id;
null
/t
PageStoreManager$PersistentRequestAdapter.newSessionCreated() line: 391	
			// if the session is not temporary bind a session entry to it
			if (getSessionId() != null)
/n
			{
				getSessionEntry(true);
/n
/t
RepeaterApplication(Application).fetchCreateAndSetSession(RequestCycle) line: 1717	
			internalGetPageManager().newSessionCreated();
/d
			sessionListeners.onCreated(session);
		return session;
session	WebSession  (id=10967)	
	id	null	
/t
DefaultMapperContext.getPageInstance(int) line: 113	
		IManageablePage manageablePage = Session.get().getPageManager().getPage(pageId);
/pd
/s
WebSession(Session).getPageManager() line: 896	
		IPageManager pageManager = Application.get().internalGetPageManager();	/ is er al	,
		return pageAccessSynchronizer.get().adapt(pageManager);
/t
DefaultMapperContext.getPageInstance(int) line: 113	
		IManageablePage manageablePage = Session.get().getPageManager().getPage(pageId);
/pd
/s
PageAccessSynchronizer$2.getPage(int) line: 246	
/=
	/**
	 * Wraps a page manager with this synchronizer
	 * 
	 * @param pagemanager
	 * @return wrapped page manager
	 */
	public IPageManager adapt(IPageManager pagemanager)
	{
		return new PageManagerDecorator(pagemanager)
		{
			@Override
			public IManageablePage getPage(int pageId)
			{
				IManageablePage page = null;
				try
				{
					lockPage(pageId);
					page = super.getPage(pageId);
/s
PageAccessSynchronizer$2(PageManagerDecorator).getPage(int) line: 50	
		return delegate.getPage(id);
/s
PageStoreManager(AbstractPageManager).getPage(int) line: 82	
		IManageablePage page = getRequestAdapter().getPage(id);
/s
PageStoreManager$PersistentRequestAdapter.getPage(int) line: 346	
			IManageablePage touchedPage = findPage(id);
/s
PageStoreManager$PersistentRequestAdapter(RequestAdapter).findPage(int) line: 121	
		for (IManageablePage page : touchedPages)									/ []
		return null;
/t
PageStoreManager$PersistentRequestAdapter.getPage(int) line: 353	
			IManageablePage touchedPage = findPage(id);
null
			// try to get session entry for this session
			SessionEntry entry = getSessionEntry(false);
/s
PageStoreManager$PersistentRequestAdapter.getSessionEntry(boolean) line: 372	
			String attributeName = getAttributeName();						/ wicket:persistentPageManagerData - RepeaterExamplesApplication
			SessionEntry entry = (SessionEntry)getSessionAttribute(attributeName);
/s
PageStoreManager$PersistentRequestAdapter(RequestAdapter).getSessionAttribute(String) line: 101	
		return context.getSessionAttribute(key);
/s
DefaultPageManagerContext.getSessionAttribute(String) line: 66	
		return Session.get().getAttribute(key);
/s
WebSession(Session).getAttribute(String) line: 732	
		if (!isTemporary())		/n want id==null
		else
		{
			if (temporarySessionAttributes != null)
/n
		return null;
/t
PageStoreManager$PersistentRequestAdapter.getSessionEntry(boolean) line: 374	
			SessionEntry entry = (SessionEntry)getSessionAttribute(attributeName);
/d
null
			if (entry == null && create)
/n
			{
				bind();
/n
				entry = new SessionEntry(applicationName, getSessionId());
/n
				setSessionAttribute(attributeName, entry);
/n
			}
			return entry;
null
/t
PageStoreManager$PersistentRequestAdapter.getPage(int) line: 361	
			// try to get session entry for this session
			SessionEntry entry = getSessionEntry(false);
/n
				return null;
/t
PageStoreManager(AbstractPageManager).getPage(int) line: 87	
		IManageablePage page = getRequestAdapter().getPage(id);
null
		return page;
/t
PageAccessSynchronizer$2.getPage(int) line: 252	
					page = super.getPage(pageId);
null
				return page;
/t
DefaultMapperContext.getPageInstance(int) line: 114	
		IManageablePage manageablePage = Session.get().getPageManager().getPage(pageId);
/d
null
		IRequestablePage requestablePage = null;
		...
		return requestablePage;
null
/t
PageProvider.getStoredPage(int) line: 300	
		IRequestablePage storedPageInstance = getPageSource().getPageInstance(pageId);
null
		return storedPageInstance;
/t
PageProvider.isNewPageInstance() line: 219	
		boolean isNew = pageInstance == null;
		if (isNew && pageId != null)
		{
			IRequestablePage storedPageInstance = getStoredPage(pageId);
null
		return isNew;
true
/t
MountedMapper(AbstractBookmarkableMapper).processHybrid(PageInfo, Class<IRequestablePage>, PageParameters, Integer) line: 261	
		if (provider.isNewPageInstance() && !getRecreateMountedPagesAfterExpiry())
/pd
(provider.isNewPageInstance()==true
/s
MountedMapper(AbstractBookmarkableMapper).getRecreateMountedPagesAfterExpiry() line: 286	
		return WebApplication.get().getPageSettings().getRecreateBookmarkablePagesAfterExpiry();
true
/t
MountedMapper(AbstractBookmarkableMapper).processHybrid(PageInfo, Class<IRequestablePage>, PageParameters, Integer) line: 271	
		if (provider.isNewPageInstance() && !getRecreateMountedPagesAfterExpiry())
/n
		else
		{
			/** 
			 * https://issues.apache.org/jira/browse/WICKET-5734
			 * */
			PageParameters constructionPageParameters = provider.hasPageInstance() ? 
/s
PageProvider.hasPageInstance() line: 392	
		if (pageInstance == null && pageId != null)
		{
			// attempt to load a stored page instance from the page store
			getStoredPage(pageId);	/ writes pageInstance	, 
		return pageInstance != null;
false
/t
MountedMapper(AbstractBookmarkableMapper).processHybrid(PageInfo, Class<IRequestablePage>, PageParameters, Integer) line: 271	
			PageParameters constructionPageParameters = provider.hasPageInstance() ? 
/n
				provider.getPageInstance().getPageParameters() : new PageParameters();

			if (PageParameters.equals(constructionPageParameters, pageParameters) == false)
/n
			return new RenderPageRequestHandler(provider);

/ We gaven http://localhost:9090/wicket-examples-step-by-step/repeater/clock?0	, maar is ?0 een goed idee	? 
/s
	MountedMapper(AbstractBookmarkableMapper).processHybrid(PageInfo, Class<IRequestablePage>, PageParameters, Integer) line: 271	
	MountedMapper(AbstractBookmarkableMapper).mapRequest(Request) line: 365	
	SystemMapper(CompoundRequestMapper).mapRequest(Request) line: 150	
	RequestCycle.resolveRequestHandler() line: 189	
	RequestCycle.processRequest() line: 219	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	


/ 7	. 

/ TOMCAT'S REQUEST.GETSESION WITH CREATE=TRUE

/ Request.getSession met create=true	,
/c
/ stack	,
	Request.getSession(boolean) line: 2256	
        Session session = doGetSession(create);
/cb
	RequestFacade.getSession(boolean) line: 895	
            return request.getSession(create);
/cb
	HttpSessionStore.getHttpSession(Request, boolean) line: 95	
		return getHttpServletRequest(request).getSession(create);
/cb
	HttpSessionStore.getSessionId(Request, boolean) line: 166	
		HttpSession httpSession = getHttpSession(request, false);
null
		if (httpSession != null)
		{
			id = httpSession.getId();
		}
		else if (create)
		{
			httpSession = getHttpSession(request, true);
/cb
	WebSession(Session).bind() line: 267												/ bind WebSession aan de echte session	,
		ISessionStore store = getSessionStore();
		Request request = RequestCycle.get().getRequest();
		if (store.lookup(request) == null)												/ is de session er al	?
		{
			// explicitly create a session
			id = store.getSessionId(request, true);
/cb
	ClockPage(Page).onBeforeRender() line: 808	
		// Make sure it is really empty
		renderedComponents = null;

		// rendering might remove or add stateful components, so clear flag to force reevaluation
		stateless = null;

		super.onBeforeRender();

		// If any of the components on page is not stateless, we need to bind the session
		// before we start rendering components, as then jsessionid won't be appended
		// for links rendered before first stateful component
		if (getSession().isTemporary() && !peekPageStateless())							
		{
			getSession().bind();
/ REAL SESSION CREATED													/ Dus in Page.onBeforeRender
/cb
	ClockPage(Component).internalBeforeRender() line: 949	
	ClockPage(Component).beforeRender() line: 1017	
	ClockPage(Component).internalPrepareForRender(boolean) line: 2215	
	ClockPage(Page).internalPrepareForRender(boolean) line: 242	
	ClockPage(Component).render() line: 2304	
	ClockPage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
	ApplicationFilterChain.internalDoFilter(ServletRequest, ServletResponse) line: 239	
	ApplicationFilterChain.doFilter(ServletRequest, ServletResponse) line: 206	
	StandardWrapperValve.invoke(Request, Response) line: 217	
	StandardContextValve.invoke(Request, Response) line: 106	
	NonLoginAuthenticator(AuthenticatorBase).invoke(Request, Response) line: 502	
	StandardHostValve.invoke(Request, Response) line: 142	
	ErrorReportValve.invoke(Request, Response) line: 79	
	AccessLogValve(AbstractAccessLogValve).invoke(Request, Response) line: 616	
	StandardEngineValve.invoke(Request, Response) line: 88	
	CoyoteAdapter.service(Request, Response) line: 518	
	Http11NioProcessor(AbstractHttp11Processor<S>).process(SocketWrapper<S>) line: 1091	
	Http11NioProtocol$Http11ConnectionHandler(AbstractProtocol$AbstractConnectionHandler<S,P>).process(SocketWrapper<S>, SocketStatus) line: 673	
	NioEndpoint$SocketProcessor.doRun() line: 1500	
	NioEndpoint$SocketProcessor.run() line: 1456	
	ThreadPoolExecutor(ThreadPoolExecutor).runWorker(ThreadPoolExecutor$Worker) line: 1145	
	ThreadPoolExecutor$Worker.run() line: 615	
	TaskThread$WrappingRunnable.run() line: 61	
	TaskThread(Thread).run() line: 745	
/ debug	,
/s
Request.getSession(boolean) line: 2256	
        Session session = doGetSession(create);
/s
Request.doGetSession(boolean) line: 2844	
        Context context = getContext();		/ StandardContext 

      // Return the current session if it exists and is valid
        if (session != null) {						/ this = Request	, als de session is created	, is dat this.session 
/n
            return (session);
/n
        }
       // Return the requested session if it exists and is valid
        Manager manager = context.getManager();
        if (manager == null) {
            return (null);      // Sessions are not supported
        }
        if (requestedSessionId != null) {					/ this = Request	, this.requestedSessionId is de session id	, die string	,
            try {
                session = manager.findSession(requestedSessionId); / StandardContext context.(StandardManager manager).sessions=ConcurrentHashMap
null

        // Create a new session if requested and the response is not committed
        if (!create) {
/n
        }
        // Attempt to reuse session id if one was submitted in a cookie
        // Do not reuse the session id if it is from a URL, to prevent possible
        // phishing attacks
        // Use the SSL session ID if one is present.
        if (("/".equals(context.getSessionCookiePath())
                && isRequestedSessionIdFromCookie()) || requestedSessionSSL ) {
/n
        } else {
            session = manager.createSession(null);
/s
        // Recycle or create a Session instance
        Session session = createEmptySession();
/s
StandardManager(ManagerBase).createEmptySession() line: 728	
        return (getNewSession());
/s
StandardManager(ManagerBase).getNewSession() line: 857	
        return new StandardSession(this);
/s
StandardSession.<init>(Manager) line: 124	
/t
StandardManager(ManagerBase).createSession(String) line: 700	
        // Recycle or create a Session instance
        Session session = createEmptySession();
/d
        // Initialize the properties of the new session and return it
        session.setNew(true);
        session.setValid(true);
        session.setCreationTime(System.currentTimeMillis());
        session.setMaxInactiveInterval(this.maxInactiveInterval);
        String id = sessionId;
        if (id == null) {
            id = generateSessionId(); 	/ 906BDD5934D0C3B85FCBF1CFBA0F6063
        }
        session.setId(id);
/s
StandardSession.setId(String) line: 360	
        setId(id, true);
/s
StandardSession.setId(String, boolean) line: 376	
        this.id = id;
        if (manager != null)
            manager.add(this); 				/ StandardSession heeft ook de manager, niet alleen StandardContext	, 
/s
StandardManager(ManagerBase).add(Session) line: 647	
/ TOMCAT REGISTERS SESSION
        sessions.put(session.getIdInternal(), session);
       int size = getActiveSessions(); 			/1
        if( size > maxActive ) {			/ 1>0
/j
            synchronized(maxActiveUpdateLock) {
                if( size > maxActive ) {
                    maxActive = size;	/ 1
/t
StandardManager(ManagerBase).createSession(String) line: 709	
        session.setId(id);
/d
        sessionCounter++;

        SessionTiming timing = new SessionTiming(session.getCreationTime(), 0);
        synchronized (sessionCreationTiming) {
            sessionCreationTiming.add(timing);
            sessionCreationTiming.poll();
        }
        return (session);
/t
Request.doGetSession(boolean) line: 2906	
            session = manager.createSession(null);				/ session created, nu cookie maken	, die de response header in gaat	,
/d
        // Creating a new session cookie based on that session
        if (session != null
                && context.getServletContext()
                        .getEffectiveSessionTrackingModes()
                        .contains(SessionTrackingMode.COOKIE)) {
            Cookie cookie =
                ApplicationSessionCookieConfig.createSessionCookie(
                        context, session.getIdInternal(), isSecure());
/s
ApplicationSessionCookieConfig.createSessionCookie(Context, String, boolean) line: 206	
        // NOTE: The priority order for session cookie configuration is:
        //       1. Context level configuration
        //       2. Values from SessionCookieConfig
        //       3. Defaults

        Cookie cookie = new Cookie(
                SessionConfig.getSessionCookieName(context), sessionId);

        if (contextPath == null || contextPath.length() == 0) {
            contextPath = context.getEncodedPath();					/ /wicket-examples-step-by-step

        if (context.getSessionCookiePathUsesTrailingSlash()) {
            // Handle special case of ROOT context where cookies require a path of
            // '/' but the servlet spec uses an empty string
            // Also ensure the cookies for a context with a path of /foo don't get
            // sent for requests with a path of /foobar
            if (!contextPath.endsWith("/")) {
                contextPath = contextPath + "/";			/ /wicket-examples-step-by-step/

        cookie.setPath(contextPath);
        return cookie;
/t
Request.doGetSession(boolean) line: 2910	

            Cookie cookie =
                ApplicationSessionCookieConfig.createSessionCookie(
                        context, session.getIdInternal(), isSecure());
/d
cookie	Cookie  (id=10834)	
	serialVersionUID	1	
	validation	NetscapeValidator  (id=10838)	
	comment	null	
	domain	null	
	httpOnly	true	
	maxAge	-1	
	name	"JSESSIONID" (id=10832)	
	path	"/wicket-examples-step-by-step/" (id=10837)	
	secure	false	
	value	"906BDD5934D0C3B85FCBF1CFBA0F6063" (id=10824)	
	version	0	

            response.addSessionCookieInternal(cookie);					/ cookie gaat reponse header in	,
/s
Response.addSessionCookieInternal(Cookie) line: 942	
        String name = cookie.getName();
        final String headername = "Set-Cookie";
        final String startsWith = name + "=";
        String header = generateCookieString(cookie);
        boolean set = false;
        MimeHeaders headers = getCoyoteResponse().getMimeHeaders();
        int n = headers.size();
0
        for (int i = 0; i < n; i++) {
/n
            if (headers.getName(i).toString().equals(headername)) {
                if (headers.getValue(i).toString().startsWith(startsWith)) {
                    headers.getValue(i).setString(header);
                    set = true;
                }
            }
        }
        if (!set) {
            addHeader(headername, header);
headername	"Set-Cookie" (id=10847)	
header	"JSESSIONID=906BDD5934D0C3B85FCBF1CFBA0F6063; Path=/wicket-examples-step-by-step/; HttpOnly" (id=10849)	
/s
Response.addHeader(String, String, Charset) line: 1030	
        getCoyoteResponse().addHeader(name, value, charset);
/s
Response.addHeader(String, String, Charset) line: 305	
        MessageBytes mb = headers.addValue(name);
        mb.setString(value);
=== MimeHeaders ===
Set-Cookie = JSESSIONID=906BDD5934D0C3B85FCBF1CFBA0F6063; Path=/wicket-examples-step-by-step/; HttpOnly
/t
Request.doGetSession(boolean) line: 2913	
            response.addSessionCookieInternal(cookie);
/d
        return session;
/t
Request.getSession(boolean) line: 2257	
       Session session = doGetSession(create);
/d
        return session.getSession();					/ facade	,
/t
RequestFacade.getSession(boolean) line: 895	
            return request.getSession(create);
/t
HttpSessionStore.getHttpSession(Request, boolean) line: 95							/ Wicket type	,
		return getHttpServletRequest(request).getSession(create);
/d
/t
HttpSessionStore.getSessionId(Request, boolean) line: 167	
		else if (create)
		{
			httpSession = getHttpSession(request, true); 	/ facade		
/d
httpSession	StandardSessionFacade  (id=10778)	
	session	StandardSession  (id=10779)	

			id = httpSession.getId();
		return id;
/t
WebSession(Session).bind() line: 269	
		if (store.lookup(request) == null)
		{
			// explicitly create a session
			id = store.getSessionId(request, true);
/d
			// bind it
			store.bind(request, this);	/ request= wicket's ServletWebRequest	,
/s
HttpSessionStore.bind(Request, Session) line: 104	

/ intermezzo

request	ServletWebRequest  (id=12451)	
	httpServletRequest	RequestFacade  (id=10485)	
		request	Request  (id=10472)	
			session	StandardSession  (id=12426)	

/ Dit is ook de manier waarop Wicket steeds de HttpSession gets, haalt 'm uit de request, Wicket registers 'm niet ergens, want dat is hij al:
		HttpSession httpSession = getHttpSession(request, false);


/ Einde intermezzo


		if (getAttribute(request, Session.SESSION_ATTRIBUTE_NAME) != newSession)
/s
HttpSessionStore.getAttribute(Request, String) line: 261	
		HttpSession httpSession = getHttpSession(request, false);	/ tot welke session behoort dit request	?
/s
HttpSessionStore.getHttpSession(Request, boolean) line: 95	
		return getHttpServletRequest(request).getSession(create);
/s
RequestFacade.getSession(boolean) line: 895	
            return request.getSession(create);
/s
Request.getSession(boolean) line: 2256	
        Session session = doGetSession(create);	/ create=false
/s
Request.doGetSession(boolean) line: 2845	
        if (session != null) {
            return (session);
        }
/t
HttpSessionStore.getAttribute(Request, String) line: 264	
		HttpSession httpSession = getHttpSession(request, false);	 / facade
/d
		if (httpSession != null)
		{
			return (Serializable)httpSession.getAttribute(getSessionAttributePrefix(request) + name);

/ Intermezzo

/ queries HttpSession.attributes

/ Einde Intermezzo
/s
	/**
	 * Gets the prefix for storing variables in the actual session (typically {@link HttpSession})
	 * for this application instance.
	 * 
HttpSessionStore.getSessionAttributePrefix(Request) line: 247	
		String sessionAttributePrefix = MarkupParser.WICKET;
wicket
		if (request instanceof WebRequest)
		{
			sessionAttributePrefix = WebApplication.get().getSessionAttributePrefix( (WebRequest)request, null);
/s
	/**
	 * Gets the prefix for storing variables in the actual session (typically {@link HttpSession}
	 * for this application instance.
	 * 
	 * @param request
	 *            the request
	 * @param filterName
	 *            If null, than it defaults to the WicketFilter filter name. However according to
	 *            the ServletSpec the Filter is not guaranteed to be initialized e.g. when
	 *            WicketSessionFilter gets initialized. Thus, though you (and WicketSessionFilter)
	 *            can provide a filter name, you must make sure it is the same as WicketFilter will
	 *            provide once initialized.
	 * 
RepeaterApplication(WebApplication).getSessionAttributePrefix(WebRequest, String) line: 277	
		if (sessionAttributePrefix == null)
/j
		{
			if (filterName == null)
/j
			{
				// According to the ServletSpec, the filter might not yet been initialized
				filterName = getWicketFilter().getFilterConfig().getFilterName();
			}
			String namespace = getMapperContext().getNamespace();
			sessionAttributePrefix = namespace + ':' + filterName + ':';	/ wicket:RepeaterExamplesApplication:
		}

		// Namespacing for session attributes is provided by
		// adding the servlet path
		return sessionAttributePrefix;
/t
HttpSessionStore.getSessionAttributePrefix(Request) line: 251	
			sessionAttributePrefix = WebApplication.get().getSessionAttributePrefix(
				(WebRequest)request, null);
/d
		}
		return sessionAttributePrefix;
/t
HttpSessionStore.getAttribute(Request, String) line: 264	
			return (Serializable)httpSession.getAttribute(getSessionAttributePrefix(request) + name);
/pd
/s
StandardSessionFacade.getAttribute(String) line: 108	
        return session.getAttribute(name); / name	"wicket:RepeaterExamplesApplication:session" (id=13195)	
/s
StandardSession.getAttribute(String) line: 1196	
        return (attributes.get(name));
/t
HttpSessionStore.bind(Request, Session) line: 107	
		if (getAttribute(request, Session.SESSION_ATTRIBUTE_NAME) != newSession)
/n
null != WebSession
			// call template method
			onBind(request, newSession);	/ NIETS
			for (BindListener listener : getBindListeners())	/ GEEN

			HttpSession httpSession = getHttpSession(request, false);	/ zoals altijd	, 
			if (httpSession != null)
			{
				// register an unbinding listener for cleaning up
				String applicationKey = Application.get().getName();
				httpSession.setAttribute("Wicket:SessionUnbindingListener-" + applicationKey, new SessionBindingListener(applicationKey, newSession));
				// register the session object itself
				setAttribute(request, Session.SESSION_ATTRIBUTE_NAME, newSession);

getHttpSession(request, false)
--- of	,
request	ServletWebRequest  (id=12451)	
	httpServletRequest	RequestFacade  (id=10485)	
		request	Request  (id=10472)	
---
			session	StandardSession  (id=12426)	
				attributes	ConcurrentHashMap<K,V>  (id=12433)	
					[0]	ConcurrentHashMap$WriteThroughEntry  (id=13214)	
						key	"Wicket:SessionUnbindingListener-RepeaterExamplesApplication" (id=13210)	
						value	HttpSessionStore$SessionBindingListener  (id=13211)	
					[1]	ConcurrentHashMap$WriteThroughEntry  (id=13215)	
						key	"wicket:RepeaterExamplesApplication:session" (id=13216)	
						value	WebSession  (id=12406)	
/ STORE WICKET SESSION IN TOMCAT SESSION
/ we store Wicket's WebSession in de echte Tomcat's session	,
/t
WebSession(Session).bind() line: 271	
			// explicitly create a session
			id = store.getSessionId(request, true);
			// bind it
			store.bind(request, this);
/d
/ Dus store Wicket's WebSession in de echte Tomcat's session	, 
/t
ClockPage(Page).onBeforeRender() line: 810	
			getSession().bind();
/d

/ 7	. 

/ Waarom doet Wicket een redirect	, want 
/c
/ HIER HIER HIER










































/ Einde SERIALIZE WICKET




/ REPEATINGVIEW AND CHILDREN IN WICKETPATH STACK RENDERING

/ 7	

public class WebMarkupContainer1Page extends WebPage {
		RepeatingView repeatingView=new RepeatingView("x");
		add(repeatingView);
		for(X1 x1:list){
			String id=repeatingView.newChildId();
			WebMarkupContainer webMarkupContainer=new WebMarkupContainer(id);
			repeatingView.add(webMarkupContainer);
			AjaxLink<Void>link=new AjaxLink<Void>("link") {


<script type="text/javascript">
/*<![CDATA[*/
Wicket.Event.add(window, "domready", function(event) { 
	Wicket.Ajax.ajax({"u":"./webmarkupcontainer1?31-3.IBehaviorListener.0-x-1-link","c":"link144","e":"click"});;
	Wicket.Ajax.ajax({"u":"./webmarkupcontainer1?31-3.IBehaviorListener.0-x-2-link","c":"link145","e":"click"});;
	Wicket.Event.publish(Wicket.Event.Topic.AJAX_HANDLERS_BOUND);
;});
/*]]>*/
</script>

<ul>
	<li wicket:id="x">
		<a wicket:id="link" id="link144" href="javascript:;">
			<span wicket:id="label">Foo,7</span>
		</a>
	</li><li wicket:id="x">
		<a wicket:id="link" id="link145" href="javascript:;">
			<span wicket:id="label">Bar,13</span>
		</a>
	</li>
</ul>

/ 7	. 

/ we geven	,
http://localhost:9090/wicket-examples-step-by-step/repeater/webmarkupcontainer1

/ wanneer komt wicket in ctor page	? Dus wanneer gaat hij de page create	?

/s
/ stack
	WebMarkupContainer1Page.<init>() line: 27	
	DefaultPageFactory.newPage(Constructor<C>, PageParameters) line: 175	
	DefaultPageFactory.newPage(Class<C>) line: 67	
	DefaultMapperContext.newPageInstance(Class<IRequestablePage>, PageParameters) line: 102	
	PageProvider.resolvePageInstance(Integer, Class<IRequestablePage>, PageParameters, Integer) line: 271	
	PageProvider.getPageInstance() line: 169	
	WebPageRenderer(PageRenderer).getPage() line: 78	
	WebPageRenderer.isPageStateless() line: 287	
	WebPageRenderer.shouldRenderPageAndWriteResponse(RequestCycle, Url, Url) line: 329	
	WebPageRenderer.respond(RequestCycle) line: 193	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
			IRequestHandler handler = resolveRequestHandler();
				execute(handler);
/cb
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/debug	, 
/s
		RepeatingView repeatingView=new RepeatingView("x");
		add(repeatingView);
		for(X1 x1:list){
			String id=repeatingView.newChildId();
			WebMarkupContainer webMarkupContainer=new WebMarkupContainer(id);
			repeatingView.add(webMarkupContainer);
			AjaxLink<Void>link=new AjaxLink<Void>("link") {
				@Override
				public void onClick(AjaxRequestTarget target) {
					WebMarkupContainer1Page.this.get("result").setDefaultModelObject(this.getMarkupId());
					target.add(WebMarkupContainer1Page.this.get("result"));
				}
			};
			webMarkupContainer.add(link);
			Label label=new Label("label",x1.getName()+","+x1.getAge());
			link.add(label);
		}
this	WebMarkupContainer1Page  (id=10396)	
	data	null	
	id	null	
	children	ArrayList<E>  (id=10429)	
		[0]	Label  (id=10397)	
		[1]	RepeatingView  (id=10417)	
			data	null	
			id	"x" (id=10426)	
			childIdCounter	2	
			children	ArrayList<E>  (id=10427)	
				[0]	WebMarkupContainer  (id=10422)	
					data	null	
					id	"1" (id=10420)	
					children	WebMarkupContainer1Page$1  (id=10438)	
						data	null	
						id	"link" (id=10441)	
						children	Label  (id=10440)	
							data	Model<T>  (id=10448)	
								object	"Foo,7" (id=10452)	
							id	"label" (id=10449)	
				[1]	WebMarkupContainer  (id=10435)		/ net zo	,

/ dus we zien wicket path	: x:1:link:label	,
/ en x:2:link:label

/c
/ stack	,
	AjaxLink$1(AjaxEventBehavior).renderHead(Component, IHeaderResponse) line: 94	
			CharSequence js = getCallbackScript(component); / Wicket.Ajax.ajax({"u":"./webmarkupcontainer1?34-1.IBehaviorListener.0-x-1-link","c":"link14d","e":"click"}); / we zien wicket path x:1:link	,
															/ Wicket.Ajax.ajax({"u":"./webmarkupcontainer1?34-1.IBehaviorListener.0-x-2-link","c":"link14d","e":"click"}); / we zien wicket path x:2:link	,
			response.render(OnDomReadyHeaderItem.forScript(js.toString()));
/cb
	WebMarkupContainer1Page$1(Component).internalRenderHead(HtmlHeaderContainer) line: 2727	
			// Then ask all behaviors
			for (Behavior behavior : getBehaviors())
			{
				if (isBehaviorAccepted(behavior))
				{
					if (response.wasRendered(behavior) == false)
					{
						behavior.renderHead(this, response);
/cb
	ChildFirstHeaderRenderStrategy$1.component(Component, IVisit<Void>) line: 85	
			new DeepChildFirstVisitor()
			{
				@Override
				public void component(final Component component, final IVisit<Void> visit)
				{
					if (component != rootComponent)
					{
						component.internalRenderHead(headerContainer);									<-
/cb
	ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component, Visit<Void>) line: 96	
		// visit "this"
		component(rootComponent, visit);	/ rootComponent [AjaxLink [Component id = link]]
/cb
	ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component, Visit<Void>) line: 87	
	ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component, Visit<Void>) line: 87	
	ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component, Visit<Void>) line: 87	
	ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component) line: 51	
	ChildFirstHeaderRenderStrategy.renderChildHeaders(HtmlHeaderContainer, Component) line: 78	
	ChildFirstHeaderRenderStrategy.renderHeader(HtmlHeaderContainer, HtmlHeaderContainer$HeaderStreamState, Component) line: 57	
	HtmlHeaderContainer.onComponentTagBody(MarkupStream, ComponentTag) line: 171	
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
	HtmlHeaderContainer(Component).internalRenderComponent() line: 2565	
	HtmlHeaderContainer(MarkupContainer).onRender() line: 1698	
	HtmlHeaderContainer(Component).internalRender() line: 2380	
	HtmlHeaderContainer(Component).render() line: 2308											<- straks hier repeating view	,
	WebMarkupContainer1Page(MarkupContainer).renderNext(MarkupStream) line: 1524	
	WebMarkupContainer1Page(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	WebMarkupContainer1Page(Page).onRender() line: 879	
	WebMarkupContainer1Page(WebPage).onRender() line: 141	
	WebMarkupContainer1Page(Component).internalRender() line: 2380	
	WebMarkupContainer1Page(Component).render() line: 2308	
	WebMarkupContainer1Page(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/ debug	,
AjaxLink$1(AjaxEventBehavior).renderHead(Component, IHeaderResponse) line: 96	
			CharSequence js = getCallbackScript(component);
/d
			response.render(OnDomReadyHeaderItem.forScript(js.toString()));
/s
ResourceAggregator.render(HeaderItem) line: 262	
		item = getItemToBeRendered(item);
		if (item instanceof OnDomReadyHeaderItem || item instanceof OnEventHeaderItem)
		{
			renderDependencies(item, new LinkedHashSet<HeaderItem>());
			domReadyItemsToBeRendered.add(item);
item	OnDomReadyHeaderItem  (id=10552)	
	javaScript	"Wicket.Ajax.ajax({"u":"./webmarkupcontainer1?34-1.IBehaviorListener.0-x-1-link","c":"link14d","e":"click"});" (id=10551)	
					"Wicket.Ajax.ajax({"u":"./webmarkupcontainer1?34-1.IBehaviorListener.0-x-2-link","c":"link14d","e":"click"});" (id=10551)	

/c

/ render body	,

/s
/ stack	,
	RepeatingView(AbstractRepeater).onRender() line: 92	
	RepeatingView(Component).internalRender() line: 2380	
		IMarkupFragment markup = getMarkup();
<li wicket:id="x">
		<a wicket:id="link">
			<span wicket:id="label"></span>
		</a>
	</li>
				onRender();
/cb
	RepeatingView(Component).render() line: 2308	
			// Do the render
			internalRender();
/cb
	WebMarkupContainer1Page(MarkupContainer).renderNext(MarkupStream) line: 1524	
			// Get element as tag
			final ComponentTag tag = (ComponentTag)element;						/ <li wicket:id="x">
			// Get component id
			final String id = tag.getId();
			// Get the component for the id from the given container
			Component component = get(id);										/ [RepeatingView [Component id = x]]
				component.render();
/cb
	WebMarkupContainer1Page(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
		while (markupStream.hasMore())
		{
			// Render the markup element
			boolean rawMarkup = renderNext(markupStream);
/cb
	WebMarkupContainer1Page(Page).onRender() line: 879	
	WebMarkupContainer1Page(WebPage).onRender() line: 141	
	WebMarkupContainer1Page(Component).internalRender() line: 2380	
	WebMarkupContainer1Page(Component).render() line: 2308	
	WebMarkupContainer1Page(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/ debug	,
/s
RepeatingView(AbstractRepeater).onRender() line: 92	
		Iterator<? extends Component> it = renderIterator();
		while (it.hasNext())
		{
			Component child = it.next();		/ [WebMarkupContainer [Component id = 1]]
			renderChild(child);															/ een repeater renders alleen zijn children	, niet zichzelf	,
/s
RepeatingView(AbstractRepeater).renderChild(Component) line: 115	
		child.render();
/s
WebMarkupContainer(Component).render() line: 2308	
			// Do the render
			internalRender();
/s
WebMarkupContainer(Component).internalRender() line: 2345		/ this [WebMarkupContainer [Component id = 1]] child RepeatingView	,
		// Make sure there is a markup available for the Component
		IMarkupFragment markup = getMarkup();
<li wicket:id="x">
		<a wicket:id="link">
			<span wicket:id="label"></span>
		</a>
	</li>
				onRender();
/s
WebMarkupContainer(MarkupContainer).onRender() line: 1698	
		internalRenderComponent();
/s
WebMarkupContainer(Component).internalRenderComponent() line: 2508		/ this [WebMarkupContainer [Component id = 1]]
		final IMarkupFragment markup = getMarkup();
<li wicket:id="x">
		<a wicket:id="link">
			<span wicket:id="label"></span>
		</a>
	</li>

		final MarkupStream markupStream = new MarkupStream(markup);

		// Get mutable copy of next tag
		final ComponentTag openTag = markupStream.getTag();
		final ComponentTag tag = openTag.mutable();

		// Call any tag handler
		onComponentTag(tag);			/ <li wicket:id="x">
				renderComponentTag(tag);													
<ul>
	<li wicket:id="x">			<-

			markupStream.next();
				getMarkupSourcingStrategy().onComponentTagBody(this, markupStream, tag);
/s
DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
		component.onComponentTagBody(markupStream, openTag);					/ component [WebMarkupContainer [Component id = 1]]
/s
WebMarkupContainer(MarkupContainer).onComponentTagBody(MarkupStream, ComponentTag) line: 1657	
		renderComponentTagBody(markupStream, openTag);
/s
WebMarkupContainer(MarkupContainer).renderComponentTagBody(MarkupStream, ComponentTag) line: 1713	
			renderAll(markupStream, openTag);
/s
WebMarkupContainer(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1746	
		while (markupStream.hasMore())
		{
			// Remember where we are
			final int index = markupStream.getCurrentIndex();
			// Render the markup element
			boolean rawMarkup = renderNext(markupStream);
/s
WebMarkupContainer(MarkupContainer).renderNext(MarkupStream) line: 1495	
		// Get the current markup element
		final MarkupElement element = markupStream.get();	/ <a wicket:id="link">

			// Get element as tag
			final ComponentTag tag = (ComponentTag)element;

			// Get component id
			final String id = tag.getId();

			// Get the component for the id from the given container
			Component component = get(id);								/ [AjaxLink [Component id = link]]
			{
				component.render();
/s
WebMarkupContainer1Page$1(Component).render() line: 2296	
			// Do the render
			internalRender();
/s
WebMarkupContainer1Page$1(Component).internalRender() line: 2345	
		IMarkupFragment markup = getMarkup();
<a wicket:id="link">
			<span wicket:id="label"></span>
		</a>
				onRender();
/s
WebMarkupContainer1Page$1(MarkupContainer).onRender() line: 1698	
		internalRenderComponent();
/s
WebMarkupContainer1Page$1(Component).internalRenderComponent() line: 2508	
		final IMarkupFragment markup = getMarkup();
<a wicket:id="link">
			<span wicket:id="label"></span>
		</a>

		final MarkupStream markupStream = new MarkupStream(markup);

		// Get mutable copy of next tag
		final ComponentTag openTag = markupStream.getTag();
		final ComponentTag tag = openTag.mutable();

		// Call any tag handler
		onComponentTag(tag);			/ <a wicket:id="link" id="link14d" href="javascript:;">

				renderComponentTag(tag);
<ul>
	<li wicket:id="x">
		<a wicket:id="link" id="link14d" href="javascript:;">

			}
			markupStream.next();

				getMarkupSourcingStrategy().onComponentTagBody(this, markupStream, tag);
/s
DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
		component.onComponentTagBody(markupStream, openTag);
/s
WebMarkupContainer1Page$1(AbstractLink).onComponentTagBody(MarkupStream, ComponentTag) line: 72	
		// Get a copy of the body model from the getBody() method. This method could be overridden.
		IModel<?> tmpBodyModel = getBody();
null
			// Render the body of the link
			super.onComponentTagBody(markupStream, openTag);
/s
WebMarkupContainer1Page$1(MarkupContainer).onComponentTagBody(MarkupStream, ComponentTag) line: 1657	
		renderComponentTagBody(markupStream, openTag);
/s
WebMarkupContainer1Page$1(MarkupContainer).renderComponentTagBody(MarkupStream, ComponentTag) line: 1734	
			renderAll(markupStream, openTag);
/s
WebMarkupContainer1Page$1(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1746	
		while (markupStream.hasMore())
		{
			// Render the markup element
			boolean rawMarkup = renderNext(markupStream);
/s
WebMarkupContainer1Page$1(MarkupContainer).renderNext(MarkupStream) line: 1498	
		// Get the current markup element
		final MarkupElement element = markupStream.get();		/ <span wicket:id="label">
			// Get element as tag
			final ComponentTag tag = (ComponentTag)element;

			// Get component id
			final String id = tag.getId();

			// Get the component for the id from the given container
			Component component = get(id);							/ [Component id = label]
				component.render();
/s
			// Do the render
			internalRender();
/s
Label(Component).internalRender() line: 2345	
		IMarkupFragment markup = getMarkup();		/ <span wicket:id="label"></span>
				onRender();
/s
Label(WebComponent).onRender() line: 60	
		internalRenderComponent();
/s
Label(Component).internalRenderComponent() line: 2558	
		final IMarkupFragment markup = getMarkup();		/ <span wicket:id="label"></span>
		onComponentTag(tag);		/ <span wicket:id="label">
				renderComponentTag(tag);
<ul>
	<li wicket:id="x">
		<a wicket:id="link" id="link14d" href="javascript:;">
			<span wicket:id="label">Label(Component).internalRenderComponent() line: 2508	

			markupStream.next();
				getMarkupSourcingStrategy().onComponentTagBody(this, markupStream, tag);
/ TODO Afmaken	,

/ 7	. 

public class Repeating2Page extends WebPage
	public Repeating2Page()
	{
		RepeatingView repeating = new RepeatingView("view");
		add(repeating);

		repeating.add(new AjaxLink<Void>("1"){
			@Override
			public void onClick(AjaxRequestTarget target) {
				// TODO Auto-generated method stub
				
			}
		});
		repeating.add(new AjaxLink<Void>("2"){
			@Override
			public void onClick(AjaxRequestTarget target) {
				// TODO Auto-generated method stub
				
			}
		});
		repeating.add(new Label("3",new Model<String>("foo")));
		repeating.add(new Label("4",new Model<String>("bar")));
	}

$ vi Repeating2Page.html

	<div wicket:id="view">
	</div>

/ we zien in HTML

<script type="text/javascript">
/*<![CDATA[*/
Wicket.Event.add(window, "domready", function(event) { 
	Wicket.Ajax.ajax({"u":"./repeating2?0-1.IBehaviorListener.0-view-1","c":"id11","e":"click"});;
	Wicket.Ajax.ajax({"u":"./repeating2?0-1.IBehaviorListener.0-view-2","c":"id22","e":"click"});;
	Wicket.Event.publish(Wicket.Event.Topic.AJAX_HANDLERS_BOUND);
;});
/*]]>*/
</script>

<body>
	<div wicket:id="view" id="id11">
	</div>
	<div wicket:id="view" id="id22">
	</div>
	<div wicket:id="view">foo</div>
	<div wicket:id="view">bar</div>
</body>

/ we zien op het scherm
foo
bar

/ we hebben voor de links de verkeerde markup gegeven aan de RepeatingView	,

/ REPEATINGVIEW AND CHILDREN IN WICKETPATH BUT ONLY REPEATINGVIEW MARKUP IN HTML BECAUSE YOU WANT TO REPEAT THIS STACK RENDERING
/ we zien dat de children van de repeatingview het template van de repeatingview render, en dus zien we niet hun eigen wicket:id	, 
/ dat ze de markup van de repeater render is logisch, want deze wil je juist repeat	, 
/ maar we zien dat in de link naar de behavior wel de wicket path heeft: view:1 is de wicket path van de link	,  

DOM in server						HTML
x
	1								x
		link						link
			label					label
	2								x
		link						link
			label					label

/ 7	. 

/ totale stacktrace	, 

/ stack	,
/s
	Label(Component).internalRenderComponent() line: 2508	

	Label(WebComponent).onRender() line: 60	
	Label(Component).internalRender() line: 2380	
	Label(Component).render() line: 2308	

	WebMarkupContainer1Page$1(MarkupContainer).renderNext(MarkupStream) line: 1524	
	WebMarkupContainer1Page$1(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	WebMarkupContainer1Page$1(MarkupContainer).renderComponentTagBody(MarkupStream, ComponentTag) line: 1734	
	WebMarkupContainer1Page$1(MarkupContainer).onComponentTagBody(MarkupStream, ComponentTag) line: 1657	
	WebMarkupContainer1Page$1(AbstractLink).onComponentTagBody(MarkupStream, ComponentTag) line: 82	
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
	WebMarkupContainer1Page$1(Component).internalRenderComponent() line: 2565	

	WebMarkupContainer1Page$1(MarkupContainer).onRender() line: 1698	
	WebMarkupContainer1Page$1(Component).internalRender() line: 2380	
	WebMarkupContainer1Page$1(Component).render() line: 2308	

	WebMarkupContainer(MarkupContainer).renderNext(MarkupStream) line: 1524	
	WebMarkupContainer(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	WebMarkupContainer(MarkupContainer).renderComponentTagBody(MarkupStream, ComponentTag) line: 1734	
	WebMarkupContainer(MarkupContainer).onComponentTagBody(MarkupStream, ComponentTag) line: 1657	
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
	WebMarkupContainer(Component).internalRenderComponent() line: 2565					/ renderComponentTag	, onComponentTagBody	

	WebMarkupContainer(MarkupContainer).onRender() line: 1698	
	WebMarkupContainer(Component).internalRender() line: 2380	
	WebMarkupContainer(Component).render() line: 2308	

	RepeatingView(AbstractRepeater).renderChild(Component) line: 115	/ NIET internalRenderComponent, die de tag renders, en daarna de tag body 	

	RepeatingView(AbstractRepeater).onRender() line: 102	
	RepeatingView(Component).internalRender() line: 2380	
	RepeatingView(Component).render() line: 2308	

	WebMarkupContainer1Page(MarkupContainer).renderNext(MarkupStream) line: 1524				/ tag's wicket:id -> finds component -> render
	WebMarkupContainer1Page(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	WebMarkupContainer1Page(Page).onRender() line: 879				/ NIET internalRenderComponent, eig. meteen onComponentTagBody	,

	WebMarkupContainer1Page(WebPage).onRender() line: 141	
	WebMarkupContainer1Page(Component).internalRender() line: 2380	
	WebMarkupContainer1Page(Component).render() line: 2308	

	WebMarkupContainer1Page(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ dus normaal .onComponentTagBody	, die de tag renders	, en daarna de tag body	renders	, 
/ behalve Page: .onRender	, die eig. alleen de tag body renders	,  al is er helemaal geen tag	,
/ behalve Repeater: renderChild, die de children renders	, 


/ Einde REPEATINGVIEW AND CHILDREN IN WICKETPATH STACK RENDERING

/ PANEL IN HTML STACK RENDERING

/ we set b in Component.internalRenderComponent	,

/ stack
/s
	MyPanel(Component).internalRenderComponent() line: 2508	

	MyPanel(MarkupContainer).onRender() line: 1698	
	MyPanel(Component).internalRender() line: 2380	
	MyPanel(Component).render() line: 2308	

	MyPanelPage(MarkupContainer).renderNext(MarkupStream) line: 1524	
	MyPanelPage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	MyPanelPage(Page).onRender() line: 879						/ NIET .internalRenderComponent

	MyPanelPage(WebPage).onRender() line: 141	
	MyPanelPage(Component).internalRender() line: 2380	
	MyPanelPage(Component).render() line: 2308	

	MyPanelPage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/debug
...
/s
MyPanelPage(MarkupContainer).renderNext(MarkupStream) line: 1524	
		// Get the current markup element
		final MarkupElement element = markupStream.get();					/ <div wicket:id="panel">

			// Get element as tag
			final ComponentTag tag = (ComponentTag)element;

			// Get component id
			final String id = tag.getId();

			// Get the component for the id from the given container
			Component component = get(id);									/ [MyPanel [Component id = panel]]
				component.render();
...
/s
MyPanel(Component).internalRenderComponent() line: 2508	
		final IMarkupFragment markup = getMarkup();
<div wicket:id="panel"></div>
				renderComponentTag(tag);
...
<body>
	<div wicket:id="panel">

			markupStream.next();
				getMarkupSourcingStrategy().onComponentTagBody(this, markupStream, tag);
/s
	/**
	 * Skip the panel's body markup which is expected to contain raw markup only (no wicket
	 * components) and which will be ignored / removed. It'll be replaced with the content of the
	 * associated markup file.
	 */
PanelMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 83				/ !
			// Skip the components body. Like with Panels or Fragments, it'll be replaced with the
			// associated markup
			if (markupStream.getPreviousTag().isOpen())
			{
				markupStream.skipRawMarkup();
				if (markupStream.get().closes(openTag) == false)
/n
		renderAssociatedMarkup(component);
/s
PanelMarkupSourcingStrategy(AssociatedMarkupSourcingStrategy).renderAssociatedMarkup(Component) line: 77	
		((MarkupContainer)component).renderAssociatedMarkup(tagName, "Markup for a " + tagName + " component must begin a tag like '<wicket:" + tagName + ">'");
/s
	/**
	 * Renders the entire associated markup for a container such as a Border or Panel. Any leading
	 * or trailing raw markup in the associated markup is skipped.
	 * 
MyPanel(MarkupContainer).renderAssociatedMarkup(String, String) line: 762	
		// Get associated markup file for the Border or Panel component
		final MarkupStream associatedMarkupStream = new MarkupStream(getMarkup(null));
/s
MyPanel(MarkupContainer).getMarkup(Component) line: 502	
		// Delegate request to attached markup sourcing strategy.
		return getMarkupSourcingStrategy().getMarkup(this, child);
/s
	/**
	 * Search for the child's markup in the associated markup file.
	 * 
PanelMarkupSourcingStrategy(AssociatedMarkupSourcingStrategy).getMarkup(MarkupContainer, Component) line: 95	
		IMarkupFragment associatedMarkup = parent.getAssociatedMarkup();
/s
MyPanel(MarkupContainer).getAssociatedMarkup() line: 459	
			Markup markup = MarkupFactory.get().getMarkup(this, false);
/s
MarkupFactory.getMarkup(MarkupContainer, boolean) line: 194	
		return getMarkup(container, container.getClass(), enforceReload);
/t
MyPanel(MarkupContainer).getAssociatedMarkup() line: 459	
			Markup markup = MarkupFactory.get().getMarkup(this, false);
/d
<wicket:panel>
	<a wicket:id="link">click</a>
	<span wicket:id="result"></span>
</wicket:panel>

				return markup;
/t
PanelMarkupSourcingStrategy(AssociatedMarkupSourcingStrategy).getMarkup(MarkupContainer, Component) line: 103	
		IMarkupFragment associatedMarkup = parent.getAssociatedMarkup();
/d
<wicket:panel>
	<a wicket:id="link">click</a>
	<span wicket:id="result"></span>
</wicket:panel>

		// Find <wicket:panel>
		IMarkupFragment markup = MarkupUtil.findStartTag(associatedMarkup, tagName);
			return markup;
/t
MyPanel(MarkupContainer).renderAssociatedMarkup(String, String) line: 765	
		// Get associated markup file for the Border or Panel component
		final MarkupStream associatedMarkupStream = new MarkupStream(getMarkup(null));
/d
markup = file:/home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28/webapps/wicket-examples-step-by-step/WEB-INF/classes/org/apache/wicket/examples/repeater/MyPanel.html
<wicket:panel>
	<a wicket:id="link">click</a>
	<span wicket:id="result"></span>
</wicket:panel>, index = 0, current =  '<wicket:panel>' (line 0, column 0)]

		// Get open tag in associated markup of border component
		MarkupElement elem = associatedMarkupStream.get();
		// Check for required open tag name
		ComponentTag associatedMarkupOpenTag = (ComponentTag)elem;			/ <wicket:panel>
		{
			setIgnoreAttributeModifier(true);
			renderComponentTag(associatedMarkupOpenTag);
<body>
	<div wicket:id="panel"><wicket:panel>

			associatedMarkupStream.next();
			renderComponentTagBody(associatedMarkupStream, associatedMarkupOpenTag);
associatedMarkupStream=
<wicket:panel>
	<a wicket:id="link">click</a>
	<span wicket:id="result"></span>
</wicket:panel>, index = 1, current = [Raw markup]]
associatedMarkupOpenTag=
<wicket:panel>

/s
MyPanel(MarkupContainer).renderComponentTagBody(MarkupStream, ComponentTag) line: 1713	
			renderAll(markupStream, openTag);
MyPanel(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1746	
		while (markupStream.hasMore())
		{
			// Render the markup element
			boolean rawMarkup = renderNext(markupStream);
/c
/s
/ stack	,

	MyPanel$1(Component).internalRenderComponent() line: 2509	

	MyPanel$1(MarkupContainer).onRender() line: 1698	
	MyPanel$1(Component).internalRender() line: 2380	
	MyPanel$1(Component).render() line: 2308	

	MyPanel(MarkupContainer).renderNext(MarkupStream) line: 1524	
	MyPanel(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	MyPanel(MarkupContainer).renderComponentTagBody(MarkupStream, ComponentTag) line: 1734	
	MyPanel(MarkupContainer).renderAssociatedMarkup(String, String) line: 797  / method for Borders and Panels	,
																		/  finds new markup, and render tag's body	, want dat is de nieuwe markup	
	PanelMarkupSourcingStrategy(AssociatedMarkupSourcingStrategy).renderAssociatedMarkup(Component) line: 77	
	PanelMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 112	
	MyPanel(Component).internalRenderComponent() line: 2565			/ render tag, <div wicket:id="panel"> , render tag's body	,

	MyPanel(MarkupContainer).onRender() line: 1698	
	MyPanel(Component).internalRender() line: 2380	
	MyPanel(Component).render() line: 2308	

	MyPanelPage(MarkupContainer).renderNext(MarkupStream) line: 1524					/ tag's wicket:id -> component -> render	,
	MyPanelPage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	MyPanelPage(Page).onRender() line: 879	

	MyPanelPage(WebPage).onRender() line: 141	
	MyPanelPage(Component).internalRender() line: 2380	
	MyPanelPage(Component).render() line: 2308	

	MyPanelPage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	


/ Einde PANEL IN HTML STACK RENDERING


/ PROPERTYMODEL AND OBJECTS

/ proj wicket-examples-step-by-step	,

/ Er is een verschil tussen	,
		Label name=new Label("name", new PropertyModel<String>(getDefaultModel(), "name"));
/ en	,
		Label name=new Label("name",new PropertyModel<String>(this,"defaultModelObject.name"));

/ het verschil zit in de root van waaruit je start	, bij de 1ste start het label met de page's model	, bij de 2de met de page zelf	, 
/ Als je de page's model changes, en click , dan start het label's property model bij de 1ste met de oude page's model	, want dat is de property model's target,	 maar bij de 2de start het label met  de (oude) page	, ook deze is niet veranderd	, maar nu gaat hij "defaultModel.object.name" af, en komt vanzelf de nieuwe page's model tegen	, 

/ 7	. 

		Label name=new Label("name", new PropertyModel<String>(getDefaultModel(), "name"));

$ vi ModelPage.java
	private void updateModelDoesNotWork(){
		setDefaultModel(new Model<X>(new X("bar",7)));
		Label name=new Label("name", new PropertyModel<String>(getDefaultModel(), "name"));
		add(name);
		name.setOutputMarkupId(true);
		AjaxLink<Void>change=new AjaxLink<Void>("change") {
			@Override
			public void onClick(AjaxRequestTarget target) {
				getPage().setDefaultModel(new Model<X>(new X("foo",13)));
				target.add(getPage().get("name"));	
			}
		};
		add(change);
	}
/ als we click	, dan wordt page's model update	, maar de label's property model's target blijft de oude panel's model	, 

/ we zouden kunnen use ChainingModel.setChainedModel	,
/ TODO

/ 13	. 

/ we load de page	,
/s
	PropertyModel<T>(AbstractPropertyModel<T>).getInnermostModelOrObject() line: 264	
	PropertyModel<T>(AbstractPropertyModel<T>).getObject() line: 83	
		final String expression = propertyExpression();
"name"
		final Object target = getInnermostModelOrObject();
/cb
	Label(Component).getDefaultModelObject() line: 1626	
		final IModel<?> model = getDefaultModel();		 
				return model.getObject();
model	PropertyModel<T>  (id=602)	
	expression	"name" (id=612)	
	target	Model<T>  (id=616)	
		object	ModelPage$X  (id=613)	
			index	Integer  (id=322)	
			name	"bar" (id=325)	
/cb
	Label(Component).getDefaultModelObjectAsString() line: 1654	
		return getDefaultModelObjectAsString(getDefaultModelObject());
/cb
	Label.onComponentTagBody(MarkupStream, ComponentTag) line: 115	
		replaceComponentTagBody(markupStream, openTag, getDefaultModelObjectAsString());
/cb
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
	Label(Component).internalRenderComponent() line: 2565	
	Label(WebComponent).onRender() line: 60	
	Label(Component).internalRender() line: 2380	
	Label(Component).render() line: 2308	
	ModelPage(MarkupContainer).renderNext(MarkupStream) line: 1524	
	ModelPage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	ModelPage(Page).onRender() line: 879	
	ModelPage(WebPage).onRender() line: 141	
	ModelPage(Component).internalRender() line: 2380	
	ModelPage(Component).render() line: 2308	
	ModelPage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/ debug	,
/s
	PropertyModel<T>(AbstractPropertyModel<T>).getInnermostModelOrObject() line: 264	
		Object object = getTarget();									/ page's model 
		while (object instanceof IModel)		
/j
		{
			Object tmp = ((IModel<?>)object).getObject();		/ ModelPage$X
			if (tmp == object)
/n
			{
				break;
			}
			object = tmp;		/ ModelPage$X
		}
/ volgende	,
		while (object instanceof IModel)		
/n
		return object;	 / ModelPage$X
/t
PropertyModel<T>(AbstractPropertyModel<T>).getObject() line: 83	
		final String expression = propertyExpression();
"name"
		final Object target = getInnermostModelOrObject();
/d
ModelPage$X
			return (T)PropertyResolver.getValue(expression, target);
/ Met reflection	, 
/t
Label(Component).getDefaultModelObject() line: 1626	
				return model.getObject();
/d
/t
Label(Component).getDefaultModelObjectAsString() line: 1654	
		return getDefaultModelObjectAsString(getDefaultModelObject());
/pd
getDefaultModelObject()=="bar"
/ dus het is al een string	,

/ 13	. 

/ we click	, 
/ hij gaat de ajax response, XML maken	, dus render	,
/ we komen in precies dezelfde method	,
/s
	PropertyModel<T>(AbstractPropertyModel<T>).getObject() line: 71	
	Label(Component).getDefaultModelObject() line: 1626	
		final IModel<?> model = getDefaultModel();						/ PropertyModel	,
				return model.getObject();
/cb
	Label(Component).getDefaultModelObjectAsString() line: 1654	
		return getDefaultModelObjectAsString(getDefaultModelObject());
/cb
	Label.onComponentTagBody(MarkupStream, ComponentTag) line: 115	
		replaceComponentTagBody(markupStream, openTag, getDefaultModelObjectAsString());				<- weer	,
/cb
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
	Label(Component).internalRenderComponent() line: 2565	
	Label(WebComponent).onRender() line: 60	
	Label(Component).internalRender() line: 2380	
	Label(Component).render() line: 2308	
	AjaxRequestHandler$1(XmlPartialPageUpdate).writeComponent(Response, String, Component, String) line: 119	
	AjaxRequestHandler$1(PartialPageUpdate).writeComponents(Response, String) line: 245	
	AjaxRequestHandler$1(PartialPageUpdate).writeTo(Response, String) line: 158	
	AjaxRequestHandler.respond(IRequestCycle) line: 358	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 97	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/s
PropertyModel<T>(AbstractPropertyModel<T>).getObject() line: 71	
		final String expression = propertyExpression();
"name"
		final Object target = getInnermostModelOrObject();
/s
PropertyModel<T>(AbstractPropertyModel<T>).getInnermostModelOrObject() line: 261	
		Object object = getTarget();
this	PropertyModel<T>  (id=602)	
	expression	"name" (id=612)	
	target	Model<T>  (id=616)	
		object	ModelPage$X  (id=613)	
			index	Integer  (id=322)	
			name	"bar" (id=325)	
/ De oude	,
 
/ 7	.  

		Label name=new Label("name", new PropertyModel<String>(this, "defaultModel.object.name"));

$ vi ModelPage.java

	private void withModelAsPropertyDoesWork(){
		setDefaultModel(new Model<X>(new X("bar",7)));
		Label name=new Label("name",new PropertyModel<String>(this,"defaultModel.object.name"));
		add(name);
		name.setOutputMarkupId(true);
		AjaxLink<Void>change=new AjaxLink<Void>("change") {
			@Override
			public void onClick(AjaxRequestTarget target) {
				getPage().setDefaultModel(new Model<X>(new X("foo",13)));
				target.add(getPage().get("name"));
				
			}
		};
		
	}

/ NB	. We set	, maar dat hoeft niet	, als we click zien we foo	,
		setDefaultModel(new Model<X>(new X("bar",7)));

/s
	PropertyModel<T>(AbstractPropertyModel<T>).getObject() line: 71	
	Label(Component).getDefaultModelObject() line: 1626	
		final IModel<?> model = getDefaultModel();
				return model.getObject();
/cb
	Label(Component).getDefaultModelObjectAsString() line: 1654	
		return getDefaultModelObjectAsString(getDefaultModelObject());
/cb
	Label.onComponentTagBody(MarkupStream, ComponentTag) line: 115	
		replaceComponentTagBody(markupStream, openTag, getDefaultModelObjectAsString());
/cb
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
	Label(Component).internalRenderComponent() line: 2565	
	Label(WebComponent).onRender() line: 60	
	Label(Component).internalRender() line: 2380	
	Label(Component).render() line: 2308	
	ModelPage(MarkupContainer).renderNext(MarkupStream) line: 1524	
	ModelPage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	ModelPage(Page).onRender() line: 879	
	ModelPage(WebPage).onRender() line: 141	
	ModelPage(Component).internalRender() line: 2380	
	ModelPage(Component).render() line: 2308	
	ModelPage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 195	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
/s
PropertyModel<T>(AbstractPropertyModel<T>).getObject() line: 71	
		final String expression = propertyExpression();
"defaultModel.object.name"
		final Object target = getInnermostModelOrObject();
/s
		Object object = getTarget();			/  de page	,
this	PropertyModel<T>  (id=1057)	
	expression	"defaultModel.object.name" (id=257)	
	target	ModelPage  (id=1020)	

		while (object instanceof IModel)		/ nu geen while loop zoals net	,
/n
		return object;
/t
PropertyModel<T>(AbstractPropertyModel<T>).getObject() line: 83	
		final Object target = getInnermostModelOrObject();
/d
			return (T)PropertyResolver.getValue(expression, target);
/s
PropertyResolver.getValue(String, Object) line: 99	
		ObjectAndGetSetter getter = getObjectAndGetSetter(expression, object, RETURN_NULL);
defaultModel.object.name
/s
PropertyResolver.getObjectAndGetSetter(String, Object, int, Class<?>) line: 270	
		int index = getNextDotIndex(expressionBracketsSeperated, 0);
		Object value = object;											/ de page	,
12
		while (index != -1)
		{
			exp = expressionBracketsSeperated.substring(lastIndex, index);
"defaultModel"
				getAndSetter = getGetAndSetter(exp, clz);
exp "defaultModel"
clz class org.apache.wicket.examples.repeater.ModelPage

getAndSetter	PropertyResolver$MethodGetAndSet  (id=1125)	
	field	null	
	getMethod	Method  (id=1130)	/ public final org.apache.wicket.model.IModel org.apache.wicket.Component.getDefaultModel()	
	setMethod	Method  (id=1132)	

			if (value != null)
			{
				newValue = getAndSetter.getValue(value);
newValue	Model<T>  (id=1106)									/ page's model	,
			value = newValue;
				clz = value.getClass(); / class org.apache.wicket.model.Model

			index = getNextDotIndex(expressionBracketsSeperated, lastIndex);
19
/ volgend	,
		while (index != -1)
			exp = expressionBracketsSeperated.substring(lastIndex, index);
"object"
				getAndSetter = getGetAndSetter(exp, clz);
getAndSetter	PropertyResolver$MethodGetAndSet  (id=1160)	
	field	Field  (id=1162)	
	getMethod	Method  (id=1163)	/ public java.io.Serializable org.apache.wicket.model.Model.getObject()
	setMethod	Method  (id=1164)	

				newValue = getAndSetter.getValue(value);
newValue	ModelPage$X  (id=1186)	
			value = newValue;
				clz = value.getClass();										/ class org.apache.wicket.examples.repeater.ModelPage$X
			index = getNextDotIndex(expressionBracketsSeperated, lastIndex);
			if (index == -1)
			{
				exp = expressionBracketsSeperated.substring(lastIndex);
				break;
"name"
		IGetAndSet getAndSetter = getGetAndSetter(exp, clz);
getAndSetter	PropertyResolver$MethodGetAndSet  (id=1202)	
	field	Field  (id=1203)	
	getMethod	Method  (id=1204)	/ public java.lang.String org.apache.wicket.examples.repeater.ModelPage$X.getName()
	setMethod	Method  (id=1205)	

		return new ObjectAndGetSetter(getAndSetter, value);
/t
PropertyResolver.getValue(String, Object) line: 110	
		ObjectAndGetSetter getter = getObjectAndGetSetter(expression, object, RETURN_NULL);
/d
		return getter.getValue();
/t
Label(Component).getDefaultModelObjectAsString() line: 1654	
		return getDefaultModelObjectAsString(getDefaultModelObject());
/pd
getDefaultModelObject()="bar"




/ Einde PROPERTYMODEL AND OBJECTS


/ REPEATER

/ proj wicket-examples-step-by-step
/ prog WebMarkupContainer2Page

/stack
/s
	WebMarkupContainer2Page$1(Component).internalRenderComponent() line: 2509	
	WebMarkupContainer2Page$1(MarkupContainer).onRender() line: 1698	
		internalRenderComponent();
/cb
	WebMarkupContainer2Page$1(Component).internalRender() line: 2380 
		// Make sure there is a markup available for the Component
		IMarkupFragment markup = getMarkup();		/ <a wicket:id="names">link</a>		, krijgt van RepeatingView, die de markup van zijn children heeft
this [Link [Component id = 1]]	
				onRender();
/cb
	WebMarkupContainer2Page$1(Component).render() line: 2308	
			// Do the render
			internalRender();
/cb
	RepeatingView(AbstractRepeater).renderChild(Component) line: 115	
		child.render();
/cb
	RepeatingView(AbstractRepeater).onRender() line: 102	
		Iterator<? extends Component> it = renderIterator();
		while (it.hasNext())
		{
			Component child = it.next();	/ [Link [Component id = 1]]
			renderChild(child);
/cb
	RepeatingView(Component).internalRender() line: 2380	
				onRender();
/cb
	RepeatingView(Component).render() line: 2308	
			// Do the render
			internalRender();
/cb
	WebMarkupContainer2Page(MarkupContainer).renderNext(MarkupStream) line: 1524	
		// Get the current markup element
		final MarkupElement element = markupStream.get();
			final ComponentTag tag = (ComponentTag)element;	/ <a wicket:id="names">

			// Get component id
			final String id = tag.getId();	/ "names"

			// Get the component for the id from the given container
			Component component = get(id);			/ [RepeatingView [Component id = names]] 	, wicket:id is used 

				component.render();
/cb
	WebMarkupContainer2Page(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
		while (markupStream.hasMore())
		{
markupStream	MarkupStream  (id=8618)	
	current	ComponentTag  (id=8626)			/ <a wicket:id="names">	
	currentIndex	5	
	markup	Markup  (id=8629)	
this	WebMarkupContainer2Page  (id=8639)	
	children	ArrayList<E>  (id=8661)	
		elementData	Object[12]  (id=8663)	
			[0]	RepeatingView  (id=8651)	
			[1]	HtmlHeaderContainer  (id=8644)	
		size	2	
/ een van de markup in de list=<a wicket:id="names">, in Java wordt de component gevonden: new RepeatingView("names")	, we geven een repeatingview juist de markup van zijn children, zodat de children, die de markup van de markup krijgen, de juiste markup krijgen	, voor de MarkupContainer (Page) is dit de enigste component met markup , 1 RepeatingView, 
/ in AbstractRepeater.onRender zijn ook while loops, niet over markup zoals MarkupContainer.renderAll, maar  over de children	, de markup is er al	, MarkupContainer.renderAll uses de markup om de components te vinden	, 
/ Waarom loops MarkupContainer niet over zijn children	?  WH had dat ook gekund, maar hij moet toch de markup van het child vinden	; RepeatingView kan dat wel, de markup voor zijn children is bekend, nl die van zichzelf	,


			// Render the markup element
			boolean rawMarkup = renderNext(markupStream);
/cb
	WebMarkupContainer2Page(Page).onRender() line: 879	
		MarkupStream markupStream = new MarkupStream(getMarkup());		/ WH wordt list markup hier create TODO
		renderAll(markupStream, null);		/ Dus Page.render gaat de markup af	, 
/cb
	WebMarkupContainer2Page(WebPage).onRender() line: 141	
		super.onRender();
/cb
	WebMarkupContainer2Page(Component).internalRender() line: 2380	
				onRender();
/cb
	WebMarkupContainer2Page(Component).render() line: 2308	
			// Do the render
			internalRender();
/cb
	WebMarkupContainer2Page(Page).renderPage() line: 1018	
			render();
/cb
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
			requestablePage.renderPage();
/cb
	WebPageRenderer.respond(RequestCycle) line: 195	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/
/ debug	,
/s
	WebMarkupContainer2Page$1(Component).internalRenderComponent() line: 2509	
		final IMarkupFragment markup = getMarkup();
/d
this	WebMarkupContainer2Page$1  (id=8633)	
[Link [Component id = 1]]
markup	<a wicket:id="names">link</a>

/ de link krijgt z'n markup van z'n parent, de repeater	, 

/ de wicket ids worden used WH 
/ bij het opdelen van de markup in de list	, 
/ bij vinden van markup door MarkupContainer.renderAll, geeft index in de list van markup	, maar RepeatingView hoeft niet te lookup op wicket id, maar gaat zijn children af	, de markup is er al, nl die van zichzelf, die de markup voor zijn children is 
/ 
/ MarkupContainer.renderNext loops over de markup en finds children die bij de stukjes markup horen	, ogv wicket:id	, RepeatingView loops over zijn children, de markup voor de children is er al nl. die van zichzelf	,
/ MarkupContainer zou misschien ook over zijn children kunnen loop, maar hij moet dan de markup zien te vinden bij elke child, WH is beter andersom	,
/ wicket:id koppelt markup met component	,

markup	MarkupFragment  (id=8653)	
	size	3	
	startIndex	5	
	markup	Markup  (id=8652)	
		markupElements	Collections$UnmodifiableRandomAccessList<E>  (id=8705)	
			c	ArrayList<E>  (id=8708)	
				elementData	Object[10]  (id=8710)	
					[5]	ComponentTag  (id=8650)	
						autoComponentFactory	null	
						behaviors	null	
						flags	0	
						id	"names" (id=8700)	
						markupClassRef	null	
						openTag	null	
						userData	null	
						xmlTag	XmlTag  (id=8722)	
					[7]	ComponentTag  (id=8716)	
						autoComponentFactory	null	
						behaviors	null	
						flags	0	
						id	null	
						markupClassRef	null	
						openTag	ComponentTag  (id=8650)	
						userData	null	
						xmlTag	XmlTag  (id=8728)	

/ tag is nr 5	, de open tag dus	,

		onComponentTag(tag);
/s
WebMarkupContainer2Page$1(Link<T>).onComponentTag(ComponentTag) line: 356	
		super.onComponentTag(tag);
/ niets	,
			CharSequence url = getURL(); 		/ ./webmarkupcontainer2?7-1.ILinkListener-names-1

/ intermezzo

/ wicket gaat path component na: 7:names:1	, en laat de 1ste weg, dus names:1	, en wordt names-1	,

/ Einde intermezzo

/s
WebMarkupContainer2Page$1(Link<T>).getURL() line: 327	
		return urlFor(ILinkListener.INTERFACE, new PageParameters());
/s
WebMarkupContainer2Page$1(Component).urlFor(RequestListenerInterface, PageParameters) line: 3403	
		IRequestHandler handler = createRequestHandler(listener, parameters, null);
/ this zit ook in handler 	, 
/s
WebMarkupContainer2Page$1(Component).createRequestHandler(RequestListenerInterface, PageParameters, Integer) line: 3358	
		Page page = getPage();
		PageAndComponentProvider provider = new PageAndComponentProvider(page, this, parameters);
provider	PageAndComponentProvider  (id=8961)	
	component	WebMarkupContainer2Page$1  (id=8656)	[Link [Component id = 1]]
	componentPath	null	
	pageClass	null	
	pageId	Integer  (id=8950)							7
	pageInstance	WebMarkupContainer2Page  (id=8639)	
	pageInstanceIsFresh	false	
	pageParameters	PageParameters  (id=8933)	
	pageSource	null	
	renderCount	Integer  (id=8962)						1
			return new BookmarkableListenerInterfaceRequestHandler(provider, listener, id);
provider PageAndComponentProvider  (id=8961)	
listener RequestListenerInterface  (id=8934)	
id	null	
/t
WebMarkupContainer2Page$1(Component).urlFor(RequestListenerInterface, PageParameters) line: 3404	
		IRequestHandler handler = createRequestHandler(listener, parameters, null);
/d
		return getRequestCycle().urlFor(handler);
/s
RequestCycle.urlFor(IRequestHandler) line: 534	
			Url mappedUrl = mapUrlFor(handler);
/s
RequestCycle.mapUrlFor(IRequestHandler) line: 434	
		final Url url = requestMapper.mapHandler(handler);
/s
SystemMapper(CompoundRequestMapper).mapHandler(IRequestHandler) line: 211	
		for (IRequestMapper mapper : mappers)
		{
			Url url = mapper.mapHandler(handler);
/s
MountedMapper.mapHandler(IRequestHandler) line: 159	
		Url url = super.mapHandler(requestHandler);
/s
MountedMapper(AbstractBookmarkableMapper).mapHandler(IRequestHandler) line: 396	
		else if (requestHandler instanceof BookmarkableListenerInterfaceRequestHandler)

				renderCount = handler.getRenderCount();
1
			PageInfo pageInfo = getPageInfo(handler);
7
			ComponentInfo componentInfo = new ComponentInfo(renderCount, requestListenerInterfaceToString(handler.getListenerInterface()), handler.getComponentPath(), handler.getBehaviorIndex());
requestListenerInterfaceToString(handler.getListenerInterface())="ILinkListener"
handler.getComponentPath()="names:1"																/ voor ons het interessants	,
/s
BookmarkableListenerInterfaceRequestHandler.getComponentPath() line: 86	
		return pageComponentProvider.getComponentPath();
/s
PageAndComponentProvider.getComponentPath() line: 200	
			return component.getPageRelativePath();
/s
WebMarkupContainer2Page$1(Component).getPageRelativePath() line: 1751	
		return Strings.afterFirstPathComponent(getPath(), PATH_SEPARATOR);
/s
WebMarkupContainer2Page$1(Component).getPath() line: 1772	
		for (Component c = this; c != null; c = c.getParent())
c=[Link [Component id = 1]]
c=[RepeatingView [Component id = names]]
c=[Page class = org.apache.wicket.examples.repeater.WebMarkupContainer2Page, id = 7, render count = 1]
		{
			if (buffer.length() > 0)
			{
				buffer.prepend(PATH_SEPARATOR);
			}
			buffer.prepend(c.getId());
		}
buffer 7:names:1
		return buffer.toString();
/t
WebMarkupContainer2Page$1(Component).getPageRelativePath() line: 1751	
		return Strings.afterFirstPathComponent(getPath(), PATH_SEPARATOR);
/pd
getPath()="7:names:1"
Strings.afterFirstPathComponent(getPath(), PATH_SEPARATOR)="names:1"

...
/t
WebMarkupContainer2Page$1(Link<T>).onComponentTag(ComponentTag) line: 369	
this [Link [Component id = 1]]
			CharSequence url = getURL();
./webmarkupcontainer2?7-1.ILinkListener-names-1
				tag.put("href", url);
<a wicket:id="names" href="./webmarkupcontainer2?7-1.ILinkListener-names-1">

/ intermezzo

/ De volgende zal zijn	,
this [Link [Component id = 2]]
			CharSequence url = getURL();
./webmarkupcontainer2?7-1.ILinkListener-names-2
				tag.put("href", url);
<a wicket:id="names" href="./webmarkupcontainer2?7-1.ILinkListener-names-2">

/ MORGENOCHTEND
/ Waarom zit de path van de component in de controller	?
/ TODO


/ Einde intermezzo


















/ Einde REPEATER

/ RESOURCES

/ proj wicket-examples-step-by-step
/ prog ResourcePage

/ 7	. 

$ less ResourcePage.java
public class ResourcePage extends WebPage {
	public ResourcePage() {
		IModel<String>model=new StringResourceModel("title");
		Label label=new Label("title", model);
		add(label);
		IModel<String>model2=new ResourceModel("title2");
		Label label2=new Label("title2", model2);
		add(label2);
	}
}

$ less ResourcePage.html
public class ResourcePage extends WebPage {
<h3 wicket:id="title"></h3>
<h3 wicket:id="title2"></h3>

$ less ResourcePage.properties
title=Resource Page
title2=Resource Page2

/ 7	. 

$ less ResourcePage.java

	public ResourcePage() {
		IModel<String>model=new StringResourceModel("title",this);
/ OK

/ 7	. 

$ less ResourcePage.java
		{
		IModel<String>model=new StringResourceModel("title3.${key}",new Model<Serializable>(new X()));
		Label label=new Label("title3", model);
		add(label);
		}

$ less ResourcePage.html

<h3 wicket:id="title3"></h3>

/ OK

/ we komen in	,

/ stack
/s
	Label(Component).<init>(String, IModel<?>) line: 698	
		if (model != null)
model=StringResourceModel[key:title3.${key},default:null,params:]
		{
			setModelImpl(wrap(model));
/cb
	Label(WebComponent).<init>(String, IModel<?>) line: 54	
	Label.<init>(String, IModel<?>) line: 106	
	ResourcePage.<init>() line: 27	
	DefaultPageFactory.newPage(Constructor<C>, PageParameters) line: 175	
	DefaultPageFactory.newPage(Class<C>) line: 67	
	DefaultMapperContext.newPageInstance(Class<IRequestablePage>, PageParameters) line: 102	
	PageProvider.resolvePageInstance(Integer, Class<IRequestablePage>, PageParameters, Integer) line: 271	
	PageProvider.getPageInstance() line: 169	
	WebPageRenderer(PageRenderer).getPage() line: 78	
	WebPageRenderer.isPageStateless() line: 287	
	WebPageRenderer.shouldRenderPageAndWriteResponse(RequestCycle, Url, Url) line: 329	
	WebPageRenderer.respond(RequestCycle) line: 193	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/debug
/s
Label(Component).<init>(String, IModel<?>) line: 698	
			setModelImpl(wrap(model));
/s
Label(Component).wrap(IModel<V>) line: 4167	
		if (model instanceof IComponentAssignedModel)
		{
			return ((IComponentAssignedModel<V>)model).wrapOnAssignment(this);
/s
StringResourceModel.wrapOnAssignment(Component) line: 223	
		return new AssignmentWrapper(component);

/ intermezzo

/ TODO


/ Einde intermezzo

/c
/stack	,
/s
	Label.onComponentTagBody(MarkupStream, ComponentTag) line: 115	
		replaceComponentTagBody(markupStream, openTag, getDefaultModelObjectAsString());
/cb
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
		component.onComponentTagBody(markupStream, openTag);
/cb
	Label(Component).internalRenderComponent() line: 2565	
		onComponentTag(tag); 								/ <h3 wicket:id="title3">
				renderComponentTag(tag);					/ renders de tag	, calls tag.writeOutput(getResponse(), !needToRenderTag(null), getMarkup().getMarkupResourceStream().getWicketNamespace());
				getMarkupSourcingStrategy().onComponentTagBody(this, markupStream, tag);	 / renders de body in de tag	,
/cb
	Label(WebComponent).onRender() line: 60	
	Label(Component).internalRender() line: 2380	
	Label(Component).render() line: 2308	
	ResourcePage(MarkupContainer).renderNext(MarkupStream) line: 1524	
	ResourcePage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	ResourcePage(Page).onRender() line: 879	
	ResourcePage(WebPage).onRender() line: 141	
	ResourcePage(Component).internalRender() line: 2380	
	ResourcePage(Component).render() line: 2308	
	ResourcePage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ debug	,
/s
Label.onComponentTagBody(MarkupStream, ComponentTag) line: 115	
		replaceComponentTagBody(markupStream, openTag, getDefaultModelObjectAsString());
/s
Label(Component).getDefaultModelObjectAsString() line: 1654	
		return getDefaultModelObjectAsString(getDefaultModelObject());
/s
Label(Component).getDefaultModelObject() line: 1620	
		final IModel<?> model = getDefaultModel();

org.apache.wicket.model.StringResourceModel$AssignmentWrapper@38b40776:attached=false:tempModelObject=[null]
				return model.getObject();
/s
StringResourceModel$AssignmentWrapper(LoadableDetachableModel<T>).getObject() line: 134	
		if (state == null || state == InternalState.DETACHED)
		{
			// prevent infinite attachment loops
			state = InternalState.ATTACHING;

			transientModelObject = load();
/s
StringResourceModel$AssignmentWrapper.load() line: 264	
				return getString(component);
/s
StringResourceModel.getString(Component) line: 429	
		final Localizer localizer = getLocalizer();
			value = localizer.getString(getResourceKey(), component, model, null, null, defaultValue);
/s
StringResourceModel.getResourceKey() line: 590	

this	StringResourceModel  (id=11268)	
	model	Model<T>  (id=11278)	
		object	ResourcePage$X  (id=11279)	
			key	"key3" (id=11281)	
	resourceKey	"title3.${key}" (id=11283)	
	state	LoadableDetachableModel$InternalState  (id=11267)	
	transientModelObject	null	

			return new PropertyVariableInterpolator(resourceKey, model.getObject()) {
				...
			}.toString();

model.getObject()=ResourcePage$X
/s
StringResourceModel$1(VariableInterpolator).toString() line: 125	

this	StringResourceModel$1  (id=11282)	
	oject	ResourcePage$X  (id=11279)		/ neemt over van StringResourceModel
		key	"key3" (id=11281)	
	string	"title3.${key}" (id=11283)	/ neemt over van StringResourceModel

		while ((start = lowerPositive(string.indexOf("$$", pos), string.indexOf("${", pos))) != -1)
/j
7
			// Append text before possible variable
			buffer.append(string.substring(pos, start));
title3.
			// Position is now where we found the "${"
			pos = start;
7
			// Get start and end of variable name
			final int startVariableName = start + 2;
7
			final int endVariableName = string.indexOf('}', startVariableName);
12
			// Found a close brace?
			if (endVariableName != -1)
			{
				// Get variable name inside brackets
				final String variableName = string.substring(startVariableName, endVariableName);
key
				// Get value of variable
				final String value = getValue(variableName);
/s
StringResourceModel$1.getValue(String) line: 594	
/=
			return new PropertyVariableInterpolator(resourceKey, model.getObject()) {
				protected String getValue(String variableName) {
					String result = super.getValue(variableName);
variableName="key"
result="key3"
/ want	,
/s
StringResourceModel$1(PropertyVariableInterpolator).getValue(String) line: 65	
		Object value = PropertyResolver.getValue(variableName, oject);
variableName="key"
oject	ResourcePage$X  (id=11279)	
	key	"key3" (id=11281)	
/s
PropertyResolver.getValue(String, Object) line: 99	
		ObjectAndGetSetter getter = getObjectAndGetSetter(expression, object, RETURN_NULL);
/s
PropertyResolver.getObjectAndGetSetter(String, Object, int) line: 254	
		return getObjectAndGetSetter(expression, object, tryToCreateNull, object.getClass());
/s
PropertyResolver.getObjectAndGetSetter(String, Object, int, Class<?>) line: 270	
		IGetAndSet getAndSetter = getGetAndSetter(exp, clz);
clz	Class<T> (org.apache.wicket.examples.repeater.ResourcePage$X) (id=11103)	
exp	"key" (id=11329)	
getAndSetter	PropertyResolver$FieldGetAndSetter  (id=11341)	
	field	Field  (id=11343)	
		return new ObjectAndGetSetter(getAndSetter, value);
/t
PropertyResolver.getValue(String, Object) line: 110	
		ObjectAndGetSetter getter = getObjectAndGetSetter(expression, object, RETURN_NULL);
/d
		return getter.getValue();
/s
PropertyResolver$ObjectAndGetSetter.getValue() line: 659	
			return getAndSetter.getValue(value);
/s
PropertyResolver$FieldGetAndSetter.getValue(Object) line: 1385	
				return field.get(object);
/t
StringResourceModel$1(PropertyVariableInterpolator).getValue(String) line: 67	
		Object value = PropertyResolver.getValue(variableName, oject);
"key3"
			return toString(value);
/t
StringResourceModel$1(VariableInterpolator).toString() line: 152	
				// Get value of variable
				final String value = getValue(variableName);
/d
"key3"
					// Append variable value
					buffer.append(value);
title3.key3
/t
StringResourceModel.getString(Component) line: 439	
			value = localizer.getString(getResourceKey(), component, model, null, null, defaultValue);
/pd
getResourceKey()="title3.key3"
/s
Localizer.getString(String, Component, IModel<?>, Locale, String, IModel<String>) line: 230	

		final ResourceSettings resourceSettings = Application.get().getResourceSettings();
		String value = getStringIgnoreSettings(key, component, model, locale, style, null);
/s
Localizer.getStringIgnoreSettings(String, Component, IModel<?>, Locale, String, String) line: 323	
			cacheKey = getCacheKey(key, component, locale, style, variation);
title3.key3-1:title3-2-en_US-null-null

/ we doen voor debuggen eerst in Expressions	,
this.cache.clear()

			// Iterate over all registered string resource loaders until the property has been found
			Iterator<IStringResourceLoader> iter = getStringResourceLoaders().iterator();

getStringResourceLoaders()
	elementData	Object[6]  (id=11435)	
		[0]	ComponentStringResourceLoader  (id=11436)	
		[1]	PackageStringResourceLoader  (id=11437)	
		[2]	ClassStringResourceLoader  (id=11438)	
		[3]	ValidatorStringResourceLoader  (id=11439)	
		[4]	InitializerStringResourceLoader  (id=11440)	

/ Hij gaat in onze properties file kijken	, ResourcePage.properties	,

			while (iter.hasNext() && (value == null))
			{
				IStringResourceLoader loader = iter.next();
				value = loader.loadStringResource(component, key, locale, style, variation);
loader	ComponentStringResourceLoader  (id=11436)	
/s
ComponentStringResourceLoader.loadStringResource(Component, String, Locale, String, String) line: 213	
		String prefix = getResourcePath(component);	/ id van component	, 	/ TODO als parent component instanceof AbstractRepeater	,
label3
		// walk downwards starting with page going down to component
		for (Component current : getComponentTrail(component))
getComponentTrail(component)=ArrayList[ResourcePage,Label]

			// get current component class
			final Class<?> clazz = current.getClass();		/ ResourcePage.class	,
				// lookup fully qualified path
				string = loadStringResource(clazz, prefix + '.' + key, locale, style, variation);
prefix="title3"
key="title3.key3"
/s
ComponentStringResourceLoader.loadStringResource(Class<?>, String, Locale, String, String) line: 131	
key=title3.title3.key3
		// Load the properties associated with the path
		IPropertiesFactory propertiesFactory = getPropertiesFactory();
		while (true)
		{
			// Create the base path
			String path = clazz.getName().replace('.', '/');
org/apache/wicket/examples/repeater/ResourcePage

			// Iterator over all the combinations
			IResourceNameIterator iter = newResourceNameIterator(path, locale, style, variation);
			while (iter.hasNext())
			{
				String newPath = iter.next();
org/apache/wicket/examples/repeater/ResourcePage_en_US
org/apache/wicket/examples/repeater/ResourcePage_en
org/apache/wicket/examples/repeater/ResourcePage

				Properties props = propertiesFactory.load(clazz, newPath);
/ TODO
null
null
props	Properties  (id=11648)	
	key	"org/apache/wicket/examples/repeater/ResourcePage" (id=11652)	
	strings	ValueMap  (id=11654)	
		table	HashMap$Entry<K,V>[16]  (id=11662)	
			[0]	LinkedHashMap$Entry<K,V>  (id=11665)	
				after	LinkedHashMap$Entry<K,V>  (id=11668)	
				before	LinkedHashMap$Entry<K,V>  (id=11658)	
				hash	-374390864	
				key	"title4.key4" (id=11708)	
				next	null	
				value	"Resource Page4" (id=11723)	
			[2]	LinkedHashMap$Entry<K,V>  (id=11666)	
				after	LinkedHashMap$Entry<K,V>  (id=11658)	
				before	LinkedHashMap$Entry<K,V>  (id=11731)	
				hash	116402002	
				key	"title" (id=11741)	
				next	LinkedHashMap$Entry<K,V>  (id=11731)	
					after	LinkedHashMap$Entry<K,V>  (id=11666)	
					before	LinkedHashMap$Entry<K,V>  (id=11668)	
					hash	-337967886	
					key	"title3.key3" (id=11762)	
					next	null	
					value	"Resource Page3" (id=11363)	
				value	"Resource Page" (id=11747)	
			[7]	LinkedHashMap$Entry<K,V>  (id=11668)	
				after	LinkedHashMap$Entry<K,V>  (id=11731)	
				before	LinkedHashMap$Entry<K,V>  (id=11665)	
				hash	-959140889	
				key	"title2" (id=11784)	
				next	null	
				value	"Resource Page2" (id=11787)	

				if (props != null)
				{
					// Lookup the value
					String value = props.getString(key);
null
					if (value != null)
/n
					{
						return value;
/niet	,

			// Move to the next superclass
			clazz = clazz.getSuperclass();
class org.apache.wicket.markup.html.WebPage

/ volgende,	
		while (true)
...
			// Didn't find the key yet, continue searching if possible
			if (isStopResourceSearch(clazz))
/j
clazz=class org.apache.wicket.markup.html.WebPage
			{
				break;
		// not found
		return null;
/t
ComponentStringResourceLoader.loadStringResource(Component, String, Locale, String, String) line: 244	
		for (Component current : getComponentTrail(component))
		{
			...
				// lookup fully qualified path
				string = loadStringResource(clazz, prefix + '.' + key, locale, style, variation);
/d
null
				// shorten resource key prefix when going downwards (skip for repeaters)
				if ((current instanceof AbstractRepeater) == false)
				{
					prefix = Strings.afterFirst(prefix, '.');
""
			// If not found, than check if a property with the 'key' provided by
			// the user can be found.
			string = loadStringResource(clazz, key, locale, style, variation);
Resource Page3
				return string;
/t
Localizer.getStringIgnoreSettings(String, Component, IModel<?>, Locale, String, String) line: 397	
				value = loader.loadStringResource(component, key, locale, style, variation);
/d
Resource Page3
				putIntoCache(cacheKey, value);

		// If a property value has been found, or a default value was given,
		// than replace the placeholder and we are done
		if (value != null)
		{
			return substitutePropertyExpressions(component, value, model);
component	Label  (id=11233)	
value	"Resource Page3" (id=11363)	
model	Model<T>  (id=11278)	
	object	ResourcePage$X  (id=11279)	
		key	"key3" (id=11281)	
/s
Localizer.substitutePropertyExpressions(Component, String, IModel<?>) line: 563	
				locator = component;
				locale = component.getLocale();
			}

			return new ConvertingPropertyVariableInterpolator(string, model.getObject(), locator, locale).toString();
/s
ConvertingPropertyVariableInterpolator(VariableInterpolator).toString() line: 110	

/ Hier waren we eerder	, 

this	ConvertingPropertyVariableInterpolator  (id=11922)	
	string	"Resource Page3" (id=11363)	
		return string;

/t
Localizer.getString(String, Component, IModel<?>, Locale, String, IModel<String>) line: 236	
		String value = getStringIgnoreSettings(key, component, model, locale, style, null);
/d
Resource Page3
			return value;
/t
StringResourceModel$AssignmentWrapper(LoadableDetachableModel<T>).getObject() line: 136	
			transientModelObject = load();
/d
this	StringResourceModel$AssignmentWrapper  (id=11263)	
	component	Label  (id=11233)	
	state	LoadableDetachableModel$InternalState  (id=11269)	
	transientModelObject	"Resource Page3" (id=11363)	

			state = InternalState.ATTACHED;
		return transientModelObject;
/t
Label(Component).getDefaultModelObject() line: 1626	
		final IModel<?> model = getDefaultModel();
				return model.getObject();
/d
/t
Label(Component).getDefaultModelObjectAsString() line: 1654	
		return getDefaultModelObjectAsString(getDefaultModelObject());
/pd
/s
Label(Component).getDefaultModelObjectAsString(Object) line: 1674	
		if (modelObject != null)
Resource Page3
...
/t
Label.onComponentTagBody(MarkupStream, ComponentTag) line: 115	
		replaceComponentTagBody(markupStream, openTag, getDefaultModelObjectAsString());
/pd
/s
Label(Component).replaceComponentTagBody(MarkupStream, ComponentTag, CharSequence) line: 4054	
		if (tag.isOpen())
		{
			// Get what tag was in the markup; not what the user it might
			// have changed it to.
			markupOpenTag = markupStream.getPreviousTag();

			// If it was an open tag in the markup as well, than ...
			if (markupOpenTag.isOpen())
			{
				// skip any raw markup in the body
				markupStream.skipRawMarkup();
/ Wil je overslaan, komt dus niet in de response	,

		if (body != null)
		{
			// Write the new body
			getResponse().write(body);
/s
getResponse()=return getRequestCycle().getResponse();

/ 7	. 

$ less ResourcePage.java
		{
		setKey("key4");
		IModel<String>model=new StringResourceModel("title4.${key}",new PropertyModel<String>(this, "key"));
		Label label=new Label("title4", model);
		add(label);
		}

$ less ResourcePage.html
<h3 wicket:id="title4"></h3>

/ ERR
/ in model obj "key4" is geen getKey() method	,  de property model is geen key-value store	,


/ ERR
/ stack
/s
	Label.onComponentTagBody(MarkupStream, ComponentTag) line: 115	
		replaceComponentTagBody(markupStream, openTag, getDefaultModelObjectAsString());
/cb
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
		component.onComponentTagBody(markupStream, openTag);
/cb
	Label(Component).internalRenderComponent() line: 2565	
		onComponentTag(tag);
				renderComponentTag(tag);
				getMarkupSourcingStrategy().onComponentTagBody(this, markupStream, tag);
/cb
	Label(WebComponent).onRender() line: 60	
	Label(Component).internalRender() line: 2380	
	Label(Component).render() line: 2308	
	ResourcePage(MarkupContainer).renderNext(MarkupStream) line: 1524	
	ResourcePage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
		while (markupStream.hasMore())
		{
			// Render the markup element
			boolean rawMarkup = renderNext(markupStream);
/cb
	ResourcePage(Page).onRender() line: 879	
	ResourcePage(WebPage).onRender() line: 141	
	ResourcePage(Component).internalRender() line: 2380	
	ResourcePage(Component).render() line: 2308	
	ResourcePage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/ debug	
...
/s
StringResourceModel.getString(Component) line: 439	
			value = localizer.getString(getResourceKey(), component, model, null, null, defaultValue);
/s
StringResourceModel.getResourceKey() line: 592	
		if (model != null)
model	PropertyModel<T>  (id=14294)	
			return new PropertyVariableInterpolator(resourceKey, model.getObject()) {
				protected String getValue(String variableName) {
					String result = super.getValue(variableName);
			}.toString();
resourceKey="title4.${key}"
model.getObject()="key4"
/s
StringResourceModel$1(VariableInterpolator).toString() line: 110	
this	StringResourceModel$1  (id=14341)	
	oject	"key4" (id=14335)	
	string	"title4.${key}" (id=14298)	

				// Get variable name inside brackets
				final String variableName = string.substring(startVariableName, endVariableName);
key
				// Get value of variable
				final String value = getValue(variableName);
/s
StringResourceModel$1.getValue(String) line: 594	
/=
			return new PropertyVariableInterpolator(resourceKey, model.getObject()) {
				protected String getValue(String variableName) {
					String result = super.getValue(variableName);
variableName="key"
/s
StringResourceModel$1(PropertyVariableInterpolator).getValue(String) line: 65	
		Object value = PropertyResolver.getValue(variableName, oject);
variableName	"key" (id=14358)	
this	StringResourceModel$1  (id=14341)	
	oject	"key4" (id=14335)	

/ intermezzo

/ hierboven hadden we	,
variableName="key"
oject	ResourcePage$X  (id=11279)	
	key	"key3" (id=11281)	

/ Einde intermezzo

/s
PropertyResolver.getValue(String, Object) line: 104	
		ObjectAndGetSetter getter = getObjectAndGetSetter(expression, object, RETURN_NULL);
expression	"key" (id=14358)	
object	"key4" (id=14335)	

/ In dit object , een String, is er geen getKey()	, 

/ 7	. 

/ Wat is het verschil tussen	

		IModel<String>model=new StringResourceModel("title3.${key}",new Model<Serializable>(new X()));
/=
		IModel<String>model=new StringResourceModel("title3.${key}",null,new Model<Serializable>(new X()));
/ en	,
		IModel<String>model=new StringResourceModel("title3.${key}",this,new Model<Serializable>(new X())); 	/ this=ResourcePage	,

/ Het model is altijd StringResourceModel$AssignmentWrapper	, met component=Label	, 
/ maar de StringResourceModel heeft component null of this=ResourcePage
/ Als StringResourceModel een component heeft	, dan use hij deze om de properties file te resolve	,
/ Als StringResourceModel geen component heeft	, dan use hij de StringResourceModel$AssignmentWrapper's component om de properties file te resolve	,
/ maar in beide gevallen vindt hij ResourcePage.properties	,
/ TODO

/ STRINGRESOURCEMODEL KEY-VALUE STORES
/ WH 
		IModel<String>model=new StringResourceModel("title3.${key}",this,new Model<Serializable>(new X()));
/ 1ste en 3de arg: wicket lost ${key} op in de model=key-value store	, en ${key}=key3	, en dan wordt key3 opgezocht in key-value store ResourcePage.properties	,
/ Dus 2 key lookups in 2 key-value stores	,

/ MORGENOCHTEND I

/ 13	. 

/ Met	, 
		IModel<String>model=new StringResourceModel("title3.${key}",new Model<Serializable>(new X()));
/ stack	,
/s
	StringResourceModel.getString(Component) line: 429	
			value = localizer.getString(getResourceKey(), component, model, null, null, defaultValue);
/ getResourceKey() uses model	, om de property te resolve	,
/ .getString uses component=Label	, om de .properties file te vinden	,
/cb
	StringResourceModel$AssignmentWrapper.load() line: 271	
			if (StringResourceModel.this.component != null)							<- nu, nee	, want 2de arg is null	,
			{
				// ignore assignment if component was specified explicitly
				return StringResourceModel.this.getObject();
			}
			else																	<- nu ja	,
			{
				return getString(component);										/ component=Label id=title3	,
/cb
	StringResourceModel$AssignmentWrapper.load() line: 226	
	StringResourceModel$AssignmentWrapper(LoadableDetachableModel<T>).getObject() line: 134	
			transientModelObject = load();
/cb
	Label(Component).getDefaultModelObject() line: 1626	
		final IModel<?> model = getDefaultModel();
				return model.getObject();
/cb
	Label(Component).getDefaultModelObjectAsString() line: 1654	
		return getDefaultModelObjectAsString(getDefaultModelObject());
/cb
	Label.onComponentTagBody(MarkupStream, ComponentTag) line: 115	
		replaceComponentTagBody(markupStream, openTag, getDefaultModelObjectAsString());
/cb
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
	Label(Component).internalRenderComponent() line: 2565	
	Label(WebComponent).onRender() line: 60	
	Label(Component).internalRender() line: 2380	
	Label(Component).render() line: 2308	
	ResourcePage(MarkupContainer).renderNext(MarkupStream) line: 1524	
	ResourcePage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	ResourcePage(Page).onRender() line: 879	
	ResourcePage(WebPage).onRender() line: 141	
	ResourcePage(Component).internalRender() line: 2380	
	ResourcePage(Component).render() line: 2308	
	ResourcePage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	


/ 13	. 

/ Met	,
		IModel<String>model=new StringResourceModel("title3.${key}",this,new Model<Serializable>(new X()));
/stack
/s
	StringResourceModel.getString(Component) line: 429	
			value = localizer.getString(getResourceKey(), component, model, null, null, defaultValue);
/ getResourceKey() uses model	, om de property te resolve	,
/ .getString uses component=ResourcePage	, om de .properties file te vinden	,
/cb
	StringResourceModel.getString() line: 424	
		return getString(component);				/ component=ResourcePage
/cb
	StringResourceModel.load() line: 617	
		return getString();
/cb
	StringResourceModel.load() line: 199	
	StringResourceModel(LoadableDetachableModel<T>).getObject() line: 134	
			transientModelObject = load();
/cb
	StringResourceModel$AssignmentWrapper.load() line: 267	
this	StringResourceModel$AssignmentWrapper  (id=18648)	
	component	Label  (id=18649)								<- altijd	,
	this$0	StringResourceModel  (id=18645)	
		component	ResourcePage  (id=18639)					<- nu, omdat we this gaven als 2de arg voor StringResourceModel	,
		model	Model<T>  (id=18646)	
		resourceKey	"title3.${key}" (id=11283)	

			if (StringResourceModel.this.component != null)		<- nu, ja	,
			{
				// ignore assignment if component was specified explicitly
				return StringResourceModel.this.getObject();	<-
			}
			else												
			{
				return getString(component);
/cb
	StringResourceModel$AssignmentWrapper.load() line: 226	
	StringResourceModel$AssignmentWrapper(LoadableDetachableModel<T>).getObject() line: 134	
			transientModelObject = load();

	Label(Component).getDefaultModelObject() line: 1626	
		final IModel<?> model = getDefaultModel();
		if (model != null)
		{
			try
			{
				// Get model value for this component.
				return model.getObject();
/cb
	Label(Component).getDefaultModelObjectAsString() line: 1654	
		return getDefaultModelObjectAsString(getDefaultModelObject());
/cb
	Label.onComponentTagBody(MarkupStream, ComponentTag) line: 115	
		replaceComponentTagBody(markupStream, openTag, getDefaultModelObjectAsString());
/cb
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
	Label(Component).internalRenderComponent() line: 2565	
	Label(WebComponent).onRender() line: 60	
	Label(Component).internalRender() line: 2380	
	Label(Component).render() line: 2308	
	ResourcePage(MarkupContainer).renderNext(MarkupStream) line: 1524	
	ResourcePage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	ResourcePage(Page).onRender() line: 879	
	ResourcePage(WebPage).onRender() line: 141	
	ResourcePage(Component).internalRender() line: 2380	
	ResourcePage(Component).render() line: 2308	
	ResourcePage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	


/ 7	. 

$ vi ResourcePage.html
<wicket:message key="title5"></wicket:message>
$ vi ResourcePage.properties
title5="Resource Page5"
/ OK

/ MORGENOCHTEND
/ ResourcePageTest	, aanpassen Application	, zoals in ApplicationUtils	,
/ lees	,
https://ci.apache.org/projects/wicket/guide/7.x/guide/i18n.html

/ 7	. 

/ Lees	, 
https://ci.apache.org/projects/wicket/guide/7.x/guide/i18n.html

/ proj wicket-examples-step-by-step
/ prog ResourcePage

/ 13	. 

/ we kunnen ook RepeaterApplication.properties file maken, dit is zelfs de default	,

$ vi ResourcePage.html
<wicket:message key="title6"></wicket:message>
<input type="submit" value="Initial" wicket:message="value:alt6">

$ vi RepeaterApplication.properties
title6=Repeater Application6
alt6=Alternative6

/ Geef	,
http://localhost:9090/wicket-examples-step-by-step/repeater/resource
/ we zien 	, 
Repeater Application6 
Alternative6

/ 13	. 

/ we maken voor de test een Application en een Application.properties file	, 
/ deze kun je use als language file, 

/ we test <wicket:message> en <input wicket:message> dus in de java file hoeft niets te staan	,

/ 1313	. 

/ in src/main/java

$ vi ResourcePage.java
public class ResourcePage extends WebPage {
}

$ vi ResourcePage.html
<wicket:message key="title5"></wicket:message>
<wicket:message key="title6"></wicket:message>
<input type="submit" value="Initial" wicket:message="value:alt6">

/ 1313	.

/ in src/test/java

$ vi ResourcePageTest.java

public class ResourcePageTest {
	
	WicketTester tester=new WicketTester();

	@Before
	public void init(){
		WebApplication webApplication=new TestApplication();
		tester=new WicketTester(webApplication);
		tester.startPage(ResourcePage.class);
	}
	
	@Test
	public void test(){
		tester.assertRenderedPage(ResourcePage.class);
		String s=tester.getLastResponseAsString();
		System.out.println(s);
	}
}

$ vi TestApplication.java
public class TestApplication extends WebApplication {
	@Override
	public Class<? extends Page> getHomePage() {			/ moet er zijn	, 
		// TODO Auto-generated method stub
		return null;
	}
}
$ vi TestApplication.properties
title6=Test Application 6
alt6=TestAlternative6

/ we zien in de test output	,
<wicket:message key="title5">Resource Page5</wicket:message>
<wicket:message key="title6">Test Application 6</wicket:message>
<input type="submit" value="TestAlternative6" wicket:message="value:alt6">

/ 13	. 

/ we use NIET <wicket:messages> , maar add een Label in java	,
/ we set de property in ResourcePage.properties en TestApplication.properties	, de 1ste wint	, 

/ in src/main/java
$ vi ResourcePage.java
public class ResourcePage extends WebPage {
	public ResourcePage() {
		{
		IModel<String>model=new ResourceModel("title7key");
		Label label=new Label("title7", model);
		add(label);
		}
	}
}
$ vi ResourcePage.html
<span wicket:id="title7"></span>

$ vi ResourcePage.properties
title7key=Label7 in ResourcePage.properties
/ of	,
#title7key=Label7 in ResourcePage.properties

/ in src/test/java
$ vi TestApplication.properties
title7key=Label7 in TestApplication.properties

/ 13	. 

/ we kunnen ook	 de wicket id er voor set in de properties file	,

/ in src/main/java
$ vi ResourcePage.java
public class ResourcePage extends WebPage {
	public ResourcePage() {
		{
		IModel<String>model=new ResourceModel("title7key");
		Label label=new Label("title7", model);
		add(label);
		Label label2=new Label("title72", model);
		add(label2);
		}
	}
}
$ vi ResourcePage.hmtl

<span wicket:id="title7"></span>
<span wicket:id="title72"></span>

$ vi TestApplication.properties
title7.title7key=Label7 in TestApplication.properties
title72.title7key=Label72 in TestApplication.properties

/ run de test,	
<span wicket:id="title7">Label7 in TestApplication.properties</span>
<span wicket:id="title72">Label72 in TestApplication.properties</span>

/ 13	. 

/ geef in google	,
/ Lees	,
https://cwiki.apache.org/confluence/display/WICKET/Creating+a+custom+resource+locator
https://cwiki.apache.org/confluence/display/WICKET/Everything+about+Wicket+internationalization
http://stackoverflow.com/questions/10549108/problems-with-loading-custom-resource-properties-wicket
http://stackoverflow.com/questions/16961935/how-to-customized-properties-folder-in-wicket

/ Afmaken TestApplication met custom resource loader  in proj wicket-examples-step-by-step 
/ TODO

/ 13	. 

/ proj wicket-examples-step-by-step
/ prog ResourcePage	,

$ vi ResourcePage.java

public class ResourcePage extends WebPage {
	public ResourcePage() {
		{
		IModel<String>model=new StringResourceModel("${status.code}",new Model<Serializable>(new Order("foo",STATUS.INIT)));
		Label label=new Label("orderStatus", model);
		add(label);
		}

	}

	public static class Order implements Serializable{
		private String name;
		private STATUS status;
		public Order(String name,STATUS status) {
			this.name=name;
			this.status=status;
		}
	}
	public static enum STATUS{
		INIT(0),		
		FINISHED(1);
		private int code;
		private STATUS(int code) {
			this.code=code;
		}
		public int getCode() {
			return code;
		}
		
	}
}

$ vi RepeaterApplication.properties
orderStatus.0=Your payment submitted on ${name} has been inited.
orderStatus.1=Your order submitted on ${name} has finished.

/ Voor testing hebben we create	, 

$ vi ResourcePageTest.java

public class ResourcePageTest {
	
	WicketTester tester=new WicketTester();

	@Before
	public void init(){
		WebApplication webApplication=new TestApplication();
		tester=new WicketTester(webApplication);
		tester.startPage(ResourcePage.class);
	}
	
	@Test
	public void test(){
		
		tester.assertRenderedPage(ResourcePage.class);
		String s=tester.getLastResponseAsString();
		System.out.println(s);
	}
}
$ vi TestApplication.properties
orderStatus.0=Your payment submitted on ${name} has been inited.
orderStatus.1=Your order submitted on ${name} has finished.


/ STRINGRESOURCEMODEL
/ we doen	,
		IModel<String>model=new StringResourceModel("${status.code}",new Model<Serializable>(new Order("foo",STATUS.INIT)));
		Label label=new Label("orderStatus", model);

/ we geven GEEN 2de arg	, 
/ Label(Component).<init> doet 
	wrap(model)
/ en model=StringResourceModel	, en creates ook een loadable detachable model, StringResourceModel$AssignmentWrapper	, met component=Label	,
/ als we WEL een 2de arg geven	, dan doet wH de wrapped component  er niet toe	, het 2de arg is component van StringResourceModel, en die telt dan	, 
/ Klopt, wicket zegt	, 
				// ignore assignment if component was specified explicitly

/ Dus het 2de arg is explicit specified component	, ipv de component waar de StringResourceModel het model van is, de Label hierboven	, want we doen	,
		Label label=new Label("orderStatus", model);

public class StringResourceModel extends LoadableDetachableModel<String>
	private class AssignmentWrapper extends LoadableDetachableModel<String>
		@Override
		protected String load()
		{
			if (StringResourceModel.this.component != null)
			{
				// ignore assignment if component was specified explicitly
				return StringResourceModel.this.getObject();
			}
			else
			{
				return getString(component);
			}

/ 1313	. 

/ stack	,
/s
	Localizer.getStringIgnoreSettings(String, Component, IModel<?>, Locale, String, String) line: 398	
			cacheKey = getCacheKey(key, component, locale, style, variation);
0-1:orderStatus-2-en_US-null-null
			Iterator<IStringResourceLoader> iter = getStringResourceLoaders().iterator();
"this.getStringR...sourceLoaders()"	 (pending)	
	elementData	Object[6]  (id=13064)	
		[0]	ComponentStringResourceLoader  (id=13021)	
		[1]	PackageStringResourceLoader  (id=13065)	
		[2]	ClassStringResourceLoader  (id=13024)	
		[3]	ValidatorStringResourceLoader  (id=13066)	
		[4]	InitializerStringResourceLoader  (id=13067)	

			value = null;
			while (iter.hasNext() && (value == null))
			{
				IStringResourceLoader loader = iter.next(); / [2]	ClassStringResourceLoader  (id=13024)				
															/ deze loader vindt in ResourceApplication.properties	,	TODO
				value = loader.loadStringResource(component, key, locale, style, variation);  / value=Your payment submitted on ${name} has been inited.
			}
				putIntoCache(cacheKey, value);

			return substitutePropertyExpressions(component, value, model);	
						/ component=Label
						/ value=Your payment submitted on ${name} has been inited.
						/ model=Model(new Order(...))
/cb
	Localizer.getString(String, Component, IModel<?>, Locale, String, IModel<String>) line: 232	
		String value = getStringIgnoreSettings(key, component, model, locale, style, null);	/ key="0", component=Label	, 
/cb
	StringResourceModel.getString(Component) line: 439	
			value = localizer.getString(getResourceKey(), component, model, null, null, defaultValue);	/ getResourceKey="0"	, 
											/ model=Model(new Order(...))	, met model resolve je de resource key	,
											/ localizer vindt de value bij deze resource key	, in files	,
/cb
	StringResourceModel$AssignmentWrapper.load() line: 271	
			else
			{
				return getString(component);		/ component=Label	, we hadden geen explicit component in de StringResourceModel.<init>
/cb
	StringResourceModel$AssignmentWrapper.load() line: 226	
	StringResourceModel$AssignmentWrapper(LoadableDetachableModel<T>).getObject() line: 134	
	Label(Component).getDefaultModelObject() line: 1626	
	Label(Component).getDefaultModelObjectAsString() line: 1654	
	Label.onComponentTagBody(MarkupStream, ComponentTag) line: 115	
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
	Label(Component).internalRenderComponent() line: 2565	
	Label(WebComponent).onRender() line: 60	
	Label(Component).internalRender() line: 2380	
	Label(Component).render() line: 2308	
	ResourcePage(MarkupContainer).renderNext(MarkupStream) line: 1524	
	ResourcePage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	ResourcePage(Page).onRender() line: 879	
	ResourcePage(WebPage).onRender() line: 141	
	ResourcePage(Component).internalRender() line: 2380	
	ResourcePage(Component).render() line: 2308	
	ResourcePage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/ debug
/s
Localizer.substitutePropertyExpressions(Component, String, IModel<?>) line: 563	
				locator = component;
				locale = component.getLocale();
			}

			return new ConvertingPropertyVariableInterpolator(string, model.getObject(), locator, locale).toString();
string	"Your payment submitted on ${name} has been inited." (id=13025)	
model	Model<T>  (id=13003)	, met new Order	,	
locator	Label  (id=12972)	
locale	Locale  (id=263)	
/s
ConvertingPropertyVariableInterpolator(VariableInterpolator).toString() line: 110	

/ hier waren we eerder	, om resourceKey te vinden	,

this	ConvertingPropertyVariableInterpolator  (id=13102)	
	locale	Locale  (id=263)	
	locator	Label  (id=12972)	
	oject	ResourcePage$Order  (id=13056)									/ model's object, hiertegen wordt de key resolved	, 
														/ hierna volgt GEEN locator's lookup	 TODO
	string	"Your payment submitted on ${name} has been inited." (id=13025)	

				// Get variable name inside brackets
				final String variableName = string.substring(startVariableName, endVariableName);
name
				// Get value of variable
				final String value = getValue(variableName);
/s
ConvertingPropertyVariableInterpolator(PropertyVariableInterpolator).getValue(String) line: 65	
		Object value = PropertyResolver.getValue(variableName, oject);
foo
					buffer.append(value);
Your payment submitted on foo
				// Move past variable
				pos = endVariableName + 1;
			buffer.append(string.substring(pos));
Your payment submitted on foo has been inited.

/ MORGENOCHTEND
/ 	ClassStringResourceLoader vindt de key-value in de Application's properties
/ TODO
/ localizer maar 1 keer	, de 2de keer wordt de key resolved en klaar	, misschien is dat altijd zo	,
	


/ Einde STRINGRESOURCEMODEL



/ WICKETTESTER

/ proj wicket-examples-step-by-step
/ prog FrmPage, FrmTest

$ vi FrmPage.java

		Link<Void>link=new Link<Void>("link") {
			@Override
			public void onClick() {
				result_="From Link";	
			}
		};
		add(link);
		
		AjaxLink<Void>ajaxLink=new AjaxLink<Void>("ajaxLink") {
			@Override
			public void onClick(AjaxRequestTarget target) {
				result_="From AjaxLink";	
				target.add(result);
			}
		};
		add(ajaxLink);

		Form<Void>form=new Form<Void>("form");
		add(form);
		
		name=new TextField<String>("name");
		form.add(name);
		IModel<String>mdl=new PropertyModel<String>(this, "name_");
		name.setDefaultModel(mdl);
		age=new TextField<Integer>("age");
		form.add(age);
		mdl=new PropertyModel<String>(this, "age_");
		age.setDefaultModel(mdl);

		Button normal=new Button("normal"){
			@Override
			public void onSubmit() {
				String s=name.getModel().getObject()+","+age.getModelObject();
				result.setDefaultModelObject(s);
				// or	((IModel<Object>)result.getDefaultModel()).setObject(s);
				name.setDefaultModelObject(null);
				age.setDefaultModelObject(null);
			};
		};
		form.add(normal);
		
		ajx=new AjaxButton("ajx") {
			@Override
			protected void onSubmit(AjaxRequestTarget target, Form<?> form) {
				String s=name.getModel().getObject()+","+age.getModelObject();
				result.setDefaultModelObject(s);
				//		or		((IModel<Object>)result.getDefaultModel()).setObject(s);
				name.setDefaultModelObject(null);
				age.setDefaultModelObject(null);
				
				target.add(result);
			}
		};
		form.add(ajx);
		mdl=new PropertyModel<String>(this, "ajx_");
		ajx.setDefaultModel(mdl);

$ vi FrmPage.html

<a href="javascript:;" wicket:id="link">link</a>
<a href="javascript:;" wicket:id="ajaxLink">ajax link</a>
<form wicket:id="form">
	<input type="text" wicket:id="name">
	<input type="text" wicket:id="age">
	<button wicket:id="normal"></button>
	<button type="button" wicket:id="ajx"></button>
</form>
<span wicket:id="result"></span>

/ we zien geen text op de buttons	,
/ TODO

$ vi FrmTest.java

	
	private WicketTester wicketTester;
	
	@Before
	public void init(){
		wicketTester=new WicketTester();
		wicketTester.startPage(new FrmPage());
	}
	
	@Test
	public void testRenderPage(){
		wicketTester.assertRenderedPage(FrmPage.class);
		Page page=wicketTester.getLastRenderedPage();
		System.out.println(wicketTester.getLastResponse().getDocument());
	}
	@Test
	public void testNormalButton(){
		FormTester formTester=wicketTester.newFormTester("form");
		formTester.setValue("name", "foo");
		formTester.setValue("age", "13");
		formTester.setValue("normal", "E=mc²");
		formTester.submit();
		Label label=(Label)wicketTester.getComponentFromLastRenderedPage("result");
		String desc=label.getDefaultModelObjectAsString();
		Assert.assertEquals("foo,13",desc);
	}

	@Ignore
	public void testAjaxButton(){
		TextField<String>name=(TextField<String>)wicketTester.getComponentFromLastRenderedPage("form:name");
		name.setDefaultModelObject("foo");
		TextField<String>age=(TextField<String>)wicketTester.getComponentFromLastRenderedPage("form:age");
		name.setDefaultModelObject("7");
		wicketTester.executeAjaxEvent("form:ajx", "submit");
		wicketTester.assertComponentOnAjaxResponse("result");
		wicketTester.assertLabel("result", "foo,7");
	}
	@Test
	public void testLink(){
		wicketTester.clickLink("link");
		Label label=(Label)wicketTester.getComponentFromLastRenderedPage("result");
		String desc=label.getDefaultModelObjectAsString();
		Assert.assertEquals("From Link",desc);
	}
	@Test
	public void testAjaxLink(){
		wicketTester.clickLink("ajaxLink");
		wicketTester.assertComponentOnAjaxResponse("result");
		wicketTester.assertComponentOnAjaxResponse("result");
		wicketTester.assertLabel("result", "From AjaxLink");
	}


/ Einde WICKETTESTER

/ DATAPROVIDER

/ proj wicket-examples-step-by-step
/ prog DataTableFilterToolbarPage_my	, 

/ 7	. 

/ Eerst code	, 

public abstract class DataViewBase<T> extends AbstractPageableView<T>
        private static final class ModelIterator<T> implements Iterator<IModel<T>>
                private final Iterator<? extends T> items;						/ iterator over echte items,
                private final IDataProvider<T> dataProvider;					/ geeft 
                private final long max;
                private long index;

               	public ModelIterator(IDataProvider<T> dataProvider, long offset, long count)
                {
                        this.dataProvider = dataProvider;
                        max = count;

                        items = count > 0 ? dataProvider.iterator(offset, count) : null;
                }
               	@Override
                public IModel<T> next()
                {
                        index++;
                        return dataProvider.model(items.next());		/ deze wordt later called	, maar geeft een model om echt item	,
																		/ dus daarom is ModelIterator<T> implements Iterator<IModel<T>> inderdaad	,
                }


/ 7	. 

/ theory	,

public class DefaultItemReuseStrategy implements IItemReuseStrategy
	@Override
	public <T> Iterator<Item<T>> getItems(final IItemFactory<T> factory, final Iterator<IModel<T>> newModels,...)
	{
		return new Iterator<Item<T>>()
		{
			private int index = 0;

			@Override
			public boolean hasNext()
			{
				return newModels.hasNext();
			}

			@Override
			public Item<T> next()
			{
				IModel<T> model = newModels.next();
				Item<T> item = factory.newItem(index, model);		/ wordt later called, maar hierom is Iterator<Item<T>>
				index++;
				return item;
			}

		};

/ 7	. 

/ we zien dat getViewSize() inderdaad de provider's size() calls	,

/ stack
/s
	SortableContactDataProvider_my.size() line: 128	
		return filterContacts(getContactsDB().getIndex(getSort())).size();				/ db query	,
/cb
	DataTable$DefaultDataGridView(DataViewBase<T>).internalGetItemCount() line: 142	
		return internalGetDataProvider().size();
/cb
	DataTable$DefaultDataGridView(AbstractPageableView<T>).getItemCount() line: 235	
		long count = internalGetItemCount();
/cb
	DataTable$DefaultDataGridView(AbstractPageableView<T>).getRowCount() line: 216	
		return getItemCount();
/cb
	DataTable$DefaultDataGridView(AbstractPageableView<T>).getViewSize() line: 314	
		return Math.min(getItemsPerPage(), getRowCount() - getFirstItemOffset());
/cb
	DataTable$DefaultDataGridView(AbstractPageableView<T>).getItemModels() line: 99	
		long offset = getFirstItemOffset();
		long size = getViewSize();
/cb
	DataTable$DefaultDataGridView(RefreshingView<T>).onPopulate() line: 93	
		Iterator<IModel<T>> models = getItemModels();															<-
		Iterator<Item<T>> items = getItemReuseStrategy().getItems(newItemFactory(), models,
			getItems());
		removeAll();
		addItems(items);
/cb
	DataTable$DefaultDataGridView(AbstractRepeater).onBeforeRender() line: 124	
	DataTable$DefaultDataGridView(AbstractPageableView<T>).onBeforeRender() line: 115	
	DataTable$DefaultDataGridView(Component).internalBeforeRender() line: 949	
	DataTable$DefaultDataGridView(Component).beforeRender() line: 1017	
	WebMarkupContainer(MarkupContainer).onBeforeRenderChildren() line: 1866	
	WebMarkupContainer(Component).onBeforeRender() line: 3877	
	WebMarkupContainer(Component).internalBeforeRender() line: 949	
	WebMarkupContainer(Component).beforeRender() line: 1017	
	DataTable<T,S>(MarkupContainer).onBeforeRenderChildren() line: 1866	
	DataTable<T,S>(Component).onBeforeRender() line: 3877	
	DataTable<T,S>(Component).internalBeforeRender() line: 949	
	DataTable<T,S>(Component).beforeRender() line: 1017	
	FilterForm<T>(MarkupContainer).onBeforeRenderChildren() line: 1866	
	FilterForm<T>(Component).onBeforeRender() line: 3877	
	FilterForm<T>(Form<T>).onBeforeRender() line: 1807	
	FilterForm<T>(Component).internalBeforeRender() line: 949	
	FilterForm<T>(Component).beforeRender() line: 1017	
	DataTableFilterToolbarPage_my(MarkupContainer).onBeforeRenderChildren() line: 1866	
	DataTableFilterToolbarPage_my(Component).onBeforeRender() line: 3877	
	DataTableFilterToolbarPage_my(Page).onBeforeRender() line: 801	
	DataTableFilterToolbarPage_my(Component).internalBeforeRender() line: 949	
	DataTableFilterToolbarPage_my(Component).beforeRender() line: 1017	
	DataTableFilterToolbarPage_my(Component).internalPrepareForRender(boolean) line: 2215	
	DataTableFilterToolbarPage_my(Page).internalPrepareForRender(boolean) line: 242	
	DataTableFilterToolbarPage_my(Component).render() line: 2304	
	DataTableFilterToolbarPage_my(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ 7	. 

/ TODO ModelIterator return iterator over echte items	,

/c
/ stack	,
	SortableContactDataProvider_my.iterator(long, long) line: 59	
		List<Contact> contactsFound = getContactsDB().getIndex(getSort());		/ list van echte items	, 
		return filterContacts(contactsFound).									/ iterator over de echte items,
			subList((int)first, (int)(first + count)).
			iterator();
/cb
	DataViewBase$ModelIterator<T>.<init>(IDataProvider<T>, long, long) line: 107	
			this.dataProvider = dataProvider;
			max = count;

			items = count > 0 ? dataProvider.iterator(offset, count) : null;	/ iterator over de echte items	, calls db query	,
/cb
	DataTable$DefaultDataGridView(DataViewBase<T>).getItemModels(long, long) line: 74	
		return new ModelIterator<T>(internalGetDataProvider(), offset, count);
/cb
	DataTable$DefaultDataGridView(AbstractPageableView<T>).getItemModels() line: 101	
		long offset = getFirstItemOffset();
		long size = getViewSize();

		Iterator<IModel<T>> models = getItemModels(offset, size);					<-
/cb
	DataTable$DefaultDataGridView(RefreshingView<T>).onPopulate() line: 93	
		Iterator<IModel<T>> models = getItemModels();								<-
		Iterator<Item<T>> items = getItemReuseStrategy().getItems(newItemFactory(), models,
			getItems());
		removeAll();
		addItems(items);
/cb
	DataTable$DefaultDataGridView(AbstractRepeater).onBeforeRender() line: 124	
	DataTable$DefaultDataGridView(AbstractPageableView<T>).onBeforeRender() line: 115	
	DataTable$DefaultDataGridView(Component).internalBeforeRender() line: 949	
	DataTable$DefaultDataGridView(Component).beforeRender() line: 1017	
	WebMarkupContainer(MarkupContainer).onBeforeRenderChildren() line: 1866	
	WebMarkupContainer(Component).onBeforeRender() line: 3877	
	WebMarkupContainer(Component).internalBeforeRender() line: 949	
	WebMarkupContainer(Component).beforeRender() line: 1017	
	DataTable<T,S>(MarkupContainer).onBeforeRenderChildren() line: 1866	
	DataTable<T,S>(Component).onBeforeRender() line: 3877	
	DataTable<T,S>(Component).internalBeforeRender() line: 949	
	DataTable<T,S>(Component).beforeRender() line: 1017	
	FilterForm<T>(MarkupContainer).onBeforeRenderChildren() line: 1866	
	FilterForm<T>(Component).onBeforeRender() line: 3877	
	FilterForm<T>(Form<T>).onBeforeRender() line: 1807	
	FilterForm<T>(Component).internalBeforeRender() line: 949	
	FilterForm<T>(Component).beforeRender() line: 1017	
	DataTableFilterToolbarPage_my(MarkupContainer).onBeforeRenderChildren() line: 1866	
	DataTableFilterToolbarPage_my(Component).onBeforeRender() line: 3877	
	DataTableFilterToolbarPage_my(Page).onBeforeRender() line: 801	
	DataTableFilterToolbarPage_my(Component).internalBeforeRender() line: 949	
	DataTableFilterToolbarPage_my(Component).beforeRender() line: 1017	
	DataTableFilterToolbarPage_my(Component).internalPrepareForRender(boolean) line: 2215	
	DataTableFilterToolbarPage_my(Page).internalPrepareForRender(boolean) line: 242	
	DataTableFilterToolbarPage_my(Component).render() line: 2304	
	DataTableFilterToolbarPage_my(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ 7	. 

/ we debug verder	,
/s
DataTable$DefaultDataGridView(RefreshingView<T>).onPopulate() line: 94	
		Iterator<IModel<T>> models = getItemModels();
/d
models	AbstractPageableView$CappedIteratorAdapter<T>  (id=8874)	
	delegate	DataViewBase$ModelIterator<T>  (id=8863)	
		dataProvider	SortableContactDataProvider_my  (id=8826)	/ deze zal hieronder de model geven van de echte items in this.items	,	
		index	0	
		items	ArrayList$SubList$1  (id=8872)	
		max	8	
	index	0	
	max	8	
		Iterator<Item<T>> items = getItemReuseStrategy().getItems(newItemFactory(), models,
			getItems());
		removeAll();
		addItems(items);
/s
DataTable$DefaultDataGridView(RefreshingView<T>).addItems(Iterator<Item<T>>) line: 186	
		int index = 0;
		while (items.hasNext())
		{
			Item<T> item = items.next();
/s
DefaultItemReuseStrategy$1.hasNext() line: 68	
/=
	@Override
	public <T> Iterator<Item<T>> getItems(final IItemFactory<T> factory, final Iterator<IModel<T>> newModels,...) 
	{
		return new Iterator<Item<T>>()
		{
			private int index = 0;

			@Override
			public boolean hasNext()
			{
				return newModels.hasNext(); 		<-
/s
DataViewBase$ModelIterator<T>.hasNext() line: 125	
			return items != null && items.hasNext() && (index < max);		/ items is iterator over echte items	,
/t
DataTable$DefaultDataGridView(RefreshingView<T>).addItems(Iterator<Item<T>>) line: 189	
		while (items.hasNext())
/d
		{
			Item<T> item = items.next();
/s
DefaultItemReuseStrategy$1.next() line: 74	
/=
	public <T> Iterator<Item<T>> getItems(final IItemFactory<T> factory,
		final Iterator<IModel<T>> newModels, Iterator<Item<T>> existingItems)
	{
		return new Iterator<Item<T>>()
		{
			private int index = 0;

			@Override
			public boolean hasNext()
			{
				return newModels.hasNext();
			}

			@Override
			public Item<T> next()
			{
				IModel<T> model = newModels.next();					<-
/s
DataViewBase$ModelIterator<T>.next() line: 134	
			index++;
			return dataProvider.model(items.next());		/ hier wordt het model create van de echte item	,
/s
SortableContactDataProvider_my.model(Contact) line: 137	
		return new DetachableContactModel(object);
/t
DefaultItemReuseStrategy$1.next() line: 75	
/=
	@Override
	public <T> Iterator<Item<T>> getItems(final IItemFactory<T> factory,
		final Iterator<IModel<T>> newModels, Iterator<Item<T>> existingItems)
	{
		return new Iterator<Item<T>>()
		{
			private int index = 0;

			@Override
			public boolean hasNext()
			{
				return newModels.hasNext();
			}

			@Override
			public Item<T> next()
			{
				IModel<T> model = newModels.next();			/ data provider has put model around echte item	above,	is row model	,
/d
				Item<T> item = factory.newItem(index, model);
/s
RefreshingView$1.newItem(int, IModel<T>) line: 112	
/=
		return new IItemFactory<T>()
		{
			@Override
			public Item<T> newItem(int index, IModel<T> model)
			{
				String id = RefreshingView.this.newChildId();
1
				Item<T> item = RefreshingView.this.newItem(id, index, model);	/ model is row model rondom echte item	,
/s
DataTable$DefaultDataGridView(AbstractDataGridView<T>).newItem(String, int, IModel<T>) line: 99	
		return newRowItem(id, index, model);
/t
RefreshingView$1.newItem(int, IModel<T>) line: 114	
/=
		return new IItemFactory<T>()
		{
			@Override
			public Item<T> newItem(int index, IModel<T> model)
			{
				String id = RefreshingView.this.newChildId();
				Item<T> item = RefreshingView.this.newItem(id, index, model);	/ model is row model rondom echte item	,
/d																					/ item is row item	,	
				RefreshingView.this.populateItem(item);			/ creates cell items	, 
																/ adds as child Label with property model, with row item + property uit column	, 
																/ gaat buiten provider om	, provider alleen row models	,
/s
DataTable$DefaultDataGridView(AbstractDataGridView<T>).populateItem(Item<T>) line: 145	
		RepeatingView cells = new RepeatingView(CELL_REPEATER_ID);
		item.add(cells);											/ repeating view "cells" is row item's child	,

		int populatorsNumber = populators.size();
		for (int i = 0; i < populatorsNumber; i++)
		{
			ICellPopulator<T> populator = populators.get(i);
			IModel<ICellPopulator<T>> populatorModel = new Model<>(populator);									/ TODO
			Item<ICellPopulator<T>> cellItem = newCellItem(cells.newChildId(), i, populatorModel);
			cells.add(cellItem);

			populator.populateItem(cellItem, CELL_ITEM_ID, item.getModel()); / item is row item	,
/s
DataTableFilterToolbarPage_my$1(PropertyColumn<T,S>).populateItem(Item<ICellPopulator<T>>, String, IModel<T>) line: 97	
		item.add(new Label(componentId, getDataModel(rowModel)));
/s
DataTableFilterToolbarPage_my$1(PropertyColumn<T,S>).getDataModel(IModel<T>) line: 118	
		PropertyModel<?> propertyModel = new PropertyModel<>(rowModel, propertyExpression);	/ property column's propertyExpression is bijv "id"	,
		return propertyModel;


/ Einde DATAPROVIDER

/ 7	. 

/ In 1.4 moeten we	voor de localizer een 2de arg geven	, 
		new StringResourceModel("createEntity", EvoEditPage.this,new Model<EvoEditPage<T>>(EvoEditPage.this));

/ in 7 hoeft dat niet	, daar is 2de arg explicit component, die de component vervangt waar het model het model van is	, als je geen 2de arg geeft, is 
/ In 7, Als we de property in ResourcePage.properties, dan geeft ComponentStringResourceLoader de value	, als we de property in RepeaterApplication.properties, dan ClassStringResourceLoader 	, 
/ De ComponentStringResourceLoader 	, 
	public String loadStringResource(final Component component, final String key,
		for (Component current : getComponentTrail(component))
/ we maken zelf een ResourceLabel	, alleen om ResourceLabel.properties te kunnen maken	,
/ hij probeert eerst ResourcePage, daarna ResourceLabel	, dat lazen we ook in het boek, als een property in de container of parent, dan neemt hij die	, 
/ Als we een Label met wicket id "orderStatus"	, dan kunnen we in 
$ vi ResourcePage.properties
0=...
/ of	, 
orderStatus=...
/ Maar als we 	, kunnen we alleen	,
$ vi ResourceLabel.properties 
0=...

/ RESOURCES 1.4

/s
Label.onComponentTagBody(MarkupStream, ComponentTag) line: 114	
		replaceComponentTagBody(markupStream, openTag, getDefaultModelObjectAsString());
/s
Label(Component).getDefaultModelObjectAsString() line: 1748	
		return getDefaultModelObjectAsString(getDefaultModelObject());
/s
Label(Component).getDefaultModelObject() line: 1725	
		final IModel<?> model = getDefaultModel();

model	StringResourceModel$AssignmentWrapper  (id=18930)	
	component	Label  (id=18901)	
	this$0	StringResourceModel  (id=18931)	
		attached	false	
		component	IncoTermPage  (id=18963)	
		resourceKey	"undeleteEntity" (id=18971)	

			return model.getObject();
/s
StringResourceModel$AssignmentWrapper.getObject() line: 241	
			if (StringResourceModel.this.component != null)
			{
				return StringResourceModel.this.getObject();
/s
StringResourceModel(LoadableDetachableModel).getObject() line: 117	
			transientModelObject = load();
/s
StringResourceModel.load() line: 637	
		return getString();
/s
StringResourceModel.getString() line: 475	
		final Localizer localizer = getLocalizer();
			value = localizer.getString(getResourceKey(), component, model, defaultValue);
/s
Localizer.getString(String, Component, IModel<?>, String) line: 311	
key	"undeleteEntity" (id=18971)	
model	Model  (id=18965)	
	object	IncoTermPage  (id=18963)	

		String value = getStringIgnoreSettings(key, component, model, null);
/s
Localizer.getStringIgnoreSettings(String, Component, IModel<?>, String) line: 188	
			Iterator<IStringResourceLoader> iter = getStringResourceLoaders();
			while (iter.hasNext())
			{
				IStringResourceLoader loader = iter.next();
				value = loader.loadStringResource(component, key);
/s
ComponentStringResourceLoader.loadStringResource(Component, String) line: 212	
		for (Component current : getComponentTrail(component))

			final Class<?> clazz = current.getClass();
clazz	Class (com.mpobjects.oms.view.wicket.incoterm.IncoTermPage) (id=9708)	

			string = loadStringResource(clazz, key, locale, style);
key	"undeleteEntity" (id=18971)	
clazz	Class (com.mpobjects.oms.view.wicket.incoterm.IncoTermPage) (id=9708)	
/s
ComponentStringResourceLoader.loadStringResource(Class<?>, String, Locale, String) line: 117	
			// Iterator over all the combinations
			ResourceNameIterator iter = new ResourceNameIterator(path, style, locale, null);
			while (iter.hasNext())
			{
				String newPath = iter.next();
com/mpobjects/oms/view/wicket/incoterm/IncoTermPage_en_GB.
				final Properties props = propertiesFactory.load(clazz, newPath);
/ MORGENOCHTEND Afmaken	, ResourcePage_en_GB., ResourcePage_en., ResourcePage.

/ Einde RESOURCES 1.4


/ Einde RESOURCES

/ WICKETTESTER RENDER PAGE

/ proj wicket-tester-step-by-step
/ prog FrmPage, FrmTest

public class FrmTest {
	
	private WicketTester wicketTester;
	
	@Before
	public void init(){
		wicketTester=new WicketTester();
		wicketTester.startPage(new FrmPage());
	}

/ 13	. 

/ een MockApplication is nog steeds een WebApplication	, 

/stack
/s
	MockApplication(Application).<init>() line: 1029	
	MockApplication(WebApplication).<init>() line: 186	
	MockApplication.<init>() line: 39	
	WicketTester(BaseWicketTester).<init>() line: 209	
		this(new MockApplication());
/cb
	WicketTester.<init>() line: 181	
	FrmTest.init() line: 19	
		wicketTester=new WicketTester();
/cb
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 57	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 606	
	FrameworkMethod$1.runReflectiveCall() line: 47	
	FrameworkMethod$1(ReflectiveCallable).run() line: 12	
	FrameworkMethod.invokeExplosively(Object, Object...) line: 44	
	RunBefores.evaluate() line: 24	
	BlockJUnit4ClassRunner(ParentRunner<T>).runLeaf(Statement, Description, RunNotifier) line: 271	
	BlockJUnit4ClassRunner.runChild(FrameworkMethod, RunNotifier) line: 70	
	BlockJUnit4ClassRunner.runChild(Object, RunNotifier) line: 50	
	ParentRunner$3.run() line: 238	
	ParentRunner$1.schedule(Runnable) line: 63	
	BlockJUnit4ClassRunner(ParentRunner<T>).runChildren(RunNotifier) line: 236	
	ParentRunner<T>.access$000(ParentRunner, RunNotifier) line: 53	
	ParentRunner$2.evaluate() line: 229	
	BlockJUnit4ClassRunner(ParentRunner<T>).run(RunNotifier) line: 309	
	JUnit4TestClassReference(JUnit4TestReference).run(TestExecution) line: 50	
	TestExecution.run(ITestReference[]) line: 38	
	RemoteTestRunner.runTests(String[], String, TestExecution) line: 467	
	RemoteTestRunner.runTests(TestExecution) line: 683	
	RemoteTestRunner.run() line: 390	
	RemoteTestRunner.main(String[]) line: 197	

/c
/ stack
/s
	MockServletContext.<init>(Application, String) line: 87	
		String workFolder = System.getProperty("wicket.tester.work.folder", "target/work/");
		File file = new File(workFolder);
"file.getAbsolutePath()"	/home/eric/Devel/Java/Wicket/wicket-examples-step-by-step/target/work 

	WicketTester(BaseWicketTester).<init>(WebApplication, ServletContext, boolean) line: 299	
		servletContext = servletCtx != null ? servletCtx
			// If it's provided from the container it's not necessary to mock. 
			: !init && application.getServletContext() != null ? application.getServletContext()
			: new MockServletContext(application, null);												<-
/cb
	WicketTester(BaseWicketTester).<init>(WebApplication, ServletContext) line: 266	
		this(application, servletCtx, true);
/cb
	WicketTester(BaseWicketTester).<init>(WebApplication) line: 239	
		this(application, (MockServletContext)null);
/cb
	WicketTester(BaseWicketTester).<init>() line: 209	
		this(new MockApplication());
/cb
	WicketTester.<init>() line: 181	
	FrmTest.init() line: 19	

/ debug	, 
/s
WicketTester(BaseWicketTester).<init>(WebApplication, ServletContext, boolean) line: 340	
		servletContext = servletCtx != null ? servletCtx
			// If it's provided from the container it's not necessary to mock. 
			: !init && application.getServletContext() != null ? application.getServletContext()
			: new MockServletContext(application, null);
/d
		httpSession = new MockHttpSession(servletContext);
...
		// If it's provided from the container it's not necessary to set again and init.
		if (init)
		{
			application.setServletContext(servletContext);
			// initialize the application
			application.initApplication();
/s
MockApplication(Application).initApplication() line: 948	
		internalInit();
/s
MockApplication.internalInit() line: 71	
		super.internalInit();
/s
MockApplication(WebApplication).internalInit() line: 723	
		super.internalInit();
/s
MockApplication(Application).internalInit() line: 812	
/ TODO																			<-
/t
MockApplication(WebApplication).internalInit() line: 725	
		super.internalInit();
/d
		getResourceSettings().getResourceFinders().add(
			new WebApplicationPath(getServletContext(), ""));
		getResourceSettings().getResourceFinders().add(
			new ClassPathResourceFinder(META_INF_RESOURCES));
this	MockApplication  (id=162)	
	resourceSettings	ResourceSettings  (id=292)	
		resourceFinders	ArrayList<E>  (id=370)	
			elementData	Object[10]  (id=699)	
				[0]	ClassPathResourceFinder  (id=710)		[classpath]
				[1]	WebApplicationPath  (id=711)			[webapppath: /]
				[2]	ClassPathResourceFinder  (id=712)		[classpath: META-INF/resources/]
		stringResourceLoaders	ArrayList<E>  (id=414)	
			elementData	Object[6]  (id=632)	
				[0]	ComponentStringResourceLoader  (id=635)	
				[1]	PackageStringResourceLoader  (id=636)	
				[2]	ClassStringResourceLoader  (id=637)	
				[3]	ValidatorStringResourceLoader  (id=638)	
				[4]	InitializerStringResourceLoader  (id=646)	

		// Add resolver for automatically resolving HTML links
		getPageSettings().addComponentResolver(new AutoLinkResolver());
		getPageSettings().addComponentResolver(new AutoLabelResolver());
		getPageSettings().addComponentResolver(new AutoLabelTextResolver());
this	MockApplication  (id=162)	
	pageSettings	PageSettings  (id=239)	
		componentResolvers	ArrayList<E>  (id=435)	
			elementData	Object[15]  (id=437)	
				[0]	HtmlHeaderResolver  (id=243)	
				[1]	WicketLinkTagHandler  (id=440)	
				[2]	WicketMessageResolver  (id=441)	
				[3]	FragmentResolver  (id=442)	
				[4]	RelativePathPrefixHandler  (id=443)	
				[5]	EnclosureHandler  (id=451)	
				[6]	InlineEnclosureHandler  (id=452)	
				[7]	WicketMessageTagHandler  (id=456)	
				[8]	WicketContainerResolver  (id=459)	
				[9]	AutoLinkResolver  (id=460)	
				[10]	AutoLabelResolver  (id=464)	
				[11]	AutoLabelTextResolver  (id=467)	

		setPageRendererProvider(new WebPageRendererProvider());
		setSessionStoreProvider(new WebSessionStoreProvider());
		setAjaxRequestTargetProvider(new DefaultAjaxRequestTargetProvider());

		getAjaxRequestTargetListeners().add(new AjaxEnclosureListener());

		// Configure the app.
		configure();
/t
MockApplication.internalInit() line: 74	
		super.internalInit();
/d
		// set page and session store providers
		setSessionStoreProvider(new MockSessionStoreProvider());	/ Deze overrides die we zonet hebben gedaan  	<-
		setPageManagerProvider(new MockPageManagerProvider());


/ intermezzo

public abstract class WebApplication extends Application
        private static class WebSessionStoreProvider implements IProvider<ISessionStore>
        {
                @Override
                public ISessionStore get()
                {
                        return new HttpSessionStore();
                }
        }

public class MockApplication extends WebApplication
	private static class MockSessionStoreProvider implements IProvider<ISessionStore>
	{
		@Override
		public ISessionStore get()
		{
			return new MockSessionStore();
		}
	}


/ Einde intermezzo

/t
MockApplication(Application).initApplication() line: 949	
		internalInit();
/d
		initializeComponents();
/s
MockApplication(Application).initializeComponents() line: 643	
		// now call any initializers we read
		initInitializers();
/s
MockApplication(Application).initInitializers() line: 741	
		for (IInitializer serviceLoaderInitializer : serviceLoaderInitializers) { 
/ Wicket core library initializer
/ DebugBar initializer
/ Wicket extensions initializer
			serviceLoaderInitializer.init(this);
/s
Initializer.init(Application) line: 40	
		// Register listener interfaces explicitly (even though they implicitly
		// register when loaded) because deserialization of an object that
		// implements an interface does not load the interfaces it implements!
		IBehaviorListener.INTERFACE.register();
		IFormSubmitListener.INTERFACE.register();
		ILinkListener.INTERFACE.register();
		IOnChangeListener.INTERFACE.register();
		IResourceListener.INTERFACE.register();
/t
MockApplication(Application).initInitializers() line: 741	
		for (IInitializer serviceLoaderInitializer : serviceLoaderInitializers) { / Wicket core library initializer
			serviceLoaderInitializer.init(this);
/d
			initializers.add(serviceLoaderInitializer);
/t
MockApplication(Application).initApplication() line: 950	
		initializeComponents();
/d
		init();
/ niets	,
/t
WicketTester(BaseWicketTester).<init>(WebApplication, ServletContext, boolean) line: 345	
			application.initApplication();
/d
		// reconfigure application for the test environment
		application.setPageRendererProvider(new LastPageRecordingPageRendererProvider(
			application.getPageRendererProvider()));		/ org.apache.wicket.protocol.http.WebApplication$WebPageRendererProvider@d5b55cf
		application.setRequestCycleProvider(new TestRequestCycleProvider(
			application.getRequestCycleProvider()));		/ org.apache.wicket.Application$DefaultRequestCycleProvider@4964784d

		IPageManagerProvider pageManagerProvider = newTestPageManagerProvider(); / org.apache.wicket.util.tester.BaseWicketTester$TestPageManagerProvider@1431b78b
		if (pageManagerProvider != null)
		{
			application.setPageManagerProvider(pageManagerProvider);
		}

/ intermezzo

public class BaseWicketTester
	private static class TestPageManagerProvider implements IPageManagerProvider
	{
		@Override
		public IPageManager get(IPageManagerContext pageManagerContext)
		{
			return new MockPageManager();
		}
	}

/ Einde intermezzo

		// prepare session
		setupNextRequestCycle();
/s
WicketTester(BaseWicketTester).setupNextRequestCycle() line: 410	
		request = new MockHttpServletRequest(application, httpSession, servletContext);
this	WicketTester  (id=157)	
	application	MockApplication  (id=162)	
	httpSession	MockHttpSession  (id=236)	
	servletContext	MockServletContext  (id=189)	
/s
MockHttpServletRequest.initialize() line: 1180	
		this.application = application;
		this.session = session;
		this.context = context;
		initialize();
/s
MockHttpServletRequest.initialize() line: 1180	
		authType = null;
		method = "post";
		cookies.clear();
		setDefaultHeaders();
/s
MockHttpServletRequest.setDefaultHeaders() line: 1618	
		headers.clear();
		addHeader("Accept", "text/xml,application/xml,application/xhtml+xml,"
			+ "text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5");
		addHeader("Accept-Charset", "ISO-8859-1,utf-8;q=0.7,*;q=0.7");
		Locale l = Locale.getDefault();
		addHeader("Accept-Language", l.getLanguage().toLowerCase() + "-"
			+ l.getCountry().toLowerCase() + "," + l.getLanguage().toLowerCase() + ";q=0.5");
		addHeader("User-Agent",
			"Mozilla/5.0 (Windows; U; Windows NT 5.0; en-US; rv:1.7) Gecko/20040707 Firefox/0.9.2");
/t
MockHttpServletRequest.initialize() line: 1180	
		setDefaultHeaders();
/d
		path = null;
		url = null;
		characterEncoding = "UTF-8";
		parameters.clear();
		attributes.clear();
		post.reset();
/t
WicketTester(BaseWicketTester).setupNextRequestCycle() line: 411	
		request = new MockHttpServletRequest(application, httpSession, servletContext);			/ de request	,
/d
		request.setURL(request.getContextPath() + request.getServletPath() + "/");
/context/servlet/
		// assign protocol://host:port to next request unless the last request was ajax
		final boolean assignBaseLocation = lastRequest != null &&
/NEE
			lastRequest.getHeader("Wicket-Ajax") == null;

		response = new MockHttpServletResponse(request);
/s
MockHttpServletResponse.initialize() line: 433	
		this.servletRequest = servletRequest;
		initialize();
/s
MockHttpServletResponse.<init>(MockHttpServletRequest) line: 93	
		cookies.clear();
		headers.clear();
		errorMessage = null;
		redirectLocation = null;
		status = HttpServletResponse.SC_OK;
		characterEncoding = "UTF-8";
		locale = null;

		byteStream = new ByteArrayOutputStream();
		servletStream = new ServletOutputStream()
		{
			@Override
			public void write(int b)
			{
				byteStream.write(b);
			}
		};
...
/t
WicketTester(BaseWicketTester).setupNextRequestCycle() line: 477	
		response = new MockHttpServletResponse(request);
/d
		ServletWebRequest servletWebRequest = newServletWebRequest();
/s
WicketTester(BaseWicketTester).newServletWebRequest() line: 537	
		return (ServletWebRequest)application.newWebRequest(request, request.getFilterPrefix());
/s
MockApplication(WebApplication).newWebRequest(HttpServletRequest, String) line: 548	
/=
	public WebRequest newWebRequest(HttpServletRequest servletRequest, final String filterPath)
servletRequest	MockHttpServletRequest  (id=976)	
filterPath	"servlet" (id=1023)	

		return new ServletWebRequest(servletRequest, filterPath);
/s
ServletWebRequest.<init>(HttpServletRequest, String, Url) line: 112	
/=
	public ServletWebRequest(HttpServletRequest httpServletRequest, String filterPrefix, Url url)
httpServletRequest	MockHttpServletRequest  (id=976)	
filterPrefix	"servlet" (id=1023)	
url	null	
		this.httpServletRequest = httpServletRequest;
		this.filterPrefix = filterPrefix;
			this.url = getContextRelativeUrl(httpServletRequest.getRequestURI(), filterPrefix);
/ TODO
/t
WicketTester(BaseWicketTester).setupNextRequestCycle() line: 478	
		ServletWebRequest servletWebRequest = newServletWebRequest();
/d
		requestCycle = application.createRequestCycle(servletWebRequest, newServletWebResponse(servletWebRequest));
		ThreadContext.setRequestCycle(requestCycle);
/ TODO
		if (session == null)
		{
			newSession();
/s
WicketTester(BaseWicketTester).newSession() line: 548	
		// the following will create a new session and put it in the thread context
		session = Session.get();
/s
Session.get() line: 169	
			return Application.get().fetchCreateAndSetSession(RequestCycle.get());
/s
MockApplication(Application).fetchCreateAndSetSession(RequestCycle) line: 1709	
		Session session = getSessionStore().lookup(requestCycle.getRequest());
null
		if (session == null)
		{
			session = newSession(requestCycle.getRequest(), requestCycle.getResponse());
/s
MockApplication(WebApplication).newSession(Request, Response) line: 641	
		return new WebSession(request);
/s
WebSession.<init>(Request) line: 49	
		super(request);
/s
WebSession(Session).<init>(Request) line: 186	
/ TODO
/t
MockApplication(Application).fetchCreateAndSetSession(RequestCycle) line: 1716	
			session = newSession(requestCycle.getRequest(), requestCycle.getResponse());
			ThreadContext.setSession(session);
/d
			internalGetPageManager().newSessionCreated();
/s
MockApplication(Application).internalGetPageManager() line: 1543	
				if (pageManager == null)
				{
					pageManager = pageManagerProvider.get(getPageManagerContext());
/s
BaseWicketTester$TestPageManagerProvider.get(IPageManagerContext) line: 2884	
			return new MockPageManager();
/t
/s
MockPageManager.newSessionCreated() line: 63	
		pages.clear();
/t
MockApplication(Application).fetchCreateAndSetSession(RequestCycle) line: 1723	
			internalGetPageManager().newSessionCreated();
/d
			sessionListeners.onCreated(session);
		return session;
/t
FrmTest.init() line: 20	
		wicketTester=new WicketTester();
/d
		wicketTester.startPage(new FrmPage());
/s
WicketTester(BaseWicketTester).startPage(T) line: 904	
		return (T)startPage(new PageProvider(page));
/s
PageProvider.<init>(IRequestablePage) line: 159	
		pageInstance = page;
		pageId = page.getPageId();				0
		renderCount = page.getRenderCount();	0
/t
/s
	/**
	 * Renders the page specified by given {@link IPageProvider}. After render the page instance can
	 * be retrieved using {@link #getLastRenderedPage()} and the rendered document will be available
	 * in {@link #getLastResponse()}.
	 * 
	 * Depending on {@link RenderStrategy} invoking this method can mean that a redirect will happen
	 * before the actual render.
	 *
WicketTester(BaseWicketTester).startPage(IPageProvider) line: 880	
		// prepare request
		request.setURL(request.getContextPath() + request.getServletPath() + "/");
		IRequestHandler handler = new RenderPageRequestHandler(pageProvider);
		// process request
		processRequest(request, handler);
/s
	/**
	 * Process the request. This is a fairly central function and is almost always invoked for
	 * executing the request.
	 * <p>
	 * You may subclass processRequest it, to monitor or change any pre-configured value. Request
	 * headers can be configured more easily by calling {@link #addRequestHeader(String, String)}.
	 * 
WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler, boolean) line: 686	
		applyRequest();
/s
WicketTester(BaseWicketTester).applyRequest() line: 2538	
		if (useRequestUrlAsBase)
		{
			requestCycle.getUrlRenderer().setBaseUrl(req.getUrl());
/s
RequestCycle.getUrlRenderer() line: 177	
			urlRenderer = newUrlRenderer();
/s
RequestCycle.newUrlRenderer() line: 152	
		// All URLs will be rendered relative to current request (can be overridden afterwards)
		return new UrlRenderer(getRequest());
/s
UrlRenderer.<init>(Request) line: 64	
		this.request = request;
		baseUrl = request.getClientUrl();
/t
WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler, boolean) line: 714	
		applyRequest();
/d
			if (!requestCycle.processRequestAndDetach())
...
/s
/ stack	,
Thread [main] (Suspended)	
	BaseWicketTester$LastPageRecordingPageRendererProvider$1.respond(RequestCycle) line: 2747	
/=
public class BaseWicketTester
	private class LastPageRecordingPageRendererProvider implements IPageRendererProvider
		@Override
		public PageRenderer get(final RenderPageRequestHandler handler)
		{
			return new PageRenderer(handler)								/= BaseWicketTester$LastPageRecordingPageRendererProvider$1
			{
				@Override
				public void respond(RequestCycle requestCycle)
				{
					delegate.get(handler).respond(requestCycle);			<-
/cb
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
/ this org.apache.wicket.core.request.handler.RenderPageRequestHandler@2a18fdd7
		PageRenderer renderer = Application.get().getPageRendererProvider().get(this); / org.apache.wicket.util.tester.BaseWicketTester$LastPageRecordingPageRendererProvider$1@7f6673fa
		renderer.respond((RequestCycle)requestCycle);
/cb
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
				handler.respond(RequestCycle.this);
/cb
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
			respond(handler);
/cb
	RequestCycle.execute(IRequestHandler) line: 265	
			requestHandlerExecutor.execute(handler);
/cb
	RequestCycle.processRequest() line: 222	
			IRequestHandler handler = resolveRequestHandler(); / org.apache.wicket.core.request.handler.RenderPageRequestHandler@2a18fdd7
				execute(handler);
/cb
	RequestCycle.processRequestAndDetach() line: 293	
			result = processRequest();
/cb
	WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler, boolean) line: 718	
			if (!requestCycle.processRequestAndDetach())
/cb
	WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler) line: 657	
		return processRequest(request, forcedRequestHandler, false);
/cb
	WicketTester(BaseWicketTester).startPage(IPageProvider) line: 887	
		// process request
		processRequest(request, handler);
/cb
	WicketTester(BaseWicketTester).startPage(T) line: 904	
		return (T)startPage(new PageProvider(page));

	FrmTest.init() line: 20	
/ debug	,
/s
BaseWicketTester$LastPageRecordingPageRendererProvider$1.respond(RequestCycle) line: 2747	
/=
public class BaseWicketTester
	private class LastPageRecordingPageRendererProvider implements IPageRendererProvider
		@Override
		public PageRenderer get(final RenderPageRequestHandler handler)
		{
			return new PageRenderer(handler)		/= BaseWicketTester$LastPageRecordingPageRendererProvider$1
			{
				@Override
				public void respond(RequestCycle requestCycle)
				{
this	BaseWicketTester$LastPageRecordingPageRendererProvider$1  (id=1229)	
	renderPageRequestHandler	RenderPageRequestHandler  (id=1194)	
	this$1	BaseWicketTester$LastPageRecordingPageRendererProvider  (id=921)	
		delegate	WebApplication$WebPageRendererProvider  (id=806)	
		lastPage	null	
		this$0	WicketTester  (id=157)	
	val$handler	RenderPageRequestHandler  (id=1194)	
		pageProvider	PageProvider  (id=1177)	
		redirectPolicy	RenderPageRequestHandler$RedirectPolicy  (id=1199)	

					delegate.get(handler).respond(requestCycle);		<- 	Dus toch gewoon	, maar hierna moeten we in deze method lastRenderedPage set	,
/s
WebPageRenderer.respond(RequestCycle) line: 236	
			Url beforeRenderUrl = requestCycle.mapUrlFor(getRenderPageRequestHandler());
wicket/page?0
			// redirect to buffer
			BufferedWebResponse response = renderPage(beforeRenderUrl, requestCycle);
...
/s
FrmPage$1(Component).renderComponentTag(ComponentTag) line: 4034	
			// Write the tag
			tag.writeOutput(getResponse(), !needToRenderTag(null),
				getMarkup().getMarkupResourceStream().getWicketNamespace());
/s
FrmPage$1(Component).getResponse() line: 1825	
		return getRequestCycle().getResponse();
/s
FrmPage$1(Component).getRequestCycle() line: 1817	
		return RequestCycle.get();								/ 'n global	, 
/t
/s
RequestCycle.getResponse() line: 799	
		return activeResponse;
/t
/s
ComponentTag.writeOutput(Response, boolean, String) line: 722	
		response.write("<");
...
/t
WebPageRenderer.respond(RequestCycle) line: 238	
			// redirect to buffer
			BufferedWebResponse response = renderPage(beforeRenderUrl, requestCycle);
/d
response	BufferedWebResponse  (id=3183)	
	actions	ArrayList<E>  (id=3252)	
		elementData	Object[10]  (id=3263)	
			[2]	BufferedWebResponse$WriteCharSequenceAction  (id=3253)	
				builder	StringBuilder  (id=3283)	
					count	1987	
					value	(id=3286)	
/ Hier zien we de HTML response	,
...
<a href="./page?0-1.ILinkListener-link" wicket:id="link">link</a>

/ Tegelijkertijd	,
requestCycle	RequestCycle  (id=1090)	
	activeResponse	BaseWicketTester$WicketTesterServletWebResponse  (id=1093)		
		httpServletResponse	MockHttpServletResponse  (id=1016)	
/ Wat is reponse hierboven met de HTML	, en RequestCycle.get().getResponse()==activeResponse	?
/ TODO

			else
			{
				storeBufferedResponse(afterRenderUrl, response);
/s
WebPageRenderer.storeBufferedResponse(Url, BufferedWebResponse) line: 87	
		WebApplication.get().storeBufferedResponse(getSessionId(), url, response);
/s
WebPageRenderer.storeBufferedResponse(Url, BufferedWebResponse) line: 87	
		WebApplication.get().storeBufferedResponse(getSessionId(), url, response);
/s
WebApplication.get() line: 160	
		Application application = Application.get();
/s
Application.get() line: 233	
		Application application = ThreadContext.getApplication();
/s
ThreadContext.getApplication() line: 80	
		ThreadContext context = get(false);
/s
ThreadContext.get(boolean) line: 44	
		ThreadContext context = threadLocal.get();
		return context;
context	ThreadContext  (id=3400)	
	application	MockApplication  (id=162)	
	requestCycle	RequestCycle  (id=1090)	
	session	WebSession  (id=1100)	

		return context != null ? context.application : null;

/ Intermezzo

public class ThreadContext
{
	private Application application;

	private RequestCycle requestCycle;

	private Session session;

	private static final ThreadLocal<ThreadContext> threadLocal = new ThreadLocal<ThreadContext>();

/ Lees	, 
http://stackoverflow.com/questions/14959295/threadlocal-singleton
http://blog.smartbear.com/programming/how-and-when-to-use-javas-threadlocal-object/
http://www.developer.com/design/article.php/3680701/Threads-Versus-The-Singleton-Pattern.htm
http://ranksheet.com/Solutions/kb-Core-Java/1773_Immutable-vs-Singleton-vs-Synchronized-vs-ThreadLocal.aspx

/ we kunnen in Executions	, 
Application.get()
RequestCycle.get()

/ Einde Intermezzo

/t
WebPageRenderer.storeBufferedResponse(Url, BufferedWebResponse) line: 87	
		WebApplication.get().storeBufferedResponse(getSessionId(), url, response);
/pd
/s
MockApplication(WebApplication).storeBufferedResponse(String, Url, BufferedWebResponse) line: 998	
/=
	public void storeBufferedResponse(String sessionId, Url url, BufferedWebResponse response)
sessionId	"f1006e8f-713c-4158-ac95-6527bd6dc940" (id=3418)	
url	Url  (id=3399)	/wicket/page?0
response	BufferedWebResponse  (id=3382)	 / onze response	,
		String key = sessionId + url.toString();
		storedResponses.put(key, response);

/ intermezzo

/ HIER BLIJFT DE RESPONSE HTML

/ In Expressions	, geef Applications.get()	,
"Application.get()"	 (pending)	
	storedResponses	StoredResponsesMap  (id=810)	
		[0]	LinkedHashMap$Entry<K,V>  (id=3449)	
			key	"f1006e8f-713c-4158-ac95-6527bd6dc940wicket/page?0" (id=3451)	
			value	StoredResponsesMap$Value  (id=3452)	
				creationTime	Time  (id=3456)	
				response	BufferedWebResponse  (id=3382)	
...
<a href="./page?0-2.ILinkListener-link" wicket:id="link">link</a>
...

/ Einde intermezzo

/t
WebPageRenderer.respond(RequestCycle) line: 280	
				storeBufferedResponse(afterRenderUrl, response);
/d
/ In Application.get().
				redirectTo(afterRenderUrl, requestCycle);
wicket/page?0
/s
WebPageRenderer.redirectTo(Url, RequestCycle) line: 160	
		WebResponse response = (WebResponse)requestCycle.getResponse();		/=requestCycle.activeResponse	,
		String relativeUrl = requestCycle.getUrlRenderer().renderUrl(url);
./wicket/page?0
		response.sendRedirect(relativeUrl);
/s
BaseWicketTester$WicketTesterServletWebResponse.sendRedirect(String) line: 2959	
			super.sendRedirect(url);
/s
BaseWicketTester$WicketTesterServletWebResponse(ServletWebResponse).sendRedirect(String) line: 296	
					url = url.substring(2);
wicket/page?0
				httpServletResponse.sendRedirect(url);

this	BaseWicketTester$WicketTesterServletWebResponse  (id=1093)		/=requestCycle.activeResponse	,
	httpServletResponse	MockHttpServletResponse  (id=1016)	
/s
MockHttpServletResponse.sendRedirect(String) line: 609	
		redirectLocation = location;
		status = HttpServletResponse.SC_FOUND;
/t
BaseWicketTester$WicketTesterServletWebResponse.sendRedirect(String) line: 2962	
			super.sendRedirect(url);
/d
				getContainerResponse().sendRedirect(url);
/ getContainerResponse()=httpServletResponse MockHttpServletResponse  (id=1016)
/ weer in dezelfde .sendRedirect als hierboven	,
/t
BaseWicketTester$LastPageRecordingPageRendererProvider$1.respond(RequestCycle) line: 2750	
					delegate.get(handler).respond(requestCycle);
/d
						Page renderedPage = (Page)handler.getPageProvider().getPageInstance();
						lastRenderedPage = lastPage = renderedPage;
/t
RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 899	
				handler.respond(RequestCycle.this);
/d
				setResponse(originalResponse); / originalResponse=org.apache.wicket.util.tester.BaseWicketTester$WicketTesterServletWebResponse@5415d545
/ sets activeResponse in RequestCycle.get()	,
/ gebeurt niets, want het is dezelfde	activeResponse 
/t
RequestCycle.processRequestAndDetach() line: 297	
			result = processRequest();							/ We zagen GEEN schedule TODO
/d
			detach();
/t
WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler, boolean) line: 781	
			if (!requestCycle.processRequestAndDetach())
/d
				Url newUrl = Url.parse(lastResponse.getRedirectLocation(),
					Charset.forName(request.getCharacterEncoding()));
./wicket/page?0
				else
				{
					// append redirect URL to current URL (what browser would do)
					Url mergedURL = new Url(lastRequest.getUrl().getSegments(),
						newUrl.getQueryParameters());
					mergedURL.concatSegments(newUrl.getSegments());
/context/servlet/wicket/page?0
					request.setUrl(mergedURL);
				}
				processRequest(null, null, true);
/c
/ stack
/s
	BufferedResponseRequestHandler.respond(IRequestCycle) line: 53	
		bufferedWebResponse.writeTo((WebResponse)requestCycle.getResponse());
/cb
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
				handler.respond(RequestCycle.this);
/cb
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
			respond(handler);
/cb
	RequestCycle.execute(IRequestHandler) line: 265	
			requestHandlerExecutor.execute(handler);
/cb
	RequestCycle.processRequest() line: 222	
			IRequestHandler handler = resolveRequestHandler();
handler	BufferedResponseRequestHandler  (id=3617)	/ Hierboven, de 1ste keer, org.apache.wicket.core.request.handler.RenderPageRequestHandler@2a18fdd7
				execute(handler);
/cb
	RequestCycle.processRequestAndDetach() line: 293	
	WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler, boolean) line: 718	
	WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler, boolean) line: 781	
	WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler) line: 657	
	WicketTester(BaseWicketTester).startPage(IPageProvider) line: 887	
	WicketTester(BaseWicketTester).startPage(T) line: 904	
	FrmTest.init() line: 20	
/debug
    RequestCycle.processRequest() line: 222
            IRequestHandler handler = resolveRequestHandler();
/s
RequestCycle.resolveRequestHandler() line: 189	
		return requestMapper.mapRequest(request);
/s
BaseWicketTester$TestRequestMapper.mapRequest(Request) line: 2859			/ We komen in BaseWicketTester	, 
				return delegate.mapRequest(request);
this	BaseWicketTester$TestRequestMapper  (id=3625)	
	delegate	SystemMapper  (id=323)	
/s
SystemMapper(CompoundRequestMapper).mapRequest(Request) line: 132	
		for (MapperWithScore mapperWithScore : list)
		{
			IRequestMapper mapper = mapperWithScore.getMapper();
org.apache.wicket.core.request.mapper.BufferedResponseMapper@46cf828e
			IRequestHandler handler = mapper.mapRequest(request);
/s
BufferedResponseMapper.mapRequest(Request) line: 114	
		request = getRequest(request);
/s
BufferedResponseMapper.getRequest(Request) line: 100	
/=
	private Request getRequest(Request original)
original	ServletWebRequest  (id=2556)	

			return RequestCycle.get().getRequest();
this	RequestCycle  (id=2549)	
	request	ServletWebRequest  (id=2556)	 		/ dezelfde als original	,
/t
BufferedResponseMapper.mapRequest(Request) line: 116	
		request = getRequest(request);
/d
		BufferedWebResponse response = getAndRemoveBufferedResponse(request.getUrl());
/s
BufferedResponseMapper.getAndRemoveBufferedResponse(Url) line: 82	
		String sessionId = getSessionId(); 												/ a8011cae-94ac-4ea0-a565-6fff440c2f36
			response = WebApplication.get().getAndRemoveBufferedResponse(sessionId, url); 	/ url=wicket/page?0
/s
MockApplication(WebApplication).getAndRemoveBufferedResponse(String, Url) line: 985	
		String key = sessionId + url.toString();
		return storedResponses.remove(key);
/t
BufferedResponseMapper.getAndRemoveBufferedResponse(Url) line: 88	
			response = WebApplication.get().getAndRemoveBufferedResponse(sessionId, url);
/d
response	BufferedWebResponse  (id=2578)	
		return response;
/t
BufferedResponseMapper.mapRequest(Request) line: 119	
		BufferedWebResponse response = getAndRemoveBufferedResponse(request.getUrl());
/d
		if (response != null)
		{
			return new BufferedResponseRequestHandler(response);
/t
RequestCycle.processRequest() line: 220	
			IRequestHandler handler = resolveRequestHandler();
/d
				execute(handler);
/ See stack , waar we uitkomen op	,
BufferedResponseRequestHandler.respond(IRequestCycle) line: 53	
		bufferedWebResponse.writeTo((WebResponse)requestCycle.getResponse());







/ Einde WICKETTESTER RENDER PAGE

/ WICKETTESTER FORMTESTER

/ proj wicket-examples-step-by-step
/ prog FrmPage, FrmTest

public class FrmTest {
	@Test
	public void testNormalButton(){
		FormTester formTester=wicketTester.newFormTester("form");
		formTester.setValue("name", "foo");
		formTester.setValue("age", "13");
		formTester.setValue("normal", "E=mc²");
		formTester.submit();
		Label label=(Label)wicketTester.getComponentFromLastRenderedPage("result");
		String desc=label.getDefaultModelObjectAsString();
		Assert.assertEquals("foo,13",desc);
	}

/s
FrmTest.testNormalButton() line: 32	
		FormTester formTester=wicketTester.newFormTester("form");
/s
WicketTester(BaseWicketTester).newFormTester(String) line: 1279	
		return newFormTester(path, true);
/s
WicketTester(BaseWicketTester).newFormTester(String, boolean) line: 1295	
/=
	public FormTester newFormTester(final String path, final boolean fillBlankString)
path	"form" (id=2553)	
fillBlankString	true	
		return new FormTester(path, (Form<?>)getComponentFromLastRenderedPage(path), this, fillBlankString);
/s
	 * <p>
	 * A component path consists of component ids separated by colons, e.g. "b:c" identifies a
	 * component "c" inside container "b" inside this container.
	 *
FrmPage(MarkupContainer).get(String) line: 372			/ MarkupContainer.get en .children_get leveren altijd directe children	, 
														/ .get handlers paths langer als 1, zoals "form:input"	, children_get alleen "form" of "input"																			
		String id = Strings.firstPathComponent(path, Component.PATH_SEPARATOR);
"form"
		// Get child by id
		Component child = container.children_get(id);
/s
FrmPage(MarkupContainer).children_get(String) line: 1189		/ de Page's directe children	,
			List<Component> kids = children();
kids	ArrayList<E>  (id=2562)	
	elementData	Object[12]  (id=2563)	
		[0]	FrmPage$1  (id=2564)	
		[1]	FrmPage$2  (id=2565)	
		[2]	Form<T>  (id=2566)	
		[3]	Label  (id=2567)	
		[4]	HtmlHeaderContainer  (id=2568)	
			for (Component child : kids)
			{
				if (child.getId().equals(childId))
				{
					return child;
/t
FrmPage(MarkupContainer).get(String) line: 405	
		Component child = container.children_get(id);
/d
		// Found child?
		if (child != null)
		{
			String path2 = Strings.afterFirstPathComponent(path, Component.PATH_SEPARATOR);
/ Dit is voor als het path langer is dan 1	, 
			return child.get(path2);
/t
WicketTester(BaseWicketTester).getComponentFromLastRenderedPage(String, boolean) line: 1581	
		Component component = getLastRenderedPage().get(path);
/d
component	Form<T>  (id=2566)	
			return component;
/t
WicketTester(BaseWicketTester).newFormTester(String, boolean) line: 1295	
		return new FormTester(path, (Form<?>)getComponentFromLastRenderedPage(path), this,
			fillBlankString);
/pd
/s
FormTester.<init>(String, Form<?>, BaseWicketTester, boolean) line: 382	

		workingForm.visitFormComponents(new IVisitor<FormComponent<?>, Void>()
		{
			@Override
			public void component(final FormComponent<?> formComponent, final IVisit<Void> visit)
formComponent=[TextField [Component id = name]]
			{
				String[] values = getInputValue(formComponent);
[""]
				for (String value : values)
				{
					addFormComponentValue(formComponent, value);
/s
FormTester.addFormComponentValue(FormComponent<?>, String) line: 829	
		if (parameterExist(formComponent))
/s
FormTester.parameterExist(FormComponent<?>) line: 882	
		String parameter = tester.getRequest()			/= WicketTester.request=org.apache.wicket.protocol.http.mock.MockHttpServletRequest@6d9ef759
			.getPostParameters()						/= MockHttpServletRequest.post={}
			.getParameterValue(formComponent.getInputName())
/s
TextField<T>(FormComponent<T>).getInputName() line: 793	
this	TextField<T>  (id=2687)	
		String inputName = Form.getRootFormRelativeId(this);
p::name	/ name is een JS reserved name	,
		Form<?> form = findParent(Form.class);
			return form.getInputNamePrefix() + inputName;
/t
/s
MockRequestParameters.getParameterValue(String) line: 48	
		List<StringValue> values = parameters.get(name);
null
		return (values != null && !values.isEmpty()) ? values.get(0)
			: StringValue.valueOf((String)null);
/t
FormTester.parameterExist(FormComponent<?>) line: 887	
		String parameter = tester.getRequest()
			.getPostParameters()
			.getParameterValue(formComponent.getInputName())
			.toString();
/d
null
		return parameter != null && parameter.trim().length() > 0;
false
/t
FormTester.addFormComponentValue(FormComponent<?>, String) line: 829	
		if (parameterExist(formComponent))									/ in de post parameterlist staat dus niet name=...&...
/n
		else
		{
			setFormComponentValue(formComponent, value);
/s
FormTester.setFormComponentValue(FormComponent<?>, String) line: 900	
		tester.getRequest()
			.getPostParameters()
			.setParameterValue(formComponent.getInputName(), value);
/t
FormTester.addFormComponentValue(FormComponent<?>, String) line: 857	
			setFormComponentValue(formComponent, value);
/d
		return this;
/t
FormTester$1.component(Object, IVisit) line: 389	
/=
		// fill blank String for Text Component.
		workingForm.visitFormComponents(new IVisitor<FormComponent<?>, Void>()
		{
			@Override
			public void component(final FormComponent<?> formComponent, final IVisit<Void> visit)
			{
				String[] values = getInputValue(formComponent);
				for (String value : values)
				{
					addFormComponentValue(formComponent, value);
/d
/ Geen volgende for loop	,
/ volgende visitor's component	, "age", hetzelfde	,
/ volgende visitor's component	, 
Visits.visitChildren(Iterable<? super S>, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 140	
		for (final Object child : container)
				visitor.component(s, childTraversal);
/ child=[Button [Component id = normal]]
/s
FormTester$1.component(FormComponent<?>, IVisit<Void>) line: 395	
/=
		// fill blank String for Text Component.
		workingForm.visitFormComponents(new IVisitor<FormComponent<?>, Void>()
		{
			@Override
			public void component(final FormComponent<?> formComponent, final IVisit<Void> visit)
			{
				String[] values = getInputValue(formComponent);
[]
/ bij de inputs was deze [""]	,

/ volgende visitor's component	, 
Visits.visitChildren(Iterable<? super S>, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 140	
		for (final Object child : container)
				visitor.component(s, childTraversal);
/ child=[AjaxButton [Component id = ajx]]
/s
FormTester$1.component(FormComponent<?>, IVisit<Void>) line: 395	
				String[] values = getInputValue(formComponent);
[]

/t
FormTester.<init>(String, Form<?>, BaseWicketTester, boolean) line: 414	
		// fill blank String for Text Component.
		workingForm.visitFormComponents(new IVisitor<FormComponent<?>, Void>()
		{
			@Override
			public void component(final FormComponent<?> formComponent, final IVisit<Void> visit)
			{
				// do nothing for invisible or disabled component -- the browser would not send any
				// parameter for a disabled component
				if (!(formComponent.isVisibleInHierarchy() && formComponent.isEnabledInHierarchy()))
				{
					return;
				}

				String[] values = getInputValue(formComponent);
				if (formComponent instanceof AbstractTextComponent<?>)
				{
					if (values.length == 0 && fillBlankString)
					{
						setFormComponentValue(formComponent, "");
					}
				}
				for (String value : values)
				{
					addFormComponentValue(formComponent, value);
				}
			}
		});
/d
/ Doet steeds voor elke input	,
        tester.getRequest()
            .getPostParameters()
            .setParameterValue(formComponent.getInputName(), value);

		workingForm.detach();
/ TODO
/t
FrmTest.testNormalButton() line: 33	
		FormTester formTester=wicketTester.newFormTester("form");
/d
/ Doet steeds voor elke input	,
        tester.getRequest()
            .getPostParameters()
            .setParameterValue(formComponent.getInputName(), value);

		formTester.setValue("name", "foo");
/s
FormTester.setValue(String, String) line: 603	
		Component component = workingForm.get(formComponentId);
[TextField [Component id = name]]
		return setValue(component, value);
/s
FormTester.setValue(Component, String) line: 621	
		if (formComponent instanceof IFormSubmittingComponent)
/n, "name" is input	,
		else if (formComponent instanceof FormComponent)
/j
		{
			setFormComponentValue((FormComponent<?>)formComponent, value);
/s
FormTester.setFormComponentValue(FormComponent<?>, String) line: 900	
		tester.getRequest()
			.getPostParameters()
			.setParameterValue(formComponent.getInputName(), value);
/t
FrmTest.testNormalButton() line: 34	
		formTester.setValue("age", "13");
formTester	FormTester  (id=2679)	
	tester	WicketTester  (id=152)	
		lastRequest	MockHttpServletRequest  (id=2862)	 	/ WH de vorige	,
		request	MockHttpServletRequest  (id=2717)	
			post	MockRequestParameters  (id=2722)	
				parameters	HashMap<K,V>  (id=2724)	
{p::name=[foo], age=[13]}

		formTester.setValue("normal", "E=mc²");
/s
FormTester.setValue(Component, String) line: 621	
		if (formComponent instanceof IFormSubmittingComponent)
/j, 
formComponent=[Button [Component id = normal]]
		{
			setFormSubmittingComponentValue((IFormSubmittingComponent)formComponent, value);
/s
FormTester.setFormSubmittingComponentValue(IFormSubmittingComponent, String) line: 915	
		tester.getRequest().getPostParameters().setParameterValue(component.getInputName(), value);
this	FormTester  (id=2679)	
	tester	WicketTester  (id=152)	
				parameters	HashMap<K,V>  (id=2724)	
{p::name=[foo], normal=[E=mc²], age=[13]}
/t
FrmTest.testNormalButton() line: 36	
		formTester.setValue("normal", "E=mc²");
/d
		formTester.submit();
/s
FormTester.submit() line: 699	
			tester.getRequest().setUseMultiPartContentType(workingForm.isMultiPart());
/s
Form<T>.isMultiPart() line: 1401	
		Boolean anyEmbeddedMultipart = visitChildren(Component.class,
			new IVisitor<Component, Boolean>()
			{
				@Override
				public void component(final Component component, final IVisit<Boolean> visit)
...
null
		boolean mp = Boolean.TRUE.equals(anyEmbeddedMultipart);
false
		return mp;
/t
FormTester.submit() line: 707	
			tester.getRequest().setUseMultiPartContentType(workingForm.isMultiPart());
/d
			tester.submitForm(path);
path="form"
/s
WicketTester(BaseWicketTester).submitForm(String) line: 2021	
		Form<?> form = (Form<?>)getComponentFromLastRenderedPage(path);
		Url url = Url.parse(
			form.getRootForm()
				.urlFor(IFormSubmitListener.INTERFACE, new PageParameters())
				.toString(), Charset.forName(request.getCharacterEncoding()));
./wicket/page?0-1.IFormSubmitListener-form
		// make url absolute
		transform(url);
wicket/page?0-1.IFormSubmitListener-form
		request.setUrl(url);
		processRequest();
/s
WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler, boolean) line: 686	
/=
	protected boolean processRequest(final MockHttpServletRequest forcedRequest, final IRequestHandler forcedRequestHandler, final boolean redirect)
forcedRequest	null	
forcedRequestHandler	null	
redirect	false	

			lastRenderedPage = null;
		applyRequest();
/s
WicketTester(BaseWicketTester).applyRequest() line: 2538	

this	WicketTester  (id=156)	
	request	MockHttpServletRequest  (id=2595)	
		parameters	LinkedHashMap<K,V>  (id=2605)	/ {0-1.IFormSubmitListener-form=[Ljava.lang.String;@3e8fe949}=[]	
		post	MockRequestParameters  (id=2608)	
			parameters	HashMap<K,V>  (id=2613)		{p::name=[foo], normal=[E=mc²], age=[13]}
		url	"/context/servlet/wicket/page" (id=2742)	

		Request req = newServletWebRequest();
/s
WicketTester(BaseWicketTester).newServletWebRequest() line: 537	
		return (ServletWebRequest)application.newWebRequest(request, request.getFilterPrefix());
/s
MockApplication(WebApplication).newWebRequest(HttpServletRequest, String) line: 548	
/=
	public WebRequest newWebRequest(HttpServletRequest servletRequest, final String filterPath)
servletRequest	MockHttpServletRequest  (id=2717)						
filterPath	"servlet" (id=2965)	
		return new ServletWebRequest(servletRequest, filterPath);
/t
WicketTester(BaseWicketTester).applyRequest() line: 2539	
		Request req = newServletWebRequest();
/d
req	ServletWebRequest  (id=2969)	
	httpServletRequest	MockHttpServletRequest  (id=2595)	
		url	"/context/servlet/wicket/page" (id=2742)	
	url	Url  (id=2751)	wicket/page?0-1.IFormSubmitListener-form	

		requestCycle.setRequest(req);
		if (useRequestUrlAsBase)
		{
			requestCycle.getUrlRenderer().setBaseUrl(req.getUrl());
/t
WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler, boolean) line: 714	
		applyRequest();
/d
"RequestCycle.get()"	 (pending)	
	request	ServletWebRequest  (id=2969)	/ dit is de request hierboven	,
	filterPrefix	"servlet" (id=2749)	
	urlRenderer	UrlRenderer  (id=2976)	
		baseUrl	Url  (id=2977)			/ wicket/page?0-1.IFormSubmitListener-form
		request	ServletWebRequest  (id=2979)	/ TODO	

		requestCycle.scheduleRequestHandlerAfterCurrent(null);	/ Dus geen schedule WH TODO

			if (!requestCycle.processRequestAndDetach())
/s
RequestCycle.processRequest() line: 219	
			IRequestHandler handler = resolveRequestHandler();
/s
RequestCycle.resolveRequestHandler() line: 189	
		return requestMapper.mapRequest(request);
/s
BaseWicketTester$TestRequestMapper.mapRequest(Request) line: 2867	
				return delegate.mapRequest(request);
/s
SystemMapper(CompoundRequestMapper).mapRequest(Request) line: 132	
		for (MapperWithScore mapperWithScore : list)
		{
			IRequestMapper mapper = mapperWithScore.getMapper();
mapper	PageInstanceMapper  (id=2806)	
/ TODO
			IRequestHandler handler = mapper.mapRequest(request);
/s
PageInstanceMapper.mapRequest(Request) line: 65	
		if (matches(request))
/s
PageInstanceMapper.matches(Request) line: 184	
		boolean matches = false;
		Url url = request.getUrl();					/ wicket/page?0-1.IFormSubmitListener-form
		String namespace = getContext().getNamespace();	/ wicket
		String pageIdentifier = getContext().getPageIdentifier();	/ page

		if (urlStartsWith(url, namespace, pageIdentifier))
/j
		{
			matches = true;
/t
PageInstanceMapper.mapRequest(Request) line: 65	
		if (matches(request))
/d
/j
			Url url = request.getUrl();
wicket/page?0-1.IFormSubmitListener-form

			PageComponentInfo info = getPageComponentInfo(url);
info	PageComponentInfo  (id=3081)	
	componentInfo	ComponentInfo  (id=3088)	
		behaviorId	null	
		componentPath	"form" (id=3091)	
		listenerInterface	"IFormSubmitListener" (id=3092)	
		renderCount	Integer  (id=3084)	
1
	pageInfo	PageInfo  (id=3101)	
		pageId	Integer  (id=3104)	
0
			if (info != null && info.getPageInfo().getPageId() != null)
			{
				Integer renderCount = info.getComponentInfo() != null ? info.getComponentInfo() .getRenderCount() : null;
1
				if (info.getComponentInfo() == null)
/n
				else
/j
				{
					ComponentInfo componentInfo = info.getComponentInfo();
					PageAndComponentProvider provider = new PageAndComponentProvider( info.getPageInfo().getPageId(), renderCount, componentInfo.getComponentPath());
provider	PageAndComponentProvider  (id=3135)	
	component	null	
	componentPath	"form" (id=3091)	
	pageClass	null	
	pageId	Integer  (id=3104)	
	pageInstance	null	
	pageInstanceIsFresh	false	
	pageParameters	null	
	pageSource	null	
	renderCount	Integer  (id=3084)	

					provider.setPageSource(getContext());

					// listener interface
					RequestListenerInterface listenerInterface = requestListenerInterfaceFromString(componentInfo.getListenerInterface());

listenerInterface	RequestListenerInterface  (id=158)	
	listenerInterfaceClass	Class<T> (org.apache.wicket.markup.html.form.IFormSubmitListener) (id=157)	
	method	Method  (id=2823)	
	name	"IFormSubmitListener" (id=2824)	

					return new ListenerInterfaceRequestHandler(provider, listenerInterface, componentInfo.getBehaviorId());
/t
SystemMapper(CompoundRequestMapper).mapRequest(Request) line: 151	
		for (MapperWithScore mapperWithScore : list)
		{
			IRequestMapper mapper = mapperWithScore.getMapper();
			IRequestHandler handler = mapper.mapRequest(request);
/d
handler	ListenerInterfaceRequestHandler  (id=3170)	
	behaviorId	null	
	listenerInterface	RequestListenerInterface  (id=3169)	
	logData	null	
	pageComponentProvider	PageAndComponentProvider  (id=3135)	
		component	null												/ de component is nog null	,
		componentPath	"form" (id=3091)	
...
				return handler;
/t
RequestCycle.processRequest() line: 220	
			IRequestHandler handler = resolveRequestHandler();
/d
				execute(handler);
/s
RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
			Response originalResponse = getResponse();
originalResponse	BaseWicketTester$WicketTesterServletWebResponse  (id=2973)	
				handler.respond(RequestCycle.this);
/s
ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 173	
			component = getComponent();
/s
PageAndComponentProvider.getComponent() line: 159		/ resolves the component	,
		if (component == null)
			component = page.get(componentPath);
/s
FrmPage(MarkupContainer).get(String) line: 400	
		String id = Strings.firstPathComponent(path, Component.PATH_SEPARATOR);
form
		Component child = container.children_get(id);
[Form [Component id = form]]
/t
ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 173	
			component = getComponent();
/d
		if (isAjax == false && listenerInterface.isRenderPageAfterInvocation())
/j
		{
			// schedule page render after current request handler is done. this can be
			// overridden during invocation of listener
			// method (i.e. by calling RequestCycle#setResponsePage)
			requestCycle.scheduleRequestHandlerAfterCurrent(new RenderPageRequestHandler( pageProvider, policy));
		}
		invokeListener();
/s
ListenerInterfaceRequestHandler.invokeListener() line: 241		/ Dit is de method: ajax of niet	,
		if (getBehaviorIndex() == null)
		{
			listenerInterface.invoke(getComponent());
/ getComponent()=pageComponentProvider.getComponent()= zonet bepaalde Form	,
/s
RequestListenerInterface.internalInvoke(Component, Object) line: 248	
/=
	private void internalInvoke(final Component component, final Object target)
			method.invoke(target);
/s
Form<T>.onFormSubmitted() line: 689	

		if (getRequest().getContainerRequest() instanceof HttpServletRequest)
"org.apache.wick...uestCycle.get()"	 (pending)	
	request	ServletWebRequest  (id=2969)	
		httpServletRequest	MockHttpServletRequest  (id=2717)	

			String desiredMethod = getMethod();
post
			String actualMethod = ((HttpServletRequest)getRequest().getContainerRequest()).getMethod();
post
		onFormSubmitted(null);
/s
Form<T>.onFormSubmitted(IFormSubmitter) line: 737	
			// Tells FormComponents that a new user input has come
			inputChanged();
/ TODO Sets FormComponent's rawInput	, 

			else
			{
				// First, see if the processing was triggered by a Wicket IFormSubmittingComponent
				if (submitter == null)
				{
					submitter = findSubmittingButton();
/s
Form<T>.findSubmittingButton() line: 434	
		IFormSubmittingComponent submittingComponent = getPage().visitChildren(	/ getPage()!, WH kunnen submitting components buiten het form vallen TODO
			IFormSubmittingComponent.class, new IVisitor<Component, IFormSubmittingComponent>()		/ new IVisitor=Form$2, 
			{
				@Override
				public void component(final Component component, final IVisit<IFormSubmittingComponent> visit)	
					...
/ intermezzo

/**
 * Generic visitor interface for traversals.
 * 
 * @param <T>
 *            type of object to be visited											/ hier filters hij op	, op T dus	,
 * @param <R>
 *            type of value the visitor should return as the result of the visit/traversal
 */
public interface IVisitor<T, R>
{
	/**
	 * Called at each object in a visit.
	 * 
	 * @param object
	 *            Object being visited
	 * @param visit
	 *            Object used to control the visit/traversal
	 */
	public void component(T object, IVisit<R> visit);
}

/ einde intermezzo

/s
FrmPage(MarkupContainer).visitChildren(Class<?>, IVisitor<S,R>) line: 966	/ Omdat Form<T>.findSubmittingButton getPage().visitChildren	, 	
/=
	public final <S extends Component, R> R visitChildren(final Class<?> clazz, final IVisitor<S, R> visitor)
		return Visits.visitChildren(this, visitor, new ClassVisitFilter(clazz));		/ visitor=Form$2	, 
			/ clazz=interface org.apache.wicket.markup.html.form.IFormSubmittingComponent	, hier filters hij op	, dus de TextFields vallen af	, 
										/ en het Button blijft over	,

clazz	Class<T> (org.apache.wicket.markup.html.form.IFormSubmittingComponent) (id=2429)	
/ we maken een filter op IFormSubmittingComponent	, dus alleen Button gaat door in	,
/s
Visits.visitChildren(Iterable<? super S>, IVisitor<S,R>, IVisitFilter) line: 123	
		visitChildren(container, visitor, filter, visit);	/ container=FrmPage, visitor=Form$2, filter =new ClassVisitFilter(IFormSubmittingComponent) 
/s
Visits.visitChildren(Iterable<? super S>, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 162	
		for (final Object child : container)
child=[Link [Component id = link]]
child=[AjaxLink [Component id = ajaxLink]]
child=[Form [Component id = form]]
			if (filter.visitObject(child))			/= 		return clazz.isAssignableFrom(object.getClass());	/ clazz=IFormSubmittingComponent

				// visit the children in the container
				visitChildren((Iterable<? super S>)child, visitor, filter, visit);
/s
Visits.visitChildren(Iterable<? super S>, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 144	
		// Iterate through children of this container
		for (final Object child : container)
child=[TextField [Component id = name]]
child=[TextField [Component id = age]]
child=FrmPage$3=[Button [Component id = normal]]
		{
			// Get next child component
			// Is the child of the correct class (or was no class specified)?
			if (filter.visitObject(child)) 													/j voor Button 	, n voor TextField	,
			{
				Visit<R> childTraversal = new Visit<>();

				// Call visitor
				S s = (S)child;
				visitor.component(s, childTraversal);			/ Dus alleen voor Button wordt deze called,	
/s
/ SUBMIT BUTTON RETRIEVES POST PARAMETERS, THESE WERE ADDED IN TEST BY FORMTESTER.SETVALUE
Form$2.component(Component, IVisit<IFormSubmittingComponent>) line: 442	
/=
	public final IFormSubmitter findSubmittingButton()
	{
		IFormSubmittingComponent submittingComponent = getPage().visitChildren(
			IFormSubmittingComponent.class, new IVisitor<Component, IFormSubmittingComponent>()
			{
				@Override
				public void component(final Component component, final IVisit<IFormSubmittingComponent> visit)
				{
					// Get submitting component
					final IFormSubmittingComponent submittingComponent = (IFormSubmittingComponent)component;
					final Form<?> form = submittingComponent.getForm();

					// Check for component-name or component-name.x request string
					if ((form != null) && (form.getRootForm() == Form.this))
					{
						String name = submittingComponent.getInputName();
"normal"
						IRequestParameters parameters = getRequest().getRequestParameters();
/s
ServletWebRequest(Request).getRequestParameters() line: 136	
		return new CombinedRequestParametersAdapter(getQueryParameters(), getPostParameters());
/s
ServletWebRequest(Request).getQueryParameters() line: 128	
		return new UrlRequestParametersAdapter(getUrl());
/t
/s
ServletWebRequest.getPostParameters() line: 390	
this	ServletWebRequest  (id=2969)	
	postParameters	HashMap<K,V>  (id=3221)	
{p::name=[foo], normal=[E=mc²], age=[13]}
/t
/s
CombinedRequestParametersAdapter.<init>(IRequestParameters...) line: 45	
		this.parameters = Args.notNull(parameters, "parameters");
this	CombinedRequestParametersAdapter  (id=3447)	
parameters	IRequestParameters[2]  (id=3448)	
	[0]	UrlRequestParametersAdapter  (id=3435)	
		url	Url  (id=3436)	
	[1]	ServletWebRequest$1  (id=2987)	
		this$0	ServletWebRequest  (id=2969)	
			postParameters	HashMap<K,V>  (id=3221)	
/t
Form$2.component(Component, IVisit<IFormSubmittingComponent>) line: 450	
						IRequestParameters parameters = getRequest().getRequestParameters();
/d
						if ((!parameters.getParameterValue(name).isNull()) ||
/ j, E=mc²
/ TODO Is dat bij niet test, submit op page ook zo	?
							!parameters.getParameterValue(name + ".x").isNull())
						{
							visit.stop(submittingComponent);						
submittingComponent	FrmPage$3  (id=2762)	 = [Button [Component id = normal]]
/s
Visit<R>.stop(R) line: 47	
		action = Action.STOP;
		this.result = result;
result=[Button [Component id = normal]]

/t
Visits.visitChildren(Iterable<? super S>, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 148	
		for (final Object child : container)
child=[Button [Component id = normal]]
		{
			// Get next child component
			// Is the child of the correct class (or was no class specified)?
			if (filter.visitObject(child))
			{
				Visit<R> childTraversal = new Visit<>();

				// Call visitor
				S s = (S)child;
				visitor.component(s, childTraversal);
/d
				if (childTraversal.isStopped())
				{
					visit.stop(childTraversal.getResult());
/s
Visit<R>.stop(R) line: 47	
		action = Action.STOP;
		this.result = result;
result=[Button [Component id = normal]]
/t
Visits.visitChildren(Iterable<? super S>, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 149	
                    visit.stop(childTraversal.getResult());
/d
					return;
/t
Visits.visitChildren(Iterable<? super S>, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 164	
				// visit the children in the container
				visitChildren((Iterable<? super S>)child, visitor, filter, visit);
/d
child=[Form [Component id = form]]
				if (visit.isStopped())
				{
					return;
/t
Visits.visitChildren(Iterable<? super S>, IVisitor<S,R>, IVisitFilter) line: 124	
		visitChildren(container, visitor, filter, visit);
/d
		return visit.getResult();	/= visit.result=[Button [Component id = normal]]	 / TODO
/t
Form<T>.findSubmittingButton() line: 459	
		IFormSubmittingComponent submittingComponent = getPage().visitChildren(
			IFormSubmittingComponent.class, new IVisitor<Component, IFormSubmittingComponent>()
			{
				@Override
				public void component(final Component component,
					final IVisit<IFormSubmittingComponent> visit)
				{
					// Get submitting component
					final IFormSubmittingComponent submittingComponent = (IFormSubmittingComponent)component;
					final Form<?> form = submittingComponent.getForm();

					// Check for component-name or component-name.x request string
					if ((form != null) && (form.getRootForm() == Form.this))
					{
						String name = submittingComponent.getInputName();
						IRequestParameters parameters = getRequest().getRequestParameters();
						if ((!parameters.getParameterValue(name).isNull()) ||
							!parameters.getParameterValue(name + ".x").isNull())
						{
							visit.stop(submittingComponent);
						}
					}
				}
			});
/d
		return submittingComponent;
[Button [Component id = normal]]
/t
Form<T>.onFormSubmitted(IFormSubmitter) line: 756	
			else
			{
				// First, see if the processing was triggered by a Wicket IFormSubmittingComponent
				if (submitter == null)
				{
					submitter = findSubmittingButton();
/d
[Button [Component id = normal]]
				else
				{
					// the submit request might be for one of the nested forms, so let's
					// find the right one:
					final Form<?> formToProcess = findFormToProcess(submitter);

					// process the form for this request
					formToProcess.process(submitter);
/s
Form<T>.process(IFormSubmitter) line: 933	
/c
/ stack
/s
Thread [main] (Suspended)	
	ServletWebRequest$1.getParameterValues(String) line: 378	
/=
public class ServletWebRequest extends WebRequest
	private final IRequestParameters postRequestParameters = new IWritableRequestParameters()
	{
		@Override
		public List<StringValue> getParameterValues(String name)
		{
			List<StringValue> values = getPostRequestParameters().get(name);			<-
			if (values != null)
[foo]
			{
				values = Collections.unmodifiableList(values);
			}
			return values;
		}
	};
	CombinedRequestParametersAdapter.getParameterValues(String) line: 88	
		for (IRequestParameters p : parameters)
p	UrlRequestParametersAdapter  (id=2995)	
p	ServletWebRequest$1  (id=2750)	
		{
			List<StringValue> values = p.getParameterValues(name);
/cb
	TextField<T>(FormComponent<T>).getInputAsArray() line: 755	
/ VALIDATE FORM RETRIEVES POST PARAMETERS, THESE WERE ADDED IN TEST BY FORMTESTER.SETVALUE,  PUTS THEM IN FORMCOMPONENT'S CONVERTEDINPUT, LATER UPDATEMODELS PUTS THEM IN THE FORMCOMPONENT'S MODELS
		List<StringValue> list = getRequest().getRequestParameters().getParameterValues( getInputName());	 /getInputName()="p::name" TODO
/cb
	TextField<T>(AbstractTextComponent<T>).convertInput() line: 121	
		String[] value = getInputAsArray();
/cb
	TextField<T>(FormComponent<T>).validate() line: 1130	
			convertInput();
/cb
	Form$18.validate(FormComponent<?>) line: 1948	
		visitFormComponentsPostOrder(new ValidationVisitor()
		{
			@Override
			public void validate(final FormComponent<?> formComponent)
			{
				final Form<?> form = formComponent.getForm();
				if (form == Form.this && form.isEnabledInHierarchy() && form.isVisibleInHierarchy())
				{
					formComponent.validate();														<-
/cb
	Form$18(Form$ValidationVisitor).component(FormComponent<?>, IVisit<Void>) line: 177	
	Form$18(Form$ValidationVisitor).component(Object, IVisit) line: 161	
	Visits.visitPostOrderHelper(Object, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 274	
	Visits.visitPostOrderHelper(Object, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 262	
		if (component instanceof Iterable<?>)
component	Form<T>  (id=264)	
		{
			final Iterable<?> container = (Iterable<?>)component;
			if (filter.visitChildren(container))
			{
				Visit<R> childTraversal = new Visit<>();
				for (final Object child : ((Iterable<?>)component))
child=[TextField [Component id = name]]
child	TextField<T>  (id=2891)	
	convertedInput	null															<- deze wordt set	,
				{
					visitPostOrderHelper(child, visitor, filter, childTraversal);

	Visits.visitPostOrder(Object, IVisitor<S,R>, IVisitFilter) line: 245	
	FormComponent<T>.visitFormComponentsPostOrder(Component, IVisitor<FormComponent<?>,R>) line: 382	
component	Form<T>  (id=264)	
		return Visits.visitPostOrder(component, visitor, new IVisitFilter()
		{

			@Override
			public boolean visitChildren(Object object)
			{
				if (object instanceof IFormVisitorParticipant)
				{
					return ((IFormVisitorParticipant)object).processChildren();
				}
				return true;
			}

			@Override
			public boolean visitObject(Object object)
			{
				return (object instanceof FormComponent<?>);
			}

		});
/cb
	Form<T>.visitFormComponentsPostOrder(IVisitor<FormComponent<?>,R>) line: 1153	
	Form<T>.validateComponents() line: 1940	
		visitFormComponentsPostOrder(new ValidationVisitor()											<-
		{
			@Override
			public void validate(final FormComponent<?> formComponent)
			{
				final Form<?> form = formComponent.getForm();
				if (form == Form.this && form.isEnabledInHierarchy() && form.isVisibleInHierarchy())
				{
					formComponent.validate();
/cb
	Form<T>.validate() line: 1882	
			validateComponents();
/cb
	Form<T>.process(IFormSubmitter) line: 943	
		// run validation
		validate();
/debug
/t
TextField<T>(FormComponent<T>).validate() line: 1131	
			convertInput();
/d
this	TextField<T>  (id=2861)	
	convertedInput	"foo" (id=3059)		<- Uit request's parameters={request params, post params} kwam ["foo"], 
/t
Visits.visitPostOrderHelper(Object, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 262	
		if (component instanceof Iterable<?>)
		{
			final Iterable<?> container = (Iterable<?>)component;
			if (filter.visitChildren(container))
			{
				Visit<R> childTraversal = new Visit<>();
				for (final Object child : ((Iterable<?>)component))
/ volgende	,
child=[TextField [Component id = age]]
child	TextField<T>  (id=2891)	
	convertedInput	null	
				{
					visitPostOrderHelper(child, visitor, filter, childTraversal);
child	TextField<T>  (id=2891)	
	convertedInput	Integer  (id=3086)		13

/ volgende	,
				for (final Object child : ((Iterable<?>)component))
child=[Button [Component id = normal]]
	convertedInput	null
				{
					visitPostOrderHelper(child, visitor, filter, childTraversal);
child=FrmPage$3  (id=2923)	
	convertedInput	"E=mc²" (id=3108)	

/ volgende	, 
				for (final Object child : ((Iterable<?>)component))
child	FrmPage$4  (id=216)		[AjaxButton [Component id = ajx]]
	convertedInput	null	
				{
					visitPostOrderHelper(child, visitor, filter, childTraversal);
child	FrmPage$4  (id=216)		[AjaxButton [Component id = ajx]]
	convertedInput	null													/ Klopt, hadden we niet gedaan	, 

/t
Form<T>.process(IFormSubmitter) line: 963	
		// run validation
		validate();
/d
this	Form<T>  (id=264)	
	children	ArrayList<E>  (id=2854)	
		[0]	TextField<T>  (id=2861)	
			convertedInput	"foo" (id=3059)	
			data	PropertyModel<T>  (id=2869)	
			id	"name" (id=2870)	
			rawInput	"[-NO-RAW-INPUT-]" (id=3135)	 /TODO Deze was toch set?	
			typeName	"java.lang.String" (id=3137)	
		[1]	TextField<T>  (id=2891)	
			convertedInput	Integer  (id=3086)	
			data	PropertyModel<T>  (id=3082)	
			id	"age" (id=3136)	
			rawInput	"[-NO-RAW-INPUT-]" (id=3135)	
			typeName	"java.lang.Integer" (id=3137)	
		[2]	FrmPage$3  (id=2923)	
			convertedInput	"E=mc²" (id=3108)	
			data null
			id	"normal" (id=3098)	
			rawInput	"[-NO-RAW-INPUT-]" (id=3135)	
			typeName	null	
		[3]	FrmPage$4  (id=216)	
			convertedInput	null	
			data	Object[3]  (id=3115)	
				[0]	PropertyModel<T>  (id=3163)	
				[1]	AjaxButton$1  (id=3164)	
				[2]	Behaviors$BehaviorIdList  (id=3165)	
			id	"ajx" (id=3138)	
			rawInput	"[-NO-RAW-INPUT-]" (id=3135)	
			typeName	null	

			// Update model using form data
			updateFormComponentModels();
/s
Form<T>.updateFormComponentModels() line: 1829	
		internalUpdateFormComponentModels();
/s
Form<T>.internalUpdateFormComponentModels() line: 1864	
		FormComponent.visitComponentsPostOrder(this, new FormModelUpdateVisitor(this));
/s
FormComponent<T>.visitComponentsPostOrder(Component, IVisitor<Component,R>) line: 423	
		return Visits.visitPostOrder(component, visitor, new IVisitFilter()
			...									/ return true voor Form en TextFields
/s
Visits.visitPostOrder(Object, IVisitor<S,R>, IVisitFilter) line: 245	
		visitPostOrderHelper(root, visitor, filter, visit);
/s
Visits.visitPostOrderHelper(Object, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 254	
		if (component instanceof Iterable<?>)
component	Form<T>  (id=264)	
		{
			final Iterable<?> container = (Iterable<?>)component;
			if (filter.visitChildren(container))						/ true voor Form
			{
				Visit<R> childTraversal = new Visit<>();
				for (final Object child : ((Iterable<?>)component))
child	TextField<T>  (id=2861)		"name"
				{
					visitPostOrderHelper(child, visitor, filter, childTraversal);
/s
Visits.visitPostOrderHelper(Object, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 274	
		if (component instanceof Iterable<?>)
		{
			final Iterable<?> container = (Iterable<?>)component;
TextField "name"
			if (filter.visitChildren(container))				/ true voor TextField
			{
				Visit<R> childTraversal = new Visit<>();
				for (final Object child : ((Iterable<?>)component))
/n
		if (filter.visitObject(component))
		{
			visitor.component((S)component, visit);
/s
Form$FormModelUpdateVisitor.component(Component, IVisit<Void>) line: 217	
/=
public class Form<T> extends WebMarkupContainer
	private static class FormModelUpdateVisitor implements IVisitor<Component, Void>
	{
		@Override
		public void component(final Component component, final IVisit<Void> visit)
		{
			if (component instanceof IFormModelUpdateListener)
			{
				final Form<?> form = Form.findForm(component);
				if (form != null)
				{
					if (this.formFilter == null || this.formFilter == form)
					{
						if (form.isEnabledInHierarchy())
						{
							if (component.isVisibleInHierarchy() &&
								component.isEnabledInHierarchy())
							{
								((IFormModelUpdateListener)component).updateModel();
/s
TextField<T>(FormComponent<T>).updateModel() line: 1097	
		setModelObject(getConvertedInput());
/s
TextField<T>(FormComponent<T>).setModelObject(T) line: 1579	
		setDefaultModelObject(object);
object="foo"
/s
TextField<T>(Component).setDefaultModelObject(Object) line: 3066	
		final IModel<Object> model = (IModel<Object>)getDefaultModel();
model	PropertyModel<T>  (id=2869)	
	expression	"name_" (id=3216)	
	target	FrmPage  (id=234)	

			model.setObject(object);
/s
PropertyModel<T>(AbstractPropertyModel<T>).setObject(T) line: 131	
		final String expression = propertyExpression();
name_
			PropertyResolver.setValue(expression, getInnermostModelOrObject(), object, prc);
/s
PropertyModel<T>(AbstractPropertyModel<T>).getInnermostModelOrObject() line: 271	
		Object object = getTarget();
FrmPage
		while (object instanceof IModel)
/n
		return object;
/t
/s
PropertyResolver.setValue(String, Object, Object, PropertyResolverConverter) line: 133	
		ObjectAndGetSetter setter = getObjectAndGetSetter(expression, object, CREATE_NEW_VALUE);
setter	PropertyResolver$ObjectAndGetSetter  (id=3235)	
	getAndSetter	PropertyResolver$FieldGetAndSetter  (id=3236)	
		field	Field  (id=3237)	
	value	FrmPage  (id=234)	

		setter.setValue(value, converter == null ? new PropertyResolverConverter(Application.get()
			.getConverterLocator(), Session.get().getLocale()) : converter);
/s
PropertyResolver$ObjectAndGetSetter.setValue(Object, PropertyResolverConverter) line: 651	
			getAndSetter.setValue(this.value, value, converter);
/s
PropertyResolver$FieldGetAndSetter.setValue(Object, Object, PropertyResolverConverter) line: 1421	
			value = converter.convert(value, field.getType());
"foo"
			try
			{
				field.set(object, value);
this	PropertyResolver$FieldGetAndSetter  (id=3236)	
	field	Field  (id=3237)	
/t
Visits.visitPostOrderHelper(Object, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 262	
		if (component instanceof Iterable<?>)
component=Form
		{
			final Iterable<?> container = (Iterable<?>)component;
			if (filter.visitChildren(container))
			{
				Visit<R> childTraversal = new Visit<>();
				for (final Object child : ((Iterable<?>)component))
child	TextField<T>  (id=2891)	 "name"
/d
child	TextField<T>  (id=2891)	"age"
/ net zo	,
child	FrmPage$3  (id=2923)	 [Button [Component id = normal]]
				{
					visitPostOrderHelper(child, visitor, filter, childTraversal);
/s
Visits.visitPostOrderHelper(Object, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 254	
		if (component instanceof Iterable<?>)
		{
			final Iterable<?> container = (Iterable<?>)component;
			if (filter.visitChildren(container))
			{
				Visit<R> childTraversal = new Visit<>();
				for (final Object child : ((Iterable<?>)component))
/n
		if (filter.visitObject(component))
		{
			visitor.component((S)component, visit);
/s
Form$FormModelUpdateVisitor.component(Component, IVisit<Void>) line: 217	
			if (component instanceof IFormModelUpdateListener)
			{
				final Form<?> form = Form.findForm(component);
				if (form != null)
				{
					if (this.formFilter == null || this.formFilter == form)
					{
						if (form.isEnabledInHierarchy())
						{
							if (component.isVisibleInHierarchy() &&
								component.isEnabledInHierarchy())
							{
								((IFormModelUpdateListener)component).updateModel();
/s
FrmPage$3(Button).updateModel() line: 163	
	{
	}
/t
Visits.visitPostOrderHelper(Object, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 263	
		if (component instanceof Iterable<?>)
/component=Form
		{
			final Iterable<?> container = (Iterable<?>)component;
			if (filter.visitChildren(container))
			{
				Visit<R> childTraversal = new Visit<>();
				for (final Object child : ((Iterable<?>)component))
child	FrmPage$4  (id=216)	[AjaxButton [Component id = ajx]]
/ net zo als de Button	,
/d
				for (final Object child : ((Iterable<?>)component))
/ GEEN meer	,
/ nu zelf	,
		if (filter.visitObject(component))
		{
			visitor.component((S)component, visit);
/s
Form$FormModelUpdateVisitor.component(Component, IVisit<Void>) line: 235	
			if (component instanceof IFormModelUpdateListener)
component=Form	,
/n
/t
Form<T>.process(IFormSubmitter) line: 967	
			internalOnValidateModelObjects();
/d
			// Form has no error
			delegateSubmit(submittingComponent);
submittingComponent	FrmPage$3  (id=2923)	
/s
Form<T>.delegateSubmit(IFormSubmitter) line: 1307	
			submittingComponent.onSubmit();
/s
FrmPage$3.onSubmit() line: 63	
				String s=name.getModel().getObject()+","+age.getModelObject();
				result.setDefaultModelObject(s);
				// or	((IModel<Object>)result.getDefaultModel()).setObject(s);
				name.setDefaultModelObject(null);
				age.setDefaultModelObject(null);
/t
Form<T>.delegateSubmit(IFormSubmitter) line: 1313	
			submittingComponent.onSubmit();
/d
		// invoke Form#onSubmit(..)
		for (Form<?> form : forms)
		{
			form.onSubmit();
/s
Form<T>.onSubmit() line: 1815	
	{
	}
/t
/ Form.onFormSubmitted() is done,	
/t
ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 235	
		invokeListener();
/d

/ Er was voor hierna een render page scheduled	,

/ Einde WICKETTESTER FORMTESTER

/ WICKETTESTER FORMTESTER AJAX FORM ERROR

/ proj wicket-examples-step-by-step
/ prog FrmTest

/ Deze test ERR	,

public class FrmPage extends WebPage {
	public FrmPage() {
		Form<Void>form=new Form<Void>("form");
		add(form);
		...
		ajx=new AjaxButton("ajx") {
			@Override
			protected void onSubmit(AjaxRequestTarget target, Form<?> form) {
				String s=name.getModel().getObject()+","+age.getModelObject();
				result.setDefaultModelObject(s); 
				//		or		((IModel<Object>)result.getDefaultModel()).setObject(s);
				target.add(result);
			}
		};
		form.add(ajx);

public class FrmTest {
	@Test
	public void testAjaxButton(){
		FormTester formTester=wicketTester.newFormTester("form");
		formTester.setValue("name", "foo");
		formTester.setValue("age", "13");
		formTester.setValue("ajx", "E=mc²");
		formTester.submit();
		wicketTester.assertLabel("result", "foo,13");
	}

/ FormTester gaat eerst de TextFields leeg maken	, dus "" er in set	,
/ stack	,
/s
	TextField<T>(FormComponent<T>).getValue() line: 871	
		if (NO_RAW_INPUT.equals(rawInput))
/j
		{
			return getModelValue();

	FormTester.getFormComponentValue(FormComponent<?>) line: 454	
		String val = formComponent.getValue();
/cb
	FormTester.getInputValue(FormComponent<?>) line: 434	
			if (formComponent instanceof IFormSubmittingComponent)
			{
				// buttons have to be submitted explicitely
			}
			else if (formComponent instanceof AbstractTextComponent)
			{
				return new String[] { getFormComponentValue(formComponent) };		<-
/cb
	FormTester$1.component(FormComponent<?>, IVisit<Void>) line: 400	
		workingForm.visitFormComponents(new IVisitor<FormComponent<?>, Void>()
		{
			@Override
			public void component(final FormComponent<?> formComponent, final IVisit<Void> visit)
			{
				// do nothing for invisible or disabled component -- the browser would not send any
				// parameter for a disabled component
				if (!(formComponent.isVisibleInHierarchy() && formComponent.isEnabledInHierarchy()))
				{
					return;
				}

				String[] values = getInputValue(formComponent);						<-
/cb
	FormTester$1.component(Object, IVisit) line: 389	
	Visits.visitChildren(Iterable<? super S>, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 144	
		for (final Object child : container)
		{
			// Get next child component
			// Is the child of the correct class (or was no class specified)?
			if (filter.visitObject(child))
			{
				Visit<R> childTraversal = new Visit<>();

				// Call visitor
				S s = (S)child;
				visitor.component(s, childTraversal);
/cb
	Visits.visitChildren(Iterable<? super S>, IVisitor<S,R>, IVisitFilter) line: 123	
	Form<T>(MarkupContainer).visitChildren(Class<?>, IVisitor<S,R>) line: 966	
	Form<T>.visitFormComponents(IVisitor<FormComponent<?>,R>) line: 1137	
	FormTester.<init>(String, Form<?>, BaseWicketTester, boolean) line: 388	
		this.path = path;					/ "form"
		this.workingForm = workingForm;		/ Form
		tester = wicketTester;

		// fill blank String for Text Component.									/ Dit gaan we doen: de TextFields leeg maken	,
		workingForm.visitFormComponents(new IVisitor<FormComponent<?>, Void>()							<-
		{
			@Override
			public void component(final FormComponent<?> formComponent, final IVisit<Void> visit)
			{
				// do nothing for invisible or disabled component -- the browser would not send any
				// parameter for a disabled component
				if (!(formComponent.isVisibleInHierarchy() && formComponent.isEnabledInHierarchy()))
				{
					return;
				}

				String[] values = getInputValue(formComponent);
/cb
	WicketTester(BaseWicketTester).newFormTester(String, boolean) line: 1295	
	WicketTester(BaseWicketTester).newFormTester(String) line: 1279	
	FrmTest.testAjaxButton() line: 45	
		FormTester formTester=wicketTester.newFormTester("form");
/debug
/s
TextField<T>(Component).getDefaultModelObjectAsString() line: 1654	
		return getDefaultModelObjectAsString();
/s
TextField<T>(Component).getDefaultModelObjectAsString() line: 1654	
		return getDefaultModelObjectAsString(getDefaultModelObject());
/s
TextField<T>(Component).getDefaultModelObject() line: 1620	
		final IModel<?> model = getDefaultModel();
model	PropertyModel<T>  (id=2594)	
				return model.getObject();			/ Dit gaat altijd via Field, of Method	, de value is nooit in het model zelf, alleen in de target	,
/s
PropertyModel<T>(AbstractPropertyModel<T>).getObject() line: 72	
		final String expression = propertyExpression();
name_
		final Object target = getInnermostModelOrObject();
FrmPage
			return (T)PropertyResolver.getValue(expression, target);
target	FrmPage  (id=2543)	
	name_	null	
/t
TextField<T>(Component).getDefaultModelObjectAsString(Object) line: 1695	
/=
	public final String getDefaultModelObjectAsString(final Object modelObject)
modelObject	null	
		return "";
/t
FormTester.getFormComponentValue(FormComponent<?>) line: 455	
		String val = formComponent.getValue();
""
		return val;
/t
FormTester$1.component(FormComponent<?>, IVisit<Void>) line: 401	
		workingForm.visitFormComponents(new IVisitor<FormComponent<?>, Void>()
		{
			@Override
			public void component(final FormComponent<?> formComponent, final IVisit<Void> visit)
			{
				// do nothing for invisible or disabled component -- the browser would not send any
				// parameter for a disabled component
				if (!(formComponent.isVisibleInHierarchy() && formComponent.isEnabledInHierarchy()))
				{
					return;
				}

				String[] values = getInputValue(formComponent);
/d
component	TextField<T>  (id=2590)	
values [""]
				for (String value : values)
				{
					addFormComponentValue(formComponent, value);
/s
FormTester.addFormComponentValue(FormComponent<?>, String) line: 829	
	/**
	 * Adds an additional <code>FormComponent</code>'s value into request parameter -- this method
	 * retains existing parameters but removes any duplicate parameters.
	 * 
	private FormTester addFormComponentValue(FormComponent<?> formComponent, String value)
formComponent	TextField<T>  (id=2590)	
value	"" (id=2641)	
		if (parameterExist(formComponent))
/s
FormTester.parameterExist(FormComponent<?>) line: 882	
		String parameter = tester.getRequest()				/ test=WicketTester	,
			.getPostParameters()
			.getParameterValue(formComponent.getInputName())
			.toString();
this	FormTester  (id=2580)	
	tester	WicketTester  (id=151)	
		request	MockHttpServletRequest  (id=2661)	
			post	MockRequestParameters  (id=2674)	
				parameters	HashMap<K,V>  (id=2677)	{}
null
		return parameter != null && parameter.trim().length() > 0;
false
/t
FormTester.addFormComponentValue(FormComponent<?>, String) line: 854	
		if (parameterExist(formComponent))
/n
		else
		{
			setFormComponentValue(formComponent, value);
value=""
/s
FormTester.setFormComponentValue(FormComponent<?>, String) line: 900	
		tester.getRequest()
			.getPostParameters()
			.setParameterValue(formComponent.getInputName(), value);
/s
MockRequestParameters.setParameterValue(String, String) line: 77	
		parameters.put(name, list);
name	"p::name" (id=2702)	
value	"" (id=2641)	
/t
FormTester.addFormComponentValue(FormComponent<?>, String) line: 857	
			setFormComponentValue(formComponent, value);
/d
this	FormTester  (id=2580)	
	tester	WicketTester  (id=151)	
		request	MockHttpServletRequest  (id=2661)	
			post	MockRequestParameters  (id=2674)	
				parameters	HashMap<K,V>  (id=2677)	
{p::name=[]}
		return this;
/t
Visits.visitChildren(Iterable<? super S>, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 146	
		for (final Object child : container)
container	Form<T>  (id=2572)	
		{
				visitor.component(s, childTraversal);
/d
		for (final Object child : container)
child=[Button [Component id = normal]]
				S s = (S)child;
				visitor.component(s, childTraversal);
/s
FormTester$1.component(FormComponent<?>, IVisit<Void>) line: 400	
		// fill blank String for Text Component.														/ herinner	, 
		workingForm.visitFormComponents(new IVisitor<FormComponent<?>, Void>()
		{
			@Override
			public void component(final FormComponent<?> formComponent, final IVisit<Void> visit)
			{
				String[] values = getInputValue(formComponent); 												<-
/s
FormTester.getInputValue(FormComponent<?>) line: 446	
			if (formComponent instanceof IFormSubmittingComponent)
			{
				// buttons have to be submitted explicitely
			}
		return new String[] { };
/t
FormTester$1.component(FormComponent<?>, IVisit<Void>) line: 401	
				String[] values = getInputValue(formComponent);
/d
[]
				if (formComponent instanceof AbstractTextComponent<?>)
/n
				for (String value : values)
/n
/t
FormTester.<init>(String, Form<?>, BaseWicketTester, boolean) line: 414	
		// fill blank String for Text Component.
		workingForm.visitFormComponents(new IVisitor<FormComponent<?>, Void>()
/d
		workingForm.detach();
/ TODO
/t
FrmTest.testAjaxButton() line: 46	
		FormTester formTester=wicketTester.newFormTester("form");
/d
		formTester.setValue("name", "foo");
/s
FormTester.setValue(String, String) line: 603	
		Component component = workingForm.get(formComponentId);
TextField "name"
		return setValue(component, value);
/s
FormTester.setValue(Component, String) line: 621	
		if (formComponent instanceof IFormSubmittingComponent)
/n
		else if (formComponent instanceof FormComponent)
		{
			setFormComponentValue((FormComponent<?>)formComponent, value);
/s
formComponent	TextField<T>  (id=2590)	
value	"foo" (id=2807)	
/s
FormTester.setFormComponentValue(FormComponent<?>, String) line: 900	

this	FormTester  (id=2580)	
	tester	WicketTester  (id=151)	
		request	MockHttpServletRequest  (id=2661)	
			post	MockRequestParameters  (id=2674)	
				parameters	HashMap<K,V>  (id=2677)	
{p::name=[], age=[]}

		tester.getRequest()
			.getPostParameters()
			.setParameterValue(formComponent.getInputName(), value);

this	FormTester  (id=2580)	
	tester	WicketTester  (id=151)	
		request	MockHttpServletRequest  (id=2661)	
			post	MockRequestParameters  (id=2674)	
				parameters	HashMap<K,V>  (id=2677)	
{p::name=[foo], age=[]}
/t
FrmTest.testAjaxButton() line: 47	
		formTester.setValue("name", "foo");
/d
		formTester.setValue("age", "13");
		formTester.setValue("ajx", "E=mc²");
/s
FormTester.setValue(String, String) line: 606	
		Component component = workingForm.get(formComponentId);
		return setValue(component, value);
/s
FormTester.setValue(Component, String) line: 627	
		if (formComponent instanceof IFormSubmittingComponent)
		{
			setFormSubmittingComponentValue((IFormSubmittingComponent)formComponent, value);
formComponent	FrmPage$4  (id=2624)	
value	"E=mc²" (id=2832)	
/s
FormTester.setFormSubmittingComponentValue(IFormSubmittingComponent, String) line: 915	
		tester.getRequest().getPostParameters().setParameterValue(component.getInputName(), value);
this	FormTester  (id=2580)	
	tester	WicketTester  (id=151)	
		request	MockHttpServletRequest  (id=2661)	
			post	MockRequestParameters  (id=2674)	
				parameters	HashMap<K,V>  (id=2677)	
{p::name=[foo], age=[13], ajx=[E=mc²]}
/t
FrmTest.testAjaxButton() line: 49	
		formTester.setValue("ajx", "E=mc²");
/d
		formTester.submit();
/s
FormTester.submit() line: 699	
			tester.submitForm(path);
path="form"
		Form<?> form = (Form<?>)getComponentFromLastRenderedPage(path);
		Url url = Url.parse(
			form.getRootForm()
				.urlFor(IFormSubmitListener.INTERFACE, new PageParameters())
				.toString(), Charset.forName(request.getCharacterEncoding()));
./wicket/page?0-1.IFormSubmitListener-form													<- WH niet OK voor ajax form	,
		request.setUrl(url);
		processRequest();
/c
RequestCycle.processRequest() line: 222	
			IRequestHandler handler = resolveRequestHandler();
handler	ListenerInterfaceRequestHandler  (id=2855)	
				execute(handler);
/c
ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 234	
		invokeListener();
/s
ListenerInterfaceRequestHandler.invokeListener() line: 241									<- ajax of niet method	, 
		if (getBehaviorIndex() == null)														<- gaat mis	,
/j
		{
			listenerInterface.invoke(getComponent());										<-
		else
/n
		{
				Behavior behavior = getComponent().getBehaviorById(behaviorId);
/n
				listenerInterface.invoke(getComponent(), behavior);
/n
/s
RequestListenerInterface.internalInvoke(Component, Object) line: 258	
			method.invoke(target);
/s
Form<T>.onFormSubmitted() line: 689	
		onFormSubmitted(null);
/s
Form<T>.onFormSubmitted(IFormSubmitter) line: 737	
			else
			{
				// First, see if the processing was triggered by a Wicket IFormSubmittingComponent
				if (submitter == null)
				{
					submitter = findSubmittingButton();
submitter	FrmPage$4  (id=2624)	
				else
				{
					// the submit request might be for one of the nested forms, so let's
					// find the right one:
					final Form<?> formToProcess = findFormToProcess(submitter);

					// process the form for this request
					formToProcess.process(submitter);
/s
Form<T>.process(IFormSubmitter) line: 933	
		// run validation
		validate();							/ sets convertedInput in children	,
children	ArrayList<E>  (id=2609)	
	[0]	TextField<T>  (id=2590)	
		convertedInput	"foo" (id=2807)	
		id	"name" (id=2699)	
	[1]	TextField<T>  (id=2623)	
		convertedInput	Integer  (id=2887)		13
		id	"age" (id=2889)	
	[2]	FrmPage$3  (id=2796)	
	[3]	FrmPage$4  (id=2624)	
		convertedInput	"E=mc²" (id=2832)	
			[0]	PropertyModel<T>  (id=2962)	
			[1]	AjaxButton$1  (id=2963)	
			[2]	Behaviors$BehaviorIdList  (id=2964)	
		id	"ajx" (id=2831)	

			// Update model using form data
			updateFormComponentModels();
this	Form<T>  (id=2572)	
	parent	FrmPage  (id=2543)	
		age_	Integer  (id=2887)	
		name_	"foo" (id=2807)	

			// Form has no error
			delegateSubmit(submittingComponent);
/s
Form<T>.delegateSubmit(IFormSubmitter) line: 1287	
		if (submittingComponent != null)
		{
			// invoke submit on component
			submittingComponent.onSubmit();
/s
FrmPage$4(AjaxButton).onSubmit() line: 190	
	public final void onSubmit()
	{
		logger.warn("unexpected invocation of #onSubmit() on {}", this);

/t
Form<T>.delegateSubmit(IFormSubmitter) line: 1313	
			submittingComponent.onSubmit();
/d
		// invoke Form#onSubmit(..)
		for (Form<?> form : forms)
		{
			form.onSubmit();
/ niets	,


/ Einde WICKETTESTER FORMTESTER AJAX FORM ERROR

/ WICKETTESTER LINK

/ proj wicket-examples-step-by-step
/ prog FrmTest 

public class FrmPage extends WebPage {
		Link<Void>link=new Link<Void>("link") {
			@Override
			public void onClick() {
				result_="From Link";	
			}
		};
		add(link);
		result=new Label("result");
		mdl=new PropertyModel<String>(this, "result_");
		result.setDefaultModel(mdl);
		add(result);

public class FrmTest {
	@Test
	public void testLink(){
		wicketTester.clickLink("link");
		wicketTester.assertLabel("result", "From Link");

//////////////////////////////////////////
/ Als we de link op de page, zien we 	,
Request URL:http://localhost:9090/wicket-examples-step-by-step/repeater/frm?0-3.ILinkListener-link
Request Method:GET
/ In de test zullen we de url zien	, wicket/page?0-1.ILinkListener-link

/s
FrmTest.testLink() line: 59	
		wicketTester.clickLink("link");
/s
WicketTester(BaseWicketTester).clickLink(String, boolean) line: 1940	
		// if the link is a normal link (or ResourceLink)
		else if (linkComponent instanceof AbstractLink)
		{
			AbstractLink link = (AbstractLink)linkComponent;
			else
			{
				executeListener(link, ILinkListener.INTERFACE);
/s
WicketTester(BaseWicketTester).executeListener(Component, RequestListenerInterface) line: 1104	
		IRequestHandler handler = new ListenerInterfaceRequestHandler(
			new PageAndComponentProvider(component.getPage(), component), 
			listener);
handler	ListenerInterfaceRequestHandler  (id=2556)	
	listenerInterface	RequestListenerInterface  (id=160)	
		listenerInterfaceClass	Class<T> (org.apache.wicket.markup.html.link.ILinkListener) (id=159)	
		method	Method  (id=2555)	
		name	"ILinkListener" (id=2578)	
	pageComponentProvider	PageAndComponentProvider  (id=2557)	
		component	FrmPage$1  (id=2552)	
		componentPath	null					<- moet nog resolved	,

		Url url = urlFor(handler);
wicket/page?0-1.ILinkListener-link		/ url heeft 1 requestparam	, zonder value	,

		request.setUrl(url);

		// Process the request
		processRequest(request, null);
/s
WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler) line: 657	
request	MockHttpServletRequest  (id=2641)	
	parameters	LinkedHashMap<K,V>  (id=2650)	
		[0]	LinkedHashMap$Entry<K,V>  (id=2664)	
			key	"0-1.ILinkListener-link" (id=2666)	
			value	String[1]  (id=2667)	

		return processRequest(request, forcedRequestHandler, false);
/s
WicketTester(BaseWicketTester).applyRequest() line: 2538	
		applyRequest();
/s
WicketTester(BaseWicketTester).applyRequest() line: 2538	
	/**
	 * Rebuilds {@link ServletWebRequest} used by wicket from the mock request used to build
	 * requests. Sometimes this method is useful when changes need to be checked without processing
	 * a request.
	 */
	public void applyRequest()
	{
		Request req = newServletWebRequest();
req	ServletWebRequest  (id=2685)	
	httpServletRequest	MockHttpServletRequest  (id=2641)	
	url	Url  (id=2688)	 wicket/page?0-1.ILinkListener-link

		requestCycle.setRequest(req);
		if (useRequestUrlAsBase)
		{
			requestCycle.getUrlRenderer().setBaseUrl(req.getUrl());
/t
WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler, boolean) line: 718	
		applyRequest();
/d
		requestCycle.scheduleRequestHandlerAfterCurrent(null);
			if (!requestCycle.processRequestAndDetach())
/s
RequestCycle.processRequest() line: 216	
			IRequestHandler handler = resolveRequestHandler();
handler	ListenerInterfaceRequestHandler  (id=2727)	
	listenerInterface	RequestListenerInterface  (id=160)	
		listenerInterfaceClass	Class<T> (org.apache.wicket.markup.html.link.ILinkListener) (id=159)	
		name	"ILinkListener" (id=2578)	
	pageComponentProvider	PageAndComponentProvider  (id=2729)	
		component	null	
		componentPath	"link" (id=2749)	

				execute(handler);
/s
ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 164	
			component = getComponent();
component	FrmPage$1  (id=2552)	
[Link [Component id = link]]

		invokeListener();
/s
ListenerInterfaceRequestHandler.invokeListener() line: 239		/ ajax or not method	,
		if (getBehaviorIndex() == null)
		{
			listenerInterface.invoke(getComponent());
/s
RequestListenerInterface.internalInvoke(Component, Object) line: 258	
			method.invoke(target);
/s
FrmPage$1(Link<T>).onLinkClicked() line: 190	
		// Invoke subclass handler
		onClick();
/s
FrmPage$1.onClick() line: 34	
/=
		Link<Void>link=new Link<Void>("link") {
			@Override
			public void onClick() {
				result_="From Link";		<-


/ Einde WICKETTESTER LINK

/ WICKETTESTER AJAXLINK WITH CLICKLINK 

/ proj wicket-examples-step-by-step
/ prog FrmTest 

/ ze hebben .clickLink zo program dat voor AjaxLink het = .executeAjaxEvent	,

public class FrmPage extends WebPage {
		AjaxLink<Void>ajaxLink=new AjaxLink<Void>("ajaxLink") {
			@Override
			public void onClick(AjaxRequestTarget target) {
				result_="From AjaxLink";	
				target.add(result);
			}
		};
		add(ajaxLink);
		result=new Label("result");
		mdl=new PropertyModel<String>(this, "result_");
		result.setDefaultModel(mdl);
		result.setOutputMarkupId(true);
		add(result);


public class FrmTest {

	@Test
	public void testAjaxLink(){
		wicketTester.clickLink("ajaxLink");
		wicketTester.assertComponentOnAjaxResponse("result");
		wicketTester.assertLabel("result", "From AjaxLink");
	}

/s
WicketTester(BaseWicketTester).clickLink(String) line: 1827	
		clickLink(path, true);
/s
WicketTester(BaseWicketTester).clickLink(String, boolean) line: 1858	
/=
	public void clickLink(String path, boolean isAjax)
		Component linkComponent = getComponentFromLastRenderedPage(path);

		// if the link is an AjaxLink, we process it differently
		// than a normal link
		if (linkComponent instanceof AjaxLink)
		{
			// If it's not ajax we fail
			if (isAjax == false)
			{
				fail("Link " + path + "is an AjaxLink and will " +
					"not be invoked when AJAX (javascript) is disabled.");
			}

			List<AjaxEventBehavior> behaviors = WicketTesterHelper.findAjaxEventBehaviors(
				linkComponent, "click");
			for (AjaxEventBehavior behavior : behaviors)
			{
				executeBehavior(behavior);
/ Dan weer ...


/ Einde  WICKETTESTER AJAXLINK WITH CLICKLINK 

/ WICKETTESTER AJAXLINK WITH EXECUTEAJAXEVENT
/  	STAP 1	, set string in Label result's model	,	
/ 	STAP 2. Label result's model wordt set in partial update


/ proj wicket-examples-step-by-step
/ prog FrmTest 

public class FrmPage extends WebPage {
		AjaxLink<Void>ajaxLink=new AjaxLink<Void>("ajaxLink") {
			@Override
			public void onClick(AjaxRequestTarget target) {
				result_="From AjaxLink";	
				target.add(result);
			}
		};
		add(ajaxLink);
		result=new Label("result");
		mdl=new PropertyModel<String>(this, "result_");
		result.setDefaultModel(mdl);
		result.setOutputMarkupId(true);
		add(result);

/ intermezzo

/ AjaxRequestTarget target is AjaxRequestHandler, is 2de controller die scheduled wordt na de ListenerRequestInterfaceHandler(Behavior), die onClick is	, de 2de controller is vergelijkbaar met RenderPageRequestHandler, die de page renders	, deze 2de controller renders de partial page	, 

public interface AjaxRequestTarget extends IPartialPageRequestHandler, ILoggableRequestHandler
/e
/**
 * Request handler that allows partial updates of the current page instance.
 */
public interface IPartialPageRequestHandler extends IPageRequestHandler

/ Einde intermezzo


public class FrmTest {

	@Test
	public void testAjaxLink2(){
		wicketTester.executeAjaxEvent("ajaxLink", "click");
		wicketTester.assertComponentOnAjaxResponse("result");

	}

/ we kunnen ook	,
		wicketTester.assertLabel("result", "From AjaxLink");
/ maar dit gebeurt altijd eerst	, 
/ onze test is sterker	,

/ Als we op de page de ajax link click , zien we	,
Request URL:http://localhost:9090/wicket-examples-step-by-step/repeater/frm?0-4.IBehaviorListener.0-ajaxLink&_=1483881934380
Request Method:GET

/s
FrmTest.testAjaxLink2() line: 75	
		wicketTester.executeAjaxEvent("ajaxLink", "click");
/s
WicketTester(BaseWicketTester).executeAjaxEvent(String, String) line: 2300	
		Component component = getComponentFromLastRenderedPage(componentPath);
		executeAjaxEvent(component, event);
/s
WicketTester(BaseWicketTester).executeAjaxEvent(Component, String) line: 2383	
		List<AjaxEventBehavior> ajaxEventBehaviors = WicketTesterHelper.findAjaxEventBehaviors( component, event);
/s
WicketTesterHelper.findAjaxEventBehaviors(Component, String) line: 208	
/=
	public static List<AjaxEventBehavior> findAjaxEventBehaviors(Component component, String event)
component	FrmPage$2  (id=2556)	
event	"click" (id=2555)	

		List<AjaxEventBehavior> behaviors = new ArrayList<>();
		String[] eventNames = Strings.split(event, ' ');
		for (String eventName : eventNames)
click
			for (Behavior behavior : component.getBehaviors())				
behavior	AjaxLink$1  (id=2560)	
				if (behavior instanceof AjaxEventBehavior)
				{
					String behaviorEvent = ((AjaxEventBehavior)behavior).getEvent();
click
					String[] behaviorEventNames = Strings.split(behaviorEvent, ' ');
					for (String behaviorEventName : behaviorEventNames)
					{
						if (eventName.equalsIgnoreCase(behaviorEventName))
/j
						{
							behaviors.add((AjaxEventBehavior)behavior);
		return behaviors;

/ click ajax link on page gives IBehaviorListener-ajaxLink in url	, 
/ klopt, maar de test gaat hieronder dat ook doen, hij gaat een request maken, met een url er in, dat is altijd bij requests, en die url is voor de behavior	, urlFor(this, ...), waar this=Behavior=AjaxEventBehavior	, zodat het request bij deze behavior uitkomt	, 
/ Als we op de page op de link click, was deze url al create eerder bij render page	,

/ intermezzo

public abstract class AjaxLink<T> extends AbstractLink implements IAjaxLink, IGenericComponent<T>
	@Override
	protected void onInitialize()
	{
		super.onInitialize();
		add(newAjaxEventBehavior("click"));
	protected AjaxEventBehavior newAjaxEventBehavior(String event)
	{
		return new AjaxEventBehavior(event)
		{
			private static final long serialVersionUID = 1L;

			@Override
			protected void onEvent(AjaxRequestTarget target)
			{
				onClick(target);
			}

			@Override
			protected void updateAjaxAttributes(AjaxRequestAttributes attributes)
			{
				super.updateAjaxAttributes(attributes);
				AjaxLink.this.updateAjaxAttributes(attributes);
			}
		};

/ Einde intermezzo

/t
WicketTester(BaseWicketTester).executeAjaxEvent(Component, String) line: 2390	
		List<AjaxEventBehavior> ajaxEventBehaviors = WicketTesterHelper.findAjaxEventBehaviors(
			component, event);
/d
[org.apache.wicket.ajax.markup.html.AjaxLink$1@2b525fb6]
		for (AjaxEventBehavior ajaxEventBehavior : ajaxEventBehaviors)
		{
			executeBehavior(ajaxEventBehavior);
/s
WicketTester(BaseWicketTester).executeBehavior(AbstractAjaxBehavior) line: 1168	

//////////////////////
/ creates request met url van de controller/handler(behavior)	, and calls  processRequest	,

		Url url = Url.parse(behavior.getCallbackUrl().toString(), Charset.forName(request.getCharacterEncoding()));
/s
AjaxLink$1(AbstractAjaxBehavior).getCallbackUrl() line: 78	

		rli = IBehaviorListener.INTERFACE;
rli	RequestListenerInterface  (id=147)	
	listenerInterfaceClass	Class<T> (org.apache.wicket.behavior.IBehaviorListener) (id=127)	
	method	Method  (id=2593)	 public abstract void org.apache.wicket.behavior.IBehaviorListener.onRequest()
	name	"IBehaviorListener" (id=2594)	

		return getComponent().urlFor(this, rli, new PageParameters());
/s
FrmPage$2(Component).urlFor(Behavior, RequestListenerInterface, PageParameters) line: 3347	
/=
	public final CharSequence urlFor(final Behavior behaviour, final RequestListenerInterface listener, final PageParameters parameters)
		int id = getBehaviorId(behaviour);
		IRequestHandler handler = createRequestHandler(listener, parameters, id);
handler	ListenerInterfaceRequestHandler  (id=2582)	
		return getRequestCycle().urlFor(handler);
/s
RequestCycle.urlFor(IRequestHandler) line: 534	
			Url mappedUrl = mapUrlFor(handler);
/s
RequestCycle.mapUrlFor(IRequestHandler) line: 434	
		final Url url = requestMapper.mapHandler(handler);							/ handler->url
/s
SystemMapper(CompoundRequestMapper).mapHandler(IRequestHandler) line: 214	

		for (IRequestMapper mapper : mappers)
mapper	PageInstanceMapper  (id=2602)	
		{
			Url url = mapper.mapHandler(handler);				/ handler ->url
wicket/page?0-1.IBehaviorListener.0-ajaxLink

/ Intermezzo

public class PageInstanceMapper extends AbstractComponentMapper
	public IRequestHandler mapRequest(Request request)				/ request's url -> handler
	public Url mapHandler(IRequestHandler requestHandler)			/ handler -> url	, url wordt later set in Request	,

/ Einde Intermezzo

/t
WicketTester(BaseWicketTester).executeBehavior(AbstractAjaxBehavior) line: 1168	
		Url url = Url.parse(behavior.getCallbackUrl().toString(), Charset.forName(request.getCharacterEncoding()));
/pd
/s
Url.parse(CharSequence, Charset) line: 207	
/=
	public static Url parse(CharSequence _url, Charset charset)
_url	"./wicket/page?0-1.IBehaviorListener.0-ajaxLink" (id=2605)	
charset	UTF_8  (id=2610)	
		return parse(_url, charset, true);
/t
WicketTester(BaseWicketTester).executeBehavior(AbstractAjaxBehavior) line: 1172	
		Url url = Url.parse(behavior.getCallbackUrl().toString(), Charset.forName(request.getCharacterEncoding()));
/d
url	Url  (id=2614)	 ./wicket/page?0-1.IBehaviorListener.0-ajaxLink
	parameters	ArrayList<E>  (id=2616)	
		[0]	Url$QueryParameter  (id=2630)	
			name	"0-1.IBehaviorListener.0-ajaxLink" (id=2631)	
			value	"" (id=2607)	
	segments	ArrayList<E>  (id=2617)	
[., wicket, page]

		request.setUrl(url);
		request.addHeader(WebRequest.HEADER_AJAX_BASE_URL, url.toString());
		request.addHeader(WebRequest.HEADER_AJAX, "true");

		if (behavior instanceof AjaxFormSubmitBehavior)								
/n
		processRequest();
/s
WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler, boolean) line: 686	
/=
	protected boolean processRequest(final MockHttpServletRequest forcedRequest, final IRequestHandler forcedRequestHandler, final boolean redirect)
forcedRequest	null	
forcedRequestHandler	null	
redirect	false	

		if (!redirect && getRequest().getHeader("Wicket-Ajax") == null)
/n
		{
			lastRenderedPage = null;
/n

this	WicketTester  (id=156)	
	request	MockHttpServletRequest  (id=2606)	
		headers	ValueMap  (id=2680)	
			[0]	LinkedHashMap$Entry<K,V>  (id=2692)	
Accept=[text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5]
			[1]	LinkedHashMap$Entry<K,V>  (id=2693)	
Accept-Charset=[ISO-8859-1,utf-8;q=0.7,*;q=0.7]
			[2]	LinkedHashMap$Entry<K,V>  (id=2694)	
Accept-Language=[en-us,en;q=0.5]
			[3]	LinkedHashMap$Entry<K,V>  (id=2695)	
User-Agent=[Mozilla/5.0 (Windows; U; Windows NT 5.0; en-US; rv:1.7) Gecko/20040707 Firefox/0.9.2]
			[4]	LinkedHashMap$Entry<K,V>  (id=2697)	
Wicket-Ajax-BaseURL=[wicket/page?0-1.IBehaviorListener.0-ajaxLink]
			[5]	LinkedHashMap$Entry<K,V>  (id=2699)	
Wicket-Ajax=[true]

		applyRequest();														/ set Request in de RequestCycle	,
/s
WicketTester(BaseWicketTester).applyRequest() line: 2540	
		Request req = newServletWebRequest();
req	ServletWebRequest  (id=2760)	
	httpServletRequest	MockHttpServletRequest  (id=2606)	
	url	Url  (id=2763)	 wicket/page?0-1.IBehaviorListener.0-ajaxLink

		requestCycle.setRequest(req);
		if (useRequestUrlAsBase)
		{
			requestCycle.getUrlRenderer().setBaseUrl(req.getUrl());
		}
/t
WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler, boolean) line: 714	
		applyRequest();
/d
		requestCycle.scheduleRequestHandlerAfterCurrent(null);
			if (!requestCycle.processRequestAndDetach())
/s
RequestCycle.processRequest() line: 219	
			IRequestHandler handler = resolveRequestHandler();
/s
RequestCycle.resolveRequestHandler() line: 189	
		return requestMapper.mapRequest(request);					/ request's url -> handler	, zojuist hierboven .mapHandler het omgekeerde	, 
													/ wat normaal bij het render van een page gebeurt (.mapHandler creates de url van de handler )
/s
BaseWicketTester$TestRequestMapper.mapRequest(Request) line: 2867	
				return delegate.mapRequest(request);
/s
SystemMapper(CompoundRequestMapper).mapRequest(Request) line: 150	
		for (MapperWithScore mapperWithScore : list)
		{
			IRequestMapper mapper = mapperWithScore.getMapper();
mapper	PageInstanceMapper  (id=2602)	
			IRequestHandler handler = mapper.mapRequest(request); 	/ request's url -> handler	,

/ intermezzo

public class PageInstanceMapper extends AbstractComponentMapper
	public IRequestHandler mapRequest(Request request){	 / url -> controller	, 
			Url url = request.getUrl();
			...
	public Url mapHandler(IRequestHandler requestHandler)	/ inverse	, controller -> url

/ einde intermezzo

handler	ListenerInterfaceRequestHandler  (id=2778)	
	behaviorId	Integer  (id=2781)	0
	listenerInterface	RequestListenerInterface  (id=147)	
		listenerInterfaceClass	Class<T> (org.apache.wicket.behavior.IBehaviorListener) (id=127)	
		method	Method  (id=2593) public abstract void org.apache.wicket.behavior.IBehaviorListener.onRequest()	
		name	"IBehaviorListener" (id=2594)	
	pageComponentProvider	PageAndComponentProvider  (id=2782)	
		component	null	
		componentPath	"ajaxLink" (id=2809)	

/t
RequestCycle.processRequest() line: 220	
			IRequestHandler handler = resolveRequestHandler();
/d
				execute(handler);
/s
RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 89	

			respond(handler);															<-
handler	ListenerInterfaceRequestHandler  (id=2565)	
			execute(scheduled);			 					/ straks	,	 
scheduled	AjaxRequestHandler  (id=2570) 	

/s
ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 157	
			component = getComponent();									/ uit de handler's pageComponentProvider	,
[AjaxLink [Component id = ajaxLink]]

		if (isAjax == false && listenerInterface.isRenderPageAfterInvocation())
/n
		{
			requestCycle.scheduleRequestHandlerAfterCurrent(new RenderPageRequestHandler( pageProvider, policy));
/n
/ precies de bedoeling bij ajax	, 

		invokeListener();
/s
ListenerInterfaceRequestHandler.invokeListener() line: 239		/ ajax of niet method	,
		if (getBehaviorIndex() == null)
/n
		else
		{
				Behavior behavior = getComponent().getBehaviorById(behaviorId);

				listenerInterface.invoke(getComponent(), behavior);					/ listenerInterface is het interface naar de echte controller WH	,
																			/ de behavior in dit geval	,
/s
RequestListenerInterface.internalInvoke(Component, Object) line: 248	
			method.invoke(target);
/s
AjaxLink$1(AbstractDefaultAjaxBehavior).onRequest() line: 587	
this	AjaxLink$1  (id=2562)	/= new AjaxEventBehavior("click")

/ 1ste controller's method	, hij schedules de 2de controller	, die de partial page renders	, en gaat zelf handle in respond (gaat respond geven)	,

		AjaxRequestTarget target = app.newAjaxRequestTarget(getComponent().getPage());	
																					
target	AjaxRequestHandler  (id=2869)	
		requestCycle.scheduleRequestHandlerAfterCurrent(target);
		respond(target);
/s
AjaxLink$1(AjaxEventBehavior).respond(AjaxRequestTarget) line: 155	
		onEvent(target);
/s
AjaxLink$1.onEvent(AjaxRequestTarget) line: 84	
/=
		return new AjaxEventBehavior(event)
		{
			private static final long serialVersionUID = 1L;

			@Override
			protected void onEvent(AjaxRequestTarget target)
			{
				onClick(target);

/ intermezzo

/ stack	,
	AjaxLink$1(AjaxEventBehavior).respond(AjaxRequestTarget) line: 155			/ toch zijn deze 2 samen 1 controller		, gesplitste responds	, 
																		/ de behavior is de echte controller	, de interface ...
	...
	ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 234	
	...

/ Einde intermezzo

/s
FrmPage$2.onClick(AjaxRequestTarget) line: 42	
		AjaxLink<Void>ajaxLink=new AjaxLink<Void>("ajaxLink") {
			@Override
			public void onClick(AjaxRequestTarget target) {
				result_="From AjaxLink";						/ STAP 1	, set string in Label result's model	,	
				target.add(result);
/s
AjaxRequestHandler.add(Component, String) line: 238	
		update.add(component, markupId);
/s
AjaxRequestHandler$1(PartialPageUpdate).add(Component, String) line: 391	
		component.setMarkupId(markupId);
component	Label  (id=2890)	
	data	Object[2]  (id=2917)	
		[0]	PropertyModel<T>  (id=2914)		
			expression	"result_" (id=2920)	
			target	FrmPage  (id=2660)	
		[1]	MetaDataEntry<T>  (id=2918)	
			key	Component$1  (id=2923)	
			object	"result5" (id=2891)		<-
	generatedMarkupId	-1					<-

		markupIdToComponent.put(markupId, component);

/t
/ helemaal terug	,
RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 97	
			respond(handler);
/d
handler	ListenerInterfaceRequestHandler  (id=2778)	
			execute(scheduled);							/ 2de controller	, na 1ste ListenerInterfaceRequestHandler (Behavior)
											/ deze 2de controller = target	, die we altijd use in de 1ste controller	, 
scheduled	AjaxRequestHandler  (id=2869)	
/s
AjaxRequestHandler.respond(IRequestCycle) line: 358		
		final StringResponse bodyResponse = new StringResponse();
		update.writeTo(bodyResponse, encoding);
/s
AjaxRequestHandler$1(PartialPageUpdate).writeTo(Response, String) line: 158	
			writeHeader(response, encoding);
<?xml version="1.0" encoding="UTF-8"?><ajax-response>
			// process added components
			writeComponents(response, encoding);
/s
AjaxRequestHandler$1(PartialPageUpdate).writeComponents(Response, String) line: 245	
		// process component markup
		for (Map.Entry<String, Component> stringComponentEntry : markupIdToComponent.entrySet())
		{
			final Component component = stringComponentEntry.getValue();
[Component id = result]

			if (!containsAncestorFor(component))
			{
				writeComponent(response, component.getAjaxRegionMarkupId(), component, encoding);
/s
AjaxRequestHandler$1(XmlPartialPageUpdate).writeComponent(Response, String, Component, String) line: 119	
/=
	protected void writeComponent(Response response, String markupId, Component component, String encoding)
markupId	"result5" (id=2891)	

		component.setOutputMarkupId(true);
/ TODO Wicket doet het zelf	, moeten wij het dan ook doen	? 

		Response oldResponse = RequestCycle.get().setResponse(bodyBuffer);

this	AjaxRequestHandler$1  (id=2892)	
	bodyBuffer	PartialPageUpdate$ResponseBuffer  (id=2898)	
		buffer	AppendingStringBuffer  (id=3041)	
		originalResponse	BaseWicketTester$WicketTesterServletWebResponse  (id=2775)	

/ In Expressions , als we 
"org.apache.wick...uestCycle.get()"	 (pending)	
	activeResponse	PartialPageUpdate$ResponseBuffer  (id=2898)	
		buffer	AppendingStringBuffer  (id=3041)	
		originalResponse	BaseWicketTester$WicketTesterServletWebResponse  (id=2775)	/ save , om straks weer te reset	,

			bodyBuffer.reset();

				component.render();
/s
Label(Component).render() line: 2301	
			// Do the render
			internalRender();
/s
Label(Component).internalRender() line: 2346	
		IMarkupFragment markup = getMarkup();
<span wicket:id="result"></span>
				onRender();
/s
Label(Component).internalRenderComponent() line: 2508	
tag	ComponentTag  (id=3016)	
<span wicket:id="result">
		// Call any tag handler
		onComponentTag(tag);
tag	ComponentTag  (id=3016)	
<span wicket:id="result" id="result5">
				renderComponentTag(tag);
/s
Label(Component).renderComponentTag(ComponentTag) line: 4034	
			// Write the tag
			tag.writeOutput(getResponse(), !needToRenderTag(null),
				getMarkup().getMarkupResourceStream().getWicketNamespace());

/ Component.getResponse()=		return getRequestCycle().getResponse();

/ Geef in Expressions	,
"org.apache.wick...uestCycle.get()"	 (pending)	
	activeResponse	PartialPageUpdate$ResponseBuffer  (id=2898)	
		buffer	AppendingStringBuffer  (id=3041)	
<span wicket:id="result" id="result5">

/t
Label(Component).internalRenderComponent() line: 2565	
				renderComponentTag(tag);
/d
				// Render the body. The default strategy will simply call the component's
				// onComponentTagBody() implementation.
				getMarkupSourcingStrategy().onComponentTagBody(this, markupStream, tag);
/s
DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
		component.onComponentTagBody(markupStream, openTag);
/s
Label.onComponentTagBody(MarkupStream, ComponentTag) line: 115	
		replaceComponentTagBody(markupStream, openTag, getDefaultModelObjectAsString());	/ STAP 2. Label result's model wordt set in partial update
/s
Label(Component).replaceComponentTagBody(MarkupStream, ComponentTag, CharSequence) line: 4054	
/=
	protected final void replaceComponentTagBody(final MarkupStream markupStream, final ComponentTag tag, final CharSequence body)
body	"From AjaxLink" (id=3160)	
			// Write the new body
			getResponse().write(body);

"org.apache.wick...uestCycle.get()"	 (pending)	
	activeResponse	PartialPageUpdate$ResponseBuffer  (id=2898)	
		buffer	AppendingStringBuffer  (id=3041)	
<span wicket:id="result" id="result5">From AjaxLink

/t
Label(Component).internalRenderComponent() line: 2570	
				getMarkupSourcingStrategy().onComponentTagBody(this, markupStream, tag);
/d
					renderClosingComponentTag(markupStream, tag, getRenderBodyOnly());
/t
AjaxRequestHandler$1(XmlPartialPageUpdate).writeComponent(Response, String, Component, String) line: 135	

				component.render();
/d
			// Restore original response
			RequestCycle.get().setResponse(oldResponse);

"org.apache.wick...uestCycle.get()"	 (pending)	
	activeResponse	BaseWicketTester$WicketTesterServletWebResponse  (id=2775)	
/ zoals het was	,

		response.write("<component id=\"");
		response.write(markupId);
		response.write("\" ><![CDATA[");
		response.write(encode(bodyBuffer.getContents()));
		response.write("]]></component>");
		bodyBuffer.reset();
/t
AjaxRequestHandler$1(PartialPageUpdate).writeTo(Response, String) line: 160	
			// process added components
			writeComponents(response, encoding);
/d
response	StringResponse  (id=2984)	
	out	AppendingStringBuffer  (id=2985)	
<?xml version="1.0" encoding="UTF-8"?><ajax-response><component id="result5" ><![CDATA[<span wicket:id="result" id="result5">From AjaxLink</span>]]></component>
			// write the XML tags and we're done
			writeHeaderContribution(response);
/t
AjaxRequestHandler.respond(IRequestCycle) line: 359	
		final StringResponse bodyResponse = new StringResponse();
		update.writeTo(bodyResponse, encoding);
/d
bodyResponse	StringResponse  (id=2984)	
	out	AppendingStringBuffer  (id=2985)	
<?xml version="1.0" encoding="UTF-8"?><ajax-response><component id="result5" ><![CDATA[<span wicket:id="result" id="result5">From AjaxLink</span>]]></component>
		CharSequence filteredResponse = invokeResponseFilters(bodyResponse);
		response.write(filteredResponse);
/s
BaseWicketTester$WicketTesterServletWebResponse(ServletWebResponse).write(CharSequence) line: 110	
			httpServletResponse.getWriter().append(sequence);
/=printWriter	,
this	BaseWicketTester$WicketTesterServletWebResponse  (id=2775)	
	httpServletResponse	MockHttpServletResponse  (id=2674)	
		printWriter	MockHttpServletResponse$2  (id=3092)	
			out	StringWriter  (id=3097)	
<?xml version="1.0" encoding="UTF-8"?><ajax-response><component id="result5" ><![CDATA[<span wicket:id="result" id="result5">From AjaxLink</span>]]></component>

/t
RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 900	
				handler.respond(RequestCycle.this);
			}
			finally
			{
				setResponse(originalResponse);
/ De response met de XML	,
/ Nu nu toch weer	,
"org.apache.wick...uestCycle.get()"	 (pending)	
	activeResponse	BaseWicketTester$WicketTesterServletWebResponse  (id=2775)	
		httpServletResponse	MockHttpServletResponse  (id=2674)	
			printWriter	MockHttpServletResponse$2  (id=3092)	
				out	StringWriter  (id=3097)	
<?xml version="1.0" encoding="UTF-8"?><ajax-response><component id="result5" ><![CDATA[<span wicket:id="result" id="result5">From AjaxLink</span>]]></component>

/t
RequestCycle.processRequest() line: 248	
				execute(handler);
/d
		finally
		{
			set(null);

/ in Expressions:
org.apache.wicket.request.cycle.RequestCycle.get() null

/t
WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler, boolean) line: 726	
			if (!requestCycle.processRequestAndDetach())
/d

this	WicketTester  (id=167)	
	request	MockHttpServletRequest  (id=2748)	
	requestCycle	RequestCycle  (id=2547)	
		activeResponse	BaseWicketTester$WicketTesterServletWebResponse  (id=2676)	
			httpServletResponse	MockHttpServletResponse  (id=2739)	
				printWriter	MockHttpServletResponse$2  (id=2747)	
					out	StringWriter  (id=2752)	
<?xml version="1.0" encoding="UTF-8"?><ajax-response><component id="result5" ><![CDATA[<span wicket:id="result" id="result5">From AjaxLink</span>]]></component>
		request	ServletWebRequest  (id=2661)	
			httpServletRequest	MockHttpServletRequest  (id=2748)	
	response	MockHttpServletResponse  (id=2739)	
		printWriter	MockHttpServletResponse$2  (id=2747)	
			out	StringWriter  (id=2752)	
<?xml version="1.0" encoding="UTF-8"?><ajax-response><component id="result5" ><![CDATA[<span wicket:id="result" id="result5">From AjaxLink</span>]]></component>

/ in WicketTester vinden we request en response	, die we ook in requestCycle vinden	, 
/ we zagen ook dat RequestCycle.get()==null	, maar er wordt hieronder een nieuwe create	,

			recordRequestResponse();
/s
WicketTester(BaseWicketTester).recordRequestResponse() line: 860	
		lastRequest = request;
		setLastResponse(response);		/ we moeten naar WicketTester.lastResponse kijken later	, want WicketTester.response wordt straks vernieuwd TODO
		previousRequests.add(request);
		previousResponses.add(response);
/t
WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler, boolean) line: 726	
			recordRequestResponse();
			setupNextRequestCycle();
/s
WicketTester(BaseWicketTester).setupNextRequestCycle() line: 410	
		request = new MockHttpServletRequest(application, httpSession, servletContext);
		request.setURL(request.getContextPath() + request.getServletPath() + "/");		/ "/context/servlet/'
		response = new MockHttpServletResponse(request);
		ServletWebRequest servletWebRequest = newServletWebRequest();
		requestCycle = application.createRequestCycle(servletWebRequest,
			newServletWebResponse(servletWebRequest));
		ThreadContext.setRequestCycle(requestCycle);

		if (session == null)
/n

/ in Expressions	,   RequestCycle is er inderdaad weer	,
"org.apache.wicket.request.cycle.RequestCycle.get()"	
	activeResponse	BaseWicketTester$WicketTesterServletWebResponse  (id=2836)	
	...
 
/t
FrmTest.testAjaxLink2() line: 76	
		wicketTester.executeAjaxEvent("ajaxLink", "click");
/d
		wicketTester.assertComponentOnAjaxResponse("result");
/s
WicketTester.assertComponentOnAjaxResponse(String) line: 331	
		assertComponentOnAjaxResponse(getComponentFromLastRenderedPage(componentPath, false));
componentPath	"result" (id=3036)	
/s
WicketTester(BaseWicketTester).getComponentFromLastRenderedPage(String, boolean) line: 1581	
		Component component = getLastRenderedPage().get(path);
component	Label  (id=2693)	
/ getLastRenderedPage()=FrmPage	, de hele Wicket component is saved	, 

			return component;
/t
/s
WicketTester.assertComponentOnAjaxResponse(Component) line: 313	
		Result result = isComponentOnAjaxResponse(component);
/s
WicketTester(BaseWicketTester).isComponentOnAjaxResponse(Component) line: 2235	
		// Get the AJAX response
		String ajaxResponse = getLastResponseAsString();
/s
WicketTester(BaseWicketTester).getLastResponseAsString() line: 983	
		String response = lastResponse.getDocument();

/ intermezzo

this	WicketTester  (id=167)	
	lastResponse	MockHttpServletResponse  (id=2739)	
		printWriter	MockHttpServletResponse$2  (id=2747)	
			out	StringWriter  (id=2752)	
				buf	StringBuffer  (id=3057)	
		stringWriter	StringWriter  (id=2752)	
			buf	StringBuffer  (id=3057)	
<?xml version="1.0" encoding="UTF-8"?><ajax-response><component id="result5" ><![CDATA[<span wicket:id="result" id="result5">From AjaxLink</span>]]></component></ajax-response>

/ we keken altijd naar WicketTester.lastResponse.printWriter.out, maar WicketTester.lastResponse.stringWriter kan ook , =

/ Einde intermezzo

/s
MockHttpServletResponse.getDocument() line: 318	
			return stringWriter.getBuffer().toString();
/t
WicketTester(BaseWicketTester).getLastResponseAsString() line: 986	
		String response = lastResponse.getDocument();
<?xml version="1.0" encoding="UTF-8"?><ajax-response><component id="result5" ><![CDATA[<span wicket:id="result" id="result5">From AjaxLink</span>]]></component></ajax-response>

			return response;
/t
WicketTester(BaseWicketTester).isComponentOnAjaxResponse(Component) line: 2256	
		// Get the AJAX response
		String ajaxResponse = getLastResponseAsString();
/d
<?xml version="1.0" encoding="UTF-8"?><ajax-response><component id="result5" ><![CDATA[<span wicket:id="result" id="result5">From AjaxLink</span>]]></component></ajax-response>

		boolean isAjaxResponse = Pattern.compile(
			"^<\\?xml version=\"1.0\" encoding=\".*?\"\\?><ajax-response>")
			.matcher(ajaxResponse)
			.find();
true
		// See if the component has a markup id
		String markupId = component.getMarkupId();
result5
		// Look for that the component is on the response, using the markup id
		boolean isComponentInAjaxResponse = ajaxResponse.matches("(?s).*<component id=\"" +
			markupId + "\"[^>]*?>.*");
true
		failMessage = "Component wasn't found in the AJAX response";
		return isTrue(failMessage, isComponentInAjaxResponse);
/t
WicketTester.assertComponentOnAjaxResponse(Component) line: 314	
		Result result = isComponentOnAjaxResponse(component);
/d
result	Result  (id=3130)	
	failed	false	
	message	"" (id=3140)	
		assertResult(result);



/ Einde WICKETTESTER AJAXLINK WITH EXECUTEAJAXEVENT

/ WICKETTESTER AJAXFORM WITHOUT FORMTESTER


$ vi FrmPage.java
...
$ vi FrmTest.java

	@Test
	public void testAjaxButtonWithoutFormTester(){
		TextField<String>name=(TextField<String>)wicketTester.getComponentFromLastRenderedPage("form:name");
		name.setDefaultModelObject("foo");
		TextField<String>age=(TextField<String>)wicketTester.getComponentFromLastRenderedPage("form:age");
		age.setDefaultModelObject("7");
		wicketTester.executeAjaxEvent("form:ajx", "click");
		wicketTester.assertComponentOnAjaxResponse("result");
		wicketTester.assertLabel("result", "foo,7");
	}

/ OK

/ intermezzo

public abstract class AjaxButton extends Button
        @Override
        protected void onInitialize()
        {
                super.onInitialize();

                add(newAjaxFormSubmitBehavior("click"));
		}
        protected AjaxFormSubmitBehavior newAjaxFormSubmitBehavior(String event)
        {
                return new AjaxFormSubmitBehavior(form, event)
                {
                        @Override
                        protected void onSubmit(AjaxRequestTarget target)
                        {
                                AjaxButton.this.onSubmit(target, AjaxButton.this.getForm());
                        }
                        @Override
                        protected void updateAjaxAttributes(AjaxRequestAttributes attributes)
                        {
                                super.updateAjaxAttributes(attributes);

                                // do not allow normal form submit to happen
                                attributes.setPreventDefault(true);

                                AjaxButton.this.updateAjaxAttributes(attributes);
                        }


/ Einde intermezzo

/ stack
/s
Thread [main] (Suspended)	
	WicketTester(BaseWicketTester).executeBehavior(AbstractAjaxBehavior) line: 1170	
	WicketTester(BaseWicketTester).executeAjaxEvent(Component, String) line: 2392	
		List<AjaxEventBehavior> ajaxEventBehaviors = WicketTesterHelper.findAjaxEventBehaviors(
			component, event);
		for (AjaxEventBehavior ajaxEventBehavior : ajaxEventBehaviors)
		{
			executeBehavior(ajaxEventBehavior);
ajaxBehavior=new AjaxFormSubmitBehavior
/cb
	WicketTester(BaseWicketTester).executeAjaxEvent(String, String) line: 2301	
		Component component = getComponentFromLastRenderedPage(componentPath);
		executeAjaxEvent(component, event);
component	FrmPage$4  (id=2574)	[AjaxButton [Component id = ajx]]
/cb
	FrmTest.testAjaxButton() line: 55	
		wicketTester.executeAjaxEvent("form:ajx", "click");
/ debug	,
/s
WicketTester(BaseWicketTester).executeBehavior(AbstractAjaxBehavior) line: 1170	
		Url url = Url.parse(behavior.getCallbackUrl().toString(), Charset.forName(request.getCharacterEncoding()));
./wicket/page?1-1.IBehaviorListener.0-form-ajx
		request.setUrl(url);
		request.addHeader(WebRequest.HEADER_AJAX_BASE_URL, url.toString());
		request.addHeader(WebRequest.HEADER_AJAX, "true");

		if (behavior instanceof AjaxFormSubmitBehavior)
formSubmitBehavior	AjaxButton$1  (id=2576)	
	__form	Form<T>  (id=2595)	
	component	FrmPage$4  (id=2574)	
	defaultProcessing	true	
	event	"click" (id=2572)	

			Form<?> form = formSubmitBehavior.getForm();
			getRequest().setUseMultiPartContentType(form.isMultiPart());
/ form.isMultiPart()=false	, want
/s
Form<T>.isMultiPart() line: 1369	
		Boolean anyEmbeddedMultipart = visitChildren(Component.class,		/ filter=Component.class	,
			new IVisitor<Component, Boolean>()
			{
				@Override
				public void component(final Component component, final IVisit<Boolean> visit)
				{
					...
/s
Form<T>(MarkupContainer).visitChildren(Class<?>, IVisitor<S,R>) line: 966	
		return Visits.visitChildren(this, visitor, new ClassVisitFilter(clazz));
clazz	Class<T> (org.apache.wicket.Component) (id=165)	
/s
Visits.visitChildren(Iterable<? super S>, IVisitor<S,R>, IVisitFilter) line: 123	
		visitChildren(container, visitor, filter, visit);
/s
Visits.visitChildren(Iterable<? super S>, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 131	
		// Iterate through children of this container
		for (final Object child : container)
child=[TextField [Component id = name]]
child=[TextField [Component id = age]]
child=[Button [Component id = normal]]
child=[Button [Component id = ajx]]
				// Call visitor
				S s = (S)child;
				visitor.component(s, childTraversal);
/s
Form$11.component(Component, IVisit<Boolean>) line: 1375	
/=
			new IVisitor<Component, Boolean>()
			{
				@Override
				public void component(final Component component, final IVisit<Boolean> visit)
				{
					boolean isMultiPart = false;
					else if (component instanceof FormComponent<?>)
					{
						FormComponent<?> fc = (FormComponent<?>)component;
						if (fc.isVisibleInHierarchy() && fc.isEnabledInHierarchy())
						{
							isMultiPart = fc.isMultiPart();
/s
TextField<T>(FormComponent<T>).isMultiPart() line: 948	
		return false;
/t
Form$11.component(Component, IVisit<Boolean>) line: 1375
							isMultiPart = fc.isMultiPart();
/d
false
					if (isMultiPart)
/n
					{
						visit.stop(true);
/n
/ Dus doet WH niets,	
/t
Visits.visitChildren(Iterable<? super S>, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 151	
		for (final Object child : container)
child=[TextField [Component id = name]]
		{
				visitor.component(s, childTraversal);		
/d
				// visit the children in the container
				visitChildren((Iterable<? super S>)child, visitor, filter, visit);
/ hebben ze niet	,
/t
Form<T>.isMultiPart() line: 1401	
		Boolean anyEmbeddedMultipart = visitChildren(Component.class,
			new IVisitor<Component, Boolean>()
			{
				@Override
				public void component(final Component component, final IVisit<Boolean> visit)
					...
/d
		boolean mp = Boolean.TRUE.equals(anyEmbeddedMultipart);
false
		return mp;
/t
WicketTester(BaseWicketTester).executeBehavior(AbstractAjaxBehavior) line: 1182	
			getRequest().setUseMultiPartContentType(form.isMultiPart());
/d
this	WicketTester  (id=156)	
	request	MockHttpServletRequest  (id=2560)	
		false
		return mp;
/t
WicketTester(BaseWicketTester).executeBehavior(AbstractAjaxBehavior) line: 1182	
			getRequest().setUseMultiPartContentType(form.isMultiPart());
/d
this	WicketTester  (id=156)	
	request	MockHttpServletRequest  (id=2560)	
		useMultiPartContentType	false	

			serializeFormToRequest(form);
/s
		final MockRequestParameters postParameters = request.getPostParameters();
request	MockHttpServletRequest  (id=2560)	
	parameters	LinkedHashMap<K,V>  (id=2664)	{1-1.IBehaviorListener.0-form-ajx=[Ljava.lang.String;@25a79aea}	
	post	MockRequestParameters  (id=2669)	
		parameters	HashMap<K,V>  (id=2695)		{}	
useMultiPartContentType	false	
		final Set<String> currentParameterNamesSet = postParameters.getParameterNames();
[]
		form.visitFormComponents(new IVisitor<FormComponent<?>, Void>()
		{
			@Override
			public void component(final FormComponent<?> formComponent, final IVisit<Void> visit)	/ filter=FormComponent	,
			{
				final String inputName = formComponent.getInputName();
					...
/s
Visits.visitChildren(Iterable<? super S>, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 138	
		// Iterate through children of this container
		for (final Object child : container)
container	Form<T>  (id=2558)	
child	TextField<T>  (id=2553)	 "name"
child	TextField<T>  (id=2553)	"age"
child	FrmPage$3  (id=2670)	 [Button [Component id = normal]]
child	FrmPage$4  (id=2670)	 [Button [Component id = ajx]]

			if (filter.visitObject(child))
			{
				Visit<R> childTraversal = new Visit<>();

				// Call visitor
				S s = (S)child;
				visitor.component(s, childTraversal);
/s
BaseWicketTester$6.component(FormComponent<?>, IVisit<Void>) line: 2474	
/=
		form.visitFormComponents(new IVisitor<FormComponent<?>, Void>()
		{
			@Override
			public void component(final FormComponent<?> formComponent, final IVisit<Void> visit)
			{
				final String inputName = formComponent.getInputName();
p::name
				if (!currentParameterNamesSet.contains(inputName))
				{
					String[] values = FormTester.getInputValue(formComponent);
/s
FormTester.getInputValue(FormComponent<?>) line: 426	
			if (formComponent instanceof IFormSubmittingComponent)
			{
				// buttons have to be submitted explicitely
			}
			else if (formComponent instanceof AbstractTextComponent)
			{
				return new String[] { getFormComponentValue(formComponent) };
/s
FormTester.getFormComponentValue(FormComponent<?>) line: 452	
		String val = formComponent.getValue();
/s
TextField<T>(FormComponent<T>).getValue() line: 869	
		if (NO_RAW_INPUT.equals(rawInput))
		{
			return getModelValue();
/s
TextField<T>(FormComponent<T>).getModelValue() line: 1287	
		return getDefaultModelObjectAsString();
/s
TextField<T>(Component).getDefaultModelObjectAsString() line: 1654	
		return getDefaultModelObjectAsString(getDefaultModelObject());	/ property model	,
/t
FormTester.getFormComponentValue(FormComponent<?>) line: 455	
		String val = formComponent.getValue();
"foo"
		return val;
/t
FormTester.getInputValue(FormComponent<?>) line: 434	
			else if (formComponent instanceof AbstractTextComponent)
			{
				return new String[] { getFormComponentValue(formComponent) };
/t
BaseWicketTester$6.component(FormComponent<?>, IVisit<Void>) line: 2478	
/=
		form.visitFormComponents(new IVisitor<FormComponent<?>, Void>()
		{
			@Override
			public void component(final FormComponent<?> formComponent, final IVisit<Void> visit)
			{
				final String inputName = formComponent.getInputName();
				if (!currentParameterNamesSet.contains(inputName))
				{
					String[] values = FormTester.getInputValue(formComponent);
["foo"]
["age"]
[]	/ button	,
					for (String value : values)
					{
						postParameters.addParameterValue(inputName, value);
this	BaseWicketTester$6  (id=2568)	
	val$postParameters	MockRequestParameters  (id=2559)	
		parameters	HashMap<K,V>  (id=2561)	
{p::name=[foo]}
{p::name=[foo], age=[7]}
{p::name=[foo], age=[7]} 	/ button voegt geen param toe	,
{p::name=[foo], age=[7]} 	/ button voegt geen param toe	,
/ en omdat	,
		final MockRequestParameters postParameters = request.getPostParameters();
/ ook	,
this	BaseWicketTester$6  (id=2568)	
	this$0	WicketTester  (id=156)	
		request	MockHttpServletRequest  (id=2589)	
			post	MockRequestParameters  (id=2559)	
				parameters	HashMap<K,V>  (id=2561)	
{p::name=[foo]}
{p::name=[foo], age=[7]}
{p::name=[foo], age=[7]} 	/ button voegt geen param toe	,
{p::name=[foo], age=[7]} 	/ button voegt geen param toe	,

/t
WicketTester(BaseWicketTester).executeBehavior(AbstractAjaxBehavior) line: 1185	
			serializeFormToRequest(form);
/d
this	BaseWicketTester$6  (id=2568)	
	this$0	WicketTester  (id=156)	
		request	MockHttpServletRequest  (id=2589)	
			post	MockRequestParameters  (id=2559)	
				parameters	HashMap<K,V>  (id=2561)	
{p::name=[foo], age=[7]}

			// mark behavior's component as the form submitter,
			String name = Form.getRootFormRelativeId(
				new PropertyModel<Component>(behavior, "component").getObject()
			);
/s
PropertyModel<T>(AbstractPropertyModel<T>).getObject() line: 72	
		final Object target = getInnermostModelOrObject();
/ AjaxButton$1=new AjaxFormSubmitBehavior
/ expression="component"
			return (T)PropertyResolver.getValue(expression, target);
/s
PropertyResolver.getValue(String, Object) line: 105	

/ intermezzo

AjaxFormSubmitBehavior-AjaxEventBehavior-AbstractDefaultAjaxBehavior-AbstractAjaxBehavior,
public abstract class AbstractAjaxBehavior extends Behavior implements IBehaviorListener
{
	/** the component that this handler is bound to. */
	private Component component;

/ Einde intermezzo

		ObjectAndGetSetter getter = getObjectAndGetSetter(expression, object, RETURN_NULL);
getter	PropertyResolver$ObjectAndGetSetter  (id=2724)	
	getAndSetter	PropertyResolver$FieldGetAndSetter  (id=2725)	
		field	Field  (id=2726) private org.apache.wicket.Component org.apache.wicket.behavior.AbstractAjaxBehavior.component	
	value	AjaxButton$1  (id=2557)	 / component waarop je de Field neemt	,

		return getter.getValue();
/s
PropertyResolver$ObjectAndGetSetter.getValue() line: 659	
			return getAndSetter.getValue(value);
/t
WicketTester(BaseWicketTester).executeBehavior(AbstractAjaxBehavior) line: 1185	
			// mark behavior's component as the form submitter,
			String name = Form.getRootFormRelativeId(
				new PropertyModel<Component>(behavior, "component").getObject());	/ = AjaxButton	,
/pd
/s
Form<T>.getRootFormRelativeId(Component) line: 2142	
		String id = component.getId();
"ajx"
		if (JavaScriptReservedNames.isNameReserved(inputName.toString()))
/n
		return inputName.toString();
/t
WicketTester(BaseWicketTester).executeBehavior(AbstractAjaxBehavior) line: 1187	
			// mark behavior's component as the form submitter,
			String name = Form.getRootFormRelativeId(new PropertyModel<Component>(behavior, "component").getObject());
/d
"ajx"
			if (!request.getPostParameters().getParameterNames().contains(name))
/j	, buttons werden overgeslagen	,
			{
				request.getPostParameters().setParameterValue(name, "marked");

this	WicketTester  (id=156)	
	request	MockHttpServletRequest  (id=2589)	
		post	MockRequestParameters  (id=2559)	
			parameters	HashMap<K,V>  (id=2561)	
{p::name=[foo], age=[7], ajx=[marked]}

/ TODO Wordt "marked" used?

		processRequest();
/s
WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler, boolean) line: 686	
forcedRequest	null	
forcedRequestHandler	null	
redirect	false	

		if (!redirect && getRequest().getHeader("Wicket-Ajax") == null)
/n
		{
			lastRenderedPage = null;
/n
/ klopt	, ajax	,

		applyRequest();
/s
WicketTester(BaseWicketTester).applyRequest() line: 2538	
		Request req = newServletWebRequest();
/s
WicketTester(BaseWicketTester).newServletWebRequest() line: 537	
		return (ServletWebRequest)application.newWebRequest(request, request.getFilterPrefix());
/t
WicketTester(BaseWicketTester).applyRequest() line: 2539	
		Request req = newServletWebRequest();
		requestCycle.setRequest(req);
		...
/t
WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler, boolean) line: 714	
		applyRequest();
		requestCycle.scheduleRequestHandlerAfterCurrent(null);	/ de controller schedules later de controller AjaxRequestHandler 
		try
		{
			if (!requestCycle.processRequestAndDetach())
/s
RequestCycle.processRequest() line: 219	
			IRequestHandler handler = resolveRequestHandler();
/s
PageInstanceMapper.mapRequest(Request) line: 62		/ url -> controller	,
/t
RequestCycle.processRequest() line: 220	
			IRequestHandler handler = resolveRequestHandler();
/d
handler	ListenerInterfaceRequestHandler  (id=2833)	
	behaviorId	Integer  (id=2834)	0
	listenerInterface	RequestListenerInterface  (id=147)	
		includeRenderCount	true	
		listenerInterfaceClass	Class<T> (org.apache.wicket.behavior.IBehaviorListener) (id=127)	
		method	Method  (id=2836) public abstract void org.apache.wicket.behavior.IBehaviorListener.onRequest()	
		name	"IBehaviorListener" (id=2837)	
		renderPageAfterInvocation	true	
	logData	null	
	pageComponentProvider	PageAndComponentProvider  (id=2835)	
		component	null	
		componentPath	"form:ajx" (id=2838)	
		...

				execute(handler);		<-
		finally
		{
			set(null);					/ later	,
/s
RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 58	
			respond(handler);			<-
			execute(scheduled);			/ later
/s
RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
			Response originalResponse = getResponse();
			try
			{
				handler.respond(RequestCycle.this);
/s
ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 157	
		final boolean isAjax = ((WebRequest)requestCycle.getRequest()).isAjax();
true
/ s
ServletWebRequest(WebRequest).isAjax() line: 117	
		return Strings.isTrue(getHeader(HEADER_AJAX)) ||
/ true, HEADER_AJAX=="Wicket-Ajax"
/t
ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 157	
			component = getComponent();
[AjaxButton [Component id = ajx]]

		if (isAjax == false && listenerInterface.isRenderPageAfterInvocation())
/n
		{
			requestCycle.scheduleRequestHandlerAfterCurrent(new RenderPageRequestHandler( pageProvider, policy));
/n
/ klopt	,
		invokeListener();
/s
ListenerInterfaceRequestHandler.invokeListener() line: 247	
		if (getBehaviorIndex() == null)
			listenerInterface.invoke(getComponent());
/n
		else
		{
			try
			{
				Behavior behavior = getComponent().getBehaviorById(behaviorId);
				listenerInterface.invoke(getComponent(), behavior);
/s
RequestListenerInterface.invoke(IRequestableComponent, Behavior) line: 231	
/=
	public final void invoke(final IRequestableComponent rcomponent, final Behavior behavior)
		internalInvoke(component, behavior);
component=[AjaxButton [Component id = ajx]]
/s
RequestListenerInterface.internalInvoke(Component, Object) line: 258	
			method.invoke(target);
/s
AjaxButton$1(AbstractDefaultAjaxBehavior).onRequest() line: 587	
		WebApplication app = (WebApplication)getComponent().getApplication();
		AjaxRequestTarget target = app.newAjaxRequestTarget(getComponent().getPage());
		RequestCycle requestCycle = RequestCycle.get();
		requestCycle.scheduleRequestHandlerAfterCurrent(target);		/ schedules 2nd controller	,

		respond(target);
/s
AjaxButton$1(AjaxEventBehavior).respond(AjaxRequestTarget) line: 155	
		onEvent(target);
/s
AjaxButton$1(AjaxFormSubmitBehavior).onEvent(AjaxRequestTarget) line: 171	
		getForm().getRootForm().onFormSubmitted(new AjaxFormSubmitter(this, target));
/s
Form<T>.onFormSubmitted(IFormSubmitter) line: 737	
/=
	public final void onFormSubmitted(IFormSubmitter submitter)
submitter	AjaxFormSubmitBehavior$AjaxFormSubmitter  (id=2885)	
	submitBehavior	AjaxButton$1  (id=2557)	
	target	AjaxRequestHandler  (id=2879)	

			else
			{
				// First, see if the processing was triggered by a Wicket IFormSubmittingComponent
				if (submitter == null)
/n
				{
					submitter = findSubmittingButton();
/ See SUBMIT BUTTON RETRIEVES POST PARAMETERS, THESE WERE ADDED IN TEST BY FORMTESTER.SETVALUE	, waar bij gewoon Form de Button een value moet hebben	, anders is submitter!=Button	,
/ Nu heeft de Button ahw wel een value "marked" 	, maar wordt used?
/ Hoe bij gewoon Button op page, ipv test	?
					...
/n
				else
				{
					// the submit request might be for one of the nested forms, so let's
					// find the right one:
					final Form<?> formToProcess = findFormToProcess(submitter);

					// process the form for this request
					formToProcess.process(submitter);
/s
Form<T>.process(IFormSubmitter) line: 933	
		// run validation
		validate();
/c
/ stack
/s
TextField<T>(AbstractTextComponent<T>).convertInput() line: 120	
		String[] value = getInputAsArray();
/s
TextField<T>(FormComponent<T>).getInputAsArray() line: 755	
		List<StringValue> list = getRequest().getRequestParameters().getParameterValues(
			getInputName());
/s
TextField<T>(FormComponent<T>).validate() line: 1120	
			convertInput();
/s
	Form$18.validate(FormComponent<?>) line: 1945	
/=
		visitFormComponentsPostOrder(new ValidationVisitor()
		{
			@Override
			public void validate(final FormComponent<?> formComponent)
			{
				final Form<?> form = formComponent.getForm();									<-
					formComponent.validate();
/cb
	Form$18(Form$ValidationVisitor).component(FormComponent<?>, IVisit<Void>) line: 177	
/=
public class Form<T> extends WebMarkupContainer
	public abstract static class ValidationVisitor implements IVisitor<FormComponent<?>, Void>
	{
		@Override
		public void component(final FormComponent<?> formComponent, final IVisit<Void> visit)
		{

			Form<?> form = formComponent.getForm();
			...
			if (formComponent.isVisibleInHierarchy() && formComponent.isEnabledInHierarchy())
			{
				validate(formComponent);														<-
/cb
	Form$18(Form$ValidationVisitor).component(Object, IVisit) line: 161	
	Visits.visitPostOrderHelper(Object, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 274	
		if (component instanceof Iterable<?>)
component=[TextField [Component id = name]]
		{
			final Iterable<?> container = (Iterable<?>)component;
			if (filter.visitChildren(container))
			{
				Visit<R> childTraversal = new Visit<>();
				for (final Object child : ((Iterable<?>)component))		/ eerst children	,
/n
		if (filter.visitObject(component))								/ dan zelf	,
		{
			visitor.component((S)component, visit);						<-
		}
/cb
	Visits.visitPostOrderHelper(Object, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 262	
		if (component instanceof Iterable<?>)
Form
		{
			final Iterable<?> container = (Iterable<?>)component;
			if (filter.visitChildren(container))
			{
				Visit<R> childTraversal = new Visit<>();
				for (final Object child : ((Iterable<?>)component))							/ eerst children	,
child=[TextField [Component id = name]]
				{
					visitPostOrderHelper(child, visitor, filter, childTraversal);			<-
					if (childTraversal.isStopped())
					{
						visit.stop(childTraversal.getResult());
						return;
					}
				}
			}
		}

		if (filter.visitObject(component))													/ dan zelf	,
		{
			visitor.component((S)component, visit);
/cb
	Visits.visitPostOrder(Object, IVisitor<S,R>, IVisitFilter) line: 245	
		visitPostOrderHelper(root, visitor, filter, visit);
/cb
	FormComponent<T>.visitFormComponentsPostOrder(Component, IVisitor<FormComponent<?>,R>) line: 382	
		return Visits.visitPostOrder(component, visitor, 
			new IVisitFilter()
			{
				@Override
				public boolean visitChildren(Object object)
					...													/ true
				@Override
				public boolean visitObject(Object object)
					...													/ true
/cb
	Form<T>.visitFormComponentsPostOrder(IVisitor<FormComponent<?>,R>) line: 1153	
		return FormComponent.visitFormComponentsPostOrder(this, visitor);
/cb
	Form<T>.validateComponents() line: 1940	
		visitFormComponentsPostOrder(new ValidationVisitor()			<-
		{
			@Override
			public void validate(final FormComponent<?> formComponent)
			{
				final Form<?> form = formComponent.getForm();
				if (form == Form.this && form.isEnabledInHierarchy() && form.isVisibleInHierarchy())
				{
					formComponent.validate();
/cb
	Form<T>.validate() line: 1882	
			validateComponents();
/ debug
/s
TextField<T>(FormComponent<T>).getInputAsArray() line: 755	
		List<StringValue> list = getRequest().getRequestParameters().getParameterValues(
			getInputName());

"org.apache.wicket.request.cycle.RequestCycle.get()"	 (pending)	
	request	ServletWebRequest  (id=2796)	
		httpServletRequest	MockHttpServletRequest  (id=2589)	
			parameters	LinkedHashMap<K,V>  (id=2624)	{1-1.IBehaviorListener.0-form-ajx=[Ljava.lang.String;@576f8821}
			post	MockRequestParameters  (id=2559)	
				parameters	HashMap<K,V>  (id=2561) {p::name=[foo], age=[7], ajx=[marked]}

/s
ServletWebRequest(Request).getRequestParameters() line: 136	
		return new CombinedRequestParametersAdapter(getQueryParameters(), getPostParameters());
/t
TextField<T>(FormComponent<T>).getInputAsArray() line: 755	
		List<StringValue> list = getRequest().getRequestParameters().getParameterValues( getInputName());
/s
CombinedRequestParametersAdapter.getParameterValues(String) line: 85	
/=
	public List<StringValue> getParameterValues(final String name)
name="p:name"
		for (IRequestParameters p : parameters)
		{
			List<StringValue> values = p.getParameterValues(name);
/s
UrlRequestParametersAdapter.getParameterValues(String) line: 82	
/=
	public List<StringValue> getParameterValues(final String name)
name="p:name"
		for (QueryParameter parameter : url.getQueryParameters())
1-1.IBehaviorListener.0-form-ajx
			if (Objects.equal(name, parameter.getName()))
/n
		return values != null ? Collections.unmodifiableList(values) : null;
null
/t
CombinedRequestParametersAdapter.getParameterValues(String) line: 89	
		for (IRequestParameters p : parameters)
		{
			List<StringValue> values = p.getParameterValues(name);
/d
null
/ volgende	,
		for (IRequestParameters p : parameters)
		{
			List<StringValue> values = p.getParameterValues(name);
/s
ServletWebRequest$1.getParameterValues(String) line: 378	
/=
public class ServletWebRequest extends WebRequest
	private final IRequestParameters postRequestParameters = new IWritableRequestParameters()
	{
		@Override
		public List<StringValue> getParameterValues(String name)
		{
			List<StringValue> values = getPostRequestParameters().get(name);
/s
ServletWebRequest.getPostRequestParameters() line: 334	
		return postParameters;

this	ServletWebRequest  (id=2796)	
	postParameters	HashMap<K,V>  (id=2961)	
		[0]	HashMap$Entry<K,V>  (id=3223)	
p::name=[foo]
		[1]	HashMap$Entry<K,V>  (id=3224)	
age=[7]
		[2]	HashMap$Entry<K,V>  (id=3225)	
ajx=[marked]
	postRequestParameters	ServletWebRequest$1  (id=2809)	
		this$0	ServletWebRequest  (id=2796)	

/ intermezzo

/ we gaan hoger op in de stack	,
RequestCycle.processRequest() line: 222	
/ en we zien	, 
this	RequestCycle  (id=2590)	
	request	ServletWebRequest  (id=2796)		/ dezelfde,	

/ Einde intermezzo

/t
ServletWebRequest$1.getParameterValues(String) line: 378	
			List<StringValue> values = getPostRequestParameters().get(name);
/d
[foo]
			return values;
/s
CombinedRequestParametersAdapter.getParameterValues(String) line: 93	
		for (IRequestParameters p : parameters)
		{
			List<StringValue> values = p.getParameterValues(name);
			if (values != null)
			{
				for (StringValue v : values)
				{
					result.add(v);
			return Collections.unmodifiableList(result);
/t
TextField<T>(FormComponent<T>).getInputAsArray() line: 758	
		List<StringValue> list = getRequest().getRequestParameters().getParameterValues(
			getInputName());
/d
[foo]
		return values;
/t
TextField<T>(AbstractTextComponent<T>).convertInput() line: 122	
		String[] value = getInputAsArray();
			super.convertInput();
/s
TextField<T>(FormComponent<T>).convertInput() line: 1183	
				convertedInput = converter.convertToObject(getInput(), getLocale());

this	TextField<T>  (id=2552)	
	convertedInput	"foo" (id=2580)	

/t
Visits.visitPostOrderHelper(Object, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 262	
		if (component instanceof Iterable<?>)
		{
			final Iterable<?> container = (Iterable<?>)component; / [Form [Component id = form]]
			if (filter.visitChildren(container))
			{
				Visit<R> childTraversal = new Visit<>();
				for (final Object child : ((Iterable<?>)component))
[TextField [Component id = name]]
/d
/ volgende	, net zo	,
[TextField [Component id = age]]
/ volgende	,
[Button [Component id = normal]]
/ volgende	,
[Button [Component id = ajx]]
				{
					visitPostOrderHelper(child, visitor, filter, childTraversal);
/s
Visits.visitPostOrderHelper(Object, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 274	
		if (component instanceof Iterable<?>)
component=[Button [Component id = normal]]
		{
			final Iterable<?> container = (Iterable<?>)component;
			if (filter.visitChildren(container))
			{
				Visit<R> childTraversal = new Visit<>();
				for (final Object child : ((Iterable<?>)component))
/n
		if (filter.visitObject(component))
		{
			visitor.component((S)component, visit);
/s
Form$18(Form$ValidationVisitor).component(FormComponent<?>, IVisit<Void>) line: 177	
/=
public class Form<T> extends WebMarkupContainer
	public abstract static class ValidationVisitor implements IVisitor<FormComponent<?>, Void>
	{
		@Override
		public void component(final FormComponent<?> formComponent, final IVisit<Void> visit)
		{
			Form<?> form = formComponent.getForm();
			...
			if (formComponent.isVisibleInHierarchy() && formComponent.isEnabledInHierarchy())
			{
				validate(formComponent);
/s
Form$18.validate(FormComponent<?>) line: 1945	
		visitFormComponentsPostOrder(new ValidationVisitor()
		{
			@Override
			public void validate(final FormComponent<?> formComponent)
			{
				final Form<?> form = formComponent.getForm();
					formComponent.validate();
/s
FrmPage$3(FormComponent<T>).validate() line: 1120	
			convertInput();
/s
FrmPage$3(FormComponent<T>).convertInput() line: 1170	
				convertedInput = convertValue(getInputAsArray());
/s
FrmPage$3(FormComponent<T>).getInputAsArray() line: 755	
		List<StringValue> list = getRequest().getRequestParameters().getParameterValues(
			getInputName());
["marked"]
		return values;
/t
FrmPage$4(FormComponent<T>).convertInput() line: 1190	
				convertedInput = convertValue(getInputAsArray());
/d
this	FrmPage$4  (id=2556)	
	convertedInput	"marked" (id=3422)	
/t
Form<T>.process(IFormSubmitter) line: 946	
		// run validation
		validate();
/d
			// Update model using form data
			updateFormComponentModels();
/s
Form<T>.updateFormComponentModels() line: 1829	
		internalUpdateFormComponentModels();
/s
Form<T>.internalUpdateFormComponentModels() line: 1864	
		FormComponent.visitComponentsPostOrder(this, new FormModelUpdateVisitor(this));
/s
Form$FormModelUpdateVisitor.component(Component, IVisit<Void>) line: 217	
			if (component instanceof IFormModelUpdateListener)
			{
				final Form<?> form = Form.findForm(component);
				if (form != null)
				{
					if (this.formFilter == null || this.formFilter == form)
					{
						if (form.isEnabledInHierarchy())
						{
							if (component.isVisibleInHierarchy() &&
								component.isEnabledInHierarchy())
							{
								((IFormModelUpdateListener)component).updateModel();
component=[TextField [Component id = name]]
/s
TextField<T>(FormComponent<T>).updateModel() line: 1097	
		setModelObject(getConvertedInput());
component=[AjaxButton [Component id = ajx]]
/s
FrmPage$4(Button).updateModel() line: 163	
	{
	}
/t
Form<T>.process(IFormSubmitter) line: 967	
			// Update model using form data
			updateFormComponentModels();
/d
			// Form has no error
			delegateSubmit(submittingComponent);
/s
Form<T>.delegateSubmit(IFormSubmitter) line: 1287	
		if (submittingComponent != null)
/j
submittingComponent	AjaxFormSubmitBehavior$AjaxFormSubmitter  (id=2885)	
	submitBehavior	AjaxButton$1  (id=2557)	
		{
			// invoke submit on component
			submittingComponent.onSubmit();
/s
AjaxFormSubmitBehavior$AjaxFormSubmitter.onSubmit() line: 215	
			submitBehavior.onSubmit(target);
/s
AjaxButton$1.onSubmit(AjaxRequestTarget) line: 113	
				AjaxButton.this.onSubmit(target, AjaxButton.this.getForm());
/s
FrmPage$4.onSubmit(AjaxRequestTarget, Form<?>) line: 79	
				String s=name.getModel().getObject()+","+age.getModelObject();
				result.setDefaultModelObject(s);
				target.add(result);
/s
AjaxRequestHandler.add(Component...) line: 221	
		for (final Component component : components)
		{
			add(component, component.getMarkupId());
/s
AjaxRequestHandler.add(Component, String) line: 238	
		update.add(component, markupId);
/s
AjaxRequestHandler$1(PartialPageUpdate).add(Component, String) line: 390	
		component.setMarkupId(markupId);
component	Label  (id=3470)	
/s
Label(Component).setMarkupIdImpl(Object) line: 2869	
		setOutputMarkupId(true);							/ hoeven we dat niet zelf te doen	?
		generatedMarkupId = -1;
		setMetaData(MARKUP_ID_KEY, (String)markupId);
/s
Label(Component).setMetaData(MetaDataKey<M>, M) line: 2957	
			data_insert(index, metaData);
metaData	MetaDataEntry<T>  (id=3483)	
	key	Component$1  (id=3480)			/ TODO
	object	"result5" (id=3471)	
index	1	

this	Label  (id=3470)	
	data	Object[2]  (id=3495)	
		[0]	PropertyModel<T>  (id=3473)	
		[1]	MetaDataEntry<T>  (id=3483)	
/t
AjaxRequestHandler$1(PartialPageUpdate).add(Component, String) line: 391	
		component.setMarkupId(markupId);
		markupIdToComponent.put(markupId, component);
/t
Form<T>.delegateSubmit(IFormSubmitter) line: 1313	
			submittingComponent.onSubmit();
/d
			form.onSubmit();
/ niets	,

/helemaal terug	,
/t
RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 899	
				handler.respond(RequestCycle.this);
/d
			}
			finally
			{
				setResponse(originalResponse);
/t
RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 84	
			respond(handler);
/d
			execute(scheduled); 	/ 2de controller	,
/s
scheduled	AjaxRequestHandler  (id=2879)	

/ we geloven het	, 



/ Einde WICKETTESTER AJAXFORM WITHOUT FORMTESTER

/ WICKETTESTER AJAXFORM WITH FORMTESTER 

/ Lees	, 
./wicket-core/src/test/java/org/apache/wicket/ajax/form/AjaxFormSubmitTestPage.java
./wicket-core/src/test/java/org/apache/wicket/ajax/form/AjaxFormSubmitTest.java

/ proj. wicket-examples-step-by-step
/ prog. FrmTest, FrmPage

/////////////////////////////////
/ FormTester writes post params	,

$ vi FrmTest.java

	@Test
	public void testAjaxButtonWithFormTester(){
		FormTester formTester=wicketTester.newFormTester("form");	/ sets post params ,  slaat buttons over	,  p:name=[""], age=[""]	,
		formTester.setValue("name", "foo");							/ sets post param	, p:name=["foo"]
		formTester.setValue("age", "13");							/ sets post param	, age=["13"]
		// mark the button as the one being pressed. TODO
//		wicketTester.getRequest().getPostParameters().setParameterValue("ajx", "E=mc²");
		wicketTester.executeAjaxEvent("form:ajx", "click");
		wicketTester.assertComponentOnAjaxResponse("result");
		wicketTester.assertLabel("result", "foo,13");
	}
 
/s
	FormTester$1.component(FormComponent<?>, IVisit<Void>) line: 410	
/=
	protected FormTester(final String path, final Form<?> workingForm, final BaseWicketTester wicketTester, final boolean fillBlankString)
	{
		workingForm.visitFormComponents(new IVisitor<FormComponent<?>, Void>()
		{
			@Override
			public void component(final FormComponent<?> formComponent, final IVisit<Void> visit)
			{
				// do nothing for invisible or disabled component -- the browser would not send any
				// parameter for a disabled component
				if (!(formComponent.isVisibleInHierarchy() && formComponent.isEnabledInHierarchy()))
				{
					return;
				}

				String[] values = getInputValue(formComponent);							/ uit formComponent's model, bij ons ""
				if (formComponent instanceof AbstractTextComponent<?>)
				{
					if (values.length == 0 && fillBlankString)
					{
						setFormComponentValue(formComponent, "");
					}
				}
				for (String value : values)
				{
					addFormComponentValue(formComponent, value);	/ set in request's post parameters	,
/cb	
	FormTester$1.component(Object, IVisit) line: 389	
	Visits.visitChildren(Iterable<? super S>, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 144	
	Visits.visitChildren(Iterable<? super S>, IVisitor<S,R>, IVisitFilter) line: 123	
	Form<T>(MarkupContainer).visitChildren(Class<?>, IVisitor<S,R>) line: 966	
	Form<T>.visitFormComponents(IVisitor<FormComponent<?>,R>) line: 1137	
	FormTester.<init>(String, Form<?>, BaseWicketTester, boolean) line: 388	
/ debug	,
/s
FormTester$1.component(FormComponent<?>, IVisit<Void>) line: 410	
component=[TextField [Component id = name]]
				String[] values = getInputValue(formComponent);
[""]
/ want	,
/s
FormTester.getInputValue(FormComponent<?>) line: 426	
			else if (formComponent instanceof AbstractTextComponent)
			{
				return new String[] { getFormComponentValue(formComponent) };
/s
FormTester.getFormComponentValue(FormComponent<?>) line: 452	
		String val = formComponent.getValue();
""
/ want	,
/s
TextField<T>(FormComponent<T>).getValue() line: 869	
		if (NO_RAW_INPUT.equals(rawInput))
		{
			return getModelValue();
/s
TextField<T>(FormComponent<T>).getModelValue() line: 1287	
		return getDefaultModelObjectAsString();
/s
TextField<T>(Component).getDefaultModelObjectAsString() line: 1654	
		return getDefaultModelObjectAsString(getDefaultModelObject());
getDefaultModelObject()=null
/s
TextField<T>(Component).getDefaultModelObjectAsString(Object) line: 1674	 / null -> ""	
		if (modelObject != null)
/n
		return "";
/t
/t
FormTester$1.component(FormComponent<?>, IVisit<Void>) line: 410	
				String[] values = getInputValue(formComponent);
/d
[""]
				for (String value : values)
				{
					addFormComponentValue(formComponent, value);
/s
FormTester.addFormComponentValue(FormComponent<?>, String) line: 829	

this	FormTester  (id=2556)	
	tester	WicketTester  (id=156)	
		request	MockHttpServletRequest  (id=2590)	
			post	MockRequestParameters  (id=2603)	
				parameters	HashMap<K,V>  (id=2606)	
{}
		if (parameterExist(formComponent))
/s
FormTester.parameterExist(FormComponent<?>) line: 882	
		String parameter = tester.getRequest()
			.getPostParameters()
			.getParameterValue(formComponent.getInputName())	/ Wicket's StringValue{text=null}
			.toString();											/ return text
null
		return parameter != null && parameter.trim().length() > 0;
false
/t
FormTester.addFormComponentValue(FormComponent<?>, String) line: 854	
		if (parameterExist(formComponent))
/d
/n
		else
		{
			setFormComponentValue(formComponent, value);
/s
FormTester.setFormComponentValue(FormComponent<?>, String) line: 900	
		tester.getRequest()
			.getPostParameters()
			.setParameterValue(formComponent.getInputName(), value);
{p::name=[""]}

this	FormTester  (id=2556)	
	tester	WicketTester  (id=156)	
		request	MockHttpServletRequest  (id=2590)	
			post	MockRequestParameters  (id=2603)	
				parameters	HashMap<K,V>  (id=2606)	
					[0]	HashMap$Entry<K,V>  (id=2663)	
						key	"p::name" (id=2664)	
						value	ArrayList<E>  (id=2665)	
							[0]	StringValue  (id=2667)	
								locale	Locale  (id=2615)	
								text	"" (id=2570)	

/t
/s
/ volgende	,
FormTester$1.component(FormComponent<?>, IVisit<Void>) line: 401	
component=[Button [Component id = normal]]

				String[] values = getInputValue(formComponent);		/ .getInputValue slaat Buttons over	, en 		return new String[] { };
[]
				for (String value : values)
/n
/ Dus Button's values al zou hij deze hebben	, komen NIET in post params	,

/t
FrmTest.testAjaxButtonWithFormTester() line: 62	
		FormTester formTester=wicketTester.newFormTester("form");
/d
formTester	FormTester  (id=2556)	
	tester	WicketTester  (id=156)	
		request	MockHttpServletRequest  (id=2590)	
			post	MockRequestParameters  (id=2603)	
				parameters	HashMap<K,V>  (id=2606)	
{p::name=[""], age=[""]}

		formTester.setValue("name", "foo");										/ sets value in post params	,

/ intermezzo

	public static String[] getInputValue(FormComponent<?> formComponent)
	{
		// the browser sends parameters for visible and enabled components only
		if (formComponent.isVisibleInHierarchy() && formComponent.isEnabledInHierarchy())
		{
			if (formComponent instanceof IFormSubmittingComponent)											/ slaat Buttons over	,
			{
				// buttons have to be submitted explicitely
			}
			else if (formComponent instanceof AbstractTextComponent)
			{
				return new String[] { getFormComponentValue(formComponent) };
			}
			else


	public FormTester setValue(final Component formComponent, final String value)
	{
		Args.notNull(formComponent, "formComponent");

		checkClosed();

		if (formComponent instanceof IFormSubmittingComponent)													/ handles Buttons	, TODO
		{
			setFormSubmittingComponentValue((IFormSubmittingComponent)formComponent, value);
		}
		else if (formComponent instanceof FormComponent)
		{
			setFormComponentValue((FormComponent<?>)formComponent, value);
		}


/ Einde intermezzo

/s
FormTester.setValue(Component, String) line: 631	
		else if (formComponent instanceof FormComponent)
		{
			setFormComponentValue((FormComponent<?>)formComponent, value);
value="foo"

this	FormTester  (id=2556)	
	tester	WicketTester  (id=156)	
		request	MockHttpServletRequest  (id=2590)	
			post	MockRequestParameters  (id=2603)	
				parameters	HashMap<K,V>  (id=2606)	
{p::name=[""], age=[""]}
/s
FormTester.setFormComponentValue(FormComponent<?>, String) line: 900	
		tester.getRequest()
			.getPostParameters()
			.setParameterValue(formComponent.getInputName(), value);
/t
FrmTest.testAjaxButtonWithFormTester() line: 63	
		formTester.setValue("name", "foo");
/d

this	FrmTest  (id=198)	
	tester	WicketTester  (id=156)	
		request	MockHttpServletRequest  (id=2590)	
			post	MockRequestParameters  (id=2603)	
				parameters	HashMap<K,V>  (id=2606)	
{p::name=[foo], age=[]}

		formTester.setValue("age", "13");

this	FrmTest  (id=198)	
	tester	WicketTester  (id=156)	
		request	MockHttpServletRequest  (id=2590)	
			post	MockRequestParameters  (id=2603)	
				parameters	HashMap<K,V>  (id=2606)	
{p::name=[foo], age=[13]}

		wicketTester.executeAjaxEvent("form:ajx", "click");
/s
WicketTester(BaseWicketTester).executeAjaxEvent(Component, String) line: 2383	
		List<AjaxEventBehavior> ajaxEventBehaviors = WicketTesterHelper.findAjaxEventBehaviors(
			component, event);
		for (AjaxEventBehavior ajaxEventBehavior : ajaxEventBehaviors)
AjaxFormSubmitBehavior
		{
			executeBehavior(ajaxEventBehavior);
/s
WicketTester(BaseWicketTester).executeBehavior(AbstractAjaxBehavior) line: 1170	
		Url url = Url.parse(behavior.getCallbackUrl().toString(), Charset.forName(request.getCharacterEncoding()));
./wicket/page?0-1.IBehaviorListener.0-form-ajx
/s
AjaxButton$1(AbstractAjaxBehavior).getCallbackUrl() line: 88		/ creates handler from behavior	, and  creates url from the handler	,
		final RequestListenerInterface rli;

		rli = IBehaviorListener.INTERFACE;

		return getComponent().urlFor(this, rli, new PageParameters());
/s
FrmPage$4(Component).urlFor(Behavior, RequestListenerInterface, PageParameters) line: 3348	
		int id = getBehaviorId(behaviour);
		IRequestHandler handler = createRequestHandler(listener, parameters, id);
		return getRequestCycle().urlFor(handler);
/t
		request.setUrl(url);
		request.addHeader(WebRequest.HEADER_AJAX_BASE_URL, url.toString());
		request.addHeader(WebRequest.HEADER_AJAX, "true");

		if (behavior instanceof AjaxFormSubmitBehavior)
			AjaxFormSubmitBehavior formSubmitBehavior = (AjaxFormSubmitBehavior)behavior;
			Form<?> form = formSubmitBehavior.getForm();
			getRequest().setUseMultiPartContentType(form.isMultiPart());
			serializeFormToRequest(form);										/ dwz. -> post params	,
												/ maar FormTester had alle form component's model values als -> post params	, dus hier gebeurt nu niets,
/s
WicketTester(BaseWicketTester).serializeFormToRequest(Form<?>) line: 2466	
		final MockRequestParameters postParameters = request.getPostParameters();
postParameters	MockRequestParameters  (id=2603)	
	parameters	HashMap<K,V>  (id=2606)	
{p::name=[foo], age=[13]}

		final Set<String> currentParameterNamesSet = postParameters.getParameterNames();

		form.visitFormComponents(new IVisitor<FormComponent<?>, Void>()
			...
/s
Visits.visitChildren(Iterable<? super S>, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 144	
		// Iterate through children of this container
		for (final Object child : container)
container=[Form [Component id = form]]
child=[TextField [Component id = name]]
child=[TextField [Component id = age]]
child=[Button [Component id = normal]]
		{
			// Get next child component
			// Is the child of the correct class (or was no class specified)?
			if (filter.visitObject(child))
			{
				Visit<R> childTraversal = new Visit<>();

				// Call visitor
				S s = (S)child;
				visitor.component(s, childTraversal);
/s
BaseWicketTester$6.component(FormComponent<?>, IVisit<Void>) line: 2474	
		form.visitFormComponents(new IVisitor<FormComponent<?>, Void>()
		{
			@Override
			public void component(final FormComponent<?> formComponent, final IVisit<Void> visit)
			{
				final String inputName = formComponent.getInputName();
				if (!currentParameterNamesSet.contains(inputName))	/ Dit is verschil met of we NIET FormTester use	, toen ze hier dan tochworden add	, 
/n
p::name
age
/j
normal																	/ Button's model value was NIET add aan post params	, 
				{
					String[] values = FormTester.getInputValue(formComponent);	/ want .inputValue sloeg hem over	, maar dat doet hij nu ook weer	,
/s
FormTester.getInputValue(FormComponent<?>) line: 446	
			if (formComponent instanceof IFormSubmittingComponent)
			{
				// buttons have to be submitted explicitely
			}
		return new String[] { };
/t
BaseWicketTester$6.component(FormComponent<?>, IVisit<Void>) line: 2478	
					String[] values = FormTester.getInputValue(formComponent);
/d
[]
					for (String value : values)
/n
						postParameters.addParameterValue(inputName, value);
/n
/t
WicketTester(BaseWicketTester).executeBehavior(AbstractAjaxBehavior) line: 1187	
			serializeFormToRequest(form);
/d
			// mark behavior's component as the form submitter,
			String name = Form.getRootFormRelativeId(new PropertyModel<Component>(behavior,
				"component").getObject());
			if (!request.getPostParameters().getParameterNames().contains(name))
			{
				request.getPostParameters().setParameterValue(name, "marked");
/s
MockRequestParameters.setParameterValue(String, String) line: 77	
		List<StringValue> list = new ArrayList<StringValue>(1);
		list.add(StringValue.valueOf(value));
		parameters.put(name, list);
this	MockRequestParameters  (id=2603)	
	parameters	HashMap<K,V>  (id=2606)	
{p::name=[foo], age=[13], ajx=[marked]}
/t
WicketTester(BaseWicketTester).executeBehavior(AbstractAjaxBehavior) line: 1193	
				request.getPostParameters().setParameterValue(name, "marked");
/d
		processRequest();
/s


/ Einde WICKETTESTER AJAXFORM WITH FORMTESTER 

/ WICKETTESTER NORMAL FORM ON PAGE FIND SUBMITTINGBUTTON

/ Als we normal form op page submit	, is de value van de normal button ""	, en NIET null	, 
/ In de test moeten we "" of "E=mc²"	, 
	formTester.setValue("normal", "");

/s
Form<T>.onFormSubmitted(IFormSubmitter) line: 756	
				if (submitter == null)					/j als normal form	, /n als ajax form	,
				{
					submitter = findSubmittingButton();
/s
Form<T>.findSubmittingButton() line: 434	
																	
		IFormSubmittingComponent submittingComponent = getPage().visitChildren(	/ dus gaat children van de page af, niet die van het form	, blijkbaar kan button ook buiten form 	,
			IFormSubmittingComponent.class, new IVisitor<Component, IFormSubmittingComponent>()	/ filter=IFormSubmittingComponent.class	, dus Button	,
			{
				@Override
				public void component(final Component component,
					final IVisit<IFormSubmittingComponent> visit)
				{
					// Get submitting component
					final IFormSubmittingComponent submittingComponent = (IFormSubmittingComponent)component;

/s
Visits.visitChildren(Iterable<? super S>, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 138	
		for (final Object child : container)
container	FrmPage  (id=8697)	
		{
child	Form<T>  (id=8698)	
				// visit the children in the container
				visitChildren((Iterable<? super S>)child, visitor, filter, visit);
/s
Visits.visitChildren(Iterable<? super S>, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 138	
		for (final Object child : container)
container	Form<T>  (id=8698)	
		{
			if (filter.visitObject(child))			/ alleen Button passert het filter	,
			{
				Visit<R> childTraversal = new Visit<>();

				// Call visitor
				S s = (S)child;
				visitor.component(s, childTraversal);
/s
Form$2.component(Component, IVisit<IFormSubmittingComponent>) line: 442	
		IFormSubmittingComponent submittingComponent = getPage().visitChildren(
			IFormSubmittingComponent.class, new IVisitor<Component, IFormSubmittingComponent>()
			{
				@Override
				public void component(final Component component, final IVisit<IFormSubmittingComponent> visit)
component=[Button [Component id = normal]]
				{
					// Get submitting component
					final IFormSubmittingComponent submittingComponent = (IFormSubmittingComponent)component;
					final Form<?> form = submittingComponent.getForm();

					// Check for component-name or component-name.x request string
					if ((form != null) && (form.getRootForm() == Form.this))
					{
						String name = submittingComponent.getInputName();
normal
						IRequestParameters parameters = getRequest().getRequestParameters();
						if ((!parameters.getParameterValue(name).isNull()) ||
/j, =""

"org.apache.wicket.request.cycle.RequestCycle.get()"	 (pending)	
	request	ServletWebRequest  (id=8715)	
		postParameters	HashMap<K,V>  (id=8769)	
			[0]	HashMap$Entry<K,V>  (id=8774)	
p::name=["eric"]
			[1]	HashMap$Entry<K,V>  (id=8775)	
normal=[""]
			[2]	HashMap$Entry<K,V>  (id=8777)	
age=["13"]
			[3]	HashMap$Entry<K,V>  (id=8778)	
form2_hf_0=[""]

/s
CombinedRequestParametersAdapter.getParameterValue(String) line: 73	
		for (IRequestParameters p : parameters)
		{
			StringValue value = p.getParameterValue(name);
			if (!value.isNull())
			{
				return value;
""
/t
Form$2.component(Component, IVisit<IFormSubmittingComponent>) line: 453	
						if ((!parameters.getParameterValue(name).isNull()) ||
/j
							!parameters.getParameterValue(name + ".x").isNull())
						{
							visit.stop(submittingComponent);
/s
Visit<R>.stop(R) line: 48	
		action = Action.STOP;
		this.result = result;
""
/t


/ Einde WICKETTESTER NORMAL FORM ON PAGE FIND SUBMITTINGBUTTON

/ WICKETTESTER NORMAL FORM ON PAGE SUBMIT POST PARAMETERS OF SUBMITTING BUTTON 

/ button's model value -> post param	,

/ Einde WICKETTESTER NORMAL FORM ON PAGE SUBMIT POST PARAMETERS OF SUBMITTING BUTTON 

/ DATATABLE

/ 7	 . 

/ De data provider wordt used in DataViewBase en DataViewBase.ModelIterator	, 
/ DataViewBase is de RefreshingView	, van de row items	,

/ De 13's hieronder zijn de calls op de data provider	, met een GET page	, 


/ 13	. 

/s
	SortableContactDataProvider_my.size() line: 128	
		return filterContacts(getContactsDB().getIndex(getSort())).size();
/cb
	DataTable$DefaultDataGridView(DataViewBase<T>).internalGetItemCount() line: 142	
		return internalGetDataProvider().size();
/cb
	DataTable$DefaultDataGridView(AbstractPageableView<T>).getItemCount() line: 235	
		long count = internalGetItemCount();
/cb
	DataTable$DefaultDataGridView(AbstractPageableView<T>).getRowCount() line: 216	
		return getItemCount();
/cb
	DataTable$DefaultDataGridView(AbstractPageableView<T>).getViewSize() line: 314	
		return Math.min(getItemsPerPage(), getRowCount() - getFirstItemOffset());
/cb
	DataTable$DefaultDataGridView(AbstractPageableView<T>).getItemModels() line: 99	
		long offset = getFirstItemOffset();
		long size = getViewSize();												<-

		Iterator<IModel<T>> models = getItemModels(offset, size);
/cb
	DataTable$DefaultDataGridView(RefreshingView<T>).onPopulate() line: 93	
		Iterator<IModel<T>> models = getItemModels();											<- 
		Iterator<Item<T>> items = getItemReuseStrategy().getItems(newItemFactory(), models,
			getItems());
		removeAll();
		addItems(items);
/cb
	DataTable$DefaultDataGridView(AbstractRepeater).onBeforeRender() line: 124	
		onPopulate();

/ 13	. 

/c

	SortableContactDataProvider_my.iterator(long, long) line: 57	
		List<Contact> contactsFound = getContactsDB().getIndex(getSort());
		
		return filterContacts(contactsFound).
			subList((int)first, (int)(first + count)).
			iterator();
/cb
	DataViewBase$ModelIterator<T>.<init>(IDataProvider<T>, long, long) line: 107	
			this.dataProvider = dataProvider;
			max = count;

			items = count > 0 ? dataProvider.iterator(offset, count) : null;
/cb
	DataTable$DefaultDataGridView(DataViewBase<T>).getItemModels(long, long) line: 74	
		return new ModelIterator<T>(internalGetDataProvider(), offset, count);
/cb
	DataTable$DefaultDataGridView(AbstractPageableView<T>).getItemModels() line: 101	
		long offset = getFirstItemOffset();
		long size = getViewSize();

		Iterator<IModel<T>> models = getItemModels(offset, size);				<-
/cb
	DataTable$DefaultDataGridView(RefreshingView<T>).onPopulate() line: 93	
		Iterator<IModel<T>> models = getItemModels();											<- 
		Iterator<Item<T>> items = getItemReuseStrategy().getItems(newItemFactory(), models,
			getItems());
		removeAll();
		addItems(items);
/cb
	DataTable$DefaultDataGridView(AbstractRepeater).onBeforeRender() line: 124	
		onPopulate();

/ 13	. 

/ c
/s
	SortableContactDataProvider_my.model(Contact) line: 137	
		return new DetachableContactModel(object);
/cb 
	SortableContactDataProvider_my.model(Object) line: 36	
	DataViewBase$ModelIterator<T>.next() line: 135	
/=
		public ModelIterator(IDataProvider<T> dataProvider, long offset, long count)
		{
			this.dataProvider = dataProvider;
			max = count;

			items = count > 0 ? dataProvider.iterator(offset, count) : null;			/ list van Contacts	,
		}
		@Override
		public IModel<T> next()
		{
			index++;
			return dataProvider.model(items.next());							<-
		}
/cb 
	DataViewBase$ModelIterator<T>.next() line: 85	
	AbstractPageableView$CappedIteratorAdapter<T>.next() line: 377	
	AbstractPageableView$CappedIteratorAdapter<T>.next() line: 328	
	DefaultItemReuseStrategy$1.next() line: 74	
/=
	public <T> Iterator<Item<T>> getItems(final IItemFactory<T> factory, final Iterator<IModel<T>> newModels, Iterator<Item<T>> existingItems)
	{
		return new Iterator<Item<T>>()
		{
			private int index = 0;

			@Override
			public boolean hasNext()
			{
				return newModels.hasNext();
			}

			@Override
			public Item<T> next()
			{
				IModel<T> model = newModels.next();							<- ModelIterator	, 
				Item<T> item = factory.newItem(index, model);

this	DefaultItemReuseStrategy$1  (id=9133)	
	val$newModels	AbstractPageableView$CappedIteratorAdapter<T>  (id=9132)	
		delegate	DataViewBase$ModelIterator<T>  (id=9127)					<-
			dataProvider	SortableContactDataProvider_my  (id=9094)	
			index	1	
			items	ArrayList$SubList$1  (id=9136)							/ list van Contacts	,
			max	8	
		index	1	
		max	8	
/cb
	DataTable$DefaultDataGridView(RefreshingView<T>).addItems(Iterator<Item<T>>) line: 189	
		while (items.hasNext())
		{
			Item<T> item = items.next();
/cb
	DataTable$DefaultDataGridView(RefreshingView<T>).onPopulate() line: 97	
		Iterator<IModel<T>> models = getItemModels();
		Iterator<Item<T>> items = getItemReuseStrategy().getItems(newItemFactory(), models,
			getItems());
		removeAll();
		addItems(items);  														<-
/cb
	DataTable$DefaultDataGridView(AbstractRepeater).onBeforeRender() line: 124	
		onPopulate();


/ 7	. 

$ less DataTableFilterToolbarPage_my.html
 
   <form wicket:id="filterForm">									/ filterForm				FilterForm
    	<table class="dataview" wicket:id="table"></table>			/ filterForm:table 			DataTable
    </form>

[eric@localhost wicket]$ less ./wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/repeater/data/table/DataTable.html
<wicket:panel xmlns:wicket="http://wicket.apache.org">
<caption wicket:id="caption"></caption>
<colgroup wicket:id="colGroup"></colgroup>
<thead wicket:id="topToolbars">											/ DataTable.ToolbarsContainer
        <wicket:container wicket:id="toolbars"></wicket:container>		/ RepeatingView
</thead>
<tfoot wicket:id="bottomToolbars">
        <wicket:container wicket:id="toolbars"></wicket:container>
</tfoot>
<tbody wicket:id="body">											/ filterForm:table:body			WebMarkupContainer
        <tr wicket:id="rows">										/ filterForm:table:body:rows	DataTable$DefaultDataGridView < RefreshingView
                <td wicket:id="cells">
                        <div wicket:id="cell">[cell]</div>
                </td>
        </tr>
</tbody>
</wicket:panel>

./wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/repeater/data/table/NavigationToolbar.html
<wicket:panel xmlns:wicket="http://wicket.apache.org">
        <tr class="navigation">
                <td wicket:id="span">
                        <div class="navigatorLabel"><div wicket:id="navigatorLabel">[navigator-label]</div></div>
                        <div class="navigator"><div wicket:id="navigator">[navigator]</div></div>
                </td>
        </tr>
</wicket:panel>

./wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/repeater/data/table/filter/FilterToolbar.html
<wicket:panel>
        <tr class="filters-tr">
                <wicket:container wicket:id="filters">
                        <td wicket:id="filter" class="filter-td">[filter]</td>
                </wicket:container>
        </tr>
</wicket:panel>

./wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/repeater/data/table/HeadersToolbar.html
<wicket:panel xmlns:wicket="http://wicket.apache.org">
        <tr class="headers">
                <wicket:container wicket:id="headers">													/ RefreshingView
                        <th wicket:id="header"><span wicket:id="label">[header-label]</span></th>
                </wicket:container>
        </tr>
</wicket:panel>

/ 7	. 

/ 13	. 

/ filterForm:table:body:rows verticale RefreshingView

/ Bij verticale RefreshingView "rows" komen we in DataTable$DefaultDataGridView(AbstractDataGridView<T>).newItem	, 
/ Straks bij horizontale RefreshingView "headers" komen we in een andere .newItem fct	,

/s
	DataTable$DefaultDataGridView(AbstractDataGridView<T>).newItem(String, int, IModel<T>) line: 99	
		return newRowItem(id, index, model);
/cb
	RefreshingView$1.newItem(int, IModel<T>) line: 113	
		return new IItemFactory<T>()
		{
			@Override
			public Item<T> newItem(int index, IModel<T> model)
			{
				String id = RefreshingView.this.newChildId();
				Item<T> item = RefreshingView.this.newItem(id, index, model);
				RefreshingView.this.populateItem(item);
				return item;
/cb
	DefaultItemReuseStrategy$1.next() line: 75	
	DefaultItemReuseStrategy$1.next() line: 56	
	DataTable$DefaultDataGridView(RefreshingView<T>).addItems(Iterator<Item<T>>) line: 189	
this	DataTable$DefaultDataGridView  (id=11003)	
	id	"rows" (id=11106)	
/cb
	DataTable$DefaultDataGridView(RefreshingView<T>).onPopulate() line: 97	
	DataTable$DefaultDataGridView(AbstractRepeater).onBeforeRender() line: 124	
	DataTable$DefaultDataGridView(AbstractPageableView<T>).onBeforeRender() line: 115	
	DataTable$DefaultDataGridView(Component).internalBeforeRender() line: 949	
	DataTable$DefaultDataGridView(Component).beforeRender() line: 1017	
	WebMarkupContainer(MarkupContainer).onBeforeRenderChildren() line: 1866	
	WebMarkupContainer(Component).onBeforeRender() line: 3877	
	WebMarkupContainer(Component).internalBeforeRender() line: 949	
	WebMarkupContainer(Component).beforeRender() line: 1017	
	DataTable<T,S>(MarkupContainer).onBeforeRenderChildren() line: 1866	
	DataTable<T,S>(Component).onBeforeRender() line: 3877	
	DataTable<T,S>(Component).internalBeforeRender() line: 949	
	DataTable<T,S>(Component).beforeRender() line: 1017	
	FilterForm<T>(MarkupContainer).onBeforeRenderChildren() line: 1866	
	FilterForm<T>(Component).onBeforeRender() line: 3877	
	FilterForm<T>(Form<T>).onBeforeRender() line: 1807	
	FilterForm<T>(Component).internalBeforeRender() line: 949	
	FilterForm<T>(Component).beforeRender() line: 1017	
	DataTableFilterToolbarPage_my(MarkupContainer).onBeforeRenderChildren() line: 1866	
	DataTableFilterToolbarPage_my(Component).onBeforeRender() line: 3877	
	DataTableFilterToolbarPage_my(Page).onBeforeRender() line: 801	
	DataTableFilterToolbarPage_my(Component).internalBeforeRender() line: 949	
	DataTableFilterToolbarPage_my(Component).beforeRender() line: 1017	
	DataTableFilterToolbarPage_my(Component).internalPrepareForRender(boolean) line: 2215	
	DataTableFilterToolbarPage_my(Page).internalPrepareForRender(boolean) line: 242	
	DataTableFilterToolbarPage_my(Component).render() line: 2304	
	DataTableFilterToolbarPage_my(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 195	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ 13	. 

/ filterForm													FiterForm
/ filterForm:table												DataTable
/ filterForm:table:topToolbars								 	DataTable$ToolbarsContainer	
/ filterForm:table:topToolbars:toolbars							RepeatingView
/ filterForm:table:topToolbars:toolbars:3						HeadersToolbar											/ TODO
/ filterForm:table:topToolbars:toolbars:3:headers				HeadersToolbar$1 < RefreshingView


/ filterForm:table:topToolbars:toolbars:3:headers				HeadersToolbar$1 < RefreshingView	, horizontaal	,

/ Bij verticale RefreshingView "rows" kwamen we in DataTable$DefaultDataGridView(AbstractDataGridView<T>).newItem	, 
/ Nu bij horizontale RefreshingView "headers" komen we in HeadersToolbar$1(RefreshingView<T>).newItem fct	,

/ OrderByLink is de link in de header, waarmee we sort	, andere headers zijn alleen een Label	,

/s
	OrderByBorder$1(OrderByLink<S>).<init>(String, S, ISortStateLocator<S>) line: 73	
	OrderByBorder$1.<init>(OrderByBorder, String, Object, ISortStateLocator) line: 91				/this=new OrderByLink	
	HeadersToolbar$2(OrderByBorder<S>).newOrderByLink(String, S, ISortStateLocator<S>) line: 90	
	HeadersToolbar$2(OrderByBorder<S>).<init>(String, S, ISortStateLocator<S>) line: 71	
	HeadersToolbar$2.<init>(HeadersToolbar, String, Object, ISortStateLocator) line: 135		/ this=new OrderByBorder
	HeadersToolbar<S>.newSortableHeader(String, S, ISortStateLocator<S>) line: 134	
	HeadersToolbar$1.populateItem(Item<IColumn<T,S>>) line: 88							/ this=new RefreshingView
	RefreshingView$1.newItem(int, IModel<T>) line: 114						/ this=new IItemFactory
		return new IItemFactory<T>()
		{
			@Override
			public Item<T> newItem(int index, IModel<T> model)
			{
				String id = RefreshingView.this.newChildId();
				Item<T> item = RefreshingView.this.newItem(id, index, model);
				RefreshingView.this.populateItem(item);
/cb
	DefaultItemReuseStrategy$1.next() line: 75	
	DefaultItemReuseStrategy$1.next() line: 56	
	HeadersToolbar$1(RefreshingView<T>).addItems(Iterator<Item<T>>) line: 189	
this	HeadersToolbar$1  (id=11040)	
	id	"headers" (id=11074)	
		while (items.hasNext())
		{
			Item<T> item = items.next();									/ nu GEEN row item	, 
/cb
	HeadersToolbar$1(RefreshingView<T>).onPopulate() line: 97	
	HeadersToolbar$1(AbstractRepeater).onBeforeRender() line: 124	
	HeadersToolbar$1(Component).internalBeforeRender() line: 949	
	HeadersToolbar$1(Component).beforeRender() line: 1017	
	HeadersToolbar<S>(MarkupContainer).onBeforeRenderChildren() line: 1866	
	HeadersToolbar<S>(Component).onBeforeRender() line: 3877	
	HeadersToolbar<S>(Component).internalBeforeRender() line: 949	
	HeadersToolbar<S>(Component).beforeRender() line: 1017	
	RepeatingView(MarkupContainer).onBeforeRenderChildren() line: 1866	
	RepeatingView(Component).onBeforeRender() line: 3877	
	RepeatingView(AbstractRepeater).onBeforeRender() line: 143	
	RepeatingView(Component).internalBeforeRender() line: 949	
	RepeatingView(Component).beforeRender() line: 1017	
	DataTable$ToolbarsContainer(MarkupContainer).onBeforeRenderChildren() line: 1866	
	DataTable$ToolbarsContainer(Component).onBeforeRender() line: 3877	
	DataTable$ToolbarsContainer(Component).internalBeforeRender() line: 949	
	DataTable$ToolbarsContainer(Component).beforeRender() line: 1017	
	DataTable<T,S>(MarkupContainer).onBeforeRenderChildren() line: 1866	
	DataTable<T,S>(Component).onBeforeRender() line: 3877	
	DataTable<T,S>(Component).internalBeforeRender() line: 949	
	DataTable<T,S>(Component).beforeRender() line: 1017	
	FilterForm<T>(MarkupContainer).onBeforeRenderChildren() line: 1866	
	FilterForm<T>(Component).onBeforeRender() line: 3877	
	FilterForm<T>(Form<T>).onBeforeRender() line: 1807	
	FilterForm<T>(Component).internalBeforeRender() line: 949	
	FilterForm<T>(Component).beforeRender() line: 1017	
	DataTableFilterToolbarPage_my(MarkupContainer).onBeforeRenderChildren() line: 1866	
	DataTableFilterToolbarPage_my(Component).onBeforeRender() line: 3877	
	DataTableFilterToolbarPage_my(Page).onBeforeRender() line: 801	
	DataTableFilterToolbarPage_my(Component).internalBeforeRender() line: 949	
	DataTableFilterToolbarPage_my(Component).beforeRender() line: 1017	
	DataTableFilterToolbarPage_my(Component).internalPrepareForRender(boolean) line: 2215	
	DataTableFilterToolbarPage_my(Page).internalPrepareForRender(boolean) line: 242	
	DataTableFilterToolbarPage_my(Component).render() line: 2304	
	DataTableFilterToolbarPage_my(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 195	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	


/ 7	. 

/ we submit form	, met "Allen" is 2de field	, 

/ 13	. 

/ we zien dat de TextField in FilterToolbar allen wicket id "filter" hebben , net als hun parent TextFilter	, maar hun parents, ListItems verschillende ids hebben , "0", "1", ...
   
component	FilterForm<T>  (id=11116)	
	data	FilterStateModel<T>  (id=11125)	
	id	"filterForm" (id=11248)	
	children	DataTable<T,S>  (id=11104)	
		id	"table" (id=11178)	
		data 	null
		children	ArrayList<E>  (id=11175)	
			[0]	DataTable$Caption  (id=11121)	
			[1]	ColGroup  (id=11176)	
			[2]	WebMarkupContainer  (id=11004)	
			[3]	DataTable$ToolbarsContainer  (id=11172)	
				data	null	
				id	"topToolbars" (id=11174)	
				children	RepeatingView  (id=11052)	
					data	null	
					id	"toolbars" (id=11171)	
					children	ArrayList<E>  (id=11170)	
						[0]	FilterToolbar  (id=11254)	
							data	null	
							id	"1" (id=11257)	
							children	FilterToolbar$2  (id=11256)	
								data	FilterToolbar$1  (id=11260)	
								id	"filters" (id=11261)	
								children	ArrayList<E>  (id=11259)	
									[0]	ListItem<T>  (id=11263)	
										data	ListItemModel<T>  (id=11270)	
										id	"0" (id=11271)																<-	
										children	TextFilter<T>  (id=11240)	
											data	FilterToolbar$2$1  (id=11275)	
											id	"filter" (id=11239)											<-
											children	TextField<T>  (id=11221)	
												id	"filter" (id=11239)										<-
												children	null	
												convertedInput	null	
												data	Object[2]  (id=11238)	
													[0]	PropertyModel<T>  (id=11235)	
													[1]	FilterForm$1  (id=11335)	
									[1]	ListItem<T>  (id=11264)	
										data	ListItemModel<T>  (id=11272)	
										id	"1" (id=11257)													<-
										children	TextFilter<T>  (id=11240)	
											data	FilterToolbar$2$1  (id=11275)	
											id	"filter" (id=11239)											<-
											children	TextField<T>  (id=11221)	
												id	"filter" (id=11239)										<-
												children	null	
												convertedInput	null	
												data	Object[2]  (id=11238)	
													[0]	PropertyModel<T>  (id=11235)	
														expression	"firstName" (id=11062)	
														target	FilterStateModel<T>  (id=11125)	
													[1]	FilterForm$1  (id=11335)					/=new Behavior()	, focus TODO
									[2]	ListItem<T>  (id=11265)	
									[3]	ListItem<T>  (id=11266)	
									[4]	ListItem<T>  (id=11267)	
									[5]	ListItem<T>  (id=11268)	
						[1]	NavigationToolbar  (id=11255)	
						[2]	HeadersToolbar<S>  (id=11041)	
			[4]	DataTable$ToolbarsContainer  (id=11120)	

/ 13	. 

/ Waarom is FiterStateModel het model van die TextFields in de FilterToolbar?

/ 1313	. 

/ Wanneer wordt onze page's <init> called?

/ achter	, 
	RequestCycle.processRequest() line: 222	
			IRequestHandler handler = resolveRequestHandler();
			if (handler != null)
			{
				execute(handler);

/ Eerst moet de controller , RenderPageRequestHandler , bekend zijn	,

/s
	DataTableFilterToolbarPage_my.<init>() line: 60	
	DefaultPageFactory.newPage(Constructor<C>, PageParameters) line: 175	
	DefaultPageFactory.newPage(Class<C>) line: 67	
	DefaultMapperContext.newPageInstance(Class<IRequestablePage>, PageParameters) line: 102	
	PageProvider.resolvePageInstance(Integer, Class<IRequestablePage>, PageParameters, Integer) line: 271	
	PageProvider.getPageInstance() line: 169	
	WebPageRenderer(PageRenderer).getPage() line: 78	
	WebPageRenderer.isPageStateless() line: 287	
	WebPageRenderer.shouldRenderPageAndWriteResponse(RequestCycle, Url, Url) line: 329	
	WebPageRenderer.respond(RequestCycle) line: 193	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
			IRequestHandler handler = resolveRequestHandler();
			if (handler != null)
			{
				execute(handler);
/cb
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ 1313	. 

/c

/ stack	, 
/s
TextFilter<T>.<init>(String, IModel<T>, FilterForm<?>) line: 49	
		super(id, form);
		filter = new TextField<>("filter", model);		/ het TextField krijgt dit model	, een property ("firstName") model op de FiterState
													/ de TextFilter's data is een Behavior	, FilterToolbar$2$1	,
		enableFocusTracking(filter);
		add(filter);
/cb
/s
TextFilteredPropertyColumn<T,F,S>.getFilterModel(FilterForm<?>) line: 83	
		return new PropertyModel<>(form.getDefaultModel(), getPropertyExpression());
form.getDefaultModel()=FilterStateModel, de data provider levert de FilterState	,
getPropertyExpression()="firstName"
/s
	TextFilteredPropertyColumn<T,F,S>.getFilter(String, FilterForm<?>) line: 70	
		return new TextFilter<>(componentId, getFilterModel(form), form);
/cb
	FilterToolbar$2.populateItem(ListItem<IColumn<T,S>>) line: 102					/ ListView	,
/=
		// populate the toolbar with components provided by filtered columns
		ListView<IColumn<T, S>> filters = new ListView<IColumn<T, S>>("filters", model)
		{
			private static final long serialVersionUID = 1L;


			@Override
			protected void populateItem(ListItem<IColumn<T, S>> item)
			{
				final IColumn<T, S> col = item.getModelObject();
				item.setRenderBodyOnly(true);

				Component filter = null;

				if (col instanceof IFilteredColumn)
				{
					IFilteredColumn<T, S> filteredCol = (IFilteredColumn<T, S>)col;
					filter = filteredCol.getFilter(FILTER_ID, form);						<-
/cb
	FilterToolbar$2(ListView<T>).onPopulate() line: 523	
		final int size = getViewSize();
6
			for (int i = 0; i < size; i++)
			{
				// Get index
				final int index = firstIndex + i;

				ListItem<T> item = null;
				if (hasChildren)
				{
					// If this component does not already exist, populate it
					item = (ListItem<T>)get(Integer.toString(index));
				}
				if (item == null)
				{
					// Create item for index
					item = newItem(index, getListItemModel(getModel(), index));

					// Add list item
					add(item);

					// Populate the list item
					onBeginPopulateItem(item);
					populateItem(item);
				}
/cb
	FilterToolbar$2(AbstractRepeater).onBeforeRender() line: 124	
		onPopulate();
/cb
	FilterToolbar$2(Component).internalBeforeRender() line: 949	
	FilterToolbar$2(Component).beforeRender() line: 1017				/ ListView
	FilterToolbar(MarkupContainer).onBeforeRenderChildren() line: 1866	
this	FilterToolbar  (id=13466)	
	id	"1" (id=13599)	
	children	FilterToolbar$2  (id=13465)		 /ListView
		id	"filters" (id=13603)	
		children	ArrayList<E>  (id=13601)			/ moment opname	met 2 children	, want er komen 6 children	, items,  want er zijn 6 columns	,
			[0]	ListItem<T>  (id=13606)	
				id	"0" (id=13610)	
				data	ListItemModel<T>  (id=13609)	
				children	NoFilter  (id=13608)	
					children	null	
					data	FilterToolbar$2$1  (id=13738)	
					id	"filter" (id=13625)	
			[1]	ListItem<T>  (id=13607)	
				id	"1" (id=13599)	
				data	ListItemModel<T>  (id=13611)	
				children	null	-> TextFilter<T>  (id=13637)			/ hierboven in de stack wordt deze TextFilter set	, en beneden debug we 
																	/ verder, en worden er in het totaal 6 items create	,
			for (final Component child : this)
					child.beforeRender();
/cb
	FilterToolbar(Component).onBeforeRender() line: 3877	
	FilterToolbar.onBeforeRender() line: 158	
	FilterToolbar(Component).internalBeforeRender() line: 949	
	FilterToolbar(Component).beforeRender() line: 1017	
	RepeatingView(MarkupContainer).onBeforeRenderChildren() line: 1866	
this	RepeatingView  (id=13467)	
	children	ArrayList<E>  (id=13480)	
		[0]	FilterToolbar  (id=13466)							<-
			id	"1"
		[1]	NavigationToolbar  (id=13483)	
			id	"2"
		[2]	HeadersToolbar<S>  (id=13460)	
			id	"3"
	id	"toolbars" (id=13481)	

			for (final Component child : this)
					child.beforeRender();
/cb
	RepeatingView(Component).onBeforeRender() line: 3877	
	RepeatingView(AbstractRepeater).onBeforeRender() line: 143	
	RepeatingView(Component).internalBeforeRender() line: 949	
	RepeatingView(Component).beforeRender() line: 1017	
	DataTable$ToolbarsContainer(MarkupContainer).onBeforeRenderChildren() line: 1866	
this	DataTable$ToolbarsContainer  (id=13468)	
	id	"topToolbars" (id=13485)	
	children	RepeatingView  (id=13467)						
		id	"toolbars" (id=13481)	
		children	ArrayList<E>  (id=13480)	
			[0]	FilterToolbar  (id=13466)	
			[1]	NavigationToolbar  (id=13483)	
			[2]	HeadersToolbar<S>  (id=13460)	

			for (final Component child : this)
					child.beforeRender();
/cb
	DataTable$ToolbarsContainer(Component).onBeforeRender() line: 3877	
	DataTable$ToolbarsContainer(Component).internalBeforeRender() line: 949	
	DataTable$ToolbarsContainer(Component).beforeRender() line: 1017	
	DataTable<T,S>(MarkupContainer).onBeforeRenderChildren() line: 1866	
this	DataTable<T,S>  (id=13469)	
	children	ArrayList<E>  (id=13493)	
		[0]	DataTable$Caption  (id=13492)	
		[1]	ColGroup  (id=13494)	
		[2]	WebMarkupContainer  (id=13462)	
		[3]	DataTable$ToolbarsContainer  (id=13468)	 <-	
		[4]	DataTable$ToolbarsContainer  (id=13491)	
	id	"tableWithFilterForm" (id=13496)	
/cb
	DataTable<T,S>(Component).onBeforeRender() line: 3877	
	DataTable<T,S>(Component).internalBeforeRender() line: 949	
	DataTable<T,S>(Component).beforeRender() line: 1017	
	FilterForm<T>(MarkupContainer).onBeforeRenderChildren() line: 1866	
	FilterForm<T>(Component).onBeforeRender() line: 3877	
	FilterForm<T>(Form<T>).onBeforeRender() line: 1807	
	FilterForm<T>(Component).internalBeforeRender() line: 949	
	FilterForm<T>(Component).beforeRender() line: 1017	
	DataTableFilterToolbarPage_my(MarkupContainer).onBeforeRenderChildren() line: 1866	
	DataTableFilterToolbarPage_my(Component).onBeforeRender() line: 3877	
	DataTableFilterToolbarPage_my(Page).onBeforeRender() line: 801	
	DataTableFilterToolbarPage_my(Component).internalBeforeRender() line: 949	
	DataTableFilterToolbarPage_my(Component).beforeRender() line: 1017	
	DataTableFilterToolbarPage_my(Component).internalPrepareForRender(boolean) line: 2215	
	DataTableFilterToolbarPage_my(Page).internalPrepareForRender(boolean) line: 242	
	DataTableFilterToolbarPage_my(Component).render() line: 2304	
	DataTableFilterToolbarPage_my(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/ debug (*)
/s
FilterToolbar$2(ListView<T>).onPopulate() line: 516	

			for (int i = 0; i < size; i++)
			{
				// Get index
				final int index = firstIndex + i;

				ListItem<T> item = null;
				if (hasChildren)
				{
					// If this component does not already exist, populate it
					item = (ListItem<T>)get(Integer.toString(index));
				}
				if (item == null)
				{
					// Create item for index
					item = newItem(index, getListItemModel(getModel(), index));

					// Add list item
					add(item);
this	FilterToolbar$2  (id=13465)	
	children	ArrayList<E>  (id=13601)	
		[0]	ListItem<T>  (id=13606)	
			id	"0" (id=13610)	
			children	NoFilter  (id=13608)	
		[1]	ListItem<T>  (id=13607)	
			id	"1" (id=13599)	
			children	TextFilter<T>  (id=13637)	
				id	"filter" (id=13625)	
				data	FilterToolbar$2$1  (id=13814)		/ Behavior	, class attr	, 
				children	TextField<T>  (id=13808)	
					id	"filter" (id=13625)	
					data	Object[2]  (id=13810)	
						[0]	PropertyModel<T>  (id=13638)	
							expression	"firstName" (id=13624)	
							target	FilterStateModel<T>  (id=13629)	
						[1]	FilterForm$1  (id=13922)	

					// Populate the list item
					onBeginPopulateItem(item);
					populateItem(item);
/s
FilterToolbar$2.populateItem(ListItem<IColumn<T,S>>) line: 94		/ FilterToolbar$2 is een ListView	,
/=
public class FilterToolbar extends AbstractToolbar
	public <T, S, F> FilterToolbar(final DataTable<T, S> table, final FilterForm<F> form)
		// populate the toolbar with components provided by filtered columns
		ListView<IColumn<T, S>> filters = new ListView<IColumn<T, S>>("filters", model)
		{
			private static final long serialVersionUID = 1L;


			@Override
			protected void populateItem(ListItem<IColumn<T, S>> item)
			{
				final IColumn<T, S> col = item.getModelObject();							<-		TODO LIST MODEL
/s
ListItem<T>(Component).getDefaultModelObject() line: 1626	
		final IModel<?> model = getDefaultModel();
model	ListItemModel<T>  (id=13835)	
	index	2	
	listView	FilterToolbar$2  (id=13465)	
				// Get model value for this component.
				return model.getObject();
/s
ListItemModel<T>.getObject() line: 61	
		return listView.getModelObject().get(index);
/s
FilterToolbar$2(Component).getDefaultModelObject() line: 1621	
		final IModel<?> model = getDefaultModel();
model	FilterToolbar$1  (id=13602)								/=new AbstractReadOnlyModel	,
/s
FilterToolbar$1.getObject() line: 76	
				List<IColumn<T, S>> columnsModels = new LinkedList<>();

				for (IColumn<T, S> column : table.getColumns())
				{
					columnsModels.add(column);
				}
				return columnsModels;
columnsModels	LinkedList<E>  (id=13975)	
	[0]	DataTableFilterToolbarPage_my$1  (id=13976)	
	[1]	TextFilteredPropertyColumn<T,F,S>  (id=13454)	
	[2]	DataTableFilterToolbarPage_my$2  (id=13455)	
	[3]	PropertyColumn<T,S>  (id=13978)	
	[4]	PropertyColumn<T,S>  (id=13979)	
	[5]	PropertyColumn<T,S>  (id=13980)	
/t
ListItemModel<T>.getObject() line: 61	
		return listView.getModelObject().get(index);
/pd
this	ListItemModel<T>  (id=13835)	
	index	2	
	listView	FilterToolbar$2  (id=13465)	
/t
FilterToolbar$2.populateItem(ListItem<IColumn<T,S>>) line: 95	
				final IColumn<T, S> col = item.getModelObject();
/d
				item.setRenderBodyOnly(true);
				Component filter = null;

				if (col instanceof IFilteredColumn)
				{
					IFilteredColumn<T, S> filteredCol = (IFilteredColumn<T, S>)col;
					filter = filteredCol.getFilter(FILTER_ID, form);
FILTER_ID="filter"
/s
DataTableFilterToolbarPage_my$2(TextFilteredPropertyColumn<T,F,S>).getFilter(String, FilterForm<?>) line: 70	
		return new TextFilter<>(componentId, getFilterModel(form), form);


/ 1313	. 

public class FilterForm<T> extends Form<T>
{
	public FilterForm(final String id, final IFilterStateLocator<T> locator)
	{
		super(id, new FilterStateModel<>(locator));

		this.locator = locator;
	}

class FilterStateModel<T> implements IModel<T>
{
	private final IFilterStateLocator<T> locator;

	public FilterStateModel(final IFilterStateLocator<T> locator)
	{
		this.locator = locator;
	}
	@Override
	public T getObject()
	{
		return locator.getFilterState();
	}

/ 7	.  

/ submit form	,

/ 13	. 

/ Eerst models update van de TextFields in de filterToolbar	,
/ hun models zijn property models, met expression= id column	, en target=FilterStateModel,	 die de FiterState heeft, die de provider levert,	



/s
	SortableContactDataProvider_my.getFilterState() line: 143	
	    return contactFilter;
/cb
	SortableContactDataProvider_my.getFilterState() line: 36	
	FilterStateModel<T>.getObject() line: 61	
		return locator.getFilterState();
/cb
	PropertyModel<T>(AbstractPropertyModel<T>).getInnermostModelOrObject() line: 264	
		Object object = getTarget();
object	FilterStateModel<T>  (id=13510)	

		while (object instanceof IModel)						/j, 	this is een property model	,
		{
			Object tmp = ((IModel<?>)object).getObject();			<-	/ uses this.expression
/d
tmp	ContactFilter_my  (id=13583)	
			object = tmp;
		return object;
/cb
	PropertyModel<T>(AbstractPropertyModel<T>).getObject() line: 83	
		final String expression = propertyExpression();
		final Object target = getInnermostModelOrObject();				<-
/d
			return (T)PropertyResolver.getValue(expression, target);
expression="firstName"
/cb
	TextField<T>(Component).getDefaultModelObject() line: 1626	
		final IModel<?> model = getDefaultModel();
model	PropertyModel<T>  (id=13511)	
	expression	"firstName" (id=13532)	
	target	FilterStateModel<T>  (id=13510)	
		locator	SortableContactDataProvider_my  (id=13498)	

				return model.getObject();
/cb
	Component$3.compare(Component, Object) line: 303					/ this=new IModelComparator	,
			final Object a = component.getDefaultModelObject();			<-
/d
null
b="Abner"													/ = this.convertedInput="Abner"	, uit post params	,	
															/ en moet in model	, want daar staat nog null	,
			if (a == null || b == null)
/j
			{
				return false;

/cb
	TextField<T>(Component).setDefaultModelObject(Object) line: 3079	
		if (!getModelComparator().compare(this, object))						<-
/d
		{
			modelChanging();
			model.setObject(object);			/ calls SortableContactDataProvider_my.getFilterState() 
/cb
	TextField<T>(FormComponent<T>).setModelObject(T) line: 1579	
	TextField<T>(FormComponent<T>).updateModel() line: 1097	
		setModelObject(getConvertedInput());
/cb
	Form$FormModelUpdateVisitor.component(Component, IVisit<Void>) line: 229	
/=
			if (component instanceof IFormModelUpdateListener)
			{
				final Form<?> form = Form.findForm(component);
				if (form != null)
				{
					if (this.formFilter == null || this.formFilter == form)
					{
						if (form.isEnabledInHierarchy())
						{
							if (component.isVisibleInHierarchy() &&
								component.isEnabledInHierarchy())
							{
								((IFormModelUpdateListener)component).updateModel();
/cb
	Form$FormModelUpdateVisitor.component(Object, IVisit) line: 199	
	Visits.visitPostOrderHelper(Object, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 274	
			visitor.component((S)component, visit);
component	TextField<T>  (id=13474)	
	id	"filter" (id=13493)	
	convertedInput	"Abner" (id=13490)	
	data	Object[2]  (id=13492)	
		[0]	PropertyModel<T>  (id=13511)	
			expression	"firstName" (id=13532)	
			target	FilterStateModel<T>  (id=13510)	
		[1]	FilterForm$1  (id=13531)	
	children	null	
/cb
	Visits.visitPostOrderHelper(Object, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 262	
	Visits.visitPostOrderHelper(Object, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 262	
	Visits.visitPostOrderHelper(Object, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 262	
	Visits.visitPostOrderHelper(Object, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 262	
	Visits.visitPostOrderHelper(Object, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 262	
	Visits.visitPostOrderHelper(Object, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 262	
	Visits.visitPostOrderHelper(Object, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 262	
	Visits.visitPostOrderHelper(Object, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 262	
	Visits.visitPostOrder(Object, IVisitor<S,R>, IVisitFilter) line: 245	
	FormComponent<T>.visitComponentsPostOrder(Component, IVisitor<Component,R>) line: 423	
	FilterForm<T>(Form<T>).internalUpdateFormComponentModels() line: 1864	
		FormComponent.visitComponentsPostOrder(this, new FormModelUpdateVisitor(this));
/cb
	FilterForm<T>(Form<T>).updateFormComponentModels() line: 1829	
	FilterForm<T>(Form<T>).process(IFormSubmitter) line: 963	
			// Update model using form data
			updateFormComponentModels();
/cb
	FilterForm<T>(Form<T>).onFormSubmitted(IFormSubmitter) line: 795	
	FilterForm<T>(Form<T>).onFormSubmitted() line: 708	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 57	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 606	
	RequestListenerInterface.internalInvoke(Component, Object) line: 258	
	RequestListenerInterface.invoke(IRequestableComponent) line: 216	
	ListenerInterfaceRequestHandler.invokeListener() line: 241	
	ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 234	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ 13	. 

/ dan render	,
/s
	SortableContactDataProvider_my.iterator(long, long) line: 57	
		List<Contact> contactsFound = getContactsDB().getIndex(getSort());
		return filterContacts(contactsFound).
			subList((int)first, (int)(first + count)).
			iterator();
/cb
	DataViewBase$ModelIterator<T>.<init>(IDataProvider<T>, long, long) line: 107	
			this.dataProvider = dataProvider;
			max = count;

			items = count > 0 ? dataProvider.iterator(offset, count) : null;
/cb
	DataTable$DefaultDataGridView(DataViewBase<T>).getItemModels(long, long) line: 74	
		return new ModelIterator<T>(internalGetDataProvider(), offset, count);
/cb
	DataTable$DefaultDataGridView(AbstractPageableView<T>).getItemModels() line: 101	
		long offset = getFirstItemOffset();
		long size = getViewSize();

		Iterator<IModel<T>> models = getItemModels(offset, size);					<-
/cb
	DataTable$DefaultDataGridView(RefreshingView<T>).onPopulate() line: 93	
		Iterator<IModel<T>> models = getItemModels();										<-
		Iterator<Item<T>> items = getItemReuseStrategy().getItems(newItemFactory(), models,
			getItems());
		removeAll();
		addItems(items);
/cb
	DataTable$DefaultDataGridView(AbstractRepeater).onBeforeRender() line: 124	
		onPopulate();
/cb
	DataTable$DefaultDataGridView(AbstractPageableView<T>).onBeforeRender() line: 115	
	DataTable$DefaultDataGridView(Component).internalBeforeRender() line: 949	
	DataTable$DefaultDataGridView(Component).beforeRender() line: 1017	
	WebMarkupContainer(MarkupContainer).onBeforeRenderChildren() line: 1866	
	WebMarkupContainer(Component).onBeforeRender() line: 3877	
	WebMarkupContainer(Component).internalBeforeRender() line: 949	
	WebMarkupContainer(Component).beforeRender() line: 1017	
	DataTable<T,S>(MarkupContainer).onBeforeRenderChildren() line: 1866	
	DataTable<T,S>(Component).onBeforeRender() line: 3877	
	DataTable<T,S>(Component).internalBeforeRender() line: 949	
	DataTable<T,S>(Component).beforeRender() line: 1017	
	FilterForm<T>(MarkupContainer).onBeforeRenderChildren() line: 1866	
	FilterForm<T>(Component).onBeforeRender() line: 3877	
	FilterForm<T>(Form<T>).onBeforeRender() line: 1807	
	FilterForm<T>(Component).internalBeforeRender() line: 949	
	FilterForm<T>(Component).beforeRender() line: 1017	
	DataTableFilterToolbarPage_my(MarkupContainer).onBeforeRenderChildren() line: 1866	
	DataTableFilterToolbarPage_my(Component).onBeforeRender() line: 3877	
	DataTableFilterToolbarPage_my(Page).onBeforeRender() line: 801	
	DataTableFilterToolbarPage_my(Component).internalBeforeRender() line: 949	
	DataTableFilterToolbarPage_my(Component).beforeRender() line: 1017	
	DataTableFilterToolbarPage_my(Component).internalPrepareForRender(boolean) line: 2215	
	DataTableFilterToolbarPage_my(Page).internalPrepareForRender(boolean) line: 242	
	DataTableFilterToolbarPage_my(Component).render() line: 2304	
	DataTableFilterToolbarPage_my(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 97	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ 7	. 

/ De DetachableContactModel is de model van de row items	, 

/ 13	. 

/ we hebben	,  beide doen db queries	,

public class SortableContactDataProvider_my extends SortableDataProvider<Contact, String> implements IFilterStateLocator<ContactFilter_my>
	public Iterator<Contact> iterator(long first, long count)
	{
		List<Contact> contactsFound = getContactsDB().getIndex(getSort());
		
		return filterContacts(contactsFound).
			subList((int)first, (int)(first + count)).
			iterator();
	}

/ en 	,
public class DetachableContactModel extends LoadableDetachableModel<Contact>
	@Override
	protected Contact load()
	{
		// loads contact from the database
		return getContactsDB().get(id);

/ de 1ste wordt gedaan, om de DetachableContactModel's id te set	, 
/ de row item krijgt deze als model	,
/ als de label moeten render	, wordt 1 keer de 2de , load() called	, en de labels die elk een property model hebben met als target=DetachableContactModel	, kunnen render	,


/ 13	. 

/ stack	,
/s
	SortableContactDataProvider_my.iterator(long, long) line: 57	
		List<Contact> contactsFound = getContactsDB().getIndex(getSort());
		
		return filterContacts(contactsFound).
			subList((int)first, (int)(first + count)).								/ 8, en later wordt over iterate	,
			iterator();
/cb
	DataViewBase$ModelIterator<T>.<init>(IDataProvider<T>, long, long) line: 107	
			this.dataProvider = dataProvider;
			max = count;

			items = count > 0 ? dataProvider.iterator(offset, count) : null;
/cb
	DataTable$DefaultDataGridView(DataViewBase<T>).getItemModels(long, long) line: 74	
		return new ModelIterator<T>(internalGetDataProvider(), offset, count);
/cb
	DataTable$DefaultDataGridView(AbstractPageableView<T>).getItemModels() line: 101	
		long offset = getFirstItemOffset();
		long size = getViewSize();

		Iterator<IModel<T>> models = getItemModels(offset, size);
/cb
	DataTable$DefaultDataGridView(RefreshingView<T>).onPopulate() line: 93	
		Iterator<IModel<T>> models = getItemModels();											<-
		Iterator<Item<T>> items = getItemReuseStrategy().getItems(newItemFactory(), models,
			getItems());
		removeAll();
		addItems(items);																<- DetachableContactModel wordt model van de row items 
								/ en de labels, cells, krijgen een property model met target de DetachableContactModel van de row (item)	, 
/cb
	DataTable$DefaultDataGridView(AbstractRepeater).onBeforeRender() line: 124	
		onPopulate();
/cb
	DataTable$DefaultDataGridView(AbstractPageableView<T>).onBeforeRender() line: 115	
	DataTable$DefaultDataGridView(Component).internalBeforeRender() line: 949	
	DataTable$DefaultDataGridView(Component).beforeRender() line: 1017	
	WebMarkupContainer(MarkupContainer).onBeforeRenderChildren() line: 1866	
	WebMarkupContainer(Component).onBeforeRender() line: 3877	
	WebMarkupContainer(Component).internalBeforeRender() line: 949	
	WebMarkupContainer(Component).beforeRender() line: 1017	
	DataTable<T,S>(MarkupContainer).onBeforeRenderChildren() line: 1866	
	DataTable<T,S>(Component).onBeforeRender() line: 3877	
	DataTable<T,S>(Component).internalBeforeRender() line: 949	
	DataTable<T,S>(Component).beforeRender() line: 1017	
	FilterForm<T>(MarkupContainer).onBeforeRenderChildren() line: 1866	
	FilterForm<T>(Component).onBeforeRender() line: 3877	
	FilterForm<T>(Form<T>).onBeforeRender() line: 1807	
	FilterForm<T>(Component).internalBeforeRender() line: 949	
	FilterForm<T>(Component).beforeRender() line: 1017	
	DataTableFilterToolbarPage_my(MarkupContainer).onBeforeRenderChildren() line: 1866	
	DataTableFilterToolbarPage_my(Component).onBeforeRender() line: 3877	
	DataTableFilterToolbarPage_my(Page).onBeforeRender() line: 801	
	DataTableFilterToolbarPage_my(Component).internalBeforeRender() line: 949	
	DataTableFilterToolbarPage_my(Component).beforeRender() line: 1017	
	DataTableFilterToolbarPage_my(Component).internalPrepareForRender(boolean) line: 2215	
	DataTableFilterToolbarPage_my(Page).internalPrepareForRender(boolean) line: 242	
	DataTableFilterToolbarPage_my(Component).render() line: 2304	
	DataTableFilterToolbarPage_my(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/c
/stack 
/s
	SortableContactDataProvider_my.model(Contact) line: 137	
		return new DetachableContactModel(object);
/cb
	SortableContactDataProvider_my.model(Object) line: 36	
			index++;
			return dataProvider.model(items.next());
/cb
	DefaultItemReuseStrategy$1.next() line: 74	
/=
		return new Iterator<Item<T>>()
		{
			@Override
			public boolean hasNext()
			{
				return newModels.hasNext();
			}

			@Override
			public Item<T> next()
			{
				IModel<T> model = newModels.next();						<- DetachableContactModel	,
				Item<T> item = factory.newItem(index, model);
/cb
	DataTable$DefaultDataGridView(RefreshingView<T>).addItems(Iterator<Item<T>>) line: 189	
		while (items.hasNext())
		{
			Item<T> item = items.next();
/cb
	DataTable$DefaultDataGridView(RefreshingView<T>).onPopulate() line: 97	
		Iterator<IModel<T>> models = getItemModels();					/ iterator over de 8 Contacts	, maar nog geen DetachableContactModels created	,
		Iterator<Item<T>> items = getItemReuseStrategy().getItems(newItemFactory(), models,
			getItems());
		removeAll();
		addItems(items);					/ creates de 8 DetachableContactModels	, en sets ze als model van de row items,
/cb
	DataTable$DefaultDataGridView(AbstractRepeater).onBeforeRender() line: 124	
		onPopulate();
/ debug	,
/s
DefaultItemReuseStrategy$1.next() line: 74	
				IModel<T> model = newModels.next();				/ DetachableContactModel, created met database query	,	
/d
model	DetachableContactModel  (id=310)	
	id	47	
	state	LoadableDetachableModel$InternalState  (id=374)	
	transientModelObject	null	
				Item<T> item = factory.newItem(index, model); / create row item, set the DetachableContactModel model as model of the row item	, 
																/ and create repeatingview with cell items, with Labels, which have propertymodel 
													/ with target= DetachableContactModel and property uit column		,	
/jks
RefreshingView$1.newItem(int, IModel<T>) line: 112	
				String id = RefreshingView.this.newChildId();
1
				Item<T> item = RefreshingView.this.newItem(id, index, model);
/s
DataTable$DefaultDataGridView(AbstractDataGridView<T>).newItem(String, int, IModel<T>) line: 99	
		return newRowItem(id, index, model);
/t
RefreshingView$1.newItem(int, IModel<T>) line: 112	
				Item<T> item = RefreshingView.this.newItem(id, index, model);
/d
item	Item<T>  (id=383)	
	data	DetachableContactModel  (id=310)	
	id	"1" (id=177)	
				RefreshingView.this.populateItem(item);
/s
DataTable$DefaultDataGridView(AbstractDataGridView<T>).populateItem(Item<T>) line: 145	
		RepeatingView cells = new RepeatingView(CELL_REPEATER_ID);
		item.add(cells);

		int populatorsNumber = populators.size();
		for (int i = 0; i < populatorsNumber; i++)
		{
			ICellPopulator<T> populator = populators.get(i);
			IModel<ICellPopulator<T>> populatorModel = new Model<>(populator);
			Item<ICellPopulator<T>> cellItem = newCellItem(cells.newChildId(), i, populatorModel);
			cells.add(cellItem);

			populator.populateItem(cellItem, CELL_ITEM_ID, item.getModel());
/s
DataTableFilterToolbarPage_my$1(PropertyColumn<T,S>).populateItem(Item<ICellPopulator<T>>, String, IModel<T>) line: 97	
/=
	public void populateItem(final Item<ICellPopulator<T>> item, final String componentId, final IModel<T> rowModel)
	{
		item.add(new Label(componentId, getDataModel(rowModel)));								/ rowModel=DetachabelContactModel	,
/s
DataTableFilterToolbarPage_my$1(PropertyColumn<T,S>).getDataModel(IModel<T>) line: 118	
		PropertyModel<?> propertyModel = new PropertyModel<>(rowModel, propertyExpression);
		return propertyModel;


/c
/stack	
/s
	DetachableContactModel.load() line: 98	
		// loads contact from the database
		return getContactsDB().get(id);
/cb
	DetachableContactModel.load() line: 27	
	DetachableContactModel(LoadableDetachableModel<T>).getObject() line: 134	
		if (state == null || state == InternalState.DETACHED)					/ dus 1 keer	, per row	,
		{
			// prevent infinite attachment loops
			state = InternalState.ATTACHING;

			transientModelObject = load();
/cb
	PropertyModel<T>(AbstractPropertyModel<T>).getInnermostModelOrObject() line: 264	
		Object object = getTarget();
		while (object instanceof IModel)
		{
			Object tmp = ((IModel<?>)object).getObject();
/cb
	PropertyModel<T>(AbstractPropertyModel<T>).getObject() line: 83	
		final String expression = propertyExpression();
		...
		final Object target = getInnermostModelOrObject();
/cb
	Label(Component).getDefaultModelObject() line: 1626	
		final IModel<?> model = getDefaultModel();
				// Get model value for this component.
				return model.getObject();
/cb
	Label(Component).getDefaultModelObjectAsString() line: 1654	
		return getDefaultModelObjectAsString(getDefaultModelObject());
cb
	Label.onComponentTagBody(MarkupStream, ComponentTag) line: 115	
		replaceComponentTagBody(markupStream, openTag, getDefaultModelObjectAsString());
/cb
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
		component.onComponentTagBody(markupStream, openTag);
/cb
	Label(Component).internalRenderComponent() line: 2565	
				renderComponentTag(tag);
			markupStream.next();
			if (tag.isOpen())
			{
				getMarkupSourcingStrategy().onComponentTagBody(this, markupStream, tag);
/cb
	Label(WebComponent).onRender() line: 60	
	Label(Component).internalRender() line: 2380	
	Label(Component).render() line: 2308	
	Item<T>(MarkupContainer).renderNext(MarkupStream) line: 1524	
	Item<T>(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	Item<T>(MarkupContainer).renderComponentTagBody(MarkupStream, ComponentTag) line: 1734	
	Item<T>(MarkupContainer).onComponentTagBody(MarkupStream, ComponentTag) line: 1657	
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
	Item<T>(Component).internalRenderComponent() line: 2565	
	Item<T>(MarkupContainer).onRender() line: 1698	
	Item<T>(Component).internalRender() line: 2380	
	Item<T>(Component).render() line: 2308	
	RepeatingView(AbstractRepeater).renderChild(Component) line: 115	
	RepeatingView(AbstractRepeater).onRender() line: 102	
	RepeatingView(Component).internalRender() line: 2380	
	RepeatingView(Component).render() line: 2308	
	Item<T>(MarkupContainer).renderNext(MarkupStream) line: 1524	
	Item<T>(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	Item<T>(MarkupContainer).renderComponentTagBody(MarkupStream, ComponentTag) line: 1734	
	Item<T>(MarkupContainer).onComponentTagBody(MarkupStream, ComponentTag) line: 1657	
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
	Item<T>(Component).internalRenderComponent() line: 2565	
	Item<T>(MarkupContainer).onRender() line: 1698	
	Item<T>(Component).internalRender() line: 2380	
	Item<T>(Component).render() line: 2308	
	DataTable$DefaultDataGridView(AbstractRepeater).renderChild(Component) line: 115	
	DataTable$DefaultDataGridView(AbstractRepeater).onRender() line: 102	
	DataTable$DefaultDataGridView(Component).internalRender() line: 2380	
	DataTable$DefaultDataGridView(Component).render() line: 2308	
	WebMarkupContainer(MarkupContainer).renderNext(MarkupStream) line: 1524	
	WebMarkupContainer(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	WebMarkupContainer(MarkupContainer).renderComponentTagBody(MarkupStream, ComponentTag) line: 1734	
	WebMarkupContainer(MarkupContainer).onComponentTagBody(MarkupStream, ComponentTag) line: 1657	
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
	WebMarkupContainer(Component).internalRenderComponent() line: 2565	
	WebMarkupContainer(MarkupContainer).onRender() line: 1698	
	WebMarkupContainer(Component).internalRender() line: 2380	
	WebMarkupContainer(Component).render() line: 2308	
	DataTable<T,S>(MarkupContainer).renderNext(MarkupStream) line: 1524	
	DataTable<T,S>(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	DataTable<T,S>(MarkupContainer).renderComponentTagBody(MarkupStream, ComponentTag) line: 1734	
	DataTable<T,S>(MarkupContainer).renderAssociatedMarkup(String, String) line: 797	
	PanelMarkupSourcingStrategy(AssociatedMarkupSourcingStrategy).renderAssociatedMarkup(Component) line: 77	
	PanelMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 112	
	DataTable<T,S>(Component).internalRenderComponent() line: 2565	
	DataTable<T,S>(MarkupContainer).onRender() line: 1698	
	DataTable<T,S>(Component).internalRender() line: 2380	
	DataTable<T,S>(Component).render() line: 2308	
	FilterForm<T>(MarkupContainer).renderNext(MarkupStream) line: 1524	
	FilterForm<T>(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	FilterForm<T>(MarkupContainer).renderComponentTagBody(MarkupStream, ComponentTag) line: 1734	
	FilterForm<T>(MarkupContainer).onComponentTagBody(MarkupStream, ComponentTag) line: 1657	
	FilterForm<T>(Form<T>).onComponentTagBody(MarkupStream, ComponentTag) line: 1705	
	FilterForm<T>.onComponentTagBody(MarkupStream, ComponentTag) line: 86	
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
	FilterForm<T>(Component).internalRenderComponent() line: 2565	
	FilterForm<T>(MarkupContainer).onRender() line: 1698	
	FilterForm<T>(Component).internalRender() line: 2380	
	FilterForm<T>(Component).render() line: 2308	
	DataTableFilterToolbarPage_my(MarkupContainer).renderNext(MarkupStream) line: 1524	
	DataTableFilterToolbarPage_my(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	DataTableFilterToolbarPage_my(Page).onRender() line: 879	
	DataTableFilterToolbarPage_my(WebPage).onRender() line: 141	
	DataTableFilterToolbarPage_my(Component).internalRender() line: 2380	
	DataTableFilterToolbarPage_my(Component).render() line: 2308	
	DataTableFilterToolbarPage_my(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ 7	. 

/ provider's .getFilterState() wordt called
/ als je form submit, en de models van de text fields in de filterToolbar moeten geupdate	, de models zijn property models op de FilterState (die .getFilterState() geeft)	, en de column expression	,
/ de provider's .iterator en .size call de properties op de FilterState direct	, dus niet via .getFilterState()
/ als page render	, dan worden de text fields in de filterToolbar ook render	, en ook dan wordt getFilterState() called, want de FilterState is de target van de property model van deze text fields 

/ de post params worden eerst in de TextField.convertedInput set	, en bij update models in de models van de text fields in de toolbar	,

/ Einde DATATABLE

/ WICKETTESTER DATATABLE

/ 7	. 

/ in wicket-examples-step-by-step: DataTable2aPage_my	, met pattern van Michel	,

/ 7	 

/ proj wicket-examples-step-by-step
/ prog DataTableFilterToolbarPage_my2Test	,

/ 13	. 

/ we maken <init> die de provider inserts,	
public class DataTableFilterToolbarPage_my2 extends ExamplePage

{
	/**
	 * constructor
	 */
	public DataTableFilterToolbarPage_my2()
	{
		this(new SortableContactDataProvider_my());
	}
	
	public DataTableFilterToolbarPage_my2(ISortableDataProvider<Contact, String>dataProvider){
		...

/ 13	. 

/ we kunnen final SortableDataProvider.getSortState() niet mock	, 

/ we hebben SortableDataProvider_my create in src/main/java	, en daarvan extend	,

public class SortableContactDataProvider_my extends SortableDataProvider_my<Contact, String> implements IFilterStateLocator<ContactFilter_my>

/ Als we SortableDataProvider_my in src/test/java	, dan maven vindt hem niet	, 
/ TODO

/ 13	. 

@RunWith(MockitoJUnitRunner.class)
public class DataTableFilterToolbarPage_my2Test { 

/ 7	, 

/ geef in google: mock dao
http://stackoverflow.com/questions/28388204/how-to-test-dao-methods-using-mockito
http://stackoverflow.com/questions/32612052/mock-a-dao-class-and-a-method-within-it

/ geeft in google: mockito spy final method
/ lees	, 
http://stackoverflow.com/questions/11620103/mockito-trying-to-spy-on-method-is-calling-the-original-method

/ 7	. 	 

/ 



/ Einde WICKETTESTER DATATABLE

/ ECLIPSE MAVEN

/ 7	. 

/ In welke jar zit CompoundRequestMapper	?

[eric@localhost wicket]$ pwd
/home/eric/.m2/repository/org/apache/wicket
[eric@localhost wicket]$ find -name "*.jar"  | xargs -I % bash -c "echo %;jar tvf %| grep CompoundRequestM"
./wicket-ioc/1.4.23/wicket-ioc-1.4.23.jar
./wicket-datetime/1.4.23/wicket-datetime-1.4.23.jar
./wicket-datetime/7.2.0/wicket-datetime-7.2.0.jar
./wicket-core/7.2.0/wicket-core-7.2.0-sources.jar
./wicket-core/7.2.0/wicket-core-7.2.0.jar
./wicket-util/7.2.0/wicket-util-7.2.0.jar
./wicket-request/7.2.0/wicket-request-7.2.0.jar
  2150 Wed Jan 20 15:21:38 CET 2016 org/apache/wicket/request/mapper/CompoundRequestMapper$MapperWithScore.class
  5075 Wed Jan 20 15:21:38 CET 2016 org/apache/wicket/request/mapper/CompoundRequestMapper.class
   514 Wed Jan 20 15:21:38 CET 2016 org/apache/wicket/request/mapper/ICompoundRequestMapper.class
./wicket/1.4.23/wicket-1.4.23.jar
./wicket-extensions/1.4.23/wicket-extensions-1.4.23.jar
./wicket-extensions/7.2.0/wicket-extensions-7.2.0-sources.jar
./wicket-extensions/7.2.0/wicket-extensions-7.2.0.jar
./wicket-spring/1.4.23/wicket-spring-1.4.23.jar
./wicket-devutils/7.2.0/wicket-devutils-7.2.0.jar
./wicket-auth-roles/1.4.23/wicket-auth-roles-1.4.23.jar

/ van deze is er geen sources jar	,

/ we doen in eclipse een run config	, 
dependency:sources

[eric@localhost wicket]$ find -name "*.jar"  | xargs -I % bash -c "echo %;jar tvf %| grep CompoundRequestM"
./wicket-ioc/1.4.23/wicket-ioc-1.4.23.jar
./wicket-datetime/1.4.23/wicket-datetime-1.4.23.jar
./wicket-datetime/7.2.0/wicket-datetime-7.2.0.jar
./wicket-datetime/7.2.0/wicket-datetime-7.2.0-sources.jar
./wicket-core/7.2.0/wicket-core-7.2.0-sources.jar
./wicket-core/7.2.0/wicket-core-7.2.0.jar
./wicket-util/7.2.0/wicket-util-7.2.0.jar
./wicket-util/7.2.0/wicket-util-7.2.0-sources.jar
./wicket-request/7.2.0/wicket-request-7.2.0-sources.jar
  6643 Wed Jan 20 15:20:14 CET 2016 org/apache/wicket/request/mapper/CompoundRequestMapper.java
  1515 Wed Jan 20 15:20:14 CET 2016 org/apache/wicket/request/mapper/ICompoundRequestMapper.java
./wicket-request/7.2.0/wicket-request-7.2.0.jar
  2150 Wed Jan 20 15:21:38 CET 2016 org/apache/wicket/request/mapper/CompoundRequestMapper$MapperWithScore.class
  5075 Wed Jan 20 15:21:38 CET 2016 org/apache/wicket/request/mapper/CompoundRequestMapper.class
   514 Wed Jan 20 15:21:38 CET 2016 org/apache/wicket/request/mapper/ICompoundRequestMapper.class
./wicket/1.4.23/wicket-1.4.23.jar
./wicket-extensions/1.4.23/wicket-extensions-1.4.23.jar
./wicket-extensions/7.2.0/wicket-extensions-7.2.0-sources.jar
./wicket-extensions/7.2.0/wicket-extensions-7.2.0.jar
./wicket-spring/1.4.23/wicket-spring-1.4.23.jar
./wicket-devutils/7.2.0/wicket-devutils-7.2.0-sources.jar
./wicket-devutils/7.2.0/wicket-devutils-7.2.0.jar
./wicket-auth-roles/1.4.23/wicket-auth-roles-1.4.23.jar

/ Nu is source er wel	,




/ Einde ECLIPSE MAVEN

/ MODAL WINDOW

/ ws workspace-wicket7_7
/ proj wicket-examples-step-by-step
/ prog file:///home/eric/Devel/Java/Wicket/wicket-examples-step-by-step/src/main/java/org/apache/wicket/examples/ajax/builtin/modal/ModalWindowPage.java 

/ Geef in chrome	,
http://localhost:9090/wicket-examples-step-by-step/ajax/modal-window?0

/ we zien de AjaxApplication in parent dir file:///home/eric/Devel/Java/Wicket/wicket-examples-step-by-step/src/main/java/org/apache/wicket/examples/ajax/builtin 	, 
$ vi AjaxApplication.java
	protected void init()
		mountPage("modal-window", ModalWindowPage.class);

$ vi file:///home/eric/Devel/Java/Wicket/wicket-examples-step-by-step/src/main/webapp/WEB-INF/web.xml 

  <filter>
    <filter-name>AjaxApplication</filter-name>
    <filter-class>org.apache.wicket.protocol.http.WicketFilter</filter-class>
    <init-param>
      <param-name>applicationClassName</param-name>
      <param-value>org.apache.wicket.examples.ajax.builtin.AjaxApplication</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>AjaxApplication</filter-name>
    <url-pattern>/ajax/*</url-pattern>
    <dispatcher>REQUEST</dispatcher>
    <dispatcher>INCLUDE</dispatcher>
  </filter-mapping>

/ we zien in de manual Hfd 19	, 
https://ci.apache.org/projects/wicket/guide/7.x/guide/ajax.html

////////////////////////////////
/ we lezen dat een page in een modal window een <iframe> is	, een panel NIET	,




/ Einde MODAL WINDOW

/ AJAX BEHAVIORS

/ ws workspace-wicket7_7
/ proj wicket-examples-step-by-step
/ prog FrmPage, 

/ 7	. 

/ AJAXBEHAVIOR AJAXLINK
 
/ click ajax link	, 

/ de 1ste controller, ListenerInterfaceRequestHandler(IBehaviorListener) puts de Label component  in de 2de controller (AjaxRequestHandler)'s PartialPageUpdate

/ de url van de ajax link is ./frm?1-1.IBehaviorListener.0-ajaxLink	, want	,
<head>
	<script type="text/javascript">
/*<![CDATA[*/
		Wicket.Event.add(window, "domready", function(event) { 
			Wicket.Ajax.ajax({"u":"./frm?1-1.IBehaviorListener.0-ajaxLink","c":"ajaxLink5","e":"click"});;
			Wicket.Ajax.ajax({"u":"./frm?1-1.IBehaviorListener.0-form-ajx","m":"POST","c":"ajx7","f":"form6","sc":"ajx","e":"click","pd":true});;
			Wicket.Event.publish(Wicket.Event.Topic.AJAX_HANDLERS_BOUND);
		;});
/*]]>*/
	</script>
<a href="javascript:;" wicket:id="ajaxLink" id="ajaxLink5">ajax link</a>

/ eerst komen we in de onClick method 	,
RequestCycle.processRequest() line: 222	
			IRequestHandler handler = resolveRequestHandler();
handler	ListenerInterfaceRequestHandler  (id=12448)	
	listenerInterface	RequestListenerInterface  (id=12447)	
		listenerInterfaceClass	Class<T> (org.apache.wicket.behavior.IBehaviorListener) (id=10564)	
		method	Method  (id=12446)	
		name	"IBehaviorListener" (id=12455)	
public abstract void org.apache.wicket.behavior.IBehaviorListener.onRequest()
				execute(handler);
/s
RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 97	
			respond(handler);							
/s
AjaxLink$1(AbstractDefaultAjaxBehavior).onRequest() line: 593				/ listens (to itself)	, want calls eigen action	, onEvent (via respond)
		AjaxRequestTarget target = app.newAjaxRequestTarget(getComponent().getPage());
		requestCycle.scheduleRequestHandlerAfterCurrent(target);			/ 2de controller	, AjaxRequestHandler	,
		respond(target);
/s
AjaxLink$1(AjaxEventBehavior).respond(AjaxRequestTarget) line: 155	
		onEvent(target);
/s
AjaxLink$1.onEvent(AjaxRequestTarget) line: 84	
				onClick(target);
/s
FrmPage$2.onClick(AjaxRequestTarget) line: 42	
				result_="From AjaxLink";	
				target.add(result);							/ target is de 2de controller , die hierboven is scheduled	,

		AjaxLink<Void>ajaxLink=new AjaxLink<Void>("ajaxLink") {
			@Override
			public void onClick(AjaxRequestTarget target) {
				result_="From AjaxLink";	
				target.add(result);										<- Label result is (de enigste) component in de AjaxRequestHandler.PartialPageUpdate) waarover de 2de controller AjaxRequestHandler straks loops	, en in de XML writes ( returns XML ipv HTML)	,
			}
		};
/d
			execute(scheduled);
scheduled	AjaxRequestHandler  (id=12442)						<-		 2de controller wordt scheduled	,	
	update	AjaxRequestHandler$1  (id=12472)	
		markupIdToComponent	LinkedHashMap<K,V>  (id=12523)	
/s
AjaxRequestHandler.respond(IRequestCycle) line: 324	
		update.writeTo(bodyResponse, encoding);
/s
AjaxRequestHandler$1(PartialPageUpdate).writeTo(Response, String) line: 153	

			writeHeader(response, encoding);
<?xml version="1.0" encoding="UTF-8"?><ajax-response>

			// process added components
			writeComponents(response, encoding);
/s
AjaxRequestHandler$1(PartialPageUpdate).writeComponents(Response, String) line: 245	
		for (Map.Entry<String, Component> stringComponentEntry : markupIdToComponent.entrySet())
stringComponentEntry	LinkedHashMap$Entry<K,V>  (id=12548)	
	key	"result9" (id=12471)	
	value	Label  (id=12466)	
		{
			final Component component = stringComponentEntry.getValue();	<- deze component heeft de 1ste controller (in de AjaxLink.onClick method) add aan de deze controller's PartialPageUpdate	,
stringComponentEntry	LinkedHashMap$Entry<K,V>  (id=12548)	
	key	"result9" (id=12471)	
	value	Label  (id=12466)	

			if (!containsAncestorFor(component))
			{
				writeComponent(response, component.getAjaxRegionMarkupId(), component, encoding);
component.getAjaxRegionMarkupId()="result9"
component	Label  (id=12466)	
/s
AjaxRequestHandler$1(XmlPartialPageUpdate).writeComponent(Response, String, Component, String) line: 125	
		component.setOutputMarkupId(true);
				component.render();
/ TODO Afmaken

/ 7		.

/ THEORY AJAXBEHAVIOR

/ Een AjaxLink heeft een anonymous subclass van AjaxEventBehavior	,

public abstract class AjaxLink<T> extends AbstractLink implements IAjaxLink, IGenericComponent<T>
	@Override
	protected void onInitialize()
	{
		super.onInitialize();
		add(newAjaxEventBehavior("click"));
	}
	/**
	 * @param event
	 *            the name of the default event on which this link will listen to
	 * @return the ajax behavior which will be executed when the user clicks the link
	 */
	protected AjaxEventBehavior newAjaxEventBehavior(String event)
	{
		return new AjaxEventBehavior(event)
		{
			private static final long serialVersionUID = 1L;

			@Override
			protected void onEvent(AjaxRequestTarget target)
			{
				onClick(target);
			}

public abstract class AbstractAjaxBehavior extends Behavior implements IBehaviorListener
	/**
	 * Called immediately after the onConfigure method in a component. Since this is before the		
	 * rendering cycle has begun, the behavior can modify the configuration of the component (i.e.

	 * setVisible(false))							/ bijv een Label die een AjaxEventBehavior krijgt added	, 
													/ see https://ci.apache.org/projects/wicket/guide/7.x/guide/testing.html
	 * 
	 * @param component
	 *            the component being configured
	 */
	public void onConfigure(Component component)
	{
	}

	/**
	 * Called to notify the behavior about any events sent to the component
	 * 
	 * @see org.apache.wicket.IComponentAwareEventSink#onEvent(org.apache.wicket.Component,
	 *      org.apache.wicket.event.IEvent)
	 */
	@Override
	public void onEvent(Component component, IEvent<?> event)
	{
	}
	/**
	 * Called to notify that the component is being removed from its parent
	 * @param component
	 *      the removed component
	 */
	public void onRemove(Component component)
	{
	}

/ 13	. 

/ we zien	,
public abstract class AbstractAjaxBehavior extends Behavior implements IBehaviorListener
/ Hij luistert naar zichzelf	, 													onRequest (listens) -> repond -> onEvent (action	)
/i
public interface IBehaviorListener extends IRequestListener
{
	/** Behavior listener interface */
	public static final RequestListenerInterface INTERFACE = new RequestListenerInterface(
		IBehaviorListener.class);

	/**
	 * Called when a request to a behavior is received.
	 */
	void onRequest();														/ listens
}
/i
public abstract class Behavior
	public void onConfigure(Component component)							/ de actions	,
	public void onEvent(Component component, IEvent<?> event)
	public void onRemove(Component component)
/e 
public abstract class AbstractDefaultAjaxBehavior extends AbstractAjaxBehavior
	@Override
	public final void onRequest()															/ listens
	{
		WebApplication app = (WebApplication)getComponent().getApplication();
		AjaxRequestTarget target = app.newAjaxRequestTarget(getComponent().getPage());

		RequestCycle requestCycle = RequestCycle.get();
		requestCycle.scheduleRequestHandlerAfterCurrent(target);

		respond(target);
	}
/e
public abstract class AjaxEventBehavior extends AbstractDefaultAjaxBehavior
	/**
	 * 
	 * @see org.apache.wicket.ajax.AbstractDefaultAjaxBehavior#respond(AjaxRequestTarget)
	 */
	@Override
	protected final void respond(final AjaxRequestTarget target)
	{
		onEvent(target);
	}

/ Einde AJAXBEHAVIOR AJAXLINK

/ MODALWINDOW AJAXBEHAVIOR

/ 7	. 

/ ws workspace-wicket7_7 
/ proj wicket-examples-step-by-step
/ prog file:///home/eric/Devel/Java/Wicket/wicket-examples-step-by-step/src/main/java/org/apache/wicket/examples/ajax/builtin/modal/ModalWindowPage.java 

/ 7	. 

/ XMLS MODALWINDOW

/ Eerst de XMLs	,

/ Als we een link click	, zie we altijd eerst een XML, en daarna nog een XML of een HTML, afhankelijk of er een page wordt load, of er een ajax call was gedaan	, 
/ behalve als we een modal window met een panel load 	TODO

/ 13	. 

/ click link 'Show modal dialog with a page'

/ we zien XML en HTML	, de XML is van de modal window, de HTML van de page
/ de js van de close window link (x) is in XML	, want deze link is op de modal window	,
/ de js van de 3 links op de page zijn in de HTML, 	want deze is de page	, 

/ 1313	. Eerst XML	, het modal window	,

Request URL:http://localhost:9090/wicket-examples-step-by-step/ajax/modal-window?2-1.IBehaviorListener.0-showModal1&_=1484659245040
Request Method:GET
Query String Parameters
2-1.IBehaviorListener.0-showModal1:
_:1484659245040

<?xml version="1.0" encoding="UTF-8"?>
<ajax-response>
	<priority-evaluate><![CDATA[
		clientTimeVariable = new Date().getTime();
	]]></priority-evaluate>
	<component id="modal1e" ><![CDATA[
		<div wicket:id="modal1" id="modal1e" wicketpath="modal1" style="display:none">
			<wicket:panel xmlns:wicket="http://wicket.apache.org">
				<div wicket:id="content" id="contentf" wicketpath="modal1_content">
				</div>
			</wicket:panel>
		</div>
	]]></component>
	<header-contribution><![CDATA[
		<head xmlns:wicket="http://wicket.apache.org">
			<script type="text/javascript" src="./wicket/resource/org.apache.wicket.resource.JQueryResourceReference/jquery/jquery-2.2.0-ver-1484236344000.js"></script>
			<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-event-jquery-ver-1484236344000.js"></script>
			<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-ajax-jquery-ver-1484236344000.js"></script>
			<script type="text/javascript" src="./wicket/resource/org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow/res/modal-ver-1484236344000.js"></script>
			<link rel="stylesheet" type="text/css" href="./wicket/resource/org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow/res/modal-ver-1484236344000.css" />
			<script type="text/javascript" id="wicket-ajax-base-url">
				/*<![CDATA[*/
				Wicket.Ajax.baseUrl="modal-window?2";
				/*]]]]><![CDATA[>*/
			</script>
		</head>
		]]></header-contribution>
	<evaluate><![CDATA[
	(function(){
		var settings = new Object();
		settings.minWidth=200;
		settings.minHeight=200;
		settings.className="w_blue";
		settings.width=600;
		settings.height=400;
		settings.resizable=true;
		settings.src="./wicket/page?11";
		settings.cookieId="modal-1";
		settings.mask="semi-transparent";
		settings.autoSize=false;
		settings.unloadConfirmation=true;
->		settings.onClose = function() { Wicket.Ajax.ajax({"u":"./modal-window?2-1.IBehaviorListener.1-modal1","c":"modal1e"}); };
->		settings.onCloseButton = function() { Wicket.Ajax.ajax({"u":"./modal-window?2-1.IBehaviorListener.0-modal1","c":"modal1e"});;return false;};
		window.setTimeout(function(){
  			Wicket.Window.create(settings).show();
		}, 0);
	})();
	]]></evaluate>
	<evaluate><![CDATA[
		window.defaultStatus='Server parsetime: 16.002s, Client parsetime: ' + (new Date().getTime() - clientTimeVariable)/1000 +  's';
	]]></evaluate>
</ajax-response>


/ 1313	. En dan de HTML	, de page	,

Request URL:http://localhost:9090/wicket-examples-step-by-step/ajax/wicket/page?11						/ TODO
Request Method:GET
Query String Parameters
11:

	<script type="text/javascript" >/*<![CDATA[*/
Wicket.Event.add(window, "domready", function(event) { 
	Wicket.Ajax.ajax({"u":"./page?11-1.IBehaviorListener.0-closeOK","c":"closeOK42","e":"click"});;						<-
	Wicket.Ajax.ajax({"u":"./page?11-1.IBehaviorListener.0-closeCancel","c":"closeCancel43","e":"click"});;				<-
	Wicket.Ajax.ajax({"u":"./page?11-1.IBehaviorListener.0-open","c":"open45","e":"click"});;							<-
;});

	<body>
		Modal WINDOW content.
		<p>
			<a wicket:id="closeOK" id="closeOK42" wicketpath="closeOK" href="javascript:;">Close this window with result "OK"</a><br/>
			<a wicket:id="closeCancel" id="closeCancel43" wicketpath="closeCancel" href="javascript:;">Close this window with result "Cancel"</a><br/>
		</p>
		<p>
			<a wicket:id="open" id="open45" wicketpath="open" href="javascript:;">Open another modal dialog</a>			

/ We zien de 3 links	, 


/ 13	. 

/ we click de link 'Close this window with result "OK"' 

/ 1313	. XML

Request URL:http://localhost:9090/wicket-examples-step-by-step/ajax/wicket/page?11-1.IBehaviorListener.0-closeOK&_=1484668203606
Request Method:GET
Query String Parameters
11-1.IBehaviorListener.0-closeOK:
_:1484668203606

<?xml version="1.0" encoding="UTF-8"?><ajax-response><priority-evaluate><![CDATA[clientTimeVariable = new Date().getTime();]]></priority-evaluate><evaluate><![CDATA[(function(){var win;
try {
	win = window.parent.Wicket.Window;
} catch (ignore) {
}
if (typeof(win) == "undefined" || typeof(win.current) == "undefined") {
  try {
     win = window.Wicket.Window;
  } catch (ignore) {
  }
}
if (win && win.current) {
 var close = function(w) { w.setTimeout(function() {
		win.current.close();
	}, 0);  };
	try { close(window.parent); } catch (ignore) { close(window); }
}})();]]></evaluate><evaluate><![CDATA[window.defaultStatus='Server parsetime: 91.935s, Client parsetime: ' + (new Date().getTime() - clientTimeVariable)/1000 +  's';]]></evaluate></ajax-response>

/ 1313	. XML van de ajax 	,

Request URL:http://localhost:9090/wicket-examples-step-by-step/ajax/modal-window?2-1.IBehaviorListener.1-modal1&_=1484659245041
Request Method:GET

<?xml version="1.0" encoding="UTF-8"?>
<ajax-response>
	<priority-evaluate>
		<![CDATA[clientTimeVariable = new Date().getTime();]]></priority-evaluate>
	<component id="resultd" >
		<![CDATA[<span wicket:id="result" id="resultd" wicketpath="result">Modal window 1 - close link OK</span>]]></component>
	<evaluate><![CDATA[window.defaultStatus='Server parsetime: 87.183s, Client parsetime: ' + (new Date().getTime() - clientTimeVariable)/1000 +  's';]]></evaluate>
</ajax-response>

/ 13	. 

/ click close window (x)

Request URL:http://localhost:9090/wicket-examples-step-by-step/ajax/modal-window?12-1.IBehaviorListener.0-modal1&_=1484723322362
Request Method:GET
Query String Parameters
12-1.IBehaviorListener.0-modal1:
_:1484723322362

<?xml version="1.0" encoding="UTF-8"?>
<ajax-response>
	<priority-evaluate><![CDATA[clientTimeVariable = new Date().getTime();]]></priority-evaluate>
	<evaluate><![CDATA[(function(){var win;
try {
	win = window.parent.Wicket.Window;
} catch (ignore) {
}
if (typeof(win) == "undefined" || typeof(win.current) == "undefined") {
  try {
     win = window.Wicket.Window;
  } catch (ignore) {
  }
}
if (win && win.current) {
 var close = function(w) { w.setTimeout(function() {
		win.current.close();
	}, 0);  };
	try { close(window.parent); } catch (ignore) { close(window); }
}})();]]></evaluate>
	<evaluate><![CDATA[window.defaultStatus='Server parsetime: 0.012s, Client parsetime: ' + (new Date().getTime() - clientTimeVariable)/1000 +  's';]]></evaluate>
</ajax-response>

/ 1313	. 

Request URL:http://localhost:9090/wicket-examples-step-by-step/ajax/modal-window?12-1.IBehaviorListener.1-modal1&_=1484723322363
Request Method:GET

<?xml version="1.0" encoding="UTF-8"?>
<ajax-response>
	<priority-evaluate><![CDATA[clientTimeVariable = new Date().getTime();]]></priority-evaluate>
	<component id="result4a" ><![CDATA[<span wicket:id="result" id="result4a" wicketpath="result">Modal window 1 - close button</span>]]></component>
	<evaluate><![CDATA[window.defaultStatus='Server parsetime: 0.003s, Client parsetime: ' + (new Date().getTime() - clientTimeVariable)/1000 +  's';]]></evaluate>
</ajax-response>

/ 13	. 

/ click 'Show modal dialog with panel'

/ we zien maar 1 XML	, 

Request URL:http://localhost:9090/wicket-examples-step-by-step/ajax/modal-window?12-1.IBehaviorListener.0-showModal2&_=1484723322367
Request Method:GET

<?xml version="1.0" encoding="UTF-8"?>
<ajax-response>
	<priority-evaluate><![CDATA[clientTimeVariable = new Date().getTime();]]></priority-evaluate>
	<component id="modal24d" >
		<![CDATA[<div wicket:id="modal2" id="modal24d" wicketpath="modal2" style="display:none">
			<wicket:panel xmlns:wicket="http://wicket.apache.org">
				<div wicket:id="content" id="content4e" wicketpath="modal2_content">
					<wicket:panel xmlns:wicket="http://wicket.apache.org">
	<div style="margin: 1em">
		This is panel content! 
		<p>
			Date text field to demonstrate AJAX header contribution <span wicket:id="dateTimeField" wicketpath="modal2_content_dateTimeField">
						<wicket:panel xmlns:wicket="http://wicket.apache.org">
  <span style="white-space: nowrap;">
    <input type="text" wicket:id="date" size="12" value="" name="modal2:content:dateTimeField:date" id="date55" wicketpath="modal2_content_dateTimeField_date"/>
<span class="yui-skin-sam">&nbsp;<span style="display:none;position:absolute;z-index: 99999;" id="date55Dp"></span><img style="cursor: pointer; border: none;" id="date55Icon" src="./wicket/resource/org.apache.wicket.extensions.yui.calendar.DatePicker/icon1-ver-1484236346000.gif" alt="" title=""/></span>
  	<input type="text" wicket:id="hours" size="2" maxlength="2" value="" name="modal2:content:dateTimeField:hours" wicketpath="modal2_content_dateTimeField_hours"/>
   	<span wicket:id="hoursSeparator" wicketpath="modal2_content_dateTimeField_hoursSeparator">&#160;:</span>
    <input type="text" wicket:id="minutes" size="2" maxlength="2" value="" name="modal2:content:dateTimeField:minutes" wicketpath="modal2_content_dateTimeField_minutes"/>
    <select wicket:id="amOrPmChoice" name="modal2:content:dateTimeField:amOrPmChoice" wicketpath="modal2_content_dateTimeField_amOrPmChoice">
<option selected="selected" value="0">AM</option>
<option value="1">PM</option>
</select>
  </span>
						</wicket:panel></span>
		</p>
	</div>
					</wicket:panel></div>
			</wicket:panel></div>]]>
	</component>
	<header-contribution>
		<![CDATA[<head xmlns:wicket="http://wicket.apache.org"><script type="text/javascript" src="./wicket/resource/org.apache.wicket.extensions.yui.YuiLib/yuiloader/yuiloader-ver-1484236346000.js"></script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.resource.JQueryResourceReference/jquery/jquery-2.2.0-ver-1484236344000.js"></script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-event-jquery-ver-1484236344000.js"></script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-ajax-jquery-ver-1484236344000.js"></script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow/res/modal-ver-1484236344000.js"></script>
<link rel="stylesheet" type="text/css" href="./wicket/resource/org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow/res/modal-ver-1484236344000.css" />
<script type="text/javascript" id="wicket-ajax-base-url">
/*<![CDATA[*/
Wicket.Ajax.baseUrl="modal-window?12";
/*]]]]><![CDATA[>*/
</script>
</head>]]>
	</header-contribution>
	<priority-evaluate><![CDATA[
		(function(){var e = Wicket.$('date55Dp'); if (e != null && typeof(e.parentNode) != 'undefined' && typeof(e.parentNode.parentNode != 'undefined')) {e.parentNode.parentNode.removeChild(e.parentNode);YAHOO.wicket.date55DpJs.destroy(); delete YAHOO.wicket.date55DpJs;}})();
	]]></priority-evaluate>
	<evaluate><![CDATA[
		...
		(function(){var element = document.getElementById("content4e");
var settings = new Object();
settings.minWidth=200;
settings.minHeight=200;
settings.className="w_blue";
settings.width=600;
settings.height=400;
settings.resizable=true;
settings.element=element;
settings.cookieId="modal-2";
settings.title="This is modal window with panel content.";
settings.mask="semi-transparent";
settings.autoSize=false;
settings.unloadConfirmation=true;
settings.onClose = function() { Wicket.Ajax.ajax({"u":"./modal-window?12-1.IBehaviorListener.1-modal2","c":"modal24d"}); };
settings.onCloseButton = function() { Wicket.Ajax.ajax({"u":"./modal-window?12-1.IBehaviorListener.0-modal2","c":"modal24d"});;return false;};
window.setTimeout(function(){
  Wicket.Window.create(settings).show();
}, 0);
})();
]]></evaluate>
	<evaluate><![CDATA[window.defaultStatus='Server parsetime: 0.021s, Client parsetime: ' + (new Date().getTime() - clientTimeVariable)/1000 +  's';]]></evaluate></ajax-response>

/ 13	. 

/ als je modal window close (x)	, dan weer 2 XMLs	,

/ Einde XMLS MODALWINDOW

/ COMPLETE ROUNDTRIP CREATE MODALWINDOW	WITH PAGE

/ click  'Show modal dialog with a page' 

/ BROWSER
/s
elemData.handle (jquery-2.2.0-ve…344000.js:4544)
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;	/ elem=a#showModal148 = 'Show modal dialog with a page'	, arguments[0]=MouseEvent	,
/s
jQuery.event.dispatch (jquery-2.2.0-ve…344000.js:4732)
						handleObj.handler ).apply( matched.elem, args );
/s
(anonymous function) (wicket-ajax-jqu…344000.js:1957)
Wicket.Ajax.
			ajax: function(attrs) {
attrs: Object
	c: "showModal148"
	e: Array[1]
		0: "click"
		length: 1
		__proto__: Array[0]
	u: "./modal-window?12-1.IBehaviorListener.0-showModal1"

				jQuery.each(attrs.e, function (idx, evt) {
					Wicket.Event.add(attrs.c, evt, function (jqEvent, data) {
						var call = new Wicket.Ajax.Call();								<-
/c
/stack
Wicket.Ajax.Call.doAjax (wicket-ajax-jqu…6344000.js:667)
			var jqXHR = jQuery.ajax({

(anonymous function) (wicket-ajax-jqu…6344000.js:563)
proxy (jquery-2.2.0-ve…6344000.js:492)
Wicket.Channel.schedule (wicket-ajax-jqu…6344000.js:298)
Wicket.ChannelManager.schedule (wicket-ajax-jqu…6344000.js:358)
Wicket.Ajax.Call.ajax (wicket-ajax-jqu…6344000.js:562)
(anonymous function) (wicket-ajax-jqu…344000.js:1977)
jQuery.event.dispatch (jquery-2.2.0-ve…344000.js:4732)
elemData.handle (jquery-2.2.0-ve…344000.js:4544)

/c
/ SERVER

/s
/ stack	,
	ModalWindow.show(IPartialPageRequestHandler) line: 370	
			getContent().setVisible(true);
			target.add(this);
			target.appendJavaScript(getWindowOpenJavaScript());
/cb
	ModalWindowPage$4.onClick(AjaxRequestTarget) line: 82	
				modal1.show(target);
/cb
	AjaxLink$1.onEvent(AjaxRequestTarget) line: 84	
				onClick(target);												/ dit is nog specifieker wat de AjaxEventBehavior in AjaxLink doet	,
/cb
	AjaxLink$1(AjaxEventBehavior).respond(AjaxRequestTarget) line: 155	
		onEvent(target);														/ dit is wat een AjaxEventBehavior doet	,
/cb
	AjaxLink$1(AbstractDefaultAjaxBehavior).onRequest() line: 593	
		WebApplication app = (WebApplication)getComponent().getApplication();
		AjaxRequestTarget target = app.newAjaxRequestTarget(getComponent().getPage());	/ AjaxRequestHandler	, de 2de controller	,

		RequestCycle requestCycle = RequestCycle.get();
		requestCycle.scheduleRequestHandlerAfterCurrent(target);

		respond(target);
/cb
	RequestListenerInterface.internalInvoke(Component, Object) line: 258	
			method.invoke(target);											/ target	AjaxLink$1  (id=9476)= AjaxEventBehavior	,	
/cb
	RequestListenerInterface.invoke(IRequestableComponent, Behavior) line: 241	
		internalInvoke(component, behavior);
/cb
	ListenerInterfaceRequestHandler.invokeListener() line: 248	
				Behavior behavior = getComponent().getBehaviorById(behaviorId);	/ behavior	AjaxLink$1  (id=9476)	
				listenerInterface.invoke(getComponent(), behavior);
this	ListenerInterfaceRequestHandler  (id=9425)	
	pageComponentProvider	PageAndComponentProvider  (id=9430)	
		component	ModalWindowPage$4  (id=9447)				/ AjaxLink op original page	,
/cb
	ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 234	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ debug	,
/s
	ModalWindow.getWindowOpenJavaScript() line: 1097	
		buffer.append("var settings = new Object();\n");

		appendAssignment(buffer, "settings.minWidth", getMinimalWidth());
		appendAssignment(buffer, "settings.minHeight", getMinimalHeight());
		appendAssignment(buffer, "settings.className", getCssClassName());
		appendAssignment(buffer, "settings.width", getInitialWidth());
		if ((isUseInitialHeight() == true) || (isCustomComponent() == false))
		{
			appendAssignment(buffer, "settings.height", getInitialHeight());
		appendAssignment(buffer, "settings.resizable", isResizable());
		if (isResizable() == false)
/n
		if (isCustomComponent() == false)
			Page page = createPage();
			CharSequence pageUrl;

			else
			{
				IRequestHandler handler = new RenderPageRequestHandler(new PageProvider(page));
				pageUrl = requestCycle.urlFor(handler);
./wicket/page?32																					/ TODO
			appendAssignment(buffer, "settings.src", pageUrl);

		if (getCookieName() != null)
		{
			appendAssignment(buffer, "settings.cookieId", getCookieName());

		else if (getMaskType() == MaskType.SEMI_TRANSPARENT)
		{
			buffer.append("settings.mask=\"semi-transparent\";\n");

		appendAssignment(buffer, "settings.autoSize", autoSize);

		appendAssignment(buffer, "settings.unloadConfirmation", showUnloadConfirmation());

		// in case user is interested in window close callback or we have a pagemap to clean attach
		// notification request
		if (windowClosedCallback != null)
		{
			WindowClosedBehavior behavior = getBehaviors(WindowClosedBehavior.class).get(0);
behavior	ModalWindow$WindowClosedBehavior  (id=9541)	
			buffer.append("settings.onClose = function() { ");
			buffer.append(behavior.getCallbackScript());
/s
ModalWindow$WindowClosedBehavior(AbstractDefaultAjaxBehavior).getCallbackScript(Component) line: 465	
		CharSequence ajaxAttributes = renderAjaxAttributes(component);
component	ModalWindow  (id=9456)	
/s
	/**
	 * <pre>
	 * 				{
	 * 					u: 'editable-label?6-1.IBehaviorListener.0-text1-label',  // url
	 * 					m: 'POST',          // method name. Default: 'GET'
	 * 					c: 'label7',        // component id (String) or window for page
	 * 					e: 'click',         // event name
	 * 					sh: [],             // list of success handlers
	 * 					fh: [],             // list of failure handlers
	 * 					pre: [],            // list of preconditions. If empty set default : Wicket.$(settings{c}) !== null
	 * 					ep: {},             // extra parameters
	 * 					async: true|false,  // asynchronous XHR or not
	 * 					ch: 'someName|d',   // AjaxChannel
	 * 					i: 'indicatorId',   // indicator component id
	 * 					ad: true,           // allow default
	 * 				}
	 * @return the attributes as string in JSON format
	 */
ModalWindow$WindowClosedBehavior(AbstractDefaultAjaxBehavior).renderAjaxAttributes(Component) line: 184	
		AjaxRequestAttributes attributes = getAttributes();
/ TODO
		return renderAjaxAttributes(component, attributes);
/s
ModalWindow$WindowClosedBehavior(AbstractDefaultAjaxBehavior).renderAjaxAttributes(Component, AjaxRequestAttributes) line: 201	
			attributesJson.put(AjaxAttributeName.URL.jsonName(), getCallbackUrl());
/s
ModalWindow$WindowClosedBehavior(AbstractAjaxBehavior).getCallbackUrl() line: 88	
this	ModalWindow$WindowClosedBehavior  (id=9541)	
	component	ModalWindow  (id=9456)	

		rli = IBehaviorListener.INTERFACE;

		return getComponent().urlFor(this, rli, new PageParameters());
/s
ModalWindow(Component).urlFor(Behavior, RequestListenerInterface, PageParameters) line: 3347	
		int id = getBehaviorId(behaviour);
/s
ModalWindow(Component).getBehaviorId(Behavior) line: 4547	
		return new Behaviors(this).getBehaviorId(behavior);
/s
Behaviors.getBehaviorId(Behavior) line: 255	

this	Behaviors  (id=9595)	
	component	ModalWindow  (id=9456)	
		data	Object[4]  (id=9508)	
			[0]	MetaDataEntry<T>  (id=9596)	
			[1]	ModalWindow$CloseButtonBehavior  (id=9597)	
			[2]	Behaviors$BehaviorIdList  (id=9598)	
				[0]	ModalWindow$CloseButtonBehavior  (id=9597)	
				[1]	ModalWindow$WindowClosedBehavior  (id=9541)	
			[3]	ModalWindow$WindowClosedBehavior  (id=9541)	

		for (int i = component.data_start(); i < component.data_length(); i++)
		{
			if (behavior == component.data_get(i))
/j
i=3
			{
				found = true;
				break;

		ArrayList<Behavior> ids = getBehaviorsIdList(true);
		int id = ids.indexOf(behavior);
1
/t
ModalWindow(Component).urlFor(Behavior, RequestListenerInterface, PageParameters) line: 3348	
		int id = getBehaviorId(behaviour);
/d
		IRequestHandler handler = createRequestHandler(listener, parameters, id);
		return getRequestCycle().urlFor(handler);											/ TODO
/s
SystemMapper(CompoundRequestMapper).mapHandler(IRequestHandler) line: 214	
		for (IRequestMapper mapper : mappers)
		{
			Url url = mapper.mapHandler(handler);
mapper=MountedMapper [mountSegments=modal-window]
url=modal-window?28-2.IBehaviorListener.1-modal1
/t
ModalWindow$WindowClosedBehavior(AbstractDefaultAjaxBehavior).renderAjaxAttributes(Component, AjaxRequestAttributes) line: 202	
			attributesJson.put(AjaxAttributeName.URL.jsonName(), getCallbackUrl());
/d
			if (component instanceof Page == false)
			{
				String componentId = component.getMarkupId();
				attributesJson.put(AjaxAttributeName.MARKUP_ID.jsonName(), componentId);

attributesJson	JSONObject  (id=9578)	
{"u":"./modal-window?28-2.IBehaviorListener.1-modal1","c":"modal19b"}

		String attributesAsJson = attributesJson.toString();
		return attributesAsJson;
/t
ModalWindow$WindowClosedBehavior(AbstractDefaultAjaxBehavior).getCallbackScript(Component) line: 466	
		CharSequence ajaxAttributes = renderAjaxAttributes(component);
/d
		return "Wicket.Ajax.ajax(" + ajaxAttributes + ");";
/t
ModalWindow.getWindowOpenJavaScript() line: 1111	
			buffer.append(behavior.getCallbackScript());
/d
		// in case we didn't set windowclosecallback, we need at least callback on close button, to
		// close window property (thus cleaning the shown flag)
		if ((closeButtonCallback != null) || (haveCloseCallback == false))
		{
			CloseButtonBehavior behavior = getBehaviors(CloseButtonBehavior.class).get(0);
			buffer.append("settings.onCloseButton = function() { ");
			buffer.append(behavior.getCallbackScript());
			buffer.append(";return false;};\n");
		}

		buffer.append(getShowJavaScript());
		return buffer.toString();
/ buffer=
var settings = new Object();
settings.minWidth=200;
settings.minHeight=200;
settings.className="w_blue";
settings.width=600;
settings.height=400;
settings.resizable=true;
settings.src="./wicket/page?32";										/ TODO	, = page in modal window	, 
settings.cookieId="modal-1";
settings.mask="semi-transparent";
settings.autoSize=false;
settings.unloadConfirmation=true;
settings.onClose = function() { Wicket.Ajax.ajax({"u":"./modal-window?28-2.IBehaviorListener.1-modal1","c":"modal19b"}); };
settings.onCloseButton = function() { Wicket.Ajax.ajax({"u":"./modal-window?28-2.IBehaviorListener.0-modal1","c":"modal19b"});;return false;};
window.setTimeout(function(){
  Wicket.Window.create(settings).show();
}, 0);
/t
ModalWindow.show(IPartialPageRequestHandler) line: 371	
			target.appendJavaScript(getWindowOpenJavaScript());
/d

 
/ stack	,
	ModalWindow.show(IPartialPageRequestHandler) line: 366	
		if (shown == false)
		{
			getContent().setVisible(true);
			target.add(this);									/ target	AjaxRequestHandler  (id=10225)	
this	ModalWindow  (id=10232)	
			target.appendJavaScript(getWindowOpenJavaScript());
/=
var settings = new Object();
settings.minWidth=200;
settings.minHeight=200;
settings.className="w_blue";
settings.width=600;
settings.height=400;
settings.resizable=true;
settings.src="./wicket/page?26";
settings.cookieId="modal-1";
settings.mask="semi-transparent";
settings.autoSize=false;
settings.unloadConfirmation=true;
settings.onClose = function() { Wicket.Ajax.ajax({"u":"./modal-window?12-1.IBehaviorListener.1-modal1","c":"modal14b"}); };
settings.onCloseButton = function() { Wicket.Ajax.ajax({"u":"./modal-window?12-1.IBehaviorListener.0-modal1","c":"modal14b"});;return false;};
window.setTimeout(function(){
  Wicket.Window.create(settings).show();
}, 0);

			shown = true;
/cb
	ModalWindowPage$4.onClick(AjaxRequestTarget) line: 82	
/=
		add(new AjaxLink<Void>("showModal1")
		{
			@Override
			public void onClick(AjaxRequestTarget target)
			{
				modal1.show(target);
/cb
	AjaxLink$1.onEvent(AjaxRequestTarget) line: 84	
/=
		return new AjaxEventBehavior(event)
		{
			@Override
			protected void onEvent(AjaxRequestTarget target)
			{
				onClick(target);
/cb
	AjaxLink$1(AjaxEventBehavior).respond(AjaxRequestTarget) line: 155		<- Hier onderscheiden de behaviors zich: 
																				/ elk heeft eigen .respond	,  dwz action	,
		onEvent(target);

	AjaxLink$1(AbstractDefaultAjaxBehavior).onRequest() line: 593			< Dit , listen naar zichzelf	, doen ze allemaal	,	
		WebApplication app = (WebApplication)getComponent().getApplication();
		AjaxRequestTarget target = app.newAjaxRequestTarget(getComponent().getPage());

		RequestCycle requestCycle = RequestCycle.get();
		requestCycle.scheduleRequestHandlerAfterCurrent(target);

		respond(target);
/cb
	RequestListenerInterface.internalInvoke(Component, Object) line: 258	
	RequestListenerInterface.invoke(IRequestableComponent, Behavior) line: 241	
	ListenerInterfaceRequestHandler.invokeListener() line: 248	
				Behavior behavior = getComponent().getBehaviorById(behaviorId);	/ behavior	AjaxLink$1  (id=10226)	= 'n AjaxEventBehavior	,
				listenerInterface.invoke(getComponent(), behavior);
/cb
	ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 234	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
			respond(handler);															<- nu
			execute(scheduled);															<- later	,
/cb
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/c
/ debug 2de controller	,
/s
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 97	
			execute(scheduled);
/s
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
			respond(handler);
/s
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
				handler.respond(RequestCycle.this);
/s
	AjaxRequestHandler.respond(IRequestCycle) line: 358	
		update.writeTo(bodyResponse, encoding);
/s
	AjaxRequestHandler$1(PartialPageUpdate).writeTo(Response, String) line: 158	
			writeHeader(response, encoding);

<?xml version="1.0" encoding="UTF-8"?><ajax-response>

			...
			// process added components
			writeComponents(response, encoding);
/s
	AjaxRequestHandler$1(PartialPageUpdate).writeComponents(Response, String) line: 245	
				writeComponent(response, component.getAjaxRegionMarkupId(), component, encoding);
/s
	AjaxRequestHandler$1(XmlPartialPageUpdate).writeComponent(Response, String, Component, String) line: 101	
		component.setOutputMarkupId(true);
...
		response.write("<component id=\"");
		response.write(markupId);
		response.write("\" ><![CDATA[");
		response.write(encode(bodyBuffer.getContents()));
		response.write("]]></component>");

<?xml version="1.0" encoding="UTF-8"?><ajax-response><component id="modal14b" ><![CDATA[<div wicket:id="modal1" id="modal14b" wicketpath="modal1" style="display:none"><wicket:panel xmlns:wicket="http://wicket.apache.org">
	<div wicket:id="content" id="content4c" wicketpath="modal1_content">
	</div>
</wicket:panel></div>]]></component>

/t
AjaxRequestHandler$1(PartialPageUpdate).writeComponents(Response, String) line: 269	
				writeComponent(response, component.getAjaxRegionMarkupId(), component, encoding);
/d
			// write the XML tags and we're done
			writeHeaderContribution(response);

<?xml version="1.0" encoding="UTF-8"?><ajax-response><component id="modal14b" ><![CDATA[<div wicket:id="modal1" id="modal14b" wicketpath="modal1" style="display:none"><wicket:panel xmlns:wicket="http://wicket.apache.org">
	<div wicket:id="content" id="content4c" wicketpath="modal1_content">
	</div>
</wicket:panel></div>]]></component><header-contribution><![CDATA[<head xmlns:wicket="http://wicket.apache.org"><script type="text/javascript" src="./wicket/resource/org.apache.wicket.resource.JQueryResourceReference/jquery/jquery-2.2.0-ver-1484236344000.js"></script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-event-jquery-ver-1484236344000.js"></script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-ajax-jquery-ver-1484236344000.js"></script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow/res/modal-ver-1484236344000.js"></script>
<link rel="stylesheet" type="text/css" href="./wicket/resource/org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow/res/modal-ver-1484236344000.css" />
<script type="text/javascript" id="wicket-ajax-base-url">
/*<![CDATA[*/
Wicket.Ajax.baseUrl="modal-window?12";
/*]]]]><![CDATA[>*/
</script>
</head>]]></header-contribution>

			writeNormalEvaluations(response, evaluationScripts);

<?xml version="1.0" encoding="UTF-8"?><ajax-response><component id="modal19b" ><![CDATA[<div wicket:id="modal1" id="modal19b" wicketpath="modal1" style="display:none"><wicket:panel xmlns:wicket="http://wicket.apache.org">
	<div wicket:id="content" id="content9c" wicketpath="modal1_content">
	</div>
</wicket:panel></div>]]></component><header-contribution><![CDATA[<head xmlns:wicket="http://wicket.apache.org"><script type="text/javascript" src="./wicket/resource/org.apache.wicket.resource.JQueryResourceReference/jquery/jquery-2.2.0-ver-1484236344000.js"></script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-event-jquery-ver-1484236344000.js"></script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-ajax-jquery-ver-1484236344000.js"></script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow/res/modal-ver-1484236344000.js"></script>
<link rel="stylesheet" type="text/css" href="./wicket/resource/org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow/res/modal-ver-1484236344000.css" />
<script type="text/javascript" id="wicket-ajax-base-url">
/*<![CDATA[*/
Wicket.Ajax.baseUrl="modal-window?28";
/*]]]]><![CDATA[>*/
</script>
</head>]]></header-contribution><evaluate><![CDATA[(function(){var settings = new Object();
settings.minWidth=200;
settings.minHeight=200;
settings.className="w_blue";
settings.width=600;
settings.height=400;
settings.resizable=true;
settings.src="./wicket/page?29";
settings.cookieId="modal-1";
settings.mask="semi-transparent";
settings.autoSize=false;
settings.unloadConfirmation=true;
settings.onClose = function() { Wicket.Ajax.ajax({"u":"./modal-window?28-1.IBehaviorListener.1-modal1","c":"modal19b"}); };
settings.onCloseButton = function() { Wicket.Ajax.ajax({"u":"./modal-window?28-1.IBehaviorListener.0-modal1","c":"modal19b"});;return false;};
window.setTimeout(function(){
  Wicket.Window.create(settings).show();
}, 0);
})();]]></evaluate>

			writeFooter(response, encoding);

<?xml version="1.0" encoding="UTF-8"?><ajax-response><component id="modal19b" ><![CDATA[<div wicket:id="modal1" id="modal19b" wicketpath="modal1" style="display:none"><wicket:panel xmlns:wicket="http://wicket.apache.org">
	<div wicket:id="content" id="content9c" wicketpath="modal1_content">
	</div>
</wicket:panel></div>]]></component><header-contribution><![CDATA[<head xmlns:wicket="http://wicket.apache.org"><script type="text/javascript" src="./wicket/resource/org.apache.wicket.resource.JQueryResourceReference/jquery/jquery-2.2.0-ver-1484236344000.js"></script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-event-jquery-ver-1484236344000.js"></script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-ajax-jquery-ver-1484236344000.js"></script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow/res/modal-ver-1484236344000.js"></script>
<link rel="stylesheet" type="text/css" href="./wicket/resource/org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow/res/modal-ver-1484236344000.css" />
<script type="text/javascript" id="wicket-ajax-base-url">
/*<![CDATA[*/
Wicket.Ajax.baseUrl="modal-window?28";
/*]]]]><![CDATA[>*/
</script>
</head>]]></header-contribution><evaluate><![CDATA[(function(){var settings = new Object();
settings.minWidth=200;
settings.minHeight=200;
settings.className="w_blue";
settings.width=600;
settings.height=400;
settings.resizable=true;
settings.src="./wicket/page?29";
settings.cookieId="modal-1";
settings.mask="semi-transparent";
settings.autoSize=false;
settings.unloadConfirmation=true;
settings.onClose = function() { Wicket.Ajax.ajax({"u":"./modal-window?28-1.IBehaviorListener.1-modal1","c":"modal19b"}); };
settings.onCloseButton = function() { Wicket.Ajax.ajax({"u":"./modal-window?28-1.IBehaviorListener.0-modal1","c":"modal19b"});;return false;};
window.setTimeout(function(){
  Wicket.Window.create(settings).show();
}, 0);
})();]]></evaluate></ajax-response>


/c
/ BROWSER

/ we zien	, 

Request URL:http://localhost:9090/wicket-examples-step-by-step/ajax/modal-window?28-1.IBehaviorListener.0-showModal1&_=1484749794733
Request Method:GET

<?xml version="1.0" encoding="UTF-8"?><ajax-response><priority-evaluate><![CDATA[clientTimeVariable = new Date().getTime();]]></priority-evaluate><component id="modal19b" ><![CDATA[<div wicket:id="modal1" id="modal19b" wicketpath="modal1" style="display:none"><wicket:panel xmlns:wicket="http://wicket.apache.org">
	<div wicket:id="content" id="content9c" wicketpath="modal1_content">
	</div>
</wicket:panel></div>]]></component><header-contribution><![CDATA[<head xmlns:wicket="http://wicket.apache.org"><script type="text/javascript" src="./wicket/resource/org.apache.wicket.resource.JQueryResourceReference/jquery/jquery-2.2.0-ver-1484236344000.js"></script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-event-jquery-ver-1484236344000.js"></script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-ajax-jquery-ver-1484236344000.js"></script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow/res/modal-ver-1484236344000.js"></script>
<link rel="stylesheet" type="text/css" href="./wicket/resource/org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow/res/modal-ver-1484236344000.css" />
<script type="text/javascript" id="wicket-ajax-base-url">
/*<![CDATA[*/
Wicket.Ajax.baseUrl="modal-window?28";
/*]]]]><![CDATA[>*/
</script>
</head>]]></header-contribution><evaluate><![CDATA[(function(){var settings = new Object();
settings.minWidth=200;
settings.minHeight=200;
settings.className="w_blue";
settings.width=600;
settings.height=400;
settings.resizable=true;
settings.src="./wicket/page?29";
settings.cookieId="modal-1";
settings.mask="semi-transparent";
settings.autoSize=false;
settings.unloadConfirmation=true;
settings.onClose = function() { Wicket.Ajax.ajax({"u":"./modal-window?28-1.IBehaviorListener.1-modal1","c":"modal19b"}); };
settings.onCloseButton = function() { Wicket.Ajax.ajax({"u":"./modal-window?28-1.IBehaviorListener.0-modal1","c":"modal19b"});;return false;};
window.setTimeout(function(){
  Wicket.Window.create(settings).show();
}, 0);
})();]]></evaluate><evaluate><![CDATA[window.defaultStatus='Server parsetime: 94.804s, Client parsetime: ' + (new Date().getTime() - clientTimeVariable)/1000 +  's';]]></evaluate></ajax-response>

/ Er is nog een <evaluate> bijgekomen 	, onderin	, 
/ TODO

/s
/ stack
Wicket.Ajax.Call.doAjax.jQuery.ajax.success (wicket-ajax-jqu…6344000.js:704)
						self.processAjaxResponse(data, textStatus, jqXHR, context);
/cb
jQuery.Callbacks.fire (jquery-2.2.0-ve…344000.js:3182)
jQuery.Callbacks.self.fireWith (jquery-2.2.0-ve…344000.js:3312)
done (jquery-2.2.0-ve…344000.js:8754)
			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
/cb 			
jQuery.ajaxTransport.send.callback (jquery-2.2.0-ve…344000.js:9120)
							} else {
								complete(
xhr.responseText=XML hierboven	,
/ debug	, 
/s
Wicket.Ajax.Call.processAjaxResponse (wicket-ajax-jqu…6344000.js:766)
					// invoke the loaded callback with an xml document
					return this.loadedCallback(data, context);
/s
Wicket.Ajax.Call.loadedCallback (wicket-ajax-jqu…344000.js:1036)
				var root = envelope.getElementsByTagName("ajax-response")[0];
...
/ TODO
/t
done (jquery-2.2.0-ve…344000.js:8769)
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
/d
			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );
/s
/stack
Wicket.Ajax.Call.processEvaluation.evaluate (wicket-ajax-jqu…344000.js:1204)
						eval(script);
/cb
FunctionsExecuter.processNext.run (wicket-ajax-jqu…6344000.js:157)
						var n = jQuery.proxy(this.notify, this);
						return f(n);
/cb
jQuery.extend.proxy.proxy (jquery-2.2.0-ve…6344000.js:492)
FunctionsExecuter.processNext (wicket-ajax-jqu…6344000.js:172)
				} else {
					var retValue = run();
/cb
FunctionsExecuter.start (wicket-ajax-jqu…6344000.js:184)
			var retValue = FunctionsExecuter.DONE;
			while (retValue === FunctionsExecuter.DONE) {
				retValue = this.processNext();
/cb
Wicket.Ajax.Call.doAjax.jQuery.ajax.complete (wicket-ajax-jqu…6344000.js:729)
					context.steps.push(jQuery.proxy(function (notify) {
						if (attrs.i && context.isRedirecting !== true) {
							Wicket.DOM.hideIncrementally(attrs.i);
						}

						self._executeHandlers(attrs.coh, attrs, jqXHR, textStatus);
						we.publish(topic.AJAX_CALL_COMPLETE, attrs, jqXHR, textStatus);

						self.done(attrs);
						return FunctionsExecuter.DONE;
					}, self));

					var executer = new FunctionsExecuter(context.steps); 	/ context.steps zijn 14 fcts	, 	/ TODO
					executer.start();
/cb
jQuery.Callbacks.fire (jquery-2.2.0-ve…344000.js:3182)
jQuery.Callbacks.self.fireWith (jquery-2.2.0-ve…344000.js:3312)
done (jquery-2.2.0-ve…344000.js:8769)
jQuery.ajaxTransport.send.callback (jquery-2.2.0-ve…344000.js:9120)
/ debug	, 
/s
FunctionsExecuter.processNext.run (wicket-ajax-jqu…6344000.js:157)
						var n = jQuery.proxy(this.notify, this);			/ volgende	,
						return f(n);
/s
(anonymous function) (wicket-ajax-jqu…344000.js:1152)
/=
Wicket.Ajax.Call.prototype.processComponent
				} else {
					var text = Wicket.DOM.text(node);

					// replace the component
					Wicket.DOM.replace(element, text);
text=
"<div wicket:id="modal1" id="modal19b" wicketpath="modal1" style="display:none"><wicket:panel xmlns:wicket="http://wicket.apache.org">
	<div wicket:id="content" id="content9c" wicketpath="modal1_content">
	</div>
</wicket:panel></div>"

/c
FunctionsExecuter.processNext.run (wicket-ajax-jqu…6344000.js:157)				/ volgende	,
						var n = jQuery.proxy(this.notify, this);
						return f(n);
/s
Wicket.Ajax.Call.processEvaluation.evaluate (wicket-ajax-jqu…344000.js:1204)
			var evaluate = function (script) {
				return function(notify) {										/ closure	,
					// just evaluate the javascript
					try {
						// do the evaluation
						eval(script);								<-
script=
"(function(){
	var settings = new Object();
	settings.minWidth=200;
	settings.minHeight=200;
	settings.className="w_blue";
	settings.width=600;
	settings.height=400;
	settings.resizable=true;
	settings.src="./wicket/page?22";
	settings.cookieId="modal-1";
	settings.mask="semi-transparent";
	settings.autoSize=false;
	settings.unloadConfirmation=true;
	settings.onClose = function() { Wicket.Ajax.ajax({"u":"./modal-window?12-1.IBehaviorListener.1-modal1","c":"modal14b"}); };
	settings.onCloseButton = function() { Wicket.Ajax.ajax({"u":"./modal-window?12-1.IBehaviorListener.0-modal1","c":"modal14b"});;return false;};
	window.setTimeout(function(){
  		Wicket.Window.create(settings).show();				<-
	}, 0);
})();"



/s
(anonymous function) (VM4940:16)
(function(){
	var settings = new Object();
	settings.minWidth=200;
	settings.minHeight=200;
	settings.className="w_blue";
	settings.width=600;
	settings.height=400;
	settings.resizable=true;
	settings.src="./wicket/page?22";
	settings.cookieId="modal-1";
	settings.mask="semi-transparent";
	settings.autoSize=false;
	settings.unloadConfirmation=true;
	settings.onClose = function() { Wicket.Ajax.ajax({"u":"./modal-window?12-1.IBehaviorListener.1-modal1","c":"modal14b"}); };
	settings.onCloseButton = function() { Wicket.Ajax.ajax({"u":"./modal-window?12-1.IBehaviorListener.0-modal1","c":"modal14b"});;return false;};
	window.setTimeout(function(){
  		Wicket.Window.create(settings).show();				<-
	}, 0);
})();
/s
Wicket.Window.create (modal-ver-1484236344000.js:210)
settings: Object
	autoSize: false
	className: "w_blue"
	cookieId: "modal-1"
	height: 400
	mask: "semi-transparent"
	minHeight: 200
	minWidth: 200
	onClose: function () { Wicket.Ajax.ajax({"u":"./modal-window?12-1.IBehaviorListener.1-modal1","c":"modal14b"}); }
	onCloseButton: function () { Wicket.Ajax.ajax({"u":"./modal-window?12-1.IBehaviorListener.0-modal1","c":"modal14b"});;return false;}
	resizable: true
	src: "./wicket/page?22"
	unloadConfirmation: true
	width: 600

				Win = window.parent.Wicket.Window;
		return new Win(settings);

/ intermezzo

	Wicket.Window = Wicket.Class.create();
/ di.
	Wicket.Window=function(){
		this.initialize.apply(this,arguments);
	}

/ Einde intermezzo

/s
(anonymous function) (wicket-ajax-jqu…6344000.js:228)
/=
	Wicket.Class = {
		create: function () {
			return function () {
				this.initialize.apply(this, arguments);			<-
/s
Wicket.Window.initialize (modal-ver-1484236344000.js:277)
			this.settings = Wicket.Object.extend({
				minWidth: 200,  /* valid only if resizable */
				...														/ defaults
				unloadConfirmation : true /* Display confirmation dialog if the user is about to leave a page (IE and FF) */

			}, settings || { });
settings: Object
	autoSize: false
	className: "w_blue"
	cookieId: "modal-1"
	height: 400
	mask: "semi-transparent"
	minHeight: 200
	minWidth: 200
	onClose: function () { Wicket.Ajax.ajax({"u":"./modal-window?12-1.IBehaviorListener.1-modal1","c":"modal14b"}); }
	onCloseButton: function () { Wicket.Ajax.ajax({"u":"./modal-window?12-1.IBehaviorListener.0-modal1","c":"modal14b"});;return false;}
	resizable: true
	src: "./wicket/page?22"						<- iframe
	unloadConfirmation: true
	width: 600

/t
window.setTimeout(function(){
  Wicket.Window.create(settings).show();
}, 0);
/pd
/s
Wicket.Window.show (modal-ver-1484236344000.js:645)
			// create the DOM elements
			this.createDOM();
/s
Wicket.Window.createDOM (modal-ver-1484236344000.js:347)
			var idWindow = this.newId();
			var idClassElement = this.newId();
			var idCaption = this.newId();
			var idFrame = this.newId();
			var idTop = this.newId();
			var idTopLeft = this.newId();
			var idTopRight = this.newId();
			var idLeft = this.newId();
			var idRight = this.newId();
			var idBottomLeft = this.newId();
			var idBottomRight = this.newId();
			var idBottom = this.newId();
			var idCaptionText = this.newId();
idBottom: "_wicket_window_154"
idBottomLeft: "_wicket_window_152"
idBottomRight: "_wicket_window_153"
idCaption: "_wicket_window_145"
idCaptionText: "_wicket_window_155"
idClassElement: "_wicket_window_144"
idFrame: "_wicket_window_146"
idLeft: "_wicket_window_150"
idRight: "_wicket_window_151"
idTop: "_wicket_window_147"
idTopLeft: "_wicket_window_148"
idTopRight: "_wicket_window_149"
idWindow: "_wicket_window_143"

			var markup = Wicket.Window.getMarkup(idWindow, idClassElement, idCaption, idFrame,
					idTop, idTopLeft, idTopRight, idLeft, idRight, idBottomLeft, idBottomRight,
					idBottom, idCaptionText, this.isIframe());
/s
Wicket.Window.isIframe (modal-ver-1484236344000.js:326)
			return this.settings.src != null;
/t
/s
Wicket.Window.getMarkup (modal-ver-14842…344000.js:1166)
		var s =
"<div class=\"wicket-modal\" id=\""+idWindow+"\" role=\"dialog\" aria-labelledBy=\""+idCaptionText+"\" style=\"top: 10px; left: 10px; width: 100px;\">
	<form style='background-color:transparent;padding:0px;margin:0px;border-width:0px;position:static'>"+
		"<div id=\""+idClassElement+"\">"+
			"<div class=\"w_top_1\">"+
				"<div class=\"w_topLeft\" id=\""+idTopLeft+"\">"+"</div>"+
				"<div class=\"w_topRight\" id=\""+idTopRight+"\">"+ "</div>"+
				"<div class=\"w_top\" id='"+idTop+"'>"+ "</div>"+
			"</div>"+
			"<div class=\"w_left\" id='"+idLeft+"'>"+
				"<div class=\"w_right_1\">"+
					"<div class=\"w_right\" id='"+idRight+"'>"+
						"<div class=\"w_content_1\" onmousedown=\"Wicket.Event.stop(event);\">"+
							"<div class=\"w_caption\"  id=\""+idCaption+"\">"+
								"<a class=\"w_close\" style=\"z-index:1\" href=\"#\"></a>"+
								"<h3 id=\""+idCaptionText+"\" class=\"w_captionText\"></h3>"+
							"</div>"+
							"<div class=\"w_content_2\">"+
								"<div class=\"w_content_3\">"+
			                           "<div class=\"w_content\">";
					if (isFrame) {
						s+= 				"<iframe frameborder=\"0\" id=\""+idContent+"\" allowtransparency=\"false\" style=\"height: 200px\" class=\"wicket_modal\"></iframe>";
					} else {
						s+= 				"<div id='"+idContent+"' class='w_content_container'></div>";
					}
						s+=
										"</div>"+
								"</div>"+
							"</div>"+
						"</div>"+
					"</div>"+
				"</div>"+
			"</div>"+
			"<div class=\"w_bottom_1\" id=\""+idBottom+"_1\">"+
				"<div class=\"w_bottomRight\"  id=\""+idBottomRight+"\">"+ "</div>"+
				"<div class=\"w_bottomLeft\" id=\""+idBottomLeft+"\">"+ "</div>"+
				"<div class=\"w_bottom\" id=\""+idBottom+"\">"+ "</div>"+
			"</div>"+
		"</div>"+
	"</form>
</div>";

/ Deze markup verschijnt op een gegeven moment in de DOM	, eerst was hij er niet	,		/ TODO

			return s;
/t
Wicket.Window.createDOM (modal-ver-1484236344000.js:351)
			var markup = Wicket.Window.getMarkup(idWindow, idClassElement, idCaption, idFrame,
					idTop, idTopLeft, idTopRight, idLeft, idRight, idBottomLeft, idBottomRight,
					idBottom, idCaptionText, this.isIframe());
/d
			var element = document.createElement("div");
			element.id = idWindow;
			document.body.appendChild(element);
			Wicket.DOM.replace(element, markup);
/s
jQuery.extend.DOM.replace (wicket-ajax-jqu…344000.js:1772)
				} else {
					// jQuery 1.9+ expects '<' as the very first character in text
					var cleanedText = jQuery.trim(text);

					var $newElement = jQuery(cleanedText);
					jQuery(element).replaceWith($newElement);
/t
Wicket.Window.createDOM (modal-ver-1484236344000.js:351)
			Wicket.DOM.replace(element, markup);
/d
			this.window = _(idWindow);
			this.classElement = _(idClassElement);
			this.caption = _(idCaption);
			this.content = _(idFrame);
			this.top = _(idTop);
			this.topLeft = _(idTopLeft);
			this.topRight = _(idTopRight);
			this.left = _(idLeft);
			this.right = _(idRight);
			this.bottomLeft = _(idBottomLeft);
			this.bottomRight = _(idBottomRight);
			this.bottom = _(idBottom);
			this.captionText = _(idCaptionText);
/t
Wicket.Window.show (modal-ver-1484236344000.js:648)
			this.createDOM();
/d
			// set the class of window (blue or silver by default)
			this.classElement.className = this.settings.className;
w_blue
			// is it an iframe window?
			if (this.isIframe()) {
				// load the file
				this.load();
/s
Wicket.Window.load (modal-ver-1484236344000.js:617)

			if (!this.settings.title) {
				this.update = window.setInterval(Wicket.bind(this.updateTitle, this), 100);

			} else {
				this.content.contentWindow.name = this.settings.iframeName;
null
			try
			{
				this.content.contentWindow.location.replace(this.settings.src);
this.settings.src="./wicket/page?32"									/ Als we this.content.contentWindow.location bekijken, zien we niets	, TODO

this: Object
	content; iframe#_wicket_window_0
		contentWindow: Window
			location: Location

/ TODO : Hoe werkt dit?	 / TODO LOAD PAGE IN MODAL WINDOW LOCATION 

/ we zien  in devtools	,
Request URL:http://localhost:9090/wicket-examples-step-by-step/ajax/wicket/page?32


/s
/ SERVER
RequestCycle.processRequest() line: 220	
			IRequestHandler handler = resolveRequestHandler();
handler	RenderPageRequestHandler  (id=10385)	
				execute(handler);

/ we zien	, 

Request URL:http://localhost:9090/wicket-examples-step-by-step/ajax/wicket/page?30
Request Method:GET

<html xmlns:wicket="http://wicket.apache.org">			/ de hele page	,
	<head>
		...	

/c
/s
Wicket.Event.add(window, "domready", function(event) { 
	Wicket.Ajax.ajax({"u":"./page?18-1.IBehaviorListener.0-closeOK","c":"closeOK6e","e":"click"});;			<-		/ Doet ook Wicket.Event.add
	Wicket.Ajax.ajax({"u":"./page?18-1.IBehaviorListener.0-closeCancel","c":"closeCancel6f","e":"click"});;
	Wicket.Ajax.ajax({"u":"./page?18-1.IBehaviorListener.0-open","c":"open71","e":"click"});;

/ we vallen 3 keer in Wicket.Ajax.ajax	,
/s
				jQuery.each(attrs.e, function (idx, evt) {
					Wicket.Event.add(attrs.c, evt, function (jqEvent, data) {	/ deze fcts worden client-side controller of link closeOK6e resp closeCancel6f	, resp open71	,
/s
Wicket.Event.add
					jQuery(el).on(type, selector, data, fn);

/ Einde COMPLETE ROUNDTRIP CREATE MODALWINDOW WITH PAGE	

/ COMPLETE ROUNDTRIP CLOSE MODALWINDOW	

/ we click op close modal window (x)

/ BROWSER
/s
settings.onCloseButton = function() { Wicket.Ajax.ajax({"u":"./modal-window?12-1.IBehaviorListener.0-modal1","c":"modal14b"});;return false;};
/s
jQuery.extend.Ajax.ajax (wicket-ajax-jqu…344000.js:1948)

				attrs.c = attrs.c || window;
				attrs.e = attrs.e || [ 'domready' ];		<- er staat geen e: in {...} hierboven	,
attrs: Object
	c: "modal14b"
	e: Array[1]
		0: "domready"													<-
	u: "./modal-window?12-1.IBehaviorListener.0-modal1"

/ intermezzo

/ modal1 is de wicket:id van het ModalWindow zelf	,
/ modal14b is de bijhorende id	, maar het modal window _wicket_window_143	, is een andere div	, 
/ TODO

/ op de page zelf zien we #modal1 (vlak boven de link) 	,  maar het iframe komt in #_wicket_window_143
/ TODO

/ Dit is nu de HTML	,

<div wicket:id="modal1" id="modal14b" wicketpath="modal1" style="display:none"><wicket:panel xmlns:wicket="http://wicket.apache.org">
	<div wicket:id="content" id="content4c" wicketpath="modal1_content">
	</div>
</wicket:panel></div>

<div class="wicket-modal" id="_wicket_window_143" role="dialog" aria-labelledby="This is modal window" style="top: 272px; left: 506px; width: 600px; position: absolute; visibility: visible;">
	<form style="background-color:transparent;padding:0px;margin:0px;border-width:0px;position:static">
		<div id="_wicket_window_144" class="w_blue">
			<div class="w_top_1">
				<div class="w_topLeft" id="_wicket_window_148"></div>
				<div class="w_topRight" id="_wicket_window_149"></div>
				<div class="w_top" id="_wicket_window_147"></div>
			</div>
			<div class="w_left" id="_wicket_window_150">
				<div class="w_right_1">
					<div class="w_right" id="_wicket_window_151">
						<div class="w_content_1" onmousedown="Wicket.Event.stop(event);">
							<div class="w_caption" id="_wicket_window_145">
								<a class="w_close" style="z-index:1" href="#"></a>								<- x link (close )
								<h3 id="_wicket_window_155" class="w_captionText">This is modal window</h3>
							</div>
							<div class="w_content_2">
								<div class="w_content_3">
									<div class="w_content">
										<iframe frameborder="0" id="_wicket_window_146" allowtransparency="false" style="height: 400px;" class="wicket_modal">
											#document
												<html ...>
													<head>
													...
													</head>
													...
										</iframe>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
			<div class="w_bottom_1" id="_wicket_window_154_1">
				<div class="w_bottomRight" id="_wicket_window_153"></div>
				<div class="w_bottomLeft" id="_wicket_window_152"></div>
			<div class="w_bottom" id="_wicket_window_154"></div>
		</div>
	</div>
</form>
</div>

/ Einde intermezzo

				jQuery.each(attrs.e, function (idx, evt) {
					Wicket.Event.add(attrs.c, evt, function (jqEvent, data) {	/ register deze controller op modal14b	,
/s
			/**
			 * Binds an event listener for an element
			 *
			 * Also supports the special 'domready' event on window.
			 * 'domready' is event fired when the DOM is complete, but
			 * before loading external resources (images, scripts, ...)
			 *
jQuery.extend.Event.add (wicket-event-jq…6344000.js:206)
				if (type === 'domready') {
/ JA
					jQuery(fn);		
fn=
				jQuery.each(attrs.e, function (idx, evt) {
					Wicket.Event.add(attrs.c, evt, function (jqEvent, data) {
						var call = new Wicket.Ajax.Call();
						else {
							call.ajax(attributes);
attributes.u="./modal-window?28-1.IBehaviorListener.0-modal1"	, de url , 
						}
/ en	,
				} else {
/ NIET
					jQuery(el).on(type, selector, data, fn);

/ Dus hij gaat de ajax call doen	,

/ SERVER
/s
/ stack	,
public class ModalWindowPage extends BasePage
		modal1.setCloseButtonCallback(new ModalWindow.CloseButtonCallback()
		{
			@Override
			public boolean onCloseButtonClicked(AjaxRequestTarget target)
			{
				setResult("Modal window 1 - close button");
/cb 
	ModalWindow$CloseButtonBehavior.respond(AjaxRequestTarget) line: 987	
/=
public class ModalWindow extends Panel
	protected class CloseButtonBehavior extends AbstractDefaultAjaxBehavior
	{
		@Override
		protected final void respond(final AjaxRequestTarget target)
		{
			if ((closeButtonCallback == null) ||
				(closeButtonCallback.onCloseButtonClicked(target)))						<- nu
			{
				close(target);															<- debug hierna	, 
/cb
	ModalWindow$CloseButtonBehavior(AbstractDefaultAjaxBehavior).onRequest() line: 593	
		WebApplication app = (WebApplication)getComponent().getApplication();
		AjaxRequestTarget target = app.newAjaxRequestTarget(getComponent().getPage());	/ voor de XML die moet worden send	,

		RequestCycle requestCycle = RequestCycle.get();
		requestCycle.scheduleRequestHandlerAfterCurrent(target);

		respond(target);
/cb
	RequestListenerInterface.internalInvoke(Component, Object) line: 258	
			method.invoke(target);
target	ModalWindow$CloseButtonBehavior  (id=10028)	
/cb
	RequestListenerInterface.invoke(IRequestableComponent, Behavior) line: 241	
	ListenerInterfaceRequestHandler.invokeListener() line: 248	
this	ListenerInterfaceRequestHandler  (id=10030)	
	behaviorId	Integer  (id=10049)		0
	listenerInterface	RequestListenerInterface  (id=10000)	
		component	ModalWindow  (id=10051)	
			data	Object[4]  (id=10061)	
				[0]	MetaDataEntry<T>  (id=10064)	
				[1]	ModalWindow$CloseButtonBehavior  (id=10028)	
				[2]	Behaviors$BehaviorIdList  (id=10065)	
				[3]	ModalWindow$WindowClosedBehavior  (id=10066)	

				Behavior behavior = getComponent().getBehaviorById(behaviorId); / TODO
behavior	ModalWindow$CloseButtonBehavior  (id=10028)	
				listenerInterface.invoke(getComponent(), behavior);
/cb
	ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 234	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/ debug	, 
/t
ModalWindow.close(IPartialPageRequestHandler) line: 396	
		getContent().setVisible(false);
/s
WebMarkupContainer(Component).setVisible(boolean) line: 3222	
this=[WebMarkupContainer [Component id = content]]
		if (isCustomComponent())
/ NEE
		{
			target.add(getContent());
/ NIET
		}
		target.appendJavaScript(getCloseJavacript());
/s
ModalWindow.getCloseJavacriptInternal() line: 418	
		return "var win;\n" //
			+ "try {\n" + "	win = window.parent.Wicket.Window;\n"
			+ "} catch (ignore) {\n"
			+ "}\n"
			+ "if (typeof(win) == \"undefined\" || typeof(win.current) == \"undefined\") {\n"
			+ "  try {\n" + "     win = window.Wicket.Window;\n"
			+ "  } catch (ignore) {\n"
			+ "  }\n"
			+ "}\n"
			+ "if (win && win.current) {\n"
			+ " var close = function(w) { w.setTimeout(function() {\n"
			+ "		win.current.close();\n"
			+ "	}, 0);  };\n"
			+ "	try { close(window.parent); } catch (ignore) { close(window); }\n" + "}";
/t
ModalWindow.close(IPartialPageRequestHandler) line: 396	
		target.appendJavaScript(getCloseJavacript());
/d
		shown = false;
	}
/c

/ we zien in devtools	,

Request URL:http://localhost:9090/wicket-examples-step-by-step/ajax/modal-window?12-1.IBehaviorListener.0-modal1&_=1484723322395
Request Method:GET

<?xml version="1.0" encoding="UTF-8"?>
<ajax-response>
	<priority-evaluate><![CDATA[
		clientTimeVariable = new Date().getTime();
	]]></priority-evaluate>
	<evaluate><![CDATA[
		(function(){var win;
try {
	win = window.parent.Wicket.Window;
} catch (ignore) {
}
if (typeof(win) == "undefined" || typeof(win.current) == "undefined") {
  try {
     win = window.Wicket.Window;
  } catch (ignore) {
  }
}
if (win && win.current) {
 var close = function(w) { w.setTimeout(function() {
		win.current.close();
	}, 0);  };
	try { close(window.parent); } catch (ignore) { close(window); }
}})();
i	]]></evaluate>
	<evaluate><![CDATA[
		window.defaultStatus='Server parsetime: 2196.071s, Client parsetime: ' + (new Date().getTime() - clientTimeVariable)/1000 +  's';
	]]></evaluate>
</ajax-response>

/ BROWSER
/s
send.callback (jquery-2.2.0-ve…344000.js:9120)
							} else {
								complete(
xhr.responseText=js hierboven	,
/s
done (jquery-2.2.0-ve…344000.js:8754)
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
/s
self.fireWith (jquery-2.2.0-ve…344000.js:3312)
fire (jquery-2.2.0-ve…344000.js:3182)
jQuery.ajax.success (wicket-ajax-jqu…6344000.js:704)
						self.processAjaxResponse(data, textStatus, jqXHR, context);
/s
Wicket.Ajax.Call.processAjaxResponse (wicket-ajax-jqu…6344000.js:825)
					// invoke the loaded callback with an xml document
					return this.loadedCallback(data, context);
/s
Wicket.Ajax.Call.loadedCallback (wicket-ajax-jqu…344000.js:1036)
				var root = envelope.getElementsByTagName("ajax-response")[0];

				// go through the ajax response and execute all priority-invocations first
				for (var i = 0; i < root.childNodes.length; ++i) {
					var childNode = root.childNodes[i];
					if (childNode.tagName === "header-contribution") {
						this.processHeaderContribution(context, childNode);
					} else if (childNode.tagName === "priority-evaluate") {
						this.processEvaluation(context, childNode);


				// go through the ajax response and for every action (component, js evaluation, header contribution)
				// ad the proper closure to steps
				var stepIndexOfLastReplacedComponent = -1;
				for (var c = 0; c < root.childNodes.length; ++c) {
					var node = root.childNodes[c];

					if (node.tagName === "component") {
/n
					} else if (node.tagName === "evaluate") {
						this.processEvaluation(context, node);
/j
/s
Wicket.Ajax.Call.processEvaluation (wicket-ajax-jqu…344000.js:1167)

			var evaluate = function (script) {
				return function(notify) {
					// just evaluate the javascript
					try {
						// do the evaluation
						eval(script);
					} catch (exception) {
						log.error("Wicket.Ajax.Call.processEvaluation: Exception evaluating javascript: " + exception + ", text: " + text);
					}
					// continue to next step
					return FunctionsExecuter.DONE;
				};
			};

			} else {
				steps.push(evaluate(text));

/c
/ stack	,
evaluate (wicket-ajax-jqu…344000.js:1204)
						eval(script);				<- script=js function hierboven	, als string	, "(function(){...}
processNext.run (wicket-ajax-jqu…6344000.js:157)
proxy (jquery-2.2.0-ve…6344000.js:492)
processNext (wicket-ajax-jqu…6344000.js:172)
start (wicket-ajax-jqu…6344000.js:184)
jQuery.ajax.complete (wicket-ajax-jqu…6344000.js:729)
fire (jquery-2.2.0-ve…344000.js:3182)
self.fireWith (jquery-2.2.0-ve…344000.js:3312)
done (jquery-2.2.0-ve…344000.js:8769)
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );		<- Hier waren we zonet	,
/d
			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );				<- Nu	, 
/cb
send.callback (jquery-2.2.0-ve…344000.js:9120)

/c
anonymous function
/=
(function(){var win;
try {
	win = window.parent.Wicket.Window;
} catch (ignore) {
}
if (typeof(win) == "undefined" || typeof(win.current) == "undefined") {
  try {
     win = window.Wicket.Window;
  } catch (ignore) {
  }
}
if (win && win.current) {
 var close = function(w) { w.setTimeout(function() {
		win.current.close();								<-
	}, 0);  };
	try { close(window.parent); } catch (ignore) { close(window); }
}})();
/s
Wicket.Window.close (modal-ver-1484236344000.js:794)
/ TODO (Afmaken)

/c
/ we zien het modal window verdwenen, 
/ de hele <div ...> is WEG	,
/s
Wicket.Window.close (modal-ver-1484236344000.js:836)		<- we zijn nog hier in	,
			if (force !== true) {
				// call onclose handler
				this.settings.onClose();
/s
settings.onClose (VM4940:13)								<- we komen hier weer in	,
/=
settings.onClose = function() { Wicket.Ajax.ajax({"u":"./modal-window?12-1.IBehaviorListener.1-modal1","c":"modal14b"}); };
/s
jQuery.extend.Ajax.ajax (wicket-ajax-jqu…344000.js:1948)
attrs: Object
	c: "modal14b"
	u: "./modal-window?12-1.IBehaviorListener.1-modal1"			<-  nu behavior 1

				jQuery.each(attrs.e, function (idx, evt) {
					Wicket.Event.add(attrs.c, evt, function (jqEvent, data) {
/s
jQuery.extend.Event.add (wicket-event-jq…6344000.js:206)
				if (type === 'domready') {
					jQuery(fn);
/stack
/s
Wicket.Ajax.Call.doAjax (wicket-ajax-jqu…6344000.js:609)
(anonymous function) (wicket-ajax-jqu…6344000.js:563)
			var res = Wicket.channelManager.schedule(attrs.ch, Wicket.bind(function () {
				this.doAjax(attrs);															<-
			}, this));
proxy (jquery-2.2.0-ve…6344000.js:492)
Wicket.Channel.schedule (wicket-ajax-jqu…6344000.js:298)
Wicket.ChannelManager.schedule (wicket-ajax-jqu…6344000.js:358)
Wicket.Ajax.Call.ajax (wicket-ajax-jqu…6344000.js:562)
(anonymous function) (wicket-ajax-jqu…344000.js:1977)
					Wicket.Event.add(attrs.c, evt, function (jqEvent, data) {
						var call = new Wicket.Ajax.Call();
						...
							call.ajax(attributes);											<-
/cb
fire (jquery-2.2.0-ve…344000.js:3182)
self.add (jquery-2.2.0-ve…344000.js:3241)
jQuery.fn.ready (jquery-2.2.0-ve…344000.js:3491)
jQuery.fn.init (jquery-2.2.0-ve…344000.js:2922)
jQuery (jquery-2.2.0-ve…36344000.js:75)
jQuery.extend.Event.add (wicket-event-jq…6344000.js:206)
					jQuery(fn);
/cb
(anonymous function) (wicket-ajax-jqu…344000.js:1956)
jQuery.extend.each (jquery-2.2.0-ve…6344000.js:360)
jQuery.extend.Ajax.ajax (wicket-ajax-jqu…344000.js:1955)
settings.onClose (VM4940:13)
Wicket.Window.close (modal-ver-1484236344000.js:836)
(anonymous function) (VM18056:14)

/c

/ SERVER
/s
ModalWindowPage$2.onClose(AjaxRequestTarget) line: 64	
/=
		modal1.setWindowClosedCallback(new ModalWindow.WindowClosedCallback()
		{
			@Override
			public void onClose(AjaxRequestTarget target)
			{
				target.add(result);									/ target=AjaxRequestHandler, die result in XML writes	,
/cb
	ModalWindow$WindowClosedBehavior.respond(AjaxRequestTarget) line: 964	
/=
	private class WindowClosedBehavior extends AbstractDefaultAjaxBehavior
	{
		private static final long serialVersionUID = 1L;

		@Override
		protected void respond(final AjaxRequestTarget target)
		{
			shown = false;

			if (windowClosedCallback != null)
			{
				windowClosedCallback.onClose(target);
/cb
	ModalWindow$WindowClosedBehavior(AbstractDefaultAjaxBehavior).onRequest() line: 593	
		WebApplication app = (WebApplication)getComponent().getApplication();
		AjaxRequestTarget target = app.newAjaxRequestTarget(getComponent().getPage());

		RequestCycle requestCycle = RequestCycle.get();
		requestCycle.scheduleRequestHandlerAfterCurrent(target);

		respond(target);
/cb
	RequestListenerInterface.internalInvoke(Component, Object) line: 258	
			method.invoke(target); 													/ target	ModalWindow$WindowClosedBehavior  (id=10066)	
/cb
	RequestListenerInterface.invoke(IRequestableComponent, Behavior) line: 241	
	ListenerInterfaceRequestHandler.invokeListener() line: 248	
				Behavior behavior = getComponent().getBehaviorById(behaviorId);
this.behaviorId	Integer  (id=10056)		1
behavior	ModalWindow$WindowClosedBehavior  (id=10066)	
				listenerInterface.invoke(getComponent(), behavior);
/cb
	ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 234	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	


/c

<?xml version="1.0" encoding="UTF-8"?>
<ajax-response>
	<priority-evaluate><![CDATA[
		clientTimeVariable = new Date().getTime();
	]]></priority-evaluate>
	<component id="result4a" ><![CDATA[
		<span wicket:id="result" id="result4a" wicketpath="result">Modal window 1 - close button</span>
	]]></component>
	<evaluate><![CDATA[
		window.defaultStatus='Server parsetime: 469.357s, Client parsetime: ' + (new Date().getTime() - clientTimeVariable)/1000 +  's';
	]]></evaluate></ajax-response>

/ Nu een <component>

/ BROWSER
/s
send.callback (jquery-2.2.0-ve…344000.js:9120)
							} else {
								complete(
xhr.responseText=XML met result er in	,
/s
done (jquery-2.2.0-ve…344000.js:8754)
			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
/s
self.fireWith (jquery-2.2.0-ve…344000.js:3312)
/s
fire (jquery-2.2.0-ve…344000.js:3182)
/s
jQuery.ajax.success (wicket-ajax-jqu…6344000.js:704)
					if (attrs.wr) {
						self.processAjaxResponse(data, textStatus, jqXHR, context);
/s
Wicket.Ajax.Call.processAjaxResponse (wicket-ajax-jqu…6344000.js:766)
					// invoke the loaded callback with an xml document
					return this.loadedCallback(data, context);
/s
Wicket.Ajax.Call.loadedCallback (wicket-ajax-jqu…344000.js:1036)
				var root = envelope.getElementsByTagName("ajax-response")[0];
...
				for (var c = 0; c < root.childNodes.length; ++c) {
					var node = root.childNodes[c];

					if (node.tagName === "component") {
						...
						this.processComponent(context, node);
/s
Wicket.Ajax.Call.processComponent (wicket-ajax-jqu…344000.js:1137)
			context.steps.push(function (notify) {						<-
				// get the component id
				var compId = node.getAttribute("id");

				// get existing component
				var element = Wicket.$(compId);

				} else {
					var text = Wicket.DOM.text(node);

					// replace the component
					Wicket.DOM.replace(element, text);					/ TODO

/ SAMENVATTING


public class ModalWindow extends Panel

	protected class CloseButtonBehavior extends AbstractDefaultAjaxBehavior		/ eerst	, als je close window (x)
	{
		@Override
		protected final void respond(final AjaxRequestTarget target)
		{
			if ((closeButtonCallback == null) ||
				(closeButtonCallback.onCloseButtonClicked(target)))
			{
				close(target);											/ sends js to browser	, this js calls 'close' modal window , rm uit DOM	, en 																					/ calls 2de behavior	, 
			}
		}
	}
	private class WindowClosedBehavior extends AbstractDefaultAjaxBehavior		
	{
		@Override
		protected void respond(final AjaxRequestTarget target)
		{
			shown = false;

			if (windowClosedCallback != null)
			{
				windowClosedCallback.onClose(target);
			}
		}
	}

/ call	,

public class ModalWindowPage extends BasePage
		modal1.setCloseButtonCallback(new ModalWindow.CloseButtonCallback()
		{
			@Override
			public boolean onCloseButtonClicked(AjaxRequestTarget target)
			{
				setResult("Modal window 1 - close button");
				return true;
			}
		});
		modal1.setWindowClosedCallback(new ModalWindow.WindowClosedCallback()
		{
			@Override
			public void onClose(AjaxRequestTarget target)
			{
				target.add(result);										/ string in result op originele page	,
			}
		});




/ Einde COMPLETE ROUNDTRIP CLOSE MODALWINDOW 

/ TODO RM

/ Als we een b set in Wicket.Ajax.ajax	, dan 
/s
	settings.onCloseButton = function() { Wicket.Ajax.ajax({"u":"./modal-window?2-1.IBehaviorListener.0-modal1","c":"modal1e"});;return false;};
/s
Wicket.Ajax
			ajax: function(attrs) {

/c
/s
(anonymous function) (VM1106:14)
/=
(function(){var win;
try {
	win = window.parent.Wicket.Window;
} catch (ignore) {
}
if (typeof(win) == "undefined" || typeof(win.current) == "undefined") {
  try {
     win = window.Wicket.Window;
  } catch (ignore) {
  }
}
if (win && win.current) {
 var close = function(w) { w.setTimeout(function() {
		win.current.close();												<-
	}, 0);  };
	try { close(window.parent); } catch (ignore) { close(window); }
}})();
/s
Wicket.Window.close (modal-ver-1484236344000.js:836)
				// call onclose handler
				this.settings.onClose();
/s
settings.onClose (VM930:13)
settings.onClose = function() { Wicket.Ajax.ajax({"u":"./modal-window?12-1.IBehaviorListener.1-modal1","c":"modal14b"}); };
/s
jQuery.extend.Ajax.ajax (wicket-ajax-jqu…344000.js:1948)
attrs: Object
c: "modal14b"
u: "./modal-window?12-1.IBehaviorListener.1-modal1"

/ 13	. 

Wicket.Channel=function(){
	this.initialize.apply(this,arguments);
}.propotype={
		initialize: function (name) {	...}
		...
}
Wicket.Ajax = {
	ajax: function(attrs) {								<- hier vallen we altijd in	,
	post: function (attrs) {
	get: function (attrs) {

Wicket.Ajax.Call =function(){
	this.initialize.apply(this,arguments);
}.propotype={
		initialize: jQuery.noop,
		_initializeDefaults: function (attrs) {	...
		ajax: function (attrs) {
		doAjax: function (attrs) {
		done:function(attrs){
		...
}




/ 7	. 


/ 13	. 

/ Eerst op modal1	, de ModalWindow met de page	,

<script type="text/javascript">
/*<![CDATA[*/
Wicket.Event.add(window, "domready", function(event) { 
	Wicket.Ajax.ajax({"u":"./page?4-1.IBehaviorListener.0-closeOK","c":"closeOK18","e":"click"});;
	Wicket.Ajax.ajax({"u":"./page?4-1.IBehaviorListener.0-closeCancel","c":"closeCancel19","e":"click"});;
	Wicket.Ajax.ajax({"u":"./page?4-1.IBehaviorListener.0-open","c":"open1b","e":"click"});;
	Wicket.Event.publish(Wicket.Event.Topic.AJAX_HANDLERS_BOUND);
;});
/*]]>*/
</script>

<a wicket:id="closeOK" id="closeOK18" wicketpath="closeOK" href="javascript:;">Close this window with result "OK"</a>
<a wicket:id="closeCancel" id="closeCancel19" wicketpath="closeCancel" href="javascript:;">Close this window with result "Cancel"</a>
<a wicket:id="open" id="open1b" wicketpath="open" href="javascript:;">Open another modal dialog</a>



/ 13	. 

/ click 'Show modal dialog with a page'	, 

/ stack
/s
	ModalWindowPage$1.createPage() line: 56	
/=
		modal1.setPageCreator(new ModalWindow.PageCreator()
		{
			@Override
			public Page createPage()
			{
				return new ModalContent1Page(ModalWindowPage.this.getPageReference(), modal1);				/ onze code	,
/cb
	ModalWindow.createPage() line: 844	
			return pageCreator.createPage();
/cb
	ModalWindow.getWindowOpenJavaScript() line: 1050	
		...
		appendAssignment(buffer, "settings.resizable", isResizable());
buffer
var settings = new Object();
settings.minWidth=200;
settings.minHeight=200;
settings.className="w_blue";
settings.width=600;
settings.height=400;
settings.resizable=true;

			Page page = createPage();
/cb
	ModalWindow.show(IPartialPageRequestHandler) line: 370	
			getContent().setVisible(true);
			target.add(this);										/ inderdaad	, this=ModalWindow zal in XML komen	,
			target.appendJavaScript(getWindowOpenJavaScript());
/cb
	ModalWindowPage$4.onClick(AjaxRequestTarget) line: 82	
				modal1.show(target);						/ target moet modal1 serialize naar XML	,			onze code!
/cb
	AjaxLink$1.onEvent(AjaxRequestTarget) line: 84	
				onClick(target);
/cb
	AjaxLink$1(AjaxEventBehavior).respond(AjaxRequestTarget) line: 155	
		onEvent(target);
/cb
	AjaxLink$1(AbstractDefaultAjaxBehavior).onRequest() line: 593	
		WebApplication app = (WebApplication)getComponent().getApplication();
		AjaxRequestTarget target = app.newAjaxRequestTarget(getComponent().getPage());		
		RequestCycle requestCycle = RequestCycle.get();
		requestCycle.scheduleRequestHandlerAfterCurrent(target);		/ schedule 2de controller, die de XML creates	,
		respond(target);
/cb
	RequestListenerInterface.internalInvoke(Component, Object) line: 258	
	RequestListenerInterface.invoke(IRequestableComponent, Behavior) line: 241	
	ListenerInterfaceRequestHandler.invokeListener() line: 248	
	ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 234	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ 13	. 

/c

/ click de closeOK button op de ModelContent1Page (in het ModalWindow)	,

/s
ModalWindowPage$2.onClose(AjaxRequestTarget) line: 64	
/=
		modal1.setWindowClosedCallback(new ModalWindow.WindowClosedCallback()
		{
			@Override
			public void onClose(AjaxRequestTarget target)
			{
				target.add(result);					/ onze code	,	 result=Label("result", new PropertyModel<>(this, "result")))	, komt in XML	,
/cb
	ModalWindow$WindowClosedBehavior.respond(AjaxRequestTarget) line: 964	
/=
	private class WindowClosedBehavior extends AbstractDefaultAjaxBehavior
	{
		private static final long serialVersionUID = 1L;

		@Override
		protected void respond(final AjaxRequestTarget target)
		{
			shown = false;

			if (windowClosedCallback != null)
			{
				windowClosedCallback.onClose(target);
/cb
	ModalWindow$WindowClosedBehavior(AbstractDefaultAjaxBehavior).onRequest() line: 593	
		WebApplication app = (WebApplication)getComponent().getApplication();
		AjaxRequestTarget target = app.newAjaxRequestTarget(getComponent().getPage());

		RequestCycle requestCycle = RequestCycle.get();
		requestCycle.scheduleRequestHandlerAfterCurrent(target);

		respond(target);		/target=AjaxRequestHandler	, 
/cb
	RequestListenerInterface.internalInvoke(Component, Object) line: 258	
			method.invoke(target); 											/ target	ModalWindow$WindowClosedBehavior  (id=10078)	
/cb
	RequestListenerInterface.invoke(IRequestableComponent, Behavior) line: 241	
	ListenerInterfaceRequestHandler.invokeListener() line: 248	
				Behavior behavior = getComponent().getBehaviorById(behaviorId);	/ ModalWindow$CloseButtonBehavior, want behaviorId=1	, 
				listenerInterface.invoke(getComponent(), behavior);
/cb
	ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 234	
this	ListenerInterfaceRequestHandler  (id=10080)	
	behaviorId	Integer  (id=10204)	 												1		/ Uit de url	,
	listenerInterface	RequestListenerInterface  (id=9421)	
		includeRenderCount	true	
		listenerInterfaceClass	Class<T> (org.apache.wicket.behavior.IBehaviorListener) (id=386)					/ Uit de url	,	
		method	Method  (id=9420)		public abstract void org.apache.wicket.behavior.IBehaviorListener.onRequest()
		name	"IBehaviorListener" (id=10209)	
		renderPageAfterInvocation	true	
	pageComponentProvider	PageAndComponentProvider  (id=10208)	
		component	ModalWindow  (id=10216)	
			data	Object[4]  (id=10255)	
				[0]	MetaDataEntry<T>  (id=10262)	
				[1]	ModalWindow$CloseButtonBehavior  (id=10263) / 1ste behavior	,	
				[2]	Behaviors$BehaviorIdList  (id=10264)	
				[3]	ModalWindow$WindowClosedBehavior  (id=10078)	/ 2de behavior	,	
		componentPath	"modal1" (id=10222)													/ Uit de url	,

		invokeListener();
/cb
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ intermezzo

public class ModalWindow extends Panel
	private void init()
	{
		add(empty = new WebMarkupContainer(getContentId()));

		add(newCloseButtonBehavior());
		add(new WindowClosedBehavior());

		// install a default callback that will force
		// WindowClosedBehavior to be executed
		setWindowClosedCallback(new WindowClosedCallback()		/ we override deze in ModalWindowPage.<init> met 
																		/ modal1.setWindowClosedCallback(new ModalWindow.WindowClosedCallback()
		{
			@Override
			public void onClose(AjaxRequestTarget target)
			{
				// noop
			}
		});

/ Einde intermezzo

/ intermezzo



public class ModalWindow extends Panel

	public interface WindowClosedCallback extends IClusterable
	{
		/**
		 * Called after the window has been closed.
		 * 
		 * @param target
		 *            <code>{@link org.apache.wicket.ajax.AjaxRequestTarget}</code> instance bound
		 *            with the ajax request.
		 */
		void onClose(AjaxRequestTarget target);
	}

/ Lijkt op	,

public abstract class Behavior

	public void onConfigure(Component component)
	{
	}

	@Override
	public void onEvent(Component component, IEvent<?> event)
	{
	}

	public void onRemove(Component component)
	{
	}

/ Einde intermezzo

/ 13	. 

/ click 'Close this window with result "Cancel"'	, 

/ stack
/s
	ModalContent1Page$2.onClick(AjaxRequestTarget) line: 58	
	AjaxLink$1.onEvent(AjaxRequestTarget) line: 84	
	AjaxLink$1(AjaxEventBehavior).respond(AjaxRequestTarget) line: 155	
	AjaxLink$1(AbstractDefaultAjaxBehavior).onRequest() line: 593	
	RequestListenerInterface.internalInvoke(Component, Object) line: 258	
	RequestListenerInterface.invoke(IRequestableComponent, Behavior) line: 241	
	ListenerInterfaceRequestHandler.invokeListener() line: 248	
	ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 234	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ Einde TODO RM

/ COMPLETE ROUNDTRIP CREATE MODALWINDOW WITH PANEL

/ click 'Show modal dialog with panel'	,

/ op deze link zit een url	,

/ BROWSER
/s
Wicket.Ajax.ajax
				jQuery.each(attrs.e, function (idx, evt) {
					Wicket.Event.add(attrs.c, evt, function (jqEvent, data) {
						var call = new Wicket.Ajax.Call();
/c

/ SERVER
/s
/ stack	,
	ModalWindowPage$7.onClick(AjaxRequestTarget) line: 121	
				modal2.show(target);
/cb
	AjaxLink$1.onEvent(AjaxRequestTarget) line: 84	
	AjaxLink$1(AjaxEventBehavior).respond(AjaxRequestTarget) line: 155	
	AjaxLink$1(AbstractDefaultAjaxBehavior).onRequest() line: 593	
	RequestListenerInterface.internalInvoke(Component, Object) line: 258	
	RequestListenerInterface.invoke(IRequestableComponent, Behavior) line: 241	
	ListenerInterfaceRequestHandler.invokeListener() line: 248	
	ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 234	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/ debug	, 









/ Einde COMPLETE ROUNDTRIP CREATE MODALWINDOW WITH PANEL

/ CLOSE LINK ON MODALWINDOW COMPLETE 

/ 7	.  

/ SHOW MODAL	,

/ 13	. 

/ we zien 2 requests	, 
/ 1 ajax request,	  want je clickt op een ajax link	,
/ en een page load	, een gewoon request	, die de page load die in het modal window komt	,


Request URL:http://localhost:9090/wicket-examples-step-by-step/ajax/modal_my?0-1.IBehaviorListener.0-show&_=1484903461203
Request Method:GET
<evaluate><![CDATA[(function(){var settings = new Object();
settings.minWidth=200;
settings.minHeight=200;
settings.className="w_blue";
settings.width=600;
settings.height=400;
settings.resizable=true;
settings.src="./wicket/page?3";
settings.mask="semi-transparent";
settings.autoSize=false;
settings.unloadConfirmation=true;
settings.onClose = function() { Wicket.Ajax.ajax({"u":"./modal_my?0-1.IBehaviorListener.1-modal","c":"modal3"}); };
settings.onCloseButton = function() { Wicket.Ajax.ajax({"u":"./modal_my?0-1.IBehaviorListener.0-modal","c":"modal3"});;return false;};
window.setTimeout(function(){
  Wicket.Window.create(settings).show();
}, 0);
})();]]></evaluate>

/ en	,

Request URL:http://localhost:9090/wicket-examples-step-by-step/ajax/wicket/page?3
Request Method:GET

<!doctype html>
<html>
<head>
...

/ 13	. 

/ in meer detail	,

/ Als we click 'Show modal'	, is ajax call, dan wordt XML  naar browser send	,  

...
<evaluate><![CDATA[(function(){
var settings = new Object();
settings.minWidth=200;
settings.minHeight=200;
settings.className="w_blue";
settings.width=600;
settings.height=400;
settings.resizable=true;
settings.src="./wicket/page?2";
settings.mask="semi-transparent";
settings.autoSize=false;
settings.unloadConfirmation=true;
settings.onClose = function() { Wicket.Ajax.ajax({"u":"./modal_my?0-1.IBehaviorListener.1-modal","c":"modal3"}); };
settings.onCloseButton = function() { Wicket.Ajax.ajax({"u":"./modal_my?0-1.IBehaviorListener.0-modal","c":"modal3"});;return false;};
window.setTimeout(function(){
  Wicket.Window.create(settings).show();
}, 0);
})();]]></evaluate>

/ en komt in 	,
/ stack
evaluate (wicket-ajax-jqu…344000.js:1204)
						eval(script);
/cb
processNext.run (wicket-ajax-jqu…6344000.js:157)
proxy (jquery-2.2.0-ve…6344000.js:492)
processNext (wicket-ajax-jqu…6344000.js:172)
start (wicket-ajax-jqu…6344000.js:184)
jQuery.ajax.complete (wicket-ajax-jqu…6344000.js:729)
fire (jquery-2.2.0-ve…344000.js:3182)
self.fireWith (jquery-2.2.0-ve…344000.js:3312)
done (jquery-2.2.0-ve…344000.js:8769)
send.callback (jquery-2.2.0-ve…344000.js:9120)

script=
"(function(){var settings = new Object();
settings.minWidth=200;
settings.minHeight=200;
settings.className="w_blue";
settings.width=600;
settings.height=400;
settings.resizable=true;
settings.src="./wicket/page?3";
settings.mask="semi-transparent";
settings.autoSize=false;
settings.unloadConfirmation=true;
settings.onClose = function() { Wicket.Ajax.ajax({"u":"./modal_my?0-1.IBehaviorListener.1-modal","c":"modal3"}); };
settings.onCloseButton = function() { Wicket.Ajax.ajax({"u":"./modal_my?0-1.IBehaviorListener.0-modal","c":"modal3"});;return false;};
window.setTimeout(function(){
  Wicket.Window.create(settings).show();
}, 0);
})();"

/c
/stack
/s
Wicket.Window.adjustOpenWindowsStatusOnShow (modal-ver-1484236344000.js:756)
			// keep reference to this window
			Wicket.Window.current = this;
/cb
Wicket.Window.show (modal-ver-1484236344000.js:705)
			this.adjustOpenWindowsStatusOnShow();
/cb
(anonymous function) (VM2041:15)
  Wicket.Window.create(settings).show();


/ Hij doet dus
  Wicket.Window.create(settings)

/ intermezzo

	Wicket.Window = Wicket.Class.create();
/=
Wicket.Window
function () {
				this.initialize.apply(this, arguments);
			} 

	Wicket.Window.create = function(settings) {
		var Win;

			Win = Wicket.Window;

		return new Win(settings);				
	};

/ Einde intermezzo


/ maar wordt new Wicket.Window(settings) saved	, want als de 2de XML terug komt	, valt hij er weer in	? 
/ Ja, als current in Wicket.Window	,

/ Hij doet dus 
	new Wicket.Window(settings).show()	, 
/ en	,
Wicket.Window.show=function(){
			// is it an iframe window?
			if (this.isIframe()) {
				// load the file
				this.load();
/s
/t
			// bind the events
			this.bindInit();
/s
Wicket.Window.bindInit (modal-ver-1484236344000.js:422)
			this.caption.getElementsByTagName("a")[0].onclick = Wicket.bind(this.settings.onCloseButton, this);	/ controller op (x)	
					/= function() { Wicket.Ajax.ajax({"u":"./modal_my?0-1.IBehaviorListener.0-modal","c":"modal3"}), dus (x) is ALS een AjaxLink	, 
					/ de ModalWindow.CloseButtonBehavior is als AjaxLink.new AjaxEventBehavior (TODO)	,
/t
Wicket.Window.show (modal-ver-1484236344000.js:672)
			this.bindInit();
/d
			this.adjustOpenWindowsStatusOnShow();
/s
		adjustOpenWindowsStatusOnShow: function() {
			// keep reference to this window
			Wicket.Window.current = this;

Wicket.Window: function () {		
	close: function () {
	create: function (settings) {
	current: Object
		bottom: div#_wicket_window_24.w_bottom
		bottomLeft: div#_wicket_window_22.w_bottomLeft
		bottomRight: div#_wicket_window_23.w_bottomRight
		caption: div#_wicket_window_15.w_caption
		captionText: h3#_wicket_window_25.w_captionText
		classElement: div#_wicket_window_14.w_blue
		content: iframe#_wicket_window_16.wicket_modal
		left: div#_wicket_window_20.w_left
		mask: Object
		old_onunload: null
		revertList: null
		right: div#_wicket_window_21.w_right
		settings: Object
		top: div#_wicket_window_17.w_top
		topLeft: div#_wicket_window_18.w_topLeft
		topRight: div#_wicket_window_19.w_topRight
		update: 29
		window: div#_wicket_window_13.wicket-modal
		__proto__: Object
	get: function () {
	getMarkup: function (idWindow, idClassElement, idCaption, idContent, idTop, idTopLeft, idTopRight, idLeft, idRight, idBottomLeft, idBottomRight, idBottom, idCaptionText, isFrame) {
	getScrollX: function () {
	getScrollY: function () {
	getViewportHeight: function () {
	getViewportWidth: function () {
	idCounter: 26
	length: 0
	name: ""
	prototype: Object
	__proto__: function Empty() {}
	<function scope>

/s


/ Hier na volgt de page load	, 
/ TODO

/ Einde SHOW MODAL 

/ ABSTRACT CLOSE FIRST XML SECOND XML	

/ 7	. 

/ we zien in het totaal 2 XML als ajax response	,

/ 13	.

Request URL:http://localhost:9090/wicket-examples-step-by-step/ajax/modal_my?0-1.IBehaviorListener.0-modal&_=1484903461207
Request Method:GET

<?xml version="1.0" encoding="UTF-8"?><ajax-response><priority-evaluate><![CDATA[clientTimeVariable = new Date().getTime();]]></priority-evaluate><evaluate><![CDATA[(function(){var win;
try {
	win = window.parent.Wicket.Window;
} catch (ignore) {
}
if (typeof(win) == "undefined" || typeof(win.current) == "undefined") {
  try {
     win = window.Wicket.Window;
  } catch (ignore) {
  }
}
if (win && win.current) {
 var close = function(w) { w.setTimeout(function() {
		win.current.close();												<-
	}, 0);  };
	try { close(window.parent); } catch (ignore) { close(window); }
}})();]]></evaluate><evaluate><![CDATA[window.defaultStatus='Server parsetime: 32.224s, Client parsetime: ' + (new Date().getTime() - clientTimeVariable)/1000 +  's';]]></evaluate></ajax-response>

/ 13	. 

Request URL:http://localhost:9090/wicket-examples-step-by-step/ajax/modal_my?0-1.IBehaviorListener.1-modal&_=1484903461208
Request Method:GET

<?xml version="1.0" encoding="UTF-8"?><ajax-response><priority-evaluate><![CDATA[clientTimeVariable = new Date().getTime();]]></priority-evaluate><component id="result2" ><![CDATA[<h3 wicket:id="result" id="result2" wicketpath="result">Closed modal window</h3>]]></component><evaluate><![CDATA[window.defaultStatus='Server parsetime: 800.775s, Client parsetime: ' + (new Date().getTime() - clientTimeVariable)/1000 +  's';]]></evaluate></ajax-response>

/ 7	. 

settings.onCloseButton = function() { Wicket.Ajax.ajax({"u":"./modal_my?0-1.IBehaviorListener.0-modal","c":"modal3"});;return false;};		/ (x)


settings.onClose = function() { Wicket.Ajax.ajax({"u":"./modal_my?0-1.IBehaviorListener.1-modal","c":"modal3"}); };		/ allemaal	, 
																/ want ModalWindow.close(target) wordt altijd called	,

/ de 2de behavior 
class ModalWindow
	private class WindowClosedBehavior extends AbstractDefaultAjaxBehavior
	{
		private static final long serialVersionUID = 1L;

		@Override
		protected void respond(final AjaxRequestTarget target)
		{
			shown = false;

			if (windowClosedCallback != null)
			{
				windowClosedCallback.onClose(target);
			}
		}
	}
/ en de callback	, in ons geval	,
		modal1.setWindowClosedCallback(new ModalWindow.WindowClosedCallback()
		{
			@Override
			public void onClose(AjaxRequestTarget target)
			{
				target.add(result);
			}
		});


/ wordt ALTIJD called	, of we nu met (x) het window close	, of met een ajax link op de page	,
/ want door de 1ste behavior wordt altijd modal window.close(target) called	, en verschijnt het js script met win.current.close()	, die een 2de ajax call doet	,
		settings.onClose = function() { Wicket.Ajax.ajax({"u":"./modal_my?0-1.IBehaviorListener.1-modal","c":"modal3"}); };

/ dus komen we in de 2de behavior uit	, 

/ 7	. 

/ 1ste behavior	,  

/ bij (x)	, 

	protected class CloseButtonBehavior extends AbstractDefaultAjaxBehavior
	{
		private static final long serialVersionUID = 1L;

		public CloseButtonBehavior()
		{
		}

		@Override
		protected final void respond(final AjaxRequestTarget target)
		{
			if ((closeButtonCallback == null) |
				(closeButtonCallback.onCloseButtonClicked(target)))									/ sets result ('s model) 	,
			{
				close(target);																<-
			}
		}
	}

/ bij (x)	,
settings.onCloseButton = function() { Wicket.Ajax.ajax({"u":"./modal_my?0-1.IBehaviorListener.0-modal","c":"modal3"});;return false;};		/ (x)

/ ./modal_my is de page	, op de server gaat wicket op zoek naar de component 'modal'	, omdat er staat -modal	, en in de component is er een list van behaviors	, en wicket kiest behavior 0	, want er staat .0	,

/ bij link op page in modal window	,

<script>
/*<![CDATA[*/
Wicket.Event.add(window, "domready", function(event) { 
	Wicket.Ajax.ajax({"u":"./page?2-1.IBehaviorListener.0-closeOK","c":"closeOKe","e":"click"});;							<-
	Wicket.Ajax.ajax({"u":"./page?2-1.IBehaviorListener.0-closeCancel","c":"closeCancelf","e":"click"});;
	Wicket.Ajax.ajax({"u":"./page?2-1.IBehaviorListener.0-open","c":"open11","e":"click"});;
;});
/*]]>*/

/ Of we click (x) , wat een behavior calls on ModalWindow	, of een ajaxlink op de page in modalwindow	, wat een behavior calls on the AjaxLink	, beide behaviors call ModalWindow.close(target)	, en wordt in js win.current.close() called	, dus altijd deze (dat staat letterlijk in Wicket.Window.prototype.close:
settings.onClose = function() { Wicket.Ajax.ajax({"u":"./modal_my?0-1.IBehaviorListener.1-modal","c":"modal3"}); };		/ allemaal	, 

/ we zien een andere page	, ./page	, en dan gaat wicket op de server op zoek naar de closeOK component in deze page	, want er staat -closeOK	, en deze heeft een list van behaviors	, en wicket kiest behavior 0 uit de list want in de url staat .0

/ we hebben met mountPage modal_my opgegeven 	, maar hoe page	?
/ TODO

/ Deze scripts worden called	, als modal window wordt loaded	, doet	,
					jQuery(el).on(type, selector, data, fn);
/ intermezzo

			IRequestHandler handler = resolveRequestHandler();
handler	ListenerInterfaceRequestHandler  (id=14768)	
	behaviorId	Integer  (id=14736)	
	listenerInterface	RequestListenerInterface  (id=14737)	
	pageComponentProvider	PageAndComponentProvider  (id=14769)	
		component	null	
		componentPath	"closeOK" (id=14770)									<-
/c
/s
ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 164	
		final IRequestablePage page = getPage();					/ TODO Op original page, of op page in modal window	,
			component = getComponent();
/s
			component = page.get(componentPath);
/t
ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 164	
		invokeListener();
/s
ListenerInterfaceRequestHandler.invokeListener() line: 247	
				Behavior behavior = getComponent().getBehaviorById(behaviorId);
/s
ModalWindowPage_my$1(Component).getBehaviorById(int) line: 4540	
		return new Behaviors(this).getBehaviorById(id);
this	ModalWindowPage_my$1  (id=16045)	
	data	Object[2]  (id=16047)	
		...
		[1]	Behaviors$BehaviorIdList  (id=16061)		<-

				listenerInterface.invoke(getComponent(), behavior);




/ Einde intermezzo





	public ModalContent1Page(final PageReference modalWindowPage, final ModalWindow window)
	{
		add(new AjaxLink<Void>("closeOK")
		{
			@Override
			public void onClick(AjaxRequestTarget target)
			{
				if (modalWindowPage != null)
					((ModalWindowPage)modalWindowPage.getPage()).setResult("Modal window 1 - close link OK");
				window.close(target);																				<-
			}
		});

/ Beide doet precies hetzelfde	,

/ De ModalWindow.close(target) sets de js met win.current.close() in ajax response XML	,

/ Dus wordt IN ALLE GEVALLEN de 2de ajax behavior called	, in de ajax urls staat altijd	-modal	, 




/ 7	. 

/ Dit moeten we NIET doen	,

/ We kunnen ook alleen 	,
		modal1.setCloseButtonCallback(new ModalWindow.CloseButtonCallback()
		{
			@Override
			public boolean onCloseButtonClicked(AjaxRequestTarget target)
			{
				setResult("Modal window 1 - close button");
				target.add(result);
				return true;
			}
		});

/ Maar dan werkt alleen (x)	,  

/ 7	. 

/ Dus nogmaals	, de ajax link op de page in het modal window werkt zo:






/ Einde ABSTRACT CLOSE FIRST XML SECOND XML	

/ CLOSE FIRST XML

/ in meer detail	,


/ we click op (x) 

/ 13	. 

/ we gaan zien als ajax response	, 

Request URL:http://localhost:9090/wicket-examples-step-by-step/ajax/modal_my?0-1.IBehaviorListener.0-modal&_=1484903461204

<?xml version="1.0" encoding="UTF-8"?><ajax-response><priority-evaluate><![CDATA[clientTimeVariable = new Date().getTime();]]></priority-evaluate><evaluate><![CDATA[(function(){var win;
try {
	win = window.parent.Wicket.Window;
} catch (ignore) {
}
if (typeof(win) == "undefined" || typeof(win.current) == "undefined") {
  try {
     win = window.Wicket.Window;
  } catch (ignore) {
  }
}
if (win && win.current) {
 var close = function(w) { w.setTimeout(function() {
		win.current.close();
	}, 0);  };
	try { close(window.parent); } catch (ignore) { close(window); }
}})();]]></evaluate><evaluate><![CDATA[window.defaultStatus='Server parsetime: 166.839s, Client parsetime: ' + (new Date().getTime() - clientTimeVariable)/1000 +  's';]]></evaluate></ajax-response>

/ 13	. 

/ in meer detail	,

/stack
/s
jQuery.extend.Ajax.ajax (wicket-ajax-jqu…344000.js:1948)
				attrs.c = attrs.c || window;
/cb
settings.onCloseButton (VM2041:13)
	settings.onCloseButton = function() { Wicket.Ajax.ajax({"u":"./modal_my?0-1.IBehaviorListener.0-modal","c":"modal3"});;return false;};
/cb
proxy (jquery-2.2.0-ve…6344000.js:492)
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );

/ Dus gaat ajax call doen	,

/ SERVER
/s
ModalWindow$CloseButtonBehavior(AbstractDefaultAjaxBehavior).onRequest() line: 593	
		WebApplication app = (WebApplication)getComponent().getApplication();
		AjaxRequestTarget target = app.newAjaxRequestTarget(getComponent().getPage());

		RequestCycle requestCycle = RequestCycle.get();
		requestCycle.scheduleRequestHandlerAfterCurrent(target);

		respond(target);
/s
ModalWindow$CloseButtonBehavior.respond(AjaxRequestTarget) line: 987	
			if ((closeButtonCallback == null) ||
				(closeButtonCallback.onCloseButtonClicked(target)))		
/s
ModalWindowPage_my$3.onCloseButtonClicked(AjaxRequestTarget) line: 51 (out of synch)	
				ModalWindowPage_my.this.get("result").setDefaultModelObject("Closed modal window");
/t
ModalWindow$CloseButtonBehavior.respond(AjaxRequestTarget) line: 987	
				(closeButtonCallback.onCloseButtonClicked(target)))		
/d
				close(target);	
/s
	public void close(final IPartialPageRequestHandler target)
	{
		getContent().setVisible(false);
		target.appendJavaScript(getCloseJavacript());			/ Dit is het script die we in ajax response XML zien	, die win.current.close()  
		shown = false;

/ BROWSER	,
/ stack	,
/s
evaluate (wicket-ajax-jqu…344000.js:1204)
						eval(script);
/cb
processNext.run (wicket-ajax-jqu…6344000.js:157)
proxy (jquery-2.2.0-ve…6344000.js:492)
processNext (wicket-ajax-jqu…6344000.js:172)
start (wicket-ajax-jqu…6344000.js:184)
jQuery.ajax.complete (wicket-ajax-jqu…6344000.js:729)
fire (jquery-2.2.0-ve…344000.js:3182)
self.fireWith (jquery-2.2.0-ve…344000.js:3312)
done (jquery-2.2.0-ve…344000.js:8769)
send.callback (jquery-2.2.0-ve…344000.js:9120)

script=
"(function(){var win;
try {
	win = window.parent.Wicket.Window;
} catch (ignore) {
}
if (typeof(win) == "undefined" || typeof(win.current) == "undefined") {
  try {
     win = window.Wicket.Window;
  } catch (ignore) {
  }
}
if (win && win.current) {
 var close = function(w) { w.setTimeout(function() {
		win.current.close();											<-
	}, 0);  };
	try { close(window.parent); } catch (ignore) { close(window); }
}})();"
/ win===Wicket.Window	,


/ Dit gaat WH asynchronous met server request	,

/c
/s
Wicket.Window.close (modal-ver-1484236344000.js:794)
			this.adjustOpenWindowsStatusAndZIndexesOnClose();
/s
Wicket.Window.adjustOpenWindowsStatusAndZIndexesOnClose (modal-ver-1484236344000.js:858)
			} else {
				// remove reference to the window
				Wicket.Window.current = null;

/ herinner	,
settings.onClose = function() { Wicket.Ajax.ajax({"u":"./modal_my?0-1.IBehaviorListener.1-modal","c":"modal3"}); };						<- 2de ajax
settings.onCloseButton = function() { Wicket.Ajax.ajax({"u":"./modal_my?0-1.IBehaviorListener.0-modal","c":"modal3"});;return false;};	<- 1ste ajax


/ Na	, 
	eval(
(anonymous function) (VM1111:14)
/=
(function(){var win;
try {
	win = window.parent.Wicket.Window;
} catch (ignore) {
}
if (typeof(win) == "undefined" || typeof(win.current) == "undefined") {
  try {
     win = window.Wicket.Window;
  } catch (ignore) {
  }
}
if (win && win.current) {
 var close = function(w) { w.setTimeout(function() {
		win.current.close();													<-
	}, 0);  };
	try { close(window.parent); } catch (ignore) { close(window); }
}})();
/s
Wicket.Window.close (modal-ver-1484236344000.js:794)
			if (force !== true) {
				// call onclose handler
				this.settings.onClose();								/ Dit is de 2de ajax call	,
/s
(function(){var settings = new Object();
settings.minWidth=200;
settings.minHeight=200
settings.className="w_blue";
settings.width=600;
settings.height=400;
settings.resizable=true;
settings.src="./wicket/page?2";
settings.mask="semi-transparent";
settings.autoSize=false;
settings.unloadConfirmation=true;
settings.onClose = function() { Wicket.Ajax.ajax({"u":"./modal_my?0-1.IBehaviorListener.1-modal","c":"modal3"}); };						<- 2de ajax
settings.onCloseButton = function() { Wicket.Ajax.ajax({"u":"./modal_my?0-1.IBehaviorListener.0-modal","c":"modal3"});;return false;};	<- 1ste ajax
window.setTimeout(function(){
  Wicket.Window.create(settings).show();
}, 0);
})();
/s
Wicket.Ajax.ajax (wicket-ajax-jqu…344000.js:1948)
					attrs.c = attrs.c || window;								/ gaat ajax call doen	,


/ CLOSE SECOND XML

/ we zien	, 

Request URL:http://localhost:9090/wicket-examples-step-by-step/ajax/modal_my?0-1.IBehaviorListener.1-modal&_=1484903461208
Request Method:GET

<?xml version="1.0" encoding="UTF-8"?><ajax-response><priority-evaluate><![CDATA[clientTimeVariable = new Date().getTime();]]></priority-evaluate><component id="result2" ><![CDATA[<h3 wicket:id="result" id="result2" wicketpath="result">Closed modal window</h3>]]></component><evaluate><![CDATA[window.defaultStatus='Server parsetime: 800.775s, Client parsetime: ' + (new Date().getTime() - clientTimeVariable)/1000 +  's';]]></evaluate></ajax-response>

/s
/ SERVER
		modalWindow.setWindowClosedCallback(new ModalWindow.WindowClosedCallback() {
			
			@Override
			public void onClose(AjaxRequestTarget target) {
				target.add(ModalWindowPage_my.this.get("result"));

/ BROWSER
/s
/ stack														/ = handles response ajax call	,
evaluate (wicket-ajax-jqu…344000.js:1204)
						eval(script);						/ niet zo belangrijk	, ergens anders wordt replace gedaan	,
/cb
processNext.run (wicket-ajax-jqu…6344000.js:157)
proxy (jquery-2.2.0-ve…6344000.js:492)
processNext (wicket-ajax-jqu…6344000.js:172)
start (wicket-ajax-jqu…6344000.js:184)
jQuery.ajax.complete (wicket-ajax-jqu…6344000.js:729)
fire (jquery-2.2.0-ve…344000.js:3182)
self.fireWith (jquery-2.2.0-ve…344000.js:3312)
done (jquery-2.2.0-ve…344000.js:8769)
send.callback (jquery-2.2.0-ve…344000.js:9120)



/ Einde CLOSE LINK ON MODALWINDOW COMPLETE 


/ MODALWINDOW PAGE SELF 
/ op de originele page	,

	Wicket.Event.add(window, "domready", function(event) { 
		Wicket.Ajax.ajax({"u":"./modal_my?0-1.IBehaviorListener.0-show","c":"show1","e":"click"});;
	;});
</head>
<body>
	<a wicket:id="show" id="show1" wicketpath="show" href="javascript:;">Show modal</a>
	<div wicket:id="modal" id="modal3" wicketpath="modal" style="display:none">
		<wicket:panel xmlns:wicket="http://wicket.apache.org">
			<div wicket:id="content" id="content4" wicketpath="modal_content">
			</div>
		</wicket:panel>
	</div>

/ blijkbaar is modal_my deze originele page	,

/ op de page in het modal window	,
/ 

<div class="wicket-modal" id="_wicket_window_0" role="dialog" aria-labelledby="_wicket_window_12" style="top: 0px; left: 503.5px; width: 600px; position: absolute; visibility: visible;"><form style="background-color:transparent;padding:0px;margin:0px;border-width:0px;position:static" lpformnum="1">
	<div id="_wicket_window_1" class="w_blue">
		<div class="w_top_1">
			<div class="w_topLeft" id="_wicket_window_5"></div>
				<div class="w_topRight" id="_wicket_window_6"></div>
					<div class="w_top" id="_wicket_window_4"></div></div>
					<div class="w_left" id="_wicket_window_7">
						<div class="w_right_1">
							<div class="w_right" id="_wicket_window_8">
								<div class="w_content_1" onmousedown="Wicket.Event.stop(event);">
									<div class="w_caption" id="_wicket_window_2">
										<a class="w_close" style="z-index:1" href="#"></a>						<-	 (x)
										<h3 id="_wicket_window_12" class="w_captionText"></h3>
									</div>
									<div class="w_content_2">
										<div class="w_content_3">
											<div class="w_content">
												<iframe frameborder="0" id="_wicket_window_3" allowtransparency="false" style="height: 335px;" class="wicket_modal">	
															/ hier HTML page in modal window
												</iframe>
											</div>
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>
					<div class="w_bottom_1" id="_wicket_window_11_1">
						<div class="w_bottomRight" id="_wicket_window_10"></div>
						<div class="w_bottomLeft" id="_wicket_window_9"></div>
						<div class="w_bottom" id="_wicket_window_11">
					</div>
				</div>
			</div>
		</form>
	</div>

/ we click x button on modal window,	
Request URL:http://localhost:9090/wicket-examples-step-by-step/ajax/modal_my?0-1.IBehaviorListener.0-modal&_=1484832947074
/ Hier staat: zoek naar behaviors in component modal	, dat is een ModalWindow	, 

/ we zien dus component "modal" in de url	, maar dat is niet het (x)	, maar de <div wicket:id="modal" ...> 	, die we niet snappen	?
/ In Java is "modal" het ModalWindow	,  deze heeft 2 behaviors	, die elk een callback call	, die ook in de ModalWindow zijn	,  

/ In de DOM zien we de js NIET die activate wordt als je (x) click,	 maar is er wel	,

(function(){var settings = new Object();
settings.minWidth=200;
settings.minHeight=200;
settings.className="w_blue";
settings.width=600;
settings.height=400;
settings.resizable=true;
settings.src="./wicket/page?3";
settings.mask="semi-transparent";
settings.autoSize=false;
settings.unloadConfirmation=true;
settings.onClose = function() { Wicket.Ajax.ajax({"u":"./modal_my?0-2.IBehaviorListener.1-modal","c":"modal3"}); };
settings.onCloseButton = function() { Wicket.Ajax.ajax({"u":"./modal_my?0-2.IBehaviorListener.0-modal","c":"modal3"});;return false;};		<-
window.setTimeout(function(){
  Wicket.Window.create(settings).show();
}, 0);
})();

/ Als we in dit script zijn	, 
this.__proto__===Wicket.Window.prototype
true

/ Als we click op (x)	,
/ stack	,
jQuery.extend.Ajax.ajax (wicket-ajax-jqu…344000.js:1948)
				attrs.c = attrs.c || window;
/cb
settings.onCloseButton (VM2524:13)
this.__proto__===Wicket.Window.prototype true
	settings.onCloseButton = function() { Wicket.Ajax.ajax({"u":"./modal_my?0-2.IBehaviorListener.0-modal","c":"modal3"});;return false;};
/cb
jQuery.extend.proxy.proxy (jquery-2.2.0-ve…6344000.js:492)
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
context.__proto__===Wicket.Window.prototype true
this TODO
 

/ Dit script wordt eval als de modal window wordt create	, (als we op de originele page op 'Show modal' click 	, 
/ Als de ajax response terugkomt	, 
/s
Wicket.Ajax.Call.processEvaluation.evaluate (wicket-ajax-jqu…344000.js:1204)
						eval(script);
script="clientTimeVariable = new Date().getTime();"
script="(function(){var settings = ...}								this undefined TODO
script="window.defaultStatus='Server parsetime: 6.687s, Client parsetime: ' + (new Date().getTime() - clientTimeVariable)/1000 +  's';"
FunctionsExecuter.processNext.run (wicket-ajax-jqu…6344000.js:157)
jQuery.extend.proxy.proxy (jquery-2.2.0-ve…6344000.js:492)
FunctionsExecuter.processNext (wicket-ajax-jqu…6344000.js:172)
FunctionsExecuter.start (wicket-ajax-jqu…6344000.js:184)
Wicket.Ajax.Call.doAjax.jQuery.ajax.complete (wicket-ajax-jqu…6344000.js:729)
jQuery.Callbacks.fire (jquery-2.2.0-ve…344000.js:3182)
jQuery.Callbacks.self.fireWith (jquery-2.2.0-ve…344000.js:3312)
done (jquery-2.2.0-ve…344000.js:8769)
jQuery.ajaxTransport.send.callback (jquery-2.2.0-ve…344000.js:9120)

/c
Wicket.Window.bindInit (modal-ver-1484236344000.js:422)
/ CLOSE LINK ON MODALWINDOW 
			this.caption.getElementsByTagName("a")[0].onclick = Wicket.bind(this.settings.onCloseButton, this);
/cb
Wicket.Window.show (modal-ver-1484236344000.js:672)
			// bind the events
			this.bindInit();
/cb
(anonymous function) (VM6865:15)
/=
window.setTimeout(function(){
  Wicket.Window.create(settings).show();			/ uit settings-script	,
})




/ SERVER	, 
/s
	ModalWindow$CloseButtonBehavior.respond(AjaxRequestTarget) line: 987	
	ModalWindow$CloseButtonBehavior(AbstractDefaultAjaxBehavior).onRequest() line: 593	
	RequestListenerInterface.internalInvoke(Component, Object) line: 258	
	RequestListenerInterface.invoke(IRequestableComponent, Behavior) line: 241	
	ListenerInterfaceRequestHandler.invokeListener() line: 248	

this	ListenerInterfaceRequestHandler  (id=12816)	
	pageComponentProvider	PageAndComponentProvider  (id=12817)	
		component	ModalWindow  (id=12828)	
				id	"content" (id=12986)	
			closeButtonCallback	ModalWindowPage_my$3  (id=12831)	
			data	Object[4]  (id=12833)	
				[0]	MetaDataEntry<T>  (id=12885)	
				[1]	ModalWindow$CloseButtonBehavior  (id=12820)			<-
				[2]	Behaviors$BehaviorIdList  (id=12886)	
					[0]	ModalWindow$CloseButtonBehavior  (id=12820)		<-	 behavior met index 0	,
					[1]	ModalWindow$WindowClosedBehavior  (id=12887)	<-	behavior met index 1	,
				[3]	ModalWindow$WindowClosedBehavior  (id=12887)		<-	

				Behavior behavior = getComponent().getBehaviorById(behaviorId);
				listenerInterface.invoke(getComponent(), behavior);
/cb
	ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 234	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ intermezzo

public class ModalWindow extends Panel

	private CloseButtonCallback closeButtonCallback = null;
	private WindowClosedCallback windowClosedCallback = null;

	public interface CloseButtonCallback extends IClusterable
	{
		boolean onCloseButtonClicked(AjaxRequestTarget target);
	}

	public interface WindowClosedCallback extends IClusterable
	{
		void onClose(AjaxRequestTarget target);
	}


	private void init()
	{
		add(newCloseButtonBehavior());
		add(new WindowClosedBehavior());

		// install a default callback that will force
		// WindowClosedBehavior to be executed
		setWindowClosedCallback(new WindowClosedCallback()		/ TODO
		{
			@Override
			public void onClose(AjaxRequestTarget target)
			{
				// noop
			}
		});

	public ModalWindow setWindowClosedCallback(final WindowClosedCallback callback)
	{
		windowClosedCallback = callback;
		return this;
	}

	private class WindowClosedBehavior extends AbstractDefaultAjaxBehavior
	{
		private static final long serialVersionUID = 1L;

		@Override
		protected void respond(final AjaxRequestTarget target)
		{
			shown = false;

			if (windowClosedCallback != null)
			{
				windowClosedCallback.onClose(target);
			}
		}
	}

	protected class CloseButtonBehavior extends AbstractDefaultAjaxBehavior
	{
		private static final long serialVersionUID = 1L;

		public CloseButtonBehavior()
		{
		}

		@Override
		protected final void respond(final AjaxRequestTarget target)
		{
			if ((closeButtonCallback == null) ||
				(closeButtonCallback.onCloseButtonClicked(target)))
			{
				close(target);
			}
		}
	}



/ Einde intermezzo

/ 7	. 

-icketMessage: Method onRequest of interface org.apache.wicket.behavior.IBehaviorListener targeted at org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow$WindowClosedBehavior@dc12e84 on component [ModalWindow [Component id = modal]] threw an exception

-rw-rw-r--+ 1 jboss jboss 44148985 Jan 16 15:18 tms-pnltms-26156-2016.12_build4959.zip

/ 7	. 


/ Einde MODALWINDOW PAGE SELF

/ MODALWINDOW PANEL SELF

/ 7	. 

/ we vergeten expres de modal2.setCloseButtonCallback

public class ModalWindowPage_my extends WebPage {

		// Modal window met panel
		ModalWindow modalWindow2=new ModalWindow("modal2");
		add(modalWindow2);
		...
		// for (x) on modal window, and link on the panel	,
		modalWindow2.setWindowClosedCallback(new ModalWindow.WindowClosedCallback() {
			
			@Override
			public void onClose(AjaxRequestTarget target) {
				...
			}
		});

/ SERVER	, 

/ Als we .setCloseButtonCallback niet use	, is closeButtonCallback==null	, 
/ Als we .setWindowClosedCallback niet use	, is windowClosedCallback == null	, 
/ Deze worden used in ModalWindow.getWindowOpenJavaScript()	, zodat al dan niet settings.onClose en settings.onCloseButton worden def	, deze overwrite de defaults	, 
/ In modal.js zien we defaults	,
		initialize: function(settings) {
			this.settings = Wicket.Object.extend({
				onCloseButton: Wicket.bind(function() {
					/* On firefox on Linux, at least, we need to blur() textfields, etc.
					 * to get it to update its DOM model. Otherwise you'll lose any changes
					 * made to the current form component you're editing.
					 */
					this.caption.getElementsByTagName("a")[0].focus();
					this.caption.getElementsByTagName("a")[0].blur();
					this.close();
					return false;
				}, this), /* called when close button is clicked */

				onClose: function() { }, /* called when window is closed */

/ Als we wel .setCloseButtonCallback use	, dan 
	settings.onCloseButton = function() { Wicket.Ajax.ajax({"u":"./modal_my?0-2.IBehaviorListener.0-modal","c":"modal3"});;return false;};
/ Deze doet ajax call	, en de behavior 0 doet wat je in de closeButtonCallback defs	, en calls .close(), die ervoor zorget dat in de ajax response doet win.current.close()	, dus toch de .close, maar nadat op de server is geweest	, ipv de default	, die niet eerst naar de server gaat	, 
/ Dus de default onCloseButton doet alleen .close()	, 


$ vi ModalWindow.java

	public ModalWindow setCloseButtonCallback(final CloseButtonCallback callback)
	{
		closeButtonCallback = callback;
		return this;
	}

	public ModalWindow setWindowClosedCallback(final WindowClosedCallback callback)
	{
		windowClosedCallback = callback;
		return this;
	}

/ 
/ stack	,
/s
	ModalWindow.getWindowOpenJavaScript() line: 1015	
	ModalWindow.show(IPartialPageRequestHandler) line: 370	
			getContent().setVisible(true);
			target.add(this);												/ this=ModalWindow	,
			target.appendJavaScript(getWindowOpenJavaScript());
			show=true;
/cb
	ModalWindowPage_my$7.onClick(AjaxRequestTarget) line: 98	
				((ModalWindow)ModalWindowPage_my.this.get("modal2")).show(target);
/cb
	AjaxLink$1.onEvent(AjaxRequestTarget) line: 84	
				onClick(target);											/ AjaxEventBehavior	,
/cb
	AjaxLink$1(AjaxEventBehavior).respond(AjaxRequestTarget) line: 155	
		onEvent(target);
/cb
	AjaxLink$1(AbstractDefaultAjaxBehavior).onRequest() line: 593	
		WebApplication app = (WebApplication)getComponent().getApplication();
		AjaxRequestTarget target = app.newAjaxRequestTarget(getComponent().getPage());

		RequestCycle requestCycle = RequestCycle.get();
		requestCycle.scheduleRequestHandlerAfterCurrent(target);

		respond(target);
/cb
	RequestListenerInterface.internalInvoke(Component, Object) line: 258	
	RequestListenerInterface.invoke(IRequestableComponent, Behavior) line: 241	
	ListenerInterfaceRequestHandler.invokeListener() line: 248	
				Behavior behavior = getComponent().getBehaviorById(behaviorId);
				listenerInterface.invoke(getComponent(), behavior);
/cb
	ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 234	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/ debug	,
/s
ModalWindow.getWindowOpenJavaScript() line: 1019	
		if (isCustomComponent())
		{
			buffer.append("var element = document.getElementById(\"");
			buffer.append(getContentMarkupId());
			buffer.append("\");\n");
		}
var element = document.getElementById("content7");
		...
		if ((closeButtonCallback != null) || (haveCloseCallback == false))
/n
		{
			CloseButtonBehavior behavior = getBehaviors(CloseButtonBehavior.class).get(0);
/n
			buffer.append("settings.onCloseButton = function() { ");
/n
			buffer.append(behavior.getCallbackScript());
/n
			buffer.append(";return false;};\n");
/n
		}



/ we zien in de ajax response van de link 'Show modal2'	, dat er GEEN is	,
	settings.onCloseButton 

/ we zien	,
settings.onClose = function() { Wicket.Ajax.ajax({"u":"./modal-window_my?0-1.IBehaviorListener.1-modal2","c":"modal26"}); };
window.setTimeout(function(){
  Wicket.Window.create(settings).show();
}, 0);
	
/ Inderdaad	, 
(anonymous function) (VM1232:15)
  Wicket.Window.create(settings).show();
/s
Wicket.Window.create (modal-ver-1484236344000.js:223)		/ eerst 1ste part	, Wicket.Window.create(settings)	, 
			Win = Wicket.Window;
		// create and return instance
		return new Win(settings);
/s
Wicket.Class.create (wicket-ajax-jqu…6344000.js:228)
/=
	Wicket.Class = {
		create: function () {
			return function () {									/ = Window.Wicket	, want 	Wicket.Window = Wicket.Class.create();
				this.initialize.apply(this, arguments);			<-
/s
Wicket.Window.initialize (modal-ver-1484236344000.js:277)
			this.settings = Wicket.Object.extend({
				onCloseButton: Wicket.bind(function() {
					/* On firefox on Linux, at least, we need to blur() textfields, etc.
					 * to get it to update its DOM model. Otherwise you'll lose any changes
					 * made to the current form component you're editing.
					 */
					this.caption.getElementsByTagName("a")[0].focus();
					this.caption.getElementsByTagName("a")[0].blur();
					this.close();
					return false;
				}, this), /* called when close button is clicked */

/c
(anonymous function) (VM1232:15)
  Wicket.Window.create(settings).show();
/s
Wicket.Window.show (modal-ver-1484236344000.js:672)
			// bind the events
			this.bindInit();
/s
Wicket.Window.bindInit (modal-ver-1484236344000.js:444)
			this.caption.getElementsByTagName("a")[0].onclick = Wicket.bind(this.settings.onCloseButton, this);

/t
Wicket.Window.show (modal-ver-1484236344000.js:672)
			this.bindInit();
/d
			this.adjustOpenWindowsStatusOnShow();
/s
Wicket.Window.adjustOpenWindowsStatusOnShow (modal-ver-1484236344000.js:761)
			// keep reference to this window
			Wicket.Window.current = this;

/ 7	. 

/ we click (x)
/s
(anonymous function) (modal-ver-1484236344000.js:308)
/=
				onCloseButton: Wicket.bind(function() {
					/* On firefox on Linux, at least, we need to blur() textfields, etc.
					 * to get it to update its DOM model. Otherwise you'll lose any changes
					 * made to the current form component you're editing.
					 */
					this.caption.getElementsByTagName("a")[0].focus();
					this.caption.getElementsByTagName("a")[0].blur();
					this.close();												<-
					return false;
				}, this), /* called when close button is clicked */
/s
Wicket.Window.close (modal-ver-1484236344000.js:836)
			if (force !== true) {
				// call onclose handler
				this.settings.onClose();
/s
settings.onClose (VM1232:13)
	settings.onClose = function() { Wicket.Ajax.ajax({"u":"./modal-window_my?0-1.IBehaviorListener.1-modal2","c":"modal26"}); };

/ Dus gaat ajax call doen	,


/ ok ok ok 


/ Einde MODALWINDOW PANEL SELF

/ MODALWINDOW AND PAGES

/ 	7. 

/ In ModalWindow wordt altijd in 1ste instantie
		private void init()
	{
		add(empty = new WebMarkupContainer(getContentId()));

/ Als we een page in het modal winoow willen 	, moeten we call	,

	public ModalWindow setPageCreator(final PageCreator creator)
	{
		setContent(empty);
/s
		replace(component);	/ doet niets,
/t
		pageCreator = creator;
		return this;
	}

/ Daardoor blijft child "content" empty	, 

/ Later	, 
		protected boolean isCustomComponent()
	{
		return getContent() != empty;
	} 


/ 7	. 

public class ModalWindow extends Panel

	private void init()
	{
		add(empty = new WebMarkupContainer(getContentId()));
		...
	}

	public void show(final IPartialPageRequestHandler target)
	{
		if (shown == false)
		{
			getContent().setVisible(true);
			target.add(this);
			target.appendJavaScript(getWindowOpenJavaScript());
			shown = true;
		}
	}
/s
	protected final String getWindowOpenJavaScript()
		if (isCustomComponent() == false)
		{
			Page page = createPage();

/s
	private Page createPage()
	{
		else
		{
			return pageCreator.createPage();
		}
	}

/ 7	. 

/ Vraag de page	, Geef 
http://localhost:9090/wicket-examples-step-by-step/ajax/modal_my
/s
		modalWindow.setPageCreator(new ModalWindow.PageCreator() {
			...
/s
ModalWindow.setPageCreator(ModalWindow$PageCreator) line: 327	
		setContent(empty);
/s
ModalWindow.setContent(Component) line: 935	
		component.setOutputMarkupPlaceholderTag(true);	/ TODO
/s
	/**
	 * Render a placeholder tag when the component is not visible. The tag is of form:
	 * &lt;componenttag style="display:none;" id="markupid"/&gt;. This method will also call
	 * <code>setOutputMarkupId(true)</code>.
	 * 
	 * This is useful, for example, in ajax situations where the component starts out invisible and
	 * then becomes visible through an ajax update. With a placeholder tag already in the markup you
	 * do not need to repaint this component's parent, instead you can repaint the component
	 * directly.
	 * 
	 * When this method is called with parameter <code>false</code> the outputmarkupid flag is not
	 * reverted to false.
	 * 
	public final Component setOutputMarkupPlaceholderTag(final boolean outputTag)
				setOutputMarkupId(true);
				setFlag(FLAG_PLACEHOLDER, true);
/t
ModalWindow.setContent(Component) line: 935
		component.setOutputMarkupPlaceholderTag(true);	/ TODO
/d
		component.setVisible(false);
		replace(component);			/ niets	,
		shown = false;
		pageCreator = null;
		return this;

/ 7	. 

/ open modal window,	 click link 'Show modal'	,

/s
Daemon Thread [http-nio-9090-exec-105] (Suspended (breakpoint at line 1015 in ModalWindow))	
	ModalWindow.getWindowOpenJavaScript() line: 1015	

		if (isCustomComponent())
/n
		{
			buffer.append("var element = document.getElementById(\"");
			buffer.append(getContentMarkupId());
			buffer.append("\");\n");
		}

		if (isCustomComponent() == false)
/j
		{
			Page page = createPage();											/ deze wordt later load vanuit js	,
			...												/ see debug beneden	,
/cb
	ModalWindow.show(IPartialPageRequestHandler) line: 370	
			getContent().setVisible(true);							// als getContent()==WebMarkupContainer("content")	, ? TODO
			target.add(this);
			target.appendJavaScript(getWindowOpenJavaScript());
			shown = true;

	ModalWindowPage_my$1.onClick(AjaxRequestTarget) line: 26	
				((ModalWindow) ModalWindowPage_my.this.get("modal")).show(target);
/cb
	AjaxLink$1.onEvent(AjaxRequestTarget) line: 84	
	AjaxLink$1(AjaxEventBehavior).respond(AjaxRequestTarget) line: 155	
	AjaxLink$1(AbstractDefaultAjaxBehavior).onRequest() line: 593	
	RequestListenerInterface.internalInvoke(Component, Object) line: 258	
	RequestListenerInterface.invoke(IRequestableComponent, Behavior) line: 241	
	ListenerInterfaceRequestHandler.invokeListener() line: 248	
				Behavior behavior = getComponent().getBehaviorById(behaviorId);
				listenerInterface.invoke(getComponent(), behavior);
/cb
	ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 234	
			component = getComponent();										/ uit url	,
		invokeListener();
/cb
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/ debug
/s
ModalWindow.getWindowOpenJavaScript() line: 1050	
		if (isCustomComponent() == false)
		{
			Page page = createPage();
/s
ModalWindow.createPage() line: 838	
		if (pageCreator == null)
		{
			return null;
		}
		else
		{
			return pageCreator.createPage();
/s
ModalWindowPage_my$2.createPage() line: 37	
				return new ModalContentPage_my(){								/ onze code	,
					...
/t
ModalWindow.getWindowOpenJavaScript() line: 1058	
			Page page = createPage();
/d
			else
			{
				IRequestHandler handler = new RenderPageRequestHandler(new PageProvider(page));	
				pageUrl = requestCycle.urlFor(handler);

/ wordt key:value=url:page ergens stored? Wat gebeurt er als je de page load	?
/ TODO
/ See voor load de devolgende 7	, 

			appendAssignment(buffer, "settings.src", pageUrl);


/ 7	. 

/ Hoe komt de page in het modal window?
/ ajax response's XML word eval		, en daardoor	,
/s
Wicket.Window.load (modal-ver-1484236344000.js:617)
				this.content.contentWindow.location.replace(this.settings.src);
this.settings.src="./wicket/page?32"									

/ Daardoor wordt de page loaded	, en komt in modal window	, 

/ debug	,

/ ajax response's XML word eval		, en daardoor	,
/s
Wicket.Window.load (modal-ver-1484236344000.js:617)
				this.content.contentWindow.location.replace(this.settings.src);
this.settings.src="./wicket/page?32"									

/c
RequestCycle.processRequest() line: 220	
			IRequestHandler handler = resolveRequestHandler();	/ handler	RenderPageRequestHandler  (id=23185)		<- nu
				execute(handler);							<- straks	,
/s
RequestCycle.resolveRequestHandler() line: 189	
		return requestMapper.mapRequest(request);
/s
SystemMapper(CompoundRequestMapper).mapRequest(Request) line: 150	
		for (MapperWithScore mapperWithScore : list)
		{
			IRequestMapper mapper = mapperWithScore.getMapper();
			IRequestHandler handler = mapper.mapRequest(request);
/s
PageInstanceMapper.mapRequest(Request) line: 77	
			Url url = request.getUrl();
wicket/page?9
					PageProvider provider = new PageProvider(info.getPageInfo().getPageId(), renderCount);
					// render page
					return new RenderPageRequestHandler(provider);
/s
RenderPageRequestHandler.<init>(IPageProvider) line: 90	
		this(pageProvider, RedirectPolicy.AUTO_REDIRECT);
/s
RenderPageRequestHandler.<init>(IPageProvider, RenderPageRequestHandler$RedirectPolicy) line: 112	
		if (pageProvider.hasPageInstance())

pageProvider	PageProvider  (id=23285)	
	pageId	Integer  (id=23257)				9
	pageInstance	null	

		{
			if (Session.exists())
			{
				// WICKET-5499
				Session.get().getPageManager().touchPage(pageProvider.getPageInstance());
/s
PageProvider.getPageInstance() line: 169	
		if (pageInstance == null)
		{
			resolvePageInstance(pageId, pageClass, pageParameters, renderCount);
/s
/c
	PageStoreManager$PersistentRequestAdapter(RequestAdapter).findPage(int) line: 125	
	PageStoreManager$PersistentRequestAdapter.getPage(int) line: 346	
	PageStoreManager(AbstractPageManager).getPage(int) line: 82	
	PageAccessSynchronizer$2(PageManagerDecorator).getPage(int) line: 50	
	PageAccessSynchronizer$2.getPage(int) line: 246	
	DefaultMapperContext.getPageInstance(int) line: 113	
	PageProvider.getStoredPage(int) line: 299	
	PageProvider.resolvePageInstance(Integer, Class<IRequestablePage>, PageParameters, Integer) line: 264	
	PageProvider.getPageInstance() line: 169	
/ TODO Afmaken	






/ Einde MODALWINDOW AND PAGES



/ 7	. 

/ MODALWINDOW PANEL SELF

/ MORGENOCHTEND

	public ModalContent1Page(final PageReference modalWindowPage, final ModalWindow window)
	{
		add(new AjaxLink<Void>("closeOK")
		{
			@Override
			public void onClick(AjaxRequestTarget target)
			{
				if (modalWindowPage != null)
					((ModalWindowPage)modalWindowPage.getPage()).setResult("Modal window 1 - close link OK");
				window.close(target);

/ vergl met behaviors op window	, ModalWindow.

      protected class CloseButtonBehavior extends AbstractDefaultAjaxBehavior
        {
                private static final long serialVersionUID = 1L;

                public CloseButtonBehavior()
                {
                }

                @Override
                protected final void respond(final AjaxRequestTarget target)
                {
                        if ((closeButtonCallback == null) ||
                                (closeButtonCallback.onCloseButtonClicked(target)))
                        {
                                close(target);

/ Deze doet ook close	, 
/ en Wat doet 2de behavior , wat hier in ModalContent1Page's link niet hoeft	,
/ TODO

AjxFrmPageTest fails

/ Hoe test create voor modal windows

/ Einde MORGENOCHTEND


/ Einde MODALWINDOW PANEL SELF

/ MODALWINDOW SAMENVATTING

/ 7	. 

/ ModalWindow.setContent wordt called als we de originele page load	, want de ctor van deze page	,
		modalWindow.setPageCreator(new ModalWindow.PageCreator() {
		modalWindow2.setContent(new ModalMyPanel(ModalWindow.CONTENT_ID){

/ In het 1ste geval 	,
	public ModalWindow setPageCreator(final PageCreator creator)
	{
		setContent(empty);
		pageCreator = creator;

	protected boolean isCustomComponent()
	{
		return getContent() != empty;
	}

	protected final String getWindowOpenJavaScript()
		if (isCustomComponent() == false)
			appendAssignment(buffer, "settings.src", pageUrl);

/ en in js	,
	Wicket.Window.prototype = {
		isIframe: function() {
			return this.settings.src != null;
		},
		createDOM: function() {
			var markup = Wicket.Window.getMarkup(idWindow, idClassElement, idCaption, idFrame,
					idTop, idTopLeft, idTopRight, idLeft, idRight, idBottomLeft, idBottomRight,
					idBottom, idCaptionText, this.isIframe());

	Wicket.Window.getMarkup = function(idWindow, idClassElement, idCaption, idContent, idTop, idTopLeft, idTopRight, idLeft, idRight, idBottomLeft, idBottomRight, idBottom, idCaptionText, isFrame) {
		var s =
					if (isFrame) {
						s+= "<iframe frameborder=\"0\" id=\""+idContent+"\" allowtransparency=\"false\" style=\"height: 200px\" class=\"wicket_modal\"></iframe>";


/ 7	. 

/ als we  'Show modal' click	, komt de server terug met	, dus met js code om de window te create	,
<evaluate><![CDATA[(function(){

window.setTimeout(function(){
  Wicket.Window.create(settings).show();						<-
}, 0);

var settings = new Object();
settings.minWidth=200;
settings.minHeight=200;
settings.className="w_blue";
settings.width=600;
settings.height=400;
settings.resizable=true;
settings.src="./wicket/page?7";
settings.mask="semi-transparent";
settings.autoSize=false;
settings.unloadConfirmation=true;
settings.onClose = function() { Wicket.Ajax.ajax({"u":"./modal-window_my?0-2.IBehaviorListener.1-modal","c":"modal4"}); };
settings.onCloseButton = function() { Wicket.Ajax.ajax({"u":"./modal-window_my?0-2.IBehaviorListener.0-modal","c":"modal4"});;return false;};

/ .done calls eval( dit script)

/ 13 . 

/ omdat	,
	Wicket.Window=return function () {					/ ctor	,
				this.initialize.apply(this, arguments);
	}
/ Wicket.Window.create(settings) doet: 
	new Wicket.Window(settings)
/ dat betekent	,
	Wicket.Window.prototype.initialize(settings)
/ sets this.settings={onCloseButton fct, onClose fct, ...}

/ 13	. 

	this.show()
/s
		this.createDOM(); 		/ DOM van de window	, NIET van de page die er in komt	, we zien nu geen iframe	,

/ creates
				"<div class=\"wicket-modal\" id=\""+idWindow+"\" role=\"dialog\" aria-labelledBy=\""+idCaptionText+"\" style=\"top: 10px; left: 10px; width: 100px;\">
					<form style='background-color:transparent;padding:0px;margin:0px;border-width:0px;position:static'>"+
						"<div id=\""+idClassElement+"\">"+
...
					if (isFrame) {
						s+= "<iframe frameborder=\"0\" id=\""+idContent+"\" allowtransparency=\"false\" style=\"height: 200px\" class=\"wicket_modal\"></iframe>";
					} else {
						s+= "<div id='"+idContent+"' class='w_content_container'></div>";

...
/ In HTML in de browser zien we 
	<iframe ...>
		#document	
			<html>
				<head></head>
				<body></body>
/ Klopt	, hieronder zien we in this Wicket.Window inst	, this.content=iframe	, die een Window heeft	, die een document document heeft	,

			var _ = function(name) { return document.getElementById(name); };

			this.window = _(idWindow);
			this.classElement = _(idClassElement);
			this.caption = _(idCaption);
			this.content = _(idFrame);			<iframe>
				contentWindow Window
					document
					location Location
			this.top = _(idTop);
			this.topLeft = _(idTopLeft);
			this.topRight = _(idTopRight);
			this.left = _(idLeft);
			this.right = _(idRight);
			this.bottomLeft = _(idBottomLeft);
			this.bottomRight = _(idBottomRight);
			this.bottom = _(idBottom);
			this.captionText = _(idCaptionText);

/t
	 this.show()
/d
			if (this.isIframe()) {
				// load the file
				this.load();
/s
					this.content.contentWindow.location.replace(this.settings.src);	/ ./wicket/page?7		/ Deze zien we niet in location TODO
/t
	this.show
			this.bindInit();
/s
				this.caption.getElementsByTagName("a")[0].onclick = Wicket.bind(this.settings.onCloseButton, this);
/t
	this.show
			this.adjustOpenWindowsStatusOnShow();
/s
				Wicket.Window.current = this;

/ dus in Wicket.Window , die er altijd is	, wordt de Wicket.Window inst saved	, in current	,
/ Wicket.Window.current 
	top=div#...				DOM elem 
	content=<iframe>		DOM elem
	...
	settings={
		onCloseButton=fct die ajax call doet	, 
		onClose=fct die 2de ajax call doet	, 

/ 13

/ click (x)

/ .onCloseButton doet ajax call , .done calls eval(script met 	win.current.close())
/ Wicket.Window.prototype.close() calls this.settings.doClose()	, de 2de ajax call	, 

/ 13	. 

/ eval(script met result )

/ 7	. 

/ we moeten in het template	(DOM),

<a wicket:id="show">Show modal</a>
<div wicket:id="modal"></div>					<-
<a wicket:id="show2">Show modal2</a>
<div wicket:id="modal2"></div>					<-


		// Modal window met page
		final ModalWindow modalWindow=new ModalWindow("modal");
		add(modalWindow);
		...
		final ModalWindow modalWindow2=new ModalWindow("modal2");
		add(modalWindow2);

/ De div ... is een andere	, 
/ Waarom moeten div#modal en div#modal2 er zijn	, waarom moeten we de ModalWindow add aan de Page?

/ we moeten weten naar welke page we terugmoeten, als we close de window	, en in Java wordt modalWindow.getPage() gedaan	, dus moet de page als een parent hebben	, 

/ Als je click op 'Show Modal'	, dan wordt er voor onCloseButton een url gemaakt: modal-window_my?2-1.IBehaviorListener.1-modal
/ Daar zien we de page terug:  modal-window_my	, dus moet 

Component
	public final CharSequence urlFor(final Behavior behaviour,
		final RequestListenerInterface listener, final PageParameters parameters)
	{
		int id = getBehaviorId(behaviour);
		IRequestHandler handler = createRequestHandler(listener, parameters, id);		<-
		return getRequestCycle().urlFor(handler);
this=ModalWindow
/ en in <- wordt getPage()	, en zo vindt hij de page	, die in de url terecht komt	,
 
/ Die url wordt gemaakt in 	,
Daemon Thread [http-nio-9090-exec-93] (Suspended) (out of synch)	
	owns: NioChannel  (id=19780)	
	RequestCycle.urlFor(IRequestHandler) line: 535	
	ModalWindow(Component).urlFor(Behavior, RequestListenerInterface, PageParameters) line: 3349	
	ModalWindow$WindowClosedBehavior(AbstractAjaxBehavior).getCallbackUrl() line: 88	
	ModalWindow$WindowClosedBehavior(AbstractDefaultAjaxBehavior).renderAjaxAttributes(Component, AjaxRequestAttributes) line: 201	
	ModalWindow$WindowClosedBehavior(AbstractDefaultAjaxBehavior).renderAjaxAttributes(Component) line: 185	
	ModalWindow$WindowClosedBehavior(AbstractDefaultAjaxBehavior).getCallbackScript(Component) line: 465	
	ModalWindow$WindowClosedBehavior(AbstractDefaultAjaxBehavior).getCallbackScript() line: 453	
	ModalWindow.getWindowOpenJavaScript() line: 1110	
	ModalWindow.show(IPartialPageRequestHandler) line: 370	
			buffer.append("settings.onClose = function() { ");
			buffer.append(behavior.getCallbackScript());
/cb
	ModalWindowMyPage$1.onClick(AjaxRequestTarget) line: 27 (out of synch)	
	AjaxLink$1.onEvent(AjaxRequestTarget) line: 84	
	AjaxLink$1(AjaxEventBehavior).respond(AjaxRequestTarget) line: 155	
	AjaxLink$1(AbstractDefaultAjaxBehavior).onRequest() line: 593	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 57	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 606	
	RequestListenerInterface.internalInvoke(Component, Object) line: 258	
	RequestListenerInterface.invoke(IRequestableComponent, Behavior) line: 241	
	ListenerInterfaceRequestHandler.invokeListener() line: 248	
	ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 234	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ 7	. 

/ Bij Panel in ModalWindow zien we	, 
"(function(){
	Wicket.Ajax.ajax({"u":"./modal-window_my?2-1.IBehaviorListener.0-modal2-content-close","c":"close17","e":"click"});})();
	(function(){
var element = document.getElementById("content15");
var settings = new Object();
settings.minWidth=200;
settings.minHeight=200;
settings.className="w_blue";
settings.width=600;
settings.height=400;
settings.resizable=true;
settings.element=element;						<- ipv settings.src="./wicket/page?7"
settings.mask="semi-transparent";
settings.autoSize=false;
settings.unloadConfirmation=true;
settings.onClose = function() { Wicket.Ajax.ajax({"u":"./modal-window_my?2-1.IBehaviorListener.1-modal2","c":"modal214"}); };
settings.onCloseButton = function() { Wicket.Ajax.ajax({"u":"./modal-window_my?2-1.IBehaviorListener.0-modal2","c":"modal214"});;return false;};
window.setTimeout(function(){
  Wicket.Window.create(settings).show();
}, 0);

})();"

/ we zien dus dat 
	Wicket.Ajax.ajax({"u":"./modal-window_my?2-1.IBehaviorListener.0-modal2-content-close","c":"close17","e":"click"});})();

/ niet in <head> op de originele page komt	, 
/ See MODALWINDOW PANEL DEBUG

/ 7	. 



/ MODALWINDOW SAMENVATTING

/ MODALWINDOW PANEL	DEBUG

/ we click 'Show modal2'


/s
/cb
	ChildFirstHeaderRenderStrategy.renderHeader(HtmlHeaderContainer, HtmlHeaderContainer$HeaderStreamState, Component) line: 54	
		// First the application level headers
		renderApplicationLevelHeaders(headerContainer);
/cb
	AjaxRequestHandler$1(PartialPageUpdate).writeHeaderContribution(Response, Component) line: 495	
			IHeaderRenderStrategy strategy = AbstractHeaderRenderStrategy.get();
			strategy.renderHeader(header, null, component);
/cb
	AjaxRequestHandler$1(XmlPartialPageUpdate).writeComponent(Response, String, Component, String) line: 101	
/=
	protected void writeComponent(Response response, String markupId, Component component, String encoding)
markupId	"modal224" (id=22618)	
component	ModalWindow  (id=22599)	
/cb
	AjaxRequestHandler$1(PartialPageUpdate).writeComponents(Response, String) line: 245	
		for (Map.Entry<String, Component> stringComponentEntry : markupIdToComponent.entrySet())
this	AjaxRequestHandler$1  (id=22605)	
	markupIdToComponent	LinkedHashMap<K,V>  (id=22630)	
		[0]	LinkedHashMap$Entry<K,V>  (id=22616)	
			key	"modal224" (id=22618)	
			value	ModalWindow  (id=22599)	
		{
			final Component component = stringComponentEntry.getValue();

			if (!containsAncestorFor(component))
			{
				writeComponent(response, component.getAjaxRegionMarkupId(), component, encoding);
/cb
	AjaxRequestHandler$1(PartialPageUpdate).writeTo(Response, String) line: 158	
			writeComponents(response, encoding);
/cb
	AjaxRequestHandler.respond(IRequestCycle) line: 358	
		update.writeTo(bodyResponse, encoding);
/cb
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	

	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
			respond(handler);
/cb
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 97	
			respond(handler);	/ handler	ListenerInterfaceRequestHandler  (id=22598)	
			execute(scheduled);	 / scheduled	AjaxRequestHandler  (id=22600)	
/cb
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
/ debug	,
/s
AjaxRequestHandler$1(PartialPageUpdate).writeHeaderContribution(Response, Component) line: 495	
		if (header == null)
/n
this	AjaxRequestHandler$1  (id=22605)	
	header	PartialPageUpdate$PartialHtmlHeaderContainer  (id=22610)	
		headerResponse	ResourceAggregator  (id=22710)	
			domReadyItemsToBeRendered	ArrayList<E>  (id=22713)	
[]
			IHeaderRenderStrategy strategy = AbstractHeaderRenderStrategy.get();

			strategy.renderHeader(header, null, component);
/s
ChildFirstHeaderRenderStrategy.renderHeader(HtmlHeaderContainer, HtmlHeaderContainer$HeaderStreamState, Component) line: 50	
			new DeepChildFirstVisitor()																<-
			{
				@Override
				public void component(final Component component, final IVisit<Void> visit)
				{
					if (component != rootComponent)
					{
						component.internalRenderHead(headerContainer);

/s
ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component) line: 51	
rootComponent	ModalWindow  (id=22599)	
		return visit(rootComponent, visitor);
/s
ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component, Visit<Void>) line: 87	
child [ModalMyPanel [Component id = content]]
				visit(child, visit);
/s
ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component, Visit<Void>) line: 87	
child [AjaxLink [Component id = close]]
				visit(child, visit);
/s
ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component, Visit<Void>) line: 96	
root Component [AjaxLink [Component id = close]]
		// visit "this"
		component(rootComponent, visit);
/s
ChildFirstHeaderRenderStrategy$1.component(Component, IVisit<Void>) line: 85	
			new DeepChildFirstVisitor()
			{
				@Override
				public void component(final Component component, final IVisit<Void> visit)
				{
					if (component != rootComponent)
					{
						component.internalRenderHead(headerContainer);								<-
/s
ModalMyPanel$1(Component).internalRenderHead(HtmlHeaderContainer) line: 2684	
			IHeaderResponse response = container.getHeaderResponse();
response	ResourceAggregator  (id=22710)	
	domReadyItemsToBeRendered	ArrayList<E>  (id=22713)	
[]
			// Then ask all behaviors
			for (Behavior behavior : getBehaviors())
behavior	AjaxLink$1  (id=22789)	
			{
				if (isBehaviorAccepted(behavior))
				{
					if (response.wasRendered(behavior) == false)
					{
						behavior.renderHead(this, response);
AjaxLink$1(AjaxEventBehavior).renderHead(Component, IHeaderResponse) line: 90	
		if (component.isEnabledInHierarchy())
		{
			CharSequence js = getCallbackScript(component);
/s
AjaxLink$1(AbstractDefaultAjaxBehavior).getCallbackScript(Component) line: 465	
		CharSequence ajaxAttributes = renderAjaxAttributes(component);
/s
AjaxLink$1(AbstractDefaultAjaxBehavior).renderAjaxAttributes(Component) line: 185	
		AjaxRequestAttributes attributes = getAttributes();
		return renderAjaxAttributes(component, attributes);
/s
/ TODO Afmaken


/c TODO
/s
	PartialPageUpdate$PartialHeaderResponse.render(HeaderItem) line: 601	
					else
					{
						PartialPageUpdate.this.domReadyJavaScripts.add(((OnDomReadyHeaderItem)item).getJavaScript());
/cb
	ResourceAggregator.renderSeperateEventScripts() line: 370	
		for (HeaderItem curItem : domReadyItemsToBeRendered) / [OnDomReadyHeaderItem('Wicket.Ajax.ajax({"u":"./modal-window_my?5-1.IBehaviorListener.0-modal2-content-close","c":"close27","e":"click"});')]
		{
			if (markItemRendered(curItem))
			{
				getRealResponse().render(curItem);
/cb
	ResourceAggregator.close() line: 288	
		else
		{
			renderSeperateEventScripts();
/cb
	AjaxRequestHandler$1(PartialPageUpdate).writeComponents(Response, String) line: 262	
			// now, close the response (which may render things)
			header.getHeaderResponse().close();
/cb
	AjaxRequestHandler$1(PartialPageUpdate).writeTo(Response, String) line: 158	
			// process added components
			writeComponents(response, encoding);
/cb
	AjaxRequestHandler.respond(IRequestCycle) line: 358	
		update.writeTo(bodyResponse, encoding);
/cb
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 97	
			respond(handler);	 / handler	ListenerInterfaceRequestHandler  (id=22493)	
			execute(scheduled);	/ scheduled	AjaxRequestHandler  (id=22494)	
/cb
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
			IRequestHandler handler = resolveRequestHandler();	 / handler	ListenerInterfaceRequestHandler  (id=22493)	
				execute(handler);
/cb
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	



/ Einde MODALWINDOW PANEL DEBUG



/ FEEDBACKPANEL

/ ws workspace-wicket7_7
/ proj wicket-examples-step-by-step
/ prog file:///home/eric/Devel/Java/Wicket/wicket-examples-step-by-step/src/main/java/org/apache/wicket/examples/ajax/builtin/FormPage.java 

$ vi file:///home/eric/Devel/Java/Wicket/wicket-examples-step-by-step/src/main/java/org/apache/wicket/examples/ajax/builtin/FormPage.java 



$ vi file:///home/eric/Devel/Java/Wicket/wicket-examples-step-by-step/src/main/java/org/apache/wicket/examples/ajax/builtin/AjaxApplication.java 
	protected void init()
		mountPage("form", FormPage.class);

$ vi file:///home/eric/Devel/Java/Wicket/wicket-examples-step-by-step/src/main/webapp/WEB-INF/web.xml 
  <filter>
    <filter-name>AjaxApplication</filter-name>
    <filter-class>org.apache.wicket.protocol.http.WicketFilter</filter-class>
    <init-param>
      <param-name>applicationClassName</param-name>
      <param-value>org.apache.wicket.examples.ajax.builtin.AjaxApplication</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>AjaxApplication</filter-name>
    <url-pattern>/ajax/*</url-pattern>
    <dispatcher>REQUEST</dispatcher>
    <dispatcher>INCLUDE</dispatcher>
  </filter-mapping>

/ we geven in chrome	,
http://localhost:9090/wicket-examples-step-by-step/ajax/form?0

$ vi org.apache.wicket.Component.class

	/**
	 * Registers an error feedback message for this component
	 * 
	 * @param message
	 *            The feedback message
	 */
	public final void error(final Serializable message)
	{
		getFeedbackMessages().error(this, message);
		addStateChange();
	}

	/**
	 * Registers a fatal feedback message for this component
	 * 
	 * @param message
	 *            The feedback message
	 */
	public final void fatal(final Serializable message)
	{
		getFeedbackMessages().fatal(this, message);
		addStateChange();
	}
	/**
	 * Registers an informational feedback message for this component
	 * 
	 * @param message
	 *            The feedback message
	 */
	public final void info(final Serializable message)
	{
		getFeedbackMessages().info(this, message);
		addStateChange();
	}

	/**
	 * Registers an success feedback message for this component
	 * 
	 * @param message
	 *            The feedback message
	 */
	public final void success(final Serializable message)
	{
		getFeedbackMessages().success(this, message);
		addStateChange();
	} 




/ Einde FEEDBACKPANEL





/ DEMO

I have created a screen on which you can undelete an incoterm for example. On the incoterm list screen there is a button, and when you click on it, you get the new screen with all the deleted incoterms. You can filter and sort them. On every row there is a undelete button. 

We want to test this screen. On this screen is a table. The crucial component of a wicket table is the so-called data provider. 

We only want to test wicket. So we mock the rest. Instead of doing a database query, we define the outcome, we just say what the outcome is. In case of wicket tables, it is the data provider which we want to mock.

maybe you think: how about ajax components? Because Wicket on the server gives us a part of the page, the JavaScript in the browser mixes this in. But you can test it. 

 

/ Einde DEMO

/ BUTTON IN FORM

/ proj wicket-examples-step-by-step
/ prog ButtonPage

/ het model van een button maakt altijd een value attr 	, of we een <input> of <button> hebben 	, 
/ er is ook altijd een name attr van een form component	, wicket maakt deze	, 

/ we zien in HTML	,

<script type="text/javascript">
/*<![CDATA[*/
Wicket.Event.add(window, "domready", function(event) { 
	Wicket.Ajax.ajax({"u":"./button?1-3.IBehaviorListener.0-form-ajx","m":"POST","c":"ajx2","f":"form1","sc":"ajx","e":"click","pd":true});;
;});
/*]]>*/
</script>

<form wicket:id="form" id="form1" method="post" action="./button?1-3.IFormSubmitListener-form">
	<input wicket:id="normal" type="submit" name="normal" id="normal3" value="Y">
	<input wicket:id="ajx" type="button" name="ajx" id="ajx2" value="A">

/ of	,

	<button wicket:id="normal">N</button>
	<button wicket:id="ajx" type="submit">A</button>

/ we zien hieronder dat de request/response met <input>s en <button>s precies hetzelfde gaat	, 
/ het verschil is dat de value attr van de input op het scherm verschijnt: in beide gevallen zien we een button: <input type="submit/button"> toont een button	, 
/ maar bij een <button> zien we de value attribute niet op het button	, we moeten deze in HTML geven : <button ...>N</button> bijvoorbeeld	, 

/ 13	. 

/ met de <inputs>	, 

/ Als we het form submit	, door op een van beide buttons te click , zien we 	,	

/ normal button	,
Request URL:http://localhost:9090/wicket-examples-step-by-step/repeater/button?0-2.IFormSubmitListener-form
Request Method:POST
Query String Parameters
0-2.IFormSubmitListener-form:
Form Dataview
form1_hf_0:
normal:Y

/ response	,
/ eeh hele page, met daarin	,
<span wicket:id="result" id="result4">Normal</span> 


/ ajax button	,
Request URL:http://localhost:9090/wicket-examples-step-by-step/repeater/button?1-3.IBehaviorListener.0-form-ajx
Query String Parameters
1-3.IBehaviorListener.0-form-ajx:
Form Dataview
form1_hf_0:
ajx:1		/ TODO

/ response:
<ajax-response><component id="result4" ><![CDATA[<span wicket:id="result" id="result4">Ajax</span>]]></component></ajax-response>

/ we zien een verschil in value die wordt verstuurd: Y tegen 1	, 
/ TODO
/ De responses zijn beide OK	,

/ 13	. 

/ met de <button>s	,

<form wicket:id="form" id="form1" method="post" action="./button?0-1.IFormSubmitListener-form">
	<button wicket:id="normal" name="normal" id="normal3" value="Y">N</button>
	<button wicket:id="ajx" type="button" name="ajx" id="ajx2" value="A">A</button>
</form>

/ we zien ook name, value attrs	, 

/ click normal button	,

Request URL:http://localhost:9090/wicket-examples-step-by-step/repeater/button?0-1.IFormSubmitListener-form
Query String Parameters
0-1.IFormSubmitListener-form:
Form Dataview source
form1_hf_0:
normal:Y

/ response	,
<span wicket:id="result" id="result4">Normal</span>

/ click ajax button	, 
Request URL:http://localhost:9090/wicket-examples-step-by-step/repeater/button?1-2.IBehaviorListener.0-form-ajx
Query String Parameters
1-2.IBehaviorListener.0-form-ajx:
Form Dataview source
form1_hf_0:
ajx:1

/ reponse	,
<?xml version="1.0" encoding="UTF-8"?><ajax-response><component id="result4" ><![CDATA[<span wicket:id="result" id="result4">Ajax</span>]]></component></ajax-response>


<!-- 	<button wicket:id="normal">N</button>
	<button wicket:id="ajx" type="submit">A</button> -->
</form>

$ vi ButtonPage.java

public class ButtonPage extends WebPage {
	private Label result;
	private AjaxButton ajx;
	private Button normal;
	
	
	public ButtonPage() {

		Form<Void>form=new Form<Void>("form");
		add(form);
		
		normal=new Button("normal"){
			@Override
			public void onSubmit() {
				result.setDefaultModelObject("Normal");
			};
		};
		form.add(normal);
		normal.setDefaultModel(Model.of("N"));
		
		Button ajx=new AjaxButton("ajx") {
			@Override
			protected void onSubmit(AjaxRequestTarget target, Form<?> form) {
				result.setDefaultModelObject("Ajax");
				target.add(result);
			}
		};
		form.add(ajx);
		ajx.setDefaultModel(Model.of("A"));
		
		
		
		result=new Label("result");
		result.setDefaultModel(Model.of("Init"));
		result.setOutputMarkupId(true);
		add(result);
	
	}
}

<!doctype html>
<html>
<body>
<form wicket:id="form">
	<input  wicket:id="normal" type="submit">
	<input wicket:id="ajx" type="button">
</form>
<span wicket:id="result"></span>
</body>
</html>

/ OK

/ 7	. 

$ vi ButtonPage.java

		normal=new Button("normal",Model.of("M")){
			@Override
			public void onSubmit() {
				result.setDefaultModelObject("Normal");
			};
		};
		form.add(normal);

$ vi ButtonPage.html

	<button wicket:id="normal"></button>

/ we zien in HTML	,

<form wicket:id="form" id="form1" method="post" action="./button?1-2.IFormSubmitListener-form">
	<button wicket:id="normal" name="normal" id="normal3" value="M"></button>
</form>

/ in een gewone link zit de url als attr in de link zelf, bij een gewoon button niet, maar zit de url als action attr in het form	,



/ Einde BUTTON IN FORM

/ VALUE ATTR OF BUTTON 

/ we zien dat de value wordt meegestuurd met het form	, 
/ Dus WH is het value attr van de button NIET wat we zien op de button, maar wat wordt meegestuurd naar de server, de server kan dan misschien onderscheiden om welk button het gaat	,
/ TODO

/ In HTML geven we wat er moet verschijnen op het button	,
<button wicket:id="normal">N</button>
/ TODO 

/ Voor value attribute op button	,
/ we maken een StringResourceModel	,  en een ButtonPage.properties

$ vi ButtonPage.java

		IModel<String >model=new StringResourceModel("value");

		normal=new Button("normal",model){
			@Override
			public void onSubmit() {
				result.setDefaultModelObject("Normal");
			};
		};
		form.add(normal);
/ of	,
		normal=new Button("normal"){
			@Override
			public void onSubmit() {
				result.setDefaultModelObject("Normal");
			};
		};
		form.add(normal);
		normal.setDefaultModel(model);

$ vi ButtonPage.properties
value=X

/ Maar als we 	, dan wordt niet gevonden	, 
	normal.setDefaultModel(new ResourceModel("model"));
/ TODO


/ Lees	,
http://day-to-day-stuff.blogspot.nl/2008/05/wicket-internationalization.html
/ we hebben download	,
-rw-r-----. 1 eric eric       5054 Dec 30 11:59 i18ntest.zip


/ we click de button	,
Request URL:http://localhost:9090/wicket-examples-step-by-step/repeater/button?0-1.IFormSubmitListener-form
Request Method:POST
Query String Parameters
0-1.IFormSubmitListener-form:
Form Dataview
form1_hf_0:
normal:M


/ debug	,  bij ResourceModel	,
/s
/s
ButtonPage$1(Button).onComponentTag(ComponentTag) line: 194	
		super.onComponentTag(tag);
/s
ButtonPage$1(FormComponent<T>).onComponentTag(ComponentTag) line: 1382	
		tag.put("name", getInputName());
<button wicket:id="normal" name="normal">
/t
ButtonPage$1(Button).onComponentTag(ComponentTag) line: 196	
		super.onComponentTag(tag);
/d
		String value = getDefaultModelObjectAsString();
/s
ButtonPage$1(Component).getDefaultModelObjectAsString() line: 1654	
		return getDefaultModelObjectAsString(getDefaultModelObject());
/s
ButtonPage$1(Component).getDefaultModelObject() line: 1620	
		final IModel<?> model = getDefaultModel();
/s
ButtonPage$1(Component).getDefaultModel() line: 1602	
		IModel<?> model = getModelImpl();
		return model;

model	ResourceModel$AssignmentWrapper  (id=24458)	
	component	ButtonPage$1  (id=24423)	
	state	LoadableDetachableModel$InternalState  (id=24461)	
		name	"DETACHED" (id=24464)	
		ordinal	0	
	this$0	ResourceModel  (id=24462)	
		defaultValue	Model<T>  (id=24481)	
			object	"M" (id=24486)	
		resourceKey	"model" (id=24482)	
	transientModelObject	null	
/t
ButtonPage$1(Component).getDefaultModelObject() line: 1626	
		final IModel<?> model = getDefaultModel();
/d
				return model.getObject();
/s
ResourceModel$AssignmentWrapper(LoadableDetachableModel<T>).getObject() line: 132	
		if (state == null || state == InternalState.DETACHED)
		{
			// prevent infinite attachment loops
			state = InternalState.ATTACHING;

			transientModelObject = load();
/s
ResourceModel$AssignmentWrapper.load() line: 129	
			return Application.get()
				.getResourceSettings()
				.getLocalizer()
				.getString(resourceKey, component, null, null, null, defaultValue);
/s
Localizer.getString(String, Component, IModel<?>, Locale, String, IModel<String>) line: 230	
/ TODO
/ we zien zoiets als	,
{model-1:normal-2:form-3-en_US-null-null=<null-value>, ServerAndClientTimeFilter.statustext-en_US-null=<null-value>}



/ Einde VALUE ATTR OF BUTTON 

/ BUTTON OUT OF FORM

/ we maken 2 buttons buiten een form	,

/ Een ajax button kan niet buiten een form	, anders ERR in <head> bijdrage	, 


$ vi ButtonPage.java

		normal2=new Button("normal2",Model.of("M2")){
			@Override
			public void onSubmit() {
				result.setDefaultModelObject("Normal2");
			};
		};
		add(normal2);
		
		ajx2=new AjaxButton("ajx2",Model.of("B2")) {
			@Override
			protected void onSubmit(AjaxRequestTarget target, Form<?> form) {
				result.setDefaultModelObject("Ajx2");
				target.add(result);
			}
		};
		add(ajx2);

$ vi ButtonPage.java

<button wicket:id="normal2">N2</button>
<button wicket:id="ajx2" type="submit">A2</button>		

/ we zien bij request page dat de ajx button ERR geeft	, 
/ de gewone button hoeft geen bijdrage aan de header te geven,	 dus daarom voor deze geen ERR WH	, 

/ Misschien kan een gewoon button wel	, maar doet niets	, 
/ TODO

/ Hieronder worden de AjaxRequestAttributes create	,
attributes	AjaxRequestAttributes  (id=12949)	
	ajaxCallListeners	null	
	async	true	
	channel	null	
	childSelector	null	
	dataType	"xml" (id=12910)	
	dynamicExtraParameters	null	
	eventNames	String[1]  (id=12972)	
	eventPropagation	AjaxRequestAttributes$EventPropagation  (id=12912)	
	extraParameters	null	
	formId	"form1" (id=12973)	
	method	AjaxRequestAttributes$Method  (id=12953)	
		name	"GET" (id=12974)	
		ordinal	0	
	multipart	false	
	preventDefault	false	
	requestTimeout	null	
	serializeRecursively	false	
	submittingComponentName	null	
	throttlingSettings	null	
	wicketAjaxResponse	true	
/ Deze worden used om in de header te maken	, 
	Wicket.Ajax.ajax({"u":"./button?1-3.IBehaviorListener.0-form-ajx","m":"POST","c":"ajx2","f":"form1","sc":"ajx","e":"click","pd":true});;

/ Daarom vraagt wicket aan de ajax button welk Form hij zit, om de method POST te bepalen bijv	,


java.lang.IllegalStateException: form was not specified in the constructor and cannot be found in the hierarchy of the component this behavior is attached to: Component=[AjaxButton [Component id = ajx2]]
     at org.apache.wicket.ajax.form.AjaxFormSubmitBehavior.getForm(AjaxFormSubmitBehavior.java:97)
     at org.apache.wicket.ajax.form.AjaxFormSubmitBehavior.updateAjaxAttributes(AjaxFormSubmitBehavior.java:145)
     at org.apache.wicket.ajax.markup.html.form.AjaxButton$1.updateAjaxAttributes(AjaxButton.java:131)
     at org.apache.wicket.ajax.AbstractDefaultAjaxBehavior.getAttributes(AbstractDefaultAjaxBehavior.java:146)
     at org.apache.wicket.ajax.AbstractDefaultAjaxBehavior.renderExtraHeaderContributors(AbstractDefaultAjaxBehavior.java:119)
     at org.apache.wicket.ajax.AbstractDefaultAjaxBehavior.renderHead(AbstractDefaultAjaxBehavior.java:104)
		renderExtraHeaderContributors(component, response);															/ TODO
/cb
     at org.apache.wicket.ajax.AjaxEventBehavior.renderHead(AjaxEventBehavior.java:90)
->		super.renderHead(component, response);
			CharSequence js = getCallbackScript(component);
/cb
     at org.apache.wicket.Component.internalRenderHead(Component.java:2727)
			// Then ask all behaviors
			for (Behavior behavior : getBehaviors())	/ j voor AjaxButton [Component id = ajx] 
			{
				if (isBehaviorAccepted(behavior))
				{
					if (response.wasRendered(behavior) == false)
					{
						behavior.renderHead(this, response);
/cb
     at org.apache.wicket.markup.renderStrategy.ChildFirstHeaderRenderStrategy$1.component(ChildFirstHeaderRenderStrategy.java:85)
			new DeepChildFirstVisitor()
			{
				@Override
				public void component(final Component component, final IVisit<Void> visit)
				{
					if (component != rootComponent)
					{
						component.internalRenderHead(headerContainer);	/ component=ButtonPage$2 [AjaxButton [Component id = ajx]]
/cb
     at org.apache.wicket.markup.renderStrategy.DeepChildFirstVisitor.visit(DeepChildFirstVisitor.java:96)
     at org.apache.wicket.markup.renderStrategy.DeepChildFirstVisitor.visit(DeepChildFirstVisitor.java:87)
     at org.apache.wicket.markup.renderStrategy.DeepChildFirstVisitor.visit(DeepChildFirstVisitor.java:51)
     at org.apache.wicket.markup.renderStrategy.ChildFirstHeaderRenderStrategy.renderChildHeaders(ChildFirstHeaderRenderStrategy.java:78)
     at org.apache.wicket.markup.renderStrategy.ChildFirstHeaderRenderStrategy.renderHeader(ChildFirstHeaderRenderStrategy.java:57)
     at org.apache.wicket.markup.html.internal.HtmlHeaderContainer.onComponentTagBody(HtmlHeaderContainer.java:171)
     at org.apache.wicket.markup.html.panel.DefaultMarkupSourcingStrategy.onComponentTagBody(DefaultMarkupSourcingStrategy.java:70)
     at org.apache.wicket.Component.internalRenderComponent(Component.java:2565)
     at org.apache.wicket.MarkupContainer.onRender(MarkupContainer.java:1698)
     at org.apache.wicket.Component.internalRender(Component.java:2380)
     at org.apache.wicket.Component.render(Component.java:2308)
     at org.apache.wicket.MarkupContainer.renderNext(MarkupContainer.java:1524)
     at org.apache.wicket.MarkupContainer.renderAll(MarkupContainer.java:1759)
     at org.apache.wicket.Page.onRender(Page.java:879)
     at org.apache.wicket.markup.html.WebPage.onRender(WebPage.java:141)
     at org.apache.wicket.Component.internalRender(Component.java:2380)
     at org.apache.wicket.Component.render(Component.java:2308)
     at org.apache.wicket.Page.renderPage(Page.java:1018)
     at org.apache.wicket.request.handler.render.WebPageRenderer.renderPage(WebPageRenderer.java:124)
     at org.apache.wicket.request.handler.render.WebPageRenderer.respond(WebPageRenderer.java:236)
     at org.apache.wicket.core.request.handler.RenderPageRequestHandler.respond(RenderPageRequestHandler.java:175)
     at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:895)
     at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:64)
     at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:265)
     at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:222)
     at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:293)
     at org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(WicketFilter.java:261)
     at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:203)
     at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:284)

/ Einde BUTTON OUT OF FORM




/ INPUT ATTR NAME USED BY BROWSER OR WICKET AJAX

/ ws wicket-examples-step-by-step
/ prog FrmPage

/ we click de ajax button	,

/ stack	,
/s
Wicket.Ajax.Call.doAjax (wicket-ajax-jqu…3568000.js:649)
(anonymous function) (wicket-ajax-jqu…3568000.js:563)
jQuery.extend.proxy.proxy (jquery-1.12.0-v…3568000.js:529)
Wicket.Channel.schedule (wicket-ajax-jqu…3568000.js:298)
Wicket.ChannelManager.schedule (wicket-ajax-jqu…3568000.js:358)
Wicket.Ajax.Call.ajax (wicket-ajax-jqu…3568000.js:562)
(anonymous function) (wicket-ajax-jqu…568000.js:1977)
jQuery.event.dispatch (jquery-1.12.0-v…568000.js:5227)
jQuery.event.add.elemData.handle (jquery-1.12.0-v…568000.js:4879)

/ debug	,
/s
Wicket.Ajax.Call.doAjax (wicket-ajax-jqu…3568000.js:649)
				data = data.concat(Wicket.Form.serializeForm(form));
/s
jQuery.extend.Form.serializeForm (wicket-ajax-jqu…568000.js:1576)

elements: HTMLFormControlsCollection[5]
	0: input#form2_hf_0
	1: input
	2: input
	3: input#normal4
	4: input#ajx3
	age: input
	ajx: input#ajx3
	ajx3: input#ajx3
	form2_hf_0: input#form2_hf_0
	length: 5
	normal: input#normal4
	normal4: input#normal4
	p::name: input

				for (var i = 0; i < elements.length; ++i) {
					var el = elements[i];
					if (el.name && el.name !== "") {
						result = result.concat(Wicket.Form.serializeElement(el, false));

/ Hij kijkt naar name attr	, 
/ en de browser ook 	,
/ Lees	,
http://www.w3schools.com/tags/att_input_name.asp
Note: Only form elements with a name attribute will have their values passed when submitting a form.

/t
Wicket.Ajax.Call.doAjax (wicket-ajax-jqu…3568000.js:649)
				data = data.concat(Wicket.Form.serializeForm(form));
/d
/ array	,
...
			// convert to URL encoded string
			data = jQuery.param(data);
"form2_hf_0=&p%3A%3Aname=eric&age=13&ajx=1"



/ Einde INPUT ATTR NAME USED BY BROWSER OR WICKET AJAX


/ Einde WEBMARKUPCONTAINER 

/ CONTROLLERS 

/ afmaken	, 
/ TODO

/ we hebben	,
./wicket-core/src/main/java/org/apache/wicket/markup/html/form/IOnChangeListener.java:public interface IOnChangeListener extends IRequestListener
./wicket-core/src/main/java/org/apache/wicket/markup/html/form/IFormSubmitListener.java:public interface IFormSubmitListener extends IRequestListener
./wicket-core/src/main/java/org/apache/wicket/markup/html/link/ILinkListener.java:public interface ILinkListener extends IRequestListener
./wicket-core/src/main/java/org/apache/wicket/behavior/IBehaviorListener.java:public interface IBehaviorListener extends IRequestListener
./wicket-core/src/main/java/org/apache/wicket/IResourceListener.java:public interface IResourceListener extends IRequestListener


/ in meer detail	,

package org.apache.wicket.markup.html.form;
/**
 * Listener interface that is called when a form is submitted.
 * 
 * @author Jonathan Locke
 */
public interface IFormSubmitListener extends IRequestListener
{
	/** Listener interface */
	public static final RequestListenerInterface INTERFACE = new RequestListenerInterface(
		IFormSubmitListener.class);

	/**
	 * Called when a form is submitted
	 */
	void onFormSubmitted();
}

package org.apache.wicket.markup.html.form;
/**
 * Listener method for OnChange events of dropdown lists and onclick events of CheckBoxes and
 * RadioChoice components. When any of those components wantOnSelectionChangedNotifications() method
 * returns true, a javascript onchange or onclick handler will be generated that calls this
 * interface method when the user changes the selection.
 * 
 * @author Eelco Hillenius
 */
public interface IOnChangeListener extends IRequestListener
{
	/** Listener interface */
	public static final RequestListenerInterface INTERFACE = new RequestListenerInterface(
		IOnChangeListener.class);

	/**
	 * Called when a new option is selected.
	 */
	void onSelectionChanged();
}

package org.apache.wicket.markup.html.link;
/**
 * Listener method for link clicks.
 * 
 * @author Jonathan Locke
 */
public interface ILinkListener extends IRequestListener
{
	/** Listener interface */
	public static final RequestListenerInterface INTERFACE = new RequestListenerInterface(
		ILinkListener.class);

	/**
	 * Called when a link is clicked.
	 */
	void onLinkClicked();
}

package org.apache.wicket.behavior;

import org.apache.wicket.IRequestListener;
import org.apache.wicket.RequestListenerInterface;

/**
 * Listens for requests to behaviors. When {@link org.apache.wicket.behavior.Behavior}s are
 * 'enriched' with this interface, they can receive requests themselves. You can use this for
 * example to implement AJAX behavior, though you'll probably want to extend from
 * {@link org.apache.wicket.behavior.AbstractAjaxBehavior} directly instead in that case.
 * 
 * @author Eelco Hillenius
 */
public interface IBehaviorListener extends IRequestListener
{
	/** Behavior listener interface */
	public static final RequestListenerInterface INTERFACE = new RequestListenerInterface(
		IBehaviorListener.class);

	/**
	 * Called when a request to a behavior is received.
	 */
	void onRequest();
}

/**
 * Listens for requests regarding resources. Such resources are typically non-static in nature and
 * may even be created on the fly.
 * <p>
 * One use for resource listeners is that they may be used to create components such as Image which
 * respond to requests with a localized resource loaded from the classpath. The Image class allows
 * reusable components to transparently bundle localized image resources. Components that use Image
 * resources (instead of referencing static images in their markup) can be distributed as a
 * self-contained JAR file.
 * 
 * @see org.apache.wicket.markup.html.image.Image
 * @see org.apache.wicket.markup.html.image.resource.RenderedDynamicImageResource
 * @author Jonathan Locke
 */
public interface IResourceListener extends IRequestListener
{
	/** Resource listener interface object */
	public static final RequestListenerInterface INTERFACE = new RequestListenerInterface(
		IResourceListener.class).setIncludeRenderCount(false).setRenderPageAfterInvocation(false);

	/**
	 * Called when a resource is requested.
	 */
	void onResourceRequested();
}

/ bijv	,  we hebben request een page	, en wicket renders deze page	, en maakt attrs op <form> in orde, waaronder de action attr	,
/ stack	,
	Form<T>(Component).urlFor(RequestListenerInterface, PageParameters) line: 3403	
		IRequestHandler handler = createRequestHandler(listener, parameters, null);

	Form<T>.getActionUrl() line: 1650	
		return urlFor(IFormSubmitListener.INTERFACE, new PageParameters());
/cb
	Form<T>.onComponentTag(ComponentTag) line: 1586	
->			String url = getActionUrl().toString();
				tag.put("action", url);
	...
/ debug	, 
/s
	/**
	 * Create a suitable request handler depending whether the page is stateless or bookmarkable.
	 */
Form<T>(Component).createRequestHandler(RequestListenerInterface, PageParameters, Integer) line: 3366	
/=
	private IRequestHandler createRequestHandler(RequestListenerInterface listener,
		PageParameters parameters, Integer id)

listener	RequestListenerInterface  (id=809)	
	listenerInterfaceClass	Class<T> (org.apache.wicket.markup.html.form.IFormSubmitListener) (id=600)	
	method	Method  (id=810)	public abstract void org.apache.wicket.markup.html.form.IFormSubmitListener.onFormSubmitted()
	name	"IFormSubmitListener" (id=811)	
	interfaces	Collections$SynchronizedMap<K,V>  (id=838)	
{IFormSubmitListener=[RequestListenerInterface name=IFormSubmitListener, method=public abstract void org.apache.wicket.markup.html.form.IFormSubmitListener.onFormSubmitted()], 
IBehaviorListener=[RequestListenerInterface name=IBehaviorListener, method=public abstract void org.apache.wicket.behavior.IBehaviorListener.onRequest()], 
IOnChangeListener=[RequestListenerInterface name=IOnChangeListener, method=public abstract void org.apache.wicket.markup.html.form.IOnChangeListener.onSelectionChanged()], 
ILinkListener=[RequestListenerInterface name=ILinkListener, method=public abstract void org.apache.wicket.markup.html.link.ILinkListener.onLinkClicked()], 
IResourceListener=[RequestListenerInterface name=IResourceListener, method=public abstract void org.apache.wicket.IResourceListener.onResourceRequested()]}

		PageAndComponentProvider provider = new PageAndComponentProvider(page, this, parameters);

		if (page.isPageStateless()
/n
			|| (getApplication().getPageSettings().getRecreateBookmarkablePagesAfterExpiry()
				&& page.isBookmarkable() && page.wasCreatedBookmarkable()))
/j
		{
			return new BookmarkableListenerInterfaceRequestHandler(provider, listener, id);
/ TODO
		}
		else
/n
		{
			return new ListenerInterfaceRequestHandler(provider, listener, id);


/ Intermezzo

/**
 * Request handler that invokes the listener interface on component and renders page afterwards.
 *
 * @author Matej Knopp
 */
package org.apache.wicket.core.request.handler;
public class ListenerInterfaceRequestHandler
	implements
		IPageRequestHandler,
		IComponentRequestHandler,
		ILoggableRequestHandler
{	
	private final RequestListenerInterface listenerInterface;

	@Override
	public void respond(final IRequestCycle requestCycle)
		invokeListener();
	}
	private void invokeListener()
	{
		if (getBehaviorIndex() == null)
		{
			listenerInterface.invoke(getComponent());
/ TODO

package org.apache.wicket;
public class RequestListenerInterface
	public final void invoke(final IRequestableComponent rcomponent)
		internalInvoke(component, component);
	private void internalInvoke(final Component component, final Object target)
			method.invoke(target);



/ Einde Intermezzo





/ Einde CONTROLLERS 


/ QUESTION

	BasePage$ActionPanel$1.onClick() line: 78	
->	BasePage$ActionPanel$1(Link<T>).onLinkClicked() line: 190	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 57	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 606	
	RequestListenerInterface.internalInvoke(Component, Object) line: 258	
this	RequestListenerInterface  (id=9685)	
	method	Method  (id=9684)	
public abstract void org.apache.wicket.markup.html.link.ILinkListener.onLinkClicked()
/cb
	RequestListenerInterface.invoke(IRequestableComponent) line: 216	
	ListenerInterfaceRequestHandler.invokeListener() line: 241	
	ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 234	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	



/ Einde QUESTION

/ SECOND TIME STRINGRESOURCEMODEL

/ 7	. 

/ ws wicket7_7
/ proj wicket-examples-step-by-step

$ vi ResourcePage2.java

	public ResourcePage2() {

		{
		IModel<String>model=new StringResourceModel("name");		/ er moet een property zijn	, 
		Label label=new Label("title", model);
		add(label);
		}

$ vi ResourcePage2.properties
name=Resource Page

/ Als deze property er NIET is	, 

Root cause:

java.util.MissingResourceException: Unable to find property: 'name' for component: title [class=org.apache.wicket.markup.html.basic.Label]. Locale: null, style: null
     at org.apache.wicket.Localizer.getString(Localizer.java:268)
     at org.apache.wicket.model.StringResourceModel.getString(StringResourceModel.java:439)
     at org.apache.wicket.model.StringResourceModel$AssignmentWrapper.load(StringResourceModel.java:271)
     at org.apache.wicket.model.StringResourceModel$AssignmentWrapper.load(StringResourceModel.java:226)
     at org.apache.wicket.model.LoadableDetachableModel.getObject(LoadableDetachableModel.java:134)
     at org.apache.wicket.Component.getDefaultModelObject(Component.java:1626)
     at org.apache.wicket.Component.getDefaultModelObjectAsString(Component.java:1654)
     at org.apache.wicket.markup.html.basic.Label.onComponentTagBody(Label.java:115)
     at org.apache.wicket.markup.html.panel.DefaultMarkupSourcingStrategy.onComponentTagBody(DefaultMarkupSourcingStrategy.java:70)
     at org.apache.wicket.Component.internalRenderComponent(Component.java:2565)
     at org.apache.wicket.markup.html.WebComponent.onRender(WebComponent.java:60)
     at org.apache.wicket.Component.internalRender(Component.java:2380)
     at org.apache.wicket.Component.render(Component.java:2308)
     at org.apache.wicket.MarkupContainer.renderNext(MarkupContainer.java:1524)
     at org.apache.wicket.MarkupContainer.renderAll(MarkupContainer.java:1759)
     at org.apache.wicket.Page.onRender(Page.java:879)
     at org.apache.wicket.markup.html.WebPage.onRender(WebPage.java:141)
     at org.apache.wicket.Component.internalRender(Component.java:2380)
     at org.apache.wicket.Component.render(Component.java:2308)
     at org.apache.wicket.Page.renderPage(Page.java:1018)
     at org.apache.wicket.request.handler.render.WebPageRenderer.renderPage(WebPageRenderer.java:124)
     at org.apache.wicket.request.handler.render.WebPageRenderer.respond(WebPageRenderer.java:236)
     at org.apache.wicket.core.request.handler.RenderPageRequestHandler.respond(RenderPageRequestHandler.java:175)
     at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:895)
     at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:64)
     at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:265)
     at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:222)
     at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:293)
     at org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(WicketFilter.java:261)
     at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:203)
     at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:284)
     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)
     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
     at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:217)
     at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106)
     at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502)
     at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:142)
     at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)
     at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:616)
     at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)
     at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:518)
     at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1091)
     at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:673)
     at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1500)
     at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1456)
     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
     at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
     at java.lang.Thread.run(Thread.java:745)

/ 7	. 

/ StringResourceModel heeft GEEN component	, 

$ vi ResourcePage2.java

		{
		IModel<String>model=new StringResourceModel("name");
		Label label=new Label("title", model);
		add(label);
		}

/ StringResourceModel heeft GEEN component	, 
/ AssignmentWrapper heeft WEL een component, nl het Label	, 

/ Het Label heeft NIET StringResourceModel als model, 	maar  AssignmentWrapper	, en dat is altijd	,
/ dat gebeurt in	, 
$ vi Component.java
	public Component(final String id, final IModel<?> model) {
		...
		if (model != null)
		{
			setModelImpl(wrap(model));
	}


/ stack	,
/s
	org.apache.wicket.model.StringResourceModel.getString(org.apache.wicket.Component) line: 429	
	org.apache.wicket.model.StringResourceModel$AssignmentWrapper.load() line: 271	
			if (StringResourceModel.this.component != null)
			{
				// ignore assignment if component was specified explicitly
				return StringResourceModel.this.getObject();
			}
			else
			{
				return getString(component);
			}
/cb
	org.apache.wicket.model.StringResourceModel$AssignmentWrapper.load() line: 226	
	org.apache.wicket.model.StringResourceModel$AssignmentWrapper(org.apache.wicket.model.LoadableDetachableModel<T>).getObject() line: 134	
			transientModelObject = load();
/cb
	org.apache.wicket.markup.html.basic.Label(org.apache.wicket.Component).getDefaultModelObject() line: 1626	
		final IModel<?> model = getDefaultModel();
				return model.getObject();
/cb
	org.apache.wicket.markup.html.basic.Label(org.apache.wicket.Component).getDefaultModelObjectAsString() line: 1654	
	org.apache.wicket.markup.html.basic.Label.onComponentTagBody(org.apache.wicket.markup.MarkupStream, org.apache.wicket.markup.ComponentTag) line: 115	
	org.apache.wicket.markup.html.panel.DefaultMarkupSourcingStrategy.onComponentTagBody(org.apache.wicket.Component, org.apache.wicket.markup.MarkupStream, org.apache.wicket.markup.ComponentTag) line: 70	
	org.apache.wicket.markup.html.basic.Label(org.apache.wicket.Component).internalRenderComponent() line: 2565	
	org.apache.wicket.markup.html.basic.Label(org.apache.wicket.markup.html.WebComponent).onRender() line: 60	
	org.apache.wicket.markup.html.basic.Label(org.apache.wicket.Component).internalRender() line: 2380	
	org.apache.wicket.markup.html.basic.Label(org.apache.wicket.Component).render() line: 2308	
	org.apache.wicket.examples.repeater.ResourcePage2(org.apache.wicket.MarkupContainer).renderNext(org.apache.wicket.markup.MarkupStream) line: 1524	
	org.apache.wicket.examples.repeater.ResourcePage2(org.apache.wicket.MarkupContainer).renderAll(org.apache.wicket.markup.MarkupStream, org.apache.wicket.markup.ComponentTag) line: 1759	
	org.apache.wicket.examples.repeater.ResourcePage2(org.apache.wicket.Page).onRender() line: 879	
	org.apache.wicket.examples.repeater.ResourcePage2(org.apache.wicket.markup.html.WebPage).onRender() line: 141	
	org.apache.wicket.examples.repeater.ResourcePage2(org.apache.wicket.Component).internalRender() line: 2380	
	org.apache.wicket.examples.repeater.ResourcePage2(org.apache.wicket.Component).render() line: 2308	
	org.apache.wicket.examples.repeater.ResourcePage2(org.apache.wicket.Page).renderPage() line: 1018	
	org.apache.wicket.request.handler.render.WebPageRenderer.renderPage(org.apache.wicket.request.Url, org.apache.wicket.request.cycle.RequestCycle) line: 124	
	org.apache.wicket.request.handler.render.WebPageRenderer.respond(org.apache.wicket.request.cycle.RequestCycle) line: 236	
	org.apache.wicket.core.request.handler.RenderPageRequestHandler.respond(org.apache.wicket.request.IRequestCycle) line: 175	
	org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(org.apache.wicket.request.IRequestHandler) line: 895	
	org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor(org.apache.wicket.request.RequestHandlerStack).execute(org.apache.wicket.request.IRequestHandler) line: 64	
	org.apache.wicket.request.cycle.RequestCycle.execute(org.apache.wicket.request.IRequestHandler) line: 265	
	org.apache.wicket.request.cycle.RequestCycle.processRequest() line: 222	
	org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach() line: 293	
	org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(org.apache.wicket.request.cycle.RequestCycle, org.apache.wicket.request.http.WebResponse, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, javax.servlet.FilterChain) line: 261	
	org.apache.wicket.protocol.http.WicketFilter.processRequest(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain) line: 203	
	org.apache.wicket.protocol.http.WicketFilter.doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain) line: 284	
	org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse) line: 239	
	org.apache.catalina.core.ApplicationFilterChain.doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse) line: 206	
	org.apache.catalina.core.StandardWrapperValve.invoke(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response) line: 217	
	org.apache.catalina.core.StandardContextValve.invoke(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response) line: 106	
	org.apache.catalina.authenticator.NonLoginAuthenticator(org.apache.catalina.authenticator.AuthenticatorBase).invoke(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response) line: 502	
	org.apache.catalina.core.StandardHostValve.invoke(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response) line: 142	
	org.apache.catalina.valves.ErrorReportValve.invoke(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response) line: 79	
	org.apache.catalina.valves.AccessLogValve(org.apache.catalina.valves.AbstractAccessLogValve).invoke(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response) line: 616	
	org.apache.catalina.core.StandardEngineValve.invoke(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response) line: 88	
	org.apache.catalina.connector.CoyoteAdapter.service(org.apache.coyote.Request, org.apache.coyote.Response) line: 518	
	org.apache.coyote.http11.Http11NioProcessor(org.apache.coyote.http11.AbstractHttp11Processor<S>).process(org.apache.tomcat.util.net.SocketWrapper<S>) line: 1091	
	org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler(org.apache.coyote.AbstractProtocol$AbstractConnectionHandler<S,P>).process(org.apache.tomcat.util.net.SocketWrapper<S>, org.apache.tomcat.util.net.SocketStatus) line: 673	
	org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun() line: 1500	
	org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run() line: 1456	
	org.apache.tomcat.util.threads.ThreadPoolExecutor(java.util.concurrent.ThreadPoolExecutor).runWorker(java.util.concurrent.ThreadPoolExecutor$Worker) line: 1145	
	java.util.concurrent.ThreadPoolExecutor$Worker.run() line: 615	
	org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run() line: 61	
	org.apache.tomcat.util.threads.TaskThread(java.lang.Thread).run() line: 745	
/ debug	, 
/s
org.apache.wicket.model.StringResourceModel$AssignmentWrapper.load() line: 271	
			if (StringResourceModel.this.component != null)
/n
			else
			{
				return getString(component);	/ StringResourceModel fct	, 
/s
org.apache.wicket.model.StringResourceModel.getString(org.apache.wicket.Component) line: 439	
/=
	protected String getString(final Component component)
component	org.apache.wicket.markup.html.basic.Label  (id=15327)	
this.component null
model==this.model==null		/ klopt	, hebben we NIET gegeven in new StringResourceModel	, alleen de resource key	,  

		final Localizer localizer = getLocalizer();
			value = localizer.getString(getResourceKey(), component, model, null, null, defaultValue);
/s
org.apache.wicket.Localizer.getString(java.lang.String, org.apache.wicket.Component, org.apache.wicket.model.IModel<?>, java.util.Locale, java.lang.String, org.apache.wicket.model.IModel<java.lang.String>) line: 230	
		final ResourceSettings resourceSettings = Application.get().getResourceSettings();
		String value = getStringIgnoreSettings(key, component, model, locale, style, null);
key	"name" (id=15365)	
component	org.apache.wicket.markup.html.basic.Label  (id=15327)	
model	null	
locale	null	
style	null	
defaultValue	null	
/s
org.apache.wicket.Localizer.getStringIgnoreSettings(java.lang.String, org.apache.wicket.Component, org.apache.wicket.model.IModel<?>, java.util.Locale, java.lang.String, java.lang.String) line: 323	
		if ((cacheKey != null) && cache.containsKey(cacheKey))
/n
		else
		{
			// Iterate over all registered string resource loaders until the property has been found
			Iterator<IStringResourceLoader> iter = getStringResourceLoaders().iterator();
			value = null;
			while (iter.hasNext() && (value == null))
			{
				IStringResourceLoader loader = iter.next();
				value = loader.loadStringResource(component, key, locale, style, variation);
/s
org.apache.wicket.resource.loader.ComponentStringResourceLoader.loadStringResource(org.apache.wicket.Component, java.lang.String, java.util.Locale, java.lang.String, java.lang.String) line: 241	




		// The return value
		String string = null;

		// The key prefix is equal to the component path relative to the
		// current component on the top of the stack.
		String prefix = getResourcePath(component);	/ "title"		/ er zit geen parent tussen de component=Label en de page	, 

		// walk downwards starting with page going down to component
		for (Component current : getComponentTrail(component))		/ current==Page
		{
			// get current component class
			final Class<?> clazz = current.getClass();

			// first, try the fully qualified resource name relative to the
			// component on the path from page down.
			if (Strings.isEmpty(prefix) == false)
			{
				// lookup fully qualified path
				string = loadStringResource(clazz, prefix + '.' + key, locale, style, variation);		/ "title.name"	, locale=en_US
/s
org.apache.wicket.resource.loader.ComponentStringResourceLoader.loadStringResource(java.lang.Class<?>, java.lang.String, java.util.Locale, java.lang.String, java.lang.String) line: 119	

		while (true)
		{
			// Create the base path
			String path = clazz.getName().replace('.', '/');	/ org/apache/wicket/examples/repeater/ResourcePage2

			// Iterator over all the combinations
			IResourceNameIterator iter = newResourceNameIterator(path, locale, style, variation);
			while (iter.hasNext())
			{
				String newPath = iter.next();	/ org/apache/wicket/examples/repeater/ResourcePage2_en_US
				Properties props = propertiesFactory.load(clazz, newPath);
/s
org.apache.wicket.resource.PropertiesFactory.load(java.lang.Class<?>, java.lang.String) line: 138	
		// Check the cache
		Properties properties = null;

		if (propertiesCache != null)
this	org.apache.wicket.resource.PropertiesFactory  (id=15380)	
	afterReloadListeners	java.util.ArrayList<E>  (id=15474)	
	context	org.apache.wicket.settings.ResourceSettings  (id=15359)	
	propertiesCache	java.util.concurrent.ConcurrentHashMap<K,V>  (id=15454)	
		[0]	java.util.concurrent.ConcurrentHashMap$WriteThroughEntry  (id=15477)	
		[1]	java.util.concurrent.ConcurrentHashMap$WriteThroughEntry  (id=15478)	
		[2]	java.util.concurrent.ConcurrentHashMap$WriteThroughEntry  (id=15479)	
		[3]	java.util.concurrent.ConcurrentHashMap$WriteThroughEntry  (id=15480)	
		[4]	java.util.concurrent.ConcurrentHashMap$WriteThroughEntry  (id=15481)	
		[5]	java.util.concurrent.ConcurrentHashMap$WriteThroughEntry  (id=15482)	
		[6]	java.util.concurrent.ConcurrentHashMap$WriteThroughEntry  (id=15483)	
		[7]	java.util.concurrent.ConcurrentHashMap$WriteThroughEntry  (id=15484)	
		[8]	java.util.concurrent.ConcurrentHashMap$WriteThroughEntry  (id=15485)	
		[9]	java.util.concurrent.ConcurrentHashMap$WriteThroughEntry  (id=15486)	
org/apache/wicket/Initializer_en_US=unique key:NULL
		[10]	java.util.concurrent.ConcurrentHashMap$WriteThroughEntry  (id=15487)	
		[11]	java.util.concurrent.ConcurrentHashMap$WriteThroughEntry  (id=15488)	
org/apache/wicket/extensions/Initializer_en=unique key:NULL
		[12]	java.util.concurrent.ConcurrentHashMap$WriteThroughEntry  (id=15489)	
		[13]	java.util.concurrent.ConcurrentHashMap$WriteThroughEntry  (id=15490)	
org/apache/wicket/Initializer=unique key:NULL
		[14]	java.util.concurrent.ConcurrentHashMap$WriteThroughEntry  (id=15491)	
		[15]	java.util.concurrent.ConcurrentHashMap$WriteThroughEntry  (id=15492)	
		[16]	java.util.concurrent.ConcurrentHashMap$WriteThroughEntry  (id=15493)	
		[17]	java.util.concurrent.ConcurrentHashMap$WriteThroughEntry  (id=15494)	
		[18]	java.util.concurrent.ConcurrentHashMap$WriteThroughEntry  (id=15495)	
		[19]	java.util.concurrent.ConcurrentHashMap$WriteThroughEntry  (id=15496)	
		[20]	java.util.concurrent.ConcurrentHashMap$WriteThroughEntry  (id=15497)	
		[21]	java.util.concurrent.ConcurrentHashMap$WriteThroughEntry  (id=15498)	
		[22]	java.util.concurrent.ConcurrentHashMap$WriteThroughEntry  (id=15499)	
		[23]	java.util.concurrent.ConcurrentHashMap$WriteThroughEntry  (id=15500)	
		[24]	java.util.concurrent.ConcurrentHashMap$WriteThroughEntry  (id=15501)	
		[25]	java.util.concurrent.ConcurrentHashMap$WriteThroughEntry  (id=15502)	
		[26]	java.util.concurrent.ConcurrentHashMap$WriteThroughEntry  (id=15503)	
		{
			properties = propertiesCache.get(path);
null
		if (properties == null)
		{
			Iterator<IPropertiesLoader> iter = propertiesLoader.iterator();
			while ((properties == null) && iter.hasNext())
			{
				IPropertiesLoader loader = iter.next();
				String fullPath = path + "." + loader.getFileExtension(); / org/apache/wicket/examples/repeater/ResourcePage2_en_US.properties

				// If not in the cache than try to load properties
				IResourceStream resourceStream = context.getResourceStreamLocator() .locate(clazz, fullPath);
null
				if (resourceStream == null)
				{
					continue;
/ volgende	,
			while ((properties == null) && iter.hasNext())
			{
				IPropertiesLoader loader = iter.next();
				String fullPath = path + "." + loader.getFileExtension(); / org/apache/wicket/examples/repeater/ResourcePage2_en_US.utf8.properties

				// If not in the cache than try to load properties
				IResourceStream resourceStream = context.getResourceStreamLocator() .locate(clazz, fullPath);

				if (resourceStream == null)
				{
					continue;
				}
/ volgende	,
			while ((properties == null) && iter.hasNext())
			{
				IPropertiesLoader loader = iter.next();
				String fullPath = path + "." + loader.getFileExtension(); / org/apache/wicket/examples/repeater/ResourcePage2_en_US.properties.xml 

				// If not in the cache than try to load properties
				IResourceStream resourceStream = context.getResourceStreamLocator() .locate(clazz, fullPath);

				if (resourceStream == null)
				{
					continue;
				}
/ er is geen volgende	, 
			// Cache the lookup
			if (propertiesCache != null)
			{
				if (properties == null)
				{
					// Could not locate properties, store a placeholder
					propertiesCache.put(path, Properties.EMPTY_PROPERTIES);	/ path=org/apache/wicket/examples/repeater/ResourcePage2_en_US

		return properties;
/t
org.apache.wicket.resource.loader.ComponentStringResourceLoader.loadStringResource(java.lang.Class<?>, java.lang.String, java.util.Locale, java.lang.String, java.lang.String) line: 144	
		while (true)
		{
			// Create the base path
			String path = clazz.getName().replace('.', '/');	/ org/apache/wicket/examples/repeater/ResourcePage2


			// Iterator over all the combinations
			IResourceNameIterator iter = newResourceNameIterator(path, locale, style, variation);
			while (iter.hasNext())
			{
				String newPath = iter.next();	/ org/apache/wicket/examples/repeater/ResourcePage2_en_US

				Properties props = propertiesFactory.load(clazz, newPath);
null

/ volgende	, 
			while (iter.hasNext())
			{
				String newPath = iter.next();	/ org/apache/wicket/examples/repeater/ResourcePage2_en

				Properties props = propertiesFactory.load(clazz, newPath);
null

/ volgende	, 
			while (iter.hasNext())
			{
				String newPath = iter.next();	/ org/apache/wicket/examples/repeater/ResourcePage2

				Properties props = propertiesFactory.load(clazz, newPath);
/s
org.apache.wicket.resource.PropertiesFactory.load(java.lang.Class<?>, java.lang.String) line: 138	
		if (propertiesCache != null)
		{
			properties = propertiesCache.get(path);	/ path=org/apache/wicket/examples/repeater/ResourcePage2

properties	org.apache.wicket.resource.Properties  (id=15632)	
	key	"org/apache/wicket/examples/repeater/ResourcePage2" (id=15633)	
	strings	org.apache.wicket.util.value.ValueMap  (id=15634)	
		[0]	java.util.LinkedHashMap$Entry<K,V>  (id=15638)	
name=Resource Page
		[1]	java.util.LinkedHashMap$Entry<K,V>  (id=15639)	
		[2]	java.util.LinkedHashMap$Entry<K,V>  (id=15640)	
		[3]	java.util.LinkedHashMap$Entry<K,V>  (id=15641)	
		[4]	java.util.LinkedHashMap$Entry<K,V>  (id=15642)	
		[5]	java.util.LinkedHashMap$Entry<K,V>  (id=15643)	
		[6]	java.util.LinkedHashMap$Entry<K,V>  (id=15644)	
		[7]	java.util.LinkedHashMap$Entry<K,V>  (id=15645)	
		[8]	java.util.LinkedHashMap$Entry<K,V>  (id=15646)	

		return properties;
/t
org.apache.wicket.resource.loader.ComponentStringResourceLoader.loadStringResource(java.lang.Class<?>, java.lang.String, java.util.Locale, java.lang.String, java.lang.String) line: 143	
		while (true)
		{
			// Create the base path
			String path = clazz.getName().replace('.', '/');

			// Iterator over all the combinations
			IResourceNameIterator iter = newResourceNameIterator(path, locale, style, variation);
			while (iter.hasNext())
			{
				String newPath = iter.next();

				Properties props = propertiesFactory.load(clazz, newPath);
/d
				if (props != null)
					// Lookup the value
					String value = props.getString(key);	/ key="title.name"
					if (value != null)
/n
						return value;
/n
			// Move to the next superclass
			clazz = clazz.getSuperclass(); / class org.apache.wicket.markup.html.WebPage	

/ volgende	, 
		while (true)
		{
			// Create the base path
			String path = clazz.getName().replace('.', '/');	/ org/apache/wicket/markup/html/WebPage

			// Iterator over all the combinations
			IResourceNameIterator iter = newResourceNameIterator(path, locale, style, variation);
			while (iter.hasNext())
			{
				String newPath = iter.next();

				Properties props = propertiesFactory.load(clazz, newPath);

/ ook niets	, 
			}
			// Move to the next superclass
			clazz = clazz.getSuperclass();

			if (clazz == null)
			{
				// nothing more to search, done
				break;
		// not found
		return null;
/t
org.apache.wicket.resource.loader.ComponentStringResourceLoader.loadStringResource(org.apache.wicket.Component, java.lang.String, java.util.Locale, java.lang.String, java.lang.String) line: 241	

		// walk downwards starting with page going down to component
		for (Component current : getComponentTrail(component))
		{
			// get current component class
			final Class<?> clazz = current.getClass();

			// first, try the fully qualified resource name relative to the
			// component on the path from page down.
			if (Strings.isEmpty(prefix) == false)
			{
				// lookup fully qualified path
				string = loadStringResource(clazz, prefix + '.' + key, locale, style, variation);
null
				// return string if we found it
				if (string != null)
/n
				{
					return string;
/n
				}

				// shorten resource key prefix when going downwards (skip for repeaters)
				if ((current instanceof AbstractRepeater) == false)
				{
					prefix = Strings.afterFirst(prefix, '.');	/ ""
/ Deze zal het wel doen	, 
...
/t
public class Localizer
	public String getString(final String key, final Component component, final IModel<?> model,
	                        final Locale locale, final String style, final IModel<String> defaultValue)
		else
		{
			if (log.isDebugEnabled())
			{
				log.debug("Locate property: key: '" + key + "'; Component: '" +
					(component != null ? component.toString(false) : null) + '\'');
			}

			// Iterate over all registered string resource loaders until the property has been found
			Iterator<IStringResourceLoader> iter = getStringResourceLoaders().iterator();
			value = null;
			while (iter.hasNext() && (value == null))
			{
				IStringResourceLoader loader = iter.next();				loader=ComponentStringResourceLoader
				value = loader.loadStringResource(component, key, locale, style, variation);
			}

/ In LOG_wicket.txt ComponentStringResourceLoader	, PackageStringResourceLoader	, ClassStringResourceLoader
/ ClassStringResourceLoader is WH als je in RepeaterApplication.properties de property set	, 
/ See LOG_wicket.txt: PROPERTY IN REPEATERAPPLICATION.PROPERTIES->CLASSTRINGRESOURCELOADER 

/ 7	. 

/ See LOG_wicket.txt: STRINGRESOURCEMODEL WITH RESOURCE KEY AND COMPONENT

/ Als we StringResourceModel een component geven (met new StringResourceModel(...,component,...)), dan wordt StringResourceModel.getString(StringResourceModel.this.component) called, 	
/ Als we StringResourceModel geen component geven (met new StringResourceModel(...)), dan wordt StringResourceModel.getString(AssignmentWrapper.this.compnent) called, 	AssignmentWrapper.this.compnent is door Component.<init> de component waar StringResourceModel het model van is	,

/ stack	,
/s
	org.apache.wicket.model.StringResourceModel$AssignmentWrapper(org.apache.wicket.model.LoadableDetachableModel<T>).getObject() line: 129	
			transientModelObject = load();
/cb
	org.apache.wicket.examples.repeater.ResourceLabel(org.apache.wicket.Component).getDefaultModelObject() line: 1626	
		final IModel<?> model = getDefaultModel();
				return model.getObject();
/cb
	org.apache.wicket.examples.repeater.ResourceLabel(org.apache.wicket.Component).getDefaultModelObjectAsString() line: 1654	
		return getDefaultModelObjectAsString(getDefaultModelObject());
/cb
	org.apache.wicket.examples.repeater.ResourceLabel(org.apache.wicket.markup.html.basic.Label).onComponentTagBody(org.apache.wicket.markup.MarkupStream, org.apache.wicket.markup.ComponentTag) line: 115	
	org.apache.wicket.markup.html.panel.DefaultMarkupSourcingStrategy.onComponentTagBody(org.apache.wicket.Component, org.apache.wicket.markup.MarkupStream, org.apache.wicket.markup.ComponentTag) line: 70	
	org.apache.wicket.examples.repeater.ResourceLabel(org.apache.wicket.Component).internalRenderComponent() line: 2565	
				renderComponentTag(tag);
			markupStream.next();
				getMarkupSourcingStrategy().onComponentTagBody(this, markupStream, tag);
/cb
	org.apache.wicket.examples.repeater.ResourceLabel(org.apache.wicket.markup.html.WebComponent).onRender() line: 60	
	org.apache.wicket.examples.repeater.ResourceLabel(org.apache.wicket.Component).internalRender() line: 2380	
	org.apache.wicket.examples.repeater.ResourceLabel(org.apache.wicket.Component).render() line: 2308	
	org.apache.wicket.examples.repeater.ResourcePage2(org.apache.wicket.MarkupContainer).renderNext(org.apache.wicket.markup.MarkupStream) line: 1524	
	org.apache.wicket.examples.repeater.ResourcePage2(org.apache.wicket.MarkupContainer).renderAll(org.apache.wicket.markup.MarkupStream, org.apache.wicket.markup.ComponentTag) line: 1759	
	org.apache.wicket.examples.repeater.ResourcePage2(org.apache.wicket.Page).onRender() line: 879	
	org.apache.wicket.examples.repeater.ResourcePage2(org.apache.wicket.markup.html.WebPage).onRender() line: 141	
	org.apache.wicket.examples.repeater.ResourcePage2(org.apache.wicket.Component).internalRender() line: 2380	
	org.apache.wicket.examples.repeater.ResourcePage2(org.apache.wicket.Component).render() line: 2308	
	org.apache.wicket.examples.repeater.ResourcePage2(org.apache.wicket.Page).renderPage() line: 1018	
	org.apache.wicket.request.handler.render.WebPageRenderer.renderPage(org.apache.wicket.request.Url, org.apache.wicket.request.cycle.RequestCycle) line: 124	
	org.apache.wicket.request.handler.render.WebPageRenderer.respond(org.apache.wicket.request.cycle.RequestCycle) line: 236	
	org.apache.wicket.core.request.handler.RenderPageRequestHandler.respond(org.apache.wicket.request.IRequestCycle) line: 175	
	org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(org.apache.wicket.request.IRequestHandler) line: 895	
	org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor(org.apache.wicket.request.RequestHandlerStack).execute(org.apache.wicket.request.IRequestHandler) line: 64	
	org.apache.wicket.request.cycle.RequestCycle.execute(org.apache.wicket.request.IRequestHandler) line: 265	
	org.apache.wicket.request.cycle.RequestCycle.processRequest() line: 222	
	org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach() line: 293	
	org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(org.apache.wicket.request.cycle.RequestCycle, org.apache.wicket.request.http.WebResponse, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, javax.servlet.FilterChain) line: 261	
	org.apache.wicket.protocol.http.WicketFilter.processRequest(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain) line: 203	
	org.apache.wicket.protocol.http.WicketFilter.doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain) line: 284	
	org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse) line: 239	
	org.apache.catalina.core.ApplicationFilterChain.doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse) line: 206	
	org.apache.catalina.core.StandardWrapperValve.invoke(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response) line: 217	
	org.apache.catalina.core.StandardContextValve.invoke(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response) line: 106	
	org.apache.catalina.authenticator.NonLoginAuthenticator(org.apache.catalina.authenticator.AuthenticatorBase).invoke(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response) line: 502	
	org.apache.catalina.core.StandardHostValve.invoke(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response) line: 142	
	org.apache.catalina.valves.ErrorReportValve.invoke(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response) line: 79	
	org.apache.catalina.valves.AccessLogValve(org.apache.catalina.valves.AbstractAccessLogValve).invoke(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response) line: 616	
	org.apache.catalina.core.StandardEngineValve.invoke(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response) line: 88	
	org.apache.catalina.connector.CoyoteAdapter.service(org.apache.coyote.Request, org.apache.coyote.Response) line: 518	
	org.apache.coyote.http11.Http11NioProcessor(org.apache.coyote.http11.AbstractHttp11Processor<S>).process(org.apache.tomcat.util.net.SocketWrapper<S>) line: 1091	
	org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler(org.apache.coyote.AbstractProtocol$AbstractConnectionHandler<S,P>).process(org.apache.tomcat.util.net.SocketWrapper<S>, org.apache.tomcat.util.net.SocketStatus) line: 673	
	org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun() line: 1500	
	org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run() line: 1456	
	org.apache.tomcat.util.threads.ThreadPoolExecutor(java.util.concurrent.ThreadPoolExecutor).runWorker(java.util.concurrent.ThreadPoolExecutor$Worker) line: 1145	
	java.util.concurrent.ThreadPoolExecutor$Worker.run() line: 615	
	org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run() line: 61	
	org.apache.tomcat.util.threads.TaskThread(java.lang.Thread).run() line: 745	
/ debug
/s
org.apache.wicket.model.StringResourceModel$AssignmentWrapper(org.apache.wicket.model.LoadableDetachableModel<T>).getObject() line: 134	
			transientModelObject = load();
/s
			if (StringResourceModel.this.component != null)		/ ResourcePage2
/j
			{
				// ignore assignment if component was specified explicitly
				return StringResourceModel.this.getObject();	/ calls getString(), die calls getString(component)	, maar component==StringResourceModel.this.component	,
			}
			else
/n
			{
				return getString(component);	 component zou zijn AssignmentWrapper(this.component)	,
/n
			}
/s
org.apache.wicket.model.StringResourceModel(org.apache.wicket.model.LoadableDetachableModel<T>).getObject() line: 129	
			transientModelObject = load();
/s
org.apache.wicket.model.StringResourceModel.load() line: 617	
		return getString();
/s
org.apache.wicket.model.StringResourceModel.getString() line: 424	
		return getString(component);

this	org.apache.wicket.model.StringResourceModel  (id=17751)	
	component	org.apache.wicket.examples.repeater.ResourcePage2  (id=17742)	

org.apache.wicket.model.StringResourceModel.getString(org.apache.wicket.Component) line: 439	

			value = localizer.getString(getResourceKey(), component, model, null, null, defaultValue);
/s
org.apache.wicket.Localizer.getString(java.lang.String, org.apache.wicket.Component, org.apache.wicket.model.IModel<?>, java.util.Locale, java.lang.String, org.apache.wicket.model.IModel<java.lang.String>) line: 230	
/=
	public String getString(final String key, final Component component, final IModel<?> model,
	                        final Locale locale, final String style, final IModel<String> defaultValue)
key	"foo.name" (id=17776)	
component	org.apache.wicket.examples.repeater.ResourcePage2  (id=17742)	
model	null	
locale	null	
style	null	
defaultValue	null	


		String value = getStringIgnoreSettings(key, component, model, locale, style, null);

/ 7	. 

/ See LOG_wicket.txt: STRINGRESOURCEMODEL WITH RESOURCE KEY AND COMPONENT

$ vi ResourcePage.java
		{
		MarkupContainer container=new ResourceContainer("container");
		add(container);
		IModel<String>model=new StringResourceModel("foo.name");	
		ResourceLabel label=new ResourceLabel("title", model);
		container.add(label);
		}

$ vi ResourcePage.html
<div wicket:id="container">
	<h3 wicket:id="title"></h3>
</div>

/ we kunnen de key:value in 
ResourcePage.properties
ResourceContainer.properties
ResourceLabel.properties

/ de key foo.name is altijd OK	, in elk van de properties files	, 
/ met component path erbij	, kijk relative 	, dus

ResourcePage.properties
container.title.foo.name=Resource Page2
/ of	,
foo.name=Resource Page2

ResourceContainer.properties
title.foo.name=Resource Page2
/ of	,
foo.name=Resource Page2
 
ResourceLabel.properties
foo.name=Resource Page2

/ 7	. 

/ Nogmaals,  StringResourceModel heeft geen component	, 

$ vi ResourcePage.java

		{
		MarkupContainer container=new ResourceContainer("container");
		add(container);
		IModel<String>model=new StringResourceModel("foo.name");	
		ResourceLabel label=new ResourceLabel("title", model);
		container.add(label);
		}

$ vi ResourcePage.html

<div wicket:id="container">
	<h3 wicket:id="title"></h3>
</div>


$ vi ResourceContainer.properties						/ !
title.foo.name=Resource Page									/ key tov container	, 

org.apache.wicket.Localizer.getStringIgnoreSettings(java.lang.String, org.apache.wicket.Component, org.apache.wicket.model.IModel<?>, java.util.Locale, java.lang.String, java.lang.String) line: 397	

			// Iterate over all registered string resource loaders until the property has been found
			Iterator<IStringResourceLoader> iter = getStringResourceLoaders().iterator();

getStringResourceLoaders()
	elementData	Object[6]  (id=25996)	
		[0]	ComponentStringResourceLoader  (id=25988)	
		[1]	PackageStringResourceLoader  (id=25997)	
		[2]	ClassStringResourceLoader  (id=25998)	
		[3]	ValidatorStringResourceLoader  (id=25999)	
		[4]	InitializerStringResourceLoader  (id=26000)	
	size	5	

			while (iter.hasNext() && (value == null))
			{
				IStringResourceLoader loader = iter.next();
				value = loader.loadStringResource(component, key, locale, style, variation);
/s
org.apache.wicket.resource.loader.ComponentStringResourceLoader.loadStringResource(org.apache.wicket.Component, java.lang.String, java.util.Locale, java.lang.String, java.lang.String) line: 241	

		// The key prefix is equal to the component path relative to the
		// current component on the top of the stack.
		String prefix = getResourcePath(component);			/ rol 1 component	, 	
																	/= container.title	, want StringResourceModel.this.component==null, 
															/ dus is component==AssignmentWrapper.this.component==ResourceLabel	, 

		// walk downwards starting with page going down to component		
		for (Component current : getComponentTrail(component))	/ rol 2 component 	, gaat hand in hand met rol 1	, see beneden	,  

"getComponentTrail(component)"	 (pending)	
	elementData	Object[10]  (id=26100)	
		[0]	ResourcePage  (id=25948)			|
		[1]	ResourceContainer  (id=25966)		|
		[2]	ResourceLabel  (id=25965)			V	 tot aan	,
	size	3	
					/ component is tot waar hij kijkt	, hij begint boven en dan naar beneden, tot component, top down	dus	, 
			/ dus als je een property in ResourceContainer set	, kun je als als component ResourceContainer geven, maar ResourceLabel is ook OK	,
			/ als current=ResourcePage	, dan is prefix="container.title", en gaat op zoek naar "container.title.foo.bar"
			/ als current=ResourceContainer wordt, dan is prefix="title"	, en gaat op zoek naar "title.foo.bar"	, 
			/ als current=ResourceLabel wordt, dan is prefix=""	, en gaat op zoek naar "foo.bar"	, 
		{
			// get current component class
			final Class<?> clazz = current.getClass();						/ ResourcePage

			// first, try the fully qualified resource name relative to the
			// component on the path from page down.
			if (Strings.isEmpty(prefix) == false)
			{
				// lookup fully qualified path
				string = loadStringResource(clazz, prefix + '.' + key, locale, style, variation);	/ container.title.foo.name	 in ResourcePage.properties
/ (*)
				// return string if we found it
				if (string != null)
				{
					return string;
				}

				// shorten resource key prefix when going downwards (skip for repeaters)
				if ((current instanceof AbstractRepeater) == false)
				{
					prefix = Strings.afterFirst(prefix, '.');
				}
			}
			// If not found, than check if a property with the 'key' provided by
			// the user can be found.
			string = loadStringResource(clazz, key, locale, style, variation);

			// return string if we found it
			if (string != null)
			{
				return string;
			}
		}


/(*)
/s
org.apache.wicket.resource.loader.ComponentStringResourceLoader.loadStringResource(java.lang.Class<?>, java.lang.String, java.util.Locale, java.lang.String, java.lang.String) line: 119	
		while (true)
		{
			// Create the base path
			String path = clazz.getName().replace('.', '/');	/ org/apache/wicket/examples/repeater/ResourcePage

			// Iterator over all the combinations
			IResourceNameIterator iter = newResourceNameIterator(path, locale, style, variation);
			while (iter.hasNext())
			{
				String newPath = iter.next();		/ 1ste while loop	,	
													/ org/apache/wicket/examples/repeater/ResourcePage_en_US
													/ org/apache/wicket/examples/repeater/ResourcePage_en
													/ org/apache/wicket/examples/repeater/ResourcePage
													/ 2de while loop	,
													/ org/apache/wicket/markup/html/WebPage_en_US	
													/ org/apache/wicket/markup/html/WebPage_en
													/ org/apache/wicket/markup/html/WebPage

 
				Properties props = propertiesFactory.load(clazz, newPath);
/ (**)
				if (props != null)
				{
					// Lookup the value
					String value = props.getString(key);
					if (value != null)
					{
						return value;
					}

			// Didn't find the key yet, continue searching if possible
			if (isStopResourceSearch(clazz))
			{
				break;
			}

			// Move to the next superclass
			clazz = clazz.getSuperclass();

			if (clazz == null)
			{
				// nothing more to search, done
				break;
			}
/ (**)
/s
org.apache.wicket.resource.PropertiesFactory.load(java.lang.Class<?>, java.lang.String) line: 153	
			while ((properties == null) && iter.hasNext())
			{
				String fullPath = path + "." + loader.getFileExtension();	/ org/apache/wicket/examples/repeater/ResourcePage_en_US.properties
																			/ org/apache/wicket/examples/repeater/ResourcePage_en_US.utf8.properties
																			/ org/apache/wicket/examples/repeater/ResourcePage_en_US.properties.xml 
																			/ en net zo voor ResourcePage_en, ResourcePage	, 
																			/ en de 2de keer voor 
				// If not in the cache than try to load properties
				IResourceStream resourceStream = context.getResourceStreamLocator()
					.locate(clazz, fullPath);
				if (resourceStream == null)
				{
					continue;

		return properties;

/ Einde SECOND TIME STRINGRESOURCEMODEL

/ MODALWINDOW DOMREADY SCRIPT

/ 13	. 

/ Wanneer wordt script create:

<script type="text/javascript">
/*<![CDATA[*/
Wicket.Event.add(window, "domready", function(event) { 
Wicket.Ajax.ajax({"u":"./modal-mywindow?0-1.IBehaviorListener.0-show","c":"show1","e":"click"});;
Wicket.Ajax.ajax({"u":"./modal-mywindow?0-1.IBehaviorListener.0-show2","c":"show22","e":"click"});;
Wicket.Event.publish(Wicket.Event.Topic.AJAX_HANDLERS_BOUND);
;});
/*]]>*/
</script>

/ stack	,  
/s
	AjaxLink$1(AjaxEventBehavior).renderHead(Component, IHeaderResponse) line: 94	
	ModalWindowMyPage$1(Component).internalRenderHead(HtmlHeaderContainer) line: 2727	
this=[AjaxLink [Component id = show]]	'Show modal'	, deze heeft 1 behavior	, een AjaxEventBehavior	,
			// Then ask all behaviors
			for (Behavior behavior : getBehaviors())
			{
				if (isBehaviorAccepted(behavior))
				{
					if (response.wasRendered(behavior) == false)
					{
						behavior.renderHead(this, response);

	ChildFirstHeaderRenderStrategy$1.component(Component, IVisit<Void>) line: 85	
			new DeepChildFirstVisitor()
			{
				@Override
				public void component(final Component component, final IVisit<Void> visit)
				{
					if (component != rootComponent)
					{
						component.internalRenderHead(headerContainer);

	ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component, Visit<Void>) line: 96	
	ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component, Visit<Void>) line: 87	
	ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component) line: 51	
	ChildFirstHeaderRenderStrategy.renderChildHeaders(HtmlHeaderContainer, Component) line: 78	
	ChildFirstHeaderRenderStrategy.renderHeader(HtmlHeaderContainer, HtmlHeaderContainer$HeaderStreamState, Component) line: 57	
		// Then its child hierarchy
		renderChildHeaders(headerContainer, rootComponent);

	HtmlHeaderContainer.onComponentTagBody(MarkupStream, ComponentTag) line: 171	
			// Render the header sections of all components on the page
			AbstractHeaderRenderStrategy.get().renderHeader(this,
				new HeaderStreamState(markupStream, openTag), getPage());

	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
	HtmlHeaderContainer(Component).internalRenderComponent() line: 2565	
				renderComponentTag(tag);
			markupStream.next();
				getMarkupSourcingStrategy().onComponentTagBody(this, markupStream, tag);

	HtmlHeaderContainer(MarkupContainer).onRender() line: 1698	
	HtmlHeaderContainer(Component).internalRender() line: 2380	
	HtmlHeaderContainer(Component).render() line: 2308	

	ModalWindowMyPage(MarkupContainer).renderNext(MarkupStream) line: 1524	
	ModalWindowMyPage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	ModalWindowMyPage(Page).onRender() line: 879	

	ModalWindowMyPage(WebPage).onRender() line: 141	
	ModalWindowMyPage(Component).internalRender() line: 2380	
	ModalWindowMyPage(Component).render() line: 2308	

	ModalWindowMyPage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
	ApplicationFilterChain.internalDoFilter(ServletRequest, ServletResponse) line: 239	
	ApplicationFilterChain.doFilter(ServletRequest, ServletResponse) line: 206	
	StandardWrapperValve.invoke(Request, Response) line: 217	
	StandardContextValve.invoke(Request, Response) line: 106	
	NonLoginAuthenticator(AuthenticatorBase).invoke(Request, Response) line: 502	
	StandardHostValve.invoke(Request, Response) line: 142	
	ErrorReportValve.invoke(Request, Response) line: 79	
	AccessLogValve(AbstractAccessLogValve).invoke(Request, Response) line: 616	
	StandardEngineValve.invoke(Request, Response) line: 88	
	CoyoteAdapter.service(Request, Response) line: 518	
	Http11NioProcessor(AbstractHttp11Processor<S>).process(SocketWrapper<S>) line: 1091	
	Http11NioProtocol$Http11ConnectionHandler(AbstractProtocol$AbstractConnectionHandler<S,P>).process(SocketWrapper<S>, SocketStatus) line: 673	
	NioEndpoint$SocketProcessor.doRun() line: 1500	
	NioEndpoint$SocketProcessor.run() line: 1456	
	ThreadPoolExecutor(ThreadPoolExecutor).runWorker(ThreadPoolExecutor$Worker) line: 1145	
	ThreadPoolExecutor$Worker.run() line: 615	
	TaskThread$WrappingRunnable.run() line: 61	
	TaskThread(Thread).run() line: 745	

/ debug	,
/s
AjaxLink$1(AjaxEventBehavior).renderHead(Component, IHeaderResponse) line: 94	
		super.renderHead(component, response);

		if (component.isEnabledInHierarchy())
		{
			CharSequence js = getCallbackScript(component);
component=[AjaxLink [Component id = show]]	'Show modal'
/s
AjaxLink$1(AbstractDefaultAjaxBehavior).getCallbackScript(Component) line: 465	
		CharSequence ajaxAttributes = renderAjaxAttributes(component);
		return renderAjaxAttributes(component, attributes);
/s
AjaxLink$1(AbstractDefaultAjaxBehavior).renderAjaxAttributes(Component, AjaxRequestAttributes) line: 201	
			attributesJson.put(AjaxAttributeName.URL.jsonName(), getCallbackUrl());
/s
AjaxLink$1(AbstractAjaxBehavior).getCallbackUrl() line: 78	
		rli = IBehaviorListener.INTERFACE;

rli	RequestListenerInterface  (id=9972)	
	includeRenderCount	true	
	listenerInterfaceClass	Class<T> (org.apache.wicket.behavior.IBehaviorListener) (id=5136)	
	method	Method  (id=9973)	public abstract void org.apache.wicket.behavior.IBehaviorListener.onRequest()
	name	"IBehaviorListener" (id=9974)	
	renderPageAfterInvocation	true	

		return getComponent().urlFor(this, rli, new PageParameters());
/s
ModalWindowMyPage$1(Component).urlFor(Behavior, RequestListenerInterface, PageParameters) line: 3347	
		int id = getBehaviorId(behaviour);
/s
ModalWindowMyPage$1(Component).getBehaviorId(Behavior) line: 4547	
		return new Behaviors(this).getBehaviorId(behavior);
/s
Behaviors.getBehaviorId(Behavior) line: 257	
this	Behaviors  (id=9997)	
	component	ModalWindowMyPage$1  (id=9911)	
		data	Object[2]  (id=9999)	
			[0]	AjaxLink$1  (id=9921)	
			[1]	Behaviors$BehaviorIdList  (id=10001)	
				[0]	AjaxLink$1  (id=9921)	

		for (int i = component.data_start(); i < component.data_length(); i++)
		{
			if (behavior == component.data_get(i))
			{
				found = true;
				break;
			}
		}
		ArrayList<Behavior> ids = getBehaviorsIdList(true);
		int id = ids.indexOf(behavior);
0
		return id;
/t
ModalWindowMyPage$1(Component).urlFor(Behavior, RequestListenerInterface, PageParameters) line: 3348	
		int id = getBehaviorId(behaviour);
/d
		IRequestHandler handler = createRequestHandler(listener, parameters, id);
handler	BookmarkableListenerInterfaceRequestHandler  (id=10056)	
	behaviorIndex	Integer  (id=10039)	
	listenerInterface	RequestListenerInterface  (id=9972)	
	pageComponentProvider	PageAndComponentProvider  (id=10057)	
		component	ModalWindowMyPage$1  (id=9911)	
			data	Object[2]  (id=9999)	
				[0]	AjaxLink$1  (id=9921)	
				[1]	Behaviors$BehaviorIdList  (id=10001)	
/ Wat gebeurt er als we de link straks click	?
/ See CONNECTION LISTENERINTERFACEREQUESTHANDLER AND BEHAVIOR

		return getRequestCycle().urlFor(handler);
/t
AjaxLink$1(AbstractDefaultAjaxBehavior).renderAjaxAttributes(Component, AjaxRequestAttributes) line: 202	
			attributesJson.put(AjaxAttributeName.URL.jsonName(), getCallbackUrl());
/d
{"u":"./modal-mywindow?1-1.IBehaviorListener.0-show"}
			...
/t
AjaxLink$1(AbstractDefaultAjaxBehavior).getCallbackScript(Component) line: 466	
		CharSequence ajaxAttributes = renderAjaxAttributes(component);
/d
		return "Wicket.Ajax.ajax(" + ajaxAttributes + ");";
/t
AjaxLink$1(AjaxEventBehavior).renderHead(Component, IHeaderResponse) line: 96	
			CharSequence js = getCallbackScript(component);
/d
Wicket.Ajax.ajax({"u":"./modal-mywindow?1-1.IBehaviorListener.0-show","c":"show8","e":"click"});
			response.render(OnDomReadyHeaderItem.forScript(js.toString()));
/s
OnDomReadyHeaderItem.forScript(CharSequence) line: 47	
		return new OnDomReadyHeaderItem(javaScript);
/t
/s
ResourceAggregator.render(HeaderItem) line: 258	
		for (HeaderItem curDependency : item.getDependencies())
/s
OnDomReadyHeaderItem.getDependencies() line: 120	
		JavaScriptLibrarySettings ajaxSettings = Application.get().getJavaScriptLibrarySettings();
ajaxSettings	JavaScriptLibrarySettings  (id=10210)	
	jQueryReference	JavaScriptResourceReference  (id=10211)	
		data	ResourceReference$Key  (id=10215)	
			name	"jquery/jquery-2.2.0.js" (id=10217)	
			scope	"org.apache.wicket.resource.JQueryResourceReference" (id=10218)	
	wicketAjaxReference	WicketAjaxJQueryResourceReference  (id=10213)	
		data	ResourceReference$Key  (id=10219)	
			name	"res/js/wicket-ajax-jquery.js" (id=10221)	
			scope	"org.apache.wicket.ajax.AbstractDefaultAjaxBehavior" (id=10222)	
	wicketEventReference	WicketEventJQueryResourceReference  (id=10214)	
		data	ResourceReference$Key  (id=10223)	
			name	"res/js/wicket-event-jquery.js" (id=10225)											<-	
			scope	"org.apache.wicket.ajax.AbstractDefaultAjaxBehavior" (id=10222)	

		ResourceReference wicketEventReference = ajaxSettings.getWicketEventReference();
/ 10214  hierboven	, 
		List<HeaderItem> dependencies = super.getDependencies();
		dependencies.add(JavaScriptHeaderItem.forReference(wicketEventReference));
		return dependencies;
/t
ResourceAggregator.renderDependencies(HeaderItem, Set<HeaderItem>) line: 245	
		for (HeaderItem curDependency : item.getDependencies())
		{
			curDependency = getItemToBeRendered(curDependency);
			if (depsDone.add(curDependency))
			{
				recordHeaderItem(curDependency, depsDone);
/s
ResourceAggregator.recordHeaderItem(HeaderItem, Set<HeaderItem>) line: 226	
		renderDependencies(item, depsDone);												/ item=JavaScriptReferenceHeaderItem wicket-event-jquery.js 
/s
ResourceAggregator.renderDependencies(HeaderItem, Set<HeaderItem>) line: 242	
		for (HeaderItem curDependency : item.getDependencies())

curDependency	JavaScriptReferenceHeaderItem  (id=10335)	
	reference	JavaScriptResourceReference  (id=10211)	
		data	ResourceReference$Key  (id=10215)	
			name	"jquery/jquery-2.2.0.js" (id=10217)	
			scope	"org.apache.wicket.resource.JQueryResourceReference" (id=10218)	

		{
			curDependency = getItemToBeRendered(curDependency);
			if (depsDone.add(curDependency))
			{
				recordHeaderItem(curDependency, depsDone);
/s
ResourceAggregator.recordHeaderItem(HeaderItem, Set<HeaderItem>) line: 226	
		renderDependencies(item, depsDone);												/ item=JavaScriptReferenceHeaderItem jquery-2.2.0
/ Geen 	, 
		RecordedHeaderItem recordedItem = itemsToBeRendered.get(item);
recordedItem	ResourceAggregator$RecordedHeaderItem  (id=10365)	
	item	JavaScriptReferenceHeaderItem  (id=10367)	
		reference	JavaScriptResourceReference  (id=10211)	
			data	ResourceReference$Key  (id=10215)	
				name	"jquery/jquery-2.2.0.js" (id=10217)	
				scope	"org.apache.wicket.resource.JQueryResourceReference" (id=10218)	
	locations	ArrayList<E>  (id=10369)	
		[0]	ResourceAggregator$RecordedHeaderItemLocation  (id=10409)	
			indexInRenderBase	0	
			indexInRequest	0	
			renderBase	ModalWindow  (id=9909)	
		[1]	ResourceAggregator$RecordedHeaderItemLocation  (id=10410)	
			indexInRenderBase	0	
			indexInRequest	5	
			renderBase	ModalWindow$CloseButtonBehavior  (id=9917)	
		[2]	ResourceAggregator$RecordedHeaderItemLocation  (id=10411)	
			indexInRenderBase	0	
			indexInRequest	9	
			renderBase	ModalWindow$WindowClosedBehavior  (id=9920)	
		[3]	ResourceAggregator$RecordedHeaderItemLocation  (id=10412)	
			indexInRenderBase	0	
			indexInRequest	13	
			renderBase	AjaxLink$1  (id=9921)	

		recordedItem.addLocation(renderBase, indexInRenderBase, indexInRequest);
this	ResourceAggregator  (id=9931)	
	indexInRequest	17	
	itemsToBeRendered	LinkedHashMap<K,V>  (id=10363)	
	renderBase	AjaxLink$1  (id=9921)							/ de behavior	,

		indexInRenderBase++;
		indexInRequest++;
/t
ResourceAggregator.renderDependencies(HeaderItem, Set<HeaderItem>) line: 251	
				recordHeaderItem(curDependency, depsDone);
curDependency=jquery-2.2.2.js
/d
			depsDone.remove(curDependency);


/ Intermezzo

/ we zien de recursive calls naar dependencies die moeten worden rendered	, zoals wicket-event-jquery.js, die op zijn beurt jquery-2.2.0.js nodig heeft,

	ResourceAggregator.renderDependencies(HeaderItem, Set<HeaderItem>) line: 251	
	ResourceAggregator.recordHeaderItem(HeaderItem, Set<HeaderItem>) line: 226	
	ResourceAggregator.renderDependencies(HeaderItem, Set<HeaderItem>) line: 245	
	ResourceAggregator.render(HeaderItem) line: 261	
			renderDependencies(item, new LinkedHashSet<HeaderItem>());
item=OnDomReadyHeaderItem('Wicket.Ajax.ajax({"u":"./modal-mywindow?1-1.IBehaviorListener.0-show","c":"show8","e":"click"});')

	AjaxLink$1(AjaxEventBehavior).renderHead(Component, IHeaderResponse) line: 96	
			response.render(OnDomReadyHeaderItem.forScript(js.toString()));

	ModalWindowMyPage$1(Component).internalRenderHead(HtmlHeaderContainer) line: 2727	
	ChildFirstHeaderRenderStrategy$1.component(Component, IVisit<Void>) line: 85	
	ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component, Visit<Void>) line: 96	
	ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component, Visit<Void>) line: 87	
			// Iterate over all children
			for (Component child : (MarkupContainer)rootComponent)	 / rootCompnent=de page	, 			/ TODO
			{
				// visit the child
				visit(child, visit);

	ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component) line: 51	
	ChildFirstHeaderRenderStrategy.renderChildHeaders(HtmlHeaderContainer, Component) line: 78	
	ChildFirstHeaderRenderStrategy.renderHeader(HtmlHeaderContainer, HtmlHeaderContainer$HeaderStreamState, Component) line: 57	
	HtmlHeaderContainer.onComponentTagBody(MarkupStream, ComponentTag) line: 171	
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
	HtmlHeaderContainer(Component).internalRenderComponent() line: 2565	
	HtmlHeaderContainer(MarkupContainer).onRender() line: 1698	
	HtmlHeaderContainer(Component).internalRender() line: 2380	
	HtmlHeaderContainer(Component).render() line: 2308	
	ModalWindowMyPage(MarkupContainer).renderNext(MarkupStream) line: 1524	
	ModalWindowMyPage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	ModalWindowMyPage(Page).onRender() line: 879	
	ModalWindowMyPage(WebPage).onRender() line: 141	
	ModalWindowMyPage(Component).internalRender() line: 2380	
	ModalWindowMyPage(Component).render() line: 2308	
	ModalWindowMyPage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
	ApplicationFilterChain.internalDoFilter(ServletRequest, ServletResponse) line: 239	
	ApplicationFilterChain.doFilter(ServletRequest, ServletResponse) line: 206	
	StandardWrapperValve.invoke(Request, Response) line: 217	
	StandardContextValve.invoke(Request, Response) line: 106	
	NonLoginAuthenticator(AuthenticatorBase).invoke(Request, Response) line: 502	
	StandardHostValve.invoke(Request, Response) line: 142	
	ErrorReportValve.invoke(Request, Response) line: 79	
	AccessLogValve(AbstractAccessLogValve).invoke(Request, Response) line: 616	
	StandardEngineValve.invoke(Request, Response) line: 88	
	CoyoteAdapter.service(Request, Response) line: 518	
	Http11NioProcessor(AbstractHttp11Processor<S>).process(SocketWrapper<S>) line: 1091	
	Http11NioProtocol$Http11ConnectionHandler(AbstractProtocol$AbstractConnectionHandler<S,P>).process(SocketWrapper<S>, SocketStatus) line: 673	
	NioEndpoint$SocketProcessor.doRun() line: 1500	
	NioEndpoint$SocketProcessor.run() line: 1456	
	ThreadPoolExecutor(ThreadPoolExecutor).runWorker(ThreadPoolExecutor$Worker) line: 1145	
	ThreadPoolExecutor$Worker.run() line: 615	
	TaskThread$WrappingRunnable.run() line: 61	
	TaskThread(Thread).run() line: 745	


/ Einde Intermezzo

...
/ TODO
/t
ResourceAggregator.recordHeaderItem(HeaderItem, Set<HeaderItem>) line: 234	
		renderDependencies(item, depsDone);
/d
item=wicket-event-jquery.js
		RecordedHeaderItem recordedItem = itemsToBeRendered.get(item);
		recordedItem.addLocation(renderBase, indexInRenderBase, indexInRequest);
		indexInRenderBase++;
		indexInRequest++;
/t
ResourceAggregator.renderDependencies(HeaderItem, Set<HeaderItem>) line: 245	
		for (HeaderItem curDependency : item.getDependencies())
item=OnDomReadyHeaderItem('Wicket.Ajax.ajax({"u":"./modal-mywindow?1-1.IBehaviorListener.0-show","c":"show8","e":"click"});')
		{
			curDependency = getItemToBeRendered(curDependency);
			if (depsDone.add(curDependency))
			{
				recordHeaderItem(curDependency, depsDone);
/d
			depsDone.remove(curDependency);
/t
ResourceAggregator.render(HeaderItem) line: 262	
			renderDependencies(item, new LinkedHashSet<HeaderItem>());
/d
this	ResourceAggregator  (id=9931)	
	itemsToBeRendered	LinkedHashMap<K,V>  (id=10363)	
		[0]	LinkedHashMap$Entry<K,V>  (id=10376)	
			key	JavaScriptReferenceHeaderItem  (id=10367)	
JavaScriptReferenceHeaderItem(scope: org.apache.wicket.resource.JQueryResourceReference; name: jquery/jquery-2.2.0.js; locale: null; style: null; variation: null, null)
			value	ResourceAggregator$RecordedHeaderItem  (id=10365)	
		[1]	LinkedHashMap$Entry<K,V>  (id=10516)	
			key	JavaScriptReferenceHeaderItem  (id=10503)	
JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-event-jquery.js; locale: null; style: null; variation: null, null)
			value	ResourceAggregator$RecordedHeaderItem  (id=10501)	
		[2]	LinkedHashMap$Entry<K,V>  (id=10517)	
			key	JavaScriptReferenceHeaderItem  (id=10529)	
JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-ajax-jquery.js; locale: null; style: null; variation: null, null)
			value	ResourceAggregator$RecordedHeaderItem  (id=10530)	
		[3]	LinkedHashMap$Entry<K,V>  (id=10518)	
			key	JavaScriptReferenceHeaderItem  (id=10536)	
JavaScriptReferenceHeaderItem(scope: org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow; name: res/modal.js; locale: null; style: null; variation: null, null)
			value	ResourceAggregator$RecordedHeaderItem  (id=10537)	
		[4]	LinkedHashMap$Entry<K,V>  (id=10519)	
			key	CssReferenceHeaderItem  (id=10539)	
CSSReferenceHeaderItem(scope: org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow; name: res/modal.css; locale: null; style: null; variation: null, null)
			value	ResourceAggregator$RecordedHeaderItem  (id=10540)	
		[5]	LinkedHashMap$Entry<K,V>  (id=10520)	
			key	JavaScriptContentHeaderItem  (id=10532)	
JavaScriptHeaderItem(Wicket.Ajax.baseUrl="modal-mywindow?1";)
			value	ResourceAggregator$RecordedHeaderItem  (id=10533)	
/ TODO

			domReadyItemsToBeRendered.add(item);
this	ResourceAggregator  (id=9931)	
	domReadyItemsToBeRendered	ArrayList<E>  (id=10195)	
		[0]	OnDomReadyHeaderItem  (id=10193)	
			javaScript	"Wicket.Ajax.ajax({"u":"./modal-mywindow?1-1.IBehaviorListener.0-show","c":"show8","e":"click"});" (id=10192)	
/t
ModalWindowMyPage$1(Component).internalRenderHead(HtmlHeaderContainer) line: 2728	
			// Then ask all behaviors
			for (Behavior behavior : getBehaviors())
			{
				if (isBehaviorAccepted(behavior))
				{
					if (response.wasRendered(behavior) == false)
					{
						behavior.renderHead(this, response);
/d

/ 13	. 

/c

/ ModalWindow (ipv AjaxLink)	, 

/stack
/s
	ModalWindow$CloseButtonBehavior(AbstractDefaultAjaxBehavior).renderHead(Component, IHeaderResponse) line: 94	
/ TODO AjaxEventBehavior komt hier ook	, maar doet zelf meer: appends js 	, maar waarom is dat hier niet	?

	ModalWindow(Component).internalRenderHead(HtmlHeaderContainer) line: 2727	
this	ModalWindow  (id=10774)	
			// Then ask all behaviors
			for (Behavior behavior : getBehaviors())
[org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow$CloseButtonBehavior@5ba7dd2c, org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow$WindowClosedBehavior@38c91b3a]
/ TODO BACK behavior and callbacks	, 
			{
				if (isBehaviorAccepted(behavior))
				{
					if (response.wasRendered(behavior) == false)
					{
						behavior.renderHead(this, response);

	ChildFirstHeaderRenderStrategy$1.component(Component, IVisit<Void>) line: 85	
	ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component, Visit<Void>) line: 96	
	ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component, Visit<Void>) line: 87	
	ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component) line: 51	
	ChildFirstHeaderRenderStrategy.renderChildHeaders(HtmlHeaderContainer, Component) line: 78	
	ChildFirstHeaderRenderStrategy.renderHeader(HtmlHeaderContainer, HtmlHeaderContainer$HeaderStreamState, Component) line: 57	
	HtmlHeaderContainer.onComponentTagBody(MarkupStream, ComponentTag) line: 171	
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
	HtmlHeaderContainer(Component).internalRenderComponent() line: 2565	
	HtmlHeaderContainer(MarkupContainer).onRender() line: 1698	
	HtmlHeaderContainer(Component).internalRender() line: 2380	
	HtmlHeaderContainer(Component).render() line: 2308	
	ModalWindowMyPage(MarkupContainer).renderNext(MarkupStream) line: 1524	
	ModalWindowMyPage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	ModalWindowMyPage(Page).onRender() line: 879	
	ModalWindowMyPage(WebPage).onRender() line: 141	
	ModalWindowMyPage(Component).internalRender() line: 2380	
	ModalWindowMyPage(Component).render() line: 2308	
	ModalWindowMyPage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
	ApplicationFilterChain.internalDoFilter(ServletRequest, ServletResponse) line: 239	
	ApplicationFilterChain.doFilter(ServletRequest, ServletResponse) line: 206	
	StandardWrapperValve.invoke(Request, Response) line: 217	
	StandardContextValve.invoke(Request, Response) line: 106	
	NonLoginAuthenticator(AuthenticatorBase).invoke(Request, Response) line: 502	
	StandardHostValve.invoke(Request, Response) line: 142	
	ErrorReportValve.invoke(Request, Response) line: 79	
	AccessLogValve(AbstractAccessLogValve).invoke(Request, Response) line: 616	
	StandardEngineValve.invoke(Request, Response) line: 88	
	CoyoteAdapter.service(Request, Response) line: 518	
	Http11NioProcessor(AbstractHttp11Processor<S>).process(SocketWrapper<S>) line: 1091	
	Http11NioProtocol$Http11ConnectionHandler(AbstractProtocol$AbstractConnectionHandler<S,P>).process(SocketWrapper<S>, SocketStatus) line: 673	
	NioEndpoint$SocketProcessor.doRun() line: 1500	
	NioEndpoint$SocketProcessor.run() line: 1456	
	ThreadPoolExecutor(ThreadPoolExecutor).runWorker(ThreadPoolExecutor$Worker) line: 1145	
	ThreadPoolExecutor$Worker.run() line: 615	
	TaskThread$WrappingRunnable.run() line: 61	
	TaskThread(Thread).run() line: 745	

/ debug	, 
/s
ModalWindow$CloseButtonBehavior(AbstractDefaultAjaxBehavior).renderHead(Component, IHeaderResponse) line: 96	
		super.renderHead(component, response);
/ niets	,
		CoreLibrariesContributor.contributeAjax(component.getApplication(), response);
/s
CoreLibrariesContributor.contributeAjax(Application, IHeaderResponse) line: 72	
		JavaScriptLibrarySettings jsLibrarySettings = application.getJavaScriptLibrarySettings();
		else
		{
			ResourceReference wicketAjaxReference = jsLibrarySettings.getWicketAjaxReference();
			response.render(JavaScriptHeaderItem.forReference(wicketAjaxReference));
/ TODO Afmaken




/ 13	 .


/c 
AjaxLink$1(AjaxEventBehavior).renderHead(Component, IHeaderResponse) line: 94	
component=[ModalWindow [Component id = modal2]]
/ De 2de link	, net zo als boven	, 

/ 13	. 

/c
/ render jquery-2.2.0.js	, ...
/ stack
/s
	JavaScriptReferenceHeaderItem(JavaScriptHeaderItem).internalRenderJavaScriptReference(Response, String, String, boolean, String, String, boolean) line: 353	
	JavaScriptReferenceHeaderItem.render(Response) line: 106	
	HtmlHeaderContainer$1(HeaderResponse).render(HeaderItem) line: 54	
	ResourceAggregator.renderHeaderItems() line: 311	
		for (RecordedHeaderItem curRenderItem : sortedItemsToBeRendered)
sortedItemsToBeRendered	ArrayList<E>  (id=10627)	
	[0]	ResourceAggregator$RecordedHeaderItem  (id=10365)	
		item	JavaScriptReferenceHeaderItem  (id=10367)	
JavaScriptReferenceHeaderItem(scope: org.apache.wicket.resource.JQueryResourceReference; name: jquery/jquery-2.2.0.js; locale: null; style: null; variation: null, null)
		locations	ArrayList<E>  (id=10369)	
	[1]	ResourceAggregator$RecordedHeaderItem  (id=10501)	
		item	JavaScriptReferenceHeaderItem  (id=10503)	
JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-event-jquery.js; locale: null; style: null; variation: null, null)
		locations	ArrayList<E>  (id=10697)	
	[2]	ResourceAggregator$RecordedHeaderItem  (id=10530)	
		item	JavaScriptReferenceHeaderItem  (id=10529)	
JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-ajax-jquery.js; locale: null; style: null; variation: null, null)
		locations	ArrayList<E>  (id=10708)	
	[3]	ResourceAggregator$RecordedHeaderItem  (id=10537)	
		item	JavaScriptReferenceHeaderItem  (id=10536)	
JavaScriptReferenceHeaderItem(scope: org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow; name: res/modal.js; locale: null; style: null; variation: null, null)
		locations	ArrayList<E>  (id=10705)	
	[4]	ResourceAggregator$RecordedHeaderItem  (id=10540)	
		item	CssReferenceHeaderItem  (id=10539)	
CSSReferenceHeaderItem(scope: org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow; name: res/modal.css; locale: null; style: null; variation: null, null)
		locations	ArrayList<E>  (id=10703)	
	[5]	ResourceAggregator$RecordedHeaderItem  (id=10533)	
		item	JavaScriptContentHeaderItem  (id=10532)	
JavaScriptHeaderItem(Wicket.Ajax.baseUrl="modal-mywindow?1";)
		locations	ArrayList<E>  (id=10701)	
	[6]	ResourceAggregator$RecordedHeaderItem  (id=10633)	
		item	PageHeaderItem  (id=10699)	
PageHeaderItem(
)
		locations	ArrayList<E>  (id=10711)	

		{
			if (markItemRendered(curRenderItem.getItem()))
			{
				getRealResponse().render(curRenderItem.getItem());

	ResourceAggregator.close() line: 280	
	HtmlHeaderContainer.onComponentTagBody(MarkupStream, ComponentTag) line: 176	
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
			// Render the header sections of all components on the page
			AbstractHeaderRenderStrategy.get().renderHeader(this,
				new HeaderStreamState(markupStream, openTag), getPage());
/d																									/ hierboven	,
			// Close the header response before rendering the header container itself
			// See https://issues.apache.org/jira/browse/WICKET-3728
			headerResponse.close();

	HtmlHeaderContainer(Component).internalRenderComponent() line: 2565	
	HtmlHeaderContainer(MarkupContainer).onRender() line: 1698	
	HtmlHeaderContainer(Component).internalRender() line: 2380	
	HtmlHeaderContainer(Component).render() line: 2308	
	ModalWindowMyPage(MarkupContainer).renderNext(MarkupStream) line: 1524	
	ModalWindowMyPage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	ModalWindowMyPage(Page).onRender() line: 879	
	ModalWindowMyPage(WebPage).onRender() line: 141	
	ModalWindowMyPage(Component).internalRender() line: 2380	
	ModalWindowMyPage(Component).render() line: 2308	
	ModalWindowMyPage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
	ApplicationFilterChain.internalDoFilter(ServletRequest, ServletResponse) line: 239	
	ApplicationFilterChain.doFilter(ServletRequest, ServletResponse) line: 206	
	StandardWrapperValve.invoke(Request, Response) line: 217	
	StandardContextValve.invoke(Request, Response) line: 106	
	NonLoginAuthenticator(AuthenticatorBase).invoke(Request, Response) line: 502	
	StandardHostValve.invoke(Request, Response) line: 142	
	ErrorReportValve.invoke(Request, Response) line: 79	
	AccessLogValve(AbstractAccessLogValve).invoke(Request, Response) line: 616	
	StandardEngineValve.invoke(Request, Response) line: 88	
	CoyoteAdapter.service(Request, Response) line: 518	
	Http11NioProcessor(AbstractHttp11Processor<S>).process(SocketWrapper<S>) line: 1091	
	Http11NioProtocol$Http11ConnectionHandler(AbstractProtocol$AbstractConnectionHandler<S,P>).process(SocketWrapper<S>, SocketStatus) line: 673	
	NioEndpoint$SocketProcessor.doRun() line: 1500	
	NioEndpoint$SocketProcessor.run() line: 1456	
	ThreadPoolExecutor(ThreadPoolExecutor).runWorker(ThreadPoolExecutor$Worker) line: 1145	
	ThreadPoolExecutor$Worker.run() line: 615	
	TaskThread$WrappingRunnable.run() line: 61	
	TaskThread(Thread).run() line: 745	

/ 13	. 

/ render de scripts	,

/c

/ we komen hier een aantal keer in	, voor elke js een keer	,

	JavaScriptReferenceHeaderItem(JavaScriptHeaderItem).internalRenderJavaScriptReference(Response, String, String, boolean, String, String, boolean) line: 353	
...
url	"./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-event-jquery-ver-1484236344000.js" (id=10926)	
url	"./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-ajax-jquery-ver-1484236344000.js" (id=10930)	
url	"./wicket/resource/org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow/res/modal-ver-1484236344000.js" (id=10932)	

	JavaScriptReferenceHeaderItem.render(Response) line: 106	
	HtmlHeaderContainer$1(HeaderResponse).render(HeaderItem) line: 54	
	ResourceAggregator.renderHeaderItems() line: 311	
	ResourceAggregator.close() line: 280	
		renderHeaderItems();														/ nu	, 

		if (RequestCycle.get().find(IPartialPageRequestHandler.class) == null)
		{
			renderCombinedEventScripts();											/ straks	,

	HtmlHeaderContainer.onComponentTagBody(MarkupStream, ComponentTag) line: 176	
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
	HtmlHeaderContainer(Component).internalRenderComponent() line: 2565	
	HtmlHeaderContainer(MarkupContainer).onRender() line: 1698	
	HtmlHeaderContainer(Component).internalRender() line: 2380	
	HtmlHeaderContainer(Component).render() line: 2308	
	ModalWindowMyPage(MarkupContainer).renderNext(MarkupStream) line: 1524	
	ModalWindowMyPage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	ModalWindowMyPage(Page).onRender() line: 879	
	ModalWindowMyPage(WebPage).onRender() line: 141	
	ModalWindowMyPage(Component).internalRender() line: 2380	
	ModalWindowMyPage(Component).render() line: 2308	
	ModalWindowMyPage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
	ApplicationFilterChain.internalDoFilter(ServletRequest, ServletResponse) line: 239	
	ApplicationFilterChain.doFilter(ServletRequest, ServletResponse) line: 206	
	StandardWrapperValve.invoke(Request, Response) line: 217	
	StandardContextValve.invoke(Request, Response) line: 106	
	NonLoginAuthenticator(AuthenticatorBase).invoke(Request, Response) line: 502	
	StandardHostValve.invoke(Request, Response) line: 142	
	ErrorReportValve.invoke(Request, Response) line: 79	
	AccessLogValve(AbstractAccessLogValve).invoke(Request, Response) line: 616	
	StandardEngineValve.invoke(Request, Response) line: 88	
	CoyoteAdapter.service(Request, Response) line: 518	
	Http11NioProcessor(AbstractHttp11Processor<S>).process(SocketWrapper<S>) line: 1091	
	Http11NioProtocol$Http11ConnectionHandler(AbstractProtocol$AbstractConnectionHandler<S,P>).process(SocketWrapper<S>, SocketStatus) line: 673	
	NioEndpoint$SocketProcessor.doRun() line: 1500	
	NioEndpoint$SocketProcessor.run() line: 1456	
	ThreadPoolExecutor(ThreadPoolExecutor).runWorker(ThreadPoolExecutor$Worker) line: 1145	
	ThreadPoolExecutor$Worker.run() line: 615	
	TaskThread$WrappingRunnable.run() line: 61	
	TaskThread(Thread).run() line: 745	

/c

	ResourceAggregator.renderCombinedEventScripts() line: 321	
	ResourceAggregator.close() line: 284	
		renderHeaderItems();													/ zonet	,

		if (RequestCycle.get().find(IPartialPageRequestHandler.class) == null)
		{
			renderCombinedEventScripts();										/ nu	,

	HtmlHeaderContainer.onComponentTagBody(MarkupStream, ComponentTag) line: 176	
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
	HtmlHeaderContainer(Component).internalRenderComponent() line: 2565	
	HtmlHeaderContainer(MarkupContainer).onRender() line: 1698	
	HtmlHeaderContainer(Component).internalRender() line: 2380	
	HtmlHeaderContainer(Component).render() line: 2308	
	ModalWindowMyPage(MarkupContainer).renderNext(MarkupStream) line: 1524	
	ModalWindowMyPage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	ModalWindowMyPage(Page).onRender() line: 879	
	ModalWindowMyPage(WebPage).onRender() line: 141	
	ModalWindowMyPage(Component).internalRender() line: 2380	
	ModalWindowMyPage(Component).render() line: 2308	
	ModalWindowMyPage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
	ApplicationFilterChain.internalDoFilter(ServletRequest, ServletResponse) line: 239	
	ApplicationFilterChain.doFilter(ServletRequest, ServletResponse) line: 206	
	StandardWrapperValve.invoke(Request, Response) line: 217	
	StandardContextValve.invoke(Request, Response) line: 106	
	NonLoginAuthenticator(AuthenticatorBase).invoke(Request, Response) line: 502	
	StandardHostValve.invoke(Request, Response) line: 142	
	ErrorReportValve.invoke(Request, Response) line: 79	
	AccessLogValve(AbstractAccessLogValve).invoke(Request, Response) line: 616	
	StandardEngineValve.invoke(Request, Response) line: 88	
	CoyoteAdapter.service(Request, Response) line: 518	
	Http11NioProcessor(AbstractHttp11Processor<S>).process(SocketWrapper<S>) line: 1091	
	Http11NioProtocol$Http11ConnectionHandler(AbstractProtocol$AbstractConnectionHandler<S,P>).process(SocketWrapper<S>, SocketStatus) line: 673	
	NioEndpoint$SocketProcessor.doRun() line: 1500	
	NioEndpoint$SocketProcessor.run() line: 1456	
	ThreadPoolExecutor(ThreadPoolExecutor).runWorker(ThreadPoolExecutor$Worker) line: 1145	
	ThreadPoolExecutor$Worker.run() line: 615	
	TaskThread$WrappingRunnable.run() line: 61	
	TaskThread(Thread).run() line: 745

/ debug	, 
/s
ResourceAggregator.renderCombinedEventScripts() line: 321	

		for (HeaderItem curItem : domReadyItemsToBeRendered)
[OnDomReadyHeaderItem('Wicket.Ajax.ajax({"u":"./modal-mywindow?3-1.IBehaviorListener.0-show","c":"show16","e":"click"});'), OnDomReadyHeaderItem('Wicket.Ajax.ajax({"u":"./modal-mywindow?3-1.IBehaviorListener.0-show2","c":"show217","e":"click"});')]

					combinedScript.append(((OnDomReadyHeaderItem)curItem).getJavaScript());
		}
		if (combinedScript.length() > 0)
		{
			combinedScript.append("\nWicket.Event.publish(Wicket.Event.Topic.AJAX_HANDLERS_BOUND);");

combinedScript=

Wicket.Ajax.ajax({"u":"./modal-mywindow?3-1.IBehaviorListener.0-show","c":"show16","e":"click"});;
Wicket.Ajax.ajax({"u":"./modal-mywindow?3-1.IBehaviorListener.0-show2","c":"show217","e":"click"});;
Wicket.Event.publish(Wicket.Event.Topic.AJAX_HANDLERS_BOUND);	

			getRealResponse().render(
				OnDomReadyHeaderItem.forScript(combinedScript.append('\n').toString()));
/s
OnDomReadyHeaderItem.forScript(CharSequence) line: 47	
		return new OnDomReadyHeaderItem(javaScript);
javaScript=

Wicket.Ajax.ajax({"u":"./modal-mywindow?3-1.IBehaviorListener.0-show","c":"show16","e":"click"});;
Wicket.Ajax.ajax({"u":"./modal-mywindow?3-1.IBehaviorListener.0-show2","c":"show217","e":"click"});;
Wicket.Event.publish(Wicket.Event.Topic.AJAX_HANDLERS_BOUND);

/t
/s
HtmlHeaderContainer$1(HeaderResponse).render(HeaderItem) line: 54	
			item.render(getResponse());
/s
OnDomReadyHeaderItem.render(Response) line: 83	
		CharSequence js = getJavaScript();
			JavaScriptUtils.writeJavaScript(response, "Wicket.Event.add(window, \"domready\", " +
				"function(event) { " + js + ";});");
/ Einde FINALLY MODALWINDOW DOMREADY SCRIPT 


/ Einde MODALWINDOW DOMREADY SCRIPT

/ MODALWINDOW RESULTS NO DEBUG WHAT WE SEE

/ 13	. 


/ de 2 links 'Show modal' en 'Show modal2' op de page	, 

<script type="text/javascript">
/*<![CDATA[*/
Wicket.Event.add(window, "domready", function(event) { 
Wicket.Ajax.ajax({"u":"./modal-mywindow?3-3.IBehaviorListener.0-show","c":"show16","e":"click"});;
Wicket.Ajax.ajax({"u":"./modal-mywindow?3-3.IBehaviorListener.0-show2","c":"show217","e":"click"});;
Wicket.Event.publish(Wicket.Event.Topic.AJAX_HANDLERS_BOUND);
;});
/*]]>*/
</script>

/ 13	. 

/ page version	,

/ als we click op 'Show modal' (page), zien we HTTP response	, 

<?xml version="1.0" encoding="UTF-8"?>
<ajax-response>
	<priority-evaluate>
		<![CDATA[clientTimeVariable = new Date().getTime();]]>
	</priority-evaluate>
	<component id="modal19" ><![CDATA[
		<div wicket:id="modal" id="modal19" wicketpath="modal" style="display:none">
			<wicket:panel xmlns:wicket="http://wicket.apache.org">
				<div wicket:id="content" id="content1a" wicketpath="modal_content">
				</div>
			</wicket:panel>
		</div>]]>
	</component>
	<header-contribution><![CDATA[
		<head xmlns:wicket="http://wicket.apache.org">
			<script type="text/javascript" src="./wicket/resource/org.apache.wicket.resource.JQueryResourceReference/jquery/jquery-2.2.0-ver-1484236344000.js"></script>
			<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-event-jquery-ver-1484236344000.js"></script>
			<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-ajax-jquery-ver-1484236344000.js"></script>
			<script type="text/javascript" src="./wicket/resource/org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow/res/modal-ver-1484236344000.js"></script>
			<link rel="stylesheet" type="text/css" href="./wicket/resource/org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow/res/modal-ver-1484236344000.css" />
			<script type="text/javascript" id="wicket-ajax-base-url">/*<![CDATA[*/
				Wicket.Ajax.baseUrl="modal-mywindow?3"; /*]]]]><![CDATA[>*/
			</script>
		</head>]]>
	</header-contribution>
	<evaluate><![CDATA[
(function(){var settings = new Object();
settings.minWidth=200;
settings.minHeight=200;
settings.className="w_blue";
settings.width=600;
settings.height=400;
settings.resizable=true;
settings.src="./wicket/page?5";
settings.mask="semi-transparent";
settings.autoSize=false;
settings.unloadConfirmation=true;
settings.onClose = function() { Wicket.Ajax.ajax({"u":"./modal-mywindow?3-3.IBehaviorListener.1-modal","c":"modal19"}); };
settings.onCloseButton = function() { Wicket.Ajax.ajax({"u":"./modal-mywindow?3-3.IBehaviorListener.0-modal","c":"modal19"});;return false;};
window.setTimeout(function(){
  Wicket.Window.create(settings).show();
}, 0);
})();]]>
	</evaluate>
	<evaluate><![CDATA[
		window.defaultStatus='Server parsetime: 0.036s, Client parsetime: ' + (new Date().getTime() - clientTimeVariable)/1000 +  's';]]>o
	</evaluate>
</ajax-response>

/ 13	. 

/ panel version	,

/ Als we click op 'Show modal2'	(panel)	, dan zien we 	, 

<?xml version="1.0" encoding="UTF-8"?>
<ajax-response>
	<priority-evaluate><![CDATA[
		clientTimeVariable = new Date().getTime();]]>
	</priority-evaluate>
	<component id="modal21b" ><![CDATA[
		<div wicket:id="modal2" id="modal21b" wicketpath="modal2" style="display:none">
			<wicket:panel xmlns:wicket="http://wicket.apache.org">
				<div wicket:id="content" id="content1c" wicketpath="modal2_content">
					<wicket:panel>
						<a wicket:id="close" id="close1f" wicketpath="modal2_content_close" href="javascript:;">Close</a>
					</wicket:panel>
				</div>
			</wicket:panel>
		</div>]]>
	</component>
	<header-contribution><![CDATA[
		<head xmlns:wicket="http://wicket.apache.org">
			<script type="text/javascript" src="./wicket/resource/org.apache.wicket.resource.JQueryResourceReference/jquery/jquery-2.2.0-ver-1484236344000.js"></script>
			<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-event-jquery-ver-1484236344000.js"></script>
			<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-ajax-jquery-ver-1484236344000.js"></script>
			<script type="text/javascript" id="wicket-ajax-base-url">/*<![CDATA[*/
				Wicket.Ajax.baseUrl="modal-mywindow?3";/*]]]]><![CDATA[>*/
			</script>
			<script type="text/javascript" src="./wicket/resource/org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow/res/modal-ver-1484236344000.js"></script>
			<link rel="stylesheet" type="text/css" href="./wicket/resource/org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow/res/modal-ver-1484236344000.css" />
		</head>]]>
	</header-contribution>
	<evaluate><![CDATA[
		(function(){
Wicket.Ajax.ajax({"u":"./modal-mywindow?3-3.IBehaviorListener.0-modal2-content-close","c":"close1f","e":"click"});})();
		(function(){
var element = document.getElementById("content1c");
var settings = new Object();
settings.minWidth=200;
settings.minHeight=200;
settings.className="w_blue";
settings.width=600;
settings.height=400;
settings.resizable=true;
settings.element=element;
settings.mask="semi-transparent";
settings.autoSize=false;
settings.unloadConfirmation=true;
settings.onClose = function() { Wicket.Ajax.ajax({"u":"./modal-mywindow?3-3.IBehaviorListener.1-modal2","c":"modal21b"}); };
settings.onCloseButton = function() { Wicket.Ajax.ajax({"u":"./modal-mywindow?3-3.IBehaviorListener.0-modal2","c":"modal21b"});;return false;};
window.setTimeout(function(){
  Wicket.Window.create(settings).show();
}, 0);
		})();]]></evaluate>
	<evaluate><![CDATA[
		window.defaultStatus='Server parsetime: 0.017s, Client parsetime: ' + (new Date().getTime() - clientTimeVariable)/1000 +  's';]]>
	</evaluate>
</ajax-response>

/ In HTML zien we in de <div/> die we zien	, 
	<a wicket:id="close" id="close1f" wicketpath="modal2_content_close" href="javascript:;">Close</a>
/ en daarvan zien we de js boven (boven settings)	,

/ In HTML zien we	, 
<div wicket:id="modal2" id="modal21b" wicketpath="modal2" style="display:none">
	<wicket:panel xmlns:wicket="http://wicket.apache.org">
</wicket:panel></div>
/ we zien de js bij settings.onClose en settings.onCloseButton	?
/ Maar hoe werkt hget	, 
/ TODO

/ 13	. 

/ nogmaals panel	,

/ Geef 
http://localhost:9090/wicket-examples-step-by-step/ajax/modal-mywindow

/ we zien in HTML	,

<div wicket:id="modal" id="modal4" wicketpath="modal" style="display:none">
	<wicket:panel xmlns:wicket="http://wicket.apache.org">
		<div id="content5" style="display:none"></div>
	</wicket:panel>
</div>
<div wicket:id="modal2" id="modal26" wicketpath="modal2" style="display:none">
	<wicket:panel xmlns:wicket="http://wicket.apache.org">
		<div id="content7" style="display:none"></div>
	</wicket:panel>
</div>

/ click 'Show modal2'

/ Als we een ModalWindow open	, met 'Show modal' of 'Show modal2' , dan verhuizen div#content5 resp div#content7 naar een nieuwe div in Wicket.Window.getMarkup is def	, client side dus	, 

/ we zien in deze nieuwe div:

<div wicket:id="content" id="content7" wicketpath="modal2_content">													/ wicket path TODO
	<wicket:panel>
		<a wicket:id="close" id="close8" wicketpath="modal2_content_close" href="javascript:;">Close</a>
	</wicket:panel>
</div>

/ Dit is http response:

<?xml version="1.0" encoding="UTF-8"?>
<ajax-response>
	<priority-evaluate><![CDATA[clientTimeVariable = new Date().getTime();]]></priority-evaluate>
	<component id="modal26" ><![CDATA[
		<div wicket:id="modal2" id="modal26" wicketpath="modal2" style="display:none">				
			<wicket:panel xmlns:wicket="http://wicket.apache.org">						/ wat gebeurt hier mee?
				<div wicket:id="content" id="content7" wicketpath="modal2_content">								/ deze zien we in de nieuwe div
					<wicket:panel>
						<a wicket:id="close" id="close8" wicketpath="modal2_content_close" href="javascript:;">Close</a>
					</wicket:panel>
				</div>
			</wicket:panel>
		</div>]]>
	</component>
	<header-contribution><![CDATA[															/ TODO Wat gebeurt hiermee?	 MORGENOCHTEND 8 mei Debug in MODALWINDOW DEBUG JS SERVER 
		<head xmlns:wicket="http://wicket.apache.org">
			<script type="text/javascript" src="./wicket/resource/org.apache.wicket.resource.JQueryResourceReference/jquery/jquery-2.2.0-ver-1484236344000.js"></script>
			<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-event-jquery-ver-1484236344000.js"></script>
			<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-ajax-jquery-ver-1484236344000.js"></script>
			<script type="text/javascript" id="wicket-ajax-base-url">
/*<![CDATA[*/
Wicket.Ajax.baseUrl="modal-mywindow?0";
/*]]]]><![CDATA[>*/
			</script>
			<script type="text/javascript" src="./wicket/resource/org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow/res/modal-ver-1484236344000.js"></script>
			<link rel="stylesheet" type="text/css" href="./wicket/resource/org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow/res/modal-ver-1484236344000.css" />
		</head>]]>	
	</header-contribution>
	<evaluate><![CDATA[
		(function(){Wicket.Ajax.ajax({"u":"./modal-mywindow?0-2.IBehaviorListener.0-modal2-content-close","c":"close8","e":"click"});})();
		(function(){var element = document.getElementById("content7");
var settings = new Object();
settings.minWidth=200;
settings.minHeight=200;
settings.className="w_blue";
settings.width=600;
settings.height=400;
settings.resizable=true;
settings.element=element;
settings.mask="semi-transparent";
settings.autoSize=false;
settings.unloadConfirmation=true;
settings.onClose = function() { Wicket.Ajax.ajax({"u":"./modal-mywindow?0-2.IBehaviorListener.1-modal2","c":"modal26"}); };
settings.onCloseButton = function() { Wicket.Ajax.ajax({"u":"./modal-mywindow?0-2.IBehaviorListener.0-modal2","c":"modal26"});;return false;};
window.setTimeout(function(){
  Wicket.Window.create(settings).show();
}, 0);
})();]]>
	</evaluate>
	<evaluate><![CDATA[window.defaultStatus='Server parsetime: 0.038s, Client parsetime: ' + (new Date().getTime() - clientTimeVariable)/1000 +  's';]]></evaluate>
</ajax-response>


/ Einde MODALWINDOW RESULTS NO DEBUG WHAT WE SEE

/ MODALWINDOW DEBUG JS SERVER 

/ 13	. 

/ See hierboven in MODALWINDOW RESULTS NO DEBUG WHAT WE SEE bij case panel wat we zien in http response	,


/ 13	. 

/ js	,

Wicket
	Ajax
		ajax		/ called in script: administrative function, uses jQuery .on to set event handler	, is voor click
		Call	
			prototype
				ajax		/ als clicked: schedules doAjax call	,
				doAjax
				done

/ panel version

/ we click 'Show modal2'	, 
/ we waren in Wicket.Ajax.Call.propotype.ajax	, en gaven c	, 
/ we komen in ,	

/ stack	,
(anonymous function) (wicket-ajax-jqu…344000.js:1152)
processNext.run (wicket-ajax-jqu…6344000.js:157)
						return f(n);
/cb

proxy (jquery-2.2.0-ve…6344000.js:492)
processNext (wicket-ajax-jqu…6344000.js:172)
				} else {
					var retValue = run();
/cb

start (wicket-ajax-jqu…6344000.js:184)
				retValue = this.processNext();
/cb

jQuery.ajax.complete (wicket-ajax-jqu…6344000.js:729)
/=
Wicket.Ajax.Call.prototype.doAjax
			// execute the request
			var jqXHR = jQuery.ajax({
				complete: function (jqXHR, textStatus) {
					executer.start();
/cb

fire (jquery-2.2.0-ve…344000.js:3182)
self.fireWith (jquery-2.2.0-ve…344000.js:3312)
done (jquery-2.2.0-ve…344000.js:8769)
/=
	jQuery.ajax: function( url, options ) {
		function done( status, nativeStatusText, responses, headers ) {
			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );
/cb

send.callback (jquery-2.2.0-ve…344000.js:9120)
/=
jQuery.ajaxTransport( function( options ) {
		return {
			send: function( headers, complete ) {
				callback = function( type ) {
					return function() {
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
/ xhr.responseText=hele http response (hierboven)

/ debug
/s
(anonymous function) (wicket-ajax-jqu…344000.js:1152)
				} else {
					var text = Wicket.DOM.text(node);
"<div wicket:id="modal2" id="modal26" wicketpath="modal2" style="display:none">
	<wicket:panel xmlns:wicket="http://wicket.apache.org">
		<div wicket:id="content" id="content7" wicketpath="modal2_content">
			<wicket:panel>
				<a wicket:id="close" id="close8" wicketpath="modal2_content_close" href="javascript:;">Close</a> 
			</wicket:panel>
		</div>
	</wicket:panel>
</div>"

<div wicket:id="modal2" id="modal26" wicketpath="modal2" style="display:none">
	<wicket:panel xmlns:wicket="http://wicket.apache.org">
	</wicket:panel>
</div>
/ TODO Waar is div#content7	?

					// replace the component
					Wicket.DOM.replace(element, text);
/ element=div#modal26

/ Inderdaad	, nu	,
<div wicket:id="modal2" id="modal26" wicketpath="modal2" style="display:none">
	<wicket:panel xmlns:wicket="http://wicket.apache.org">
		<div wicket:id="content" id="content7" wicketpath="modal2_content">
			<wicket:panel>
				<a wicket:id="close" id="close8" wicketpath="modal2_content_close" href="javascript:;">Close</a> 
			</wicket:panel>
		</div>
	</wicket:panel>
</div>




/ c	.

/ stack	,
Wicket.Ajax.Call.processEvaluation.evaluate (wicket-ajax-jqu…344000.js:1204)
FunctionsExecuter.processNext.run (wicket-ajax-jqu…6344000.js:157)
jQuery.extend.proxy.proxy (jquery-2.2.0-ve…6344000.js:492)
FunctionsExecuter.processNext (wicket-ajax-jqu…6344000.js:172)
FunctionsExecuter.start (wicket-ajax-jqu…6344000.js:184)
Wicket.Ajax.Call.doAjax.jQuery.ajax.complete (wicket-ajax-jqu…6344000.js:729)
jQuery.Callbacks.fire (jquery-2.2.0-ve…344000.js:3182)
jQuery.Callbacks.self.fireWith (jquery-2.2.0-ve…344000.js:3312)
done (jquery-2.2.0-ve…344000.js:8769)
jQuery.ajaxTransport.send.callback (jquery-2.2.0-ve…344000.js:9120)

/ debug	,
Wicket.Ajax.Call.processEvaluation.evaluate (wicket-ajax-jqu…344000.js:1204)
						eval(script);
script=
"(function(){
	Wicket.Ajax.ajax({"u":"./modal-mywindow?0-1.IBehaviorListener.0-modal2-content-close","c":"close8","e":"click"});})	
																				//  modal2-content-close=close link op panel in modalwindow
();
(function(){
var element = document.getElementById("content7");
var settings = new Object();
settings.minWidth=200;
settings.minHeight=200;
settings.className="w_blue";
settings.width=600;
settings.height=400;
settings.resizable=true;
settings.element=element;
settings.mask="semi-transparent";
settings.autoSize=false;
settings.unloadConfirmation=true;
settings.onClose = function() { Wicket.Ajax.ajax({"u":"./modal-mywindow?0-1.IBehaviorListener.1-modal2","c":"modal26"}); };
settings.onCloseButton = function() { Wicket.Ajax.ajax({"u":"./modal-mywindow?0-1.IBehaviorListener.0-modal2","c":"modal26"});;return false;};
window.setTimeout(function(){
  Wicket.Window.create(settings).show();
}, 0);
})();"
/ step in , met debugger	, 
/ we vallen in het script	, 
(function(){ Wicket.Ajax.ajax({"u":"./modal-mywindow?0-1.IBehaviorListener.0-modal2-content-close","c":"close8","e":"click"});})();
/s
/we komen weer in de registration fct Wicket.Ajax.ajax	, 
				attrs.c = attrs.c || window;
				attrs.e = attrs.e || [ 'domready' ];
				if (!jQuery.isArray(attrs.e)) {
					attrs.e = [ attrs.e ];
				}
attrs: Object
c: "close8"
e: Array[1]
	0: "click"
	length: 1
u: "./modal-mywindow?0-1.IBehaviorListener.0-modal2-content-close"

				jQuery.each(attrs.e, function (idx, evt) {
					Wicket.Event.add(attrs.c, evt, function (jqEvent, data) {	
						...
/s
Wicket.Event.add
				} else {
					jQuery(el).on(type, selector, data, fn);
el: a#close8
type: "click"
fn staat hierboven	,
/t
(function(){
	Wicket.Ajax.ajax({"u":"./modal-mywindow?0-1.IBehaviorListener.0-modal2-content-close","c":"close8","e":"click"});})	
																				//  modal2-content-close=close link op panel in modalwindow
();
/d
(function(){
var element = document.getElementById("content7");		/ TODO
var settings = new Object();
settings.minWidth=200;
settings.minHeight=200;
settings.className="w_blue";
settings.width=600;
settings.height=400;
settings.resizable=true;
settings.element=element;
settings.mask="semi-transparent";
settings.autoSize=false;
settings.unloadConfirmation=true;
settings.onClose = function() { Wicket.Ajax.ajax({"u":"./modal-mywindow?0-1.IBehaviorListener.1-modal2","c":"modal26"}); };
settings.onCloseButton = function() { Wicket.Ajax.ajax({"u":"./modal-mywindow?0-1.IBehaviorListener.0-modal2","c":"modal26"});;return false;};
window.setTimeout(function(){
  Wicket.Window.create(settings).show();			/ set b hier	,
}, 0);
})();"

/c
/s
  Wicket.Window.create(settings).show();			/ set b hier	,
/s
Wicket.Window.create 					/ in modal-ver.js
		var Win;
		// if it is an iframe window...
		if (typeof(settings.src) !== "undefined" && Wicket.Browser.isKHTML() === false) {
/n
		// no parent...
		if (typeof(Win) === "undefined") {
/j
			Win = Wicket.Window;
		}
		// create and return instance
		return new Win(settings);

/ Intermezzo

		Wicket.Class = {
		create: function () {
			return function () {
				this.initialize.apply(this, arguments);
			};
		}
	};

	Wicket.Window = Wicket.Class.create();	
/= function(){
	this.initialize.apply(this, arguments);
}


	Wicket.Window.prototype = {
		initialize: function(settings) {

			// override default settings with user settings
			this.settings = Wicket.Object.extend({

				minWidth: 200,  /* valid only if resizable */
				minHeight: 150, /* valid only if resizable */
				...
				onCloseButton: Wicket.bind(function() {
					...
				}, this), /* called when close button is clicked */

				onClose: function() { }, /* called when window is closed */

		createDOM: function() {
			var idWindow = this.newId();
		
		load: function() {
			...
		show: function() {	
			...
		close: function(force) {
			...
	Wicket.Window.getMarkup = function(idWindow, idClassElement, idCaption, idContent, idTop, idTopLeft, idTopRight, idLeft, idRight, idBottomLeft, idBottomRight, idBottom, idCaptionText, isFrame) {
		var s =
				"<div class=\"wicket-modal\" id=\""+idWindow+"\" role=\"dialog\" aria-labelledBy=\""+idCaptionText+"\" style=\"top: 10px; left: 10px; width: 100px;\"><form style='background-color:transparent;padding:0px;margin:0px;border-width:0px;position:static'>"+
				"<div id=\""+idClassElement+"\">"+
				...
					if (isFrame) {
						s+= "<iframe frameborder=\"0\" id=\""+idContent+"\" allowtransparency=\"false\" style=\"height: 200px\" class=\"wicket_modal\"></iframe>";
					} else {
						s+= "<div id='"+idContent+"' class='w_content_container'></div>";
					}
						s+=
						...


/c
window.setTimeout(function(){
  Wicket.Window.create(settings).show();
}, 0);
/s
Wicket.window.show
			// create the DOM elements
			this.createDOM();
/s
Window.Wicket.createDOM
			var idWindow = this.newId();
/s
				return "_wicket_window_" + Wicket.Window.idCounter++;
/t
			var idClassElement = this.newId();
			var idCaption = this.newId();
			var idFrame = this.newId();
			var idTop = this.newId();
			var idTopLeft = this.newId();
			var idTopRight = this.newId();
			var idLeft = this.newId();
			var idRight = this.newId();
			var idBottomLeft = this.newId();
			var idBottomRight = this.newId();
			var idBottom = this.newId();
			var idCaptionText = this.newId();

			var markup = Wicket.Window.getMarkup(idWindow, idClassElement, idCaption, idFrame,
					idTop, idTopLeft, idTopRight, idLeft, idRight, idBottomLeft, idBottomRight,
					idBottom, idCaptionText, this.isIframe());
this.isIframe()==false
/s
	Wicket.Window.getMarkup = function(idWindow, idClassElement, idCaption, idContent, idTop, idTopLeft, idTopRight, idLeft, idRight, idBottomLeft, idBottomRight, idBottom, idCaptionText, isFrame) {
		var s =
				"<div class=\"wicket-modal\" id=\""+idWindow+"\" role=\"dialog\" aria-labelledBy=\""+idCaptionText+"\" style=\"top: 10px; left: 10px; width: 100px;\"><form style='background-color:transparent;padding:0px;margin:0px;border-width:0px;position:static'>"+
				"<div id=\""+idClassElement+"\">"+
					...
					if (isFrame) {
/n
						s+= "<iframe frameborder=\"0\" id=\""+idContent+"\" allowtransparency=\"false\" style=\"height: 200px\" class=\"wicket_modal\"></iframe>";
/n
					} else {
/j
						s+= "<div id='"+idContent+"' class='w_content_container'></div>";
/j
					}
						s+=
						...
			return s;
/t
Window.Wicket.createDOM
			var markup = Wicket.Window.getMarkup(idWindow, idClassElement, idCaption, idFrame,
					idTop, idTopLeft, idTopRight, idLeft, idRight, idBottomLeft, idBottomRight,
					idBottom, idCaptionText, this.isIframe());
/d
			var element = document.createElement("div");
			element.id = idWindow;
			document.body.appendChild(element);
			Wicket.DOM.replace(element, markup);

			var _ = function(name) { return document.getElementById(name); };

			this.window = _(idWindow);
			this.classElement = _(idClassElement);
			this.caption = _(idCaption);
			this.content = _(idFrame);
			this.top = _(idTop);
			this.topLeft = _(idTopLeft);
			this.topRight = _(idTopRight);
			this.left = _(idLeft);
			this.right = _(idRight);
			this.bottomLeft = _(idBottomLeft);
			this.bottomRight = _(idBottomRight);
			this.bottom = _(idBottom);
			this.captionText = _(idCaptionText);

this: Wicket.Class.create

/t
Wicket.Window.show
			// create the DOM elements
			this.createDOM();
/d
			// is it an iframe window?
			if (this.isIframe()) {
/n
			} else {
				// reparent the element
				this.oldParent = this.settings.element.parentNode;					/ this.settings.element=div#content7
this
	oldParent
		outerHTML
"<wicket:panel xmlns:wicket="http://wicket.apache.org">						/ Dit is het panel die ook op de page staat, maar die we nooit snapte	, 
	<div wicket:id="content" id="content7" wicketpath="modal2_content"><wicket:panel>		/ innerHTML , = this.settings.element.outerHTML
		<a wicket:id="close" id="close8" wicketpath="modal2_content_close" href="javascript:;">Close</a>
	</wicket:panel></div>
</wicket:panel>"
this
	content
		outerHTML
"<div id="_wicket_window_16" class="w_content_container"></div>"


				this.settings.element.parentNode.removeChild(this.settings.element);
this
	oldParent
		outerHTML
"<wicket:panel xmlns:wicket="http://wicket.apache.org">↵	↵</wicket:panel>"

				this.content.appendChild(this.settings.element);

this
	content
		outerHTML
"<div id="_wicket_window_16" class="w_content_container">	
	<div wicket:id="content" id="content7" wicketpath="modal2_content">
		<wicket:panel>
			<a wicket:id="close" id="close8" wicketpath="modal2_content_close" href="javascript:;">Close</a>
		</wicket:panel>
	</div>
</div>"

			// bind the events
			this.bindInit();
/s
Wicket.Window.bindInit
			if (this.settings.resizable) {
				this.bind(this.bottomRight, this.onResizeBottomRight);
				this.bind(this.bottomLeft, this.onResizeBottomLeft);
				this.bind(this.bottom, this.onResizeBottom);
				this.bind(this.left, this.onResizeLeft);
				this.bind(this.right, this.onResizeRight);
				this.bind(this.topLeft, this.onResizeTopLeft);
				this.bind(this.topRight, this.onResizeTopRight);
				this.bind(this.top, this.onResizeTop);

			this.caption.getElementsByTagName("a")[0].onclick = Wicket.bind(this.settings.onCloseButton, this);			<-
/ TODO Wordt hij hier added aan div#content7	?
/s
				return jQuery.proxy(fn, context);
/t
Wicket.Window.show
			// bind the events
			this.bindInit();
/d
			...
			var doShow = Wicket.bind(function() {
				this.adjustOpenWindowZIndexesOnShow();
				this.window.style.visibility="visible";

			}, this);

			} else {
				doShow();
/s
jQuery.proxy.proxy
/= 
	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );	
/ fn==doShow
                this.adjustOpenWindowZIndexesOnShow();
                this.window.style.visibility="visible";	/ Nu zien we hem	, 	maar hij is nog grijs	,
/t
/ ons downloaded script	,
window.setTimeout(function(){
  Wicket.Window.create(settings).show();
}, 0);
/d
/ nu is het div wit
/ TODO (was grijs)

/ 13	. 

/ we kijken naar de DOM	,

/ Dit zijn de 2 divs die we nooit begrepen	, 

<div wicket:id="modal" id="modal4" wicketpath="modal" style="display:none">
	<wicket:panel xmlns:wicket="http://wicket.apache.org">
		<div id="content5" style="display:none"></div>			/ deze staat er nog in, want we hebben 'Show modal' niet clicked, 
	</wicket:panel>
</div>
<div wicket:id="modal2" id="modal26" wicketpath="modal2" style="display:none">
	<wicket:panel xmlns:wicket="http://wicket.apache.org">		/ deze is leeg	, div#content7 is verplaatst naar div#wicket-modal	,
</wicket:panel></div>

/ Dit is de div die letterlijk als Java string op de server staat	,	 in Wicket.Window.getMarkup	,
/ we zien #content7 replaced	, 
/ hij heeft ook een child, a#close8	, en die is added hierboven	,

<div class="wicket-modal" id="_wicket_window_13" role="dialog" aria-labelledby="_wicket_window_25" style="top: 0px; left: 512.5px; width: 600px; position: absolute; visibility: visible;">
	<form style="background-color:transparent;padding:0px;margin:0px;border-width:0px;position:static">
		<div id="_wicket_window_14" class="w_blue">
			<div class="w_top_1">
				<div class="w_topLeft" id="_wicket_window_18"></div>
				<div class="w_topRight" id="_wicket_window_19"></div>
				<div class="w_top" id="_wicket_window_17"></div>
			</div>
			<div class="w_left" id="_wicket_window_20">
				<div class="w_right_1">
					<div class="w_right" id="_wicket_window_21">
						<div class="w_content_1" onmousedown="Wicket.Event.stop(event);">
							<div class="w_caption" id="_wicket_window_15">
								<a class="w_close" style="z-index:1" href="#"></a>
								<h3 id="_wicket_window_25" class="w_captionText"></h3>
							</div>
							<div class="w_content_2">
								<div class="w_content_3">
									<div class="w_content">
										<div id="_wicket_window_16" class="w_content_container" style="overflow: auto; height: 95px;">
->											<div wicket:id="content" id="content7" wicketpath="modal2_content">
												<wicket:panel>
													<a wicket:id="close" id="close8" wicketpath="modal2_content_close" href="javascript:;">Close</a>
												</wicket:panel>
											</div>
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
			<div class="w_bottom_1" id="_wicket_window_24_1">
				<div class="w_bottomRight" id="_wicket_window_23"></div>	
				<div class="w_bottomLeft" id="_wicket_window_22"></div>
				<div class="w_bottom" id="_wicket_window_24"></div>
			</div>
		</div>	
	</form>
</div>

/ we zien dat div#content7 is verplaatst naar de div	,

/ 


/ MORGENOCHTEND
/ click close link , of x









 

/ Einde MODALWINDOW DEBUG JS SERVER 

/ CONNECTION LISTENERINTERFACEREQUESTHANDLER AND BEHAVIOR

/ page: ModalWindowMyPage

/ Geef	,
http://localhost:9090/wicket-examples-step-by-step/ajax/modal-mywindow?3
/ click 'Show modal'	, 

/s
RequestCycle.processRequest() line: 220	
			IRequestHandler handler = resolveRequestHandler();		/ WH parses IBehaviorListener.0-show
/d
			if (handler != null)
			{
				execute(handler);
this	ListenerInterfaceRequestHandler  (id=10964)	
	behaviorId	Integer  (id=10039)	
	listenerInterface	RequestListenerInterface  (id=9972)	
		listenerInterfaceClass	Class<T> (org.apache.wicket.behavior.IBehaviorListener) (id=5136)	
		method	Method  (id=9973)	
		name	"IBehaviorListener" (id=9974)	
	pageComponentProvider	PageAndComponentProvider  (id=10967)	
		componentPath	"show" (id=10975)	
		pageClass	Class<T> (org.apache.wicket.examples.ajax.builtin.modal.ModalWindowMyPage) (id=1418)	

/s
ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 157	
		invokeListener();
/s
ListenerInterfaceRequestHandler.invokeListener() line: 239	
/ IMPORTANT METHOD
		if (getBehaviorIndex() == null)
/n
		else
		{
			try
			{
				Behavior behavior = getComponent().getBehaviorById(behaviorId);
this	ListenerInterfaceRequestHandler  (id=10964)	
	pageComponentProvider	PageAndComponentProvider  (id=10967)	
		component	ModalWindowMyPage$1  (id=10784)				/ 'Show modal'
/s
ModalWindowMyPage$1(Component).getBehaviorById(int) line: 4540	
		return new Behaviors(this).getBehaviorById(id);
/ Maakt een Behaviors obj om de component heen	, de component heeft de list van behaviors	,
/s
Behaviors.getBehaviorById(int) line: 303	
this	Behaviors  (id=11039)	
	component	ModalWindowMyPage$1  (id=10784)	
		data	Object[2]  (id=11030)	
			[0]	AjaxLink$1  (id=10787)	
			[1]	Behaviors$BehaviorIdList  (id=11044)	
				[0]	AjaxLink$1  (id=10787)	

		ArrayList<Behavior> ids = getBehaviorsIdList(false);
		if (ids != null)
		{
			if (id >= 0 && id < ids.size())
			{
				behavior = ids.get(id);
behavior	AjaxLink$1  (id=10787)	
		return behavior;
/t
ListenerInterfaceRequestHandler.invokeListener() line: 248	
				Behavior behavior = getComponent().getBehaviorById(behaviorId);
/d
				listenerInterface.invoke(getComponent(), behavior);
/s
RequestListenerInterface.invoke(IRequestableComponent, Behavior) line: 231	

/ we zijn in de RequestListenerInterface.invoke method	

		internalInvoke(component, behavior);
/s
RequestListenerInterface.internalInvoke(Component, Object) line: 248	
			method.invoke(target);
/s
AjaxLink$1(AbstractDefaultAjaxBehavior).onRequest() line: 587	
		WebApplication app = (WebApplication)getComponent().getApplication();
		AjaxRequestTarget target = app.newAjaxRequestTarget(getComponent().getPage());

target	AjaxRequestHandler  (id=11088)	
	update	AjaxRequestHandler$1  (id=11093)	
		bodyBuffer	PartialPageUpdate$ResponseBuffer  (id=11095)	
		headerBuffer	PartialPageUpdate$ResponseBuffer  (id=11097)	

		RequestCycle requestCycle = RequestCycle.get();
		requestCycle.scheduleRequestHandlerAfterCurrent(target);
/ WH calls AjaxRequestHandler.respond	,

		respond(target);
/s
AjaxLink$1(AjaxEventBehavior).respond(AjaxRequestTarget) line: 155	
		onEvent(target);
/s
AjaxLink$1.onEvent(AjaxRequestTarget) line: 84	
/=
		return new AjaxEventBehavior(event)
		{
			private static final long serialVersionUID = 1L;

			@Override
			protected void onEvent(AjaxRequestTarget target)
			{
				onClick(target);														<-
/s
ModalWindowMyPage$1.onClick(AjaxRequestTarget) line: 27	
/=
		AjaxLink<Void>show=new AjaxLink<Void>("show") {
			@Override
			public void onClick(AjaxRequestTarget target) {
				modalWindow.show(target);
/s
ModalWindow.show(IPartialPageRequestHandler) line: 368	
		if (shown == false)
		{
			getContent().setVisible(true);
			target.add(this);
/s
AjaxRequestHandler.add(Component...) line: 231	
			add(component, component.getMarkupId());
/s
AjaxRequestHandler.add(Component, String) line: 238	
		update.add(component, markupId);
component	ModalWindow  (id=10766)	
markupId	"modal19" (id=11180)	
/s
AjaxRequestHandler$1(PartialPageUpdate).add(Component, String) line: 369	
		component.setMarkupId(markupId);
		markupIdToComponent.put(markupId, component);
/t
ModalWindow.show(IPartialPageRequestHandler) line: 370	
			target.add(this);
/d
			target.appendJavaScript(getWindowOpenJavaScript());
/s
ModalWindow.getWindowOpenJavaScript() line: 1015	
		if (isCustomComponent())
/n
/s
			return getContent() != empty;
/ we add een page	,

		buffer.append("var settings = new Object();\n");

		appendAssignment(buffer, "settings.minWidth", getMinimalWidth());
		appendAssignment(buffer, "settings.minHeight", getMinimalHeight());
		appendAssignment(buffer, "settings.className", getCssClassName());
		appendAssignment(buffer, "settings.width", getInitialWidth());

		if ((isUseInitialHeight() == true) || (isCustomComponent() == false))
		{
			appendAssignment(buffer, "settings.height", getInitialHeight());

		appendAssignment(buffer, "settings.resizable", isResizable());

		if (isCustomComponent() == false)
		{
			Page page = createPage();
/s
ModalWindow.createPage() line: 844	
		else
		{
			return pageCreator.createPage();
/s
ModalWindowMyPage$2.createPage() line: 38	
/=
		modalWindow.setPageCreator(new ModalWindow.PageCreator() {
			@Override
			public Page createPage() {
				
				return new ModalContentMyPage(){
						...
/ onze eigen code	, 
/t
ModalWindow.getWindowOpenJavaScript() line: 1065	
			Page page = createPage();
/d
			if (page.isPageStateless())
/n
			else
			{
				IRequestHandler handler = new RenderPageRequestHandler(new PageProvider(page));
				pageUrl = requestCycle.urlFor(handler);
./wicket/page?4
			appendAssignment(buffer, "settings.src", pageUrl);

		else if (getMaskType() == MaskType.SEMI_TRANSPARENT)
		{
			buffer.append("settings.mask=\"semi-transparent\";\n");

		appendAssignment(buffer, "settings.autoSize", autoSize);

		appendAssignment(buffer, "settings.unloadConfirmation", showUnloadConfirmation());

		if (windowClosedCallback != null)
		{
			WindowClosedBehavior behavior = getBehaviors(WindowClosedBehavior.class).get(0);
org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow$WindowClosedBehavior@43a25bba

			buffer.append("settings.onClose = function() { ");
			buffer.append(behavior.getCallbackScript());
			buffer.append(" };\n");
/s
ModalWindow$WindowClosedBehavior(AbstractDefaultAjaxBehavior).getCallbackScript() line: 453	
		return getCallbackScript(getComponent());	/ component=ModalWindow	,
/s
ModalWindow$WindowClosedBehavior(AbstractDefaultAjaxBehavior).getCallbackScript(Component) line: 465	
		CharSequence ajaxAttributes = renderAjaxAttributes(component);
/s
ModalWindow$WindowClosedBehavior(AbstractDefaultAjaxBehavior).renderAjaxAttributes(Component) line: 185	
		AjaxRequestAttributes attributes = getAttributes();
		return renderAjaxAttributes(component, attributes);
/s
ModalWindow$WindowClosedBehavior(AbstractDefaultAjaxBehavior).renderAjaxAttributes(Component, AjaxRequestAttributes) line: 197	

			attributesJson.put(AjaxAttributeName.URL.jsonName(), getCallbackUrl());
/ getCallbackUrl()=./modal-mywindow?3-1.IBehaviorListener.1-modal
			...
/t
ModalWindow$WindowClosedBehavior(AbstractDefaultAjaxBehavior).getCallbackScript(Component) line: 465	
		CharSequence ajaxAttributes = renderAjaxAttributes(component);
/d
		return "Wicket.Ajax.ajax(" + ajaxAttributes + ");";
/t
ModalWindow.getWindowOpenJavaScript() line: 1111	
			buffer.append(behavior.getCallbackScript());
/d
			buffer.append(" };\n");

/ net zo	,
		if ((closeButtonCallback != null) || (haveCloseCallback == false))
		{
			CloseButtonBehavior behavior = getBehaviors(CloseButtonBehavior.class).get(0);
			buffer.append("settings.onCloseButton = function() { ");
			buffer.append(behavior.getCallbackScript());
			buffer.append(";return false;};\n");
		}
		buffer.append(getShowJavaScript());
/=
			return "window.setTimeout(function(){\n" + "  Wicket.Window.create(settings).show();\n"
			+ "}, 0);\n";
/t
ModalWindow.show(IPartialPageRequestHandler) line: 371	
			target.appendJavaScript(getWindowOpenJavaScript());
/d
			shown = true;
/t
RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 97	
			respond(handler);
/d
handler	ListenerInterfaceRequestHandler  (id=10964)	
	behaviorId	Integer  (id=10039)	
	listenerInterface	RequestListenerInterface  (id=9972)	
		listenerInterfaceClass	Class<T> (org.apache.wicket.behavior.IBehaviorListener) (id=5136)	
		method	Method  (id=9973)	
		name	"IBehaviorListener" (id=9974)	
	pageComponentProvider	PageAndComponentProvider  (id=10967)	
		component	ModalWindowMyPage$1  (id=10784)	
		pageClass	Class<T> (org.apache.wicket.examples.ajax.builtin.modal.ModalWindowMyPage) (id=1418)	
		pageId	Integer  (id=10976)	
		pageInstance	ModalWindowMyPage  (id=10760)	

		else if (scheduled != null)
		{
			execute(scheduled);
scheduled	AjaxRequestHandler  (id=11088)	
...
/s
AjaxRequestHandler.respond(IRequestCycle) line: 324	
		final StringResponse bodyResponse = new StringResponse();
		update.writeTo(bodyResponse, encoding);
/s
AjaxRequestHandler$1(PartialPageUpdate).writeTo(Response, String) line: 153	
			// process added components
			writeComponents(response, encoding);
/s
AjaxRequestHandler$1(PartialPageUpdate).writeComponents(Response, String) line: 245	
		// process component markup
		for (Map.Entry<String, Component> stringComponentEntry : markupIdToComponent.entrySet())
this	AjaxRequestHandler$1  (id=11093)	
	markupIdToComponent	LinkedHashMap<K,V>  (id=11098)	{modal19=[ModalWindow [Component id = modal]]}
		{
			final Component component = stringComponentEntry.getValue();

			if (!containsAncestorFor(component))
			{
response	StringResponse  (id=11303)	
<?xml version="1.0" encoding="UTF-8"?><ajax-response>

				writeComponent(response, component.getAjaxRegionMarkupId(), component, encoding);
/s
AjaxRequestHandler$1(XmlPartialPageUpdate).writeComponent(Response, String, Component, String) line: 66	
		component.setOutputMarkupId(true);
component=ModalWindow
				component.prepareForRender();
...
/s
ModalWindow.onBeforeRender() line: 854	
		shown = makeContentVisible();
/= true
		getContent().setOutputMarkupId(true); / [WebMarkupContainer [Component id = content]]
		getContent().setVisible(shown);

		super.onBeforeRender();
/ calls onBeforeRender op z'n children 
/t
AjaxRequestHandler$1(XmlPartialPageUpdate).writeComponent(Response, String, Component, String) line: 101	
				component.prepareForRender();
/d
				// render any associated headers of the component
				writeHeaderContribution(response, component);
/s
AjaxRequestHandler$1(PartialPageUpdate).writeHeaderContribution(Response, Component) line: 495	

this	AjaxRequestHandler$1  (id=11093)	
	header	PartialPageUpdate$PartialHtmlHeaderContainer  (id=11351)	

			IHeaderRenderStrategy strategy = AbstractHeaderRenderStrategy.get();
			strategy.renderHeader(header, null, component);
/s
ChildFirstHeaderRenderStrategy.renderHeader(HtmlHeaderContainer, HtmlHeaderContainer$HeaderStreamState, Component) line: 57	
		// Then its child hierarchy
		renderChildHeaders(headerContainer, rootComponent);
/ Geeft geen js	, 

		// Then the root component's headers
		renderRootComponent(headerContainer, headerStreamState, rootComponent);
/s
ChildFirstHeaderRenderStrategy(AbstractHeaderRenderStrategy).renderRootComponent(HtmlHeaderContainer, HtmlHeaderContainer$HeaderStreamState, Component) line: 119	
		headerContainer.renderHeaderTagBody(headerStreamState);
		rootComponent.internalRenderHead(headerContainer);
/s
ModalWindow(Component).internalRenderHead(HtmlHeaderContainer) line: 2723	
			// Then ask all behaviors
			for (Behavior behavior : getBehaviors())
			{
				if (isBehaviorAccepted(behavior))
				{
					if (response.wasRendered(behavior) == false)
					{
						behavior.renderHead(this, response);
/s
ModalWindow$CloseButtonBehavior(AbstractDefaultAjaxBehavior).renderHead(Component, IHeaderResponse) line: 96	
		super.renderHead(component, response);
/ niets	,
		CoreLibrariesContributor.contributeAjax(component.getApplication(), response);
/ sets de js needed for onze js	, die hieronder staat 	,
/s
CoreLibrariesContributor.contributeAjax(Application, IHeaderResponse) line: 71	
		JavaScriptLibrarySettings jsLibrarySettings = application.getJavaScriptLibrarySettings();
		else
		{
			ResourceReference wicketAjaxReference = jsLibrarySettings.getWicketAjaxReference();
			response.render(JavaScriptHeaderItem.forReference(wicketAjaxReference));
this	ResourceAggregator  (id=11388)	
/ hierarchy van js files over wicket-ajax-jquery.js	, and writes them in ResourceAggregator.domReadyItemsToBeRendered	, 
/t
ModalWindow$CloseButtonBehavior(AbstractDefaultAjaxBehavior).renderHead(Component, IHeaderResponse) line: 98	
		CoreLibrariesContributor.contributeAjax(component.getApplication(), response);
/d
response	ResourceAggregator  (id=11388)	
	itemsToBeRendered	LinkedHashMap<K,V>  (id=11416)	
		[0]	LinkedHashMap$Entry<K,V>  (id=11422)	
		[1]	LinkedHashMap$Entry<K,V>  (id=11423)	
		[2]	LinkedHashMap$Entry<K,V>  (id=11424)	
		[3]	LinkedHashMap$Entry<K,V>  (id=11425)	
		[4]	LinkedHashMap$Entry<K,V>  (id=11426)	


		response.render(JavaScriptHeaderItem.forScript("Wicket.Ajax.baseUrl=\"" + ajaxBaseUrl
			+ "\";", "wicket-ajax-base-url"));
/ ons js	,
/t
ModalWindow(Component).internalRenderHead(HtmlHeaderContainer) line: 2725	

/ ModalWindow$CloseButtonBehavior is done	, 
/ volgende	, 
			// Then ask all behaviors
			for (Behavior behavior : getBehaviors()) / behavior	ModalWindow$WindowClosedBehavior  (id=10771)	
			{
				if (isBehaviorAccepted(behavior))
				{
					if (response.wasRendered(behavior) == false)
					{
						behavior.renderHead(this, response);

/ MORGENOCHTEND
/ Click 'Show modal'





/ Einde CONNECTION LISTENERINTERFACEREQUESTHANDLER AND BEHAVIOR

/ workspace-wicket7_8

/ DEBUG STRINGRESOURCEMODEL

public class ResourcePage extends WebPage {
		MarkupContainer container=new ResourceContainer("container");
		add(container);
		IModel<Map<String,String>>subModel=new LoadableDetachableModel<Map<String, String>>() {
			@Override
			protected Map<String,String> load() {
				HashMap<String,String>map=new HashMap<>();
				map.put("answer",getAnswer());
				return map;
			}
		};
		IModel<String>model=new StringResourceModel("bar.answer",subModel);	
		ResourceLabel label=new ResourceLabel("title", model);
		container.add(label);

/ stack
/s

	StringResourceModel$AssignmentWrapper.load() line: 264	
this	StringResourceModel$AssignmentWrapper  (id=82)	
			if (StringResourceModel.this.component != null)	/ we hebben geen Component in de StringResourceModel die de AssignmentWrapper ontwijkt	,
/n
/ MORGENOCHTEND 8 mei
			else
			{
				return getString(component);	/ component=ResourceLabel
/cb

	StringResourceModel$AssignmentWrapper.load() line: 226	
			transientModelObject = load();
/cb

	StringResourceModel$AssignmentWrapper(LoadableDetachableModel<T>).getObject() line: 134	
	ResourceLabel(Component).getDefaultModelObject() line: 1626	
		final IModel<?> model = getDefaultModel();					AssignmentWrapper
				return model.getObject();
/cb

	ResourceLabel(Component).getDefaultModelObjectAsString() line: 1654	
	ResourceLabel(Label).onComponentTagBody(MarkupStream, ComponentTag) line: 115	
		replaceComponentTagBody(markupStream, openTag, getDefaultModelObjectAsString());
/cb

	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
	ResourceLabel(Component).internalRenderComponent() line: 2565	
				renderComponentTag(tag);
			markupStream.next();
				getMarkupSourcingStrategy().onComponentTagBody(this, markupStream, tag);
/cb

	ResourceLabel(WebComponent).onRender() line: 60	
	ResourceLabel(Component).internalRender() line: 2380	
	ResourceLabel(Component).render() line: 2308	
	ResourceContainer(MarkupContainer).renderNext(MarkupStream) line: 1524	
	ResourceContainer(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	ResourceContainer(MarkupContainer).renderComponentTagBody(MarkupStream, ComponentTag) line: 1734	
	ResourceContainer(MarkupContainer).onComponentTagBody(MarkupStream, ComponentTag) line: 1657	
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
	ResourceContainer(Component).internalRenderComponent() line: 2565	
	ResourceContainer(MarkupContainer).onRender() line: 1698	
	ResourceContainer(Component).internalRender() line: 2380	
	ResourceContainer(Component).render() line: 2308	
	ResourcePage(MarkupContainer).renderNext(MarkupStream) line: 1524	
	ResourcePage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	ResourcePage(Page).onRender() line: 879	
	ResourcePage(WebPage).onRender() line: 141	
	ResourcePage(Component).internalRender() line: 2380	
	ResourcePage(Component).render() line: 2308	
	ResourcePage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
	ApplicationFilterChain.internalDoFilter(ServletRequest, ServletResponse) line: 239	
	ApplicationFilterChain.doFilter(ServletRequest, ServletResponse) line: 206	
	StandardWrapperValve.invoke(Request, Response) line: 217	
	StandardContextValve.invoke(Request, Response) line: 106	
	NonLoginAuthenticator(AuthenticatorBase).invoke(Request, Response) line: 502	
	StandardHostValve.invoke(Request, Response) line: 142	
	ErrorReportValve.invoke(Request, Response) line: 79	
	AccessLogValve(AbstractAccessLogValve).invoke(Request, Response) line: 616	
	StandardEngineValve.invoke(Request, Response) line: 88	
	CoyoteAdapter.service(Request, Response) line: 518	
	Http11NioProcessor(AbstractHttp11Processor<S>).process(SocketWrapper<S>) line: 1091	
	Http11NioProtocol$Http11ConnectionHandler(AbstractProtocol$AbstractConnectionHandler<S,P>).process(SocketWrapper<S>, SocketStatus) line: 673	
	NioEndpoint$SocketProcessor.doRun() line: 1500	
	NioEndpoint$SocketProcessor.run() line: 1456	
	ThreadPoolExecutor(ThreadPoolExecutor).runWorker(ThreadPoolExecutor$Worker) line: 1145	
	ThreadPoolExecutor$Worker.run() line: 615	
	TaskThread$WrappingRunnable.run() line: 61	
	TaskThread(Thread).run() line: 745	


/ Einde DEBUG STRINGRESOURCEMODEL

