
/ RATE AGREEMENT

/ 7	.


Planning->Service Order->Search
 / set Planned start date 29-apr-2013
/ Edit de 1ste Haal	, N0000265
/ Click Edit cost	,



Estimated
  	FUEL	Fuel costs	11.91	EUR	AUTOMATIC	Calc.: 11.91 (ADD)
  	ADDITIONAL_DELIVERY	Additional Delivery Address	50.00	EUR	AUTOMATIC	Calc.: 50.00 (ADD)
  	FREIGHT	Freight	91.63	EUR	AUTOMATIC	Calc.: 91.63 (ADD)

Calculation Log
 RC_ADDITIONAL_STOP : RT_ADDITIONAL_ADDRESS_OUTPUT ( RATE TABLE ) = 50.00 EUR
 RC_RELEASE_DATE : RP_RELEASE_DATE ( STARTDATE ) = 2014-05-12 16:00:00 DATE
 RC_START_AFTER : RP_START_DATE_AFTER ( STARTDATE ) = 2014-05-15 16:00:00 DATE
 RC_FUEL : RP_FUEL ( MULTIPLY ) = 11.91 EUR
 RC_START_BEFORE : RP_START_DATE_BEFORE ( STARTDATE ) = 2014-05-15 17:00:00 DATE
 RC_SERVICE : SERVICE ( STRING ) = STANDARD
 RC_FREIGHT : RP_FREIGHT ( NOT EMPTY ) = 91.63 EUR

Calculation Log
 RC_ADDITIONAL_STOP : RT_ADDITIONAL_ADDRESS_OUTPUT ( RATE TABLE ) = 50.00 EUR
 NR_OF_CONSIGNMENTS ( ) = 1.0

 RC_RELEASE_DATE : RP_RELEASE_DATE ( STARTDATE ) = 2014-05-12 16:00:00 DATE
 RP_START_DATE_AFTER ( STARTDATE ) = 2014-05-15 16:00:00 DATE
 FreeValue ( ) = 1.00000
 REQ_END_AFTER ( ) = 2014-05-16 16:00:00 DATE
 LT_CARRIER_OUTPUT ( RATE TABLE ) = 3 WORKDAY
 CALC_LDM ( ) = 0.40 LDM
 TO COUNTRY ( ) = DE

 RC_START_AFTER : RP_START_DATE_AFTER ( STARTDATE ) = 2014-05-15 16:00:00 DATE
 FreeValue ( ) = 1.00000
 REQ_END_AFTER ( ) = 2014-05-16 16:00:00 DATE

 RC_FUEL : RP_FUEL ( MULTIPLY ) = 11.91 EUR
 RP_FREIGHT ( NOT EMPTY ) = 91.63 EUR
 RT_NL_DE_OUTPUT ( RATE TABLE ) = 91.63 EUR
 TO COUNTRY ( ) = DE
 RP_LDM_WEIGHT ( MULTIPLY ) = 700.0000000 KG
 FreeValue ( ) = 1750.00000
 CALC_LDM ( ) = 0.40 LDM
 TO POSTALCODE ( ) = 20095
 FreeValue ( ) = 0.13000

 RC_START_BEFORE : RP_START_DATE_BEFORE ( STARTDATE ) = 2014-05-15 17:00:00 DATE
 FreeValue ( ) = 1.00000
 REQ_END_BEFORE ( ) = 2014-05-16 17:00:00 DATE

 RC_SERVICE : SERVICE ( STRING ) = STANDARD
 SERVICE LEVEL ( ) = STANDARD

 RC_FREIGHT : RP_FREIGHT ( NOT EMPTY ) = 91.63 EUR
 RT_NL_DE_OUTPUT ( RATE TABLE ) = 91.63 EUR
 TO COUNTRY ( ) = DE
 RP_LDM_WEIGHT ( MULTIPLY ) = 700.0000000 KG
 FreeValue ( ) = 1750.00000
 CALC_LDM ( ) = 0.40 LDM
 TO POSTALCODE ( ) = 20095


Detailed log
 [11:58:28.576] Calculating rate agreement [OEGEMA]
 [11:58:28.577] Calculating rate agreement, no variables defined
 [11:58:28.586] Starting evaluation of component [RC_ADDITIONAL_STOP]
 [11:58:28.591] Evaluating criteria for rate table [RT_ADDITIONAL_ADDRESS]
 [11:58:28.591] FUNCTION TYPE: RateTable
 [11:58:28.594] Order detail [NR_OF_CONSIGNMENTS] results in:1.0
 [11:58:28.594] LOOKUP in table : RT_ADDITIONAL_ADDRESS results in: 50
 [11:58:28.595] COST COMPONENT : Additional stop with correction type: ADD evaluates to: 50
 [11:58:28.599] Added to total. New total: 50.00 EUR
 [11:58:28.603] Starting evaluation of component [RC_RELEASE_DATE]
 [11:58:28.606] FUNCTION TYPE: StartDate
 [11:58:28.606] PARAMETER: RP_START_DATE_AFTER start evaluation of parameter
 [11:58:28.608] FUNCTION TYPE: StartDate
 [11:58:28.608] FREE VALUE: 1.00000
 [11:58:28.614] Order detail [REQ_END_AFTER] results in:2014-05-16 16:00:00 DATE
 [11:58:28.617] PARAMETER: RP_START_DATE_AFTER evaluates to: 2014-05-15 16:00:00
 [11:58:28.618] PARAMETER: LT_CARRIER_OUTPUT start evaluation of parameter
 [11:58:28.622] Evaluating criteria for rate table [LT_CARRIER]
 [11:58:28.622] FUNCTION TYPE: RateTable
 [11:58:28.626] Order detail [CALC_LDM] results in:0.40 LDM
 [11:58:28.626] Order detail [TO COUNTRY] results in:DE
 [11:58:28.626] LOOKUP in table : LT_CARRIER results in: 3
 [11:58:28.628] PARAMETER: LT_CARRIER_OUTPUT evaluates to: 3
 [11:58:28.634] COST COMPONENT : Release Date with correction type: PLANNED_RELEASE evaluates to: 2014-05-12 16:00:00
 [11:58:28.634] Cost component [PLANNED_RELEASE] is ignored.
 [11:58:28.634] Starting evaluation of component [RC_START_AFTER]
 [11:58:28.635] COST COMPONENT : Planned start After with correction type: PLANNED_START_AFTER evaluates to: 2014-05-15 16:00:00
 [11:58:28.635] Cost component [PLANNED_START_AFTER] is ignored.
 [11:58:28.635] Starting evaluation of component [RC_FUEL]
 [11:58:28.637] FUNCTION TYPE: Multiply
 [11:58:28.637] PARAMETER: RP_FREIGHT start evaluation of parameter
 [11:58:28.639] FUNCTION TYPE: NotEmpty
 [11:58:28.639] PARAMETER: RT_NL_DE_OUTPUT start evaluation of parameter
 [11:58:28.643] Evaluating criteria for rate table [RT_NL_DE]
 [11:58:28.644] - Comparing [TO COUNTRY] with value [DE] (No conversion) with from-value [DE] and to-value [null] result [true]
 [11:58:28.644] FUNCTION TYPE: RateTable
 [11:58:28.644] Order detail [TO COUNTRY] results in:DE
 [11:58:28.644] PARAMETER: RP_LDM_WEIGHT start evaluation of parameter
 [11:58:28.646] FUNCTION TYPE: Multiply
 [11:58:28.646] FREE VALUE: 1750.00000
 [11:58:28.651] Order detail [CALC_LDM] results in:0.40 LDM
 [11:58:28.651] DEBUG [RP_LDM_WEIGHT] Function: MULTIPLY, input: FREE_VALUE: input has no unit defined, no conversion performed
 [11:58:28.653] Function: MULTIPLY, input: CALC_LDM: conversion from 0.40 LDM to 0.40 Kilogram
 [11:58:28.656] PARAMETER: RP_LDM_WEIGHT evaluates to: 700.0000000
 [11:58:28.656] Order detail [TO POSTALCODE] results in:20095
 [11:58:28.656] LOOKUP in table : RT_NL_DE results in: 91.6278651701909
 [11:58:28.659] PARAMETER: RT_NL_DE_OUTPUT evaluates to: 91.6278651701909
 [11:58:28.659] PARAMETER: RT_NL-SPEC_OUTPUT start evaluation of parameter
 [11:58:28.663] Evaluating criteria for rate table [RT_NL-SPEC]
 [11:58:28.663] - Comparing [TO PARTY ID] with value [] (No conversion) with from-value [IEPER] and to-value [null] result [false]
 [11:58:28.664] PARAMETER: RT_NL-SPEC_OUTPUT evaluates to: null
 [11:58:28.664] PARAMETER: RT_NL_OUTPUT start evaluation of parameter
 [11:58:28.668] Evaluating criteria for rate table [RT_NL]
 [11:58:28.668] - Comparing [TO COUNTRY] with value [DE] (No conversion) with from-value [NL] and to-value [null] result [false]
 [11:58:28.668] PARAMETER: RT_NL_OUTPUT evaluates to: null
 [11:58:28.669] PARAMETER: RT_NL-BE_OUTPUT start evaluation of parameter
 [11:58:28.673] Evaluating criteria for rate table [RT_NL-BE]
 [11:58:28.673] - Comparing [TO PARTY ID] with value [] (No conversion) with from-value [!IEPER] and to-value [null] result [true]
 [11:58:28.673] - Comparing [TO COUNTRY] with value [DE] (No conversion) with from-value [BE] and to-value [null] result [false]
 [11:58:28.673] PARAMETER: RT_NL-BE_OUTPUT evaluates to: null
 [11:58:28.678] PARAMETER: RP_FREIGHT evaluates to: 91.6278651701909
 [11:58:28.678] FREE VALUE: 0.13000
 [11:58:28.691] DEBUG [RP_FUEL] Function: MULTIPLY, input: FREE_VALUE: input has no unit defined, no conversion performed
 [11:58:28.693] COST COMPONENT : Fuel costs with correction type: ADD evaluates to: 11.911622472124817000
 [11:58:28.699] Added to total. New total: 61.91 EUR
 [11:58:28.705] Starting evaluation of component [RC_FREIGHT]
 [11:58:28.705] COST COMPONENT : Freight costs with correction type: ADD evaluates to: 91.6278651701909
 [11:58:28.711] Added to total. New total: 153.54 EUR
 [11:58:28.717] Starting evaluation of component [RC_SERVICE]
 [11:58:28.719] FUNCTION TYPE: String
 [11:58:28.720] Order detail [SERVICE LEVEL] results in:STANDARD
 [11:58:28.720] COST COMPONENT : Service with correction type: PROVIDER_SERVICE_LEVEL evaluates to: STANDARD
 [11:58:28.720] Cost component [PROVIDER_SERVICE_LEVEL] is ignored.
 [11:58:28.720] Starting evaluation of component [RC_START_BEFORE]
 [11:58:28.722] FUNCTION TYPE: StartDate
 [11:58:28.722] FREE VALUE: 1.00000
 [11:58:28.726] Order detail [REQ_END_BEFORE] results in:2014-05-16 17:00:00 DATE
 [11:58:28.729] COST COMPONENT : Planned start before with correction type: PLANNED_END_BEFORE evaluates to: 2014-05-15 17:00:00
 [11:58:28.729] Cost component [PLANNED_END_BEFORE] is ignored.
 [11:58:28.739] Cost component specification RC_ADDITIONAL_STOP adds value 50.00 (ADD) to price type ADDITIONAL_DELIVERY
 [11:58:28.748] Cost component specification RC_FUEL adds value 11.91 (ADD) to price type FUEL
 [11:58:28.759] Cost component specification RC_FREIGHT adds value 91.63 (ADD) to price type FREIGHT
 [11:58:28.782] Calculated price for FREIGHT is 91.63: 91.63 (ADD)
 [11:58:28.782] Calculated price for ADDITIONAL_DELIVERY is 50.00: 50.00 (ADD)
 [11:58:28.783] Calculated price for FUEL is 11.91: 11.91 (ADD)
 [11:58:28.821] Executed on: Thu May 22 11:58:28 CEST 2014

/ 7	. 

Configuration->Finance->Rate calculation -> Rate agreements(admin)
Edit OEGEMA

Selection criteria
Organization ID		HAAL-ZW		Regex
Carrier			OEGEMA		Regex	
From country		NL		Regex
To country		BE|NE|DE	Regex

Rate tables

copy				LT_CARRIER		Working day			
copy				RT_ADDITIONAL_ADDRESS		Euro			
copy				RT_NL-BE	From NL to BE	Euro			
copy				RT_NL-SPEC	From NL to NL|BE	Euro			
copy				RT_NL	From NL to NL	Euro			
copy				RT_NL_DE	From NL to DE	Euro		

Rate parameters 

	RP_START_DATE_AFTER	
	RP_FUEL	
	RP_FREIGHT	
	SERVICE	
	RP_LDM_WEIGHT	
	RP_START_DATE_BEFORE	

Rate components

	RC_SERVICE	Service
	RC_START_AFTER	Planned start After
	RC_FUEL	Fuel costs
	RC_RELEASE_DATE	Release Date
	RC_START_BEFORE	Planned start before
	RC_FREIGHT	Freight costs
	RC_ADDITIONAL_STOP	Additional stop


/ In de db	,
                                                                                                                              
mpo=> select name from rate_table;
         name          
-----------------------
 LT_TRANSPORT
 RT_NL_DE
 RT_NL-BE
 RT_ADDITIONAL_ADDRESS
 RT_ADDITIONAL_ADDRESS
 LT_CARRIER
 LT_RELEASE_CARRIER
 LT_RELEASE_SUPPLIER
 ZONE_FROM
 RT-MAUT
 RT-FREIGHT-DE-HAAL
 RT-FREIGHT-DE-NL
 ZONE-TO
 RT_NL
 RT_NL-SPEC




/ Einde RATE AGREEMENT

/ HASH SO
/ WHEN THE RATES CALCULATED

ListenerList.fireEvent(Event) line: 80	
		for (EventListener myListener : theListenerList) {
			myListener.handleEvent(anEvent);
		}
/s
RateCalcEventListener.handleEvent(Event) line: 67	
				recalcServiceOrderCost(anEvent);
/s
RateCalcEventListener.recalcServiceOrderCost(Event) line: 164	
					recalculate(myOrderVO, RateType.RATE_TYPE_SERVICE_ORDER_COST, anEvent.getEventContext());
/s
RateCalcEventListener.recalculate(ServiceOrderVO, String, TMSEventContext) line: 258	
				myService.recalculate(myOrder, RateType.RATE_TYPE_SERVICE_ORDER_COST, anEventContext);
/s
CalculationServiceImpl.recalculate(LogisticsOrderVO, String, TMSEventContext) line: 346	
					if (!myRateCalculationVO.rateCalculationRequired()) {
/s
RateCalculationVO.rateCalculationRequired() line: 692	
			String myHash = RateCalcHashCalculator.calculate(rateAgreement, getOrder());
/s
RateCalcHashCalculator.calculate(RateAgreementVO, LogisticsOrderVO) line: 25	
			Collection<Object> myValues = aRateAgreement.getOrderDetailValues(anOrder);
/s
RateAgreementVO.getOrderDetailValues(Object) line: 168	
               Collection<RateParameterVO> myRateParameterList = getRateParameterList();
[theSystemId: 26631993Name :RP_RELEASE_DATE
, theSystemId: 26632353Name :RT_ADDITIONAL_ADDRESS_OUTPUT
, theSystemId: 26631989Name :RP_START_DATE_AFTER
, theSystemId: 26631980Name :LT_CARRIER_OUTPUT
, theSystemId: 26631943Name :RT_NL-BE_OUTPUT
, theSystemId: 26631884Name :RP_LDM_WEIGHT
, theSystemId: 26631912Name :RT_NL_OUTPUT
, theSystemId: 26631964Name :RT_NL_DE_OUTPUT
, theSystemId: 26631983Name :RP_START_DATE_BEFORE
, theSystemId: 26631919Name :RP_FUEL
, theSystemId: 26632003Name :SERVICE
, theSystemId: 26631887Name :RP_FREIGHT
, theSystemId: 26631929Name :RT_NL-SPEC_OUTPUT
]
/ Waarom steeds andere volgorde	?
/ TODO

/ verzamel so data	,
[theSystemId: 26631993Name :RP_RELEASE_DATE
LT_CARRIER_OUTPUT->null
RP_START_DATE_AFTER->null

, theSystemId: 26632353Name :RT_ADDITIONAL_ADDRESS_OUTPUT
SystemId: 26631840, Name :NR_OF_CONSIGNMENTS, PathOrClass :count(./consignmentList) -> Double 1.0

, theSystemId: 26631989Name :RP_START_DATE_AFTER
free value 1.0000 -> null
  26631800 | ./consignmentList[1]/serviceActionList[1]/shipmentOrderVO/dateSetVO/requestedEndAfter | REQ_END_AFTER |     
 -> Timestmap 2014-05-16 16:00:00.0

theSystemId: 26631980Name :LT_CARRIER_OUTPUT
SystemId: 26631726, Name :CALC_LDM, PathOrClass :./calculatedTotalLoadingMeters -> BigDecimal 0.80
SystemId: 4200006, Name :TO COUNTRY, PathOrClass :./toPartyVO/countryVO/code -> "DE"

, theSystemId: 26631943Name :RT_NL-BE_OUTPUT
RP_LDM_WEIGHT->null
SystemId: 4200010, Name :FROM PARTY ID, PathOrClass :./fromPartyVO/partyId -> ""
SystemId: 4200006, Name :TO COUNTRY, PathOrClass :./toPartyVO/countryVO/code -> "DE"

, theSystemId: 26631884Name :RP_LDM_WEIGHT
free value 1750.00000 -> null
SystemId: 26631726, Name :CALC_LDM, PathOrClass :./calculatedTotalLoadingMeters -> BigDecimal 0.80

, theSystemId: 26631912Name :RT_NL_OUTPUT
LD_RPM_WEIGHT -> null
SystemId: 4200010, Name :FROM PARTY ID, PathOrClass :./fromPartyVO/partyId -> ""
SystemId: 4200006, Name :TO COUNTRY, PathOrClass :./toPartyVO/countryVO/code -> "DE"

, theSystemId: 26631964Name :RT_NL_DE_OUTPUT
RP_LDM_WEIGHT -> null
SystemId: 4200006, Name :TO COUNTRY, PathOrClass :./toPartyVO/countryVO/code -> "DE"
SystemId: 4200007, Name :TO POSTALCODE, PathOrClass :./toPartyVO/postalCode -> 20095

, theSystemId: 26631983Name :RP_START_DATE_BEFORE
free value 1.00000 -> null
SystemId: 26631801, Name :REQ_END_BEFORE, PathOrClass :./consignmentList[1]/serviceActionList[1]/shipmentOrderVO/dateSetVO/requestedEndBefore -> "2014-05-16 17:00:00.0" 

theSystemId: 26631993Name :RP_RELEASE_DATE  
LT_CARRIER_OUTPUT (is een rate parameter) -> null	
RP_START_DATE_AFTER -> null

, theSystemId: 26631919Name :RP_FUEL
26631918 free value 0.13 -> null
26631917 RP_FREIGHT -> null

, theSystemId: 26632003Name :SERVICE
SystemId: 4200018, Name :SERVICE LEVEL, PathOrClass :./consignmentList[1]/serviceActionList[1]/shipmentOrderVO/shipmentServiceLevelVO/code -> "STANDARD"

, theSystemId: 26631887Name :RP_FREIGHT
RT_NL-BE_OUTPUT -> null
RT_NL_DE_OUTPUT -> null
RT_NL-SPEC_OUTPUT -> null
RT_NL_OUTPUT -> null

, theSystemId: 26631929Name :RT_NL-SPEC_OUTPUT
RP_LDM_WEIGHT -> null 	/ see (*)
SystemId: 4200010, Name :FROM PARTY ID, PathOrClass :./fromPartyVO/partyId -> ""
SystemId: 4200011, Name :TO PARTY ID, PathOrClass :./toPartyVO/partyId -> ""

-----------

/ RESULT LIST

[1.0, 2014-05-16 16:00:00.0, 0.80, DE, , DE, 0.80, , DE, DE, 20095, 2014-05-16 17:00:00.0, STANDARD, , ]

/ Dus	,
[1.0 				count(./consignmentList) -> Double 1.0
 2014-05-16 16:00:00.0 		./consignmentList[1]/serviceActionList[1]/shipmentOrderVO/dateSetVO/requestedEndAfter 
					| REQ_END_AFTER |     -> Timestmap 2014-05-16 16:00:00.0
 0.80				./calculatedTotalLoadingMeters -> BigDecimal 0.80
 DE 				./toPartyVO/countryVO/code -> "DE"
 				./fromPartyVO/partyId -> ""
 DE 				./toPartyVO/countryVO/code -> "DE"
 0.80 				./calculatedTotalLoadingMeters -> BigDecimal 0.80
 				./fromPartyVO/partyId -> ""
 DE 				./toPartyVO/countryVO/code -> "DE"
 DE 				./toPartyVO/countryVO/code -> "DE"
 20095 				./toPartyVO/postalCode -> 20095
 2014-05-16 17:00:00.0 		./consignmentList[1]/serviceActionList[1]/shipmentOrderVO/dateSetVO/requestedEndBefore 
					-> "2014-05-16 17:00:00.0" 
 STANDARD 			./consignmentList[1]/serviceActionList[1]/shipmentOrderVO/shipmentServiceLevelVO/code 
					-> "STANDARD"
 
 ]

/ Einde RESULT LIST

/ SAMENVATTING TABLES

/ in input_paramater table is  rate_func_systemid de rate_function waar deze input_parameter parameter van is	,
/ in rate_parameter table is outputfrom_function_systemid de fct die deze rate_parameter geeft	,
/ rp=fun(ip, ip2)
/ fun is rate_func_systemid in de input_parameter table	,
/ fun is  outputfrom_function_systemid  in de rate_parameter table	,

/ de fct van rate_function is dat in de table input_parameter er een column rate_func_systemid is waardoor je erachter kunt komen van welke parameters  een rate_parameter afhangt	,
/ dit itt function_definition , die zegt om welke fct het gaat: multiply, not_empty	, ....


/ Einde SAMENVATTING TABLES

/ INPUT PARAMETERS FROM RATE PARAMETER FUNCTION


/ (*) RP_LDM_WEIGHT is per service order, constant	,
mpo=> select*from input_parameter where  rate_func_systemid=(select outputfrom_function_systemid from rate_parameter where system_id=26631884)\g
 system_id | parameter_systemid | func_par_def_systemid | rate_func_systemid | dimension_systemid | configuration_value |
 order_detail_systemid | free_value 
-----------+--------------------+-----------------------+--------------------+--------------------+---------------------+
-----------------------+------------
  26631902 |                    |                       |           26631881 |                    |                     |
              26631726 |           
  26631903 |                    |                       |           26631881 |                    |                     |
                       | 1750.00000
(2 rows)
mpo=> select*from function_definition where system_id=(select function_definition_systemid from rate_function where system_id=(select outputfrom_function_systemid from rate_parameter where system_id=26631884))\g
 system_id |                             definition                             |   name   
-----------+--------------------------------------------------------------------+----------
   3500007 | com.mpobjects.oms.ratecalc.model.process.function.MultiplyFunction | MULTIPLY

/ (**)
mpo=> select*from order_detail where system_id=(select order_detail_systemid from input_parameter where order_detail_systemid is not null and  rate_func_systemid=(select outputfrom_function_systemid from rate_parameter where system_id=26631884))\g
 system_id |         path_or_class          |   name   | unit_systemid | parameter_type_systemid |     rate_type      
-----------+--------------------------------+----------+---------------+-------------------------+--------------------
  26631726 | ./calculatedTotalLoadingMeters | CALC_LDM |      26631725 |                 3700002 | service_order_cost
(1 row)
/ (**) werkt NIET als een subquery multiple results geeft,	 bijv als in de rate_parameter system_id=26631929 


/ Einde HASH SO
/ Einde WHEN THE RATES CALCULATED

/t
public class RateCalcHashCalculator {
	public static String calculate(RateAgreementVO aRateAgreement, LogisticsOrderVO anOrder) {
			Collection<Object> myValues = aRateAgreement.getOrderDetailValues(anOrder);
/ D
[1.0, 2014-05-16 16:00:00.0, 0.80, DE, , DE, 0.80, , DE, DE, 20095, 2014-05-16 17:00:00.0, STANDARD, , ]

			myValues.add(aRateAgreement.getName());
[1.0, 2014-05-16 16:00:00.0, 0.80, DE, , DE, 0.80, , DE, DE, 20095, 2014-05-16 17:00:00.0, STANDARD, , , OEGEMA]
			String myValuesAsString = StringUtils.implode(myValues.toArray(), "-");
1.0-2014-05-16 16:00:00.0-0.80-DE--DE-0.80--DE-DE-20095-2014-05-16 17:00:00.0-STANDARD---OEGEMA
				return StringUtils.encriptSha(myValuesAsString);

/t
	public boolean rateCalculationRequired() {
		String myHash = RateCalcHashCalculator.calculate(rateAgreement, getOrder());
			if (ObjectUtils.equals(myHash, serviceOrder.getRatecalcMd5Hash())) {
/ NEE
		return true;

/t
	public void recalculate(LogisticsOrderVO anOrder, String aRateType, TMSEventContext anEventContext) throws AbstractException {
					if (!myRateCalculationVO.rateCalculationRequired()) {
/ NEE
...
				myRateCalculationVO.runFor(mySelectedRateAgreement);
/s
public class RateCalculationVO {
	public void runFor(RateAgreementVO aRateAgreementVO) {
			Set<Variable> myList = aRateAgreementVO.getVariableList();
[]
			if (myList.size() == 0) {
/ JA
				/* No variables (iteration) involved */
				RateCalculationAlternative myAlterNative = new RateCalculationAlternative(this);
				alternativeList.add(myAlterNative);
				addToLog("Calculating rate agreement, no variables defined");
				runFor(aRateAgreementVO, myAlterNative);
/s
	protected void runFor(RateAgreementVO aRateAgreementVO, RateCalculationAlternative anAlternative) {
			populateManuallyModifiedResultsMap();
/ Doet NIETS	, 
/ TODO

			Collection<CostComponentSpecificationVO> myCostComponentSpecificationList = aRateAgreementVO.getCostComponentSpecificationList();
[CostComponentSpecification:26632004/RC_SERVICE/Service
 CostComponentSpecification:26631995/RC_START_AFTER/Planned start After
 CostComponentSpecification:26631920/RC_FUEL/Fuel costs
 CostComponentSpecification:26631994/RC_RELEASE_DATE/Release Date
 CostComponentSpecification:26631996/RC_START_BEFORE/Planned start before
 CostComponentSpecification:26631888/RC_FREIGHT/Freight costs
 CostComponentSpecification:26632354/RC_ADDITIONAL_STOP/Additional stop]

/ Deze zien we als we op de so click op "costs"	, we zien	,
Service order costs
Estimated
Fuel
Additional Delivery
Freight

Calculation log
RC_ADDITIONALSTOP
RC_RELEASE_DATE
...
/ Deze kun je allemaal uitklappen	,

				for (CostComponentSpecificationVO myCostComp : myCostComponentSpecificationList) {
					for (RateResult myResult : myCostComp.run(this)) {
/s
public class CostComponentSpecificationVO extends ValueObject implements Cloneable {
	public List<RateResult> run(RateCalculationVO aRateCalculation) throws RateException {
/ this=CostComponentSpecification:26632004/RC_SERVICE/Service
/ aRateCalculation==rateCalculationVO (RA: OEGEMA, orderSystemid:N0000265/26632537)

	} else {
			RateParameterVO myParameter = getRateParameter();
theSystemId: 26632003Name :SERVICE
			RateResult myResult = myParameter.calculate(aRateCalculation);
/s
public class RateParameterVO extends ValueObject implements Comparable<RateParameterVO> {
	public RateResult calculate(RateCalculationVO aRateCalculation) throws RateException {
...
						if (aRateCalculation.shouldCalculate(this)) {
true
/s
public class RateParameterVO extends ValueObject implements Comparable<RateParameterVO> {
	public boolean shouldCalculate(RateParameterVO aParameter) throws RateException {
		AbstractRateFunction myFunction = getRateFunction(aParameter);
/s
public class RateParameterVO extends ValueObject implements Comparable<RateParameterVO> {
	public AbstractRateFunction getRateFunction(RateParameterVO aRateParameterVO) throws RateException {
...
				myFunction.setRateFunctionVO(myOutputfromFunction);
/ myOutputfromFunction=com.mpobjects.oms.ratecalc.model.ratefunction.vo.RateFunctionVO/id:26632001
/ heeft db persistence	,
/ myFunction=com.mpobjects.oms.ratecalc.model.process.function.StringFunction@74f16ba2
/ heeft GEEN db persistence	,

/ Intermezzo

mpo=> select*from rate_parameter where system_id=26632003\g
 system_id |  name   | description | outputfrom_function_systemid | rate_agreement_systemid | is_persistent | sequence_nr
 | parameter_type_systemid | is_user_editable 
-----------+---------+-------------+------------------------------+-------------------------+---------------+------------
-+-------------------------+------------------
  26632003 | SERVICE |             |                     26632001 |                26631869 |             0 |           0
 |                         |                0
(1 row)



mpo=> select*from rate_function where system_id=26632001\g
 system_id | function_definition_systemid | is_user_defined | user_func_def | rate_table_systemid | unit_systemid 
-----------+------------------------------+-----------------+---------------+---------------------+---------------
  26632001 |                      3500013 |               0 |               |                     |              
(1 row)

mpo=> select*from function_definition\g
   3500013 | com.mpobjects.oms.ratecalc.model.process.function.StringFunction              | STRING

/ Einde Intermezzo

				myFunction.setRateContext(this);
/ this=rateCalculationVO (RA: OEGEMA, orderSystemid:N0000265/26632537)

/ t
public boolean shouldCalculate(RateParameterVO aParameter) throws RateException {
		AbstractRateFunction myFunction = getRateFunction(aParameter);
/ D
...
		return myResult.booleanValue();

/t
public class RateParameterVO extends ValueObject implements Comparable<RateParameterVO> {
	public RateResult calculate(RateCalculationVO aRateCalculation) throws RateException {
...
						if (aRateCalculation.shouldCalculate(this)) {
/ JA
							AbstractRateFunction myAbstractRateFunction = aRateCalculation.getRateFunction(this);
/ s
	public AbstractRateFunction getRateFunction(RateParameterVO aRateParameterVO) throws RateException {

/ hier waren we net, maar nu in de cache	,

		AbstractRateFunction myFunction = rateFunctionCache.get(myKey);
com.mpobjects.oms.ratecalc.model.process.function.StringFunction@5cd646c7
/ uit de cache	,
		return myFunction;
/t
	public RateResult calculate(RateCalculationVO aRateCalculation) throws RateException {
							AbstractRateFunction myAbstractRateFunction = aRateCalculation.getRateFunction(this);
/ D
myAbstractRateFunction	StringFunction  (id=30465)	
	theRateContext	RateCalculationVO  (id=30431)	
	theRateFunctionVO	RateFunctionVO_$$_javassist_58  (id=30472)	
com.mpobjects.oms.ratecalc.model.ratefunction.vo.RateFunctionVO/id:26632001

							RateFunctionVO myRateFunction = getOutputfromFunctionVO();
/ this=theSystemId: 26632003Name :SERVICE
							Collection<InputParameterVO> myInputParameterList = myRateFunction.getInputParameterList();
[SystemId: 26632002]

/ Intermezzo

select*from input_parameter where rate_func_systemid=(
        select outputfrom_function_systemid from rate_parameter
        where system_id=)\g
/ Geef een rate_parameter system_id	,

mpo=> select*from input_parameter where system_id=26632002\g
 system_id | parameter_systemid | func_par_def_systemid | rate_func_systemid | dimension_systemid | configuration_value |
 order_detail_systemid | free_value 
-----------+--------------------+-----------------------+--------------------+--------------------+---------------------+
-----------------------+------------
  26632002 |                    |                       |           26632001 |                    |                     |
               4200018 |           


/ Einde Intermezzo


							} else {
								// First, make sure al input parameters are calculated
								for (InputParameterVO myInputParameter : myInputParameterList) {
									RateResult mySub = myInputParameter.calculate(aRateCalculation);
/s
public class InputParameterVO extends ValueObject {
	public RateResult calculate(RateCalculationVO aRateCalculation) throws RateException {
/ this=SystemId: 26632002

			OrderDetail myServiceorderDetail = getOrderDetailVO();
SystemId: 4200018, Name :SERVICE LEVEL, PathOrClass :./consignmentList[1]/serviceActionList[1]/shipmentOrderVO/shipmentServiceLevelVO/code

			RateParameterVO myParameter = getParameterVO();
null
			BigDecimal myFreeValue = getFreeValue();
null
				myRateResult = aRateCalculation.evaluate(myServiceorderDetail);
/s
public class RateCalculationVO {
	public RateResult evaluate(OrderDetail aOrderDetailVO) {
				} else {
					LogisticsOrderVO myOrder = getOrder();
/ seo
							} else {
								myRet = aOrderDetailVO.retrieveValueFromOrder(myOrder);
/s
	public Object retrieveValueFromOrder(LogisticsOrderVO anOrder) {
		JXPathContext myContext = JXPathContext.newContext(anOrder);
		myContext.setLenient(true);
		String myPathOrClass = getPathOrClass();
./consignmentList[1]/serviceActionList[1]/shipmentOrderVO/shipmentServiceLevelVO/code
		Object myValue = myContext.getValue(myPathOrClass);
STANDARD
		return myValue;
	}

/t
							} else {
								myRet = aOrderDetailVO.retrieveValueFromOrder(myOrder);
/ D
STANDARD

							} else {
								myRateResult = new RateResult(myRet.toString());
/ D
				myRateResult.setUnitVO(aOrderDetailVO.getUnit());
null

/t
	public RateResult calculate(RateCalculationVO aRateCalculation) throws RateException {
				myRateResult = aRateCalculation.evaluate(myServiceorderDetail);
/ D
[Unit: null; Value: STANDARD]
					myRateResult.setResultName(myServiceorderDetail.getName());
"SERVICE LEVEL"
					if (myRateResult.getUnitVO() == null) {
/ JA
						myRateResult.setUnitVO(myServiceorderDetail.getUnit());
null

			setRateResult(myRateResult);
			return getRateResult();

/t
	public RateResult calculate(RateCalculationVO aRateCalculation) throws RateException {
									RateResult mySub = myInputParameter.calculate(aRateCalculation);
/ D
[Unit: null; Value: STANDARD]

										mySubResults.add(mySub);
[[Unit: null; Value: STANDARD]]

								myResult = myAbstractRateFunction.convertAndCalculate(myInputParameterList, aRateCalculation);
[Unit: null; Value: STANDARD]

							if (myResult != null) {
/this=theSystemId: 26632003Name :SERVICE
								myResult.setResultName(getName());
SERVICE
								myResult.setFunctionName(getOutputfromFunctionVO().getFunctionDefinitionVO().getName());
STRING
								myResult.setSubResultList(mySubResults);
[[Unit: null; Value: STANDARD]]
								if (myResult.getUnitVO() == null) {
									myResult.setUnitVO(getUnit());
null

						aRateCalculation.cacheResult(this, myResult);
{SERVICE=[Unit: null; Value: STANDARD]}

			return myResult;

/t
	public List<RateResult> run(RateCalculationVO aRateCalculation) throws RateException {
			RateResult myResult = myParameter.calculate(aRateCalculation);
/ D
				myResultList.add(myResult);
/ WAS: []	,
[[Unit: null; Value: STANDARD]]

/ t
	protected void runFor(RateAgreementVO aRateAgreementVO, RateCalculationAlternative anAlternative) {
				for (CostComponentSpecificationVO myCostComp : myCostComponentSpecificationList) {
					for (RateResult myResult : myCostComp.run(this)) {
/ D
						anAlternative.addResult(myCostComp, myResult);
/ myCostComp= CostComponentSpecification:26632004/RC_SERVICE/Service
/ myResult= [Unit: null; Value: STANDARD]
/ anAlternative=[RC_SERVICE = STANDARD] 


/ Volgende	,
				for (CostComponentSpecificationVO myCostComp : myCostComponentSpecificationList) {
					for (RateResult myResult : myCostComp.run(this)) {

/ Intermezzo

/ een rc is in de cost_component_specification tbl	,

mpo=> select*from cost_component_specification\g
 system_id |         name         |      description      | parameter_systemid | correction_type_systemid | order_rate_p
art_systemid | sequence_nr | rate_agreement_systemid | rate_plus_mode 
-----------+----------------------+-----------------------+--------------------+--------------------------+-------------
-------------+-------------+-------------------------+----------------
  26631995 | RC_START_AFTER       | Planned start After   |           26631989 |                   554283 |             
    26631782 |           0 |                26631869 | NONE

mpo=> select*from rate_parameter where system_id=26631989\g
 system_id |        name         | description | outputfrom_function_systemid | rate_agreement_systemid | is_persistent | 
sequence_nr | parameter_type_systemid | is_user_editable 
-----------+---------------------+-------------+------------------------------+-------------------------+---------------+-
------------+-------------------------+------------------
  26631989 | RP_START_DATE_AFTER |             |                     26631986 |                26631869 |             0 | 
          0 |                         |                0
(1 row)

mpo=> select c.name,r.name from cost_component_specification c join rate_parameter r on c.parameter_systemid=r.system_id\g 
         name         |             name             
----------------------+------------------------------
 RC_FREIGHT           | RP_FREIGHT
 RC_FUEL              | RP_FUEL
 RC_MAUT              | RT-MAUT_OUTPUT
 RC_RELEASE_DATE      | RP_RELEASE_DATE
 RC_START_BEFORE      | RP_START_DATE_BEFORE
 RC_START_AFTER       | RP_START_DATE_AFTER
 RC_ADDIONTAL_ADDRESS | RT_ADDITIONAL_ADDRESS_OUTPUT
 RC_FREIGHT           | RP_FREIGHT
 RC_FUEL              | RP_FUEL
 RC_START_BEFORE      | RP_START_DATE_BEFORE
 RC_START_AFTER       | RP_START_DATE_AFTER
 RC_RELEASE_DATE      | RP_RELEASE_DATE
 RC_SERVICE           | SERVICE
 RC_ADDITIONAL_STOP   | RT_ADDITIONAL_ADDRESS_OUTPUT
(14 rows)



/ Einde Intermezzo
/s
/ this=CostComponentSpecification:26631995/RC_START_AFTER/Planned start After
		} else {
			RateParameterVO myParameter = getRateParameter();
/ this=CostComponentSpecification:26631995/RC_START_AFTER/Planned start After
/ myParameter=theSystemId: 26631989Name :RP_START_DATE_AFTER
			RateResult myResult = myParameter.calculate(aRateCalculation);
/s
	public RateResult calculate(RateCalculationVO aRateCalculation) throws RateException {
						if (aRateCalculation.shouldCalculate(this)) {
/s
	public boolean shouldCalculate(RateParameterVO aParameter) throws RateException {
		AbstractRateFunction myFunction = getRateFunction(aParameter);
/s
	public AbstractRateFunction getRateFunction(RateParameterVO aRateParameterVO) throws RateException {
		String myKey = aRateParameterVO.getName();
RP_START_DATE_AFTER
		AbstractRateFunction myFunction = rateFunctionCache.get(myKey);
		if (myFunction == null) {
/ JA
			RateFunctionVO myOutputfromFunction = aRateParameterVO.getOutputfromFunctionVO();
com.mpobjects.oms.ratecalc.model.ratefunction.vo.RateFunctionVO/id:26631986
			FunctionDefinitionVO myFunctionDefinition = myOutputfromFunction.getFunctionDefinitionVO();
theSystemId: 3500014
Definition :com.mpobjects.oms.ratecalc.model.process.function.StartDateFunction,Name :STARTDATE
			String myClassName = myFunctionDefinition.getDefinition();
com.mpobjects.oms.ratecalc.model.process.function.StartDateFunction
/ deze string staat in de db, in de function_definition table	,
			try {
				Class<?> myClass = Class.forName(myClassName);
				myFunction = (AbstractRateFunction) myClass.newInstance();
				myFunction.setRateFunctionVO(myOutputfromFunction);
/ de rate_function is de function def, plus de input parameter list	,
				myFunction.setRateContext(this);
rateCalculationVO (RA: OEGEMA, orderSystemid:N0000265/26632537)

/t
public boolean shouldCalculate(RateParameterVO aParameter) throws RateException {
		AbstractRateFunction myFunction = getRateFunction(aParameter);
/ D
myFunction	StartDateFunction  (id=30782)	
		handler	JavassistLazyInitializer  (id=30786)	
			target	RateFunctionVO  (id=30813)	
				theFunctionDefinition	FunctionDefinitionVO  (id=30775)	
/ Hierin staat de string "com.mpobjects.oms.ratecalc.model.process.function.StartDateFunction" waar myFunction een inst van is	,
				theInputParameterList	PersistentSet  (id=30816)	
[SystemId: 26631988, SystemId: 26631987]

		String myKey = aParameter.getName();
RP_START_DATE_AFTER
		Boolean myResult = shouldCalculateCache.get(myKey);
		if (myResult == null) {
/ JA
			try {
				myResult = myFunction.shouldCalculate(this);
true
			shouldCalculateCache.put(myKey, myResult);
RP_START_DATE_AFTER=true
		return myResult.booleanValue();
/t
public RateResult calculate(RateCalculationVO aRateCalculation) throws RateException {
						if (aRateCalculation.shouldCalculate(this)) {
/ D
/ JA
							AbstractRateFunction myAbstractRateFunction = aRateCalculation.getRateFunction(this);
/ Pakt de juiste fct uit de rateFunctionCache, met key RP_START_DATE_AFTER	,

aRateCalculation	RateCalculationVO  (id=30431)	
	rateFunctionCache	HashMap<K,V>  (id=30547)	
{RP_START_DATE_AFTER=com.mpobjects.oms.ratecalc.model.process.function.StartDateFunction@573c4a43, SERVICE=com.mpobjects.oms.ratecalc.model.process.function.StringFunction@5cd646c7}
	shouldCalculateCache	HashMap<K,V>  (id=30549)	
{RP_START_DATE_AFTER=true, SERVICE=true}
	theCachedResultMap	HashMap<K,V>  (id=30552)	
{SERVICE=[Unit: null; Value: STANDARD]}
/ Hier moet RP_START_DATE_AFTER nog bij komen	,

/ this=RateParameterVO	, 
							RateFunctionVO myRateFunction = getOutputfromFunctionVO();
/ komt uit this	,

/ WH
myAbstractRateFunction.theRateFunctionVO==myRateFunction
com.mpobjects.oms.ratecalc.model.ratefunction.vo.RateFunctionVO/id:26631986

/ HIER HIER

							Collection<InputParameterVO> myInputParameterList = myRateFunction.getInputParameterList();
/ komt uit this	,

/ myRateFunctionVO is uit rate_function table	, myInputParameterList zijn rows uit de input_parameter table	,
myAbstractRateFunction is inst van StartDataFunction, de string staat in de function_definition row	,

this.theOutputfromFunction.handler.target
/ =
com.mpobjects.oms.ratecalc.model.ratefunction.vo.RateFunctionVO/id:26631986
=
myAbstractRateFunction.theRateFunctionVO.handler.target
/ =
com.mpobjects.oms.ratecalc.model.ratefunction.vo.RateFunctionVO/id:26631986

							Collection<RateResult> mySubResults = new ArrayList<RateResult>();

							} else {
								// First, make sure al input parameters are calculated
								for (InputParameterVO myInputParameter : myInputParameterList) {
									RateResult mySub = myInputParameter.calculate(aRateCalculation);
/s
	public RateResult calculate(RateCalculationVO aRateCalculation) throws RateException {
			OrderDetail myServiceorderDetail = getOrderDetailVO();
SystemId: 26631800, Name :REQ_END_AFTER, PathOrClass :./consignmentList[1]/serviceActionList[1]/shipmentOrderVO/dateSetVO/requestedEndAfter

/ Intermezzo

/ this=SystemId: 26631988
mpo=> select*from input_parameter where system_id=26631988\g
 system_id | parameter_systemid | func_par_def_systemid | rate_func_systemid | dimension_systemid | configuration_value 
| order_detail_systemid | free_value 
-----------+--------------------+-----------------------+--------------------+--------------------+---------------------
+-----------------------+------------
  26631988 |                    |                       |           26631986 |                    |                     
|              26631800 |           
(1 row)

/ Inderdaad, een order_detail	,

/ Einde Intermezzo

			RateParameterVO myParameter = getParameterVO();
/ null, want het is een order_detail, geen rate parameter	,
			BigDecimal myFreeValue = getFreeValue();
/ null, want het is een order_detail, geen free value	,
			if (myServiceorderDetail != null) {
				myRateResult = aRateCalculation.evaluate(myServiceorderDetail);
/s
								myRet = aOrderDetailVO.retrieveValueFromOrder(myOrder);
Timestamp 2014-05-16 16:00:00.0
							if (myRet instanceof Date) {
								myRateResult = new RateResult((Date) myRet);
/ in myRateResult is theValue een String	,
/ Maar we set de unit	,
			if (myRateResult != null && myRateResult.getUnitVO() == null) {
				myRateResult.setUnitVO(aOrderDetailVO.getUnit());
theSystemId: 1000536	Symbol :DATE	Description :Datum	UnitType :DATE	IsDeleted :0	

			return myRateResult;

/ t
	public RateResult calculate(RateCalculationVO aRateCalculation) throws RateException {
				myRateResult = aRateCalculation.evaluate(myServiceorderDetail);
/ D
[Unit: theSystemId: 1000536	Symbol :DATE	Description :Datum	UnitType :DATE	IsDeleted :0	; Value: 2014-05-16 16:00:00]
					myRateResult.setResultName(myServiceorderDetail.getName());
REQ_END_AFTER
			setRateResult(myRateResult);
this=InputParameterVO	,
	theRateResult	ThreadLocal<T>  (id=31232)	
			return getRateResult();

/t
	public RateResult calculate(RateCalculationVO aRateCalculation) throws RateException {
							} else {
								for (InputParameterVO myInputParameter : myInputParameterList) {
									RateResult mySub = myInputParameter.calculate(aRateCalculation);
/ D
									if (mySub != null) {
										mySubResults.add(mySub);
[[Unit: theSystemId: 1000536	Symbol :DATE	Description :Datum	UnitType :DATE	IsDeleted :0	; Value: 2014-05-16 16:00:00]]

/ Volgende for loop (niet costs...)

							} else {
								// First, make sure al input parameters are calculated
								for (InputParameterVO myInputParameter : myInputParameterList) {
SystemId: 26631987									
/ Het is nu geen order_detail, maar een free value	,
/ Intermezzo

mpo=> select*from input_parameter where system_id=26631987\g
 system_id | parameter_systemid | func_par_def_systemid | rate_func_systemid | dimension_systemid | configuration_value 
| order_detail_systemid | free_value 
-----------+--------------------+-----------------------+--------------------+--------------------+---------------------
+-----------------------+------------
  26631987 |                    |                       |           26631986 |                    |                     
|                       |    1.00000
(1 row)


/ Einde Intermezzo
									RateResult mySub = myInputParameter.calculate(aRateCalculation);
/s
	public RateResult calculate(RateCalculationVO aRateCalculation) throws RateException {
			OrderDetail myServiceorderDetail = getOrderDetailVO();
null
			RateParameterVO myParameter = getParameterVO();
null
			BigDecimal myFreeValue = getFreeValue();
BigDecimal 1.00000
			} else if (myFreeValue != null) {
				myRateResult = new RateResult(myFreeValue);
/ In myRateResult string "1.00000"
				myRateResult.setResultName("FreeValue");

			setRateResult(myRateResult);
			return getRateResult();

/t
	public RateResult calculate(RateCalculationVO aRateCalculation) throws RateException {
								// First, make sure al input parameters are calculated
								for (InputParameterVO myInputParameter : myInputParameterList) {
									RateResult mySub = myInputParameter.calculate(aRateCalculation);
/ D
									if (mySub != null) {
										mySubResults.add(mySub);
[[Unit: theSystemId: 1000536	Symbol :DATE	Description :Datum	UnitType :DATE	IsDeleted :0	; Value: 2014-05-16 16:00:00], 
[Unit: null; Value: 1.00000]]

								myResult = myAbstractRateFunction.convertAndCalculate(myInputParameterList, aRateCalculation);
/s
public abstract class AbstractRateFunction {
	public RateResult convertAndCalculate(Collection<InputParameterVO> anInputParameterList, RateCalculationVO aRateCalculation) throws RateException {
////////////////////////////
/ this=com.mpobjects.oms.ratecalc.model.process.function.StartDateFunction@7c1f9ff1
///////////////////////////
		Collection<InputParameterVO> myInputParameterVOList = convertInputUnitsToOutputUnit(anInputParameterList);
/=
		return aAnInputParameterList;
[SystemId: 26631987, SystemId: 26631988]
		RateResult myResult = calculate(myInputParameterVOList, aRateCalculation);
/s
public abstract class AbstractLeadtimeFunction extends AbstractDateFunction {
	public RateResult calculate(Collection<InputParameterVO> anInputParameterList, RateCalculationVO aRateCalculation) throws RateException {
/////////////////////////////
/ this=com.mpobjects.oms.ratecalc.model.process.function.StartDateFunction@7c1f9ff1
/////////////////////////////j
		InputParameterVO sourceInput = InputParameterUtils.getDateInput(anInputParameterList);
/s
	public static InputParameterVO getDateInput(Collection<InputParameterVO> aParameters) {

		List<InputParameterVO> candidates = new ArrayList<InputParameterVO>();

		// pass #1: find entry with 'date' unit
		for (InputParameterVO param : aParameters) {
			RateResult result = param.getRateResult();
			if (result == null || result.getUnitVO() == null) {
/ JA, de free value	,
				continue;
			}
			if (DATE_UNIT_TYPE.equalsIgnoreCase(result.getUnitVO().getUnitType())) {
				if (!RateResultUtils.isEmpty(result)) {
/ JA, de date order value	,
					candidates.add(param);
				}
			}
		}

		if (candidates.size() == 1) {
/ JA
			return candidates.get(0);
/t
public abstract class AbstractLeadtimeFunction extends AbstractDateFunction {
	public RateResult calculate(Collection<InputParameterVO> anInputParameterList, RateCalculationVO aRateCalculation) throws RateException {
/////////////////////////////
/ this=com.mpobjects.oms.ratecalc.model.process.function.StartDateFunction@7c1f9ff1
/////////////////////////////j
		InputParameterVO sourceInput = InputParameterUtils.getDateInput(anInputParameterList);
/ D
SystemId: 26631988
			myDate = RateResultUtils.getDateValue(sourceInput.getRateResult());
java.util.Date Fri May 16 16:00:00 CEST 2014

			for (InputParameterVO myInputParameterVO : anInputParameterList) {
				if (sourceInput == myInputParameterVO) {
/ NEE, is de free value 1.0	,
					// this was the source of the date value
					continue;
				}

				Unit myUnitVO = myInputParameterVO.getUnitVO();
null
				BigDecimal value = RateResultUtils.getBigDecimalValue(myInputParameterVO.getRateResult());
1.0
					} else {
						int myLeadtime = value.intValue();
1
						myDate = DateUtils.addWorkingdays(myDate, leadtimeMultiplicator * myLeadtime);
leadtimeMultiplicator	-1	
/s
public final class DateUtils {
	public static Date addWorkingdays(Date aDate, int aLeadTime) {
		Calendar myCalendar = Calendar.getInstance();
		myCalendar.setTime(aDate);
		int mySign = (int) Math.signum(aLeadTime);
-1
...
			myCalendar.add(Calendar.DAY_OF_YEAR, mySign);
/////////////////////////
/ 1 dag eraf	,
///////////////////////////
...
		return myCalendar.getTime();
Thu May 15 16:00:00 CEST 2014
//////////////////////////////
/ Inderdaad, een dag eraf	,
//////////////////////////

/t
public abstract class AbstractLeadtimeFunction extends AbstractDateFunction {
	public RateResult calculate(Collection<InputParameterVO> anInputParameterList, RateCalculationVO aRateCalculation) throws RateException {
/////////////////////////////
/ this=com.mpobjects.oms.ratecalc.model.process.function.StartDateFunction@7c1f9ff1
/////////////////////////////
						myDate = DateUtils.addWorkingdays(myDate, leadtimeMultiplicator * myLeadtime);
/ D
						myFoundAtLeastOneLeadtime = true;

/ volgende	,
			for (InputParameterVO myInputParameterVO : anInputParameterList) {
				if (sourceInput == myInputParameterVO) {
/ JA, is de date	,
					// this was the source of the date value
					continue;

			if (myFoundAtLeastOneLeadtime) {
/ JA
				myResult = new RateResult(myDate);
		return myResult;

/t
public abstract class AbstractRateFunction {
public RateResult convertAndCalculate(Collection<InputParameterVO> anInputParameterList, RateCalculationVO aRateCalculation) throws RateException {
/////////////////////////////
/ this=com.mpobjects.oms.ratecalc.model.process.function.StartDateFunction@7c1f9ff1
/////////////////////////////
		RateResult myResult = calculate(myInputParameterVOList, aRateCalculation);
/ D
		return myResult;
/t
public class RateParameterVO extends ValueObject implements Comparable<RateParameterVO> {
	public RateResult calculate(RateCalculationVO aRateCalculation) throws RateException {
		result = myAbstractRateFunction.convertAndCalculate(myInputParameterList, aRateCalculation);
/ D
[Unit: null; Value: 2014-05-15 16:00:00]
//////////////////////////////////////
/ Computed!
//////////////////////////////////////



							if (myResult != null) {
/ De berekende value, 15 May , staat al in myResult	,
								myResult.setResultName(getName());
RP_START_DATE_AFTER
								myResult.setFunctionName(getOutputfromFunctionVO().getFunctionDefinitionVO().getName());
START_DATE
								myResult.setSubResultList(mySubResults);
[[Unit: theSystemId: 1000536	Symbol :DATE	Description :Datum	UnitType :DATE	IsDeleted :0	; Value: 2014-05-16 16:00:00], 
[Unit: null; Value: 1.00000]]
								if (myResult.getUnitVO() == null) {
									myResult.setUnitVO(getUnit());
theSystemId: 1000536	Symbol :DATE	Description :Datum	UnitType :DATE	IsDeleted :0	
						aRateCalculation.cacheResult(this, myResult);
			return myResult;

/t
	public List<RateResult> run(RateCalculationVO aRateCalculation) throws RateException {
		} else {
			RateResult myResult = myParameter.calculate(aRateCalculation);
/ D
[Unit: theSystemId: 1000536	Symbol :DATE	Description :Datum	UnitType :DATE	IsDeleted :0	; Value: 2014-05-15 16:00:00]
/ TODO

/t
	public class RateCalculationVO {
				for (CostComponentSpecificationVO myCostComp : myCostComponentSpecificationList) {
/ volgende	,
CostComponentSpecification:26631920/RC_FUEL/Fuel costs
					for (RateResult myResult : myCostComp.run(this)) {
/s
public class CostComponentSpecificationVO extends ValueObject implements Cloneable {
	public List<RateResult> run(RateCalculationVO aRateCalculation) throws RateException {
		} else {
			RateParameterVO myParameter = getRateParameter();
theSystemId: 26631919Name :RP_FUEL

/ Intermezzo

mpo=> select*from input_parameter where  rate_func_systemid=(select outputfrom_function_systemid from rate_parameter where system_id=26631919)\g
 system_id | parameter_systemid | func_par_def_systemid | rate_func_systemid | dimension_systemid | configuration_value 
| order_detail_systemid | free_value 
-----------+--------------------+-----------------------+--------------------+--------------------+---------------------
+-----------------------+------------
  26631917 |           26631887 |                       |           26631916 |                    |                     
|                       |           
  26631918 |                    |                       |           26631916 |                    |                     
|                       |    0.13000
(2 rows)


/ Einde Intermezzo
			RateResult myResult = myParameter.calculate(aRateCalculation);
/s
public class RateParameterVO extends ValueObject implements Comparable<RateParameterVO> {
	public RateResult calculate(RateCalculationVO aRateCalculation) throws RateException {
						if (aRateCalculation.shouldCalculate(this)) {
/s
	public boolean shouldCalculate(RateParameterVO aParameter) throws RateException {
		AbstractRateFunction myFunction = getRateFunction(aParameter);
com.mpobjects.oms.ratecalc.model.process.function.MultiplyFunction@58b8edc6
		String myKey = aParameter.getName();
RP_FUEL
			myResult = myFunction.shouldCalculate(this);
true
/ TODO (zat niet in cache, returns altijd true)	,

							AbstractRateFunction myAbstractRateFunction = aRateCalculation.getRateFunction(this);
/ zit in cache	,
com.mpobjects.oms.ratecalc.model.process.function.MultiplyFunction@58b8edc6

							RateFunctionVO myRateFunction = getOutputfromFunctionVO();
							Collection<InputParameterVO> myInputParameterList = myRateFunction.getInputParameterList();
							Collection<RateResult> mySubResults = new ArrayList<RateResult>();
...




/ we geven per ongeluk step return	,
/t
public class RateParameterVO extends ValueObject implements Comparable<RateParameterVO> {
	public RateResult calculate(RateCalculationVO aRateCalculation) throws RateException {

								for (InputParameterVO myInputParameter : myInputParameterList) {
[SystemId: 26631918, SystemId: 26631917]

									RateResult mySub = myInputParameter.calculate(aRateCalculation);
/ D
SystemId: 26631918
[Unit: null; Value: 0.13000]
									if (mySub != null) {
										mySubResults.add(mySub);
/ volgende input par	,
								for (InputParameterVO myInputParameter : myInputParameterList) {
SystemId: 26631917									
									RateResult mySub = myInputParameter.calculate(aRateCalculation);
/s
public class InputParameterVO extends ValueObject {
	public RateResult calculate(RateCalculationVO aRateCalculation) throws RateException {

			OrderDetail myServiceorderDetail = getOrderDetailVO();
null
			RateParameterVO myParameter = getParameterVO();
theSystemId: 26631887Name :RP_FREIGHT
			BigDecimal myFreeValue = getFreeValue();
null
			} else if (myParameter != null) {
/ JA
				myRateResult = myParameter.calculate(aRateCalculation);
/c
	public RateResult calculate(RateCalculationVO aRateCalculation) throws RateException {
						if (aRateCalculation.shouldCalculate(this)) {
/s
	public boolean shouldCalculate(RateParameterVO aParameter) throws RateException {
		AbstractRateFunction myFunction = getRateFunction(aParameter);
/s
	public AbstractRateFunction getRateFunction(RateParameterVO aRateParameterVO) throws RateException {
theSystemId: 26631887Name :RP_FREIGHT

	if (myFunction == null) {
/ JA
			RateFunctionVO myOutputfromFunction = aRateParameterVO.getOutputfromFunctionVO();
/ rate_function	,
com.mpobjects.oms.ratecalc.model.ratefunction.vo.RateFunctionVO/id:26631885
			FunctionDefinitionVO myFunctionDefinition = myOutputfromFunction.getFunctionDefinitionVO();
theSystemId: 3500008
Definition :com.mpobjects.oms.ratecalc.model.process.function.NotEmptyFunction,Name :NOT EMPTY
			String myClassName = myFunctionDefinition.getDefinition();
com.mpobjects.oms.ratecalc.model.process.function.NotEmptyFunction

/ Deze is voor RP_FREIGHT , niet voor RP_FUEL, die heeft multiply	,
			try {
				Class<?> myClass = Class.forName(myClassName);
				myFunction = (AbstractRateFunction) myClass.newInstance();
com.mpobjects.oms.ratecalc.model.process.function.NotEmptyFunction@243855da
				myFunction.setRateFunctionVO(myOutputfromFunction);
com.mpobjects.oms.ratecalc.model.ratefunction.vo.RateFunctionVO/id:26631885

				myFunction.setRateContext(this);

/ Intermezzo

mpo=> select*from rate_function where system_id=26631885\g
 system_id | function_definition_systemid | is_user_defined | user_func_def | rate_table_systemid | unit_systemid 
-----------+------------------------------+-----------------+---------------+---------------------+---------------
  26631885 |                      3500008 |               0 |               |                     |       1000072
(1 row)

mpo=> select*from function_definition where system_id= 3500008;
 system_id |                             definition                             |   name    
-----------+--------------------------------------------------------------------+-----------
   3500008 | com.mpobjects.oms.ratecalc.model.process.function.NotEmptyFunction | NOT EMPTY
(1 row)

/ De not-empty logica zit in de com.mpobjects.oms.ratecalc.model.process.function.NotEmptyFunction@243855da
	, 
/ in de db afbeelding van com.mpobjects.oms.ratecalc.model.ratefunction.vo.RateFunctionVO/id:26631885 en dus ook in dit obj zelf, zitten de input parameters, en de name "com.mpobjects.oms.ratecalc.model.process.function.NotEmptyFunction"


/ Einde Intermezzo	

/t
	public boolean shouldCalculate(RateParameterVO aParameter) throws RateException {
		AbstractRateFunction myFunction = getRateFunction(aParameter);
/ D
com.mpobjects.oms.ratecalc.model.process.function.NotEmptyFunction@243855da
		String myKey = aParameter.getName();
"RP_FREIGHT"
		Boolean myResult = shouldCalculateCache.get(myKey);
		if (myResult == null) {
/ JA
				myResult = myFunction.shouldCalculate(this);
true
			shouldCalculateCache.put(myKey, myResult);

/t
	public RateResult calculate(RateCalculationVO aRateCalculation) throws RateException {

/this=RateParameterVO	,
theSystemId: 26631887Name :RP_FREIGHT

						if (aRateCalculation.shouldCalculate(this)) {
/ JA
							AbstractRateFunction myAbstractRateFunction = aRateCalculation.getRateFunction(this);
com.mpobjects.oms.ratecalc.model.process.function.NotEmptyFunction@243855da
							RateFunctionVO myRateFunction = getOutputfromFunctionVO();
com.mpobjects.oms.ratecalc.model.ratefunction.vo.RateFunctionVO/id:26631885
							Collection<InputParameterVO> myInputParameterList = myRateFunction.getInputParameterList();
[SystemId: 26631968, SystemId: 26631967, SystemId: 26631966, SystemId: 26631965]

							} else {
								for (InputParameterVO myInputParameter : myInputParameterList) {
									RateResult mySub = myInputParameter.calculate(aRateCalculation);
/s
public class InputParameterVO extends ValueObject {
	public RateResult calculate(RateCalculationVO aRateCalculation) throws RateException {
			OrderDetail myServiceorderDetail = getOrderDetailVO();
null
			RateParameterVO myParameter = getParameterVO();
theSystemId: 26631943Name :RT_NL-BE_OUTPUT
			BigDecimal myFreeValue = getFreeValue();
null
			} else if (myParameter != null) {
				myRateResult = myParameter.calculate(aRateCalculation);
/s
public class RateParameterVO extends ValueObject implements Comparable<RateParameterVO> {
	public RateResult calculate(RateCalculationVO aRateCalculation) throws RateException {
						if (aRateCalculation.shouldCalculate(this)) {
/s
public class RateCalculationVO {
	public boolean shouldCalculate(RateParameterVO aParameter) throws RateException {
		AbstractRateFunction myFunction = getRateFunction(aParameter);
/s
	public AbstractRateFunction getRateFunction(RateParameterVO aRateParameterVO) throws RateException {
theSystemId: 26631943Name :RT_NL-BE_OUTPUT

	if (myFunction == null) {
			RateFunctionVO myOutputfromFunction = aRateParameterVO.getOutputfromFunctionVO();
com.mpobjects.oms.ratecalc.model.ratefunction.vo.RateFunctionVO/id:26631942

mpo=> select*from rate_function where system_id=26631942\g
 system_id | function_definition_systemid | is_user_defined | user_func_def | rate_table_systemid | unit_systemid 
-----------+------------------------------+-----------------+---------------+---------------------+---------------
  26631942 |                      3500001 |               0 |               |            26631935 |              
(1 row)

mpo=> select*from function_definition where system_id= 3500001;
 system_id |                             definition                              |    name    
-----------+---------------------------------------------------------------------+------------
   3500001 | com.mpobjects.oms.ratecalc.model.process.function.RateTableFunction | RATE TABLE
(1 row)

/ HIER HIER

			FunctionDefinitionVO myFunctionDefinition = myOutputfromFunction.getFunctionDefinitionVO();
			String myClassName = myFunctionDefinition.getDefinition();
			try {
				Class<?> myClass = Class.forName(myClassName);
				myFunction = (AbstractRateFunction) myClass.newInstance();
com.mpobjects.oms.ratecalc.model.process.function.RateTableFunction@342c92c3
				myFunction.setRateFunctionVO(myOutputfromFunction);
				myFunction.setRateContext(this);
			} catch (Exception anException) {
				throw new RateException("Could not instantatie function for class [" + myClassName + "]", anException);
			}
			rateFunctionCache.put(myKey, myFunction);
		}
		return myFunction;

/t
public class RateCalculationVO {
	public boolean shouldCalculate(RateParameterVO aParameter) throws RateException {
		AbstractRateFunction myFunction = getRateFunction(aParameter);
com.mpobjects.oms.ratecalc.model.process.function.RateTableFunction@342c92c3
		String myKey = aParameter.getName();
RT_NL-BE_OUTPUT
				myResult = myFunction.shouldCalculate(this);
false
/ TODO

/t
	public RateResult calculate(RateCalculationVO aRateCalculation) throws RateException {
						if (aRateCalculation.shouldCalculate(this)) {
false
						aRateCalculation.cacheResult(this, myResult);
			return myResult;

/t
public class InputParameterVO extends ValueObject {
	public RateResult calculate(RateCalculationVO aRateCalculation) throws RateException {
			} else if (myParameter != null) {
				myRateResult = myParameter.calculate(aRateCalculation);
/ D
null
			setRateResult(myRateResult);
			return getRateResult();

/t
public class RateParameterVO extends ValueObject implements Comparable<RateParameterVO> {
	public RateResult calculate(RateCalculationVO aRateCalculation) throws RateException {

							} else {
								for (InputParameterVO myInputParameter : myInputParameterList) {
									RateResult mySub = myInputParameter.calculate(aRateCalculation);
/ D
null

/ volgende	,
								for (InputParameterVO myInputParameter : myInputParameterList) {
SystemId: 26631967
									RateResult mySub = myInputParameter.calculate(aRateCalculation);

/ Intermezzo

mpo=> select*from input_parameter where system_id=26631967\g 
 system_id | parameter_systemid | func_par_def_systemid | rate_func_systemid | dimension_systemid | configuration_value 
| order_detail_systemid | free_value 
-----------+--------------------+-----------------------+--------------------+--------------------+---------------------
+-----------------------+------------
  26631967 |           26631912 |                       |           26631885 |                    |                     
|                       |           
(1 row)

/ 26631885 is de rate_function waar hij ( 26631967) input van is	, not empty	, klopt	,

mpo=> select*from rate_function where system_id=26631885\g
 system_id | function_definition_systemid | is_user_defined | user_func_def | rate_table_systemid | unit_systemid 
-----------+------------------------------+-----------------+---------------+---------------------+---------------
  26631885 |                      3500008 |               0 |               |                     |       1000072
(1 row)

mpo=> select*from function_definition where system_id= 3500008\g
 system_id |                             definition                             |   name    
-----------+--------------------------------------------------------------------+-----------
   3500008 | com.mpobjects.oms.ratecalc.model.process.function.NotEmptyFunction | NOT EMPTY
(1 row)

/ maar dat doet er nu niet toe, 	we gaan verder met hem zelf	, hij is zelf een rate parameter,   26631912, 	, die result is van een rate_function,    26631911 

mpo=> select*from rate_parameter where system_id= 26631912\g
 system_id |     name     | description | outputfrom_function_systemid | rate_agreement_systemid | is_persistent | seque
nce_nr | parameter_type_systemid | is_user_editable 
-----------+--------------+-------------+------------------------------+-------------------------+---------------+------
-------+-------------------------+------------------
  26631912 | RT_NL_OUTPUT |             |                     26631911 |                26631869 |             0 |      
     0 |                         |                0
(1 row)


mpo=> select*from input_parameter where  rate_func_systemid=(select outputfrom_function_systemid from rate_parameter where system_id= 26631912)\g
 system_id | parameter_systemid | func_par_def_systemid | rate_func_systemid | dimension_systemid | configuration_value 
| order_detail_systemid | free_value 
-----------+--------------------+-----------------------+--------------------+--------------------+---------------------
+-----------------------+------------
  26631908 |           26631884 |                       |           26631911 |                    |                     
|                       |           
  26631909 |                    |                       |           26631911 |                    |                     
|               4200010 |           
  26631910 |                    |                       |           26631911 |                    |                     
|               4200006 |           
(3 rows)

/ Dus 26631912 heeft 3 input par's	, 

/ 26631884=ldm	, 
/ 4200010=./fromPartyVO/partyId
/ 4200006=./toPartyVO/countryVO/code

mpo=> select*from rate_function where system_id=26631911\g
 system_id | function_definition_systemid | is_user_defined | user_func_def | rate_table_systemid | unit_systemid 
-----------+------------------------------+-----------------+---------------+---------------------+---------------
  26631911 |                      3500001 |               0 |               |            26631904 |              
(1 row)
/ 26631094 is de rate table die wordt used (kunnen we ook zien in Excel)	,
/ 3500001 heeft de name van de Java class type, die de logica heeft	,

mpo=> select*from function_definition where system_id= 3500001\g
 system_id |                             definition                              |    name    
-----------+---------------------------------------------------------------------+------------
   3500001 | com.mpobjects.oms.ratecalc.model.process.function.RateTableFunction | RATE TABLE
(1 row)


mpo=> select*from rate_table where system_id=26631904\g
 rate_agreement_systemid | system_id | name  |  description  | unit_systemid | rate_table_xml | min_charge | max_charge 
| rounding | excel_formatted | default_value |                     rate_table_content                     | is_user_edit
able | is_shared | linked_rate_table_systemid | linked_multiplication | linked_addition |       last_update       
-------------------------+-----------+-------+---------------+---------------+----------------+------------+------------
+----------+-----------------+---------------+------------------------------------------------------------+-------------
-----+-----------+----------------------------+-----------------------+-----------------+-------------------------
                26631869 |  26631904 | RT_NL | From NL to NL |       1000072 |                |            |            
|        0 |               1 |               |                 OMMEN   ETTENLEUR                         +|             
   0 |         0 |                            |                       |                 | 2014-04-18 13:50:07.156
                         |           |       |               |               |                |            |            
|          |                 |               | 700.0   NL      33.5    41.36592792857144                 +|             
     |           |                            |                       |                 | 
                         |           |       |               |               |                |            |            
...
/ er zijn in de 1ste row 2 paren van 3 args	: 
payweight=ldm=700.0
to country=NL
from id=OMMEN
result=33.5

payweight=ldm=700.0
to country=NL
from id=ETTENLEUR
result=41.36592792857144

/ wat is de logica in RateTabelFunction	, want het result staat toch in de rate table	?
/ TODO

$ vi RateTable.standard.hbm.xml

<hibernate-mapping>
	<class name="com.mpobjects.oms.ratecalc.model.ratetable.vo.RateTableVO" table="RATE_TABLE">
      <bag name="selectionCriterionList" inverse="true" table="RTABLE_SEL_CRITERIUM" cascade="all,delete-orphan">
        	<cache usage="read-write" />
            <key column="RATE_TABLE_SYSTEMID" not-null="true"/>
            <one-to-many class="com.mpobjects.ratecalc.model.RTableSelCriterion"/>
        </bag>

$ vi RTableSelectionCriterion.standard.hbm.xml

hibernate-mapping package="com.mpobjects.ratecalc.model">
	<class name="RTableSelCriterion" table="RTABLE_SEL_CRITERIUM" lazy="true">
		<many-to-one name="rateTable" class="com.mpobjects.oms.ratecalc.model.ratetable.vo.RateTableVO" column="RATE_TABLE_SYSTEMID" />
		<many-to-one name="matchType" class="com.mpobjects.oms.model.matchtype.vo.MatchTypeVO" column="MATCH_TYPE_SYSTEMID" />

mpo=> select*from rtable_sel_criterium where system_id=26631944\g
 system_id | rate_table_systemid | unit_systemid | match_type_systemid | rate_parameter_systemid | value_from | value_to
 | is_date | order_detail_systemid 
-----------+---------------------+---------------+---------------------+-------------------------+------------+---------
-+---------+-----------------------
  26631944 |            26631904 |               |             3800001 |                         | NL         |         
 |       0 |               4200006
(1 row)


mpo=> select*from match_type\g
 system_id |     name     
-----------+--------------
   3800001 | REGEX
   3800002 | WILDCARD
   3800003 | RANGE
   3800004 | POSTAL_RANGE
   3800005 | DATE_RANGE
(5 rows)

/ Einde Intermezzo

/ Intermezzo

/ hoe zat het ook al weer	?

mpo=> select*from rate_parameter where system_id=26631807\g
 system_id |        name         | description | outputfrom_function_systemid | rate_agreement_systemid | is_persistent 
| sequence_nr | parameter_type_systemid | is_user_editable 
-----------+---------------------+-------------+------------------------------+-------------------------+---------------
+-------------+-------------------------+------------------
  26631807 | RP_START_DATE_AFTER |             |                     26631804 |                26631689 |             0 
|           0 |                         |                0
(1 row)

/ outputfrom_function_systemid is rate fct die deze rate par berekent	, 
/ een rate fct is eig de rate par, heeft de input par's	, en de fct def	,
 

                                                                       ^
mpo=> select*from input_parameter where  rate_func_systemid=(select outputfrom_function_systemid from rate_parameter where system_id=26631807)\g
 system_id | parameter_systemid | func_par_def_systemid | rate_func_systemid | dimension_systemid | configuration_value 
| order_detail_systemid | free_value 
-----------+--------------------+-----------------------+--------------------+--------------------+---------------------
+-----------------------+------------
  26631805 |                    |                       |           26631804 |                    |                     
|              26631800 |           
  26631806 |           26631796 |                       |           26631804 |                    |                     
|                       |           
(2 rows)

/ rate_func_systemid is rate fct waar de input par's 805 en 806 input par's van zijn	,
 

mpo=> select*from rate_function where system_id=26631804\g
 system_id | function_definition_systemid | is_user_defined | user_func_def | rate_table_systemid | unit_systemid 
-----------+------------------------------+-----------------+---------------+---------------------+---------------
  26631804 |                      3500014 |               0 |               |                     |       1000536
(1 row)

mpo=> select*from function_definition where system_id= 3500014\g
 system_id |                             definition                              |   name    
-----------+---------------------------------------------------------------------+-----------
   3500014 | com.mpobjects.oms.ratecalc.model.process.function.StartDateFunction | STARTDATE
(1 row)



/ Einde Intermezzo

/ we waren in	,
InputParameterVO.calculate(RateCalculationVO) line: 110	
									RateResult mySub = myInputParameter.calculate(aRateCalculation);
/s
RateParameterVO.calculate(RateCalculationVO) line: 66	
	public RateResult calculate(RateCalculationVO aRateCalculation) throws RateException {
						if (aRateCalculation.shouldCalculate(this)) {
/s
RateCalculationVO.shouldCalculate(RateParameterVO) line: 854	
	public boolean shouldCalculate(RateParameterVO aParameter) throws RateException {
		AbstractRateFunction myFunction = getRateFunction(aParameter);
com.mpobjects.oms.ratecalc.model.process.function.RateTableFunction@58f4c77e
		String myKey = aParameter.getName();
RT_NL_OUTPUT
/ moet berekend	, dat is wat myFunction doet	,
		Boolean myResult = shouldCalculateCache.get(myKey);
null
		if (myResult == null) {
			try {
				myResult = myFunction.shouldCalculate(this);
/s
RateTableFunction.shouldCalculate(RateCalculationVO) line: 380	
	public boolean shouldCalculate(RateCalculationVO aRateCalculation) throws RateException {
		RateTableVO myRateTable = getRateFunctionVO().getRateTableVO();
/ getRateFunctionVO()=com.mpobjects.oms.ratecalc.model.process.function.RateTableFunction@58f4c77e
/ myRateTable=theSystemId: 26631904RateAgreement :theSystemId: 26631869Name :OEGEMA
 
		return myRateTable.meetsTableSelectionCriteria(aRateCalculation);
/s
RateTableVO.meetsTableSelectionCriteria(RateCalculationVO) line: 914	
	public boolean meetsTableSelectionCriteria(RateCalculationVO aRateContext) throws RateException {

		for (RTableSelCriterion myRTableSelCriterion : getSelectionCriterionList()) {
theSystemId: 26631944RateTableSystemid :theSystemId: 26631904RateAgreement :theSystemId: 26631869Name :OEGEMA

			myRetValue = myRTableSelCriterion.evaluate(aRateContext);
/s
RTableSelCriterion.evaluate(RateCalculationVO) line: 82	
	public boolean evaluate(RateCalculationVO aRateContext) throws RateException {
		Matcher myMatcher = getMatchTypeName().getMatcher(this);
com.mpobjects.oms.util.match.impl.RegexMatcher@2be95542
			OrderDetail myServiceorderDetail = getOrderDetail();
"getOrderDetail()"	 (id=14392)	
	name	"TO COUNTRY" (id=14395)	
	pathOrClass	"./toPartyVO/countryVO/code" (id=14397)	
	rateType	"service_order_cost" (id=14398)	
	systemId	4200006	

			myRateResult = aRateContext.evaluate(myServiceorderDetail);
/s
RateCalculationVO.evaluate(OrderDetail) line: 331	
				} else {
					LogisticsOrderVO myOrder = getOrder();
					String myPathOrClass = aOrderDetailVO.getPathOrClass();
./toPartyVO/countryVO/code
							} else {
								myRet = aOrderDetailVO.retrieveValueFromOrder(myOrder);
"DE"
							} else {
								myRateResult = new RateResult(myRet.toString());
			if (myRateResult != null && myRateResult.getUnitVO() == null) {
				myRateResult.setUnitVO(aOrderDetailVO.getUnit());
			return myRateResult;
/t
RTableSelCriterion.evaluate(RateCalculationVO) line: 99	
			myRateResult = aRateContext.evaluate(myServiceorderDetail);
/D
[Unit: null; Value: DE]
			myFromUnit = myServiceorderDetail.getUnit();
null
		} else {
				myValue = myRateResult.getValue();
"DE"
		if (myValue != null) {
			myMatchResult = myMatcher.match(myValue);
/s
	public boolean match(Object obj) {
		String myValue = obj.toString();
"DE"
		return theInvertFlag ? !myValue.matches(theRegex) : myValue.matches(theRegex);
/ theRegEx="NL"
/ theInvertFlag=false

/t
RTableSelCriterion.evaluate(RateCalculationVO) line: 144	
			myMatchResult = myMatcher.match(myValue);
false
		return myMatchResult;
/t
RateTableVO.meetsTableSelectionCriteria(RateCalculationVO) line: 917	
			myRetValue = myRTableSelCriterion.evaluate(aRateContext);
/ D
false
			if (!myRetValue) {
				break;
		return myRetValue;

/t
RateTableFunction.shouldCalculate(RateCalculationVO) line: 380	
		return myRateTable.meetsTableSelectionCriteria(aRateCalculation);
/ D

/t
RateCalculationVO.shouldCalculate(RateParameterVO) line: 859	
				myResult = myFunction.shouldCalculate(this);
false
		return myResult.booleanValue();

/t
InputParameterVO.calculate(RateCalculationVO) line: 111	
			} else if (myParameter != null) {
				myRateResult = myParameter.calculate(aRateCalculation);
null

/t
RateParameterVO.calculate(RateCalculationVO) line: 103	
							} else {
								for (InputParameterVO myInputParameter : myInputParameterList) {
									RateResult mySub = myInputParameter.calculate(aRateCalculation);
/ D
null

/ volgende	,
								for (InputParameterVO myInputParameter : myInputParameterList) {
									RateResult mySub = myInputParameter.calculate(aRateCalculation);
SystemId: 26631966

/ Intermezzo



mpo=> select*from input_parameter where system_id=26631966\g
 system_id | parameter_systemid | func_par_def_systemid | rate_func_systemid | dimension_systemid | configuration_value 
| order_detail_systemid | free_value 
-----------+--------------------+-----------------------+--------------------+--------------------+---------------------
+-----------------------+------------
  26631966 |           26631964 |                       |           26631885 |                    |                     

/ de rate fct  26631885  heeft 26631966 als input par	, doet er nu even niet toe	,
|                       |           
(1 row)

mpo=> select*from rate_parameter where system_id=26631964\g
 system_id |      name       | description | outputfrom_function_systemid | rate_agreement_systemid | is_persistent | s
equence_nr | parameter_type_systemid | is_user_editable 
-----------+-----------------+-------------+------------------------------+-------------------------+---------------+--
-----------+-------------------------+------------------
  26631964 | RT_NL_DE_OUTPUT |             |                     26631963 |                26631869 |             0 |  
         0 |                         |                0
(1 row)



mpo=> select*from input_parameter where  rate_func_systemid=(select outputfrom_function_systemid from rate_parameter where system_id= 26631964)\g
 system_id | parameter_systemid | func_par_def_systemid | rate_func_systemid | dimension_systemid | configuration_value 
| order_detail_systemid | free_value 
-----------+--------------------+-----------------------+--------------------+--------------------+---------------------
+-----------------------+------------
  26631960 |           26631884 |                       |           26631963 |                    |                     
|                       |           
  26631961 |                    |                       |           26631963 |                    |                     
|               4200007 |           
  26631962 |                    |                       |           26631963 |                    |                     
|               4200006 |           
(3 rows)

/ Dit zijn de input par's van de rate fct die calc de rate par  26631964, die onze input par is	, 26631966 

mpo=> select*from rate_function where system_id= 26631963\g
 system_id | function_definition_systemid | is_user_defined | user_func_def | rate_table_systemid | unit_systemid 
-----------+------------------------------+-----------------+---------------+---------------------+---------------
  26631963 |                      3500001 |               0 |               |            26631955 |              
(1 row)
mpo=> select*from function_definition where system_id= 3500001\g
 system_id |                             definition                              |    name    
-----------+---------------------------------------------------------------------+------------
   3500001 | com.mpobjects.oms.ratecalc.model.process.function.RateTableFunction | RATE TABLE
(1 row)

mpo=> select*from rate_table where system_id=26631955\g
 rate_agreement_systemid | system_id |   name   |  description  | unit_systemid | rate_table_xml | min_charge | max_char
ge | rounding | excel_formatted | default_value |                                                                       
                                                                                                                        
                                                                rate_table_content                                      
                                                                                                                        
                                                                                                 | is_user_editable | is
_shared | linked_rate_table_systemid | linked_multiplication | linked_addition |       last_update       
-------------------------+-----------+----------+---------------+---------------+----------------+------------+---------
---+----------+-----------------+---------------+-----------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------+------------------+---
--------+----------------------------+-----------------------+-----------------+-------------------------
                26631869 |  26631955 | RT_NL_DE | From NL to DE |       1000072 |     ...


=> select*from rate_parameter where system_id=26631884\g
 system_id |     name      | description | outputfrom_function_systemid | rate_agreement_systemid | is_persistent | sequ
ence_nr | parameter_type_systemid | is_user_editable 
-----------+---------------+-------------+------------------------------+-------------------------+---------------+-----
--------+-------------------------+------------------
  26631884 | RP_LDM_WEIGHT |             |                     26631881 |                26631869 |             0 |     
      0 |                         |                0
(1 row)
mpo=> select*from order_detail where system_id= 4200007\g
 system_id |     path_or_class      |     name      | unit_systemid | parameter_type_systemid |     rate_type      
-----------+------------------------+---------------+---------------+-------------------------+--------------------
   4200007 | ./toPartyVO/postalCode | TO POSTALCODE |               |                 3700001 | service_order_cost
(1 row)
mpo=> select*from order_detail where system_id= 4200006\g
 system_id |       path_or_class        |    name    | unit_systemid | parameter_type_systemid |     rate_type      
-----------+----------------------------+------------+---------------+-------------------------+--------------------
   4200006 | ./toPartyVO/countryVO/code | TO COUNTRY |               |                 3700001 | service_order_cost
(1 row)


/ Einde Intermezzo

...
/s
RateTableVO.meetsTableSelectionCriteria(RateCalculationVO) line: 917	
		for (RTableSelCriterion myRTableSelCriterion : getSelectionCriterionList()) {
theSystemId: 26631959RateTableSystemid :theSystemId: 26631955RateAgreement :theSystemId: 26631869Name :OEGEMA

/ Intermezzo

mpo=> select*from rtable_sel_criterium where system_id= 26631959\g
 system_id | rate_table_systemid | unit_systemid | match_type_systemid | rate_parameter_systemid | value_from | value_t
o | is_date | order_detail_systemid 
-----------+---------------------+---------------+---------------------+-------------------------+------------+--------
--+---------+-----------------------
  26631959 |            26631955 |               |             3800001 |                         | DE         |        
  |       0 |               4200006
(1 row)
/ REGEX, ./toPartyVO/countryVO/code, "DE"
 
/ Einde Intermezzo

			myRetValue = myRTableSelCriterion.evaluate(aRateContext);
true

/t
RateCalculationVO.shouldCalculate(RateParameterVO) line: 859	
			myResult = myFunction.shouldCalculate(this);
true
			shouldCalculateCache.put(myKey, myResult);
		}
		return myResult.booleanValue();

/t
RateParameterVO.calculate(RateCalculationVO) line: 66	
/ this=theSystemId: 26631964Name :RT_NL_DE_OUTPUT

						if (aRateCalculation.shouldCalculate(this)) {
/ JA
							AbstractRateFunction myAbstractRateFunction = aRateCalculation.getRateFunction(this);
com.mpobjects.oms.ratecalc.model.process.function.RateTableFunction@7dd56163
							RateFunctionVO myRateFunction = getOutputfromFunctionVO();
com.mpobjects.oms.ratecalc.model.ratefunction.vo.RateFunctionVO/id:26631963
							Collection<InputParameterVO> myInputParameterList = myRateFunction.getInputParameterList();
[SystemId: 26631961, SystemId: 26631962, SystemId: 26631960]
							} else {
								// First, make sure al input parameters are calculated
								for (InputParameterVO myInputParameter : myInputParameterList) {
									RateResult mySub = myInputParameter.calculate(aRateCalculation);
SystemId: 26631961
/s
InputParameterVO.calculate(RateCalculationVO) line: 79	
		OrderDetail myServiceorderDetail = getOrderDetailVO();
SystemId: 4200007, Name :TO POSTALCODE, PathOrClass :./toPartyVO/postalCode
			RateParameterVO myParameter = getParameterVO();
null
			BigDecimal myFreeValue = getFreeValue();
null
		if (myServiceorderDetail != null) {
				myRateResult = aRateCalculation.evaluate(myServiceorderDetail);
/s
RateCalculationVO.evaluate(OrderDetail) line: 331	
...

/t
InputParameterVO.calculate(RateCalculationVO) line: 84	
				myRateResult = aRateCalculation.evaluate(myServiceorderDetail);
























RateCalculationVO.runFor(RateAgreementVO, RateCalculationAlternative) line: 1301	
				for (CostComponentSpecificationVO myCostComp : myCostComponentSpecificationList) {
CostComponentSpecification:26631888/RC_FREIGHT/Freight costs
					for (RateResult myResult : myCostComp.run(this)) {

/ Intermezzo

mpo=> select*from cost_component_specification where system_id=26631888\g
 system_id |    name    |  description  | parameter_systemid | correction_type_systemid | order_rate_part_systemid | se
quence_nr | rate_agreement_systemid | rate_plus_mode 
-----------+------------+---------------+--------------------+--------------------------+--------------------------+---
----------+-------------------------+----------------
  26631888 | RC_FREIGHT | Freight costs |           26631887 |                 38500001 |                 26600544 |   
        0 |                26631869 | NONE
(1 row)

mpo=> select*from rate_parameter where system_id= 26631887\g 
 system_id |    name    | description | outputfrom_function_systemid | rate_agreement_systemid | is_persistent | sequence
_nr | parameter_type_systemid | is_user_editable 
-----------+------------+-------------+------------------------------+-------------------------+---------------+---------
----+-------------------------+------------------
  26631887 | RP_FREIGHT |             |                     26631885 |                26631869 |             0 |         
  0 |                         |                0
(1 row)

mpo=> select*from rate_function where system_id= 26631885\g
 system_id | function_definition_systemid | is_user_defined | user_func_def | rate_table_systemid | unit_systemid 
-----------+------------------------------+-----------------+---------------+---------------------+---------------
  26631885 |                      3500008 |               0 |               |                     |       1000072
(1 row)
mpo=> select*from function_definition where system_id= 3500008\g
 system_id |                             definition                             |   name    
-----------+--------------------------------------------------------------------+-----------
   3500008 | com.mpobjects.oms.ratecalc.model.process.function.NotEmptyFunction | NOT EMPTY
(1 row)

mpo=> select*from input_parameter where  rate_func_systemid=(select outputfrom_function_systemid from rate_parameter whre system_id= 26631887)\g
 system_id | parameter_systemid | func_par_def_systemid | rate_func_systemid | dimension_systemid | configuration_value
 | order_detail_systemid | free_value 
-----------+--------------------+-----------------------+--------------------+--------------------+--------------------
-+-----------------------+------------
  26631965 |           26631929 |                       |           26631885 |                    |                    
 |                       |           
  26631966 |           26631964 |                       |           26631885 |                    |                    
 |                       |           
  26631967 |           26631912 |                       |           26631885 |                    |                    
 |                       |           
  26631968 |           26631943 |                       |           26631885 |                    |                    
 |                       |           
(4 rows)

mpo=> select*from rate_parameter where system_id=26631929\g
 system_id |       name        | description | outputfrom_function_systemid | rate_agreement_systemid | is_persistent | 
sequence_nr | parameter_type_systemid | is_user_editable 
-----------+-------------------+-------------+------------------------------+-------------------------+---------------+-
------------+-------------------------+------------------
  26631929 | RT_NL-SPEC_OUTPUT |             |                     26631928 |                26631869 |             0 | 
          0 |                         |                0
(1 row)

=> select*from rate_parameter where system_id= 26631964\g
 system_id |      name       | description | outputfrom_function_systemid | rate_agreement_systemid | is_persistent | se
quence_nr | parameter_type_systemid | is_user_editable 
-----------+-----------------+-------------+------------------------------+-------------------------+---------------+---
----------+-------------------------+------------------
  26631964 | RT_NL_DE_OUTPUT |             |                     26631963 |                26631869 |             0 |   
        0 |                         |                0
(1 row)

mpo=> select*from rate_parameter where system_id= 26631912 \g
 system_id |     name     | description | outputfrom_function_systemid | rate_agreement_systemid | is_persistent | sequen
ce_nr | parameter_type_systemid | is_user_editable 
-----------+--------------+-------------+------------------------------+-------------------------+---------------+-------
------+-------------------------+------------------
  26631912 | RT_NL_OUTPUT |             |                     26631911 |                26631869 |             0 |       
    0 |                         |                0
(1 row)

mpo=> select*from rate_parameter where system_id= 26631943\g
 system_id |      name       | description | outputfrom_function_systemid | rate_agreement_systemid | is_persistent | seq
uence_nr | parameter_type_systemid | is_user_editable 
-----------+-----------------+-------------+------------------------------+-------------------------+---------------+----
---------+-------------------------+------------------
  26631943 | RT_NL-BE_OUTPUT |             |                     26631942 |                26631869 |             0 |    
       0 |                         |                0
(1 row)

/ 13	.

mpo=> select*from rate_parameter where system_id= 26631929\g
 system_id |       name        | description | outputfrom_function_systemid | rate_agreement_systemid | is_persistent | s
equence_nr | parameter_type_systemid | is_user_editable 
-----------+-------------------+-------------+------------------------------+-------------------------+---------------+--
-----------+-------------------------+------------------
  26631929 | RT_NL-SPEC_OUTPUT |             |                     26631928 |                26631869 |             0 |  
         0 |                         |                0
(1 row)


mpo=> select*from rate_function where system_id= 26631928\g
 system_id | function_definition_systemid | is_user_defined | user_func_def | rate_table_systemid | unit_systemid 
-----------+------------------------------+-----------------+---------------+---------------------+---------------
  26631928 |                      3500001 |               0 |               |            26631921 |              
(1 row)

mpo=> select*from function_definition where system_id= 3500001\g
 system_id |                             definition                              |    name    
-----------+---------------------------------------------------------------------+------------
   3500001 | com.mpobjects.oms.ratecalc.model.process.function.RateTableFunction | RATE TABLE
(1 row)

mpo=> select*from input_parameter where  rate_func_systemid=(select outputfrom_function_systemid from rate_parameter where system_id= 26631929)\g
 system_id | parameter_systemid | func_par_def_systemid | rate_func_systemid | dimension_systemid | configuration_value |
 order_detail_systemid | free_value 
-----------+--------------------+-----------------------+--------------------+--------------------+---------------------+
-----------------------+------------
  26631925 |           26631884 |                       |           26631928 |                    |                     |
                       |           
  26631926 |                    |                       |           26631928 |                    |                     |
               4200010 |           
  26631927 |                    |                       |           26631928 |                    |                     |
               4200011 |           
(3 rows)

mpo=> select*from rate_parameter where system_id= 26631884\g
 system_id |     name      | description | outputfrom_function_systemid | rate_agreement_systemid | is_persistent | seque
nce_nr | parameter_type_systemid | is_user_editable 
-----------+---------------+-------------+------------------------------+-------------------------+---------------+------
-------+-------------------------+------------------
  26631884 | RP_LDM_WEIGHT |             |                     26631881 |                26631869 |             0 |      
     0 |                         |                0
(1 row)

mpo=> select*from rate_function where system_id= 26631881\g
 system_id | function_definition_systemid | is_user_defined | user_func_def | rate_table_systemid | unit_systemid 
-----------+------------------------------+-----------------+---------------+---------------------+---------------
  26631881 |                      3500007 |               0 |               |                     |       1000532
(1 row)

mpo=> select*from function_definition where system_id= 3500007\g
 system_id |                             definition                             |   name   
-----------+--------------------------------------------------------------------+----------
   3500007 | com.mpobjects.oms.ratecalc.model.process.function.MultiplyFunction | MULTIPLY
(1 row)

mpo=> select*from input_parameter where  rate_func_systemid=(select outputfrom_function_systemid from rate_parameter where system_id= 26631884)\g
 system_id | parameter_systemid | func_par_def_systemid | rate_func_systemid | dimension_systemid | configuration_value |
 order_detail_systemid | free_value 
-----------+--------------------+-----------------------+--------------------+--------------------+---------------------+
-----------------------+------------
  26631902 |                    |                       |           26631881 |                    |                     |
              26631726 |           
  26631903 |                    |                       |           26631881 |                    |                     |
                       | 1750.00000
(2 rows)

mpo=> select*from order_detail where system_id=  26631726\g
 system_id |         path_or_class          |   name   | unit_systemid | parameter_type_systemid |     rate_type      
-----------+--------------------------------+----------+---------------+-------------------------+--------------------
  26631726 | ./calculatedTotalLoadingMeters | CALC_LDM |      26631725 |                 3700002 | service_order_cost
(1 row)

mpo=> select*from order_detail where system_id=  4200010\g
 system_id |     path_or_class     |     name      | unit_systemid | parameter_type_systemid |     rate_type      
-----------+-----------------------+---------------+---------------+-------------------------+--------------------
   4200010 | ./fromPartyVO/partyId | FROM PARTY ID |               |                 3700001 | service_order_cost
(1 row)

mpo=> select*from order_detail where system_id=  4200011\g
 system_id |    path_or_class    |    name     | unit_systemid | parameter_type_systemid |     rate_type      
-----------+---------------------+-------------+---------------+-------------------------+--------------------
   4200011 | ./toPartyVO/partyId | TO PARTY ID |               |                 3700001 | service_order_cost
(1 row)

/ 13	.

mpo=> select*from rate_parameter where system_id= 26631964\g
 system_id |      name       | description | outputfrom_function_systemid | rate_agreement_systemid | is_persistent | seq
uence_nr | parameter_type_systemid | is_user_editable 
-----------+-----------------+-------------+------------------------------+-------------------------+---------------+----
---------+-------------------------+------------------
  26631964 | RT_NL_DE_OUTPUT |             |                     26631963 |                26631869 |             0 |    
       0 |                         |                0
(1 row)


mpo=> select*from rate_function where system_id=  26631963 \g
 system_id | function_definition_systemid | is_user_defined | user_func_def | rate_table_systemid | unit_systemid 
-----------+------------------------------+-----------------+---------------+---------------------+---------------
  26631963 |                      3500001 |               0 |               |            26631955 |              
(1 row)
/ rate_table	,

mpo=> select*from input_parameter where  rate_func_systemid=(select outputfrom_function_systemid from rate_parameter where system_id= 26631964)\g
 system_id | parameter_systemid | func_par_def_systemid | rate_func_systemid | dimension_systemid | configuration_value |
 order_detail_systemid | free_value 
-----------+--------------------+-----------------------+--------------------+--------------------+---------------------+
-----------------------+------------
  26631960 |           26631884 |                       |           26631963 |                    |                     |
                       |           
  26631961 |                    |                       |           26631963 |                    |                     |
               4200007 |           
  26631962 |                    |                       |           26631963 |                    |                     |
               4200006 |           
(3 rows)

mpo=> select*from order_detail where system_id=  4200007\g
 system_id |     path_or_class      |     name      | unit_systemid | parameter_type_systemid |     rate_type      
-----------+------------------------+---------------+---------------+-------------------------+--------------------
   4200007 | ./toPartyVO/postalCode | TO POSTALCODE |               |                 3700001 | service_order_cost
(1 row)

mpo=> select*from order_detail where system_id=  4200006\g
 system_id |       path_or_class        |    name    | unit_systemid | parameter_type_systemid |     rate_type      
-----------+----------------------------+------------+---------------+-------------------------+--------------------
   4200006 | ./toPartyVO/countryVO/code | TO COUNTRY |               |                 3700001 | service_order_cost
(1 row)


/ 13	.

mpo=> select*from rate_parameter where system_id= 26631912\g
 system_id |     name     | description | outputfrom_function_systemid | rate_agreement_systemid | is_persistent | sequen
ce_nr | parameter_type_systemid | is_user_editable 
-----------+--------------+-------------+------------------------------+-------------------------+---------------+-------
------+-------------------------+------------------
  26631912 | RT_NL_OUTPUT |             |                     26631911 |                26631869 |             0 |       
    0 |                         |                0
(1 row)

mpo=> select*from rate_function where system_id=  26631911 \g system_id | function_definition_systemid | is_user_defined | user_func_def | rate_table_systemid | unit_systemid 
-----------+------------------------------+-----------------+---------------+---------------------+---------------
  26631911 |                      3500001 |               0 |               |            26631904 |              
(1 row)

mpo=> select*from input_parameter where  rate_func_systemid=(select outputfrom_function_systemid from rate_parameter where system_id= 26631912)\g
 system_id | parameter_systemid | func_par_def_systemid | rate_func_systemid | dimension_systemid | configuration_value |
 order_detail_systemid | free_value 
-----------+--------------------+-----------------------+--------------------+--------------------+---------------------+
-----------------------+------------
  26631908 |           26631884 |                       |           26631911 |                    |                     |
                       |           
  26631909 |                    |                       |           26631911 |                    |                     |
               4200010 |           
  26631910 |                    |                       |           26631911 |                    |                     |
               4200006 |           
(3 rows)

/ 13	.

mpo=> select*from rate_parameter where system_id= 26631943\g
 system_id |      name       | description | outputfrom_function_systemid | rate_agreement_systemid | is_persistent | s
equence_nr | parameter_type_systemid | is_user_editable 
-----------+-----------------+-------------+------------------------------+-------------------------+---------------+--
-----------+-------------------------+------------------
  26631943 | RT_NL-BE_OUTPUT |             |                     26631942 |                26631869 |             0 |  
         0 |                         |                0
(1 row)

mpo=> select*from input_parameter where  rate_func_systemid=(select outputfrom_function_systemid from rate_parameter where system_id= 26631943)\g
 system_id | parameter_systemid | func_par_def_systemid | rate_func_systemid | dimension_systemid | configuration_value
 | order_detail_systemid | free_value 
-----------+--------------------+-----------------------+--------------------+--------------------+--------------------
-+-----------------------+------------
  26631939 |           26631884 |                       |           26631942 |                    |                    
 |                       |           
  26631940 |                    |                       |           26631942 |                    |                    
 |               4200010 |           
  26631941 |                    |                       |           26631942 |                    |                    
 |               4200006 |           
(3 rows)



/ SAMENVATTING

cs 888= rc_freight = rp 887 = rf 885 = not empty(
	ip 965 = rp 929 = rt-nl-spec_output = rate_table(	, rate_table=921
		ip 925 = rp 884 = ldm = multiply(
			ip 902 = od 726 =calc_ldm
			ip 903 = fv 1750.0)
		ip 926 = od 010 = form party_id
		ip 927 = od 011 = to party _id)
	ip 966= rp 964, rf=963 = rt-nl-de_output=rate_table(	, rate_table==26631955	
		ip 960= rp 884
		ip 961= od 007 =  to postal code 
		ip 962= od 006 =  to  country 
	ip 967= rp 912 = rt-nl_output=rate_table(	
		ip 908= rp 884
		ip 909= od 010 
		ip 910= od 006
	ip 968= rp 943 = rt-nl-be_output=rate_table(	
		ip 939= rp 884
		ip 940= od 010 
		ip 910= od 006
	
	
/ 13	.

mpo=> select*from rate_table where system_id=26631921\g
/ name=RT_NL-SPEC


mpo=> select*from rtable_sel_criterium\g
 system_id | rate_table_systemid | unit_systemid | match_type_systemid | rate_parameter_systemid | value_from | value_t
o | is_date | order_detail_systemid 
-----------+---------------------+---------------+---------------------+-------------------------+------------+--------
--+---------+-----------------------
  26631973 |            26631921 |               |             3800001 |                         | BE         |        
  |       0 |               4200006
  26631930 |            26631921 |               |             3800001 |                         | IEPER      |        
  |       0 |               4200011
(10 rows)

/ 006=to country	,
/ 011= to party	,

mpo=> select*from rate_table where system_id=26631955\g
/ name=RT_NL_DE

o=> select*from rtable_sel_criterium\g
 system_id | rate_table_systemid | unit_systemid | match_type_systemid | rate_parameter_systemid | value_from | value_t
o | is_date | order_detail_systemid 
-----------+---------------------+---------------+---------------------+-------------------------+------------+--------
--+---------+-----------------------
  26631959 |            26631955 |               |             3800001 |                         | DE         |        
  |       0 |               4200006





/ Einde SAMENVATTING


/ Voor de empty fct geldt dat shouldCalculate()=true	,

/ 7	. 

/ we waren in	,

RateCalculationVO.runFor(RateAgreementVO, RateCalculationAlternative) line: 1305	
				for (CostComponentSpecificationVO myCostComp : myCostComponentSpecificationList) {
CostComponentSpecification:26631888/RC_FREIGHT/Freight costs
					for (RateResult myResult : myCostComp.run(this)) {
[Unit: theSystemId: 1000072	Symbol :EUR	Description :Euro	UnitType :CURRENCY	IsDeleted :0	; Value: 123.95692579057196]
						if (myCostComp.getCorrectionType().getName().equals("ADD")) {
/ JA
								myTotal.add(myResult.getCurrency(), RateResultUtils.getBigDecimalValue(myResult, BigDecimal.ZERO));
123.96 EUR
						anAlternative.addResult(myCostComp, myResult);

/ Volgende	,
				for (CostComponentSpecificationVO myCostComp : myCostComponentSpecificationList) {
					for (RateResult myResult : myCostComp.run(this)) {
						anAlternative.addResult(myCostComp, myResult);
CostComponentSpecification:26632004/RC_SERVICE/Service
/ anAlternative=[RC_FREIGHT = 123.95692579057196] [RC_SERVICE = STANDARD] 

CostComponentSpecification:26632354/RC_ADDITIONAL_STOP/Additional stop
/ anAlternative=[RC_FREIGHT = 123.95692579057196] [RC_SERVICE = STANDARD] [RC_ADDITIONAL_STOP = 50] 
/ myTotal=173.96 EUR

ostComponentSpecification:26632354/RC_ADDITIONAL_STOP/Additional stop
/ anAlternative=
/ myTotal=

CostComponentSpecification:26631994/RC_RELEASE_DATE/Release Date
/ anAlternative=[RC_FREIGHT = 123.95692579057196] [RC_SERVICE = STANDARD] [RC_ADDITIONAL_STOP = 50] [RC_RELEASE_DATE = 2014-05-12 16:00:00] 
/ myTotal=173.96 EUR

CostComponentSpecification:26631996/RC_START_BEFORE/Planned start before
/ anAlternative=[RC_FREIGHT = 123.95692579057196] [RC_SERVICE = STANDARD] [RC_ADDITIONAL_STOP = 50] [RC_RELEASE_DATE = 2014-05-12 16:00:00] [RC_START_BEFORE = 2014-05-15 17:00:00] 
/ myTotal=173.96 EUR

CostComponentSpecification:26631920/RC_FUEL/Fuel costs
/ anAlternative=[RC_FREIGHT = 123.95692579057196] [RC_SERVICE = STANDARD] [RC_ADDITIONAL_STOP = 50] [RC_RELEASE_DATE = 2014-05-12 16:00:00] [RC_START_BEFORE = 2014-05-15 17:00:00] [RC_FUEL = 16.1144003527743548000] 
/ myTotal=190.07 EUR

CostComponentSpecification:26631995/RC_START_AFTER/Planned start After
/ anAlternative=[RC_FREIGHT = 123.95692579057196] [RC_SERVICE = STANDARD] [RC_ADDITIONAL_STOP = 50] [RC_RELEASE_DATE = 2014-05-12 16:00:00] [RC_START_BEFORE = 2014-05-15 17:00:00] [RC_FUEL = 16.1144003527743548000] 
/ myTotal=190.07 EUR

/ t
RateCalculationVO.runFor(RateAgreementVO) line: 726	
				runFor(aRateAgreementVO, myAlterNative);
/ D
						RateCalculationAlternative firstAlt = alternativeList.iterator().next();
/=anAlternative hierboven	,
[RC_FREIGHT = 123.95692579057196] [RC_SERVICE = STANDARD] [RC_ADDITIONAL_STOP = 50] [RC_RELEASE_DATE = 2014-05-12 16:00:00] [RC_START_BEFORE = 2014-05-15 17:00:00] [RC_FUEL = 16.1144003527743548000] [RC_START_AFTER = 2014-05-15 16:00:00] 

						if (getRateAgreementVO().getRateType().equals(RateAgreementVO.TYPE_SERVICE_ORDER_COST)) {
/ JA, "service_order_cost"
							updateServiceOrderCostPartList(firstAlt);


/ 7	. 

/ we kijken in de rate calc naar	,
RateParameterVO.calculate(RateCalculationVO) line: 57	
	public RateResult calculate(RateCalculationVO aRateCalculation) throws RateException {
								myResult = myAbstractRateFunction.convertAndCalculate(myInputParameterList, aRateCalculation);

/ this=
theSystemId: 26631964Name :RT_FREIGHT

/ De myAbstractRateFunction kan 'n MultiplyFunction inst zijn, of een RateTableFunction	inst	, 

/ de rate results van de par's zitten in de par's zelf, in de myInputParamater's	,
/s
MultiplyFunction(AbstractRateFunction).convertAndCalculate(Collection<InputParameterVO>, RateCalculationVO) line: 80	
	public RateResult convertAndCalculate(Collection<InputParameterVO> anInputParameterList, RateCalculationVO aRateCalculation) throws RateException {
		Collection<InputParameterVO> myInputParameterVOList = convertInputUnitsToOutputUnit(anInputParameterList);
/s
public abstract class AbstractRateFunction {
	public Collection<InputParameterVO> convertInputUnitsToOutputUnit(Collection<InputParameterVO> anInputParameterList) throws RateException {

this	MultiplyFunction  (id=21157)	

/ Intermezzo

/ Deze inst van MultiplyFunction heeft 
myAbstractRateFunction	MultiplyFunction  (id=21089)	
	theRateFunctionVO	RateFunctionVO_$$_javassist_59  (id=21091)	
		handler	JavassistLazyInitializer  (id=21601)	
			target	RateFunctionVO  (id=21616)	
				theUnit	Unit  (id=21544)	
theSystemId: 1000532	Symbol :KG	Description :Kilogram	UnitType :NORMAL	IsDeleted :0	

/ Hieronder zien we een MultiplyFunction met EUR als unit	,
/ Wanneer set?
/ TODO

/ Einde Intermezzo

/ Intermezzo

/ In de input parameter zit de rate result	,
					RateResult rateResult = myInputParameterVO.getRateResult();
/ hierin zit een unit	,
					Unit myFromUnitVO = rateResult.getUnitVO();
theSystemId: 26631725	Symbol :LDM	Description :LDM	UnitType :NORMAL	IsDeleted :0	

/ in de rate function zit een unit	, bij multiply is dat kg	,
/ in convertInputUnitsToOutputUnit worden bij input par's die in hun rate result unit=null   hebben de unit=null gelaten	, en bij input par's die unit ldm hebben , de unit tot kg, de unit van de rate fct dus , geset	,

/ waarom heeft multiply unit kg
/ TODO
/ 1 input par moet unit=null hebben	,


/ Einde Intermezzo

			for (InputParameterVO myInputParameterVO : anInputParameterList) {
					RateResult rateResult = myInputParameterVO.getRateResult();
[Unit:null, Value:1750.00]
/ , 
[Unit: theSystemId: 26631725	Symbol :LDM	Description :LDM	UnitType :NORMAL	IsDeleted :0	; Value: 0.80]
					Unit myFromUnitVO = rateResult.getUnitVO();
null
/ of	,
theSystemId: 26631725	Symbol :LDM	Description :LDM	UnitType :NORMAL	IsDeleted :0	

					Unit myFromUnitVO = rateResult.getUnitVO();
					if (myFromUnitVO == null) {
/ JA, bij free value	,
						myNewInputParameterList.add(myInputParameterVO);
						continue;
					}

					if (theRateFunctionVO.getUnit() != null) {
/ JA, bij ldm_weight, die wordt calc multiply	,
						myToUnit = theRateFunctionVO.getUnit();
theSystemId: 1000532	Symbol :KG	Description :Kilogram	UnitType :NORMAL	IsDeleted :0	

					if (!myFromUnitVO.equals(myToUnit)) {
						BigDecimal oldValue = RateResultUtils.getBigDecimalValue(resultVar);
						if (oldValue != null) {
...
							resultVar.setUnitVO(myToUnit);
/ Van ldm -> kg	,
							myNewInputParameterVO.getRateFuncVO().setUnit(myToUnit);
/ TODO, 
/ Dit is de rate function waar je juist de unit	, kg, uit hebt gehaald	, waarom de unit overwrite met zichzelf	?


/t
	public RateResult convertAndCalculate(Collection<InputParameterVO> anInputParameterList, RateCalculationVO aRateCalculation) throws RateException {
		Collection<InputParameterVO> myInputParameterVOList = convertInputUnitsToOutputUnit(anInputParameterList);
/ D
		RateResult myResult = calculate(myInputParameterVOList, aRateCalculation);
/ s
MultiplyFunction.calculate(Collection<InputParameterVO>, RateCalculationVO) line: 34	
	public RateResult calculate(Collection<InputParameterVO> anInputParameterList, RateCalculationVO aRateCalculation) throws RateException {
		Unit myUnit = theRateFunctionVO.getUnit();
theSystemId: 1000532	Symbol :KG	Description :Kilogram	UnitType :NORMAL	IsDeleted :0	


/ volgende	,

	
RateParameterVO.calculate(RateCalculationVO) line: 57	
	public RateResult calculate(RateCalculationVO aRateCalculation) throws RateException {
								myResult = myAbstractRateFunction.convertAndCalculate(myInputParameterList, aRateCalculation);

/ this=
theSystemId: 26631964Name :RT_NL_DE_OUTPUT

/s
RateTableFunction.convertAndCalculate(Collection<InputParameterVO>, RateCalculationVO) line: 339	
	public RateResult convertAndCalculate(Collection<InputParameterVO> anInputParameterList, RateCalculationVO aRateCalculation) throws RateException {
		convertInputUnitsToOutputUnit(anInputParameterList);
/ Doet NIETS	,
/ RateTableFunction's convert doet NIETS	,

		RateResult myResult = calculate(anInputParameterList, aRateCalculation);
/s
RateTableFunction.calculate(Collection<InputParameterVO>, RateCalculationVO) line: 41	
		for (InputParameterVO myInputParameterVO : anInputParameterList) {
/ 'n order detail	, 
			RateResult myInputRateResult = myInputParameterVO.getRateResult();
[Unit: null; Value: DE]

		for (InputParameterVO myInputParameterVO : anInputParameterList) {
/ ldm	,
			RateResult myInputRateResult = myInputParameterVO.getRateResult();
[Unit: theSystemId: 1000532	Symbol :KG	Description :Kilogram	UnitType :NORMAL	IsDeleted :0	; Value: 1400.0000000]

		for (InputParameterVO myInputParameterVO : anInputParameterList) {
/ 'n order detail	,
			RateResult myInputRateResult = myInputParameterVO.getRateResult();
[Unit: null; Value: 20095]

/ rawValues=
[DE, 1400.0000000, 20095]

		RateTableResultCache myCache = RateTableResultCache.getInstance();
		if (myCache.hasCachedResult(myRateTable, myInputKey)) {
/ JA
			String myCachedValue = myCache.getCachedResult(myRateTable, myInputKey);
"123.95692579057196"
			if (myCachedValue != null) {
				myRateResult = new RateResult(myCachedValue);

			myRateResult.setUnitVO(myRateTable.getUnit());
Unit :theSystemId: 1000072	Symbol :EUR	Description :Euro	UnitType :CURRENCY	IsDeleted :0	
////////////////////////////////////////////////
/ WAS null


/ Volgende	,
RateParameterVO.calculate(RateCalculationVO) line: 110	
	public RateResult calculate(RateCalculationVO aRateCalculation) throws RateException {
								myResult = myAbstractRateFunction.convertAndCalculate(myInputParameterList, aRateCalculation);
/s
NotEmptyFunction(AbstractRateFunction).convertAndCalculate(Collection<InputParameterVO>, RateCalculationVO) line: 79	
	public RateResult convertAndCalculate(Collection<InputParameterVO> anInputParameterList, RateCalculationVO aRateCalculation) throws RateException {

		Collection<InputParameterVO> myInputParameterVOList = convertInputUnitsToOutputUnit(anInputParameterList);
/s
NotEmptyFunction.convertInputUnitsToOutputUnit(Collection<InputParameterVO>) line: 48	
/ Doet NIETS
/ Ook NotEmpty fct heeft geen conversion	,

/t
		RateResult myResult = calculate(myInputParameterVOList, aRateCalculation);
/s
NotEmptyFunction.calculate(Collection<InputParameterVO>, RateCalculationVO) line: 21	

/ pakt die !null is	,

	for (InputParameterVO myInputParameterVO : anInputParameterList) {
RT_NL-SPEC_OUTPUT
			RateResult myRateResult = myInputParameterVO.getRateResult();
null

RT_NL_DE_OUTPUT
			RateResult myRateResult = myInputParameterVO.getRateResult();
[Unit: theSystemId: 1000072	Symbol :EUR	Description :Euro	UnitType :CURRENCY	IsDeleted :0	; Value: 123.95692579057196]

		if (myArrayList.size() == 1) {
			RateResult myRateResult = myArrayList.get(0);
			return new RateResult(myRateResult);

/ volgende	,
public class RateParameterVO extends ValueObject implements Comparable<RateParameterVO> {
	public RateResult calculate(RateCalculationVO aRateCalculation) throws RateException {

/ this= RateParameterVO	,
theSystemId: 26632353Name :RT_ADDITIONAL_ADDRESS_OUTPUT

/s
RateTableFunction.convertAndCalculate(Collection<InputParameterVO>, RateCalculationVO) line: 340	
		RateResult myResult = calculate(anInputParameterList, aRateCalculation);
/s
RateTableFunction.calculate(Collection<InputParameterVO>, RateCalculationVO) line: 73	

myInputKey	"1.0|" (id=15389)	
/ NR_OF_CONSIGNMENTS

		RateTableResultCache myCache = RateTableResultCache.getInstance();
	rateTableCache
{26632349={1.0|=50}, 26631974={0.80|DE|=3}, 26631955={1400.0000000|20095|DE|=123.95692579057196}}

		if (myCache.hasCachedResult(myRateTable, myInputKey)) {
/ 26632349=system_id rate_table	,
/ 1.0| =  myInputKey	,
/s
		if (rateTableCache != null) {
			LRUMap myMap = (LRUMap) rateTableCache.get(aRateTable.getSystemId());
				return myMap.containsKey(anInputKey);
/ Een rate_table kan meerdere entries hebben	, blijkbaar	,

 


	public RateResult convertAndCalculate(Collection<InputParameterVO> anInputParameterList, RateCalculationVO aRateCalculation) throws RateException {

/ this=RateTableFunction
	theRateFunctionVO=com.mpobjects.oms.ratecalc.model.ratefunction.vo.RateFunctionVO/id:26632352

		RateResult myResult = calculate(anInputParameterList, aRateCalculation);

...
/ later	,

								myResult = myAbstractRateFunction.convertAndCalculate(myInputParameterList, aRateCalculation);

myAbstractRateFunction	MultiplyFunction  (id=21089)	
	theRateFunctionVO	RateFunctionVO_$$_javassist_59  (id=21091)	
		handler	JavassistLazyInitializer  (id=21601)	
			target	RateFunctionVO  (id=21616)	
				theUnit	Unit  (id=21544)	
theSystemId: 1000072	Symbol :EUR	Description :Euro	UnitType :CURRENCY	IsDeleted :0	

/ Dus de unit van deze MultiplyFunction is EUR	, hierboven was het KG	,
/ TODO( wanneer set?)

...
/ later	,

package com.mpobjects.oms.ratecalc.model.ratecalculation.vo;
public class RateCalculationVO {
	protected void runFor(RateAgreementVO aRateAgreementVO, RateCalculationAlternative anAlternative) {

this	RateCalculationVO  (id=21074)	

			CurrencyGroup myTotal = new CurrencyGroup();

				for (CostComponentSpecificationVO myCostComp : myCostComponentSpecificationList) {
					for (RateResult myResult : myCostComp.run(this)) {
/ D
[Unit: theSystemId: 1000072	Symbol :EUR	Description :Euro	UnitType :CURRENCY	IsDeleted :0	; Value: 21.720730460839527000]
/ we zien in beide for statements maar 1 for loop	,
						if (myCostComp.getCorrectionType().getName().equals("ADD")) {
								myTotal.add(myResult.getCurrency(), RateResultUtils.getBigDecimalValue(myResult, BigDecimal.ZERO));
21.72 EUR

						anAlternative.addResult(myCostComp, myResult);



/ Waar komen de calc values in	?

/ er zijn	,
						anAlternative.addResult(myCostComp, myResult);
/ en 	,
						aRateCalculation.cacheResult(this, myResult);
/ TODO

/ 7	. 

/ Volgende	,


				for (CostComponentSpecificationVO myCostComp : myCostComponentSpecificationList) {
					addToLog("Starting evaluation of component [" + myCostComp.getName() + "]");
					for (RateResult myResult : myCostComp.run(this)) {
CostComponentSpecification:26631995/RC_START_AFTER/Planned start After
/ s
			RateResult myResult = myParameter.calculate(aRateCalculation);
theSystemId: 26631989Name :RP_START_DATE_AFTER
/s
								for (InputParameterVO myInputParameter : myInputParameterList) {
									RateResult mySub = myInputParameter.calculate(aRateCalculation);
/s
				myRateResult = aRateCalculation.evaluate(myServiceorderDetail);
/ myServiceOrderDetail=
SystemId: 26631800, Name :REQ_END_AFTER, PathOrClass :./consignmentList[1]/serviceActionList[1]/shipmentOrderVO/dateSetVO/requestedEndAfter
/ myRateResult=
[Unit: theSystemId: 1000536	Symbol :DATE	Description :Datum	UnitType :DATE	IsDeleted :0	; Value: 2014-05-15 16:00:00]

/t
	public RateResult calculate(RateCalculationVO aRateCalculation) throws RateException {
			for (InputParameterVO myInputParameter : myInputParameterList) {
				RateResult mySub = myInputParameter.calculate(aRateCalculation);
				if (mySub != null) {
					mySubResults.add(mySub);
				}
/ D
/ mySubResults=
[[Unit: null; Value: 1.00000]
 [Unit: theSystemId: 1000536	Symbol :DATE	Description :Datum	UnitType :DATE	IsDeleted :0	; Value: 2014-05-15 16:00:00]]

								myResult = myAbstractRateFunction.convertAndCalculate(myInputParameterList, aRateCalculation);
/ myAbstractRateFunction=
com.mpobjects.oms.ratecalc.model.process.function.StartDateFunction@61b97db3
/s
public abstract class AbstractRateFunction {
public RateResult convertAndCalculate(Collection<InputParameterVO> anInputParameterList, RateCalculationVO aRateCalculation) throws RateException {
this	StartDateFunction  (id=21755)	
		Collection<InputParameterVO> myInputParameterVOList = convertInputUnitsToOutputUnit(anInputParameterList);
/ Doet NIETS	,
		RateResult myResult = calculate(myInputParameterVOList, aRateCalculation);
/s
public abstract class AbstractRateFunction {
	public RateResult calculate(Collection<InputParameterVO> anInputParameterList, RateCalculationVO aRateCalculation) throws RateException {
this	StartDateFunction  (id=21755)	
					} else {
						int myLeadtime = value.intValue();
						myDate = DateUtils.addWorkingdays(myDate, leadtimeMultiplicator * myLeadtime);
Wed May 14 16:00:00 CEST 2014
/ WAS Wed May 15 16:00:00 CEST 2014

/ Intermezzo
$ vi calendar.java

class calendar{
        public static void main(String...args){
                Date d=new Date();
                Calendar c= Calendar.getInstance();
                c.setTime(d);
                System.out.println(c);
                boolean b=false;
        }
}
[eric@localhost Test]$ java calendar 
java.util.GregorianCalendar[
time=1403612345046
areFieldsSet=true
areAllFieldsSet=true
lenient=true
zone=sun.util.calendar.ZoneInfo[id="Europe/Amsterdam"
offset=3600000
dstSavings=3600000
useDaylight=true
transitions=180
lastRule=java.util.SimpleTimeZone[id=Europe/Amsterdam
offset=3600000
dstSavings=3600000
useDaylight=true
startYear=0
startMode=2
startMonth=2
startDay=-1
startDayOfWeek=1
startTime=3600000
startTimeMode=2
endMode=2
endMonth=9
endDay=-1
endDayOfWeek=1
endTime=3600000
endTimeMode=2]]
firstDayOfWeek=1
minimalDaysInFirstWeek=1
ERA=1
YEAR=2014
MONTH=5
WEEK_OF_YEAR=26
WEEK_OF_MONTH=4
DAY_OF_MONTH=24
DAY_OF_YEAR=175
DAY_OF_WEEK=3
DAY_OF_WEEK_IN_MONTH=4
AM_PM=1
HOUR=2
HOUR_OF_DAY=14
MINUTE=19
SECOND=5
MILLISECOND=46
ZONE_OFFSET=3600000
DST_OFFSET=3600000]

	public static Date addWorkingdays(Date aDate, int aLeadTime) {
		Calendar myCalendar = Calendar.getInstance();
		myCalendar.setTime(aDate);
		int mySign = (int) Math.signum(aLeadTime);
		aLeadTime = Math.abs(aLeadTime);
		for (int i = 0; i < aLeadTime;) {
			myCalendar.add(Calendar.DAY_OF_YEAR, mySign);
			int myDayOfWeek = myCalendar.get(Calendar.DAY_OF_WEEK);
			if (myDayOfWeek == Calendar.SATURDAY || myDayOfWeek == Calendar.SUNDAY) {
				myCalendar.add(Calendar.DAY_OF_YEAR, mySign);
			} else {
				i++;
			}
		}
/ WH	,
/ Als we op een werkdag beginnen, dan
			if (myDayOfWeek == Calendar.SATURDAY || myDayOfWeek == Calendar.SUNDAY) {
/ of	,
			if (myDayOfWeek == Calendar.SUNDAY) {

/als het di is , en er moeten 3 werkdagen af	, do dus	, 
/ i=0
/ 1ste for loop	, , ma, i=1
/ 2de for loop	,  zo, za	, i blijft 1	, 
/ 3de for lopp	, vr, i=2
/ 4 for loop	, do, i=3
/ geen for loops meer	,

/ Einde Intermezzo

...
/t
public class RateParameterVO extends ValueObject implements Comparable<RateParameterVO> {
	public RateResult calculate(RateCalculationVO aRateCalculation) throws RateException {
								myResult = myAbstractRateFunction.convertAndCalculate(myInputParameterList, aRateCalculation);
/ D
								if (myResult.getUnitVO() == null) {
									myResult.setUnitVO(getUnit());
								}
/ sets	,
theUnitVO	Unit  (id=21932)	
theSystemId: 1000536	Symbol :DATE	Description :Datum	UnitType :DATE	IsDeleted :0	

/t
	protected void runFor(RateAgreementVO aRateAgreementVO, RateCalculationAlternative anAlternative) {
				for (CostComponentSpecificationVO myCostComp : myCostComponentSpecificationList) {
					addToLog("Starting evaluation of component [" + myCostComp.getName() + "]");
					for (RateResult myResult : myCostComp.run(this)) {
/ D
						if (myCostComp.getCorrectionType().getName().equals("ADD")) {
/ NEE
/ Dus niet optellen bij myTotal	,
						anAlternative.addResult(myCostComp, myResult);

/ volgende	,
				for (CostComponentSpecificationVO myCostComp : myCostComponentSpecificationList) {
...
					for (RateResult myResult : myCostComp.run(this)) {

/ als SERVICE, dan "STANDARD"	, unit=null in myResult, 	wordt niet add bij myTotal	, wel in anAlternative	,

/ volgende	,

				for (CostComponentSpecificationVO myCostComp : myCostComponentSpecificationList) {
					addToLog("Starting evaluation of component [" + myCostComp.getName() + "]");
					for (RateResult myResult : myCostComp.run(this)) {
/s
	public List<RateResult> run(RateCalculationVO aRateCalculation) throws RateException {
/ this= 
CostComponentSpecification:26632354/RC_ADDITIONAL_STOP/Additional stop
		} else {
			RateParameterVO myParameter = getRateParameter();
theSystemId: 26632353Name :RT_ADDITIONAL_ADDRESS_OUTPUT
/s
public class RateParameterVO extends ValueObject implements Comparable<RateParameterVO> {
	public RateResult calculate(RateCalculationVO aRateCalculation) throws RateException {
							AbstractRateFunction myAbstractRateFunction = aRateCalculation.getRateFunction(this);
myAbstractRateFunction	RateTableFunction  (id=22038)	
...
/ s
	public RateResult calculate(RateCalculationVO aRateCalculation) throws RateException {
/ de input par is een order detail	,
SystemId: 26631840, Name :NR_OF_CONSIGNMENTS, PathOrClass :count(./consignmentList)

/ Intermezzo

mpo=> select*from rate_table where system_id=26632349\g
 rate_agreement_systemid | system_id |         name          | description | unit_systemid | rate_table_xml | min_charge |
 max_charge | rounding | excel_formatted | default_value | rate_table_content | is_user_editable | is_shared | linked_rate
_table_systemid | linked_multiplication | linked_addition |       last_update       
-------------------------+-----------+-----------------------+-------------+---------------+----------------+------------+
------------+----------+-----------------+---------------+--------------------+------------------+-----------+------------
----------------+-----------------------+-----------------+-------------------------
                26631869 |  26632349 | RT_ADDITIONAL_ADDRESS |             |       1000072 |                |            |
            |        0 |               0 | 0             | 1       50        +|                0 |         0 |            
                |                       |                 | 2014-04-24 15:54:40.636
                         |           |                       |             |               |                |            |

/ WH extra kosten voor het aantal consignments	, de wagen moet omrijden	,

/ we hebben 1 con	, dus 50 euro	

/ Einde Intermezzo

/ t
				for (CostComponentSpecificationVO myCostComp : myCostComponentSpecificationList) {
					for (RateResult myResult : myCostComp.run(this)) {
/ D
						if (myCostComp.getCorrectionType().getName().equals("ADD")) {
								myTotal.add(myResult.getCurrency(), RateResultUtils.getBigDecimalValue(myResult, BigDecimal.ZERO));
						anAlternative.addResult(myCostComp, myResult);

/ Volgende	,
				for (CostComponentSpecificationVO myCostComp : myCostComponentSpecificationList) {
...
					for (RateResult myResult : myCostComp.run(this)) {

 RC_RELEASE_DATE : RP_RELEASE_DATE ( STARTDATE ) = 2014-05-09 16:00:00 DATE
 	LT_CARRIER_OUTPUT ( RATE TABLE ) = 3 WORKDAY
 		CALC_LDM ( ) = 1.20 LDM
 		TO COUNTRY ( ) = DE
 	RP_START_DATE_AFTER ( STARTDATE ) = 2014-05-14 16:00:00 DATE
 		REQ_END_AFTER ( ) = 2014-05-15 16:00:00 DATE
 		FreeValue ( ) = 1.00000

/s
public class RateParameterVO extends ValueObject implements Comparable<RateParameterVO> {
	public RateResult calculate(RateCalculationVO aRateCalculation) throws RateException {
							AbstractRateFunction myAbstractRateFunction = aRateCalculation.getRateFunction(this);
myAbstractRateFunction	StartDateFunction  (id=22112)	
							RateFunctionVO myRateFunction = getOutputfromFunctionVO();
							Collection<InputParameterVO> myInputParameterList = myRateFunction.getInputParameterList();
								for (InputParameterVO myInputParameter : myInputParameterList) {
									RateResult mySub = myInputParameter.calculate(aRateCalculation);


							} else {
								for (InputParameterVO myInputParameter : myInputParameterList) {
									RateResult mySub = myInputParameter.calculate(aRateCalculation);
/s
InputParameterVO.calculate(RateCalculationVO) line: 110	
			OrderDetail myServiceorderDetail = getOrderDetailVO();
null
			RateParameterVO myParameter = getParameterVO();
theSystemId: 26631989Name :RP_START_DATE_AFTER
			BigDecimal myFreeValue = getFreeValue();
null
				myRateResult = myParameter.calculate(aRateCalculation);
theSystemId: 26631989Name :RP_START_DATE_AFTER
/s
RateParameterVO.calculate(RateCalculationVO) line: 70	
							AbstractRateFunction myAbstractRateFunction = aRateCalculation.getRateFunction(this);
com.mpobjects.oms.ratecalc.model.process.function.StartDateFunction@77ed70cb
							RateFunctionVO myRateFunction = getOutputfromFunctionVO();
							Collection<InputParameterVO> myInputParameterList = myRateFunction.getInputParameterList();
							} else {
								for (InputParameterVO myInputParameter : myInputParameterList) {
									RateResult mySub = myInputParameter.calculate(aRateCalculation);
/s
InputParameterVO.calculate(RateCalculationVO) line: 79	
			OrderDetail myServiceorderDetail = getOrderDetailVO();
SystemId: 26631800, Name :REQ_END_AFTER, PathOrClass :./consignmentList[1]/serviceActionList[1]/shipmentOrderVO/dateSetVO/requestedEndAfter
			RateParameterVO myParameter = getParameterVO();
null
			BigDecimal myFreeValue = getFreeValue();
null

...
/t
RateParameterVO.calculate(RateCalculationVO) line: 110	
/ this=
theSystemId: 26631989Name :RP_START_DATE_AFTER
							} else {
								for (InputParameterVO myInputParameter : myInputParameterList) {
									RateResult mySub = myInputParameter.calculate(aRateCalculation);
									if (mySub != null) {
										mySubResults.add(mySub);
									}
								}
/ mySubResults=
[[Unit: theSystemId: 1000536	Symbol :DATE	Description :Datum	UnitType :DATE	IsDeleted :0	; Value: 2014-05-15 16:00:00], 
[Unit: null; Value: 1.00000]]
/ 1 is de lead time	,

								myResult = myAbstractRateFunction.convertAndCalculate(myInputParameterList, aRateCalculation);
/s
StartDateFunction(AbstractRateFunction).convertAndCalculate(Collection<InputParameterVO>, RateCalculationVO) line: 79	
		Collection<InputParameterVO> myInputParameterVOList = convertInputUnitsToOutputUnit(anInputParameterList);
/ NIETS	,
		RateResult myResult = calculate(myInputParameterVOList, aRateCalculation);
/s
StartDateFunction(AbstractLeadtimeFunction).calculate(Collection<InputParameterVO>, RateCalculationVO) line: 50	
		InputParameterVO sourceInput = InputParameterUtils.getDateInput(anInputParameterList);
/ er zijn 2 input par's	, 1 ervan is een date	,
			myDate = RateResultUtils.getDateValue(sourceInput.getRateResult());
Thu May 15 16:00:00 CEST 2014
						int myLeadtime = value.intValue();
1
						myDate = DateUtils.addWorkingdays(myDate, leadtimeMultiplicator * myLeadtime);
Wed May 14 16:00:00 CEST 2014

/t
RateParameterVO.calculate(RateCalculationVO) line: 127	
								myResult = myAbstractRateFunction.convertAndCalculate(myInputParameterList, aRateCalculation);
/ D
									myResult.setUnitVO(getUnit());
/ myResult=
theResultName	"RP_START_DATE_AFTER" (id=14361)	
theUnitVO	Unit  (id=14363)	theSystemId: 1000536	Symbol :DATE	Description :Datum	UnitType :DATE	IsDeleted :0	
theValue	"2014-05-14 16:00:00" (id=14362)	

/t
RateParameterVO.calculate(RateCalculationVO) line: 105	
this	RateParameterVO  (id=14237)	theSystemId: 26631993Name :RP_RELEASE_DATE
							} else {
								for (InputParameterVO myInputParameter : myInputParameterList) {
									RateResult mySub = myInputParameter.calculate(aRateCalculation);
									if (mySub != null) {
										mySubResults.add(mySub);
/ mySubResults=
[[Unit: theSystemId: 1000536	Symbol :DATE	Description :Datum	UnitType :DATE	IsDeleted :0	; Value: 2014-05-14 16:00:00]]

/ volgende	,
							} else {
								for (InputParameterVO myInputParameter : myInputParameterList) {
									RateResult mySub = myInputParameter.calculate(aRateCalculation);
/s
InputParameterVO.calculate(RateCalculationVO) line: 97	
			OrderDetail myServiceorderDetail = getOrderDetailVO();
null
			RateParameterVO myParameter = getParameterVO();
theSystemId: 26631980Name :LT_CARRIER_OUTPUT
			BigDecimal myFreeValue = getFreeValue();
null
				myRateResult = myParameter.calculate(aRateCalculation);
/ s
RateParameterVO.calculate(RateCalculationVO) line: 57	
							AbstractRateFunction myAbstractRateFunction = aRateCalculation.getRateFunction(this);
com.mpobjects.oms.ratecalc.model.process.function.RateTableFunction@2ecdeee3

							RateFunctionVO myRateFunction = getOutputfromFunctionVO();
							Collection<InputParameterVO> myInputParameterList = myRateFunction.getInputParameterList();
							} else {
								for (InputParameterVO myInputParameter : myInputParameterList) {
									RateResult mySub = myInputParameter.calculate(aRateCalculation);
/s
InputParameterVO.calculate(RateCalculationVO) line: 71	
			OrderDetail myServiceorderDetail = getOrderDetailVO();
SystemId: 4200006, Name :TO COUNTRY, PathOrClass :./toPartyVO/countryVO/code
			RateParameterVO myParameter = getParameterVO();
null
			BigDecimal myFreeValue = getFreeValue();
null
				myRateResult = aRateCalculation.evaluate(myServiceorderDetail);
[Unit: null; Value: DE]

/ volgende	,
								for (InputParameterVO myInputParameter : myInputParameterList) {
									RateResult mySub = myInputParameter.calculate(aRateCalculation);
/s
InputParameterVO.calculate(RateCalculationVO) line: 79	
			OrderDetail myServiceorderDetail = getOrderDetailVO();
SystemId: 26631726, Name :CALC_LDM, PathOrClass :./calculatedTotalLoadingMeters
			RateParameterVO myParameter = getParameterVO();
null
			BigDecimal myFreeValue = getFreeValue();
null
				myRateResult = aRateCalculation.evaluate(myServiceorderDetail);
[Unit: theSystemId: 26631725	Symbol :LDM	Description :LDM	UnitType :NORMAL	IsDeleted :0	; Value: 1.60]

/t
RateParameterVO.calculate(RateCalculationVO) line: 107	
							} else {
								for (InputParameterVO myInputParameter : myInputParameterList) {
									RateResult mySub = myInputParameter.calculate(aRateCalculation);
/ D
									if (mySub != null) {
										mySubResults.add(mySub);
/ =
[[Unit: null; Value: DE], 
[Unit: theSystemId: 26631725	Symbol :LDM	Description :LDM	UnitType :NORMAL	IsDeleted :0	; Value: 1.60]]

								myResult = myAbstractRateFunction.convertAndCalculate(myInputParameterList, aRateCalculation);
/s
RateTableFunction.convertAndCalculate(Collection<InputParameterVO>, RateCalculationVO) line: 339	
		convertInputUnitsToOutputUnit(anInputParameterList);
/ NIETS	,
		RateResult myResult = calculate(anInputParameterList, aRateCalculation);
/s
RateTableFunction.calculate(Collection<InputParameterVO>, RateCalculationVO) line: 41	
		RateTableVO myRateTable = getRateFunctionVO().getRateTableVO();
theSystemId: 26631974RateAgreement :theSystemId: 26631869Name :OEGEMA

mpo=> select*from rate_table where name='LT_CARRIER'\g
rate_agreement_systemid+++system_id+++name+++description+++unit_systemid+++rate_table_xml+++min_charge+++max_charge+++rounding+++excel_formatted+++default_value+++rate_table_content+++is_user_editable+++is_shared+++linked_rate_table_systemid+++linked_multiplication+++linked_addition+++last_update
26631869+++26631974+++LT_CARRIER++++++4348446++++++++++++0+++0++++++	BE|NL	DE
3	3	3
6	3	3
9	2	2
13.6	1	1
15	1	1+++0+++0++++++++++++2014-04-22 17:01:10.218
(1 row)

			rawValues[idx++] = myInputRateResult.getValue();
[DE, 1.60]

		final String myInputKey = myKeyBuilder.toString();
1.60|DE|

/ de cache is leeg	,
		} else {
			myRateResult = calculateWithoutCache(anInputParameterList, aRateCalculation);
/s
RateTableFunction.calculateWithoutCache(Collection<InputParameterVO>, RateCalculationVO) line: 99	

		RateTableVO myRateTable = getRateFunctionVO().getRateTableVO();
26631974
		int myNoOfDimensions = myRateTable.getDimensionList().size();
2

		/* If there is a MaxMinMode, this input parameter holds the mode. */
		int myColumnNumber = myRateTable.firstDimBasicCharge() ? 2 : 1;
1, want false	,

		/*
		 * First we need to evaluate the input parameters and lookup the relevant column and row(s) in the rate table.
		 * Since only dimension 2 determines the column there is only one lookup for the column. For looking up the row,
		 * there is a knock out system: the matchRowDimension eliminates non matching rows from the myRowMap map.
		 */

		InputParameterVO[] myInputParamArray = new InputParameterVO[myNoOfDimensions == 1 ? 1 : myNoOfDimensions - 1];
[null]
		for (DimensionVO myDimension : myRateTable.getDimensionList()) {
theSystemId: 26631975Name :LDM
RateTableSystemid :26631974
Unit: theSystemId: 26631725	Symbol :LDM	Description :LDM	UnitType :NORMAL	IsDeleted :0	
Rounding :false
Discrete :false
BasicChargeApplicable :false
SequenceNr :1
MaxMinMode :null
RegexPermitted :true
RangePermitted :false

			} else if (myDimension.getSequenceNr() == 1) {
				myInputParamArray[0] = myDimension.getInputParameter();
[SystemId: 26631977]

/ Intermezzo

mpo=> select*from input_parameter where system_id=26631977\g
 system_id | parameter_systemid | func_par_def_systemid | rate_func_systemid | dimension_systemid | configuration_value | 
order_detail_systemid | free_value 
-----------+--------------------+-----------------------+--------------------+--------------------+---------------------+-
----------------------+------------
  26631977 |                    |                       |           26631979 |                    |                     | 
             26631726 |           
(1 row)

mpo=> select*from order_detail where system_id=26631726\g
 system_id |         path_or_class          |   name   | unit_systemid | parameter_type_systemid |     rate_type      
-----------+--------------------------------+----------+---------------+-------------------------+--------------------
  26631726 | ./calculatedTotalLoadingMeters | CALC_LDM |      26631725 |                 3700002 | service_order_cost
(1 row)

/ Einde Intermezzo

			if (myDimension.getSequenceNr() == 2) {
				mySecondInputParam = myDimension.getInputParameter();
SystemId: 26631978

/ Intermezzo

mpo=> select*from input_parameter where system_id=26631978\g
 system_id | parameter_systemid | func_par_def_systemid | rate_func_systemid | dimension_systemid | configuration_value | 
order_detail_systemid | free_value 
-----------+--------------------+-----------------------+--------------------+--------------------+---------------------+-
----------------------+------------
  26631978 |                    |                       |           26631979 |                    |                     | 
              4200006 |           
(1 row)

mpo=> select*from order_detail where system_id=4200006\g
 system_id |       path_or_class        |    name    | unit_systemid | parameter_type_systemid |     rate_type      
-----------+----------------------------+------------+---------------+-------------------------+--------------------
   4200006 | ./toPartyVO/countryVO/code | TO COUNTRY |               |                 3700001 | service_order_cost
(1 row)

/ Einde Intermezzo

				myColumnNumber = myRateTable.matchSecondDimension(mySecondInputParam.getRateResult());
/s
RateTableVO.matchSecondDimension(RateResult) line: 891	
	public int matchSecondDimension(RateResult aRateResult) throws RateException {
/ aRateResult=
[Unit: null; Value: DE]
		RateTableRow mySecondDimensionRow = getSecondDimensionRow();
/ cells=
[com.mpobjects.oms.ratecalc.model.ratetable.vo.EmptyCell@357f7815
 com.mpobjects.oms.ratecalc.model.ratetable.vo.RateTableDimensionInputCell@43a4c623
BE|NL
 com.mpobjects.oms.ratecalc.model.ratetable.vo.RateTableDimensionInputCell@76cc4686]
DE

		int myLast = getLastDataColumn();
3
		for (int i = getFirstDataColumn(); i < myLast; i++) {
			Object myRateTableCellCandidate = mySecondDimensionRow.get(i);
/ de laatste	,
dimensionSeqNr	2		/ altijd	,	
theText	"DE" (id=15304)	
				myCell = (RateTableDimensionInputCell) myRateTableCellCandidate;
		 	if (myCell.match(this, aRateResult)) {
/ aRateResult=
[Unit: null; Value: DE]
/JA	, laatste column van dimensie 2	,

/t
RateTableFunction.calculateWithoutCache(Collection<InputParameterVO>, RateCalculationVO) line: 142	
				myColumnNumber = myRateTable.matchSecondDimension(mySecondInputParam.getRateResult());
/ D
2

/ volgende,	
			mySecondDimension = !mySecondDimension;
false
			if (!mySecondDimension) {
				myResult = myRateTable.matchRowDimension(myInputParamArray);
/ myInputParamArray=
[SystemId: 26631977]

/ Intermezzo

mpo=> select*from input_parameter where system_id=26631977\g
 system_id | parameter_systemid | func_par_def_systemid | rate_func_systemid | dimension_systemid | configuration_value | 
order_detail_systemid | free_value 
-----------+--------------------+-----------------------+--------------------+--------------------+---------------------+-
----------------------+------------
  26631977 |                    |                       |           26631979 |                    |                     | 
             26631726 |           
(1 row)
mpo=> select*from order_detail where system_id=26631726 \g
 system_id |         path_or_class          |   name   | unit_systemid | parameter_type_systemid |     rate_type      
-----------+--------------------------------+----------+---------------+-------------------------+--------------------
  26631726 | ./calculatedTotalLoadingMeters | CALC_LDM |      26631725 |                 3700002 | service_order_cost
(1 row)

/ Einde Intermezzo

/s
RateTableVO.matchRowDimension(InputParameterVO[]) line: 857	
	public RateTableRow matchRowDimension(InputParameterVO[] anInputArray) throws RateException {
/ anInputArray=
[SystemId: 26631977]
/ dus de input par met de order_detail	,

		int myLast = getLastDataRow();
5
		rowLoop: for (int r = getFirstDataRow(); r <= myLast; r++) {
/  getFirstDataRow()=1
			RateTableRow myRow = getRow(r);

			for (int c = 0; c < anInputArray.length; c++) {
				RateTableCell myObject = myRow.get(c);
					myInputCell = (RateTableDimensionInputCell) myObject;
				if (!myInputCell.match(this, anInputArray[c].getRateResult())) {
/myInputCell
	theText "3"
/s
RateTableDimensionInputCell.match(RateTableVO, RateResult) line: 105	
	public boolean match(RateTableVO theRateTable, RateResult aRateResult) throws RateException {
/ this is de cel met "3" erin	,
/ aRateResult=order detail ldm 1.60	,

		DimensionVO theDimension = theRateTable.getDimension(dimensionSeqNr);
theSystemId: 26631975Name :LDM
RateTableSystemid :26631974
Unit: theSystemId: 26631725	Symbol :LDM	Description :LDM	UnitType :NORMAL	IsDeleted :0	
Rounding :false
Discrete :false
BasicChargeApplicable :false
SequenceNr :1
MaxMinMode :null
RegexPermitted :true
RangePermitted :false

mpo=> select*from dimension where system_id=26631975\g
 system_id | name | rate_table_systemid | unit_systemid | rounding | discrete | basic_charge_applicable | sequence_nr | ma
x_min_mode | regex_permitted | range_permitted | input_parameter_systemid 
-----------+------+---------------------+---------------+----------+----------+-------------------------+-------------+---
-----------+-----------------+-----------------+--------------------------
  26631975 | LDM  |            26631974 |      26631725 |        0 |        0 |                       0 |           1 |   
           |               1 |               0 |                 26631977
(1 row)

		if (theDimension.isDiscrete()) {
/ NEE
		} else {
			/* Non discrete, continuous */
			Unit myUnit = theDimension.getUnit();
theSystemId: 26631725	Symbol :LDM	Description :LDM	UnitType :NORMAL	IsDeleted :0	

			if (myUnit != null && Unit.DATE.equals(myUnit.getUnitType())) {
/ NEE
			} else {
				BigDecimal myLow = LOW;
-2147483648
				BigDecimal myHigh = HIGH;
				BigDecimal myResultFloatValue = RateResultUtils.getBigDecimalValue(aRateResult);
1.60
				if (MaxMinMode.FORMER_VALUE.equals(theDimension.getMaxMinMode())) {
/ NEE
				} else {
					myHigh = theRateTable.getValueAsBigDecimal(this);
3
					myRet = myLow.compareTo(myResultFloatValue) < 0 && myResultFloatValue.compareTo(myHigh) <= 0;
true

/t
RateTableVO.matchRowDimension(InputParameterVO[]) line: 874	
				if (!myInputCell.match(this, anInputArray[c].getRateResult())) {
/ NEE
				} else {
					if (c == anInputArray.length - 1) {
/ JA
						myResult = myRow;
						break rowLoop;

/ t
RateTableFunction.calculateWithoutCache(Collection<InputParameterVO>, RateCalculationVO) line: 147	
			if (!mySecondDimension) {
				myResult = myRateTable.matchRowDimension(myInputParamArray);
/ D
myResult	RateTableRow  (id=15352)	
cells	ArrayList<E>  (id=15354)	
[com.mpobjects.oms.ratecalc.model.ratetable.vo.RateTableDimensionInputCell@2b41827
3
 com.mpobjects.oms.ratecalc.model.ratetable.vo.RateTableOutputCell@7d9da9d3
3
 com.mpobjects.oms.ratecalc.model.ratetable.vo.RateTableOutputCell@79f89c12]
3
rowNumber	1	

		if (myResult != null && myColumnNumber > 0) {
/ myColumnNumber=2


				myRateResult = new RateResult(myBdResult);
[Unit: null; Value: 3]

/t
RateTableFunction.calculate(Collection<InputParameterVO>, RateCalculationVO) line: 80	
		} else {
			myRateResult = calculateWithoutCache(anInputParameterList, aRateCalculation);
/ D
[Unit: null; Value: 3]
			myCache.cacheResult(myRateTable, myInputKey, myRateResult);

			myRateResult.setUnitVO(myRateTable.getUnit());
theSystemId: 4348446	Symbol :WORKDAY	Description :Working day	UnitType :NORMAL	IsDeleted :0	

/t
RateTableFunction.convertAndCalculate(Collection<InputParameterVO>, RateCalculationVO) line: 341	
		convertInputUnitsToOutputUnit(anInputParameterList);
		RateResult myResult = calculate(anInputParameterList, aRateCalculation);
/ D
[Unit: theSystemId: 4348446	Symbol :WORKDAY	Description :Working day	UnitType :NORMAL	IsDeleted :0	; Value: 3]

/t
RateParameterVO.calculate(RateCalculationVO) line: 113	
								myResult = myAbstractRateFunction.convertAndCalculate(myInputParameterList, aRateCalculation);
/ D

/t
RateParameterVO.calculate(RateCalculationVO) line: 105	
							} else {
								for (InputParameterVO myInputParameter : myInputParameterList) {
									RateResult mySub = myInputParameter.calculate(aRateCalculation);
									if (mySub != null) {
										mySubResults.add(mySub);
[[Unit: theSystemId: 1000536	Symbol :DATE	Description :Datum	UnitType :DATE	IsDeleted :0	; Value: 2014-05-14 16:00:00], 
[Unit: theSystemId: 4348446	Symbol :WORKDAY	Description :Working day	UnitType :NORMAL	IsDeleted :0	; Value: 3]]

								myResult = myAbstractRateFunction.convertAndCalculate(myInputParameterList, aRateCalculation);
/s
StartDateFunction(AbstractRateFunction).convertAndCalculate(Collection<InputParameterVO>, RateCalculationVO) line: 79	

		InputParameterVO sourceInput = InputParameterUtils.getDateInput(anInputParameterList);
/ RP_START_DATE_AFTER

		} else {
				Unit myUnitVO = myInputParameterVO.getUnitVO();
theSystemId: 4348446	Symbol :WORKDAY	Description :Working day	UnitType :NORMAL	IsDeleted :0	
3
						int myLeadtime = value.intValue();
						myDate = DateUtils.addWorkingdays(myDate, leadtimeMultiplicator * myLeadtime);
Fri May 09 16:00:00 CEST 2014

/t
RateParameterVO.calculate(RateCalculationVO) line: 127	
								myResult = myAbstractRateFunction.convertAndCalculate(myInputParameterList, aRateCalculation);
myResult	RateResult  (id=15580)	
	theResultName	"RP_RELEASE_DATE" (id=15584)	
	theUnitVO	Unit  (id=14363)	
	theValue	"2014-05-09 16:00:00" (id=15585)	

/t
RateCalculationVO.runFor(RateAgreementVO, RateCalculationAlternative) line: 1303	
				for (CostComponentSpecificationVO myCostComp : myCostComponentSpecificationList) {
					for (RateResult myResult : myCostComp.run(this)) {
/ D

/ we geven continue op alle RC's	,

				anAlternative.setSuccess(true);
[RC_RELEASE_DATE = 2014-05-09 16:00:00] [RC_ADDITIONAL_STOP = 50] [RC_START_BEFORE = 2014-05-16 17:00:00] [RC_START_AFTER = 2014-05-14 16:00:00] [RC_FREIGHT = 167.0825420064579] [RC_FUEL = 21.720730460839527000] [RC_SERVICE = STANDARD] 

/ Intermezzo

rc_release_date=rp_start_date_after - lt_carrier
		=req end after-1	=3

rc_start_after=req end after - 1
rc_start_before=req end before - 1

/ Einde Intermezzo

						RateCalculationAlternative firstAlt = alternativeList.iterator().next();
[RC_RELEASE_DATE = 2014-05-09 16:00:00] [RC_ADDITIONAL_STOP = 50] [RC_START_BEFORE = 2014-05-16 17:00:00] [RC_START_AFTER = 2014-05-14 16:00:00] [RC_FREIGHT = 167.0825420064579] [RC_FUEL = 21.720730460839527000] [RC_SERVICE = STANDARD] 

						if (getRateAgreementVO().getRateType().equals(RateAgreementVO.TYPE_SERVICE_ORDER_COST)) {
							updateServiceOrderCostPartList(firstAlt);
/s
RateCalculationVO.updateServiceOrderCostPartList(RateCalculationAlternative) line: 1545	

		if (anAlternative != null) {
			// Calculate the new values for a price type according to the rate calculation
			newValues = getCalculatedPriceTypeValues(anAlternative.entrySet());
{FREIGHT-EUR=167.08 (ADD), ADDITIONAL_DELIVERY-EUR=50.00 (ADD), FUEL-EUR=21.72 (ADD)}

			// Iterate through the cost components to update the SHO and to calculate the new values of the price types
			orderChanged |= correctServiceOrder(anAlternative.entrySet(), serviceOrder);






























									if (mySub != null) {
										mySubResults.add(mySub);
									}
								}
/ mySubResults=
[[Unit: null; Value: DE], 
[Unit: theSystemId: 26631725	Symbol :LDM	Description :LDM	UnitType :NORMAL	IsDeleted :0	; Value: 1.60]]
								myResult = myAbstractRateFunction.convertAndCalculate(myInputParameterList, aRateCalculation);
/s
public class RateTableFunction extends AbstractRateFunction {
	public RateResult calculate(Collection<InputParameterVO> anInputParameterList, RateCalculationVO aRateCalculation) throws RateException {

		if (myCache.hasCachedResult(myRateTable, myInputKey)) {
			String myCachedValue = myCache.getCachedResult(myRateTable, myInputKey);
				myRateResult = new RateResult(myCachedValue);
[Unit: null; Value: 3]

myCache
	rateTableCache
/=
{
26631955={
	20095|2100.0000000|DE|=145.51540488664824, 
	20095|2800.0000000|DE|=167.0825420064579
}, 
26632349={
	1.0|=50
}, 
26631974={
	1.20|DE|=3, 
	1.60|DE|=3
}
}

/ Intermezzo

mpo=> select*from rate_table where name='LT_CARRIER'\g
rate_agreement_systemid+++system_id+++name+++description+++unit_systemid+++rate_table_xml+++min_charge+++max_charge+++rounding+++excel_formatted+++default_value+++rate_table_content+++is_user_editable+++is_shared+++linked_rate_table_systemid+++linked_multiplication+++linked_addition+++last_update
26631869+++26631974+++LT_CARRIER++++++4348446++++++++++++0+++0++++++	BE|NL	DE
3	3	3
6	3	3
9	2	2
13.6	1	1
15	1	1+++0+++0++++++++++++2014-04-22 17:01:10.218
(1 row)

	1.60|DE|=3
/ TODO


/ Einde Intermezzo

			myRateResult.setUnitVO(myRateTable.getUnit());
theSystemId: 4348446	Symbol :WORKDAY	Description :Working day	UnitType :NORMAL	IsDeleted :0	

/t
public class RateParameterVO extends ValueObject implements Comparable<RateParameterVO> {
	public RateResult calculate(RateCalculationVO aRateCalculation) throws RateException {

/ volgende	,
							} else {
								for (InputParameterVO myInputParameter : myInputParameterList) {
									RateResult mySub = myInputParameter.calculate(aRateCalculation);
theSystemId: 26631989Name :RP_START_DATE_AFTER



















RateCalculationVO.runFor(RateAgreementVO, RateCalculationAlternative) line: 1302	

				for (CostComponentSpecificationVO myCostComp : myCostComponentSpecificationList) {
					for (RateResult myResult : myCostComp.run(this)) { // (*)
...
						anAlternative.addResult(myCostComp, myResult);
[RC_FREIGHT = 123.95692579057196] [RC_SERVICE = STANDARD] [RC_ADDITIONAL_STOP = 50] [RC_RELEASE_DATE = 2014-05-12 16:00:00] [RC_START_BEFORE = 2014-05-15 17:00:00] 

/ (*) s
RateParameterVO.calculate(RateCalculationVO) line: 134	
								myResult = myAbstractRateFunction.convertAndCalculate(myInputParameterList, aRateCalculation);
/ D
						aRateCalculation.cacheResult(this, myResult);
aRateCalculation

	alternativeList
[[RC_FREIGHT = 123.95692579057196] [RC_SERVICE = STANDARD] [RC_ADDITIONAL_STOP = 50] [RC_RELEASE_DATE = 2014-05-12 16:00:00] [RC_START_BEFORE = 2014-05-15 17:00:00] ]

	theCachedResultMap	HashMap<K,V>  (id=15483)	
{RT_ADDITIONAL_ADDRESS_OUTPUT=[Unit: theSystemId: 1000072	Symbol :EUR	Description :Euro	UnitType :CURRENCY	IsDeleted :0	; Value: 50]
 RP_FREIGHT=[Unit: theSystemId: 1000072	Symbol :EUR	Description :Euro	UnitType :CURRENCY	IsDeleted :0	; Value: 123.95692579057196]
 RT_NL-SPEC_OUTPUT=null
 RT_NL-BE_OUTPUT=null
 RT_NL_OUTPUT=null
 RP_START_DATE_AFTER=[Unit: theSystemId: 1000536	Symbol :DATE	Description :Datum	UnitType :DATE	IsDeleted :0	; Value: 2014-05-15 16:00:00]
 SERVICE=[Unit: null; Value: STANDARD]
 LT_CARRIER_OUTPUT=[Unit: theSystemId: 4348446	Symbol :WORKDAY	Description :Working day	UnitType :NORMAL	IsDeleted :0	; Value: 3]
 RT_NL_DE_OUTPUT=[Unit: theSystemId: 1000072	Symbol :EUR	Description :Euro	UnitType :CURRENCY	IsDeleted :0	; Value: 123.95692579057196]
 RP_LDM_WEIGHT=[Unit: theSystemId: 1000532	Symbol :KG	Description :Kilogram	UnitType :NORMAL	IsDeleted :0	; Value: 1400.0000000]}

/ Tot nu toe	,
/ We zien dat de RP_START_DATE_AFTER is calc	,

/ 13	,

/ Uiteindelijk	,
RateCalculationVO.runFor(RateAgreementVO, RateCalculationAlternative) line: 1357	

this
	activeAlternative
[RC_FREIGHT = 123.95692579057196] [RC_SERVICE = STANDARD] [RC_ADDITIONAL_STOP = 50] [RC_RELEASE_DATE = 2014-05-12 16:00:00] [RC_START_BEFORE = 2014-05-15 17:00:00] [RC_FUEL = 16.1144003527743548000] [RC_START_AFTER = 2014-05-15 16:00:00] 

	theCachedResultMap
{RT_ADDITIONAL_ADDRESS_OUTPUT=[Unit: theSystemId: 1000072	Symbol :EUR	Description :Euro	UnitType :CURRENCY	IsDeleted :0	; Value: 50]
 RP_FREIGHT=[Unit: theSystemId: 1000072	Symbol :EUR	Description :Euro	UnitType :CURRENCY	IsDeleted :0	; Value: 123.95692579057196]
 RT_NL-SPEC_OUTPUT=null
 RT_NL-BE_OUTPUT=null
 RT_NL_OUTPUT=null
 RP_START_DATE_AFTER=[Unit: theSystemId: 1000536	Symbol :DATE	Description :Datum	UnitType :DATE	IsDeleted :0	; Value: 2014-05-15 16:00:00]
 SERVICE=[Unit: null; Value: STANDARD]
 RP_START_DATE_BEFORE=[Unit: theSystemId: 1000536	Symbol :DATE	Description :Datum	UnitType :DATE	IsDeleted :0	; Value: 2014-05-15 17:00:00]
 RP_RELEASE_DATE=[Unit: theSystemId: 1000536	Symbol :DATE	Description :Datum	UnitType :DATE	IsDeleted :0	; Value: 2014-05-12 16:00:00]
 LT_CARRIER_OUTPUT=[Unit: theSystemId: 4348446	Symbol :WORKDAY	Description :Working day	UnitType :NORMAL	IsDeleted :0	; Value: 3]
 RT_NL_DE_OUTPUT=[Unit: theSystemId: 1000072	Symbol :EUR	Description :Euro	UnitType :CURRENCY	IsDeleted :0	; Value: 123.95692579057196]
 RP_LDM_WEIGHT=[Unit: theSystemId: 1000532	Symbol :KG	Description :Kilogram	UnitType :NORMAL	IsDeleted :0	; Value: 1400.0000000]
 RP_FUEL=[Unit: theSystemId: 1000072	Symbol :EUR	Description :Euro	UnitType :CURRENCY	IsDeleted :0	; Value: 16.1144003527743548000]}

/ In 
this
	activeAlternative
/ zie we inderdaad de RC's	,
/ WH worden de RC's uit de activeAlternative berekend uit de RP, RT's uit de theCacheResultMap 
/ TODO

/t
RateCalculationVO.runFor(RateAgreementVO) line: 764	
				runFor(aRateAgreementVO, myAlterNative);
/ D
						RateCalculationAlternative firstAlt = alternativeList.iterator().next();
							updateServiceOrderCostPartList(firstAlt);
/s
	protected void updateServiceOrderCostPartList(RateCalculationAlternative anAlternative) throws Exception {

		Map<RateComponentKey, CostTypeState> costTypeState = CostTypeUtils.createCostTypeState(serviceOrder);
/ alvast antwoord	,
{FREIGHT-EUR=com.mpobjects.oms.util.serviceordercost.CostTypeState@5828b2fa
 ADDITIONAL_DELIVERY-EUR=com.mpobjects.oms.util.serviceordercost.CostTypeState@57fe684d
 FUEL-EUR=com.mpobjects.oms.util.serviceordercost.CostTypeState@f2c6eeb}
///////////
/ Oude, want komen rechtstreeks uit de seo	,
/s
	public static final Map<RateComponentKey, CostTypeState> createCostTypeState(ServiceOrderVO aServiceOrder) {
			for (ServiceOrderCostVO part : aServiceOrder.getEstimatedCostList()) {
/ uit de seo inderdaad	,
[26632543        11.91
 26632541        91.63
 26632542        50.00]
////////
/ Dit zijn de oude	,

/ we kunnen ze zo zien	,

costTypeState	HashMap<K,V>  (id=20869)	
	table	HashMap$Entry<K,V>[16]  (id=20909)	
		[6]	HashMap$Entry<K,V>  (id=20916)	
			value	CostTypeState  (id=20892)	
				costParts	ArrayList<E>  (id=20932)	
[26632541        91.63]
				[0]	ServiceOrderCostVO  (id=20885)	
		[7]	HashMap$Entry<K,V>  (id=20917)	
			value	CostTypeState  (id=20896)	
				costParts	ArrayList<E>  (id=20899)	
[26632542        50.00]
		[12]	HashMap$Entry<K,V>  (id=20929)	
			value	CostTypeState  (id=20879)	
				costParts	ArrayList<E>  (id=21007)	
[26632543        11.91]






/ Deze zien we ook op de page met 
Service Order Costs
Calculation log
/ De costs zijn WH de RC's die geld zijn	,

/ Intermezzo

/ ESTIMATED = berekend	, actual is van de carrier	,

mpo=> select*from service_order_cost where  service_order_systemid =26632537\g
 system_id | service_order_systemid | cost_type_systemid |       reason        | correction_type_systemid | entry_type
 | sequence_nr |  amount   |  status   | currency_systemid | invoice_detail_systemid | rate_agreement_systemid |      
 source_ref       
-----------+------------------------+--------------------+---------------------+--------------------------+-----------
-+-------------+-----------+-----------+-------------------+-------------------------+-------------------------+------
------------------
  26632542 |               26632537 |           26631763 | Calc.: 50.00 (ADD)  |                 38500001 | AUTOMATIC 
 |           0 |  50.00000 | ESTIMATED |              7001 |                         |                         | RateA
greement:26631869
  26632541 |               26632537 |           26600544 | Calc.: 91.63 (ADD)  |                 38500001 | AUTOMATIC 
 |           0 |  91.63000 | ESTIMATED |              7001 |                         |                         | RateA
greement:26631869
  26632543 |               26632537 |           26631760 | Calc.: 11.91 (ADD)  |                 38500001 | AUTOMATIC 
 |           0 |  11.91000 | ESTIMATED |              7001 |                         |                         | RateA
greement:26631869
(6 rows)

mpo=> select*from rate_component_type where system_id=26631763\g
 system_id |        code         |         description         | is_deleted | reason_mandatory | sequence_nr | rct_group 
-----------+---------------------+-----------------------------+------------+------------------+-------------+-----------
  26631763 | ADDITIONAL_DELIVERY | Additional Delivery Address |          0 |                0 |           5 | COST
(1 row)
mpo=> select*from rate_component_type where system_id=  26631760\g
 system_id | code | description | is_deleted | reason_mandatory | sequence_nr | rct_group 
-----------+------+-------------+------------+------------------+-------------+-----------
  26631760 | FUEL | Fuel costs  |          0 |                0 |           2 | COST
(1 row)
mpo=> select*from rate_component_type where system_id=  26600544 \g
 system_id |  code   | description | is_deleted | reason_mandatory | sequence_nr | rct_group 
-----------+---------+-------------+------------+------------------+-------------+-----------
  26600544 | FREIGHT | Freight     |          0 |                0 |           1 | COST
(1 row)

/ Einde Intermezzo

/t	
RateCalculationVO.
	protected void updateServiceOrderCostPartList(RateCalculationAlternative anAlternative) throws Exception {

		Map<RateComponentKey, CostTypeState> costTypeState = CostTypeUtils.createCostTypeState(serviceOrder);
/ D
{FREIGHT-EUR=com.mpobjects.oms.util.serviceordercost.CostTypeState@5828b2fa
 ADDITIONAL_DELIVERY-EUR=com.mpobjects.oms.util.serviceordercost.CostTypeState@57fe684d
 FUEL-EUR=com.mpobjects.oms.util.serviceordercost.CostTypeState@f2c6eeb}
/////
/ de oude	, komen uit de seo	
/ OUDE UIT DE SEO

		if (anAlternative != null) {
			// Calculate the new values for a price type according to the rate calculation
			newValues = getCalculatedPriceTypeValues(anAlternative.entrySet());
/ anAlternative=
[RC_FREIGHT = 123.95692579057196] [RC_SERVICE = STANDARD] [RC_ADDITIONAL_STOP = 50] [RC_RELEASE_DATE = 2014-05-12 16:00:00] [RC_START_BEFORE = 2014-05-15 17:00:00] [RC_FUEL = 16.1144003527743548000] [RC_START_AFTER = 2014-05-15 16:00:00] 
/ anAlternative.entrySet=
[CostComponentSpecification:26631888/RC_FREIGHT/Freight costs=[[Unit: theSystemId: 1000072	Symbol :EUR	Description :Euro	UnitType :CURRENCY	IsDeleted :0	; Value: 123.95692579057196]]
 CostComponentSpecification:26632004/RC_SERVICE/Service=[[Unit: null; Value: STANDARD]]
 CostComponentSpecification:26632354/RC_ADDITIONAL_STOP/Additional stop=[[Unit: theSystemId: 1000072	Symbol :EUR	Description :Euro	UnitType :CURRENCY	IsDeleted :0	; Value: 50]]
 CostComponentSpecification:26631994/RC_RELEASE_DATE/Release Date=[[Unit: theSystemId: 1000536	Symbol :DATE	Description :Datum	UnitType :DATE	IsDeleted :0	; Value: 2014-05-12 16:00:00]]
 CostComponentSpecification:26631996/RC_START_BEFORE/Planned start before=[[Unit: theSystemId: 1000536	Symbol :DATE	Description :Datum	UnitType :DATE	IsDeleted :0	; Value: 2014-05-15 17:00:00]]
 CostComponentSpecification:26631920/RC_FUEL/Fuel costs=[[Unit: theSystemId: 1000072	Symbol :EUR	Description :Euro	UnitType :CURRENCY	IsDeleted :0	; Value: 16.1144003527743548000]]
 CostComponentSpecification:26631995/RC_START_AFTER/Planned start After=[[Unit: theSystemId: 1000536	Symbol :DATE	Description :Datum	UnitType :DATE	IsDeleted :0	; Value: 2014-05-15 16:00:00]]]

/s
	protected Map<RateComponentKey, CostValue> getCalculatedPriceTypeValues(Collection<Entry<CostComponentSpecificationVO, List<RateResult>>> aEntries) {

/aEnties
[CostComponentSpecification:26631888/RC_FREIGHT/Freight costs=[[Unit: theSystemId: 1000072	Symbol :EUR	Description :Euro	UnitType :CURRENCY	IsDeleted :0	; Value: 123.95692579057196]]
 CostComponentSpecification:26632004/RC_SERVICE/Service=[[Unit: null; Value: STANDARD]]
 CostComponentSpecification:26632354/RC_ADDITIONAL_STOP/Additional stop=[[Unit: theSystemId: 1000072	Symbol :EUR	Description :Euro	UnitType :CURRENCY	IsDeleted :0	; Value: 50]]
 CostComponentSpecification:26631994/RC_RELEASE_DATE/Release Date=[[Unit: theSystemId: 1000536	Symbol :DATE	Description :Datum	UnitType :DATE	IsDeleted :0	; Value: 2014-05-12 16:00:00]]
 CostComponentSpecification:26631996/RC_START_BEFORE/Planned start before=[[Unit: theSystemId: 1000536	Symbol :DATE	Description :Datum	UnitType :DATE	IsDeleted :0	; Value: 2014-05-15 17:00:00]]
 CostComponentSpecification:26631920/RC_FUEL/Fuel costs=[[Unit: theSystemId: 1000072	Symbol :EUR	Description :Euro	UnitType :CURRENCY	IsDeleted :0	; Value: 16.1144003527743548000]]
 CostComponentSpecification:26631995/RC_START_AFTER/Planned start After=[[Unit: theSystemId: 1000536	Symbol :DATE	Description :Datum	UnitType :DATE	IsDeleted :0	; Value: 2014-05-15 16:00:00]]]

/ bijv	,
mpo=> select*from cost_component_specification where system_id=26631994\g
 system_id |      name       | description  | parameter_systemid | correction_type_systemid | order_rate_part_systemid | s
equence_nr | rate_agreement_systemid | rate_plus_mode 
-----------+-----------------+--------------+--------------------+--------------------------+--------------------------+--
-----------+-------------------------+----------------
  26631994 | RC_RELEASE_DATE | Release Date |           26631993 |                 38500007 |                 26631782 |  
         0 |                26631869 | NONE
(1 row)


		for (Entry<CostComponentSpecificationVO, List<RateResult>> entry : aEntries) {

			CostComponentSpecificationVO component = entry.getKey();
CostComponentSpecification:26631888/RC_FREIGHT/Freight costs

				RateComponentType priceType = component.getRateComponentType();
theSystemId: 26600544Code :FREIGHT

/ Intermezzo

mpo=> select*from cost_component_specification where system_id=26631888\g
 system_id |    name    |  description  | parameter_systemid | correction_type_systemid | order_rate_part_systemid | seque
nce_nr | rate_agreement_systemid | rate_plus_mode 
-----------+------------+---------------+--------------------+--------------------------+--------------------------+------
-------+-------------------------+----------------
  26631888 | RC_FREIGHT | Freight costs |           26631887 |                 38500001 |                 26600544 |      
     0 |                26631869 | NONE
(1 row)

mpo=> select*from correction_type where system_id=38500001\g
 system_id | name |                 description                 
-----------+------+---------------------------------------------
  38500001 | ADD  | Adds this rate component to the totall cost
(1 row)

mpo=> select*from  rate_component_type where system_id=26600544\g
 system_id |  code   | description | is_deleted | reason_mandatory | sequence_nr | rct_group 
-----------+---------+-------------+------------+------------------+-------------+-----------
  26600544 | FREIGHT | Freight     |          0 |                0 |           1 | COST
(1 row)


/ Einde Intermezzo

			for (RateResult rateResult : rateResultList) {

				CorrectionType correctionType = component.getCorrectionType();
theSystemId: 38500001	Name :ADD	Description :Adds this rate component to the totall cost

				RateComponentType priceType = component.getRateComponentType();
theSystemId: 26600544Code :FREIGHT
Description :Freight
ReasonMandatory :false
IsDeleted :false
SequenceNr :1

				BigDecimal price = RateResultUtils.getBigDecimalValue(rateResult);
123.95692579057196

				CurrencyVO myCurrencyVO = rateResult.getCurrency();
SystemId:7001	isDeleted:false	Code:EUR	Name:Euro

				RateComponentKey myKey = new RateComponentKey(priceType, myCurrencyVO);
FREIGHT-EUR

				CostValue currentValue = newValues.get(myKey);
				if (currentValue == null) {
					currentValue = new CostValue();
					newValues.put(myKey, currentValue);
{FREIGHT-EUR=, ADDITIONAL_DELIVERY-EUR=50.00 (ADD)}

					price = price.setScale(2, RoundingMode.HALF_UP);
123.96
					currentValue.append(price, correctionType.getName(), rateResult.getCostPartList());
123.96 (ADD)

/ Nu is	newValues=
{FREIGHT-EUR=123.96 (ADD)}

/volgende,	
		for (Entry<CostComponentSpecificationVO, List<RateResult>> entry : aEntries) {
CostComponentSpecification:26632004/RC_SERVICE/Service=[[Unit: null; Value: STANDARD]]
			CostComponentSpecificationVO component = entry.getKey();
CostComponentSpecification:26632004/RC_SERVICE/Service
			List<RateResult> rateResultList = entry.getValue();
[[Unit: null; Value: STANDARD]]

			for (RateResult rateResult : rateResultList) {
[Unit: null; Value: STANDARD]
				CorrectionType correctionType = component.getCorrectionType();
theSystemId: 38500004	Name :PROVIDER_SERVICE_LEVEL	Description :The service level for the service provider
				if (!correctionType.isCostPart()) {
					// not a cost part, skip it
					continue;

/ volgende	,
		for (Entry<CostComponentSpecificationVO, List<RateResult>> entry : aEntries) {
CostComponentSpecification:26632354/RC_ADDITIONAL_STOP/Additional stop=[[Unit: theSystemId: 1000072	Symbol :EUR	Description :Euro	UnitType :CURRENCY	IsDeleted :0	; Value: 50]]

/ Intermezzo

$ vi CostComponentSpecification.standard.hbm.xml

		<many-to-one name="rateAgreement"
			class="com.mpobjects.oms.ratecalc.model.rateagreement.vo.RateAgreementVO"
			column="RATE_AGREEMENT_SYSTEMID"/>
		<many-to-one name="correctionType" 
			class="com.mpobjects.oms.model.correctiontype.vo.CorrectionTypeVO"
			column="CORRECTION_TYPE_SYSTEMID" />
		<many-to-one name="rateParameter"
			class="com.mpobjects.oms.ratecalc.model.rateparameter.vo.RateParameterVO"
			column="PARAMETER_SYSTEMID" not-null="false" />
		<many-to-one name="rateComponentType"
			class="com.mpobjects.oms.model.ratecomponenttype.RateComponentType"
			column="ORDER_RATE_PART_SYSTEMID" not-null="false" />
		</class>

mpo=> select*from cost_component_specification where system_id=26632354\g
 system_id |        name        |   description   | parameter_systemid | correction_type_systemid | order_rate_part_system
id | sequence_nr | rate_agreement_systemid | rate_plus_mode 
-----------+--------------------+-----------------+--------------------+--------------------------+-----------------------
---+-------------+-------------------------+----------------
  26632354 | RC_ADDITIONAL_STOP | Additional stop |           26632353 |                 38500001 |                 26631763 |           0 |                26631869 | NONE
(1 row)

mpo=> select*from correction_type where system_id=38500001\g
 system_id | name |                 description                 
-----------+------+---------------------------------------------
  38500001 | ADD  | Adds this rate component to the totall cost
(1 row)

mpo=> select*from  rate_component_type where system_id=26631763\g
 system_id |        code         |         description         | is_deleted | reason_mandatory | sequence_nr | rct_group 
-----------+---------------------+-----------------------------+------------+------------------+-------------+-----------
  26631763 | ADDITIONAL_DELIVERY | Additional Delivery Address |          0 |                0 |           5 | COST
(1 row)


/ Einde Intermezzo


			CostComponentSpecificationVO component = entry.getKey();
CostComponentSpecification:26632354/RC_ADDITIONAL_STOP/Additional stop

/ component is inderdaad de key	, de cost_component_specification	,

			List<RateResult> rateResultList = entry.getValue();
[[Unit: theSystemId: 1000072	Symbol :EUR	Description :Euro	UnitType :CURRENCY	IsDeleted :0	; Value: 50]]
			for (RateResult rateResult : rateResultList) {

				CorrectionType correctionType = component.getCorrectionType();
theSystemId: 38500001	Name :ADD	Description :Adds this rate component to the totall cost

				RateComponentType priceType = component.getRateComponentType();
theSystemId: 26631763Code :ADDITIONAL_DELIVERY
Description :Additional Delivery Address
ReasonMandatory :false
IsDeleted :false
SequenceNr :5


				BigDecimal price = RateResultUtils.getBigDecimalValue(rateResult);
50
				CurrencyVO myCurrencyVO = rateResult.getCurrency();
SystemId:7001	isDeleted:false	Code:EUR	Name:Euro
				RateComponentKey myKey = new RateComponentKey(priceType, myCurrencyVO);
ADDITIONAL_DELIVERY-EUR
				CostValue currentValue = newValues.get(myKey);
				if (currentValue == null) {
					currentValue = new CostValue();
					newValues.put(myKey, currentValue);
				}
/ newValues=
{ADDITIONAL_DELIVERY-EUR=}

					price = price.setScale(2, RoundingMode.HALF_UP);
50.00
					currentValue.append(price, correctionType.getName(), rateResult.getCostPartList());
50.00 (ADD)

/ Nu is	newValues=
{FREIGHT-EUR=123.96 (ADD), ADDITIONAL_DELIVERY-EUR=50.00 (ADD)}

/ Volgende	,

		for (Entry<CostComponentSpecificationVO, List<RateResult>> entry : aEntries) {

			CostComponentSpecificationVO component = entry.getKey();
CostComponentSpecification:26631996/RC_START_BEFORE/Planned start before

			List<RateResult> rateResultList = entry.getValue();
[[Unit: theSystemId: 1000536	Symbol :DATE	Description :Datum	UnitType :DATE	IsDeleted :0	; Value: 2014-05-16 17:00:00]]

				CorrectionType correctionType = component.getCorrectionType();
theSystemId: 554284	Name :PLANNED_START_BEFORE	Description :Set the planned start before.

			if (!correctionType.isCostPart()) {
/ JA	,
					continue;
				}


/ Volgende,	

		for (Entry<CostComponentSpecificationVO, List<RateResult>> entry : aEntries) {
CostComponentSpecification:26631920/RC_FUEL/Fuel costs=[[Unit: theSystemId: 1000072	Symbol :EUR	Description :Euro	UnitType :CURRENCY	IsDeleted :0	; Value: 16.1144003527743548000]]

			CostComponentSpecificationVO component = entry.getKey();
CostComponentSpecification:26631920/RC_FUEL/Fuel costs

			List<RateResult> rateResultList = entry.getValue();
[[Unit: theSystemId: 1000072	Symbol :EUR	Description :Euro	UnitType :CURRENCY	IsDeleted :0	; Value: 16.1144003527743548000]]

		for (RateResult rateResult : rateResultList) {
[Unit: theSystemId: 1000072	Symbol :EUR	Description :Euro	UnitType :CURRENCY	IsDeleted :0	; Value: 16.1144003527743548000]
				CorrectionType correctionType = component.getCorrectionType();
theSystemId: 38500001	Name :ADD	Description :Adds this rate component to the totall cost

				RateComponentType priceType = component.getRateComponentType();
theSystemId: 26631760Code :FUEL
Description :Fuel costs
ReasonMandatory :false
IsDeleted :false
SequenceNr :2

				BigDecimal price = RateResultUtils.getBigDecimalValue(rateResult);
16.1144003527743548000

				CurrencyVO myCurrencyVO = rateResult.getCurrency();
SystemId:7001	isDeleted:false	Code:EUR	Name:Euro

				RateComponentKey myKey = new RateComponentKey(priceType, myCurrencyVO);
FUEL-EUR
				CostValue currentValue = newValues.get(myKey);
				if (currentValue == null) {
					currentValue = new CostValue();
					newValues.put(myKey, currentValue);
				}
/ newValues=
{FREIGHT-EUR=123.96 (ADD), ADDITIONAL_DELIVERY-EUR=50.00 (ADD), FUEL-EUR=}

					price = price.setScale(2, RoundingMode.HALF_UP);
16.11
					currentValue.append(price, correctionType.getName(), rateResult.getCostPartList());
16.11 (ADD)

/ Nu is	newValues=
{FREIGHT-EUR=123.96 (ADD), ADDITIONAL_DELIVERY-EUR=50.00 (ADD), FUEL-EUR=16.11 (ADD)}

		return newValues;


/t
	protected void updateServiceOrderCostPartList(RateCalculationAlternative anAlternative) throws Exception {
			newValues = getCalculatedPriceTypeValues(anAlternative.entrySet());
/ D
{FREIGHT-EUR=123.96 (ADD), ADDITIONAL_DELIVERY-EUR=50.00 (ADD), FUEL-EUR=16.11 (ADD)}

			// Iterate through the cost components to update the SHO and to calculate the new values of the price types
/ WH NIET	,
//////////
/ updates RC fields in de SO , niet de SHO	, en ook de NIET geld RC fields, dus NIET freight, fuel, additional address output	,
/ TODO ERICJ

orderChanged=false
			orderChanged |= correctServiceOrder(anAlternative.entrySet(), serviceOrder);
/s
	protected boolean correctServiceOrder(Collection<Entry<CostComponentSpecificationVO, List<RateResult>>> aEntries, ServiceOrderVO myServiceOrder) {

/ update de seo met NIET price fields	, zoals status, dates	,


/ Intermezzo

/ Configuration, Finance, Rate cal, Rate agreements

Rate Agreement

/ edit Oegema

/ we zien weer , maar nu met details	,

Rate Agreement

name: OEGEMA

/ click tab rate components

Name	Description
	RC_ADDITIONAL_STOP	Additional stop
	RC_START_BEFORE	Planned start before
	RC_FUEL	Fuel costs
	RC_FREIGHT	Freight costs
	RC_RELEASE_DATE	Release Date
	RC_START_AFTER	Planned start After
	RC_SERVICE	Service

/ edit RC_START_AFTER

/ we komen op	,

Cost Component Specification

Name: rc_start_after
parameter: rp_start_date_after
correction type: planned_start_after

/ in de db	,

mpo=> select*from cost_component_specification\g
 system_id |         name         |      description      | parameter_systemid | correction_type_systemid | order_rate_p
art_systemid | sequence_nr | rate_agreement_systemid | rate_plus_mode 
-----------+----------------------+-----------------------+--------------------+--------------------------+-------------
-------------+-------------+-------------------------+----------------
  26631995 | RC_START_AFTER       | Planned start After   |           26631989 |                   554283 |             
    26631782 |           0 |                26631869 | NONE



mpo=> select*from rate_parameter where system_id=26631989\g
 system_id |        name         | description | outputfrom_function_systemid | rate_agreement_systemid | is_persistent | 
sequence_nr | parameter_type_systemid | is_user_editable 
-----------+---------------------+-------------+------------------------------+-------------------------+---------------+-
------------+-------------------------+------------------
  26631989 | RP_START_DATE_AFTER |             |                     26631986 |                26631869 |             0 | 
          0 |                         |                0
(1 row)

mpo=> select*from correction_type where system_id=554283\g
 system_id |        name         |         description          
-----------+---------------------+------------------------------
    554283 | PLANNED_START_AFTER | Set the planned start after.
(1 row)

///////////////////////////////////////////////
/ In correction_type staat dus de field in de seo die wordt update (correct) als recalc. rate execs	. 


/ Einde Intermezzo

/ Intermezzo

Parameter RP_START_DATE_AFTER
Correction type: PLANNED_START_AFTER
/ Dus op seo form zien we de Pln. start date = pln. start after is corrected met de req. end after uit de seo, als we save en de rate calc execs (als we de ldm edit )	, 
/ Misnomer: Correction type moet Correction field heten	,

/ seo, 'Edit cost', we zien dat RP_START_DATE_AFTER afh is van REQ_END_AFTER	,  
RC_START_AFTER : RP_START_DATE_AFTER ( STARTDATE ) = 2014-05-14 16:00:00 DATE
 REQ_END_AFTER ( ) = 2014-05-15 16:00:00 DATE
 FreeValue ( ) = 1.00000

/ Dus als we Save click	, en we hebben ldm edit, dan zien we dat onze edit van Pln. start date weer wordt reset tot wat hij was, nl afkomstig van req end date uit de sho	,  want de rate calc calls correct seo	,
/ als we de Pln. start date edit, en we edit de ldm niet, en click Save, dan wordt de nieuwe Pln. start date saved	, want er wordt geen rate calc. gedaan en dus ook geen ccrrect seo	,

/ we zien op seo form ook Pln. end date = pln. end after	, maar deze is niet config op 
/ Configuration, Finance, Rate cal, Rate agreements
Rate components
/ Er is dus geen RC_END_AFTER	,
/ Dus als we deze edit	, dan blijft zo	, wordt niet correct	,
/ Heeft deze effect op con, sa of sho?
/ TODO

/ we zien dat uit de sho, de req end efter/before -> seo's pln. start  after/before	, dus afkomstig van sho's end dates	, 
/ dus wat uit de sho zou de seo's end date moeten bepalen?
/ TODO

/ we zien bijv	,

	for (Entry<CostComponentSpecificationVO, List<RateResult>> entry : aEntries) {
			CostComponentSpecificationVO component = entry.getKey();
			CorrectionType myType = component.getCorrectionType();
component	CostComponentSpecificationVO  (id=20836)	
	correctionType	CorrectionTypeVO_$$_javassist_112  (id=21411)	
		handler	JavassistLazyInitializer  (id=21418)	
			target	CorrectionTypeVO  (id=21434)	
				systemId	554283	
				theDescription	"Set the planned start after." (id=21437)	
				theName	"PLANNED_START_AFTER" (id=21440)	



/ Einde Intermezzo

/ Intermezzo

/ !

/ we moeten de recalc niet click als we het seo form hebben edit	,
/ als we dat wel doen, dan msg: stay/leave page,
/ TODO

/ als we ldm hebben edit, is click recalc rate= click save	,

/ recalc=WH recalc de seo, uit de sho: haal alles uit de sho	, 
/ recalc rate=WH recalc de costs and prices ogv de seo, 
/ edit ldm
/ click recalc. rate	, we zien de nieuwe ldm	,
/ click recalc.	, we zien de oude ldm	,

/ op seo	,
/ edit pln. start  date, ldm
/ click recalc rate, we zien de ldm saved, en de pln. start date corr op oude	,
/ click recalc, we zien de oude ldm ( de ldm uit de sho) weer	,

/ op seo	,
/ edit pln. start  date, en NIET ldm
/ click save, we zien de nieuwe pln. start date 
/ click recalc. , er gebeurt niets	, nog steeds de nieuwe pln. start date	, 

/ Einde Intermezzo

/ Intermezzo

/ Op 

/ Kies een seo	,
Recalculate: recalc de seo, wat we zien op het form, bijv de ldm (komt uit de sho)	,
Recalculate rate: doe de rate calc.: bereken costs en prijzen, click in de seo form op 'Edit cost'	, dan zie je ze	,

/ stel ldm=0.40	, edit naar 0.45	, click Save, click 'Edit costs', we zien dat RC_FREIGHT is veranderd	, 
/ click Back, we komen terug op de seo	, click recalculate , we zien in ldm=0.40 terug, want hij berekent de seo ogv de sho('s)	,
 
/ als we op de seo de ldm veranderen, en we edit de Pln. start date, en Save , dan wordt de rate calc. gedaan	, en bijv de Pln. start date wordt weer  correct met de REQ_END_BEFORE uit de sho	,

/ Einde Intermezzo

/ update de seo met NIET price fields	, zoals status, dates	,

/ aEntries

[CostComponentSpecification:26631994/RC_RELEASE_DATE/Release Date=[[Unit: theSystemId: 1000536	Symbol :DATE	Description :Datum	UnitType :DATE	IsDeleted :0	; Value: 2014-05-09 16:00:00]]
 CostComponentSpecification:26632354/RC_ADDITIONAL_STOP/Additional stop=[[Unit: theSystemId: 1000072	Symbol :EUR	Description :Euro	UnitType :CURRENCY	IsDeleted :0	; Value: 50]]
 CostComponentSpecification:26631996/RC_START_BEFORE/Planned start before=[[Unit: theSystemId: 1000536	Symbol :DATE	Description :Datum	UnitType :DATE	IsDeleted :0	; Value: 2014-05-16 17:00:00]]
 CostComponentSpecification:26631995/RC_START_AFTER/Planned start After=[[Unit: theSystemId: 1000536	Symbol :DATE	Description :Datum	UnitType :DATE	IsDeleted :0	; Value: 2014-05-14 16:00:00]]
 CostComponentSpecification:26631888/RC_FREIGHT/Freight costs=[[Unit: theSystemId: 1000072	Symbol :EUR	Description :Euro	UnitType :CURRENCY	IsDeleted :0	; Value: 167.0825420064579]]
 CostComponentSpecification:26631920/RC_FUEL/Fuel costs=[[Unit: theSystemId: 1000072	Symbol :EUR	Description :Euro	UnitType :CURRENCY	IsDeleted :0	; Value: 21.720730460839527000]]
 CostComponentSpecification:26632004/RC_SERVICE/Service=[[Unit: null; Value: STANDARD]]]:
/ ALLEMAAL,

/ eerste	,

		for (Entry<CostComponentSpecificationVO, List<RateResult>> entry : aEntries) {
CostComponentSpecification:26631888/RC_FREIGHT/Freight costs=[[Unit: theSystemId: 1000072	Symbol :EUR	Description :Euro	UnitType :CURRENCY	IsDeleted :0	; Value: 123.95692579057196]]
			CostComponentSpecificationVO component = entry.getKey();
CostComponentSpecification:26631888/RC_FREIGHT/Freight costs
			List<RateResult> rateResultList = entry.getValue();
[[Unit: theSystemId: 1000072	Symbol :EUR	Description :Euro	UnitType :CURRENCY	IsDeleted :0	; Value: 123.95692579057196]]

			// We are not dealing with costs here so we can assume there is only one entry in the list
			RateResult myResult = rateResultList.get(0);
[Unit: theSystemId: 1000072	Symbol :EUR	Description :Euro	UnitType :CURRENCY	IsDeleted :0	; Value: 123.95692579057196]
			CorrectionType myType = component.getCorrectionType();
theSystemId: 38500001	Name :ADD	Description :Adds this rate component to the totall cost

			if (myType.isCostPart()) {
				// skip cost parts
				continue;
			}

/ volgende	,
		for (Entry<CostComponentSpecificationVO, List<RateResult>> entry : aEntries) {
CostComponentSpecification:26632004/RC_SERVICE/Service=[[Unit: null; Value: STANDARD]]
			CostComponentSpecificationVO component = entry.getKey();
			List<RateResult> rateResultList = entry.getValue();
			RateResult myResult = rateResultList.get(0);
[Unit: null; Value: STANDARD]
			CorrectionType myType = component.getCorrectionType();
theSystemId: 38500004	Name :PROVIDER_SERVICE_LEVEL	Description :The service level for the service provider
			} else if (myType.isServiceLevel()) {
				myServiceOrder.setServiceLevel(myResult.getValue());

			orderUpdated = true;

/ Volgende	,

		for (Entry<CostComponentSpecificationVO, List<RateResult>> entry : aEntries) {
CostComponentSpecification:26632354/RC_ADDITIONAL_STOP/Additional stop=[[Unit: theSystemId: 1000072	Symbol :EUR	Description :Euro	UnitType :CURRENCY	IsDeleted :0	; Value: 50]]


/ Volgende	,
		for (Entry<CostComponentSpecificationVO, List<RateResult>> entry : aEntries) {
CostComponentSpecification:26631994/RC_RELEASE_DATE/Release Date=[[Unit: theSystemId: 1000536	Symbol :DATE	Description :Datum	UnitType :DATE	IsDeleted :0	; Value: 2014-05-12 16:00:00]]

			CostComponentSpecificationVO component = entry.getKey();
CostComponentSpecification:26631994/RC_RELEASE_DATE/Release Date
			List<RateResult> rateResultList = entry.getValue();
[[Unit: theSystemId: 1000536	Symbol :DATE	Description :Datum	UnitType :DATE	IsDeleted :0	; Value: 2014-05-12 16:00:00]]

		RateResult myResult = rateResultList.get(0);
			CorrectionType myType = component.getCorrectionType();
theSystemId: 38500007	Name :PLANNED_RELEASE	Description :The planned release date

			} else if (myType.isPlannedRelease()) {
					myServiceOrder.getDateSetVO().setPlannedReleaseDate(RateResultUtils.getDateValue(myResult));
Mon May 09 16:00:00 CEST 2014
/ myResult=[Unit: theSystemId: 1000536	Symbol :DATE	Description :Datum	UnitType :DATE	IsDeleted :0	; Value: 2014-05-09 16:00:00]

/ volgende	,
		for (Entry<CostComponentSpecificationVO, List<RateResult>> entry : aEntries) {
CostComponentSpecification:26631996/RC_START_BEFORE/Planned start before=[[Unit: theSystemId: 1000536	Symbol :DATE	Description :Datum	UnitType :DATE	IsDeleted :0	; Value: 2014-05-15 17:00:00]]

			CostComponentSpecificationVO component = entry.getKey();
RC_START_BEFORE
			List<RateResult> rateResultList = entry.getValue();
[[Unit: theSystemId: 1000536	Symbol :DATE	Description :Datum	UnitType :DATE	IsDeleted :0	; Value: 2014-05-16 17:00:00]]
			RateResult myResult = rateResultList.get(0);
/ value waarmee de field in seo wordt update	,


			CorrectionType myType = component.getCorrectionType();
theSystemId: 554284	Name :PLANNED_START_BEFORE	Description :Set the planned start before.
/ field in seo dat wordt correct	,

			} else if (myType.isPlannedStartBefore()) {
				} else {
					myServiceOrder.getDateSetVO().setPlannedStartBefore(RateResultUtils.getDateValue(myResult));



/ volgende	,
		for (Entry<CostComponentSpecificationVO, List<RateResult>> entry : aEntries) {
CostComponentSpecification:26631920/RC_FUEL/Fuel costs=[[Unit: theSystemId: 1000072	Symbol :EUR	Description :Euro	UnitType :CURRENCY	IsDeleted :0	; Value: 16.1144003527743548000]]

/ Volgende	,
		for (Entry<CostComponentSpecificationVO, List<RateResult>> entry : aEntries) {
CostComponentSpecification:26631995/RC_START_AFTER/Planned start After=[[Unit: theSystemId: 1000536	Symbol :DATE	Description :Datum	UnitType :DATE	IsDeleted :0	; Value: 2014-05-15 16:00:00]]

			CostComponentSpecificationVO component = entry.getKey();
			List<RateResult> rateResultList = entry.getValue();

			RateResult myResult = rateResultList.get(0);

			CorrectionType myType = component.getCorrectionType();
			} else if (myType.isPlannedStartAfter()) {
				if (myServiceOrder.isManualPlan()) {
				} else {
					myServiceOrder.getDateSetVO().setPlannedStartAfter(RateResultUtils.getDateValue(myResult));

/t
	protected void updateServiceOrderCostPartList(RateCalculationAlternative anAlternative) throws Exception {

			orderChanged |= correctServiceOrder(anAlternative.entrySet(), serviceOrder);
/ D
true
		orderChanged |= updateServiceOrderCostPartList(anAlternative, serviceOrder, costTypeState, newValues, resultingParts);

/s
	protected boolean updateServiceOrderCostPartList(RateCalculationAlternative anAlternative, ServiceOrderVO aServiceOrder, Map<RateComponentKey, CostTypeState> aCostTypeState, Map<RateComponentKey, CostValue> aNewValues, Set<ServiceOrderCostVO> aResultingParts) throws AbstractException {

/ anAlternative=
[RC_RELEASE_DATE = 2014-05-09 16:00:00] [RC_ADDITIONAL_STOP = 50] [RC_START_BEFORE = 2014-05-16 17:00:00] [RC_START_AFTER = 2014-05-14 16:00:00] [RC_FREIGHT = 167.0825420064579] [RC_FUEL = 21.720730460839527000] [RC_SERVICE = STANDARD] 
/ aNewValues=
{FREIGHT-EUR=167.08 (ADD), ADDITIONAL_DELIVERY-EUR=50.00 (ADD), FUEL-EUR=21.72 (ADD)}

/ aCostTypeState=
{FREIGHT-EUR=com.mpobjects.oms.util.serviceordercost.CostTypeState@2808182a
 ADDITIONAL_DELIVERY-EUR=com.mpobjects.oms.util.serviceordercost.CostTypeState@2b6a81ee
 FUEL-EUR=com.mpobjects.oms.util.serviceordercost.CostTypeState@5d784686}
////////////////
/ De oude, uit de seo	,
////////////
/ bijv	, aCostTypeState.get("FREIGHT-EUR")='n CostTypeState
costTypeState	HashMap<K,V>  (id=15438)	
	table	HashMap$Entry<K,V>[16]  (id=15439)	
		[6]	HashMap$Entry<K,V>  (id=15440)	
			value	CostTypeState  (id=15443)	
				costParts	ArrayList<E>  (id=15445)	
[26632541        91.63]
				costValue	CostValue  (id=15446)	
91.63 (ADD)


//////////////////////////////
		for (Entry<RateComponentKey, CostValue> entry : aNewValues.entrySet()) {
FREIGHT-EUR=123.96 (ADD)
			RateComponentType rateType = entry.getKey().getRateComponentType();
theSystemId: 26600544Code :FREIGHT
Description :Freight
ReasonMandatory :false
IsDeleted :false
SequenceNr :1

			CurrencyVO myCurrency = entry.getKey().getCurrency();
SystemId:7001	isDeleted:false	Code:EUR	Name:Euro
			CostValue costValue = entry.getValue();
123.96 (ADD)
			CostTypeState state = aCostTypeState.get(entry.getKey());
state
	costParts	[26632541        91.63]
	costValue	91.63 (ADD)
//////
/ oude	,
/ See hierboven bij OUDE UIT DE SEO, komt rechtstreeks uit de seo	,

			} else {
				BigDecimal oldValue = state.getCostValue().getValue();
/ state is uit de seo
91.63
				BigDecimal newValue = costValue.getValue();
/ costValue is uit aNewValues
123.96
//////////////////////////////////////

				for (ServiceOrderCostVO part : state.getCostParts()) {
state.getCostParts()=[26632541        91.63]
part=26632541        91.63	, een ServiceOrderCostVO	,

/ Intermezzo

/ onze seo is  26632537	,

mpo=> select*from service_order_cost\g
 system_id | service_order_systemid | cost_type_systemid |       reason        | correction_type_systemid | entry_type
 | sequence_nr |  amount   |  status   | currency_systemid | invoice_detail_systemid | rate_agreement_systemid |      
 source_ref       
-----------+------------------------+--------------------+---------------------+--------------------------+-----------
-+-------------+-----------+-----------+-------------------+-------------------------+-------------------------+------
------------------
  26632542 |               26632537 |           26631763 | Calc.: 50.00 (ADD)  |                 38500001 | AUTOMATIC 
 |           0 |  50.00000 | ESTIMATED |              7001 |                         |                         | RateA
greement:26631869
  26632541 |               26632537 |           26600544 | Calc.: 91.63 (ADD)  |                 38500001 | AUTOMATIC 
 |           0 |  91.63000 | ESTIMATED |              7001 |                         |                         | RateA
greement:26631869
  26632543 |               26632537 |           26631760 | Calc.: 11.91 (ADD)  |                 38500001 | AUTOMATIC 
 |           0 |  11.91000 | ESTIMATED |              7001 |                         |                         | RateA
greement:26631869
(6 rows)

/ Einde Intermezzo

				for (ServiceOrderCostVO part : state.getCostParts()) {
/ state is current state = old values	,
					} else if (EntryType.AUTOMATIC.equals(part.getEntryType())) {
						// an automatic entry; simply update this value with the correction.
						updatePart = part;

				if (costPart == null) {
					costPart = updatePart;
26632541        91.63

				CorrectionType correctionType = getCorrectionType(CorrectionType.NAME_ADD);
theSystemId: 38500001	Name :ADD	Description :Adds this rate component to the totall cost

			BigDecimal value = costValue.getValue();
123.96
				String reason = costValue.toString();
"123.96 (ADD)"

/ HIER HIER

				if (costPart != null) {
/ JA
26632541        91.63
					costPart.setAmount(value);
26632541       123.98
////////////////////////////////////
/ we hebben de seo=serviceOrderrVO's  serviceOrderCostList  entry update	,

					costPart.setCurrency(myCurrency);
SystemId:7001	isDeleted:false	Code:EUR	Name:Euro
					costPart.setCorrectionType(correctionType);
theSystemId: 38500001	Name :ADD	Description :Adds this rate component to the totall cost
					costPart.setReason(reason);
Calc.: 167.08 (ADD)
					costPart.setCostType(rateType);
theSystemId: 26600544Code :FREIGHT
Description :Freight
ReasonMandatory :false
IsDeleted :false
SequenceNr :1
					costPart.setServiceOrderVO(aServiceOrder);
N0000265/26632537
					costPart.setSourceRef(monetaryValuePartService.getSourceReference(anAlternative.getRateCalculation().getRateAgreementVO()));
					MpoBeanFactory.getBean(ServiceOrderCostService.class).saveServiceOrderCost(costPart);
					serviceOrderCostService.saveServiceOrderCost(costPart);
/ s
	public void saveServiceOrderCost(ServiceOrderCostVO aServiceOrderCost) throws AbstractException {

/ aServiceOrderCost=
26632541       167.08

po=> select*from service_order_cost where  service_order_systemid=26632537\g
 system_id | service_order_systemid | cost_type_systemid |       reason        | correction_type_systemid | entry_type | s
equence_nr |  amount   |  status   | currency_systemid | invoice_detail_systemid | rate_agreement_systemid |       source_
ref       
-----------+------------------------+--------------------+---------------------+--------------------------+------------+--
-----------+-----------+-----------+-------------------+-------------------------+-------------------------+--------------
----------
  26632542 |               26632537 |           26631763 | Calc.: 50.00 (ADD)  |                 38500001 | AUTOMATIC  |  
         0 |  50.00000 | ESTIMATED |              7001 |                         |                         | RateAgreement
:26631869
  26632541 |               26632537 |           26600544 | Calc.: 145.52 (ADD) |                 38500001 | AUTOMATIC  |  
         0 | 145.52000 | ESTIMATED |              7001 |                         |                         | RateAgreement
:26631869
  26632543 |               26632537 |           26631760 | Calc.: 18.92 (ADD)  |                 38500001 | AUTOMATIC  |  
         0 |  18.92000 | ESTIMATED |              7001 |                         |                         | RateAgreement
:26631869
(3 rows)

/ we zien de OUDE values	,


		aServiceOrderCost = getServiceOrderCostDAO().save(aServiceOrderCost);
/ later, bij commit	,

		recalculateCostsForServiceOrder(aServiceOrderCost);
/s
	public void recalculateCostsForServiceOrder(ServiceOrderCostVO aServiceOrderCost) {
/ aServiceOrderCost=
26632541       167.08
			ServiceOrderVO myServiceOrder = aServiceOrderCost.getServiceOrderVO();
			myServiceOrder.calculateTotalCosts()
/s
ServiceOrderVO.calculateTotalCosts() line: 354	
		Collection<ServiceOrderCostVO> myServiceOrderCostList = getServiceOrderCostList();
[26632543        11.91, 26632541       123.98, 26632542        50.00]
/ we zien : 123.98 NIEUW	, de andere zijn OUD	,
//////////////
/ TODO (Waar is de servideOrderVO.serviceOrderCostList set?)

	for (ServiceOrderCostVO myCost : myServiceOrderCostList) {
			switch (myCost.getStatus()) {
				case ESTIMATED:
					if (myCost.getCorrectionType().isAdd()) {
						myEstimate.add(myCost.getCurrency(), myCost.getAmount());
/ myEstimate=
185.87 EUR
/ total van seo costs waarvan 1 new, 2 oud	,

		} else {
			setTotalCost(myEstimate.getAmount());
185.87 EUR
			setCostCurrencyVO(myEstimate.getCurrency());
SystemId:7001	isDeleted:false	Code:EUR	Name:Euro
			setCostMethod(myEstimate.getMethod());
SINGLE

/t
	public void recalculateCostsForServiceOrder(ServiceOrderCostVO aServiceOrderCost) {
			myServiceOrder.calculateTotalCosts();
/ D
myServiceOrder
	totalCost 236.00
	costCurrencyVO SystemId:7001	isDeleted:false	Code:EUR	Name:Euro
	costMethod SINGLE

			Event<Object> myEvent = EventThreadStack.getInstance().getCurrentEvent();
consignment.updated, context [id/value: 27639885/62]]  old [N0000265.1/26632540] new [N0000265.1/26632540] 

myEvent	ConsignmentEvent  (id=14207)	
	theNewVO	ConsignmentVO  (id=17440)	
		theDateSetVO	DateSetVO  (id=18172)	
			thePlannedStartAfter	Date  (id=15209)	
Mon May 12 16:00:00 CEST 2014

/ Dus in de serviceOrderVO is corrected	, 
thePlannedStartAfter	Date  (id=15326)	
Wed May 14 16:00:00 CEST 2014
/ en in de ConsignmentEvent zien we in theNewVO de door ons edit	,
	theNewVO	ConsignmentVO  (id=17440)	
		theDateSetVO	DateSetVO  (id=18172)	
			thePlannedStartAfter	Date  (id=15209)	
Mon May 12 16:00:00 CEST 2014
/ TODO

/ FIRST EVENT
			if (myEvent != null) {
				getServiceOrderBAO().updateServiceOrder(myServiceOrder, myEvent.getEventContext(), true, false);
/s
RcaServiceOrderCostServiceImpl(ServiceOrderCostServiceImpl).recalculateCostsForServiceOrder(ServiceOrderCostVO) line: 176
	public ServiceOrderVO updateServiceOrder(ServiceOrderVO aServiceOrder, TMSEventContext aContext, boolean propagate, boolean replan) {

/////////////////////////
/ propagate=true

/ de stack	, 
	ServiceOrderServiceImpl.updateServiceOrder(ServiceOrderVO, TMSEventContext, boolean, boolean) line: 1322	
/ CALL 2
/ propagate=true, replan=false
	RcaServiceOrderCostServiceImpl(ServiceOrderCostServiceImpl).recalculateCostsForServiceOrder(ServiceOrderCostVO) line: 176	
	RcaServiceOrderCostServiceImpl(ServiceOrderCostServiceImpl).saveServiceOrderCost(ServiceOrderCostVO) line: 208	
	RateCalculationVO.updateServiceOrderCostPartList(RateCalculationAlternative, ServiceOrderVO, Map<RateComponentKey,CostTypeState>, Map<RateComponentKey,CostValue>, Set<ServiceOrderCostVO>) line: 1808	
		for (Entry<RateComponentKey, CostValue> entry : aNewValues.entrySet()) {
...
	RateCalculationVO.updateServiceOrderCostPartList(RateCalculationAlternative) line: 1551	
	RateCalculationVO.runFor(RateAgreementVO) line: 769	
	CalculationServiceImpl.recalculate(LogisticsOrderVO, String, TMSEventContext) line: 405	
	RateCalcEventListener.recalculate(ServiceOrderVO, String, TMSEventContext) line: 258	
	RateCalcEventListener.recalcServiceOrderCost(Event) line: 164	
	RateCalcEventListener.handleEvent(Event) line: 67	
	ListenerList.fireEvent(Event) line: 80	
	EventHandlerServiceImpl.handleEvent(Event) line: 89	
/ Event=consignment.updated, context [id/value: 27639885/62]]  old [N0000265.1/26632540] new [N0000265.1/26632540] 
	ConsignmentServiceImpl.triggerEventHandler(ConsignmentVO, ConsignmentVO, boolean, TMSEventContext) line: 1050	
	ConsignmentServiceImpl.updateConsignmentAfterServiceOrderChange(ConsignmentVO, ConsignmentVO) line: 1076	
	ConsignmentServiceImpl.handleServiceOrderPlannedDateChange(ServiceOrderVO, ServiceOrderVO) line: 579	
	ServiceOrderServiceImpl.updateServiceOrder(ServiceOrderVO, TMSEventContext, boolean, boolean) line: 1323	
/ CALL 1
/ propagate=true, replan=true
	ServiceOrderSaveAction(ServiceOrderSaveAction).handleSave() line: 178	
	ServiceOrderSaveAction.handleSave() line: 21	
	ServiceOrderSaveAction(AbstractSaveAction).act() line: 69	
	ServiceOrderSaveAction(AbstractAction).act(Redirector, SourceResolver, Map, String, Parameters) line: 170	

/ NB ERICJ

				applyTimeWindowLogic(aServiceOrder);
/ NIETS	,
		if (!isTemplate) {
/ JA
				ServiceOrderVO myOldServiceOrderVO = getOld(aServiceOrder);
serviceOrderVO.theRequestedTotalLoadingMeters
0.40
/ De oude	, klopt	,
				setStatus(aServiceOrder);
/ NIETS

//////////////////////////////////////////////////
/ aServiceOrder is de nieuwe	,
/ we hadden de seo edit, de Pln. start date , maar na de rate calc. wordt de seo correct, en wordt 
	rc_start_after -> pln. start after
/ en 
	rc_start_after = req. end after -1
/ dus we hadden edit 12 May, maar wordt toch weer overwrite met 14 May = 15 May -1WD	,
/ Is pln. start after op seo editable field OK?
/ JA, want je kun ook 'Manual ...'

/ de ldm in de seo is 
serviceOrderVO.theRequestedTotalLoadingMeters
0.80
/ Deze is inderdaad de nieuwe,  
/ de pln. start date is corrected	, is 14 May , ,en niet de door ons edit 12 May	,



				applySyncFlags(aServiceOrder);
/s
			} else if (aServiceOrder.getSyncFromFlag().equals("S")) {
				aServiceOrder.setFromPartyVO(myFirst.getFromPartyVO());
/ Maar verandert niet	,
			} else if (aServiceOrder.getSyncToFlag().equals("S")) {
				aServiceOrder.setToPartyVO(myLast.getToPartyVO());
/ Maar verandert niet	,

/t
				ensureInstructions(aServiceOrder);
/ NIETS

				handleCustomSoCostEntry(aServiceOrder);
/ NIETS


				if (propagate) {
/ JA
					consignmentService.handleServiceOrderActualDateChange(aServiceOrder, myOldServiceOrderVO);
/s
/ NIETS bij ons	,
/ kijkt naar seo's actual start, actual end, close data	,

					consignmentService.handleServiceOrderPlannedDateChange(aServiceOrder, myOldServiceOrderVO);
/ NIETS bij ons	,
/ kijkt naar seo's pln start after, pln. end after, pln. end before,


				getTriggerHandler().handleUpdate(myOldServiceOrderVO, aServiceOrder);
/ NIETS
/ Want	,
/s
ServiceOrderTriggerHandlerImpl.handleUpdate(ServiceOrderVO, ServiceOrderVO) line: 68	
	public void handleUpdate(ServiceOrderVO myOld, ServiceOrderVO myNew) {

		List<ServiceOrderTypeTrigger> myList = MpoBeanFactory.getBean(ServiceOrderTypeTriggerDAO.class).getByServiceOrderType(myNew.getServiceOrderType());

/ seo type=
SystemId:26631826	IsDeleted:false	Type:DELIVERY	Description:DELIVERY

/ Intermezzo

mpo=> select*from path_template\g
 system_id |    path_template     |                   description                    | organization_systemid | is_deleted 
| add_to_existing | priority | lead_time_constraint | current_time_constraint | is_active | is_show_on_quotation | is_show
_on_assist_plan | planning_mode | requested_date_mode 
-----------+----------------------+--------------------------------------------------+-----------------------+------------
+-----------------+----------+----------------------+-------------------------+-----------+----------------------+--------
----------------+---------------+---------------------
  26632011 | OEGEMA_DELIVERY      | Oegema Delivery                                  |                  4000 |          0 
|               0 |        0 | DURATION_TIME        | RESPECT                 |         1 |                    1 |        
              0 | BACKWARD      | BACKWARD
...

mpo=> select*from  path_service_action_template \g
 path_systemid | sat_systemid 
---------------+--------------
      26631831 |     26631829
...

/ Einde Intermezzo

/ Intermezzo

$ vi ServiceOrderTypeTrigger.standard.hbm.xml

	<class name="com.mpobjects.oms.model.trigger.ServiceOrderTypeTrigger" table="SO_TYPE_TRIGGER">
...

mpo=>  select*from so_type_trigger\g
 system_id |     name      | on_start | on_end | so_type_systemid | on_plan | on_release | on_planned_start_change | on_pl
anned_end_change | on_create | filter_expression | organization_systemid | on_update | expression_update 
-----------+---------------+----------+--------+------------------+---------+------------+-------------------------+------
-----------------+-----------+-------------------+-----------------------+-----------+-------------------
  26632022 | CARRIER_ALERT |        0 |      0 |         26631826 |       0 |          1 |                       0 |      
               0 |         0 |                   |                  4000 |         0 | \x00
(1 row)

mpo=> select*from service_order_type\g
 system_id | is_deleted | service_order_type | description | max_date_mode | show_documents 
-----------+------------+--------------------+-------------+---------------+----------------
  26631826 |          0 | DELIVERY           | DELIVERY    | IGNORE        |              0
(1 row)

/ carrier alert = email, sms

/ Einde Intermezzo

/s
public class ServiceOrderTypeTriggerDAOImpl extends GenericHibernateDAO<ServiceOrderTypeTrigger> implements ServiceOrderTypeTriggerDAO {

	public List<ServiceOrderTypeTrigger> getByServiceOrderType(ServiceOrderType aServiceOrderType) {
		DetachedCriteria myDetachedCriteria = DetachedCriteria.forClass(ServiceOrderTypeTrigger.class);
		myDetachedCriteria.add(Restrictions.eq("serviceOrderType", aServiceOrderType));
		return getHibernateTemplate().findByCriteria(myDetachedCriteria);
	}
/ See Intermezzo hierboven	,

/t
		List<ServiceOrderTypeTrigger> myList = MpoBeanFactory.getBean(ServiceOrderTypeTriggerDAO.class).getByServiceOrderType(myNew.getServiceOrderType());
/ D
[com.mpobjects.oms.model.trigger.ServiceOrderTypeTrigger/id:26632022]

		for (ServiceOrderTypeTrigger mySotTrigger : myList) {

			if (myEval.noChange() && !mySotTrigger.getOnUpdate()) {
/ JA
				continue;

/t
ServiceOrderServiceImpl.updateServiceOrder(ServiceOrderVO, TMSEventContext, boolean, boolean) line: 1347	
				getTriggerHandler().handleUpdate(myOldServiceOrderVO, aServiceOrder);
/ D

				if (propagate) {
/ JA
					triggerEventHandler(myOldServiceOrderVO, aServiceOrder, false, aContext);
/s
ServiceOrderServiceImpl.triggerEventHandler(ServiceOrderVO, ServiceOrderVO, boolean, TMSEventContext) line: 1670	
			} else {
				myEvent = new ServiceOrderEvent(anOldVO, aNewVO, ServiceOrderEvent.UPDATED, aContext);
/ SECOND EVENT
			myEvent.setInitiatedByConsignmentChange(anIsInitiatedByConsignmentChange);
false
			eventHandlerService.handleEvent(myEvent);
/s
EventHandlerServiceImpl.handleEvent(Event) line: 59	
	public void handleEvent(Event anEvent) throws ChangeManagementException {
/ anEvent=
serviceorder.updated, context [id/value: 27639885/48]]  old [N0000265/26632537] new [N0000265/26632537] 

/ Intermezzo


/ STACK

/ WH
RateCalcEventListener
	public void handleEvent(Event anEvent) throws AbstractException {
		if (anEvent.getEventContext().hasFlag(TMSEventContext.FLAG_MAY_RATE_CALC)) {
/ NEE 
	EventHandlerServiceImpl.handleEvent(Event) line: 89	
/ Event=serviceorder.updated, context [id/value: 27639885/48]]  old [N0000265/26632537] new [N0000265/26632537] 
	ServiceOrderServiceImpl.triggerEventHandler(ServiceOrderVO, ServiceOrderVO, boolean, TMSEventContext) line: 1671
	ServiceOrderServiceImpl.updateServiceOrder(ServiceOrderVO, TMSEventContext, boolean, boolean) line: 1347	
/ CALL 2
	RcaServiceOrderCostServiceImpl(ServiceOrderCostServiceImpl).recalculateCostsForServiceOrder(ServiceOrderCostVO) line: 176	
			Event<Object> myEvent = EventThreadStack.getInstance().getCurrentEvent();
/ myEvent=consignment.updated, context [id/value: 27639885/48]]  old [N0000265.1/26632540] new [N0000265.1/26632540] 
			getServiceOrderBAO().updateServiceOrder(myServiceOrder, myEvent.getEventContext(), true, false);

	RcaServiceOrderCostServiceImpl(ServiceOrderCostServiceImpl).saveServiceOrderCost(ServiceOrderCostVO) line: 208	
		recalculateCostsForServiceOrder(aServiceOrderCost);
////////////
	RateCalculationVO.updateServiceOrderCostPartList(RateCalculationAlternative, ServiceOrderVO, Map<RateComponentKey,CostTypeState>, Map<RateComponentKey,CostValue>, Set<ServiceOrderCostVO>) line: 1808	
	RateCalculationVO.updateServiceOrderCostPartList(RateCalculationAlternative) line: 1551	
	RateCalculationVO.runFor(RateAgreementVO) line: 769	
	CalculationServiceImpl.recalculate(LogisticsOrderVO, String, TMSEventContext) line: 405	
	RateCalcEventListener.recalculate(ServiceOrderVO, String, TMSEventContext) line: 258	
	RateCalcEventListener.recalcServiceOrderCost(Event) line: 164	
	RateCalcEventListener.handleEvent(Event) line: 67	
	ListenerList.fireEvent(Event) line: 80	
/ anEvent=consignment.updated, context [id/value: 27639885/48]]  old [N0000265.1/26632540] new [N0000265.1/26632540] 

	EventHandlerServiceImpl.handleEvent(Event) line: 89	
/ WH consignemt.updated op EventThreadStack set	, ook	, en fire hierboven	,
/ TODO
	ConsignmentServiceImpl.triggerEventHandler(ConsignmentVO, ConsignmentVO, boolean, TMSEventContext) line: 1050	
	ConsignmentServiceImpl.updateConsignmentAfterServiceOrderChange(ConsignmentVO, ConsignmentVO) line: 1076	
	ConsignmentServiceImpl.handleServiceOrderPlannedDateChange(ServiceOrderVO, ServiceOrderVO) line: 579	
	ServiceOrderServiceImpl.updateServiceOrder(ServiceOrderVO, TMSEventContext, boolean, boolean) line: 1323	
/ CALL 1
	ServiceOrderSaveAction(ServiceOrderSaveAction).handleSave() line: 178	
	ServiceOrderSaveAction.handleSave() line: 21	
	ServiceOrderSaveAction(AbstractSaveAction).act() line: 69	
	ServiceOrderSaveAction(AbstractAction).act(Redirector, SourceResolver, Map, String, Parameters) line: 170	


/ Einde Intermezzo

/ NB ERICJ 
			int myLevel = eventThreadStack.push(anEvent);
1
/ anEvent=
serviceorder.updated, context [id/value: 27639885/48]]  old [N0000265/26632537] new [N0000265/26632537] 

			listenerList.fireEvent(anEvent);
/s
RateCalcEventListener.handleEvent(Event) line: 78	
	public void handleEvent(Event anEvent) throws AbstractException {
		if (anEvent.getEventContext().hasFlag(TMSEventContext.FLAG_MAY_RATE_CALC)) {
/ NEE
/ TODO (NB ERICJ)

		} finally {
			eventThreadStack.pop();
this	EventHandlerServiceImpl  (id=14074)	
	eventThreadStack	EventThreadStack  (id=15717)	
		threadMap	HashMap<K,V>  (id=15719)	
{Thread[http-0.0.0.0-8080-1,5,jboss]=[consignment.updated, context [id/value: 27639885/48]]  old [N0000265.1/26632540] new [N0000265.1/26632540] ]}


/s
RcaServiceOrderCostServiceImpl(ServiceOrderCostServiceImpl).saveServiceOrderCost(ServiceOrderCostVO) line: 223	
	public void saveServiceOrderCost(ServiceOrderCostVO aServiceOrderCost) throws AbstractException {
		recalculateCostsForServiceOrder(aServiceOrderCost);
/ D
			} else {
				// Update
				try {
					triggerEventHandler(aServiceOrderCost, aServiceOrderCost);
/s

	private void triggerEventHandler(ServiceOrderCostVO anOldVO, ServiceOrderCostVO aNewVO) throws AbstractException {

			myEvent = new ServiceOrderCostEvent(anOldVO, aNewVO, ServiceOrderCostEvent.UPDATED);
serviceordercost.updated, context [id/value: 1457243892/63]]  old [26632543        18.92] new [26632543        18.92] 
/ THIRD EVENT
		}
		if (myEvent != null) {
			eventHandlerService.handleEvent(myEvent);
/s
EventHandlerServiceImpl.handleEvent(Event) line: 52	
	public void handleEvent(Event anEvent) throws ChangeManagementException {
anEvent	ServiceOrderCostEvent  (id=15868)	

			int myLevel = eventThreadStack.push(anEvent);
1
{Thread[http-0.0.0.0-8080-1,5,jboss]=
	[consignment.updated, context [id/value: 27639885/48]]  old [N0000265.1/26632540] new [N0000265.1/26632540] , 
	serviceordercost.updated, context [id/value: 1128983573/63]]  old [26632541       123.96] new [26632541       123.96] ]
}

			listenerList.fireEvent(anEvent);
/s
RateCalcEventListener.handleEvent(Event) line: 62	
	public void handleEvent(Event anEvent) throws AbstractException {
				recalcServiceOrderCost(anEvent);
/s
RateCalcEventListener.recalcServiceOrderCost(Event) line: 143	
	private void recalcServiceOrderCost(Event anEvent) throws AbstractException {
		if (anEvent.getEventContext().hasFlag(TMSEventContext.FLAG_MAY_RATE_CALC)) {
/ JA


/ Intermezzo

/ STACK

	RateCalcEventListener.handleEvent(Event) line: 63	
		if (anEvent.getEventContext().hasFlag(TMSEventContext.FLAG_MAY_RATE_CALC)) {
/ JA
/ TODO
	ListenerList.fireEvent(Event) line: 80	
	EventHandlerServiceImpl.handleEvent(Event) line: 89	
	RcaServiceOrderCostServiceImpl(ServiceOrderCostServiceImpl).triggerEventHandler(ServiceOrderCostVO, ServiceOrderCostVO) line: 310	
	RcaServiceOrderCostServiceImpl(ServiceOrderCostServiceImpl).saveServiceOrderCost(ServiceOrderCostVO) line: 208	
///////////////////
	RateCalculationVO.updateServiceOrderCostPartList(RateCalculationAlternative, ServiceOrderVO, Map<RateComponentKey,CostTypeState>, Map<RateComponentKey,CostValue>, Set<ServiceOrderCostVO>) line: 1808	
	RateCalculationVO.updateServiceOrderCostPartList(RateCalculationAlternative) line: 1551	
	RateCalculationVO.runFor(RateAgreementVO) line: 769	
	CalculationServiceImpl.recalculate(LogisticsOrderVO, String, TMSEventContext) line: 405	
	RateCalcEventListener.recalculate(ServiceOrderVO, String, TMSEventContext) line: 258	
	RateCalcEventListener.recalcServiceOrderCost(Event) line: 164	
	RateCalcEventListener.handleEvent(Event) line: 67	
	ListenerList.fireEvent(Event) line: 80	
/ anEvent=consignment.updated, context [id/value: 27639885/48]]  old [N0000265.1/26632540] new [N0000265.1/26632540] 

	EventHandlerServiceImpl.handleEvent(Event) line: 89	
/ WH consignemt.updated op EventThreadStack set	, ook	, en fire hierboven	,
/ TODO
	ConsignmentServiceImpl.triggerEventHandler(ConsignmentVO, ConsignmentVO, boolean, TMSEventContext) line: 1050	
	ConsignmentServiceImpl.updateConsignmentAfterServiceOrderChange(ConsignmentVO, ConsignmentVO) line: 1076	
	ConsignmentServiceImpl.handleServiceOrderPlannedDateChange(ServiceOrderVO, ServiceOrderVO) line: 579	
	ServiceOrderServiceImpl.updateServiceOrder(ServiceOrderVO, TMSEventContext, boolean, boolean) line: 1323	
/ CALL 1
	ServiceOrderSaveAction(ServiceOrderSaveAction).handleSave() line: 178	
	ServiceOrderSaveAction.handleSave() line: 21	
	ServiceOrderSaveAction(AbstractSaveAction).act() line: 69	
	ServiceOrderSaveAction(AbstractAction).act(Redirector, SourceResolver, Map, String, Parameters) line: 170	


/ Einde Intermezzo

				recalcServiceOrderCost(anEvent);
/s
	private void recalcServiceOrderCost(Event anEvent) throws AbstractException {
/ anEvent=
serviceordercost.updated, context [id/value: 1128983573/63]]  old [26632541       123.96] new [26632541       123.96] 
/ NIETS	, want 
		if (myType.equals(ConsignmentEvent.UPDATED) || myType.equals(ConsignmentEvent.CREATED)) {
/ NEE
		} else if (myType.equals(ServiceOrderEvent.UPDATED) || myType.equals(ServiceOrderEvent.CREATED)) {
/ NEE
		} else if (myType.equals(ShipmentOrderEvent.UPDATED)) {
/ NEE

			anEvent.getEventContext().removeFlag(TMSEventContext.FLAG_MAY_RATE_CALC);


/t
RateCalcEventListener.handleEvent(Event) line: 74	
				recalcShipOrderPrice(anEvent);
/s
RateCalcEventListener.recalcShipOrderPrice(Event) line: 94	
/ NIETS	, want	,
			if (myType.equals(ShipmentOrderEvent.CREATED)) {
/ NEE
			} else if (myType.equals(ShipmentOrderEvent.UPDATED)) {
/ NEE

				anEvent.getEventContext().removeFlag(TMSEventContext.FLAG_MAY_RATE_CALC);
/ was er al niet	,


/t
EventHandlerServiceImpl.handleEvent(Event) line: 101	
			listenerList.fireEvent(anEvent);
/ D
		} finally {
			eventThreadStack.pop();

/ SAMENVATTING EVENTS

/ bij so save -> co.update	,
/ calls recalc. rate, die een so.update fires + listeners
/ fires serviceordercost.update	, + listeners	,

/ de RecalcEventListener's
	public void handleEvent(Event anEvent) throws AbstractException {
				recalcServiceOrderCost(anEvent);
...
/c
CalculationServiceImpl.recalculate(LogisticsOrderVO, String, TMSEventContext) line: 405	
				myRateCalculationVO.runFor(mySelectedRateAgreement);
/s
	public void runFor(RateAgreementVO aRateAgreementVO) {
				runFor(aRateAgreementVO, myAlterNative);
/ recalc rates
				updateServiceOrderCostPartList(firstAlt);
/s
RateCalculationVO.updateServiceOrderCostPartList(RateCalculationAlternative) line: 1551	
		orderChanged |= updateServiceOrderCostPartList(anAlternative, serviceOrder, costTypeState, newValues, resultingParts);
/s
RateCalculationVO.updateServiceOrderCostPartList(RateCalculationAlternative, ServiceOrderVO, Map<RateComponentKey,CostTypeState>, Map<RateComponentKey,CostValue>, Set<ServiceOrderCostVO>) line: 1808	
				if (costPart != null) {
					costPart.setAmount(value);
...
					serviceOrderCostService.saveServiceOrderCost(costPart);
/c
RcaServiceOrderCostServiceImpl(ServiceOrderCostServiceImpl).saveServiceOrderCost(ServiceOrderCostVO) line: 208	
////////////////////////////////////
		recalculateCostsForServiceOrder(aServiceOrderCost);
/c
RcaServiceOrderCostServiceImpl(ServiceOrderCostServiceImpl).recalculateCostsForServiceOrder(ServiceOrderCostVO) line: 176	
			myServiceOrder.calculateTotalCosts();
/ TODO
			Event<Object> myEvent = EventThreadStack.getInstance().getCurrentEvent();
serviceorder.update
			getServiceOrderBAO().updateServiceOrder(myServiceOrder, myEvent.getEventContext(), true, false);
/c
ServiceOrderServiceImpl.updateServiceOrder(ServiceOrderVO, TMSEventContext, boolean, boolean) line: 1338	
				if (propagate) {
/ JA
					consignmentService.handleServiceOrderPlannedDateChange(aServiceOrder, myOldServiceOrderVO);
/ TODO
				getTriggerHandler().handleUpdate(myOldServiceOrderVO, aServiceOrder);
/s
ServiceOrderTriggerHandlerImpl.handleUpdate(ServiceOrderVO, ServiceOrderVO) line: 72	
		List<ServiceOrderTypeTrigger> myList = MpoBeanFactory.getBean(ServiceOrderTypeTriggerDAO.class).getByServiceOrderType(myNew.getServiceOrderType());
/ myList=[{name	"CARRIER_ALERT" (id=13816),...}]	
/ NIETS	,
/ WH 
RateCalcEventListener.handleEvent(Event) line: 67	
	public void handleEvent(Event anEvent) throws AbstractException {
		if (anEvent.getEventContext().hasFlag(TMSEventContext.FLAG_MAY_RATE_CALC)) {
/ NEE
/ TODO

/t
RcaServiceOrderCostServiceImpl(ServiceOrderCostServiceImpl).saveServiceOrderCost(ServiceOrderCostVO) line: 223	
		recalculateCostsForServiceOrder(aServiceOrderCost);
/ D
		triggerEventHandler(aServiceOrderCost, aServiceOrderCost);
/s
ServiceOrderServiceImpl.triggerEventHandler(ServiceOrderVO, ServiceOrderVO, boolean, TMSEventContext) line: 1668	
			myEvent = new ServiceOrderCostEvent(anOldVO, aNewVO, ServiceOrderCostEvent.UPDATED);
/s
RateCalcEventListener.handleEvent(Event) line: 67	
	public void handleEvent(Event anEvent) throws AbstractException {
		if (anEvent.getEventContext().hasFlag(TMSEventContext.FLAG_MAY_RATE_CALC)) {
/ JA
/ NIETS	,


/ Einde SAMENVATTING EVENTS
	

/ Intermezzo

$ vi ./module/oms/src/java/com/mpobjects/oms/dao/ServiceOrder.standard.hbm.xml

<hibernate-mapping>
	<class name="com.mpobjects.oms.model.serviceorder.vo.ServiceOrderVO" table="SERVICE_ORDER">
		<set name="serviceOrderCostList" cascade="all, delete-orphan">
			<cache usage="read-write" />
			<key column="SERVICE_ORDER_SYSTEMID" />
			<one-to-many class="com.mpobjects.oms.model.serviceordercost.vo.ServiceOrderCostVO" />
		</set>
/ TODO (inverse="true")

$ vi ./module/oms/src/java/com/mpobjects/oms/model/serviceordercost/dao/ServiceOrderCostVO.standard.hbm.xml

<hibernate-mapping>
	<class name="com.mpobjects.oms.model.serviceordercost.vo.ServiceOrderCostVO" table="SERVICE_ORDER_COST">
...
		<many-to-one name="serviceOrderVO" class="com.mpobjects.oms.model.serviceorder.vo.ServiceOrderVO" column="SERVICE_ORDER_SYSTEMID" />


/ Einde Intermezzo

/ Intermezzo

$ vi ./module/oms/src/java/com/mpobjects/oms/dao/trigger/ServiceOrderTypeTrigger.standard.hbm.xml

<hibernate-mapping>
	<class name="com.mpobjects.oms.model.trigger.ServiceOrderTypeTrigger" table="SO_TYPE_TRIGGER">
...
		<many-to-one name="serviceOrderType" column="SO_TYPE_SYSTEMID"
			class="com.mpobjects.oms.model.entity.serviceordertype.ServiceOrderType" />


mpo=> select*from so_type_trigger\g
 system_id |     name      | on_start | on_end | so_type_systemid | on_plan | on_release | on_planned_start_change | o
n_planned_end_change | on_create | filter_expression | organization_systemid | on_update | expression_update 
-----------+---------------+----------+--------+------------------+---------+------------+-------------------------+--
---------------------+-----------+-------------------+-----------------------+-----------+-------------------
  26632022 | CARRIER_ALERT |        0 |      0 |         26631826 |       0 |          1 |                       0 |  
                   0 |         0 |                   |                  4000 |         0 | \x00
(1 row)

/ Einde Intermezzo

/ t
RateCalculationVO.updateServiceOrderCostPartList(RateCalculationAlternative, ServiceOrderVO, Map<RateComponentKey,CostTypeState>, Map<RateComponentKey,CostValue>, Set<ServiceOrderCostVO>) line: 1809	
				aServiceOrder.addServiceOrderCost(costPart);
/ D

/ volgende	,
		// Go through the new prices and update the shipment order price parts accordingly
		for (Entry<RateComponentKey, CostValue> entry : aNewValues.entrySet()) {
ADDITIONAL_DELIVERY-EUR=50.00 (ADD)

			RateComponentType rateType = entry.getKey().getRateComponentType();
theSystemId: 26631763Code :ADDITIONAL_DELIVERY
Description :Additional Delivery Address
ReasonMandatory :false
IsDeleted :false
SequenceNr :5
			CurrencyVO myCurrency = entry.getKey().getCurrency();
			CostValue costValue = entry.getValue();
50.00 (ADD)
			CostTypeState state = aCostTypeState.get(entry.getKey());
state	CostTypeState  (id=15959)	
	costParts	ArrayList<E>  (id=15970)	
[26632542        50.00]
	costValue	CostValue  (id=15971)	
[26632542        50.00]


/ volgende	,

		for (Entry<RateComponentKey, CostValue> entry : aNewValues.entrySet()) {
			RateComponentType rateType = entry.getKey().getRateComponentType();
			CurrencyVO myCurrency = entry.getKey().getCurrency();
			CostValue costValue = entry.getValue();
16.11 (ADD)
			CostTypeState state = aCostTypeState.get(entry.getKey());

/ state
	costParts
[26632543        11.91]
	costValue
11.91 (ADD)
			} else {
				BigDecimal oldValue = state.getCostValue().getValue();
				BigDecimal newValue = costValue.getValue();
...
				for (ServiceOrderCostVO part : state.getCostParts()) {

					} else if (EntryType.AUTOMATIC.equals(part.getEntryType())) {
						// an automatic entry; simply update this value with the correction.
						updatePart = part;
				if (costPart == null) {
					costPart = updatePart;
				if (costPart != null) {
					costPart.setAmount(value);
16.11
					serviceOrderCostService.saveServiceOrderCost(costPart);
/s
	public void saveServiceOrderCost(ServiceOrderCostVO aServiceOrderCost) throws AbstractException {
		recalculateCostsForServiceOrder(aServiceOrderCost);
/s
	public void recalculateCostsForServiceOrder(ServiceOrderCostVO aServiceOrderCost) {
			myServiceOrder.calculateTotalCosts();
/s
	public void calculateTotalCosts() {
		Collection<ServiceOrderCostVO> myServiceOrderCostList = getServiceOrderCostList();
[26632542        50.00, 26632541       123.96, 26632543        16.11]
/ TODO 
/ Alleen de laatste erbij	,  nu dan toevallig de laatste	,
/ TODO

/ calc myEstimate	, adds de 3  hierboven	,
		} else {
			setTotalCost(myEstimate.getAmount());
			setCostCurrencyVO(myEstimate.getCurrency());
			setCostMethod(myEstimate.getMethod());
		}

/t
	public void recalculateCostsForServiceOrder(ServiceOrderCostVO aServiceOrderCost) {
			myServiceOrder.calculateTotalCosts();
/ D
			Event<Object> myEvent = EventThreadStack.getInstance().getCurrentEvent();
consignment.updated, context [id/value: 1446999428/48]]  old [N0000265.1/26632540] new [N0000265.1/26632540] 
				getServiceOrderBAO().updateServiceOrder(myServiceOrder, myEvent.getEventContext(), true, false);
/s
ServiceOrderServiceImpl.updateServiceOrder(ServiceOrderVO, TMSEventContext, boolean, boolean) line: 1272	
				ServiceOrderVO myOldServiceOrderVO = getOld(aServiceOrder);
theRequestedTotalLoadingMeters	BigDecimal  (id=14680)	
0.80
/ TODO (is de nieuwe value)	,

/ Intermezzo

mpo=> select column_name from information_schema.columns where
table_name='service_order' and column_name like '%load%'\g
      column_name       
------------------------
 capacity_loading_meter
(1 row)

/ Maar deze zochten we niet	,

mpo=> select column_name from information_schema.columns where
table_name='service_order' and column_name like '%ldm%'\g
   column_name   
-----------------
 free_cap_ldm
 utilization_ldm
 total_ldm
(3 rows)

mpo=> select total_ldm from service_order where system_id=  26632537 \g
 total_ldm 
-----------
   0.40000
(1 row)

/ Einde Intermezzo

/ In de db staat nog 0.40, maar het getOld geeft 0.80	,
/ TODO

/ Intermezzo

/ we zijn al in 	, 
ServiceOrderServiceImpl.updateServiceOrder(ServiceOrderVO, TMSEventContext, boolean, boolean) line: 1323	
			if (propagate) {
/ JA
					consignmentService.handleServiceOrderPlannedDateChange(aServiceOrder, myOldServiceOrderVO);
/ we hadden 12 May gegeven voor pln. start after	, na rate calc. werd deze correct tot 14 May, zodat er nu geen verschil meer is	, en nu doet consignmentService.handleServiceOrderPlannedDateChange dus NIETS	,

/ Einde Intermezzo

 				getTriggerHandler().handleUpdate(myOldServiceOrderVO, aServiceOrder);
/ NIETS met CARRIER_ALERT
				if (propagate) {
/ JA
					triggerEventHandler(myOldServiceOrderVO, aServiceOrder, false, aContext);
/ creates een serviceorder.updated event	,
/ we zitten nog altijd in de consignment.updated event	,
/c
...
/c
EventHandlerServiceImpl.handleEvent(Event) line: 101	
			int myLevel = eventThreadStack.push(anEvent);
{Thread[http-0.0.0.0-8080-6,5,jboss]=[
consignment.updated, context [id/value: 1446999428/48]]  old [N0000265.1/26632540] new [N0000265.1/26632540] , 
serviceorder.updated, context [id/value: 1446999428/48]]  old [N0000265/26632537] new [N0000265/26632537] 
]}
/s
RateCalcEventListener.handleEvent(Event) line: 62	
		if (anEvent.getEventContext().hasFlag(TMSEventContext.FLAG_MAY_RATE_CALC)) {
/ NEE

/t
RcaServiceOrderCostServiceImpl(ServiceOrderCostServiceImpl).saveServiceOrderCost(ServiceOrderCostVO) line: 211	
		recalculateCostsForServiceOrder(aServiceOrderCost);
/ D
/ TODO (Wat doet deze method?)

			} else {
				// Update
				try {
					triggerEventHandler(aServiceOrderCost, aServiceOrderCost);
/ creates  a serviceordercost.updated event	,
/s
RateCalcEventListener.handleEvent(Event) line: 62	
		if (anEvent.getEventContext().hasFlag(TMSEventContext.FLAG_MAY_RATE_CALC)) {
/ JA
				recalcServiceOrderCost(anEvent);
/s
RateCalcEventListener.recalcServiceOrderCost(Event) line: 178	
		if (myType.equals(ConsignmentEvent.UPDATED) || myType.equals(ConsignmentEvent.CREATED)) {
/ NEE
			anEvent.getEventContext().removeFlag(TMSEventContext.FLAG_MAY_RATE_CALC);

/t
RateCalculationVO.updateServiceOrderCostPartList(RateCalculationAlternative, ServiceOrderVO, Map<RateComponentKey,CostTypeState>, Map<RateComponentKey,CostValue>, Set<ServiceOrderCostVO>) line: 1817	

		for (Entry<RateComponentKey, CostValue> entry : aNewValues.entrySet()) {
/ GEEN volgende	,

/t
	protected void updateServiceOrderCostPartList(RateCalculationAlternative anAlternative) throws Exception {
		orderChanged |= updateServiceOrderCostPartList(anAlternative, serviceOrder, costTypeState, newValues, resultingParts);
/ D
		if (orderChanged) {
/ JA
				serviceOrder.calculateTotalCosts();
/ calc 
serviceOrder
	totalCost
190.07

				// We need to propagate the changes otherwise EventEventListener won't get the update
				TMSEventContext eventCtx = new TMSEventContext();
				eventCtx.removeFlag(TMSEventContext.FLAG_MAY_RATE_CALC);

				serviceOrder.setRatecalcMd5Hash(RateCalcHashCalculator.calculate(rateAgreement, serviceOrder));
/s
public class RateCalcHashCalculator {
	public static String calculate(RateAgreementVO aRateAgreement, LogisticsOrderVO anOrder) {
			Collection<Object> myValues = aRateAgreement.getOrderDetailValues(anOrder);
[2014-05-19 17:00:00.0, DE, , , DE, , , 1.0, STANDARD, 0.80, DE, 2014-05-15 16:00:00.0, 0.80, DE, 20095]

/ we zien 0.80	,

/t
				serviceOrder.setRatecalcMd5Hash(RateCalcHashCalculator.calculate(rateAgreement, serviceOrder));
/ D
/ sets serviceOrder.ratecalcMd5Hash	"174AA20F96FB6AC495E61FBC3E71442B30CC4D71" (id=14968)	
				getServiceOrderFacade().updateServiceOrder(serviceOrder, eventCtx, true, false);

/ Intermezzo

/ we zijn in	,
RateCalculationVO.updateServiceOrderCostPartList(RateCalculationAlternative) line: 1600	
RateCalculationVO.runFor(RateAgreementVO) line: 769	
CalculationServiceImpl.recalculate(LogisticsOrderVO, String, TMSEventContext) line: 405	
...
	public ServiceOrderVO updateServiceOrder(ServiceOrderVO aServiceOrder, TMSEventContext aContext, boolean propagate, boolean replan) {


		orderChanged |= updateServiceOrderCostPartList(anAlternative, serviceOrder, costTypeState, newValues, resultingParts);
/ D
		if (orderChanged) {
				getServiceOrderFacade().updateServiceOrder(serviceOrder, eventCtx, true, false);

/ both calls	,
	public ServiceOrderVO updateServiceOrder(ServiceOrderVO aServiceOrder, TMSEventContext aContext, boolean propagate, boolean replan) {
/ Dus we komen 2 keer achter elkaar in deze method	, 
/ maar we zijn nog steeds ook in deze method	, (TODO: verband met consignment.updated event)	,


/ Einde Intermezzo

				if (propagate) {
					consignmentService.handleServiceOrderPlannedDateChange(aServiceOrder, myOldServiceOrderVO);
/ NIETS

				if (propagate) {
					triggerEventHandler(myOldServiceOrderVO, aServiceOrder, false, aContext);
/s
ServiceOrderServiceImpl.triggerEventHandler(ServiceOrderVO, ServiceOrderVO, boolean, TMSEventContext) line: 1668	
				myEvent = new ServiceOrderEvent(anOldVO, aNewVO, ServiceOrderEvent.UPDATED, aContext);
			eventHandlerService.handleEvent(myEvent);
/s
			listenerList.fireEvent(anEvent);

/t
RateCalculationVO.updateServiceOrderCostPartList(RateCalculationAlternative) line: 1601	
				getServiceOrderFacade().updateServiceOrder(serviceOrder, eventCtx, true, false);
/ D
				if (!myOriginalCost.equals(serviceOrder.getEstimatedCost())) {
/ JA
/ myOriginalCost
153.54 EUR
serviceOrder.getEstimatedCost()
/ TODO

serviceOrder
	serviceOrderCostList	PersistentSet  (id=13671)	
[26632542        50.00, 26632541       123.96, 26632543        16.11]
	totalCost	BigDecimal  (id=14943)	
190.07

					if (StringUtils.isTrue(...
/ NEE

/t
RateCalculationVO.runFor(RateAgreementVO) line: 772	
							updateServiceOrderCostPartList(firstAlt);
/ D
							BigDecimal myTotalCost = serviceOrder.getTotalCost();
190.07

						if (getOrder() instanceof LogisticsOrderVO) {
/ JA
							updateLogisticsOrderRateAgreement(getOrder(), firstAlt.getRateCalculation().getRateAgreementVO());
/s
RateCalculationVO.updateLogisticsOrderRateAgreement(LogisticsOrderVO, RateAgreementVO) line: 1469	
/ NIETS
							updateLogisticsOrderRateCalcStatus(getOrder(), firstAlt.isSuccess() ? "Success" : "Failed");
/ NIETS

						updateEntityDetails(firstAlt);
/s
RateCalculationVO.updateEntityDetails(RateCalculationAlternative) line: 2664	
/ TODO

RateCalculationVO.runFor(RateAgreementVO) line: 812	
						createXMLLog();
/ Q ERICJ Duurt LANG
						saveLog();
/ Q ERICJ DOET NIET	,

/ t
RateCalcEventListener.handleEvent(Event) line: 70	
				recalcServiceOrderCost(anEvent);
/ D

/ t
EventHandlerServiceImpl.handleEvent(Event) line: 101	
			listenerList.fireEvent(anEvent);
/ D
			eventThreadStack.pop();
/ De consignemt.updated event	,

/t
ConsignmentServiceImpl.triggerEventHandler(ConsignmentVO, ConsignmentVO, boolean, TMSEventContext) line: 1050	
			myEvent = new ConsignmentEvent(anOldVO, aNewVO, ConsignmentEvent.UPDATED, myContext);
			eventHandlerService.handleEvent(myEvent);
/ D

/t
ConsignmentServiceImpl.handleServiceOrderPlannedDateChange(ServiceOrderVO, ServiceOrderVO) line: 539	
			for (Object myElement : myConsignmentList) {
/ Geen volgende	,

/t
ServiceOrderServiceImpl.updateServiceOrder(ServiceOrderVO, TMSEventContext, boolean, boolean) line: 1323	
			if (propagate) {
					consignmentService.handleServiceOrderPlannedDateChange(aServiceOrder, myOldServiceOrderVO);
/ D

/ Intermezzo

public class ConsignmentServiceImpl implements ConsignmentService {
	public void handleServiceOrderPlannedDateChange(ServiceOrderVO myNewServiceOrder, ServiceOrderVO myOldServiceOrder) {
			for (Object myElement : myConsignmentList) {
						updateConsignmentAfterServiceOrderChange(myOld, myConsignmentVO);
/s
	private void updateConsignmentAfterServiceOrderChange(ConsignmentVO anOld, ConsignmentVO aConsignment) throws ConsignmentException {
			triggerEventHandler(anOld, aConsignment, true, new TMSEventContext());
/s

	private void triggerEventHandler(ConsignmentVO anOldVO, ConsignmentVO aNewVO, boolean anIsInitiatedByServiceOrderChange, TMSEventContext anEventContext) throws AbstractException {
		} else {
			myEvent = new ConsignmentEvent(anOldVO, aNewVO, ConsignmentEvent.UPDATED, myContext);
		}
		eventHandlerService.handleEvent(myEvent);
/ s
EventHandlerServiceImpl
	public void handleEvent(Event anEvent) throws ChangeManagementException {
		int myLevel = eventThreadStack.push(anEvent);
/ Hier sets consignment.updated event op de stack	,

		listenerList.fireEvent(anEvent);

		eventThreadStack.pop();


/ Einde Intermezzo

				getTriggerHandler().handleUpdate(myOldServiceOrderVO, aServiceOrder);
/ CARRIER_ALERT
				if (replan) {
/ JA
					replan(aServiceOrder);
/ TODO

				if (propagate) {
					triggerEventHandler(myOldServiceOrderVO, aServiceOrder, false, aContext);
/s
	private void triggerEventHandler(ServiceOrderVO anOldVO, ServiceOrderVO aNewVO, boolean anIsInitiatedByConsignmentChange, TMSEventContext aContext)
				myEvent = new ServiceOrderEvent(anOldVO, aNewVO, ServiceOrderEvent.UPDATED, aContext);
				eventHandlerService.handleEvent(myEvent);
/s
			int myLevel = eventThreadStack.push(anEvent);
{Thread[http-0.0.0.0-8080-6,5,jboss]=[serviceorder.updated, context [id/value: 24416936/49]]  old [N0000265/26632537] new [N0000265/26632537] ]}
			listenerList.fireEvent(anEvent);
/s
EventEventListener.handleEvent(Event) line: 134	
		} else if (myType.equals(ServiceOrderEvent.UPDATED)) {
			handleServiceOrderChange((ServiceOrderEvent) anEvent);
/ WH NIETS	,
/t
/s
RateCalcEventListener.handleEvent(Event) line: 67	
				recalcServiceOrderCost(anEvent);
/s
RateCalcEventListener.recalcServiceOrderCost(Event) line: 170	
	private void recalcServiceOrderCost(Event anEvent) throws AbstractException {
			recalculate(myServiceOrder, RateType.RATE_TYPE_SERVICE_ORDER_COST, anEvent.getEventContext());
/s
RateCalcEventListener.recalculate(ServiceOrderVO, String, TMSEventContext) line: 258	
				myService.recalculate(myOrder, RateType.RATE_TYPE_SERVICE_ORDER_COST, anEventContext);
/s
CalculationServiceImpl.recalculate(LogisticsOrderVO, String, TMSEventContext) line: 346	
					if (!myRateCalculationVO.rateCalculationRequired()) {
/s
RateCalculationVO.rateCalculationRequired() line: 691	
			String myHash = RateCalcHashCalculator.calculate(rateAgreement, getOrder());
/s
RateCalcHashCalculator.calculate(RateAgreementVO, LogisticsOrderVO) line: 26	
			Collection<Object> myValues = aRateAgreement.getOrderDetailValues(anOrder);
[2014-05-19 17:00:00.0, DE, , , DE, , , 1.0, STANDARD, 0.80, DE, 2014-05-15 16:00:00.0, 0.80, DE, 20095]

/t
public boolean rateCalculationRequired() {
			String myHash = RateCalcHashCalculator.calculate(rateAgreement, getOrder());
/ D
			if (ObjectUtils.equals(myHash, serviceOrder.getRatecalcMd5Hash())) {
/ JA
				return false;
			}
/ t
CalculationServiceImpl.recalculate(LogisticsOrderVO, String, TMSEventContext) line: 371	
					if (!myRateCalculationVO.rateCalculationRequired()) {
/ JA

/t
	public void handleEvent(Event anEvent) throws AbstractException {
				recalcServiceOrderCost(anEvent);
/ D
/ NIET 	,

/t
	public void handleEvent(Event anEvent) throws ChangeManagementException {
			listenerList.fireEvent(anEvent);
/ D
{Thread[http-0.0.0.0-8080-6,5,jboss]=[serviceorder.updated, context [id/value: 24416936/48]]  old [N0000265/26632537] new [N0000265/26632537] ]}
			eventThreadStack.pop();
{}

/t
	private void triggerEventHandler(ServiceOrderVO anOldVO, ServiceOrderVO aNewVO, boolean anIsInitiatedByConsignmentChange, TMSEventContext aContext)
			eventHandlerService.handleEvent(myEvent);
serviceorder.updated event	,
/ D

/t
ServiceOrderServiceImpl.updateServiceOrder(ServiceOrderVO, TMSEventContext, boolean, boolean) line: 1356	
				if (propagate) {
					triggerEventHandler(myOldServiceOrderVO, aServiceOrder, false, aContext);
/ D
			return aServiceOrder;

/ Intermezzo

mpo=> select total_ldm from service_order where system_id=  26632537 \g
 total_ldm 
-----------
   0.40000
(1 row)

serviceOrder
	theRequestedTotalLoadingMeters	BigDecimal  (id=14680)	
0.80

/ Einde Intermezzo

/t
ServiceOrderSaveAction(ServiceOrderSaveAction).handleSave() line: 178	
				theVO = MpoBeanFactory.getBean(ServiceOrderService.class).updateServiceOrder(theVO, myEventContext, true, true);
/ D

/t
ServiceOrderSaveAction(AbstractAction).act(Redirector, SourceResolver, Map, String, Parameters) line: 174	









 









 

























/t
RateCalculationVO.updateServiceOrderCostPartList(RateCalculationAlternative) line: 1598	
	protected void updateServiceOrderCostPartList(RateCalculationAlternative anAlternative) throws Exception {

		orderChanged |= updateServiceOrderCostPartList(anAlternative, serviceOrder, costTypeState, newValues, resultingParts);
/ D
	if (orderChanged) {
				serviceOrder.calculateTotalCosts();
				// We need to propagate the changes otherwise EventEventListener won't get the update
				TMSEventContext eventCtx = new TMSEventContext();
				eventCtx.removeFlag(TMSEventContext.FLAG_MAY_RATE_CALC);
				serviceOrder.setRatecalcMd5Hash(RateCalcHashCalculator.calculate(rateAgreement, serviceOrder));
/TODO Waarom?
				getServiceOrderFacade().updateServiceOrder(serviceOrder, eventCtx, true, false);
/ TODO Waarom weer?
				if (!myOriginalCost.equals(serviceOrder.getEstimatedCost())) {
					if (StringUtils.isTrue(ApplicationPropertyManager.getInstance().getModuleProperty("ratecalc", "shipmentorder.price.costplus", "false"))) {
/ NEE
						recalcShipmentOrderPrices(serviceOrder);
/ NIET

/t
RateCalculationVO.runFor(RateAgreementVO) line: 785	
	public void runFor(RateAgreementVO aRateAgreementVO) {
							updateServiceOrderCostPartList(firstAlt);
/ D
						if (getOrder() instanceof LogisticsOrderVO) {
/ JA
							updateLogisticsOrderRateAgreement(getOrder(), firstAlt.getRateCalculation().getRateAgreementVO());
/ NIETS, 
/ Want	,

/ firstAlt=
[RC_SERVICE = STANDARD] [RC_FREIGHT = 145.51540488664824] [RC_FUEL = 18.9170026352642712000] [RC_START_AFTER = 2014-05-15 16:00:00] [RC_RELEASE_DATE = 2014-05-12 16:00:00] [RC_START_BEFORE = 2014-05-15 17:00:00] [RC_ADDITIONAL_STOP = 50] 

/s
RateCalculationVO.updateLogisticsOrderRateAgreement(LogisticsOrderVO, RateAgreementVO) line: 1468	
	protected void updateLogisticsOrderRateAgreement(LogisticsOrderVO aOrder, RateAgreementVO aRateAgreementVO) {

		} else if (aOrder instanceof ServiceOrderVO) {
			entityDetailTypeId = ApplicationPropertyManager.getInstance().getModuleApplicationProperty("ratecalc", "serviceorder.entitydetail", "");
			orderId = ((ServiceOrderVO) aOrder).getServiceOrderId();
entityDetailTypeId	"" (id=13137)	
orderId	"N0000265" (id=15832)	

		if (StringUtils.isEmpty(entityDetailTypeId)) {
			return;

/ t
RateCalculationVO.runFor(RateAgreementVO) line: 789	

							updateLogisticsOrderRateCalcStatus(getOrder(), firstAlt.isSuccess() ? "Success" : "Failed");
/ TODO
						updateEntityDetails(firstAlt);
/s
RateCalculationVO.updateEntityDetails(RateCalculationAlternative) line: 2652	
	private void updateEntityDetails(RateCalculationAlternative anAlternative) {

/t
CalculationServiceImpl.recalculate(LogisticsOrderVO, String, TMSEventContext) line: 405	
				myRateCalculationVO.runFor(mySelectedRateAgreement);
/ D

/t
RateCalcEventListener.recalculate(ServiceOrderVO, String, TMSEventContext) line: 258	
				myService.recalculate(myOrder, RateType.RATE_TYPE_SERVICE_ORDER_COST, anEventContext);
/ D

/t
RateCalcEventListener.recalcServiceOrderCost(Event) line: 170	
			recalculate(myServiceOrder, RateType.RATE_TYPE_SERVICE_ORDER_COST, anEvent.getEventContext());
/ D
RateCalcEventListener.handleEvent(Event) line: 67	
				recalcServiceOrderCost(anEvent);
anEvent	ServiceOrderEvent  (id=15806)	
serviceorder.updated, context [id/value: 374199710/48]]  old [N0000265/26632537] new [N0000265/26632537] 
/ D
/ Veel dieper hierboven waren we hier ook	,
/ TODO
			String myPriceExecution = ApplicationPropertyManager.getInstance().getModuleProperty("ratecalc", "shipmentorderprice.ratecalculation.execution");

			if (myPriceExecution.equalsIgnoreCase("auto")) {
				anEvent.debug("handled by RateCalcEventListener - price");
				recalcShipOrderPrice(anEvent);
/s
RateCalcEventListener.recalcShipOrderPrice(Event) line: 82	
		String myType = anEvent.getEventType();
serviceorder.updated
/ Doet NIETS	,

/t
EventHandlerServiceImpl.handleEvent(Event) line: 103	

/t
ServiceOrderServiceImpl.triggerEventHandler(ServiceOrderVO, ServiceOrderVO, boolean, TMSEventContext) line: 1673	
			eventHandlerService.handleEvent(myEvent);
/ D

/t
ServiceOrderServiceImpl.updateServiceOrder(ServiceOrderVO, TMSEventContext, boolean, boolean) line: 1349	

/t
ServiceOrderSaveAction(ServiceOrderSaveAction).handleSave() line: 178	
				theVO = MpoBeanFactory.getBean(ServiceOrderService.class).updateServiceOrder(theVO, myEventContext, true, true);
/ D
				MpoBeanFactory.getBean(Tracer.class).traceUpdate(TracerSubject.SERVICE_ORDER, theVO.getSystemId(), theVO.getServiceOrderId());
/ TODO

			getRequest().setAttribute("systemid", new Integer(theVO.getSystemId()));
/ TODO
			getSession().setAttribute(ServiceOrderView.ACTIVE_SERVICEORDER, theVO);
/ TODO
			getSession().removeAttribute(com.mpobjects.oms.control.shipmentorder.action.ShipmentOrderSaveAction.GO_BACK_ON_SAVE_AND_CLOSE);
/ TODO

/t
ServiceOrderSaveAction(AbstractSaveAction).act() line: 70	

/ TODO Afmaken

/ Einde SAVE SEO


/ SAVE SHO

$ vi ShipmentOrder.standard.hbm.xml

<hibernate-mapping package="com.mpobjects.oms.model.entity">
	<class name="com.mpobjects.oms.model.shipmentorder.vo.ShipmentOrderVO" table="SHIPMENT_ORDER">
		<component name="dateSetVO" class="com.mpobjects.oms.model.shipmentorder.vo.DateSetVO">
			<property name="actualEnd" column="ACTUAL_ARRIVAL" />
			<property name="actualStart" column="ACTUAL_DEPARTURE" />
			<property name="closeDate" column="CLOSE_DATE" />
			<property name="origPlannedEndAfter" column="ORG_PLANNED_ARRIVAL_AFTER" />
			<property name="origPlannedEndBefore" column="ORG_PLANNED_ARRIVAL_BEFORE" />
			<property name="origPlannedStartAfter" column="ORG_PLANNED_DEPARTURE_AFTER" />
			<property name="origPlannedStartBefore" column="ORG_PLANNED_DEPARTURE_BEFORE" />
			<property name="plannedEndAfter" column="PLANNED_ARRIVAL_AFTER" />
			<property name="plannedEndBefore" column="PLANNED_ARRIVAL_BEFORE" />
			<property name="plannedStartAfter" column="PLANNED_DEPARTURE_AFTER" />
			<property name="plannedStartBefore" column="PLANNED_DEPARTURE_BEFORE" />
			<property name="requestedEndAfter" column="REQUESTED_ARRIVAL_AFTER" />
			<property name="requestedEndBefore" column="REQUESTED_ARRIVAL_BEFORE" />
			<property name="requestedStartAfter" column="REQUESTED_DEPARTURE_AFTER" />
			<property name="requestedStartBefore" column="REQUESTED_DEPARTURE_BEFORE" />
		</component>
		<property name="requestedTotalWeightKg" column="TOTAL_WEIGHT_KG" />
		<property name="requestedTotalVolumeM3" column="TOTAL_VOLUME_M3" />
		<property name="requestedTotalLoadingMeters" column="TOTAL_LDM" />
		<property name="requestedTotalValue" column="TOT_VALUE" />

$ vi ShipmentOrderVO.java

public class ShipmentOrderVO extends LogisticsOrderVO {

$ vi LogisticsOrderVO.java

public abstract class LogisticsOrderVO extends EntityDetailSupport {
	private DateSetVO theDateSetVO = new DateSetVO();

/ Hibernate book (185)
<component ...>


mpo=> select system_id,shipment_order_id from shipment_order\g
 system_id | shipment_order_id 
-----------+-------------------
  26632024 | SH000000105
(5 rows)

mpo=> select requested_departure_before , requested_departure_after , planned_departure_before , planned_departure_after , org_planned_departure_before , org_planned_departure_after , requested_arrival_before , requested_arrival_after , planned_arrival_before , planned_arrival_after , org_planned_arrival_before , org_planned_arrival_after ,  actual_departure   , actual_arrival , created_by_systemid ,    system_entry_date from shipment_order where system_id=26632024\g

 requested_departure_before | requested_departure_after | planned_departure_before | planned_departure_after | org_planned_departure_before | org_planned_departure_after | requested_arrival_before | requested_arrival_after | planned_arrival_before | planned_arrival_after | org_planned_arrival_before | org_planned_arrival_after |  actual_departure   | actual_arrival | created_by_systemid |    system_entry_date    
----------------------------+---------------------------+--------------------------+-------------------------+------------------------------+-----------------------------+--------------------------+-------------------------+------------------------+-----------------------+----------------------------+---------------------------+---------------------+----------------+---------------------+-------------------------
 2014-05-01 10:43:00        | 2014-04-30 06:58:00       | 2014-05-12 16:00:00      | 2014-05-12 16:00:00     |            |                             | 2014-05-19 17:00:00      | 2014-05-15 16:00:00     | 2014-05-16 17:00:00 | 2014-05-22 17:00:00   |                            |                           | 2014-05-15 16:30:00 |              
  |               10100 | 2014-04-22 08:58:55.895
(1 row)

 requested_departure_before  		2014-05-01 10:43:00 
 requested_departure_after 		2014-04-30 06:58:00
 planned_departure_before 		2014-05-12 16:00:00
 planned_departure_after 		2014-05-12 16:00:00
 org_planned_departure_before 
 org_planned_departure_after 
 requested_arrival_before		2014-05-19 17:00:00 
 requested_arrival_after 		2014-05-15 16:00:00
 planned_arrival_before			2014-05-16 17:00:00 
 planned_arrival_after 			2014-05-22 17:00:00	
 org_planned_arrival_before 
 org_planned_arrival_after 
 actual_departure  			2014-05-15 16:30:00 
 actual_arrival 
 created_by_systemid 
 system_entry_date    

/ we veranderen in sho	,
Req start after: 29 Apr 2014 (was 30 Apr)
Req end after: 16 May 2014	( was 15 May)
Total weigth: 	80.00 (was 40.00)
Total ldm: 	0.80 	(was 0.40)
/ click save

mpo=> select column_name from information_schema.columns where table_name='shipment_order' and (column_name like '%ldm%' or column_name like '%weight%') \g
   column_name   
-----------------
 total_weight_kg
 total_ldm
 pay_weight
(3 rows)

mpo=> select total_weight_kg, total_ldm, pay_weight from shipment_order where system_id=26632024\g
 total_weight_kg | total_ldm | pay_weight 
-----------------+-----------+------------
        40.00000 |   0.40000 |           
(1 row)

ShipmentOrderSaveAction(AbstractSaveAction).act() line: 69	
	handleSave();
/c
package com.mpobjects.oms.ratecalc.control.shipmentorder.action;
ShipmentOrderSaveAction.handleSave() line: 19	
		super.handleSave();
/c
package com.mpobjects.oms.control.shipmentorder.action;
ShipmentOrderSaveAction(ShipmentOrderSaveAction).handleSave() line: 90	
			ShipmentOrderVO myVO = (ShipmentOrderVO) getValueObject();
/ Uit FORM	, NIEUWE dus	,
/c
ShipmentOrderSaveAction(BoundSaveAction).getValueObject() line: 197	
		return getFetchedData().iterator().next();
/c
ShipmentOrderSaveAction(BoundSaveAction).getFetchedData() line: 140	
	public Collection<EntityInterface> getFetchedData() throws IllegalStateException {

				Collection<DataFetchable> myFetchFields = getForm().getDataFetchableFields();
[ organization,  orderProcess,  shipmentOrderId,  orderStatus,  customerStatusVO.status,  holdStatus,  shipmentType,  requestedServiceLevel,  actualServiceLevel,  reasonCode,  systemEntryDate,  lastUpdate,  requestedStartAfter,  requestedStartBefore,  requestedEndAfter,  requestedEndBefore,  plannedStartAfter,  plannedEndAfter,  price,  priceCurrency,  ChargeTimeWindowYn,  payWeight,  reference1,  reference2,  reference4,  reference5,  createdBy,  assignee,  notifyTo,  requestedTotalColli,  requestedTotalItems,  requestedTotalWeightKg,  requestedTotalVolumeM3,  requestedTotalLoadingMeters,  emission,  requestedTotalValue,  valueCurrency,  CashOnDeliveryDone,  incoTerm,  incotermsReference,  dangerousGoodsYn,  reference3,  salesOrganization,  reference6,  reference7,  reference8,  reference9,  reference10,  consolidationKey,  customerOrderNumber,  preferedParty,  remarks,  remarks2,  syncFromFlag,  fromParty, from name, from name2, from address, from address2, from city, from postalCode, from regionState, from country, from phoneNumber, from faxNumber, from emailAddress, from contactName,  syncToFlag,  toParty, to name, to name2, to address, to address2, to city, to postalCode, to regionState, to country, to phoneNumber, to faxNumber, to emailAddress, to contactName,  syncBillToFlag,  billToParty, billTo name, billTo name2, billTo address, billTo address2, billTo city, billTo postalCode, billTo regionState, billTo country, billTo phoneNumber, billTo faxNumber, billTo emailAddress, billTo contactName, BILL_TO syncFlag, BILL_TO Party, BILL_TO name, BILL_TO name2, BILL_TO address, BILL_TO address2, BILL_TO city, BILL_TO postalCode, BILL_TO regionState, BILL_TO country, BILL_TO phoneNumber, BILL_TO faxNumber, BILL_TO emailAddress, BILL_TO contactName, productItem systemId, productItem product, productItem productId, productItem customerOrderLine, productItem description, productItem quantity, productItem weightKg, productItem totalVolumeM3, productItem customsNumber, productItem individualItemValue, productItem valueCurrency, productItem partNumber, productItem productModel, productItem productSeries, productItem productGroup, productItem productOwner, productItem countryOfOrigin, productItem reference2, productItem reference3, productItem reference4, productItem reference5, productItem requestedAdrCode, productItem actualAdrCode, productItem requestedUnNumber, productItem actualUnNumber, productItem flashpoint, productItem packagingGroup, productItem remarks, shipmentItemList26632026 volumeM3, shipmentItemList26632376 volumeM3, shipmentItem systemId, shipmentItem shipmentItemId, shipmentItem shippingUnit, shipmentItem reference1, shipmentItem reference2, shipmentItem reference3, shipmentItem labelInfo, shipmentItem containerNumber,  lengthM,  widthM,  heightM,  volumeM3, shipmentItem computedItemWeightKg, shipmentItem weightKg, shipmentItem totWeightKg, shipmentItem totalLdm, shipmentItem stackable]


				for (DataFetchable myDataFetchable : myFetchFields) {
					if (shouldHandle) {
/ JA
						myDataFetchable.fetchData();
/ TODO
/ Dit is WH oude code, met JBoss SEAM niet nodig	,
...
				theFetchedData = getForm().getValueObjects();
/s
FormTag.getValueObjects() line: 472	
	public ArrayList<EntityInterface> getValueObjects() {
		return theValueObjects;

[ShipmentOrder: SH000000105(SystemId:26632024), RSAFTER: Tue Apr 29 06:58:00 CEST 2014, RSBEFORE: Thu May 01 10:43:00 CEST 2014, REAFTER: Fri May 16 16:00:00 CEST 2014, REBEFORE: Mon May 19 17:00:00 CEST 2014, PSAFTER: Wed May 14 16:00:00 CEST 2014, PSBEFORE: Wed May 14 16:00:00 CEST 2014, PEAFTER: 2014-05-22 17:00:00.0, PEBEFORE: 2014-05-16 17:00:00.0, AS: 2014-05-15 16:30:00.0, AE: null, RELEASE:null, PRELEASE:null, CLOSE:null, ShipmentOrder: SH000000105(SystemId:26632024), ShipmentOrder: SH000000105(SystemId:26632024), ShipmentOrder: SH000000105(SystemId:26632024), ShipmentOrder: SH000000105(SystemId:26632024), com.mpobjects.oms.model.entity.VirtualParty@72bc93e9[,], com.mpobjects.oms.model.entity.VirtualParty@72bc93e9[,], ShipmentOrder: SH000000105(SystemId:26632024), ShipmentOrder: SH000000105(SystemId:26632024), com.mpobjects.oms.model.entity.VirtualParty@3a92e0d8[,], com.mpobjects.oms.model.entity.VirtualParty@3a92e0d8[,], ShipmentOrder: SH000000105(SystemId:26632024), ShipmentOrder: SH000000105(SystemId:26632024), com.mpobjects.oms.model.entity.VirtualParty@e7a2f3[,], com.mpobjects.oms.model.entity.VirtualParty@e7a2f3[,], com.mpobjects.oms.model.entity.shipmentorderparty.ShipmentOrderParty@4ef1aac1[shipmentOrder=ShipmentOrder: SH000000105(SystemId:26632024),name=,partyTypeGroup=theSystemId: 26632057PartyTypeGroup :BILL_TO], com.mpobjects.oms.model.entity.shipmentorderparty.ShipmentOrderParty@4ef1aac1[shipmentOrder=ShipmentOrder: SH000000105(SystemId:26632024),name=,partyTypeGroup=theSystemId: 26632057PartyTypeGroup :BILL_TO], com.mpobjects.oms.model.entity.shipmentorderparty.ShipmentOrderParty@4ef1aac1[shipmentOrder=ShipmentOrder: SH000000105(SystemId:26632024),name=,partyTypeGroup=theSystemId: 26632057PartyTypeGroup :BILL_TO], com.mpobjects.oms.model.entity.shipmentorderparty.ShipmentOrderParty@4ef1aac1[shipmentOrder=ShipmentOrder: SH000000105(SystemId:26632024),name=,partyTypeGroup=theSystemId: 26632057PartyTypeGroup :BILL_TO], PRODUCT_ITEM id:null(systemId:0), shipmentItem: 010(systemId:26632026, labelInfo:0000001056177), shipmentItem: 020(systemId:26632376, labelInfo:0000001056179), com.mpobjects.oms.control.shipmentorder.ShipmentItemFormBean/id:0, shipmentItem: null(systemId:0, labelInfo:null), Volume [0], Weight [null], Length [0], Width [0], Height [0], shipmentItem: null(systemId:0, labelInfo:null), shipmentItem: null(systemId:0, labelInfo:null), ShipmentOrder: SH000000105(SystemId:26632024), ShipmentOrder: SH000000105(SystemId:26632024), 8000/SH000000105/DELIVERY/26632538]


			return theFetchedData;
[ShipmentOrder: SH000000105(SystemId:26632024), RSAFTER: Wed Apr 30 06:58:00 CEST 2014, RSBEFORE: Thu May 01 10:43:00 CEST 2014, REAFTER: Fri May 16 16:00:00 CEST 2014, REBEFORE: Mon May 19 17:00:00 CEST 2014, PSAFTER: 2014-05-15 16:00:00.0, PSBEFORE: 2014-05-15 16:00:00.0, PEAFTER: 2014-05-16 17:00:00.0, PEBEFORE: 2014-05-15 17:00:00.0, AS: 2014-05-15 16:30:00.0, AE: null, RELEASE:null, PRELEASE:null, CLOSE:null, ShipmentOrder: SH000000105(SystemId:26632024), ShipmentOrder: SH000000105(SystemId:26632024), ShipmentOrder: SH000000105(SystemId:26632024), ShipmentOrder: SH000000105(SystemId:26632024), com.mpobjects.oms.model.entity.VirtualParty@3ca2ee68[,], com.mpobjects.oms.model.entity.VirtualParty@3ca2ee68[,], ShipmentOrder: SH000000105(SystemId:26632024), ShipmentOrder: SH000000105(SystemId:26632024), com.mpobjects.oms.model.entity.VirtualParty@6cd20cf1[,], com.mpobjects.oms.model.entity.VirtualParty@6cd20cf1[,], ShipmentOrder: SH000000105(SystemId:26632024), ShipmentOrder: SH000000105(SystemId:26632024), com.mpobjects.oms.model.entity.VirtualParty@524fda07[,], com.mpobjects.oms.model.entity.VirtualParty@524fda07[,], com.mpobjects.oms.model.entity.shipmentorderparty.ShipmentOrderParty@277077f1[shipmentOrder=ShipmentOrder: SH000000105(SystemId:26632024),name=,partyTypeGroup=theSystemId: 26632057PartyTypeGroup :BILL_TO], com.mpobjects.oms.model.entity.shipmentorderparty.ShipmentOrderParty@277077f1[shipmentOrder=ShipmentOrder: SH000000105(SystemId:26632024),name=,partyTypeGroup=theSystemId: 26632057PartyTypeGroup :BILL_TO], com.mpobjects.oms.model.entity.shipmentorderparty.ShipmentOrderParty@277077f1[shipmentOrder=ShipmentOrder: SH000000105(SystemId:26632024),name=,partyTypeGroup=theSystemId: 26632057PartyTypeGroup :BILL_TO], com.mpobjects.oms.model.entity.shipmentorderparty.ShipmentOrderParty@277077f1[shipmentOrder=ShipmentOrder: SH000000105(SystemId:26632024),name=,partyTypeGroup=theSystemId: 26632057PartyTypeGroup :BILL_TO], PRODUCT_ITEM id:null(systemId:0), shipmentItem: 010(systemId:26632026, labelInfo:0000001056177), shipmentItem: 020(systemId:26632376, labelInfo:0000001056179), com.mpobjects.oms.control.shipmentorder.ShipmentItemFormBean/id:0, shipmentItem: null(systemId:0, labelInfo:null), Volume [0], Weight [null], Length [0], Width [0], Height [0], shipmentItem: null(systemId:0, labelInfo:null), shipmentItem: null(systemId:0, labelInfo:null), ShipmentOrder: SH000000105(SystemId:26632024), ShipmentOrder: SH000000105(SystemId:26632024), 8000/SH000000105/DELIVERY/26632538]

/t
	public void handleSave() throws java.lang.Exception {
			ShipmentOrderVO myVO = (ShipmentOrderVO) getValueObject();
/ D
ShipmentOrder: SH000000105(SystemId:26632024)
////////////////////////////////////////////////////////////////////////
/ de theFetchedData hierboven is in fields in myVO	,
myVO.
	theDateSetVO	DateSetVO  (id=18717)	
		theRequestedEndAfter	Date  (id=18798)	
Fri May 16 16:00:00 CEST 2014
		theRequestedStartAfter	Date  (id=18800)	
Tue Apr 29 06:58:00 CEST 2014
	theRequestedTotalLoadingMeters	BigDecimal  (id=18762)	
0.8000000000000000444089209850062616169452667236328125
	theRequestedTotalWeightKg	BigDecimal  (id=18768)	
80
/ Uit de form dus	,
/ De nieuwe	,

			}else{
				myVO = ShipmentOrderUtil.getShipmentOrderFacadeLocal().updateShipmentOrder(myVO, true, true);

/c
package com.mpobjects.oms.model.service;
public class ShipmentOrderServiceImpl implements ShipmentOrderService {
	public ShipmentOrderVO updateShipmentOrder(ShipmentOrderVO aShipmentOrder, boolean propagateChange, boolean lastUpdateCheck) {
				myOldVO = shipmentOrderDao.getBySystemId(aShipmentOrder.getSystemId());
myOldVO
	theDateSetVO
		theRequestedStartAfter	Date  (id=18921)	
Wed Apr 30 06:58:00 CEST 2014
		theRequestedEndAfter
Thu May 15 16:00:00 CEST 2014
/ De OUDE, uit de DB	,

			return updateShipmentOrder(aShipmentOrder, new TMSEventContext(), propagateChange);
/c
	public ShipmentOrderVO updateShipmentOrder(ShipmentOrderVO aShipmentOrder, TMSEventContext anEventContext, boolean propagateChange) {
			ShipmentOrderVO myOldVO = getOld(aShipmentOrder);

/ Intermezzo

/ verschil shipmentOrderDao.getBySystemId/getOld	,

/ getBySystemId = uit persistence context
/ getOld=ui db	,

	public Type getOld(final Type aCurrent) {
			lookupThing = sessionImpl.getPersistenceContext().getEntity(key);
/ = getBySystemId
/ uit persistence context	,
			EntityEntry entry = sessionImpl.getPersistenceContext().getEntry(lookupThing);
/ Hibernate obj,	 
					loadedState = persister.getPropertyValues(lookupThing, sessionImpl.getEntityMode());
/ uit db	,
			Object result = sessionImpl.instantiate(persister.getEntityName(), entityId);
			persister.setPropertyValues(result, loadedState, EntityMode.POJO);
/ result in Java obj met data uit db	,

/ Einde Intermezzo


/ Intermezzo

	session.update(item)
/ maakt detached item persistent
/ TODO (als item transient)

	item3=session.merge(item)
/ laat item onveranderd, copies item's state in persistent item2	, 
/ er moet dus eerder	,
	item2=session.get(...
/ als als item transient is (new) , dan blijft dat zo	,



/ Einde Intermezzo


/t
	public ShipmentOrderVO updateShipmentOrder(ShipmentOrderVO aShipmentOrder, TMSEventContext anEventContext, boolean propagateChange) {
			ShipmentOrderVO myOldVO = getOld(aShipmentOrder);
/ D


				myNew = shipmentOrderDao.merge(aShipmentOrder);
/ calls ShipmentItem.<init>, 	WH voor het nieuwe P elem	,
/ WH ManyToOne	,
/s
ShipmentOrderDaoImpl(GenericHibernateDAO<Type>).merge(Type) line: 421	
			return type.cast(getHibernateTemplate().merge(anObject));
/ type=ShipmentOrderVO.class
/s
ShipmentOrderVO(LogisticsOrderVO).getRequestedTotalColli() line: 560	
		recalculate();
/s
ShipmentOrderVO(LogisticsOrderVO).recalculate() line: 730	
		if (!theRecalculateFlag || !isCalculateEnabled()) {
/ JA	, 
theRecalculateFlag=false
isCalculateEnabled()=true
			return;

				myNew.performCustomRecalculation(myOldVO);
/ NIETS
				setDatesAndStatus(myNew);
/s
///////////////////////////////////
/ NB ERICJ
/ De dates uit sho form gaan we aanpassen met die uit de sa	,
	private void setDatesAndStatus(ShipmentOrderVO aShipmentOrderVO) throws AbstractException {

/ aShipmentOrderVO is NEW	,
				DateSetVO myDateSet = aShipmentOrderVO.getDateSetVO();
theRequestedEndAfter	Date  (id=13304)	
Fri May 16 16:00:00 CEST 2014
theRequestedStartAfter	Date  (id=13309)	
Tue Apr 29 06:58:00 CEST 2014
/ NIEUWE	,
				Collection myServiceActionList = aShipmentOrderVO.getServiceActionList();
				for (Iterator myIterator = myServiceActionList.iterator(); myIterator.hasNext();) {
						ServiceActionVO myServiceActionVO = (ServiceActionVO) myIterator.next();
myServiceActionVO	ServiceActionVO  (id=13418)	
	entityDetails	HashMap<K,V>  (id=13426)	
	shipmentOrderVO	ShipmentOrderVO_$$_javassist_106  (id=13111)	
	theOrderStatusVO	OrderStatusVO_$$_javassist_123  (id=13143)	
	theConsignmentVO	ConsignmentVO_$$_javassist_100  (id=13453)	
	theDateSetVO	DateSetVO  (id=13455)	
	theFromPartyVO	VirtualParty  (id=13458)	
	theToPartyVO	VirtualParty  (id=13488)	

							myFirst = myServiceActionVO;
							myLast = myServiceActionVO;
								myFirstPlanned = myServiceActionVO;
								myLastPlanned = myServiceActionVO;
if (
	(
		myServiceActionVO.getOrderStatusVO().isStarted() || 
/ JA, 8000
		myServiceActionVO.getOrderStatusVO().isEnded() || 
		myServiceActionVO.getOrderStatusVO().isClosed()
	) && 
	(
		myFirstShipped == null || 
/ JA
		myServiceActionVO.getDateSetVO().before(myFirst.getDateSetVO())
	)
) {
/ JA
							myFirstShipped = myServiceActionVO;
							myAllEndedOrClosed = false;
							myAllClosed = false;


				if (myFirstPlanned != null) {
					myDateSet.setPlannedStartAfter(myFirstPlanned.getDateSetVO().getPlannedStartAfter());
					myDateSet.setPlannedStartBefore(myFirstPlanned.getDateSetVO().getPlannedStartBefore());


				if (myLastPlanned != null) {
					myDateSet.setPlannedEndAfter(myLastPlanned.getDateSetVO().getPlannedEndAfter());
					myDateSet.setPlannedEndBefore(myLastPlanned.getDateSetVO().getPlannedEndBefore());

				if (myFirstShipped != null) {
					myDateSet.setActualStart(myFirstShipped.getDateSetVO().getActualStart());

				if (myLast != null && myAllEndedOrClosed) {
				} else {
					myDateSet.setActualEnd(null);


				} else if (myDateSet.isStarted()) {
					aShipmentOrderVO.setOrderStatusVO(MpoBeanFactory.getBean(OrderStatusDAO.class).getByCode(OrderStatusVO.STATUS_SHIPPED));
ShipmentOrderVO	ShipmentOrderVO_$$_javassist_106  (id=18181)	
	handler	JavassistLazyInitializer  (id=18211)	
		target	ShipmentOrderVO  (id=18214)	
			theOrderStatusVO	OrderStatusVO_$$_javassist_123  (id=18238)	
				handler	JavassistLazyInitializer  (id=18242)	
					target	OrderStatusVO  (id=18261)	
						code	"8000" (id=18264)	
						description	"STARTED" (id=18265)	

				}
				MpoBeanFactory.getBean(CustomerStatusService.class).updateStatusNoUpdate(aShipmentOrderVO);
/ TODO

/calls	,
/s
ShipmentOrderVO(LogisticsOrderVO).getRequestedTotalColli() line: 560	
		recalculate();
/s
ShipmentOrderVO(LogisticsOrderVO).recalculate() line: 730	
		if (!theRecalculateFlag || !isCalculateEnabled()) {
/ JA	, 
theRecalculateFlag=false
isCalculateEnabled()=true
			return;
/ TODO

/t
ShipmentOrderServiceImpl.updateShipmentOrder(ShipmentOrderVO, TMSEventContext, boolean) line: 1653	
				setDatesAndStatus(myNew);
/ D
				applySyncFlags(myNew);
/ NIETS
				handleTimeWindow(myNew);
/ NIETS
				ShipmentOrderPartyUtil.createShipmentOrderParties(myNew);
/ NIETS
/ want	,
/s
	public static void createShipmentOrderParties(ShipmentOrderVO aShipmentOrder) {
		myPartyGroupsToCreate.addAll(MpoBeanFactory.getBean(PartyTypeGroupDAO.class).getShowOnShipmentOrder());
[theSystemId: 26632057PartyTypeGroup :BILL_TO]
/s

/ Intermezzo

/ Eerst doet	,
/s
PartyTypeGroupDAOHibernate.getShowOnShipmentOrder() line: 45	
		DetachedCriteria myDetachedCriteria = DetachedCriteria.forClass(PartyTypeGroupVO.class).add(Property.forName("showOnSho").eq(true)).add(Property.forName("system").eq(false)).add(Property.forName("deleted").eq(false));
		HibernateTemplate myTemplate = getHibernateTemplate();
		myTemplate.setCacheQueries(true);
		return myTemplate.findByCriteria(myDetachedCriteria);
	}
/s
CriteriaImpl.list() line: 347	
/s
SessionImpl.list(CriteriaImpl) line: 1709	
/s
SessionImpl.autoFlushIfRequired(Set) line: 1185	
/s
ShipmentOrderVO(LogisticsOrderVO).getRequestedTotalColli() line: 560	
/s
ShipmentOrderVO(LogisticsOrderVO).recalculate() line: 734	
/ maar is weer false	,

/ Q ERICJ
/ TODO

/ Einde Intermezzo

/ Intermezzo

/ tr begin/ commit	,

/ In core-base.xml zien we de tr config	,

/ we hebben save shipment order gedaan	, 

/ 1ste spring bean	,

ShipmentOrderSaveAction(ShipmentOrderSaveAction).handleSave() line: 90	
			} else {
				myVO = ShipmentOrderUtil.getShipmentOrderFacadeLocal().updateShipmentOrder(myVO, true, true);
/s
$Proxy215.updateShipmentOrder(ShipmentOrderVO, boolean, boolean) line: not available	
...
TransactionInterceptor(TransactionAspectSupport).invokeWithinTransaction(Method, Class, TransactionAspectSupport$InvocationCallback) line: 260	
ShipmentOrderServiceImpl.updateShipmentOrder(ShipmentOrderVO, boolean, boolean) line: 1614


/ proxy naar een ServiceOrderServiceImpl	,
-> ShipmentOrderServiceImpl.updateShipmentOrder(ShipmentOrderVO, boolean, boolean) line: 1614	

/ klopt	, 
$ vi oms-service.sb.xml
...




/ Einde Intermezzo


		DetachedCriteria myDetachedCriteria = DetachedCriteria.forClass(PartyTypeGroupVO.class).add(Property.forName("showOnSho").eq(true)).add(Property.forName("system").eq(false)).add(Property.forName("deleted").eq(false));

/ Intermezzo

mpo=> select*from party_type_group\g
 system_id | party_type_group |  description  | is_deleted | show_on_sho | show_on_so | is_system 
-----------+------------------+---------------+------------+-------------+------------+-----------
  26632057 | BILL_TO          | Bill to party |          0 |           1 |          0 |         0
(1 row)

/ Einde Intermezzo



	myPartyGroupsToCreate.addAll(MpoBeanFactory.getBean(PartyTypeGroupDAO.class).getShowOnShipmentOrder());
[theSystemId: 26632057PartyTypeGroup :BILL_TO]
	for (ShipmentOrderParty myParty : aShipmentOrder.getShipmentOrderParties()) {
/ 1 entry	,
[com.mpobjects.oms.model.entity.shipmentorderparty.ShipmentOrderParty@5d8dbaf1[shipmentOrder=ShipmentOrder: SH000000105(SystemId:26632024),name=,partyTypeGroup=theSystemId: 26632057PartyTypeGroup :BILL_TO]]

			PartyTypeGroupVO myPartyTypeGroupVO = myParty.getPartyTypeGroup();
			myPartyGroupsToCreate.remove(myPartyTypeGroupVO);
[]
/ er zat er 1 in , en die is er nu uit	, want die is er al	,


/ t
	public ShipmentOrderVO updateShipmentOrder(ShipmentOrderVO aShipmentOrder, TMSEventContext anEventContext, boolean propagateChange) {
				ShipmentOrderPartyUtil.createShipmentOrderParties(myNew);
/ D
				myNew.recalculate();
/  Herinner: myNew = shipmentOrderDao.merge(aShipmentOrder);	/ de sho uit het form	, NEW	,
/s
public abstract class LogisticsOrderVO extends EntityDetailSupport {
	public void recalculate() {
this	ShipmentOrderVO  (id=18214)	

			LogisticsOrderTotalsCalculator<? extends LogisticsOrderVO> calc = getLogisticsOrderTotalsCalculator(false);
calc	ShipmentOrderTotalsCalculator  (id=18757)	

			Collection items = getCustomerLogisticsOrderList();
/s
	protected Collection<LogisticsOrderVO> getCustomerLogisticsOrderList() {
		myList.addAll(getShipmentItemList());
[shipmentItem: 010(systemId:26632026, labelInfo:0000001056177), shipmentItem: 020(systemId:26632376, labelInfo:0000001056179)]
/ Doe	,
mpo=> select*from shipment_item where shipment_order_systemid=26632024\g
/ er zijn 2 rows	,
		myList.addAll(getProductItemList());
/ geen	,

/t
			Collection items = getCustomerLogisticsOrderList();
[0]	ShipmentItemVO  (id=18766)	
[1]	ShipmentItemVO  (id=18767)	
shipmentItem: 010(systemId:26632026, labelInfo:0000001056177)
shipmentItem: 020(systemId:26632376, labelInfo:0000001056179)
/ D
			} else {
				for (Object o : items) {
						LogisticsOrderVO item = (LogisticsOrderVO) o;
							item.recalculate();
/s
///////////////////////////////////////////////////////////////////////
/ NB ERICJ
/ recalc total weight , volumen uit shipment items en set in sho
ShipmentItemVO.recalculate() line: 689	
	public void recalculate() {
		if (shouldRecalculate()) {
			if (mustRecalculateRequestedValues("volume")) {
false
			if (mustRecalculateRequestedValues("weight")) {
false
/ want	,
/s
ShipmentItemVO(LogisticsOrderVO).mustRecalculateRequestedValues(String) line: 1148	
		String myEntityName = getFormattedEntity();
"shipmentitem" (id=18790)	
		String myPropertyName = myEntityName + ".recalculate.requested." + aValueType;
"shipmentitem.recalculate.requested.weight" (id=18795)	
		boolean myValue = ApplicationPropertyManager.getInstance().getModuleOrganizationProperty(getOrganizationVO(), "oms", myPropertyName, true);
false
		return myValue;

/t
ShipmentItemVO.recalculate() line: 689	
			if (mustRecalculateRequestedValues("ldm")) {
false
			recalculateComputedItemWeightKg();
/ TODO

/t
ShipmentOrderVO(LogisticsOrderVO).recalculate() line: 759	
							item.recalculate();
/ D
							calc.addValues(item);

/s
ShipmentOrderTotalsCalculator(LogisticsOrderTotalsCalculator<T>).addValues(LogisticsOrderVO) line: 96	
this	ShipmentOrderTotalsCalculator  (id=18786)	

		if (calculateRequestedTotalColli) {
true
			addColliValue(aItem);
/s
ShipmentOrderTotalsCalculator(LogisticsOrderTotalsCalculator<T>).addColliValue(LogisticsOrderVO) line: 379	
this	ShipmentOrderTotalsCalculator  (id=18786)	
		BigDecimal val = aItem.getRequestedTotalColli();
1
		if (requestedTotalColli == null) {
/ JA
			requestedTotalColli = val;
/t
		}
		if (calculateRequestedTotalItems) {
true
			addItemsValue(aItem);
/s
ShipmentOrderTotalsCalculator(LogisticsOrderTotalsCalculator<T>).addItemsValue(LogisticsOrderVO) line: 379	
this	ShipmentOrderTotalsCalculator  (id=18786)	
		BigDecimal val = aItem.getRequestedTotalItems();
null
			requestedTotalItems = val;
/ NIET
/ this.requestedTotalItems=null	toch	,
/t
		}
		if (calculateRequestedTotalWeight) {
true
			addWeightValue(aItem);
/s
ShipmentOrderTotalsCalculator.addWeightValue(LogisticsOrderVO) line: 90	
this	ShipmentOrderTotalsCalculator  (id=18786)	
				default:
					val = shipItem.getWeightKg();
40.00
			if (requestedTotalWeight == null) {
/ JA
				requestedTotalWeight = val;
/t
		}
		if (calculateRequestedTotalVolume) {
true
			addVolumeValue(aItem);
/s
ShipmentOrderTotalsCalculator(LogisticsOrderTotalsCalculator<T>).addVolumeValue(LogisticsOrderVO) line: 379	
		BigDecimal val = aItem.getRequestedTotalVolumeM3();
1.400
		if (requestedTotalVolume == null) {
/ JA
			requestedTotalVolume = val;
/t
		}
		if (calculateRequestedTotalLDM) {
false
			addLDMValue(aItem);
/ NIET
		}
		if (calculateRequestedTotalValue) {
true
			addValueValue(aItem);
/s
ShipmentOrderTotalsCalculator(LogisticsOrderTotalsCalculator<T>).addValueValue(LogisticsOrderVO) line: 365	
this	ShipmentOrderTotalsCalculator  (id=18786)	
		BigDecimal val = aItem.getRequestedTotalValue();
null
			return;

			requestedTotalValue = val;
/ NIET
/ maar this.requestedTotalValue=null
/t
		}
		if (calculateRequestedTotalAltValue) {
true
			addAltValueValue(aItem);
/s
ShipmentOrderTotalsCalculator(LogisticsOrderTotalsCalculator<T>).addAltValueValue(LogisticsOrderVO) line: 313	
this	ShipmentOrderTotalsCalculator  (id=18786)	
		BigDecimal val = aItem.getRequestedAltTotalValue();
null
			return;

			requestedTotalAltValue = val;
/ NIET
/ maar requestedTotalAltValue=null toch	,
/t
		}

/ t
ShipmentOrderVO(LogisticsOrderVO).recalculate() line: 759	
/ Volgende shipment item	,
			for (Object o : items) {
							calc.addValues(item);
/ s
ShipmentOrderTotalsCalculator(LogisticsOrderTotalsCalculator<T>).addValues(LogisticsOrderVO) line: 101	
		if (calculateRequestedTotalColli) {
/ JA
			addColliValue(aItem);
/s
ShipmentOrderTotalsCalculator(LogisticsOrderTotalsCalculator<T>).addColliValue(LogisticsOrderVO) line: 335	
		BigDecimal val = aItem.getRequestedTotalColli();
1
		} else {
			requestedTotalColli = requestedTotalColli.add(val);
2
/t
		}
		if (calculateRequestedTotalItems) {
true
			addItemsValue(aItem);
null
		}
		if (calculateRequestedTotalWeight) {
			addWeightValue(aItem);
0.00
/dus 
				requestedTotalWeight = requestedTotalWeight.add(val);
/ voegt 0.00 toe	,
		}
		if (calculateRequestedTotalVolume) {
true
			addVolumeValue(aItem);
0.00
/ requestedTotalVolume=1.400 blijft	,
		}
		if (calculateRequestedTotalLDM) {
false
			addLDMValue(aItem);
		}
		if (calculateRequestedTotalValue) {
true
			addValueValue(aItem);
null 
		}
		if (calculateRequestedTotalAltValue) {
true,
			addAltValueValue(aItem);
null

/t
ShipmentOrderVO(LogisticsOrderVO).recalculate() line: 765	
			calc.applyChanges();
/s
ShipmentOrderTotalsCalculator(LogisticsOrderTotalsCalculator<T>).applyChanges() line: 135	
this	ShipmentOrderTotalsCalculator  (id=18786)	
entity	ShipmentOrderVO  (id=18214)	
requestedTotalVolume	BigDecimal  (id=18858)	
/ zojuist berekend
requestedTotalWeight	BigDecimal  (id=18854)	
/ zojuist berekend

		if (calculateRequestedTotalColli && requestedTotalColli != null) {
/ JA
			entity.setRequestedTotalColli(requestedTotalColli);

		if (calculateRequestedTotalItems && requestedTotalItems != null) {
/ NEE
		if (calculateRequestedTotalWeight && requestedTotalWeight != null) {
/ JA
			entity.setRequestedTotalWeightKg(requestedTotalWeight);

		if (calculateRequestedTotalVolume && requestedTotalVolume != null) {
/ JA
			entity.setRequestedTotalVolumeM3(requestedTotalVolume);

		if (calculateRequestedTotalLDM && requestedTotalLDM != null) {
/ NEE

		if (valueCurrencyVO != null) {
/ NEE
		if (calculateRequestedTotalValue && requestedTotalValue != null) {
/ NEE
		if (altValueCurrencyVO != null) {
/ NEE
		if (calculateRequestedTotalAltValue && requestedTotalAltValue != null) {
/ NEE

/t
ShipmentOrderVO(LogisticsOrderVO).recalculate() line: 765	
			calc.applyChanges();
/ D

/t
ShipmentOrderServiceImpl.updateShipmentOrder(ShipmentOrderVO, TMSEventContext, boolean) line: 1659	
				myNew.recalculate();
/ D

				updatePricePart(myNew);
/ NIETS
				myNew.calculatePrice();
/s
ShipmentOrderVO.calculatePrice() line: 351	
		CurrencyGroup myGroup = getPriceGroup();
{}
/ want	,
/s
ShipmentOrderVO.getPriceGroup() line: 1286	
		Collection<ShipmentOrderPricePartVO> myList = getShipmentOrderPricePartList();
[]
		CurrencyGroup myGroup = new CurrencyGroup();
		for (ShipmentOrderPricePartVO myCost : myList) {
NEE
		return myGroup;
{}

/t
	public void calculatePrice() {
		CurrencyGroup myGroup = getPriceGroup();
/ D
{}
		setPrice(myGroup.getAmount());
/ sets thePrice=null in deze ShipmentOrderVO	,
		setPriceCurrencyVO(myGroup.getCurrency());
/ sets thePriceCurrencyVO=null in deze ShipmentOrderVO	,
		setPriceMethod(myGroup.getMethod());
/ sets  priceMethod in deze ShipmentOrderVO =
aPriceMethod	TotalAmountCalculationMethod  (id=13055)	
NONE

/t
ShipmentOrderServiceImpl.updateShipmentOrder(ShipmentOrderVO, TMSEventContext, boolean) line: 1664	
				myNew.calculatePrice();
/ D
				myNew.calculateTotalCosts();
/s
ShipmentOrderVO.calculateTotalCosts() line: 366	
		Collection<ShipmentOrderCostPartVO> myCostList = getShipmentOrderCostPartList();
[SystemId: 26632549 Amount: 50.00, Type: 26632542        50.00, 
SystemId: 26632548 Amount: 11.91, Type: 26632543        11.91, 
SystemId: 26632550 Amount: 91.63, Type: 26632541        91.63]

		CurrencyGroup myEstimate = new CurrencyGroup();
		for (ShipmentOrderCostPartVO myCost : myCostList) {
			switch (myCost.getStatus()) {
				case ESTIMATED:
					myEstimate.add(myCost.getCurrencyVO(), myCost.getAmount());

myEstimate	CurrencyGroup  (id=18913)	
153.54 EUR

		if (!myActual.getMethod().equals(TotalAmountCalculationMethod.NONE)) {
/ NEE
/ TODO
			setCost(myActual.getAmount());
			setCostCurrency(myActual.getCurrency());
			setCostMethod(myActual.getMethod());
		} else {
/ JA
			setCost(myEstimate.getAmount());
cost=153.54 in de ShipmentOrderVO	,
			setCostCurrency(myEstimate.getCurrency());
costCurrencySystemId = costCurrency.getSystemId() , costCurrency is proxy naar CurrencyVO={systemId=7001, code="EUR"
			setCostMethod(myEstimate.getMethod());
costMethod in de ShipmentOrderVO= method	TotalAmountCalculationMethod  (id=13070)	SINGLE

/t
ShipmentOrderServiceImpl.updateShipmentOrder(ShipmentOrderVO, TMSEventContext, boolean) line: 1666	
			myNew.calculateTotalCosts();
/ D
			myNew = shipmentOrderDao.save(myNew);
/ TODO

ShipmentOrderServiceImpl.updateShipmentOrder(ShipmentOrderVO, TMSEventContext, boolean) line: 1673	
				myNew = shipmentOrderDao.merge(aShipmentOrder);
/s
/ Niet altijd	,
/ TODO
ShipmentOrderVO(LogisticsOrderVO).getRequestedTotalItems() line: 573	
		recalculate();

				getTriggerHandler().handleUpdate(myOldVO, myNew);
/ Doet NIETS	,
/ D

					MpoBeanFactory.getBean(ServiceActionService.class).handleShipmentOrderChange(myOldVO, myNew);
/s
ServiceActionServiceImpl.handleShipmentOrderChange(ShipmentOrderVO, ShipmentOrderVO) line: 483	
			updateServiceActionsForShipmentOrder(myOldShipmentOrderVO, mynewShipmentOrderVO, new TMSEventContext());
/s
public class ServiceActionServiceImpl implements ServiceActionService {
	public void updateServiceActionsForShipmentOrder(ShipmentOrderVO anOldShipmentOrderVO, ShipmentOrderVO aNewShipmentOrderVO, TMSEventContext anEventContext)

		boolean shouldUpdateToParty = ...
false
		boolean shouldUpdateFromParty = ... 
false
		Party myNewFromParty = aNewShipmentOrderVO.getFromPartyVO();
myNewFromParty	VirtualParty  (id=21305)	
	address	"Bottelweg 11" (id=21330)	
	city	"Utrecht" (id=21332)	
	countryVO	Country  (id=21336)	
		code	"NL" (id=21347)	

		Party myNewToParty = aNewShipmentOrderVO.getToPartyVO();
myNewToParty	VirtualParty  (id=21359)	
	address	"Kirchstrasse 88" (id=21372)	
	city	"Hamburg" (id=21373)	
	countryVO	Country  (id=21383)	
		code	"DE" (id=21388)	

		Set<ServiceActionVO> myList = new HashSet<ServiceActionVO>();
		myList.addAll(aNewShipmentOrderVO.getServiceActionList());
[8000/SH000000105/DELIVERY/26632538]

			updateServiceAction(myServiceActionVO, anEventContext, true, true);
/s
ServiceActionServiceImpl.updateServiceAction(ServiceActionVO, TMSEventContext, boolean, boolean) line: 853	

			ServiceActionVO myOldServiceAction = getOld(aServiceAction);
			setDatesAndStatus(aServiceAction);
/s
ServiceActionServiceImpl.setDatesAndStatus(ServiceActionVO) line: 1074	

		// Calculate the requested dates.
		ShipmentOrderVO myShipmentOrderVO = shipmentOrderDao.getBySystemId(aServiceActionVO.getShipmentOrderVO().getSystemId());
/ NEW , uit form	,
		if (myShipmentOrderVO != null) {
			calculateMileStones(myShipmentOrderVO);
/s
ServiceActionServiceImpl.calculateMileStones(ShipmentOrderVO) line: 198	

			MileStoneCalculatorFactory.getInstance().getMileStoneCalculator().calculate(aShipmentOrderVO);
/s
BasicMileStoneCalculator.calculate(ShipmentOrderVO) line: 101	

			myMode = ApplicationPropertyManager.getInstance().getModuleProperty("oms", "milestone.serviceaction.calculation.mode", "BACKWARD").trim();
		if (myMode.equalsIgnoreCase("BACKWARD")) {
/ JA
			theCalculationMode = PathRequestedDateMode.BACKWARD;


		String myTimeWindowsMode = ApplicationPropertyManager.getInstance().getModuleProperty("oms", "milestone.serviceaction.timewindow.mode", "none").trim();
		if (myTimeWindowsMode.equalsIgnoreCase("none")) {
/ JA
			theTimeWindowsMode = NONE;


		String myReplanMode = ApplicationPropertyManager.getInstance().getModuleProperty("oms", "milestone.serviceaction.recalculate.dates", "false").trim();
true
		theRecalculateDatesFlag = "true".equals(myReplanMode);
		theShipmentOrderVO = aShipmentOrderVO;

			if (isEndDateBased() || theTimeWindowsMode == USE_SLACK) {
				calculateEndBefore();
/s
BasicMileStoneCalculator.calculateEndBefore() line: 246	
		Date myShipmentOrderEnd = theShipmentOrderVO.getDateSetVO().getRequestedEndBefore();
/ NEW, uit form	,
		Date myEndDate = myShipmentOrderEnd;
			for (ServiceActionVO myAction : myReverse.descendingSet()) {
				setRequestedStartAndEndBefore(myAction, myEndDate);
/s
BasicMileStoneCalculator.setRequestedStartAndEndBefore(ServiceActionVO, Date) line: 398	

		if (myDateSet.getRequestedEndBefore() == null || recalculateRequestedDates()) {
false || true = true
			myDateSet.setRequestedEndBefore(aRequestedEndBefore);


/t
BasicMileStoneCalculator.calculateEndBefore() line: 257	
				setRequestedStartAndEndBefore(myAction, myEndDate);
/ D
					copyBeforeToAfter(myAction);
/s
	private void copyBeforeToAfter(ServiceActionVO aServiceActionVO) {
		DateSetVO myDateSet = aServiceActionVO.getDateSetVO();
		myDateSet.setRequestedEndAfter(new Date(myDateSet.getRequestedEndBefore().getTime() - endTimeWindow));
		myDateSet.setRequestedStartAfter(new Date(myDateSet.getRequestedStartBefore().getTime() - startTimeWindow));
/ er is geen time window in sa	,
req. start after=req start before
req. end after=req end before
/ TODO

/t
ServiceActionServiceImpl.setDatesAndStatus(ServiceActionVO) line: 1079	
			calculateMileStones(myShipmentOrderVO);
/ D

/ Intermezzo

/ In de service layer, in een ServiceActionServiceImpl bijv, zitten ook andere services , en dao's
getServiceActionDAO()
getServiceOrderService()
getShipmentOrderDAO()
getShipmentOrderService()
getConsignmentService()
/ er is GEEN getConsignmentDAO()	,

/ HIER HIER

/ MAANDAG
emon Thread [http-0.0.0.0-8080-5] (Suspended (breakpoint at line 276 in GenericHibernateDAO))	
	ConsignmentDAOImpl(GenericHibernateDAO<Type>).getBySystemId(int) line: 276	
	GeneratedMethodAccessor933.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 606	
	AopUtils.invokeJoinpointUsingReflection(Object, Method, Object[]) line: 317	
	ReflectiveMethodInvocation.invokeJoinpoint() line: 183	
	ReflectiveMethodInvocation.proceed() line: 150	
	MethodInvocationProceedingJoinPoint.proceed() line: 80	
	PerformanceMeasurementAspect.measurePerformance(ProceedingJoinPoint) line: 56	
	GeneratedMethodAccessor81.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 606	
	AspectJAroundAdvice(AbstractAspectJAdvice).invokeAdviceMethodWithGivenArgs(Object[]) line: 621	
	AspectJAroundAdvice(AbstractAspectJAdvice).invokeAdviceMethod(JoinPoint, JoinPointMatch, Object, Throwable) line: 610	
	AspectJAroundAdvice.invoke(MethodInvocation) line: 65	
	ReflectiveMethodInvocation.proceed() line: 172	
	MethodBeforeAdviceInterceptor.invoke(MethodInvocation) line: 51	
	ReflectiveMethodInvocation.proceed() line: 161	
	TransactionInterceptor$1.proceedWithInvocation() line: 96	
	TransactionInterceptor(TransactionAspectSupport).invokeWithinTransaction(Method, Class, TransactionAspectSupport$InvocationCallback) line: 260	
	TransactionInterceptor.invoke(MethodInvocation) line: 94	
	ReflectiveMethodInvocation.proceed() line: 172	
	ExposeInvocationInterceptor.invoke(MethodInvocation) line: 91	
	ReflectiveMethodInvocation.proceed() line: 172	
	JdkDynamicAopProxy.invoke(Object, Method, Object[]) line: 204	
	$Proxy203.getBySystemId(int) line: not available	
	ConsignmentServiceImpl.getConsignment(int) line: 273	
	GeneratedMethodAccessor1328.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 606	
	AopUtils.invokeJoinpointUsingReflection(Object, Method, Object[]) line: 317	
	ReflectiveMethodInvocation.invokeJoinpoint() line: 183	
	ReflectiveMethodInvocation.proceed() line: 150	
	MethodBeforeAdviceInterceptor.invoke(MethodInvocation) line: 51	
	ReflectiveMethodInvocation.proceed() line: 161	
	ExposeInvocationInterceptor.invoke(MethodInvocation) line: 91	
	ReflectiveMethodInvocation.proceed() line: 172	
	JdkDynamicAopProxy.invoke(Object, Method, Object[]) line: 204	
	$Proxy229.getConsignment(int) line: not available	
	GeneratedMethodAccessor1328.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 606	
	AopUtils.invokeJoinpointUsingReflection(Object, Method, Object[]) line: 317	
	ReflectiveMethodInvocation.invokeJoinpoint() line: 183	
	ReflectiveMethodInvocation.proceed() line: 150	
	TransactionInterceptor$1.proceedWithInvocation() line: 96	
	TransactionInterceptor(TransactionAspectSupport).invokeWithinTransaction(Method, Class, TransactionAspectSupport$InvocationCallback) line: 260	
	TransactionInterceptor.invoke(MethodInvocation) line: 94	
	ReflectiveMethodInvocation.proceed() line: 172	
	JdkDynamicAopProxy.invoke(Object, Method, Object[]) line: 204	
	$Proxy230.getConsignment(int) line: not available	
	GeneratedMethodAccessor1328.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 606	
	AopUtils.invokeJoinpointUsingReflection(Object, Method, Object[]) line: 317	
	ReflectiveMethodInvocation.invokeJoinpoint() line: 183	
	ReflectiveMethodInvocation.proceed() line: 150	
	MethodBeforeAdviceInterceptor.invoke(MethodInvocation) line: 51	
	ReflectiveMethodInvocation.proceed() line: 161	
	ExposeInvocationInterceptor.invoke(MethodInvocation) line: 91	
	ReflectiveMethodInvocation.proceed() line: 172	
	JdkDynamicAopProxy.invoke(Object, Method, Object[]) line: 204	
	$Proxy230.getConsignment(int) line: not available	
	ServiceActionServiceImpl.setDatesAndStatus(ServiceActionVO) line: 1083	
	ServiceActionServiceImpl.updateServiceAction(ServiceActionVO, TMSEventContext, boolean, boolean) line: 866	
	ServiceActionServiceImpl.updateServiceActionsForShipmentOrder(ShipmentOrderVO, ShipmentOrderVO, TMSEventContext) line: 944	
	ServiceActionServiceImpl.handleShipmentOrderChange(ShipmentOrderVO, ShipmentOrderVO) line: 483	
	GeneratedMethodAccessor1723.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 606	
	AopUtils.invokeJoinpointUsingReflection(Object, Method, Object[]) line: 317	
	ReflectiveMethodInvocation.invokeJoinpoint() line: 183	
	ReflectiveMethodInvocation.proceed() line: 150	
	MethodBeforeAdviceInterceptor.invoke(MethodInvocation) line: 51	
	ReflectiveMethodInvocation.proceed() line: 161	
	ExposeInvocationInterceptor.invoke(MethodInvocation) line: 91	
	ReflectiveMethodInvocation.proceed() line: 172	
	JdkDynamicAopProxy.invoke(Object, Method, Object[]) line: 204	
	$Proxy243.handleShipmentOrderChange(ShipmentOrderVO, ShipmentOrderVO) line: not available	
	GeneratedMethodAccessor1723.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 606	
	AopUtils.invokeJoinpointUsingReflection(Object, Method, Object[]) line: 317	
	ReflectiveMethodInvocation.invokeJoinpoint() line: 183	
	ReflectiveMethodInvocation.proceed() line: 150	
	TransactionInterceptor$1.proceedWithInvocation() line: 96	
	TransactionInterceptor(TransactionAspectSupport).invokeWithinTransaction(Method, Class, TransactionAspectSupport$InvocationCallback) line: 260	
	TransactionInterceptor.invoke(MethodInvocation) line: 94	
	ReflectiveMethodInvocation.proceed() line: 172	
	JdkDynamicAopProxy.invoke(Object, Method, Object[]) line: 204	
	$Proxy244.handleShipmentOrderChange(ShipmentOrderVO, ShipmentOrderVO) line: not available	
	GeneratedMethodAccessor1723.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 606	
	AopUtils.invokeJoinpointUsingReflection(Object, Method, Object[]) line: 317	
	ReflectiveMethodInvocation.invokeJoinpoint() line: 183	
	ReflectiveMethodInvocation.proceed() line: 150	
	MethodBeforeAdviceInterceptor.invoke(MethodInvocation) line: 51	
	ReflectiveMethodInvocation.proceed() line: 161	
	ExposeInvocationInterceptor.invoke(MethodInvocation) line: 91	
	ReflectiveMethodInvocation.proceed() line: 172	
	JdkDynamicAopProxy.invoke(Object, Method, Object[]) line: 204	
	$Proxy244.handleShipmentOrderChange(ShipmentOrderVO, ShipmentOrderVO) line: not available	
	ShipmentOrderServiceImpl.updateShipmentOrder(ShipmentOrderVO, TMSEventContext, boolean) line: 1674	
	ShipmentOrderServiceImpl.updateShipmentOrder(ShipmentOrderVO, boolean, boolean) line: 1614	
	GeneratedMethodAccessor2177.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 606	
	AopUtils.invokeJoinpointUsingReflection(Object, Method, Object[]) line: 317	
	ReflectiveMethodInvocation.invokeJoinpoint() line: 183	
	ReflectiveMethodInvocation.proceed() line: 150	
	MethodBeforeAdviceInterceptor.invoke(MethodInvocation) line: 51	
	ReflectiveMethodInvocation.proceed() line: 161	
	ExposeInvocationInterceptor.invoke(MethodInvocation) line: 91	
	ReflectiveMethodInvocation.proceed() line: 172	
	JdkDynamicAopProxy.invoke(Object, Method, Object[]) line: 204	
	$Proxy214.updateShipmentOrder(ShipmentOrderVO, boolean, boolean) line: not available	
	GeneratedMethodAccessor2177.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 606	
	AopUtils.invokeJoinpointUsingReflection(Object, Method, Object[]) line: 317	
	ReflectiveMethodInvocation.invokeJoinpoint() line: 183	
	ReflectiveMethodInvocation.proceed() line: 150	
	TransactionInterceptor$1.proceedWithInvocation() line: 96	
	TransactionInterceptor(TransactionAspectSupport).invokeWithinTransaction(Method, Class, TransactionAspectSupport$InvocationCallback) line: 260	
	TransactionInterceptor.invoke(MethodInvocation) line: 94	
	ReflectiveMethodInvocation.proceed() line: 172	
	JdkDynamicAopProxy.invoke(Object, Method, Object[]) line: 204	
	$Proxy215.updateShipmentOrder(ShipmentOrderVO, boolean, boolean) line: not available	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 57	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 606	
	AopUtils.invokeJoinpointUsingReflection(Object, Method, Object[]) line: 317	
	ReflectiveMethodInvocation.invokeJoinpoint() line: 183	
	ReflectiveMethodInvocation.proceed() line: 150	
	MethodBeforeAdviceInterceptor.invoke(MethodInvocation) line: 51	
	ReflectiveMethodInvocation.proceed() line: 161	
	ExposeInvocationInterceptor.invoke(MethodInvocation) line: 91	
	ReflectiveMethodInvocation.proceed() line: 172	
	JdkDynamicAopProxy.invoke(Object, Method, Object[]) line: 204	
	$Proxy215.updateShipmentOrder(ShipmentOrderVO, boolean, boolean) line: not available	
	ShipmentOrderSaveAction(ShipmentOrderSaveAction).handleSave() line: 90	
	ShipmentOrderSaveAction.handleSave() line: 19	
	ShipmentOrderSaveAction(AbstractSaveAction).act() line: 69	
	ShipmentOrderSaveAction(AbstractAction).act(Redirector, SourceResolver, Map, String, Parameters) line: 170	



/ Einde Intermezzo

/ Intermezzo




/ Einde Intermezzo


				myConsignmentVO = consignmentService.getConsignment(myConsignmentVO.getSystemId());
/s
ConsignmentServiceImpl.getConsignment(int) line: 273	
		return consignmentDAO.getBySystemId(aSystemId);
/s
ConsignmentDAOImpl(GenericHibernateDAO<Type>).getBySystemId(int) line: 276	

/ ConsignmentDaoImpl extends
GenericHibernateDAO<ConsignmentVO> extends 
BaseHibernateDAO<ConsignmentVO> extends 
HibernateDaoSupport

/ Daarom kunnen we als this=consignmentDAO	, getHibernateTemplate()	,

final Session hibernateSession = getHibernateTemplate().getSessionFactory().getCurrentSession();

PersistenceContext[entityKeys=[EntityKey[com.mpobjects.oms.model.shipmentorder.vo.ShipmentItemVO#26632376]
 EntityKey[com.mpobjects.oms.model.shipmentorder.vo.ShipmentItemVO#26632026]
 EntityKey[com.mpobjects.oms.model.customerstatus.vo.CustomerStatusVo#500]
 EntityKey[com.mpobjects.oms.model.entity.shipmenttype.ShipmentType#26631688]
 EntityKey[com.mpobjects.oms.model.entity.ShipmentServiceLevelVO#26631687]
 EntityKey[com.mpobjects.oms.model.entity.orderprocess.OrderProcess#26594670]
 EntityKey[com.mpobjects.oms.model.leggen.vo.PathTemplateVO#26632011]
 EntityKey[com.mpobjects.oms.model.customerstatus.vo.CustomerStatusVo#110]
 EntityKey[com.mpobjects.oms.model.propertiesvalue.vo.PropertiesValueVO#26632060]
 EntityKey[com.mpobjects.oms.model.customerstatus.vo.CustomerStatusVo#105]
 EntityKey[com.mpobjects.oms.model.customerstatus.vo.CustomerStatusVo#104]
 EntityKey[com.mpobjects.oms.model.entity.property.Property#554285]
 EntityKey[com.mpobjects.oms.model.orderstatus.vo.OrderStatusVO#2]
 EntityKey[com.mpobjects.oms.model.entity.organization.Organization#4000]
 EntityKey[com.mpobjects.oms.model.entity.country.Country#4153]
 EntityKey[com.mpobjects.oms.model.currency.vo.CurrencyVO#7001]
 EntityKey[com.mpobjects.oms.model.customerstatus.vo.CustomerStatusVo#100]
 EntityKey[com.mpobjects.oms.model.propertiesvalue.vo.PropertiesValueVO#26632061]
 EntityKey[com.mpobjects.oms.model.incoterm.vo.IncoTermVO#9772224]
 EntityKey[com.mpobjects.oms.model.serviceactiontemplate.ServiceActionTemplate#26632009]
 EntityKey[com.mpobjects.oms.model.shipmentorder.vo.ShipmentOrderVO#26632024]
 EntityKey[com.mpobjects.oms.model.entity.organization.Organization#3150]
 EntityKey[com.mpobjects.oms.model.entity.partytype.PartyType#26632048]
 EntityKey[com.mpobjects.oms.model.entity.shipmentorderparty.ShipmentOrderParty#26632079]
 EntityKey[com.mpobjects.oms.model.entity.property.Property#554202]
 EntityKey[com.mpobjects.oms.model.shipmentordercostpart.vo.ShipmentOrderCostPartVO#26632550]
 EntityKey[com.mpobjects.oms.model.shipmentordercostpart.vo.ShipmentOrderCostPartVO#26632549]
 EntityKey[com.mpobjects.oms.model.entity.property.Property#26632346]
 EntityKey[com.mpobjects.oms.model.customerstatus.vo.CustomerStatusVo#600]
 EntityKey[com.mpobjects.oms.model.partytypegroup.vo.PartyTypeGroupVO#26632057]
 EntityKey[com.mpobjects.oms.model.user.Resource#10100]
 EntityKey[com.mpobjects.oms.model.entity.instructiongroup.InstructionGroup#26632065]
 EntityKey[com.mpobjects.oms.model.serviceaction.vo.ServiceActionVO#26632538]
 EntityKey[com.mpobjects.oms.model.leggen.vo.PathCriteriumVO#26632018]
 EntityKey[com.mpobjects.oms.model.customerstatus.vo.CustomerStatusVo#700]
 EntityKey[com.mpobjects.oms.model.serviceorder.vo.ServiceOrderVO#26632537]
 EntityKey[com.mpobjects.oms.model.leggen.vo.PathCriteriumVO#26632015]
 EntityKey[com.mpobjects.oms.model.leggen.vo.PathCriteriumVO#26632299]
 EntityKey[com.mpobjects.oms.model.leggen.vo.PathCriteriumVO#26632012]
 EntityKey[com.mpobjects.oms.model.leggen.vo.PathCriteriumVO#26632013]
 EntityKey[com.mpobjects.oms.model.shipmentordercostpart.vo.ShipmentOrderCostPartVO#26632548]
 EntityKey[com.mpobjects.oms.model.customerstatus.vo.CustomerStatusVo#150]
 EntityKey[com.mpobjects.oms.model.entity.country.Country#4052]
 EntityKey[com.mpobjects.oms.model.factorbasetype.vo.FactorBaseTypeVO#1]
 EntityKey[com.mpobjects.oms.model.consignment.vo.ConsignmentVO#26632540]
 EntityKey[com.mpobjects.oms.model.entity.serviceactiontype.ServiceActionType#26631827]
 EntityKey[com.mpobjects.oms.model.propertiesvalue.vo.PropertiesValueVO#26632347]
 EntityKey[com.mpobjects.oms.model.entity.serviceordertype.ServiceOrderType#26631826]]
collectionKeys=[CollectionKey[com.mpobjects.oms.model.customerstatus.vo.CustomerStatusVo.messageList#500]
 CollectionKey[com.mpobjects.oms.model.leggen.vo.PathTemplateVO.serviceActionTemplateList#26632011]
 CollectionKey[com.mpobjects.oms.model.entity.partytype.PartyType.partyTypeGroupList#26632048]
 CollectionKey[com.mpobjects.oms.model.entity.organization.Organization.propertiesValues#4000]
 CollectionKey[com.mpobjects.oms.model.shipmentorder.vo.ShipmentOrderVO.instructionList#26632024]
 CollectionKey[com.mpobjects.oms.model.shipmentorder.vo.ShipmentOrderVO.shipmentOrderParties#26632024]
 CollectionKey[com.mpobjects.oms.model.shipmentorder.vo.ShipmentItemVO.packedItemList#26632376]
 CollectionKey[com.mpobjects.oms.model.shipmentorder.vo.ShipmentOrderVO.serviceActionList#26632024]
 CollectionKey[com.mpobjects.oms.model.shipmentorder.vo.ShipmentOrderVO.shipmentOrderCostPartList#26632024]
 CollectionKey[com.mpobjects.oms.model.customerstatus.vo.CustomerStatusVo.messageList#150]
 CollectionKey[com.mpobjects.oms.model.serviceorder.vo.ServiceOrderVO.entityDetails#26632537]
 CollectionKey[com.mpobjects.oms.model.serviceorder.vo.ServiceOrderVO.events#26632537]
 CollectionKey[com.mpobjects.oms.model.partytypegroup.vo.PartyTypeGroupVO.partyTypes#26632057]
 CollectionKey[com.mpobjects.oms.model.serviceorder.vo.ServiceOrderVO.instructionList#26632537]
 CollectionKey[com.mpobjects.oms.model.shipmentorder.vo.ShipmentItemVO.shipmentItemContainerList#26632026]
 CollectionKey[com.mpobjects.oms.model.user.Resource.userOrganizations#10100]
 CollectionKey[com.mpobjects.oms.model.user.Resource.roles#10100]
 CollectionKey[com.mpobjects.oms.model.entity.organization.Organization.propertiesValues#3150]
 CollectionKey[com.mpobjects.oms.model.shipmentordercostpart.vo.ShipmentOrderCostPartVO.productItemCostPartList#26632548]
 CollectionKey[com.mpobjects.oms.model.shipmentordercostpart.vo.ShipmentOrderCostPartVO.productItemCostPartList#26632549]
 CollectionKey[com.mpobjects.oms.model.shipmentordercostpart.vo.ShipmentOrderCostPartVO.productItemCostPartList#26632550]
 CollectionKey[com.mpobjects.oms.model.shipmentorder.vo.ShipmentItemVO.shipmentItemContainerList#26632376]
 CollectionKey[com.mpobjects.oms.model.customerstatus.vo.CustomerStatusVo.messageList#110]
 CollectionKey[com.mpobjects.oms.model.leggen.vo.PathTemplateVO.pathCriteria#26632011]
 CollectionKey[com.mpobjects.oms.model.shipmentorder.vo.ShipmentItemVO.children#26632026]
 CollectionKey[com.mpobjects.oms.model.shipmentorder.vo.ShipmentOrderVO.entityDetails#26632024]
 CollectionKey[com.mpobjects.oms.model.shipmentorder.vo.ShipmentItemVO.entityDetails#26632026]
 CollectionKey[com.mpobjects.oms.model.user.Resource.propertiesValues#10100]
 CollectionKey[com.mpobjects.oms.model.user.Resource.userPasswords#10100]
 CollectionKey[com.mpobjects.oms.model.shipmentorder.vo.ShipmentOrderVO.shipmentOrderPricePartList#26632024]
 CollectionKey[com.mpobjects.oms.model.customerstatus.vo.CustomerStatusVo.messageList#104]
 CollectionKey[com.mpobjects.oms.model.customerstatus.vo.CustomerStatusVo.messageList#105]
 CollectionKey[com.mpobjects.oms.model.customerstatus.vo.CustomerStatusVo.messageList#100]
 CollectionKey[com.mpobjects.oms.model.entity.country.Country.countryGroupList#4052]
 CollectionKey[com.mpobjects.oms.model.serviceorder.vo.ServiceOrderVO.serviceOrderCostList#26632537]
 CollectionKey[com.mpobjects.oms.model.serviceorder.vo.ServiceOrderVO.consignmentList#26632537]
 CollectionKey[com.mpobjects.oms.model.entity.instructiongroup.InstructionGroup.instructionCodes#26632065]
 CollectionKey[com.mpobjects.oms.model.entity.country.Country.countryGroupList#4153]
 CollectionKey[com.mpobjects.oms.model.consignment.vo.ConsignmentVO.receiptList#26632540]
 CollectionKey[com.mpobjects.oms.model.shipmentorder.vo.ShipmentItemVO.eventList#26632376]
 CollectionKey[com.mpobjects.oms.model.customerstatus.vo.CustomerStatusVo.messageList#600]
 CollectionKey[com.mpobjects.oms.model.shipmentorder.vo.ShipmentOrderVO.shipmentItemList#26632024]
 CollectionKey[com.mpobjects.oms.model.shipmentorder.vo.ShipmentItemVO.eventList#26632026]
 CollectionKey[com.mpobjects.oms.model.shipmentorder.vo.ShipmentItemVO.entityDetails#26632376]
 CollectionKey[com.mpobjects.oms.model.serviceorder.vo.ServiceOrderVO.serviceOrderParties#26632537]
 CollectionKey[com.mpobjects.oms.model.shipmentorder.vo.ShipmentItemVO.children#26632376]
 CollectionKey[com.mpobjects.oms.model.serviceactiontemplate.ServiceActionTemplate.serviceOrderTemplateList#26632009]
 CollectionKey[com.mpobjects.oms.model.shipmentorder.vo.ShipmentOrderVO.productItemList#26632024]
 CollectionKey[com.mpobjects.oms.model.shipmentorder.vo.ShipmentItemVO.packedItemList#26632026]
 CollectionKey[com.mpobjects.oms.model.customerstatus.vo.CustomerStatusVo.messageList#700]
 CollectionKey[com.mpobjects.oms.model.consignment.vo.ConsignmentVO.serviceActionList#26632540]]]







/s
	public void calculate(ShipmentOrderVO aShipmentOrderVO) {
		if (aShipmentOrderVO.getPreferedPath() == null) {
/ NEE	,
pathTemplateVO:OEGEMA_DELIVERY(systemId:26632011)

mpo=> select*from path_template\g
 system_id |    path_template     |                   description                    | organization_systemid | is_dele
ted | add_to_existing | priority | lead_time_constraint | current_time_constraint | is_active | is_show_on_quotation |
 is_show_on_assist_plan | planning_mode | requested_date_mode 
-----------+----------------------+--------------------------------------------------+-----------------------+--------
----+-----------------+----------+----------------------+-------------------------+-----------+----------------------+
------------------------+---------------+---------------------
  26632011 | OEGEMA_DELIVERY      | Oegema Delivery                                  |                  4000 |        
  0 |               0 |        0 | DURATION_TIME        | RESPECT                 |         1 |                    1 |
                      0 | BACKWARD      | BACKWARD


/ Intermezzo

               	session = sessionFactory.openSession();
                session.beginTransaction();

                Item item2=(Item)session.load(Item.class,new Long(1));
/ proxy, item2.handler.target=null
                item2.setName("second");
> Hibernate: select item0_.id_ as id_1_1_0_, item0_.name as name2_1_0_, item0_.city as city3_1_0_ from Item item0_ where item0_.id_=?
main[1] dump item2.handler.target
 item2.handler.target = {
    id: instance of java.lang.Long(id=2324)
    name: "second"
    city: "First2"
    bids: instance of java.util.HashSet(id=2354)
}
/ dus doet query op db, en sets city op "First2"	, dus het obj item2 is update	,

/ Q ERICJ
ShipmentOrderServiceImpl.updateShipmentOrder(ShipmentOrderVO, TMSEventContext, boolean) line: 1631	
					MpoBeanFactory.getBean(ServiceActionService.class).handleShipmentOrderChange(myOldVO, myNew);
/c
ServiceActionServiceImpl.handleShipmentOrderChange(ShipmentOrderVO, ShipmentOrderVO) line: 483	
			updateServiceActionsForShipmentOrder(myOldShipmentOrderVO, mynewShipmentOrderVO, new TMSEventContext());
/c
ServiceActionServiceImpl.updateServiceActionsForShipmentOrder(ShipmentOrderVO, ShipmentOrderVO, TMSEventContext) line: 944	
			updateServiceAction(myServiceActionVO, anEventContext, true, true);
/c
ServiceActionServiceImpl.updateServiceAction(ServiceActionVO, TMSEventContext, boolean, boolean) line: 869	
			shipmentOrderService.handleServiceActionChange(myNew, myOldServiceAction);
/c
public class ShipmentOrderServiceImpl implements ShipmentOrderService {
	public void handleServiceActionChange(ServiceActionVO aNewServiceActionVO, ServiceActionVO aOldServiceActionVO) {
			updateShipmentOrder(myNewShipmentOrder, false);
/c
public class ShipmentOrderServiceImpl implements ShipmentOrderService {
		return updateShipmentOrder(aShipmentOrder, new TMSEventContext(), propagateChange);
/c
public class ShipmentOrderServiceImpl implements ShipmentOrderService {
	public ShipmentOrderVO updateShipmentOrder(ShipmentOrderVO aShipmentOrder, TMSEventContext anEventContext, boolean propagateChange) {

/ Q ERICJ RECURSION

/ save sho	,

public class ShipmentOrderServiceImpl implements ShipmentOrderService {
	public ShipmentOrderVO updateShipmentOrder(ShipmentOrderVO aShipmentOrder, boolean propagateChange, boolean lastUpdateCheck) {
			return updateShipmentOrder(aShipmentOrder, new TMSEventContext(), propagateChange);
/c
public class ShipmentOrderServiceImpl implements ShipmentOrderService {
	public ShipmentOrderVO updateShipmentOrder(ShipmentOrderVO aShipmentOrder, TMSEventContext anEventContext, boolean propagateChange) {
/ 1STE CALL
					MpoBeanFactory.getBean(ServiceActionService.class).handleShipmentOrderChange(myOldVO, myNew);
...
/c
public class ShipmentOrderServiceImpl implements ShipmentOrderService {
	public void handleServiceActionChange(ServiceActionVO aNewServiceActionVO, ServiceActionVO aOldServiceActionVO) {
			updateShipmentOrder(myNewShipmentOrder, false);
/c
public class ShipmentOrderServiceImpl implements ShipmentOrderService {
	public ShipmentOrderVO updateShipmentOrder(ShipmentOrderVO aShipmentOrder, boolean propagateChange) {
		return updateShipmentOrder(aShipmentOrder, new TMSEventContext(), propagateChange);
/c
public class ShipmentOrderServiceImpl implements ShipmentOrderService {
	public ShipmentOrderVO updateShipmentOrder(ShipmentOrderVO aShipmentOrder, TMSEventContext anEventContext, boolean propagateChange) {
/ 2DE CALL

/ we komen 2 keer in 
public class ShipmentOrderServiceImpl implements ShipmentOrderService {
	public ShipmentOrderVO updateShipmentOrder(ShipmentOrderVO aShipmentOrder, TMSEventContext anEventContext, boolean propagateChange) {

/ Einde ERICJ RECURSION













/ Einde Intermezzo



















/ Einde SAVE SHO



 






























/ ECLIPSE

/ Jira	,
https://system.mp-objects.com/jira/browse/GEOFLOW-125

/ subclipse installed	, 
/ Window->Show view -> SVN-> SVN reopsitories

/ repo	,
https://system.mp-objects.com/svn/tms

/ right click 2014.01	, Team-> Share project
/ connect reop
/ dan wordt mogelijk	,
/ right click 2014.01	, Team->Synchronize with repository	,

/ in ant window	,
clean-prepare-and-dev-deploy

/ 7	.

/ incheck
Team synchronzing , outgoing mode	, staat in lijst	,

/ jira	,
https://system.mp-objects.com/jira/browse/GEOFLOW-125

responsible team: delivery
/ menu: resolve
assignee: delivery
revision number: eclipse
/ menu 


 

/ Einde ECLIPSE

/ TICKET WICKET 

/  7	. 


/ hover over Planning -> customer order -> search
/ we zien 	,
wicketpage=customerorder.CustomerOrderPage

/ Kijk in eclipse in deze class, en eromheen	,



Customer order number

/ In	,
package com.mpobjects.oms.view.wicket.customerorder;
public class CustomerOrderEditPanel extends VOEditPanel<CustomerOrder> {

	protected void setForm(GenericForm<CustomerOrder> aForm) {
		TextField<String> customerOrderNumberTextField = new TextField<String>("customerOrderNumber");
		customerOrderNumberTextField.add(StringValidator.maximumLength(100)).add(new GenericFormComponentBehavior());
		customerOrderNumberTextField.add(new AttributeModifier("size", true, new Model<String>(Integer.toString(20))));
		customerOrderNumberTextField.add(new AttributeModifier("maxlength", true, new Model<String>(Integer.toString(100))));

/ 7	. 

/ Planning -> sevice order -> search

/ als we datum geven : 06-May-2013	,

SELECT distinct SO.* 
FROM SERVICE_ORDER SO 
LEFT JOIN CONSIGNMENT C on C.SERVICE_ORDER_SYSTEMID =SO.SYSTEM_ID 
LEFT JOIN SERVICE_ACTION SA on SA.CONSIGNMENT_SYSTEMID = C.SYSTEM_ID 
LEFT JOIN SHIPMENT_ORDER SHO on SHO.SYSTEM_ID= SA.SHIPMENT_ORDER_SYSTEMID 
WHERE SO.IS_TEMPLATE = 0 
AND SO.SERVICE_STATUS_SYSTEMID IN (
	SELECT SYSTEM_ID 
	FROM ORDER_STATUS 
	WHERE upper(status_code) < '9000') 
and SO.planned_start_after > '2013-05-06'

/ ERR	,
org.postgresql.util.PSQLException: Cannot change transaction isolation level in the middle of a transaction. at org.postgresql.jdbc2.AbstractJdbc2Connection.setTransactionIsolation(AbstractJdbc2Connection.java:929) at 

/ we moeten de postgres-ds.xml update	, 

[eric@localhost deploy]$ pwd
/home/eric/Devel/Java/JBoss/jboss-4.0.5.GA/server/mpo/deploy

[eric@localhost deploy]$ mv postgres-ds.xml postgres-ds.xml.bak
[eric@localhost deploy]$ cp ~/Downloads/postgres-ds.xml .



/ WAS	,
$ vi postgres-ds.xml

<?xml version="1.0" encoding="UTF-8"?>

 <datasources>
   <local-tx-datasource>
     <jndi-name>tmsdevDS</jndi-name>
     <connection-url>jdbc:postgresql://127.0.0.1:5432/mpo?no_result_set_tracking&amp;defaultResultSetHoldable=true</connection-url>
     <driver-class>org.postgresql.Driver</driver-class>
     <user-name>mpopostgres</user-name>
     <password>mpopostgres@mpo</password>
     <min-pool-size>10</min-pool-size>
     <max-pool-size>100</max-pool-size>
     <blocking-timeout-millis>60000</blocking-timeout-millis>
     <idle-timeout-minutes>30</idle-timeout-minutes>
     <check-valid-connection-sql>select system_id from tms_user where system_id = -1</check-valid-connection-sql>
   </local-tx-datasource>
 </datasources>

/ NU	,

$ vi postgres-ds.xml


<?xml version="1.0" encoding="UTF-8"?>
<!--

Note: in order to use XA resources PostgreSQL must be configured to support prepared transactions:
http://www.postgresql.org/docs/8.3/static/runtime-config-resource.html#GUC-MAX-PREPARED-TRANSACTIONS

-->
<datasources>
        <xa-datasource>
                <jndi-name>tmsdevDS</jndi-name>
                <track-connection-by-tx>true</track-connection-by-tx>
                <xa-datasource-class>org.postgresql.xa.PGXADataSource</xa-datasource-class>
<!--
                <xa-datasource-property name="ServerName">192.168.1.8</xa-datasource-property>
-->
                <xa-datasource-property name="ServerName">127.0.0.1</xa-datasource-property>
                <xa-datasource-property name="PortNumber">5432</xa-datasource-property>
                <xa-datasource-property name="DatabaseName">mpo</xa-datasource-property>
                <xa-datasource-property name="User">mpopostgres</xa-datasource-property>
                <xa-datasource-property name="Password">mpopostgres@mpo</xa-datasource-property>
                <min-pool-size>0</min-pool-size>
                <max-pool-size>50</max-pool-size>
                <blocking-timeout-millis>60000</blocking-timeout-millis>
                <idle-timeout-minutes>30</idle-timeout-minutes>
                <valid-connection-checker-class-name>org.jboss.resource.adapter.jdbc.vendor.PostgreSQLValidConnectionChecker</valid-connection-checker-class-name>
        </xa-datasource>
        </xa-datasource>
        <local-tx-datasource>
                <jndi-name>patchDS</jndi-name>
<!--
                <connection-url>jdbc:postgresql://192.168.1.8:5432/mpo</connection-url>
-->
                <connection-url>jdbc:postgresql://127.0.0.1:5432/mpo</connection-url>
                <driver-class>org.postgresql.Driver</driver-class>
                <user-name>mpopostgres</user-name>
                <password>mpopostgres@mpo</password>
                <min-pool-size>0</min-pool-size>
                <max-pool-size>50</max-pool-size>
                <blocking-timeout-millis>60000</blocking-timeout-millis>
                <idle-timeout-minutes>30</idle-timeout-minutes>
                <check-valid-connection-sql>select system_id from tms_user where system_id = -1</check-valid-connection-sql>
                <background-validation>true</background-validation>
                <background-validation-minutes>1</background-validation-minutes>
        </local-tx-datasource>
</datasources>

[eric@localhost deploy]$ sudo vi /var/lib/pgsql/data/postgresql.conf
# [ERICJ]
max_prepared_transactions = 50


/ 7	. 

/ Hoe gaat dat met wicket	?

/ hover over planning, custormer order, planning

/ we zien wicketpage=customerorder.CustomerOrderPage

/ in Java	,

package com.mpobjects.oms.view.wicket.customerorder;
public class CustomerOrderPage extends VOEditPage<CustomerOrder> {
	public CustomerOrderPage() {
		super();
/c
package com.mpobjects.oms.view.wicket.vocode;
public abstract class VOEditPage<T extends ValueObject> extends VOSelectPage<T> implements VOEditFormCallback {
	public VOEditPage() {
		super();
/c
package com.mpobjects.oms.view.wicket.vocode;
public abstract class VOSelectPage<T extends ValueObject> extends VOListPage<T> {
	public VOSelectPage() {
		super();
/c 
package com.mpobjects.oms.view.wicket.vocode;
public abstract class VOListPage<T extends ValueObject> extends BaseContextPage {
	public VOListPage() {
...
		createPage();
/c
package com.mpobjects.oms.view.wicket.customerorder;
public class CustomerOrderPage extends VOEditPage<CustomerOrder> {
	protected void createPage() {
...
		editPage = new CustomerOrderEditFormPage(this, daoWrapper, dataProperties);
/c
package com.mpobjects.oms.view.wicket.customerorder;
public class CustomerOrderEditFormPage extends VOEditFormPage<CustomerOrder> implements VOEditFormCallback {
public CustomerOrderEditFormPage(VOEditFormCallback aCallback, BeanWrapper<? extends BaseDAOInterface<CustomerOrder>> aDaoWrapper,
			EvoDataProperties aDataProperties) {
		super(aCallback, aDaoWrapper, aDataProperties);
/c
package com.mpobjects.oms.view.wicket.vocode;
public class VOEditFormPage<T extends ValueObject> extends BaseContextPage {
	public VOEditFormPage(VOEditFormCallback aCallback, BeanWrapper<? extends BaseDAOInterface<T>> aDaoWrapper, EvoDataProperties aDataProperties) {
...
		createPage();
/c
	protected void createPage() {
...
		createEditPanel();
/c
	protected void createEditPanel() {
...
		editPanel = new CustomerOrderEditPanel("editPanel", new WebComponentEventSwitchBoard(), panelBuilder, daoWrapper, dataProperties);
/c
package com.mpobjects.oms.view.wicket.customerorder;
public class CustomerOrderEditPanel extends VOEditPanel<CustomerOrder> {
	public CustomerOrderEditPanel(String aId, WebComponentEventSwitchBoard aWebComponentEventSwitchBoard,FormActionsPanelBuilder<CustomerOrder> aFormActionsPanelBuilder, BeanWrapper<? extends BaseDAOInterface<CustomerOrder>> aDaoWrapper,EvoDataProperties aDataProperties) {
		super(aId, aWebComponentEventSwitchBoard, aFormActionsPanelBuilder, aDaoWrapper, aDataProperties);
/c
package com.mpobjects.oms.view.wicket.vocode;
public class VOEditPanel<T extends ValueObject> extends GenericFormPanel<T> {

	public VOEditPanel(String id, WebComponentEventSwitchBoard webComponentEventSwitchBoard, FormActionsPanelBuilder<T> formActionsPanelBuilder, BeanWrapper<? extends BaseDAOInterface<T>> aDaoWrapper, EvoDataProperties aDataProperties) {
...
		createPanel(tempModel);
/c
	protected void createPanel(GenericCompountPropertyModel<T> aModel) {
			super.createPanel(aModel);
/c
ackage com.mpobjects.view.wicket.util.single;
abstract public class GenericFormPanel<T extends EntityInterface> extends BaseWebComponent {
	protected void createPanel(GenericCompountPropertyModel<T> model) {
...
		setForm(form);
/c
package com.mpobjects.oms.view.wicket.customerorder;
public class CustomerOrderEditPanel extends VOEditPanel<CustomerOrder> {
...
		customerOrderNumberTextField.add(StringValidator.maximumLength(100)).add(new GenericFormComponentBehavior());
		customerOrderNumberTextField.add(new AttributeModifier("size", true, new Model<String>(Integer.toString(20))));
		customerOrderNumberTextField.add(new AttributeModifier("maxlength", true, new Model<String>(Integer.toString(100))));


/ Einde TICKET WICKET 

	



















