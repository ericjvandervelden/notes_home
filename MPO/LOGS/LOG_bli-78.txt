/ See HAMID VOORBEELD RELEASE EXPORT OP BAKKER TEST
/ See LOCAL EXPORT VIA ACTION  
/ 	See VOORLOPIGE SAMENVATTING
/ 	See DEBUG CREATE CUSTOMERORDER IN XML
/ 	See DEBUG GENERATE SERVICEORDER (NO CUSTOMERORDER)	
/ 	See DEBUG EXPORT ATTACHMENTS 
/  	See DEBUG TEST EXPORT ATTACHMENTS 
/ 	See FIX MOCK DAO
/ 	See TEST EXPORT ATTACHMENTS 
/ See NOTES MICHEL
/ See DEBUG TEST MICHEL
/ Lees LOG_scs_sb_xml.txt
/ XSD
/ See NOTES ATTACHMENTS 

/ See TODO JMSBROKERS FILE

/ See DEBUG IMPORT
/ See FIX EXPORT 
/ See FIX IMPORT  
/ See DEBUG EXPORT HOLD_STATUS
/ See TEST HOLD_STATUS
/ See FIX CUSTOMERORDERBODYPROCESSOR TEST 

/ See FIX FINAL
/ See REFACTOR CUSTOMERORDERBODYPROCESSOR ALS SPRING BEAN	 
/ See UNIT TEST FINAL

/ See TEST FIX FINAL

/ 7	 . 

# create database geosco0906t tablespace scs;

[eric@localhost bin]$ local-pg_restore.sh  geosco0906t ~/DB_TAP/Postgres/Backup/geosco-t-2016-09-06.dump 

[eric@localhost bin]$ cat bakker-psql-t.sh 
#!/usr/bin/bash
PGPASSWORD=h^Zgcyr\&Q psql -U vanderveldene -h  bli-app-t.intermax.mp-objects.com bakker 

[eric@localhost bin]$ cat bakker-pg_dump-t.sh 
#!/usr/bin/bash
cd ~/DB_TAP/Postgres/Backup
PGPASSWORD=h^Zgcyr\&Q pg_dump -U vanderveldene -Fc -h  bli-app-t.intermax.mp-objects.com bakker >"bakker-t-$(date +%F).dump"

[eric@localhost bin]$ bakker-pg_dump-t.sh 
pnllogistics0701t=# create database bakker20160207_t tablespace scs;
CREATE DATABASE
[eric@localhost bin]$ local-pg_restore.sh  bakker20160207_t ~/DB_TAP/Postgres/Backup/bakker-t-2017-02-07.dump 

[eric@localhost bin]$ PGPASSWORD=mpopostgres@mpo psql  -U mpopostgres bakker20160207_t 

[eric@localhost server]$ cp -a geosco/ bakker
[eric@localhost server]$ cd bakker
/ houd alleen conf/ en deploy/ over	, 
/ build	, 
/ we zien lib/ weer	, komt uit svn	, ook gedeelte conf/ komt uit svn	,
/ Maar ook conf/ is gedeeltelijk update	,
[eric@localhost bakker]$ cd conf
[eric@localhost conf]$ ls -ltr
total 3776
-rw-rw-r--. 1 eric eric 115433 Oct 23  2006 standardjbosscmp-jdbc.xml
-rw-rw-r--. 1 eric eric  35762 Oct 23  2006 standardjaws.xml
-rw-rw-r--. 1 eric eric    194 Oct 23  2006 jndi.properties
-rw-rw-r--. 1 eric eric   6567 Oct 23  2006 jboss-minimal.xml
-rw-rw-r--. 1 eric eric  58816 Aug 16  2010 standardjboss.xml
-rw-rw-r--. 1 eric eric   6703 Nov 12  2013 login-config.xml
-rw-rw-r--. 1 eric eric   4722 Dec 23  2013 log4j.dtd
drwxrwxr-x. 2 eric eric   4096 May  2  2014 props
drwxrwxr-x. 2 eric eric   4096 May  2  2014 xmdesc
-rw-rw-r--. 1 eric eric  27447 May  2  2014 jboss-service.xml~
-rw-rw-r--. 1 eric eric  10363 Jul  8  2014 log4j.xml.bak
-rw-rw-r--. 1 eric eric 548310 Jul 18  2014 postgresql-9.1-903.jdbc4.jar
drwxrwxr-x. 2 eric eric   4096 Oct  1  2014 export
drwxrwxr-x. 2 eric eric   4096 Jan 28  2015 jmsbrokers
-rw-rw-r--. 1 eric eric  38287 Apr 17  2015 language_en_GB_pnlen.properties
-rw-rw-r--. 1 eric eric 117419 May  8  2015 language_en.properties.tmp
-rw-rw-r--. 1 eric eric 117130 May  8  2015 language_en.properties.r19609
-rw-rw-r--. 1 eric eric 116784 May  8  2015 language_en.properties.r19472
-rw-rw-r--. 1 eric eric 117069 May  8  2015 language_en.properties.mine
-rw-rw-r--. 1 eric eric  13689 May 12  2015 log4j.xml
-rw-r--r--. 1 eric eric  23870 May 19  2015 language_nl_NL_pnlnl.properties
-rw-rw-r--. 1 eric eric  70266 Nov 23  2015 language_isben.properties
-rw-rw-r--. 1 eric eric  27443 Mar 23  2016 jboss-service.xml
-rw-rw-r--. 1 eric eric   1318 Jun 28  2016 local_application.properties
-rw-rw-r--. 1 eric eric 137874 Feb  7 12:03 language_cn.properties
-rw-rw-r--. 1 eric eric 162862 Feb  7 12:03 language_en.properties
-rw-rw-r--. 1 eric eric  50073 Feb  7 12:03 language_dsvomsen.properties
-rw-rw-r--. 1 eric eric  59963 Feb  7 12:03 language_dowen.properties
-rw-rw-r--. 1 eric eric  89454 Feb  7 12:03 language_de.properties
-rw-rw-r--. 1 eric eric   6538 Feb  7 12:03 language_de_DE_wkpde.properties
-rw-rw-r--. 1 eric eric 110248 Feb  7 12:03 language_en_GB_neecen.properties
-rw-rw-r--. 1 eric eric 103676 Feb  7 12:03 language_en_GB_mhcen.properties
-rw-rw-r--. 1 eric eric   2794 Feb  7 12:03 language_en_GB_kramp.properties
-rw-rw-r--. 1 eric eric  11374 Feb  7 12:03 language_en_GB_isben.properties
-rw-rw-r--. 1 eric eric 103245 Feb  7 12:03 language_en_GB_icsen.properties
-rw-rw-r--. 1 eric eric   1751 Feb  7 12:03 language_en_GB_bard.properties
-rw-rw-r--. 1 eric eric  59449 Feb  7 12:03 language_haen.properties
-rw-rw-r--. 1 eric eric  98043 Feb  7 12:03 language_fr.properties
-rw-rw-r--. 1 eric eric  49287 Feb  7 12:03 language_fmsen.properties
-rw-rw-r--. 1 eric eric   6368 Feb  7 12:03 language_en_GB_wkpen.properties
-rw-rw-r--. 1 eric eric  42218 Feb  7 12:03 language_en_GB_pnltms.properties
-rw-rw-r--. 1 eric eric  15286 Feb  7 12:03 language_en_GB_pnllogistics.properties
-rw-rw-r--. 1 eric eric  74949 Feb  7 12:03 language_nl.properties
-rw-rw-r--. 1 eric eric  82080 Feb  7 12:03 language_mdten.properties
-rw-rw-r--. 1 eric eric   3128 Feb  7 12:03 language_ja.properties
-rw-rw-r--. 1 eric eric  34794 Feb  7 12:03 language_it.properties
-rw-rw-r--. 1 eric eric 101545 Feb  7 12:03 language_icsen.properties
-rw-rw-r--. 1 eric eric  69479 Feb  7 12:03 language_noren.properties
-rw-rw-r--. 1 eric eric 100783 Feb  7 12:03 language_nmfg.properties
-rw-rw-r--. 1 eric eric 102644 Feb  7 12:03 language_nmcpben.properties
-rw-rw-r--. 1 eric eric   6279 Feb  7 12:03 language_nl_NL_wkpnl.properties
-rw-rw-r--. 1 eric eric  24087 Feb  7 12:03 language_nl_NL_pnltms.properties
-rw-rw-r--. 1 eric eric   1363 Feb  7 12:03 language_nl_NL_pnllogistics.properties
-rw-rw-r--. 1 eric eric  61041 Feb  7 12:03 language_waen.properties
-rw-rw-r--. 1 eric eric  28420 Feb  7 12:03 language_us.properties
-rw-rw-r--. 1 eric eric  41721 Feb  7 12:03 language_tr.properties
-rw-rw-r--. 1 eric eric  83125 Feb  7 12:03 language_tosen.properties
-rw-rw-r--. 1 eric eric 101742 Feb  7 12:03 language_scsen.properties
-rw-rw-r--. 1 eric eric  57334 Feb  7 12:03 language_rren.properties
-rw-rw-r--. 1 eric eric  72681 Feb  7 12:03 oldlanguage_nl.properties
-rw-rw-r--. 1 eric eric  53728 Feb  7 12:03 language_waus.properties
-rw-rw-r--. 1 eric eric  53612 Feb  7 12:19 application.properties
-rw-rw-r--. 1 eric eric   9580 Feb  7 12:19 library-checksum.properties

/ we start bakker	,
[eric@localhost bakker]$ ls
conf  data  deploy  lib  log  tmp  work

/ local 
eric
rtdMpo45_


com.mpobjects.dataexport.service.GenericXmlDataRequestService
/ TODO

/ 13	. 

/ we hebben unidir many-to-many 	,

$ vi CustomerOrderTrigger.standard.hbm.xml

	<class name="com.mpobjects.oms.model.trigger.CustomerOrderTrigger" table="CUSTOMER_ORDER_TRIGGER">
		<id name="systemId" column="SYSTEM_ID">
			<generator class="com.mpobjects.core.model.HibernateIdGenerator" />
		</id>
		<set name="triggerList" table="CUSTOMER_ORDER_TRIGGER_ACTION" lazy="true" cascade="save-update">	/ CUSTOMER_ORDER_TRIGGER_ACTION is een join tbl	,
			<key column="CO_TRIGGER_SYSTEMID" not-null="true" />		/ columns in deze tbl, want er is geen attr inverse="true"	, fk	, en pk	,
			<many-to-many class="com.mpobjects.oms.model.trigger.TriggerAction" column="TRIGGER_ACTION_SYSTEMID" />	 / column in deze tbl	, fk	, 
		</set>

$ vi TriggerAction.standard.hbm.xml

	<class name="com.mpobjects.oms.model.trigger.TriggerAction" table="TRIGGER_ACTION">
		<id name="systemId" column="SYSTEM_ID">
			<generator class="com.mpobjects.core.model.HibernateIdGenerator" />
		</id>
	</class>

bakker20160207_t=# \d customer_order_trigger
             Table "public.customer_order_trigger"
          Column           |         Type          | Modifiers 
---------------------------+-----------------------+-----------
 system_id                 | integer               | not null
 name                      | character varying(50) | not null
 on_create                 | smallint              | default 0
 on_release                | smallint              | default 0
 on_update                 | smallint              | default 0
 filter_expression         | bytea                 | 
 expression_update         | bytea                 | 
 organization_systemid     | integer               | not null
 on_customer_status_change | smallint              | default 0
Foreign-key constraints:
    "cot_fk_org" FOREIGN KEY (organization_systemid) REFERENCES organization(system_id)
Referenced by:
    TABLE "customer_order_trigger_action" CONSTRAINT "cota_co_trigger" FOREIGN KEY (co_trigger_systemid) REFERENCES customer_order_trigger(system_id)



bakker20160207_t-# \d+ customer_order_trigger_action
                     Table "public.customer_order_trigger_action"
         Column          |  Type   | Modifiers | Storage | Stats target | Description 
-------------------------+---------+-----------+---------+--------------+-------------
 co_trigger_systemid     | integer | not null  | plain   |              | 
 trigger_action_systemid | integer | not null  | plain   |              | 
Indexes:
    "customer_order_trigger_action_co_trigger_systemid_idx" btree (co_trigger_systemid)
    "customer_order_trigger_action_trigger_action_systemid_idx" btree (trigger_action_systemid)
Foreign-key constraints:
    "cota_co_trigger" FOREIGN KEY (co_trigger_systemid) REFERENCES customer_order_trigger(system_id)
    "cota_trigger_action" FOREIGN KEY (trigger_action_systemid) REFERENCES trigger_action(system_id)
Has OIDs: no




Configuration, Execution, Triggers, Actions
code: coexportaction	
Execution: 1																			/ TODO
Trigger task: export_custom_customer_export_message		/ export_order_update_message



/ 13	

Configuration, Execution, Triggers, Customer order trigger

/ op het scherm zien we :
actions
	coexportaction


bakker20160207_t=# select*from customer_order_trigger;
 system_id |      name       | on_create | on_release | on_update | filter_expression | expression_update | organization_systemid | on_customer_status_ch
ange 
-----------+-----------------+-----------+------------+-----------+-------------------+-------------------+-----------------------+----------------------
-----
    746610 | coexporttrigger |         1 |          0 |         0 | \x00              | \x00              |                  5000 |                      
   1
(1 row)

bakker20160207_t=# select*from customer_order_trigger_action;
 co_trigger_systemid | trigger_action_systemid 
---------------------+-------------------------
              746610 |                  746609
(1 row)

bakker20160207_t=# select*from trigger_action;
 system_id |       code       |             description             |                                                        configuration               
                                          |        trigger_task         | execution_order | organization_systemid 
-----------+------------------+-------------------------------------+------------------------------------------------------------------------------------
------------------------------------------+-----------------------------+-----------------+-----------------------
        51 | RELEASE-DELIVERY | Release Service Order Type DELIVERY | closeOnSuccess=false;peerType=;purposeCode=;onceOnEnd=false;onceOnStart=false;onceO
nRelease=false;onceForServiceOrder=false; | EXPORT_SERVICE_ORDER        |               1 |                  5000
    746606 | EXPORT_SHO_XML   | Export SHO XML                      | purposeCode=SHO;onceOnEnd=false;onceOnStart=false;onceOnRelease=false;onceForShipme
ntOrder=false;                            | EXPORT_SHIPMENT_ORDER       |               1 |                  5000
    746609 | coexportaction   | NULL                                | purposeCode=;                                                                   <- 
                                          | EXPORT_ORDER_UPDATE_MESSAGE |               1 |                  5000
(3 rows)

/ 13	. 

/ we zien op het customer order trigger scherm	,
On Customer Status Change	: checked	,

bakker20160207_t=# select*from customer_order_trigger;
 system_id |      name       | on_create | on_release | on_update | filter_expression | expression_update | organization_systemid | on_customer_status_ch
ange 
-----------+-----------------+-----------+------------+-----------+-------------------+-------------------+-----------------------+----------------------
-----
    746610 | coexporttrigger |         1 |          0 |         0 | \x00              | \x00              |                  5000 |                      
   1
(1 row)
/ we zien dat on_customer_status_change 1 is	,  

	<class name="com.mpobjects.oms.model.customerstatus.vo.CustomerStatusVo" table="CUSTOMER_STATUS">
public class CustomerStatusVo extends EnumeratedValueObject implements DashboardStatus {
	private CustomerStatusEntity entity; 	/ CUSTOMER_ORDER
	private String expression; 	/ ${customerOrder.reference1==1}




/ 13	. 

trigger	
	oncreate
	onchange
	actions={
		triggeraction
			trigger task:EXPORT...
	}

customerstatus
	entity: customer order
	expression: ${customerOrder.reference1==1}

/ 13	. 

/ Edit Source Lookup Path
/ Als debugger source niet kan find	, 
/ Als je F3 geeft	, 
/ Attach Source...
/ Geef in eclipse	, 
eclipse Edit Source Lookup Path Attach Source

/ 7	. 


/ we edit reference1 in een Customer Order	, Save	, 

/ stack, 
	CustomerOrderServiceImpl.update(CustomerOrder, boolean, boolean, TMSEventContext) line: 490	
	CustomerOrderServiceImpl.update(CustomerOrder, boolean, boolean) line: 461	
		return update(aCustomerOrder, checkIds, fromInterface, new TMSEventContext());
/cb
	CustomerOrderServiceImpl.update(CustomerOrder, boolean) line: 456	
		return update(aCustomerOrder, checkIds, false);
/cb
	CustomerOrderEditFormPage$7.onSubmit(Button, AjaxRequestTarget, IModel<CustomerOrder>) line: 412	
				if (editPanel.isValidObject(aSelection.getObject())) {
					try {
						getSession().clear();
						CustomerOrder myOrder = aSelection.getObject();
						customerOrderServiceWrapper.getBean().convertFromMap(myOrder, editPanel.getParties());
						addAttachments(myOrder);
						CustomerOrder myNew = customerOrderServiceWrapper.getBean().update(myOrder, true);	/ we veranderden reference1	op de customer order
/cb
	EntityActionAjaxButton$1.onSubmit(AjaxRequestTarget, Form<?>) line: 56	
	AjaxFallbackButton$1.onSubmit(AjaxRequestTarget) line: 74	
	AjaxFallbackButton$1(AjaxFormSubmitBehavior).onEvent(AjaxRequestTarget) line: 156	
	AjaxFallbackButton$1(AjaxEventBehavior).respond(AjaxRequestTarget) line: 177	
	AjaxFallbackButton$1(AbstractDefaultAjaxBehavior).onRequest() line: 312	
	BehaviorRequestTarget.processEvents(RequestCycle) line: 157	
	WebRequestCycleProcessor(AbstractRequestCycleProcessor).processEvents(RequestCycle) line: 92	
	MpoWebRequestCycle(RequestCycle).processEventsAndRespond() line: 1279	
	MpoWebRequestCycle(RequestCycle).step() line: 1358	
	MpoWebRequestCycle(RequestCycle).steps() line: 1465	
	MpoWebRequestCycle(RequestCycle).request() line: 545	
	WicketFilter.doGet(HttpServletRequest, HttpServletResponse) line: 486	
	WicketServlet.doPost(HttpServletRequest, HttpServletResponse) line: 160	
	WicketServlet(HttpServlet).service(HttpServletRequest, HttpServletResponse) line: 717	
	WicketServlet(HttpServlet).service(ServletRequest, ServletResponse) line: 810	
/ debug	,
CustomerOrderServiceImpl.update(CustomerOrder, boolean, boolean, TMSEventContext) line: 473	
		setCustomerOrderStatus(aCustomerOrder);
/s
CustomerOrderServiceImpl.update(CustomerOrder, boolean, boolean, TMSEventContext) line: 473	
			customerStatusService.updateStatus(aCustomerOrder);
/s
CustomerStatusServiceImpl.updateStatus(CustomerOrder) line: 120	
		if (updateCustomerStatus(customerOrder, CustomerStatusEntity.CUSTOMER_ORDER)) {
/s
CustomerStatusServiceImpl.updateCustomerStatus(CustomerStatusSupport, CustomerStatusEntity) line: 112	
		String oldStatus = aCustomerStatusSupport.getCustomerStatus() != null ? aCustomerStatusSupport.getCustomerStatus().getCode() : null;
"customerstatus"
		updateStatusNoUpdate(aCustomerStatusSupport, aCustomerStatusEntity);	
/ aCustomerStatusSupport = (proxy naar) customerOrder 
/ aCustomerStatusEntity=CUSTOMER_ORDER
/s
	/**
	 * Updates CustomerStatus on a CustomerStatusSupport object, but does not persist the value.
	 * 
CustomerStatusServiceImpl.updateStatusNoUpdate(CustomerStatusSupport, CustomerStatusEntity) line: 172	
/=
	private void updateStatusNoUpdate(CustomerStatusSupport anEntity, CustomerStatusEntity aType) {
aType=CUSTOMER_ORDER
anEntity	CustomerOrder_$$_javassist_108  (id=22794)	
	handler	JavassistLazyInitializer  (id=26855)	
		target	CustomerOrder  (id=26912)	
			buyer	VirtualParty  (id=26923)	
			customerOrderNumber	"order5" (id=26942)	
			customerStatus	CustomerStatusVo_$$_javassist_180  (id=26951)	
				handler	JavassistLazyInitializer  (id=36876)	
					target	CustomerStatusVo  (id=36930)	
						code	"customerstatus" (id=36055)	
						entity	CustomerStatusEntity  (id=35994)	
							name	"CUSTOMER_ORDER" (id=36137)	
							variable	"customerOrder" (id=37670)	
						expression	"${customerOrder.reference1==1}" (id=37392)	
						systemId	746611	
			organization	Organization_$$_javassist_83  (id=27000)	
			reference1	"2" (id=27009)	
			seller	VirtualParty  (id=27060)	
			systemId	11	
			theCreatedBy	Resource_$$_javassist_109  (id=27074)	
				handler
					target
						code	"8000" (id=38731)	
						description	"STARTED" (id=38740)	
						systemId	2	

/ Intermezzo

public class CustomerOrder extends EntityDetailSupport
	private CustomerStatusVo customerStatus;

/ Einde Intermezzo

		List<CustomerStatusVo> myList = getInDescendingHierarchy(aType);
/ TODO
myList	ArrayList  (id=44434)	
	[0]	CustomerStatusVo_$$_javassist_180  (id=26951)	
		handler	JavassistLazyInitializer  (id=36876)	
			target	CustomerStatusVo  (id=36930)	
				code	"customerstatus" (id=36055)	
				expression	"${customerOrder.reference1==1}" (id=37392)	
				systemId	746611	
aType	CustomerStatusEntity  (id=35994)	
	alias	"CO" (id=36140)	
	name	"CUSTOMER_ORDER" (id=36137)	
	ordinal	0	
	variable	"customerOrder" (id=37670)	

		if (!myList.isEmpty()) {
			ExpressionEvaluator myEvaluator = new ExpressionEvaluator(); / apache commons el	,
			myEvaluator.setVariable(aType.getVariable(), anEntity);
myEvaluator	ExpressionEvaluator  (id=41554)	
	theExpressionEvaluator	ExpressionEvaluatorImpl  (id=41569)	
	theVariables	HashMap  (id=41578)	
		[0]	HashMap$Entry  (id=41597)	
			key	"customerOrder" (id=37670)	
			value	CustomerOrder_$$_javassist_108  (id=22794)	

			for (CustomerStatusVo myCustomerStatus : myList) {
				String myMatchExpression = myCustomerStatus.getExpression(); 						/ ${customerOrder.reference1==1}
				if (BooleanUtils.isTrue(myEvaluator.evaluate(myMatchExpression).toString())) {
/n
/ In de customer order's reference1 staat 2	,
		if (!myStatusFound) {
			anEntity.setCustomerStatus(null);
/n
/ 	method returns	,
/t
CustomerStatusServiceImpl.updateCustomerStatus(CustomerStatusSupport, CustomerStatusEntity) line: 114	
		updateStatusNoUpdate(aCustomerStatusSupport, aCustomerStatusEntity);
/d
/ aCustomerStatusSupport's customerStatus=null, want customer order's reference1 is 2, en voldeed niet aan de customer status's expression	, 

		String newStatus = aCustomerStatusSupport.getCustomerStatus() != null ? aCustomerStatusSupport.getCustomerStatus().getCode() : null;
null
		return !StringUtils.equals(oldStatus, newStatus);	/ true 
/t
CustomerStatusServiceImpl.updateStatus(CustomerOrder) line: 121	
		if (updateCustomerStatus(customerOrder, CustomerStatusEntity.CUSTOMER_ORDER)) {
/j
			MpoBeanFactory.getBean(CustomerOrderDAO.class).save(customerOrder);
			customerOrderTriggerHandler.handleStatusChange(customerOrder);
/s
CustomerOrderTriggerHandlerImpl.handleStatusChange(CustomerOrder) line: 54	

/ Intermezzo

$ vi CustomerOrderTrigger.standard.hbm.xml
	<class name="com.mpobjects.oms.model.trigger.CustomerOrderTrigger" table="CUSTOMER_ORDER_TRIGGER">
		<set name="triggerList" table="CUSTOMER_ORDER_TRIGGER_ACTION" lazy="true" cascade="save-update">
			<key column="CO_TRIGGER_SYSTEMID" not-null="true" />
			<many-to-many class="com.mpobjects.oms.model.trigger.TriggerAction" column="TRIGGER_ACTION_SYSTEMID" />
		</set>
/ we zien GEEN inverse="true"  , dus de list moet in CustomerOrderTrigger.class (of parent class)	,

$ vi Trigger.standard.hbm.xml
	<class name="com.mpobjects.oms.model.trigger.TriggerAction" table="TRIGGER_ACTION">


public class CustomerOrderTrigger extends AbstractTrigger {
public class AbstractTrigger extends ValueObject {
	/** The trigger to kick off */
	private Set<TriggerAction> triggerList = new HashSet<TriggerAction>(0);

/ Einde Intermezzo

		Collection<CustomerOrderTrigger> myList = MpoBeanFactory.getBean(CustomerOrderTriggerDAO.class).getAll();
myList	ArrayList  (id=46178)	
	[0]	CustomerOrderTrigger  (id=46181)	
		name	"coexporttrigger" (id=46206)	
		onCustomerStatusChange	Boolean  (id=46211)	
		systemId	746610	
		triggerList	PersistentSet  (id=46250)	
			[0]	TriggerAction  (id=46301)	
				code	"coexportaction" (id=46321)	
				systemId	746609	
				triggerTask	"EXPORT_ORDER_UPDATE_MESSAGE" (id=46356)	

		for (CustomerOrderTrigger myCoTrigger : myList) { 		/ myCoTrigger	CustomerOrderTrigger  (id=46181)	
			if (myCoTrigger.getOnCustomerStatusChange()) {		/ j
				if (checkTrigger(myCoTrigger, aCustomerOrder)) {
/j
/ want
/s
CustomerOrderTriggerHandlerImpl.checkTrigger(CustomerOrderTrigger, CustomerOrder) line: 122	
		Rule myRule = aCoTrigger.getFilterExpressionRule();										/ TODO
null
		if (myRule == null) {
			return true;
/t
CustomerOrderTriggerHandlerImpl.handleStatusChange(CustomerOrder) line: 59	
				if (checkTrigger(myCoTrigger, aCustomerOrder)) {
/j
					TriggerExecutionRequest<CustomerOrderTrigger> myRequest = new TriggerExecutionRequest<CustomerOrderTrigger>(myCoTrigger);
coTrigger	CustomerOrderTrigger  (id=46181)	
	name	"coexporttrigger" (id=46206)	
	onCustomerStatusChange	Boolean  (id=46211)	
	triggerList	PersistentSet  (id=46250)	
		[0]	TriggerAction  (id=46301)	
			code	"coexportaction" (id=46321)	
			systemId	746609	
			triggerTask	"EXPORT_ORDER_UPDATE_MESSAGE" (id=46356)	

					myRequest.addObject(CustomerOrderResolver.CUSTOMER_ORDER_SYSTEM_ID, aCustomerOrder.getSystemId());
					myRequest.addObject(CustomerOrderResolver.CUSTOMER_ORDER_ID, aCustomerOrder.getCustomerOrderNumber());

myRequest	TriggerExecutionRequest  (id=47292)	
	objectMap	HashMap  (id=47656)				/ {customerOrderId=order5, customerOrderSystemId=11}
	triggerSystemId	746610	
	type	Class (com.mpobjects.oms.model.trigger.CustomerOrderTrigger) (id=12920)	

					getTriggerRequestProducer().produce(myRequest);
/s
/**
 * This class produces a-synchronous request to evaluate objects for InterfaceMessageTriggers
 */
public class TriggerRequestProducerImpl extends AbstractProducer implements TriggerRequestProducer {

	private static final Object TRIGGER_EXECUTION_MANAGER_KEY = new Object();

TriggerRequestProducerImpl.produce(TriggerExecutionRequest<?>) line: 25	
		TriggerExecutionManager myManager = (TriggerExecutionManager) TransactionSynchronizationManager.getResource(TRIGGER_EXECUTION_MANAGER_KEY);
/ TransactionSynchronizationManager is een Spring type	, 
		if (myManager == null) {
			myManager = new TriggerExecutionManager();
			TransactionSynchronizationManager.bindResource(TRIGGER_EXECUTION_MANAGER_KEY, myManager);

		if (myManager.addToQueue(aRequest)) {
/s
TriggerExecutionManager.addToQueue(TriggerExecutionRequest<?>) line: 37	
		final String myKey = createKey(aRequest);
/s
TriggerExecutionManager.createKey(TriggerExecutionRequest<?>) line: 84	
		StringBuilder myBuilder = new StringBuilder();
		myBuilder.append(aRequest.getTriggerSystemId());	/ 746610
		for (Entry<String, Serializable> entry : aRequest.getObjectMap().entrySet()) {
			myBuilder.append("-");
			myBuilder.append(entry.getKey()).append(":").append(entry.getValue());
		}
		return myBuilder.toString();	/ 746610-customerOrderId:order5-customerOrderSystemId:11
/t
TriggerExecutionManager.addToQueue(TriggerExecutionRequest<?>) line: 39	
		final String myKey = createKey(aRequest);
/d
		if (!triggerList.contains(myKey)) {
			triggerList.add(myKey);

			if (transactionHelper == null) {
				transactionHelper = MpoBeanFactory.getBean(TransactionHelper.class);

			transactionHelper.executeAfterCommit(new Runnable() {
				@Override
				public void run() {
					triggerList.remove(myKey);

			transactionHelper.executeAfterRollback(new Runnable() {
				@Override
				public void run() {
					triggerList.remove(myKey);

			return true;
/t
TriggerRequestProducerImpl.produce(TriggerExecutionRequest<?>) line: 34	
		if (myManager.addToQueue(aRequest)) {
/j
			// The queue is transacted, which means that the requests will only be picked up if the transaction succeeds			/ TODO
			queueRequest(aRequest);
/s
TriggerRequestProducerImpl.queueRequest(TriggerExecutionRequest<?>) line: 42	
			aRequest.setResource(AuthenticationUtils.getResource());			/ eric
			sendMessage(aRequest);
/s
TriggerRequestProducerImpl(AbstractProducer).sendMessage(Serializable) line: 34	
		jmsTemplate.send(destination, new MessageCreator() {
			@Override
			public Message createMessage(Session aSession) throws JMSException {
				return aSession.createObjectMessage(aSerializable);
			}
		});

/ Intermezzo

destination	ActiveMQQueue  (id=48744)	
	destinationPaths	String[3]  (id=48883)	
	physicalName	"com.mpobjects.triggerrequest" (id=48884)	

/ Lees LOG_scs_sb_xml.txt over TriggerRequestHandlerImpl	, 
/ Lees 

/ See LOG_scs_sb_xml.txt: com.mpobjects.oms.service.trigger.TriggerRequestHandlerImpl is de consumer	, 
/ Er is ook MpoMessageListener	, maar die is WH voor Jms Message Entry	,

/ we set b in de onMessage method	,

/ Einde Intermezzo

/ 7	. 

/t
CustomerOrderServiceImpl.update(CustomerOrder, boolean, boolean, TMSEventContext) line: 490	
		setCustomerOrderStatus(aCustomerOrder);
		handleCustomerOrderChange(aCustomerOrder);
/s
CustomerOrderServiceImpl.handleCustomerOrderChange(CustomerOrder) line: 594	
		CustomerOrder myOldCustomerOrder = getOld(aCustomerOrder);
customerStatus	CustomerStatusVo_$$_javassist_180  (id=26951)	
	handler	JavassistLazyInitializer  (id=36876)	
		target	CustomerStatusVo  (id=36930)	
			expression	"${customerOrder.reference1==1}" (id=37392)	

aCustomerOrder	CustomerOrder_$$_javassist_108  (id=22794)	
	handler	JavassistLazyInitializer  (id=26855)	
		target	CustomerOrder  (id=26912)	
			customerStatus	null	

		getTriggerHandler().handleUpdate(myOldCustomerOrder, aCustomerOrder);
/s
CustomerOrderTriggerHandlerImpl.handleUpdate(CustomerOrder, CustomerOrder) line: 72	

/ Intermezzo

/ Zonet in 
CustomerOrderTriggerHandlerImpl.handleStatusChange(CustomerOrder)

/ Einde Intermezzo

		Collection<CustomerOrderTrigger> myList = MpoBeanFactory.getBean(CustomerOrderTriggerDAO.class).getAll();
		for (CustomerOrderTrigger myCoTrigger : myList) {
			if(myCoTrigger.getOnUpdate()){
/n
/t
CustomerOrderServiceImpl.update(CustomerOrder, boolean, boolean, TMSEventContext) line: 491	
		setCustomerOrderStatus(aCustomerOrder);			/ produces on internal queue	,
		handleCustomerOrderChange(aCustomerOrder);		/ niets	,
/d
		CustomerOrder myOld = getOld(aCustomerOrder);
		CustomerOrder myNew = customerOrderDAO.save(aCustomerOrder);
		applySyncFlags(aCustomerOrder);
/ niets	, 
/want	,
/s
	/**
	 * Resolves the party using the party code if the sync flag is set. If the party code is empty or if no party with
	 * this id exists the data won't be changed
	 * 
CustomerOrderServiceImpl.applySyncFlags(CustomerOrder) line: 557	
		Party myBuyer = aCustomerOrder.getBuyer();	/ default, alles null of [] of 0 of ""
		if (myBuyer != null) {
			Party syncFrom = null;
			switch (aCustomerOrder.getSyncFlag(CustomerOrder.PartyType.BUYER)) {
				case PARTY_ID:
					syncFrom = partyService.getPartyByPartyId(myBuyer.getCode(), aCustomerOrder);
null
		Party mySeller = aCustomerOrder.getSeller();
		if (mySeller != null) {
			Party syncFrom = null;
			switch (aCustomerOrder.getSyncFlag(CustomerOrder.PartyType.SELLER)) {
				case PARTY_ID:
					syncFrom = partyService.getPartyByPartyId(mySeller.getCode(), aCustomerOrder);
null
/t
CustomerOrderServiceImpl.update(CustomerOrder, boolean, boolean, TMSEventContext) line: 494	
		applySyncFlags(aCustomerOrder);
/d
		myNew = customerOrderDAO.save(aCustomerOrder);
		triggerEventHandler(myOld, myNew, aContext, fromInterface);
/s
CustomerOrderServiceImpl.triggerEventHandler(CustomerOrder, CustomerOrder, TMSEventContext, boolean) line: 636	
		} else {
			if (!fromInterface) {
				myEvent = new CustomerOrderEvent(anOldVO, aNewVO, CustomerOrderEvent.UPDATED, anEventContext);
/d
myEvent	CustomerOrderEvent  (id=51263)	
	theEventType	"customerorder.updated" (id=51264)	
	theNewVO	CustomerOrder_$$_javassist_108  (id=22794)	
	theOldVO	CustomerOrder  (id=50706)	

		try {
			eventHandlerService.handleEvent(myEvent);
/s
	/**
	 * Handles the incoming event by posting the events to the listeners
	 *
EventHandlerServiceImpl.handleEvent(Event) line: 92	
		String myEventType = anEvent.getEventType();
customerorder.updated

			listenerList.fireEvent(anEvent);
/s
ListenerList.fireEvent(Event<?>) line: 62	
		for (EventListener myListener : getDelegates()) {
"getDelegates()"	 (pending)	
	[0]	DocumentEventListener  (id=51790)	
	[1]	CustomerOrderEventListener  (id=51795)	
	[2]	ShoCostAllocationEventListener  (id=51796)	
	[3]	ShoPriceAllocationServiceImpl  (id=51797)	
	[4]	TMSCarConServiceOrderEventListener  (id=51798)	
	[5]	SupplierInvoiceUpdateEventListener  (id=51799)	
	[6]	StockTransactionEventListener  (id=51800)	
	[7]	EventEventListener  (id=51801)	
	[8]	$Proxy446  (id=51802)	/ public class DeferredEventServiceImpl extends AbstractDeferredEventService implements DeferredEventService {

	[9]	AllocationEventListener  (id=51803)	
	[10]	CustomerInvoiceUpdateEventListener  (id=51804)	
	[11]	CapableToPromiseEventListener  (id=51805)	
	[12]	EmailReportEventListener  (id=51806)	
	[13]	InvoiceServiceOrderEventHandler  (id=51807)	
	[14]	RateCalcEventListener  (id=51808)	
/s
RateCalcEventListener.handleEvent(Event) line: 72	
		if (anEvent.getEventContext().hasFlag(TMSEventContext.FLAG_MAY_RATE_CALC)) {
			String myRecalcExecution = ApplicationPropertyManager.getInstance().getModuleProperty("ratecalc", "serviceorder.ratecalculation.execution");

			if (myRecalcExecution.equalsIgnoreCase("auto")) {
				recalcServiceOrderCost(anEvent);
			}

			String myPriceExecution = ApplicationPropertyManager.getInstance().getModuleProperty("ratecalc", "shipmentorderprice.ratecalculation.execution");

			if (myPriceExecution.equalsIgnoreCase("auto")) {
				anEvent.debug("handled by RateCalcEventListener - price");
				recalcShipOrderPrice(anEvent);
			}

			recalcCustomerOrder(anEvent);
			recalcCustomerOrderLine(anEvent);
/ TODO
/t
EventHandlerServiceImpl.handleEvent(Event) line: 131	
			listenerList.fireEvent(anEvent);
/d
			broadcastToTopic(anEvent);
/s
EventHandlerServiceImpl.broadcastToTopic(Event<?>) line: 186	
		if (aEvent.getNewVO() instanceof EntityInterface) {
			entity = (EntityInterface) aEvent.getNewVO();
		broadcastEvent(aEvent.getEventType(), eventType[0], eventType[1], entity.getSystemId());
/s
EventHandlerServiceImpl.broadcastEvent(String, String, String, int) line: 60	
		jmsTemplate.send(jmsTopicName, new MessageCreator() {			/ jmsTopicName="com.mpobjects.eventhandler"	,
			@Override
			public Message createMessage(Session aSession) throws JMSException {
				Message message = aSession.createMessage();
				message.setStringProperty(AbstractEventNotificationHandler.HEADER_EVENT_TYPE, aEventType);
				message.setStringProperty(AbstractEventNotificationHandler.HEADER_EVENT_ENTITY, aEntity);
				message.setStringProperty(AbstractEventNotificationHandler.HEADER_EVENT_OPERATION, aOperation);
				message.setIntProperty(AbstractEventNotificationHandler.HEADER_SYSTEM_ID, aSystemId);
				return message;
message	ActiveMQMessage  (id=52640)	
	connection	ActiveMQConnection  (id=48789)	
	properties	HashMap  (id=52641)	/ {SystemId=11, EventOperation=updated, EventEntity=customerorder, EventType=customerorder.updated}

			}
		});
/ Is er een consumer	? Is dit een producer	?
/ TODO

/ 7	. 

/c
	TriggerExecutionManager$1.run() line: 53	
/=
			transactionHelper.executeAfterCommit(new Runnable() {
				@Override
				public void run() {

					triggerList.remove(myKey);	/ val$myKey	"746610-customerOrderId:order5-customerOrderSystemId:11" (id=48090)		, triggerList=[] hierna	,
/cb
	TransactionHelperImpl$TXAction.afterCompletion(int) line: 55	
	TransactionImpl.doAfterCompletion() line: 1526	
	TransactionImpl.completeTransaction() line: 1198	
	TransactionImpl.commit() line: 377	
	TxManager.commit() line: 240	
	ServerVMClientUserTransaction.commit() line: 140	
	JtaTransactionManager.doCommit(DefaultTransactionStatus) line: 1012	
	JtaTransactionManager(AbstractPlatformTransactionManager).processCommit(DefaultTransactionStatus) line: 755	
	JtaTransactionManager(AbstractPlatformTransactionManager).commit(TransactionStatus) line: 724	
	TransactionInterceptor(TransactionAspectSupport).commitTransactionAfterReturning(TransactionAspectSupport$TransactionInfo) line: 475	
	TransactionInterceptor(TransactionAspectSupport).invokeWithinTransaction(Method, Class, TransactionAspectSupport$InvocationCallback) line: 270	
	TransactionInterceptor.invoke(MethodInvocation) line: 94	
	ReflectiveMethodInvocation.proceed() line: 172	
	JdkDynamicAopProxy.invoke(Object, Method, Object[]) line: 204	
	$Proxy317.update(CustomerOrder, boolean) line: not available	
	CustomerOrderEditFormPage$7.onSubmit(Button, AjaxRequestTarget, IModel<CustomerOrder>) line: 412	
	EntityActionAjaxButton$1.onSubmit(AjaxRequestTarget, Form<?>) line: 56	
	AjaxFallbackButton$1.onSubmit(AjaxRequestTarget) line: 74	
	AjaxFallbackButton$1(AjaxFormSubmitBehavior).onEvent(AjaxRequestTarget) line: 156	
	AjaxFallbackButton$1(AjaxEventBehavior).respond(AjaxRequestTarget) line: 177	
	AjaxFallbackButton$1(AbstractDefaultAjaxBehavior).onRequest() line: 312	
	BehaviorRequestTarget.processEvents(RequestCycle) line: 157	
	WebRequestCycleProcessor(AbstractRequestCycleProcessor).processEvents(RequestCycle) line: 92	
	MpoWebRequestCycle(RequestCycle).processEventsAndRespond() line: 1279	
	MpoWebRequestCycle(RequestCycle).step() line: 1358	
	MpoWebRequestCycle(RequestCycle).steps() line: 1465	
	MpoWebRequestCycle(RequestCycle).request() line: 545	
	WicketFilter.doGet(HttpServletRequest, HttpServletResponse) line: 486	
	WicketServlet.doPost(HttpServletRequest, HttpServletResponse) line: 160	
	WicketServlet(HttpServlet).service(HttpServletRequest, HttpServletResponse) line: 717	
	WicketServlet(HttpServlet).service(ServletRequest, ServletResponse) line: 810	

/ 7	. 

/ LOCAL EXPORT VIA ACTION  

/ Lees LOG_scs_sb_xml.txt over TriggerRequestHandlerImpl	, 

/ c
/ stack	,
	TriggerRequestHandlerImpl.onMessage(Message) line: 38	
	GeneratedMethodAccessor2636.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.__invoke(Object, Object[]) line: 43	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	Method.invoke(Object, Object...) line: 606	
	AopUtils.invokeJoinpointUsingReflection(Object, Method, Object[]) line: 317	
	ReflectiveMethodInvocation.invokeJoinpoint() line: 183	
	ReflectiveMethodInvocation.proceed() line: 150	
	TransactionInterceptor$1.proceedWithInvocation() line: 96	
	TransactionInterceptor(TransactionAspectSupport).invokeWithinTransaction(Method, Class, TransactionAspectSupport$InvocationCallback) line: 260	
	TransactionInterceptor.invoke(MethodInvocation) line: 94	
	ReflectiveMethodInvocation.proceed() line: 172	
	JdkDynamicAopProxy.invoke(Object, Method, Object[]) line: 204	
	$Proxy337.onMessage(Message) line: not available	
	DefaultMessageListenerContainer(AbstractMessageListenerContainer).doInvokeListener(MessageListener, Message) line: 569	
	DefaultMessageListenerContainer(AbstractMessageListenerContainer).invokeListener(Session, Message) line: 507	
	DefaultMessageListenerContainer(AbstractMessageListenerContainer).doExecuteListener(Session, Message) line: 474	
	DefaultMessageListenerContainer(AbstractPollingMessageListenerContainer).doReceiveAndExecute(Object, Session, MessageConsumer, TransactionStatus) line: 325	
	DefaultMessageListenerContainer(AbstractPollingMessageListenerContainer).receiveAndExecute(Object, Session, MessageConsumer) line: 263	
	DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener() line: 1103	
	DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop() line: 1095	
	DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run() line: 992	
	Thread.run() line: 745	
/ DefaultMessageListenerContainer is een Spring type	,
/s
com.mpobjects.oms.service.trigger.TriggerRequestHandlerImpl.onMessage(javax.jms.Message) line: 38	

aMessage	ActiveMQObjectMessage  (id=52882)	
	connection	ActiveMQConnection  (id=52925)	
	content	ByteSequence  (id=52926)	
		data	(id=52981)	
		length	7390	
	messageId	MessageId  (id=52927)	
	object	TriggerExecutionRequest  (id=53820)	
		objectMap	HashMap  (id=53824)		/ {customerOrderSystemId=11, customerOrderId=order5}
		resource	Resource  (id=53828)	
		triggerSystemId	746610	
		type	Class (com.mpobjects.oms.model.trigger.CustomerOrderTrigger) (id=12920)	

/ WH komen we in CustomerOrderProcessor.process uit	,
/ NEE	, in OrderUpdateProcessor.generateOrderUpdate	, vanwege de trigger task "EXPORT_ORDER_UPDATE_MESSAGE"

		try {
			TriggerExecutionRequest<?> myRequest = (TriggerExecutionRequest<?>) ((ObjectMessage) aMessage).getObject();
			triggerActionExecutionService.executeRequest(myRequest);
/s
com.mpobjects.oms.service.trigger.TriggerActionExecutionServiceImpl.executeRequest(com.mpobjects.oms.service.trigger.TriggerExecutionRequest<?>) line: 29	

		AbstractTrigger myTrigger = triggerDaoManager.getDao(aRequest.getType()).getBySystemId(aRequest.getTriggerSystemId());
myTrigger	CustomerOrderTrigger_$$_javassist_92  (id=54204)	
	handler	JavassistLazyInitializer  (id=54257)	
		entityName	"com.mpobjects.oms.model.trigger.CustomerOrderTrigger" (id=54304)	
		id	Integer  (id=54306)		/ 746610
		initialized	true	

		List<TriggerAction> myTriggerActionList = new ArrayList<TriggerAction>(myTrigger.getTriggerList());
myTriggerActionList	ArrayList  (id=54450)	
	[0]	TriggerAction  (id=54453)	
		code	"coexportaction" (id=54474)	
		systemId	746609	
		triggerTask	"EXPORT_ORDER_UPDATE_MESSAGE" (id=54508)	

		for (TriggerAction myTriggerAction : myTriggerActionList) {
			TriggerTask myTask = triggerTaskDefinitionManager.getTask(myTriggerAction.getTriggerTask());
/s
com.mpobjects.oms.service.trigger.TriggerTaskDefinitionManagerImpl.getTask(java.lang.String) line: 50	
/=
	public TriggerTask getTask(String aName) {	/ aName="EXPORT_ORDER_UPDATE_MESSAGE"

		Class<? extends TriggerTask> myClass = definitionMap.get(aName);
				return myClass.newInstance();

this	TriggerTaskDefinitionManagerImpl  (id=54745)	
	definitionMap	HashMap  (id=54758)	
		[0]	HashMap$Entry  (id=54767)	
			key	"EXPORT_CUSTOM_SHIPMENT_ORDER_MESSAGE" (id=54812)	
			value	Class (com.mpobjects.oms.model.trigger.task.ExportCustomShipmentOrderMessage) (id=11899)	
		[1]	HashMap$Entry  (id=54768)	
			key	"EXPORT_LOGISTICS_ORDER_EVENT" (id=54811)	
			value	Class (com.mpobjects.oms.model.trigger.task.ExportLogisticsOrderEvent) (id=7734)	
		[2]	HashMap$Entry  (id=54769)	
			key	"EXPORT_DOCUMENT_AS_EVENT" (id=54810)	
			value	Class (com.mpobjects.document.filemeta.service.ExportDocumentTriggerTask) (id=22061)	
		[3]	HashMap$Entry  (id=54770)	
			key	"CREATE_SERVICE_ORDER_EVENT" (id=54809)	
			value	Class (com.mpobjects.event.service.triggertask.CreateServiceOrderEvent) (id=12841)	
		[4]	HashMap$Entry  (id=54771)	
			key	"ASSIGN_PATH" (id=54808)	
			value	Class (com.mpobjects.oms.model.trigger.task.AssignPath) (id=11589)	
		[5]	HashMap$Entry  (id=54772)	
			key	"EXPORT_SERVICE_ORDER" (id=54807)	
			value	Class (com.mpobjects.oms.model.trigger.task.ExportServiceOrder) (id=3983)	
		[6]	HashMap$Entry  (id=54773)	
			key	"GENERATE_DOCUMENT" (id=54806)	
			value	Class (com.mpobjects.oms.model.trigger.task.GenerateDocument) (id=7559)	
		[7]	HashMap$Entry  (id=54774)	
			key	"GENERATE_LABEL" (id=54805)	
			value	Class (com.mpobjects.oms.model.trigger.task.GenerateLabel) (id=2207)	
		[8]	HashMap$Entry  (id=54775)																				<-
			key	"EXPORT_ORDER_UPDATE_MESSAGE" (id=54804)	
			value	Class (com.mpobjects.oms.model.trigger.task.ExportOrderUpdateMessage) (id=6847)	
		[9]	HashMap$Entry  (id=54776)	
			key	"GENERATE_SUPPLIER_INVOICE" (id=54803)	
			value	Class (com.mpobjects.invoice.model.trigger.GenerateSupplierInvoice) (id=14518)	
		[10]	HashMap$Entry  (id=54777)	
			key	"EXPORT_CUSTOM_CUSTOMER_ORDER_MESSAGE" (id=54802)	
			value	Class (com.mpobjects.oms.model.trigger.task.ExportCustomCustomerOrderMessage) (id=11534)	
		[11]	HashMap$Entry  (id=54778)	
			key	"VALIDATE_SHIPMENT_ORDER" (id=54801)	
			value	Class (com.mpobjects.oms.model.trigger.task.ValidateShipmentOrder) (id=17716)	
		[12]	HashMap$Entry  (id=54779)	
			key	"EXPORT_CUSTOM_MESSAGE" (id=54800)	
			value	Class (com.mpobjects.oms.model.trigger.task.ExportCustomMessage) (id=4082)	
		[13]	HashMap$Entry  (id=54782)	
			key	"GENERATE_INBOUND_LABEL" (id=54799)	
			value	Class (com.mpobjects.oms.model.trigger.task.GenerateInboundLabel) (id=22023)	
		[14]	HashMap$Entry  (id=54783)	
			key	"GENERATE_CUSTOMER_INVOICE" (id=54798)	
			value	Class (com.mpobjects.customerinvoice.model.trigger.GenerateCustomerInvoice) (id=12068)	
		[15]	HashMap$Entry  (id=54786)	
			key	"RELEASE_SERVICE_ORDER_FOR_EVENT" (id=54797)	
			value	Class (com.mpobjects.oms.model.trigger.task.ReleaseServiceOrderForEvent) (id=2305)	
		[16]	HashMap$Entry  (id=54789)	
			key	"SEND_MESSAGE" (id=54796)	
			value	Class (com.mpobjects.oms.model.trigger.task.SendMessage) (id=8640)	
		[17]	HashMap$Entry  (id=54790)	
			key	"CHECK_SHIPMENT_ORDER_SERVICE_AGREEMENT" (id=54795)	
			value	Class (com.mpobjects.oms.ratecalc.model.trigger.RecalculateShipmentOrderPriceCost) (id=13598)	
		[18]	HashMap$Entry  (id=54793)	
			key	"EXPORT_SHIPMENT_ORDER" (id=54794)	
			value	Class (com.mpobjects.oms.model.trigger.task.ExportShipmentOrder) (id=7393)	
aName	"EXPORT_ORDER_UPDATE_MESSAGE" (id=54508)	

/t
com.mpobjects.oms.service.trigger.TriggerActionExecutionServiceImpl.executeRequest(com.mpobjects.oms.service.trigger.TriggerExecutionRequest<?>) line: 47	
		for (TriggerAction myTriggerAction : myTriggerActionList) {
			TriggerTask myTask = triggerTaskDefinitionManager.getTask(myTriggerAction.getTriggerTask());
/d
myTask	ExportOrderUpdateMessage  (id=54956)	

			myTask.execute(myTriggerAction.getParameters(), aRequest.getObjectMap());
/s
com.mpobjects.oms.model.trigger.task.ExportOrderUpdateMessage.execute(java.util.Collection<com.mpobjects.oms.model.trigger.TriggerTaskParameter<?>>, java.util.Map<java.lang.String,java.io.Serializable>) line: 47	
/=
	public void execute(Collection<TriggerTaskParameter<?>> aParameters, Map<String, Serializable> anObjectMap) {
aParameters=[TaskParameter[purposeCode =null]]
anObjectMap={customerOrderSystemId=11, customerOrderId=order5}

		parameters.clear();
		parameters.addAll(aParameters);
[TaskParameter[purposeCode =null]]
		String purposeCode = StringUtils.defaultString((String) getParameter(PURPOSE_CODE_PARAM).getValue());
""
		if (anObjectMap.get(CustomerOrderResolver.CUSTOMER_ORDER_SYSTEM_ID) != null) {
			handleCustomerOrderBasedExport((Integer) anObjectMap.get(CustomerOrderResolver.CUSTOMER_ORDER_SYSTEM_ID), purposeCode);
/s
com.mpobjects.oms.model.trigger.task.ExportOrderUpdateMessage.handleCustomerOrderBasedExport(int, java.lang.String) line: 83	
/=
	private void handleCustomerOrderBasedExport(int customerOrderSystemId, String purposeCode) {
customerOrderSystemId	11	
purposeCode	"" (id=36849)	

			CustomerOrder order = MpoBeanFactory.getBean(CustomerOrderDAO.class).getBySystemId(customerOrderSystemId);
/ uninit proxy	,
			Map<String, Object> parameters = new HashMap<String, Object>();
			parameters.put("PURPOSE_CODE", purposeCode);

			ContextEntryResolver myResolver = MpoBeanFactory.getBean(ContextEntryResolver.class);
			SapXMessage message = MpoBeanFactory.getBean(OrderUpdateProcessor.class).generateOrderUpdate(
					myResolver.resolveDownwardHierarchyForCustomerOrder(order, parameters),						/ TODO
					purposeCode);
/s
ContextEntryResolverImpl.resolveDownwardHierarchyForCustomerOrder(CustomerOrder, Map<String,Object>) line: 24	
		ContextEntry customerOrderEntry = new ContextEntry();
		customerOrderEntry.setEntitySystemId(customerOrder.getSystemId());	/ 11
		customerOrderEntry.setOrganization(customerOrder.getOrganization());	/ BAKKER
		customerOrderEntry.setId(customerOrder.getCustomerOrderNumber());	"order5"
		customerOrderEntry.setContextType(ContextType.CUSTOMER_ORDER);	

customerOrderEntry	ContextEntry  (id=29997)	
	childEntries	ArrayList  (id=30000)			/ []
	contextType	ContextEntry$ContextType  (id=29479)	/ CUSTOMER_ORDER	
	entitySystemId	11	
	extendedId	null	
	id	"order5" (id=29255)	
	organization	Organization_$$_javassist_83  (id=28051)	/ BAKKER
	purposeCode	null	

		for (CustomerOrderLine customerOrderLine : customerOrder.getCustomerOrderLineSet()) {
customerOrderLine	CustomerOrderLine  (id=30206)	
	attachments	PersistentSet  (id=30236)							/ []
	billToParty	VirtualParty  (id=30241)							/ PARTY id:{RFS.TRC}KL20161206112138(systemId:0)	
	customerOrder	CustomerOrder_$$_javassist_108  (id=28997)		/ order5	
	customerOrderLineId	"1" (id=30262)	
	product	Product_$$_javassist_17  (id=30353)						/ 123 (746501)	
	quantity	BigDecimal  (id=30356)								/ 1.0000	
	systemId	11	
	theFromPartyVO	VirtualParty  (id=30702)						/ PARTY id:NL-3899AT-9(systemId:0)	
	theToPartyVO	VirtualParty  (id=30759)						/ PARTY id:ADR-20161206112139(systemId:0)

			customerOrderEntry.addChildEntry(resolveDownwardHierarchyForCustomerOrderLine(customerOrderLine, parameters));
/s
ContextEntryResolverImpl.resolveDownwardHierarchyForCustomerOrderLine(CustomerOrderLine, Map<String,Object>) line: 39	
		ContextEntry customerOrderLineEntry = new ContextEntry();
		customerOrderLineEntry.setEntitySystemId(customerOrderLine.getSystemId());
		customerOrderLineEntry.setOrganization(customerOrderLine.getCustomerOrder().getOrganization());
		customerOrderLineEntry.setId(customerOrderLine.getCustomerOrderLineId());
		customerOrderLineEntry.setExtendedId(customerOrderLine.getCustomerOrder().getCustomerOrderNumber());			/ !
		customerOrderLineEntry.setContextType(ContextType.CUSTOMER_ORDER_LINE);

customerOrderLineEntry	ContextEntry  (id=31183)	
	childEntries	ArrayList  (id=31187)	
	contextType	ContextEntry$ContextType  (id=31192)	
	entitySystemId	11	
	extendedId	"order5" (id=29255)	
	id	"1" (id=30262)	
	organization	Organization_$$_javassist_83  (id=28051)	
	purposeCode	null	

		for (ProductItemVO productItem : customerOrderLine.getLinkedProductItemSet()) {

productItem	ProductItemVO  (id=31406)	
	systemId	11	
	theOriginalCustomerOrderId	"order5" (id=32109)	
	theOriginalCustomerOrderLineId	"1" (id=32127)	
	theProduct	Product_$$_javassist_17  (id=30353)	
		handler	JavassistLazyInitializer  (id=32879)	
			target	Product  (id=33023)	
				code	"123" (id=33098)	
				systemId	746501	
	theProductItemId	"010" (id=32157)	

			customerOrderLineEntry.addChildEntry(resolveDownwardHierarchyForProductItem(productItem, parameters));
/s
ContextEntryResolverImpl.resolveDownwardHierarchyForProductItem(ProductItemVO, Map<String,Object>) line: 77	
		ContextEntry productItemEntry = new ContextEntry();
		productItemEntry.setOrganization(productItem.getShipmentOrder().getOrganization());
		productItemEntry.setEntitySystemId(productItem.getSystemId());
		productItemEntry.setId(productItem.getProductItemId());
		productItemEntry.setExtendedId(productItem.getShipmentOrder().getShipmentOrderId());
		productItemEntry.setContextType(ContextType.PRODUCT_ITEM);

productItemEntry	ContextEntry  (id=34058)	
	childEntries	ArrayList  (id=34071)				/ []
	contextType	ContextEntry$ContextType  (id=34075)	/ PRODUCT_ITEM	
	entitySystemId	11	
	extendedId	"SH000000016" (id=34085)	
	id	"010" (id=32157)	
	organization	Organization_$$_javassist_83  (id=28051)/ Id:BAKKER	
	purposeCode	null	

		if (productItem.getShipmentOrder() != null) {
			productItemEntry.addChildEntry(resolveDownwardHierarchyForShipmentOrder(productItem.getShipmentOrder(), parameters));
/s
ContextEntryResolverImpl.resolveDownwardHierarchyForShipmentOrder(ShipmentOrderVO, Map<String,Object>) line: 108	
		ContextEntry shipmentOrderEntry = new ContextEntry();
		shipmentOrderEntry.setEntitySystemId(shipmentOrder.getSystemId());
		shipmentOrderEntry.setOrganization(shipmentOrder.getOrganization());
		shipmentOrderEntry.setId(shipmentOrder.getShipmentOrderId());
		shipmentOrderEntry.setContextType(ContextType.SHIPMENT_ORDER);

shipmentOrderEntry	ContextEntry  (id=34313)	
	childEntries	ArrayList  (id=34316)	
	contextType	ContextEntry$ContextType  (id=34321)	
	entitySystemId	50331	
	extendedId	null	
	id	"SH000000016" (id=34085)	
	organization	Organization_$$_javassist_83  (id=28051)	
	purposeCode	null	

		for (ServiceActionVO action : shipmentOrder.getServiceActionList()) {	/ SH000000016/DELIVERY/50345
			ConsignmentVO consignment = action.getConsignmentVO();	/ N0050315.1/50344
			if (consignment != null) {
				ServiceOrderVO order = consignment.getServiceOrderVO();	/ N0050315/50355
				if (order != null) {
					shipmentOrderEntry.addChildEntry(resolveDownwardHierarchyForServiceOrder(order, parameters));
/s
ContextEntryResolverImpl.resolveDownwardHierarchyForServiceOrder(ServiceOrderVO, Map<String,Object>) line: 93	
		ContextEntry serviceOrderEntry = new ContextEntry();
		serviceOrderEntry.setEntitySystemId(serviceOrder.getSystemId());
		serviceOrderEntry.setOrganization(serviceOrder.getOrganization());
		serviceOrderEntry.setId(serviceOrder.getServiceOrderId());
		serviceOrderEntry.setContextType(ContextType.SERVICE_ORDER);

serviceOrderEntry	ContextEntry  (id=34728)	
	childEntries	ArrayList  (id=34731)	
	contextType	ContextEntry$ContextType  (id=34736)	
	entitySystemId	50355	
	extendedId	null	
	id	"N0050315" (id=34749)	
	organization	Organization_$$_javassist_83  (id=28051)	
	purposeCode	null	

		for (EventVO event : serviceOrder.getEvents()) {
/n
			serviceOrderEntry.addChildEntry(resolveDownwardHierarchyForLogisticsOrderEvent(event, parameters));
/n
		return serviceOrderEntry;
/t
ContextEntry.addChildEntry(ContextEntry) line: 24	
					shipmentOrderEntry.addChildEntry(resolveDownwardHierarchyForServiceOrder(order, parameters));
/pd
/s
ContextEntry.addChildEntry(ContextEntry) line: 24	
		childEntries.add(entry);
/t
ContextEntryResolverImpl.resolveDownwardHierarchyForShipmentOrder(ShipmentOrderVO, Map<String,Object>) line: 119	

/ volgende	,
		for (ServiceActionVO action : shipmentOrder.getServiceActionList()) {	/ SH000000016/FINCONS/50346
			ConsignmentVO consignment = action.getConsignmentVO();	/ N0050316.1/50345
			if (consignment != null) {
				ServiceOrderVO order = consignment.getServiceOrderVO();	/ N0050316/50356
				if (order != null) {
					shipmentOrderEntry.addChildEntry(resolveDownwardHierarchyForServiceOrder(order, parameters));
/ geen volgende	,
		return shipmentOrderEntry;
/t
ContextEntryResolverImpl.resolveDownwardHierarchyForProductItem(ProductItemVO, Map<String,Object>) line: 88	
			productItemEntry.addChildEntry(resolveDownwardHierarchyForShipmentOrder(productItem.getShipmentOrder(), parameters));
/d
		return productItemEntry;
/t
ContextEntryResolverImpl.resolveDownwardHierarchyForCustomerOrderLine(CustomerOrderLine, Map<String,Object>) line: 50	
		for (ProductItemVO productItem : customerOrderLine.getLinkedProductItemSet()) {
			customerOrderLineEntry.addChildEntry(resolveDownwardHierarchyForProductItem(productItem, parameters));
/d
/ geen volgende,	 
		return customerOrderLineEntry;
/t
ContextEntryResolverImpl.resolveDownwardHierarchyForCustomerOrder(CustomerOrder, Map<String,Object>) line: 34	
		for (CustomerOrderLine customerOrderLine : customerOrder.getCustomerOrderLineSet()) {
			customerOrderEntry.addChildEntry(resolveDownwardHierarchyForCustomerOrderLine(customerOrderLine, parameters));
/d
/ geen volgende,	
		return customerOrderEntry;
/t
ExportOrderUpdateMessage.handleCustomerOrderBasedExport(int, String) line: 95	
			SapXMessage message = MpoBeanFactory.getBean(OrderUpdateProcessor.class).generateOrderUpdate(
					myResolver.resolveDownwardHierarchyForCustomerOrder(order, parameters),
					purposeCode);
/pd
/s
com.mpobjects.oms.model.orderupdateexport.service.OrderUpdateProcessor.generateOrderUpdate(com.mpobjects.oms.model.orderupdateexport.ContextEntry, java.lang.String) line: 61	
/=
	public SapXMessage generateOrderUpdate(ContextEntry contextEntry, String purposeCode) throws XMLProcessorException {

contextEntry	ContextEntry  (id=55812)									/ TODO
	contextType	ContextEntry$ContextType  (id=55828)	
	entitySystemId	11	
	extendedId	null	
	id	"order5" (id=26942)	
	organization	Organization_$$_javassist_83  (id=54491)	
	purposeCode	null	
	childEntries	ArrayList  (id=55824)	
		[0]	ContextEntry  (id=55863)	
			childEntries	ArrayList  (id=55870)	
				[0]	ContextEntry  (id=55912)	
					childEntries	ArrayList  (id=55916)	
					contextType	ContextEntry$ContextType  (id=55919)	
					entitySystemId	11	
					extendedId	"SH000000016" (id=55926)	
					id	"010" (id=55931)	
					organization	Organization_$$_javassist_83  (id=54491)	
					purposeCode	null	
			contextType	ContextEntry$ContextType  (id=55874)	
			entitySystemId	11	
			extendedId	"order5" (id=26942)	
			id	"1" (id=55887)	
			organization	Organization_$$_javassist_83  (id=54491)	
			purposeCode	null	
purposeCode	"" (id=36849)	

		SapXMessage sapXMessage = new SapXMessage(ORDER_UPDATE_MSG, true);
		setHeader(sapXMessage);
		try {
			Node bodyNode = selectSingleNode(sapXMessage.getDocument(), ORDER_UPDATE_MSG, "body");
			Node contextNode = appendElement(bodyNode, MTC_NS + ContextEntryProcessor.CONTEXT_TAG);

			Node contextEntryNode = appendElement(contextNode, MTC_NS + ContextEntryProcessor.CONTEXT_ENTRY_TAG);	

/ Deze gaan we update	, maar uiteindelijk dus sapXMessage	, 

			new ContextEntryProcessor().generate(contextEntryNode, contextEntry);
/ updates, set, creates contextEntryNode	, met data uit contextEntry
/s
com.mpobjects.oms.model.orderupdateexport.xml.ContextEntryProcessor.generate(org.w3c.dom.Node, com.mpobjects.oms.model.orderupdateexport.ContextEntry) line: 40	
		if (contextEntry.getContextType() != null) {
			appendTextElement(aNode, MTC_NS + CONTEXT_TYPE_TAG, contextEntry.getContextType().toString());	/ mtc:CONTEXT_TYPE

		appendTextElement(aNode, MTC_NS + CONTEXT_ID_TAG, contextEntry.getId());		/ mtc:CONTEXT_ID

		if (contextEntry.getOrganization() != null) {
			appendTextElement(aNode, MTC_NS + CONTEXT_ORGANIZATION_TAG, contextEntry.getOrganization().getCode());	/ mtc:CONTEXT_ORGANIZATION

		for (ContextEntry childEntry : contextEntry.getChildEntries()) {
			Node contextNodeEntry = appendElement(aNode, MTC_NS + CONTEXT_ENTRY_TAG);	/ mtc:CONTEXT_ENTRY
			generate(contextNodeEntry, childEntry);
/ recursive call	,
/s
com.mpobjects.oms.model.orderupdateexport.xml.ContextEntryProcessor.generate(org.w3c.dom.Node, com.mpobjects.oms.model.orderupdateexport.ContextEntry) line: 48	
		if (contextEntry.getContextType() != null) {
			appendTextElement(aNode, MTC_NS + CONTEXT_TYPE_TAG, contextEntry.getContextType().toString());
		}
		appendTextElement(aNode, MTC_NS + CONTEXT_ID_TAG, contextEntry.getId());

		if (contextEntry.getExtendedId() != null) {
			appendTextElement(aNode, MTC_NS + CONTEXT_EXTENDED_ID_TAG, contextEntry.getExtendedId());	/ mtc:CONTEXT_EXTENDED_ID

		if (contextEntry.getOrganization() != null) {
			appendTextElement(aNode, MTC_NS + CONTEXT_ORGANIZATION_TAG, contextEntry.getOrganization().getCode());

		for (ContextEntry childEntry : contextEntry.getChildEntries()) {
			Node contextNodeEntry = appendElement(aNode, MTC_NS + CONTEXT_ENTRY_TAG);
			generate(contextNodeEntry, childEntry);
		}
/ TODO we geloven het	, 
/t
com.mpobjects.oms.model.orderupdateexport.service.OrderUpdateProcessor.generateOrderUpdate(com.mpobjects.oms.model.orderupdateexport.ContextEntry, java.lang.String) line: 78	
			new ContextEntryProcessor().generate(contextEntryNode, contextEntry);
/d
/ contextEntryNode is filled with data from contextEntry 

			generateOrderSpecificMessages(contextEntry, bodyNode, new HashSet<String>());
/ TODO Deze duurt heel lang,	
			return sapXMessage;
/t
com.mpobjects.oms.model.trigger.task.ExportOrderUpdateMessage.handleCustomerOrderBasedExport(int, java.lang.String) line: 96	
			SapXMessage message = MpoBeanFactory.getBean(OrderUpdateProcessor.class).generateOrderUpdate(
					myResolver.resolveDownwardHierarchyForCustomerOrder(order, parameters),
					purposeCode);
/d
			performExport(message, purposeCode); 
/s
com.mpobjects.oms.model.trigger.task.ExportOrderUpdateMessage.performExport(com.mpobjects.util.sap.message.SapXMessage, java.lang.String) line: 144	
		props.put("PURPOSE_CODE", purposeCode);

		// Sent message to JMS
		try {
			MpoBeanFactory.getBean(JmsService.class).sendSapXMessage(sapXMessage, props);	/ MORGENOCHTEND
/s
JmsServiceImpl.sendSapXMessage(SapXMessage, Map<String,String>) line: 39	
/=
	public void sendSapXMessage(SapXMessage sapXMessage, Map<String, String> properties) throws Exception {
sapXMessage	SapXMessage  (id=35073)	
	theDocument	DocumentImpl  (id=35271)	
		children	Node[1]  (id=36249)	
			[0]	ElementImpl  (id=36250)	
				children	Node[2]  (id=36264)	
					[0]	ElementImpl  (id=36265)	
					[1]	ElementImpl  (id=35074)	
				attributes	Node[3]  (id=36267)	
		attributes	null	
	...
		if (sapXMessage != null) {
			JMSMessageVO myJMSMessageVO = new JMSMessageVO();
			myJMSMessageVO.setProperties(properties);
			myJMSMessageVO.setMessage(DomUtil.serialize(sapXMessage.getDocument()));
DomUtil.serialize(sapXMessage.getDocument())=
<?xml version="1.0" encoding="UTF-8"?>
<mtc:ORDER_UPDATE_MSG xmlns:mtc="mtcnotset" xmlns:mtccore="mtccorenotset" xmlns:mtcevent="mtceventnotset"><mtc:header><mtccore:typ>ORDER_UPDATE_MSG</m
			sendJmsMessage(myJMSMessageVO);
/s
JmsServiceImpl.sendJmsMessage(JMSMessageVO) line: 61	
		JMSConfigurationVO myConfigurationVO = new JMSConfigurationVO();
		myConfigurationVO.setDestinationType(JMSDestinationType.QUEUE);
		String myHost = ApplicationPropertyManager.getInstance().getPropertyEnv("oms", "jmsserver", "default");
default
		String myQueue = ApplicationPropertyManager.getInstance().getModuleApplicationProperty("interfacing", "jmsmessage.from.destination",
				"MPOBJECTS.FROM.SCS");
MPOBJECTS.FROM.BAKKER
		myConfigurationVO.setServerId(myHost);
		myConfigurationVO.setUsername("");
		myConfigurationVO.setPassword("");
		myConfigurationVO.setDestination(myQueue);
		myJMSMessageVO.setConfigurationVO(myConfigurationVO); 

		// send message to a JMS queue for further processing
		MpoBeanFactory.getBean(JMSMessageSendProxyInterface.class).send(myJMSMessageVO);
/s
JMSMessageSendProxy.send(JMSMessageVO) line: 16	
		String brokerId = aVO.getServerId();						/ "default"
		if (brokerId == null || brokerId.trim().length() == 0) {
			brokerId = PureJMSClient.DEFAULT_BROKER_ID;
		}
		PureJMSClient client = new PureJMSClient(brokerId.trim());
		try {
			client.setDestination(aVO.getDestination(), aVO.getDestinationType());
			client.setPriority(aVO.getPriority());
			client.setProperties(aVO.getProperties());
			client.sendMessage(aVO.getMessage());
		} finally {
			client.cleanJmsEnvironment();
		}

/ Einde LOCAL EXPORT VIA ACTION  
/ See VOORBEELD RELEASE EXPORT OP BAKKER TEST
/ See NOTES MICHEL
/ See DEBUG TEST MICHEL

/ 7	 . 

# create database geosco0906t tablespace scs;

[eric@localhost bin]$ local-pg_restore.sh  geosco0906t ~/DB_TAP/Postgres/Backup/geosco-t-2016-09-06.dump 

[eric@localhost bin]$ cat bakker-psql-t.sh 
#!/usr/bin/bash
PGPASSWORD=h^Zgcyr\&Q psql -U vanderveldene -h  bli-app-t.intermax.mp-objects.com bakker 

[eric@localhost bin]$ cat bakker-pg_dump-t.sh 
#!/usr/bin/bash
cd ~/DB_TAP/Postgres/Backup
PGPASSWORD=h^Zgcyr\&Q pg_dump -U vanderveldene -Fc -h  bli-app-t.intermax.mp-objects.com bakker >"bakker-t-$(date +%F).dump"

[eric@localhost bin]$ bakker-pg_dump-t.sh 
pnllogistics0701t=# create database bakker20160207_t tablespace scs;
CREATE DATABASE
[eric@localhost bin]$ local-pg_restore.sh  bakker20160207_t ~/DB_TAP/Postgres/Backup/bakker-t-2017-02-07.dump 

[eric@localhost bin]$ PGPASSWORD=mpopostgres@mpo psql  -U mpopostgres bakker20160207_t 

[eric@localhost server]$ cp -a geosco/ bakker
[eric@localhost server]$ cd bakker
/ houd alleen conf/ en deploy/ over	, 
/ build	, 
/ we zien lib/ weer	, komt uit svn	, ook gedeelte conf/ komt uit svn	,
/ Maar ook conf/ is gedeeltelijk update	,
[eric@localhost bakker]$ cd conf
[eric@localhost conf]$ ls -ltr
total 3776
-rw-rw-r--. 1 eric eric 115433 Oct 23  2006 standardjbosscmp-jdbc.xml
-rw-rw-r--. 1 eric eric  35762 Oct 23  2006 standardjaws.xml
-rw-rw-r--. 1 eric eric    194 Oct 23  2006 jndi.properties
-rw-rw-r--. 1 eric eric   6567 Oct 23  2006 jboss-minimal.xml
-rw-rw-r--. 1 eric eric  58816 Aug 16  2010 standardjboss.xml
-rw-rw-r--. 1 eric eric   6703 Nov 12  2013 login-config.xml
-rw-rw-r--. 1 eric eric   4722 Dec 23  2013 log4j.dtd
drwxrwxr-x. 2 eric eric   4096 May  2  2014 props
drwxrwxr-x. 2 eric eric   4096 May  2  2014 xmdesc
-rw-rw-r--. 1 eric eric  27447 May  2  2014 jboss-service.xml~
-rw-rw-r--. 1 eric eric  10363 Jul  8  2014 log4j.xml.bak
-rw-rw-r--. 1 eric eric 548310 Jul 18  2014 postgresql-9.1-903.jdbc4.jar
drwxrwxr-x. 2 eric eric   4096 Oct  1  2014 export
drwxrwxr-x. 2 eric eric   4096 Jan 28  2015 jmsbrokers
-rw-rw-r--. 1 eric eric  38287 Apr 17  2015 language_en_GB_pnlen.properties
-rw-rw-r--. 1 eric eric 117419 May  8  2015 language_en.properties.tmp
-rw-rw-r--. 1 eric eric 117130 May  8  2015 language_en.properties.r19609
-rw-rw-r--. 1 eric eric 116784 May  8  2015 language_en.properties.r19472
-rw-rw-r--. 1 eric eric 117069 May  8  2015 language_en.properties.mine
-rw-rw-r--. 1 eric eric  13689 May 12  2015 log4j.xml
-rw-r--r--. 1 eric eric  23870 May 19  2015 language_nl_NL_pnlnl.properties
-rw-rw-r--. 1 eric eric  70266 Nov 23  2015 language_isben.properties
-rw-rw-r--. 1 eric eric  27443 Mar 23  2016 jboss-service.xml
-rw-rw-r--. 1 eric eric   1318 Jun 28  2016 local_application.properties
-rw-rw-r--. 1 eric eric 137874 Feb  7 12:03 language_cn.properties
-rw-rw-r--. 1 eric eric 162862 Feb  7 12:03 language_en.properties
-rw-rw-r--. 1 eric eric  50073 Feb  7 12:03 language_dsvomsen.properties
-rw-rw-r--. 1 eric eric  59963 Feb  7 12:03 language_dowen.properties
-rw-rw-r--. 1 eric eric  89454 Feb  7 12:03 language_de.properties
-rw-rw-r--. 1 eric eric   6538 Feb  7 12:03 language_de_DE_wkpde.properties
-rw-rw-r--. 1 eric eric 110248 Feb  7 12:03 language_en_GB_neecen.properties
-rw-rw-r--. 1 eric eric 103676 Feb  7 12:03 language_en_GB_mhcen.properties
-rw-rw-r--. 1 eric eric   2794 Feb  7 12:03 language_en_GB_kramp.properties
-rw-rw-r--. 1 eric eric  11374 Feb  7 12:03 language_en_GB_isben.properties
-rw-rw-r--. 1 eric eric 103245 Feb  7 12:03 language_en_GB_icsen.properties
-rw-rw-r--. 1 eric eric   1751 Feb  7 12:03 language_en_GB_bard.properties
-rw-rw-r--. 1 eric eric  59449 Feb  7 12:03 language_haen.properties
-rw-rw-r--. 1 eric eric  98043 Feb  7 12:03 language_fr.properties
-rw-rw-r--. 1 eric eric  49287 Feb  7 12:03 language_fmsen.properties
-rw-rw-r--. 1 eric eric   6368 Feb  7 12:03 language_en_GB_wkpen.properties
-rw-rw-r--. 1 eric eric  42218 Feb  7 12:03 language_en_GB_pnltms.properties
-rw-rw-r--. 1 eric eric  15286 Feb  7 12:03 language_en_GB_pnllogistics.properties
-rw-rw-r--. 1 eric eric  74949 Feb  7 12:03 language_nl.properties
-rw-rw-r--. 1 eric eric  82080 Feb  7 12:03 language_mdten.properties
-rw-rw-r--. 1 eric eric   3128 Feb  7 12:03 language_ja.properties
-rw-rw-r--. 1 eric eric  34794 Feb  7 12:03 language_it.properties
-rw-rw-r--. 1 eric eric 101545 Feb  7 12:03 language_icsen.properties
-rw-rw-r--. 1 eric eric  69479 Feb  7 12:03 language_noren.properties
-rw-rw-r--. 1 eric eric 100783 Feb  7 12:03 language_nmfg.properties
-rw-rw-r--. 1 eric eric 102644 Feb  7 12:03 language_nmcpben.properties
-rw-rw-r--. 1 eric eric   6279 Feb  7 12:03 language_nl_NL_wkpnl.properties
-rw-rw-r--. 1 eric eric  24087 Feb  7 12:03 language_nl_NL_pnltms.properties
-rw-rw-r--. 1 eric eric   1363 Feb  7 12:03 language_nl_NL_pnllogistics.properties
-rw-rw-r--. 1 eric eric  61041 Feb  7 12:03 language_waen.properties
-rw-rw-r--. 1 eric eric  28420 Feb  7 12:03 language_us.properties
-rw-rw-r--. 1 eric eric  41721 Feb  7 12:03 language_tr.properties
-rw-rw-r--. 1 eric eric  83125 Feb  7 12:03 language_tosen.properties
-rw-rw-r--. 1 eric eric 101742 Feb  7 12:03 language_scsen.properties
-rw-rw-r--. 1 eric eric  57334 Feb  7 12:03 language_rren.properties
-rw-rw-r--. 1 eric eric  72681 Feb  7 12:03 oldlanguage_nl.properties
-rw-rw-r--. 1 eric eric  53728 Feb  7 12:03 language_waus.properties
-rw-rw-r--. 1 eric eric  53612 Feb  7 12:19 application.properties
-rw-rw-r--. 1 eric eric   9580 Feb  7 12:19 library-checksum.properties

/ we start bakker	,
[eric@localhost bakker]$ ls
conf  data  deploy  lib  log  tmp  work

/ local 
eric
rtdMpo45_


com.mpobjects.dataexport.service.GenericXmlDataRequestService
/ TODO

/ 13	. 

/ we hebben unidir many-to-many 	,

$ vi CustomerOrderTrigger.standard.hbm.xml

	<class name="com.mpobjects.oms.model.trigger.CustomerOrderTrigger" table="CUSTOMER_ORDER_TRIGGER">
		<id name="systemId" column="SYSTEM_ID">
			<generator class="com.mpobjects.core.model.HibernateIdGenerator" />
		</id>
		<set name="triggerList" table="CUSTOMER_ORDER_TRIGGER_ACTION" lazy="true" cascade="save-update">	/ CUSTOMER_ORDER_TRIGGER_ACTION is een join tbl	,
			<key column="CO_TRIGGER_SYSTEMID" not-null="true" />		/ columns in deze tbl, want er is geen attr inverse="true"	, fk	, en pk	,
			<many-to-many class="com.mpobjects.oms.model.trigger.TriggerAction" column="TRIGGER_ACTION_SYSTEMID" />	 / column in deze tbl	, fk	, 
		</set>

$ vi TriggerAction.standard.hbm.xml

	<class name="com.mpobjects.oms.model.trigger.TriggerAction" table="TRIGGER_ACTION">
		<id name="systemId" column="SYSTEM_ID">
			<generator class="com.mpobjects.core.model.HibernateIdGenerator" />
		</id>
	</class>

bakker20160207_t=# \d customer_order_trigger
             Table "public.customer_order_trigger"
          Column           |         Type          | Modifiers 
---------------------------+-----------------------+-----------
 system_id                 | integer               | not null
 name                      | character varying(50) | not null
 on_create                 | smallint              | default 0
 on_release                | smallint              | default 0
 on_update                 | smallint              | default 0
 filter_expression         | bytea                 | 
 expression_update         | bytea                 | 
 organization_systemid     | integer               | not null
 on_customer_status_change | smallint              | default 0
Foreign-key constraints:
    "cot_fk_org" FOREIGN KEY (organization_systemid) REFERENCES organization(system_id)
Referenced by:
    TABLE "customer_order_trigger_action" CONSTRAINT "cota_co_trigger" FOREIGN KEY (co_trigger_systemid) REFERENCES customer_order_trigger(system_id)



bakker20160207_t-# \d+ customer_order_trigger_action
                     Table "public.customer_order_trigger_action"
         Column          |  Type   | Modifiers | Storage | Stats target | Description 
-------------------------+---------+-----------+---------+--------------+-------------
 co_trigger_systemid     | integer | not null  | plain   |              | 
 trigger_action_systemid | integer | not null  | plain   |              | 
Indexes:
    "customer_order_trigger_action_co_trigger_systemid_idx" btree (co_trigger_systemid)
    "customer_order_trigger_action_trigger_action_systemid_idx" btree (trigger_action_systemid)
Foreign-key constraints:
    "cota_co_trigger" FOREIGN KEY (co_trigger_systemid) REFERENCES customer_order_trigger(system_id)
    "cota_trigger_action" FOREIGN KEY (trigger_action_systemid) REFERENCES trigger_action(system_id)
Has OIDs: no




Configuration, Execution, Triggers, Actions
code: coexportaction	
Execution: 1																			/ TODO
Trigger task: export_custom_customer_export_message		/ export_order_update_message



/ 13	

Configuration, Execution, Triggers, Customer order trigger

/ op het scherm zien we :
actions
	coexportaction


bakker20160207_t=# select*from customer_order_trigger;
 system_id |      name       | on_create | on_release | on_update | filter_expression | expression_update | organization_systemid | on_customer_status_ch
ange 
-----------+-----------------+-----------+------------+-----------+-------------------+-------------------+-----------------------+----------------------
-----
    746610 | coexporttrigger |         1 |          0 |         0 | \x00              | \x00              |                  5000 |                      
   1
(1 row)

bakker20160207_t=# select*from customer_order_trigger_action;
 co_trigger_systemid | trigger_action_systemid 
---------------------+-------------------------
              746610 |                  746609
(1 row)

bakker20160207_t=# select*from trigger_action;
 system_id |       code       |             description             |                                                        configuration               
                                          |        trigger_task         | execution_order | organization_systemid 
-----------+------------------+-------------------------------------+------------------------------------------------------------------------------------
------------------------------------------+-----------------------------+-----------------+-----------------------
        51 | RELEASE-DELIVERY | Release Service Order Type DELIVERY | closeOnSuccess=false;peerType=;purposeCode=;onceOnEnd=false;onceOnStart=false;onceO
nRelease=false;onceForServiceOrder=false; | EXPORT_SERVICE_ORDER        |               1 |                  5000
    746606 | EXPORT_SHO_XML   | Export SHO XML                      | purposeCode=SHO;onceOnEnd=false;onceOnStart=false;onceOnRelease=false;onceForShipme
ntOrder=false;                            | EXPORT_SHIPMENT_ORDER       |               1 |                  5000
    746609 | coexportaction   | NULL                                | purposeCode=;                                                                   <- 
                                          | EXPORT_ORDER_UPDATE_MESSAGE |               1 |                  5000
(3 rows)

/ 13	. 

/ we zien op het customer order trigger scherm	,
On Customer Status Change	: checked	,

bakker20160207_t=# select*from customer_order_trigger;
 system_id |      name       | on_create | on_release | on_update | filter_expression | expression_update | organization_systemid | on_customer_status_ch
ange 
-----------+-----------------+-----------+------------+-----------+-------------------+-------------------+-----------------------+----------------------
-----
    746610 | coexporttrigger |         1 |          0 |         0 | \x00              | \x00              |                  5000 |                      
   1
(1 row)
/ we zien dat on_customer_status_change 1 is	,  

	<class name="com.mpobjects.oms.model.customerstatus.vo.CustomerStatusVo" table="CUSTOMER_STATUS">
public class CustomerStatusVo extends EnumeratedValueObject implements DashboardStatus {
	private CustomerStatusEntity entity; 	/ CUSTOMER_ORDER
	private String expression; 	/ ${customerOrder.reference1==1}




/ 13	. 

trigger	
	oncreate
	onchange
	actions={
		triggeraction
			trigger task:EXPORT...
	}

customerstatus
	entity: customer order
	expression: ${customerOrder.reference1==1}

/ 13	. 

/ Edit Source Lookup Path
/ Als debugger source niet kan find	, 
/ Als je F3 geeft	, 
/ Attach Source...
/ Geef in eclipse	, 
eclipse Edit Source Lookup Path Attach Source

/ 7	. 


/ we edit reference1 in een Customer Order	, Save	, 

/ stack, 
	CustomerOrderServiceImpl.update(CustomerOrder, boolean, boolean, TMSEventContext) line: 490	
	CustomerOrderServiceImpl.update(CustomerOrder, boolean, boolean) line: 461	
		return update(aCustomerOrder, checkIds, fromInterface, new TMSEventContext());
/cb
	CustomerOrderServiceImpl.update(CustomerOrder, boolean) line: 456	
		return update(aCustomerOrder, checkIds, false);
/cb
	CustomerOrderEditFormPage$7.onSubmit(Button, AjaxRequestTarget, IModel<CustomerOrder>) line: 412	
				if (editPanel.isValidObject(aSelection.getObject())) {
					try {
						getSession().clear();
						CustomerOrder myOrder = aSelection.getObject();
						customerOrderServiceWrapper.getBean().convertFromMap(myOrder, editPanel.getParties());
						addAttachments(myOrder);
						CustomerOrder myNew = customerOrderServiceWrapper.getBean().update(myOrder, true);	/ we veranderden reference1	op de customer order
/cb
	EntityActionAjaxButton$1.onSubmit(AjaxRequestTarget, Form<?>) line: 56	
	AjaxFallbackButton$1.onSubmit(AjaxRequestTarget) line: 74	
	AjaxFallbackButton$1(AjaxFormSubmitBehavior).onEvent(AjaxRequestTarget) line: 156	
	AjaxFallbackButton$1(AjaxEventBehavior).respond(AjaxRequestTarget) line: 177	
	AjaxFallbackButton$1(AbstractDefaultAjaxBehavior).onRequest() line: 312	
	BehaviorRequestTarget.processEvents(RequestCycle) line: 157	
	WebRequestCycleProcessor(AbstractRequestCycleProcessor).processEvents(RequestCycle) line: 92	
	MpoWebRequestCycle(RequestCycle).processEventsAndRespond() line: 1279	
	MpoWebRequestCycle(RequestCycle).step() line: 1358	
	MpoWebRequestCycle(RequestCycle).steps() line: 1465	
	MpoWebRequestCycle(RequestCycle).request() line: 545	
	WicketFilter.doGet(HttpServletRequest, HttpServletResponse) line: 486	
	WicketServlet.doPost(HttpServletRequest, HttpServletResponse) line: 160	
	WicketServlet(HttpServlet).service(HttpServletRequest, HttpServletResponse) line: 717	
	WicketServlet(HttpServlet).service(ServletRequest, ServletResponse) line: 810	
/ debug	,
CustomerOrderServiceImpl.update(CustomerOrder, boolean, boolean, TMSEventContext) line: 473	
		setCustomerOrderStatus(aCustomerOrder);
/s
CustomerOrderServiceImpl.update(CustomerOrder, boolean, boolean, TMSEventContext) line: 473	
			customerStatusService.updateStatus(aCustomerOrder);
/s
CustomerStatusServiceImpl.updateStatus(CustomerOrder) line: 120	
		if (updateCustomerStatus(customerOrder, CustomerStatusEntity.CUSTOMER_ORDER)) {
/s
CustomerStatusServiceImpl.updateCustomerStatus(CustomerStatusSupport, CustomerStatusEntity) line: 112	
		String oldStatus = aCustomerStatusSupport.getCustomerStatus() != null ? aCustomerStatusSupport.getCustomerStatus().getCode() : null;
"customerstatus"
		updateStatusNoUpdate(aCustomerStatusSupport, aCustomerStatusEntity);	
/ aCustomerStatusSupport = (proxy naar) customerOrder 
/ aCustomerStatusEntity=CUSTOMER_ORDER
/s
	/**
	 * Updates CustomerStatus on a CustomerStatusSupport object, but does not persist the value.
	 * 
CustomerStatusServiceImpl.updateStatusNoUpdate(CustomerStatusSupport, CustomerStatusEntity) line: 172	
/=
	private void updateStatusNoUpdate(CustomerStatusSupport anEntity, CustomerStatusEntity aType) {
aType=CUSTOMER_ORDER
anEntity	CustomerOrder_$$_javassist_108  (id=22794)	
	handler	JavassistLazyInitializer  (id=26855)	
		target	CustomerOrder  (id=26912)	
			buyer	VirtualParty  (id=26923)	
			customerOrderNumber	"order5" (id=26942)	
			customerStatus	CustomerStatusVo_$$_javassist_180  (id=26951)	
				handler	JavassistLazyInitializer  (id=36876)	
					target	CustomerStatusVo  (id=36930)	
						code	"customerstatus" (id=36055)	
						entity	CustomerStatusEntity  (id=35994)	
							name	"CUSTOMER_ORDER" (id=36137)	
							variable	"customerOrder" (id=37670)	
						expression	"${customerOrder.reference1==1}" (id=37392)	
						systemId	746611	
			organization	Organization_$$_javassist_83  (id=27000)	
			reference1	"2" (id=27009)	
			seller	VirtualParty  (id=27060)	
			systemId	11	
			theCreatedBy	Resource_$$_javassist_109  (id=27074)	
				handler
					target
						code	"8000" (id=38731)	
						description	"STARTED" (id=38740)	
						systemId	2	

/ Intermezzo

public class CustomerOrder extends EntityDetailSupport
	private CustomerStatusVo customerStatus;

/ Einde Intermezzo

		List<CustomerStatusVo> myList = getInDescendingHierarchy(aType);
/ TODO
myList	ArrayList  (id=44434)	
	[0]	CustomerStatusVo_$$_javassist_180  (id=26951)	
		handler	JavassistLazyInitializer  (id=36876)	
			target	CustomerStatusVo  (id=36930)	
				code	"customerstatus" (id=36055)	
				expression	"${customerOrder.reference1==1}" (id=37392)	
				systemId	746611	
aType	CustomerStatusEntity  (id=35994)	
	alias	"CO" (id=36140)	
	name	"CUSTOMER_ORDER" (id=36137)	
	ordinal	0	
	variable	"customerOrder" (id=37670)	

		if (!myList.isEmpty()) {
			ExpressionEvaluator myEvaluator = new ExpressionEvaluator(); / apache commons el	,
			myEvaluator.setVariable(aType.getVariable(), anEntity);
myEvaluator	ExpressionEvaluator  (id=41554)	
	theExpressionEvaluator	ExpressionEvaluatorImpl  (id=41569)	
	theVariables	HashMap  (id=41578)	
		[0]	HashMap$Entry  (id=41597)	
			key	"customerOrder" (id=37670)	
			value	CustomerOrder_$$_javassist_108  (id=22794)	

			for (CustomerStatusVo myCustomerStatus : myList) {
				String myMatchExpression = myCustomerStatus.getExpression(); 						/ ${customerOrder.reference1==1}
				if (BooleanUtils.isTrue(myEvaluator.evaluate(myMatchExpression).toString())) {
/n
/ In de customer order's reference1 staat 2	,
		if (!myStatusFound) {
			anEntity.setCustomerStatus(null);
/n
/ 	method returns	,
/t
CustomerStatusServiceImpl.updateCustomerStatus(CustomerStatusSupport, CustomerStatusEntity) line: 114	
		updateStatusNoUpdate(aCustomerStatusSupport, aCustomerStatusEntity);
/d
/ aCustomerStatusSupport's customerStatus=null, want customer order's reference1 is 2, en voldeed niet aan de customer status's expression	, 

		String newStatus = aCustomerStatusSupport.getCustomerStatus() != null ? aCustomerStatusSupport.getCustomerStatus().getCode() : null;
null
		return !StringUtils.equals(oldStatus, newStatus);	/ true 
/t
CustomerStatusServiceImpl.updateStatus(CustomerOrder) line: 121	
		if (updateCustomerStatus(customerOrder, CustomerStatusEntity.CUSTOMER_ORDER)) {
/j
			MpoBeanFactory.getBean(CustomerOrderDAO.class).save(customerOrder);
			customerOrderTriggerHandler.handleStatusChange(customerOrder);
/s
CustomerOrderTriggerHandlerImpl.handleStatusChange(CustomerOrder) line: 54	

/ Intermezzo

$ vi CustomerOrderTrigger.standard.hbm.xml
	<class name="com.mpobjects.oms.model.trigger.CustomerOrderTrigger" table="CUSTOMER_ORDER_TRIGGER">
		<set name="triggerList" table="CUSTOMER_ORDER_TRIGGER_ACTION" lazy="true" cascade="save-update">
			<key column="CO_TRIGGER_SYSTEMID" not-null="true" />
			<many-to-many class="com.mpobjects.oms.model.trigger.TriggerAction" column="TRIGGER_ACTION_SYSTEMID" />
		</set>
/ we zien GEEN inverse="true"  , dus de list moet in CustomerOrderTrigger.class (of parent class)	,

$ vi Trigger.standard.hbm.xml
	<class name="com.mpobjects.oms.model.trigger.TriggerAction" table="TRIGGER_ACTION">


public class CustomerOrderTrigger extends AbstractTrigger {
public class AbstractTrigger extends ValueObject {
	/** The trigger to kick off */
	private Set<TriggerAction> triggerList = new HashSet<TriggerAction>(0);

/ Einde Intermezzo

		Collection<CustomerOrderTrigger> myList = MpoBeanFactory.getBean(CustomerOrderTriggerDAO.class).getAll();
myList	ArrayList  (id=46178)	
	[0]	CustomerOrderTrigger  (id=46181)	
		name	"coexporttrigger" (id=46206)	
		onCustomerStatusChange	Boolean  (id=46211)	
		systemId	746610	
		triggerList	PersistentSet  (id=46250)	
			[0]	TriggerAction  (id=46301)	
				code	"coexportaction" (id=46321)	
				systemId	746609	
				triggerTask	"EXPORT_ORDER_UPDATE_MESSAGE" (id=46356)	

		for (CustomerOrderTrigger myCoTrigger : myList) { 		/ myCoTrigger	CustomerOrderTrigger  (id=46181)	
			if (myCoTrigger.getOnCustomerStatusChange()) {		/ j
				if (checkTrigger(myCoTrigger, aCustomerOrder)) {
/j
/ want
/s
CustomerOrderTriggerHandlerImpl.checkTrigger(CustomerOrderTrigger, CustomerOrder) line: 122	
		Rule myRule = aCoTrigger.getFilterExpressionRule();										/ TODO
null
		if (myRule == null) {
			return true;
/t
CustomerOrderTriggerHandlerImpl.handleStatusChange(CustomerOrder) line: 59	
				if (checkTrigger(myCoTrigger, aCustomerOrder)) {
/j
					TriggerExecutionRequest<CustomerOrderTrigger> myRequest = new TriggerExecutionRequest<CustomerOrderTrigger>(myCoTrigger);
coTrigger	CustomerOrderTrigger  (id=46181)	
	name	"coexporttrigger" (id=46206)	
	onCustomerStatusChange	Boolean  (id=46211)	
	triggerList	PersistentSet  (id=46250)	
		[0]	TriggerAction  (id=46301)	
			code	"coexportaction" (id=46321)	
			systemId	746609	
			triggerTask	"EXPORT_ORDER_UPDATE_MESSAGE" (id=46356)	

					myRequest.addObject(CustomerOrderResolver.CUSTOMER_ORDER_SYSTEM_ID, aCustomerOrder.getSystemId());
					myRequest.addObject(CustomerOrderResolver.CUSTOMER_ORDER_ID, aCustomerOrder.getCustomerOrderNumber());

myRequest	TriggerExecutionRequest  (id=47292)	
	objectMap	HashMap  (id=47656)				/ {customerOrderId=order5, customerOrderSystemId=11}
	triggerSystemId	746610	
	type	Class (com.mpobjects.oms.model.trigger.CustomerOrderTrigger) (id=12920)	

					getTriggerRequestProducer().produce(myRequest);
/s
/**
 * This class produces a-synchronous request to evaluate objects for InterfaceMessageTriggers
 */
public class TriggerRequestProducerImpl extends AbstractProducer implements TriggerRequestProducer {

	private static final Object TRIGGER_EXECUTION_MANAGER_KEY = new Object();

TriggerRequestProducerImpl.produce(TriggerExecutionRequest<?>) line: 25	
		TriggerExecutionManager myManager = (TriggerExecutionManager) TransactionSynchronizationManager.getResource(TRIGGER_EXECUTION_MANAGER_KEY);
/ TransactionSynchronizationManager is een Spring type	, 
		if (myManager == null) {
			myManager = new TriggerExecutionManager();
			TransactionSynchronizationManager.bindResource(TRIGGER_EXECUTION_MANAGER_KEY, myManager);

		if (myManager.addToQueue(aRequest)) {
/s
TriggerExecutionManager.addToQueue(TriggerExecutionRequest<?>) line: 37	
		final String myKey = createKey(aRequest);
/s
TriggerExecutionManager.createKey(TriggerExecutionRequest<?>) line: 84	
		StringBuilder myBuilder = new StringBuilder();
		myBuilder.append(aRequest.getTriggerSystemId());	/ 746610
		for (Entry<String, Serializable> entry : aRequest.getObjectMap().entrySet()) {
			myBuilder.append("-");
			myBuilder.append(entry.getKey()).append(":").append(entry.getValue());
		}
		return myBuilder.toString();	/ 746610-customerOrderId:order5-customerOrderSystemId:11
/t
TriggerExecutionManager.addToQueue(TriggerExecutionRequest<?>) line: 39	
		final String myKey = createKey(aRequest);
/d
		if (!triggerList.contains(myKey)) {
			triggerList.add(myKey);

			if (transactionHelper == null) {
				transactionHelper = MpoBeanFactory.getBean(TransactionHelper.class);

			transactionHelper.executeAfterCommit(new Runnable() {
				@Override
				public void run() {
					triggerList.remove(myKey);

			transactionHelper.executeAfterRollback(new Runnable() {
				@Override
				public void run() {
					triggerList.remove(myKey);

			return true;
/t
TriggerRequestProducerImpl.produce(TriggerExecutionRequest<?>) line: 34	
		if (myManager.addToQueue(aRequest)) {
/j
			// The queue is transacted, which means that the requests will only be picked up if the transaction succeeds			/ TODO
			queueRequest(aRequest);
/s
TriggerRequestProducerImpl.queueRequest(TriggerExecutionRequest<?>) line: 42	
			aRequest.setResource(AuthenticationUtils.getResource());			/ eric
			sendMessage(aRequest);
/s
TriggerRequestProducerImpl(AbstractProducer).sendMessage(Serializable) line: 34	
		jmsTemplate.send(destination, new MessageCreator() {
			@Override
			public Message createMessage(Session aSession) throws JMSException {
				return aSession.createObjectMessage(aSerializable);
			}
		});

/ Intermezzo

destination	ActiveMQQueue  (id=48744)	
	destinationPaths	String[3]  (id=48883)	
	physicalName	"com.mpobjects.triggerrequest" (id=48884)	

/ Lees LOG_scs_sb_xml.txt over TriggerRequestHandlerImpl	, 

/ See LOG_scs_sb_xml.txt: com.mpobjects.oms.service.trigger.TriggerRequestHandlerImpl is de consumer	, 
/ Er is ook MpoMessageListener	, maar die is WH voor Jms Message Entry	,

/ we set b in de onMessage method	,

/ Einde Intermezzo

/ 7	. 

/t
CustomerOrderServiceImpl.update(CustomerOrder, boolean, boolean, TMSEventContext) line: 490	
		setCustomerOrderStatus(aCustomerOrder);
		handleCustomerOrderChange(aCustomerOrder);
/s
CustomerOrderServiceImpl.handleCustomerOrderChange(CustomerOrder) line: 594	
		CustomerOrder myOldCustomerOrder = getOld(aCustomerOrder);
customerStatus	CustomerStatusVo_$$_javassist_180  (id=26951)	
	handler	JavassistLazyInitializer  (id=36876)	
		target	CustomerStatusVo  (id=36930)	
			expression	"${customerOrder.reference1==1}" (id=37392)	

aCustomerOrder	CustomerOrder_$$_javassist_108  (id=22794)	
	handler	JavassistLazyInitializer  (id=26855)	
		target	CustomerOrder  (id=26912)	
			customerStatus	null	

		getTriggerHandler().handleUpdate(myOldCustomerOrder, aCustomerOrder);
/s
CustomerOrderTriggerHandlerImpl.handleUpdate(CustomerOrder, CustomerOrder) line: 72	

/ Intermezzo

/ Zonet in 
CustomerOrderTriggerHandlerImpl.handleStatusChange(CustomerOrder)

/ Einde Intermezzo

		Collection<CustomerOrderTrigger> myList = MpoBeanFactory.getBean(CustomerOrderTriggerDAO.class).getAll();
		for (CustomerOrderTrigger myCoTrigger : myList) {
			if(myCoTrigger.getOnUpdate()){
/n
/t
CustomerOrderServiceImpl.update(CustomerOrder, boolean, boolean, TMSEventContext) line: 491	
		setCustomerOrderStatus(aCustomerOrder);			/ produces on internal queue	,
		handleCustomerOrderChange(aCustomerOrder);		/ niets	,
/d
		CustomerOrder myOld = getOld(aCustomerOrder);
		CustomerOrder myNew = customerOrderDAO.save(aCustomerOrder);
		applySyncFlags(aCustomerOrder);
/ niets	, 
/want	,
/s
	/**
	 * Resolves the party using the party code if the sync flag is set. If the party code is empty or if no party with
	 * this id exists the data won't be changed
	 * 
CustomerOrderServiceImpl.applySyncFlags(CustomerOrder) line: 557	
		Party myBuyer = aCustomerOrder.getBuyer();	/ default, alles null of [] of 0 of ""
		if (myBuyer != null) {
			Party syncFrom = null;
			switch (aCustomerOrder.getSyncFlag(CustomerOrder.PartyType.BUYER)) {
				case PARTY_ID:
					syncFrom = partyService.getPartyByPartyId(myBuyer.getCode(), aCustomerOrder);
null
		Party mySeller = aCustomerOrder.getSeller();
		if (mySeller != null) {
			Party syncFrom = null;
			switch (aCustomerOrder.getSyncFlag(CustomerOrder.PartyType.SELLER)) {
				case PARTY_ID:
					syncFrom = partyService.getPartyByPartyId(mySeller.getCode(), aCustomerOrder);
null
/t
CustomerOrderServiceImpl.update(CustomerOrder, boolean, boolean, TMSEventContext) line: 494	
		applySyncFlags(aCustomerOrder);
/d
		myNew = customerOrderDAO.save(aCustomerOrder);
		triggerEventHandler(myOld, myNew, aContext, fromInterface);
/s
CustomerOrderServiceImpl.triggerEventHandler(CustomerOrder, CustomerOrder, TMSEventContext, boolean) line: 636	
		} else {
			if (!fromInterface) {
				myEvent = new CustomerOrderEvent(anOldVO, aNewVO, CustomerOrderEvent.UPDATED, anEventContext);
/d
myEvent	CustomerOrderEvent  (id=51263)	
	theEventType	"customerorder.updated" (id=51264)	
	theNewVO	CustomerOrder_$$_javassist_108  (id=22794)	
	theOldVO	CustomerOrder  (id=50706)	

		try {
			eventHandlerService.handleEvent(myEvent);
/s
	/**
	 * Handles the incoming event by posting the events to the listeners
	 *
EventHandlerServiceImpl.handleEvent(Event) line: 92	
		String myEventType = anEvent.getEventType();
customerorder.updated

			listenerList.fireEvent(anEvent);
/s
ListenerList.fireEvent(Event<?>) line: 62	
		for (EventListener myListener : getDelegates()) {
"getDelegates()"	 (pending)	
	[0]	DocumentEventListener  (id=51790)	
	[1]	CustomerOrderEventListener  (id=51795)	
	[2]	ShoCostAllocationEventListener  (id=51796)	
	[3]	ShoPriceAllocationServiceImpl  (id=51797)	
	[4]	TMSCarConServiceOrderEventListener  (id=51798)	
	[5]	SupplierInvoiceUpdateEventListener  (id=51799)	
	[6]	StockTransactionEventListener  (id=51800)	
	[7]	EventEventListener  (id=51801)	
	[8]	$Proxy446  (id=51802)	/ public class DeferredEventServiceImpl extends AbstractDeferredEventService implements DeferredEventService {

	[9]	AllocationEventListener  (id=51803)	
	[10]	CustomerInvoiceUpdateEventListener  (id=51804)	
	[11]	CapableToPromiseEventListener  (id=51805)	
	[12]	EmailReportEventListener  (id=51806)	
	[13]	InvoiceServiceOrderEventHandler  (id=51807)	
	[14]	RateCalcEventListener  (id=51808)	
/s
RateCalcEventListener.handleEvent(Event) line: 72	
		if (anEvent.getEventContext().hasFlag(TMSEventContext.FLAG_MAY_RATE_CALC)) {
			String myRecalcExecution = ApplicationPropertyManager.getInstance().getModuleProperty("ratecalc", "serviceorder.ratecalculation.execution");

			if (myRecalcExecution.equalsIgnoreCase("auto")) {
				recalcServiceOrderCost(anEvent);
			}

			String myPriceExecution = ApplicationPropertyManager.getInstance().getModuleProperty("ratecalc", "shipmentorderprice.ratecalculation.execution");

			if (myPriceExecution.equalsIgnoreCase("auto")) {
				anEvent.debug("handled by RateCalcEventListener - price");
				recalcShipOrderPrice(anEvent);
			}

			recalcCustomerOrder(anEvent);
			recalcCustomerOrderLine(anEvent);
/ TODO
/t
EventHandlerServiceImpl.handleEvent(Event) line: 131	
			listenerList.fireEvent(anEvent);
/d
			broadcastToTopic(anEvent);
/s
EventHandlerServiceImpl.broadcastToTopic(Event<?>) line: 186	
		if (aEvent.getNewVO() instanceof EntityInterface) {
			entity = (EntityInterface) aEvent.getNewVO();
		broadcastEvent(aEvent.getEventType(), eventType[0], eventType[1], entity.getSystemId());
/s
EventHandlerServiceImpl.broadcastEvent(String, String, String, int) line: 60	
		jmsTemplate.send(jmsTopicName, new MessageCreator() {			/ jmsTopicName="com.mpobjects.eventhandler"	,
			@Override
			public Message createMessage(Session aSession) throws JMSException {
				Message message = aSession.createMessage();
				message.setStringProperty(AbstractEventNotificationHandler.HEADER_EVENT_TYPE, aEventType);
				message.setStringProperty(AbstractEventNotificationHandler.HEADER_EVENT_ENTITY, aEntity);
				message.setStringProperty(AbstractEventNotificationHandler.HEADER_EVENT_OPERATION, aOperation);
				message.setIntProperty(AbstractEventNotificationHandler.HEADER_SYSTEM_ID, aSystemId);
				return message;
message	ActiveMQMessage  (id=52640)	
	connection	ActiveMQConnection  (id=48789)	
	properties	HashMap  (id=52641)	/ {SystemId=11, EventOperation=updated, EventEntity=customerorder, EventType=customerorder.updated}

			}
		});
/ Is er een consumer	? Is dit een producer	?
/ TODO

/ 7	. 

/c
	TriggerExecutionManager$1.run() line: 53	
/=
			transactionHelper.executeAfterCommit(new Runnable() {
				@Override
				public void run() {

					triggerList.remove(myKey);	/ val$myKey	"746610-customerOrderId:order5-customerOrderSystemId:11" (id=48090)		, triggerList=[] hierna	,
/cb
	TransactionHelperImpl$TXAction.afterCompletion(int) line: 55	
	TransactionImpl.doAfterCompletion() line: 1526	
	TransactionImpl.completeTransaction() line: 1198	
	TransactionImpl.commit() line: 377	
	TxManager.commit() line: 240	
	ServerVMClientUserTransaction.commit() line: 140	
	JtaTransactionManager.doCommit(DefaultTransactionStatus) line: 1012	
	JtaTransactionManager(AbstractPlatformTransactionManager).processCommit(DefaultTransactionStatus) line: 755	
	JtaTransactionManager(AbstractPlatformTransactionManager).commit(TransactionStatus) line: 724	
	TransactionInterceptor(TransactionAspectSupport).commitTransactionAfterReturning(TransactionAspectSupport$TransactionInfo) line: 475	
	TransactionInterceptor(TransactionAspectSupport).invokeWithinTransaction(Method, Class, TransactionAspectSupport$InvocationCallback) line: 270	
	TransactionInterceptor.invoke(MethodInvocation) line: 94	
	ReflectiveMethodInvocation.proceed() line: 172	
	JdkDynamicAopProxy.invoke(Object, Method, Object[]) line: 204	
	$Proxy317.update(CustomerOrder, boolean) line: not available	
	CustomerOrderEditFormPage$7.onSubmit(Button, AjaxRequestTarget, IModel<CustomerOrder>) line: 412	
	EntityActionAjaxButton$1.onSubmit(AjaxRequestTarget, Form<?>) line: 56	
	AjaxFallbackButton$1.onSubmit(AjaxRequestTarget) line: 74	
	AjaxFallbackButton$1(AjaxFormSubmitBehavior).onEvent(AjaxRequestTarget) line: 156	
	AjaxFallbackButton$1(AjaxEventBehavior).respond(AjaxRequestTarget) line: 177	
	AjaxFallbackButton$1(AbstractDefaultAjaxBehavior).onRequest() line: 312	
	BehaviorRequestTarget.processEvents(RequestCycle) line: 157	
	WebRequestCycleProcessor(AbstractRequestCycleProcessor).processEvents(RequestCycle) line: 92	
	MpoWebRequestCycle(RequestCycle).processEventsAndRespond() line: 1279	
	MpoWebRequestCycle(RequestCycle).step() line: 1358	
	MpoWebRequestCycle(RequestCycle).steps() line: 1465	
	MpoWebRequestCycle(RequestCycle).request() line: 545	
	WicketFilter.doGet(HttpServletRequest, HttpServletResponse) line: 486	
	WicketServlet.doPost(HttpServletRequest, HttpServletResponse) line: 160	
	WicketServlet(HttpServlet).service(HttpServletRequest, HttpServletResponse) line: 717	
	WicketServlet(HttpServlet).service(ServletRequest, ServletResponse) line: 810	

/ 7	. 

/ LOCAL EXPORT VIA ACTION  

/ Lees LOG_scs_sb_xml.txt over TriggerRequestHandlerImpl	, 

/ 13	. 

/ sets 3 internal queues	, 
	physicalName	"com.mpobjects.triggerrequest" (id=3025)	
	physicalName	"com.mpobjects.interfacemessagetriggerrequest" (id=3042)	
	physicalName	"com.mpobjects.oms.ordervalidationrequest" (id=3209)	

/ van de 1ste hebben we de bean configs opgezocht	,

$ vi document-service.sb.xml

	<bean id="com.mpobjects.document.filemeta.service.FileMetaService" class="com.mpobjects.document.filemeta.service.FileMetaServiceImpl">
		<property name="fileMetaDAO" ref="com.mpobjects.document.dao.filemeta.FileMetaDAO" />
		<property name="documentTriggerHandler" ref="com.mpobjects.oms.service.trigger.DocumentTriggerHandler" />
	</bean>

	<bean id="com.mpobjects.oms.service.trigger.DocumentTriggerHandler" class="com.mpobjects.oms.service.trigger.DocumentTriggerHandlerImpl">
	<property name="triggerRequestProducer" ref="com.mpobjects.oms.service.trigger.TriggerRequestProducer" />
	</bean>

$ vi document-dao.sb.xml

	<bean id="com.mpobjects.document.dao.filemeta.FileMetaDAO" class="com.mpobjects.document.dao.filemeta.FileMetaDAOImpl" parent="HibernateDAOTemplate"  />


/ we start appl	, 
/s
Thread [main] (Suspended (breakpoint at line 44 in AbstractProducer))	
	TriggerRequestProducerImpl(AbstractProducer).setDestination(Destination) line: 44	
aDestination	ActiveMQQueue  (id=783)	
	physicalName	"com.mpobjects.triggerrequest" (id=3025)	
/cb
	GeneratedMethodAccessor200.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	Method.invoke(Object, Object...) line: 606	
	BeanWrapperImpl.setPropertyValue(BeanWrapperImpl$PropertyTokenHolder, PropertyValue) line: 1135	
	BeanWrapperImpl.setPropertyValue(PropertyValue) line: 904	
	BeanWrapperImpl(AbstractPropertyAccessor).setPropertyValues(PropertyValues, boolean, boolean) line: 75	
	BeanWrapperImpl(AbstractPropertyAccessor).setPropertyValues(PropertyValues) line: 57	
	DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).applyPropertyValues(String, BeanDefinition, BeanWrapper, PropertyValues) line: 1452	
	DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).populateBean(String, RootBeanDefinition, BeanWrapper) line: 1160	
	DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).doCreateBean(String, RootBeanDefinition, Object[]) line: 519	
	DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).createBean(String, RootBeanDefinition, Object[]) line: 458	
	BeanDefinitionValueResolver.resolveInnerBean(Object, String, BeanDefinition) line: 276	
	BeanDefinitionValueResolver.resolveValueIfNecessary(Object, Object) line: 122	
	DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).applyPropertyValues(String, BeanDefinition, BeanWrapper, PropertyValues) line: 1419	
	DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).populateBean(String, RootBeanDefinition, BeanWrapper) line: 1160	
	DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).doCreateBean(String, RootBeanDefinition, Object[]) line: 519	
	DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).createBean(String, RootBeanDefinition, Object[]) line: 458	
	AbstractBeanFactory$1.getObject() line: 293	
	DefaultListableBeanFactory(DefaultSingletonBeanRegistry).getSingleton(String, ObjectFactory<?>) line: 223	
	DefaultListableBeanFactory(AbstractBeanFactory).doGetBean(String, Class<T>, Object[], boolean) line: 290	
	DefaultListableBeanFactory(AbstractBeanFactory).getBean(String) line: 191	
	BeanDefinitionValueResolver.resolveReference(Object, RuntimeBeanReference) line: 328	
refName	"com.mpobjects.oms.service.trigger.TriggerRequestProducer" (id=825)	
/cb
	BeanDefinitionValueResolver.resolveValueIfNecessary(Object, Object) line: 108	
	DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).applyPropertyValues(String, BeanDefinition, BeanWrapper, PropertyValues) line: 1419	
	DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).populateBean(String, RootBeanDefinition, BeanWrapper) line: 1160	
	DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).doCreateBean(String, RootBeanDefinition, Object[]) line: 519	
	DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).createBean(String, RootBeanDefinition, Object[]) line: 458	
	AbstractBeanFactory$1.getObject() line: 293	
	DefaultListableBeanFactory(DefaultSingletonBeanRegistry).getSingleton(String, ObjectFactory<?>) line: 223	
	DefaultListableBeanFactory(AbstractBeanFactory).doGetBean(String, Class<T>, Object[], boolean) line: 290	
	DefaultListableBeanFactory(AbstractBeanFactory).getBean(String) line: 191	
	BeanDefinitionValueResolver.resolveReference(Object, RuntimeBeanReference) line: 328	
refName	"com.mpobjects.oms.service.trigger.DocumentTriggerHandler" (id=3084)	
/cb
	BeanDefinitionValueResolver.resolveValueIfNecessary(Object, Object) line: 108	
	DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).applyPropertyValues(String, BeanDefinition, BeanWrapper, PropertyValues) line: 1419	
	DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).populateBean(String, RootBeanDefinition, BeanWrapper) line: 1160	
	DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).doCreateBean(String, RootBeanDefinition, Object[]) line: 519	
	DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).createBean(String, RootBeanDefinition, Object[]) line: 458	
	AbstractBeanFactory$1.getObject() line: 293	
	DefaultListableBeanFactory(DefaultSingletonBeanRegistry).getSingleton(String, ObjectFactory<?>) line: 223	
	DefaultListableBeanFactory(AbstractBeanFactory).doGetBean(String, Class<T>, Object[], boolean) line: 290	
	DefaultListableBeanFactory(AbstractBeanFactory).getBean(String) line: 191	
name	"com.mpobjects.document.filemeta.service.FileMetaService" (id=3088)												<-
/cb
	DefaultListableBeanFactory.preInstantiateSingletons() line: 636	
	XmlWebApplicationContext(AbstractApplicationContext).finishBeanFactoryInitialization(ConfigurableListableBeanFactory) line: 934	
	XmlWebApplicationContext(AbstractApplicationContext).__refresh() line: 479	
	XmlWebApplicationContext(AbstractApplicationContext).refresh() line: not available	
	ContextLoaderListener(ContextLoader).configureAndRefreshWebApplicationContext(ConfigurableWebApplicationContext, ServletContext) line: 410	
	ContextLoaderListener(ContextLoader).initWebApplicationContext(ServletContext) line: 306	
	ContextLoaderListener.contextInitialized(ServletContextEvent) line: 112	
	StandardContext.listenerStart() line: 3763	
	StandardContext.start() line: 4211	
	StandardHost(ContainerBase).addChildInternal(Container) line: 759	
	StandardHost(ContainerBase).addChild(Container) line: 739	
	StandardHost.addChild(Container) line: 524	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 57	
	DelegatingMethodAccessorImpl.__invoke(Object, Object[]) line: 43	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	Method.invoke(Object, Object...) line: 606	
	BaseModelMBean.invoke(String, Object[], String[]) line: 503	
	RawDynamicInvoker.invoke(String, Object[], String[]) line: 164	
	MBeanServerImpl.invoke(ObjectName, String, Object[], String[]) line: 659	
	StandardContext.init() line: 5052	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 57	
	DelegatingMethodAccessorImpl.__invoke(Object, Object[]) line: 43	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	Method.invoke(Object, Object...) line: 606	
	BaseModelMBean.invoke(String, Object[], String[]) line: 503	
	RawDynamicInvoker.invoke(String, Object[], String[]) line: 164	
	MBeanServerImpl.invoke(ObjectName, String, Object[], String[]) line: 659	
	TomcatDeployer.performDeployInternal(String, WebApplication, String, AbstractWebContainer$WebDescriptorParser) line: 297	
	TomcatDeployer.performDeploy(WebApplication, String, AbstractWebContainer$WebDescriptorParser) line: 103	
	TomcatDeployer(AbstractWebDeployer).start(DeploymentInfo) line: 371	
	WebModule.startModule() line: 83	
	WebModule.startService() line: 61	
	WebModule(ServiceMBeanSupport).jbossInternalStart() line: 289	
	WebModule(ServiceMBeanSupport).jbossInternalLifecycle(String) line: 245	
	GeneratedMethodAccessor7.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.__invoke(Object, Object[]) line: 43	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	Method.invoke(Object, Object...) line: 606	
	ReflectedDispatcher.invoke(Invocation) line: 155	
	Invocation.dispatch() line: 94	
	Invocation.invoke() line: 86	
	XMBean(AbstractMBeanInvoker).invoke(String, Object[], String[]) line: 264	
	MBeanServerImpl.invoke(ObjectName, String, Object[], String[]) line: 659	
	ServiceController$ServiceProxy.invoke(Object, Method, Object[]) line: 978	
	$Proxy3.start() line: not available	
	ServiceController.start(ObjectName) line: 417	
	GeneratedMethodAccessor13.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.__invoke(Object, Object[]) line: 43	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	Method.invoke(Object, Object...) line: 606	
	ReflectedDispatcher.invoke(Invocation) line: 155	
	Invocation.dispatch() line: 94	
	Invocation.invoke() line: 86	
	XMBean(AbstractMBeanInvoker).invoke(String, Object[], String[]) line: 264	
	MBeanServerImpl.invoke(ObjectName, String, Object[], String[]) line: 659	
	MBeanProxyExt.invoke(Object, Method, Object[]) line: 210	
	$Proxy45.start(ObjectName) line: not available	
	Tomcat5(AbstractWebContainer).start(DeploymentInfo) line: 466	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 57	
	DelegatingMethodAccessorImpl.__invoke(Object, Object[]) line: 43	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	Method.invoke(Object, Object...) line: 606	
	ReflectedDispatcher.invoke(Invocation) line: 155	
	Invocation.dispatch() line: 94	
	NullInterceptor(AbstractInterceptor).invoke(Invocation) line: 133	
	Invocation.invoke() line: 88	
	ModelMBeanOperationInterceptor.invoke(Invocation) line: 142	
	DynamicInterceptor.invoke(Invocation) line: 97	
	DeployerInterceptorJSE(InterceptorServiceMBeanSupport).invokeNext(Invocation) line: 238	
	DeployerInterceptorJSE(DeployerInterceptor).start(Invocation, DeploymentInfo) line: 92	
	SubDeployerInterceptorSupport$XMBeanInterceptor.start(Invocation, DeploymentInfo) line: 188	
	SubDeployerInterceptorSupport$XMBeanInterceptor(SubDeployerInterceptor).invoke(Invocation) line: 95	
	Invocation.invoke() line: 88	
	XMBean(AbstractMBeanInvoker).invoke(String, Object[], String[]) line: 264	
	MBeanServerImpl.invoke(ObjectName, String, Object[], String[]) line: 659	
	MBeanProxyExt.invoke(Object, Method, Object[]) line: 210	
	$Proxy46.start(DeploymentInfo) line: not available	
	MainDeployer.start(DeploymentInfo) line: 1025	
	MainDeployer.deploy(DeploymentInfo) line: 819	
	MainDeployer.deploy(URL) line: 782	
	GeneratedMethodAccessor67.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.__invoke(Object, Object[]) line: 43	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	Method.invoke(Object, Object...) line: 606	
	ReflectedDispatcher.invoke(Invocation) line: 155	
	Invocation.dispatch() line: 94	
	NullInterceptor(AbstractInterceptor).invoke(Invocation) line: 133	
	Invocation.invoke() line: 88	
	ModelMBeanOperationInterceptor.invoke(Invocation) line: 142	
	Invocation.invoke() line: 88	
	XMBean(AbstractMBeanInvoker).invoke(String, Object[], String[]) line: 264	
	MBeanServerImpl.invoke(ObjectName, String, Object[], String[]) line: 659	
	MBeanProxyExt.invoke(Object, Method, Object[]) line: 210	
	$Proxy13.deploy(URL) line: not available	
	URLDeploymentScanner.deploy(URLDeploymentScanner$DeployedURL) line: 421	
	URLDeploymentScanner.scan() line: 634	
	AbstractDeploymentScanner$ScannerThread.doScan() line: 263	
	URLDeploymentScanner(AbstractDeploymentScanner).startService() line: 336	
	URLDeploymentScanner(ServiceMBeanSupport).jbossInternalStart() line: 289	
	URLDeploymentScanner(ServiceMBeanSupport).jbossInternalLifecycle(String) line: 245	
	GeneratedMethodAccessor7.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.__invoke(Object, Object[]) line: 43	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	Method.invoke(Object, Object...) line: 606	
	ReflectedDispatcher.invoke(Invocation) line: 155	
	Invocation.dispatch() line: 94	
	Invocation.invoke() line: 86	
	XMBean(AbstractMBeanInvoker).invoke(String, Object[], String[]) line: 264	
	MBeanServerImpl.invoke(ObjectName, String, Object[], String[]) line: 659	
	ServiceController$ServiceProxy.invoke(Object, Method, Object[]) line: 978	
	$Proxy3.start() line: not available	
	ServiceController.start(ObjectName) line: 417	
	GeneratedMethodAccessor13.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.__invoke(Object, Object[]) line: 43	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	Method.invoke(Object, Object...) line: 606	
	ReflectedDispatcher.invoke(Invocation) line: 155	
	Invocation.dispatch() line: 94	
	Invocation.invoke() line: 86	
	XMBean(AbstractMBeanInvoker).invoke(String, Object[], String[]) line: 264	
	MBeanServerImpl.invoke(ObjectName, String, Object[], String[]) line: 659	
	MBeanProxyExt.invoke(Object, Method, Object[]) line: 210	
	$Proxy8.start(ObjectName) line: not available	
	SARDeployer.start(DeploymentInfo) line: 302	
	MainDeployer.start(DeploymentInfo) line: 1025	
	MainDeployer.deploy(DeploymentInfo) line: 819	
	MainDeployer.deploy(URL) line: 782	
	MainDeployer.deploy(String) line: 766	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 57	
	DelegatingMethodAccessorImpl.__invoke(Object, Object[]) line: 43	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	Method.invoke(Object, Object...) line: 606	
	ReflectedDispatcher.invoke(Invocation) line: 155	
	Invocation.dispatch() line: 94	
	NullInterceptor(AbstractInterceptor).invoke(Invocation) line: 133	
	Invocation.invoke() line: 88	
	ModelMBeanOperationInterceptor.invoke(Invocation) line: 142	
	Invocation.invoke() line: 88	
	XMBean(AbstractMBeanInvoker).invoke(String, Object[], String[]) line: 264	
	MBeanServerImpl.invoke(ObjectName, String, Object[], String[]) line: 659	
	MBeanProxyExt.invoke(Object, Method, Object[]) line: 210	
	$Proxy9.deploy(String) line: not available	
	ServerImpl.doStart() line: 482	
	ServerImpl.start() line: 362	
	Main.boot(String[]) line: 200	
	Main$1.run() line: 490	
	Thread.run() line: 745	
/c
	TriggerRequestProducerImpl(AbstractProducer).setJmsTemplate(JmsTemplate) line: 48	
		jmsTemplate = aJmsTemplate;
/cb
	GeneratedMethodAccessor203.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	Method.invoke(Object, Object...) line: 606	
	BeanWrapperImpl.setPropertyValue(BeanWrapperImpl$PropertyTokenHolder, PropertyValue) line: 1135		<- voor setDestination waren op ook op deze line	,

/c
	InterfaceMessageTriggerProducerImpl(AbstractProducer).setDestination(Destination) line: 44	
aDestination	ActiveMQQueue  (id=3036)	
	physicalName	"com.mpobjects.interfacemessagetriggerrequest" (id=3042)	
/cb
	GeneratedMethodAccessor630.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	Method.invoke(Object, Object...) line: 606	
	BeanWrapperImpl.setPropertyValue(BeanWrapperImpl$PropertyTokenHolder, PropertyValue) line: 1135	
	BeanWrapperImpl.setPropertyValue(PropertyValue) line: 904	
	BeanWrapperImpl(AbstractPropertyAccessor).setPropertyValues(PropertyValues, boolean, boolean) line: 75	
	BeanWrapperImpl(AbstractPropertyAccessor).setPropertyValues(PropertyValues) line: 57	
	DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).applyPropertyValues(String, BeanDefinition, BeanWrapper, PropertyValues) line: 1452	
	DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).populateBean(String, RootBeanDefinition, BeanWrapper) line: 1160	
	DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).doCreateBean(String, RootBeanDefinition, Object[]) line: 519	
	DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).createBean(String, RootBeanDefinition, Object[]) line: 458	
beanName	"com.mpobjects.oms.service.trigger.InterfaceMessageTriggerProducerImpl#5913a42f" (id=3171)	
/cb
	BeanDefinitionValueResolver.resolveInnerBean(Object, String, BeanDefinition) line: 276	
	BeanDefinitionValueResolver.resolveValueIfNecessary(Object, Object) line: 122	
	DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).applyPropertyValues(String, BeanDefinition, BeanWrapper, PropertyValues) line: 1419	
	DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).populateBean(String, RootBeanDefinition, BeanWrapper) line: 1160	
	DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).doCreateBean(String, RootBeanDefinition, Object[]) line: 519	
	DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).createBean(String, RootBeanDefinition, Object[]) line: 458	
	AbstractBeanFactory$1.getObject() line: 293	
	DefaultListableBeanFactory(DefaultSingletonBeanRegistry).getSingleton(String, ObjectFactory<?>) line: 223	
beanName	"com.mpobjects.oms.service.trigger.InterfaceMessageTriggerProducer" (id=3178)	
/cb
	DefaultListableBeanFactory(AbstractBeanFactory).doGetBean(String, Class<T>, Object[], boolean) line: 290	
	DefaultListableBeanFactory(AbstractBeanFactory).getBean(String) line: 191	
name	"&com.mpobjects.oms.service.trigger.InterfaceMessageTriggerProducer" (id=3175)	
/cb
	DefaultListableBeanFactory.preInstantiateSingletons() line: 618	
	XmlWebApplicationContext(AbstractApplicationContext).finishBeanFactoryInitialization(ConfigurableListableBeanFactory) line: 934	
	XmlWebApplicationContext(AbstractApplicationContext).__refresh() line: 479	
	XmlWebApplicationContext(AbstractApplicationContext).refresh() line: not available	
	ContextLoaderListener(ContextLoader).configureAndRefreshWebApplicationContext(ConfigurableWebApplicationContext, ServletContext) line: 410	
	ContextLoaderListener(ContextLoader).initWebApplicationContext(ServletContext) line: 306	
	ContextLoaderListener.contextInitialized(ServletContextEvent) line: 112	
	StandardContext.listenerStart() line: 3763	
	StandardContext.start() line: 4211	
	StandardHost(ContainerBase).addChildInternal(Container) line: 759	
	StandardHost(ContainerBase).addChild(Container) line: 739	
	StandardHost.addChild(Container) line: 524	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 57	
	DelegatingMethodAccessorImpl.__invoke(Object, Object[]) line: 43	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	Method.invoke(Object, Object...) line: 606	
	BaseModelMBean.invoke(String, Object[], String[]) line: 503	
	RawDynamicInvoker.invoke(String, Object[], String[]) line: 164	
	MBeanServerImpl.invoke(ObjectName, String, Object[], String[]) line: 659	
	StandardContext.init() line: 5052	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 57	
	DelegatingMethodAccessorImpl.__invoke(Object, Object[]) line: 43	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	Method.invoke(Object, Object...) line: 606	
	BaseModelMBean.invoke(String, Object[], String[]) line: 503	
	RawDynamicInvoker.invoke(String, Object[], String[]) line: 164	
	MBeanServerImpl.invoke(ObjectName, String, Object[], String[]) line: 659	
	TomcatDeployer.performDeployInternal(String, WebApplication, String, AbstractWebContainer$WebDescriptorParser) line: 297	
	TomcatDeployer.performDeploy(WebApplication, String, AbstractWebContainer$WebDescriptorParser) line: 103	
	TomcatDeployer(AbstractWebDeployer).start(DeploymentInfo) line: 371	
	WebModule.startModule() line: 83	
	WebModule.startService() line: 61	
	WebModule(ServiceMBeanSupport).jbossInternalStart() line: 289	
	WebModule(ServiceMBeanSupport).jbossInternalLifecycle(String) line: 245	
	GeneratedMethodAccessor7.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.__invoke(Object, Object[]) line: 43	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	Method.invoke(Object, Object...) line: 606	
	ReflectedDispatcher.invoke(Invocation) line: 155	
	Invocation.dispatch() line: 94	
	Invocation.invoke() line: 86	
	XMBean(AbstractMBeanInvoker).invoke(String, Object[], String[]) line: 264	
	MBeanServerImpl.invoke(ObjectName, String, Object[], String[]) line: 659	
	ServiceController$ServiceProxy.invoke(Object, Method, Object[]) line: 978	
	$Proxy3.start() line: not available	
	ServiceController.start(ObjectName) line: 417	
	GeneratedMethodAccessor13.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.__invoke(Object, Object[]) line: 43	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	Method.invoke(Object, Object...) line: 606	
	ReflectedDispatcher.invoke(Invocation) line: 155	
	Invocation.dispatch() line: 94	
	Invocation.invoke() line: 86	
	XMBean(AbstractMBeanInvoker).invoke(String, Object[], String[]) line: 264	
	MBeanServerImpl.invoke(ObjectName, String, Object[], String[]) line: 659	
	MBeanProxyExt.invoke(Object, Method, Object[]) line: 210	
	$Proxy45.start(ObjectName) line: not available	
	Tomcat5(AbstractWebContainer).start(DeploymentInfo) line: 466	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 57	
	DelegatingMethodAccessorImpl.__invoke(Object, Object[]) line: 43	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	Method.invoke(Object, Object...) line: 606	
	ReflectedDispatcher.invoke(Invocation) line: 155	
	Invocation.dispatch() line: 94	
	NullInterceptor(AbstractInterceptor).invoke(Invocation) line: 133	
	Invocation.invoke() line: 88	
	ModelMBeanOperationInterceptor.invoke(Invocation) line: 142	
	DynamicInterceptor.invoke(Invocation) line: 97	
	DeployerInterceptorJSE(InterceptorServiceMBeanSupport).invokeNext(Invocation) line: 238	
	DeployerInterceptorJSE(DeployerInterceptor).start(Invocation, DeploymentInfo) line: 92	
	SubDeployerInterceptorSupport$XMBeanInterceptor.start(Invocation, DeploymentInfo) line: 188	
	SubDeployerInterceptorSupport$XMBeanInterceptor(SubDeployerInterceptor).invoke(Invocation) line: 95	
	Invocation.invoke() line: 88	
	XMBean(AbstractMBeanInvoker).invoke(String, Object[], String[]) line: 264	
	MBeanServerImpl.invoke(ObjectName, String, Object[], String[]) line: 659	
	MBeanProxyExt.invoke(Object, Method, Object[]) line: 210	
	$Proxy46.start(DeploymentInfo) line: not available	
	MainDeployer.start(DeploymentInfo) line: 1025	
	MainDeployer.deploy(DeploymentInfo) line: 819	
	MainDeployer.deploy(URL) line: 782	
	GeneratedMethodAccessor67.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.__invoke(Object, Object[]) line: 43	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	Method.invoke(Object, Object...) line: 606	
	ReflectedDispatcher.invoke(Invocation) line: 155	
	Invocation.dispatch() line: 94	
	NullInterceptor(AbstractInterceptor).invoke(Invocation) line: 133	
	Invocation.invoke() line: 88	
	ModelMBeanOperationInterceptor.invoke(Invocation) line: 142	
	Invocation.invoke() line: 88	
	XMBean(AbstractMBeanInvoker).invoke(String, Object[], String[]) line: 264	
	MBeanServerImpl.invoke(ObjectName, String, Object[], String[]) line: 659	
	MBeanProxyExt.invoke(Object, Method, Object[]) line: 210	
	$Proxy13.deploy(URL) line: not available	
	URLDeploymentScanner.deploy(URLDeploymentScanner$DeployedURL) line: 421	
	URLDeploymentScanner.scan() line: 634	
	AbstractDeploymentScanner$ScannerThread.doScan() line: 263	
	URLDeploymentScanner(AbstractDeploymentScanner).startService() line: 336	
	URLDeploymentScanner(ServiceMBeanSupport).jbossInternalStart() line: 289	
	URLDeploymentScanner(ServiceMBeanSupport).jbossInternalLifecycle(String) line: 245	
	GeneratedMethodAccessor7.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.__invoke(Object, Object[]) line: 43	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	Method.invoke(Object, Object...) line: 606	
	ReflectedDispatcher.invoke(Invocation) line: 155	
	Invocation.dispatch() line: 94	
	Invocation.invoke() line: 86	
	XMBean(AbstractMBeanInvoker).invoke(String, Object[], String[]) line: 264	
	MBeanServerImpl.invoke(ObjectName, String, Object[], String[]) line: 659	
	ServiceController$ServiceProxy.invoke(Object, Method, Object[]) line: 978	
	$Proxy3.start() line: not available	
	ServiceController.start(ObjectName) line: 417	
	GeneratedMethodAccessor13.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.__invoke(Object, Object[]) line: 43	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	Method.invoke(Object, Object...) line: 606	
	ReflectedDispatcher.invoke(Invocation) line: 155	
	Invocation.dispatch() line: 94	
	Invocation.invoke() line: 86	
	XMBean(AbstractMBeanInvoker).invoke(String, Object[], String[]) line: 264	
	MBeanServerImpl.invoke(ObjectName, String, Object[], String[]) line: 659	
	MBeanProxyExt.invoke(Object, Method, Object[]) line: 210	
	$Proxy8.start(ObjectName) line: not available	
	SARDeployer.start(DeploymentInfo) line: 302	
	MainDeployer.start(DeploymentInfo) line: 1025	
	MainDeployer.deploy(DeploymentInfo) line: 819	
	MainDeployer.deploy(URL) line: 782	
	MainDeployer.deploy(String) line: 766	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 57	
	DelegatingMethodAccessorImpl.__invoke(Object, Object[]) line: 43	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	Method.invoke(Object, Object...) line: 606	
	ReflectedDispatcher.invoke(Invocation) line: 155	
	Invocation.dispatch() line: 94	
	NullInterceptor(AbstractInterceptor).invoke(Invocation) line: 133	
	Invocation.invoke() line: 88	
	ModelMBeanOperationInterceptor.invoke(Invocation) line: 142	
	Invocation.invoke() line: 88	
	XMBean(AbstractMBeanInvoker).invoke(String, Object[], String[]) line: 264	
	MBeanServerImpl.invoke(ObjectName, String, Object[], String[]) line: 659	
	MBeanProxyExt.invoke(Object, Method, Object[]) line: 210	
	$Proxy9.deploy(String) line: not available	
	ServerImpl.doStart() line: 482	
	ServerImpl.start() line: 362	
	Main.boot(String[]) line: 200	
	Main$1.run() line: 490	
	Thread.run() line: 745	

/c
	OrderValidationRequestProducerImpl(AbstractProducer).setDestination(Destination) line: 44	
aDestination	ActiveMQQueue  (id=3206)	
	physicalName	"com.mpobjects.oms.ordervalidationrequest" (id=3209)	
/cb
	GeneratedMethodAccessor630.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	Method.invoke(Object, Object...) line: 606	
	BeanWrapperImpl.setPropertyValue(BeanWrapperImpl$PropertyTokenHolder, PropertyValue) line: 1135	
	BeanWrapperImpl.setPropertyValue(PropertyValue) line: 904	
	BeanWrapperImpl(AbstractPropertyAccessor).setPropertyValues(PropertyValues, boolean, boolean) line: 75	
	BeanWrapperImpl(AbstractPropertyAccessor).setPropertyValues(PropertyValues) line: 57	
	DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).applyPropertyValues(String, BeanDefinition, BeanWrapper, PropertyValues) line: 1452	
	DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).populateBean(String, RootBeanDefinition, BeanWrapper) line: 1160	
	DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).doCreateBean(String, RootBeanDefinition, Object[]) line: 519	
	DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).createBean(String, RootBeanDefinition, Object[]) line: 458	
	BeanDefinitionValueResolver.resolveInnerBean(Object, String, BeanDefinition) line: 276	
	BeanDefinitionValueResolver.resolveValueIfNecessary(Object, Object) line: 122	
	DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).applyPropertyValues(String, BeanDefinition, BeanWrapper, PropertyValues) line: 1419	
	DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).populateBean(String, RootBeanDefinition, BeanWrapper) line: 1160	
	DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).doCreateBean(String, RootBeanDefinition, Object[]) line: 519	
	DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).createBean(String, RootBeanDefinition, Object[]) line: 458	
	AbstractBeanFactory$1.getObject() line: 293	
	DefaultListableBeanFactory(DefaultSingletonBeanRegistry).getSingleton(String, ObjectFactory<?>) line: 223	
	DefaultListableBeanFactory(AbstractBeanFactory).doGetBean(String, Class<T>, Object[], boolean) line: 290	
	DefaultListableBeanFactory(AbstractBeanFactory).getBean(String) line: 191	
name	"&com.mpobjects.oms.model.order.validation.service.OrderValidationRequestProducer" (id=3222)	
/cb
	DefaultListableBeanFactory.preInstantiateSingletons() line: 618	
	XmlWebApplicationContext(AbstractApplicationContext).finishBeanFactoryInitialization(ConfigurableListableBeanFactory) line: 934	
	XmlWebApplicationContext(AbstractApplicationContext).__refresh() line: 479	
	XmlWebApplicationContext(AbstractApplicationContext).refresh() line: not available	
	ContextLoaderListener(ContextLoader).configureAndRefreshWebApplicationContext(ConfigurableWebApplicationContext, ServletContext) line: 410	
	ContextLoaderListener(ContextLoader).initWebApplicationContext(ServletContext) line: 306	
	ContextLoaderListener.contextInitialized(ServletContextEvent) line: 112	
	StandardContext.listenerStart() line: 3763	
	StandardContext.start() line: 4211	
	StandardHost(ContainerBase).addChildInternal(Container) line: 759	
	StandardHost(ContainerBase).addChild(Container) line: 739	
	StandardHost.addChild(Container) line: 524	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 57	
	DelegatingMethodAccessorImpl.__invoke(Object, Object[]) line: 43	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	Method.invoke(Object, Object...) line: 606	
	BaseModelMBean.invoke(String, Object[], String[]) line: 503	
	RawDynamicInvoker.invoke(String, Object[], String[]) line: 164	
	MBeanServerImpl.invoke(ObjectName, String, Object[], String[]) line: 659	
	StandardContext.init() line: 5052	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 57	
	DelegatingMethodAccessorImpl.__invoke(Object, Object[]) line: 43	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	Method.invoke(Object, Object...) line: 606	
	BaseModelMBean.invoke(String, Object[], String[]) line: 503	
	RawDynamicInvoker.invoke(String, Object[], String[]) line: 164	
	MBeanServerImpl.invoke(ObjectName, String, Object[], String[]) line: 659	
	TomcatDeployer.performDeployInternal(String, WebApplication, String, AbstractWebContainer$WebDescriptorParser) line: 297	
	TomcatDeployer.performDeploy(WebApplication, String, AbstractWebContainer$WebDescriptorParser) line: 103	
	TomcatDeployer(AbstractWebDeployer).start(DeploymentInfo) line: 371	
	WebModule.startModule() line: 83	
	WebModule.startService() line: 61	
	WebModule(ServiceMBeanSupport).jbossInternalStart() line: 289	
	WebModule(ServiceMBeanSupport).jbossInternalLifecycle(String) line: 245	
	GeneratedMethodAccessor7.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.__invoke(Object, Object[]) line: 43	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	Method.invoke(Object, Object...) line: 606	
	ReflectedDispatcher.invoke(Invocation) line: 155	
	Invocation.dispatch() line: 94	
	Invocation.invoke() line: 86	
	XMBean(AbstractMBeanInvoker).invoke(String, Object[], String[]) line: 264	
	MBeanServerImpl.invoke(ObjectName, String, Object[], String[]) line: 659	
	ServiceController$ServiceProxy.invoke(Object, Method, Object[]) line: 978	
	$Proxy3.start() line: not available	
	ServiceController.start(ObjectName) line: 417	
	GeneratedMethodAccessor13.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.__invoke(Object, Object[]) line: 43	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	Method.invoke(Object, Object...) line: 606	
	ReflectedDispatcher.invoke(Invocation) line: 155	
	Invocation.dispatch() line: 94	
	Invocation.invoke() line: 86	
	XMBean(AbstractMBeanInvoker).invoke(String, Object[], String[]) line: 264	
	MBeanServerImpl.invoke(ObjectName, String, Object[], String[]) line: 659	
	MBeanProxyExt.invoke(Object, Method, Object[]) line: 210	
	$Proxy45.start(ObjectName) line: not available	
	Tomcat5(AbstractWebContainer).start(DeploymentInfo) line: 466	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 57	
	DelegatingMethodAccessorImpl.__invoke(Object, Object[]) line: 43	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	Method.invoke(Object, Object...) line: 606	
	ReflectedDispatcher.invoke(Invocation) line: 155	
	Invocation.dispatch() line: 94	
	NullInterceptor(AbstractInterceptor).invoke(Invocation) line: 133	
	Invocation.invoke() line: 88	
	ModelMBeanOperationInterceptor.invoke(Invocation) line: 142	
	DynamicInterceptor.invoke(Invocation) line: 97	
	DeployerInterceptorJSE(InterceptorServiceMBeanSupport).invokeNext(Invocation) line: 238	
	DeployerInterceptorJSE(DeployerInterceptor).start(Invocation, DeploymentInfo) line: 92	
	SubDeployerInterceptorSupport$XMBeanInterceptor.start(Invocation, DeploymentInfo) line: 188	
	SubDeployerInterceptorSupport$XMBeanInterceptor(SubDeployerInterceptor).invoke(Invocation) line: 95	
	Invocation.invoke() line: 88	
	XMBean(AbstractMBeanInvoker).invoke(String, Object[], String[]) line: 264	
	MBeanServerImpl.invoke(ObjectName, String, Object[], String[]) line: 659	
	MBeanProxyExt.invoke(Object, Method, Object[]) line: 210	
	$Proxy46.start(DeploymentInfo) line: not available	
	MainDeployer.start(DeploymentInfo) line: 1025	
	MainDeployer.deploy(DeploymentInfo) line: 819	
	MainDeployer.deploy(URL) line: 782	
	GeneratedMethodAccessor67.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.__invoke(Object, Object[]) line: 43	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	Method.invoke(Object, Object...) line: 606	
	ReflectedDispatcher.invoke(Invocation) line: 155	
	Invocation.dispatch() line: 94	
	NullInterceptor(AbstractInterceptor).invoke(Invocation) line: 133	
	Invocation.invoke() line: 88	
	ModelMBeanOperationInterceptor.invoke(Invocation) line: 142	
	Invocation.invoke() line: 88	
	XMBean(AbstractMBeanInvoker).invoke(String, Object[], String[]) line: 264	
	MBeanServerImpl.invoke(ObjectName, String, Object[], String[]) line: 659	
	MBeanProxyExt.invoke(Object, Method, Object[]) line: 210	
	$Proxy13.deploy(URL) line: not available	
	URLDeploymentScanner.deploy(URLDeploymentScanner$DeployedURL) line: 421	
	URLDeploymentScanner.scan() line: 634	
	AbstractDeploymentScanner$ScannerThread.doScan() line: 263	
	URLDeploymentScanner(AbstractDeploymentScanner).startService() line: 336	
	URLDeploymentScanner(ServiceMBeanSupport).jbossInternalStart() line: 289	
	URLDeploymentScanner(ServiceMBeanSupport).jbossInternalLifecycle(String) line: 245	
	GeneratedMethodAccessor7.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.__invoke(Object, Object[]) line: 43	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	Method.invoke(Object, Object...) line: 606	
	ReflectedDispatcher.invoke(Invocation) line: 155	
	Invocation.dispatch() line: 94	
	Invocation.invoke() line: 86	
	XMBean(AbstractMBeanInvoker).invoke(String, Object[], String[]) line: 264	
	MBeanServerImpl.invoke(ObjectName, String, Object[], String[]) line: 659	
	ServiceController$ServiceProxy.invoke(Object, Method, Object[]) line: 978	
	$Proxy3.start() line: not available	
	ServiceController.start(ObjectName) line: 417	
	GeneratedMethodAccessor13.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.__invoke(Object, Object[]) line: 43	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	Method.invoke(Object, Object...) line: 606	
	ReflectedDispatcher.invoke(Invocation) line: 155	
	Invocation.dispatch() line: 94	
	Invocation.invoke() line: 86	
	XMBean(AbstractMBeanInvoker).invoke(String, Object[], String[]) line: 264	
	MBeanServerImpl.invoke(ObjectName, String, Object[], String[]) line: 659	
	MBeanProxyExt.invoke(Object, Method, Object[]) line: 210	
	$Proxy8.start(ObjectName) line: not available	
	SARDeployer.start(DeploymentInfo) line: 302	
	MainDeployer.start(DeploymentInfo) line: 1025	
	MainDeployer.deploy(DeploymentInfo) line: 819	
	MainDeployer.deploy(URL) line: 782	
	MainDeployer.deploy(String) line: 766	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 57	
	DelegatingMethodAccessorImpl.__invoke(Object, Object[]) line: 43	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	Method.invoke(Object, Object...) line: 606	
	ReflectedDispatcher.invoke(Invocation) line: 155	
	Invocation.dispatch() line: 94	
	NullInterceptor(AbstractInterceptor).invoke(Invocation) line: 133	
	Invocation.invoke() line: 88	
	ModelMBeanOperationInterceptor.invoke(Invocation) line: 142	
	Invocation.invoke() line: 88	
	XMBean(AbstractMBeanInvoker).invoke(String, Object[], String[]) line: 264	
	MBeanServerImpl.invoke(ObjectName, String, Object[], String[]) line: 659	
	MBeanProxyExt.invoke(Object, Method, Object[]) line: 210	
	$Proxy9.deploy(String) line: not available	
	ServerImpl.doStart() line: 482	
	ServerImpl.start() line: 362	
	Main.boot(String[]) line: 200	
	Main$1.run() line: 490	
	Thread.run() line: 745	

/ 13	. 

/ MPOBJECTS.TO.BAKKER is in Jms message entry	, dus bij export 


/ c
/ stack	,
	TriggerRequestHandlerImpl.onMessage(Message) line: 38	
	GeneratedMethodAccessor2636.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.__invoke(Object, Object[]) line: 43	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	Method.invoke(Object, Object...) line: 606	
	AopUtils.invokeJoinpointUsingReflection(Object, Method, Object[]) line: 317	
	ReflectiveMethodInvocation.invokeJoinpoint() line: 183	
	ReflectiveMethodInvocation.proceed() line: 150	
	TransactionInterceptor$1.proceedWithInvocation() line: 96	
	TransactionInterceptor(TransactionAspectSupport).invokeWithinTransaction(Method, Class, TransactionAspectSupport$InvocationCallback) line: 260	
	TransactionInterceptor.invoke(MethodInvocation) line: 94	
	ReflectiveMethodInvocation.proceed() line: 172	
	JdkDynamicAopProxy.invoke(Object, Method, Object[]) line: 204	
	$Proxy337.onMessage(Message) line: not available	
	DefaultMessageListenerContainer(AbstractMessageListenerContainer).doInvokeListener(MessageListener, Message) line: 569	
	DefaultMessageListenerContainer(AbstractMessageListenerContainer).invokeListener(Session, Message) line: 507	
	DefaultMessageListenerContainer(AbstractMessageListenerContainer).doExecuteListener(Session, Message) line: 474	
	DefaultMessageListenerContainer(AbstractPollingMessageListenerContainer).doReceiveAndExecute(Object, Session, MessageConsumer, TransactionStatus) line: 325	
	DefaultMessageListenerContainer(AbstractPollingMessageListenerContainer).receiveAndExecute(Object, Session, MessageConsumer) line: 263	
	DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener() line: 1103	
	DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop() line: 1095	
	DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run() line: 992	
	Thread.run() line: 745	
/ DefaultMessageListenerContainer is een Spring type	,
/s
com.mpobjects.oms.service.trigger.TriggerRequestHandlerImpl.onMessage(javax.jms.Message) line: 38	

aMessage	ActiveMQObjectMessage  (id=52882)	
	connection	ActiveMQConnection  (id=52925)	
	content	ByteSequence  (id=52926)	
		data	(id=52981)	
		length	7390	
	messageId	MessageId  (id=52927)	
	object	TriggerExecutionRequest  (id=53820)	
		objectMap	HashMap  (id=53824)		/ {customerOrderSystemId=11, customerOrderId=order5}
		resource	Resource  (id=53828)	
		triggerSystemId	746610	
		type	Class (com.mpobjects.oms.model.trigger.CustomerOrderTrigger) (id=12920)	

/ WH komen we in CustomerOrderProcessor.process uit	,
/ NEE	, in OrderUpdateProcessor.generateOrderUpdate	, vanwege de trigger task "EXPORT_ORDER_UPDATE_MESSAGE"

		try {
			TriggerExecutionRequest<?> myRequest = (TriggerExecutionRequest<?>) ((ObjectMessage) aMessage).getObject();
			triggerActionExecutionService.executeRequest(myRequest);
/s
com.mpobjects.oms.service.trigger.TriggerActionExecutionServiceImpl.executeRequest(com.mpobjects.oms.service.trigger.TriggerExecutionRequest<?>) line: 29	

		AbstractTrigger myTrigger = triggerDaoManager.getDao(aRequest.getType()).getBySystemId(aRequest.getTriggerSystemId());
myTrigger	CustomerOrderTrigger_$$_javassist_92  (id=54204)	
	handler	JavassistLazyInitializer  (id=54257)	
		entityName	"com.mpobjects.oms.model.trigger.CustomerOrderTrigger" (id=54304)	
		id	Integer  (id=54306)		/ 746610
		initialized	true	

		List<TriggerAction> myTriggerActionList = new ArrayList<TriggerAction>(myTrigger.getTriggerList());
myTriggerActionList	ArrayList  (id=54450)	
	[0]	TriggerAction  (id=54453)	
		code	"coexportaction" (id=54474)	
		systemId	746609	
		triggerTask	"EXPORT_ORDER_UPDATE_MESSAGE" (id=54508)	

		for (TriggerAction myTriggerAction : myTriggerActionList) {
			TriggerTask myTask = triggerTaskDefinitionManager.getTask(myTriggerAction.getTriggerTask());
/s
com.mpobjects.oms.service.trigger.TriggerTaskDefinitionManagerImpl.getTask(java.lang.String) line: 50	
/=
	public TriggerTask getTask(String aName) {	/ aName="EXPORT_ORDER_UPDATE_MESSAGE"

		Class<? extends TriggerTask> myClass = definitionMap.get(aName);
				return myClass.newInstance();

this	TriggerTaskDefinitionManagerImpl  (id=54745)	
	definitionMap	HashMap  (id=54758)	
		[0]	HashMap$Entry  (id=54767)	
			key	"EXPORT_CUSTOM_SHIPMENT_ORDER_MESSAGE" (id=54812)	
			value	Class (com.mpobjects.oms.model.trigger.task.ExportCustomShipmentOrderMessage) (id=11899)	
		[1]	HashMap$Entry  (id=54768)	
			key	"EXPORT_LOGISTICS_ORDER_EVENT" (id=54811)	
			value	Class (com.mpobjects.oms.model.trigger.task.ExportLogisticsOrderEvent) (id=7734)	
		[2]	HashMap$Entry  (id=54769)	
			key	"EXPORT_DOCUMENT_AS_EVENT" (id=54810)	
			value	Class (com.mpobjects.document.filemeta.service.ExportDocumentTriggerTask) (id=22061)	
		[3]	HashMap$Entry  (id=54770)	
			key	"CREATE_SERVICE_ORDER_EVENT" (id=54809)	
			value	Class (com.mpobjects.event.service.triggertask.CreateServiceOrderEvent) (id=12841)	
		[4]	HashMap$Entry  (id=54771)	
			key	"ASSIGN_PATH" (id=54808)	
			value	Class (com.mpobjects.oms.model.trigger.task.AssignPath) (id=11589)	
		[5]	HashMap$Entry  (id=54772)	
			key	"EXPORT_SERVICE_ORDER" (id=54807)	
			value	Class (com.mpobjects.oms.model.trigger.task.ExportServiceOrder) (id=3983)	
		[6]	HashMap$Entry  (id=54773)	
			key	"GENERATE_DOCUMENT" (id=54806)	
			value	Class (com.mpobjects.oms.model.trigger.task.GenerateDocument) (id=7559)	
		[7]	HashMap$Entry  (id=54774)	
			key	"GENERATE_LABEL" (id=54805)	
			value	Class (com.mpobjects.oms.model.trigger.task.GenerateLabel) (id=2207)	
		[8]	HashMap$Entry  (id=54775)																				<-
			key	"EXPORT_ORDER_UPDATE_MESSAGE" (id=54804)	
			value	Class (com.mpobjects.oms.model.trigger.task.ExportOrderUpdateMessage) (id=6847)	
		[9]	HashMap$Entry  (id=54776)	
			key	"GENERATE_SUPPLIER_INVOICE" (id=54803)	
			value	Class (com.mpobjects.invoice.model.trigger.GenerateSupplierInvoice) (id=14518)	
		[10]	HashMap$Entry  (id=54777)	
			key	"EXPORT_CUSTOM_CUSTOMER_ORDER_MESSAGE" (id=54802)	
			value	Class (com.mpobjects.oms.model.trigger.task.ExportCustomCustomerOrderMessage) (id=11534)	
		[11]	HashMap$Entry  (id=54778)	
			key	"VALIDATE_SHIPMENT_ORDER" (id=54801)	
			value	Class (com.mpobjects.oms.model.trigger.task.ValidateShipmentOrder) (id=17716)	
		[12]	HashMap$Entry  (id=54779)	
			key	"EXPORT_CUSTOM_MESSAGE" (id=54800)	
			value	Class (com.mpobjects.oms.model.trigger.task.ExportCustomMessage) (id=4082)	
		[13]	HashMap$Entry  (id=54782)	
			key	"GENERATE_INBOUND_LABEL" (id=54799)	
			value	Class (com.mpobjects.oms.model.trigger.task.GenerateInboundLabel) (id=22023)	
		[14]	HashMap$Entry  (id=54783)	
			key	"GENERATE_CUSTOMER_INVOICE" (id=54798)	
			value	Class (com.mpobjects.customerinvoice.model.trigger.GenerateCustomerInvoice) (id=12068)	
		[15]	HashMap$Entry  (id=54786)	
			key	"RELEASE_SERVICE_ORDER_FOR_EVENT" (id=54797)	
			value	Class (com.mpobjects.oms.model.trigger.task.ReleaseServiceOrderForEvent) (id=2305)	
		[16]	HashMap$Entry  (id=54789)	
			key	"SEND_MESSAGE" (id=54796)	
			value	Class (com.mpobjects.oms.model.trigger.task.SendMessage) (id=8640)	
		[17]	HashMap$Entry  (id=54790)	
			key	"CHECK_SHIPMENT_ORDER_SERVICE_AGREEMENT" (id=54795)	
			value	Class (com.mpobjects.oms.ratecalc.model.trigger.RecalculateShipmentOrderPriceCost) (id=13598)	
		[18]	HashMap$Entry  (id=54793)	
			key	"EXPORT_SHIPMENT_ORDER" (id=54794)	
			value	Class (com.mpobjects.oms.model.trigger.task.ExportShipmentOrder) (id=7393)	
aName	"EXPORT_ORDER_UPDATE_MESSAGE" (id=54508)	

/t
com.mpobjects.oms.service.trigger.TriggerActionExecutionServiceImpl.executeRequest(com.mpobjects.oms.service.trigger.TriggerExecutionRequest<?>) line: 47	
		for (TriggerAction myTriggerAction : myTriggerActionList) {
			TriggerTask myTask = triggerTaskDefinitionManager.getTask(myTriggerAction.getTriggerTask());
/d
myTask	ExportOrderUpdateMessage  (id=54956)	

			myTask.execute(myTriggerAction.getParameters(), aRequest.getObjectMap());
/s
com.mpobjects.oms.model.trigger.task.ExportOrderUpdateMessage.execute(java.util.Collection<com.mpobjects.oms.model.trigger.TriggerTaskParameter<?>>, java.util.Map<java.lang.String,java.io.Serializable>) line: 47	
/=
	public void execute(Collection<TriggerTaskParameter<?>> aParameters, Map<String, Serializable> anObjectMap) {
aParameters=[TaskParameter[purposeCode =null]]
anObjectMap={customerOrderSystemId=11, customerOrderId=order5}

		parameters.clear();
		parameters.addAll(aParameters);
[TaskParameter[purposeCode =null]]
		String purposeCode = StringUtils.defaultString((String) getParameter(PURPOSE_CODE_PARAM).getValue());
""
		if (anObjectMap.get(CustomerOrderResolver.CUSTOMER_ORDER_SYSTEM_ID) != null) {
			handleCustomerOrderBasedExport((Integer) anObjectMap.get(CustomerOrderResolver.CUSTOMER_ORDER_SYSTEM_ID), purposeCode);
/s
com.mpobjects.oms.model.trigger.task.ExportOrderUpdateMessage.handleCustomerOrderBasedExport(int, java.lang.String) line: 83	
/=
	private void handleCustomerOrderBasedExport(int customerOrderSystemId, String purposeCode) {
customerOrderSystemId	11	
purposeCode	"" (id=36849)	

			CustomerOrder order = MpoBeanFactory.getBean(CustomerOrderDAO.class).getBySystemId(customerOrderSystemId);
/ uninit proxy	,
			Map<String, Object> parameters = new HashMap<String, Object>();
			parameters.put("PURPOSE_CODE", purposeCode);

			ContextEntryResolver myResolver = MpoBeanFactory.getBean(ContextEntryResolver.class);
			SapXMessage message = MpoBeanFactory.getBean(OrderUpdateProcessor.class).generateOrderUpdate(
					myResolver.resolveDownwardHierarchyForCustomerOrder(order, parameters),						/ TODO
					purposeCode);
/s
ContextEntryResolverImpl.resolveDownwardHierarchyForCustomerOrder(CustomerOrder, Map<String,Object>) line: 24	
		ContextEntry customerOrderEntry = new ContextEntry();
		customerOrderEntry.setEntitySystemId(customerOrder.getSystemId());	/ 11
		customerOrderEntry.setOrganization(customerOrder.getOrganization());	/ BAKKER
		customerOrderEntry.setId(customerOrder.getCustomerOrderNumber());	"order5"
		customerOrderEntry.setContextType(ContextType.CUSTOMER_ORDER);	

customerOrderEntry	ContextEntry  (id=29997)	
	childEntries	ArrayList  (id=30000)			/ []
	contextType	ContextEntry$ContextType  (id=29479)	/ CUSTOMER_ORDER	
	entitySystemId	11	
	extendedId	null	
	id	"order5" (id=29255)	
	organization	Organization_$$_javassist_83  (id=28051)	/ BAKKER
	purposeCode	null	

		for (CustomerOrderLine customerOrderLine : customerOrder.getCustomerOrderLineSet()) {
customerOrderLine	CustomerOrderLine  (id=30206)	
	attachments	PersistentSet  (id=30236)							/ []
	billToParty	VirtualParty  (id=30241)							/ PARTY id:{RFS.TRC}KL20161206112138(systemId:0)	
	customerOrder	CustomerOrder_$$_javassist_108  (id=28997)		/ order5	
	customerOrderLineId	"1" (id=30262)	
	product	Product_$$_javassist_17  (id=30353)						/ 123 (746501)	
	quantity	BigDecimal  (id=30356)								/ 1.0000	
	systemId	11	
	theFromPartyVO	VirtualParty  (id=30702)						/ PARTY id:NL-3899AT-9(systemId:0)	
	theToPartyVO	VirtualParty  (id=30759)						/ PARTY id:ADR-20161206112139(systemId:0)

			customerOrderEntry.addChildEntry(resolveDownwardHierarchyForCustomerOrderLine(customerOrderLine, parameters));
/s
ContextEntryResolverImpl.resolveDownwardHierarchyForCustomerOrderLine(CustomerOrderLine, Map<String,Object>) line: 39	
		ContextEntry customerOrderLineEntry = new ContextEntry();
		customerOrderLineEntry.setEntitySystemId(customerOrderLine.getSystemId());
		customerOrderLineEntry.setOrganization(customerOrderLine.getCustomerOrder().getOrganization());
		customerOrderLineEntry.setId(customerOrderLine.getCustomerOrderLineId());
		customerOrderLineEntry.setExtendedId(customerOrderLine.getCustomerOrder().getCustomerOrderNumber());			/ !
		customerOrderLineEntry.setContextType(ContextType.CUSTOMER_ORDER_LINE);

customerOrderLineEntry	ContextEntry  (id=31183)	
	childEntries	ArrayList  (id=31187)	
	contextType	ContextEntry$ContextType  (id=31192)	
	entitySystemId	11	
	extendedId	"order5" (id=29255)	
	id	"1" (id=30262)	
	organization	Organization_$$_javassist_83  (id=28051)	
	purposeCode	null	

		for (ProductItemVO productItem : customerOrderLine.getLinkedProductItemSet()) {

productItem	ProductItemVO  (id=31406)	
	systemId	11	
	theOriginalCustomerOrderId	"order5" (id=32109)	
	theOriginalCustomerOrderLineId	"1" (id=32127)	
	theProduct	Product_$$_javassist_17  (id=30353)	
		handler	JavassistLazyInitializer  (id=32879)	
			target	Product  (id=33023)	
				code	"123" (id=33098)	
				systemId	746501	
	theProductItemId	"010" (id=32157)	

			customerOrderLineEntry.addChildEntry(resolveDownwardHierarchyForProductItem(productItem, parameters));
/s
ContextEntryResolverImpl.resolveDownwardHierarchyForProductItem(ProductItemVO, Map<String,Object>) line: 77	
		ContextEntry productItemEntry = new ContextEntry();
		productItemEntry.setOrganization(productItem.getShipmentOrder().getOrganization());
		productItemEntry.setEntitySystemId(productItem.getSystemId());
		productItemEntry.setId(productItem.getProductItemId());
		productItemEntry.setExtendedId(productItem.getShipmentOrder().getShipmentOrderId());
		productItemEntry.setContextType(ContextType.PRODUCT_ITEM);

productItemEntry	ContextEntry  (id=34058)	
	childEntries	ArrayList  (id=34071)				/ []
	contextType	ContextEntry$ContextType  (id=34075)	/ PRODUCT_ITEM	
	entitySystemId	11	
	extendedId	"SH000000016" (id=34085)	
	id	"010" (id=32157)	
	organization	Organization_$$_javassist_83  (id=28051)/ Id:BAKKER	
	purposeCode	null	

		if (productItem.getShipmentOrder() != null) {
			productItemEntry.addChildEntry(resolveDownwardHierarchyForShipmentOrder(productItem.getShipmentOrder(), parameters));
/s
ContextEntryResolverImpl.resolveDownwardHierarchyForShipmentOrder(ShipmentOrderVO, Map<String,Object>) line: 108	
		ContextEntry shipmentOrderEntry = new ContextEntry();
		shipmentOrderEntry.setEntitySystemId(shipmentOrder.getSystemId());
		shipmentOrderEntry.setOrganization(shipmentOrder.getOrganization());
		shipmentOrderEntry.setId(shipmentOrder.getShipmentOrderId());
		shipmentOrderEntry.setContextType(ContextType.SHIPMENT_ORDER);

shipmentOrderEntry	ContextEntry  (id=34313)	
	childEntries	ArrayList  (id=34316)	
	contextType	ContextEntry$ContextType  (id=34321)	
	entitySystemId	50331	
	extendedId	null	
	id	"SH000000016" (id=34085)	
	organization	Organization_$$_javassist_83  (id=28051)	
	purposeCode	null	

		for (ServiceActionVO action : shipmentOrder.getServiceActionList()) {	/ SH000000016/DELIVERY/50345
			ConsignmentVO consignment = action.getConsignmentVO();	/ N0050315.1/50344
			if (consignment != null) {
				ServiceOrderVO order = consignment.getServiceOrderVO();	/ N0050315/50355
				if (order != null) {
					shipmentOrderEntry.addChildEntry(resolveDownwardHierarchyForServiceOrder(order, parameters));
/s
ContextEntryResolverImpl.resolveDownwardHierarchyForServiceOrder(ServiceOrderVO, Map<String,Object>) line: 93	
		ContextEntry serviceOrderEntry = new ContextEntry();
		serviceOrderEntry.setEntitySystemId(serviceOrder.getSystemId());
		serviceOrderEntry.setOrganization(serviceOrder.getOrganization());
		serviceOrderEntry.setId(serviceOrder.getServiceOrderId());
		serviceOrderEntry.setContextType(ContextType.SERVICE_ORDER);

serviceOrderEntry	ContextEntry  (id=34728)	
	childEntries	ArrayList  (id=34731)	
	contextType	ContextEntry$ContextType  (id=34736)	
	entitySystemId	50355	
	extendedId	null	
	id	"N0050315" (id=34749)	
	organization	Organization_$$_javassist_83  (id=28051)	
	purposeCode	null	

		for (EventVO event : serviceOrder.getEvents()) {
/n
			serviceOrderEntry.addChildEntry(resolveDownwardHierarchyForLogisticsOrderEvent(event, parameters));
/n
		return serviceOrderEntry;
/t
ContextEntry.addChildEntry(ContextEntry) line: 24	
					shipmentOrderEntry.addChildEntry(resolveDownwardHierarchyForServiceOrder(order, parameters));
/pd
/s
ContextEntry.addChildEntry(ContextEntry) line: 24	
		childEntries.add(entry);
/t
ContextEntryResolverImpl.resolveDownwardHierarchyForShipmentOrder(ShipmentOrderVO, Map<String,Object>) line: 119	

/ volgende	,
		for (ServiceActionVO action : shipmentOrder.getServiceActionList()) {	/ SH000000016/FINCONS/50346
			ConsignmentVO consignment = action.getConsignmentVO();	/ N0050316.1/50345
			if (consignment != null) {
				ServiceOrderVO order = consignment.getServiceOrderVO();	/ N0050316/50356
				if (order != null) {
					shipmentOrderEntry.addChildEntry(resolveDownwardHierarchyForServiceOrder(order, parameters));
/ geen volgende	,
		return shipmentOrderEntry;
/t
ContextEntryResolverImpl.resolveDownwardHierarchyForProductItem(ProductItemVO, Map<String,Object>) line: 88	
			productItemEntry.addChildEntry(resolveDownwardHierarchyForShipmentOrder(productItem.getShipmentOrder(), parameters));
/d
		return productItemEntry;
/t
ContextEntryResolverImpl.resolveDownwardHierarchyForCustomerOrderLine(CustomerOrderLine, Map<String,Object>) line: 50	
		for (ProductItemVO productItem : customerOrderLine.getLinkedProductItemSet()) {
			customerOrderLineEntry.addChildEntry(resolveDownwardHierarchyForProductItem(productItem, parameters));
/d
/ geen volgende,	 
		return customerOrderLineEntry;
/t
ContextEntryResolverImpl.resolveDownwardHierarchyForCustomerOrder(CustomerOrder, Map<String,Object>) line: 34	
		for (CustomerOrderLine customerOrderLine : customerOrder.getCustomerOrderLineSet()) {
			customerOrderEntry.addChildEntry(resolveDownwardHierarchyForCustomerOrderLine(customerOrderLine, parameters));
/d
/ geen volgende,	
		return customerOrderEntry;
/t
ExportOrderUpdateMessage.handleCustomerOrderBasedExport(int, String) line: 95	
			SapXMessage message = MpoBeanFactory.getBean(OrderUpdateProcessor.class).generateOrderUpdate(
					myResolver.resolveDownwardHierarchyForCustomerOrder(order, parameters),
					purposeCode);
/pd
/s
com.mpobjects.oms.model.orderupdateexport.service.OrderUpdateProcessor.generateOrderUpdate(com.mpobjects.oms.model.orderupdateexport.ContextEntry, java.lang.String) line: 61	
/=
	public SapXMessage generateOrderUpdate(ContextEntry contextEntry, String purposeCode) throws XMLProcessorException {

contextEntry	ContextEntry  (id=55812)									/ TODO
	contextType	ContextEntry$ContextType  (id=55828)	
	entitySystemId	11	
	extendedId	null	
	id	"order5" (id=26942)	
	organization	Organization_$$_javassist_83  (id=54491)	
	purposeCode	null	
	childEntries	ArrayList  (id=55824)	
		[0]	ContextEntry  (id=55863)	
			childEntries	ArrayList  (id=55870)	
				[0]	ContextEntry  (id=55912)	
					childEntries	ArrayList  (id=55916)	
					contextType	ContextEntry$ContextType  (id=55919)	
					entitySystemId	11	
					extendedId	"SH000000016" (id=55926)	
					id	"010" (id=55931)	
					organization	Organization_$$_javassist_83  (id=54491)	
					purposeCode	null	
			contextType	ContextEntry$ContextType  (id=55874)	
			entitySystemId	11	
			extendedId	"order5" (id=26942)	
			id	"1" (id=55887)	
			organization	Organization_$$_javassist_83  (id=54491)	
			purposeCode	null	
purposeCode	"" (id=36849)	

		SapXMessage sapXMessage = new SapXMessage(ORDER_UPDATE_MSG, true);
		setHeader(sapXMessage);
		try {
			Node bodyNode = selectSingleNode(sapXMessage.getDocument(), ORDER_UPDATE_MSG, "body");
			Node contextNode = appendElement(bodyNode, MTC_NS + ContextEntryProcessor.CONTEXT_TAG);

			Node contextEntryNode = appendElement(contextNode, MTC_NS + ContextEntryProcessor.CONTEXT_ENTRY_TAG);	

/ Deze gaan we update	, maar uiteindelijk dus sapXMessage	, 

			new ContextEntryProcessor().generate(contextEntryNode, contextEntry);
/ updates, set, creates contextEntryNode	, met data uit contextEntry
/s
com.mpobjects.oms.model.orderupdateexport.xml.ContextEntryProcessor.generate(org.w3c.dom.Node, com.mpobjects.oms.model.orderupdateexport.ContextEntry) line: 40	
		if (contextEntry.getContextType() != null) {
			appendTextElement(aNode, MTC_NS + CONTEXT_TYPE_TAG, contextEntry.getContextType().toString());	/ mtc:CONTEXT_TYPE

		appendTextElement(aNode, MTC_NS + CONTEXT_ID_TAG, contextEntry.getId());		/ mtc:CONTEXT_ID

		if (contextEntry.getOrganization() != null) {
			appendTextElement(aNode, MTC_NS + CONTEXT_ORGANIZATION_TAG, contextEntry.getOrganization().getCode());	/ mtc:CONTEXT_ORGANIZATION

		for (ContextEntry childEntry : contextEntry.getChildEntries()) {
			Node contextNodeEntry = appendElement(aNode, MTC_NS + CONTEXT_ENTRY_TAG);	/ mtc:CONTEXT_ENTRY
			generate(contextNodeEntry, childEntry);
/ recursive call	,
/s
com.mpobjects.oms.model.orderupdateexport.xml.ContextEntryProcessor.generate(org.w3c.dom.Node, com.mpobjects.oms.model.orderupdateexport.ContextEntry) line: 48	
		if (contextEntry.getContextType() != null) {
			appendTextElement(aNode, MTC_NS + CONTEXT_TYPE_TAG, contextEntry.getContextType().toString());
		}
		appendTextElement(aNode, MTC_NS + CONTEXT_ID_TAG, contextEntry.getId());

		if (contextEntry.getExtendedId() != null) {
			appendTextElement(aNode, MTC_NS + CONTEXT_EXTENDED_ID_TAG, contextEntry.getExtendedId());	/ mtc:CONTEXT_EXTENDED_ID

		if (contextEntry.getOrganization() != null) {
			appendTextElement(aNode, MTC_NS + CONTEXT_ORGANIZATION_TAG, contextEntry.getOrganization().getCode());

		for (ContextEntry childEntry : contextEntry.getChildEntries()) {
			Node contextNodeEntry = appendElement(aNode, MTC_NS + CONTEXT_ENTRY_TAG);
			generate(contextNodeEntry, childEntry);
		}
/ TODO we geloven het	, 
/t
com.mpobjects.oms.model.orderupdateexport.service.OrderUpdateProcessor.generateOrderUpdate(com.mpobjects.oms.model.orderupdateexport.ContextEntry, java.lang.String) line: 78	
			new ContextEntryProcessor().generate(contextEntryNode, contextEntry);
/d
/ contextEntryNode is filled with data from contextEntry 

			generateOrderSpecificMessages(contextEntry, bodyNode, new HashSet<String>());
/ TODO Deze duurt heel lang,	
			return sapXMessage;
/t
com.mpobjects.oms.model.trigger.task.ExportOrderUpdateMessage.handleCustomerOrderBasedExport(int, java.lang.String) line: 96	
			SapXMessage message = MpoBeanFactory.getBean(OrderUpdateProcessor.class).generateOrderUpdate(
					myResolver.resolveDownwardHierarchyForCustomerOrder(order, parameters),
					purposeCode);
/d
			performExport(message, purposeCode); 
/s
com.mpobjects.oms.model.trigger.task.ExportOrderUpdateMessage.performExport(com.mpobjects.util.sap.message.SapXMessage, java.lang.String) line: 144	
		props.put("PURPOSE_CODE", purposeCode);

		// Sent message to JMS
		try {
			MpoBeanFactory.getBean(JmsService.class).sendSapXMessage(sapXMessage, props);	/ MORGENOCHTEND
/s
JmsServiceImpl.sendSapXMessage(SapXMessage, Map<String,String>) line: 39	
/=
	public void sendSapXMessage(SapXMessage sapXMessage, Map<String, String> properties) throws Exception {
sapXMessage	SapXMessage  (id=35073)	
	theDocument	DocumentImpl  (id=35271)	
		children	Node[1]  (id=36249)	
			[0]	ElementImpl  (id=36250)	
				children	Node[2]  (id=36264)	
					[0]	ElementImpl  (id=36265)	
					[1]	ElementImpl  (id=35074)	
				attributes	Node[3]  (id=36267)	
		attributes	null	
	...
		if (sapXMessage != null) {
			JMSMessageVO myJMSMessageVO = new JMSMessageVO();
			myJMSMessageVO.setProperties(properties);
			myJMSMessageVO.setMessage(DomUtil.serialize(sapXMessage.getDocument()));
DomUtil.serialize(sapXMessage.getDocument())=
<?xml version="1.0" encoding="UTF-8"?>
<mtc:ORDER_UPDATE_MSG xmlns:mtc="mtcnotset" xmlns:mtccore="mtccorenotset" xmlns:mtcevent="mtceventnotset"><mtc:header><mtccore:typ>ORDER_UPDATE_MSG</m
			sendJmsMessage(myJMSMessageVO);
/s
JmsServiceImpl.sendJmsMessage(JMSMessageVO) line: 61	
		JMSConfigurationVO myConfigurationVO = new JMSConfigurationVO();
		myConfigurationVO.setDestinationType(JMSDestinationType.QUEUE);
		String myHost = ApplicationPropertyManager.getInstance().getPropertyEnv("oms", "jmsserver", "default");
default
		String myQueue = ApplicationPropertyManager.getInstance().getModuleApplicationProperty("interfacing", "jmsmessage.from.destination",
				"MPOBJECTS.FROM.SCS");
MPOBJECTS.FROM.BAKKER
		myConfigurationVO.setServerId(myHost);
		myConfigurationVO.setUsername("");
		myConfigurationVO.setPassword("");
		myConfigurationVO.setDestination(myQueue);
		myJMSMessageVO.setConfigurationVO(myConfigurationVO); 

		// send message to a JMS queue for further processing
		MpoBeanFactory.getBean(JMSMessageSendProxyInterface.class).send(myJMSMessageVO);
/s
JMSMessageSendProxy.send(JMSMessageVO) line: 16	
		String brokerId = aVO.getServerId();						/ "default"
		if (brokerId == null || brokerId.trim().length() == 0) {
			brokerId = PureJMSClient.DEFAULT_BROKER_ID;
		}
		PureJMSClient client = new PureJMSClient(brokerId.trim());
		try {
			client.setDestination(aVO.getDestination(), aVO.getDestinationType());
			client.setPriority(aVO.getPriority());
			client.setProperties(aVO.getProperties());
			client.sendMessage(aVO.getMessage());
		} finally {
			client.cleanJmsEnvironment();
		}


/ Einde LOCAL EXPORT VIA ACTION  

/ LOCAL EXPORT VIA ACTION  

/ VOORLOPIGE SAMENVATTING

/ 2 interne queues	, 
com.mpobjects.triggerrequest
com.mpobjects.messageexport

/ hier begint het	, 
    ServiceOrderServiceImpl.updateServiceOrder(ServiceOrderVO, TMSEventContext, boolean, boolean) line: 1726
                    MpoBeanFactory.getBean(ServiceOrderExportService.class).exportServiceOrder(aServiceOrder);  / zonet ,   / WAAROM NIET INJECTED
                }
                getTriggerHandler().handleUpdate(getOld(aServiceOrder), aServiceOrder);                             <-      / WAAROM NIET INJECTED
/s
    TriggerRequestProducerImpl.produce(TriggerExecutionRequest<?>) line: 25
/ to com.mpobjects.triggerrequest

/s
    TriggerRequestHandlerImpl.onMessage(Message) line: 38
/s
ServiceOrderExportServiceImpl(AbstractJmsServiceRequestHandler).sendRequest(T) line: 122
SimpleMessageProducerImpl.sendMessage(String, Serializable, Map<String,Object>) line: 32
/ to com.mpobjects.messageexport

    ServiceOrderExportServiceImpl(AbstractJmsServiceRequestHandler).onMessage(Message) line: 109            <-
ServiceOrderExportServiceImpl.exportMessage(ServiceOrderExportRequest, ServiceOrderVO, ShipmentItemVO) line: 448
OutgoingJmsServiceImpl.sendSapXMessage(String, SapXMessage, Map<String,Object>) line: 50
/ to MPOBJECTS.FROM.BAKKER

/ Einde VOORLOPIGE SAMENVATTING




/ we install nieuwe database, en gaan hetzelfde proberen als onder HAMID VOORBEELD RELEASE EXPORT OP BAKKER TEST

bakker20160207_t=# create database bakker20160224_t tablespace scs;
CREATE DATABASE
[eric@localhost bin]$ local-pg_restore.sh 
/ OK

/ seo N0054079
/ clear Actual release date, Save, geef weer actual release date (today), Save

/ stack	,
/s
	ServiceOrderExportServiceImpl.exportServiceOrder(ServiceOrderVO) line: 204	
		forcedExportServiceOrder(aServiceOrderVO, Force.NONE);
/cb
	GeneratedMethodAccessor2853.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	Method.invoke(Object, Object...) line: 606	
	AopUtils.invokeJoinpointUsingReflection(Object, Method, Object[]) line: 317	
	ReflectiveMethodInvocation.invokeJoinpoint() line: 183	
	ReflectiveMethodInvocation.proceed() line: 150	
	TransactionInterceptor$1.proceedWithInvocation() line: 96	
	TransactionInterceptor(TransactionAspectSupport).invokeWithinTransaction(Method, Class, TransactionAspectSupport$InvocationCallback) line: 260	
	TransactionInterceptor.invoke(MethodInvocation) line: 94	
	ReflectiveMethodInvocation.proceed() line: 172	
	JdkDynamicAopProxy.invoke(Object, Method, Object[]) line: 204	
	$Proxy287.exportServiceOrder(ServiceOrderVO) line: not available	
	ServiceOrderServiceImpl.updateServiceOrder(ServiceOrderVO, TMSEventContext, boolean, boolean) line: 1721	
					MpoBeanFactory.getBean(ServiceOrderExportService.class).exportServiceOrder(aServiceOrder);		<-
				}

				// reloading the oldService order as handleServiceOrderActualDateChange might change the service order
				// in recalculation which results in multiple executions of trigger
				getTriggerHandler().handleUpdate(getOld(aServiceOrder), aServiceOrder);								/ straks	,
/cb
	GeneratedMethodAccessor2508.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	Method.invoke(Object, Object...) line: 606	
	AopUtils.invokeJoinpointUsingReflection(Object, Method, Object[]) line: 317	
	ReflectiveMethodInvocation.invokeJoinpoint() line: 183	
	ReflectiveMethodInvocation.proceed() line: 150	
	TransactionInterceptor$1.proceedWithInvocation() line: 96	
	TransactionInterceptor(TransactionAspectSupport).invokeWithinTransaction(Method, Class, TransactionAspectSupport$InvocationCallback) line: 260	
	TransactionInterceptor.invoke(MethodInvocation) line: 94	
	ReflectiveMethodInvocation.proceed() line: 172	
	JdkDynamicAopProxy.invoke(Object, Method, Object[]) line: 204	
	$Proxy270.updateServiceOrder(ServiceOrderVO, TMSEventContext, boolean, boolean) line: not available	
	ServiceOrderSaveAction(ServiceOrderSaveAction).handleSave() line: 239	
	ServiceOrderSaveAction.handleSave() line: 21	
	ServiceOrderSaveAction(AbstractSaveAction).act() line: 69	
	ServiceOrderSaveAction(ServiceOrderSaveAction).call() line: 72	
	ServiceOrderSaveAction(ServiceOrderSaveAction).call() line: 1	
	SpringLegacyHelperImpl.runWithTransaction(Callable<T>) line: 29	
	GeneratedMethodAccessor2421.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	Method.invoke(Object, Object...) line: 606	
	AopUtils.invokeJoinpointUsingReflection(Object, Method, Object[]) line: 317	
	ReflectiveMethodInvocation.invokeJoinpoint() line: 183	
	ReflectiveMethodInvocation.proceed() line: 150	
	TransactionInterceptor$1.proceedWithInvocation() line: 96	
	TransactionInterceptor(TransactionAspectSupport).invokeWithinTransaction(Method, Class, TransactionAspectSupport$InvocationCallback) line: 260	
	TransactionInterceptor.invoke(MethodInvocation) line: 94	
	ReflectiveMethodInvocation.proceed() line: 172	
	JdkDynamicAopProxy.invoke(Object, Method, Object[]) line: 204	
	$Proxy95.runWithTransaction(Callable) line: not available	
	ServiceOrderSaveAction(ServiceOrderSaveAction).act() line: 67	
	ServiceOrderSaveAction(AbstractAction).act(Redirector, SourceResolver, Map, String, Parameters) line: 171	
/ debug	, 
/s
ServiceOrderExportServiceImpl.exportServiceOrder(ServiceOrderVO) line: 204	
		forcedExportServiceOrder(aServiceOrderVO, Force.NONE);
/s
ServiceOrderExportServiceImpl.forcedExportServiceOrder(ServiceOrderVO, ServiceOrderExportServiceImpl$Force) line: 268	
		} else if (aForce == Force.NONE && aServiceOrderVO.getOrderStatusVO().isReleased() || aForce == Force.RELEASE) {
			} else {
				myOrganizationList = ApplicationPropertyManager.getInstance().getModuleProperty(OMS_MODULE,
						EXPORT_SERVICE_ORDER_PROPERTY + myServiceOrderType.toLowerCase() + RELEASE_SUFFIX, "");
				myMode = ServiceOrderExportMode.ON_RELEASE;
				myPurposeCode = ApplicationPropertyManager.getInstance().getModuleProperty(OMS_MODULE,
						EXPORT_SERVICE_ORDER_PROPERTY + myServiceOrderType + RELEASE_SUFFIX + PURPOSECODE_SUFFIX, "");
				exportDate = resolveExportDate(aServiceOrderVO, ApplicationPropertyManager.getInstance().getModuleProperty(OMS_MODULE,
						EXPORT_SERVICE_ORDER_PROPERTY + myServiceOrderType + RELEASE_SUFFIX + DELAY_SUFFIX, ""));
/s
ServiceOrderExportServiceImpl.resolveExportDate(ServiceOrderVO, String) line: 635	
/c
/stack
/s
	TriggerRequestProducerImpl.produce(TriggerExecutionRequest<?>) line: 25	
aRequest	TriggerExecutionRequest  (id=27778)	
	objectMap	HashMap  (id=27866)	
	resource	null	
	triggerSystemId	50	
	type	Class (com.mpobjects.oms.model.trigger.ServiceOrderTypeTrigger) (id=8674)	

			queueRequest(aRequest);
/cb
	GeneratedMethodAccessor3308.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	Method.invoke(Object, Object...) line: 606	
	AopUtils.invokeJoinpointUsingReflection(Object, Method, Object[]) line: 317	
	ReflectiveMethodInvocation.invokeJoinpoint() line: 183	
	ReflectiveMethodInvocation.proceed() line: 150	
	TransactionInterceptor$1.proceedWithInvocation() line: 96	
	TransactionInterceptor(TransactionAspectSupport).invokeWithinTransaction(Method, Class, TransactionAspectSupport$InvocationCallback) line: 260	
	TransactionInterceptor.invoke(MethodInvocation) line: 94	
	ReflectiveMethodInvocation.proceed() line: 172	
	JdkDynamicAopProxy.invoke(Object, Method, Object[]) line: 204	
	$Proxy101.produce(TriggerExecutionRequest) line: not available	
	ServiceOrderTriggerHandlerImpl.evaluateAndExecuteRequest(ServiceOrderVO, ServiceOrderTypeTrigger) line: 42	
	ServiceOrderTriggerHandlerImpl.handleUpdate(ServiceOrderVO, ServiceOrderVO) line: 109	
	ServiceOrderServiceImpl.updateServiceOrder(ServiceOrderVO, TMSEventContext, boolean, boolean) line: 1726	
					MpoBeanFactory.getBean(ServiceOrderExportService.class).exportServiceOrder(aServiceOrder);	/ zonet	, 	/ WAAROM NIET INJECTED
				}

				// reloading the oldService order as handleServiceOrderActualDateChange might change the service order
				// in recalculation which results in multiple executions of trigger
				getTriggerHandler().handleUpdate(getOld(aServiceOrder), aServiceOrder);								<- 		/ WAAROM NIET INJECTED
/cb
	GeneratedMethodAccessor2969.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	Method.invoke(Object, Object...) line: 606	
	AopUtils.invokeJoinpointUsingReflection(Object, Method, Object[]) line: 317	
	ReflectiveMethodInvocation.invokeJoinpoint() line: 183	
	ReflectiveMethodInvocation.proceed() line: 150	
	TransactionInterceptor$1.proceedWithInvocation() line: 96	
	TransactionInterceptor(TransactionAspectSupport).invokeWithinTransaction(Method, Class, TransactionAspectSupport$InvocationCallback) line: 260	
	TransactionInterceptor.invoke(MethodInvocation) line: 94	
	ReflectiveMethodInvocation.proceed() line: 172	
	JdkDynamicAopProxy.invoke(Object, Method, Object[]) line: 204	
	$Proxy270.updateServiceOrder(ServiceOrderVO, TMSEventContext, boolean, boolean) line: not available	
	ServiceOrderSaveAction(ServiceOrderSaveAction).handleSave() line: 239	
	ServiceOrderSaveAction.handleSave() line: 21	
	ServiceOrderSaveAction(AbstractSaveAction).act() line: 69	
	ServiceOrderSaveAction(ServiceOrderSaveAction).call() line: 72	
	ServiceOrderSaveAction(ServiceOrderSaveAction).call() line: 1	
	SpringLegacyHelperImpl.runWithTransaction(Callable<T>) line: 29	
	GeneratedMethodAccessor2882.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	Method.invoke(Object, Object...) line: 606	
	AopUtils.invokeJoinpointUsingReflection(Object, Method, Object[]) line: 317	
	ReflectiveMethodInvocation.invokeJoinpoint() line: 183	
	ReflectiveMethodInvocation.proceed() line: 150	
	TransactionInterceptor$1.proceedWithInvocation() line: 96	
	TransactionInterceptor(TransactionAspectSupport).invokeWithinTransaction(Method, Class, TransactionAspectSupport$InvocationCallback) line: 260	
	TransactionInterceptor.invoke(MethodInvocation) line: 94	
	ReflectiveMethodInvocation.proceed() line: 172	
	JdkDynamicAopProxy.invoke(Object, Method, Object[]) line: 204	
	$Proxy95.runWithTransaction(Callable) line: not available	
	ServiceOrderSaveAction(ServiceOrderSaveAction).act() line: 67	
	ServiceOrderSaveAction(AbstractAction).act(Redirector, SourceResolver, Map, String, Parameters) line: 171	
/c
AbstractProducer$1.createMessage(Session) line: 38	
		jmsTemplate.send(destination, new MessageCreator() {
			@Override
			public Message createMessage(Session aSession) throws JMSException {
				return aSession.createObjectMessage(aSerializable);					<-
			}
		});
this	AbstractProducer$1  (id=28166)	
	this$0	TriggerRequestProducerImpl  (id=7628)	
		destination	ActiveMQQueue  (id=7629)	
			physicalName	"com.mpobjects.triggerrequest" (id=7651)	

/c
/ stack
/s
	TriggerRequestHandlerImpl.onMessage(Message) line: 38	
			triggerActionExecutionService.executeRequest(myRequest);
/cb
	GeneratedMethodAccessor3321.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.__invoke(Object, Object[]) line: 43	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	Method.invoke(Object, Object...) line: 606	
	AopUtils.invokeJoinpointUsingReflection(Object, Method, Object[]) line: 317	
	ReflectiveMethodInvocation.invokeJoinpoint() line: 183	
	ReflectiveMethodInvocation.proceed() line: 150	
	TransactionInterceptor$1.proceedWithInvocation() line: 96	
	TransactionInterceptor(TransactionAspectSupport).invokeWithinTransaction(Method, Class, TransactionAspectSupport$InvocationCallback) line: 260	
	TransactionInterceptor.invoke(MethodInvocation) line: 94	
	ReflectiveMethodInvocation.proceed() line: 172	
	JdkDynamicAopProxy.invoke(Object, Method, Object[]) line: 204	
	$Proxy337.onMessage(Message) line: not available	
	DefaultMessageListenerContainer(AbstractMessageListenerContainer).doInvokeListener(MessageListener, Message) line: 569	
	DefaultMessageListenerContainer(AbstractMessageListenerContainer).invokeListener(Session, Message) line: 507	
	DefaultMessageListenerContainer(AbstractMessageListenerContainer).doExecuteListener(Session, Message) line: 474	
	DefaultMessageListenerContainer(AbstractPollingMessageListenerContainer).doReceiveAndExecute(Object, Session, MessageConsumer, TransactionStatus) line: 325	
	DefaultMessageListenerContainer(AbstractPollingMessageListenerContainer).receiveAndExecute(Object, Session, MessageConsumer) line: 263	
	DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener() line: 1103	
	DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop() line: 1095	
	DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run() line: 992	
	Thread.run() line: 745	
/ debug
/s
	TriggerRequestHandlerImpl.onMessage(Message) line: 38	
aMessage	ActiveMQObjectMessage  (id=29932)	
	destination	ActiveMQQueue  (id=30140)		/ queue://com.mpobjects.triggerrequest
	content	ByteSequence  (id=30139)		 	/ TODO

			triggerActionExecutionService.executeRequest(myRequest);
/s
	TriggerActionExecutionServiceImpl.executeRequest(TriggerExecutionRequest<?>) line: 45	

		AbstractTrigger myTrigger = triggerDaoManager.getDao(aRequest.getType()).getBySystemId(aRequest.getTriggerSystemId());
myTrigger	ServiceOrderTypeTrigger_$$_javassist_103  (id=30216)					/ zien we in GUI	, de seo type trigger , 
																				/ in Configuration, Execution, Triggers, Service order type trigger	, we zien hem in de list	,
	handler	JavassistLazyInitializer  (id=30282)	
		target	ServiceOrderTypeTrigger  (id=30340)	
			name	"TPO_EXPORT" (id=30395)	
			triggerList	PersistentSet  (id=30897)	
				[0]	TriggerAction  (id=30913)	
				code	"RELEASE-TPO" (id=30917)	


		for (TriggerAction myTriggerAction : myTriggerActionList) {
myTriggerAction	TriggerAction  (id=29155)	
	code	"RELEASE-TPO" (id=29163)	
	configuration	"closeOnSuccess=false;peerType=;purposeCode=TPO;onceOnEnd=false;onceOnStart=false;onceOnRelease=false;onceForServiceOrder=false;" (id=29168)	
	description	"Release Service Order Type TPO" (id=29173)	
	executionOrder	Integer  (id=29177)	
	organization	Organization_$$_javassist_83  (id=29182)	
	parameters	null	
	performanceMonitorService	null	
	systemId	51	
	triggerTask	"EXPORT_SERVICE_ORDER" (id=29201)	

			TriggerTask myTask = triggerTaskDefinitionManager.getTask(myTriggerAction.getTriggerTask());
myTask	ExportServiceOrder  (id=29156)	
			myTask.execute(myTriggerAction.getParameters(), aRequest.getObjectMap());
/s
	ExportServiceOrder.execute(Collection<TriggerTaskParameter<?>>, Map<String,Serializable>) line: 69	
aParameters	ArrayList  (id=29483)	 
[TaskParameter[closeOnSuccess =false], TaskParameter[peerType =null], TaskParameter[purposeCode =TPO], TaskParameter[onceOnEnd =false], TaskParameter[onceOnStart =false], TaskParameter[onceOnRelease =false], TaskParameter[onceForServiceOrder =false]]
anObjectMap	HashMap  (id=29484) 
{resource=Eric Van der Velden, serviceOrderSystemId=54125}	

		if (anObjectMap.get(ServiceOrderResolver.SERVICE_ORDER_SYSTEM_ID) == null) {
/n
		} else {
			mySoSystemId = (Integer) anObjectMap.get(ServiceOrderResolver.SERVICE_ORDER_SYSTEM_ID);
54125
				myServiceOrderVO = ServiceOrderUtil.getServiceOrderFacadeLocal().getBySystemId(mySoSystemId);

			boolean closeOnSuccess = (Boolean) getParameter(CLOSE_ON_SUCCESS_PARAM).getValue();
			boolean exportOnceOnRelease = (Boolean) getParameter(ONCE_ON_RELEASE_PARAM).getValue();
			boolean exportOnceOnStart = (Boolean) getParameter(ONCE_ON_START_PARAM).getValue();
			boolean exportOnceOnEnd = (Boolean) getParameter(ONCE_ON_END_PARAM).getValue();
			boolean exportOnceForSo = (Boolean) getParameter(ONCE_FOR_SO_PARAM).getValue();

			ServiceOrderType peerType = (ServiceOrderType) getParameter(PEER_TYPE_PARAM).getValue();
null
			if (peerType == null || shipmentOrderBased) {
				interfaceTriggerEvent(myServiceOrderVO, myMode, closeOnSuccess, null);
/s
ExportServiceOrder.interfaceTriggerEvent(ServiceOrderVO, ServiceOrderExportMode, boolean, ServiceOrderType) line: 182	
		if (peerType == null) {
			handleServiceOrderExport(aServiceOrderVO, myMode, closeOnSuccess);
/s
ExportServiceOrder.handleServiceOrderExport(ServiceOrderVO, ServiceOrderExportMode, boolean) line: 175	
		final String purposeCode = (String) getParameter(PURPOSE_CODE_PARAM).getValue();
TPO
		boolean propagate = ApplicationPropertyManager.getInstance().getModuleProperty("oms", "serviceorder.export.propagate", true);
true
		MpoBeanFactory.getBean(ServiceOrderExportService.class).createInterfaceTriggerEvent(aServiceOrderVO, aMode, purposeCode, null, closeOnSuccess,
				propagate);
/s
ServiceOrderExportServiceImpl.createInterfaceTriggerEvent(ServiceOrderVO, ServiceOrderExportMode, String, Date, boolean, boolean) line: 145	
			aExportDate = new Date(new Date().getTime() + TRIGGER_EVENT_DELAY_MS);
Mon Feb 27 15:53:49 CET 2017
			ServiceOrderExportRequest request = new ServiceOrderExportRequest(aServiceOrderVO.getSystemId(), aPurposeCode, aMode);
aMode	ServiceOrderExportMode  (id=29676) ON_RELEASE
			request.setServiceOrderId(aServiceOrderVO.getServiceOrderId());
			request.setUpdateActualEnd(aUpdateActualEnd);	
			request.setPropagateUpdate(aPropagate);	
			sendRequest(request);
request	ServiceOrderExportRequest  (id=29740)	
	creationDate	Date  (id=29761)	
	mode	ServiceOrderExportMode  (id=29676)	
	propagateUpdate	false	
	purposeCode	"TPO" (id=29698)	
	reference5	null	
	requestGroup	null	
	requestId	"c690e81a-e5a6-40cf-aab2-6e9d5ce43f8d" (id=29793)	
	serviceOrder	54125	
	serviceOrderId	"N0054079" (id=29803)	
	updateActualEnd	false	
/s
ServiceOrderExportServiceImpl(AbstractJmsServiceRequestHandler).sendRequest(T) line: 122	
		sendRequest(aRequest, null);
/s
ServiceOrderExportServiceImpl(AbstractJmsServiceRequestHandler).sendRequest(T, Map<String,Object>) line: 127	
		final String dest = getJmsRequestDestination(aRequest);
this	ServiceOrderExportServiceImpl  (id=29713)	
	defaultJmsRequestDestination	"com.mpobjects.messageexport" (id=30019)	

		simpleMessageProducer.sendMessage(dest, aRequest, getJmsRequestProperties(aRequest, aHeaders));
/s
SimpleMessageProducerImpl.sendMessage(String, Serializable, Map<String,Object>) line: 32	
		jmsTemplate.send(aDestination, new MessageCreator() {									/ "com.mpobjects.messageexport" 
			@Override
			public Message createMessage(Session aSession) throws JMSException {
				Message message = aSession.createObjectMessage(aSerializable);
				JmsUtils.setProperties(message, aPropertyList);
				return message;
			}
		});
/c
/ stack														/ we gaan export document maken en  naar MPOBJECTS.FROM.BAKKER sturen	, 
												/ de export document wordt pas gemaakt nu we op de 2de interne queue .onMessage 	TODO
														/ See DEBUG GENERATE SERVICEORDER (NO CUSTOMERORDER)	/ export seo	
														/ See DEBUG CREATE CUSTOMERORDER IN XML					/ export co
																
/s
	ServiceOrderExportServiceImpl(AbstractJmsServiceRequestHandler).onMessage(Message) line: 109		
			T request = getRequest(aMessage);
			handleRequest(request, new JmsServiceRequestProperties(aMessage));
/cb
	GeneratedMethodAccessor1410.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.__invoke(Object, Object[]) line: 43	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	Method.invoke(Object, Object...) line: 606	
	AopUtils.invokeJoinpointUsingReflection(Object, Method, Object[]) line: 317	
	ReflectiveMethodInvocation.invokeJoinpoint() line: 183	
	ReflectiveMethodInvocation.proceed() line: 150	
	TransactionInterceptor$1.proceedWithInvocation() line: 96	
	TransactionInterceptor(TransactionAspectSupport).invokeWithinTransaction(Method, Class, TransactionAspectSupport$InvocationCallback) line: 260	
	TransactionInterceptor.invoke(MethodInvocation) line: 94	
	ReflectiveMethodInvocation.proceed() line: 172	
	JdkDynamicAopProxy.invoke(Object, Method, Object[]) line: 204	
	$Proxy287.onMessage(Message) line: not available	
	MessageListenerAdapter.onMessage(Message, Session) line: 339		/ Spring type	,
	DefaultMessageListenerContainer(AbstractMessageListenerContainer).doInvokeListener(SessionAwareMessageListener, Session, Message) line: 544	
	DefaultMessageListenerContainer(AbstractMessageListenerContainer).invokeListener(Session, Message) line: 504	
	DefaultMessageListenerContainer(AbstractMessageListenerContainer).doExecuteListener(Session, Message) line: 474	
	DefaultMessageListenerContainer(AbstractPollingMessageListenerContainer).doReceiveAndExecute(Object, Session, MessageConsumer, TransactionStatus) line: 325	
	DefaultMessageListenerContainer(AbstractPollingMessageListenerContainer).receiveAndExecute(Object, Session, MessageConsumer) line: 263	
	DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener() line: 1103	
	DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop() line: 1095	
	DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run() line: 992	
	Thread.run() line: 745	
/ debug	,
/s
ServiceOrderExportServiceImpl(AbstractJmsServiceRequestHandler).onMessage(Message) line: 90	
content	ByteSequence  (id=31296)																	/ TODO 
	data	(id=31309)	
	length	651	
	offset	0	
destination	ActiveMQQueue  (id=31297)					/ queue://com.mpobjects.messageexport

			handleRequest(request, new JmsServiceRequestProperties(aMessage));
/s
	ServiceOrderExportServiceImpl.handleRequest(ServiceOrderExportRequest, ServiceRequestProperties) line: 349	
		final String[] monMeta = new String[7];
		// 0: request id
		// 1: is redelivery
		// 2: service order system id
		// 3: service order id (optional)
		// 4: shipment item system id (optional)
		// 5: purpose code
		// 6: success?
		final MonitorEvent monEvent = monitoringService.startEvent("jms.export.ServiceOrder", monMeta);

		try {
			monMeta[0] = aRequest.getRequestId();
			monMeta[1] = Boolean.toString(aRequestProperties.isRedelivered());
			monMeta[2] = Integer.toString(aRequest.getServiceOrder());
			monMeta[3] = aRequest.getServiceOrderId();
			monMeta[4] = "";
			monMeta[5] = aRequest.getPurposeCode();
			monMeta[6] = Boolean.FALSE.toString();

monMeta	String[7]  (id=27984)	
	[0]	"332242cc-735d-422e-b842-5bd98fa7549c" (id=28984)	
	[1]	"false" (id=28985)	
	[2]	"54125" (id=28986)	
	[3]	"N0054079" (id=28987)	
	[4]	"" (id=26043)	
	[5]	"TPO" (id=28988)	
	[6]	"false" (id=28985)	

			} else {
				exportServiceOrder(aRequest);
/s
	/**
	 * Export a whole service order.
	 *
	ServiceOrderExportServiceImpl.exportServiceOrder(ServiceOrderExportRequest) line: 500	
		ServiceOrderVO serviceOrder = serviceOrderDao.getBySystemId(aRequest.getServiceOrder());
		...
		exportMessage(aRequest, serviceOrder, null);
/s
	ServiceOrderExportServiceImpl.exportMessage(ServiceOrderExportRequest, ServiceOrderVO, ShipmentItemVO) line: 441	

		if (!org.apache.commons.lang3.StringUtils.isBlank(aRequest.getPurposeCode())) {
			properties.put(MTCCoreNames.PURPOSE_CODE, aRequest.getPurposeCode());		/ TPO
{PURPOSE_CODE=TPO}

		// Actual XML generation
		SapXMessage message = ServiceOrderMsgProducer.produce(aServiceOrder, properties, aShipmentItem);
aShipmentItem==null
/s
/**
 * A utility class to generate service order message
 */
public class ServiceOrderMsgProducer {

	public static final String MESSAGE_TYPE = "SERVICE_ORDER_MSG";

ServiceOrderMsgProducer.produce(ServiceOrderVO, Map<String,String>, ShipmentItemVO) line: 33	
		SapXMessage mySapXMessage = new SapXMessage(MESSAGE_TYPE, true);
		try {
			new ServiceOrderMsgProcessor(aPropertyList).generate(mySapXMessage.getDocument(), aServiceOrder, aShipmentItem);
/s
ServiceOrderMsgProcessor.generate(Document, ServiceOrderVO, ShipmentItemVO) line: 72	
			aDocument.getDocumentElement().setAttributeNS("http://www.w3.org/2000/xmlns/", "xmlns:mtc",
					com.mpobjects.oms.model.shared.xml.XmlNamespaces.serviceOrder());
			aDocument.getDocumentElement().setAttributeNS("http://www.w3.org/2000/xmlns/", "xmlns:mtccore",
					com.mpobjects.oms.model.shared.xml.XmlNamespaces.core());
			aDocument.getDocumentElement().setAttribute("xmlns:" + LogisticsOrderEventProcessor.NS_ID,
					com.mpobjects.oms.model.shared.xml.XmlNamespaces.logisticsOrderEvent());
			aDocument.getDocumentElement().setAttribute("xmlns:mtcevent", com.mpobjects.oms.model.shared.xml.XmlNamespaces.logisticsOrderEvent());

			Node myBodyNode = selectSingleNode(aDocument.getDocumentElement(), "body");
			Node myServiceOrderNode = appendElement(myBodyNode, MTC_NS + SERVICE_ORDER_TAG);
			getServiceOrderProcessor().generate(myServiceOrderNode, aServiceOrderVO, aShipmentItem);
/ See DEBUG GENERATE SERVICEORDER (NO CUSTOMERORDER)	
			if (ApplicationPropertyManager.getInstance().getModuleProperty("oms", "serviceorder.export.customerorder", false)) {
				exportCustomerOrders(myBodyNode, aServiceOrderVO);
/s
ServiceOrderMsgProcessor.exportCustomerOrders(Node, ServiceOrderVO) line: 118	
		CustomerOrderProcessor proc = new CustomerOrderProcessor();
		Iterator<CustomerOrder> it = MpoBeanFactory.getBean(CustomerOrderDAO.class).findCustomerOrders(aServiceOrderVO).iterator();
/ WAAROM NIET INJECTED
		if (!it.hasNext() && ApplicationPropertyManager.getInstance().getModuleProperty("oms", "serviceorder.export.customerorder.container", false)) {
			it = MpoBeanFactory.getBean(CustomerOrderDAO.class).findCustomerOrdersContainers(aServiceOrderVO).iterator();
		}
		while (it.hasNext()) {
			try {
				CustomerOrder custOrd = it.next();
				it.remove();
				proc.generate(appendElement(aBaseNode, MTC_NS + ServiceOrderNames.CUSTOMER_ORDER), custOrd, Collections.<String, String> emptyMap());
/s
CustomerOrderProcessor.generate(Node, CustomerOrder, Map<String,String>) line: 69							<-
/ See DEBUG CREATE CUSTOMERORDER IN XML
/t
ServiceOrderMsgProducer.produce(ServiceOrderVO, Map<String,String>, ShipmentItemVO) line: 37	
			new ServiceOrderMsgProcessor(aPropertyList).generate(mySapXMessage.getDocument(), aServiceOrder, aShipmentItem);
/d
		return mySapXMessage;
/t
ServiceOrderExportServiceImpl.exportMessage(ServiceOrderExportRequest, ServiceOrderVO, ShipmentItemVO) line: 448	
		// Actual XML generation
		SapXMessage message = ServiceOrderMsgProducer.produce(aServiceOrder, properties, aShipmentItem);
/d
		message.getMessageHeader().setCreationDate(new Date());
		message.getMessageHeader().setMessageIdentifier(UUID.randomUUID().toString());
		message.getMessageHeader().setSequenceNumber(0);
		message.getMessageHeader().setSendingApplication("SCS");
		message.getMessageHeader().setReceivingApplication("SCSCLIENT");
		message.getMessageHeader().setAcknowledgementMode("NE");
		message.getMessageHeader().setMode(MessageProcessingMode.DEBUG_MESSAGE_PROCESSING_MODE_INDICATOR);
		message.getMessageHeader().setVersion("1.0");
		if (!org.apache.commons.lang3.StringUtils.isBlank(aRequest.getPurposeCode())) {
			message.getMessageHeader().addUserDefinedProperty(MTCCoreNames.PURPOSE_CODE, aRequest.getPurposeCode());

		if (ApplicationPropertyManager.getInstance().getModuleOrganizationProperty(aServiceOrder.getOrganization(), "oms",
				"service.order.export.generate.xml.document.id", false)) {
/n
		// Set the reference 5 as a property. This will be exported as JMS Property later.
		if (!org.apache.commons.lang3.StringUtils.isBlank(aRequest.getReference5())) {
/n
		message.getMessageHeader().addUserDefinedProperty("ORGANIZATION", aServiceOrder.getOrganization().getCode());
		if (aServiceOrder.getOrganization().getEdiIdentifier() != null) {
/n
		Map<String, Object> myProperties = new HashMap<String, Object>(message.getMessageHeader().getProperties());
		myProperties.put("type", ServiceOrderMsgProducer.MESSAGE_TYPE);
		outgoingJmsService.sendSapXMessage(message, myProperties);
SapXMessage (messageHeader:SapXMessageHeader (Identifier:7d9d0f18-4f37-4deb-8b82-c62911485d32, type:SERVICE_ORDER_MSG))
{PURPOSE_CODE=TPO, ORGANIZATION=BAKKER, type=SERVICE_ORDER_MSG}
/s
OutgoingJmsServiceImpl.sendSapXMessage(SapXMessage, Map<String,Object>) line: 45	
		sendSapXMessage(null, aSapXMessage, aProperties);
/s
OutgoingJmsServiceImpl.sendSapXMessage(String, SapXMessage, Map<String,Object>) line: 50	
		if (StringUtils.isBlank(aDestination)) {
			aDestination = getDestination(aSapXMessage, aProperties);
/s
OutgoingJmsServiceImpl.getDestination(SapXMessage, Map<String,Object>) line: 98	
		return defaultDestination; 													/ MPOBJECTS.FROM.BAKKER
/t
OutgoingJmsServiceImpl.sendSapXMessage(String, SapXMessage, Map<String,Object>) line: 53	
			aDestination = getDestination(aSapXMessage, aProperties);
/d
		jmsTemplate.send(aDestination, new MessageCreator() {						/ MPOBJECTS.FROM.BAKKER
			@Override
			public Message createMessage(Session aSession) throws JMSException {
				TextMessage msg;
				try {
					msg = aSession.createTextMessage(DomUtil.serialize(aSapXMessage.getDocument()));
/c
/ Carcon, doet er niet toe	,
Thread [org.springframework.jms.listener.DefaultMessageListenerContainer#2-1] (Suspended (breakpoint at line 90 in AbstractJmsServiceRequestHandler))	
	CarconFetchRequestServiceImpl(AbstractJmsServiceRequestHandler).onMessage(Message) line: 90	
	GeneratedMethodAccessor1410.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.__invoke(Object, Object[]) line: 43	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	Method.invoke(Object, Object...) line: 606	
	AopUtils.invokeJoinpointUsingReflection(Object, Method, Object[]) line: 317	
	ReflectiveMethodInvocation.invokeJoinpoint() line: 183	
	ReflectiveMethodInvocation.proceed() line: 150	
	TransactionInterceptor$1.proceedWithInvocation() line: 96	
	TransactionInterceptor(TransactionAspectSupport).invokeWithinTransaction(Method, Class, TransactionAspectSupport$InvocationCallback) line: 260	
	TransactionInterceptor.invoke(MethodInvocation) line: 94	
	ReflectiveMethodInvocation.proceed() line: 172	
	JdkDynamicAopProxy.invoke(Object, Method, Object[]) line: 204	
	$Proxy390.onMessage(Message) line: not available	
	MessageListenerAdapter.onMessage(Message, Session) line: 339	
	DefaultMessageListenerContainer(AbstractMessageListenerContainer).doInvokeListener(SessionAwareMessageListener, Session, Message) line: 544	
	DefaultMessageListenerContainer(AbstractMessageListenerContainer).invokeListener(Session, Message) line: 504	
	DefaultMessageListenerContainer(AbstractMessageListenerContainer).doExecuteListener(Session, Message) line: 474	
	DefaultMessageListenerContainer(AbstractPollingMessageListenerContainer).doReceiveAndExecute(Object, Session, MessageConsumer, TransactionStatus) line: 325	
	DefaultMessageListenerContainer(AbstractPollingMessageListenerContainer).receiveAndExecute(Object, Session, MessageConsumer) line: 263	
	DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener() line: 1103	
	DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop() line: 1095	
	DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run() line: 992	
	Thread.run() line: 745	

/ 7	. 

/ DEBUG CREATE CUSTOMERORDER IN XML

$ xmllint --format ~/tmp/copy_study/msg4.txt
  <mtc:body>
    <mtc:CUSTOMER_ORDER>
      <mtccore:PROCESSING_DETAILS>
        <mtccore:PURPOSE_CODE>00</mtccore:PURPOSE_CODE>
      </mtccore:PROCESSING_DETAILS>
      <mtccore:CUSTOMER_ORDER_BODY>
        <mtccore:CUSTOMER_ORDER_ID>CO000000052</mtccore:CUSTOMER_ORDER_ID>
        <mtccore:ORGANIZATION_ID>BAKKER</mtccore:ORGANIZATION_ID>
        <mtccore:CREATION_DATE>2017-02-17T15:50:53.531+01:00</mtccore:CREATION_DATE>
        <mtccore:CUSTOMER_ORDER_TYPE>CIB</mtccore:CUSTOMER_ORDER_TYPE>
        <mtccore:BUYER_ORDER_NUMBER>DUMMY</mtccore:BUYER_ORDER_NUMBER>
        <mtccore:SELLER_ORDER_NUMBER/>

/ Intermezzo

[eric@localhost workspace]$ less scs/trunk/schema/src/main/schema/MTC/MTCCore/V1/MTCCore.xsd

        <xs:complexType name="CUSTOMER_ORDER">
                <xs:sequence>
                        <xs:element name="PROCESSING_DETAILS" type="PROCESSING_DETAILS"></xs:element>
                        <xs:element name="CUSTOMER_ORDER_BODY" type="CUSTOMER_ORDER_BODY"></xs:element>
                        <xs:element name="CUSTOMER_ORDER_LINE" type="CUSTOMER_ORDER_LINE" maxOccurs="unbounded"
                                minOccurs="0"></xs:element>
                        <xs:element name="ATTACHMENTS" type="ATTACHMENTS" maxOccurs="1" minOccurs="0" />
                </xs:sequence>
        </xs:complexType>
       <xs:complexType name="PROCESSING_DETAILS">
                <xs:annotation>
                        <xs:documentation> Instructions on how to process the entity: create/change/delete
                        </xs:documentation>
                </xs:annotation>
                <xs:sequence>
                        <xs:element name="PURPOSE_CODE" default="00" type="PURPOSE_CODE">
                                <xs:annotation>
                                        <xs:documentation> The specific meaning of the purpose code is implementation speci
fic.
                                                Originally the codes were used as follows: 00 - Original, 01 - Cancel, 05 -
 Replace, Custom
                                                codes have 51 or higher.
                                        </xs:documentation>
                                </xs:annotation>
                        </xs:element>
                        <xs:element name="ACTION" type="PROCESSING_ACTION" maxOccurs="unbounded" minOccurs="0">
                                <xs:annotation>
                                        <xs:documentation>A processing action to execute. For this to work the PURPOSE_CODE
 must be
                                                "ACTIONS".
                                        </xs:documentation>
                                </xs:annotation>
                        </xs:element>
                        <xs:element name="REQUESTED_BY" type="RESOURCE" minOccurs="0" />
                        <xs:element name="PRINTER_INFO" type="PRINTER_INFO" minOccurs="0" />
                        <xs:element name="CARRIER_LABEL" type="CARRIER_LABEL" minOccurs="0" />
                        <xs:element name="REQUESTED_ID" type="xs:string" minOccurs="0" />
                        <xs:element name="REQUEST_REFERENCE" type="REFERENCE_FIELD" minOccurs="0" maxOccurs="unbounded" />
                </xs:sequence>
        </xs:complexType>

        <xs:complexType name="LOGISTICS_ORDER_BODY">
                <xs:annotation>
                        <xs:documentation>This type represents details which are shared by shipment orders, sevice
                                actions, consignments, service orders</xs:documentation>
                </xs:annotation>
                <xs:sequence>
                        <xs:element name="FROM_LOCATION" type="LOCATION" minOccurs="0" />
                        <xs:element name="TO_LOCATION" type="LOCATION" minOccurs="0" />
                        <xs:element name="DATE_SET" type="DATE_SET" minOccurs="0" />
                        <xs:element name="TOTAL_WEIGHT" type="MEASUREMENT" nillable="true" minOccurs="0" />
                        <xs:element name="TOTAL_VOLUME" type="MEASUREMENT" nillable="true" minOccurs="0" />
                        <xs:element name="TOTAL_LDM" type="MEASUREMENT" nillable="true" minOccurs="0" />
                        <xs:element name="TOTAL_VALUE" type="AMOUNT" nillable="true" minOccurs="0" />
                        <xs:element name="TOTAL_COST" type="AMOUNT" nillable="true" minOccurs="0" />
                        <xs:element name="EXECUTION_STATUS" type="EXECUTION_STATUS" minOccurs="0" />
                        <xs:element name="HOLD_STATUS" type="HOLD_STATUS" minOccurs="0" />
                </xs:sequence>
        </xs:complexType>
        <xs:complexType name="HOLD_STATUS">
                <xs:annotation>
                        <xs:documentation> Represent the status of a logistics order wrt to execution: open, planned,
                                started/shipped, ended/delivered, closed, cancelled
                        </xs:documentation>
                </xs:annotation>
                <xs:sequence>
                        <xs:element name="INTERNAL_STATUS_CODE" type="xs:string" />
                        <xs:element name="EXTERNAL_STATUS_CODE" type="xs:string" minOccurs="0" />
                        <xs:element name="REMARKS" type="xs:string" minOccurs="0" />
                </xs:sequence>
        </xs:complexType>

		aParentNode.appendChild(myElement);

/ Einde Intermezzo

/s
ServiceOrderMsgProcessor.exportCustomerOrders(Node, ServiceOrderVO) line: 118	
/=
	protected void exportCustomerOrders(Node aBaseNode, ServiceOrderVO aServiceOrderVO) {
aBaseNode=[mtc:body: null]
		CustomerOrderProcessor proc = new CustomerOrderProcessor();
		Iterator<CustomerOrder> it = MpoBeanFactory.getBean(CustomerOrderDAO.class).findCustomerOrders(aServiceOrderVO).iterator();
		if (!it.hasNext() && ApplicationPropertyManager.getInstance().getModuleProperty("oms", "serviceorder.export.customerorder.container", false)) {
			it = MpoBeanFactory.getBean(CustomerOrderDAO.class).findCustomerOrdersContainers(aServiceOrderVO).iterator();
		}
		while (it.hasNext()) {
			try {
				CustomerOrder custOrd = it.next();
				it.remove();
				proc.generate(appendElement(aBaseNode, MTC_NS + ServiceOrderNames.CUSTOMER_ORDER), custOrd, Collections.<String, String> emptyMap());
proc	CustomerOrderProcessor  (id=31568)	
aBaseNode=[mtc:body: null]
custOrd=CO000000052

/ intermezzo

proc	CustomerOrderProcessor  (id=32875)	
/ appendElement(aBaseNode, CORE_NS + MTCCoreNames.PROCESSING_DETAILS), purCod)=[mtc:CUSTOMER_ORDER: null] beneden, en is appended to aBaseNode=[mtc:body: null]
/ hier in ServiceOrderMsgProcessor.exportCustomerOrders is aBaseNode=[mtc:body: null]
/ in CustomerOrderProcessor.generate is aBaseNode=[mtc:CUSTOMER_ORDER: null]	, 

/ Einde intermezzo

/s
	/**
	 * Creates a new child element and adds the child element to the parent node.
	 *
XMLUtil.appendElement(Node, String) line: 156	
/=
	public static Element appendElement(Node aParentNode, String aChildNodeName) {
aParentNode	ElementImpl  (id=31585)	/ [mtc:body: null]
aChildNodeName	"mtc:CUSTOMER_ORDER" (id=32882)	

		String[] mySplit = aChildNodeName.split(":");
[mtc, CUSTOMER_ORDER]
		Element myElement = null;
		if (mySplit.length == 2) {
			String myNameSpaceURI = null;
			if (!myEmpty) {
				myNameSpaceURI = myDocument.lookupNamespaceURI(mySplit[0]); / http://system.mp-objects.com/schemas/MTC/ServiceOrder/V1/ServiceOrder.xsd
			}
			if (myNameSpaceURI != null) {
				myElement = myDocument.createElementNS(myNameSpaceURI, aChildNodeName);
[mtc:CUSTOMER_ORDER: null]
		aParentNode.appendChild(myElement);
aParentNode	ElementImpl  (id=31585)	 	/ [mtc:body: null] 
myElement	ElementNSImpl  (id=33002)/ [mtc:CUSTOMER_ORDER: null]	
		return myElement;
/t
ServiceOrderMsgProcessor.exportCustomerOrders(Node, ServiceOrderVO) line: 118	
				proc.generate(appendElement(aBaseNode, MTC_NS + ServiceOrderNames.CUSTOMER_ORDER), custOrd, Collections.<String, String> emptyMap());
proc	CustomerOrderProcessor  (id=32875)	
aBaseNode=[mtc:body: null]
/ XMLUtil.appendElement  returns een [mtc:CUSTOMER_ORDER: null]	, 
/pd
/s
CustomerOrderProcessor.generate(Node, CustomerOrder, Map<String,String>) line: 69	
/=
	public void generate(Node aBaseNode, CustomerOrder aCustomerOrder, Map<String, String> aProperties) throws XMLProcessorException {
aBaseNode	ElementNSImpl  (id=33002)		/ [mtc:CUSTOMER_ORDER: null]
		PurposeCodeProcessor.generate(appendElement(aBaseNode, CORE_NS + MTCCoreNames.PROCESSING_DETAILS), purCod);
/s
XMLUtil.appendElement(Node, String) line: 156	
/=
	public static Element appendElement(Node aParentNode, String aChildNodeName) {
aParentNode=[mtc:CUSTOMER_ORDER: null]
aChildNodeName	"mtccore:PROCESSING_DETAILS" (id=31685)	

		String[] mySplit = aChildNodeName.split(":");
		Element myElement = null;
		if (mySplit.length == 2) {
			String myNameSpaceURI = null;
			if (!myEmpty) {
				myNameSpaceURI = myDocument.lookupNamespaceURI(mySplit[0]); / http://system.mp-objects.com/schemas/MTC/MTCCore/V1/MTCCore.xsd
			}
			if (myNameSpaceURI != null) {
				myElement = myDocument.createElementNS(myNameSpaceURI, aChildNodeName);	/ [mtccore:PROCESSING_DETAILS: null]
		aParentNode.appendChild(myElement);
aParentNode	ElementNSImpl  (id=33002) [mtc:CUSTOMER_ORDER: null]	
myElement	ElementNSImpl  (id=33162) [mtccore:PROCESSING_DETAILS: null]	
		return myElement;
/t
CustomerOrderProcessor.generate(Node, CustomerOrder, Map<String,String>) line: 77	
		PurposeCodeProcessor.generate(appendElement(aBaseNode, CORE_NS + MTCCoreNames.PROCESSING_DETAILS), purCod);
/pd
/s
PurposeCodeProcessor.generate(Node, String) line: 36	
/=
	public static void generate(Node aNode, String aCode) {
aNode=[mtccore:PROCESSING_DETAILS: null]
aCode="00"
		appendTextElement(aNode, CORE_NS + PURPOSE_CODE_TAG, aCode);
/s
XMLUtil.appendTextElement(Node, String, String) line: 194	
/=
	public static Element appendTextElement(Node aParentNode, String aChildNodeName, String aValue) {
aParentNode	ElementNSImpl  (id=33162)		/ [mtccore:PROCESSING_DETAILS: null]
aChildNodeName	"mtccore:PURPOSE_CODE" (id=32112)	
aValue	"00" (id=31603)	

		Element myElement = appendElement(aParentNode, aChildNodeName);
/s
XMLUtil.appendElement(Node, String) line: 156	
/=
	public static Element appendElement(Node aParentNode, String aChildNodeName) {
aParentNode	ElementNSImpl  (id=33162)				[mtccore:PROCESSING_DETAILS: null]
aChildNodeName	"mtccore:PURPOSE_CODE" (id=32112)	

		String[] mySplit = aChildNodeName.split(":");
[mtccore, PURPOSE_CODE]
		Element myElement = null;
		if (mySplit.length == 2) {
			String myNameSpaceURI = null;
			if (!myEmpty) {
				myNameSpaceURI = myDocument.lookupNamespaceURI(mySplit[0]);	/ http://system.mp-objects.com/schemas/MTC/MTCCore/V1/MTCCore.xsd
			}
			if (myNameSpaceURI != null) {
				myElement = myDocument.createElementNS(myNameSpaceURI, aChildNodeName);	/ [mtccore:PURPOSE_CODE: null]
		aParentNode.appendChild(myElement);
		return myElement;
aParentNode	ElementNSImpl  (id=33162)				[mtccore:PROCESSING_DETAILS: null]
myElement [mtccore:PURPOSE_CODE: null]
/t
XMLUtil.appendTextElement(Node, String, String) line: 195	
		Element myElement = appendElement(aParentNode, aChildNodeName);
/d
		myElement.setTextContent(removeIllegalXmlChars(aValue));
		return myElement;
/t
PurposeCodeProcessor.generate(Node, String) line: 36	
		appendTextElement(aNode, CORE_NS + PURPOSE_CODE_TAG, aCode);
/d
/t
CustomerOrderProcessor.generate(Node, CustomerOrder, Map<String,String>) line: 78	
		PurposeCodeProcessor.generate(appendElement(aBaseNode, CORE_NS + MTCCoreNames.PROCESSING_DETAILS), purCod);
/d
		customerOrderBodyProcessor.generate(appendElement(aBaseNode, CORE_NS + MTCCoreNames.CUSTOMER_ORDER_BODY), aCustomerOrder);
aBaseNode=[mtc:CUSTOMER_ORDER: null]	
aCustomerOrder=CO000000052
/s
XMLUtil.appendElement(Node, String) line: 156	
/=
	public static Element appendElement(Node aParentNode, String aChildNodeName) {
aParentNode	ElementNSImpl  (id=27842)	 [mtc:CUSTOMER_ORDER: null]
aChildNodeName	"mtccore:CUSTOMER_ORDER_BODY" (id=28171)	

		if (mySplit.length == 2) { / [mtccore, CUSTOMER_ORDER_BODY]
			String myNameSpaceURI = null;
			if (!myEmpty) {
				myNameSpaceURI = myDocument.lookupNamespaceURI(mySplit[0]);
			}
			if (myNameSpaceURI != null) {
				myElement = myDocument.createElementNS(myNameSpaceURI, aChildNodeName); / [mtccore:CUSTOMER_ORDER_BODY: null]
		aParentNode.appendChild(myElement);
		return myElement;
/t
CustomerOrderProcessor.generate(Node, CustomerOrder, Map<String,String>) line: 78	
		customerOrderBodyProcessor.generate(appendElement(aBaseNode, CORE_NS + MTCCoreNames.CUSTOMER_ORDER_BODY), aCustomerOrder);
/s
CustomerOrderBodyProcessor.generate(Node, CustomerOrder) line: 84	
/=
	public void generate(Node aBaseNode, CustomerOrder aCustomerOrder) throws XMLProcessorException {
aBaseNode=[mtccore:CUSTOMER_ORDER_BODY: null]
aCustomerOrder=CO000000052

		appendTextElement(aBaseNode, CORE_NS + MTCCoreNames.CUSTOMER_ORDER_ID, aCustomerOrder.getCustomerOrderNumber());
/s
XMLUtil.appendTextElement(Node, String, String) line: 194	
/=
	public static Element appendTextElement(Node aParentNode, String aChildNodeName, String aValue) {
aParentNode	ElementNSImpl  (id=28341)	 [mtccore:CUSTOMER_ORDER_BODY: null]
aChildNodeName	"mtccore:CUSTOMER_ORDER_ID" (id=28419)	
aValue	"CO000000052" (id=28420)	

		Element myElement = appendElement(aParentNode, aChildNodeName);
/s
XMLUtil.appendElement(Node, String) line: 156	
		String[] mySplit = aChildNodeName.split(":"); / [mtccore, CUSTOMER_ORDER_ID]
		Element myElement = null;
		if (mySplit.length == 2) {
			String myNameSpaceURI = null;
			if (!myEmpty) {
				myNameSpaceURI = myDocument.lookupNamespaceURI(mySplit[0]); / http://system.mp-objects.com/schemas/MTC/MTCCore/V1/MTCCore.xsd
			}
			if (myNameSpaceURI != null) {
				myElement = myDocument.createElementNS(myNameSpaceURI, aChildNodeName);	/ [mtccore:CUSTOMER_ORDER_ID: null]
		aParentNode.appendChild(myElement); / [mtccore:CUSTOMER_ORDER_BODY: null].add [mtccore:CUSTOMER_ORDER_ID: null]
		return myElement;
/t
XMLUtil.appendTextElement(Node, String, String) line: 195	
		Element myElement = appendElement(aParentNode, aChildNodeName);	/ [mtccore:CUSTOMER_ORDER_ID: null]
/d
		myElement.setTextContent(removeIllegalXmlChars(aValue));
		return myElement;
/t
CustomerOrderBodyProcessor.generate(Node, CustomerOrder) line: 88	
		appendTextElement(aBaseNode, CORE_NS + MTCCoreNames.CUSTOMER_ORDER_ID, aCustomerOrder.getCustomerOrderNumber());


/ Einde DEBUG CREATE CUSTOMERORDER IN XML

/ DEBUG GENERATE SERVICEORDER (NO CUSTOMERORDER)	

/ we zijn de hele tijd een Document aan het maken	, dat serialized de XML gaat worden	, 

/stack
/s
	ServiceOrderMsgProcessor.generate(Document, ServiceOrderVO, ShipmentItemVO) line: 69	
			getServiceOrderProcessor().generate(myServiceOrderNode, aServiceOrderVO, aShipmentItem);							<- Nu	,

			if (ApplicationPropertyManager.getInstance().getModuleProperty("oms", "serviceorder.export.customerorder", false)) {
				exportCustomerOrders(myBodyNode, aServiceOrderVO);													<- Later, See DEBUG CREATE CUSTOMERORDER IN XML 

	ServiceOrderMsgProducer.produce(ServiceOrderVO, Map<String,String>, ShipmentItemVO) line: 36	
			new ServiceOrderMsgProcessor(aPropertyList).generate(mySapXMessage.getDocument(), aServiceOrder, aShipmentItem);
/cb
	ServiceOrderExportServiceImpl.exportMessage(ServiceOrderExportRequest, ServiceOrderVO, ShipmentItemVO) line: 447	
		// Actual XML generation
		SapXMessage message = ServiceOrderMsgProducer.produce(aServiceOrder, properties, aShipmentItem);
/cb
	ServiceOrderExportServiceImpl.exportServiceOrder(ServiceOrderExportRequest) line: 500	
		exportMessage(aRequest, serviceOrder, null);
/cb
	ServiceOrderExportServiceImpl.handleRequest(ServiceOrderExportRequest, ServiceRequestProperties) line: 349	
			} else {
				exportServiceOrder(aRequest);
/cb
	ServiceOrderExportServiceImpl.handleRequest(ServiceRequest, ServiceRequestProperties) line: 1	
	ServiceOrderExportServiceImpl(AbstractJmsServiceRequestHandler).onMessage(Message) line: 109	
			handleRequest(request, new JmsServiceRequestProperties(aMessage));
/cb
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 57	
	DelegatingMethodAccessorImpl.__invoke(Object, Object[]) line: 43	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	Method.invoke(Object, Object...) line: 606	
	AopUtils.invokeJoinpointUsingReflection(Object, Method, Object[]) line: 317	
	ReflectiveMethodInvocation.invokeJoinpoint() line: 183	
	ReflectiveMethodInvocation.proceed() line: 150	
	TransactionInterceptor$1.proceedWithInvocation() line: 96	
	TransactionInterceptor(TransactionAspectSupport).invokeWithinTransaction(Method, Class, TransactionAspectSupport$InvocationCallback) line: 260	
	TransactionInterceptor.invoke(MethodInvocation) line: 94	
	ReflectiveMethodInvocation.proceed() line: 172	
	JdkDynamicAopProxy.invoke(Object, Method, Object[]) line: 204	
	$Proxy287.onMessage(Message) line: not available	
	MessageListenerAdapter.onMessage(Message, Session) line: 339	
	DefaultMessageListenerContainer(AbstractMessageListenerContainer).doInvokeListener(SessionAwareMessageListener, Session, Message) line: 544	
	DefaultMessageListenerContainer(AbstractMessageListenerContainer).invokeListener(Session, Message) line: 504	
	DefaultMessageListenerContainer(AbstractMessageListenerContainer).doExecuteListener(Session, Message) line: 474	
	DefaultMessageListenerContainer(AbstractPollingMessageListenerContainer).doReceiveAndExecute(Object, Session, MessageConsumer, TransactionStatus) line: 325	
	DefaultMessageListenerContainer(AbstractPollingMessageListenerContainer).receiveAndExecute(Object, Session, MessageConsumer) line: 263	
	DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener() line: 1103	
	DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop() line: 1095	
	DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run() line: 992	
	Thread.run() line: 745	
/ debug	, 
/s
ServiceOrderMsgProcessor.generate(Document, ServiceOrderVO, ShipmentItemVO) line: 69	
			aDocument.getDocumentElement().setAttributeNS("http://www.w3.org/2000/xmlns/", "xmlns:mtc",
					com.mpobjects.oms.model.shared.xml.XmlNamespaces.serviceOrder());
			aDocument.getDocumentElement().setAttributeNS("http://www.w3.org/2000/xmlns/", "xmlns:mtccore",
					com.mpobjects.oms.model.shared.xml.XmlNamespaces.core());
			aDocument.getDocumentElement().setAttribute("xmlns:" + LogisticsOrderEventProcessor.NS_ID,
					com.mpobjects.oms.model.shared.xml.XmlNamespaces.logisticsOrderEvent());
			aDocument.getDocumentElement().setAttribute("xmlns:mtcevent", com.mpobjects.oms.model.shared.xml.XmlNamespaces.logisticsOrderEvent());

			Node myBodyNode = selectSingleNode(aDocument.getDocumentElement(), "body");
			Node myServiceOrderNode = appendElement(myBodyNode, MTC_NS + SERVICE_ORDER_TAG);

/ Intermezzo

<?xml version="1.0"?>			/ TODO
<mtc:SERVICE_ORDER_MSG xmlns:mtc="http://system.mp-objects.com/schemas/MTC/ServiceOrder/V1/ServiceOrder.xsd" xmlns:mtccore="http://system.mp-objects.com/schemas/MTC/MTCCore/V1/MTCCore.xsd" xmlns:mtcevent="http://system.mp-objects.com/schemas/MTC/LogisticsOrder/V1/LogisticsOrderEvent.xsd">
  <mtc:header>														/ TODO
    <mtccore:typ>SERVICE_ORDER_MSG</mtccore:typ>
    <mtccore:mid>632484a6-fa9f-4515-88c7-ac3cc4b397c2</mtccore:mid>
    <mtccore:ver>1.0</mtccore:ver>
    <mtccore:mode>D</mtccore:mode>
    <mtccore:ack>NE</mtccore:ack>
    <mtccore:cre>2017-02-27T16:15:18.338+01:00</mtccore:cre>
    <mtccore:sap>SCS</mtccore:sap>
    <mtccore:rap>SCSCLIENT</mtccore:rap>
    <mtccore:seq>0</mtccore:seq>
    <mtccore:org/>
  </mtc:header>
  <mtc:body>
    <mtc:SERVICE_ORDER>

/ Einde Intermezzo

			getServiceOrderProcessor().generate(myServiceOrderNode, aServiceOrderVO, aShipmentItem);
/s
BakkerServiceOrderProcessor(ServiceOrderProcessorImpl).generate(Node, ServiceOrderVO, ShipmentItemVO) line: 110	
			// PROCESSING DETAILS
			Node myProcDetailsNode = appendElement(aNode, MTC_NS + PROCESSING_DETAILS_TAG);	

/ Intermezzo

/ dit gaan we eerst maken	,

    <mtc:SERVICE_ORDER>
      <mtc:PROCESSING_DETAILS>
        <mtccore:PURPOSE_CODE>TPO</mtccore:PURPOSE_CODE>
        <mtccore:REQUESTED_BY>
          <mtccore:USER_ID>all-admin</mtccore:USER_ID>
          <mtccore:FULL_NAME>All sites administrator</mtccore:FULL_NAME>
          <mtccore:ROLE>10100</mtccore:ROLE>
          <mtccore:ACTIVE_ORGANIZATION_ID>5000</mtccore:ACTIVE_ORGANIZATION_ID>
          <mtccore:RESOURCE_REFERENCE>
            <mtccore:VALUE>true</mtccore:VALUE>
            <mtccore:QUALIFIER>never.expires</mtccore:QUALIFIER>
          </mtccore:RESOURCE_REFERENCE>
          <mtccore:RESOURCE_REFERENCE>
            <mtccore:VALUE>en</mtccore:VALUE>
            <mtccore:QUALIFIER>user.locale.code</mtccore:QUALIFIER>
          </mtccore:RESOURCE_REFERENCE>
          <mtccore:RESOURCE_REFERENCE>
            <mtccore:VALUE>true</mtccore:VALUE>
            <mtccore:QUALIFIER>interface.only</mtccore:QUALIFIER>
          </mtccore:RESOURCE_REFERENCE>
        </mtccore:REQUESTED_BY>
      </mtc:PROCESSING_DETAILS>

/ we hebben 	, 
XMLUnit.class
	public static Element appendElement(Node aParentNode, String aChildNodeName) {
/ creates bijv <mtc:PROCESSING_DETAILS>

	public static Element appendTextElement(Node aParentNode, String aChildNodeName, String aValue) {	 heeft extra arg: de value	,
/ creates <mtccore:PURPOSE_CODE>TPO</mtccore:PURPOSE_CODE>
/ first calls appendElement,	 then setTextContent	,

/ we hebben ...Processor.generate en .process methods	, voor export en import	, 

/ we komen bijv in 	,
/ stack	,
	ServiceOrderMsgProcessor.generate(Document, ServiceOrderVO, ShipmentItemVO) line: 69	
/s
		BakkerServiceOrderProcessor(ServiceOrderProcessorImpl).generate(Node, ServiceOrderVO, ShipmentItemVO) line: 122	
/s
			PurposeCodeProcessor.generate(myProcDetailsNode, myPurposeCodeVO);
			ResourceProcessor.generate(Node, Resource) line: 65	

/ De ResourceProcessor.generate methods call alleen multiple appendTextElement	, 
/ maar BakkerServiceOrderProcessor(ServiceOrderProcessorImpl).generate call een appendElement(aNode, MTC_NS + PROCESSING_DETAILS_TAG) en PurposeCodeProcessor.generate en new ResourceProcessor().generate	, 



/ Einde Intermezzo

/s
XMLUtil.appendElement(Node, String) line: 171	
		String[] mySplit = aChildNodeName.split(":"); / [mtc, PROCESSING_DETAILS]
		Element myElement = null;
		if (mySplit.length == 2) {
			String myNameSpaceURI = null;
			if (!myEmpty) {
				myNameSpaceURI = myDocument.lookupNamespaceURI(mySplit[0]);	/ http://system.mp-objects.com/schemas/MTC/ServiceOrder/V1/ServiceOrder.xsd
			}
			if (myNameSpaceURI != null) {
				myElement = myDocument.createElementNS(myNameSpaceURI, aChildNodeName);	/ [mtc:PROCESSING_DETAILS: null]
		aParentNode.appendChild(myElement);
		return myElement;
/t
BakkerServiceOrderProcessor(ServiceOrderProcessorImpl).generate(Node, ServiceOrderVO, ShipmentItemVO) line: 112	
			// PROCESSING DETAILS
			Node myProcDetailsNode = appendElement(aNode, MTC_NS + PROCESSING_DETAILS_TAG);
/d																						
			PurposeCodeVO myPurposeCodeVO = new PurposeCodeVO();
			String myCode = getProperty(PurposeCodeProcessor.PURPOSE_CODE_TAG);		
/s
BakkerServiceOrderProcessor(XMLProcessor).getProperty(String) line: 127	
		String myValue = propertyList.get(aProperty);
null
		if (myValue == null && getParent() != null) {
			myValue = getParent().getProperty(aProperty);
/s
ServiceOrderMsgProcessor(XMLProcessor).getProperty(String) line: 125	
this	ServiceOrderMsgProcessor  (id=27030)	
	propertyList	HashMap  (id=29049)				/ {PURPOSE_CODE=TPO}

		String myValue = propertyList.get(aProperty);			/ "TPO"
		return myValue;
/t
BakkerServiceOrderProcessor(ServiceOrderProcessorImpl).generate(Node, ServiceOrderVO, ShipmentItemVO) line: 114	
			String myCode = getProperty(PurposeCodeProcessor.PURPOSE_CODE_TAG);
/d
"TPO"
			myPurposeCodeVO.setPurposeCode(myCode);
			PurposeCodeProcessor.generate(myProcDetailsNode, myPurposeCodeVO);
/s
PurposeCodeProcessor.generate(Node, PurposeCodeVO) line: 32	
		generate(aNode, aVO.getPurposeCode());
/s
PurposeCodeProcessor.generate(Node, String) line: 36	
		appendTextElement(aNode, CORE_NS + PURPOSE_CODE_TAG, aCode);
/s
XMLUtil.appendTextElement(Node, String, String) line: 194	
		Element myElement = appendElement(aParentNode, aChildNodeName);
		myElement.setTextContent(removeIllegalXmlChars(aValue));
/t
BakkerServiceOrderProcessor(ServiceOrderProcessorImpl).generate(Node, ServiceOrderVO, ShipmentItemVO) line: 121	
			PurposeCodeProcessor.generate(myProcDetailsNode, myPurposeCodeVO);
/d
			if (myResourceVO != null) {
				new ResourceProcessor().generate(myProcDetailsNode, myResourceVO);
/s
ResourceProcessor.generate(Node, Resource) line: 60	

/ Intermezzo

/ we gaan maken	, 

        <mtccore:REQUESTED_BY>
          <mtccore:USER_ID>all-admin</mtccore:USER_ID>
          <mtccore:FULL_NAME>All sites administrator</mtccore:FULL_NAME>
          <mtccore:ROLE>10100</mtccore:ROLE>
          <mtccore:ACTIVE_ORGANIZATION_ID>5000</mtccore:ACTIVE_ORGANIZATION_ID>
          <mtccore:RESOURCE_REFERENCE>
            <mtccore:VALUE>true</mtccore:VALUE>
            <mtccore:QUALIFIER>never.expires</mtccore:QUALIFIER>
          </mtccore:RESOURCE_REFERENCE>
          <mtccore:RESOURCE_REFERENCE>
            <mtccore:VALUE>en</mtccore:VALUE>
            <mtccore:QUALIFIER>user.locale.code</mtccore:QUALIFIER>
          </mtccore:RESOURCE_REFERENCE>
          <mtccore:RESOURCE_REFERENCE>
            <mtccore:VALUE>true</mtccore:VALUE>
            <mtccore:QUALIFIER>interface.only</mtccore:QUALIFIER>
          </mtccore:RESOURCE_REFERENCE>
        </mtccore:REQUESTED_BY>


/ Einde Intermezzo


			Element myRequestedBy = appendElement(aNode, CORE_NS + REQUESTED_BY_TAG);
			appendTextElement(myRequestedBy, CORE_NS + USER_ID, myResource.getCode());
			appendTextElement(myRequestedBy, CORE_NS + FULL_NAME, myResource.getFullName());
			appendTextElement(myRequestedBy, CORE_NS + ROLE, new Integer(myResource.getRoles().iterator().next().getSystemId()).toString());
			appendTextElement(myRequestedBy, CORE_NS + ACTIVE_ORGANIZATION_ID, new Integer(myResource.getActiveOrganization().getSystemId()).toString());

			for (Object myPropertiesValue : myResource.getPropertiesValues()) {

/ intermezzo

myResource	Resource  (id=32822)	
	propertiesValues	PersistentSet  (id=33166)	
		[0]	PropertiesValueVO  (id=34426)	
com.mpobjects.oms.model.propertiesvalue.vo.PropertiesValueVO@1d35ec84[systemId=26541001,property=never.expires - null/false,value=true]
		[1]	PropertiesValueVO  (id=34546)	
com.mpobjects.oms.model.propertiesvalue.vo.PropertiesValueVO@1440f6f5[systemId=26541905,property=user.locale.code - null/true,value=en]
		[2]	PropertiesValueVO  (id=34547)	
com.mpobjects.oms.model.propertiesvalue.vo.PropertiesValueVO@179fd54b[systemId=26583114,property=interface.only - null/false,value=true]

/ In feite	, 

myResource	Resource  (id=32822)	
	propertiesValues	PersistentSet  (id=33166)	
		[0]	PropertiesValueVO  (id=34426)	
			property	Property_$$_javassist_18  (id=34567)	
				handler	JavassistLazyInitializer  (id=35021)	
					target	Property  (id=35080)	
						code	"never.expires" (id=35093)	
						deleted	false	
						description	null	
						mandatory	Boolean  (id=33092)	
						performanceMonitorService	null	
						propertyType	PropertyType  (id=35114)	
						systemId	21440	
						visible	Boolean  (id=33092)	
...

/ Einde intermezzo

				Element myReferenceId = appendElement(myRequestedBy, CORE_NS + RESOURCE_REFERENCE);
				appendTextElement(myReferenceId, CORE_NS + VALUE, ((PropertiesValueVO) myPropertiesValue).getPropertiesValueValue());
				appendTextElement(myReferenceId, CORE_NS + QUALIFIER, ((PropertiesValueVO) myPropertiesValue).getProperty().getCode());
			}
/t
BakkerServiceOrderProcessor(ServiceOrderProcessorImpl).generate(Node, ServiceOrderVO, ShipmentItemVO) line: 126	
				new ResourceProcessor().generate(myProcDetailsNode, myResourceVO);
			}

			// SERVICE ORDER BODY
			Node myBodyNode = appendElement(aNode, MTC_NS + SERVICE_ORDER_BODY_TAG);

/ we gaan	, 
      <mtc:SERVICE_ORDER_BODY>
        <mtccore:COMMON>									/ LogisticsBodyProcessor.generate	,
          <mtccore:FROM_LOCATION>													
            <mtccore:LOCATION_ID>TEMP-ID</mtccore:LOCATION_ID>
            <mtccore:LOCATION_TYPE>NA</mtccore:LOCATION_TYPE>
            <mtccore:NAME>tt</mtccore:NAME>
            <mtccore:COUNTRY>
              <mtccore:COUNTRY_CODE>NL</mtccore:COUNTRY_CODE>
              <mtccore:COUNTRY_NAME>Netherlands</mtccore:COUNTRY_NAME>
            </mtccore:COUNTRY>
          </mtccore:FROM_LOCATION>
          <mtccore:TO_LOCATION>
            <mtccore:LOCATION_ID>33784</mtccore:LOCATION_ID>
            <mtccore:LOCATION_TYPE>NA</mtccore:LOCATION_TYPE>
            <mtccore:NAME>tt</mtccore:NAME>
            <mtccore:NAME2>BAKKER LOGISTIEK GROEP</mtccore:NAME2>
            <mtccore:ADDRESS>HANDELSWEG</mtccore:ADDRESS>
            <mtccore:CITY>ZEEWOLDE</mtccore:CITY>
            <mtccore:POSTAL_CODE>3899AB</mtccore:POSTAL_CODE>
            <mtccore:COUNTRY>
              <mtccore:COUNTRY_CODE>NL</mtccore:COUNTRY_CODE>
              <mtccore:COUNTRY_NAME>Netherlands</mtccore:COUNTRY_NAME>
            </mtccore:COUNTRY>
            <mtccore:PARTY_REFERENCE>
              <mtccore:VALUE>26</mtccore:VALUE>
              <mtccore:QUALIFIER>REFERENCE1</mtccore:QUALIFIER>
            </mtccore:PARTY_REFERENCE>
          </mtccore:TO_LOCATION>
          <mtccore:DATE_SET>
            <mtccore:REQUESTED_START_AFTER>2016-12-30T00:01:00.000+01:00</mtccore:REQUESTED_START_AFTER>
            <mtccore:REQUESTED_START_BEFORE>2016-12-30T23:59:00.000+01:00</mtccore:REQUESTED_START_BEFORE>
            <mtccore:REQUESTED_END_AFTER>2016-12-30T23:59:00.000+01:00</mtccore:REQUESTED_END_AFTER>
            <mtccore:REQUESTED_END_BEFORE>2016-12-30T23:59:00.000+01:00</mtccore:REQUESTED_END_BEFORE>
            <mtccore:PLANNED_START_AFTER>2016-12-30T00:01:00.000+01:00</mtccore:PLANNED_START_AFTER>
            <mtccore:PLANNED_START_BEFORE>2016-12-30T23:59:00.000+01:00</mtccore:PLANNED_START_BEFORE>
            <mtccore:PLANNED_END_AFTER>2016-12-30T23:59:00.000+01:00</mtccore:PLANNED_END_AFTER>
            <mtccore:PLANNED_END_BEFORE>2016-12-30T23:59:00.000+01:00</mtccore:PLANNED_END_BEFORE>
            <mtccore:ORG_PLANNED_START_AFTER>2016-12-30T00:01:00.000+01:00</mtccore:ORG_PLANNED_START_AFTER>
            <mtccore:ORG_PLANNED_END_AFTER>2016-12-30T23:59:00.000+01:00</mtccore:ORG_PLANNED_END_AFTER>
            <mtccore:ORG_PLANNED_END_BEFORE>2016-12-30T23:59:00.000+01:00</mtccore:ORG_PLANNED_END_BEFORE>
            <mtccore:ACTUAL_RELEASE>2017-02-23T16:15:00.000+01:00</mtccore:ACTUAL_RELEASE>
          </mtccore:DATE_SET>
          <mtccore:TOTAL_WEIGHT>
            <mtccore:MEASUREMENT_VALUE>0.00</mtccore:MEASUREMENT_VALUE>
            <mtccore:UNIT_OF_MEASUREMENT>KG</mtccore:UNIT_OF_MEASUREMENT>
          </mtccore:TOTAL_WEIGHT>
          <mtccore:TOTAL_VOLUME>
            <mtccore:MEASUREMENT_VALUE>0.000</mtccore:MEASUREMENT_VALUE>
            <mtccore:UNIT_OF_MEASUREMENT>M3</mtccore:UNIT_OF_MEASUREMENT>
          </mtccore:TOTAL_VOLUME>
          <mtccore:TOTAL_LDM>
            <mtccore:MEASUREMENT_VALUE>0.00</mtccore:MEASUREMENT_VALUE>
            <mtccore:UNIT_OF_MEASUREMENT>M</mtccore:UNIT_OF_MEASUREMENT>
          </mtccore:TOTAL_LDM>
          <mtccore:TOTAL_VALUE>
            <mtccore:AMOUNT>0.00</mtccore:AMOUNT>
            <mtccore:CURRENCY_CODE>EUR</mtccore:CURRENCY_CODE>
          </mtccore:TOTAL_VALUE>
          <mtccore:EXECUTION_STATUS>
            <mtccore:INTERNAL_STATUS_CODE>1500</mtccore:INTERNAL_STATUS_CODE>
          </mtccore:EXECUTION_STATUS>
        </mtccore:COMMON>


			ServiceOrderBodyProcessor myProcessor = Factory.getFactory().getInstance(ServiceOrderBodyProcessor.class);
			myProcessor.generate(myBodyNode, aServiceOrderVO);
/s
ServiceOrderBodyProcessor.generate(Node, ServiceOrderVO) line: 190	
			// COMMON - LOGISTICS ORDER
			Node myCommonNode = appendElement(aNode, CORE_NS + COMMON_TAG);
			LogisticsOrderBodyProcessor.generate(myCommonNode, aServiceOrderVO);
/s
LogisticsOrderBodyProcessor.generate(Node, LogisticsOrderVO) line: 80	
			Party myStartLocation = aLogisticsOrderVO.getFromPartyVO();
			if (myStartLocation != null) {
				Element myLocationNode = appendElement(aNode, CORE_NS + FROM_LOCATION_TAG);
				myStartLocation.setQualifier("from");
				LocationProcessor.generate(myLocationNode, myStartLocation);
/s
LocationProcessor.generate(Node, Party) line: 51	
			if (StringUtils.isNotBlank(aPartyVO.getCode())) {
/n
				appendTextElement(aNode, CORE_NS + LOCATION_ID_TAG, aPartyVO.getPartyId());
/n
			} else {
/j
				appendTextElement(aNode, CORE_NS + LOCATION_ID_TAG, PartyProcessor.getPartyProcessorTempId());

			PartyType myPartyType = aPartyVO.getPartyType();
			if (myPartyType != null) {
/n
				appendTextElement(aNode, CORE_NS + LOCATION_TYPE_TAG, myPartyType.getCode());
/n
			} else {
/j
				appendTextElement(aNode, CORE_NS + LOCATION_TYPE_TAG, PartyProcessor.UNSPECIFIED_PARTY_TYPE);

			Collection<PartyGroupVO> myGroups = aPartyVO.getPartyGroups();
[]
			PartyProcessor.generateShared(aNode, aPartyVO);
/s
PartyProcessor.generateShared(Node, Party) line: 139	
			if (StringUtils.isNotEmpty(aPartyVO.getName())) {
/j
				appendTextElement(aNode, CORE_NS + NAME_TAG, aPartyVO.getName());

			if (StringUtils.isNotEmpty(aPartyVO.getName2())) {
/n
				appendTextElement(aNode, CORE_NS + NAME2_TAG, aPartyVO.getName2());
/n
			}

			if (StringUtils.isNotEmpty(aPartyVO.getAddress())) {
/n
				appendTextElement(aNode, CORE_NS + ADDRESS_TAG, aPartyVO.getAddress());
/n
			}

			if (StringUtils.isNotEmpty(aPartyVO.getAddress2())) {
/n
				appendTextElement(aNode, CORE_NS + ADDRESS2_TAG, aPartyVO.getAddress2());
/n
			}

			if (StringUtils.isNotEmpty(aPartyVO.getCity())) {
/n
				appendTextElement(aNode, CORE_NS + CITY_TAG, aPartyVO.getCity());
/n
			}

			if (StringUtils.isNotEmpty(aPartyVO.getPostalCode())) {
/n
				appendTextElement(aNode, CORE_NS + POSTAL_CODE_TAG, aPartyVO.getPostalCode());
/n
			}

			if (StringUtils.isNotEmpty(aPartyVO.getRegionState())) {
/n
				appendTextElement(aNode, CORE_NS + REGION_STATE_TAG, aPartyVO.getRegionState());
/n
			}

			Country myCountryVO = aPartyVO.getCountryVO();
			if (myCountryVO != null) {
				Element myCountryNode = appendElement(aNode, CORE_NS + COUNTRY_TAG);
				CountryProcessor.generate(myCountryNode, myCountryVO);
/s
CountryProcessor.generate(Node, Country) line: 28	
		appendTextElement(aNode, CORE_NS + COUNTRY_CODE_TAG, aCountry.getCode());
		appendTextElement(aNode, CORE_NS + COUNTRY_NAME_TAG, aCountry.getName());
/t
PartyProcessor.generateShared(Node, Party) line: 173	
				CountryProcessor.generate(myCountryNode, myCountryVO);
/d
			if (StringUtils.isNotEmpty(aPartyVO.getPhoneNumber())) {
/n
				appendTextElement(aNode, CORE_NS + PHONE_NUMBER_TAG, aPartyVO.getPhoneNumber());
/n
			}

			if (StringUtils.isNotEmpty(aPartyVO.getFaxNumber())) {
/n
				appendTextElement(aNode, CORE_NS + FAX_NUMBER_TAG, aPartyVO.getFaxNumber());
/n
			}

			if (StringUtils.isNotEmpty(aPartyVO.getEmailAddress())) {
/n
				appendTextElement(aNode, CORE_NS + EMAIL_ADDRESS_TAG, aPartyVO.getEmailAddress());
/n
			}

			if (StringUtils.isNotEmpty(aPartyVO.getContactName())) {
/n
				appendTextElement(aNode, CORE_NS + CONTACT_NAME_TAG, aPartyVO.getContactName());
/n
			}

			if (StringUtils.isNotEmpty(aPartyVO.getLongitude())) {
/n
				appendTextElement(aNode, CORE_NS + LONGITUDE_TAG, aPartyVO.getLongitude() + "");
/n
			}

			if (StringUtils.isNotEmpty(aPartyVO.getLatitude())) {
/n
				appendTextElement(aNode, CORE_NS + LATITUDE_TAG, aPartyVO.getLatitude() + "");
/n
			}

			generateReference(aNode, aPartyVO.getReference1(), REFERENCE1_QUALIFIER);
/s
PartyProcessor.generateReference(Node, String, String) line: 423	
		if (StringUtils.isNotEmpty(aValue)) {														/ from location	,
/n
/t
PartyProcessor.generateShared(Node, Party) line: 198	
			generateReference(aNode, aPartyVO.getReference1(), REFERENCE1_QUALIFIER);
/d
			generateReference(aNode, aPartyVO.getReference2(), REFERENCE2_QUALIFIER);
			generateReference(aNode, aPartyVO.getReference3(), REFERENCE3_QUALIFIER);
			generateReference(aNode, aPartyVO.getReference4(), REFERENCE4_QUALIFIER);
			generateReference(aNode, aPartyVO.getReference5(), REFERENCE5_QUALIFIER);
			generateReference(aNode, aPartyVO.getReference6(), REFERENCE6_QUALIFIER);
			generateReference(aNode, aPartyVO.getPrenotifyCarcon() ? "true" : "", CARCON_PRENOTIFY_QUALIFIER);
/t
LogisticsOrderBodyProcessor.generate(Node, LogisticsOrderVO) line: 91	
			Party myStartLocation = aLogisticsOrderVO.getFromPartyVO();
			if (myStartLocation != null) {
				Element myLocationNode = appendElement(aNode, CORE_NS + FROM_LOCATION_TAG);
				myStartLocation.setQualifier("from");
				LocationProcessor.generate(myLocationNode, myStartLocation);
			}
/d
			Party myEndLocation = aLogisticsOrderVO.getToPartyVO();
			if (myEndLocation != null) {
				Element myLocationNode = appendElement(aNode, CORE_NS + TO_LOCATION_TAG);			/ to location	,
				myEndLocation.setQualifier("to");
				LocationProcessor.generate(myLocationNode, myEndLocation);
/s
LocationProcessor.generate(Node, Party) line: 51	
			if (StringUtils.isNotBlank(aPartyVO.getCode())) {
				appendTextElement(aNode, CORE_NS + LOCATION_ID_TAG, aPartyVO.getPartyId());

			PartyType myPartyType = aPartyVO.getPartyType();
			if (myPartyType != null) {
/n
				appendTextElement(aNode, CORE_NS + LOCATION_TYPE_TAG, myPartyType.getCode());
/n
			} else {
/j
				appendTextElement(aNode, CORE_NS + LOCATION_TYPE_TAG, PartyProcessor.UNSPECIFIED_PARTY_TYPE);

			PartyProcessor.generateShared(aNode, aPartyVO);
/s
PartyProcessor.generateShared(Node, Party) line: 139	
			if (StringUtils.isNotEmpty(aPartyVO.getName())) {
				appendTextElement(aNode, CORE_NS + NAME_TAG, aPartyVO.getName());
			if (StringUtils.isNotEmpty(aPartyVO.getName2())) {
				appendTextElement(aNode, CORE_NS + NAME2_TAG, aPartyVO.getName2());
			if (StringUtils.isNotEmpty(aPartyVO.getAddress())) {
				appendTextElement(aNode, CORE_NS + ADDRESS_TAG, aPartyVO.getAddress());
			if (StringUtils.isNotEmpty(aPartyVO.getCity())) {
				appendTextElement(aNode, CORE_NS + CITY_TAG, aPartyVO.getCity());
			if (StringUtils.isNotEmpty(aPartyVO.getPostalCode())) {
				appendTextElement(aNode, CORE_NS + POSTAL_CODE_TAG, aPartyVO.getPostalCode());
			Country myCountryVO = aPartyVO.getCountryVO();
			if (myCountryVO != null) {
				Element myCountryNode = appendElement(aNode, CORE_NS + COUNTRY_TAG);
				CountryProcessor.generate(myCountryNode, myCountryVO);
/s
CountryProcessor.generate(Node, Country) line: 28	
		appendTextElement(aNode, CORE_NS + COUNTRY_CODE_TAG, aCountry.getCode());
		appendTextElement(aNode, CORE_NS + COUNTRY_NAME_TAG, aCountry.getName());
/t
PartyProcessor.generateShared(Node, Party) line: 173	
				CountryProcessor.generate(myCountryNode, myCountryVO);
/d
			generateReference(aNode, aPartyVO.getReference1(), REFERENCE1_QUALIFIER);
/s
PartyProcessor.generateReference(Node, String, String) line: 423	

aNode	ElementNSImpl  (id=40700)	
aValue	"26" (id=41343)	
aQualifier	"REFERENCE1" (id=40411)	

		if (StringUtils.isNotEmpty(aValue)) {
			Element myReferenceNode = appendElement(aNode, CORE_NS + PARTY_REFERENCE_TAG);
			ReferenceVO myReference = new ReferenceVO();
			myReference.setValue(aValue);
			myReference.setQualifier(aQualifier);
			ReferenceProcessor.generate(myReferenceNode, myReference);
/s
ReferenceProcessor.generate(Node, ReferenceVO) line: 29	
		generate(aNode, aReferenceVO.getQualifier(), aReferenceVO.getValue());
/s
ReferenceProcessor.generate(Node, String, String) line: 33	
		appendTextElement(aBaseNode, CORE_NS + VALUE_TAG, aValue);
		appendTextElement(aBaseNode, CORE_NS + QUALIFIER_TAG, aQualifier);
/t
PartyProcessor.generateShared(Node, Party) line: 198	
			generateReference(aNode, aPartyVO.getReference1(), REFERENCE1_QUALIFIER);
/d
			generateReference(aNode, aPartyVO.getReference2(), REFERENCE2_QUALIFIER);
			generateReference(aNode, aPartyVO.getReference3(), REFERENCE3_QUALIFIER);
			generateReference(aNode, aPartyVO.getReference4(), REFERENCE4_QUALIFIER);
			generateReference(aNode, aPartyVO.getReference5(), REFERENCE5_QUALIFIER);
			generateReference(aNode, aPartyVO.getReference6(), REFERENCE6_QUALIFIER);
			generateReference(aNode, aPartyVO.getPrenotifyCarcon() ? "true" : "", CARCON_PRENOTIFY_QUALIFIER);
/t
LogisticsOrderBodyProcessor.generate(Node, LogisticsOrderVO) line: 98	
			DateSetVO myDateSetVO = aLogisticsOrderVO.getDateSetVO();
myDateSetVO	DateSetVO  (id=42219)	
	$SWITCH_TABLE$com$mpobjects$oms$model$shipmentorder$vo$DateSetVO$DateSetField	null	
	createdDate	Timestamp  (id=42225)	
	estimatedEndAfter	null	
	estimatedEndBefore	null	
	estimatedStartAfter	null	
	estimatedStartBefore	null	
	performanceMonitorService	null	
	systemId	0	
	theActualEnd	null	
	theActualRelease	Date  (id=42259)	
	theActualStart	null	
	theCloseDate	null	
	theHoldRelease	null	
	theOrigPlannedEndAfter	Timestamp  (id=42276)	
	theOrigPlannedEndBefore	Timestamp  (id=42280)	
	theOrigPlannedStartAfter	Timestamp  (id=42286)	
	theOrigPlannedStartBefore	null	
	thePlannedEndAfter	Date  (id=42300)	
	thePlannedEndBefore	Timestamp  (id=42305)	
	thePlannedRelease	null	
	thePlannedStartAfter	Date  (id=42314)	
	thePlannedStartBefore	Timestamp  (id=42318)	
	theRequestedEndAfter	Timestamp  (id=42324)	
	theRequestedEndBefore	Timestamp  (id=42329)	
	theRequestedStartAfter	Timestamp  (id=42334)	
	theRequestedStartBefore	Timestamp  (id=42339)	

			if (myDateSetVO != null) {
				Element myDateSetNode = appendElement(aNode, CORE_NS + DATE_SET_TAG);
				DateSetProcessor.generate(myDateSetNode, myDateSetVO);
/s
DateSetProcessor.generate(Node, DateSetVO) line: 75	
			appendDate(aNode, CORE_NS + REQUESTED_START_AFTER_TAG, aDateSetVO.getRequestedStartAfter());
/s
DateSetProcessor.appendDate(Node, String, Date) line: 106	
		if (aDate != null) {
			String myDateStr = DateUtils.formatISO8610DateTime(aDate);
			appendTextElement(aNode, aName, myDateStr);
/t
DateSetProcessor.generate(Node, DateSetVO) line: 76	
			appendDate(aNode, CORE_NS + REQUESTED_START_AFTER_TAG, aDateSetVO.getRequestedStartAfter());
/d
			appendDate(aNode, CORE_NS + REQUESTED_START_BEFORE_TAG, aDateSetVO.getRequestedStartBefore());
			appendDate(aNode, CORE_NS + REQUESTED_END_AFTER_TAG, aDateSetVO.getRequestedEndAfter());
			appendDate(aNode, CORE_NS + REQUESTED_END_BEFORE_TAG, aDateSetVO.getRequestedEndBefore());

			appendDate(aNode, CORE_NS + PLANNED_START_AFTER_TAG, aDateSetVO.getPlannedStartAfter());
			appendDate(aNode, CORE_NS + PLANNED_START_BEFORE_TAG, aDateSetVO.getPlannedStartBefore());
			appendDate(aNode, CORE_NS + PLANNED_END_AFTER_TAG, aDateSetVO.getPlannedEndAfter());
			appendDate(aNode, CORE_NS + PLANNED_END_BEFORE_TAG, aDateSetVO.getPlannedEndBefore());

			appendDate(aNode, CORE_NS + ORG_PLANNED_START_AFTER_TAG, aDateSetVO.getOrigPlannedStartAfter());
			appendDate(aNode, CORE_NS + ORG_PLANNED_START_BEFORE_TAG, aDateSetVO.getOrigPlannedStartBefore());
			appendDate(aNode, CORE_NS + ORG_PLANNED_END_AFTER_TAG, aDateSetVO.getOrigPlannedEndAfter());
			appendDate(aNode, CORE_NS + ORG_PLANNED_END_BEFORE_TAG, aDateSetVO.getOrigPlannedEndBefore());

			appendDate(aNode, CORE_NS + ACTUAL_RELEASE_TAG, aDateSetVO.getActualRelease());
			appendDate(aNode, CORE_NS + PLANNED_RELEASE_TAG, aDateSetVO.getPlannedRelease());
			appendDate(aNode, CORE_NS + ACTUAL_START_TAG, aDateSetVO.getActualStart());
			appendDate(aNode, CORE_NS + ACTUAL_END_TAG, aDateSetVO.getActualEnd());

			appendDate(aNode, CORE_NS + ESTIMATED_START_AFTER_TAG, aDateSetVO.getEstimatedStartAfter());
			appendDate(aNode, CORE_NS + ESTIMATED_START_BEFORE_TAG, aDateSetVO.getEstimatedStartBefore());
			appendDate(aNode, CORE_NS + ESTIMATED_END_AFTER_TAG, aDateSetVO.getEstimatedEndAfter());
			appendDate(aNode, CORE_NS + ESTIMATED_END_BEFORE_TAG, aDateSetVO.getEstimatedEndBefore());
/t
LogisticsOrderBodyProcessor.generate(Node, LogisticsOrderVO) line: 105	
				DateSetProcessor.generate(myDateSetNode, myDateSetVO);
/d
			BigDecimal myValue = aLogisticsOrderVO.getRequestedTotalWeightKg();
			if (myValue != null) {
				Element myMeasurementNode = appendElement(aNode, CORE_NS + TOTAL_WEIGHT_TAG);
				MeasurementVO myVO = new MeasurementVO();
				myVO.setUnitOfMeasurement("KG");
				myVO.setValue(myValue);
				MeasurementProcessor.generate(myMeasurementNode, myVO);
/s
MeasurementProcessor.generate(Node, MeasurementVO) line: 47	
		generate(aNode, aMeasurementVO.getValue(), aMeasurementVO.getUnitOfMeasurement());
/s
MeasurementProcessor.generate(Node, BigDecimal, String) line: 38	
		appendTextElement(aNode, CORE_NS + MEASUREMENT_VALUE_TAG, aValue.setScale(myScale, BigDecimal.ROUND_HALF_UP).toString());
		appendTextElement(aNode, CORE_NS + UNIT_OF_MEASUREMENT_TAG, aUnitOfMeasurement);
/t
LogisticsOrderBodyProcessor.generate(Node, LogisticsOrderVO) line: 114	
				MeasurementProcessor.generate(myMeasurementNode, myVO);
/d
			myValue = aLogisticsOrderVO.getRequestedTotalVolumeM3();
			if (myValue != null) {
				Element myMeasurementNode = appendElement(aNode, CORE_NS + TOTAL_VOLUME_TAG);
				MeasurementVO myVO = new MeasurementVO();
				myVO.setUnitOfMeasurement("M3");
				myVO.setValue(myValue);
				MeasurementProcessor.generate(myMeasurementNode, myVO);
			}
			myValue = aLogisticsOrderVO.getRequestedTotalLoadingMeters();
			if (myValue != null) {
				Element myMeasurementNode = appendElement(aNode, CORE_NS + TOTAL_LDM_TAG);
				MeasurementVO myVO = new MeasurementVO();
				myVO.setUnitOfMeasurement("M");
				myVO.setValue(myValue);
				MeasurementProcessor.generate(myMeasurementNode, myVO);
			}
			BigDecimal myAmount = aLogisticsOrderVO.getRequestedTotalValue();	
			CurrencyVO myCurrencyVO = aLogisticsOrderVO.getValueCurrencyVO();
			if (myAmount != null && myCurrencyVO != null) {
				Node myAmountNode = appendElement(aNode, CORE_NS + TOTAL_VALUE_TAG);
				AmountVO myVO = new AmountVO();
				myVO.setCurrencyVO(myCurrencyVO);
				myVO.setAmount(myAmount);
				AmountProcessor.generate(myAmountNode, myVO);
			}

			if (StringUtils.isTrue(ApplicationPropertyManager.getInstance().getModuleApplicationProperty("oms", "serviceorder.cost.exportable", "false"))) {
/n
			OrderStatusVO myStatusVO = aLogisticsOrderVO.getOrderStatusVO();
			if (myStatusVO != null) {
				Node myNode = appendElement(aNode, CORE_NS + EXECUTION_STATUS_TAG);
				OrderStatusProcessor.generate(myNode, myStatusVO);
/s
OrderStatusProcessor.generate(Node, OrderStatusVO) line: 20	
		appendTextElement(aNode, CORE_NS + INTERNAL_STATUS_CODE_TAG, anOrderStatusVO.getCode());
/t
ServiceOrderBodyProcessor.generate(Node, ServiceOrderVO) line: 193	
			// COMMON - LOGISTICS ORDER
			Node myCommonNode = appendElement(aNode, CORE_NS + COMMON_TAG);
			LogisticsOrderBodyProcessor.generate(myCommonNode, aServiceOrderVO);
/d

/ We gaan maken	,
        <mtccore:SERVICE_ORDER_ID>N0054079</mtccore:SERVICE_ORDER_ID>
        <mtccore:ORGANIZATION_ID>BAKKER</mtccore:ORGANIZATION_ID>
        <mtccore:SERVICE_ORDER_REFERENCE>
          <mtccore:VALUE>0.00</mtccore:VALUE>
          <mtccore:QUALIFIER>REFERENCE7</mtccore:QUALIFIER>
        </mtccore:SERVICE_ORDER_REFERENCE>
        <mtccore:SERVICE_ORDER_REFERENCE>
          <mtccore:VALUE>0</mtccore:VALUE>
          <mtccore:QUALIFIER>waitingTime</mtccore:QUALIFIER>
        </mtccore:SERVICE_ORDER_REFERENCE>
        <mtccore:SERVICE_ORDER_PROCESS>OUTBOUND</mtccore:SERVICE_ORDER_PROCESS>
        <mtccore:SERVICE_ORDER_TYPE>TPO</mtccore:SERVICE_ORDER_TYPE>
        <mtccore:SERVICE_LEVEL/>
        <mtccore:AIRWAY_BILL/>
        <mtccore:BILL_OF_LADING_NR/>
        <mtccore:VESSEL_NAME/>
        <mtccore:PORT_OF_DEPARTURE/>
        <mtccore:PORT_OF_ARRIVAL/>
        <mtccore:IMPORT_EXPORT_INFO>
          <mtccore:LAST_EXPORT>2017-02-27T16:15:16.838+01:00</mtccore:LAST_EXPORT>
        </mtccore:IMPORT_EXPORT_INFO>
      </mtc:SERVICE_ORDER_BODY>


			if (aServiceOrderVO.getServiceOrderId() != null) {
				appendTextElement(aNode, CORE_NS + SERVICE_ORDER_ID_TAG, aServiceOrderVO.getServiceOrderId());
			}
			if (aServiceOrderVO.getOrganization() != null) {
				appendTextElement(aNode, CORE_NS + ORGANIZATION_ID_TAG, aServiceOrderVO.getOrganization().getCode());
			}
			// Generate the references
			generateReference(aNode, aServiceOrderVO.getCarrierReference(), CARRIER_REFERENCE_QUALIFIER);	/ NIETS	,	 want = ""
			generateReference(aNode, aServiceOrderVO.getReference1(), REFERENCE1_QUALIFIER);	/ NIETS, want = ""
			...
			generateReference(aNode, aServiceOrderVO.getReference7(), REFERENCE7_QUALIFIER);
/s
ServiceOrderBodyProcessor.generateReference(Node, String, String) line: 173	
			Node myReferenceNode = appendElement(aNode, CORE_NS + SERVICE_ORDER_REFERENCE_TAG);
			ReferenceVO myReference = new ReferenceVO();
			myReference.setValue(aValue);
			myReference.setQualifier(aQualifier);
			ReferenceProcessor.generate(myReferenceNode, myReference);
/s
ReferenceProcessor.generate(Node, ReferenceVO) line: 29	
		generate(aNode, aReferenceVO.getQualifier(), aReferenceVO.getValue());
/s
ReferenceProcessor.generate(Node, String, String) line: 33	
		appendTextElement(aBaseNode, CORE_NS + VALUE_TAG, aValue);
		appendTextElement(aBaseNode, CORE_NS + QUALIFIER_TAG, aQualifier);
/t
ServiceOrderBodyProcessor.generate(Node, ServiceOrderVO) line: 210	
			generateReference(aNode, aServiceOrderVO.getReference7(), REFERENCE7_QUALIFIER);
/d
			generateReference(aNode, aServiceOrderVO.getReference8(), REFERENCE8_QUALIFIER);		/ NIETS	,

			// Iterate through the service order entity details and export these.
			for (Entry<EntityDetailType, String> myEntry : aServiceOrderVO.getEntityDetails().entrySet()) {
				String myDetailTypeName = myEntry.getKey().getName();
waitingTime
				String myValue = myEntry.getValue();
0.00
				boolean exportAsIs = ApplicationPropertyManager.getInstance().getModuleProperty("interfacing", "export.entity.details.as.is", false);
true
				String myJavaQualifier = myDetailTypeName;
				if (!exportAsIs) {
/n
					myJavaQualifier = com.mpobjects.common.util.StringUtils.formatJavaToSql(myDetailTypeName).toString().toUpperCase();
/n
				}
				generateReference(aNode, myValue, myJavaQualifier);
/s
			if (aServiceOrderVO.getOrderProcess() != null) {
				appendTextElement(aNode, CORE_NS + SERVICE_ORDER_PROCESS_TAG, aServiceOrderVO.getOrderProcess().getCode());	/ OUTBOUND

			ServiceOrderType myType = aServiceOrderVO.getServiceOrderType();
			if (myType != null) {
				appendTextElement(aNode, CORE_NS + SERVICE_ORDER_TYPE_TAG, myType.getCode());	/ TPO

			if (aServiceOrderVO.getServiceLevel() != null) {												/ "", we zien  <mtccore:SERVICE_LEVEL/>
/ TODO 
				appendTextElement(aNode, CORE_NS + SERVICE_LEVEL_TAG, aServiceOrderVO.getServiceLevel());

			if (aServiceOrderVO.getAirwayBillNr() != null) {
				appendTextElement(aNode, CORE_NS + AIRWAY_BILL_TAG, aServiceOrderVO.getAirwayBillNr());

			if (aServiceOrderVO.getBillOfLadingNr() != null) {
				appendTextElement(aNode, CORE_NS + BILL_OF_LADING_TAG, aServiceOrderVO.getBillOfLadingNr());

			if (aServiceOrderVO.getVesselName() != null) {
				appendTextElement(aNode, CORE_NS + VESSEL_NAME_TAG, aServiceOrderVO.getVesselName());

			if (aServiceOrderVO.getDepPort() != null) {
				appendTextElement(aNode, CORE_NS + PORT_OF_DEPARTURE_TAG, aServiceOrderVO.getDepPort());

			if (aServiceOrderVO.getArrPort() != null) {
				appendTextElement(aNode, CORE_NS + PORT_OF_ARRIVAL_TAG, aServiceOrderVO.getArrPort());

			boolean shouldInterfaceServiceOrderCosts = ApplicationPropertyManager.getInstance().getModuleProperty("interface",
					"should.interface.serviceorder.costs", false);
false
			for (ServiceOrderParty party : aServiceOrderVO.getServiceOrderParties()) {
/n
/ TODO

			ImportExportProcessor.generate(aNode, aServiceOrderVO);
/s
ImportExportProcessor.generate(Node, ImportExportTrackable) line: 35	
		if (aImportExportTrackable != null && aImportExportTrackable.getImportExportInfo() != null) {
			Node myNode = appendElement(aNode, CORE_NS + IMPORT_EXPORT_INFO);
			appendDateElement(myNode, CORE_NS + LAST_IMPORT, aImportExportTrackable.getImportExportInfo().getLastImport());
/s
XMLUtil.appendDateElement(Node, String, Date) line: 133	
		if (aDate != null) {
/n
			return null;
/t
			appendDateElement(myNode, CORE_NS + LAST_EXPORT, aImportExportTrackable.getImportExportInfo().getLastExport());
/s
	public static Element appendDateElement(Node aNode, String aName, Date aDate) {
		if (aDate != null) {
			return appendTextElement(aNode, aName, DateUtils.formatISO8610DateTime(aDate));
/t
ServiceOrderBodyProcessor.generate(Node, ServiceOrderVO) line: 349	
			ImportExportProcessor.generate(aNode, aServiceOrderVO);
/d
/t
BakkerServiceOrderProcessor(ServiceOrderProcessorImpl).generate(Node, ServiceOrderVO, ShipmentItemVO) line: 131	
			ServiceOrderBodyProcessor myProcessor = Factory.getFactory().getInstance(ServiceOrderBodyProcessor.class);
			myProcessor.generate(myBodyNode, aServiceOrderVO);
/d

/ we gaan maken	,
      <mtc:CONSIGNMENT>
        <mtc:CONSIGNMENT_BODY>
          <mtccore:COMMON>
            <mtccore:FROM_LOCATION>
              <mtccore:LOCATION_ID>TEMP-ID</mtccore:LOCATION_ID>
              <mtccore:LOCATION_TYPE>NA</mtccore:LOCATION_TYPE>
            </mtccore:FROM_LOCATION>
            <mtccore:TO_LOCATION>
              <mtccore:LOCATION_ID>33784</mtccore:LOCATION_ID>
              <mtccore:LOCATION_TYPE>NA</mtccore:LOCATION_TYPE>
              <mtccore:NAME2>BAKKER LOGISTIEK GROEP</mtccore:NAME2>
              <mtccore:ADDRESS>HANDELSWEG</mtccore:ADDRESS>
              <mtccore:CITY>ZEEWOLDE</mtccore:CITY>
              <mtccore:POSTAL_CODE>3899AB</mtccore:POSTAL_CODE>
              <mtccore:COUNTRY>
                <mtccore:COUNTRY_CODE>NL</mtccore:COUNTRY_CODE>
                <mtccore:COUNTRY_NAME>Netherlands</mtccore:COUNTRY_NAME>
              </mtccore:COUNTRY>
              <mtccore:PARTY_REFERENCE>
                <mtccore:VALUE>26</mtccore:VALUE>
                <mtccore:QUALIFIER>REFERENCE1</mtccore:QUALIFIER>
              </mtccore:PARTY_REFERENCE>
            </mtccore:TO_LOCATION>
            <mtccore:DATE_SET>
              <mtccore:REQUESTED_START_AFTER>2016-12-30T00:01:00.000+01:00</mtccore:REQUESTED_START_AFTER>
              <mtccore:REQUESTED_START_BEFORE>2016-12-30T23:59:00.000+01:00</mtccore:REQUESTED_START_BEFORE>
              <mtccore:REQUESTED_END_AFTER>2016-12-30T23:59:00.000+01:00</mtccore:REQUESTED_END_AFTER>
              <mtccore:REQUESTED_END_BEFORE>2016-12-30T23:59:00.000+01:00</mtccore:REQUESTED_END_BEFORE>
              <mtccore:PLANNED_START_AFTER>2016-12-30T00:01:00.000+01:00</mtccore:PLANNED_START_AFTER>
              <mtccore:PLANNED_START_BEFORE>2016-12-30T23:59:00.000+01:00</mtccore:PLANNED_START_BEFORE>
              <mtccore:PLANNED_END_AFTER>2016-12-30T23:59:00.000+01:00</mtccore:PLANNED_END_AFTER>
              <mtccore:PLANNED_END_BEFORE>2016-12-30T23:59:00.000+01:00</mtccore:PLANNED_END_BEFORE>
            </mtccore:DATE_SET>
            <mtccore:TOTAL_VOLUME>
              <mtccore:MEASUREMENT_VALUE>0.000</mtccore:MEASUREMENT_VALUE>
              <mtccore:UNIT_OF_MEASUREMENT>M3</mtccore:UNIT_OF_MEASUREMENT>
            </mtccore:TOTAL_VOLUME>
            <mtccore:TOTAL_LDM>
              <mtccore:MEASUREMENT_VALUE>0.00</mtccore:MEASUREMENT_VALUE>
              <mtccore:UNIT_OF_MEASUREMENT>M</mtccore:UNIT_OF_MEASUREMENT>
            </mtccore:TOTAL_LDM>
            <mtccore:EXECUTION_STATUS>
              <mtccore:INTERNAL_STATUS_CODE>1450</mtccore:INTERNAL_STATUS_CODE>
            </mtccore:EXECUTION_STATUS>
          </mtccore:COMMON>
          <mtccore:CONSIGNMENT_ID>N0054079.1</mtccore:CONSIGNMENT_ID>
        </mtc:CONSIGNMENT_BODY>
        <mtc:SHIPMENT_ORDER>
          <mtc:SHIPMENT_ORDER_BODY>
            <mtccore:COMMON>
              <mtccore:FROM_LOCATION>
                <mtccore:LOCATION_ID>TEMP-ID</mtccore:LOCATION_ID>
                <mtccore:LOCATION_TYPE>NA</mtccore:LOCATION_TYPE>
              </mtccore:FROM_LOCATION>
              <mtccore:TO_LOCATION>
                <mtccore:LOCATION_ID>33784</mtccore:LOCATION_ID>
                <mtccore:LOCATION_TYPE>NA</mtccore:LOCATION_TYPE>
                <mtccore:NAME2>BAKKER LOGISTIEK GROEP</mtccore:NAME2>
                <mtccore:ADDRESS>HANDELSWEG</mtccore:ADDRESS>
                <mtccore:CITY>ZEEWOLDE</mtccore:CITY>
                <mtccore:POSTAL_CODE>3899AB</mtccore:POSTAL_CODE>
                <mtccore:COUNTRY>
                  <mtccore:COUNTRY_CODE>NL</mtccore:COUNTRY_CODE>
                  <mtccore:COUNTRY_NAME>Netherlands</mtccore:COUNTRY_NAME>
                </mtccore:COUNTRY>
                <mtccore:LONGITUDE>5.513050</mtccore:LONGITUDE>
                <mtccore:LATITUDE>52.356260</mtccore:LATITUDE>
                <mtccore:PARTY_REFERENCE>
                  <mtccore:VALUE>26</mtccore:VALUE>
                  <mtccore:QUALIFIER>REFERENCE1</mtccore:QUALIFIER>
                </mtccore:PARTY_REFERENCE>
              </mtccore:TO_LOCATION>
              <mtccore:DATE_SET>
                <mtccore:REQUESTED_START_AFTER>2016-12-30T00:01:00.000+01:00</mtccore:REQUESTED_START_AFTER>
                <mtccore:REQUESTED_START_BEFORE>2016-12-30T23:59:00.000+01:00</mtccore:REQUESTED_START_BEFORE>
                <mtccore:REQUESTED_END_AFTER>2016-12-30T23:59:00.000+01:00</mtccore:REQUESTED_END_AFTER>
                <mtccore:REQUESTED_END_BEFORE>2016-12-30T23:59:00.000+01:00</mtccore:REQUESTED_END_BEFORE>
                <mtccore:PLANNED_START_AFTER>2016-12-30T00:01:00.000+01:00</mtccore:PLANNED_START_AFTER>
                <mtccore:PLANNED_START_BEFORE>2016-12-30T23:59:00.000+01:00</mtccore:PLANNED_START_BEFORE>
                <mtccore:PLANNED_END_AFTER>2016-12-30T23:59:00.000+01:00</mtccore:PLANNED_END_AFTER>
                <mtccore:PLANNED_END_BEFORE>2016-12-30T23:59:00.000+01:00</mtccore:PLANNED_END_BEFORE>
              </mtccore:DATE_SET>
              <mtccore:TOTAL_WEIGHT>
                <mtccore:MEASUREMENT_VALUE>0.00</mtccore:MEASUREMENT_VALUE>
                <mtccore:UNIT_OF_MEASUREMENT>KG</mtccore:UNIT_OF_MEASUREMENT>
              </mtccore:TOTAL_WEIGHT>
              <mtccore:TOTAL_VOLUME>
                <mtccore:MEASUREMENT_VALUE>0.000</mtccore:MEASUREMENT_VALUE>
                <mtccore:UNIT_OF_MEASUREMENT>M3</mtccore:UNIT_OF_MEASUREMENT>
              </mtccore:TOTAL_VOLUME>
              <mtccore:EXECUTION_STATUS>
                <mtccore:INTERNAL_STATUS_CODE>1450</mtccore:INTERNAL_STATUS_CODE>
              </mtccore:EXECUTION_STATUS>
            </mtccore:COMMON>
            <mtccore:SHIPMENT_ORDER_ID>SH000027245</mtccore:SHIPMENT_ORDER_ID>
            <mtccore:ORGANIZATION_ID>BAKKER</mtccore:ORGANIZATION_ID>
            <mtccore:SHIPMENT_ORDER_PROCESS>OUTBOUND</mtccore:SHIPMENT_ORDER_PROCESS>
            <mtccore:SHIPMENT_TYPE>STR</mtccore:SHIPMENT_TYPE>
            <mtccore:SHIPMENT_SERVICE_LEVEL>STANDARD</mtccore:SHIPMENT_SERVICE_LEVEL>
            <mtccore:REQUESTED_SHIPMENT_SERVICE_LEVEL>STANDARD</mtccore:REQUESTED_SHIPMENT_SERVICE_LEVEL>
            <mtccore:ACTUAL_SHIPMENT_SERVICE_LEVEL>STANDARD</mtccore:ACTUAL_SHIPMENT_SERVICE_LEVEL>
            <mtccore:INCO_TERM>DEFAULT</mtccore:INCO_TERM>
            <mtccore:INCO_TERM_VERSION>2000</mtccore:INCO_TERM_VERSION>
            <mtccore:INCO_TERM_REFERENCE/>
            <mtccore:HOLD_DESCRIPTION/>
            <mtccore:DANGEROUS_GOODS_YN>N</mtccore:DANGEROUS_GOODS_YN>
            <mtccore:SHIPMENT_ORDER_REFERENCE>
              <mtccore:VALUE>DUMMY</mtccore:VALUE>
              <mtccore:QUALIFIER>CUSTOMER_ORDER_NUMBER</mtccore:QUALIFIER>
            </mtccore:SHIPMENT_ORDER_REFERENCE>
            <mtccore:SHIPMENT_ORDER_REFERENCE>
              <mtccore:VALUE>77577</mtccore:VALUE>
              <mtccore:QUALIFIER>SHIPMENT_ORDER_SYSTEMID</mtccore:QUALIFIER>
            </mtccore:SHIPMENT_ORDER_REFERENCE>
            <mtccore:SHIPMENT_ORDER_REFERENCE>
              <mtccore:VALUE>N0054079</mtccore:VALUE>
              <mtccore:QUALIFIER>TPO_SERVICE_ORDER_ID</mtccore:QUALIFIER>
            </mtccore:SHIPMENT_ORDER_REFERENCE>
            <mtccore:SHIPMENT_ORDER_REFERENCE>
              <mtccore:VALUE>32</mtccore:VALUE>
              <mtccore:QUALIFIER>RequestedDispatchUnits</mtccore:QUALIFIER>
            </mtccore:SHIPMENT_ORDER_REFERENCE>
            <mtccore:SHIPMENT_ORDER_REFERENCE>
              <mtccore:VALUE>02</mtccore:VALUE>
              <mtccore:QUALIFIER>TemperatureClassCode</mtccore:QUALIFIER>
            </mtccore:SHIPMENT_ORDER_REFERENCE>
            <mtccore:SHIPMENT_ORDER_REFERENCE>
              <mtccore:VALUE>false</mtccore:VALUE>
              <mtccore:QUALIFIER>ExchangeEmpties</mtccore:QUALIFIER>
            </mtccore:SHIPMENT_ORDER_REFERENCE>
            <mtccore:SHIPMENT_ORDER_PARTY>
              <mtccore:PARTY_ROLE>ULTIMATE_DESTINATION</mtccore:PARTY_ROLE>
              <mtccore:PARTY>
                <mtccore:PARTY_ID>TEMP-ID</mtccore:PARTY_ID>
                <mtccore:PARTY_TYPE>NA</mtccore:PARTY_TYPE>
              </mtccore:PARTY>
            </mtccore:SHIPMENT_ORDER_PARTY>
            <mtccore:SHIPMENT_ORDER_PARTY>
              <mtccore:PARTY_ROLE>EMPLOYEE_RESPONSIBLE</mtccore:PARTY_ROLE>
              <mtccore:PARTY>
                <mtccore:PARTY_ID>TEMP-ID</mtccore:PARTY_ID>
                <mtccore:PARTY_TYPE>NA</mtccore:PARTY_TYPE>
              </mtccore:PARTY>
            </mtccore:SHIPMENT_ORDER_PARTY>
            <mtccore:SHIPMENT_ORDER_PARTY>
              <mtccore:PARTY_ROLE>EMPLOYEE_RESPONSIBLE</mtccore:PARTY_ROLE>
              <mtccore:PARTY>
                <mtccore:PARTY_ID>TEMP-ID</mtccore:PARTY_ID>
                <mtccore:PARTY_TYPE>NA</mtccore:PARTY_TYPE>
              </mtccore:PARTY>
            </mtccore:SHIPMENT_ORDER_PARTY>
          </mtc:SHIPMENT_ORDER_BODY>
          <mtc:PRODUCT_ITEMS>
            <mtccore:PRODUCT_ITEM>
              <mtccore:PRODUCT_ITEM_ID>010</mtccore:PRODUCT_ITEM_ID>
              <mtccore:SHIPMENT_ORDER_ID>SH000027245</mtccore:SHIPMENT_ORDER_ID>
              <mtccore:PRODUCT>
                <mtccore:PRODUCT_ID>DEFAULT</mtccore:PRODUCT_ID>
                <mtccore:DESCRIPTION>GECONDITIONEERD</mtccore:DESCRIPTION>
                <mtccore:WEIGHT>
                  <mtccore:MEASUREMENT_VALUE>0.00000</mtccore:MEASUREMENT_VALUE>
                  <mtccore:UNIT_OF_MEASUREMENT>KG</mtccore:UNIT_OF_MEASUREMENT>
                </mtccore:WEIGHT>
              </mtccore:PRODUCT>
              <mtccore:QUANTITY>32.00</mtccore:QUANTITY>
              <mtccore:TOTAL_VOLUME_M3>
                <mtccore:MEASUREMENT_VALUE>0.00000</mtccore:MEASUREMENT_VALUE>
                <mtccore:UNIT_OF_MEASUREMENT>M3</mtccore:UNIT_OF_MEASUREMENT>
              </mtccore:TOTAL_VOLUME_M3>
              <mtccore:TOTAL_WEIGHT_KG>
                <mtccore:MEASUREMENT_VALUE>0.00000</mtccore:MEASUREMENT_VALUE>
                <mtccore:UNIT_OF_MEASUREMENT>KG</mtccore:UNIT_OF_MEASUREMENT>
              </mtccore:TOTAL_WEIGHT_KG>
              <mtccore:ORIG_CUST_ORDER_ID>CO000000052</mtccore:ORIG_CUST_ORDER_ID>
              <mtccore:ORIG_CUST_ORDERLINE_ID>1</mtccore:ORIG_CUST_ORDERLINE_ID>
              <mtccore:CUSTOMER_ORDER_ID>CO000000052</mtccore:CUSTOMER_ORDER_ID>
              <mtccore:CUSTOMER_ORDER_LINE_ID>1</mtccore:CUSTOMER_ORDER_LINE_ID>
              <mtccore:ITEM_REFERENCE>
                <mtccore:VALUE>68</mtccore:VALUE>
                <mtccore:QUALIFIER>INTERNAL_ID</mtccore:QUALIFIER>
              </mtccore:ITEM_REFERENCE>
            </mtccore:PRODUCT_ITEM>
          </mtc:PRODUCT_ITEMS>
          <mtc:SHIPMENT_ITEMS/>
          <mtc:ATTACHMENTS>												/ Als er een attachment is
            <mtccore:ATTACHMENT>
              <mtccore:FILE_NAME>bakkergroep</mtccore:FILE_NAME>	
			  ...
              <mtccore:CONTENT>iVBORw0KGgoAAAANSUhEUgAAAysAAAH/CAYAAABXZ0JMAAAD8GlDQ1BJQ0MgUHJvZmlsZQAAOI2N&#13;
Vd1v21QUP4lvXKQWP6Cxjg4Vi69VU1u5GxqtxgZJk6XpQhq5zdgqpMl1bhpT1za2021Vn/YCbwz4&#13;
A4CyBx6QeEIaDMT2su0BtElTQRXVJKQ9dNpAaJP2gqpwrq9Tu13GuJGvfznndz7v0TVAx1ea45hJ&#13;
...
2UjL50867zV4L3AuyKum5ZvffNh5d3TFZN7LL79saSWn52aDkas4CTgJOAk4CXxiJfC/5Ux3MlLt&#13;
MdoAAAAASUVORK5CYII=&#13;
</mtccore:CONTENT>
            </mtccore:ATTACHMENT>
          </mtc:ATTACHMENTS>
        </mtc:SHIPMENT_ORDER>
        <mtc:PRODUCT_ITEMS/>
        <mtc:SHIPMENT_ITEMS/>
      </mtc:CONSIGNMENT>
    </mtc:SERVICE_ORDER>

 
			for (ConsignmentVO myConsignmentVO : aServiceOrderVO.getConsignmentList()) {	[N0054079.1/54105]
				Node myConsignmentNode = appendElement(aNode, MTC_NS + CONSIGNMENT_TAG);
				new ConsignmentProcessor(this).generate(myConsignmentNode, myConsignmentVO, aShipmentItem);
/s
ConsignmentProcessor.generate(Node, ConsignmentVO, ShipmentItemVO) line: 97	
			// Consignment body
			Node myBodyNode = appendElement(aNode, MTC_NS + CONSIGNMENT_BODY_TAG);
			ConsignmentBodyProcessor.generate(myBodyNode, aConsignmentVO);

			// Shipment orders.
			generateShipmentOrders(aNode, aConsignmentVO, aShipmentItem);
/s
ConsignmentProcessor.generateShipmentOrders(Node, ConsignmentVO, ShipmentItemVO) line: 182	
		for (Object myElement : aConsignmentVO.getServiceActionList()) {
			Node myShipmentNode = appendElement(aNode, MTC_NS + SHIPMENT_ORDER_TAG);
			ServiceActionVO myServiceActionVO = (ServiceActionVO) myElement;
			ShipmentOrderVO myShipmentOrderVO;
			if (myServiceActionVO.getShipmentOrderVO() == null) {
/j
				myShipmentOrderVO = ShipmentOrderUtil.getShipmentOrderFacadeLocal().getShipmentOrder(myServiceActionVO.getShipmentOrderVO().getSystemId());

			if (myShipmentOrderVO != null) {
				// Shipment order below service order.
				ShipmentOrderProcessor myProcessor = new ShipmentOrderProcessor(this);
				myProcessor.generate(myShipmentNode, myShipmentOrderVO, aShipmentItem);
/s
ShipmentOrderProcessor.generate(Node, ShipmentOrderVO, ShipmentItemVO) line: 129	
		generate(aNode, aShipmentOrderVO, null, aShipmentItem);
/s
ShipmentOrderProcessor.generate(Node, ShipmentOrderVO, PurposeCodeVO, ShipmentItemVO) line: 121	
...
				PurposeCodeProcessor.generate(myProcDetailsNode, aPurposeCodeVO);
...
			ShipmentOrderBodyProcessor myProcessor = Factory.getFactory().getInstance(ShipmentOrderBodyProcessor.class);
			myProcessor.generate(myBodyNode, aShipmentOrderVO);
...
			// Product items.
			Collection<ProductItemVO> myProductList = aShipmentOrderVO.getProductItemList();
			generateProductItems(aNode, myProductList);
...
			// Shipment items.
			Collection<ShipmentItemVO> myShipmentItemList;
			} else {
				myShipmentItemList = aShipmentOrderVO.getShipmentItemList();
			}
			generateShipmentItems(aNode, myShipmentItemList, SHIPMENT_ITEM_ID_PREFIX);
...
			// Attachments																												
			if (Boolean.parseBoolean(ApplicationPropertyManager.getInstance().getModuleProperty("oms", "export.service.order.with.files",
					Boolean.TRUE.toString()))) {
				addAttachments(aNode, aShipmentOrderVO, FileObject.RELATED_OBJECT_TYPE_SHIPMENT_ORDER);	
/s
ShipmentOrderProcessor(AbstractLogisticsOrderProcessor).addAttachments(Node, LogisticsOrderVO, String) line: 81	

/ Intermezzo

/ stack	, 
/s
	ShipmentOrderProcessor(AbstractLogisticsOrderProcessor).addAttachments(Node, LogisticsOrderVO, String) line: 81	
/ export sho body, pri's , shi's	, attachments	, 
	ShipmentOrderProcessor.generate(Node, ShipmentOrderVO, PurposeCodeVO, ShipmentItemVO) line: 121	
	ShipmentOrderProcessor.generate(Node, ShipmentOrderVO, ShipmentItemVO) line: 129	
	ConsignmentProcessor.generateShipmentOrders(Node, ConsignmentVO, ShipmentItemVO) line: 182	
	ConsignmentProcessor.generate(Node, ConsignmentVO, ShipmentItemVO) line: 97	
/ export cons body, sho's, shi's, pri's, we gaan export sho in	,
	BakkerServiceOrderProcessor(ServiceOrderProcessorImpl).generate(Node, ServiceOrderVO, ShipmentItemVO) line: 133	
/ export seo body, cons's	, we gaan export cons in	, 
	ServiceOrderMsgProcessor.generate(Document, ServiceOrderVO, ShipmentItemVO) line: 69	
/ export seo, co's, we gaan export seo in	,
	ServiceOrderMsgProducer.produce(ServiceOrderVO, Map<String,String>, ShipmentItemVO) line: 36	
	ServiceOrderExportServiceImpl.exportMessage(ServiceOrderExportRequest, ServiceOrderVO, ShipmentItemVO) line: 447	
	ServiceOrderExportServiceImpl.exportServiceOrder(ServiceOrderExportRequest) line: 500	
	ServiceOrderExportServiceImpl.handleRequest(ServiceOrderExportRequest, ServiceRequestProperties) line: 349	
	ServiceOrderExportServiceImpl.handleRequest(ServiceRequest, ServiceRequestProperties) line: 1	
	ServiceOrderExportServiceImpl(AbstractJmsServiceRequestHandler).onMessage(Message) line: 109	

/s
ShipmentOrderProcessor(AbstractLogisticsOrderProcessor).addAttachments(Node, LogisticsOrderVO, String) line: 81	
/ See DEBUG EXPORT ATTACHMENTS 
/ TODO
/t
BakkerServiceOrderProcessor(ServiceOrderProcessorImpl).generate(Node, ServiceOrderVO, ShipmentItemVO) line: 144	
				addAttachments(aNode, aServiceOrderVO, FileObject.RELATED_OBJECT_TYPE_SERVICE_ORDER);
/d
			if (Boolean.parseBoolean(ApplicationPropertyManager.getInstance().getModuleProperty("oms", "export.service.order.with.events",
					Boolean.FALSE.toString()))) {
/j
				addLogisticsOrderEvents(aServiceOrderVO, aNode);
/s
BakkerServiceOrderProcessor(ServiceOrderProcessorImpl).addLogisticsOrderEvents(ServiceOrderVO, Node) line: 256	
		LogisticsOrderEventProcessor proc = new LogisticsOrderEventProcessor();
		EventService serv = MpoBeanFactory.getBean(EventService.class);
		for (EventVO event : serv.getEventsForServiceOrder(aServiceOrderVO.getSystemId())) {
/n
/t
BakkerServiceOrderProcessor(ServiceOrderProcessorImpl).generate(Node, ServiceOrderVO, ShipmentItemVO) line: 147	
				addLogisticsOrderEvents(aServiceOrderVO, aNode);
/d
			if (Boolean.parseBoolean(ApplicationPropertyManager.getInstance().getModuleProperty("oms", "export.service.order.with.containers",
					Boolean.FALSE.toString()))) {
/n
				addContainers(aServiceOrderVO, aNode);
/n
/t
ServiceOrderMsgProcessor.generate(Document, ServiceOrderVO, ShipmentItemVO) line: 71	
			getServiceOrderProcessor().generate(myServiceOrderNode, aServiceOrderVO, aShipmentItem);
/d
			if (ApplicationPropertyManager.getInstance().getModuleProperty("oms", "serviceorder.export.customerorder", false)) {
				exportCustomerOrders(myBodyNode, aServiceOrderVO);

/ we gaan maken	, 
    <mtc:CUSTOMER_ORDER>
      <mtccore:PROCESSING_DETAILS>
        <mtccore:PURPOSE_CODE>00</mtccore:PURPOSE_CODE>
      </mtccore:PROCESSING_DETAILS>
      <mtccore:CUSTOMER_ORDER_BODY>
        <mtccore:CUSTOMER_ORDER_ID>CO000000052</mtccore:CUSTOMER_ORDER_ID>
        <mtccore:ORGANIZATION_ID>BAKKER</mtccore:ORGANIZATION_ID>
        <mtccore:CREATION_DATE>2017-02-17T15:50:53.531+01:00</mtccore:CREATION_DATE>
        <mtccore:CUSTOMER_ORDER_TYPE>CIB</mtccore:CUSTOMER_ORDER_TYPE>
        <mtccore:BUYER_ORDER_NUMBER>DUMMY</mtccore:BUYER_ORDER_NUMBER>
        <mtccore:SELLER_ORDER_NUMBER/>
        <mtccore:HOLD_STATUS>REVIEW_HOLD</mtccore:HOLD_STATUS>											<-
        <mtccore:BUYER>
          <mtccore:PARTY_ID>TEMP-ID</mtccore:PARTY_ID>
          <mtccore:PARTY_TYPE>NA</mtccore:PARTY_TYPE>
        </mtccore:BUYER>
        <mtccore:SELLER>
          <mtccore:PARTY_ID>TEMP-ID</mtccore:PARTY_ID>
          <mtccore:PARTY_TYPE>NA</mtccore:PARTY_TYPE>
          <mtccore:NAME>Extern</mtccore:NAME>
        </mtccore:SELLER>
        <mtccore:REFERENCE>
          <mtccore:VALUE>false</mtccore:VALUE>
          <mtccore:QUALIFIER>BillingBlock</mtccore:QUALIFIER>
        </mtccore:REFERENCE>
        <mtccore:REFERENCE>
          <mtccore:VALUE>false</mtccore:VALUE>
          <mtccore:QUALIFIER>CancelledAfterCutoff</mtccore:QUALIFIER>
        </mtccore:REFERENCE>
        <mtccore:REFERENCE>
          <mtccore:VALUE>false</mtccore:VALUE>
          <mtccore:QUALIFIER>OrderSplit</mtccore:QUALIFIER>
        </mtccore:REFERENCE>
        <mtccore:REFERENCE>
          <mtccore:VALUE>7</mtccore:VALUE>
          <mtccore:QUALIFIER>DivisionNr</mtccore:QUALIFIER>
        </mtccore:REFERENCE>
        <mtccore:REFERENCE>
          <mtccore:VALUE>false</mtccore:VALUE>
          <mtccore:QUALIFIER>PrecalculatedPrice</mtccore:QUALIFIER>
        </mtccore:REFERENCE>
        <mtccore:REFERENCE>
          <mtccore:VALUE>false</mtccore:VALUE>
          <mtccore:QUALIFIER>DieselSurcharge</mtccore:QUALIFIER>
        </mtccore:REFERENCE>
        <mtccore:REFERENCE>
          <mtccore:VALUE>false</mtccore:VALUE>
          <mtccore:QUALIFIER>PriceBasedOnGroundSlot</mtccore:QUALIFIER>
        </mtccore:REFERENCE>
        <mtccore:REFERENCE>
          <mtccore:VALUE>32</mtccore:VALUE>
          <mtccore:QUALIFIER>RequestedDispatchUnits</mtccore:QUALIFIER>
        </mtccore:REFERENCE>
      </mtccore:CUSTOMER_ORDER_BODY>
      <mtccore:CUSTOMER_ORDER_LINE>
        <mtccore:CUSTOMER_ORDER_LINE_ID>1</mtccore:CUSTOMER_ORDER_LINE_ID>
        <mtccore:BUYER_ORDER_LINE_NUMBER/>
        <mtccore:SELLER_ORDER_LINE_NUMBER/>
        <mtccore:PRODUCT>
          <mtccore:PRODUCT_ID>DEFAULT</mtccore:PRODUCT_ID>
          <mtccore:DESCRIPTION>GECONDITIONEERD</mtccore:DESCRIPTION>
          <mtccore:WEIGHT>
            <mtccore:MEASUREMENT_VALUE>0.00000</mtccore:MEASUREMENT_VALUE>
            <mtccore:UNIT_OF_MEASUREMENT>KG</mtccore:UNIT_OF_MEASUREMENT>
          </mtccore:WEIGHT>
        </mtccore:PRODUCT>
        <mtccore:QUANTITY>32.00000</mtccore:QUANTITY>
        <mtccore:FROM_PARTY>
          <mtccore:PARTY_ID>TEMP-ID</mtccore:PARTY_ID>
          <mtccore:PARTY_TYPE>NA</mtccore:PARTY_TYPE>
        </mtccore:FROM_PARTY>
        <mtccore:TO_PARTY>
          <mtccore:PARTY_ID>33784</mtccore:PARTY_ID>
          <mtccore:PARTY_TYPE>NA</mtccore:PARTY_TYPE>
          <mtccore:NAME2>BAKKER LOGISTIEK GROEP</mtccore:NAME2>
          <mtccore:ADDRESS>HANDELSWEG</mtccore:ADDRESS>
          <mtccore:CITY>ZEEWOLDE</mtccore:CITY>
          <mtccore:POSTAL_CODE>3899AB</mtccore:POSTAL_CODE>
          <mtccore:COUNTRY>
            <mtccore:COUNTRY_CODE>NL</mtccore:COUNTRY_CODE>
            <mtccore:COUNTRY_NAME>Netherlands</mtccore:COUNTRY_NAME>
          </mtccore:COUNTRY>
          <mtccore:LONGITUDE>5.513050</mtccore:LONGITUDE>
          <mtccore:LATITUDE>52.356260</mtccore:LATITUDE>
          <mtccore:PARTY_REFERENCE>
            <mtccore:VALUE>26</mtccore:VALUE>
            <mtccore:QUALIFIER>REFERENCE1</mtccore:QUALIFIER>
          </mtccore:PARTY_REFERENCE>
        </mtccore:TO_PARTY>
        <mtccore:BILL_TO_PARTY>
          <mtccore:PARTY_ID>TEMP-ID</mtccore:PARTY_ID>
          <mtccore:PARTY_TYPE>NA</mtccore:PARTY_TYPE>
        </mtccore:BILL_TO_PARTY>
        <mtccore:REQUESTED_START_AFTER>2016-12-30T00:01:00.000+01:00</mtccore:REQUESTED_START_AFTER>
        <mtccore:REQUESTED_START_BEFORE>2016-12-30T23:59:00.000+01:00</mtccore:REQUESTED_START_BEFORE>
        <mtccore:REQUESTED_END_AFTER>2016-12-30T23:59:00.000+01:00</mtccore:REQUESTED_END_AFTER>
        <mtccore:REQUESTED_END_BEFORE>2016-12-30T23:59:00.000+01:00</mtccore:REQUESTED_END_BEFORE>
        <mtccore:SHIPMENT_TYPE>CLTR</mtccore:SHIPMENT_TYPE>
        <mtccore:SERVICE_LEVEL>STANDARD</mtccore:SERVICE_LEVEL>
        <mtccore:INCO_TERM>
          <mtccore:CODE>DEFAULT</mtccore:CODE>
          <mtccore:VERSION>DEFAULT</mtccore:VERSION>
        </mtccore:INCO_TERM>
        <mtccore:REFERENCE>
          <mtccore:VALUE>NL-38XX</mtccore:VALUE>
          <mtccore:QUALIFIER>ToTransportZoneArea</mtccore:QUALIFIER>
        </mtccore:REFERENCE>
        <mtccore:REFERENCE>
          <mtccore:VALUE>0</mtccore:VALUE>
          <mtccore:QUALIFIER>Distance</mtccore:QUALIFIER>
        </mtccore:REFERENCE>
        <mtccore:REFERENCE>
          <mtccore:VALUE>20.0</mtccore:VALUE>
          <mtccore:QUALIFIER>TemperatureMax</mtccore:QUALIFIER>
        </mtccore:REFERENCE>
        <mtccore:REFERENCE>
          <mtccore:VALUE>12.0</mtccore:VALUE>
          <mtccore:QUALIFIER>TemperatureMin</mtccore:QUALIFIER>
        </mtccore:REFERENCE>
        <mtccore:REFERENCE>
          <mtccore:VALUE>false</mtccore:VALUE>
          <mtccore:QUALIFIER>NonRegularDay</mtccore:QUALIFIER>
        </mtccore:REFERENCE>
        <mtccore:REFERENCE>
          <mtccore:VALUE>false</mtccore:VALUE>
          <mtccore:QUALIFIER>ExchangeEmpties</mtccore:QUALIFIER>
        </mtccore:REFERENCE>
        <mtccore:REFERENCE>
          <mtccore:VALUE>02</mtccore:VALUE>
          <mtccore:QUALIFIER>TemperatureClassCode</mtccore:QUALIFIER>
        </mtccore:REFERENCE>
        <mtccore:REFERENCE>
          <mtccore:VALUE>false</mtccore:VALUE>
          <mtccore:QUALIFIER>PartyTunnelRate</mtccore:QUALIFIER>
        </mtccore:REFERENCE>
        <mtccore:REFERENCE>
          <mtccore:VALUE>false</mtccore:VALUE>
          <mtccore:QUALIFIER>TimeSpecific</mtccore:QUALIFIER>
        </mtccore:REFERENCE>
        <mtccore:REFERENCE>
          <mtccore:VALUE>0</mtccore:VALUE>
          <mtccore:QUALIFIER>Empties</mtccore:QUALIFIER>
        </mtccore:REFERENCE>
        <mtccore:REFERENCE>
          <mtccore:VALUE>false</mtccore:VALUE>
          <mtccore:QUALIFIER>PricingPerKilo</mtccore:QUALIFIER>
        </mtccore:REFERENCE>
        <mtccore:REFERENCE>
          <mtccore:VALUE>0</mtccore:VALUE>
          <mtccore:QUALIFIER>WeekendDelivery</mtccore:QUALIFIER>
        </mtccore:REFERENCE>
        <mtccore:REFERENCE>
          <mtccore:VALUE>GECONDITIONEERD</mtccore:VALUE>
          <mtccore:QUALIFIER>TemperatureClassDescription</mtccore:QUALIFIER>
        </mtccore:REFERENCE>
        <mtccore:REFERENCE>
          <mtccore:VALUE>NL</mtccore:VALUE>
          <mtccore:QUALIFIER>ToTransportZoneCountry</mtccore:QUALIFIER>
        </mtccore:REFERENCE>
        <mtccore:SHIPMENT>
          <mtccore:SHIPMENT_ORDER_ID>SH000027245</mtccore:SHIPMENT_ORDER_ID>
          <mtccore:ORGANIZATION_ID>BAKKER</mtccore:ORGANIZATION_ID>
          <mtccore:PRODUCT_ITEM_ID>010</mtccore:PRODUCT_ITEM_ID>
        </mtccore:SHIPMENT>
      </mtccore:CUSTOMER_ORDER_LINE>
    </mtc:CUSTOMER_ORDER>
  </mtc:body>
</mtc:SERVICE_ORDER_MSG>

/s
ServiceOrderMsgProcessor.exportCustomerOrders(Node, ServiceOrderVO) line: 105	


/ Einde DEBUG GENERATE SERVICEORDER (NO CUSTOMERORDER)	















	






/ we zien	, 
http://localhost:8161/admin/browse.jsp?JMSDestination=MPOBJECTS.FROM.BAKKER
ID:localhost.localdomain-38498-1488204734088-6:6:1:1:1		Persistent	4	false		2017-02-27 15:22:06:249 CET		Delete
<?xml version="1.0" encoding="UTF-8"?>
<mtc:SERVICE_ORDER_MSG xmlns:mtc="http://system.mp-objects.com/schemas/MTC/ServiceOrder/V1/ServiceOrder.xsd" xmlns:m...
/ 1 lange regel	, 
/ TODO

/ Einde LOCAL EXPORT VIA ACTION  

/ DEBUG IMPORT 

/ In de export hebben we	, 
[eric@localhost bin]$ less ~/tmp/copy_study/msg20160307_pretty.txt 
      <mtccore:CUSTOMER_ORDER_BODY>
       <mtccore:SELLER>
          <mtccore:PARTY_ID>TEMP-ID</mtccore:PARTY_ID>
          <mtccore:PARTY_TYPE>NA</mtccore:PARTY_TYPE>
          <mtccore:NAME>Extern</mtccore:NAME>
        </mtccore:SELLER>
        <mtccore:HOLD_STATUS>REVIEW_HOLD</mtccore:HOLD_STATUS>
        <mtccore:REFERENCE>
          <mtccore:VALUE>false</mtccore:VALUE>
          <mtccore:QUALIFIER>BillingBlock</mtccore:QUALIFIER>
        </mtccore:REFERENCE>
      </mtccore:CUSTOMER_ORDER_BODY>
      <mtccore:CUSTOMER_ORDER_LINE>
		...
      <mtccore:CUSTOMER_ORDER_LINE>
      </mtccore:CUSTOMER_ORDER_LINE>
    </mtc:CUSTOMER_ORDER>
  </mtc:body>
</mtc:SERVICE_ORDER_MSG>

/ Dat moeten we in de import ook doen	, 

/ in jboss dir	, 
$ vi conf/jmsbrokers/activemq.properties

java.naming.factory.url.pkgs=org.jnp.interfaces
java.naming.factory.initial=org.apache.activemq.jndi.ActiveMQInitialContextFactory
java.naming.provider.url=tcp://localhost:61616
queueConnectionFactory=QueueConnectionFactory
topicConnectionFactory=TopicConnectionFactory
queue.MPOBJECTS.TO.BAKKER=MPOBJECTS.TO.BAKKER
queue.MPOBJECTS.FROM.BAKKER = MPOBJECTS.FROM.BAKKER
queue.BAKKER.SHIPMENTORDERS = BAKKER.SHIPMENTORDERS
queue.BAKKER.BAKKER.EVENTS = BAKKER.BAKKER.EVENTS
/ OK

/ Maar op bli-app-t	, 
[vanderveldene@bli-app-t ~]$ less /local/apps/jboss-4.0.5.GA/server/bakker/conf/jmsbrokers/default.properties 
java.naming.factory.url.pkgs=org.jnp.interfaces
java.naming.factory.initial=org.apache.activemq.jndi.ActiveMQInitialContextFactory
java.naming.provider.url=tcp://bli-int-t:61616
queueConnectionFactory=QueueConnectionFactory
topicConnectionFactory=TopicConnectionFactory
jndiQueueNamePrefix=dynamicQueues/
/ TODO
/ Dit werkt WH niet local	, 

/ we import	, 

[eric@localhost 14]$ pwd
/home/eric/Integration/Bakker/imports/CustomerOrder/2017-03/14
[eric@localhost 14]$ cp 82727e42-ebe7-4966-afe6-21d0b654cacf 82727e42-ebe7-4966-afe6-21d0b654cacferic1		/ set eric1 erachter	, 

[eric@localhost 2017-03]$ vi 14/82727e42-ebe7-4966-afe6-21d0b654cacferic1
<mtc:CUSTOMER_ORDER_MSG >
	<mtc:header>
      <mtccore:typ>CUSTOMER_ORDER_MSG</mtccore:typ>
      <mtccore:mid>82727e42-ebe7-4966-afe6-21d0b654cacferic1</mtccore:mid>				<- unique	, 	
   </mtc:header>
   <mtc:body>
      <mtc:CUSTOMER_ORDER>
         <mtccore:CUSTOMER_ORDER_BODY>
            <mtccore:CUSTOMER_ORDER_ID>CO000032313eric1</mtccore:CUSTOMER_ORDER_ID>		<- unique	, 

/ stack	,
/s
	JMSMessageSendProxy.send(JMSMessageVO) line: 16	
/cb
	JMSMessageSendAction.handleSave() line: 59	
		Map<String, String> myProperties = new HashMap<String, String>();

		myProperties.put("operation", "sendJMSMessage");

		JMSMessageVO myVO = (JMSMessageVO) getValueObject();
		myVO.setProperties(myProperties);
		getJMSMessageSendProxy().send(myVO);
/cb
	JMSMessageSendAction(AbstractSaveAction).act() line: 69	
			handleSave();
/cb
	JMSMessageSendAction(AbstractAction).act(Redirector, SourceResolver, Map, String, Parameters) line: 171	
				Map myMap = act();
/cb
	... / cocoon	, 
/debug	, 
/s
JMSMessageSendProxy.send(JMSMessageVO) line: 16	
aVO	JMSMessageVO  (id=22768)	
	theConfigurationVO	JMSConfigurationVO  (id=22786)	 / JMSMessageVO {Full destination:default/MPOBJECTS.TO.BAKKER}
	theMessage ...
		String brokerId = aVO.getServerId();	/ default

		PureJMSClient client = new PureJMSClient(brokerId.trim());
/s
/**
 * A pure JMS client. Multiple brokers are supported by provider the correct broker id. The default broker ID is called
 * {@value #DEFAULT_BROKER_ID}.
 * 
 * <p>
 * The configuration of the brokers is a properties file in <code>jboss-?-?/{server}/conf/jmsbrokers</code> directory.
 * The properties file should be called <code>{brokerid}.properties</code>. You can inherit the values from an other
 * broker by specifying a property called <code>include={brokerid}</code>.
 * 
 * <p>
 * The properties file should contain the properties needed to connect to the JMS broker, these are the same as the
 * properties you would specify in the JBoss XML configuration for the JMS provider. Additionally you need to specify
 * the names for the connection factories using the properties {@value #QUEUE_CONNECTION_FACTORY_PROPERTY},
 * {@value #TOPIC_CONNECTION_FACTORY_PROPERTY} and {@value #CONNECTION_FACTORY_PROPERTY}.
 * 
 * <p>
 * For example:
 * 
 * <pre>
 * include=_global_
 * java.naming.factory.url.pkgs=org.jboss.naming:org.jnp.interfaces:com.tibco.tibjms.naming
 * java.naming.factory.initial=com.tibco.tibjms.naming.TibjmsInitialContextFactory
 * java.naming.provider.url=tibjmsnaming://localhost:7222
 * queueConnectionFactory=XAQueueConnectionFactory
 * topicConnectionFactory=XATopicConnectionFactory
 * </pre>
 */
PureJMSClient.<init>(String) line: 228	
		jmsBrokerId = aJmsBrokerId;			/ "default"
/t
JMSMessageSendProxy.send(JMSMessageVO) line: 22	
		PureJMSClient client = new PureJMSClient(brokerId.trim());
/d
			client.setDestination(aVO.getDestination(), aVO.getDestinationType());
/s
JMSMessageVO.getDestination() line: 51	
this	JMSConfigurationVO  (id=26068)	
	performanceMonitorService	null	
	serverId	"default" (id=26030)	
	systemId	0	
	theDestination	"MPOBJECTS.TO.BAKKER" (id=26100)	
	theDestinationType	JMSDestinationType  (id=26159)	
		name	"QUEUE" (id=26189)	
		ordinal	0	
	thePassword	"(null)" (id=26164)	
	theUsername	"(null)" (id=26169)	

		return theConfigurationVO.getDestination();	
"MPOBJECTS.TO.BAKKER"
/t
/s
JMSMessageVO.getDestinationType() line: 55	
		return theConfigurationVO.getDestinationType();	
theDestinationType	JMSDestinationType  (id=26159)	
	name	"QUEUE" (id=26189)	
	ordinal	0	
/t
JMSMessageSendProxy.send(JMSMessageVO) line: 22	
			client.setDestination(aVO.getDestination(), aVO.getDestinationType());
/pd
/s
PureJMSClient.setDestination(String, JMSDestinationType) line: 416	
aDestination	"MPOBJECTS.TO.BAKKER" (id=22569)	
aDestinationType	com.mpobjects.interfacing.jmsmessage.model.JMSDestinationType  (id=22570)	

		destination = aDestination;
		destinationType = aDestinationType;
		cleanJmsEnvironment();
/s
	/**
	 * Invalidate the JMS environment. This will cause all JMS connection elements to be reinitialized when the next
	 * message is send.
	 * 
PureJMSClient.cleanJmsEnvironment() line: 253	
		if (!isCleaning.getAndSet(true)) {
/j
			messageProducer = null;
			jmsDestination = null;
			connectionFactory = null;
			if (jmsSession != null) {
/n
			if (jmsConnection != null) {
/n
			context = null;
			brokerConfig = null;
			isCleaning.set(false);
/t
JMSMessageSendProxy.send(JMSMessageVO) line: 23	
			client.setDestination(aVO.getDestination(), aVO.getDestinationType());
/d
			client.setPriority(aVO.getPriority());
this	JMSMessageSendProxy  (id=26021)	
brokerId	"default" (id=26030)	
client	PureJMSClient  (id=26031)	
aVO	JMSMessageVO  (id=26049)	
	performanceMonitorService	null	
	priority	4	
	properties	HashMap  (id=26060)	
		[0]	HashMap$Entry  (id=27535)	
			key	"operation" (id=27592)	
			value	"sendJMSMessage" (id=27593)	
	systemId	0	
	theConfigurationVO	JMSConfigurationVO  (id=26068)	
		performanceMonitorService	null	
		serverId	"default" (id=26030)	
		systemId	0	
		theDestination	"MPOBJECTS.TO.BAKKER" (id=26100)	
		theDestinationType	JMSDestinationType  (id=26159)	
		thePassword	"(null)" (id=26164)	
		theUsername	"(null)" (id=26169)	
	theMessage ...

			client.setProperties(aVO.getProperties());
{operation=sendJMSMessage}
			client.sendMessage(aVO.getMessage());
this	JMSMessageSendProxy  (id=26021)	
client	PureJMSClient  (id=26031)	
	$SWITCH_TABLE$com$mpobjects$interfacing$jmsmessage$model$JMSDestinationType	(id=27654)	
	$SWITCH_TABLE$com$mpobjects$interfacing$jmsmessage$model$JMSMessageType	(id=27659)	
	brokerConfig	null	
	connectionFactory	null	
	context	null	
	destination	"MPOBJECTS.TO.BAKKER" (id=26100)	
	destinationType	JMSDestinationType  (id=26159)	
	exceptionListener	null	
	isCleaning	AtomicBoolean  (id=26040)	
	jmsBrokerId	"default" (id=26030)	
	jmsConnection	null	
	jmsDestination	null	
	jmsSession	null	
	maxRetries	1	
	messageProducer	null	
	priority	4	
	properties	HashMap  (id=27720)	
		[0]	HashMap$Entry  (id=27735)	
			key	"operation" (id=27592)	
			value	"sendJMSMessage" (id=27593)	
	retryCount	0	
/s
PureJMSClient.sendMessage(String) line: 404	
		sendMessage(aMessagePayload, JMSMessageType.TEXT);
/s
PureJMSClient.sendMessage(Object, JMSMessageType) line: 336	
		retryCount = 0;
		while (retryCount <= maxRetries) {
/j
0<1
			Session ses = getSession();
/s
PureJMSClient.getSession() line: 306	
		ConnectionFactory factory = getConnectionFactory();
/s
PureJMSClient.getConnectionFactory() line: 495	
		getContext();
/s
PureJMSClient.getContext() line: 547	
			context = new InitialContext(getBrokerConfig());
/s
PureJMSClient.getBrokerConfig() line: 478	
		brokerConfig = new Properties();
		String brokerId = jmsBrokerId;		/ "default"

		while (brokerId != null) {
			brokerConfig.remove(PROPERTIES_INCLUDE);	/ PROPERTIES_INCLUDE="include"		, is er nu niet	, 
			loadProperties(brokerConfig, JBossEnvironment.getConfigurationRoot() + "/conf/jmsbrokers/" + brokerId + ".properties");
/s
JBossEnvironment.getConfigurationRoot() line: 17	
	protected static final String CONFIGURATION_ROOT_DIR = "jboss.server.home.dir";
		return System.getProperty(CONFIGURATION_ROOT_DIR);

/ Intermezzo

/ Als je jboss start, is jboss.server.home.dir een system property	, 

/ er zijn ook environment properties, met System.getenv()	,  
{TERM=xterm-256color, JAVA_HOME=/home/eric/Devel/Java/jdk1.6.0_45/, IMSETTINGS_MODULE=no...

/ Einde Intermezzo

/t
			loadProperties(brokerConfig, JBossEnvironment.getConfigurationRoot() + "/conf/jmsbrokers/" + brokerId + ".properties");
brokerId="default"
/d
this	PureJMSClient  (id=22818)	
	brokerConfig	Properties  (id=22825)	
{include=activemq}
			brokerId = brokerConfig.getProperty(PROPERTIES_INCLUDE, null);
activemq
/ volgende, 	
		while (brokerId != null) {
			brokerConfig.remove(PROPERTIES_INCLUDE);	/ rm include=activemq
{}
			loadProperties(brokerConfig, JBossEnvironment.getConfigurationRoot() + "/conf/jmsbrokers/" + brokerId + ".properties");
brokerId=activemq
this	PureJMSClient  (id=22818)	
	brokerConfig	Properties  (id=22825)	
{java.naming.factory.initial=org.apache.activemq.jndi.ActiveMQInitialContextFactory,
 queue.BAKKER.BAKKER.EVENTS=BAKKER.BAKKER.EVENTS,
 topicConnectionFactory=TopicConnectionFactory,
 queueConnectionFactory=QueueConnectionFactory,
 queue.MPOBJECTS.FROM.BAKKER=MPOBJECTS.FROM.BAKKER,
 queue.BAKKER.SHIPMENTORDERS=BAKKER.SHIPMENTORDERS,
 java.naming.provider.url=tcp://localhost:61616,
 java.naming.factory.url.pkgs=org.jnp.interfaces,
 queue.MPOBJECTS.TO.BAKKER=MPOBJECTS.TO.BAKKER}

			brokerId = brokerConfig.getProperty(PROPERTIES_INCLUDE, null);
null
/ Geen volgende,	 
		return brokerConfig;
/t
PureJMSClient.getContext() line: 547	
			context = new InitialContext(getBrokerConfig());
/pd
/s
InitialContext.<init>(Hashtable<?,?>) line: 216	
        init(environment);
/s
InitialContext.init(Hashtable<?,?>) line: 242	
            getDefaultInitCtx();
/s
InitialContext.getDefaultInitCtx() line: 307	
this	javax.naming.InitialContext  (id=22201)	
	defaultInitCtx	org.apache.activemq.jndi.ReadOnlyContext  (id=22219)	
	gotDefault	false	
	myProps	java.util.Properties  (id=22203)	

            defaultInitCtx = NamingManager.getInitialContext(myProps);
/s
NamingManager.getInitialContext(Hashtable<?,?>) line: 684	
        return factory.getInitialContext(env);
/s
ActiveMQInitialContextFactory.getInitialContext(Hashtable) line: 79			/ we add in eclipse activemq-parent-5.10.1-source-release.zip

        String[] names = getConnectionFactoryNames(environment);
environment=
{java.naming.factory.initial=org.apache.activemq.jndi.ActiveMQInitialContextFactory,
 queue.BAKKER.BAKKER.EVENTS=BAKKER.BAKKER.EVENTS,
 topicConnectionFactory=TopicConnectionFactory,
 queueConnectionFactory=QueueConnectionFactory,
 queue.MPOBJECTS.FROM.BAKKER=MPOBJECTS.FROM.BAKKER,
 queue.BAKKER.SHIPMENTORDERS=BAKKER.SHIPMENTORDERS,
 java.naming.provider.url=tcp://localhost:61616,
 java.naming.factory.url.pkgs=org.jnp.interfaces:org.jboss.naming:org.jnp.interfaces,
 queue.MPOBJECTS.TO.BAKKER=MPOBJECTS.TO.BAKKER}
names=
[ConnectionFactory, XAConnectionFactory, QueueConnectionFactory, TopicConnectionFactory]

        for (int i = 0; i < names.length; i++) {
            String name = names[i];
                factory = createConnectionFactory(name, environment);
            data.put(name, factory);
data=
{QueueConnectionFactory=org.apache.activemq.ActiveMQConnectionFactory@19fc77aa,
 XAConnectionFactory=org.apache.activemq.ActiveMQXAConnectionFactory@e14473a,
 TopicConnectionFactory=org.apache.activemq.ActiveMQConnectionFactory@5550380e,
 ConnectionFactory=org.apache.activemq.ActiveMQConnectionFactory@5904ae4}

        createQueues(data, environment);
/s
ActiveMQInitialContextFactory.createQueues(Map<String,Object>, Hashtable) line: 173	
        for (Iterator iter = environment.entrySet().iterator(); iter.hasNext();) {
            Map.Entry entry = (Map.Entry)iter.next();
            String key = entry.getKey().toString();
            if (key.startsWith(queuePrefix)) {								/ queuePrefix="queue."
/n voor java.naming.factory.initial
/j voor queue.BAKKER.BAKKER.EVENTS
/n topicConnectionFactory
/n queueConnectionFactory
/j queue.MPOBJECTS.FROM.BAKKER
...
               String jndiName = key.substring(queuePrefix.length());
BAKKER.BAKKER.EVENTS
MPOBJECTS.FROM.BAKKER
...
                data.put(jndiName, createQueue(entry.getValue().toString()));
entry.getValue().toString()="BAKKER.BAKKER.EVENTS"									/ see in environment hierboven	,
entry.getValue().toString()="MPOBJECTS.FROM.BAKKER"									/ see in environment hierboven	,
...
/ aan het eind	, 
/data=
{QueueConnectionFactory=org.apache.activemq.ActiveMQConnectionFactory@19fc77aa,
 MPOBJECTS.TO.BAKKER=queue://MPOBJECTS.TO.BAKKER,
 XAConnectionFactory=org.apache.activemq.ActiveMQXAConnectionFactory@e14473a,
 MPOBJECTS.FROM.BAKKER=queue://MPOBJECTS.FROM.BAKKER,
 TopicConnectionFactory=org.apache.activemq.ActiveMQConnectionFactory@5550380e,
 ConnectionFactory=org.apache.activemq.ActiveMQConnectionFactory@5904ae4,
 BAKKER.SHIPMENTORDERS=queue://BAKKER.SHIPMENTORDERS,
 BAKKER.BAKKER.EVENTS=queue://BAKKER.BAKKER.EVENTS}
/t
ActiveMQInitialContextFactory.getInitialContext(Hashtable) line: 80	
        createQueues(data, environment);
/d
        createTopics(data, environment);
        data.put("dynamicQueues", new LazyCreateContext() {
            private static final long serialVersionUID = 6503881346214855588L;

            protected Object createEntry(String name) {
                return new ActiveMQQueue(name);
            }
        });
        data.put("dynamicTopics", new LazyCreateContext() {
            private static final long serialVersionUID = 2019166796234979615L;

            protected Object createEntry(String name) {
                return new ActiveMQTopic(name);
            }
        });
data=
{QueueConnectionFactory=org.apache.activemq.ActiveMQConnectionFactory@19fc77aa,
 MPOBJECTS.TO.BAKKER=queue://MPOBJECTS.TO.BAKKER,
 dynamicTopics=org.apache.activemq.jndi.ActiveMQInitialContextFactory$2@2bb78b75,
 XAConnectionFactory=org.apache.activemq.ActiveMQXAConnectionFactory@e14473a,
 MPOBJECTS.FROM.BAKKER=queue://MPOBJECTS.FROM.BAKKER,
 TopicConnectionFactory=org.apache.activemq.ActiveMQConnectionFactory@5550380e,
 ConnectionFactory=org.apache.activemq.ActiveMQConnectionFactory@5904ae4,
 BAKKER.SHIPMENTORDERS=queue://BAKKER.SHIPMENTORDERS,
 BAKKER.BAKKER.EVENTS=queue://BAKKER.BAKKER.EVENTS,
 dynamicQueues=org.apache.activemq.jndi.ActiveMQInitialContextFactory$1@1f24c4bf}

        return createContext(environment, data);
/s
ActiveMQInitialContextFactory.createContext(Hashtable, Map<String,Object>) line: 125	
        return new ReadOnlyContext(environment, data);		/ environment=config	, data=values
/s
ReadOnlyContext.<init>(Hashtable, Map<String,Object>) line: 97	
/=
    public ReadOnlyContext(Hashtable environment, Map<String, Object> bindings) {
            this.environment = new Hashtable<String, Object>(environment);	
        if (bindings != null) {
            for (Map.Entry<String, Object> binding : bindings.entrySet()) {
                try {
                    internalBind(binding.getKey(), binding.getValue());		/ this.bindings
this	org.apache.activemq.jndi.ReadOnlyContext  (id=22807)	
	bindings	java.util.HashMap  (id=22837)							/ values	,
{BAKKER.SHIPMENTORDERS=queue://BAKKER.SHIPMENTORDERS,
 dynamicTopics=org.apache.activemq.jndi.ActiveMQInitialContextFactory$2@2bb78b75,
 TopicConnectionFactory=org.apache.activemq.ActiveMQConnectionFactory@5550380e,
 MPOBJECTS.TO.BAKKER=queue://MPOBJECTS.TO.BAKKER,
 ConnectionFactory=org.apache.activemq.ActiveMQConnectionFactory@5904ae4,
 MPOBJECTS.FROM.BAKKER=queue://MPOBJECTS.FROM.BAKKER,
 XAConnectionFactory=org.apache.activemq.ActiveMQXAConnectionFactory@e14473a,
 dynamicQueues=org.apache.activemq.jndi.ActiveMQInitialContextFactory$1@1f24c4bf,
 BAKKER.BAKKER.EVENTS=queue://BAKKER.BAKKER.EVENTS,
 QueueConnectionFactory=org.apache.activemq.ActiveMQConnectionFactory@19fc77aa}

	environment	java.util.Hashtable  (id=22833)	
{queue.MPOBJECTS.TO.BAKKER=MPOBJECTS.TO.BAKKER,							/ keys	,
 topicConnectionFactory=TopicConnectionFactory,
 java.naming.factory.url.pkgs=org.jnp.interfaces:org.jboss.naming:org.jnp.interfaces,
 java.naming.provider.url=tcp://localhost:61616,
 queue.MPOBJECTS.FROM.BAKKER=MPOBJECTS.FROM.BAKKER,
 queue.BAKKER.BAKKER.EVENTS=BAKKER.BAKKER.EVENTS,
 queueConnectionFactory=QueueConnectionFactory,
 queue.BAKKER.SHIPMENTORDERS=BAKKER.SHIPMENTORDERS,
 java.naming.factory.initial=org.apache.activemq.jndi.ActiveMQInitialContextFactory}

/t
PureJMSClient.getConnectionFactory() line: 499	
		getContext();
/d
this	PureJMSClient  (id=22818)	
	context	InitialContext  (id=24354)	
		defaultInitCtx	ReadOnlyContext  (id=24378)	/ org.apache.activemq.jndi.ReadOnlyContext@3acc4409
			bindings	java.util.HashMap  (id=23589)	
{BAKKER.SHIPMENTORDERS=queue://BAKKER.SHIPMENTORDERS,								/ deze wordt create of found TODO, als de key queue.MPOBJECTS.FROM.BAKKER er is	, 
 dynamicTopics=org.apache.activemq.jndi.ActiveMQInitialContextFactory$2@647a25bf,
 TopicConnectionFactory=org.apache.activemq.ActiveMQConnectionFactory@f445222,
 MPOBJECTS.TO.BAKKER=queue://MPOBJECTS.TO.BAKKER,
 ConnectionFactory=org.apache.activemq.ActiveMQConnectionFactory@4e6c3e02,
 MPOBJECTS.FROM.BAKKER=queue://MPOBJECTS.FROM.BAKKER,
 XAConnectionFactory=org.apache.activemq.ActiveMQXAConnectionFactory@245b1d87,
 dynamicQueues=org.apache.activemq.jndi.ActiveMQInitialContextFactory$1@59ef9cb6,
 BAKKER.BAKKER.EVENTS=queue://BAKKER.BAKKER.EVENTS,
 QueueConnectionFactory=org.apache.activemq.ActiveMQConnectionFactory@2199edb}
			environment	java.util.Hashtable  (id=23590)	
			frozen	true	
			nameInNamespace	"" (id=23453)	
			treeBindings	java.util.HashMap  (id=23591)	
		gotDefault	true	
		myProps	Properties  (id=24379)	/=
{java.naming.factory.initial=org.apache.activemq.jndi.ActiveMQInitialContextFactory,		/ Dit is config	, activemq heeft bijv queue.MPOBJECTS.FROM.BAKKER als key nodig voor lookup	,
 queue.BAKKER.BAKKER.EVENTS=BAKKER.BAKKER.EVENTS,
 topicConnectionFactory=TopicConnectionFactory,
 queueConnectionFactory=QueueConnectionFactory,
 queue.MPOBJECTS.FROM.BAKKER=MPOBJECTS.FROM.BAKKER,
 queue.BAKKER.SHIPMENTORDERS=BAKKER.SHIPMENTORDERS,
 java.naming.provider.url=tcp://localhost:61616,
 java.naming.factory.url.pkgs=org.jnp.interfaces,
 queue.MPOBJECTS.TO.BAKKER=MPOBJECTS.TO.BAKKER}


		Properties config = getBrokerConfig();
/ dezelfde als in context	, 
		switch (destinationType) {
			case QUEUE:
				factoryName = config.getProperty(QUEUE_CONNECTION_FACTORY_PROPERTY);	/ QUEUE_CONNECTION_FACTORY_PROPERTY="queueConnectionFactory"
"QueueConnectionFactory"
				break;
		try {
			connectionFactory = (ConnectionFactory) getContext().lookup(factoryName);
this	com.mpobjects.interfacing.jmsmessage.model.PureJMSClient  (id=22474)	
	context	javax.naming.InitialContext  (id=22501)	
		defaultInitCtx	org.apache.activemq.jndi.ReadOnlyContext  (id=22807)	
			bindings	java.util.HashMap  (id=22837)							<- hier zoekt hij in	,

this	PureJMSClient  (id=22818)	
	connectionFactory	ActiveMQConnectionFactory  (id=24769)	

			return connectionFactory;
/t
PureJMSClient.getSession() line: 306	
		ConnectionFactory factory = getConnectionFactory();
/d
		jmsConnection = factory.createConnection();
		if (exceptionListener == null) {
			exceptionListener = new JMSExceptionListener(this);
		}
		jmsConnection.setExceptionListener(exceptionListener);
		Properties config = getBrokerConfig();
		int ackMode = Session.AUTO_ACKNOWLEDGE;
		try {
			ackMode = Integer.parseInt(config.getProperty(SESSION_ACKNOWLEDGE_MODE_PROPERTY, "" + Session.AUTO_ACKNOWLEDGE));
"1"
/ want	, 
SESSION_ACKNOWLEDGE_MODE_PROPERTY="sessionAcknowledgeMode"
Session.AUTO_ACKNOWLEDGE="1"
		boolean xa = false;
		try {
			xa = Boolean.parseBoolean(config.getProperty(SESSION_TRANSACTED_PROPERTY, Boolean.FALSE.toString()));
false
/want,	 
SESSION_TRANSACTED_PROPERTY="sessionTransacted"

		jmsSession = jmsConnection.createSession(xa, ackMode);
this	PureJMSClient  (id=22818)	
	jmsSession	ActiveMQSession  (id=25717)	

		return jmsSession;
/t
PureJMSClient.sendMessage(Object, JMSMessageType) line: 346	
		retryCount = 0;
		while (retryCount <= maxRetries) {
			Session ses = getSession();
/d
			Message msg = null;
			switch (messageType) {
				case TEXT:
					msg = ses.createTextMessage(aMessage.toString());
msg	ActiveMQTextMessage  (id=25884)	
					break;

			setMessageProperties(msg);
/s
PureJMSClient.setMessageProperties(Message) line: 641	
		for (Entry<String, Object> entry : properties.entrySet()) {
this	PureJMSClient  (id=22818)	
	properties	HashMap  (id=25891)	/ {operation=sendJMSMessage}
		for (Entry<String, Object> entry : properties.entrySet()) {
			Object val = entry.getValue();
			if (val instanceof String) {
				aMessage.setStringProperty(entry.getKey(), (String) val);
aMessage	ActiveMQTextMessage  (id=25884)	
	properties	HashMap  (id=26240)			/ {operation=sendJMSMessage}

/t
PureJMSClient.sendMessage(Object, JMSMessageType) line: 374	
			setMessageProperties(msg);
/d
			prepareMessage(msg);		/ niets	, 
			MessageProducer producer = getProducer(ses);
/s
PureJMSClient.getProducer(Session) line: 671	
		messageProducer = ses.createProducer(getDestination());
/s
PureJMSClient.getDestination() line: 563	
		getContext();		/ is er al	,
		try {
			Properties config = getBrokerConfig();
{java.naming.factory.initial=org.apache.activemq.jndi.ActiveMQInitialContextFactory,
 queue.BAKKER.BAKKER.EVENTS=BAKKER.BAKKER.EVENTS,
 topicConnectionFactory=TopicConnectionFactory,
 queueConnectionFactory=QueueConnectionFactory,
 queue.MPOBJECTS.FROM.BAKKER=MPOBJECTS.FROM.BAKKER,
 queue.BAKKER.SHIPMENTORDERS=BAKKER.SHIPMENTORDERS,
 java.naming.provider.url=tcp://localhost:61616,
 java.naming.factory.url.pkgs=org.jnp.interfaces,
 queue.MPOBJECTS.TO.BAKKER=MPOBJECTS.TO.BAKKER}
			String prefix = "";
			switch (destinationType) {
				case QUEUE:
					prefix = config.getProperty(JNDI_QUEUE_NAME_PREFIX_PROPERTY, "");	/ "jndiQueueNamePrefix"	, deze mag NIET in config	, 
""
					break;
			jmsDestination = (Destination) getContext().lookup(prefix + destination);		/ prefix + destination="MPOBJECTS.TO.BAKKER" 
this	PureJMSClient  (id=22818)	
	context	InitialContext  (id=24354)	
		defaultInitCtx	ReadOnlyContext  (id=24378)	/ org.apache.activemq.jndi.ReadOnlyContext@3acc4409
			bindings	java.util.HashMap  (id=23589)	
{BAKKER.SHIPMENTORDERS=queue://BAKKER.SHIPMENTORDERS,						
 dynamicTopics=org.apache.activemq.jndi.ActiveMQInitialContextFactory$2@647a25bf,
 TopicConnectionFactory=org.apache.activemq.ActiveMQConnectionFactory@f445222,
 MPOBJECTS.TO.BAKKER=queue://MPOBJECTS.TO.BAKKER,
 ConnectionFactory=org.apache.activemq.ActiveMQConnectionFactory@4e6c3e02,
 MPOBJECTS.FROM.BAKKER=queue://MPOBJECTS.FROM.BAKKER,
 XAConnectionFactory=org.apache.activemq.ActiveMQXAConnectionFactory@245b1d87,
 dynamicQueues=org.apache.activemq.jndi.ActiveMQInitialContextFactory$1@59ef9cb6,
 BAKKER.BAKKER.EVENTS=queue://BAKKER.BAKKER.EVENTS,
 QueueConnectionFactory=org.apache.activemq.ActiveMQConnectionFactory@2199edb}
			environment	java.util.Hashtable  (id=23590)	
			...
		gotDefault	true	
		myProps	Properties  (id=24379)	/= bindings.environment	, = config
																								/ TODO MORGENOCHTEND
this	PureJMSClient  (id=22818)	
	destination	"MPOBJECTS.TO.BAKKER" (id=23498)
this	PureJMSClient  (id=22818)	
	jmsDestination	ActiveMQQueue  (id=26609)	
		physicalName	"MPOBJECTS.TO.BAKKER" (id=26685)	

/s
InitialContext.lookup(String) line: 411	
name	"MPOBJECTS.TO.BAKKER" (id=23576)	
        return getURLOrDefaultInitCtx(name).lookup(name);
/s
InitialContext.getURLOrDefaultInitCtx(String) line: 334	
        return getDefaultInitCtx();
/s
InitialContext.getDefaultInitCtx() line: 306	
        return defaultInitCtx;
/t
InitialContext.lookup(String) line: 411	
        return getURLOrDefaultInitCtx(name).lookup(name);
/pd
/d
/t
PureJMSClient.getDestination() line: 578	
			jmsDestination = (Destination) getContext().lookup(prefix + destination);
this	com.mpobjects.interfacing.jmsmessage.model.PureJMSClient  (id=22503)	
	jmsDestination	org.apache.activemq.command.ActiveMQQueue  (id=23490)	
queue://MPOBJECTS.TO.BAKKER

/ TODO JMSBROKERS FILE





			return jmsDestination;
/t
PureJMSClient.getProducer(Session) line: 674	
		messageProducer = ses.createProducer(getDestination());
/d
		messageProducer = ses.createProducer(getDestination());
this	PureJMSClient  (id=22818)	
	messageProducer	ActiveMQMessageProducer  (id=26841)	
		return messageProducer;
/t
PureJMSClient.sendMessage(Object, JMSMessageType) line: 376	
			MessageProducer producer = getProducer(ses);
/d
			if (priority > -1) {
				producer.setPriority(priority);
			try {
				producer.send(msg);

/c
///////////////////////////////////////
/ via MpoMessageListener.onMessage komen we in CustomerOrderMsgProcessor.process	,
/s
Thread [BakkerQueueContainer-2] (Suspended (breakpoint at line 120 in CustomerStatusServiceImpl))	
	CustomerStatusServiceImpl.updateStatus(CustomerOrder) line: 120	
		if (updateCustomerStatus(customerOrder, CustomerStatusEntity.CUSTOMER_ORDER)) {
			MpoBeanFactory.getBean(CustomerOrderDAO.class).save(customerOrder);
			customerOrderTriggerHandler.handleStatusChange(customerOrder);

/tx
	CustomerOrderServiceImpl.setCustomerOrderStatus(CustomerOrder) line: 630	
			customerStatusService.updateStatus(aCustomerOrder);
/cb
	CustomerOrderServiceImpl.create(CustomerOrder, boolean, boolean, TMSEventContext) line: 148	
		setCustomerOrderStatus(aCustomerOrder);
/cb
	CustomerOrderServiceImpl.create(CustomerOrder, boolean, boolean) line: 139	
		return create(aCustomerOrder, checkIds, fromInterface, new TMSEventContext());
/cb
/tx
	BasicCustomerOrderMsgProcessor.createOrUpdateCustomerOrder(CustomerOrder) line: 142	
		CustomerOrder order = customerOrderService.getByCustomerOrderNumber(aCustomerOrder.getCustomerOrderNumber(), aCustomerOrder.getOrganization());
		if (order != null) {
/n
		} else {
			return customerOrderService.create(aCustomerOrder, true, true);
/cb
	BasicCustomerOrderMsgProcessor.handleCustomerOrderMessage(CustomerOrder, String) line: 57	
				order = createOrUpdateCustomerOrder(msgCustomerOrder);
/cb
	CustomerOrderXmlNodeProcessorImpl.processCustomerOrder(Node) line: 80	
		XMLProcessor myXmlProcessor = new XMLProcessor();
		monitorMeta[0] = StringUtils.defaultIfEmpty(myXmlProcessor.findMessageId(aNode), "?MessageId?");
		monitorMeta[1] = XMLProcessor.selectText(aNode, MTCCoreNames.PROCESSING_DETAILS, MTCCoreNames.PURPOSE_CODE).trim();
		monitorMeta[2] = XMLProcessor.selectText(aNode, MTCCoreNames.CUSTOMER_ORDER_BODY, MTCCoreNames.CUSTOMER_ORDER_ID);
		monitorMeta[3] = XMLProcessor.selectText(aNode, MTCCoreNames.CUSTOMER_ORDER_BODY, MTCCoreNames.ORGANIZATION_ID);
		monitorMeta[4] = Boolean.FALSE.toString();
		MonitorEvent monitorEvent = monitoringService.startEvent("message.customerorder", monitorMeta);
monitorMeta	java.lang.String[5]  (id=28189)	
	[0]	"82727e42-ebe7-4966-afe6-21d0b654cacferic6" (id=28359)	
	[1]	"05" (id=28360)	
	[2]	"CO000032313eric6" (id=28361)	
	[3]	"BAKKER" (id=28364)	
	[4]	"false" (id=28367)	
			CustomerOrder customerOrder = getCustomerOrderProcessor().process(aNode);					<- overnieuw	,
customerOrder	com.mpobjects.oms.model.entity.CustomerOrder  (id=28192)	
	buyerOrderNumber	"185322051    F" (id=28209)	
	customerOrderNumber	"CO000032313eric6" (id=28224)	
	reference1	"27845114" (id=28543)	
	seller	com.mpobjects.oms.model.entity.VirtualParty  (id=28673)	
	systemId	0	
	...
				// Note: the CustomerOrderMessageProcessor has prototype scope!																/ TODO
				CustomerOrderMessageProcessor customerOrderMsgProcessor = MpoBeanFactory.getBean(CustomerOrderMessageProcessor.class);			
				customerOrderMsgProcessor.handleCustomerOrderMessage(customerOrder, monitorMeta[1]);
/cb
	CustomerOrderXmlNodeProcessorImpl.processCustomerOrderNodeInNewTx(Node) line: 50	
		processCustomerOrder(aNode);
/cb
/tx
	CustomerOrderMsgProcessor.process(Node) line: 29	
		for (Node node : selectNodeIterable(aNode, CustomerOrderNames.CUSTOMER_ORDER)) {
			getNodeProcessor().processCustomerOrderNodeInNewTx(node);
/cb
	CustomerOrderMsgConsumer.process(Message) line: 39	
					myProcessor.process(((SapXMessage) aIncomingMessage).getBody());
/cb
	CustomerOrderMsgConsumer(MessageConsumer).handle(Message) line: 120
	/**
	 * Check the incoming message on wellformedness and meaningfulness. If Ok process the message on behalf of the
	 * receiving application.
	 * 
			// When message passed all checks it is eligible for processing
			if (theStatus == MC_STATUS_OK) {
				process(incomingMessage);
/cb
/tx TODO
	MessageConsumerHandler$$EnhancerBySpringCGLIB$$1564440d(MessageConsumerHandler).onExchange(MessageExchange) line: 172	
		MessageConsumerInterface consumer = getConsumer();		/ com.sunproxy.$Proxy naar com.mpobjects.oms.service.messages.CustomerOrderMsgConsumer@3ec672d8		/ TODO
		consumer.handle(message);
/cb
	MessageConsumerHandler$$EnhancerBySpringCGLIB$$1564440d(AbstractExchangeHandler).handleExchange(ExchangeHandlerChain, MessageExchange) line: 43	
	SingletonExchangeHandlerChain.next(MessageExchange) line: 43	
	DemuxExchangeHandler.handleMessage(ExchangeHandler, MessageExchange) line: 110	
	DemuxExchangeHandler.onExchange(MessageExchange) line: 123	
	DemuxExchangeHandler(AbstractExchangeHandler).handleExchange(ExchangeHandlerChain, MessageExchange) line: 43	
	DefaultExchangeHandlerChain.next(MessageExchange) line: 50	
	TxExchangeHandler(AbstractExchangeHandler).handleExchange(ExchangeHandlerChain, MessageExchange) line: 64	
	TxExchangeHandler.handleExchange(ExchangeHandlerChain, MessageExchange) line: 62	
/ tx
	DefaultExchangeHandlerChain.next(MessageExchange) line: 50	
	MessageTraceExchangeHandler(AbstractExchangeHandler).handleExchange(ExchangeHandlerChain, MessageExchange) line: 64	
	DefaultExchangeHandlerChain.next(MessageExchange) line: 50	
	AuthNExchangeHandler(AbstractExchangeHandler).handleExchange(ExchangeHandlerChain, MessageExchange) line: 64	
	DefaultExchangeHandlerChain.next(MessageExchange) line: 50	
	ArchiveExchangeHandler(AbstractExchangeHandler).handleExchange(ExchangeHandlerChain, MessageExchange) line: 64	
	DefaultExchangeHandlerChain.next(MessageExchange) line: 50	
	SapXConverterExchangeHandler(AbstractExchangeHandler).handleExchange(ExchangeHandlerChain, MessageExchange) line: 64	
	DefaultExchangeHandlerChain.next(MessageExchange) line: 50	
	ArchiveErrorExchangeHandler(AbstractExchangeHandler).handleExchange(ExchangeHandlerChain, MessageExchange) line: 64	
	DefaultExchangeHandlerChain.next(MessageExchange) line: 50	
		if (handlers.hasNext()) {
			lastHandler = handlers.next(); 					/ ExchangeHandler[com.mpobjects.interfacing.messages.handler.DemuxExchangeHandler]		/ TODO
			lastHandler.handleExchange(this, aExchange);
/cb
	RetryExchangeHandler(AbstractExchangeHandler).handleExchange(ExchangeHandlerChain, MessageExchange) line: 64	
	RetryExchangeHandler.handleExchange(ExchangeHandlerChain, MessageExchange) line: 80	
	DefaultExchangeHandlerChain.next(MessageExchange) line: 50	
		if (handlers.hasNext()) {
			lastHandler = handlers.next(); 					/ RetryExchangeHandler  (id=26959)	
			lastHandler.handleExchange(this, aExchange);
/cb
	MessageHandler.handleExchange(MessageExchange) line: 55	
		DefaultExchangeHandlerChain handlerChain = new DefaultExchangeHandlerChain(chain);
handlerChain	DefaultExchangeHandlerChain  (id=26960)	
	handlers	ArrayList$ListItr  (id=27788)	
		this$0	ArrayList  (id=27784)	
[ExchangeHandler[com.mpobjects.interfacing.messages.handler.RetryExchangeHandler],
 ExchangeHandler[com.mpobjects.interfacing.messages.handler.ArchiveErrorExchangeHandler],
 ExchangeHandler[com.mpobjects.interfacing.messages.handler.SapXConverterExchangeHandler],
 ExchangeHandler[com.mpobjects.interfacing.messages.handler.ArchiveExchangeHandler],
 ExchangeHandler[com.mpobjects.interfacing.messages.handler.AuthNExchangeHandler],
 ExchangeHandler[com.mpobjects.interfacing.messages.handler.trace.MessageTraceExchangeHandler],
 ExchangeHandler[com.mpobjects.interfacing.messages.handler.tx.TxExchangeHandler],
 ExchangeHandler[com.mpobjects.interfacing.messages.handler.DemuxExchangeHandler]]
		try {
			handlerChain.next(aExchange);
/cb
	MpoMessageListener.processMessage(Message, JmsMpoMessage) line: 388	
			MessageExchange exchange = new DefaultMessageExchange(aMpoMessage);
exchange	DefaultMessageExchange  (id=27578)	
	in	JmsTextMpoMessage  (id=26998)	
		jmsMessage	ActiveMQTextMessage  (id=26999)	
			// Actually process the message
			messageHandler.handleExchange(exchange);
/cb
	MpoMessageListener.onMessage(Message) line: 201	
			JmsMpoMessage mpoMsg = messageConverter.convert(JmsMpoMessage.class, aMessage);
				processMessage(aMessage, mpoMsg);
/cb
	DefaultMessageListenerContainer(AbstractMessageListenerContainer).doInvokeListener(MessageListener, Message) line: 569				/ Spring type	, 
	DefaultMessageListenerContainer(AbstractMessageListenerContainer).invokeListener(Session, Message) line: 507	
	DefaultMessageListenerContainer(AbstractMessageListenerContainer).doExecuteListener(Session, Message) line: 474	
	DefaultMessageListenerContainer(AbstractPollingMessageListenerContainer).doReceiveAndExecute(Object, Session, MessageConsumer, TransactionStatus) line: 325	
	DefaultMessageListenerContainer(AbstractPollingMessageListenerContainer).receiveAndExecute(Object, Session, MessageConsumer) line: 263	
	DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener() line: 1103	
	DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop() line: 1095	
	DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run() line: 992	
	Thread.run() line: 745	

/ we doen overnieuw	, 
/c
/s
    MpoMessageListener.onMessage(Message) line: 201
/c
CustomerOrderMsgProcessor.process(Node) line: 27	
		for (Node node : selectNodeIterable(aNode, CustomerOrderNames.CUSTOMER_ORDER)) {
			getNodeProcessor().processCustomerOrderNodeInNewTx(node);
/c
CustomerOrderXmlNodeProcessorImpl.processCustomerOrder(Node) line: 65	
		// meta data: message id, purpose code, shipment order id, organization id, successful
		XMLProcessor myXmlProcessor = new XMLProcessor();
		monitorMeta[0] = StringUtils.defaultIfEmpty(myXmlProcessor.findMessageId(aNode), "?MessageId?");
		monitorMeta[1] = XMLProcessor.selectText(aNode, MTCCoreNames.PROCESSING_DETAILS, MTCCoreNames.PURPOSE_CODE).trim();
		monitorMeta[2] = XMLProcessor.selectText(aNode, MTCCoreNames.CUSTOMER_ORDER_BODY, MTCCoreNames.CUSTOMER_ORDER_ID);
		monitorMeta[3] = XMLProcessor.selectText(aNode, MTCCoreNames.CUSTOMER_ORDER_BODY, MTCCoreNames.ORGANIZATION_ID);
		monitorMeta[4] = Boolean.FALSE.toString();
		try {
			CustomerOrder customerOrder = getCustomerOrderProcessor().process(aNode);
/s
CustomerOrderXmlNodeProcessorImpl.getCustomerOrderProcessor() line: 103	
			customerOrderProcessor = new CustomerOrderProcessor();
/s
CustomerOrderProcessor.<init>() line: 55	
		customerOrderBodyProcessor = new CustomerOrderBodyProcessor();
/s
CustomerOrderBodyProcessor.<init>() line: 71	
		referenceProcessor = new ReferenceProcessor(this);
		partyProcessor = new PartyProcessor(this);
		detailTypeDAO = MpoBeanFactory.getBean(EntityDetailTypeDAO.class);		/ WAAROM NIET INJECTED
		partyService = MpoBeanFactory.getBean(PartyService.class);
		customerOrderTypeDAO = MpoBeanFactory.getBean(CustomerOrderTypeDAO.class);
/t
		customerOrderLineProcessor = new CustomerOrderLineProcessor();
/s
CustomerOrderLineProcessor.<init>() line: 104	
		partyProcessor = new PartyProcessor(this);
		measurementProcessor = new MeasurementProcessor(this);
		referenceProcessor = new ReferenceProcessor(this);
		attachmentsProcessor = new AttachmentsProcessor();
		detailTypeDAO = MpoBeanFactory.getBean(EntityDetailTypeDAO.class);
		productDAO = MpoBeanFactory.getBean(ProductDAO.class);
		partyService = MpoBeanFactory.getBean(PartyService.class);
		shipmentTypeDao = MpoBeanFactory.getBean(ShipmentTypeDAO.class);
		serviceLevelDao = MpoBeanFactory.getBean(ShipmentServiceLevelDAO.class);
		incoTermDAO = MpoBeanFactory.getBean(IncoTermDAO.class);
		unitDAO = MpoBeanFactory.getBean(UnitDAO.class);
/t
		attachmentsProcessor = new AttachmentsProcessor();
/s
AttachmentsProcessor(XMLProcessor).<init>() line: 51	
		context = new ProcessingContext();
/t
CustomerOrderXmlNodeProcessorImpl.getCustomerOrderProcessor() line: 105	
			customerOrderProcessor = new CustomerOrderProcessor();
/d
		return customerOrderProcessor;
/t
CustomerOrderXmlNodeProcessorImpl.processCustomerOrder(Node) line: 75	
			CustomerOrder customerOrder = getCustomerOrderProcessor().process(aNode);
/pd
/s
CustomerOrderProcessor.process(Node) line: 108	
		CustomerOrder order = new CustomerOrder();
		Node childNode = aNode.getFirstChild(); / [mtccore:PROCESSING_DETAILS: null]

			if (MTCCoreNames.PROCESSING_DETAILS.equals(element)) {
/j
				// we don't process this here
			childNode = childNode.getNextSibling();
[mtccore:CUSTOMER_ORDER_BODY: null]
			} else if (MTCCoreNames.CUSTOMER_ORDER_BODY.equals(element)) {
				hasBody = true;
				try {
					customerOrderBodyProcessor.process(order, childNode);
/s
CustomerOrderBodyProcessor.process(CustomerOrder, Node) line: 165	


/ Intermezzo

/ CustomerOrderBodyProcessor is geen Spring bean	, 
/ wel	, 
$ vi bakker-service.sb.xml
	<bean id="com.mpobjects.oms.model.serviceorder.xml.ServiceOrderProcessor" class="com.mpobjects.bakker.model.serviceorder.xml.BakkerServiceOrderProcessor" scope="prototype">
		<property name="serviceOrderDao" ref="com.mpobjects.oms.dao.ServiceOrderDao" />
		<property name="serviceOrderTypeDAO" ref="com.mpobjects.oms.dao.serviceordertype.ServiceOrderTypeDAO" />
		<property name="productItemDAO" ref="com.mpobjects.oms.model.shipmentorder.dao.ProductItemDAO" />
		<property name="shipmentItemDAO" ref="com.mpobjects.oms.model.shipmentorder.dao.ShipmentItemDAO" />
		<property name="packedItemDAO" ref="com.mpobjects.oms.model.shipmentorder.dao.PackedItemDAO" />
		<property name="shipmentOrderService" ref="com.mpobjects.oms.model.service.ShipmentOrderService" />
		<property name="serviceOrderService" ref="com.mpobjects.oms.model.service.ServiceOrderService" />
		<property name="lockManager">
			<bean class="com.mpobjects.util.concurrent.TxLockManager">
				<constructor-arg>
					<bean class="com.mpobjects.util.concurrent.CategoryLockManager">
						<!-- set timeout to about average processing time -->
						<property name="timeout" value="${module.bakker.jms.serviceorder.lock.timeout:2000}" />
					</bean>
				</constructor-arg>
			</bean>
		</property>
		<property name="shipmentOrderDao" ref="com.mpobjects.oms.dao.shipmentorder.ShipmentOrderDao" />
	</bean>
</beans>
/ TODO Probeer dit ook	,

		final String organizationId = selectText(aNode, MTCCoreNames.ORGANIZATION_ID);
		final Organization organization = getOrganizationDao().getByCode(organizationId);
		if (organization == null) {
			throw new XMLProcessorException(String.format("Unknown organization ID '%s' in CUSTOMER_ORDER_BODY", organizationId));
		}
		aOrder.setOrganization(organization);

/ Einde Intermezzo

		final String organizationId = selectText(aNode, MTCCoreNames.ORGANIZATION_ID); 	/ <mtccore:ORGANIZATION_ID>BAKKER</mtccore:ORGANIZATION_ID>
/s
XMLUtil.selectText(Node, String...) line: 651	
/=
	public static String selectText(Node aNode, String... aPath) {
aPath	java.lang.String[1]  (id=24114)	
	[0]	"ORGANIZATION_ID" (id=24115)	

		Node node = selectSingleNode(aNode, aPath);
/s
XMLUtil.selectSingleNode(Node, String...) line: 606	
		traversePath: for (String pathElement : aPath) { / pathElement	"ORGANIZATION_ID" (id=24115)		, 
															/ maar 1 keer	, want aPath heeft maar 1 elem	, TODO wanneer meerdere	?
			pathElement = stripNamespace(pathElement);

			// find the first child with a matching name
			Node childNode = aNode.getFirstChild();
			while (childNode != null) {
				if (childNode.getNodeType() == Node.ELEMENT_NODE) {		/ [text ...] , ...
					String elementName = getElementName(childNode);	 / CUSTOMER_ORDER_ID, ORGANIZATION_ID
					if (pathElement.equals(elementName)) { /j voor ORGANIZATION_ID
						// found a child
						aNode = childNode;
						// find the next element in the path
						continue traversePath;
					}
				}
				childNode = childNode.getNextSibling();
			}
		// the node was set to the found element
		return aNode;
/t
XMLUtil.selectText(Node, String...) line: 652	
		Node node = selectSingleNode(aNode, aPath);	/ [mtccore:ORGANIZATION_ID: null]
/d
		return getNodeTextContent(node, true, true);
/s
XMLUtil.getNodeTextContent(Node, boolean, boolean) line: 385	
		StringBuilder sb = new StringBuilder();
		Node childNode = aNode.getFirstChild();	/ [#text: BAKKER]	/ nu willen we een text node juist hebben 
		while (childNode != null) {
			} else if (childNode.getNodeType() == Node.TEXT_NODE || childNode.getNodeType() == Node.CDATA_SECTION_NODE) {
				sb.append(childNode.getNodeValue());	/ BAKKER	/ trim ?
		return sb.toString();
/t
CustomerOrderBodyProcessor.process(CustomerOrder, Node) line: 175	
		final String organizationId = selectText(aNode, MTCCoreNames.ORGANIZATION_ID);
/d
		final Organization organization = getOrganizationDao().getByCode(organizationId);
organization	com.mpobjects.oms.model.entity.organization.Organization  (id=25194)	
		aOrder.setOrganization(organization);

/c

/ Intermezzo

/ Er is iets mis in onze xml	, 
/ we zien in log/server.log	,

2017-03-17 11:13:56,320 INFO  [monitor.jms.import.GenericQueue] (BakkerQueueContainer-1:) "jms.import.GenericQueue","2017-03-17T11:13:10.578+01:00",1489745590578,45742,"85e6536f-2db4-4a87-942f-18e3a87b30ee","","ID:localhost.localdomain-35904-1489741411404-10:1:1:1:1","2017-03-17T11:13:07.141+01:00","1489745587141","3437","",""
/ TODO
2017-03-17 11:13:56,339 WARN  [org.springframework.jms.listener.DefaultMessageListenerContainer] (BakkerQueueContainer-1:) Execution of JMS message listener failed, and no ErrorHandler has been set.
java.lang.Error: Unresolved compilation problem: 
        Syntax error, insert ";" to complete BlockStatements

        at com.mpobjects.oms.model.xml.CustomerOrderBodyProcessor.processHoldStatus(CustomerOrderBodyProcessor.java:287)
        at com.mpobjects.oms.model.xml.CustomerOrderBodyProcessor.process(CustomerOrderBodyProcessor.java:258)
		...
2017-03-17 11:14:00,162 INFO  [com.mpobjects.interfacing.jms.MpoMessageListener] (BakkerQueueContainer-1:) [GenericQueue] Processing exchange. exchange=37eaf2f6-6391-465b-9be7-239cef6642c2, jmsMessageId=ID:localhost.localdomain-35904-1489741411404-10:1:1:1:1
2017-03-17 11:14:00,162 INFO  [com.mpobjects.interfacing.jms.MpoMessageListener] (BakkerQueueContainer-1:) [GenericQueue] received message {JMSMessageID=ID:localhost.localdomain-35904-1489741411404-10:1:1:1:1, JMSDestination=queue://MPOBJECTS.TO.BAKKER, JMSPriority=4, JMSTimestamp=2017-03-17T11:13:07.141+01:00, JMSRedelivered=true, JMSType=null}
2017-03-17 11:14:00,180 INFO  [com.mpobjects.interfacing.messages.handler.ArchiveExchangeHandler] (BakkerQueueContainer-1:) Archived message to: /local/apps/interface/bakker/to_tms_archive/GenericQueue/2017-03/17/82727e42-ebe7-4966-afe6-21d0b654cacferic10_1489745640180
2017-03-17 11:14:00,181 DEBUG [com.mpobjects.util.concurrent.ResourceLock] (BakkerQueueContainer-1:) Locking resources for thread 'BakkerQueueContainer-1' on category 'MessageTraceExchangeHandler': [82727e42-ebe7-4966-afe6-21d0b654cacferic10]
2017-03-17 11:14:00,321 INFO  [com.mpobjects.oms.applicationresponse.ARMessageTraceEntryAction] (BakkerQueueContainer-1:) Sending 'OK_Duplicate' application response for message '82727e42-ebe7-4966-afe6-21d0b654cacferic10'
2017-03-17 11:14:00,362 INFO  [com.mpobjects.interfacing.messages.handler.trace.MessageTraceExchangeHandler] (BakkerQueueContainer-1:) Stopping processing of message '82727e42-ebe7-4966-afe6-21d0b654cacferic10' ([82727e42-ebe7-4966-afe6-21d0b654cacferic10])
2017-03-17 11:14:00,362 DEBUG [com.mpobjects.util.concurrent.ResourceLock] (BakkerQueueContainer-1:) Unlocked resources for category 'MessageTraceExchangeHandler': [82727e42-ebe7-4966-afe6-21d0b654cacferic10]

/ Inderdaad	, op mijn laptop is	,
/local/apps/interface/bakker/to_tms_archive/GenericQueue/2017-03/17/82727e42-ebe7-4966-afe6-21d0b654cacferic10_1489745640180

/ Einde Intermezzo

			} else if (MTCCoreNames.HOLD_STATUS.equals(element)) {
				processHoldStatus(aOrder, childNode);
/s
CustomerOrderBodyProcessor.processHoldStatus(CustomerOrder, Node) line: 288	
		String code = getNodeTextContent(node, true).trim();
code	"REVIEW_HOLD" (id=26379)	
		HoldStatus holdStatus = holdStatusDAO.getByCode(code);
holdStatus	com.mpobjects.oms.model.entity.holdstatus.HoldStatus  (id=26381)	
	code	"REVIEW_HOLD" (id=26384)	
	color	null	
	deleted	false	
	description	"Review hold" (id=26397)	
		order.setHoldStatus(holdStatus);
/c
/ OK

/ Intermezzo

/ WAAROM NIET INJECTED 

/ stack
/s
	CustomerOrderBodyProcessor.processHoldStatus(CustomerOrder, Node) line: 287	
		HoldStatus holdStatus = holdStatusDAO.getByCode(code);
			holdStatusDAO = MpoBeanFactory.getBean(HoldStatusDAO.class);
/cb
	CustomerOrderBodyProcessor.process(CustomerOrder, Node) line: 258	
	CustomerOrderProcessor.process(Node) line: 136	
		customerOrderBodyProcessor = new CustomerOrderBodyProcessor();
/cb
	CustomerOrderXmlNodeProcessorImpl.processCustomerOrder(Node) line: 75	
			customerOrderProcessor = new CustomerOrderProcessor();
/cb
	CustomerOrderXmlNodeProcessorImpl.processCustomerOrderNodeInNewTx(Node) line: 50	
/tx
	CustomerOrderMsgProcessor.process(Node) line: 29	
			customerOrderXmlNodeProcessor = MpoBeanFactory.getBean(CustomerOrderXmlNodeProcessor.class);
/cb
	CustomerOrderMsgConsumer.process(Message) line: 39	
				CustomerOrderMsgProcessor myProcessor = new CustomerOrderMsgProcessor();
/cb
	CustomerOrderMsgConsumer(MessageConsumer).handle(Message) line: 120	
/tx
	MessageConsumerHandler$$EnhancerBySpringCGLIB$$1564440d(MessageConsumerHandler).onExchange(MessageExchange) line: 172	
/ TODO Hoe getConsumer() is impl	?
	MessageConsumerHandler$$EnhancerBySpringCGLIB$$1564440d(AbstractExchangeHandler).handleExchange(ExchangeHandlerChain, MessageExchange) line: 43	
	SingletonExchangeHandlerChain.next(MessageExchange) line: 43	
	DemuxExchangeHandler.handleMessage(ExchangeHandler, MessageExchange) line: 110	
	DemuxExchangeHandler.onExchange(MessageExchange) line: 123	
	DemuxExchangeHandler(AbstractExchangeHandler).handleExchange(ExchangeHandlerChain, MessageExchange) line: 43	
	DefaultExchangeHandlerChain.next(MessageExchange) line: 50	
	TxExchangeHandler(AbstractExchangeHandler).handleExchange(ExchangeHandlerChain, MessageExchange) line: 64	
	TxExchangeHandler.handleExchange(ExchangeHandlerChain, MessageExchange) line: 62	
/tx
	DefaultExchangeHandlerChain.next(MessageExchange) line: 50	
	MessageTraceExchangeHandler(AbstractExchangeHandler).handleExchange(ExchangeHandlerChain, MessageExchange) line: 64	
	DefaultExchangeHandlerChain.next(MessageExchange) line: 50	
	AuthNExchangeHandler(AbstractExchangeHandler).handleExchange(ExchangeHandlerChain, MessageExchange) line: 64	
	DefaultExchangeHandlerChain.next(MessageExchange) line: 50	
	ArchiveExchangeHandler(AbstractExchangeHandler).handleExchange(ExchangeHandlerChain, MessageExchange) line: 64	
	DefaultExchangeHandlerChain.next(MessageExchange) line: 50	
	SapXConverterExchangeHandler(AbstractExchangeHandler).handleExchange(ExchangeHandlerChain, MessageExchange) line: 64	
	DefaultExchangeHandlerChain.next(MessageExchange) line: 50	
	ArchiveErrorExchangeHandler(AbstractExchangeHandler).handleExchange(ExchangeHandlerChain, MessageExchange) line: 64	
	DefaultExchangeHandlerChain.next(MessageExchange) line: 50	
	RetryExchangeHandler(AbstractExchangeHandler).handleExchange(ExchangeHandlerChain, MessageExchange) line: 64	
	RetryExchangeHandler.handleExchange(ExchangeHandlerChain, MessageExchange) line: 80	
	DefaultExchangeHandlerChain.next(MessageExchange) line: 50	
	MessageHandler.handleExchange(MessageExchange) line: 55	
	MpoMessageListener.processMessage(Message, JmsMpoMessage) line: 388	
	MpoMessageListener.onMessage(Message) line: 201	
	DefaultMessageListenerContainer(AbstractMessageListenerContainer).doInvokeListener(MessageListener, Message) line: 569	
	DefaultMessageListenerContainer(AbstractMessageListenerContainer).invokeListener(Session, Message) line: 507	
	DefaultMessageListenerContainer(AbstractMessageListenerContainer).doExecuteListener(Session, Message) line: 474	
	DefaultMessageListenerContainer(AbstractPollingMessageListenerContainer).doReceiveAndExecute(Object, Session, MessageConsumer, TransactionStatus) line: 325	
	DefaultMessageListenerContainer(AbstractPollingMessageListenerContainer).receiveAndExecute(Object, Session, MessageConsumer) line: 263	
	DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener() line: 1103	
	DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop() line: 1095	
	DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run() line: 992	
	Thread.run() line: 745	

/ Einde Intermezzo

/ Intermezzo

/ AlonnectionFactory=QueueConnectionFactory, java.naming.provider.url=tcp://localhost:61616, java.naming.factory.initial=org.apache.activemq.jndi.ActiveMQInitialContextFactory, topicConnectionFactory=TopicConnectionFactory, java.naming.factory.url.pkgs=org.jnp.interfaces}

/ Einde Intermezzo






/ we zien ERR	, 
javax.jms.JMSException: MPOBJECTS.TO.BAKKER at 
com.mpobjects.interfacing.jmsmessage.model.PureJMSClient.getDestination(PureJMSClient.java:584) at 
com.mpobjects.interfacing.jmsmessage.model.PureJMSClient.getProducer(PureJMSClient.java:674) at 
com.mpobjects.interfacing.jmsmessage.model.PureJMSClient.sendMessage(PureJMSClient.java:375) at 
com.mpobjects.interfacing.jmsmessage.model.PureJMSClient.sendMessage(PureJMSClient.java:404) at 
com.mpobjects.interfacing.model.service.JMSMessageSendProxy.send(JMSMessageSendProxy.java:25) at 
sun.reflect.GeneratedMethodAccessor1527.invoke(Unknown Source) at 
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java) at 
java.lang.reflect.Method.invoke(Method.java:606) at 
org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:317) at 
org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:183) at 
org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:150) at 
org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:96) at 
org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:260) at 
org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:94) at 
org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172) at 
org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:204) at 
com.sun.proxy.$Proxy391.send(Unknown Source) at 
com.mpobjects.interfacing.jmsmessage.control.JMSMessageSendAction.handleSave(JMSMessageSendAction.java:59) at 
com.mpobjects.control.action.AbstractSaveAction.act(AbstractSaveAction.java:69) at 
com.mpobjects.control.action.AbstractAction.act(AbstractAction.java:171) at



/ Einde DEBUG IMPORT

/ FIX EXPORT 

public class CustomerOrderBodyProcessor extends XMLProcessor {
	public void generate(Node aBaseNode, CustomerOrder aCustomerOrder) throws XMLProcessorException {
		...
		appendTextElement(aBaseNode, CORE_NS + MTCCoreNames.SELLER_ORDER_NUMBER, aCustomerOrder.getSellerOrderNumber());
		appendTextElement(aBaseNode, CORE_NS + MTCCoreNames.HOLD_STATUS, aCustomerOrder.getHoldStatus().getCode());			<--

/ we moeten hold status create	, want die zijn er niet	,
configuration , master data, hold statusses,
/ we maken , met code	, 
REVIEW_HOLD
TEST_HOLD

/ we zien in db	, 
bakker20160224_t=# select*from hold_status;
 system_id | hold_status_code | hold_status_description | hold_status_color | is_deleted 
-----------+------------------+-------------------------+-------------------+------------
    775810 | REVIEW_HOLD      | Review hold             | NULL              |          0
    775811 | TEST_HOLD        | Test hold               | NULL              |          0
(2 rows)

/ Ga naar de seo, N0054079, ga naar de sa's , daar zien we de sho's, ga naar SH000027245, zoek de colines op	,zoek de co's op 	, er is er een, CO000000052, ga daarheen via het menu	, 
planning, customer order, search	, 
/ voeg een hold status toe	, door op vergrootglas icon te click	, 
/ save co	, 
/ Ga weer naar de seo	, 
Actual release clear	, save	,
Actual release set today	, save	, 

/ Ga naar 
http://localhost:8161/admin/message.jsp?id=ID%3alocalhost.localdomain-37016-1488368365156-6%3a6%3a1%3a1%3a1&JMSDestination=MPOBJECTS.FROM.BAKKER
/ cp paste in vim	, 
[eric@localhost bin]$ xmllint --format ~/tmp/copy_study/msg7.txt
    <mtc:CUSTOMER_ORDER>
      <mtccore:CUSTOMER_ORDER_BODY>
        <mtccore:HOLD_STATUS>REVIEW_HOLD</mtccore:HOLD_STATUS>
/ OK
/ Waarom is ERR	, 
[eric@localhost copy_study]$ cat msg20160307.txt | xargs xmllint --format

</mtc:SERVICE_ORDER_MSG>

$ vi MTCCore.xsd
	<xs:complexType name="CUSTOMER_ORDER">
		<xs:sequence>
			...
			<xs:element name="CUSTOMER_ORDER_BODY" type="CUSTOMER_ORDER_BODY"></xs:element>

	<xs:complexType name="CUSTOMER_ORDER_BODY">
			...
			<xs:element name="HOLD_STATUS" type="HOLD_STATUS" maxOccurs="1" minOccurs="0"></xs:element>
			<xs:element name="REFERENCE" type="REFERENCE_FIELD" maxOccurs="unbounded" minOccurs="0"></xs:element>

public class CustomerOrderBodyProcessor extends XMLProcessor {
	public void generate(Node aBaseNode, CustomerOrder aCustomerOrder) throws XMLProcessorException {
		...
		if (aCustomerOrder.getHoldStatus() != null) {
			appendTextElement(aBaseNode, CORE_NS + MTCCoreNames.HOLD_STATUS, aCustomerOrder.getHoldStatus().getCode());
		}
		generateReference(aBaseNode, "REFERENCE1", aCustomerOrder.getReference1());



/ Einde FIX EXPORT 

/ FIX FINAL

/ See REFACTOR CUSTOMERORDERBODYPROCESSOR ALS SPRING BEAN	 

/ 13	. 

public class LogisticsOrderBodyProcessor extends XMLProcessor {

	public static void generate(Node aNode, LogisticsOrderVO aLogisticsOrderVO) throws LogisticsOrderException {	/ aNode=logistics order body
			HoldStatus myHoldStatus = aLogisticsOrderVO.getHoldStatus();
			if (myHoldStatus != null) {
				Node myNode = appendElement(aNode, CORE_NS + HOLD_STATUS_TAG);		/ myNode=hold_status
				HoldStatusProcessor.generate(myNode, myHoldStatus);
			}

	public void process(Node aNode, LogisticsOrderVO aLogisticsOrderVO) throws LogisticsOrderException {	 / aNode=logistics order body
			myNode = aNode.getFirstChild();														/ myNode=hold_status
					String myElementName = getElementName(myNode);
					} else if (myElementName.equals(HOLD_STATUS_TAG)) {
						HoldStatus myMasterDataVO = new HoldStatusProcessor(this).process(myNode); /myNode=hold_status		/ TODO MpoBeanFactory.getBean	, zoals in CustomerOrderBodyProcessor.process	,
						aLogisticsOrderVO.setHoldStatus(myMasterDataVO);

public class HoldStatusProcessor extends XMLProcessor {

	private HoldStatusDAO holdStatusDAO;

	public HoldStatusProcessor() {
	}

	public static void generate(Node aNode, HoldStatus aHoldStatus) {						/ aNode=hold_status
		appendTextElement(aNode, CORE_NS + INTERNAL_STATUS_CODE_TAG, aHoldStatus.getCode());
	}

	public HoldStatus process(Node aNode) {	/ aNode=hold_status
		try {
			HoldStatus myVO = null;
			Node myNode = selectSingleNode(aNode, INTERNAL_STATUS_CODE_TAG);
			if (myNode != null && StringUtils.isNotEmpty(myNode.getTextContent())) {
				myVO = getHoldStatusDAO().getByCode(myNode.getTextContent());
			}
			return myVO;	/ HoldStatus
		} catch (Exception anException) {
			throw new RuntimeException("Problem when parsing hold status", anException);
		}
	}

	public HoldStatusDAO getHoldStatusDAO() {
		return holdStatusDAO;
	}

	public void setHoldStatusDAO(HoldStatusDAO holdStatusDAO) {
		this.holdStatusDAO = holdStatusDAO;
	}

/ 13	. 

public class CustomerOrderBodyProcessor extends XMLProcessor {
	public void generate(Node aBaseNode, CustomerOrder aCustomerOrder) throws XMLProcessorException {	/ aBaseNode=customerorderbody
		HoldStatus myHoldStatus = aCustomerOrder.getHoldStatus();
		if (myHoldStatus != null) {
			Node myNode = appendElement(aBaseNode, CORE_NS + MTCCoreNames.HOLD_STATUS);
			HoldStatusProcessor.generate(myNode, myHoldStatus);							/ myNode=hold_status
		}

	public void process(CustomerOrder aOrder, Node aNode) throws XMLProcessorException {	/ aNode=customerorderbody
		Node childNode = aNode.getFirstChild();												/ hold_status
			final String element = getElementName(childNode);	
			} else if (MTCCoreNames.HOLD_STATUS.equals(element)) {
				HoldStatusProcessor holdStatusProcessor = MpoBeanFactory.getBean(HoldStatusProcessor.class);
				holdStatusProcessor.setParent(this);
				HoldStatus myMasterDataVO = holdStatusProcessor.process(childNode);	/ childNode=hold_status
				aOrder.setHoldStatus(myMasterDataVO);


/ TODO 
/ CustomerOrderBodyProcessor is al een spring bean	, 
/ Maar LogisticsOrderBodyProcessor moet een spring bean	, 

/ Einde FIX FINAL

/ TEST FIX FINAL

/ bakker, 2017.01	, 

/ 7	. 

/ INTEGRATION TEST MET DE HAND 

/ start activemq	, 

/ 13	. 

/ export	, 

/ seo N0054079	, clear Actual release date, Save, set op <today>	,  Save	, 
/ pak op http://localhost:8161/admin/message.jsp van de FROM.BAKKER queue de msg	, 
[eric@localhost local]$ pwd
/home/eric/Integration/Bakker/exports/local
[eric@localhost local]$ xmllint --format seo_sho_with_att20170405.txt > seo_sho_with_att20170405_pretty_print.txt
[eric@localhost local]$ less seo_sho_with_att20170405_pretty_print.txt
      <mtccore:CUSTOMER_ORDER_BODY>
        <mtccore:HOLD_STATUS>
          <mtccore:INTERNAL_STATUS_CODE>REVIEW_HOLD</mtccore:INTERNAL_STATUS_CODE>
        </mtccore:HOLD_STATUS>

/ 13	. 

/ import	,

[eric@localhost 14]$ pwd
/home/eric/Integration/Bakker/imports/CustomerOrder/2017-03/14
$ vi 82727e42-ebe7-4966-afe6-21d0b654cacferic

<mtc:CUSTOMER_ORDER_MSG ...> 
   <mtc:header>
      <mtccore:mid>82727e42-ebe7-4966-afe6-21d0b654cacferic15</mtccore:mid>			/ unique maken

         <mtccore:CUSTOMER_ORDER_BODY>
            <mtccore:CUSTOMER_ORDER_ID>CO000032313eric15</mtccore:CUSTOMER_ORDER_ID>	/ unique maken	,

         <mtccore:CUSTOMER_ORDER_BODY>
            </mtccore:SELLER>
            <mtccore:HOLD_STATUS>
                <mtccore:INTERNAL_STATUS_CODE>REVIEW_HOLD</mtccore:INTERNAL_STATUS_CODE>
                </mtccore:HOLD_STATUS>
            <mtccore:REFERENCE>

/ Import	, 
/ Ga naar planning, customer order , search	, 
/ we zien bovenaan de imported customer order	, open	, we zien Hold status: REVIEW_HOLD

/ 7	. 

/ unit tests	, 

module/oms/src/java
com.mpobjects.oms.model.xml;
CustomerOrderBodyProcessor
module/oms/test/src/java
com.mpobjects.oms.model.xml;
CustomerOrderBodyProcessorTest

module/oms/src/java
com.mpobjects.oms.model.holdstatus.xml;

/ Einde INTEGRATION TEST MET DE HAND 

/ UNIT TEST FINAL

$ vi HoldStatusProcessorTest.java

/*
 * Copyright 2000-2017, MP Objects, http://www.mp-objects.com
 */
package com.mpobjects.oms.model.holdstatus.xml;

import javax.xml.parsers.ParserConfigurationException;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.Spy;
import org.mockito.runners.MockitoJUnitRunner;
import org.w3c.dom.Element;
import org.w3c.dom.Node;

import com.mpobjects.common.util.XMLUtil;
import com.mpobjects.oms.dao.holdstatus.HoldStatusDAO;
import com.mpobjects.oms.model.entity.holdstatus.HoldStatus;
import com.mpobjects.oms.model.shared.xml.XMLProcessor;
import com.mpobjects.oms.model.shared.xml.names.MTCCoreNames;
import com.mpobjects.oms.model.xml.CustomerOrderBodyProcessor;

@RunWith(MockitoJUnitRunner.class)
public class HoldStatusProcessorTest {

	@Spy
	@InjectMocks
	private CustomerOrderBodyProcessor customerOrderBodyProcessor;

	/* because of the HoldStatusProcessor(XMLProcessor aParent) constructor, we cannot use @InjectMocks */
	@Spy
	private HoldStatusProcessor holdStatusProcessor;

	@Mock
	private HoldStatusDAO holdStatusDAO;

	private Node node;

	private final static String code = "TEST_HOLD";

	@Before
	public void init() throws ParserConfigurationException {
		node = XMLUtil.newDocument();
		// customerOrder = new CustomerOrder();
	}

	@Test
	public void testProcess() {
		/* mock */
		HoldStatus holdStatus = new HoldStatus();
		holdStatus.setCode(code);
		Mockito.when(holdStatusDAO.getByCode(code)).thenReturn(holdStatus);
		Mockito.when(holdStatusProcessor.getHoldStatusDAO()).thenReturn(holdStatusDAO);

		/* generate node */
		Node childNode = XMLUtil.appendElement(node, XMLProcessor.CORE_NS + MTCCoreNames.HOLD_STATUS);
		XMLUtil.appendTextElement(childNode, XMLProcessor.CORE_NS + HoldStatusProcessor.INTERNAL_STATUS_CODE_TAG, code);

		/* process (which you want to test) */
		HoldStatus resultHoldStatus = holdStatusProcessor.process(childNode);

		/* test */
		Assert.assertEquals(code, resultHoldStatus.getCode());

	}

	@Test
	public void testGenerate() {
		/* generate parent */
		Node childNode = XMLUtil.appendElement(node, XMLProcessor.CORE_NS + MTCCoreNames.HOLD_STATUS);

		/* generate (which you want to test) */
		HoldStatus holdStatus = new HoldStatus();
		holdStatus.setCode(code);
		HoldStatusProcessor.generate(childNode, holdStatus);

		/* test */
		Iterable<Element> elements = XMLUtil.getChildElements(childNode);
		for (Element element : elements) {
			Assert.assertEquals(XMLProcessor.CORE_NS + HoldStatusProcessor.INTERNAL_STATUS_CODE_TAG, element.getNodeName());
			Iterable<Element> elements2 = XMLUtil.getChildElements(element);
			for (Element element2 : elements2) {
				Assert.assertEquals(code, element2.getNodeValue());
			}
		}

	}

}


/ Einde UNIT TEST FINAL



/ Einde TEST FIX FINAL

/ FIX IMPORT 

$ vi CustomerOrderBodyProcessor.java

public class CustomerOrderBodyProcessor extends XMLProcessor {
	private HoldStatusDAO holdStatusDAO;
		holdStatusDAO = MpoBeanFactory.getBean(HoldStatusDAO.class);


	public void process(CustomerOrder aOrder, Node aNode) throws XMLProcessorException {
			} else if (MTCCoreNames.HOLD_STATUS.equals(element)) {
				processHoldStatus(aOrder, childNode);

	protected void processHoldStatus(CustomerOrder order, Node node) throws XMLProcessorException {
		String code = getNodeTextContent(node, true).trim();
		HoldStatus holdStatus = holdStatusDAO.getByCode(code);
		if (holdStatus == null) {
			throw new XMLProcessorException(String.format("Unknown hold status %s in CUSTOMER_ORDER_BODY", code));
		}
		order.setHoldStatus(holdStatus);

	}

[eric@localhost 14]$ pwd
/home/eric/Integration/Bakker/imports/CustomerOrder/2017-03/14
[eric@localhost 14]$ gedit 82727e42-ebe7-4966-afe6-21d0b654cacferic
/ import deze 	, 





/ Einde FIX IMPORT 



/ NOTES ATTACHMENTS 


/ Ga naar seo N0054079 
/ Ga naar de enigste sho SH000027245
/ click op Attached files	, 
/ click Create new attached file
/ click Sel public op een row	, 
/ refresh evt	, we zien de file attached	, 
/ als we nu de seo export, moeten we deze attachment zien in de XML	,

/ we export de seo	, 
[eric@localhost bin]$ xmllint --format ~/tmp/copy_study/seo_sho_with_att.txt > ~/tmp/copy_study/seo_sho_with_att_pretty_print.txt
[eric@localhost copy_study]$ less seo_sho_with_att_pretty_print.txt 

<mtc:SERVICE_ORDER_MSG ...>
  <mtc:body>
    <mtc:SERVICE_ORDER>
      <mtc:SERVICE_ORDER_BODY>
      </mtc:SERVICE_ORDER_BODY>
      <mtc:CONSIGNMENT>
        <mtc:CONSIGNMENT_BODY>
        </mtc:CONSIGNMENT_BODY>
        <mtc:SHIPMENT_ORDER>
          <mtc:SHIPMENT_ORDER_BODY>
          </mtc:SHIPMENT_ORDER_BODY>
          <mtc:PRODUCT_ITEMS>
          </mtc:PRODUCT_ITEMS>
          <mtc:SHIPMENT_ITEMS/>
          <mtc:ATTACHMENTS>
            <mtccore:ATTACHMENT>
              <mtccore:FILE_NAME>bakkergroep</mtccore:FILE_NAME>
              <mtccore:EXTENSION>png</mtccore:EXTENSION>
              <mtccore:MIME_TYPE>application/octet-stream</mtccore:MIME_TYPE>
              <mtccore:DESCRIPTION>bakkergroep</mtccore:DESCRIPTION>
              <mtccore:REFERENCE>
                <mtccore:VALUE>bakkergroep</mtccore:VALUE>
                <mtccore:QUALIFIER>REFERENCE1</mtccore:QUALIFIER>
              </mtccore:REFERENCE>
              <mtccore:REFERENCE>
                <mtccore:VALUE>customer-logo</mtccore:VALUE>
                <mtccore:QUALIFIER>REFERENCE2</mtccore:QUALIFIER>
              </mtccore:REFERENCE>
              <mtccore:REFERENCE>
                <mtccore:VALUE>10100</mtccore:VALUE>
                <mtccore:QUALIFIER>REFERENCE3</mtccore:QUALIFIER>
              </mtccore:REFERENCE>
              <mtccore:REFERENCE>
                <mtccore:VALUE>2016-07-04T15:20:37.878+02:00</mtccore:VALUE>
                <mtccore:QUALIFIER>uploadDate</mtccore:QUALIFIER>
              </mtccore:REFERENCE>
              <mtccore:REFERENCE>
                <mtccore:VALUE>false</mtccore:VALUE>
                <mtccore:QUALIFIER>IS_PUBLIC</mtccore:QUALIFIER>
              </mtccore:REFERENCE>
              <mtccore:GZIP_COMPRESSED>0</mtccore:GZIP_COMPRESSED>
              <mtccore:CONTENT>iVBORw0KGgoAAAANSUhEUgAAAysAAAH/CAYAAABXZ0JMAAAD8GlDQ1BJQ0MgUHJvZmlsZQAAOI2N&#13;
Vd1v21QUP4lvXKQWP6Cxjg4Vi69VU1u5GxqtxgZJk6XpQhq5zdgqpMl1bhpT1za2021Vn/YCbwz4&#13;
A4CyBx6QeEIaDMT2su0BtElTQRXVJKQ9dNpAaJP2gqpwrq9Tu13GuJGvfznndz7v0TVAx1ea45hJ&#13;
...
2UjL50867zV4L3AuyKum5ZvffNh5d3TFZN7LL79saSWn52aDkas4CTgJOAk4CXxiJfC/5Ux3MlLt&#13;
MdoAAAAASUVORK5CYII=&#13;
</mtccore:CONTENT>
            </mtccore:ATTACHMENT>
          </mtc:ATTACHMENTS>
        </mtc:SHIPMENT_ORDER>
        <mtc:PRODUCT_ITEMS/>		/ in <mtc:CONSIGNMENT>	TODO
        <mtc:SHIPMENT_ITEMS/>		/ in <mtc:CONSIGNMENT>	TODO
      </mtc:CONSIGNMENT>
    </mtc:SERVICE_ORDER>
    <mtc:CUSTOMER_ORDER>
      <mtccore:CUSTOMER_ORDER_BODY>
      </mtccore:CUSTOMER_ORDER_BODY>
      <mtccore:CUSTOMER_ORDER_LINE>
     </mtccore:CUSTOMER_ORDER_LINE>
    </mtc:CUSTOMER_ORDER>
  </mtc:body>
</mtc:SERVICE_ORDER_MSG>


/ Einde NOTES ATTACHMENTS 

/ DEBUG EXPORT ATTACHMENTS

/ the stucture is 
ServiceOrderMessageProcessor.generate
	CustomerOrderProcessor.generate		/ voor alle customer orders	,
	ServiceOrderProcessorImpl.generate 
		ConsignmentProcessor.generate
			ShipmentOrderProcessor.generate
				AttachmentsProcessor.generate

/c
/ stack	,
/s
	ShipmentOrderProcessor(AbstractLogisticsOrderProcessor).addAttachments(Node, LogisticsOrderVO, String) line: 81	
	ShipmentOrderProcessor.generate(Node, ShipmentOrderVO, PurposeCodeVO, ShipmentItemVO) line: 121	
			boolean myGenerateAttachments = Boolean.parseBoolean(
					ApplicationPropertyManager.getInstance().getProperty(PROPERTY_EXPORT_SHIPMENT_ORDER_WITH_FILES, Boolean.TRUE.toString()));
			if (myGenerateAttachments) {
				addAttachments(aNode, aShipmentOrderVO, FileObject.RELATED_OBJECT_TYPE_SHIPMENT_ORDER);
/cb
	ShipmentOrderProcessor.generate(Node, ShipmentOrderVO, ShipmentItemVO) line: 129	
		generate(aNode, aShipmentOrderVO, null, aShipmentItem);
/cb
	ConsignmentProcessor.generateShipmentOrders(Node, ConsignmentVO, ShipmentItemVO) line: 182	
		for (Object myElement : aConsignmentVO.getServiceActionList()) {
			} else {
				myShipmentOrderVO = myServiceActionVO.getShipmentOrderVO();
			if (myShipmentOrderVO != null) {
				// Shipment order below service order.
				ShipmentOrderProcessor myProcessor = new ShipmentOrderProcessor(this);
				myProcessor.generate(myShipmentNode, myShipmentOrderVO, aShipmentItem);
/cb
	ConsignmentProcessor.generate(Node, ConsignmentVO, ShipmentItemVO) line: 97	
	BakkerServiceOrderProcessor(ServiceOrderProcessorImpl).generate(Node, ServiceOrderVO, ShipmentItemVO) line: 135	
	ServiceOrderMsgProcessor.generate(Document, ServiceOrderVO, ShipmentItemVO) line: 69	
	ServiceOrderMsgProducer.produce(ServiceOrderVO, Map<String,String>, ShipmentItemVO) line: 36	
	ServiceOrderExportServiceImpl.exportMessage(ServiceOrderExportRequest, ServiceOrderVO, ShipmentItemVO) line: 447	
	ServiceOrderExportServiceImpl.exportServiceOrder(ServiceOrderExportRequest) line: 500	
	ServiceOrderExportServiceImpl.handleRequest(ServiceOrderExportRequest, ServiceRequestProperties) line: 349	
	ServiceOrderExportServiceImpl.handleRequest(ServiceRequest, ServiceRequestProperties) line: 1	
	ServiceOrderExportServiceImpl(AbstractJmsServiceRequestHandler).onMessage(Message) line: 109	
/tx
	MessageListenerAdapter.onMessage(Message, Session) line: 339	
	DefaultMessageListenerContainer(AbstractMessageListenerContainer).doInvokeListener(SessionAwareMessageListener, Session, Message) line: 544	
	DefaultMessageListenerContainer(AbstractMessageListenerContainer).invokeListener(Session, Message) line: 504	
	DefaultMessageListenerContainer(AbstractMessageListenerContainer).doExecuteListener(Session, Message) line: 474	
	DefaultMessageListenerContainer(AbstractPollingMessageListenerContainer).doReceiveAndExecute(Object, Session, MessageConsumer, TransactionStatus) line: 325	
	DefaultMessageListenerContainer(AbstractPollingMessageListenerContainer).receiveAndExecute(Object, Session, MessageConsumer) line: 263	
	DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener() line: 1103	
	DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop() line: 1095	
	DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run() line: 992	
	Thread.run() line: 745	
/ debug	, 
/s
ShipmentOrderProcessor(AbstractLogisticsOrderProcessor).addAttachments(Node, LogisticsOrderVO, String) line: 82	

aLogisticsOrder	com.mpobjects.oms.model.shipmentorder.vo.ShipmentOrderVO_$$_javassist_152  (id=30289)	
	handler	org.hibernate.proxy.pojo.javassist.JavassistLazyInitializer  (id=30620)	
		target	com.mpobjects.oms.model.shipmentorder.vo.ShipmentOrderVO  (id=30681)	
			fileObjects	java.util.ArrayList  (id=31134)	
[]
			requestedDocuments	org.hibernate.collection.PersistentSet  (id=31567)	
[]

		Collection<FileObject> attachments = aLogisticsOrder.getFileObjects();
[]
		Set<RequestedDocument> requestedDocuments = aLogisticsOrder.getRequestedDocuments();
[]
		if (attachments == null || attachments.isEmpty()) {
			attachments = getDocumentService().getFileObjectDAO().getFilesByObjectType(aFileObjectType, aLogisticsOrder.getSystemId(), true);
ttachments	java.util.ArrayList  (id=36506)	
	[0]	com.mpobjects.document.entity.FileObject  (id=36513)	
		fileMeta	com.mpobjects.document.entity.FileMeta_$$_javassist_142  (id=36518)	
			handler	org.hibernate.proxy.pojo.javassist.JavassistLazyInitializer  (id=38780)	
				initialized false	
				target null	
/ LAZY 



/ Intermezzo

/ 7	. 

bakker20160224_t=# \dt *file*
                List of relations
 Schema |       Name       | Type  |    Owner    
--------+------------------+-------+-------------
 public | capacity_profile | table | mpopostgres
 public | file_data        | table | mpopostgres
 public | file_meta        | table | mpopostgres
 public | file_object      | table | mpopostgres
(4 rows)


/ FileObject is de attachment	,  heeft ref naar FileMeta	,
/ FileMeta  is meta	, 
/ FileData is de 'echte' data	, heeft ref naar

/ file object 
	
/ file object -> file meta  <- file data	, 

/ 7	. 

$ vi FileObject.standard.hbm.xml
...
$ vi FileMeta.standard.hbm.xml
...
$ vi FileData.standard.hbm.xml
...

/ 7	. 

select * 
from FILE_OBJECT this_ 
where this_.RELATED_OBJECT_TYPE='shipment-order'
and this_.RELATED_OBJECT_SYSTEMID=77577
and this_.IS_PUBLIC=true
 system_id | file_meta_systemid | related_object_systemid | related_object_type | is_public | reference1 | reference2 | sec_related_object_systemid 
-----------+--------------------+-------------------------+---------------------+-----------+------------+------------+-----------------------------
    775812 |                 35 |                   77577 | shipment-order      |         1 | NULL       | NULL       |                        NULL
(1 row)

/ related_object_systemid= system_id van de sho	,

bakker20160224_t=# select*from file_meta where system_id=35;
 system_id |    name     | extension | file_size | number_of_references |        mime_type         | organization_systemid | reference_1 |  reference_
2  | reference_3 | user_systemid |      uploaded_date      | description | sent_date | received_date | is_public | gzip_compressed | document_type_sys
temid | remote_location 
-----------+-------------+-----------+-----------+----------------------+--------------------------+-----------------------+-------------+------------
---+-------------+---------------+-------------------------+-------------+-----------+---------------+-----------+-----------------+------------------
------+-----------------
        35 | bakkergroep | png       |    207665 |                    1 | application/octet-stream |                     1 | bakkergroep | customer-lo
go | 10100       |         10100 | 2016-07-04 15:20:37.878 | bakkergroep | NULL      | NULL          |         0 |               0 |                  
 NULL | NULL
(1 row)

bakker20160224_t=# \d file_data
         Table "public.file_data"
       Column       |  Type   | Modifiers 
--------------------+---------+-----------
 system_id          | integer | 
 file_meta_systemid | integer | not null
 data               | bytea   | 						/ de 'echte' data	,
Indexes:
    "pk_file_data_1" PRIMARY KEY, btree (file_meta_systemid)

bakker20160224_t=# select system_id from file_data where file_meta_systemid=35;
 system_id 
-----------
        36
(1 row)
/ TODO Hoe te zien in psql	?
/ lees	, 
https://www.postgresql.org/docs/9.3/static/datatype-binary.html


/ Einde Intermezzo

		Node attachmentsNode = appendElement(aNode, MTC_NS + MTCCoreNames.ATTACHMENTS);
/s
XMLUtil.appendElement(Node, String) line: 156	
		Document myDocument = aParentNode.getOwnerDocument();
[#document: null]
		boolean myEmpty = false;

		String[] mySplit = aChildNodeName.split(":");
[mtc, ATTACHMENTS]
				myNameSpaceURI = myDocument.lookupNamespaceURI(mySplit[0]);
"http://system.mp-objects.com/schemas/MTC/ServiceOrder/V1/ServiceOrder.xsd"
				myElement = myDocument.createElementNS(myNameSpaceURI, aChildNodeName);
[mtc:ATTACHMENTS: null]
		aParentNode.appendChild(myElement);
aParentNode=[mtc:SHIPMENT_ORDER: null]
		return myElement;
/t
ShipmentOrderProcessor(AbstractLogisticsOrderProcessor).addAttachments(Node, LogisticsOrderVO, String) line: 95	
		Node attachmentsNode = appendElement(aNode, MTC_NS + MTCCoreNames.ATTACHMENTS);
/d
		if (attachments != null) {
			for (FileObject attachment : attachments) {
				addAttachment(attachmentsNode, attachment.getFileMeta());
/s
ShipmentOrderProcessor(AbstractLogisticsOrderProcessor).addAttachment(Node, FileMeta) line: 55	

		if (aFileMeta.isPersistent()) {								/ initializes FileMeta in proxy	, 
			// TODO: is this still needed?
			aFileMeta = getDocumentService().getFileMetaDAO().getWithInitializedDataBySystemId(aFileMeta.getSystemId());		/ TODO Hibernate.initialize

		if (aFileMeta != null) {
			Node attachmentNode = appendElement(attachmentsNode, CORE_NS + MTCCoreNames.ATTACHMENT);
			AttachmentsProcessor.generate(attachmentNode, aFileMeta);
/s
AttachmentsProcessor.generate(Node, FileMeta) line: 48	

aFileVO	com.mpobjects.document.entity.FileMeta_$$_javassist_142  (id=33049)	
	handler	org.hibernate.proxy.pojo.javassist.JavassistLazyInitializer  (id=33212)	
		target	com.mpobjects.document.entity.FileMeta  (id=33254)	
			fileDataList	org.hibernate.collection.PersistentSet  (id=33281)	
				[0]	com.mpobjects.document.entity.FileData  (id=34406)	
					data	(id=34468)																/ de 'echte' data	,
					fileMeta	com.mpobjects.document.entity.FileMeta_$$_javassist_142  (id=33049)	
					performanceMonitorService	null	
					systemId	36	


		appendTextElement(aNode, CORE_NS + MTCCoreNames.FILE_NAME, aFileVO.getName());
/s
XMLUtil.appendTextElement(Node, String, String) line: 194	
/=
	public static Element appendTextElement(Node aParentNode, String aChildNodeName, String aValue) {
aParentNode	org.apache.xerces.dom.ElementNSImpl  (id=33818)		/ [mtccore:ATTACHMENT: null]j
aChildNodeName	"mtccore:FILE_NAME" (id=34145)	
aValue	"bakkergroep" (id=33304)	

		Element myElement = appendElement(aParentNode, aChildNodeName);
		myElement.setTextContent(removeIllegalXmlChars(aValue));
		return myElement;
/t
AttachmentsProcessor.generate(Node, FileMeta) line: 49	
		appendTextElement(aNode, CORE_NS + MTCCoreNames.FILE_NAME, aFileVO.getName());
/d
		...
		if (aFileVO.getData() != null && aFileVO.getData().length > 0) {
/s
FileMeta.getData() line: 95	

this	com.mpobjects.document.entity.FileMeta  (id=33254)	
	fileDataList	org.hibernate.collection.PersistentSet  (id=33281)	
		[0]	com.mpobjects.document.entity.FileData  (id=34406)	
			data	(id=34468)																			/ de 'echte' data	,
			fileMeta	com.mpobjects.document.entity.FileMeta_$$_javassist_142  (id=33049)	
			performanceMonitorService	null	
			systemId	36																				/ klopt	, 

		if (getFileData().size() > 0) {
/j
1
			return getFileData().iterator().next().getData();
/= data property hierboven	, 
/t
AttachmentsProcessor.generate(Node, FileMeta) line: 74	
		if (aFileVO.getData() != null && aFileVO.getData().length > 0) {
/d
			appendTextElement(aNode, CORE_NS + MTCCoreNames.CONTENT, new String(Base64.encodeBase64(aFileVO.getData(), true)));

/ we zien hem in 
http://localhost:8161/admin/message.jsp?id=ID%3alocalhost.localdomain-51415-1490000824570-6%3a6%3a1%3a1%3a1&JMSDestination=MPOBJECTS.FROM.BAKKER




/ Einde DEBUG EXPORT ATTACHMENTS


/ TEST EXPORT ATTACHMENTS 

/ Lees	, 
https://github.com/mockito/mockito/pull/171
/ scs versie van mockito uses cglib	, maar die zelf in workspace-wicket7_3 bytebuddy	,  

	@Test
	public void addAttachmentsTestWithFileObjectNoMeta() {
		List<FileObject> attachments = new ArrayList<FileObject>();
		attachments.add(new FileObject());
		 logisticsOrder.setFileObjects(attachments);										/ (*)  

		processor.addAttachments(node, logisticsOrder, RELATED_OBJECT_TYPE_SERVICE_ORDER);
/s
		Collection<FileObject> attachments = aLogisticsOrder.getFileObjects(); 				/ door (*) is deze collection niet leeg	, 
		Set<RequestedDocument> requestedDocuments = aLogisticsOrder.getRequestedDocuments();

		if (attachments == null || attachments.isEmpty()) {
/n
			attachments = getDocumentService().getFileObjectDAO().getFilesByObjectType(aFileObjectType, aLogisticsOrder.getSystemId(), true);
/n
/ Dus door (*) vermijden we de database query	, 
/ We kunnen ook de database mock	, 
/ TODO 
/ MORGENOCHTEND	,




/ Einde TEST EXPORT ATTACHMENTS 

/ DEBUG TEST EXPORT ATTACHMENTS 

/ 13	. 

public class AbstractLogisticsOrderProcessorTest {

	@InjectMocks
	@Spy
	private DocumentService documentService;

	@Mock
	private FileMetaDAO fileMetaDAO;

	@Mock
	private FileObjectDAO fileObjectDAO;



//////////////////////////////////////////////
/ we zien dat documentService een spy is 	, en een dao mock injected krijgt	,  


/ we set de dao mock in de spy	,  

/ stack
/s
	DocumentServiceImpl$$EnhancerByMockitoWithCGLIB$$cda53af8(DocumentServiceImpl).setFileMetaDAO(FileMetaDAO) line: 280	
	DocumentServiceImpl$$EnhancerByMockitoWithCGLIB$$cda53af8.CGLIB$setFileMetaDAO$13(FileMetaDAO) line: not available	
	DocumentServiceImpl$$EnhancerByMockitoWithCGLIB$$cda53af8$$FastClassByMockitoWithCGLIB$$3fd3b029.invoke(int, Object, Object[]) line: not available	
	MethodProxy.invokeSuper(Object, Object[]) line: 216	
	DelegatingMockitoMethodProxy(AbstractMockitoMethodProxy).invokeSuper(Object, Object[]) line: 10	
	CGLIBProxyRealMethod.invoke(Object, Object[]) line: 22	
	FilteredCGLIBProxyRealMethod.invoke(Object, Object[]) line: 27	
	InvocationImpl.callRealMethod() line: 108	
	CallsRealMethods.answer(InvocationOnMock) line: 36	
	MockHandlerImpl.handle(Invocation) line: 93	
	NullResultGuardian.handle(Invocation) line: 29	
	InvocationNotifierHandler.handle(Invocation) line: 38	
	MethodInterceptorFilter.intercept(Object, Method, Object[], MethodProxy) line: 51	
	DocumentServiceImpl$$EnhancerByMockitoWithCGLIB$$cda53af8.setFileMetaDAO(FileMetaDAO) line: not available	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 39	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 25	
	Method.invoke(Object, Object...) line: 597	
	BeanPropertySetter.set(Object) line: 59	
	FinalMockCandidateFilter$1.thenInject() line: 30	
	PropertyAndSetterInjection.injectMockCandidatesOnFields(Set<Object>, Object, boolean, List<Field>) line: 111	
	PropertyAndSetterInjection.injectMockCandidates(Class<?>, Set<Object>, Object) line: 102	
	PropertyAndSetterInjection.processInjection(Field, Object, Set<Object>) line: 77	
	PropertyAndSetterInjection(MockInjectionStrategy).process(Field, Object, Set<Object>) line: 68	
	ConstructorInjection(MockInjectionStrategy).relayProcessToNextStrategy(Field, Object, Set<Object>) line: 89	
	ConstructorInjection(MockInjectionStrategy).process(Field, Object, Set<Object>) line: 71	
	MockInjectionStrategy$1(MockInjectionStrategy).relayProcessToNextStrategy(Field, Object, Set<Object>) line: 89	
	MockInjectionStrategy$1(MockInjectionStrategy).process(Field, Object, Set<Object>) line: 71	
	MockInjection$OngoingMockInjection.apply() line: 92	
	DefaultInjectionEngine.injectMocksOnFields(Set<Field>, Set<Object>, Object) line: 20									<-
	InjectingAnnotationEngine.injectMocks(Object) line: 100	
	InjectingAnnotationEngine.processInjectMocks(Class<?>, Object) line: 62	
	InjectingAnnotationEngine.process(Class<?>, Object) line: 56	
	MockitoAnnotations.initMocks(Object) line: 108	
	AbstractLogisticsOrderProcessorTest.setUp() line: 128	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 39	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 25	
	Method.invoke(Object, Object...) line: 597	
	FrameworkMethod$1.runReflectiveCall() line: 44	
	FrameworkMethod$1(ReflectiveCallable).run() line: 15	
	FrameworkMethod.invokeExplosively(Object, Object...) line: 41	
	RunBefores.evaluate() line: 27	
	BlockJUnit4ClassRunner.runNotIgnored(FrameworkMethod, EachTestNotifier) line: 79	
	BlockJUnit4ClassRunner.runChild(FrameworkMethod, RunNotifier) line: 71	
	BlockJUnit4ClassRunner.runChild(Object, RunNotifier) line: 49	
	ParentRunner$3.run() line: 193	
	ParentRunner$1.schedule(Runnable) line: 52	
	BlockJUnit4ClassRunner(ParentRunner).runChildren(RunNotifier) line: 191	
	ParentRunner.access$000(ParentRunner, RunNotifier) line: 42	
	ParentRunner$2.evaluate() line: 184	
	BlockJUnit4ClassRunner(ParentRunner).run(RunNotifier) line: 236	
	JUnit4TestClassReference(JUnit4TestReference).run(TestExecution) line: 50	
	TestExecution.run(ITestReference[]) line: 38	
	RemoteTestRunner.runTests(String[], String, TestExecution) line: 467	
	RemoteTestRunner.runTests(TestExecution) line: 683	
	RemoteTestRunner.run() line: 390	
	RemoteTestRunner.main(String[]) line: 197	
/ debug	, 
/s
DocumentServiceImpl$$EnhancerByMockitoWithCGLIB$$d1ecc040(DocumentServiceImpl).setFileMetaDAO(FileMetaDAO) line: 280	
		this.fileMetaDAO = fileMetaDAO;
fileMetaDAO	com.mpobjects.document.dao.filemeta.FileMetaDAO$$EnhancerByMockitoWithCGLIB$$eb983356  (id=358)			/ een mock is een cglib proxy	, 
	CGLIB$BOUND	true	
	CGLIB$CALLBACK_0	org.mockito.internal.creation.MethodInterceptorFilter  (id=374)	
	CGLIB$CALLBACK_1	org.mockito.internal.creation.jmock.SerializableNoOp  (id=376)	

/c
/s
DocumentServiceImpl$$EnhancerByMockitoWithCGLIB$$d1ecc040(DocumentServiceImpl).setFileObjectDAO(FileObjectDAO) line: 288	/ een mock is een cglib proxy	,	
		this.fileObjectDAO = fileObjectDAO;
CGLIB$BOUND	true	
CGLIB$CALLBACK_0	org.mockito.internal.creation.MethodInterceptorFilter  (id=392)	
CGLIB$CALLBACK_1	org.mockito.internal.creation.jmock.SerializableNoOp  (id=376)	

this	com.mpobjects.document.service.DocumentServiceImpl$$EnhancerByMockitoWithCGLIB$$d1ecc040  (id=357)			/ een spy is ook een cglib proxy	, 
	$SWITCH_TABLE$com$mpobjects$oms$model$binary$MetaDataType	null	
	CGLIB$BOUND	false	
	CGLIB$CALLBACK_0	org.mockito.internal.creation.MethodInterceptorFilter  (id=397)	
	CGLIB$CALLBACK_1	org.mockito.internal.creation.jmock.SerializableNoOp  (id=376)	
	documentTypeDAO	null	
	fileMetaDAO	com.mpobjects.document.dao.filemeta.FileMetaDAO$$EnhancerByMockitoWithCGLIB$$eb983356  (id=358)	
	fileMetaService	null	
	fileObjectDAO	null	
	resourceDAO	null	


/ een spy is een inst van de cglib enhancement van DocumentServiceImpl	, 
/ maar een hele andere dan we gewend zijn	, we zien geen handler , target	, en de mocked dao's worden in de enhancement set	, niet in handler, target zoals we kennen	,  
/ WH is handler, target van javassist	, 
/ TODO

/ Ook	, 
public class AbstractLogisticsOrderProcessorTest {
	@InjectMocks
	private AbstractLogisticsOrderProcessor processor;

this	com.mpobjects.oms.model.logisticsorder.xml.AbstractLogisticsOrderProcessorTest$1$$EnhancerByMockitoWithCGLIB$$f3b977d6  (id=431)	
	$SWITCH_TABLE$com$mpobjects$common$util$XMLUtil$NsAware	null	
	cachedXpathAPI	null	
	CGLIB$BOUND	true	
	CGLIB$CALLBACK_0	org.mockito.internal.creation.MethodInterceptorFilter  (id=456)	
	CGLIB$CALLBACK_1	org.mockito.internal.creation.jmock.SerializableNoOp  (id=408)	
	context	com.mpobjects.oms.model.shared.xml.ProcessingContext  (id=457)	
	documentService	com.mpobjects.document.service.DocumentServiceImpl$$EnhancerByMockitoWithCGLIB$$cda53af8  (id=357)	
	parent	com.mpobjects.oms.model.logisticsorder.xml.AbstractLogisticsOrderProcessorTest$1$$EnhancerByMockitoWithCGLIB$$f3b977d6  (id=431)	
	prefixResolver	null	
	propertyList	java.util.HashMap  (id=459)	
	this$0	com.mpobjects.oms.model.logisticsorder.xml.AbstractLogisticsOrderProcessorTest  (id=383)	

this.parent==this
true
/ TODO

/ 13	. 

/c
	@Test
	public void addAttachmentsTestEmptyAttachmentList() {
		processor.addAttachments(node, logisticsOrder, RELATED_OBJECT_TYPE_SERVICE_ORDER);

/ stack	,
/s
	AbstractLogisticsOrderProcessorTest$1$$EnhancerByMockitoWithCGLIB$$f3b977d6(AbstractLogisticsOrderProcessor).addAttachments(Node, LogisticsOrderVO, String) line: 81	
	AbstractLogisticsOrderProcessorTest$1$$EnhancerByMockitoWithCGLIB$$f3b977d6.CGLIB$addAttachments$0(Node, LogisticsOrderVO, String) line: not available	
	AbstractLogisticsOrderProcessorTest$1$$EnhancerByMockitoWithCGLIB$$f3b977d6$$FastClassByMockitoWithCGLIB$$8a4a1c4.invoke(int, Object, Object[]) line: not available	
	MethodProxy.invokeSuper(Object, Object[]) line: 216	
	DelegatingMockitoMethodProxy(AbstractMockitoMethodProxy).invokeSuper(Object, Object[]) line: 10	
	CGLIBProxyRealMethod.invoke(Object, Object[]) line: 22	
	FilteredCGLIBProxyRealMethod.invoke(Object, Object[]) line: 27	
	InvocationImpl.callRealMethod() line: 108	
	CallsRealMethods.answer(InvocationOnMock) line: 36	
	MockHandlerImpl.handle(Invocation) line: 93	
	NullResultGuardian.handle(Invocation) line: 29	
	InvocationNotifierHandler.handle(Invocation) line: 38	
	MethodInterceptorFilter.intercept(Object, Method, Object[], MethodProxy) line: 51	
	AbstractLogisticsOrderProcessorTest$1$$EnhancerByMockitoWithCGLIB$$f3b977d6.addAttachments(Node, LogisticsOrderVO, String) line: not available	
																						<- processor = intst van een subclass van AbstractLogisticsOrderProcessor	, 	
	AbstractLogisticsOrderProcessorTest.addAttachmentsTestEmptyAttachmentList() line: 59									<- de test inst	,
		processor.addAttachments(node, logisticsOrder, RELATED_OBJECT_TYPE_SERVICE_ORDER);
/cb
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 39	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 25	
	Method.invoke(Object, Object...) line: 597	
	FrameworkMethod$1.runReflectiveCall() line: 44	
	FrameworkMethod$1(ReflectiveCallable).run() line: 15	
	FrameworkMethod.invokeExplosively(Object, Object...) line: 41	
	InvokeMethod.evaluate() line: 20	
	RunBefores.evaluate() line: 28	
	BlockJUnit4ClassRunner.runNotIgnored(FrameworkMethod, EachTestNotifier) line: 79	
	BlockJUnit4ClassRunner.runChild(FrameworkMethod, RunNotifier) line: 71	
	BlockJUnit4ClassRunner.runChild(Object, RunNotifier) line: 49	
	ParentRunner$3.run() line: 193	
	ParentRunner$1.schedule(Runnable) line: 52	
	BlockJUnit4ClassRunner(ParentRunner).runChildren(RunNotifier) line: 191	
	ParentRunner.access$000(ParentRunner, RunNotifier) line: 42	
	ParentRunner$2.evaluate() line: 184	
	BlockJUnit4ClassRunner(ParentRunner).run(RunNotifier) line: 236	
	JUnit4TestClassReference(JUnit4TestReference).run(TestExecution) line: 50	
	TestExecution.run(ITestReference[]) line: 38	
	RemoteTestRunner.runTests(String[], String, TestExecution) line: 467	
	RemoteTestRunner.runTests(TestExecution) line: 683	
	RemoteTestRunner.run() line: 390	
	RemoteTestRunner.main(String[]) line: 197	

/ Intermezzo

/ we zien 	,

	@Before
	public void setUp() throws ParserConfigurationException {
		processor = Mockito.spy(new AbstractLogisticsOrderProcessor() {
		});
		documentService = Mockito.spy(new DocumentServiceImpl());

/ Dus processor is een cglib enhancement van een subclass van AbstractLogisticsOrderProcessor	, AbstractLogisticsOrderProcessorTest$1	, 
/ en documentService is een cglib enhancement van DocumentServiceImpl

this	com.mpobjects.oms.model.logisticsorder.xml.AbstractLogisticsOrderProcessorTest  (id=383)	
	documentService	com.mpobjects.document.service.DocumentServiceImpl$$EnhancerByMockitoWithCGLIB$$cda53af8  (id=357)	
	processor	com.mpobjects.oms.model.logisticsorder.xml.AbstractLogisticsOrderProcessorTest$1$$EnhancerByMockitoWithCGLIB$$f3b977d6  (id=431)	

/ Einde Intermezzo

/ debug	, 
/s
AbstractLogisticsOrderProcessorTest$1$$EnhancerByMockitoWithCGLIB$$f3b977d6(AbstractLogisticsOrderProcessor).addAttachments(Node, LogisticsOrderVO, String) line: 81	
		Collection<FileObject> attachments = aLogisticsOrder.getFileObjects();
[]
		Set<RequestedDocument> requestedDocuments = aLogisticsOrder.getRequestedDocuments();
[]
		if (attachments == null || attachments.isEmpty()) {
			attachments = getDocumentService().getFileObjectDAO().getFilesByObjectType(aFileObjectType, aLogisticsOrder.getSystemId(), true);
[]
/ mocked dao call	, geen when , dus doet niets	, 

		if ((attachments == null || attachments.isEmpty()) &&
				(requestedDocuments == null || requestedDocuments.isEmpty())) {
			return;

/ 13	. 

/ passeert dezelfde test als hieboven	, 
/c
	@Test
	public void addAttachmentsTestNoAttachmentList() {
		logisticsOrder.setFileObjects(null);
		processor.addAttachments(node, logisticsOrder, RELATED_OBJECT_TYPE_SERVICE_ORDER);
/s
AbstractLogisticsOrderProcessorTest$1$$EnhancerByMockitoWithCGLIB$$ddc5282d(AbstractLogisticsOrderProcessor).addAttachments(Node, LogisticsOrderVO, String) line: 85	
		Collection<FileObject> attachments = aLogisticsOrder.getFileObjects();
null
		Set<RequestedDocument> requestedDocuments = aLogisticsOrder.getRequestedDocuments();

		if (attachments == null || attachments.isEmpty()) {
/j
			attachments = getDocumentService().getFileObjectDAO().getFilesByObjectType(aFileObjectType, aLogisticsOrder.getSystemId(), true);


/ 13	. 
/c
AbstractLogisticsOrderProcessorTest.addAttachmentsTestWithFileObjectNoMeta() line: 78	
		List<FileObject> attachments = new ArrayList<FileObject>();
		attachments.add(new FileObject());
		logisticsOrder.setFileObjects(attachments);

		processor.addAttachments(node, logisticsOrder, RELATED_OBJECT_TYPE_SERVICE_ORDER);
/s
AbstractLogisticsOrderProcessorTest$1$$EnhancerByMockitoWithCGLIB$$ddc5282d(AbstractLogisticsOrderProcessor).addAttachments(Node, LogisticsOrderVO, String) line: 81	
		Collection<FileObject> attachments = aLogisticsOrder.getFileObjects();
		Set<RequestedDocument> requestedDocuments = aLogisticsOrder.getRequestedDocuments();

		if (attachments == null || attachments.isEmpty()) {
/n
/ GEEN (mocked) dao call
		Node attachmentsNode = appendElement(aNode, MTC_NS + MTCCoreNames.ATTACHMENTS);
		if (attachments != null) {
			for (FileObject attachment : attachments) {
				addAttachment(attachmentsNode, attachment.getFileMeta());
/s
AbstractLogisticsOrderProcessorTest$1$$EnhancerByMockitoWithCGLIB$$ddc5282d(AbstractLogisticsOrderProcessor).addAttachment(Node, FileMeta) line: 55	
		if (aFileMeta == null) {
			return;
		}
/t
AbstractLogisticsOrderProcessorTest$1$$EnhancerByMockitoWithCGLIB$$ddc5282d(AbstractLogisticsOrderProcessor).addAttachments(Node, LogisticsOrderVO, String) line: 101	
		if (attachments != null) {
			for (FileObject attachment : attachments) {
				addAttachment(attachmentsNode, attachment.getFileMeta());
/d
AbstractLogisticsOrderProcessorTest.addAttachmentsTestWithFileObjectNoMeta() line: 83	
		processor.addAttachments(node, logisticsOrder, RELATED_OBJECT_TYPE_SERVICE_ORDER);
/d
		Assert.assertNotNull(node.getFirstChild());	/ [mtc:ATTACHMENTS: null]
		Assert.assertEquals("First Node", XMLProcessor.MTC_NS + MTCCoreNames.ATTACHMENTS, node.getFirstChild().getNodeName());
		Assert.assertEquals("No child nodes", 0, node.getFirstChild().getChildNodes().getLength());


/ 13
/c
	@Test
	public void addAttachmentsTestWithPersistedAttachment() {
		List<FileObject> attachments = new ArrayList<FileObject>();
		FileObject fileObject = new FileObject();
		FileMeta fileMeta = new FileMeta();
		fileMeta.setSystemId(123);
		fileObject.setFileMeta(fileMeta);
		attachments.add(fileObject);

		logisticsOrder.setFileObjects(attachments);
		processor.addAttachments(node, logisticsOrder, RELATED_OBJECT_TYPE_SERVICE_ORDER);
/s
AbstractLogisticsOrderProcessorTest$1$$EnhancerByMockitoWithCGLIB$$4a9e4b91(AbstractLogisticsOrderProcessor).addAttachments(Node, LogisticsOrderVO, String) line: 82	
		Collection<FileObject> attachments = aLogisticsOrder.getFileObjects();
attachments	java.util.ArrayList  (id=527)	
	[0]	com.mpobjects.document.entity.FileObject  (id=528)	
		fileMeta	com.mpobjects.document.entity.FileMeta  (id=531)	
			systemId	123	

		if (attachments == null || attachments.isEmpty()) {
/n
		Node attachmentsNode = appendElement(aNode, MTC_NS + MTCCoreNames.ATTACHMENTS);
		if (attachments != null) {
			for (FileObject attachment : attachments) {
				addAttachment(attachmentsNode, attachment.getFileMeta());
/s
AbstractLogisticsOrderProcessorTest$1$$EnhancerByMockitoWithCGLIB$$4a9e4b91(AbstractLogisticsOrderProcessor).addAttachment(Node, FileMeta) line: 55	
		if (aFileMeta.isPersistent()) {
/j 
/ want heeft systemId	, 
			// TODO: is this still needed?
			aFileMeta = getDocumentService().getFileMetaDAO().getWithInitializedDataBySystemId(aFileMeta.getSystemId());
null
		if (aFileMeta != null) {
/n
/ TODO Is dit de bedoeling	?
/t
AbstractLogisticsOrderProcessorTest.addAttachmentsTestWithPersistedAttachment() line: 101	
		processor.addAttachments(node, logisticsOrder, RELATED_OBJECT_TYPE_SERVICE_ORDER);
/d
		Mockito.verify(documentService).getFileMetaDAO();

/ 13	. 

/ hetzelfde als boven	, maar dan FileMeta zonder systemId	, 

	@Test
	public void addAttachmentsTestWithVolatileAttachment() {
		List<FileObject> attachments = new ArrayList<FileObject>();
		FileObject fileObject = new FileObject();
		fileObject.setFileMeta(new FileMeta());
		attachments.add(fileObject);

		logisticsOrder.setFileObjects(attachments);
		processor.addAttachments(node, logisticsOrder, RELATED_OBJECT_TYPE_SERVICE_ORDER);
/s
AbstractLogisticsOrderProcessorTest$1$$EnhancerByMockitoWithCGLIB$$4a9e4b91(AbstractLogisticsOrderProcessor).addAttachments(Node, LogisticsOrderVO, String) line: 97	

		Collection<FileObject> attachments = aLogisticsOrder.getFileObjects();
		if (attachments == null || attachments.isEmpty()) {
/n
		Node attachmentsNode = appendElement(aNode, MTC_NS + MTCCoreNames.ATTACHMENTS);
		if (attachments != null) {
			for (FileObject attachment : attachments) {
				addAttachment(attachmentsNode, attachment.getFileMeta());
/s
AbstractLogisticsOrderProcessorTest$1$$EnhancerByMockitoWithCGLIB$$4a9e4b91(AbstractLogisticsOrderProcessor).addAttachment(Node, FileMeta) line: 63	
		if (aFileMeta.isPersistent()) {
/n
		if (aFileMeta != null) {
/j
			Node attachmentNode = appendElement(attachmentsNode, CORE_NS + MTCCoreNames.ATTACHMENT);
			AttachmentsProcessor.generate(attachmentNode, aFileMeta);
/s
AttachmentsProcessor.generate(Node, FileMeta) line: 62	
		appendTextElement(aNode, CORE_NS + MTCCoreNames.FILE_NAME, aFileVO.getName());
	...
/t
AbstractLogisticsOrderProcessorTest.addAttachmentsTestWithVolatileAttachment() line: 114	
		processor.addAttachments(node, logisticsOrder, RELATED_OBJECT_TYPE_SERVICE_ORDER);
/d




/ Einde DEBUG TEST EXPORT ATTACHMENTS 

/ DEBUG EXPORT HOLD_STATUS

/ de exports zien we in de GUI van activemq	, en met xmllint --format set we ze in ~/tmp/copy_study	, bijv	, seo_export_20160323_pretty.txt

/ we export de seo	, 
/ de msg komt eerst op een interne queue	, 
/ en gaat daarna naar MPOBJECT.FROM.BAKKER			/ TODO 
/c
/ stack
/s
	CustomerOrderBodyProcessor.generateHoldStatus(Node, String, String) line: 338	
	CustomerOrderBodyProcessor.generate(Node, CustomerOrder) line: 172	
	CustomerOrderProcessor.generate(Node, CustomerOrder, Map<String,String>) line: 78	
	ServiceOrderMsgProcessor.exportCustomerOrders(Node, ServiceOrderVO) line: 118	
	ServiceOrderMsgProcessor.generate(Document, ServiceOrderVO, ShipmentItemVO) line: 72	
	ServiceOrderMsgProducer.produce(ServiceOrderVO, Map<String,String>, ShipmentItemVO) line: 36	
	ServiceOrderExportServiceImpl.exportMessage(ServiceOrderExportRequest, ServiceOrderVO, ShipmentItemVO) line: 447	
	ServiceOrderExportServiceImpl.exportServiceOrder(ServiceOrderExportRequest) line: 500	
	ServiceOrderExportServiceImpl.handleRequest(ServiceOrderExportRequest, ServiceRequestProperties) line: 349	
	ServiceOrderExportServiceImpl.handleRequest(ServiceRequest, ServiceRequestProperties) line: 1	
	ServiceOrderExportServiceImpl(AbstractJmsServiceRequestHandler).onMessage(Message) line: 109			<-
aMessage	org.apache.activemq.command.ActiveMQObjectMessage  (id=27880)	
	destination	org.apache.activemq.command.ActiveMQQueue  (id=28033)			/ queue://com.mpobjects.messageexport
/cb
	GeneratedMethodAccessor1413.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.__invoke(Object, Object[]) line: 43	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	Method.invoke(Object, Object...) line: 606	
	AopUtils.invokeJoinpointUsingReflection(Object, Method, Object[]) line: 317	
	ReflectiveMethodInvocation.invokeJoinpoint() line: 183	
	ReflectiveMethodInvocation.proceed() line: 150	
	TransactionInterceptor$1.proceedWithInvocation() line: 96	
	TransactionInterceptor(TransactionAspectSupport).invokeWithinTransaction(Method, Class, TransactionAspectSupport$InvocationCallback) line: 260	
	TransactionInterceptor.invoke(MethodInvocation) line: 94	
	ReflectiveMethodInvocation.proceed() line: 172	
	JdkDynamicAopProxy.invoke(Object, Method, Object[]) line: 204	
	$Proxy287.onMessage(Message) line: not available	
	MessageListenerAdapter.onMessage(Message, Session) line: 339	
message	org.apache.activemq.command.ActiveMQObjectMessage  (id=27880)	
	destination	org.apache.activemq.command.ActiveMQQueue  (id=28033)	/ queue://com.mpobjects.messageexport	
/cb
	DefaultMessageListenerContainer(AbstractMessageListenerContainer).doInvokeListener(SessionAwareMessageListener, Session, Message) line: 544	
	DefaultMessageListenerContainer(AbstractMessageListenerContainer).invokeListener(Session, Message) line: 504	
	DefaultMessageListenerContainer(AbstractMessageListenerContainer).doExecuteListener(Session, Message) line: 474	
	DefaultMessageListenerContainer(AbstractPollingMessageListenerContainer).doReceiveAndExecute(Object, Session, MessageConsumer, TransactionStatus) line: 325	
	DefaultMessageListenerContainer(AbstractPollingMessageListenerContainer).receiveAndExecute(Object, Session, MessageConsumer) line: 263	
	DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener() line: 1103	
	DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop() line: 1095	
	DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run() line: 992	
	Thread.run() line: 745	
/ debug	, 
/s
CustomerOrderBodyProcessor.generateHoldStatus(Node, String, String) line: 338	
		appendTextElement(node, elem, value);
node	org.apache.xerces.dom.ElementNSImpl  (id=27780)			/ [mtccore:CUSTOMER_ORDER_BODY: null]
elem	"mtccore:HOLD_STATUS" (id=27781)	
value	"REVIEW_HOLD" (id=27782)	
/ OK
/s
	public static Element appendTextElement(Node aParentNode, String aChildNodeName, String aValue) {
		Element myElement = appendElement(aParentNode, aChildNodeName);
		myElement.setTextContent(removeIllegalXmlChars(aValue));
		return myElement;
	}





/ Einde DEBUG EXPORT HOLD_STATUS

/ DEBUG IMPORT HOLD_STATUS

/ de te import XMLs staan in 
[eric@localhost 14]$ pwd
/home/eric/Integration/Bakker/imports/CustomerOrder/2017-03/14
[eric@localhost 14]$ vi 82727e42-ebe7-4966-afe6-21d0b654cacferic
   <mtc:header>
      <mtccore:mid>82727e42-ebe7-4966-afe6-21d0b654cacferic14</mtccore:mid>			<- unique	,
...
        <mtccore:CUSTOMER_ORDER_BODY>
            <mtccore:CUSTOMER_ORDER_ID>CO000032313eric14</mtccore:CUSTOMER_ORDER_ID>		<- unique

/ we komen snel in	,
/c
/stack
/s
	CustomerOrderBodyProcessor.processHoldStatus(CustomerOrder, Node) line: 328	
	CustomerOrderBodyProcessor.process(CustomerOrder, Node) line: 299	
	CustomerOrderProcessor.process(Node) line: 136	
	CustomerOrderXmlNodeProcessorImpl.processCustomerOrder(Node) line: 75	
	CustomerOrderXmlNodeProcessorImpl.processCustomerOrderNodeInNewTx(Node) line: 50	

	CustomerOrderMsgProcessor.process(Node) line: 29	
	CustomerOrderMsgConsumer.process(Message) line: 39	
	CustomerOrderMsgConsumer(MessageConsumer).handle(Message) line: 120	

	MessageConsumerHandler$$EnhancerBySpringCGLIB$$1564440d(MessageConsumerHandler).onExchange(MessageExchange) line: 172	
	MessageConsumerHandler$$EnhancerBySpringCGLIB$$1564440d(AbstractExchangeHandler).handleExchange(ExchangeHandlerChain, MessageExchange) line: 43	
	SingletonExchangeHandlerChain.next(MessageExchange) line: 43	
	DemuxExchangeHandler.handleMessage(ExchangeHandler, MessageExchange) line: 110	
	DemuxExchangeHandler.onExchange(MessageExchange) line: 123	
	DemuxExchangeHandler(AbstractExchangeHandler).handleExchange(ExchangeHandlerChain, MessageExchange) line: 43	
	DefaultExchangeHandlerChain.next(MessageExchange) line: 50	
	TxExchangeHandler(AbstractExchangeHandler).handleExchange(ExchangeHandlerChain, MessageExchange) line: 64	
	TxExchangeHandler.handleExchange(ExchangeHandlerChain, MessageExchange) line: 62	
	GeneratedMethodAccessor3365.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available	
	Method.invoke(Object, Object...) line: 606	
	AopUtils.invokeJoinpointUsingReflection(Object, Method, Object[]) line: 317	
	ReflectiveMethodInvocation.invokeJoinpoint() line: 183	
	ReflectiveMethodInvocation.proceed() line: 150	
	TransactionInterceptor$1.proceedWithInvocation() line: 96	
	TransactionInterceptor(TransactionAspectSupport).invokeWithinTransaction(Method, Class, TransactionAspectSupport$InvocationCallback) line: 260	
	TransactionInterceptor.invoke(MethodInvocation) line: 94	
	ReflectiveMethodInvocation.proceed() line: 172	
	JdkDynamicAopProxy.invoke(Object, Method, Object[]) line: 204	
	$Proxy507.handleExchange(ExchangeHandlerChain, MessageExchange) line: not available	
	DefaultExchangeHandlerChain.next(MessageExchange) line: 50	
	MessageTraceExchangeHandler(AbstractExchangeHandler).handleExchange(ExchangeHandlerChain, MessageExchange) line: 64	
	DefaultExchangeHandlerChain.next(MessageExchange) line: 50	
	AuthNExchangeHandler(AbstractExchangeHandler).handleExchange(ExchangeHandlerChain, MessageExchange) line: 64	
	DefaultExchangeHandlerChain.next(MessageExchange) line: 50	
	ArchiveExchangeHandler(AbstractExchangeHandler).handleExchange(ExchangeHandlerChain, MessageExchange) line: 64	
	DefaultExchangeHandlerChain.next(MessageExchange) line: 50	
	SapXConverterExchangeHandler(AbstractExchangeHandler).handleExchange(ExchangeHandlerChain, MessageExchange) line: 64	
	DefaultExchangeHandlerChain.next(MessageExchange) line: 50	
	ArchiveErrorExchangeHandler(AbstractExchangeHandler).handleExchange(ExchangeHandlerChain, MessageExchange) line: 64	
	DefaultExchangeHandlerChain.next(MessageExchange) line: 50	
	RetryExchangeHandler(AbstractExchangeHandler).handleExchange(ExchangeHandlerChain, MessageExchange) line: 64	
	RetryExchangeHandler.handleExchange(ExchangeHandlerChain, MessageExchange) line: 80	
	DefaultExchangeHandlerChain.next(MessageExchange) line: 50	
	MessageHandler.handleExchange(MessageExchange) line: 55	
	MpoMessageListener.processMessage(Message, JmsMpoMessage) line: 388	
	MpoMessageListener.onMessage(Message) line: 201	
	DefaultMessageListenerContainer(AbstractMessageListenerContainer).doInvokeListener(MessageListener, Message) line: 569	
	DefaultMessageListenerContainer(AbstractMessageListenerContainer).invokeListener(Session, Message) line: 507	
	DefaultMessageListenerContainer(AbstractMessageListenerContainer).doExecuteListener(Session, Message) line: 474	
	DefaultMessageListenerContainer(AbstractPollingMessageListenerContainer).doReceiveAndExecute(Object, Session, MessageConsumer, TransactionStatus) line: 325	
	DefaultMessageListenerContainer(AbstractPollingMessageListenerContainer).receiveAndExecute(Object, Session, MessageConsumer) line: 263	
	DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener() line: 1103	
	DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop() line: 1095	
	DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run() line: 992	
	Thread.run() line: 745	
/ debug	,
/s
CustomerOrderBodyProcessor.processHoldStatus(CustomerOrder, Node) line: 328	
		String code = getNodeTextContent(node, true).trim();
order	com.mpobjects.oms.model.entity.CustomerOrder  (id=29291)	
node	org.apache.xerces.dom.DeferredElementImpl  (id=29293)		/ [mtccore:HOLD_STATUS: null]
/s
XMLUtil.getNodeTextContent(Node, boolean) line: 369	
		return getNodeTextContent(aNode, allText, false);		/ allText==true
/s
XMLUtil.getNodeTextContent(Node, boolean, boolean) line: 388	
		Node childNode = aNode.getFirstChild();						/ [#text: REVIEW_HOLD]

		while (childNode != null) {
			if (!allText && sb.length() > 0) {
/n
			if (recurse && childNode.getNodeType() == Node.ELEMENT_NODE) {
/n
			} else if (childNode.getNodeType() == Node.TEXT_NODE || childNode.getNodeType() == Node.CDATA_SECTION_NODE) {
				sb.append(childNode.getNodeValue());

		return sb.toString();
/t
CustomerOrderBodyProcessor.processHoldStatus(CustomerOrder, Node) line: 329	
		String code = getNodeTextContent(node, true).trim();
/d
"REVIEW_HOLD"
		HoldStatus holdStatus = getHoldStatusDAO().getByCode(code);
holdStatus	com.mpobjects.oms.model.entity.holdstatus.HoldStatus  (id=29634)	
		order.setHoldStatus(holdStatus);
order	com.mpobjects.oms.model.entity.CustomerOrder  (id=29291)	








/ Einde DEBUG IMPORT HOLD_STATUS

/ TEST HOLD_STATUS

/ we gaan het zo toch NIET doen	, 

module/oms/src/java
package com.mpobjects.oms.model.xml;
public class CustomerOrderBodyProcessor extends XMLProcessor {

module/oms/test/src/java
package com.mpobjects.oms.model.xml;
public class CustomerOrderBodyProcessorTest {

/ we hebben CustomerOrderBodyProcessor refactored	, want de ctor determines spring beans	, which a unit test cannot	, 

$ vi CustomerOrderBodyProcessor.java 

	public CustomerOrderBodyProcessor(EntityDetailTypeDAO entityDetailTypeDAO, PartyService partyService, CustomerOrderTypeDAO customerOrderTypeDAO,
			HoldStatusDAO holdStatusDAO) {
		referenceProcessor = new ReferenceProcessor(this);
		partyProcessor = new PartyProcessor(this);
		detailTypeDAO = entityDetailTypeDAO;
		this.partyService = partyService;
		this.customerOrderTypeDAO = customerOrderTypeDAO;
		this.holdStatusDAO = holdStatusDAO;
	}

	public CustomerOrderBodyProcessor() {
		this(MpoBeanFactory.getBean(EntityDetailTypeDAO.class), MpoBeanFactory.getBean(PartyService.class), MpoBeanFactory.getBean(CustomerOrderTypeDAO.class),
				MpoBeanFactory.getBean(HoldStatusDAO.class));
	}

/ en dan in de test	, 

$ vi CustomerOrderBodyProcessorTest.java 

@RunWith(MockitoJUnitRunner.class)
public class CustomerOrderBodyProcessorTest {

	// @Spy
	@InjectMocks
	private CustomerOrderBodyProcessor customerOrderBodyProcessor;

	@Mock
	private EntityDetailTypeDAO entityDetailTypeDAO;
	@Mock
	private PartyService partyService;
	@Mock
	private CustomerOrderTypeDAO customerOrderTypeDAO;
	@Mock
	private HoldStatusDAO holdStatusDAO;

	private Node node;

	private CustomerOrder customerOrder;

	private final static String code = "TEST_HOLD";

	@Before
	public void init() throws ParserConfigurationException {
		node = XMLUtil.newDocument();											<-
		customerOrder = new CustomerOrder();

/ we zien bij <-	, 

customerOrderBodyProcessor	com.mpobjects.oms.model.xml.CustomerOrderBodyProcessor  (id=342)	
	customerOrderTypeDAO	com.mpobjects.oms.dao.customerordertype.CustomerOrderTypeDAO$$EnhancerByMockitoWithCGLIB$$724071ca  (id=344)	
	detailTypeDAO	com.mpobjects.oms.dao.entitydetailtype.EntityDetailTypeDAO$$EnhancerByMockitoWithCGLIB$$9ef52242  (id=347)	
	holdStatusDAO	com.mpobjects.oms.dao.holdstatus.HoldStatusDAO$$EnhancerByMockitoWithCGLIB$$2529b8c2  (id=353)	
	partyProcessor	com.mpobjects.oms.model.party.xml.PartyProcessor  (id=362)	
	partyService	com.mpobjects.oms.model.service.PartyService$$EnhancerByMockitoWithCGLIB$$26e585a7  (id=356)	
	referenceProcessor	com.mpobjects.oms.model.shared.xml.ReferenceProcessor  (id=365)	

/ Dus @InjectMocks heeft de juiste ctor gepakt	, 



/ Einde TEST HOLD_STATUS

 
/ TEST HOLD_STATUS

/ we doen het eerst zo	, 
/ de unit test zijn wat ingewikkeld	, 
/ hierna maken we van CustomerOrderBodyProcessor een spring bean	, de tests worden makkelijker	,  

$ vi CustomerBodyProcessor.java

	public CustomerOrderBodyProcessor() {								/ we laten de ctor voorlopig zo	,
		referenceProcessor = new ReferenceProcessor(this);
		partyProcessor = new PartyProcessor(this);
		detailTypeDAO = MpoBeanFactory.getBean(EntityDetailTypeDAO.class);
		partyService = MpoBeanFactory.getBean(PartyService.class);
		customerOrderTypeDAO = MpoBeanFactory.getBean(CustomerOrderTypeDAO.class);
		holdStatusDAO = MpoBeanFactory.getBean(HoldStatusDAO.class);
	}

	protected void processHoldStatus(CustomerOrder order, Node node) throws XMLProcessorException {
		String code = getNodeTextContent(node, true).trim();
		HoldStatus holdStatus = getHoldStatusDAO().getByCode(code);				<- getHoldStatusDAO() ipv holdStatusDAO	, zodat we kunnen mock	,
		if (holdStatus == null) {
			throw new XMLProcessorException(String.format("Unknown hold status %s in CUSTOMER_ORDER_BODY", code));
		}
		order.setHoldStatus(holdStatus);

	}

$ vi CustomerBodyProcessorTest.java

package com.mpobjects.oms.model.xml;

import javax.xml.parsers.ParserConfigurationException;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Matchers;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.runners.MockitoJUnitRunner;
import org.w3c.dom.Node;

import com.mpobjects.common.util.XMLUtil;
import com.mpobjects.oms.dao.customerordertype.CustomerOrderTypeDAO;
import com.mpobjects.oms.dao.entitydetailtype.EntityDetailTypeDAO;
import com.mpobjects.oms.dao.holdstatus.HoldStatusDAO;
import com.mpobjects.oms.model.entity.CustomerOrder;
import com.mpobjects.oms.model.entity.holdstatus.HoldStatus;
import com.mpobjects.oms.model.service.PartyService;
import com.mpobjects.oms.model.shared.xml.XMLProcessorException;

	// @Spy
	@Mock
	private CustomerOrderBodyProcessor customerOrderBodyProcessor;

	@Mock
	private EntityDetailTypeDAO entityDetailTypeDAO;
	@Mock
	private PartyService partyService;
	@Mock
	private CustomerOrderTypeDAO customerOrderTypeDAO;
	@Mock
	private HoldStatusDAO holdStatusDAO;

	private Node node;

	private CustomerOrder customerOrder;

	private final static String CODE = "TEST_HOLD";

	@Before
	public void init() throws ParserConfigurationException {
		node = XMLUtil.newDocument();
		// XMLUtil.appendTextElement(node, XMLProcessor.CORE_NS + MTCCoreNames.HOLD_STATUS, CODE);
		customerOrder = new CustomerOrder();

	}

	// node -> order
	@Test
	public void testProcessPresentHoldStatus() throws XMLProcessorException {
		Mockito.doCallRealMethod().when(customerOrderBodyProcessor).processHoldStatus(Matchers.any(CustomerOrder.class), Matchers.any(Node.class));
		Mockito.when(customerOrderBodyProcessor.getHoldStatusDAO()).thenReturn(holdStatusDAO);
		HoldStatus holdStatus = new HoldStatus();
		holdStatus.setCode(CODE);
		Mockito.when(holdStatusDAO.getByCode(CODE)).thenReturn(holdStatus);
		XMLUtil.appendTextElement(node, XMLProcessor.CORE_NS + MTCCoreNames.HOLD_STATUS, CODE);

		customerOrderBodyProcessor.processHoldStatus(customerOrder, node.getFirstChild());
		Assert.assertEquals(CODE, customerOrder.getHoldStatus().getCode());

	}

	// node -> order
	@Test(expected = XMLProcessorException.class)
	public void testProcessAbsentHoldStatus() throws XMLProcessorException {
		Mockito.doCallRealMethod().when(customerOrderBodyProcessor).processHoldStatus(Matchers.any(CustomerOrder.class), Matchers.any(Node.class));
		Mockito.when(customerOrderBodyProcessor.getHoldStatusDAO()).thenReturn(holdStatusDAO);
		Mockito.when(holdStatusDAO.getByCode(CODE)).thenReturn(null);
		XMLUtil.appendTextElement(node, XMLProcessor.CORE_NS + MTCCoreNames.HOLD_STATUS, CODE);

		customerOrderBodyProcessor.processHoldStatus(customerOrder, node.getFirstChild());
	}

	// order -> node
	@Test
	public void testGenerateWithCode() throws XMLProcessorException {
		Mockito.doCallRealMethod().when(customerOrderBodyProcessor).generateHoldStatus(Matchers.any(Node.class), Matchers.anyString(), Matchers.anyString());
		HoldStatus holdStatus = new HoldStatus();
		holdStatus.setCode(CODE);
		customerOrder.setHoldStatus(holdStatus);
		customerOrderBodyProcessor.generateHoldStatus(node, XMLProcessor.CORE_NS + MTCCoreNames.HOLD_STATUS, CODE);
		Assert.assertEquals(XMLProcessor.CORE_NS + MTCCoreNames.HOLD_STATUS, node.getFirstChild().getNodeName());
		Assert.assertEquals(CODE, node.getFirstChild().getFirstChild().getTextContent());

	}

	// order -> node
	@Test
	public void testGenerateWithoutCode() throws XMLProcessorException {
		Mockito.doCallRealMethod().when(customerOrderBodyProcessor).generateHoldStatus(Matchers.any(Node.class), Matchers.anyString(), Matchers.anyString());
		HoldStatus holdStatus = new HoldStatus();
		holdStatus.setCode(null);
		customerOrder.setHoldStatus(holdStatus);
		customerOrderBodyProcessor.generateHoldStatus(node, XMLProcessor.CORE_NS + MTCCoreNames.HOLD_STATUS, null);
		Assert.assertEquals(XMLProcessor.CORE_NS + MTCCoreNames.HOLD_STATUS, node.getFirstChild().getNodeName());
		Assert.assertEquals(null, node.getFirstChild().getFirstChild());

	}

}



/ we mock de CustomerOrderBodyProcessor	, dus de ctor wordt niet called	, dus hangt de test ook niet door de spring beans die hij dan niet zou vinden	, 
/ op de mock roepen toch de echte method aan , met doCallRealMethod	, en in deze method is getHoldStatusDAO gemocked	, 

/ Als er geen HOLD_STATUS is in de customer order	, moet er dan een lege <mtccore:HOLD_STATUS/> of geen een?
/ TODO

/ Einde TEST HOLD_STATUS

/ REFACTOR CUSTOMERORDERBODYPROCESSOR ALS SPRING BEAN	 

/ See FIX FINAL

/ we maken CustomerOrderBodyProcessor een spring bean	, 

/ 13	. 

/ zoals	, 

$ vi oms-service.sb.xml

	<bean id="com.mpobjects.oms.model.xml.CustomerOrderXmlNodeProcessor" parent="transactionRequiredTemplate">
		<property name="target">
			<bean class="com.mpobjects.oms.model.xml.CustomerOrderXmlNodeProcessorImpl">
				<property name="monitoringService" ref="com.mpobjects.core.monitoring.MonitoringService" />
			</bean>
		</property>
	</bean>

/ Maar hij wordt niet injected in een *.sb.xml	, 

/ 13	. 

/ Maar we zien	, 

public class CustomerOrderMsgProcessor extends XMLProcessor {
			customerOrderXmlNodeProcessor = MpoBeanFactory.getBean(CustomerOrderXmlNodeProcessor.class);

/ we zien	, 
$ vi CustomerOrderProcessor.java 
public class CustomerOrderProcessor extends XMLProcessor {
	public CustomerOrderProcessor() {
		customerOrderBodyProcessor = new CustomerOrderBodyProcessor();


/ 13	. 


/ we maken	, 
$ vi oms-service.sb.xml

	<bean id="com.mpobjects.oms.model.xml.CustomerOrderBodyProcessor" parent="transactionRequiredTemplate">
		<property name="target">
			<bean class="com.mpobjects.oms.model.xml.CustomerOrderBodyProcessor">
				<property name="organizationDao" ref="com.mpobjects.oms.dao.organization.OrganizationDAO"></property>
				<property name="customerOrderTypeDAO" ref="com.mpobjects.oms.dao.customerordertype.CustomerOrderTypeDAO"></property>
				<property name="detailTypeDAO" ref="com.mpobjects.oms.dao.entitydetailtype.EntityDetailTypeDAO"></property>
				<property name="partyService" ref="com.mpobjects.oms.model.service.PartyService"></property>
				<property name="holdStatusDAO" ref="com.mpobjects.oms.dao.holdstatus.HoldStatusDAO"></property>
				
			</bean>
		
		</property>
	</bean>

$ vi CustomerOrderProcessor.java 

	public CustomerOrderProcessor() {
		customerOrderBodyProcessor = MpoBeanFactory.getBean(CustomerOrderBodyProcessor.class);

$ vi CustomerOrderBodyProcessor.java 

	public CustomerOrderBodyProcessor() {
		referenceProcessor = new ReferenceProcessor(this);
		partyProcessor = new PartyProcessor(this);
	}

/ 7	. 

$ vi oms-service.xml

	<bean id="com.mpobjects.oms.model.xml.CustomerOrderBodyProcessor" parent="transactionRequiredTemplate">
		<property name="target">
			<bean class="com.mpobjects.oms.model.xml.CustomerOrderBodyProcessor">
				<property name="organizationDao" ref="com.mpobjects.oms.dao.organization.OrganizationDAO"></property>
				<property name="customerOrderTypeDAO" ref="com.mpobjects.oms.dao.customerordertype.CustomerOrderTypeDAO"></property>
				<property name="detailTypeDAO" ref="com.mpobjects.oms.dao.entitydetailtype.EntityDetailTypeDAO"></property>
				<property name="partyService" ref="com.mpobjects.oms.model.service.PartyService"></property>
				<!-- TODO property holdStatusProcessor --> 																	<-
			</bean>
		</property>
	</bean>

	<bean id="com.mpobjects.oms.model.holdstatus.xml.HoldStatusProcessor" parent="transactionRequiredTemplate">
		<property name="target">
			<bean class="com.mpobjects.oms.model.holdstatus.xml.HoldStatusProcessor">
				<property name="holdStatusDAO" ref="com.mpobjects.oms.dao.holdstatus.HoldStatusDAO"></property>
			</bean>
		</property>
	</bean>	

/ We doen nu	,  maar LogisticsOrderBodyProcessor moeten ook Spring bean zijn	, met de holdStatusProcessor als prop	,
public class CustomerOrderBodyProcessor extends XMLProcessor {
				HoldStatusProcessor holdStatusProcessor = MpoBeanFactory.getBean(HoldStatusProcessor.class);		<-
				holdStatusProcessor.setParent(this);
				HoldStatus myMasterDataVO = holdStatusProcessor.process(childNode);
				aOrder.setHoldStatus(myMasterDataVO);

[eric@localhost 2016.12]$ find -name "*.java" | xargs grep HoldStatusProcessor
./module/oms/src/java/com/mpobjects/oms/model/logisticsorder/xml/LogisticsOrderBodyProcessor.java:				HoldStatusProcessor.generate(myNode, myHoldStatus);
./module/oms/src/java/com/mpobjects/oms/model/logisticsorder/xml/LogisticsOrderBodyProcessor.java:					HoldStatus myMasterDataVO = new HoldStatusProcessor(this).process(myNode);
./module/oms/src/java/com/mpobjects/oms/model/xml/CustomerOrderBodyProcessor.java:			HoldStatusProcessor.generate(myNode, myHoldStatus);
./module/oms/src/java/com/mpobjects/oms/model/xml/CustomerOrderBodyProcessor.java:				HoldStatusProcessor holdStatusProcessor = MpoBeanFactory.getBean(HoldStatusProcessor.class);

[eric@localhost 2016.12]$ find -name "*.java" | xargs grep LogisticsOrderBodyProcessor
./module/oms/src/java/com/mpobjects/oms/model/shipmentorder/xml/ShipmentOrderBodyProcessor.java:					new LogisticsOrderBodyProcessor(this).process(childNode, myShipmentOrderVO);
./module/oms/src/java/com/mpobjects/oms/model/serviceorder/xml/ServiceOrderBodyProcessor.java:			LogisticsOrderBodyProcessor.generate(myCommonNode, aServiceOrderVO);
./module/oms/src/java/com/mpobjects/oms/model/serviceorder/xml/ServiceOrderBodyProcessor.java:			new LogisticsOrderBodyProcessor(this).process(selectSingleNode(aNode, COMMON_TAG), myServiceOrderVO);
./module/oms/src/java/com/mpobjects/oms/model/consignment/xml/ConsignmentBodyProcessor.java:import com.mpobjects.oms.model.logisticsorder.xml.LogisticsOrderBodyProcessor;
./module/oms/src/java/com/mpobjects/oms/model/consignment/xml/ConsignmentBodyProcessor.java:			LogisticsOrderBodyProcessor.generate(myCommonNode, aConsignmentVO);


/ Einde REFACTOR CUSTOMERORDERBODYPROCESSOR ALS SPRING BEAN	 

/ FIX CUSTOMERORDERBODYPROCESSOR TEST 

/ Lees	, 
https://springframework.guru/mocking-unit-tests-mockito/

/ Omdat CustomerOrderBodyProcessor een spring bean is nu	, kunnen we in de test gewoon new CustomerOrderBodyProcessor() doen, of dat laten doen door @InjectMocks of @Spy
/ TODO


/ We maken	, 
package com.mpobjects.oms.model.logisticsorder.xml;
public class AbstractLogisticsOrderProcessorTest {

@RunWith(MockitoJUnitRunner.class)
public class CustomerOrderBodyProcessorTest {

	@Spy
	@InjectMocks
	private CustomerOrderBodyProcessor customerOrderBodyProcessor;

	@Mock
	private EntityDetailTypeDAO entityDetailTypeDAO;
	@Mock
	private PartyService partyService;
	@Mock
	private CustomerOrderTypeDAO customerOrderTypeDAO;
	@Mock
	private HoldStatusDAO holdStatusDAO;

	private Node node;

	private CustomerOrder customerOrder;

	private final static String CODE = "TEST_HOLD";

	@Before
	public void init() throws ParserConfigurationException {
		node = XMLUtil.newDocument();
		customerOrder = new CustomerOrder();
	}

	// node->order
	@Test
	public void testProcessPresentHoldStatus() throws XMLProcessorException {
		Mockito.when(customerOrderBodyProcessor.getHoldStatusDAO()).thenReturn(holdStatusDAO);
		HoldStatus holdStatus = new HoldStatus();
		holdStatus.setCode(CODE);
		Mockito.when(holdStatusDAO.getByCode(CODE)).thenReturn(holdStatus);
		XMLUtil.appendTextElement(node, XMLProcessor.CORE_NS + MTCCoreNames.HOLD_STATUS, CODE);
		customerOrderBodyProcessor.processHoldStatus(customerOrder, node.getFirstChild());
		Assert.assertEquals(CODE, customerOrder.getHoldStatus().getCode());
	}

	// node->order
	@Test(expected = XMLProcessorException.class)
	public void testProcessAbsentHoldStatus() throws XMLProcessorException {
		Mockito.when(customerOrderBodyProcessor.getHoldStatusDAO()).thenReturn(holdStatusDAO);
		Mockito.when(holdStatusDAO.getByCode(CODE)).thenReturn(null);
		XMLUtil.appendTextElement(node, XMLProcessor.CORE_NS + MTCCoreNames.HOLD_STATUS, CODE);
		customerOrderBodyProcessor.processHoldStatus(customerOrder, node.getFirstChild());
	}

	// order->node
	@Test
	public void testGenerateWithCode() throws XMLProcessorException {
		HoldStatus holdStatus = new HoldStatus();
		holdStatus.setCode(CODE);
		customerOrder.setHoldStatus(holdStatus);
		customerOrderBodyProcessor.generateHoldStatus(node, XMLProcessor.CORE_NS + MTCCoreNames.HOLD_STATUS, CODE);
		Assert.assertEquals(XMLProcessor.CORE_NS + MTCCoreNames.HOLD_STATUS, node.getFirstChild().getNodeName());
		Assert.assertEquals(CODE, node.getFirstChild().getFirstChild().getTextContent());
	}

	// order->node
	@Test
	public void testGenerateWithoutCode() throws XMLProcessorException {
		HoldStatus holdStatus = new HoldStatus();
		holdStatus.setCode(null);
		customerOrder.setHoldStatus(holdStatus);
		customerOrderBodyProcessor.generateHoldStatus(node, XMLProcessor.CORE_NS + MTCCoreNames.HOLD_STATUS, null);
		Assert.assertEquals(XMLProcessor.CORE_NS + MTCCoreNames.HOLD_STATUS, node.getFirstChild().getNodeName());
		Assert.assertEquals(null, node.getFirstChild().getFirstChild());
	}

}

/ Einde FIX CUSTOMERORDERBODYPROCESSOR TEST 

/ XSD

/ we import as maven project	, 
/home/eric/Devel/Java/Eclipse/eclipse-jee/workspace/scs/trunk/schema
/ we zien in eclipse	, 
mpo-schema	, 

[eric@localhost workspace]$ less scs/trunk/schema/src/main/schema/MPO/V1/ServiceOrderMPO.xsd
/ NEE	, this is for geodis.
/ TOOD Moeten we deze ook update	?

[eric@localhost workspace]$ less scs/trunk/schema/src/main/schema/MTC/ServiceOrder/V1/ServiceOrder.xsd
        <xs:element name="SERVICE_ORDER_MSG">
                <xs:complexType>
                        <xs:sequence>
                                <xs:element name="header" type="core:MSG_HEADER" />
                                <xs:element name="body">
                                        <xs:complexType>
                                                <xs:sequence>^M                                                 <xs:choice maxOccurs="unbounded" minOccurs="1">
                                                                <xs:element name="SERVICE_ORDER" type="SERVICE_ORDER" maxOccurs="1" minOccurs="1"></xs:element>
                                                                <xs:element name="CUSTOMER_ORDER" type="core:CUSTOMER_ORDER" maxOccurs="1" minOccurs="0"></xs:element>

        <xs:complexType name="SERVICE_ORDER">
                <xs:sequence>
                        <xs:element name="PROCESSING_DETAILS" type="core:PROCESSING_DETAILS" />
                        <xs:element name="SERVICE_ORDER_BODY" type="core:SERVICE_ORDER_BODY" />
                        <xs:element name="CONSIGNMENT" minOccurs="0" maxOccurs="unbounded">
...

/ Dus core:MSG_HEADER en core:CUSTOMER_ORDER staan in een andere xsd	, en SERVICE_ORDER staat in dezelfde xsd	, klopt, die staat eronder	, 

/ Ook in CustomerOrder.xsd wordt ref naar xmlns:core="http://services.tntlogistics.nl/schemas/MTC/MTCCore/V1/MTCCore.xsd"	, 
/ dus we moeten in MTCCore.xsd zijn	, 


[eric@localhost workspace]$ less scs/trunk/schema/src/main/schema/MTC/ServiceOrder/V1/ServiceOrder.xsd

<xs:schema 
	xmlns="http://services.tntlogistics.nl/schemas/MTC/ServiceOrder/V1/ServiceOrder.xsd" 
	xmlns:xs="http://www.w3.org/2001/XMLSchema" 
	xmlns:core="http://services.tntlogistics.nl/schemas/MTC/MTCCore/V1/MTCCore.xsd"
    targetNamespace="http://services.tntlogistics.nl/schemas/MTC/ServiceOrder/V1/ServiceOrder.xsd" 
	elementFormDefault="qualified"
    xmlns:event="http://services.tntlogistics.nl/schemas/MTC/LogisticsOrder/V1/LogisticsOrderEvent.xsd"
>
    	<xs:import schemaLocation="../../MTCCore/V1/MTCCore.xsd" namespace="http://services.tntlogistics.nl/schemas/MTC/MTCCore/V1/MTCCore.xsd"></xs:import>
        <xs:import schemaLocation="../../LogisticsOrder/V1/LogisticsOrderEvent.xsd" namespace="http://services.tntlogistics.nl/schemas/MTC/LogisticsOrder/V1/LogisticsOrderEvent.xsd"></xs:import>
        <xs:element name="SERVICE_ORDER_MSG">
			...
        </xs:element>
        <xs:complexType name="SERVICE_ORDER">
			...
        </xs:complexType>

        <xs:complexType name="SHIPMENT_ORDER_IN_SERVICE_ORDER">

$ vi scs/trunk/schema/src/main/schema/MTC/MTCCore/V1/MTCCore.xsd

    <xs:complexType name="MSG_HEADER">
		...


/ Einde XSD

/ 7	. 

/ NOTES MICHEL

[eric@localhost workspace]$ svn co https://system.mp-objects.com/svn/scs
$ less ./trunk/schema/src/main/schema/MPO/V1/ServiceOrderMPO.xsd
...

[eric@localhost scs]$ less ./trunk/schema/src/main/schema/MPO/V1/CustomerOrderMPO.xsd
       <xs:complexType name="CUSTOMER_ORDER_BODY">
			...
                       <xs:element name="BUYER" type="PARTY" minOccurs="0"/>

/ WH NIET aanpassen	,
./trunk/schema/src/main/schema/MTC/CustomerOrder/CustomerOrder.xsd
./trunk/schema/src/main/schema/MTC/ServiceOrder/V1/ServiceOrder.xsd
/ TODO

public class CustomerOrderBodyProcessor extends XMLProcessor {
.process : test
https://system.mp-objects.com/fisheye/cru/CODREV-173#CFR-2363	: ServiceOrderMPO.xsd	, met HOLD_STATUS
https://system.mp-objects.com/fisheye/cru/CODREV-174#CFR-2370	: AbstractLogisticsOrderProcessor/ AbstractLogisticsOrderProcessorTest

public class ServiceOrderBodyProcessor extends XMLProcessor {	/ heeft geen hold_status
public class CustomerOrder extends EntityDetailSupport
public class ShipmentOrderBodyProcessor extends XMLProcessor {
public class ShipmentOrderProcessor extends AbstractLogisticsOrderProcessor {


public class CustomerOrderBodyProcessor extends XMLProcessor {
public class CustomerOrderProcessor extends XMLProcessor {

public abstract class AbstractLogisticsOrderProcessor extends XMLProcessor {
public class AbstractLogisticsOrderProcessorTest {
public class CustomerOrderProcessor extends XMLProcessor {

public class TriggerRequestHandlerImpl implements TriggerRequestHandler {
/ zelf	,

/ NOTES MICHEL

/ DEBUG TEST MICHEL

2016.12/module/oms/src/java/com/mpobjects/oms/model/logisticsorder/xml/AbstractLogisticsOrderProcessor.java
2016.12/module/oms/test/src/java/com/mpobjects/oms/model/logisticsorder/xml/AbstractLogisticsOrderProcessorTest.java

/ HIER HIER HIER



/ Einde DEBUG TEST MICHEL


/ 7	. 

/ HAMID VOORBEELD RELEASE EXPORT OP BAKKER TEST

/ we zijn op bakker test	,
https://test-bli.mp-objects.com/bakker/core/index_frameset

/ We moeten een service order release	, dwz naar bakker sturen	,	 
/ ga naar service order search	, geef in booking type: tpo	, 
/ Kies N0054079
/ we zien onderin 1 sa	, deze hoort bij sho		SH000027245
/ op deze sho , click tab customerorderlines, we zien inderdaad een customer order line	, dus onze seo is OK	.
/ terug naar de seo	: Actual release : clear date	, Save de seo	,  de order van de seo is 1450 geworden	, 
/ set nu Actual release : vandaag	, 	Save	,


/ bli-int-t.intermax.mp-objects.com
/ Ga naar,	 
/local/apps/interface/mpoxmlcore/rest-out/SERVICEORDERS
$ ls -ltr
-rw-rw-r-- 1 servicemix servicemix  24451 Feb 24 12:31 queue-SCS-TO-MPOXMLCORE-ID-bli-int-t-36595-1485914696802-67-76-1-1-1	/ zojuist create	,
...
      <mpo:CUSTOMER_ORDER>
         <mpo:PROCESSING_DETAILS>
            <mpo:PURPOSE_CODE>00</mpo:PURPOSE_CODE>
         </mpo:PROCESSING_DETAILS>
         <mpo:CUSTOMER_ORDER_BODY>
            <mpo:CUSTOMER_ORDER_ID>CO000000052</mpo:CUSTOMER_ORDER_ID>
            <mpo:ORGANIZATION_ID>BAKKER</mpo:ORGANIZATION_ID>
            <mpo:CREATION_DATE>2017-02-17T15:50:53.531+01:00</mpo:CREATION_DATE>
            <mpo:CUSTOMER_ORDER_TYPE>CIB</mpo:CUSTOMER_ORDER_TYPE>
            <mpo:BUYER_ORDER_NUMBER>DUMMY</mpo:BUYER_ORDER_NUMBER>
			<mpo:HOLD_STATUS>... </mpo:HOLD_STATUS>										<- Moet erbij	, 
            <mpo:BUYER>
               <mpo:PARTY_ID>TEMP-ID</mpo:PARTY_ID>
               <mpo:PARTY_TYPE>NA</mpo:PARTY_TYPE>
            </mpo:BUYER>

/ purpose code is iets voor in servicemix	, routing	, purpose code is ook TPO	, toevallig gelijk aan seo type	, 

/ configuration, planning, service order templates
/ kies template name TPO	, dit is de seo type, booking type	, 

/ statussen	, 
1404 	open
1450	planned
1500	 released
8000	 started
9000	 delivered
9010
9500	 cancelled

	--	legacy
	|		|
	|		|
	|		|
	|		V		release
	|		scs	----------->	ortec
	|		^
	|		|
	|		|
	|		|
	|		|
	----->	wms

/ Soms komen de messages in een error dir	, 
/local/apps/interface/bakkerrest/fromscs-tobakker/error/2017-02-27

/ 13	. 

/ Als de XML op 1 regel	, doe dan in vi	, 
/ lees	,
http://unix.stackexchange.com/questions/62464/vim-making-xml-text-pretty
:%!xmllint --format %

/ of lees	, 
http://stackoverflow.com/questions/16090869/how-to-pretty-print-xml-from-the-command-line
[vanderveldene@bli-int-t 2017-02-27]$ cat ID-bli-int-t-35293-1485914702882-12-109.in.msg | xmllint --format -

/ Lees	LOG_system-admin.txt	, 



/ Einde HAMID VOORBEELD RELEASE EXPORT OP BAKKER TEST

/ IMPORT 

/ we moeten een seo export	, maar een co import	, 

/ op de appl machine, dus geen int machine	,
[eric@localhost bin]$ bakker-ssh-t.sh 
[vanderveldene@bli-app-t ~]$ less /local/apps/interface/bakker/to_tms_archive/CustomerOrder/2017-02/28/0c28295e-acbe-4696-921c-ddc95fad6fc0 
/ een co die is import	,

/ we nemen	, 
[jboss@bli-app-t ~]$ less /local/apps/interface/bakker/to_tms_archive/CustomerOrder/2017-03/13/1a024fb2-034c-4a3c-bbb4-e9a9ff7baff2 

[eric@localhost bin]$ scp -r  vanderveldene@bli-app-t.intermax.mp-objects.com:/local/apps/interface/bakker/to_tms_archive/CustomerOrder/2017-03 /home/eric/Integration/Bakker/imports/CustomerOrder/
/ OK


/ Einde IMPORT 


/ 7	. 

/ bij update	,
Problems reported while synchronizing SVNStatusSubscriber. 0 of 1 resources were synchronized.
An error occurred synchronizing /2016.12: Error getting status for resource P/2016.12 org.apache.subversion.javahl.ClientException: svn: E200015: operation cancelled
Error getting status for resource P/2016.12 org.apache.subversion.javahl.ClientException: svn: E200015: operation cancelled
org.apache.subversion.javahl.ClientException: svn: E200015: operation cancelled
org.apache.subversion.javahl.ClientException: svn: E200015: operation cancelled
/ TODO

/ XSD REQUEST 

/ In service order XML (export), or customer order XML (import )
         <mtccore:CUSTOMER_ORDER_BODY>
			...
            </mtccore:SELLER>
            <mtccore:HOLD_STATUS>REVIEW_HOLD</mtccore:HOLD_STATUS>
            <mtccore:REFERENCE>
			...

/ But	, 
[eric@localhost workspace]$ less scs/trunk/schema/src/main/schema/MTC/MTCCore/V1/MTCCore.xsd

/ This is there	, but should be changed or replaced or new one:?
        <xs:complexType name="HOLD_STATUS">
                <xs:annotation>
                        <xs:documentation> Represent the status of a logistics order wrt to execution: open, planned,
                                started/shipped, ended/delivered, closed, cancelled
                        </xs:documentation>
                </xs:annotation>
                <xs:sequence>
                        <xs:element name="INTERNAL_STATUS_CODE" type="xs:string" />
                        <xs:element name="EXTERNAL_STATUS_CODE" type="xs:string" minOccurs="0" />
                        <xs:element name="REMARKS" type="xs:string" minOccurs="0" />
                </xs:sequence>
        </xs:complexType>

/ Suggestion:
        <xs:complexType name="CUSTOMER_ORDER_BODY">
                        <xs:element name="SELLER" type="PARTY" maxOccurs="1" minOccurs="0"></xs:element>
                       <xs:element name="CUSTOMER_ORDER_PARTY" minOccurs="0" maxOccurs="unbounded">
						...
                        </xs:element>
                        <xs:element name="HOLD_STATUS" type="HOLD_STATUS" maxOccurs="1" minOccurs="0"></xs:element>
                        <xs:element name="REFERENCE" type="REFERENCE_FIELD" maxOccurs="unbounded" minOccurs="0"></xs:element>





/ Einde XSD REQUEST 

base.product=mposcs
jboss.configuration=${base.product}
build.war.dir=${jboss.home}/server/${base.product}/deploy/tms.war/
jboss.home=/home/eric/Devel/Java/JBoss/jboss-4.0.5.GA

