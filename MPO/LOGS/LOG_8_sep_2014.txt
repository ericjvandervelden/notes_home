
/ See WICKET GET PAGE WITH LINK
/ See WICKET LINK

/ HPV

[eric@localhost workspace]$ pwd
/home/eric/Devel/Java/Eclipse/eclipse-jee/workspace
 [eric@localhost workspace]$ svn co https://system.mp-objects.com/svn/tms/branches/2014.02.hvp

[eric@localhost workspace]$ cp 2014.01/.project 2014.02.hvp/
[eric@localhost workspace]$ cp 2014.01/.classpath 2014.02.hvp/
[eric@localhost workspace]$ cp 2014.01/application.properties 2014.02.hvp/

/ right click explorer in eclipse, 	
/ Import, general, existing eclipse project
/home/eric/Devel/Java/Eclipse/eclipse-jee/workspace/2014.02.hvp

/ Verander de name van de instance	,
[eric@localhost 2014.02.hvp]$ pwd
/home/eric/Devel/Java/Eclipse/eclipse-jee/workspace/2014.02.hvp
[eric@localhost 2014.02.hvp]$ vi application.properties 
base.product = mposcs
...

/ ant window, 
/ add build files	,
base-framework, buildscripts, build.xml
/right click buildbase , run as , external tools configuration,

ant build. New
/ we zien 2014.02.hvp.build.xml
Build tab
Build before launch: uncheck

JRE tab
Run time JRE:
Seperate  JRE: ...
Workding dir: ${workspace_loc:2014.02.hvp/base-framework}


[eric@localhost ~]$ cd Devel/Java/JBoss/jboss-4.0.5.GA/server/
[eric@localhost server]$ cp -R mpo mposcs

[eric@localhost deploy]$ pwd
/home/eric/Devel/Java/JBoss/jboss-4.0.5.GA/server/mposcs/deploy
/ tms.jar , tms.war worden build	,
/ pas postgres-ds.xml aan	,

/ click clean-prepare-and-dev-deploy
/ hij build 
/home/eric/Devel/Java/JBoss/jboss-4.0.5.GA/server/mposcs


$ ssh eric@mposerv13
rtdMpo45
eric@mposerv13:~$ sudo su - jboss
jboss@mposerv13:~$ cd mposcs/deploy/
jboss@mposerv13:~/mposcs/deploy$ ls
bsh-deployer.xml                hsqldb-ds.xml            jboss-local-jdbc.rar     jsr88-service.xml           mposcs-schedule-service.xml
cache-invalidation-service.xml  http-invoker.sar         jbossweb-tomcat55.sar    mail-ra.rar                 postgres-ds.xml
client-deployer-service.xml     jboss-aop.deployer       jbossws14.sar            mail-service.xml            properties-service.xml
ear-deployer.xml                jboss-bean.deployer      jboss-xa-jdbc.rar        management                  sqlexception-service.xml
ejb-deployer.xml                jboss-ha-local-jdbc.rar  jms                      monitoring-service.xml      uuid-key-generator.sar
hpscs.jar                       jboss-ha-xa-jdbc.rar     jmx-console.war          mpo-management.sar
hpscs.war                       jbossjca-service.xml     jmx-invoker-service.xml  mposcs-activemq-jms-ds.xml
jboss@mposerv13:~/mposcs/deploy$ vim postgres-ds.xml 
                <xa-datasource-property name="ServerName">localhost</xa-datasource-property>
                <xa-datasource-property name="PortNumber">5432</xa-datasource-property>
                <xa-datasource-property name="DatabaseName">mposcs</xa-datasource-property>
                <xa-datasource-property name="User">mposcs</xa-datasource-property>
                <xa-datasource-property name="Password">Huewabe6iwaithai</xa-datasource-property>
/ Hiermee kunnen we een dump maken van de database	,
/ op mijn laptop
$ pg_dump <remote ds>

/ HPV

/ POSTNL

[eric@localhost workspace]$ svn co https://system.mp-objects.com/svn/tms/trunk

[eric@localhost server]$ pwd
/home/eric/Devel/Java/JBoss/jboss-4.0.5.GA/server
[eric@localhost server]$ cp -a mpo pnloms
[eric@localhost deploy]$ pwd
/home/eric/Devel/Java/JBoss/jboss-4.0.5.GA/server/pnloms/deploy
/ pnloms ipv mpo

[eric@localhost trunk]$ pwd
/home/eric/Devel/Java/Eclipse/eclipse-jee/workspace/trunk
[eric@localhost trunk]$ cp ../2014.02.hvp/application.properties .
$ vi application.properties
base.product = pnloms

[eric@localhost trunk]$ cp ../2014.02.hvp/.project .
[eric@localhost trunk]$ cp ../2014.02.hvp/.classpath .
[eric@localhost trunk]$ vi .project 
<projectDescription>
        <name>trunk</name>
$ vi .classpath
        <classpathentry kind="con" path="org.dbpowder.plugins.LIB_CONTAINER/recurse~project/trunk/base-framework/core/lib/jar"/>
        <classpathentry kind="con" path="org.dbpowder.plugins.LIB_CONTAINER/recurse~project/trunk/base-framework/buildscripts/build-lib"/>
        <classpathentry kind="con" path="org.dbpowder.plugins.LIB_CONTAINER/recurse~project/trunk/module/interfacing/lib"/>

[eric@localhost Backup]$ pwd
/home/eric/Devel/Postgres/Backup
[eric@localhost Backup]$  pg_dump -U eric -Fc -h mposerv8 pnloms -f  pnloms.dump 

mpo=> \c mpo mpopostgres
You are now connected to database "mpo" as user "mpopostgres".
mpo=# create database pnloms\g
CREATE DATABASE

[eric@localhost Backup]$ pg_restore -U mpopostgres -d pnloms pnloms.dump 
mpopostgres@mpo

/ eclipse
/ Import...
General, Existing project
/home/eric/Devel/Java/Eclipse/eclipse-jee/workspace/trunk

/ server config maken	,
/ copy die van mpo onder Server tab, rechts muis click: open	,
Server name: pnloms
Server configuration: pnloms	, dit slaat op /home/eric/Devel/Java/JBoss/jboss-4.0.5.GA/server/pnloms	,


/ Einde POSTNL

/ MPO-33 MPO 2014.04 VERSION 123 

/ CREATE INSTANCE

/ 7	. 

/ install branch , build mpo instance

[eric@localhost workspace]$ svn co https://system.mp-objects.com/svn/tms/patches/2014.01/mpo
$ mv mpo 2014.01_mpo
[eric@localhost workspace]$ cp trunk/application.properties 2014.01_mpo/
$ pwd
workspace/2014.01_mpo
$ vi application.properties
base.product = mpo
build.war.dir = /home/eric/Devel/Java/JBoss/jboss-4.0.5.GA/server/2014.01_${base.product}/deploy/tms.war/
jboss.configuration = 2014.01_${base.product}

[eric@localhost workspace]$ ls 2014.01_mpo/
application.properties  carcon     cevaoms  dsvoms  isbscs    mpo       pnloms   rollsroyce     terex
base-framework          carconmpo  dsvcts   els     jnjedobe  mposcs    pom.xml  rollsroyceoms  tntwillebroek
bin                     cevabgb    dsvfms   geodis  module    naccomfg  rfsdms   src            wartsila
/ we zien dat we allerlei instances kunnen maken: pnloms, mpo, ... 
/ we geven aan welke in application.properties	, see hierboven	, we gaan alleen instance mpo maken, en komt in 2014.01_mpo/ in jboss's server/	,

[eric@localhost server]$ pwd
/home/eric/Devel/Java/JBoss/jboss-4.0.5.GA/server

[eric@localhost server]$ cp -a mpo 2014.01_mpo 
[eric@localhost server]$ ls
2014.01_mpo  all  default  dsvfms  minimal  mpo  mposcs  pnloms
/ instances
/ 2014.01_mpo wordt toch bijna helemaal overwrite, we hebben de config files nodig, daarom doen we dit	,

[eric@localhost server]$ vi 2014.01_mpo/deploy/postgres-ds.xml 

                <xa-datasource-property name="DatabaseName">mpo_2014_01</xa-datasource-property>
 ...
               <connection-url>jdbc:postgresql://127.0.0.1:5432/mpo_2014_01</connection-url>

[eric@localhost workspace]$ cp 2014.01/.project 2014.01_mpo/
[eric@localhost workspace]$ cp 2014.01/.classpath 2014.01_mpo/

[eric@localhost workspace]$ cp ../2014.02.hvp/.project .
[eric@localhost trunk]$ cp ../2014.02.hvp/.classpath .
[eric@localhost trunk]$ vi .project 
<projectDescription>
        <name>2014.01_mpo</name>
...
$ vi .classpath
...
        <classpathentry kind="con" path="org.dbpowder.plugins.LIB_CONTAINER/recurse~project/2014.01_mpo/base-framework/core/lib/jar"/>
        <classpathentry kind="con" path="org.dbpowder.plugins.LIB_CONTAINER/recurse~project/2014.01_mpo/base-framework/buildscripts/build-lib"/>
        <classpathentry kind="con" path="org.dbpowder.plugins.LIB_CONTAINER/recurse~project/2014.01_mpo/module/interfacing/lib"/>

[eric@localhost Backup]$ pwd
/home/eric/Devel/Postgres/Backup
[eric@localhost Backup]$ pg_dump -U eric -Fc -h mposerv8 mpo -f mpo_2014_01.dump 

mpo=> \c mpo mpopostgres
You are now connected to database "mpo" as user "mpopostgres".
mpo=# create database mpo_2014_01\g
CREATE DATABASE

[eric@localhost Backup]$ pg_restore -U mpopostgres -d mpo_2014_01 mpo_2014_01.dump 
mpopostgres@mpo
/ OK	, werkt met -Fc	,

/ eclipse
/ Import...
General, Existing project
/home/eric/Devel/Java/Eclipse/eclipse-jee/workspace/trunk

/ server config maken	,
/ copy die van mpo onder Server tab, rechts muis click: open	,
Server name: pnloms
Server configuration: pnloms	, dit slaat op /home/eric/Devel/Java/JBoss/jboss-4.0.5.GA/server/pnloms	,

/ 7	.

/ voor vpn, lees	,
LOG_18_jul_2014.txt
LOG_2_jun_2014.txt	/ 

[eric@localhost Backup]$ cd ../../Intermax/forticlientsslvpn/
[eric@localhost forticlientsslvpn]$  sudo ./forticlientsslvpn_cli --server 80.95.170.62:443 --vpnuser vanderveldene
Password for VPN:h^Zgcyr&Q
...


[eric@localhost Wicket]$  ssh vanderveldene@192.168.171.1
vanderveldene@192.168.171.1's password: 
[vanderveldene@scs-application-p ~]$ pg_dump -U mpopostgres -W -v -f mpo.dump --no-acl --no-owner -h 127.0.0.1 mpo
/ Dit doen we op de intermax server,	
[vanderveldene@scs-application-p ~]$  ls
mpo.dump

[eric@localhost Wicket]$ scp vanderveldene@192.168.171.1:mpo.dump /tmp

/ text file, dus	,
[eric@localhost Java]$ psql -d mpo_2014_01 -U mpopostgres -f /tmp/mpo.dump 
/ see pg_restore hierboven	, 

[vanderveldene@scs-application-p ~]$ rm mpo.dump 
[vanderveldene@scs-application-p ~]$ exit 

[eric@localhost forticlientsslvpn]$ ^c

 
/ See	,
https://acceptance.scs.mp-objects.com/mpo/core/index_frameset





/ Einde MPO-33 MPO 2014.04 VERSION 123 

/ TRUNK 

/ svn

/ Ga naar team view	,
links: synchronize button	,
/ kijk of er conflicts zijn (rode pijltes)	, 
/ als deze er zijn, los op	,
/ pas daarna check out: button ernaast	(= HEAD)	,

/ ga naar java view	,
clean-prepare-and-dev-deploy	,



/ Einde TRUNK 



/ POSTGRESQL

/ role foo maakt database db en table x ,

/ 7     .

$ sudo -u postgres pg_dump -C -f /tmp/db.dump db
/ role foo drops database db    ,
$ sudo -u postgres psql -f /tmp/db.dump
/ OK

$ pg_dump -U foo -C -f /tmp/db.dump db
Password: ...
pg_dump: [archiver] could not open output file "/tmp/db.dump": Permission denied

/ 7     .

[eric@localhost Backup]$ sudo -u postgres pg_dump -c -f db.dump db
/ role foo creates database db2 ,
[eric@localhost Backup]$ sudo -u postgres psql -f db.dump -d db2
/ OK
[eric@localhost Backup]$ sudo -u postgres psql -f db.dump -d db2
/ OK
/ Zo vaak je wilt, doordat we -c deden  ,

[eric@localhost Backup]$ psql -U foo -f db.dump
Password for user foo:
/ ERR   ,

/ 7     .

[eric@localhost Backup]$ pg_dump -U eric -Fc -h mposerv13 mposcs -f mposcs.dump
/ eric is superuser in db op mposerv13  ,
[eric@localhost Backup]$ pg_restore -d mposcs mposcs.dump
mpopostgres@mpo

/ 7     .

foo=> \c foo mpopostgres
Password for user mpopostgres: mpopostgres@mpo
You are now connected to database "foo" as user "mpopostgres".
foo=# create database mposcs;
CREATE DATABASE

[eric@localhost Backup]$ pg_restore -U mpopostgres -d mposcs mposcs.dump


/ Einde POSTGRESQL

/ APPL

[eric@localhost mposcs]$ pwd
/home/eric/Devel/Java/Eclipse/eclipse-jee/workspace/2014.02.hvp/mposcs
[eric@localhost mposcs]$ vi mposcs.properties 

hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
type.mapping=Firebird
/ TODO




/ Einde APPL

/ TICKETS

[eric@localhost workspace]$ svn co https://system.mp-objects.com/svn/tms/branches/2013.04.01
...
[eric@localhost 2013.04.01]$ svn revert --depth=infinity .
...
[eric@localhost 2013.04.01]$ svn commit -m "CEVA-14030 hide recharge, recharge summary, recharge overall reports"

/ EHCACHE MONITOR

[eric@localhost Ehcache_Monitor]$ tar xvzf ~/Downloads/ehcache-monitor-kit-1.0.3-distribution.tar.gz 
ehcache-monitor-kit-1.0.3/README.txt
ehcache-monitor-kit-1.0.3/LICENSE.txt
ehcache-monitor-kit-1.0.3/THIRD-PARTY-LICENSES.txt
ehcache-monitor-kit-1.0.3/bin/startup.bat
ehcache-monitor-kit-1.0.3/bin/startup.sh
ehcache-monitor-kit-1.0.3/bin/shutdown.sh
ehcache-monitor-kit-1.0.3/bin/shutdown.bat
ehcache-monitor-kit-1.0.3/etc/ehcache-monitor.conf
ehcache-monitor-kit-1.0.3/etc/jetty.xml
ehcache-monitor-kit-1.0.3/lib/ehcache-monitor-1.0.3.jar
ehcache-monitor-kit-1.0.3/lib/common-1.0.3.jar
ehcache-monitor-kit-1.0.3/lib/jetty-patched-1.0.3.jar
ehcache-monitor-kit-1.0.3/lib/terracotta-license-1.0.2.jar
ehcache-monitor-kit-1.0.3/lib/slf4j-api-1.6.1.jar
ehcache-monitor-kit-1.0.3/lib/jetty-patched-extra-1.0.3.jar
ehcache-monitor-kit-1.0.3/lib/slf4j-jdk14-1.6.1.jar
ehcache-monitor-kit-1.0.3/lib/ehcache-probe-1.0.3.jar

[eric@localhost ehcache-monitor-kit-1.0.3]$ mvn install:install-file -Dfile=lib/ehcache-probe-1.0.3.jar -Dpackaging=jar -DgroupId=org.terracotta -DartifactId=ehcache-probe -Dversion=1.0.3
[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Maven Stub Project (No POM) 1
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-install-plugin:2.4:install-file (default-cli) @ standalone-pom ---
[INFO] Installing /home/eric/Devel/Java/Ehcache_Monitor/ehcache-monitor-kit-1.0.3/lib/ehcache-probe-1.0.3.jar to /home/eric/.m2/repository/org/terracotta/ehcache-probe/1.0.3/ehcache-probe-1.0.3.jar
[INFO] Installing /tmp/mvninstall7674510619837122782.pom to /home/eric/.m2/repository/org/terracotta/ehcache-probe/1.0.3/ehcache-probe-1.0.3.pom
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 0.465s
[INFO] Finished at: Mon Sep 29 13:55:26 CEST 2014
[INFO] Final Memory: 6M/150M
[INFO] ------------------------------------------------------------------------

[eric@localhost repository]$ ls org/terracotta/ehcache-probe/1.0.3/
ehcache-probe-1.0.3.jar  ehcache-probe-1.0.3.pom  _remote.repositories     

[eric@localhost ehcache-monitor-kit-1.0.3]$ vi etc/jetty.xml 
...
<!DOCTYPE Configure PUBLIC "-//Mort Bay Consulting//DTD Configure//EN" "http://eclipse.org/jetty/configure.dtd">

[eric@localhost ehcache-monitor-kit-1.0.3]$ bin/startup.sh
Sep 29, 2014 2:13:33 PM org.terracotta.ehcachedx.monitor.Monitor loadPropertiesFromConfigurationAndCommandLine
INFO: Loading properties from config file /home/eric/Devel/Java/Ehcache_Monitor/ehcache-monitor-kit-1.0.3/etc/ehcache-monitor.conf
Sep 29, 2014 2:13:33 PM org.terracotta.ehcachedx.monitor.Monitor$Configuration determineSamplingHistory
INFO: History will hold 8640 observations.
Sep 29, 2014 2:13:33 PM org.terracotta.ehcachedx.monitor.Monitor$Configuration determineSamplingSeconds
INFO: Sampling will be done every 10 seconds.
Sep 29, 2014 2:13:33 PM org.terracotta.ehcachedx.license.LicenseResolver resolveLicense
WARNING: No  license key found. This monitoring probe software is not licensed for production usage, and is only licensed for development usage. See LICENSE.txt for details. A temporary key will be generated for development usage. When the temporary key expires, the ing probe capability will be suspended but your ability to continue to use Ehcache will not be affected. Please contact sales@terracottatech.com to request a license.
Sep 29, 2014 2:13:33 PM org.terracotta.ehcachedx.license.LicenseResolver logLicense
INFO: 
---------------  license key ---------------
Capabilities: ehcache monitor
Date of Issue: 2014-09-29
Edition: DX
Expiration Date: 2014-10-02
License Number: 0000
License Type: DevOnly
Licensee: DevOnly
Product: Ehcache
-----------------------------------------------
Sep 29, 2014 2:13:34 PM org.terracotta.ehcachedx.monitor.monitor.MonitorDxService start
INFO: Applying jettyConfig from 'bin/../etc/jetty.xml'
Sep 29, 2014 2:13:34 PM org.terracotta.ehcachedx.monitor.monitor.MonitorDxService startHTTPListener
INFO: Started monitor at http://127.0.0.1:9889/monitor

http://localhost:9889/monitor

/ Sent e-mail to pm@terracotta.org

Hello,

I have installed your Ehcache Monitor. 

I have two questions.  The first concerns the tab Contents:

When I select an item in a cache, then always the message appears:

"The element couldn't be found in the cache anymore".

The second iquestion concerns the tab Statistics:

Always a window comes up which says that statistics is not configured. But I did it in ehcache.cml.

Thanks.


/ Einde EHCACHE MONITOR

/ TERRACOTTA

/ ehcache-hibernate forum: eric.vandervelden@mp-objects.com
Eric
Van der Velden
eric.vandervelden@mp-objects.com
ericj
vlWalnoot27



/ register for forum	,


/ Einde TERRACOTTA

/ EHCACHE POM

/ in hibernate_xml_1_N_join_ehcache	,

/ WAS	,

<dependency>
    <groupId>net.sf.ehcache</groupId>
    <artifactId>ehcache-core</artifactId>
    <version>2.6.9</version>
</dependency>

/ NU	,

<dependency>
    <groupId>net.sf.ehcache.internal</groupId>
    <artifactId>ehcache-core</artifactId>
    <version>2.9.0</version>
</dependency>

/ Einde EHCACHE POM

/ SKYPE

/ Einde SKYPE

/ SELF MONITOR

/ we kunnen	,
persister.getCacheAccessStrategy().getRegion()	,
/ getCache() is protected	, maar er is public get(<key>)	,

		final CollectionCacheEntry entry = new CollectionCacheEntry( lce.getCollection(), persister );
		final CacheKey cacheKey = session.generateCacheKey( lce.getKey(), persister.getKeyType(), persister.getRole() );
org.hibernate.cache.ehcache.internal.regions.EhcacheCollectionRegion@780a03a2
lce.getKey()=34L	,
/ er is ook 
org.hibernate.cache.ehcache.internal.regions.EhcacheEntityRegion@780a03a2


				final boolean put = persister.getCacheAccessStrategy().putFromLoad(
						cacheKey,
						persister.getCacheEntryStructure().structure( entry ),
						session.getTimestamp(),
						version,
						factory.getSettings().isMinimalPutsEnabled() && session.getCacheMode()!= CacheMode.REFRESH
				);


performExections, prepareActions	, [CollectionUpdateAction[my.test.own.hibernate_xml_N_1_bidir_ehcache.Address.employees#34]] -> 
			final SoftLock lock = persister.getCacheAccessStrategy().lockItem( ck, null ); -> rm [1l,2l] uit coll cache	,

executeActions: [EntityInsertAction[my.test.own.hibernate_xml_N_1_bidir_ehcache.Employee#4]]
[CollectionUpdateAction[my.test.own.hibernate_xml_N_1_bidir_ehcache.Address.employees#34]]: schedules CollectionAction$CacheCleanupProcess
afterTransaction: EntityInsertAction: e4 -> 2c	, CollectionAction$CacheCleanupProcess-> unlockItem


[EntityDeleteAction[my.test.own.hibernate_xml_N_1_bidir_ehcache.Employee#4]]
/s
EntityDeleteAction.execute() line: 107	
			lock = persister.getCacheAccessStrategy().lockItem( ck, version );
/ e4 2c item=["foostreet",4.0,34l] -> lockItem	,

			persister.delete( id, version, instance, session );

/ afterTx:[EntityDeleteAction[my.test.own.hibernate_xml_N_1_bidir_ehcache.Employee#4]]: unlockItem	,

/ Einde SELF MONITOR

/ HIBERNATE & EHCACHE

/ .hibernate_xml_N_1_bidir_ehcache

/ 7	.

		  	address3=(Address)session.get(Address.class, 34l);
		  	address3.getEmployees().clear();
/s
PersistentSet.clear() line: 302	
	public void clear() {
		if ( isClearQueueEnabled() ) {
/s
		return !initialized
				&& isConnectedToSession()
				&& isInverseCollectionNoOrphanDelete();
/ JA
/t

			queueOperation( new Clear() );
/s
PersistentSet(AbstractPersistentCollection).queueOperation(AbstractPersistentCollection$DelayedOperation) line: 482	
		if ( operationQueue == null ) {
			operationQueue = new ArrayList<DelayedOperation>( 10 );
		}
		operationQueue.add( operation );
		//needed so that we remove this collection from the second-level cache
		dirty = true;

/t
	        tx.commit();
/s
/ flushEntities, FlushVisitor, .setDoupdate(true)
/s
DefaultFlushEventListener(AbstractFlushingEventListener).flushCollections(EventSource, PersistenceContext) line: 307	
			if ( ce.isDoupdate() ) {
				session.getInterceptor().onCollectionUpdate( coll, ce.getLoadedKey() );
				actionQueue.addAction(
						new CollectionUpdateAction(
								coll,
								ce.getLoadedPersister(),
								ce.getLoadedKey(),
								ce.isSnapshotEmpty(coll),
								session
							)
					);
			}
			if ( !coll.wasInitialized() && coll.hasQueuedOperations() ) {
				actionQueue.addAction(
						new QueuedOperationCollectionAction(
								coll,
								ce.getLoadedPersister(),
								ce.getLoadedKey(),
								session
							)
					);
			}
/ t
/s 
ActionQueue.prepareActions() line: 359	
		prepareActions( collectionUpdates );
/ lockItem op coll employees#34
		prepareActions( collectionQueuedOps );
/ lockItem op coll employees#34

/t
ActionQueue.executeActions() line: 349	
[QueuedOperationCollectionAction[my.test.own.hibernate_xml_N_1_bidir_ehcache.Address.employees#34]]
/s
QueuedOperationCollectionAction.execute() line: 60	
		getPersister().processQueuedOps( getCollection(), getKey(), getSession() );
/s
OneToManyPersister(AbstractCollectionPersister).processQueuedOps(PersistentCollection, Serializable, SessionImplementor) line: 1707	
		if ( collection.hasQueuedOperations() ) {
			int nextIndex = getSize( key, session );
2
/ want	,
Hibernate: select count(id_) from employee where address_ =?
HibernateLog --> 15:17:38 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [34]

			doProcessQueuedOps( collection, key, nextIndex, session );
/s
	protected void doProcessQueuedOps(PersistentCollection collection, Serializable id, SessionImplementor session)
			throws HibernateException {
		writeIndex( collection, collection.queuedAdditionIterator(), id, getSize( id, session ), session );
/s
		if ( isInverse && hasIndex && !indexContainsFormula ) {
/ NEE	,
this	OneToManyPersister  (id=3539)	
this.isInverse=true
this.hasIndex=false

/t

[CollectionUpdateAction[my.test.own.hibernate_xml_N_1_bidir_ehcache.Address.employees#34].execute
/ TODO

/ 7	. 

/ als we eerst de coll init, ,dan doet PersistentSet.clear iets anders	,

		  	address3=(Address)session.get(Address.class, 34l);
		  	address3.getEmployees().size();					// inits coll	,
		  	address3.getEmployees().clear();
/s
PersistentSet.clear() line: 305	
	public void clear() {
		if ( isClearQueueEnabled() ) {
/ NEE
		else {
			initialize( true );
/ NIETS, want is al	,
			if ( !set.isEmpty() ) {
				set.clear();
				dirty();


/ 7	.

		  	address3=(Address)session.get(Address.class, 34l);
		  	address3.setEmployees(null);
	        tx.commit();    
/s
/ via flushEverythingToExecutions	, 
DefaultFlushEventListener(AbstractFlushingEventListener).flushCollections(EventSource, PersistenceContext) line: 258	

		for ( Map.Entry<PersistentCollection,CollectionEntry> me : entries ) {
			CollectionEntry ce = me.getValue();
			if ( !ce.isReached() && !ce.isIgnore() ) {
/ TODO
				Collections.processUnreachableCollection( me.getKey(), session );
/s
		else {
			processDereferencedCollection( coll, session );
/s
		// do the work
		entry.setCurrentPersister( null );
		entry.setCurrentKey( null );
		prepareCollectionForUpdate( coll, entry, session.getFactory() );
/s
Collections.prepareCollectionForUpdate(PersistentCollection, CollectionEntry, SessionFactoryImplementor) line: 225	

/ hier komen we weer altijd ook	,

			final boolean ownerChanged = loadedPersister != currentPersister
					|| !currentPersister.getKeyType().isEqual( entry.getLoadedKey(), entry.getCurrentKey(), factory );
/ Nu is currentPersister==null	, en loadPersister!=null	,
/ In de 1ste session's commit is currentPersister!=null en loadedPersister==null	,
/ Normaal is in volgende sessions  currentPersister!=null en loadedPersister!=null beide	,

				// do the work
				if ( currentPersister != null ) {
/ NEE
					entry.setDorecreate( true );
				}
				if ( loadedPersister != null ) {
/ JA
					// we will need to remove ye olde entries
					entry.setDoremove( true );
					if ( entry.isDorecreate() ) {
/ NEE

/ dan in	,
DefaultFlushEventListener(AbstractFlushingEventListener).flushCollections(EventSource, PersistenceContext) line: 272	
			if ( ce.isDoremove() ) {
				session.getInterceptor().onCollectionRemove( coll, ce.getLoadedKey() );
				actionQueue.addAction(
						new CollectionRemoveAction(
								coll,
								ce.getLoadedPersister(),
								ce.getLoadedKey(),
								ce.isSnapshotEmpty(coll),
								session
							)
					);
			}


/ ce.isReached()==false	, 
/ WH is dit de default,	 want normaal komen we in	, via FlushVisitor.proccessEntityPropertyValues	,
Collections.processReachableCollection(PersistentCollection, CollectionType, Object, SessionImplementor) line: 184	
		ce.setReached( true );

/ we zien in de db GEEN verandering	, 
/ Ook met 
	address3.getEmployees().clear();
/ zien we geen verandering in de db	,
/ TODO

/ 7	. 

/ In hibernate_xml_N_1_bidir_ehcache	,

/ we komen in	,
	ActionQueue.executeActions() line: 349	
	DefaultFlushEventListener(AbstractFlushingEventListener).performExecutions(EventSource) line: 350	
	DefaultFlushEventListener.onFlush(FlushEvent) line: 56	
				flushEverythingToExecutions( event );
/ schedules CollectionUpdateAction	,
/ D
				performExecutions( source );

	SessionImpl.flush() line: 1222	
	SessionImpl.managedFlush() line: 425	
	JdbcTransaction.beforeTransactionCommit() line: 101	
	JdbcTransaction(AbstractTransactionImpl).commit() line: 177	
	Main.testBasicUsage() line: 295	
	Main.<init>() line: 62	
	Main.main(String[]) line: 56	

/s
CollectionUpdateAction.execute() line: 100	
		else {
			persister.deleteRows( collection, id, session );
			persister.updateRows( collection, id, session );
			persister.insertRows( collection, id, session );
		}

		getSession().getPersistenceContext().getCollectionEntry( collection ).afterAction( collection );
		evict();
		postUpdate();

/ Deze zijn WH alleen interessant bij 1_N	, 

/ 7	.

/ 1-N bidir

/ hibernate_xml_1_N_bdir_ehcache

/ performExecutions, session.getActionQueue().executeActions()	, 

/ EntityInsertAction.execute 

/ van een Employee	,
/s
SingleTableEntityPersister(AbstractEntityPersister).dehydrate(Serializable, Object[], Object, boolean[], boolean[][], int, PreparedStatement, SessionImplementor, int, boolean) line: 2840	
	protected int dehydrate(
			final Serializable id,
			final Object[] fields,
			final Object rowId,
			final boolean[] includeProperty,
[true, true, false, true]
			final boolean[][] includeColumns,
[[true], [true], [true], [true]]
			final int j,
			final PreparedStatement ps,
			final SessionImplementor session,
			int index,
			boolean isUpdate ) throws SQLException, HibernateException {

	for ( int i = 0; i < entityMetamodel.getPropertySpan(); i++ ) {
			if ( includeProperty[i] && isPropertyOfTable( i, j )
/ NEE voor i=2
					&& !lobProperties.contains( i )) {
				getPropertyTypes()[i].nullSafeSet( ps, fields[i], index, includeColumns[i], session );
				index += ArrayHelper.countTrue( includeColumns[i] ); //TODO:  this is kinda slow...

/ SAMENVATTING

/ bij .save(employee) gaat H terug naar de address.employees en kijkt of employee er in zit: zo ja, dan Backref.getter geeft owner coll=address.employees	, 

/ Address	,

/ address's entry.state=(...,...,...,pset)

/ includeProperty
/ TODO
/ includeColumns
/ TODO

/ p.insert calls type.dehydate,	SetType.dehydrate={}
/ p.insert(state)=(...,...,...)
/ p.buildCacheEntry calls type.disassemble,	 SetType.disassemble=getKeyOfOwner
/ p.disassemble(state)=(...,...,...,34l)

/ Employee,

/ address's entry.state=(...,...,null,34l)

/ includeProperty
/ [true,true,false,true] 
/ includeColumns
/ [[true],[true],[true],[true]] 

/ p.insert calls type.dehydate,	ManyToOne.dehydrate wordt overgeslagen	, LongType.dehydrate gewoon	, hij set dus de keyOfOwner op address_	,
/ p.insert(state)=(...,...,34l)
/ p.buildCacheEntry calls type.disassemble,	 ManyToOne.disassemble(null)=null	,  
/ p.disassemble(state)=(...,...,null,34l)

/ Einde SAMENVATTING

/ Later	, via performExecutions, session.getActionQueue().executeActions()	,
/s
CollectionRecreateAction.execute() line: 67	

		getPersister().recreate( collection, getKey(), getSession() );
/s
		if ( !isInverse && isRowInsertEnabled() ) {
/ JA	,
				// create all the new entries
				Iterator entries = collection.entries( this );
/ JA (bij address#34)	,
					while ( entries.hasNext() ) {

							String sql = getSQLInsertRowString();
/ we zien 	,
Hibernate: update employee set address_=? where id_=?
								// TODO: copy/paste from insertRows()
								int loc = writeKey( st, id, offset, session );
HibernateLog --> 12:33:43 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [34]
								loc = writeElement( st, collection.getElement( entry ), loc, session );
HibernateLog --> 12:34:16 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [1]

/ en volgende 	,
								int loc = writeKey( st, id, offset, session );
HibernateLog --> 12:33:43 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [34]
								loc = writeElement( st, collection.getElement( entry ), loc, session );
HibernateLog --> 12:34:16 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [2]






/t
		getPersister().recreate( collection, getKey(), getSession() );
/ D
		getSession().getPersistenceContext().getCollectionEntry( collection ).afterAction( collection );
/ sets loadedKey, loadedPersister	,

/ 7	.

/ Intermezzo

/ we zien !isInverse	,

$ vi org/hibernate/persister/collection/AbstractCollectionPersister.java

	public void remove(Serializable id, SessionImplementor session) throws HibernateException {
		if ( !isInverse && isRowDeleteEnabled() ) {
...

	public void recreate(PersistentCollection collection, Serializable id, SessionImplementor session)
			throws HibernateException {

		if ( !isInverse && isRowInsertEnabled() ) {
...

	public void deleteRows(PersistentCollection collection, Serializable id, SessionImplementor session)
			throws HibernateException {

		if ( !isInverse && isRowDeleteEnabled() ) {
...

	public void insertRows(PersistentCollection collection, Serializable id, SessionImplementor session)
			throws HibernateException {

		if ( !isInverse && isRowInsertEnabled() ) {
...

	public void updateRows(PersistentCollection collection, Serializable id, SessionImplementor session)
			throws HibernateException {

		if ( !isInverse && collection.isRowUpdatePossible() ) {
...

$ vi Collection.java

	public void createAllKeys() throws MappingException {
		createForeignKeys();
		if ( !isInverse() ) createPrimaryKey();



/ Einde Intermezzo


/ 7	. 

/ ehcache version comparator	,

Thread [main] (Suspended)	
	ReadWriteEhcacheEntityRegionAccessStrategy(AbstractReadWriteEhcacheAccessStrategy<T>).<init>(T, Settings) line: 56	
		super( region, settings );
		this.versionComparator = region.getCacheDataDescription().getVersionComparator();

	ReadWriteEhcacheEntityRegionAccessStrategy.<init>(EhcacheEntityRegion, Settings) line: 50	
		super( region, settings );

	EhcacheAccessStrategyFactoryImpl.createEntityRegionAccessStrategy(EhcacheEntityRegion, AccessType) line: 61	
			case READ_WRITE:
				return new ReadWriteEhcacheEntityRegionAccessStrategy( entityRegion, entityRegion.getSettings() );

	NonstopAccessStrategyFactory.createEntityRegionAccessStrategy(EhcacheEntityRegion, AccessType) line: 59	
		return new NonstopAwareEntityRegionAccessStrategy(
				actualFactory.createEntityRegionAccessStrategy( entityRegion, accessType ),
				HibernateNonstopCacheExceptionHandler.getInstance()
		);

	EhcacheEntityRegion.buildAccessStrategy(AccessType) line: 69	
		return getAccessStrategyFactory().createEntityRegionAccessStrategy( this, accessType );

	SessionFactoryImpl.<init>(Configuration, Mapping, ServiceRegistry, Settings, SessionFactoryObserver) line: 365	
					EntityRegion entityRegion = regionFactory.buildEntityRegion( cacheRegionName, properties, CacheDataDescriptionImpl.decode( model ) );
					accessStrategy = entityRegion.buildAccessStrategy( accessType );

	Configuration.buildSessionFactory(ServiceRegistry) line: 1857	
	Main.setUp() line: 75	
	Main.<init>() line: 63	
	Main.main(String[]) line: 58	


  
 

/ Einde HIBERNATE & EHCACHE

/ HIBERNATE 

https://lists.jboss.org/mailman/listinfo/hibernate-dev

/ geabonneerd	,

/ Einde HIBERNATE 

/ SPRING

/ we add in jboss tools  een achetype catalog	,

windows, preferences, maven, archetypes
http://repo1.maven.org/maven2/archetype-catalog.xml
name: repo1
/ Nu zien we dezelfde als op de command line	, 

/ Einde SPRING

/ HIBERNATE & EHCACHE NONSTRICT-READ-WRITE

/ 7	.

////////////////////////////////////////////////
/ we hebben nonstrict-read-write 	,

/ 13	. 

/////////////////////////////////////////////////////////////
/ In de 1ste session wordt 2c NIET write	,

DefaultFlushEventListener(AbstractFlushingEventListener).performExecutions(EventSource) line: 350	
			session.getActionQueue().prepareActions();
/ .lockItem is nu return null	,
			session.getActionQueue().executeActions();
/s
CollectionRecreateAction.execute() line: 67	

////////////////////
/ sets fk (impl van een coll)
/ een EntityInsertAction doet persist.insert	, deze doet deze persist, via batch (TODO)	,
/s
OneToManyPersister(AbstractCollectionPersister).recreate(PersistentCollection, Serializable, SessionImplementor) line: 1255	
		if ( !isInverse && isRowInsertEnabled() ) {
/s
		return keyIsUpdateable;
/true
/ Dit geeft 'die' queries	,
Hibernate: update employee set address_=? where id_=?
HibernateLog --> 13:30:10 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [34]
HibernateLog --> 13:30:29 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [2]
Hibernate: update employee set address_=? where id_=?
HibernateLog --> 13:31:21 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [34]
HibernateLog --> 13:31:27 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [1]

/ Dit is dus geen 2c	, maar EntityInsertAction doet ook persist.insert , en daarna pas 2c	,

/t
CollectionRecreateAction.execute() line: 69	
		evict();
/ Dit is 2c	,
/s
		if ( persister.hasCache() ) {
			final CacheKey ck = session.generateCacheKey(
					key, 
					persister.getKeyType(), 
					persister.getRole()
			);
			persister.getCacheAccessStrategy().remove( ck );
/ Deze execs nu	,
/ TODO

/t
JdbcTransaction(AbstractTransactionImpl).commit() line: 182	
			doCommit();
/d
			afterTransactionCompletion( Status.STATUS_COMMITTED );
/s
		getTransactionContext().afterTransactionCompletion( hibernateTransaction, success );
/s
		actionQueue.afterTransactionCompletion( successful );
/s
			while ( !processes.isEmpty() ) {
				try {
					processes.poll().doAfterTransactionCompletion( success, session );
/s
EntityInsertAction.doAfterTransactionCompletion(boolean, SessionImplementor) line: 228	
			final CacheKey ck = getSession().generateCacheKey( getId(), persister.getIdentifierType(), persister.getRootEntityName() );
12/34	, Address	,
1/2	, Employee	,
			final boolean put = cacheAfterInsert( persister, ck );
/s
			return persister.getCacheAccessStrategy().afterInsert( ck, cacheEntry, version );
/s
			return actualStrategy.afterInsert( key, value, version );
/s
NonStrictReadWriteEhcacheEntityRegionAccessStrategy.afterInsert(Object, Object, Object) line: 112	
		return false;

/ Intermezzo

/ Maar	, 
ReadWriteEhcacheEntityRegionAccessStrategy.afterInsert(Object, Object, Object) line: 112	
                        final Lockable item = (Lockable) region().get( key );
                        if ( item == null ) {
                                region().put( key, new Item( value, version, region().nextTimestamp() ) );
                                return true;
                        }
                        else {
                                return false;


/ Einde Intermezzo

/ dan	,
EntityUpdateAction.doAfterTransactionCompletion(boolean, SessionImplementor) line: 328	

/ we zien dat in 1ste session NIET naar 2c	, 

/ 13	.

/ hibernate_xml_1_N_bidir_ehcache	,
/ nonstrict-read-write

/ 2de session	,

/ Een .get van Address#34 -> write naar 2c	, (doet new Address, new PersistenSet)	,

/ 2de session	,
Main.testBasicUsage() line: 183	
	        address=(Address)session.get(Address.class, 34l);

/ hydrates db row to H props , met self creates MarkerObject=coll id (TODO)	, en creates PersistentSet, met deze id	, en -> entity-2c
/ TODO

/s
DefaultLoadEventListener.doLoad(LoadEvent, EntityPersister, EntityKey, LoadEventListener$LoadType) line: 468	
		Object entity = loadFromSessionCache( event, keyToLoad, options );
null
		entity = loadFromSecondLevelCache( event, persister, options );
null
			entity = loadFromDatasource( event, persister, keyToLoad, options );
/s
EntityLoader(AbstractLoadPlanBasedLoader).executeLoad(SessionImplementor, QueryParameters, LoadQueryDetails, boolean, ResultTransformer, List<AfterLoadAction>) line: 138	
				wrapper = executeQueryStatement( sql, queryParameters, false, afterLoadActions, session );
				results = loadQueryDetails.getResultSetProcessor().extractResults(
						wrapper.getResultSet(),
						session,
						queryParameters,
						new NamedParameterContext() {
							@Override
							public int[] getNamedParameterLocations(String name) {
								return AbstractLoadPlanBasedLoader.this.getNamedParameterLocs( name );
							}
						},
						returnProxies,
						queryParameters.isReadOnly(),
						forcedResultTransformer,
						afterLoadActions
				);
/s
ResultSetProcessorImpl.extractResults(ResultSet, SessionImplementor, QueryParameters, NamedParameterContext, boolean, boolean, ResultTransformer, List<AfterLoadAction>) line: 129	

/ dit is ook de mth waar we ook altijd in komen bij .iterator()	,
/ TODO

		for ( count = 0; count < maxRows && resultSet.next(); count++ ) {
			Object logicalRow = rowReader.readRow( resultSet, context );
		}
		rowReader.finishUp( context, afterLoadActionList );

/ Eerst 
			Object logicalRow = rowReader.readRow( resultSet, context );
/s
EntityLoadQueryDetails$EntityLoaderRowReader.readRow(ResultSet, ResultSetProcessingContextImpl) line: 232	
...
			return super.readRow( resultSet, context );
/s
EntityLoadQueryDetails$EntityLoaderRowReader(AbstractRowReader).readRow(ResultSet, ResultSetProcessingContextImpl) line: 84	

/ Met .iterator komen we direct in deze mth	,
/s
AbstractCollectionLoadQueryDetails$CollectionLoaderRowReader(AbstractRowReader).readRow(ResultSet, ResultSetProcessingContextImpl) line: 125

/ we zagen	,
HibernateLog --> 14:25:19 DEBUG org.hibernate.SQL - select address0_.id__ as id__1_0_0_, address0_.address_line1__ as address_2_0_0_, address0_.zipcode__ as zipcode_3_0_0_, address0_.city_ as city_4_0_0_ from address address0_ where address0_.id__=?
Hibernate: select address0_.id__ as id__1_0_0_, address0_.address_line1__ as address_2_0_0_, address0_.zipcode__ as zipcode_3_0_0_, address0_.city_ as city_4_0_0_ from address address0_ where address0_.id__=?
HibernateLog --> 14:25:19 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [34]

			// 2) allow entity references to resolve their non-identifier hydrated state and entity instance
			for ( EntityReferenceInitializer entityReferenceInitializer : entityReferenceInitializers ) {
				entityReferenceInitializer.hydrateEntityState( resultSet, context );

HibernateLog --> 14:45:45 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [foostreet]
HibernateLog --> 14:45:45 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [34 foo]
HibernateLog --> 14:45:45 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city_4_0_0_] : [VARCHAR]) - [FooCity34A]

/t
ResultSetProcessorImpl.extractResults(ResultSet, SessionImplementor, QueryParameters, NamedParameterContext, boolean, boolean, ResultTransformer, List<AfterLoadAction>) line: 140	
		rowReader.finishUp( context, afterLoadActionList );
/s
		// now finish loading the entities (2-phase load)
		performTwoPhaseLoad( preLoadEvent, context, hydratedEntityRegistrations );
/s
TwoPhaseLoad.doInitializeEntity(Object, EntityEntry, boolean, SessionImplementor, PreLoadEvent) line: 166	
		final Serializable id = entityEntry.getId();
34
		final Object[] hydratedState = entityEntry.getLoadedState();
hydratedState	Object[4]  (id=3525)	
	[0]	"foostreet" (id=3526)	
	[1]	"34 foo" (id=3527)	
	[2]	"FooCity34A" (id=3528)	
	[3]	MarkerObject  (id=3529)	
/ TODO
types	Type[4]  (id=3595)	
	[0]	StringType  (id=3602)	
	[1]	StringType  (id=3602)	
	[2]	StringType  (id=3602)	
	[3]	SetType  (id=3607)	

		for ( int i = 0; i < hydratedState.length; i++ ) {
			final Object value = hydratedState[i];
			if ( value!=LazyPropertyInitializer.UNFETCHED_PROPERTY && value!=BackrefPropertyAccessor.UNKNOWN ) {
				hydratedState[i] = types[i].resolve( value, session, entity );
/s
SetType(CollectionType).resolve(Object, SessionImplementor, Object) line: 460	
		return resolveKey( getKeyOfOwner( owner, session ), session, owner );
/s
			getCollection( key, session, owner );
/s
				collection = instantiate( session, persister, key );
				collection.setOwner(owner);
				persistenceContext.addUninitializedCollection( persister, collection, key );

/t
TwoPhaseLoad.doInitializeEntity(Object, EntityEntry, boolean, SessionImplementor, PreLoadEvent) line: 191	
		final Type[] types = persister.getPropertyTypes();
		for ( int i = 0; i < hydratedState.length; i++ ) {
			final Object value = hydratedState[i];
			if ( value!=LazyPropertyInitializer.UNFETCHED_PROPERTY && value!=BackrefPropertyAccessor.UNKNOWN ) {
				hydratedState[i] = types[i].resolve( value, session, entity );
			}
		}
/d
		persister.setPropertyValues( entity, hydratedState );
/d
		if ( persister.hasCache() && session.getCacheMode().isPutEnabled() ) {
			final CacheEntry entry = persister.buildCacheEntry( entity, hydratedState, version, session );
entry	StandardCacheEntryImpl  (id=3649)	
	disassembledState	Serializable[4]  (id=3651)	
		[0]	"foostreet" (id=3526)	
		[1]	"34 foo" (id=3527)	
		[2]	"FooCity34A" (id=3528)	
		[3]	Long  (id=3472)	

			final CacheKey cacheKey = session.generateCacheKey( id, persister.getIdentifierType(), persister.getRootEntityName() );
					final boolean put = persister.getCacheAccessStrategy().putFromLoad(
							cacheKey,
							persister.getCacheEntryStructure().structure( entry ),
							session.getTimestamp(),
							version,
							useMinimalPuts( session, entityEntry )
					);
/s
NonStrictReadWriteEhcacheEntityRegionAccessStrategy.putFromLoad(Object, Object, long, Object, boolean) line: 66	

		if ( minimalPutOverride && region().contains( key ) ) {
/ NEE
		else {
			region().put( key, value );

/ Intermezzo

/ ReadWriteEhcacheEntityRegionAccessStrategy heeft zelf geen .putFromLoad	, maar inherit van	,
./org/hibernate/cache/ehcache/internal/strategy/AbstractReadWriteEhcacheAccessStrategy.java

        public final boolean putFromLoad( Object key, Object value, long txTimestamp, Object version, boolean minimalPutOverride) throws CacheException {
                region().writeLock( key );
                try {
                        final Lockable item = (Lockable) region().get( key );
                        final boolean writeable = item == null || item.isWriteable( txTimestamp, version, versionComparator );
                        if ( writeable ) {
                                region().put( key, new Item( value, version, region().nextTimestamp() ) );
                                return true;
                        }
                        else {
                                return false; 

/ Einde Intermezzo

/ Dat is die method met die lock, 

/ Nu wordt Address#34 in 2c set	,

/t
EntityLoadQueryDetails$EntityLoaderRowReader(AbstractRowReader).finishUp(ResultSetProcessingContextImpl, List<AfterLoadAction>) line: 218	
		performTwoPhaseLoad( preLoadEvent, context, hydratedEntityRegistrations );
/d
		// now we can finalize loading collections
		finishLoadingCollections( context );
/ Nu NIETS	,
/ We hebben niet de coll query gedaan	, maar de entity query	,

/ 13	.

/t
Main.testBasicUsage() line: 186	
	        address=(Address)session.get(Address.class, 34l);
/d

/ db row ->(hydrate) H props (met MarkerObject(34l))	, address=new Address, sets H prop er in	,  address-> 2c (WH met Long 34 als laatste (TODO))	,

	        Set<Employee>employees=address.getEmployees();
	        Iterator<Employee>iterator=employees.iterator();
/s
PersistentSet(AbstractPersistentCollection).initialize(boolean) line: 554	
/s
DefaultInitializeCollectionEventListener.onInitializeCollection(InitializeCollectionEvent) line: 83	
			final boolean foundInCache = initializeCollectionFromCache(
					ce.getLoadedKey(),
					ce.getLoadedPersister(),
					collection,
					source
			);
false
.getLoadedPersister().initialize( ce.getLoadedKey(), source );
s
CollectionLoader(AbstractLoadPlanBasedLoader).executeLoad(SessionImplementor, QueryParameters, LoadQueryDetails, boolean, ResultTransformer, List<AfterLoadAction>) line: 138	
				wrapper = executeQueryStatement( sql, queryParameters, false, afterLoadActions, session );

Hibernate: select employees0_.address_ as address_4_0_0_, employees0_.id_ as id_1_1_0_, employees0_.id_ as id_1_1_1_, employees0_.name_ as name_2_1_1_, employees0_.salary_ as salary_3_1_1_, employees0_.address_ as address_4_1_1_ from employee employees0_ where employees0_.address_=?
HibernateLog --> 10:24:24 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [34]

				results = loadQueryDetails.getResultSetProcessor().extractResults(
						wrapper.getResultSet(),
						session,
						queryParameters,
						new NamedParameterContext() {
							@Override
							public int[] getNamedParameterLocations(String name) {
								return AbstractLoadPlanBasedLoader.this.getNamedParameterLocs( name );
							}
						},
						returnProxies,
						queryParameters.isReadOnly(),
						forcedResultTransformer,
						afterLoadActions
				);

/ zojuist, bij Entities	, dezelfde mth	,
EntityLoader(AbstractLoadPlanBasedLoader).executeLoad(SessionImplementor, QueryParameters, LoadQueryDetails, boolean, ResultTransformer, List<AfterLoadAction>) line: 138	

/s
ResultSetProcessorImpl.extractResults(ResultSet, SessionImplementor, QueryParameters, NamedParameterContext, boolean, boolean, ResultTransformer, List<AfterLoadAction>) line: 140	
		for ( count = 0; count < maxRows && resultSet.next(); count++ ) {
			Object logicalRow = rowReader.readRow( resultSet, context );
/ Leest H props	in	,
		rowReader.finishUp( context, afterLoadActionList );
/s
		// now finish loading the entities (2-phase load)
		performTwoPhaseLoad( preLoadEvent, context, hydratedEntityRegistrations );

/ handles entities uit de coll query	,
/ resolves H props	,sets H props in e=new Employee van boven (TODO)	en entity->2c	,
/ straks finishLoadingCollections	, die coll -> 2c

/s
		for ( HydratedEntityRegistration registration : hydratedEntityRegistrations ) {
			TwoPhaseLoad.initializeEntity(
					registration.getInstance(),
					context.isReadOnly(),
					context.getSession(),
					preLoadEvent
			);
/s
TwoPhaseLoad.doInitializeEntity(Object, EntityEntry, boolean, SessionImplementor, PreLoadEvent) line: 167	
		final Type[] types = persister.getPropertyTypes();
		for ( int i = 0; i < hydratedState.length; i++ ) {
			final Object value = hydratedState[i];
			if ( value!=LazyPropertyInitializer.UNFETCHED_PROPERTY && value!=BackrefPropertyAccessor.UNKNOWN ) {
/ Laat <unknown> onveranderd	,
				hydratedState[i] = types[i].resolve( value, session, entity );

		persister.setPropertyValues( entity, hydratedState );



			final CacheEntry entry = persister.buildCacheEntry( entity, hydratedState, version, session );
entry	StandardCacheEntryImpl  (id=3903)	
	disassembledState	Serializable[4]  (id=3904)	
		[0]	"Foo1A" (id=3882)	
		[1]	Double  (id=3883)	
		[2]	Long  (id=3472)	
		[3]	BackrefPropertyAccessor$1  (id=3884)	

/ <unknown> gaat ook de 2c in	,

			final CacheKey cacheKey = session.generateCacheKey( id, persister.getIdentifierType(), persister.getRootEntityName() );

					final boolean put = persister.getCacheAccessStrategy().putFromLoad(
							cacheKey,
							persister.getCacheEntryStructure().structure( entry ),
							session.getTimestamp(),
							version,
							useMinimalPuts( session, entityEntry )
					);
/s
NonStrictReadWriteEhcacheEntityRegionAccessStrategy.putFromLoad(Object, Object, long, Object, boolean) line: 66	
		if ( minimalPutOverride && region().contains( key ) ) {
			return false;
		}
		else {
			region().put( key, value );

/ NU WEL	, NIET bij readwrite	,
////////////////////////////////////////////////////////////////////
/ We zijn in de 2de session	, 

/t
		performTwoPhaseLoad( preLoadEvent, context, hydratedEntityRegistrations );
/d
/ Dit waren de entities	,

/ Nu de colls	,
		finishLoadingCollections( context );

/ Nu WEL, want we doen de coll query, NIET de entity query	,
/s
CollectionLoadContext.endLoadingCollection(LoadingCollectionEntry, CollectionPersister) line: 251	
		final boolean hasNoQueuedAdds = lce.getCollection().endRead();
/ coll tempList->set
			addCollectionToCache( lce, persister );
/s
		final CollectionCacheEntry entry = new CollectionCacheEntry( lce.getCollection(), persister );
entry	CollectionCacheEntry  (id=3985)	
	state	Serializable[2]  (id=3988)	
		[0]	Long  (id=3880)	
		[1]	Long  (id=3989)	
				final boolean put = persister.getCacheAccessStrategy().putFromLoad(
						cacheKey,
						persister.getCacheEntryStructure().structure( entry ),
						session.getTimestamp(),
						version,
						factory.getSettings().isMinimalPutsEnabled() && session.getCacheMode()!= CacheMode.REFRESH
				);

////////////////////////////////////////
/ .putFromLoad	: 2c <- 1c/2c/db
/ .putFromInsert: onze obj -> 2c	, bij ons in 1ste session	,

/ 13	.

/ 3de session	, 

	        address=(Address)session.get(Address.class, 34l);

/ haalt address <-2c	, er wordt new PersistenSet , met ownerId	, maar niet filled	, ondanks dat coll in 2c	, en de bijbehorende entities (Employee's)	, want hij doet de coll query	,
/s
DefaultLoadEventListener.doLoad(LoadEvent, EntityPersister, EntityKey, LoadEventListener$LoadType) line: 431	
		Object entity = loadFromSessionCache( event, keyToLoad, options );
null
		entity = loadFromSecondLevelCache( event, persister, options );
/s
NonStrictReadWriteEhcacheEntityRegionAccessStrategy.get(Object, long) line: 60	
		return region().get( key );

/t
DefaultLoadEventListener.loadFromSecondLevelCache(LoadEvent, EntityPersister, LoadEventListener$LoadType) line: 618	
		Object entity = convertCacheEntryToEntity( entry, event.getEntityId(), persister, event );
entry	StandardCacheEntryImpl  (id=3649)	
	disassembledState	Serializable[4]  (id=3651)	
		[0]	"foostreet" (id=3526)	
		[1]	"34 foo" (id=3527)	
		[2]	"FooCity34A" (id=3528)	
		[3]	Long  (id=3472)	
/s
DefaultLoadEventListener.convertCacheEntryToEntity(CacheEntry, Serializable, EntityPersister, LoadEvent) line: 707	
			entity = optionalObject == null
					? session.instantiate( subclassPersister, entityId )

			final Type[] types = subclassPersister.getPropertyTypes();
			// initializes the entity by (desired) side-effect
			values = ( (StandardCacheEntryImpl) entry ).assemble(
					entity, entityId, subclassPersister, session.getInterceptor(), session
			);
/ sets H props ook in entity	,
/s
TypeHelper.assemble(Serializable[], Type[], SessionImplementor, Object) line: 109	
		for ( int i = 0; i < types.length; i++ ) {
			if ( row[i] == LazyPropertyInitializer.UNFETCHED_PROPERTY || row[i] == BackrefPropertyAccessor.UNKNOWN ) {
/ NEE
				assembled[i] = row[i];
			}
			else {
				assembled[i] = types[i].assemble( row[i], session, owner );
/s
SetType(CollectionType).assemble(Serializable, SessionImplementor, Object) line: 296	
			final Serializable key = (Serializable) getPersister(session)
					.getKeyType()
					.assemble( cached, session, owner);
			return resolveKey( key, session, owner );
/ creates lege PersistenSet, met ownerId er in	,
/s

/ WH calls .get in 2de session, die db query deed, ook getCollection	, 
/ TODO
			getCollection( key, session, owner );
/s
			if ( collection == null ) {
				// create a new collection wrapper, to be initialized later
				collection = instantiate( session, persister, key );
				collection.setOwner(owner);
				persistenceContext.addUninitializedCollection( persister, collection, key );
/t
StandardCacheEntryImpl.assemble(Object, Serializable, EntityPersister, Interceptor, EventSource) line: 187	
		final Object[] assembledProps = TypeHelper.assemble(
				disassembledState,
				persister.getPropertyTypes(),
				session, instance
		);
/d
		persister.setPropertyValues( instance, assembledProps );
/t
DefaultLoadEventListener.convertCacheEntryToEntity(CacheEntry, Serializable, EntityPersister, LoadEvent) line: 719	
			values = ( (StandardCacheEntryImpl) entry ).assemble(
					entity, entityId, subclassPersister, session.getInterceptor(), session
			);
		persistenceContext.addEntry(
				entity,
				( isReadOnly ? Status.READ_ONLY : Status.MANAGED ),
				values,
				null,
				entityId,
				version,
				LockMode.NONE,
				true,
				subclassPersister,
				false,
				entry.areLazyPropertiesUnfetched()
		);
/t
	        address=(Address)session.get(Address.class, 34l);
	        employees=address.getEmployees();
	        iterator=employees.iterator();
/s
DefaultInitializeCollectionEventListener.onInitializeCollection(InitializeCollectionEvent) line: 63	
		CollectionEntry ce = source.getPersistenceContext().getCollectionEntry( collection );
/ .get(Address.class,34l) sets 'm	,
		if ( !collection.wasInitialized() ) {
/ JA
			final boolean foundInCache = initializeCollectionFromCache(
					ce.getLoadedKey(),
					ce.getLoadedPersister(),
					collection,
					source
			);
/s
DefaultInitializeCollectionEventListener.initializeCollectionFromCache(Serializable, CollectionPersister, PersistentCollection, SessionImplementor) line: 139	
		final Object ce = CacheHelper.fromSharedCache( source, ck, persister.getCacheAccessStrategy() );

/////////////////////
/ In de persister, 'n OneToManyPersister	, zit de actualStrategy, met region	,
persister	OneToManyPersister  (id=3799)	
	cacheAccessStrategy	NonstopAwareCollectionRegionAccessStrategy  (id=4066)	
		actualStrategy	NonStrictReadWriteEhcacheCollectionRegionAccessStrategy  (id=4074)	
			region	EhcacheCollectionRegion  (id=4075)	
				cache	Cache  (id=4081)	
					configuration	CacheConfiguration  (id=5066)	
						name	"my.test.own.hibernate_xml_1_N_bidir_ehcache.Address.employees" (id=5121)	

key	CacheKey  (id=5036)	
	entityOrRoleName	"my.test.own.hibernate_xml_1_N_bidir_ehcache.Address.employees" (id=4973)	
	hashCode	1054	
	key	Long  (id=3472)		34
	tenantId	null	
	type	LongType  (id=3849)	

/t
DefaultInitializeCollectionEventListener.initializeCollectionFromCache(Serializable, CollectionPersister, PersistentCollection, SessionImplementor) line: 139	
		final Object ce = CacheHelper.fromSharedCache( source, ck, persister.getCacheAccessStrategy() );
ce	CollectionCacheEntry  (id=3985)	
	state	Serializable[2]  (id=3988)	
		[0]	Long  (id=3880)	
		[1]	Long  (id=3989)	

		cacheEntry.assemble( collection, persister, persistenceContext.getCollectionOwner( id, persister ) );
/s
		collection.initializeFromCache( persister, state, owner );
/s
		for ( Serializable arrayElement : array ) {
			final Object assembledArrayElement = persister.getElementType().assemble( arrayElement, getSession(), owner );
/ persister.getElementType()=ManyToOneType	,
/s
			return resolveIdentifier( id, session );
/ id=1l
/s
ManyToOneType(EntityType).resolveIdentifier(Serializable, SessionImplementor) line: 716	
		Object proxyOrEntity = session.internalLoad(
				getAssociatedEntityName(),
				id,
				eager,
				isNullable() && !isProxyUnwrapEnabled
		);
/s
DefaultLoadEventListener.doLoad(LoadEvent, EntityPersister, EntityKey, LoadEventListener$LoadType) line: 431	
		Object entity = loadFromSessionCache( event, keyToLoad, options );
null
		entity = loadFromSecondLevelCache( event, persister, options );
/s
		final CacheKey ck = source.generateCacheKey(
				event.getEntityId(),
				persister.getIdentifierType(),
				persister.getRootEntityName()
		);
ck	CacheKey  (id=5226)	
	entityOrRoleName	"my.test.own.hibernate_xml_1_N_bidir_ehcache.Employee" (id=3858)	
	hashCode	31	
	key	Long  (id=3880)		1
	tenantId	null	
	type	LongType  (id=3849)	

		final Object ce = CacheHelper.fromSharedCache( source, ck, persister.getCacheAccessStrategy() );
ce	StandardCacheEntryImpl  (id=3903)	
	disassembledState	Serializable[4]  (id=3904)	
		[0]	"Foo1A" (id=3882)	
		[1]	Double  (id=3883)	
		[2]	Long  (id=3472)	
		[3]	BackrefPropertyAccessor$1  (id=3884)	

		Object entity = convertCacheEntryToEntity( entry, event.getEntityId(), persister, event );
/s
			entity = optionalObject == null
					? session.instantiate( subclassPersister, entityId )
/s
			final Type[] types = subclassPersister.getPropertyTypes();
			values = ( (StandardCacheEntryImpl) entry ).assemble(
					entity, entityId, subclassPersister, session.getInterceptor(), session
			);
types	Type[4]  (id=3887)	
	[0]	StringType  (id=3602)	
	[1]	DoubleType  (id=5295)	
	[2]	ManyToOneType  (id=5296)	
	[3]	LongType  (id=3849)	
/s
		//assembled state gets put in a new array (we read from cache by value!)
		final Object[] assembledProps = TypeHelper.assemble(
				disassembledState,
				persister.getPropertyTypes(),
				session, instance
		);
/s
		for ( int i = 0; i < types.length; i++ ) {
			if ( row[i] == LazyPropertyInitializer.UNFETCHED_PROPERTY || row[i] == BackrefPropertyAccessor.UNKNOWN ) {
/ JA	, 3de	, neemt over,	
				assembled[i] = row[i];
			}
			else {
				assembled[i] = types[i].assemble( row[i], session, owner );
			}
		}
/t
		persister.setPropertyValues( instance, assembledProps );
/ slaat <unknown> over	,
		persistenceContext.addEntry(
				entity,
				( isReadOnly ? Status.READ_ONLY : Status.MANAGED ),
				values,
				null,
				entityId,
				version,
				LockMode.NONE,
				true,
				subclassPersister,
				false,
				entry.areLazyPropertiesUnfetched()
		);

/t
PersistentSet.initializeFromCache(CollectionPersister, Serializable, Object) line: 147	
		for ( Serializable arrayElement : array ) {
			final Object assembledArrayElement = persister.getElementType().assemble( arrayElement, getSession(), owner );
/d
				set.add( assembledArrayElement );










 




























/ Einde HIBERNATE & EHCACHE NONSTRICT-READ-WRITE


/ LOG4J


/ we hebben proj mylog4j create	,

/ 7	. 

/ log4j-1.2

/ Lees	,
http://logging.apache.org/log4j/1.2/manual.html

TRACE< DEBUG< INFO< WARN< ERROR <FATAL	, dus WARN is sterker dan INFO	,

/ als level=INFO, dan zal log.warn print, omdat INFO<WARN	,   

/ we lezen	,

  // get a logger instance named "com.foo"
   Logger  logger = Logger.getLogger("com.foo");

   // Now set its level. Normally you do not need to set the
   // level of a logger programmatically. This is usually done
   // in configuration files.
   logger.setLevel(Level.INFO);

   Logger barlogger = Logger.getLogger("com.foo.Bar");

   // This request is enabled, because WARN >= INFO.
   logger.warn("Low fuel level.");

   // This request is disabled, because DEBUG < INFO.
   logger.debug("Starting search for nearest gas station.");

//////////////////////////////////////////////////////////////////////
   // The logger instance barlogger, named "com.foo.Bar",
   // will inherit its level from the logger named
   // "com.foo" Thus, the following request is enabled
   // because INFO >= INFO.
   barlogger.info("Located nearest gas station.");

////////////////////////////////////
/ Dus daarom .getLogger("...")	, 

/ 7	.

/ we maken	,

$ vi com/foo/MyApp.java

package com.foo;

import org.apache.log4j.BasicConfigurator;
import org.apache.log4j.Logger;

import com.bar.Bar;

public class MyApp {
	// Define a static logger variable so that it references the
	   // Logger instance named "MyApp".
	   static Logger logger = Logger.getLogger("com.foo");
	   public static void main(String[] args) {

	     // Set up a simple configuration that logs on the console.
	     BasicConfigurator.configure();

	     logger.info("Entering application.");
	     Bar bar = new Bar();
	     bar.doIt();
	     logger.info("Exiting application.");
	   }
}

$ vi com/bar/Bar.java

package com.bar;

import org.apache.log4j.Logger;

public class Bar {
	Logger logger=Logger.getLogger("com.bar");
	public void doIt() {
		logger.debug("Bar.doIt()");

	}

}

$ vi pom.xml

    	<dependency>
	    <groupId>log4j</groupId>
	    <artifactId>log4j</artifactId>
	    <version>1.2.17</version>
	</dependency>
 

$ mvn clean compile

/ run as appl	,

0 [main] INFO you.and.me  - Entering application.
1 [main] DEBUG com.bar  - Bar.doIt()
1 [main] INFO you.and.me  - Exiting application.


/ 7	. 

/ Nu met config file	,

/ noem config file log4j.properties	,

/ of noem hem zoals je wilt, my.txt	, maar dan moet je wel in MyApp2.java	,
   	InputStream inputStream=MyApp2.class.getResourceAsStream("/my.txt");
     	PropertyConfigurator.configure(inputStream);


/ In src/main/resources	,
$ vi my.txt

# Set root logger level to DEBUG and its only appender to A1.
log4j.rootLogger=DEBUG, A1

# A1 is set to be a ConsoleAppender.
log4j.appender.A1=org.apache.log4j.ConsoleAppender

# A1 uses PatternLayout.
log4j.appender.A1.layout=org.apache.log4j.PatternLayout
log4j.appender.A1.layout.ConversionPattern=%-4r [%t] %-5p %c %x - %m%n

/ In src/main/java	,
$ vi com/foo/MyApp2.java
...
   	static Logger logger = Logger.getLogger("com.foo");

	  Logger tmp= Logger.getRootLogger();
	  logger.info(tmp);

	  logger.info(tmp==logger);

	     logger.info("Entering application.");
	     Bar bar = new Bar();
	     bar.doIt();
	     logger.info("Exiting application.");

$ vi com/bar/Bar.java

	Logger logger=Logger.getLogger("com.bar");
	public void doIt() {
	logger.debug("Bar.doIt()");

$ vi log4j.properties

# Set root logger level to DEBUG and its only appender to MY.
log4j.rootLogger=WARN, MY


# MY is set to be a ConsoleAppender.
log4j.appender.MY=org.apache.log4j.ConsoleAppender

# MY uses PatternLayout.
log4j.appender.MY.layout=org.apache.log4j.PatternLayout
log4j.appender.MY.layout.ConversionPattern=%-4r [%t] %-5p %c %x - %m%n

log4j.logger.com.foo=DEBUG
log4j.logger.com.bar=DEBUG

/ we geven de root logger WARN	,
/ alle loggers, ook die in MyApp2, Bar staan, hebben deze dan ook, maar daarom doen we	,
log4j.logger.com.foo=DEBUG

/ we kunnen ook 	,
	     tmp.info("Entering application.");

/ maar we zullen dan niets zien	, omdat root logger WARN is	,

/ run appl	,

0    [main] INFO  com.foo  - org.apache.log4j.spi.RootLogger@65b6903f
1    [main] INFO  com.foo  - false
1    [main] INFO  com.foo  - Entering application.
2    [main] DEBUG com.bar  - Bar.doIt()
2    [main] INFO  com.foo  - Exiting application.


/ 7	.

/ Lees	,
///////////////////////////////////////////////////////////////
http://happygiraffe.net/blog/2008/09/03/logging-in-java/

/ die was ref in	,
http://stackoverflow.com/questions/23869207/what-is-the-significance-of-log4j-rootlogger-property-in-log4j-properties-file

/ 7	.

/ Lees	over de conversionpattern	,
https://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/PatternLayout.html

/ 13
log4j.appender.MY.layout.ConversionPattern=%-4r [%t] %-5p %c %x - %m%n
/ ->
1    [main] INFO  com.foo  - Entering application.

/ TODO (%x) 

/ 13	. 
log4j.appender.MY.layout.ConversionPattern=%d [%t] %-5p (%F:%L) - %m%n
/->
2015-01-07 17:02:44,717 [main] INFO  (MyApp2.java:29) - Entering application.




/ Einde LOG4J

/ HIBERNATE & EHCACHE

/ 

/ Einde HIBERNATE & EHCACHE

/ SLF4J 

/ Lees	,
http://www.slf4j.org/manual.html

/ we hebben proj myslf4j create	, 

/ 7	.

/ Lees	,
http://www.slf4j.org/manual.html

$ vi MyApp3.java

package com.foo;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MyApp3 {
	public static void main(String[] args) {
		Logger logger=LoggerFactory.getLogger("com.foo");
		logger.info("com.foo");
	}
}

$ vi pom.xml

 	<dependency>
	      <groupId>org.slf4j</groupId>
	      <artifactId>slf4j-api</artifactId>
	      <version>1.7.10</version>
	</dependency>

/ we zien	,
SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.

/ Dan 	,
$ vi pom.xml

	<dependency>
	      <groupId>org.slf4j</groupId>
	      <artifactId>slf4j-api</artifactId>
	      <version>1.7.10</version>
	</dependency>
	<dependency>
	    <groupId>org.slf4j</groupId>
	    <artifactId>slf4j-simple</artifactId>
	    <version>1.7.10</version>
	</dependency>

/ we zien	,
[main] INFO com.foo - com.foo

/ 7	.

/ nu niet slf4j-simple, maar slf4j-log4j12	,

$ vi pom.xml

	<dependency>
	    <groupId>org.slf4j</groupId>
	    <artifactId>slf4j-log4j12</artifactId>
	    <version>1.7.10</version>
	</dependency>

/ we hoeven geen dep op log4j12 of slf4j-api	, want die deps staan al in de pom van slf4j-log4j12	,

[eric@localhost repository]$ pwd
/home/eric/.m2/repository
[eric@localhost repository]$ vi org/slf4j/slf4j-log4j12/1.7.10/slf4j-log4j12-1.7.10.pom

  <parent>
    <groupId>org.slf4j</groupId>
    <artifactId>slf4j-parent</artifactId>
    <version>1.7.10</version>
  </parent>

  <dependencies>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
    </dependency>

    <dependency>
      <groupId>log4j</groupId>
      <artifactId>log4j</artifactId>
    </dependency>
  </dependencies>

[eric@localhost repository]$ vi org/slf4j/slf4j-parent/1.7.10/slf4j-parent-1.7.10.pom

  <version>1.7.10</version>

  <dependencyManagement>
    <dependencies>

      <dependency>
        <groupId>org.slf4j</groupId>
        <artifactId>slf4j-api</artifactId>
        <version>${project.version}</version>
      </dependency>

     <dependency>
        <groupId>log4j</groupId>
        <artifactId>log4j</artifactId>
        <version>${log4j.version}</version>
      </dependency>

/ we zien	,

0    [main] INFO  com.foo  - com.foo

/ 7	.

/ Omdat slf4j-log4j12 een dep heeft op log4j, gaan de MyApp2 en Bar uit mylog4j project OK	, 
/ We kunnen dus org.apache.log4j.Logger laten staan	, 
/ Maar we gaan het toch op de slf4j manier doen	,
/ we houden log4j.properties	,

$ vi MyApp2.java

package com.foo;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import com.bar.Bar;

public class MyApp2 {
	
	   static Logger logger = LoggerFactory.getLogger("com.foo");
	   public static void main(String[] args) {
	     
	  	Logger tmp= LoggerFactory.getLogger(Logger.ROOT_LOGGER_NAME);
	  	tmp.warn("root logger");

		  logger.info("Entering application.");
	     Bar bar = new Bar();
	     bar.doIt();
	     logger.info("Exiting application.");
	   }
}

$ vi Bar.java

package com.bar;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Bar {
	Logger logger=LoggerFactory.getLogger("com.bar");
	public void doIt() {
		logger.debug("Bar.doIt()");
	}
}

/ 7	. 

/ we use nu commons-logging	,

$ vi pom.xml

 	<dependency>
	    <groupId>commons-logging</groupId>
	    <artifactId>commons-logging</artifactId>
	    <version>1.2</version>
	</dependency>

/ we zien	,
[eric@localhost repository]$ pwd
/home/eric/.m2/repository
[eric@localhost repository]$ vi commons-logging/commons-logging/1.2/commons-logging-1.2.pom
  <dependencies>
    <dependency>
      <groupId>log4j</groupId>
      <artifactId>log4j</artifactId>
      <version>1.2.17</version>
      <optional>true</optional>
    </dependency>

/ Dus log4j dep hoeven we niet op te nemen in onze pom.xml	,

/ Met commons-logging we use Log, LogFactory, ipv Logger, LoggerFactory uit slf4j	,

$ vi MyApp3a.java

package com.foo;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

public class MyApp3a {
	public static void main(String[] args) {
		Log log=LogFactory.getLog("com.foo");
		log.info("com.foo");
	}
	
}

/ we zien	,
0    [main] INFO  com.foo  - com.foo

/ we maken ook MyApp2a.java en Bar2.java	,

$ vi MyApp2a.java

package com.foo;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import com.bar.Bar2;

public class MyApp2a {
	
	   static Log log = LogFactory.getLog("com.foo");
	   public static void main(String[] args) {
		  
//		  Log tmp=LogFactory.getLog(Log
//		  tmp.warn("root logger");

		log.info("Entering application.");
	     Bar2 bar2 = new Bar2();
	     bar2.doIt();
	     log.info("Exiting application.");
	   }
}

/ Hoe root logger met commons-logging	?
/ TODO

$ vi Bar2a.java

package com.bar;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

public class Bar2 {
	Log log=LogFactory.getLog("com.bar");
	public void doIt() {
		log.debug("Bar.doIt()");

	}
}

/ we zien	,
0    [main] INFO  com.foo  - Entering application.
1    [main] DEBUG com.bar  - Bar.doIt()
1    [main] INFO  com.foo  - Exiting application.








/ Einde SLF4J

/ MONTOR HIBERNATE

/ 7	. 

/ Lees	,
http://hibernate-jcons.sourceforge.net/

/ Lees	,
http://stackoverflow.com/questions/1839299/tool-for-monitoring-hibernate-cache-usage
->
 Publishing statistics through JMX
https://developer.jboss.org/wiki/PublishingStatisticsThroughJMX

/ Lees	,
http://www.kjkoster.org/zapcat/Hibernate_How_To.html


/ Einde MONTOR HIBERNATE

/ MONITOR EHCACHE 

/ 7	. 

/ we kunnen de 2c clear	,

/ in proj hibernate_xml_1_N_bidir_ehcache	,

		  	CacheManager.getInstance().clearAll();

/ 7	.

/ geef in eclipse 
monitor ehcache
N

https://cwiki.apache.org/confluence/display/SHINDIG/Monitoring+EhCache+with+JMX
->
http://ehcache.org/generated/2.9.0/html/ehc-all/#page/Ehcache_Documentation_Set/_ehcache_all.1.153.html
->
Monitoring and Management Using JMX
http://ehcache.org/generated/2.9.0/html/ehc-all/#page/Ehcache_Documentation_Set%2Fto-jmx_management_and_monitoring.html%23wwconnect_header

/ we zien	,
[eric@localhost repository]$ jar tvf net/sf/ehcache/ehcache-core/2.6.9/ehcache-core-2.6.9.jar  | grep MBean
   559 Wed Apr 23 12:48:20 CEST 2014 net/sf/ehcache/management/CacheMBean.class
   894 Wed Apr 23 12:48:20 CEST 2014 net/sf/ehcache/management/CacheStatisticsMBean.class
  1037 Wed Apr 23 12:48:20 CEST 2014 net/sf/ehcache/management/provider/MBeanRegistrationProviderImpl$1.class
   493 Wed Apr 23 12:48:18 CEST 2014 net/sf/ehcache/management/provider/MBeanRegistrationProvider.class
   326 Wed Apr 23 12:48:18 CEST 2014 net/sf/ehcache/management/provider/MBeanRegistrationProviderFactory.class
  1074 Wed Apr 23 12:48:20 CEST 2014 net/sf/ehcache/management/provider/NullMBeanRegistrationProvider.class
  3327 Wed Apr 23 12:48:20 CEST 2014 net/sf/ehcache/management/provider/MBeanRegistrationProviderImpl.class
  1020 Wed Apr 23 12:48:20 CEST 2014 net/sf/ehcache/management/provider/MBeanRegistrationProviderFactoryImpl.class
   638 Wed Apr 23 12:48:18 CEST 2014 net/sf/ehcache/management/provider/MBeanRegistrationProviderException.class
  8893 Wed Apr 23 12:48:20 CEST 2014 net/sf/ehcache/management/sampled/SampledMBeanRegistrationProvider.class
   905 Wed Apr 23 12:48:20 CEST 2014 net/sf/ehcache/management/sampled/SampledCacheMBean.class
   602 Wed Apr 23 12:48:20 CEST 2014 net/sf/ehcache/management/sampled/SampledCacheManagerMBean.class
  2677 Wed Apr 23 12:48:20 CEST 2014 net/sf/ehcache/management/sampled/SampledEhcacheMBeans.class
  1471 Wed Apr 23 12:48:20 CEST 2014 net/sf/ehcache/management/CacheConfigurationMBean.class
   593 Wed Apr 23 12:48:20 CEST 2014 net/sf/ehcache/management/CacheManagerMBean.class
  4939 Wed Apr 23 12:48:18 CEST 2014 net/sf/ehcache/hibernate/management/impl/EhcacheHibernateMBeanRegistrationImpl.class
  5110 Wed Apr 23 12:48:18 CEST 2014 net/sf/ehcache/hibernate/management/impl/ProviderMBeanRegistrationHelper$RegisterMBeansTask.class
   411 Wed Apr 23 12:48:18 CEST 2014 net/sf/ehcache/hibernate/management/impl/EhcacheHibernateMBeanRegistration.class
  3089 Wed Apr 23 12:48:18 CEST 2014 net/sf/ehcache/hibernate/management/impl/ProviderMBeanRegistrationHelper.class
   332 Wed Apr 23 12:48:18 CEST 2014 net/sf/ehcache/hibernate/management/api/EhcacheHibernateMBean.class

/ er is ook	,
http://ehcache.org/documentation/2.7/operations/jmx

/ er is ook	,
http://khushroomistry.wordpress.com/2013/09/24/monitoring-ehcache-spring/

/ Einde MONITOR EHCACHE 

/ CACHE STRATEGIES

abstract class AbstractEhcacheAccessStrategy<T extends EhcacheTransactionalDataRegion> {

abstract class AbstractReadWriteEhcacheAccessStrategy<T extends EhcacheTransactionalDataRegion> extends AbstractEhcacheAccessStrategy<T> {

/ 13	.

public class ReadOnlyEhcacheEntityRegionAccessStrategy extends AbstractEhcacheAccessStrategy<EhcacheEntityRegion> implements EntityRegionAccessStrategy {


        public Object get(Object key, long txTimestamp) throws CacheException {
                return region().get( key );
        }

       public boolean putFromLoad(Object key, Object value, long txTimestamp, Object version, boolean minimalPutOverride)throws CacheException {
                if ( minimalPutOverride && region().contains( key ) ) {
                        return false;
                }
                else {
                        region().put( key, value );
                        return true;

        public SoftLock lockItem(Object key, Object version) throws UnsupportedOperationException {
                return null;

         * A no-op since this cache is read-only
         */
        public void unlockItem(Object key, SoftLock lock) throws CacheException {
                evict( key );

      public boolean afterInsert(Object key, Object value, Object version) throws CacheException {
                region().put( key, value );
                return true;
        }

        public boolean afterUpdate(Object key, Object value, Object currentVersion, Object previousVersion, SoftLock lock)
                        throws UnsupportedOperationException {
                throw new UnsupportedOperationException( "Can't write to a readonly object" );

/ 13	.

public class ReadOnlyEhcacheCollectionRegionAccessStrategy extends AbstractEhcacheAccessStrategy<EhcacheCollectionRegion> implements CollectionRegionAccessStrategy {

/ See read only entity	, maar geen afterInsert, afterUpdate	, 

/ 13	.

org/hibernate/cache/ehcache/internal/strategy/NonStrictReadWriteEhcacheEntityRegionAccessStrategy extends AbstractEhcacheAccessStrategy<EhcacheEntityRegion>

       public Object get(Object key, long txTimestamp) throws CacheException {
                return region().get( key );
       }

       public boolean putFromLoad(Object key, Object value, long txTimestamp, Object version, boolean minimalPutOverride) throws CacheException {
                if ( minimalPutOverride && region().contains( key ) ) {
                        return false;
                }
                else {
                        region().put( key, value );
                        return true;
                }
        }
       public SoftLock lockItem(Object key, Object version) throws CacheException {
                return null;
        }

       public void unlockItem(Object key, SoftLock lock) throws CacheException {
                region().remove( key );
        }
       public boolean afterInsert(Object key, Object value, Object version) throws CacheException {
                return false;
	}

          public boolean update(Object key, Object value, Object currentVersion, Object previousVersion)
                        throws CacheException {
                remove( key );
                return false;
        }
        public boolean afterUpdate(Object key, Object value, Object currentVersion, Object previousVersion, SoftLock lock)
                        throws CacheException {
                unlockItem( key, lock );
                return false;
        }

        public void remove(Object key) throws CacheException {
                region().remove( key );
        }

/ 13	.

public class ReadWriteEhcacheEntityRegionAccessStrategy extends AbstractReadWriteEhcacheAccessStrategy<EhcacheEntityRegion> implements EntityRegionAccessStrategy {

         * Inserts will only succeed if there is no existing value mapped to this key.
         */
        public boolean afterInsert(Object key, Object value, Object version) throws CacheException {
                        final Lockable item = (Lockable) region().get( key );
                        if ( item == null ) {
                                region().put( key, new Item( value, version, region().nextTimestamp() ) );
                                return true;
                        }
                        else {
                                return false;
                        }

         * Updates will only succeed if this entry was locked by this transaction and exclusively this transaction for the
         * duration of this transaction.  It is important to also note that updates will fail if the soft-lock expired during
         * the course of this transaction.
         */
//////////////////////////
this entry was locked by this transaction: dat was bij ons nooit, want wij wilden een disassembled state uit een obj (uit 1ste session) overwrite in de 2de session met disassembled state uit de db	, en die update was in de 2de tx , een andere als de 1ste	,  

        public boolean afterUpdate(Object key, Object value, Object currentVersion, Object previousVersion, SoftLock lock) throws CacheException {
                        final Lockable item = (Lockable) region().get( key );

                        if ( item != null && item.isUnlockable( lock ) ) {
                                final Lock lockItem = (Lock) item;
                                if ( lockItem.wasLockedConcurrently() ) {
                                        decrementLock( key, lockItem );
                                        return false;
                                }
                                else {
                                        region().put( key, new Item( value, currentVersion, region().nextTimestamp() ) );
                                        return true;
                                }
  
$ vi ./org/hibernate/cache/ehcache/internal/strategy/AbstractReadWriteEhcacheAccessStrategy.java

         * Returns <code>null</code> if the item is not readable.  Locked items are not readable, nor are items created
         * after the start of this transaction.
         */
        public final Object get(Object key, long txTimestamp) throws CacheException {
                        final Lockable item = (Lockable) region().get( key );

                        final boolean readable = item != null && item.isReadable( txTimestamp );
                        if ( readable ) {
                                return item.getValue();
                        }
                        else {
                                return null;

        * Returns <code>false</code> and fails to put the value if there is an existing un-writeable item mapped to this
         * key.
         public final boolean putFromLoad( Object key, Object value, long txTimestamp, Object version, boolean minimalPutOverride) throws CacheException {
                        final Lockable item = (Lockable) region().get( key );
                        final boolean writeable = item == null || item.isWriteable( txTimestamp, version, versionComparator );
                        if ( writeable ) {
                                region().put( key, new Item( value, version, region().nextTimestamp() ) );
                                return true;
                        }
                        else {
                                return false;

       /**
         * Soft-lock a cache item.
         */
        public final SoftLock lockItem(Object key, Object version) throws CacheException {
                        final Lockable item = (Lockable) region().get( key );
                        final long timeout = region().nextTimestamp() + region().getTimeout();
                        final Lock lock = (item == null) ? new Lock( timeout, uuid, nextLockId(), version ) : item.lock(
                                        timeout,
                                        uuid,
                                        nextLockId()
                        );
                        region().put( key, lock );
                        return lock;

      public final void unlockItem(Object key, SoftLock lock) throws CacheException {
                        final Lockable item = (Lockable) region().get( key );

                        if ( (item != null) && item.isUnlockable( lock ) ) {
                                decrementLock( key, (Lock) item );
                        }
                        else {
                                handleLockExpiry( key, item );
                        }

public class ReadWriteEhcacheCollectionRegionAccessStrategy extends AbstractReadWriteEhcacheAccessStrategy<EhcacheCollectionRegion>

/ Einde CACHE STRATEGIES

/ HIBERNATE MAPPINGS

/ 7	.

/ 1-N bidir	,

/ 13	,

/ Address	,

	<set
 		name="employees"
 		inverse="false"
 	>
 		<key
 			column="address_"
 			not-null="true"
 		/></key>
 		<one-to-many class="Employee"/>
 	</set>

/ Employee	,

	<many-to-one 
		name="address"
		column="address_"
		not-null="false"
		insert="false"
		update="false"
	>
	</many-to-one>

/ 13	,

/ of	,

/ Address	,

	<set
 		name="employees"
 		inverse="false"
 	>
 		<key
 			column="address_"
 		></key>
 		<one-to-many class="Employee"/>
 	</set>

/ Employee	,

	<many-to-one 
		name="address"
		column="address_"
		not-null="false"
	>
	</many-to-one>

/ Als we in Address <key not-null="true"> 	, dan moeten we in Employee <many-to-one insert="false" update="false"> 
/ Als we in Address NIET <key not-null="true"> 	, dan moeten we in Employee NIET <many-to-one insert="false" update="false"> 
/ TODO

/ Intermezzo

/ WHICH SIDE PERSIST ASSOCIATION FK

/ 13	.

/ als <set inverse="false" ...>	, dan wordt de employee aan de coll add, doordat 
	update employee set address_=? where id=?
/ en op de 1ste ? komt coll.keyOfOwner() 	,

/ dus 
<set inverse="false" ...>
/ betekent dat de coll met de fk aan moet komen	, dus moeten we	,
	a12.getEmployees().add(e1)
/ want dan kan hij .keyOfOwner() doen	,

/ als <set inverse="true" ...>	, dan moet Employee met de fk aankomen	, dus moeten we	,
	e1.setAddress(a12)

/ 13	. 

/ als
<set inverse="false" ...>
	<key not-null="true">
/ dan moet er een fk komen: hij weet niet of de andere kant het al dan niet doet	, dus we kunnen dan met update="false" de update query cancel	,
	<key not-null="true" update="false">
/ TODO
	 

/ 13	.

/ Welke kant persist de fk	, dus welke kant bepaalt in welke coll een Employee zit?

/ als de fk van employee 12 is, zit na .get(a12) en .iterator e1 in de coll van a12	, omdat de fk van e1 zo staat: dat is de coll query	,

OneToManyPersister(AbstractCollectionPersister).recreate(PersistentCollection, Serializable, SessionImplementor) line: 1253	
		if ( !isInverse && isRowInsertEnabled() ) {
/s
    protected boolean isRowInsertEnabled() {
		return keyIsUpdateable;

/ Address 
	<set ...>
 		<key
 			column="address_"
 			not-null="false"
 			update="false"
 		/>
/ als we update="false", dan is in de coll persister keyIsUpdateable=false	, 

/ als we doen	,
	e1.a=a34
	a12.add(e1)
/ en de key is updatable,	 dan wordt 
	update employee set address_=12 where id_=1
/ en daardoor zal in volgende sessie e1 in de coll van a12	,  omdat de fk van employee, id_=1  12 is	, dus daarom heet persister.keyIsUpdateable isRowInsertEnabled()	,

/ Einde Intermezzo

/ Intermezzo

/ WHICH SIDE PERSIST ASSOCIATION FK

/ 13	.

<set ...>
	<key not-null="true">

/ Als we not-null="true", dan moet deze een key maken	, dat staat er , dus verschint er een extra prop in Employee	, de Long 	, met wat de fk moet worden	,

/ 13	.

/ Als we 
/ Address
<set inverse="false">
	<key not-null="true">

/ dan komt er dus een extra prop in Employee	, en moeten we dus de Employee.address overslaan	,  dus moet daar staan: insert="false"	,
	<many-to-one 
		name="address"
		column="address_"
		not-null="true"
		insert="false"
		update="true"

/ Einde Intermezzo

/ 13	.

///////////////////////////////

/ Address	,
	<set
 		name="employees"
 		inverse="false"
 	>
 		<key
 			column="address_"
 			not-null="false/true"
 			update="true"      
 		/>
 		<one-to-many class="Employee"/>
 	</set>

/ Employee	,
	<many-to-one 
		name="address"
		column="address_"
		not-null="true"
		insert="false"
		update="false"			/ Moet voor <set ...><key not-null="true">	, see hieronder voor betekenis 

	/>

/ Main	,
			Employee employee=new Employee(1l,"Foo1",1.00);
			Employee employee2=new Employee(2l,"Foo2",2.00);
			Address address=new Address(12l,"foostreet", "12 foo", "FooCity12");
			Address address3=new Address(34l,"foostreet", "34 foo", "FooCity34");
			
			employee.setAddress(address3);
			employee2.setAddress(address3);
			address.getEmployees().add(employee);
			address.getEmployees().add(employee2);

			session.save(address); 
			session.save(address3);
			session.save(employee);
			session.save(employee2);
			
			tx.commit();

/ dan krijgen we bij <set inverse="false><key not-null="false"> een op .commit een PSQL ERR, omdat we een null insert , omdat we <many-to-one insert="false" ....> en daardoor slaat persist.insert deze over	, ook al is hij er wel	, 	
/ maar als we <key not-null="true" , dan is er een extra prop en omdat <many-to-one insert="false" ...> slaat persist.insert hem over	, en pakt hij de extra prop van Employee	,  

/ 13	. 

/ <many-to-one update="false"> 

/ dan wordt een update van de fk niet gedaan	,
<set inverse="false"><key not-null="true"> eist <many-to-one update="false"> , WH omdat de <many-to-one ...> daarna geen update mag doen van de fk, die de coll side zojuist heeft insert	, want er wordt alleen een insert gedaan en daarom <many-to-one insert="false">	, dus de <many-to-one ...>-fk wordt overgeslagen	, 

/ Address	,
	<set
 		name="employees"
 		inverse="true"
 	>
 		<key
 			column="address_"
 			not-null="true"
 			update="true"      
 		/>
 		<one-to-many class="Employee"/>
 	</set>

/ Employee	,
	<many-to-one 
		name="address"
		column="address_"
		not-null="true"
		insert="true"
		update="false"

	/>

/ Main	,
			Employee employee=new Employee(1l,"Foo1",1.00);
			Employee employee2=new Employee(2l,"Foo2",2.00);
			Address address=new Address(12l,"foostreet", "12 foo", "FooCity12");
			Address address3=new Address(34l,"foostreet", "34 foo", "FooCity34");
			
			employee.setAddress(address3);
			employee2.setAddress(address3);
			address.getEmployees().add(employee);
			address.getEmployees().add(employee2);

			session.save(address); 
			session.save(address3);
			session.save(employee);
			session.save(employee2);
			
			employee.setAddress(address);		/ update fk	, maar het gebeurt niet	, want <many-to-one update="false">
			
		  	printStats(stats);
			tx.commit();

/ als <many-to-one update="false"> gaat de update van de fk niet door	, er volgt dus NIET	,
update employee set ... address_=? where id_=? 

/ want	,
SingleTableEntityPersister(AbstractEntityPersister).update(Serializable, Object[], int[], boolean, Object[], Object, Object, Object, SessionImplementor) line: 3470	
		final boolean[] tableUpdateNeeded = getTableUpdateNeeded( dirtyFields, hasDirtyCollection );
/ [false]
/ want	,
/s
SingleTableEntityPersister(AbstractEntityPersister).getTableUpdateNeeded(int[], boolean) line: 484	
			boolean[] updateability = getPropertyUpdateability();
[true,trrue,false]
			int[] propertyTableNumbers = getPropertyTableNumbers();
[0,0,0]
			boolean[] tableUpdateNeeded = new boolean[ getTableSpan() ];
/ init met [false]
			for ( int i = 0; i < dirtyProperties.length; i++ ) {
/ dirtyProperties=[2]
				int property = dirtyProperties[i];
				int table = propertyTableNumbers[property];
				tableUpdateNeeded[table] = tableUpdateNeeded[table] ||
						( getPropertyColumnSpan(property) > 0 && updateability[property] );
/ blijft false	,
			}

/t
SingleTableEntityPersister(AbstractEntityPersister).update(Serializable, Object[], int[], boolean, Object[], Object, Object, Object, SessionImplementor) line: 3524	


		for ( int j = 0; j < span; j++ ) {
			// Now update only the tables with dirty properties (and the table with the version number)
			if ( tableUpdateNeeded[j] ) {
/ NEE
				updateOrInsert(
						id,
						fields,
						oldFields,
						j == 0 ? rowId : null,
						propsToUpdate,
						j,
						oldVersion,
						object,
						updateStrings[j],
						session
					);
/ NIET

/ 13	. 

/ Address	,
	<set
 		name="employees"
 		inverse="false"
 	>
 		<key
 			column="address_"
 			not-null="false"
 			update="true/false"      
 		/>
 		<one-to-many class="Employee"/>
 	</set>

/ Employee	,
	<many-to-one 
		name="address"
		column="address_"
		not-null="false"
		insert="true"
		update="true"
	/>

/ Main	,		  
			Employee employee=new Employee(1l,"Foo1",1.00);
			Employee employee2=new Employee(2l,"Foo2",2.00);
			Address address=new Address(12l,"foostreet", "12 foo", "FooCity12");
			Address address3=new Address(34l,"foostreet", "34 foo", "FooCity34");
			
//			employee.setAddress(address3);
//			employee2.setAddress(address3);
			address.getEmployees().add(employee);
			address.getEmployees().add(employee2);

			session.save(address); 
			session.save(address3);
			session.save(employee);
			session.save(employee2);
			
			tx.commit();

/ we hebben <many-to-one insert="true"> dus persist.insert zal de entityinsertactions geven fk=null	, 

/ 13	. 

/ Address
	<set
 		name="employees"
 		inverse="false"
 	>
 		<key
 			column="address_"
 			not-null="true"
 			update="true"      
 		/>
 		<one-to-many class="Employee"/>
 	</set>

/ Employee	,
	<many-to-one 
		name="address"
		column="address_"
		not-null="false"
		insert="false"
		update="false"

	/>

/ the employee tbl column address_ has NO constrained not-null	,

/ 13	.

/ we zien dat in feite alleen appl data -> 2c, NIET 2c <- db	,

/ in hibernate_xml_1_N_bidir_ehcache	,

/ in 1st session	,

/ afterInsert, afterUpdate 
/ insertentityaction.execute schedules 2c-entry	,
/ updateentityaction.execute writes lock in 2c	, and schedules 2c-entry	,
/ collrecreateaction doets niets met 2c	,
/ na tx: insertentityaction , als lock is set door updateentityaction.execute	, dan doet afterInsert niets	, alleen als current item==null, dan put
/ na tx: updateentityaction	, de lock is set door updateentityaction.execute	in deze tx, dus OK, dus afterUpdate  puts	,
/ na tx: cleanupaction, lock wordt unlocked	,

/ in 2de session	,

/ coll query	, 
/ putFromLoad op entities: doet NIETS, want alleen als current item==null, of isWritable	, dan put	,
/ putFromLoad op coll: doet OK, want alleen als current item==null, of isWritable	, dan put	, en er nu een lock, van vorige tx, maar hij was unlocked	, 
/ maar als de entities dirty zijn	, dan net als in 1ste session	, updateentityaction.execute sets lock (in deze tx)	, dus RM de vorige entity 	,  
 
/ Maar met nonstrict-read-write gaat het OK	, we hoven employees niet dirty te maken	,

/ Maar dit is de oplossing niet	,

  	<set
 		name="employees"
 		inverse="false"
 		>
 		<cache usage="read-write"/>	
 		<key
 			column="address_"
 			not-null="true"
 		></key>
 		<one-to-many class="Employee"/>
 	</set>

	<many-to-one 
		name="address"
		column="address_"
		not-null="true"
		insert="false"
		update="false"
	></many-to-one>

/ 1ste session	,
			Employee employee=new Employee(1l,"Foo1",1.00);
			Employee employee2=new Employee(2l,"Foo2",2.00);
			Address address=new Address(12l,"foostreet", "12 foo", "FooCity12");
			Address address3=new Address(34l,"foostreet", "34 foo", "FooCity34");

			address3.getEmployees().add(employee);
			address3.getEmployees().add(employee2);
			
			session.save(address);
			session.save(address3);
			session.save(employee);
			session.save(employee2);
			
			tx.commit();

/ 2de session	,

	        address=(Address)session.get(Address.class, 34l);
	        Set<Employee>employees=address.getEmployees();
	        Iterator<Employee>iterator=employees.iterator();
	        while(iterator.hasNext()){
	        	Employee e=iterator.next();
	        	e.setName(e.getName()+"A");
	        	String s=e.getName();
	        	boolean b=false;
	        }

/ 3de session	,

	        address=(Address)session.get(Address.class, 34l);
	        printStats( stats); 
	        employees=address.getEmployees();
	        iterator=employees.iterator();
	        while(iterator.hasNext()){
	        	Employee e=iterator.next();
/ e.address!=34	,
/ als we NIET	, 
	        	e.setName(e.getName()+"A");
/ dan is 
/ e.address==null	,
 
/ 13	.

/ in M_N_bidir_ehcache	,

/ Address	,
	<set
 		name="employees"
 		inverse="false"
 	>
 		<key
 			column="address_"
 			not-null="false"
 			update="true"      
 		/>
 		<one-to-many class="Employee"/>
 	</set>

/ Employee	,
	<many-to-one 
		name="address"
		column="address_"
		not-null="false"
		insert="true"
		update="true"

	/>

/ Main	,
		  	Employee employee4=new Employee(4l, "foostreet", 4.0);
		  	session.save(employee4);
		  	address3=(Address)session.get(Address.class, 34l);
		  	//employee4.setAddress(address3);
		  	address3.getEmployees().add(employee4); 
/ .add calls .dirty()	, dus de coll is dirty	,
		  	employee2=(Employee)session.get(Employee.class, 2l);
		  	address3.getEmployees().remove(employee2);
/ ook calls .dirty()
					  	
/ Als deze coll updates leiden tot 1 CollectionUpdateAction	, na .doSetUpdate
/ Daarom zien we straks	,
			persister.deleteRows( collection, id, session );
			persister.updateRows( collection, id, session );
			persister.insertRows( collection, id, session );


/ na commit	,
foo=> select*from employee;
 id_ | name_ | salary_ | address_ 
-----+-------+---------+----------
   1 | Foo1  |       1 |       34
   2 | Foo2  |       2 |         
   4 | Foo4  |       4 |       34
(3 rows)

	        	tx.commit();    
/s
flushEntities
/s
	DefaultFlushEntityEventListener.onFlushEntity(FlushEntityEvent) line: 172	
/ address3 is niet dirty	,
/ FlushVisitor.processEntityPropertyValues 
/s
		Collections.prepareCollectionForUpdate(PersistentCollection, CollectionEntry, SessionFactoryImplementor) line: 264	
			else if ( collection.isDirty() ) {
				// the collection's elements have changed
				entry.setDoupdate( true );
/t
flushCollections	,
			if ( ce.isDoupdate() ) {
				session.getInterceptor().onCollectionUpdate( coll, ce.getLoadedKey() );
				actionQueue.addAction(
						new CollectionUpdateAction(
/t
performExecutions	,
	prepare 
		prepareActions( collectionRemovals );
		prepareActions( collectionUpdates );
		prepareActions( collectionCreations );
		prepareActions( collectionQueuedOps );

CollectionUpdateAction.beforeExecutions	, coll-region:coll-cache key={role: employees, key=34l} new Lock	, RM de coll {1l,2l} die er zat	,
//////////////////////////////////////////////////////////////////////
/ Als we 2 keer .iterator	, is er geen CollectionUpdateAction	, dat is alleen als de role of key verandert	, 
/ Ook als we een coll create	, (TODO)	,
/ MORGEN
               this.versionComparator = region.getCacheDataDescription().getVersionComparator();
 / MORGEN

	execute
CollectionUpdateAction.execute
			persister.deleteRows( collection, id, session );
/s
		if ( !isInverse && isRowDeleteEnabled() ) {
/s
    protected boolean isRowDeleteEnabled() {
		return keyIsUpdateable && keyIsNullable;
true 
/ want <set inverse="false"><key not-null="false" update="true">
/ keyIsUpdateable=true
/ keyIsNullable=false/true
/ persister=OneToManyPersister	,

/ Als de key nullable is , kun je de entity rm van de coll	, dat is logisch	,

/t
/s
OneToManyPersister(AbstractCollectionPersister).deleteRows(PersistentCollection, Serializable, SessionImplementor) line: 1378	
				// delete all the deleted entries
				Iterator deletes = collection.getDeletes( this, !deleteByIndex );
/s
PersistentSet.getDeletes(CollectionPersister, boolean) line: 380	
		final java.util.Map sn = (java.util.Map) getSnapshot();
		final ArrayList deletes = new ArrayList( sn.size() );
		Iterator itr = sn.keySet().iterator();
		while ( itr.hasNext() ) {
			final Object test = itr.next();
			if ( !set.contains( test ) ) {
				// the element has been removed from the set
				deletes.add( test );
/ test=e2 bij ons	,

		final Type elementType = persister.getElementType();
		itr = set.iterator();
		while ( itr.hasNext() ) {
			final Object test = itr.next();
			final Object oldValue = sn.get( test );
			if ( oldValue!=null && elementType.isDirty( test, oldValue, getSession() ) ) {
				// the element has changed
				deletes.add( oldValue );
/ TODO

/t
OneToManyPersister(AbstractCollectionPersister).deleteRows(PersistentCollection, Serializable, SessionImplementor) line: 1381	
				// delete all the deleted entries
				Iterator deletes = collection.getDeletes( this, !deleteByIndex );
/d
					while ( deletes.hasNext() ) {
...
/ we zien	,
Hibernate: update employee set address_=null where address_=? and id_=?
HibernateLog --> 11:30:43 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [34]
HibernateLog --> 11:30:46 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [2]

/t
			persister.updateRows( collection, id, session );
/s
		if ( !isInverse && collection.isRowUpdatePossible() ) {
/s
	public boolean isRowUpdatePossible() {
		return false;

/t
			persister.insertRows( collection, id, session );
/s
		if ( !isInverse && isRowInsertEnabled() ) {
/s
    protected boolean isRowInsertEnabled() {
		return keyIsUpdateable;
/ keyIsUpdateable=true

				Iterator entries = collection.entries( this );
				String sql = getSQLInsertRowString();
				while ( entries.hasNext() ) {
					if ( collection.needsInserting( entry, i, elementType ) ) {
/ JA voor entty=employee(4)	,
/ kijkt in collection.snapShot	,
		final Object oldValue = ( (java.util.Map) getSnapshot() ).get( entry );
		return oldValue == null || elemType.isDirty( oldValue, entry, getSession() );
oldValue=null	,
/t
/ we zien	,
Hibernate: update employee set address_=? where id_=?
HibernateLog --> 16:48:52 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [34]
HibernateLog --> 16:51:30 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [4]

/ we zijn nu in Doupdate -> CollectionUpdateAction.execute	, maar Dorecreate -> CollectionInsertAction doet deze laatste ook	,

/ Intermezzo

/ EXECUTABLELISTS

/ ActionQueue.class	,

		// Important: these lists are in execution order
		List<ExecutableList<?>> tmp = new ArrayList<ExecutableList<?>>( 7 );
		tmp.add( orphanRemovals );
		tmp.add( insertions );
		tmp.add( updates );
		// do before actions are handled in the other collection queues
		tmp.add( collectionQueuedOps );
		tmp.add( collectionRemovals );
		tmp.add( collectionUpdates );
		tmp.add( collectionCreations );
		tmp.add( deletions );

		executableLists = Collections.unmodifiableList( tmp );


/ Einde Intermezzo


/ 13	.
/ DEMO

/ We doen hetzelfde als hierboven	, maar  nu met .clear erachter	,

/ in M_N_bidir_ehcache	,

/ Address	,
	<set
 		name="employees"
 		inverse="false"
 	>
 		<key
 			column="address_"
 			not-null="false"
 			update="true"      
 		/>
 		<one-to-many class="Employee"/>
 	</set>

/ Employee	,
	<many-to-one 
		name="address"
		column="address_"
		not-null="false"
		insert="true"
		update="true"

	/>

/ Main	,
		  	Employee employee4=new Employee(4l, "foostreet", 4.0);
		  	session.save(employee4);
		  	address3=(Address)session.get(Address.class, 34l);
		  	//employee4.setAddress(address3);
		  	address3.getEmployees().add(employee4); 
/ .add calls .dirty()	, dus de coll is dirty	,
		  	employee2=(Employee)session.get(Employee.class, 2l);
		  	address3.getEmployees().remove(employee2);
/ ook calls .dirty()
		  	
		  	address3.getEmployees().clear();
/ calls set.clear(); dirty()

/ Als deze coll updates leiden tot 1 CollectionUpdateAction	, na .doSetUpdate



/ we zien	,
foo=> select*from employee;
 id_ | name_ | salary_ | address_ 
-----+-------+---------+----------
   4 | Foo4  |       4 |         
   2 | Foo2  |       2 |         
   1 | Foo1  |       1 |         
(3 rows)

/ De insertions komen eerst (rij 1)	, en daarna de collectionUpdates (5)	,


	        tx.commit();    
/s
FlushVisitor(AbstractVisitor).processValue(Object, Type) line: 121	
			return processCollection( value, (CollectionType) type );
/s
			Collections.processReachableCollection( coll, type, owner, getSession() );
/s
Collections.processReachableCollection(PersistentCollection, CollectionType, Object, SessionImplementor) line: 209	

		// The CollectionEntry.isReached() stuff is just to detect any silly users
		// who set up circular or shared references between/to collections.
		if ( ce.isReached() ) {
/ NEE
			// We've been here before
			throw new HibernateException(
					"Found shared references to a collection: " + type.getRole()
			);
/ NIET
		}
		ce.setReached( true );

		ce.setCurrentPersister( persister );
		ce.setCurrentKey( type.getKeyOfOwner( entity, session ) );

		prepareCollectionForUpdate( collection, ce, factory );
/s
Collections.prepareCollectionForUpdate(PersistentCollection, CollectionEntry, SessionFactoryImplementor) line: 264	
		if ( loadedPersister != null || currentPersister != null ) {
/ NEE
			else if ( collection.isDirty() ) {
/ JA
				// the collection's elements have changed
				entry.setDoupdate( true );

/t
DefaultFlushEventListener(AbstractFlushingEventListener).flushCollections(EventSource, PersistenceContext) line: 296	

		for ( Map.Entry<PersistentCollection,CollectionEntry> me : entries ) {
			CollectionEntry ce = me.getValue();
			if ( !ce.isReached() && !ce.isIgnore() ) {
/ NEE

			if ( ce.isDoupdate() ) {
				session.getInterceptor().onCollectionUpdate( coll, ce.getLoadedKey() );
				actionQueue.addAction(
						new CollectionUpdateAction(
								coll,
								ce.getLoadedPersister(),
								ce.getLoadedKey(),
								ce.isSnapshotEmpty(coll),
								session
							)
					);
			}


/s
DefaultFlushEventListener(AbstractFlushingEventListener).performExecutions(EventSource) line: 350	
/s
CollectionUpdateAction.execute() line: 84	

		else if ( !affectedByFilters && collection.empty() ) {
/////////////////////////
/ Door coll.clear()
			if ( !emptySnapshot ) {
				persister.remove( id, session );

/ CollectionRemoveAction.execute doet dit ook	, 
/ TODO	

OneToManyPersister(AbstractCollectionPersister).remove(Serializable, SessionImplementor) line: 1171	
		else {
/ NIET
			persister.deleteRows( collection, id, session );
			persister.updateRows( collection, id, session );
			persister.insertRows( collection, id, session );
		}


/ Hierboven waren we in persister.deleteRows	, die is er naast prog	, dat is als je een of meerdere items uit de list hebt .remove	,

/s
OneToManyPersister(AbstractCollectionPersister).remove(Serializable, SessionImplementor) line: 1211	

		if ( !isInverse && isRowDeleteEnabled() ) {
/=
		return keyIsUpdateable && keyIsNullable;
true
...
/ we zien	,
Hibernate: update employee set address_=null where address_=?
HibernateLog --> 12:16:12 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [34]


/ Bij .remove(e2) zagen	 we	,
Hibernate: update employee set address_=null where address_=? and id_=?
HibernateLog --> 11:30:43 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [34]
HibernateLog --> 11:30:46 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [2]

/ 13	.

/ We doen hetzelfde als hierboven	, maar  nu met coll=null	, 

/ in M_N_bidir_ehcache	,

/ Address	,
	<set
 		name="employees"
 		inverse="false"
 	>
 		<key
 			column="address_"
 			not-null="false"
 			update="true"      
 		/>
 		<one-to-many class="Employee"/>
 	</set>

/ Employee	,
	<many-to-one 
		name="address"
		column="address_"
		not-null="false"
		insert="true"
		update="true"

	/>

/ Main	,
		  	Employee employee4=new Employee(4l, "foostreet", 4.0);
		  	session.save(employee4);
		  	address3=(Address)session.get(Address.class, 34l);
		  	//employee4.setAddress(address3);
		  	address3.getEmployees().add(employee4); 
/ .add calls .dirty()	, dus de coll is dirty	,
		  	employee2=(Employee)session.get(Employee.class, 2l);
		  	address3.getEmployees().remove(employee2);
/ ook calls .dirty()
		  	
		  	address3.getEmployees().clear();
		  	address3.setEmployees(null);
	        	tx.commit();       

/s
FlushVisitor(AbstractVisitor).processValue(Object, Type) line: 121	
		if ( type.isCollectionType() ) {
			//even process null collections
			return processCollection( value, (CollectionType) type );
/ Doet NIETS	,
/s
		if (collection!=null) {
/ NEE
			Collections.processReachableCollection( coll, type, owner, getSession() );
/ NIET
/ We zien hieronder dat .setDoremove wel wordt set	, maar onder flushCollections	, ook wordt deze meteen process	, zoals altijd daar	,

 
/s
FlushVisitor.processCollection(Object, CollectionType) line: 62	

		if (collection!=null) {
/ NEE
				coll = (PersistentCollection) collection;
			}

			Collections.processReachableCollection( coll, type, owner, getSession() );
/ NIET
/ Dus Geen CollectionUpdateAction	, zoals bij .clear()	,

/ In de coll entry is reached==false	, WH de default	, want hierboven bij .clear() en eig. altijd wordt .setReached(true) 	,
/ Omdat reached==false, komt er een CollectionRemoveAction, en geen CollectionUpdateAction	,
/////////////////////////////////////////////////
	
/s
DefaultFlushEventListener(AbstractFlushingEventListener).flushEverythingToExecutions(FlushEvent) line: 103	
			int entityCount = flushEntities( event, persistenceContext );
/d

/ we zien in 1c dat de coll entry en entity entry een PersistentSet met een lege set (HashSet)	, omdat .clear() dat doet	,  en dat in de entity de coll==null	,

			int collectionCount = flushCollections( session, persistenceContext );
/s
DefaultFlushEventListener(AbstractFlushingEventListener).flushCollections(EventSource, PersistenceContext) line: 258	

	for ( Map.Entry<PersistentCollection,CollectionEntry> me : entries ) {
			CollectionEntry ce = me.getValue();
			if ( !ce.isReached() && !ce.isIgnore() ) {
/ JA

/ Hier komen we normaal nooit	, ook bij coll.clear() niet	,

				Collections.processUnreachableCollection( me.getKey(), session );
/s
	public static void processUnreachableCollection(PersistentCollection coll, SessionImplementor session) {
		if ( coll.getOwner()==null ) {
/ NEE
		else {
			processDereferencedCollection( coll, session );
/s
Collections.processDereferencedCollection(PersistentCollection, SessionImplementor) line: 72	
		// do the work
		entry.setCurrentPersister( null );
		entry.setCurrentKey( null );
		prepareCollectionForUpdate( coll, entry, session.getFactory() );
/s
Collections.prepareCollectionForUpdate(PersistentCollection, CollectionEntry, SessionFactoryImplementor) line: 222	
		final CollectionPersister loadedPersister = entry.getLoadedPersister();
		final CollectionPersister currentPersister = entry.getCurrentPersister();
null
/ ANDERSOM ALS BIJ COLLECTION RECREATE	,
/ Het is nu dus andersom als bij coll recreate	,
//////////////////////////////////////////

		if ( loadedPersister != null || currentPersister != null ) {
/ JA
				// do the work
				if ( currentPersister != null ) {
/ NEE
					entry.setDorecreate( true );
				}

				if ( loadedPersister != null ) {
/ JA
					// we will need to remove ye olde entries
					entry.setDoremove( true );
					if ( entry.isDorecreate() ) {
/ NEE
						LOG.trace( "Forcing collection initialization" );
						collection.forceInitialization();
					}
				} 
/t
DefaultFlushEventListener(AbstractFlushingEventListener).flushCollections(EventSource, PersistenceContext) line: 270	

/ coll entry.setDoremove wordt meteen processed	, zoals altijd hier	; alleen coll entry.setDoremove was set op een andere plaats als normaal	,  
			if ( ce.isDoremove() ) {
				session.getInterceptor().onCollectionRemove( coll, ce.getLoadedKey() );
				actionQueue.addAction(
						new CollectionRemoveAction(
...

/t
/s
DefaultFlushEventListener(AbstractFlushingEventListener).performExecutions(EventSource) line: 338	
/s
	public void prepareActions() throws HibernateException {
		prepareActions( collectionRemovals );
/t
/s
CollectionRemoveAction.execute() line: 106	

		if ( !emptySnapshot ) {
			// an existing collection that was either non-empty or uninitialized
			// is replaced by null or a different collection
			// (if the collection is uninitialized, hibernate has no way of
			// knowing if the collection is actually empty without querying the db)
			getPersister().remove( getKey(), getSession() );
/s
OneToManyPersister(AbstractCollectionPersister).remove(Serializable, SessionImplementor) line: 1171	

/ we kwamen hier ook in CollectionUpdateAction.execute naar coll.clear()

/ we zien	,
Hibernate: update employee set address_=null where address_=?
HibernateLog --> 13:59:10 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [34]

		if ( collection != null ) {
			getSession().getPersistenceContext().getCollectionEntry( collection ).afterAction( collection );
/s
CollectionEntry.afterAction(PersistentCollection) line: 243	

		loadedKey = getCurrentKey();
/ was 34, nu null
		setLoadedPersister( getCurrentPersister() );
/ was OneToManyPersister, nu null

			snapshot = loadedPersister==null || !loadedPersister.isMutable() ?
					null :
/ Was 2 employees	, nu null	,

		collection.postAction();
/s
	clearDirty()

















/ 13	.

/ Add an employee to a set: sets the fk in the table	, maar niet via CollectionRecreateAction	,

/ We doen hetzelfde als hierboven	, maar  nu zonder .clear() of set null	, 

/ in M_N_bidir_ehcache	,

/ Address	,
	<set
 		name="employees"
 		inverse="false"
 	>
 		<key
 			column="address_"
 			not-null="false"
 			update="true"      
 		/>
 		<one-to-many class="Employee"/>
 	</set>

/ Employee	,
	<many-to-one 
		name="address"
		column="address_"
		not-null="false"
		insert="true"
		update="true"

	/>

/ Main	,
		  	Employee employee4=new Employee(4l, "foostreet", 4.0);
		  	session.save(employee4);
		  	address3=(Address)session.get(Address.class, 34l);
		  	//employee4.setAddress(address3);
		  	address3.getEmployees().add(employee4); 
/ .add calls .dirty()	, dus de coll is dirty	,
		  	employee2=(Employee)session.get(Employee.class, 2l);
		  	address3.getEmployees().remove(employee2);
/ ook calls .dirty()
		  	
	        	tx.commit();       
/ Er is een EntityInsertAction	, en een CollectionUpdateAction	,

/ EntityInsertAction	, we zien dat address_=null wordt	,
//////////////////////////////////////////////////////////////////////
Hibernate: insert into employee (name_, salary_, address_, id_) values (?, ?, ?, ?)
HibernateLog --> 11:12:50 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [Foo4]
HibernateLog --> 11:12:50 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [DOUBLE] - [4.0]
HibernateLog --> 11:12:50 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [BIGINT] - [null]
HibernateLog --> 11:12:50 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [4] as [BIGINT] - [4]
/t
/s
CollectionUpdateAction.execute() line: 100	
		else {
			persister.deleteRows( collection, id, session );
Hibernate: update employee set address_=null where address_=? and id_=?
HibernateLog --> 15:15:07 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [34]
HibernateLog --> 15:15:07 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [2]

			persister.updateRows( collection, id, session );
			persister.insertRows( collection, id, session );
/s
							offset = writeKey( st, id, offset, session );
							if ( hasIdentifier ) {
								offset = writeIdentifier( st, collection.getIdentifier( entry, i ), offset, session );
							}
							writeElement( st, collection.getElement( entry ), offset, session );
/ TODO
Hibernate: update employee set address_=? where id_=?
HibernateLog --> 15:15:50 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [34]
HibernateLog --> 15:16:47 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [4]
/ Dus de fk van e4 wordt update	, van null tot 34	,
////////////////////////////////////////////////////////////////

/ 13	.

/ we doen	,
		  	address3.setEmployees(new HashSet<Employee>());
		  	address3.getEmployees().add(employee4);

/ employee4 wordt add aan een hash set	, NIET aan een PersistentSet	, dus de overloaded .add (met initialize) wordt NIET called	,
/ uiteindelijk heeft address3 wel een PersistentSet	,
/ TODO


/ 13	.

/ DEMO
/ Switch sets 	, 

/ in M_N_bidir_ehcache	, 

/ Address	,
	<set
 		name="employees"
 		inverse="false"
 	>
 		<key
 			column="address_"
 			not-null="false"
 			update="true"      
 		/>
 		<one-to-many class="Employee"/>
 	</set>

/ Employee	,
	<many-to-one 
		name="address"
		column="address_"
		not-null="false"
		insert="true"
		update="true"

	/>

/ Main2	,

			Employee employee=new Employee(1l,"Foo1",1.00);
			Employee employee2=new Employee(2l,"Foo2",2.00);
			Employee employee3=new Employee(3l,"Foo3",3.00);
			Employee employee4=new Employee(4l,"Foo4",4.00);
			Address address=new Address(12l,"foostreet", "12 foo", "FooCity12");
			Address address3=new Address(34l,"foostreet", "34 foo", "FooCity34");

/ de colls in address en address3 hebben dezelfde persister (role)	, role="<pkg>.Address.employees"	,
			
			address.getEmployees().add(employee);
			address.getEmployees().add(employee2);
			address3.getEmployees().add(employee3);
			address3.getEmployees().add(employee4);

			session.save(address); 
/ In coll-1c is in de entry reached=false
			session.save(address3);
			session.save(employee);
			session.save(employee2);
			session.save(employee3);
			session.save(employee4);
			
			tx.commit();
/s
Collections.processReachableCollection(PersistentCollection, CollectionType, Object, SessionImplementor) line: 178	

		// The CollectionEntry.isReached() stuff is just to detect any silly users
		// who set up circular or shared references between/to collections.
		if ( ce.isReached() ) {
/ NEE
			// We've been here before
			throw new HibernateException(
					"Found shared references to a collection: " + type.getRole()
			);
/ NIET
		}
		ce.setReached( true );

		final CollectionPersister persister = factory.getCollectionPersister( type.getRole() );
		ce.setCurrentPersister( persister );
		ce.setCurrentKey( type.getKeyOfOwner( entity, session ) );
/ TODO(role)	, 12l

		prepareCollectionForUpdate( collection, ce, factory );
/s
Collections.prepareCollectionForUpdate(PersistentCollection, CollectionEntry, SessionFactoryImplementor) line: 233	

		final CollectionPersister currentPersister = entry.getCurrentPersister();
		final CollectionPersister loadedPersister = entry.getLoadedPersister();

/ De loadedKey en loadedPersister zijn null	,
/ Deze worden set in CollectionRecreate/Update/Action,  in .afterAction	,

		if ( loadedPersister != null || currentPersister != null ) {
			if ( ownerChanged ) {
			// do the work
				if ( currentPersister != null ) {
/ JA
					entry.setDorecreate( true );

				if ( loadedPersister != null ) {
/ NEE
					// we will need to remove ye olde entries
					entry.setDoremove( true );
/ NIET
					if ( entry.isDorecreate() ) {
/ NIET
						LOG.trace( "Forcing collection initialization" );
						collection.forceInitialization();

/t
/ volgende, entity#34	,
...
/t
DefaultFlushEventListener(AbstractFlushingEventListener).flushCollections(EventSource, PersistenceContext) line: 273	
		for ( Map.Entry<PersistentCollection,CollectionEntry> me :
			IdentityMap.concurrentEntries( (Map<PersistentCollection,CollectionEntry>) persistenceContext.getCollectionEntries() )) {
			PersistentCollection coll = me.getKey();
			CollectionEntry ce = me.getValue();

			if ( ce.isDorecreate() ) {
/ JA
				actionQueue.addAction(
						new CollectionRecreateAction(
...
/ voor #12, #34	,

/t
				performExecutions( source );

HibernateLog --> 16:55:36 DEBUG org.hibernate.SQL - insert into address (address_line1__, zipcode__, city__, id__) values (?, ?, ?, ?)
Hibernate: insert into address (address_line1__, zipcode__, city__, id__) values (?, ?, ?, ?)
HibernateLog --> 16:55:36 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [foostreet]
HibernateLog --> 16:55:36 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [VARCHAR] - [12 foo]
HibernateLog --> 16:55:36 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [VARCHAR] - [FooCity12]
HibernateLog --> 16:55:36 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [4] as [BIGINT] - [12]
HibernateLog --> 16:55:36 DEBUG org.hibernate.SQL - insert into address (address_line1__, zipcode__, city__, id__) values (?, ?, ?, ?)
Hibernate: insert into address (address_line1__, zipcode__, city__, id__) values (?, ?, ?, ?)
HibernateLog --> 16:55:36 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [foostreet]
HibernateLog --> 16:55:36 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [VARCHAR] - [34 foo]
HibernateLog --> 16:55:36 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [VARCHAR] - [FooCity34]
HibernateLog --> 16:55:36 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [4] as [BIGINT] - [34]
HibernateLog --> 16:55:36 DEBUG org.hibernate.SQL - insert into employee (name_, salary_, address_, id_) values (?, ?, ?, ?)
Hibernate: insert into employee (name_, salary_, address_, id_) values (?, ?, ?, ?)
HibernateLog --> 16:55:36 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [Foo1]
HibernateLog --> 16:55:36 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [DOUBLE] - [1.0]
HibernateLog --> 16:55:36 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [BIGINT] - [null]
HibernateLog --> 16:55:36 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [4] as [BIGINT] - [1]
HibernateLog --> 16:55:36 DEBUG org.hibernate.SQL - insert into employee (name_, salary_, address_, id_) values (?, ?, ?, ?)
Hibernate: insert into employee (name_, salary_, address_, id_) values (?, ?, ?, ?)
HibernateLog --> 16:55:36 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [Foo2]
HibernateLog --> 16:55:36 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [DOUBLE] - [2.0]
HibernateLog --> 16:55:36 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [BIGINT] - [null]
HibernateLog --> 16:55:36 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [4] as [BIGINT] - [2]
HibernateLog --> 16:55:36 DEBUG org.hibernate.SQL - insert into employee (name_, salary_, address_, id_) values (?, ?, ?, ?)
Hibernate: insert into employee (name_, salary_, address_, id_) values (?, ?, ?, ?)
HibernateLog --> 16:55:36 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [Foo3]
HibernateLog --> 16:55:36 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [DOUBLE] - [3.0]
HibernateLog --> 16:55:36 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [BIGINT] - [null]
HibernateLog --> 16:55:36 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [4] as [BIGINT] - [3]
HibernateLog --> 16:55:36 DEBUG org.hibernate.SQL - insert into employee (name_, salary_, address_, id_) values (?, ?, ?, ?)
Hibernate: insert into employee (name_, salary_, address_, id_) values (?, ?, ?, ?)
HibernateLog --> 16:55:36 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [Foo4]
HibernateLog --> 16:55:36 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [DOUBLE] - [4.0]
HibernateLog --> 16:55:36 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [BIGINT] - [null]
HibernateLog --> 16:55:36 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [4] as [BIGINT] - [4]
HibernateLog --> 16:55:36 DEBUG org.hibernate.SQL - update employee set address_=? where id_=?
Hibernate: update employee set address_=? where id_=?
HibernateLog --> 16:55:36 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
HibernateLog --> 16:55:36 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [2]
HibernateLog --> 16:55:36 DEBUG org.hibernate.SQL - update employee set address_=? where id_=?
Hibernate: update employee set address_=? where id_=?
HibernateLog --> 16:55:36 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
HibernateLog --> 16:55:36 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [1]
HibernateLog --> 16:55:36 DEBUG org.hibernate.SQL - update employee set address_=? where id_=?
Hibernate: update employee set address_=? where id_=?
HibernateLog --> 16:55:36 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [34]
HibernateLog --> 16:55:36 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [3]
HibernateLog --> 16:55:36 DEBUG org.hibernate.SQL - update employee set address_=? where id_=?
Hibernate: update employee set address_=? where id_=?
HibernateLog --> 16:55:36 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [34]
HibernateLog --> 16:55:36 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [4]

/t
/ new session
		  	address=(Address)session.get(Address.class, 12l);
/ in coll-1c is in de entry reached=false
		  	address3=(Address)session.get(Address.class, 34l);
		  	Set<Employee>employees=address.getEmployees();
		  	Set<Employee>employees3=address3.getEmployees();
		  	address.setEmployees(employees3);
		  	address3.setEmployees(employees);
	        	tx.commit();       

/ Let op: de coll's in address, address3 zijn leeg, alleen de keyOfOwner zit er in	, en de role (Address.employees)	,

/ we doen 1 voor 1	,
		  	address=(Address)session.get(Address.class, 12l);
/s
EntityLoadQueryDetails$EntityLoaderRowReader(AbstractRowReader).performTwoPhaseLoad(PreLoadEvent, ResultSetProcessingContextImpl, List<HydratedEntityRegistration>) line: 244	
/s
TwoPhaseLoad.doInitializeEntity(Object, EntityEntry, boolean, SessionImplementor, PreLoadEvent) line: 170	
		for ( int i = 0; i < hydratedState.length; i++ ) {
			final Object value = hydratedState[i];
			if ( value!=LazyPropertyInitializer.UNFETCHED_PROPERTY && value!=BackrefPropertyAccessor.UNKNOWN ) {
				hydratedState[i] = types[i].resolve( value, session, entity );
/ i==3	,
value	MarkerObject  (id=3439)	
	name	"NOT NULL COLLECTION" (id=3443)	
/s
SetType:
	public Object resolve(Object value, SessionImplementor session, Object owner)
			throws HibernateException {
		
		return resolveKey( getKeyOfOwner( owner, session ), session, owner );
/ De value doet er helemaal niet toe	,
///////////////////////////////////////
/ TODO
/s
SetType(CollectionType).getCollection(Serializable, SessionImplementor, Object) line: 748	
/ key=12l	,
/ coll-1c is leeg	,
				// create a new collection wrapper, to be initialized later
				collection = instantiate( session, persister, key );
				persistenceContext.addUninitializedCollection( persister, collection, key );
/s
		final CollectionEntry ce = new CollectionEntry( collection, persister, id, flushing );
/s
		this.loadedKey = loadedKey;
		setLoadedPersister(loadedPersister);
/ employees-persister	,


/t
PhaseLoad.doInitializeEntity(Object, EntityEntry, boolean, SessionImplementor, PreLoadEvent) line: 188	
		persister.setPropertyValues( entity, hydratedState );



/ dan	,
	        	tx.commit();       
/s
DefaultFlushEventListener(AbstractFlushingEventListener).flushEntities(FlushEvent, PersistenceContext) line: 231	
	for ( Map.Entry<Object,EntityEntry> me : entityEntries ) {
			EntityEntry entry = me.getValue();
					listener.onFlushEntity( entityEvent );
/ address#12
/s
DefaultFlushEntityEventListener.onFlushEntity(FlushEntityEvent) line: 145	
		final Object entity = event.getEntity();
entity.employees=PersistentSet(3425)#34
		final EntityEntry entry = event.getEntityEntry();
loadedState[3]=PersistentSet(3413)#12
/s
FlushVisitor.processCollection(Object, CollectionType) line: 46	
/s
Collections.processReachableCollection(PersistentCollection, CollectionType, Object, SessionImplementor) line: 165	
/ coll.key=34l
		final CollectionEntry ce = session.getPersistenceContext().getCollectionEntry( collection );
/ coll entry bij coll#34	,
ce.loadedKey=34l

		// The CollectionEntry.isReached() stuff is just to detect any silly users
		// who set up circular or shared references between/to collections.
		if ( ce.isReached() ) {
/ NEE
			// We've been here before
			throw new HibernateException(
					"Found shared references to a collection: " + type.getRole()
			);
		}
		ce.setReached( true );

		ce.setCurrentPersister( persister );
		ce.setCurrentKey( type.getKeyOfOwner( entity, session ) );
12l
/ ce is de coll entry bij coll#34	, want dat is de coll op entity#12	, ce.loadedKey=34l	, en ce.currentKey=12l	,
/ ce.loadedKey=34l: de set zat in address#34 toen hij werd loaded	,
/ ce.currentKey=12l: de set zit nu in address#12	,

		prepareCollectionForUpdate( collection, ce, factory );
/s
Collections.prepareCollectionForUpdate(PersistentCollection, CollectionEntry, SessionFactoryImplementor) line: 238	
			final boolean ownerChanged = loadedPersister != currentPersister
					|| !currentPersister.getKeyType().isEqual( entry.getLoadedKey(), entry.getCurrentKey(), factory );
true
/ de key is veranderd	,

				// do the work
				if ( currentPersister != null ) {
/ JA
					entry.setDorecreate( true );
				if ( loadedPersister != null ) {
/ JA
					// we will need to remove ye olde entries
					entry.setDoremove( true );
					if ( entry.isDorecreate() ) {
/ JA
						collection.forceInitialization();
/s
			session.initializeCollection( this, false );
/s
/ we komen waar we altijd komen	,
SessionImpl.initializeCollection(PersistentCollection, boolean) line: 1893	

		PersistentCollection collection = event.getCollection();
coll#34l
		CollectionEntry ce = source.getPersistenceContext().getCollectionEntry( collection );
ce.loadedKey=34l	, ce.currentKey=12l	,

				ce.getLoadedPersister().initialize( ce.getLoadedKey(), source );
/s
CollectionLoader(AbstractLoadPlanBasedCollectionInitializer).initialize(Serializable, SessionImplementor) line: 98	

		final Serializable[] ids = new Serializable[]{id};
		try {
			final QueryParameters qp = new QueryParameters();
			qp.setPositionalParameterTypes( new Type[]{ collectionPersister.getKeyType() } );
			qp.setPositionalParameterValues( ids );
			qp.setCollectionKeys( ids );
/s
ResultSetProcessorImpl.extractResults(ResultSet, SessionImplementor, QueryParameters, NamedParameterContext, boolean, boolean, ResultTransformer, List<AfterLoadAction>) line: 88	
		handlePotentiallyEmptyCollectionRootReturns( loadPlan, queryParameters.getCollectionKeys(), resultSet, session );
/ queryParameters.getCollectionKeys()==[34l]
/ TODO (Hoe bij coll	, WH met 34l key	, )
/ sets coll.set , coll.tempList	,

////////////////////////////////////
/ de 34l wordt ook used in	,
Hibernate: select employees0_.address_ as address_4_0_0_, employees0_.id_ as id_1_1_0_, employees0_.id_ as id_1_1_1_, employees0_.name_ as name_2_1_1_, employees0_.salary_ as salary_3_1_1_, employees0_.address_ as address_4_1_1_ from employee employees0_ where employees0_.address_=?
HibernateLog --> 09:48:47 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [34]

/ Klopt, de coll#34 is weliswaar in address#12	, maar hij moet filled met employees met address=34l	, want we hadden de coll verwisseld dus address#12 moet de coll#34 	,

		// now finish loading the entities (2-phase load)
		performTwoPhaseLoad( preLoadEvent, context, hydratedEntityRegistrations );
/s
TwoPhaseLoad.doInitializeEntity(Object, EntityEntry, boolean, SessionImplementor, PreLoadEvent) line: 158	
		final Serializable id = entityEntry.getId();
4
		final Object[] hydratedState = entityEntry.getLoadedState();
["Foo4",4.0,34l]
		for ( int i = 0; i < hydratedState.length; i++ ) {
			final Object value = hydratedState[i];
			if ( value!=LazyPropertyInitializer.UNFETCHED_PROPERTY && value!=BackrefPropertyAccessor.UNKNOWN ) {
				hydratedState[i] = types[i].resolve( value, session, entity );
/ we vinden Address#34 in 1c,	
/s
ManyToOneType(EntityType).resolve(Object, SessionImplementor, Object) line: 502	
				return resolveIdentifier( (Serializable) value, session );
/s
		Object proxyOrEntity = session.internalLoad(
				getAssociatedEntityName(),
				id,
				eager,
				isNullable() && !isProxyUnwrapEnabled
		);
/ eager=false
/ id=34l
/ we gaan de owner load	, address#34
/s
		if ( options.isAllowProxyCreation() ) {
/ JA
			return createProxyIfNecessary( event, persister, keyToLoad, options, persistenceContext );
/s
		Object existing = persistenceContext.getEntity( keyToLoad );
/ Address#34	,

/t
TwoPhaseLoad.doInitializeEntity(Object, EntityEntry, boolean, SessionImplementor, PreLoadEvent) line: 188	
		persister.setPropertyValues( entity, hydratedState );
/ entity=Employee#4

/ we zijn nog in	,
AbstractCollectionLoadQueryDetails$CollectionLoaderRowReader(AbstractRowReader).performTwoPhaseLoad(PreLoadEvent, ResultSetProcessingContextImpl, List<HydratedEntityRegistration>) line: 244	
/ en we hebben de 1ste Employee uit de coll-query resolved,	
/ de andere gaat net zo	,

/ dan	,
		// now we can finalize loading collections
		finishLoadingCollections( context );
/ Is voor 2c	,
/s
CollectionLoadContext.endLoadingCollection(LoadingCollectionEntry, CollectionPersister) line: 257	
		CollectionEntry ce = getLoadContext().getPersistenceContext().getCollectionEntry( lce.getCollection() );
/ ce.loadedKey=34l, ce.currentKey=12l	,

/t
						collection.forceInitialization();
/d
/t
/ FlushVisitor.processCollection klaar	,
/d
/t
DefaultFlushEventListener(AbstractFlushingEventListener).flushEntities(FlushEvent, PersistenceContext) line: 226	

/ volgende	,
/ address#34	,
		for ( Map.Entry<Object,EntityEntry> me : entityEntries ) {
...
					listener.onFlushEntity( entityEvent );
/s
/ Weer een FlushVisitor.processCollection	,
			Collections.processReachableCollection( coll, type, owner, getSession() );
/ coll#12
/s
		final CollectionEntry ce = session.getPersistenceContext().getCollectionEntry( collection );
/ ce.loadedKey=12l	, ce.currentKey=null nog	,

		if ( ce.isReached() ) {
/ NEE
		ce.setReached( true );

		final CollectionPersister persister = factory.getCollectionPersister( type.getRole() );
		ce.setCurrentPersister( persister );
		ce.setCurrentKey( type.getKeyOfOwner( entity, session ) );
/ ce.loadedKey=12l	, ce.currentKey=34l	,
/ address#34l heeft coll#12l	, 

		prepareCollectionForUpdate( collection, ce, factory );
/s
				// do the work
				if ( currentPersister != null ) {
/ JA
					entry.setDorecreate( true );
				}

				if ( loadedPersister != null ) {
/ JA
					// we will need to remove ye olde entries
					entry.setDoremove( true );
					if ( entry.isDorecreate() ) {
/ JA
						collection.forceInitialization();

/ coll-query	, de Employee's zijn nog NIET in 1c	, deze worden in 1c set tijdens resolve	, 
/s
ResultSetProcessorImpl.extractResults(ResultSet, SessionImplementor, QueryParameters, NamedParameterContext, boolean, boolean, ResultTransformer, List<AfterLoadAction>) line: 126	
		for ( count = 0; count < maxRows && resultSet.next(); count++ ) {
			Object logicalRow = rowReader.readRow( resultSet, context );
/ Hier wordt Employee in 1c set	,
/s
EntityReferenceInitializerImpl.hydrateEntityState(ResultSet, ResultSetProcessingContextImpl) line: 239	
		final Object entityInstance = optionalEntityInstance != null
				? optionalEntityInstance
/ new Employee
		loadFromResultSet(
				resultSet,
				context,
				entityInstance,
				concreteEntityTypeName,
				entityKey,
				lockModeToAcquire
		);
/ Deze sets new Employee(1) in 1c	,

/t
			int entityCount = flushEntities( event, persistenceContext );
/d
			int collectionCount = flushCollections( session, persistenceContext );
/s
ce	CollectionEntry  (id=3413)	
	currentKey	Long  (id=3506)	 				34
	currentPersister	OneToManyPersister  (id=3418)	
	dorecreate	true	
	doremove	true	
	doupdate	false	
	loadedKey	Long  (id=3414)					12	
	loadedPersister	OneToManyPersister  (id=3418)	
	reached	true	
	role	"my.test.own.hibernate_xml_M_N_bidir_ehcache.Address.employees" (id=3534)	

			if ( ce.isDorecreate() ) {
				actionQueue.addAction(
						new CollectionRecreateAction(
								coll,
								ce.getCurrentPersister(),
								ce.getCurrentKey(),			34l
/ Dat betekent dat we de fk opnieuw gaan set	,
/ DEMO
//////////////////////////////////////////////////////
/ WH coll12 heeft empl#1/2	, coll#12 zit nu op address#34	, dus de fk van empl#1/2 moeten 34l worden	, want de coll's owner is nu address#34	,

			if ( ce.isDoremove() ) {
				actionQueue.addAction(
						new CollectionRemoveAction(
								coll,
								ce.getLoadedPersister(),
								ce.getLoadedKey(),			12l
								ce.isSnapshotEmpty(coll),
								session
/ WH rm fk 12 van empl1/2

/ In de list van execute actions komt CollectionRemovals eerst	, dan CollectionCreations	,

/ volgende	,
ce	CollectionEntry  (id=3419)	
	currentKey	Long  (id=3408)					12l
	currentPersister	OneToManyPersister  (id=3402)	
	dorecreate	true	
	doremove	true	
	doupdate	false	
	fromMerge	false	
	ignore	false	
	loadedKey	Long  (id=3401)					34l
	loadedPersister	OneToManyPersister  (id=3402)	
	processed	true	
	reached	true	
	role	"my.test.own.hibernate_xml_M_N_bidir_ehcache.Address.employees" (id=3431)	
	snapshot	HashMap<K,V>  (id=3432)	

/ coll#34 zit nu in address#12	, de empl#3/4 moeten dus fk 12l krijgen	,

			if ( ce.isDorecreate() ) {
				actionQueue.addAction(
						new CollectionRecreateAction(
								coll,				34l
								ce.getCurrentPersister(),
								ce.getCurrentKey(),		12l
								session
/ empl#3/4/ krijgen fk 12l

			if ( ce.isDoremove() ) {
				actionQueue.addAction(
						new CollectionRemoveAction(
								coll,				34l
								ce.getLoadedPersister(),	34l
								ce.getLoadedKey(),
								ce.isSnapshotEmpty(coll),
								session
/ rm fk 34l van empl#3/4	,

/t
				performExecutions( source );
/ eerst
[CollectionRemoveAction[my.test.own.hibernate_xml_M_N_bidir_ehcache.Address.employees#12], CollectionRemoveAction[my.test.own.hibernate_xml_M_N_bidir_ehcache.Address.employees#34]]
/s
CollectionRemoveAction.execute() line: 106	
			getPersister().remove( getKey(), getSession() );
/ getKey()=12l
/t
/s
OneToManyPersister(AbstractCollectionPersister).remove(Serializable, SessionImplementor) line: 1171	
		if ( !isInverse && isRowDeleteEnabled() ) {

/////////////////
/ Collection...Action alleen als set inverse="false"	,

   protected boolean isRowDeleteEnabled() {
		return keyIsUpdateable && keyIsNullable;
true & true 
/ want <set inverse="false"><key not-null="false" update="true">

Hibernate: update employee set address_=null where address_=?
HibernateLog --> 12:46:51 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]

/ we zien dus maar 1 query	,
////////////////////////////////////////

/t
			getSession().getPersistenceContext().getCollectionEntry( collection ).afterAction( collection );
/s
CollectionEntry.afterAction(PersistentCollection) line: 240	
/ coll#12
		loadedKey = getCurrentKey();
34l
/ WAS 12l
		setLoadedPersister( getCurrentPersister() );

/ In de coll verandert niets: key=12l blijft, 	empl#1/2 blijven in de set	,

/ volgende	,
Hibernate: update employee set address_=null where address_=?
HibernateLog --> 12:59:26 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [34]

/ volgende,	 
CollectionRecreateAction.execute() line: 64	
		getPersister().recreate( collection, getKey(), getSession() );
/ getKey()=34l
/s
	public void recreate(PersistentCollection collection, Serializable id, SessionImplementor session)
			throws HibernateException {
		if ( !isInverse && isRowInsertEnabled() ) {
/=
		return keyIsUpdateable;
true
Hibernate: update employee set address_=? where id_=?
HibernateLog --> 13:09:38 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [34]
HibernateLog --> 13:09:39 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [1]

Hibernate: update employee set address_=? where id_=?
HibernateLog --> 13:13:12 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [34]
HibernateLog --> 13:13:13 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [2]

/t
		getPersister().recreate( collection, getKey(), getSession() );
/d
		getSession().getPersistenceContext().getCollectionEntry( collection ).afterAction( collection );
/s
		loadedKey = getCurrentKey();
		setLoadedPersister( getCurrentPersister() );


/ 13	. 

/ 1_N_ehcache	, dus unidir	,

/  we moeten <set inverse="false"><key not-null="true"> anders krijgt Employee geen extra prop van type long	,

/ Address	,
 	<set
 		name="employees"
 		inverse="false"
 		>
 		<key
 			column="address_"
 			not-null="true"
 			update="true"
 		></key>
 		<one-to-many class="Employee"/>
 	</set>

/  Main	,
			Employee employee=new Employee(1l,"Foo1",1.00);
			Employee employee2=new Employee(2l,"Foo2",2.00);
			Address address=new Address(12l,"foostreet", "12 foo", "FooCity12");
			Address address2=new Address(21l,"foostreet", "21 foo", "FooCity21");
			
			address.getEmployees().add(employee);
			address.getEmployees().add(employee2);
			
			session.save(address);
			session.save(employee);
			session.save(employee2);

		  	address.setCity("FooCityA");
		  	employee.setName("Foo1A");
			
			tx.commit();
			session.close();
/ OK

/  new session	,
		  	Employee employee4=new Employee(4l, "Foo4", 4.0);
		  	session.save(employee4);
/ ERR

org.hibernate.PropertyValueException: not-null property references a null or transient value : my.test.own.hibernate_xml_1_N_ehcache.Employee._my.test.own.hibernate_xml_1_N_ehcache.Address.employeesBackref
	at org.hibernate.engine.internal.Nullability.checkNullability(Nullability.java:106)
	at org.hibernate.action.internal.AbstractEntityInsertAction.nullifyTransientReferencesIfNotAlready(AbstractEntityInsertAction.java:132)
	at org.hibernate.action.internal.AbstractEntityInsertAction.makeEntityManaged(AbstractEntityInsertAction.java:141)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:201)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:179)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:166)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:332)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:288)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:194)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:137)
	at org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.saveWithGeneratedOrRequestedId(DefaultSaveOrUpdateEventListener.java:209)
	at org.hibernate.event.internal.DefaultSaveEventListener.saveWithGeneratedOrRequestedId(DefaultSaveEventListener.java:55)
	at org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.entityIsTransient(DefaultSaveOrUpdateEventListener.java:194)
	at org.hibernate.event.internal.DefaultSaveEventListener.performSaveOrUpdate(DefaultSaveEventListener.java:49)
	at org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.onSaveOrUpdate(DefaultSaveOrUpdateEventListener.java:90)
	at org.hibernate.internal.SessionImpl.fireSave(SessionImpl.java:715)
	at org.hibernate.internal.SessionImpl.save(SessionImpl.java:707)
	at org.hibernate.internal.SessionImpl.save(SessionImpl.java:702)
	at my.test.own.hibernate_xml_1_N_ehcache.Main.testBasicUsage(Main.java:164)
	at my.test.own.hibernate_xml_1_N_ehcache.Main.<init>(Main.java:63)
	at my.test.own.hibernate_xml_1_N_ehcache.Main.main(Main.java:57)

/ we moeten eerst 	,
		  	address.getEmployees().add(employee4);
/ dan	,
			session.save(employee2);
/s
DefaultSaveEventListener(AbstractSaveEventListener).performSaveOrReplicate(Object, EntityKey, EntityPersister, boolean, Object, EventSource, boolean) line: 267	
/s
		Object[] values = persister.getPropertyValuesToInsert( entity, getMergeMap( anything ), source );
/s
BackrefPropertyAccessor$BackrefGetter.getForInsert(Object, Map, SessionImplementor) line: 125	
/ als de employee niet in de set	, dan komt hier null uit WH	,

/t
		AbstractEntityInsertAction insert = addInsertAction(
				values, id, entity, persister, useIdentityColumn, source, shouldDelayIdentityInserts
		);
/s
Nullability.checkNullability(Object[], EntityPersister, boolean) line: 94	
			final boolean[] nullability = persister.getPropertyNullability();
[true,true,false]
			final boolean[] checkability = isUpdate ?
false
				persister.getPropertyUpdateability() :
				persister.getPropertyInsertability();
[true,true,true]
propertyTypes	Type[3]  (id=3109)	
	[0]	StringType  (id=3115)	
	[1]	DoubleType  (id=3118)	
	[2]	LongType  (id=3121)	

/t
/s
DefaultFlushEventListener(AbstractFlushingEventListener).flushCollections(EventSource, PersistenceContext) line: 296	
			if ( ce.isDoupdate() ) {
				session.getInterceptor().onCollectionUpdate( coll, ce.getLoadedKey() );
				actionQueue.addAction(
						new CollectionUpdateAction(
								coll,
								ce.getLoadedPersister(),
								ce.getLoadedKey(),
...

/ 13	.

/ N-1 unidir, N_1_ehcache

/ een Employee heeft een ref naar een Address	, deze Address moeten we eerst save	, anders kan .save(employee) de employee niet in 1c set	, want employee heeft een transient prop	, 

/ Employee
			Address address=new Address(12l,"foostreet", "12 foo", "FooCity12");
			Employee employee=new Employee(1l,"Foo1",1.00);
			employee.setAddress(address);
			Employee employee2=new Employee(2l,"Foo2",2.00);
			employee2.setAddress(address);

			session.save(address);
			session.save(employee);
			session.save(employee2);
			tx.commit();

/ we moeten eerst address save	,
/////////////////////////////////////

/ als we 	,

			session.save(employee);
			session.save(address);
/ dan ERR bij 	,
			session.save(employee);
org.hibernate.TransientPropertyValueException: Not-null property references a transient value - transient instance must be saved before current operation : my.test.own.hibernate_xml_N_1_ehcache.Employee.address -> my.test.own.hibernate_xml_N_1_ehcache.Address
	at org.hibernate.action.internal.UnresolvedEntityInsertActions.checkNoUnresolvedActionsAfterOperation(UnresolvedEntityInsertActions.java:137)
	at org.hibernate.engine.spi.ActionQueue.checkNoUnresolvedActionsAfterOperation(ActionQueue.java:318)
	at org.hibernate.internal.SessionImpl.checkNoUnresolvedActionsAfterOperation(SessionImpl.java:658)
	at org.hibernate.internal.SessionImpl.fireSave(SessionImpl.java:717)
	at org.hibernate.internal.SessionImpl.save(SessionImpl.java:707)
	at org.hibernate.internal.SessionImpl.save(SessionImpl.java:702)
	at my.test.own.hibernate_xml_N_1_ehcache.Main.testBasicUsage(Main.java:128)
	at my.test.own.hibernate_xml_N_1_ehcache.Main.<init>(Main.java:63)
	at my.test.own.hibernate_xml_N_1_ehcache.Main.main(Main.java:57)

/ Namelijk	, 
SessionImpl.fireSave(SaveOrUpdateEvent) line: 717	

		errorIfClosed();
		checkTransactionSynchStatus();
		checkNoUnresolvedActionsBeforeOperation();
		for ( SaveOrUpdateEventListener listener : listeners( EventType.SAVE ) ) {
			listener.onSaveOrUpdate( event );
/ OK	,
Hibernate: select address_.id__, address_.address_line1__ as address_2_0_, address_.zipcode__ as zipcode_3_0_, address_.city__ as city__4_0_ from address address_ where address_.id__=?
HibernateLog --> 07:47:58 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]

		}
		checkNoUnresolvedActionsAfterOperation();
/ ERR	,

/ Waar komt die query vandaan	?
/ In	, nog voor de schedule van de EntityInsertAction	, 

DefaultSaveEventListener(AbstractSaveEventListener).performSaveOrReplicate(Object, EntityKey, EntityPersister, boolean, Object, EventSource, boolean) line: 288	
/s
ActionQueue.addInsertAction(AbstractEntityInsertAction) line: 177	
		NonNullableTransientDependencies nonNullableTransientDependencies = insert.findNonNullableTransientEntities();

/ Als we eerst address save	, en dan employee	, dan is deze query er NIET	, 

		if ( nonNullableTransientDependencies == null ) {
/ NORMAAL, als OK
			LOG.tracev( "Adding insert with no non-nullable, transient entities: [{0}]", insert );
			addResolvedEntityInsertAction( insert );
		}
		else {
/ NU	, er volgt dus GEEN schedule	,
			if ( LOG.isTraceEnabled() ) {
				LOG.tracev( "Adding insert with non-nullable, transient entities; insert=[{0}], dependencies=[{1}]", insert,
							nonNullableTransientDependencies.toLoggableString( insert.getSession() ) );
			}
			unresolvedInsertions.addUnresolvedEntityInsertAction( insert, nonNullableTransientDependencies );

/ en dan 	,
/ t
SessionImpl.fireSave(SaveOrUpdateEvent) line: 717	
			listener.onSaveOrUpdate( event );
/d
		checkNoUnresolvedActionsAfterOperation();
/s
			actionQueue.checkNoUnresolvedActionsAfterOperation();
/s
ActionQueue.checkNoUnresolvedActionsAfterOperation() line: 318	
		unresolvedInsertions.checkNoUnresolvedActionsAfterOperation();
/ Dit is ook een queue	,
UnresolvedEntityInsertActions[[insert=EntityInsertAction[my.test.own.hibernate_xml_N_1_ehcache.Employee#1] dependencies=[NonNullableTransientDependencies[transientEntityName=my.test.own.hibernate_xml_N_1_ehcache.Address requiredBy=[address]]]]
/s
UnresolvedEntityInsertActions.checkNoUnresolvedActionsAfterOperation() line: 137	
			throw new TransientPropertyValueException(
...



/ In meer detail	,

ActionQueue.addInsertAction(AbstractEntityInsertAction) line: 176	
		NonNullableTransientDependencies nonNullableTransientDependencies = insert.findNonNullableTransientEntities();
/s
ForeignKeys$Nullifier.isNullifiable(String, Object) line: 177	
			final EntityEntry entityEntry = session.getPersistenceContext().getEntry( object );
			if ( entityEntry == null ) {
/ JA
				return isTransient( entityName, object, null, session );

/ Als object in 1c, komen we NIET hier, dus zal de query niet worden gedaan	, 

/s
ForeignKeys.isTransient(String, Object, Boolean, SessionImplementor) line: 255	
		// hit the database, after checking the session cache for a snapshot
		final Object[] snapshot = session.getPersistenceContext().getDatabaseSnapshot(
				persister.getIdentifier( entity, session ),
				persister
		);
/ we zien	,

Hibernate: select address_.id__, address_.address_line1__ as address_2_0_, address_.zipcode__ as zipcode_3_0_, address_.city__ as city__4_0_ from address address_ where address_.id__=?
HibernateLog --> 08:18:44 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]

/ 1313	,

/ Het probleem was de ref naar Address	, we kunnen de <many-to-one cascade="update-save">	, maar dan zien we ook die check transient query	,

/ Employee	,
	<many-to-one 
		name="address"
		column="address_"
		not-null="true"
		cascade="save-update"
	>

/ Main	,
			session.save(employee);
			session.save(employee2);
/ we zien	,
Hibernate: select address_.id__, address_.address_line1__ as address_2_0_, address_.zipcode__ as zipcode_3_0_, address_.city__ as city__4_0_ from address address_ where address_.id__=?
HibernateLog --> 08:33:20 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]

/ TODO (Is cascade een goed idee?)

/ 13	.

/ N_1_ehcache	, N-1 unidr	,

/ Employee	,
	<many-to-one 
		name="address"
		column="address_"
		not-null="true"
	>

/ Main	,
			Address address=new Address(12l,"foostreet", "12 foo", "FooCity12");
			Employee employee=new Employee(1l,"Foo1",1.00);
			employee.setAddress(address);
			Employee employee2=new Employee(2l,"Foo2",2.00);
			employee2.setAddress(address);
			
			session.save(address);		
			session.save(employee);
			session.save(employee2);

		  	address.setCity("FooCityA");
		  	employee.setName("Foo1A");

			tx.commit();

/ we zien	,

Hibernate: insert into address (address_line1__, zipcode__, city__, id__) values (?, ?, ?, ?)
HibernateLog --> 08:48:41 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [foostreet]
HibernateLog --> 08:48:41 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [VARCHAR] - [12 foo]
HibernateLog --> 08:48:41 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [VARCHAR] - [FooCity12]
HibernateLog --> 08:48:41 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [4] as [BIGINT] - [12]

Hibernate: insert into employee (name_, salary_, address_, id_) values (?, ?, ?, ?)
HibernateLog --> 08:48:41 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [Foo1]
HibernateLog --> 08:48:41 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [DOUBLE] - [1.0]
HibernateLog --> 08:48:41 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [BIGINT] - [12]
HibernateLog --> 08:48:41 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [4] as [BIGINT] - [1]

Hibernate: insert into employee (name_, salary_, address_, id_) values (?, ?, ?, ?)
HibernateLog --> 08:48:41 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [Foo2]
HibernateLog --> 08:48:41 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [DOUBLE] - [2.0]
HibernateLog --> 08:48:41 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [BIGINT] - [12]
HibernateLog --> 08:48:41 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [4] as [BIGINT] - [2]

/ Deze queries zien we ook bij 1-N , <key not-null=true>	, maar daar zijn ook Collection...Action queries	, 

/ next session	,

			Address address2=new Address(34l,"foostreet", "34 foo", "FooCity34");
			session.save(address2);
			employee=(Employee)session.get(Employee.class, 1l);
			employee.setAddress(address2);
			employee2=(Employee)session.get(Employee.class, 2l);
			employee.setAddress(null);
/ we zien	,

Hibernate: select employee0_.id_ as id_1_1_0_, employee0_.name_ as name_2_1_0_, employee0_.salary_ as salary_3_1_0_, employee0_.address_ as address_4_1_0_ from employee employee0_ where employee0_.id_=?
HibernateLog --> 15:46:26 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [1]
HibernateLog --> 15:46:26 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo1]
HibernateLog --> 15:46:26 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [1.0]
HibernateLog --> 15:46:26 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [12]

Hibernate: select employee0_.id_ as id_1_1_0_, employee0_.name_ as name_2_1_0_, employee0_.salary_ as salary_3_1_0_, employee0_.address_ as address_4_1_0_ from employee employee0_ where employee0_.id_=?
HibernateLog --> 15:46:35 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [2]
HibernateLog --> 15:46:35 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo2]
HibernateLog --> 15:46:35 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [2.0]
HibernateLog --> 15:46:35 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [12]
		  			  	 
	        tx.commit();
/ we zien	,

Hibernate: insert into address (address_line1__, zipcode__, city__, id__) values (?, ?, ?, ?)
HibernateLog --> 15:48:45 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [foostreet]
HibernateLog --> 15:48:45 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [VARCHAR] - [34 foo]
HibernateLog --> 15:48:45 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [VARCHAR] - [FooCity34]
HibernateLog --> 15:48:45 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [4] as [BIGINT] - [34]

Hibernate: update employee set name_=?, salary_=?, address_=? where id_=?
HibernateLog --> 15:48:45 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [Foo1]
HibernateLog --> 15:48:45 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [DOUBLE] - [1.0]
HibernateLog --> 15:48:45 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [BIGINT] - [null]
HibernateLog --> 15:48:45 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [4] as [BIGINT] - [1]



/ 13	.

/ N-1 unidir, join table,	

/ we passen 
	<many-to-one 
		name="address"
		column="address_"
		not-null="true"
	>
/ er in	,

/ Employee	,
		<join 
			table="jointable"		/ MOETEN we geven, H maakt zelf geen name	,
			optional="true"
		>
			<key 
				column="employee_"	/ self	, 
				unique="true"	
			/>
			<many-to-one 
				name="address"	
				column="address_"	/ address_ UIT employee tbl naar koppel tbl	,
				not-null="true"
			/>
		</join>

/ Main	,

			Address address=new Address(12l,"foostreet", "12 foo", "FooCity12");
			Employee employee=new Employee(1l,"Foo1",1.00);
			employee.setAddress(address);			
			Employee employee2=new Employee(2l,"Foo2",2.00);
//			employee2.setAddress(address);
			
	
			session.save(address);		
			session.save(employee);
			session.save(employee2);

/ we zien 	,

foo=> select*from employee;
 id_ | name_ | salary_ 
-----+-------+---------
   1 | Foo1  |       1
   2 | Foo2  |       2
(2 rows)

foo=> select*from jointable;
 employee_ | address_ 
-----------+----------
         1 |       12
         2 |       12
(2 rows)


/ we zien dus geen null in de address_ column in de employee tbl	, maar we zien dat een row verdwijnt in de join tbl	, en zo moet het	,
////////////////////////////////////////////

HibernateLog --> 14:43:29 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [foostreet]
HibernateLog --> 14:43:29 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [VARCHAR] - [12 foo]
HibernateLog --> 14:43:29 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [VARCHAR] - [FooCity12]
HibernateLog --> 14:43:29 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [4] as [BIGINT] - [12]

Hibernate: insert into employee (name_, salary_, id_) values (?, ?, ?)
HibernateLog --> 14:43:29 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [Foo1]
HibernateLog --> 14:43:29 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [DOUBLE] - [1.0]
HibernateLog --> 14:43:29 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [BIGINT] - [1]

Hibernate: insert into jointable (address_, employee_) values (?, ?)
HibernateLog --> 14:43:29 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
HibernateLog --> 14:43:29 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [1]

Hibernate: insert into employee (name_, salary_, id_) values (?, ?, ?)
HibernateLog --> 14:43:29 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [Foo2]
HibernateLog --> 14:43:29 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [DOUBLE] - [2.0]
HibernateLog --> 14:43:29 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [BIGINT] - [2]

Hibernate: insert into jointable (address_, employee_) values (?, ?)
HibernateLog --> 18:02:46 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
HibernateLog --> 18:02:46 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [2]


/ new session	,
			
			Address address2=new Address(34l,"foostreet", "34 foo", "FooCity34");
			session.save(address2);
			employee=(Employee)session.get(Employee.class, 1l);
			employee.setAddress(address2);
			employee2=(Employee)session.get(Employee.class, 2l);
			employee2.setAddress(null);
		  			  	 

/ we zien	,

Hibernate: select employee0_.id_ as id_1_2_0_, employee0_.name_ as name_2_2_0_, employee0_.salary_ as salary_3_2_0_, employee0_1_.address_ as address_2_0_0_ from employee employee0_ left outer join FooBar employee0_1_ on employee0_.id_=employee0_1_.foo_ where employee0_.id_=?
HibernateLog --> 17:57:27 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [1]
HibernateLog --> 17:57:27 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_2_0_] : [VARCHAR]) - [Foo1]
HibernateLog --> 17:57:27 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_2_0_] : [DOUBLE]) - [1.0]
HibernateLog --> 17:57:27 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [BIGINT]) - [12]

Hibernate: select employee0_.id_ as id_1_2_0_, employee0_.name_ as name_2_2_0_, employee0_.salary_ as salary_3_2_0_, employee0_1_.address_ as address_2_0_0_ from employee employee0_ left outer join FooBar employee0_1_ on employee0_.id_=employee0_1_.foo_ where employee0_.id_=?
HibernateLog --> 17:57:35 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [2]
HibernateLog --> 17:57:35 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_2_0_] : [VARCHAR]) - [Foo2]
HibernateLog --> 17:57:35 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_2_0_] : [DOUBLE]) - [2.0]
HibernateLog --> 17:57:35 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [BIGINT]) - [12]

	        	tx.commit();
/ we zien	,

Hibernate: insert into address (address_line1__, zipcode__, city__, id__) values (?, ?, ?, ?)
HibernateLog --> 18:04:04 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [foostreet]
HibernateLog --> 18:04:04 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [VARCHAR] - [34 foo]
HibernateLog --> 18:04:04 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [VARCHAR] - [FooCity34]
HibernateLog --> 18:04:04 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [4] as [BIGINT] - [34]

Hibernate: update jointable set address_=? where employee_=?
HibernateLog --> 18:04:04 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [34]
HibernateLog --> 18:04:04 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [1]

Hibernate: delete from jointable where employee_=?
HibernateLog --> 18:04:04 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [2]

/ 13	.

/ 1_N bidir, koppel table	,

/ Address	,

 	<set
 		name="employees"
 		inverse="false"
 	>
 <!-- 		<cache usage="read-write"/>	
 --> 		
 		<key
 			column="address_"		/ owner, normaal in employee table, nu in join table,	
 			not-null="false"
 			update="true"
 		/>
 		
 <!-- 		<one-to-many class="Employee"/>
  -->		
 		<many-to-many 
 			column="employee_"		/ in join table	,
 			unique="true"	
 			class="Employee"
 		/>	
 	</set>

/ Employee	,

		<join					/ new 
			table="jointable"
			optional="true"
			inverse="true"
		>
			<key 				/ new
				column="employee_"	
				unique="true"	
			/>
			<many-to-one 
				name="address"
				column="address_"
				not-null="true"
			/>
		</join>


			Address address=new Address(12l,"foostreet", "12 foo", "FooCity12");
			Employee employee=new Employee(1l,"Foo1",1.00);
			Employee employee2=new Employee(2l,"Foo2",2.00);

			address.getEmployees().add(employee);
			employee.setAddress(address);
			address.getEmployees().add(employee2);
			employee2.setAddress(address);
			
			session.save(address);
			session.save(employee);
			session.save(employee2);
			
			tx.commit();



/ we zien	,

Hibernate: insert into address (address_line1__, zipcode__, city_, id__) values (?, ?, ?, ?)
HibernateLog --> 18:16:37 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [foostreet]
HibernateLog --> 18:16:37 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [VARCHAR] - [12 foo]
HibernateLog --> 18:16:37 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [VARCHAR] - [FooCity12]
HibernateLog --> 18:16:37 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [4] as [BIGINT] - [12]

Hibernate: insert into employee (name_, salary_, id_) values (?, ?, ?)
HibernateLog --> 18:16:37 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [Foo1]
HibernateLog --> 18:16:37 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [DOUBLE] - [1.0]
HibernateLog --> 18:16:37 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [BIGINT] - [1]

Hibernate: insert into employee (name_, salary_, id_) values (?, ?, ?)
HibernateLog --> 18:16:37 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [Foo2]
HibernateLog --> 18:16:37 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [DOUBLE] - [2.0]
HibernateLog --> 18:16:37 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [BIGINT] - [2]

Hibernate: insert into address_employees (address_, employee_) values (?, ?)
HibernateLog --> 18:16:37 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
HibernateLog --> 18:16:37 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [1]

Hibernate: insert into address_employees (address_, employee_) values (?, ?)
HibernateLog --> 18:16:37 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
HibernateLog --> 18:16:37 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [2]

/ we zien	,



foo=> select*from address;
 id__ | address_line1__ | zipcode__ |   city_   
------+-----------------+-----------+-----------
   12 | foostreet       | 12 foo    | FooCity12
(1 row)

foo=> select*from employee;
 id_ | name_ | salary_ 
-----+-------+---------
   1 | Foo1  |       1
   2 | Foo2  |       2
(2 rows)

foo=> select*from address_employees;
 address_ | employee_ 
----------+-----------
       12 |         1
       12 |         2
(2 rows)

/ new session	,

/ 13	.

/ M_N_bidir

/ Address
 	<set
 		name="employees"
 		inverse="false"
 	>
 		<key
	 			column="address_"
	 			not-null="false"
	 			update="true"
 		/>
 		
 		<many-to-many 
 			column="employee__"
 			unique="false"	
 			class="Employee"
 		/>	
 
 	</set>

/ Employee
	 	<set
 		name="addresses"
 		inverse="true"
 	>
 		<key
	 			column="employee__"
	 			not-null="false"
	 			update="true"
 		/>
 		
 		<many-to-many 
 			column="address_"
 			unique="false"	
 			class="Employee"
 		/>	
 
 	</set>




Hibernate: insert into employee (name_, salary_, id_) values (?, ?, ?)
HibernateLog --> 18:05:50 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [Foo1]
HibernateLog --> 18:05:50 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [DOUBLE] - [1.0]
HibernateLog --> 18:05:50 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [BIGINT] - [1]

Hibernate: insert into address (address_line1__, zipcode__, city__, id__) values (?, ?, ?, ?)
HibernateLog --> 18:05:50 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [foostreet]
HibernateLog --> 18:05:50 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [VARCHAR] - [12 foo]
HibernateLog --> 18:05:50 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [VARCHAR] - [FooCity12]
HibernateLog --> 18:05:50 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [4] as [BIGINT] - [12]

Hibernate: insert into address (address_line1__, zipcode__, city__, id__) values (?, ?, ?, ?)
HibernateLog --> 18:05:50 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [foostreet]
HibernateLog --> 18:05:50 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [VARCHAR] - [34 foo]
HibernateLog --> 18:05:50 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [VARCHAR] - [FooCity34]
HibernateLog --> 18:05:50 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [4] as [BIGINT] - [34]

Hibernate: insert into employee (name_, salary_, id_) values (?, ?, ?)
HibernateLog --> 18:05:50 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [Foo2]
HibernateLog --> 18:05:50 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [DOUBLE] - [2.0]
HibernateLog --> 18:05:50 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [BIGINT] - [2]

Hibernate: insert into address_employees (address_, employee__) values (?, ?)
HibernateLog --> 18:05:50 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
HibernateLog --> 18:05:50 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [1]

Hibernate: insert into address_employees (address_, employee__) values (?, ?)
HibernateLog --> 18:05:50 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
HibernateLog --> 18:05:50 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [2]






















/ 13		.

/  1_N_ehcache, 1-N unidir	, 

/ when <set inverse=false><key not-null=true>	, 

/ Address	,
  	<set
 		name="employees"
 		inverse="false"
 	>
 		<key
 			column="address_"
 			not-null="true"
 			update="true"
 		/>
 		<one-to-many class="Employee"/>
 	</set>

/ Main	,
			Address address=new Address(12l,"foostreet", "12 foo", "FooCity12");
			Employee employee=new Employee(1l,"Foo1",1.00);
			address.getEmployees().add(employee);
			Employee employee2=new Employee(2l,"Foo2",2.00);
			address.getEmployees().add(employee2);
			
			session.save(address);
			session.save(employee);
			session.save(employee2);
		
			tx.commit();

/ we zien	,

Hibernate: insert into address (address_line1__, zipcode__, city_, id__) values (?, ?, ?, ?)
HibernateLog --> 09:10:06 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [foostreet]
HibernateLog --> 09:10:06 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [VARCHAR] - [12 foo]
HibernateLog --> 09:10:06 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [VARCHAR] - [FooCity12]
HibernateLog --> 09:10:06 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [4] as [BIGINT] - [12]

Hibernate: insert into employee (name_, salary_, address_, id_) values (?, ?, ?, ?)
HibernateLog --> 09:10:06 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [Foo1]
HibernateLog --> 09:10:06 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [DOUBLE] - [1.0]
HibernateLog --> 09:10:06 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [BIGINT] - [12]
HibernateLog --> 09:10:06 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [4] as [BIGINT] - [1]

Hibernate: insert into employee (name_, salary_, address_, id_) values (?, ?, ?, ?)
HibernateLog --> 09:10:06 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [Foo2]
HibernateLog --> 09:10:06 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [DOUBLE] - [2.0]
HibernateLog --> 09:10:06 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [BIGINT] - [12]
HibernateLog --> 09:10:06 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [4] as [BIGINT] - [2]

Hibernate: update employee set address_=? where id_=?
HibernateLog --> 09:10:06 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
HibernateLog --> 09:10:06 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [1]

Hibernate: update employee set address_=? where id_=?
HibernateLog --> 09:58:49 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
HibernateLog --> 09:58:49 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [2]

/ Er is altijd een address_ column 	, want we doen <set ...><key ....>	,

/ we zien dat er extra H prop is bij employee	, die wordt meegegeven	, we zien dan ook address_ col in de employee-insert	, dat moet ook wel, want er is de constraint not-null=true	,

/ <key not-null="true"> is WH create voor schema's die al bestaan en not-null constraint hebben op de address_ fk in de employee table, of voor exports waar bij gewenst is dat not-null constraint er op komt 	, want altijd komt de coll recreate er achter aan	, die de fk set	,
/ Dus als <key not-null="true"> dan is de extra prop overbodig, maar kan niet anders	,
/ Maar het is niet goed	, want we kunnen nu nooit een employee uit de coll rm	, want de constraint address_ in employee is not-null: use join table	,
/////////////////////////////////////////////////////////////

/ we zien een not-null constraint op de fk	,

foo=> \d+ employee
                                Table "public.employee"
  Column  |          Type          | Modifiers | Storage  | Stats target | Description 
----------+------------------------+-----------+----------+--------------+-------------
 id_      | bigint                 | not null  | plain    |              | 
 name_    | character varying(255) |           | extended |              | 
 salary_  | double precision       |           | plain    |              | 
 address_ | bigint                 | not null  | plain    |              | 
Indexes:
    "employee_pkey" PRIMARY KEY, btree (id_)
Foreign-key constraints:
    "fk_lcwyx1va36145pv0w7f8dxqc8" FOREIGN KEY (address_) REFERENCES address(id__)
Has OIDs: no

/ volgende session	,
		  	address=(Address)session.get(Address.class, 12l);
		  	
		  	Employee employee4=new Employee(4l, "Foo4", 4.0);
		  	address.getEmployees().add(employee4);
		  	session.save(employee4);

		  	employee2=(Employee)session.get(Employee.class, 2l);
		  	address.getEmployees().remove(employee2);

/ we zien	,

Hibernate: select address0_.id__ as id__1_0_0_, address0_.address_line1__ as address_2_0_0_, address0_.zipcode__ as zipcode_3_0_0_, address0_.city_ as city_4_0_0_ from address address0_ where address0_.id__=?
HibernateLog --> 14:27:07 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
Address.setId()
HibernateLog --> 14:27:07 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [foostreet]
HibernateLog --> 14:27:07 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [12 foo]
HibernateLog --> 14:27:07 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city_4_0_0_] : [VARCHAR]) - [FooCity12]
HibernateLog --> 14:27:08 TRACE org.hibernate.type.CollectionType - Created collection wrapper: [my.test.own.hibernate_xml_1_N_ehcache.Address.employees#12]

Hibernate: select employees0_.address_ as address_4_0_0_, employees0_.id_ as id_1_1_0_, employees0_.id_ as id_1_1_1_, employees0_.name_ as name_2_1_1_, employees0_.salary_ as salary_3_1_1_ from employee employees0_ where employees0_.address_=?
HibernateLog --> 14:27:14 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
HibernateLog --> 14:27:14 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [1]
HibernateLog --> 14:27:14 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo1]
HibernateLog --> 14:27:14 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [1.0]
HibernateLog --> 14:27:14 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [12]
HibernateLog --> 14:27:14 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [1]
HibernateLog --> 14:27:14 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [2]
HibernateLog --> 14:27:14 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo2]
HibernateLog --> 14:27:14 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [2.0]
HibernateLog --> 14:27:14 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [12]
HibernateLog --> 14:27:14 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [2]


	        	tx.commit();

/ we zien	,
Hibernate: insert into employee (name_, salary_, address_, id_) values (?, ?, ?, ?)
HibernateLog --> 14:28:43 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [Foo4]
HibernateLog --> 14:28:43 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [DOUBLE] - [4.0]
HibernateLog --> 14:28:43 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [BIGINT] - [12]
HibernateLog --> 14:28:43 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [4] as [BIGINT] - [4]

Hibernate: update employee set address_=? where id_=?
HibernateLog --> 14:28:43 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
HibernateLog --> 14:28:43 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [4]

/ we zien	,
foo=> select*from employee;
 id_ | name_ | salary_ | address_ 
-----+-------+---------+----------
   1 | Foo1  |       1 |       12
   2 | Foo2  |       2 |       12
   4 | Foo4  |       4 |       12
(3 rows)

/ de de remove van employee#2 is NIET gedaan	,
/ TODO (Collection...Action.execute)

/ 13

/  1_N_ehcache, 1-N unidir	, 

/ when <set inverse=false><key not-null=false>	, 

/ Address	,
  	<set
 		name="employees"
 		inverse="false"
 	>
 		<key
 			column="address_"
 			not-null="false"
 			update="true"
 		/>
 		<one-to-many class="Employee"/>
 	</set>

/ Main	,
			Address address=new Address(12l,"foostreet", "12 foo", "FooCity12");
			Employee employee=new Employee(1l,"Foo1",1.00);
			address.getEmployees().add(employee);
			Employee employee2=new Employee(2l,"Foo2",2.00);
			address.getEmployees().add(employee2);
			
			session.save(address);
			session.save(employee);
			session.save(employee2);
		
			tx.commit();

/ we zien	,
HibernateLog --> 14:35:41 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [foostreet]
HibernateLog --> 14:35:41 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [VARCHAR] - [12 foo]
HibernateLog --> 14:35:41 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [VARCHAR] - [FooCity12]
HibernateLog --> 14:35:41 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [4] as [BIGINT] - [12]

Hibernate: insert into employee (name_, salary_, id_) values (?, ?, ?)
HibernateLog --> 14:35:41 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [Foo1]
HibernateLog --> 14:35:41 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [DOUBLE] - [1.0]
HibernateLog --> 14:35:41 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [BIGINT] - [1]

Hibernate: insert into employee (name_, salary_, id_) values (?, ?, ?)
HibernateLog --> 14:35:41 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [Foo2]
HibernateLog --> 14:35:41 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [DOUBLE] - [2.0]
HibernateLog --> 14:35:41 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [BIGINT] - [2]

Hibernate: update employee set address_=? where id_=?
HibernateLog --> 14:35:41 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
HibernateLog --> 14:35:41 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [2]

Hibernate: update employee set address_=? where id_=?
HibernateLog --> 14:35:41 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
HibernateLog --> 14:35:41 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [1]


/ als we <key not-null=false>	, dan is er ook een address_ col in de employee table, maar er is geen extra H prop	, en er wordt dus null insert	, wat kan, want de constraint is er niet	, en de coll recreate action updates dan toch address_	, 

/ we zien	,
foo=> \d+ employee
                                Table "public.employee"
  Column  |          Type          | Modifiers | Storage  | Stats target | Description 
----------+------------------------+-----------+----------+--------------+-------------
 id_      | bigint                 | not null  | plain    |              | 
 name_    | character varying(255) |           | extended |              | 
 salary_  | double precision       |           | plain    |              | 
 address_ | bigint                 |           | plain    |              | 
Indexes:
    "employee_pkey" PRIMARY KEY, btree (id_)
Foreign-key constraints:
    "fk_lcwyx1va36145pv0w7f8dxqc8" FOREIGN KEY (address_) REFERENCES address(id__)
Has OIDs: no

/ we zien geen not-null constraint	,
/ we zien in de insert ook geen address_ column	, dus in feite null,	 de collection recreate action updates address_	,

/ new session	,
		  	address=(Address)session.get(Address.class, 12l);
		  	
		  	Employee employee4=new Employee(4l, "Foo4", 4.0);
		  	address.getEmployees().add(employee4);
		  	session.save(employee4);

		  	employee2=(Employee)session.get(Employee.class, 2l);
		  	address.getEmployees().remove(employee2);

/ we zien	,

Hibernate: select address0_.id__ as id__1_0_0_, address0_.address_line1__ as address_2_0_0_, address0_.zipcode__ as zipcode_3_0_0_, address0_.city_ as city_4_0_0_ from address address0_ where address0_.id__=?
HibernateLog --> 14:40:14 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
Address.setId()
HibernateLog --> 14:40:14 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [foostreet]
HibernateLog --> 14:40:14 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [12 foo]
HibernateLog --> 14:40:14 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city_4_0_0_] : [VARCHAR]) - [FooCity12]
HibernateLog --> 14:40:14 TRACE org.hibernate.type.CollectionType - Created collection wrapper: [my.test.own.hibernate_xml_1_N_ehcache.Address.employees#12]

Hibernate: select employees0_.address_ as address_4_0_0_, employees0_.id_ as id_1_1_0_, employees0_.id_ as id_1_1_1_, employees0_.name_ as name_2_1_1_, employees0_.salary_ as salary_3_1_1_ from employee employees0_ where employees0_.address_=?
HibernateLog --> 14:40:17 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
HibernateLog --> 14:40:17 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [2]
HibernateLog --> 14:40:17 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo2]
HibernateLog --> 14:40:17 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [2.0]
HibernateLog --> 14:40:17 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [12]
HibernateLog --> 14:40:17 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [2]
HibernateLog --> 14:40:17 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [1]
HibernateLog --> 14:40:17 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo1]
HibernateLog --> 14:40:17 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [1.0]
HibernateLog --> 14:40:17 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [12]
HibernateLog --> 14:40:17 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [1]

			tx.commit();
/ we zien	,

Hibernate: insert into employee (name_, salary_, id_) values (?, ?, ?)
HibernateLog --> 14:41:50 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [Foo4]
HibernateLog --> 14:41:50 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [DOUBLE] - [4.0]
HibernateLog --> 14:41:50 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [BIGINT] - [4]

Hibernate: update employee set address_=null where address_=? and id_=?
HibernateLog --> 14:41:50 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
HibernateLog --> 14:41:50 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [2]

Hibernate: update employee set address_=? where id_=?
HibernateLog --> 14:41:50 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
HibernateLog --> 14:41:50 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [4]

/ we zien	,
foo=> select*from employee;
 id_ | name_ | salary_ | address_ 
-----+-------+---------+----------
   1 | Foo1  |       1 |       12
   2 | Foo2  |       2 |         
   4 | Foo4  |       4 |       12
(3 rows)



/ 1313	,

/ Als we <key not-null="true"> moet de volgorde moet precies zo zijn als bij N-1 unidir	,  eerst .save(address), dan .seve(employee)	, 
/ Dat is logisch, omdat voor .save employee  geen transient props mag hebben,
 maar als we <key not-null="false"> kunnen we .save(employee) en daarna .save(address),	 omdat Employee geen Address prop heeft,	 
/ Als <key not-null="true"> en we de volgorde verwisselen	,

			session.save(employee);
			session.save(address);
/ ERR

org.hibernate.PropertyValueException: not-null property references a null or transient value : my.test.own.hibernate_xml_1_N_ehcache.Employee._my.test.own.hibernate_xml_1_N_ehcache.Address.employeesBackref
	at org.hibernate.engine.internal.Nullability.checkNullability(Nullability.java:106)
	at org.hibernate.action.internal.AbstractEntityInsertAction.nullifyTransientReferencesIfNotAlready(AbstractEntityInsertAction.java:132)
	at org.hibernate.action.internal.AbstractEntityInsertAction.makeEntityManaged(AbstractEntityInsertAction.java:141)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:201)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:179)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:166)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:332)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:288)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:194)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:137)
	at org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.saveWithGeneratedOrRequestedId(DefaultSaveOrUpdateEventListener.java:209)
	at org.hibernate.event.internal.DefaultSaveEventListener.saveWithGeneratedOrRequestedId(DefaultSaveEventListener.java:55)
	at org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.entityIsTransient(DefaultSaveOrUpdateEventListener.java:194)
	at org.hibernate.event.internal.DefaultSaveEventListener.performSaveOrUpdate(DefaultSaveEventListener.java:49)
	at org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.onSaveOrUpdate(DefaultSaveOrUpdateEventListener.java:90)
	at org.hibernate.internal.SessionImpl.fireSave(SessionImpl.java:715)
	at org.hibernate.internal.SessionImpl.save(SessionImpl.java:707)
	at org.hibernate.internal.SessionImpl.save(SessionImpl.java:702)
	at my.test.own.hibernate_xml_1_N_ehcache.Main.testBasicUsage(Main.java:124)
	at my.test.own.hibernate_xml_1_N_ehcache.Main.<init>(Main.java:63)
	at my.test.own.hibernate_xml_1_N_ehcache.Main.main(Main.java:57)

/ we zien dat de ERR is tijdens addInsertAction	,
/ Bij 1_N unidir	,
org.hibernate.TransientPropertyValueException: Not-null property references a transient value - transient instance must be saved before current operation : my.test.own.hibernate_xml_N_1_ehcache.Employee.address -> my.test.own.hibernate_xml_N_1_ehcache.Address
	at org.hibernate.action.internal.UnresolvedEntityInsertActions.checkNoUnresolvedActionsAfterOperation(UnresolvedEntityInsertActions.java:137)
	at org.hibernate.engine.spi.ActionQueue.checkNoUnresolvedActionsAfterOperation(ActionQueue.java:318)
	at org.hibernate.internal.SessionImpl.checkNoUnresolvedActionsAfterOperation(SessionImpl.java:658)
	at org.hibernate.internal.SessionImpl.fireSave(SessionImpl.java:717)
	at org.hibernate.internal.SessionImpl.save(SessionImpl.java:707)
	at org.hibernate.internal.SessionImpl.save(SessionImpl.java:702)
	at my.test.own.hibernate_xml_N_1_ehcache.Main.testBasicUsage(Main.java:128)
	at my.test.own.hibernate_xml_N_1_ehcache.Main.<init>(Main.java:63)
	at my.test.own.hibernate_xml_N_1_ehcache.Main.main(Main.java:57)
/ TODO

/ 13	.

/ RM

/  1-N unidir	, <set inverse=false><key not-null=false>

/ we zien maar 1 query voor de fk	,
////////////////////////////////////////////////////

/ Address	,
  	<set
 		name="employees"
 		inverse="false"
 	>
 		<key
 			column="address_"
 			not-null="false"
 			update="true"
 		/>
 		<one-to-many class="Employee"/>
 	</set>

/ Main	,

			Address address=new Address(12l,"foostreet", "12 foo", "FooCity12");
			Employee employee=new Employee(1l,"Foo1",1.00);
			address.getEmployees().add(employee);
			Employee employee2=new Employee(2l,"Foo2",2.00);
			address.getEmployees().add(employee2);

			session.save(employee);
			session.save(address);
// .save(employee) voor .save(address) kan	, 
			session.save(employee2);

 			tx.commit();
 
/ we zien	,

Hibernate: insert into address (address_line1__, zipcode__, city_, id__) values (?, ?, ?, ?)
HibernateLog --> 09:34:10 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [foostreet]
HibernateLog --> 09:34:10 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [VARCHAR] - [12 foo]
HibernateLog --> 09:34:10 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [VARCHAR] - [FooCity12]
HibernateLog --> 09:34:10 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [4] as [BIGINT] - [12]

Hibernate: insert into employee (name_, salary_, id_) values (?, ?, ?)
HibernateLog --> 09:34:10 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [Foo1]
HibernateLog --> 09:34:10 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [DOUBLE] - [1.0]
HibernateLog --> 09:34:10 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [BIGINT] - [1]

Hibernate: insert into employee (name_, salary_, id_) values (?, ?, ?)
HibernateLog --> 09:34:10 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [Foo2]
HibernateLog --> 09:34:10 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [DOUBLE] - [2.0]
HibernateLog --> 09:34:10 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [BIGINT] - [2]

Hibernate: update employee set address_=? where id_=?
HibernateLog --> 09:34:10 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
HibernateLog --> 09:34:10 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [2]

Hibernate: update employee set address_=? where id_=?
HibernateLog --> 09:34:10 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
HibernateLog --> 09:34:10 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [1]

/ Het klopt	, 
/ Door <key not-null=false> zien we geen not-null constraint in de fk	,
foo=> \d+ employee
                                Table "public.employee"
  Column  |          Type          | Modifiers | Storage  | Stats target | Description 
----------+------------------------+-----------+----------+--------------+-------------
 id_      | bigint                 | not null  | plain    |              | 
 name_    | character varying(255) |           | extended |              | 
 salary_  | double precision       |           | plain    |              | 
 address_ | bigint                 |           | plain    |              | 
Indexes:
    "employee_pkey" PRIMARY KEY, btree (id_)
Foreign-key constraints:
    "fk_lcwyx1va36145pv0w7f8dxqc8" FOREIGN KEY (address_) REFERENCES address(id__)
Has OIDs: no

/ de employee's worden in de laatste 2 queries add aan de coll	, daar wordt de fk set in de employee's	,

/ we zien dat de employee's entry's geen extra prop krijgen	, vandaar dat er geen value wordt insert	, 

/ WH we zien de fk maar aan een kant insert	, want we zien geen null insert in de employee's

/ 13	.

/ 1-N unidir , koppel tabel	,

/ we moeten, en doen eerst	,
	unique="true"

/ Address	,
 	<set
 		name="employees"
 		inverse="false"
 		>
 		<key
 			column="address_"		/ NIET in employee tbl, maar in koppel tbl address_employees	, 
 			not-null="true/false"
 			update="true"
 		></key>
<!--  		
		<one-to-many class="Employee"/>
 --> 	
 		<many-to-many 				/ koppel tbl	,
 			column="employee_"
 			unique="true"	
 			class="Employee"
 		/>	
 
 		</set>

/ Main	,
			Address address=new Address(12l,"foostreet", "12 foo", "FooCity12");
			Employee employee=new Employee(1l,"Foo1",1.00);
			address.getEmployees().add(employee);
			Employee employee2=new Employee(2l,"Foo2",2.00);
			address.getEmployees().add(employee2);
			
			session.save(employee);
			session.save(address);
			session.save(employee2);

			tx.commit();

/ een many-to-many gaat beide kanten op 	, dus daarom is <many-to-many ...> row in koppel tbl	,

/ we moeten <one-to-many ...> vervangen door <many-to-many unique="true" column="employee_" ...>

/ 1-N:

a - e1
  \ e2
  /	
a2	/ NIET

/ 1-N: In de koppel table : employee_ unique	, (hierboven zou e2 2 keer voorkomen)	,
////////////////////////

/ <key not-null="true/false"> maakt niet uit	,
/ TODO

/ we kunnen nu address .save NA employee .save	,
/ TODO

/ we zien	,

foo=> \d+ employee
                               Table "public.employee"
 Column  |          Type          | Modifiers | Storage  | Stats target | Description 
---------+------------------------+-----------+----------+--------------+-------------
 id_     | bigint                 | not null  | plain    |              | 
 name_   | character varying(255) |           | extended |              | 
 salary_ | double precision       |           | plain    |              | 
Indexes:
    "employee_pkey" PRIMARY KEY, btree (id_)

foo=> \d+ address_employees
                   Table "public.address_employees"
  Column   |  Type  | Modifiers | Storage | Stats target | Description 
-----------+--------+-----------+---------+--------------+-------------
 address_  | bigint | not null  | plain   |              | 
 employee_ | bigint | not null  | plain   |              | 
Indexes:
    "address_employees_pkey" PRIMARY KEY, btree (address_, employee_)
  "uk_pfjhypr3roqawxjipeash0vtn" UNIQUE CONSTRAINT, btree (employee_)
Foreign-key constraints:
    "fk_7uqxbshgfhi9okm1yot3bqsbs" FOREIGN KEY (address_) REFERENCES address(id__)
    "fk_pfjhypr3roqawxjipeash0vtn" FOREIGN KEY (employee_) REFERENCES employee(id_)
Has OIDs: no

foo=> select*from address_employees;
 address_ | employee_ 
----------+-----------
       12 |         1
       12 |         2
(2 rows)

Hibernate: insert into address (address_line1__, zipcode__, city_, id__) values (?, ?, ?, ?)
HibernateLog --> 10:23:13 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [foostreet]
HibernateLog --> 10:23:13 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [VARCHAR] - [12 foo]
HibernateLog --> 10:23:13 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [VARCHAR] - [FooCity12]
HibernateLog --> 10:23:13 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [4] as [BIGINT] - [12]

Hibernate: insert into employee (name_, salary_, id_) values (?, ?, ?)
HibernateLog --> 10:23:13 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [Foo1]
HibernateLog --> 10:23:13 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [DOUBLE] - [1.0]
HibernateLog --> 10:23:13 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [BIGINT] - [1]

Hibernate: insert into employee (name_, salary_, id_) values (?, ?, ?)
HibernateLog --> 10:23:13 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [Foo2]
HibernateLog --> 10:23:13 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [DOUBLE] - [2.0]
HibernateLog --> 10:23:13 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [BIGINT] - [2]

Hibernate: insert into address_employees (address_, foo_) values (?, ?)
HibernateLog --> 10:23:13 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
HibernateLog --> 10:23:13 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [2]

Hibernate: insert into address_employees (address_, foo_) values (?, ?)
HibernateLog --> 10:23:13 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
HibernateLog --> 10:23:13 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [1]

/ In de schema van de employee tbl is geen address_ col, dus er wordt geen null insert	,

/ we zien dat de fk maar 1 keer wordt insert	,

/ 13	.

/ 1-N bidir	, koppel tbl	,

/ new session	,

Hibernate: insert into address (address_line1__, zipcode__, city_, id__) values (?, ?, ?, ?)
HibernateLog --> 17:15:56 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [foostreet]
HibernateLog --> 17:15:56 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [VARCHAR] - [12 foo]
HibernateLog --> 17:15:56 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [VARCHAR] - [FooCity12]
HibernateLog --> 17:15:56 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [4] as [BIGINT] - [12]

Hibernate: insert into employee (name_, salary_, address_, id_) values (?, ?, ?, ?)
HibernateLog --> 17:15:56 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [Foo1]
HibernateLog --> 17:15:56 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [DOUBLE] - [1.0]
HibernateLog --> 17:15:56 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [BIGINT] - [12]
HibernateLog --> 17:15:56 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [4] as [BIGINT] - [1]

Hibernate: insert into employee (name_, salary_, address_, id_) values (?, ?, ?, ?)
HibernateLog --> 17:15:56 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [Foo2]
HibernateLog --> 17:15:56 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [DOUBLE] - [2.0]
HibernateLog --> 17:15:56 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [BIGINT] - [12]
HibernateLog --> 17:15:56 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [4] as [BIGINT] - [2]

Hibernate: insert into address_employees (address_, employee_) values (?, ?)
HibernateLog --> 17:15:56 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
HibernateLog --> 17:15:56 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [1]

Hibernate: insert into address_employees (address_, employee_) values (?, ?)
HibernateLog --> 17:15:56 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
HibernateLog --> 17:15:56 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [2]



/ 1313	.

/ Als we unique="false", kunnen we Employee in 2 Address's	,

/ Address	,
 	<set
 		name="employees"
 		inverse="false"
 		>
 		<key
 			column="address_"
 			not-null="true"
 			update="true"
 		></key>
<!--  		
		<one-to-many class="Employee"/>
 --> 	
 		<many-to-many 
 			column="employee_"
 			unique="false"	
 			class="Employee"
 		/>	
 
 	</set>

/ Main	,
			Address address=new Address(12l,"foostreet", "12 foo", "FooCity12");
			Employee employee=new Employee(1l,"Foo1",1.00);
			address.getEmployees().add(employee);
			Employee employee2=new Employee(2l,"Foo2",2.00);
			address.getEmployees().add(employee2);
			
			Address address3=new Address(34l,"foostreet", "34 foo", "FooCity34");
			address3.getEmployees().add(employee);


			session.save(employee);
			session.save(address);
			session.save(employee2);
			session.save(address3);

/ we zien	,

foo=> \d+ address_employees
                   Table "public.address_employees"
  Column   |  Type  | Modifiers | Storage | Stats target | Description 
-----------+--------+-----------+---------+--------------+-------------
 address_  | bigint | not null  | plain   |              | 
 employee_ | bigint | not null  | plain   |              | 
Indexes:
    "address_employees_pkey" PRIMARY KEY, btree (address_, employee_)
Foreign-key constraints:
    "fk_7uqxbshgfhi9okm1yot3bqsbs" FOREIGN KEY (address_) REFERENCES address(id__)
    "fk_pfjhypr3roqawxjipeash0vtn" FOREIGN KEY (employee_) REFERENCES employee(id_)
Has OIDs: no

foo=> select*from address_employees;
 address_ | employee_ 
----------+-----------
       12 |         2
       12 |         1
       34 |         1
(3 rows)

Hibernate: insert into address (address_line1__, zipcode__, city_, id__) values (?, ?, ?, ?)
HibernateLog --> 12:45:16 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [foostreet]
HibernateLog --> 12:45:16 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [VARCHAR] - [12 foo]
HibernateLog --> 12:45:16 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [VARCHAR] - [FooCity12]
HibernateLog --> 12:45:16 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [4] as [BIGINT] - [12]

Hibernate: insert into employee (name_, salary_, id_) values (?, ?, ?)
HibernateLog --> 12:45:16 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [Foo1]
HibernateLog --> 12:45:16 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [DOUBLE] - [1.0]
HibernateLog --> 12:45:16 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [BIGINT] - [1]

Hibernate: insert into employee (name_, salary_, id_) values (?, ?, ?)
HibernateLog --> 12:45:16 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [Foo2]
HibernateLog --> 12:45:16 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [DOUBLE] - [2.0]
HibernateLog --> 12:45:16 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [BIGINT] - [2]

Hibernate: insert into address (address_line1__, zipcode__, city_, id__) values (?, ?, ?, ?)
HibernateLog --> 12:45:16 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [foostreet]
HibernateLog --> 12:45:16 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [VARCHAR] - [34 foo]
HibernateLog --> 12:45:16 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [VARCHAR] - [FooCity34]
HibernateLog --> 12:45:16 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [4] as [BIGINT] - [34]

Hibernate: insert into address_employees (address_, employee_) values (?, ?)
HibernateLog --> 12:45:16 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
HibernateLog --> 12:45:16 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [2]

Hibernate: insert into address_employees (address_, employee_) values (?, ?)
HibernateLog --> 12:45:16 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
HibernateLog --> 12:45:16 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [1]

Hibernate: insert into address_employees (address_, employee_) values (?, ?)
HibernateLog --> 12:45:16 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [34]
HibernateLog --> 12:45:16 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [1]

/ 1313

/ we doen weer unique="true", en we doen een aantal coll ops	,

/ DEMO

/ Address	,
 	<set
 		name="employees"
 		inverse="false"
 	>
 		<key
 			column="address_"
 			not-null="true"
 			update="true"
 		/>
 		
<!-- 		<one-to-many class="Employee"/>
 --> 	
 		<many-to-many 
 			column="employee_"
 			unique="true"	
 			class="Employee"
 		/>	
 
 		</set>


/ Main	,

			Address address=new Address(12l,"foostreet", "12 foo", "FooCity12");
			Employee employee=new Employee(1l,"Foo1",1.00);
			address.getEmployees().add(employee);
			Employee employee2=new Employee(2l,"Foo2",2.00);
			address.getEmployees().add(employee2);

			session.save(employee);
			session.save(address);
			session.save(employee2);

			tx.commit();

/ nieuwe sessie	,
		  	address=(Address)session.get(Address.class, 12l);
		  	
		  	Employee employee4=new Employee(4l, "Foo4", 4.0);
		  	address.getEmployees().add(employee4);
		  	session.save(employee4);

		  	employee2=(Employee)session.get(Employee.class, 2l);
		  	address.getEmployees().remove(employee2);

	        	tx.commit();

/ we zien	,
foo=> select*from address_employees;
 address_ | employee_ 
----------+-----------
       12 |         1
       12 |         4
(2 rows)

Hibernate: select address0_.id__ as id__1_0_0_, address0_.address_line1__ as address_2_0_0_, address0_.zipcode__ as zipcode_3_0_0_, address0_.city_ as city_4_0_0_ from address address0_ where address0_.id__=?
HibernateLog --> 13:11:42 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
Address.setId()
HibernateLog --> 13:11:42 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [foostreet]
HibernateLog --> 13:11:42 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [12 foo]
HibernateLog --> 13:11:42 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city_4_0_0_] : [VARCHAR]) - [FooCity12]
HibernateLog --> 13:11:42 TRACE org.hibernate.type.CollectionType - Created collection wrapper: [my.test.own.hibernate_xml_1_N_ehcache.Address.employees#12]

Hibernate: select employees0_.address_ as address_1_0_0_, employees0_.employee_ as employee2_1_0_, employee1_.id_ as id_1_2_1_, employee1_.name_ as name_2_2_1_, employee1_.salary_ as salary_3_2_1_ from address_employees employees0_ inner join employee employee1_ on employees0_.employee_=employee1_.id_ where employees0_.address_=?
HibernateLog --> 13:11:42 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
HibernateLog --> 13:11:42 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_2_1_] : [BIGINT]) - [1]
HibernateLog --> 13:11:42 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_2_1_] : [VARCHAR]) - [Foo1]
HibernateLog --> 13:11:42 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_2_1_] : [DOUBLE]) - [1.0]
HibernateLog --> 13:11:42 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_1_0_0_] : [BIGINT]) - [12]
HibernateLog --> 13:11:42 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([employee2_1_0_] : [BIGINT]) - [1]
HibernateLog --> 13:11:42 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_2_1_] : [BIGINT]) - [2]
HibernateLog --> 13:11:42 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_2_1_] : [VARCHAR]) - [Foo2]
HibernateLog --> 13:11:42 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_2_1_] : [DOUBLE]) - [2.0]
HibernateLog --> 13:11:42 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_1_0_0_] : [BIGINT]) - [12]
HibernateLog --> 13:11:42 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([employee2_1_0_] : [BIGINT]) - [2]

Hibernate: insert into employee (name_, salary_, id_) values (?, ?, ?)
HibernateLog --> 13:11:42 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [Foo4]
HibernateLog --> 13:11:42 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [DOUBLE] - [4.0]
HibernateLog --> 13:11:42 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [BIGINT] - [4]

Hibernate: delete from address_employees where address_=? and employee_=?
HibernateLog --> 13:11:42 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
HibernateLog --> 13:11:42 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [2]

Hibernate: insert into address_employees (address_, employee_) values (?, ?)
HibernateLog --> 13:11:42 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
HibernateLog --> 13:11:42 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [4]



/ 1313

/ Address	,

 	<set
 		name="employees"
 		inverse="false"
 	>
 		<key
 			column="address_"			/ gaat koppel table in 	, niet employee tbl
 			not-null="false/true"
 			update="true"
 		/>
  		<many-to-many 					// koppel tbl	,
 			column="employee_"
 			unique="true"	
 			class="Employee"
 		/>	 
 
 		</set>


/ als we een coll.clear() erachter	,
/ Main	,

		  	address=(Address)session.get(Address.class, 12l);
		  	
		  	Employee employee4=new Employee(4l, "Foo4", 4.0);
		  	address.getEmployees().add(employee4);
		  	session.save(employee4);

		  	employee2=(Employee)session.get(Employee.class, 2l);
		  	address.getEmployees().remove(employee2);
		  	address.getEmployees().clear();

/ dan zien we IPV

Hibernate: delete from address_employees where address_=? and employee_=?
HibernateLog --> 13:11:42 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
HibernateLog --> 13:11:42 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [2]

Hibernate: insert into address_employees (address_, employee_) values (?, ?)
HibernateLog --> 13:11:42 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
HibernateLog --> 13:11:42 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [4]

/ deze	,
Hibernate: delete from address_employees where address_=?
HibernateLog --> 13:32:21 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]

/ TODO (Collection...Action's)




/ 1313	.

/ SAMENVATTING	1-N

/ Address	,
 	<set
 		name="employees"
 		inverse="false"
 	>
 		<key
 			column="address_"
 			not-null="true/false"
 			update="true"
 		/>
 		<many-to-many 
 			column="employee_"
 			unique="true"	
 			class="Employee"
 		/>	
 
	</set>

/ is beter dan	, 
 	<set
 		name="employees"
 		inverse="false"
 	>
 		<key
 			column="address_"
 			not-null="false"
 			update="true"
 		/>
		<one-to-many class="Employee"/> 
	</set>

/ omdat dan de fk NIET constraint not-null heeft	, omdat address field niet wordt insert  maar er toch is in het scheme	,

/ bij <many-to-one ...> is address er niet in het schema	, en omdat address_ in aparte table vindt daar de insert niet plaats als null is	,
/ TODO

/ Wat niet zo goed is, is <key not-null="true">	,  
/ Let wel op de volgorde , eerst .save(address)	, dan .save(employee)	, 

 	<set
 		name="employees"
 		inverse="false"
 	>
 		<key
 			column="address_"
 			not-null="true"
 			update="true"
 		/>
		<one-to-many class="Employee"/> 
	</set>

/ Main	,
			Address address=new Address(12l,"foostreet", "12 foo", "FooCity12");
			Employee employee=new Employee(1l,"Foo1",1.00);
			address.getEmployees().add(employee);
			Employee employee2=new Employee(2l,"Foo2",2.00);
			address.getEmployees().add(employee2);

			session.save(address);
			session.save(employee);
			session.save(employee2);

			tx.commit();

/ want Employee's entry krijgt een extra H prop	, en wordt dus 2 keer insert	,

Hibernate: insert into address (address_line1__, zipcode__, city_, id__) values (?, ?, ?, ?)
HibernateLog --> 13:59:31 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [foostreet]
HibernateLog --> 13:59:31 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [VARCHAR] - [12 foo]
HibernateLog --> 13:59:31 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [VARCHAR] - [FooCity12]
HibernateLog --> 13:59:31 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [4] as [BIGINT] - [12]

Hibernate: insert into employee (name_, salary_, address_, id_) values (?, ?, ?, ?)
HibernateLog --> 13:59:31 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [Foo1]
HibernateLog --> 13:59:31 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [DOUBLE] - [1.0]
HibernateLog --> 13:59:31 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [BIGINT] - [12]
HibernateLog --> 13:59:31 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [4] as [BIGINT] - [1]

Hibernate: insert into employee (name_, salary_, address_, id_) values (?, ?, ?, ?)
HibernateLog --> 13:59:31 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [Foo2]
HibernateLog --> 13:59:31 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [DOUBLE] - [2.0]
HibernateLog --> 13:59:31 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [BIGINT] - [12]
HibernateLog --> 13:59:31 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [4] as [BIGINT] - [2]

Hibernate: update employee set address_=? where id_=?
HibernateLog --> 13:59:31 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
HibernateLog --> 13:59:31 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [1]

Hibernate: update employee set address_=? where id_=?
HibernateLog --> 13:59:31 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
HibernateLog --> 13:59:31 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [2]


/ 13	.


/ N-1 bidir, in N_1_bidir_ehcache	,

/ waarom willen we bidir	, als we N-1 unidir hebben?

/ Omdat we dan kunnen doen	,

		Set<Employee>employees=address.getEmployees();  
/ Kan NIET bij unidir	,
	        Iterator<Employee>iterator=employees.iterator(); 

		query=session.createQuery("select a.employees from Address a where a.zipcode=:z");
/ Kan NIET bij unidir	,
		query.setParameter("z", "12 foo");
		employees4=query.list();
	        iterator=employees4.iterator();

/ Deze query kan WEL bij unidir	,

		  	address=(Address)session.get(Address.class, 12l);
		  	Query query=session.createQuery("select e from Employee e where e.address=:address");
		  	query.setParameter("address", address);
		  	List<Employee>employees4=query.list();
	        	iterator=employees4.iterator();

/ Address	,
	<set
 		name="employees"
 		inverse="true"
 	>
 		<key
 			column="address_"
 			not-null="true/false"
 		/>
 		<one-to-many class="Employee"/>
 	</set>

/ Employee	,
	<many-to-one 
		name="address"
		column="address_"
		not-null="true"

	/>

/ omdat inverse="true"	, maakt niet uit	,
 			not-null="true/false"

/ Main	,
			Employee employee=new Employee(1l,"Foo1",1.00);
			Employee employee2=new Employee(2l,"Foo2",2.00);
			Address address=new Address(12l,"foostreet", "12 foo", "FooCity12");
			
			employee.setAddress(address);
			address.getEmployees().add(employee);
			employee2.setAddress(address);
			address.getEmployees().add(employee);
			
			session.save(address);
/ Eerst	,
			session.save(employee);
			session.save(employee2);

			tx.commit();

/ new session	,
	        	address=(Address)session.get(Address.class, 12l); 
			Set<Employee>employees=address.getEmployees(); 
// kan niet bij unidir
	        	Iterator<Employee>iterator=employees.iterator(); 

/ new session	,
		  	address=(Address)session.get(Address.class, 12l);
		  	Query query=session.createQuery("select e from Employee e where e.address=:address");
/ Kan wel in unidir	,
		  	query.setParameter("address", address);
		  	List<Employee>employees4=query.list();
	        	iterator=employees4.iterator();

/ new session	,
		  	
		  	query=session.createQuery("select a.employees from Address a where a.zipcode=:z");
// kan niet bij unidir
		  	query.setParameter("z", "12 foo");
		  	employees4=query.list();
	        	iterator=employees4.iterator();

/ we zien	,

Hibernate: insert into address (address_line1__, zipcode__, city__, id__) values (?, ?, ?, ?)
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [foostreet]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [VARCHAR] - [12 foo]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [VARCHAR] - [FooCity12]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [4] as [BIGINT] - [12]

Hibernate: insert into employee (name_, salary_, address_, id_) values (?, ?, ?, ?)
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [Foo1]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [DOUBLE] - [1.0]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [BIGINT] - [12]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [4] as [BIGINT] - [1]

Hibernate: insert into employee (name_, salary_, address_, id_) values (?, ?, ?, ?)
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [Foo2]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [DOUBLE] - [2.0]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [BIGINT] - [12]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [4] as [BIGINT] - [2]

/ Precies hetzelfde als bij unidir	,

/ new session	,

Hibernate: select address0_.id__ as id__1_0_0_, address0_.address_line1__ as address_2_0_0_, address0_.zipcode__ as zipcode_3_0_0_, address0_.city__ as city__4_0_0_ from address address0_ where address0_.id__=?
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
Address.setId()
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [foostreet]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [12 foo]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_0_] : [VARCHAR]) - [FooCity12]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.CollectionType - Created collection wrapper: [my.test.own.hibernate_xml_N_1_bidir_ehcache.Address.employees#12]

Hibernate: select employees0_.address_ as address_4_0_0_, employees0_.id_ as id_1_1_0_, employees0_.id_ as id_1_1_1_, employees0_.name_ as name_2_1_1_, employees0_.salary_ as salary_3_1_1_, employees0_.address_ as address_4_1_1_ from employee employees0_ where employees0_.address_=?
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [1]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo1]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [1.0]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [12]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [12]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [1]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [2]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo2]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [2.0]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [12]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [12]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [2]

/ new session	,


Hibernate: select address0_.id__ as id__1_0_0_, address0_.address_line1__ as address_2_0_0_, address0_.zipcode__ as zipcode_3_0_0_, address0_.city__ as city__4_0_0_ from address address0_ where address0_.id__=?
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
Address.setId()
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [foostreet]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [12 foo]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_0_] : [VARCHAR]) - [FooCity12]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.CollectionType - Created collection wrapper: [my.test.own.hibernate_xml_N_1_bidir_ehcache.Address.employees#12]

Hibernate: select employees0_.address_ as address_4_0_0_, employees0_.id_ as id_1_1_0_, employees0_.id_ as id_1_1_1_, employees0_.name_ as name_2_1_1_, employees0_.salary_ as salary_3_1_1_, employees0_.address_ as address_4_1_1_ from employee employees0_ where employees0_.address_=?
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [1]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo1]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [1.0]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [12]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [12]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [1]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [2]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo2]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [2.0]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [12]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [12]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [2]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [4]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [foostreet]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [4.0]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [12]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [12]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [4]

/ new session	,

Hibernate: select employee0_.id_ as id_1_1_, employee0_.name_ as name_2_1_, employee0_.salary_ as salary_3_1_, employee0_.address_ as address_4_1_ from employee employee0_ where employee0_.address_=?
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_] : [BIGINT]) - [1]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_] : [VARCHAR]) - [Foo1]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_] : [DOUBLE]) - [1.0]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_] : [BIGINT]) - [12]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_] : [BIGINT]) - [2]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_] : [VARCHAR]) - [Foo2]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_] : [DOUBLE]) - [2.0]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_] : [BIGINT]) - [12]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_] : [BIGINT]) - [4]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_] : [VARCHAR]) - [foostreet]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_] : [DOUBLE]) - [4.0]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_] : [BIGINT]) - [12]

/ new session	,


Hibernate: select employees1_.id_ as id_1_1_, employees1_.name_ as name_2_1_, employees1_.salary_ as salary_3_1_, employees1_.address_ as address_4_1_ from address address0_ inner join employee employees1_ on address0_.id__=employees1_.address_ where address0_.zipcode__=?
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [12 foo]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_] : [BIGINT]) - [1]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_] : [VARCHAR]) - [Foo1]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_] : [DOUBLE]) - [1.0]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_] : [BIGINT]) - [12]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_] : [BIGINT]) - [2]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_] : [VARCHAR]) - [Foo2]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_] : [DOUBLE]) - [2.0]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_] : [BIGINT]) - [12]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_] : [BIGINT]) - [4]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_] : [VARCHAR]) - [foostreet]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_] : [DOUBLE]) - [4.0]
HibernateLog --> 16:24:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_] : [BIGINT]) - [12]

/ 13	. 

/ 1-N 	, 1_N_list_bidir_ehcache	,

/ boek (292) als de assoc <set inverse="true"> , dan zijn er geen Collection...Action's	, 


/ 1ste session

/ .commit

Hibernate: insert into address (address_line1__, zipcode__, city_, id__) values (?, ?, ?, ?)
HibernateLog --> 07:59:02 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [foostreet]
HibernateLog --> 07:59:02 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [VARCHAR] - [12 foo]
HibernateLog --> 07:59:02 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [VARCHAR] - [FooCity12]
HibernateLog --> 07:59:02 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [4] as [BIGINT] - [12]

Hibernate: insert into employee (name_, salary_, id_) values (?, ?, ?)
HibernateLog --> 07:59:02 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [Foo1]
HibernateLog --> 07:59:02 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [DOUBLE] - [1.0]
HibernateLog --> 07:59:02 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [BIGINT] - [1]

Hibernate: insert into employee (name_, salary_, id_) values (?, ?, ?)
HibernateLog --> 07:59:02 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [Foo2]
HibernateLog --> 07:59:02 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [DOUBLE] - [2.0]
HibernateLog --> 07:59:02 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [BIGINT] - [2]

Hibernate: insert into employee (name_, salary_, id_) values (?, ?, ?)
HibernateLog --> 07:59:02 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [Foo3]
HibernateLog --> 07:59:02 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [DOUBLE] - [3.0]
HibernateLog --> 07:59:02 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [BIGINT] - [3]

Hibernate: update employee set address_=?, index_=? where id_=?
HibernateLog --> 07:59:02 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
HibernateLog --> 07:59:02 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [INTEGER] - [0]
HibernateLog --> 07:59:02 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [BIGINT] - [1]

Hibernate: update employee set address_=?, index_=? where id_=?
HibernateLog --> 07:59:02 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
HibernateLog --> 07:59:02 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [INTEGER] - [1]
HibernateLog --> 07:59:02 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [BIGINT] - [2]

Hibernate: update employee set address_=?, index_=? where id_=?
HibernateLog --> 07:59:02 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
HibernateLog --> 07:59:02 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [INTEGER] - [2]
HibernateLog --> 07:59:02 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [BIGINT] - [3]

/ 2de session

/ .get(12l)
/ .iterator

Hibernate: select address0_.id__ as id__1_0_0_, address0_.address_line1__ as address_2_0_0_, address0_.zipcode__ as zipcode_3_0_0_, address0_.city_ as city_4_0_0_ from address address0_ where address0_.id__=?
HibernateLog --> 08:01:02 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
Address.setId()
HibernateLog --> 08:01:02 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [foostreet]
HibernateLog --> 08:01:02 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [12 foo]
HibernateLog --> 08:01:02 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city_4_0_0_] : [VARCHAR]) - [FooCity12]
HibernateLog --> 08:01:02 TRACE org.hibernate.type.CollectionType - Created collection wrapper: [my.test.own.hibernate_xml_1_N_list_bidir_ehcache.Address.employees#12]

Hibernate: select employees0_.address_ as address_4_0_0_, employees0_.id_ as id_1_1_0_, employees0_.index_ as index_5_0_, employees0_.id_ as id_1_1_1_, employees0_.name_ as name_2_1_1_, employees0_.salary_ as salary_3_1_1_, employees0_.address_ as address_4_1_1_ from employee employees0_ where employees0_.address_=?
HibernateLog --> 08:01:09 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
HibernateLog --> 08:01:09 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [1]
HibernateLog --> 08:01:09 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo1]
HibernateLog --> 08:01:09 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [1.0]
HibernateLog --> 08:01:09 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [12]
HibernateLog --> 08:01:09 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [12]
HibernateLog --> 08:01:09 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [1]
HibernateLog --> 08:01:09 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([index_5_0_] : [INTEGER]) - [0]
HibernateLog --> 08:01:09 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [2]
HibernateLog --> 08:01:09 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo2]
HibernateLog --> 08:01:09 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [2.0]
HibernateLog --> 08:01:09 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [12]
HibernateLog --> 08:01:09 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [12]
HibernateLog --> 08:01:09 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [2]
HibernateLog --> 08:01:09 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([index_5_0_] : [INTEGER]) - [1]
HibernateLog --> 08:01:09 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [3]
HibernateLog --> 08:01:09 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo3]
HibernateLog --> 08:01:09 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [3.0]
HibernateLog --> 08:01:09 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [12]
HibernateLog --> 08:01:09 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [12]
HibernateLog --> 08:01:09 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [3]
HibernateLog --> 08:01:09 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([index_5_0_] : [INTEGER]) - [2]

/ 3de session

/ .remove(0)

Hibernate: select address0_.id__ as id__1_0_0_, address0_.address_line1__ as address_2_0_0_, address0_.zipcode__ as zipcode_3_0_0_, address0_.city_ as city_4_0_0_ from address address0_ where address0_.id__=?
HibernateLog --> 08:02:49 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
Address.setId()
HibernateLog --> 08:02:49 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [foostreet]
HibernateLog --> 08:02:49 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [12 foo]
HibernateLog --> 08:02:49 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city_4_0_0_] : [VARCHAR]) - [FooCity12]
HibernateLog --> 08:02:49 TRACE org.hibernate.type.CollectionType - Created collection wrapper: [my.test.own.hibernate_xml_1_N_list_bidir_ehcache.Address.employees#12]

Hibernate: select employees0_.address_ as address_4_0_0_, employees0_.id_ as id_1_1_0_, employees0_.index_ as index_5_0_, employees0_.id_ as id_1_1_1_, employees0_.name_ as name_2_1_1_, employees0_.salary_ as salary_3_1_1_, employees0_.address_ as address_4_1_1_ from employee employees0_ where employees0_.address_=?
HibernateLog --> 08:02:57 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
HibernateLog --> 08:02:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [1]
HibernateLog --> 08:02:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo1]
HibernateLog --> 08:02:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [1.0]
HibernateLog --> 08:02:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [12]
HibernateLog --> 08:02:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [12]
HibernateLog --> 08:02:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [1]
HibernateLog --> 08:02:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([index_5_0_] : [INTEGER]) - [0]
HibernateLog --> 08:02:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [2]
HibernateLog --> 08:02:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo2]
HibernateLog --> 08:02:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [2.0]
HibernateLog --> 08:02:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [12]
HibernateLog --> 08:02:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [12]
HibernateLog --> 08:02:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [2]
HibernateLog --> 08:02:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([index_5_0_] : [INTEGER]) - [1]
HibernateLog --> 08:02:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [3]
HibernateLog --> 08:02:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo3]
HibernateLog --> 08:02:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [3.0]
HibernateLog --> 08:02:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [12]
HibernateLog --> 08:02:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [12]
HibernateLog --> 08:02:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [3]
HibernateLog --> 08:02:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([index_5_0_] : [INTEGER]) - [2]

/ .commit

Hibernate: update employee set address_=null, index_=null where address_=? and id_=?
HibernateLog --> 08:04:52 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
HibernateLog --> 08:04:52 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [1]

Hibernate: update employee set address_=null, index_=null where address_=? and id_=?
HibernateLog --> 08:04:52 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
HibernateLog --> 08:04:52 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [2]

Hibernate: update employee set address_=null, index_=null where address_=? and id_=?
HibernateLog --> 08:04:52 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
HibernateLog --> 08:04:52 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [3]

Hibernate: update employee set address_=?, index_=? where id_=?
HibernateLog --> 08:04:52 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
HibernateLog --> 08:04:52 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [INTEGER] - [0]
HibernateLog --> 08:04:52 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [BIGINT] - [2]

Hibernate: update employee set address_=?, index_=? where id_=?
HibernateLog --> 08:04:52 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
HibernateLog --> 08:04:52 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [INTEGER] - [1]
HibernateLog --> 08:04:52 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [BIGINT] - [3]

Hibernate: update employee set address_=?, index_=? where id_=?
HibernateLog --> 08:04:52 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
HibernateLog --> 08:04:52 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [INTEGER] - [2]
HibernateLog --> 08:04:52 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [BIGINT] - [1]

/ .remove calls .setDirty	,
/s
Collections.prepareCollectionForUpdate(PersistentCollection, CollectionEntry, SessionFactoryImplementor) line: 264	
			else if ( collection.isDirty() ) {
				entry.setDoupdate( true );
/t
/s
DefaultFlushEventListener(AbstractFlushingEventListener).flushCollections(EventSource, PersistenceContext) line: 296	
			if ( ce.isDoupdate() ) {
				session.getInterceptor().onCollectionUpdate( coll, ce.getLoadedKey() );
				actionQueue.addAction(
						new CollectionUpdateAction(
								coll,
								ce.getLoadedPersister(),
								ce.getLoadedKey(),
								ce.isSnapshotEmpty(coll),
/t
/s
CollectionUpdateAction.execute() line: 68	
		else {
			persister.deleteRows( collection, id, session );
			persister.updateRows( collection, id, session );
			persister.insertRows( collection, id, session );
		}
/ In detail	,
		else {
			persister.deleteRows( collection, id, session );
/s
OneToManyPersister(AbstractCollectionPersister).deleteRows(PersistentCollection, Serializable, SessionImplementor) line: 1374	
		if ( !isInverse && isRowDeleteEnabled() ) {
/s
		return keyIsUpdateable && keyIsNullable;
true
/t
			boolean deleteByIndex = !isOneToMany() && hasIndex && !indexContainsFormula;
				// delete all the deleted entries
				Iterator deletes = collection.getDeletes( this, !deleteByIndex );
				if ( deletes.hasNext() ) {
/ NEE

/t
CollectionUpdateAction.execute() line: 101	

			persister.updateRows( collection, id, session );
/s
		if ( !isInverse && collection.isRowUpdatePossible() ) {
/s
PersistentList(AbstractPersistentCollection).isRowUpdatePossible() line: 703	
	return true
/t
			// update all the modified entries
			int count = doUpdateRows( id, collection, session );
/s
OneToManyPersister.doUpdateRows(Serializable, PersistentCollection, SessionImplementor) line: 310	
			if ( isRowDeleteEnabled() ) {

/ Kijkt in snapshot,	 in hoe de list WAS	,
//////////////////////////////////////////////////////////////
/s
		return keyIsUpdateable && keyIsNullable;
true
/t
					Iterator entries = collection.entries( this );
					while ( entries.hasNext() ) {
/ volgende	,
						if ( collection.needsUpdating( entry, i, elementType ) ) {  // will still be issued when it used to be null
true
							int loc = writeKey( st, id, offset, session );
id=12
offset=1	/= par pos in pst	, de 1ste dus	,
/s
		getKeyType().nullSafeSet( st, key, i, session );
/ key=12, i=1
/s
LongType(AbstractStandardBasicType<T>).nullSafeSet(PreparedStatement, Object, int, SessionImplementor) line: 281	
		nullSafeSet( st, value, index, options );
/ value=12, index=1	
/t
		getKeyType().nullSafeSet( st, key, i, session );
/d
		return i + keyColumnAliases.length;
/ 2, volgende index	,
/t
OneToManyPersister.doUpdateRows(Serializable, PersistentCollection, SessionImplementor) line: 343	
							int loc = writeKey( st, id, offset, session );
/d
loc=2	, volgende index in pst	,
							writeElementToWhere( st, collection.getSnapshotElement(entry, i), loc, session );
/ i=0, 1ste elem in coll.snapshot	, dat is e1	,	in coll is dat nu e2	,
/ Klopt	, want we willen delete hoe het was	, en is in de database	,
//////////////////////////////////////////////////////////////////////////////
/s
		getElementType().nullSafeSet( st, elt, i, elementColumnIsInPrimaryKey, session );
/ elt=e1	, i=2 pos in pst	,

...
/ we zien	,
/ Gaat snapshot lijst af: vindt achtereenvolgends id=1,2,3
Hibernate: update employee set address_=null, index_=null where address_=? and id_=?
HibernateLog --> 08:58:16 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
HibernateLog --> 08:58:36 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [1]

Hibernate: update employee set address_=null, index_=null where address_=? and id_=?
HibernateLog --> 08:59:17 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
HibernateLog --> 08:59:18 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [2]

Hibernate: update employee set address_=null, index_=null where address_=? and id_=?
HibernateLog --> 08:59:27 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
HibernateLog --> 08:59:28 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [3]

/t
OneToManyPersister.doUpdateRows(Serializable, PersistentCollection, SessionImplementor) line: 372	
			if ( isRowDeleteEnabled() ) {
/ Keek in snapshot list	, hoe de list WAS	,
/d
			if ( isRowInsertEnabled() ) {

/ kijkt in current list	, hoe de list IS	,
//////////////////////////////////////////////////////////
/s
	return keyIsUpdateable
true
/t
					Iterator entries = collection.entries( this );
					while ( entries.hasNext() ) {
						if ( collection.needsUpdating( entry, i, elementType ) ) {
true
							int loc = writeKey( st, id, offset, session );
/ 12 1ste in pst	, loc=2 volgende index in pst	,
								loc = writeIndexToWhere( st, collection.getIndex( entry, i, this ), loc, session );
/i=0, 1ste elem	,
/ collection.getIndex( entry, i, this )==i
/t
/s
		getIndexType().nullSafeSet( st, incrementIndexByBase( index ), i, session );
/s
		nullSafeSet( st, value, index, options );
/ value=0 , index=2 (plaats par in pst)
	return ...

/t
							writeElementToWhere( st, collection.getElement( entry ), loc, session );

/ we zien	,
/ Gaat huidige lijst af: vindt achtereenvolgends id=2,3,1
/////////////////////////////////////////////////////////////////////////////////
Hibernate: update employee set address_=?, index_=? where id_=?
HibernateLog --> 09:05:00 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12] / writeKey
HibernateLog --> 09:05:05 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [INTEGER] - [0]/ writeIndexToWhere
HibernateLog --> 09:05:06 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [BIGINT] - [2] / writeElementToWhere

Hibernate: update employee set address_=?, index_=? where id_=?
HibernateLog --> 09:05:14 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
HibernateLog --> 09:05:15 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [INTEGER] - [1]
HibernateLog --> 09:05:15 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [BIGINT] - [3]

Hibernate: update employee set address_=?, index_=? where id_=?
HibernateLog --> 09:05:22 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
HibernateLog --> 09:05:25 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [INTEGER] - [2]
HibernateLog --> 09:05:25 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [BIGINT] - [1]


			persister.insertRows( collection, id, session );
/s
					if ( collection.needsInserting( entry, i, elementType ) ) {
/ NEE



/ 4de session	,

/ .iterator	,

Hibernate: select address0_.id__ as id__1_0_0_, address0_.address_line1__ as address_2_0_0_, address0_.zipcode__ as zipcode_3_0_0_, address0_.city_ as city_4_0_0_ from address address0_ where address0_.id__=?
HibernateLog --> 08:09:50 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
Address.setId()
HibernateLog --> 08:09:50 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [foostreet]
HibernateLog --> 08:09:50 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [12 foo]
HibernateLog --> 08:09:50 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city_4_0_0_] : [VARCHAR]) - [FooCity12]
HibernateLog --> 08:09:50 TRACE org.hibernate.type.CollectionType - Created collection wrapper: [my.test.own.hibernate_xml_1_N_list_bidir_ehcache.Address.employees#12]

Hibernate: select employees0_.address_ as address_4_0_0_, employees0_.id_ as id_1_1_0_, employees0_.index_ as index_5_0_, employees0_.id_ as id_1_1_1_, employees0_.name_ as name_2_1_1_, employees0_.salary_ as salary_3_1_1_, employees0_.address_ as address_4_1_1_ from employee employees0_ where employees0_.address_=?
HibernateLog --> 08:14:47 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
HibernateLog --> 08:14:47 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [2]
HibernateLog --> 08:14:47 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo2]
HibernateLog --> 08:14:47 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [2.0]
HibernateLog --> 08:14:47 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [12]
HibernateLog --> 08:14:47 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [12]
HibernateLog --> 08:14:47 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [2]
HibernateLog --> 08:14:47 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([index_5_0_] : [INTEGER]) - [0]
HibernateLog --> 08:14:47 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [3]
HibernateLog --> 08:14:47 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo3]
HibernateLog --> 08:14:47 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [3.0]
HibernateLog --> 08:14:47 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [12]
HibernateLog --> 08:14:47 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [12]
HibernateLog --> 08:14:47 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [3]
HibernateLog --> 08:14:47 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([index_5_0_] : [INTEGER]) - [1]
HibernateLog --> 08:14:47 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [1]
HibernateLog --> 08:14:47 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo1]
HibernateLog --> 08:14:47 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [1.0]
HibernateLog --> 08:14:47 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [12]
HibernateLog --> 08:14:47 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [12]
HibernateLog --> 08:14:47 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [1]
HibernateLog --> 08:14:47 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([index_5_0_] : [INTEGER]) - [2]

/ 1313.

/ N_1_list_bidir_ehcache

/ 3de session	,

/ .commit
/s
Collections.prepareCollectionForUpdate(PersistentCollection, CollectionEntry, SessionFactoryImplementor) line: 264	
			else if ( collection.isDirty() ) {
				entry.setDoupdate( true );
/ Net als bij 1-N	,
/t
/s
DefaultFlushEventListener(AbstractFlushingEventListener).flushCollections(EventSource, PersistenceContext) line: 296	
				actionQueue.addAction(
						new CollectionUpdateAction(
								coll,
								ce.getLoadedPersister(),
								ce.getLoadedKey(),
								ce.isSnapshotEmpty(coll),
/ Net als bij 1-N
/s
CollectionUpdateAction.execute() line: 68	
		else {
			persister.deleteRows( collection, id, session );
/s
		if ( !isInverse && isRowDeleteEnabled() ) {
/ NEE
			persister.updateRows( collection, id, session );
/s
		if ( !isInverse && collection.isRowUpdatePossible() ) {
/ NEE
			persister.insertRows( collection, id, session );
/s
		super.insertRows( collection, id, session );
/s
		if ( !isInverse && isRowInsertEnabled() ) {
/ NEE
/t
		super.insertRows( collection, id, session );
/d
		writeIndex( collection, collection.entries( this ), id, 0, session );
/s
OneToManyPersister.writeIndex(PersistentCollection, Iterator, Serializable, int, SessionImplementor) line: 204	
		// If one-to-many and inverse, still need to create the index.  See HHH-5732.
		if ( isInverse && hasIndex && !indexContainsFormula ) {
true

/ Kijkt in current list	,
///////////////////////////////////////////////////////////
Hibernate: update employee set index_=? where id_=?

					while ( entries.hasNext() ) {
						final Object entry = entries.next();
								offset = writeIndex( st, collection.getIndex( entry, nextIndex, this ), offset, session );
HibernateLog --> 10:40:56 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [INTEGER] - [0]
								offset = writeElement( st, collection.getElement( entry ), offset, session );
HibernateLog --> 10:41:02 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [2]

/ volgende,
								offset = writeIndex( st, collection.getIndex( entry, nextIndex, this ), offset, session );
HibernateLog --> 10:40:56 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [INTEGER] - [1]
								offset = writeElement( st, collection.getElement( entry ), offset, session );
HibernateLog --> 10:41:02 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [3]

/we zien de CollectionUpdateAction toch actie als inverse=true
////////////////////////////////////////////////////////////////////////////////////////////





HibernateLog --> 08:22:43 DEBUG org.hibernate.SQL - update employee set index_=? where id_=?
Hibernate: update employee set index_=? where id_=?
HibernateLog --> 08:22:43 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [INTEGER] - [0]
HibernateLog --> 08:22:43 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [2]
HibernateLog --> 08:22:43 DEBUG org.hibernate.SQL - update employee set index_=? where id_=?
Hibernate: update employee set index_=? where id_=?
HibernateLog --> 08:22:43 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [INTEGER] - [1]
HibernateLog --> 08:22:43 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [3]
HibernateLog --> 08:22:43 DEBUG org.hibernate.SQL - update employee set index_=? where id_=?
Hibernate: update employee set index_=? where id_=?
HibernateLog --> 08:22:43 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [INTEGER] - [2]
HibernateLog --> 08:22:43 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [1]

foo=> select*from employee;
 id_ | name_ | salary_ | address_ | index_ 
-----+-------+---------+----------+--------
   2 | Foo2  |       2 |       12 |      0
   3 | Foo3  |       3 |       12 |      1
   1 | Foo1  |       1 |       12 |      2
(3 rows)

/ DEMO









/ 13	.

/ 1-N bidir	, 1_N_bidir_ehcache	,

/ SAMENVATTING

/ we hebben	,

/ Address	,
 	<set
 		name="employees"
 		inverse="false"
 	>
 		<key
 			column="address_"
 			not-null="false"
 			update="true"
 		/>
 		<one-to-many 
			class="Employee"
		/>
 	</set>

/ Employee	,
	<many-to-one 
		name="address"
		column="address_"
		not-null="false"
		insert="false"
		update="false"
	/>

/ we kunnen varieren	,

Address						Employee

/ 7	.
<key 						<many-to-one
	not-null="true"					not-null="true"
>							insert="false"	
						>
/ stuurt keyOfOwner mee	,			/ staat geen null toe, slaat Address-ref over,

/ 13
<key 						<many-to-one
	not-null="false"				not-null="false"
>							insert="true"	
/ stuurt niets mee	,			/ staat null toe, inserts Address-ref , only if bidir	,
						>
/ 713
<key 						<many-to-one
	not-null="false"				not-null="false"
>							insert="false"	
/ stuurt niets mee	,			/ staat null toe, inserts Address-ref niet	, coll recreate sets fk	,


/ we zien in de 1ste session	,

/ 13	.



/ 713

/ address_ niet in insert employee	, wel in schema	, dus wordt eerst null insert	,

Hibernate: insert into address (address_line1__, zipcode__, city_, id__) values (?, ?, ?, ?)
HibernateLog --> 18:30:33 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [foostreet]
HibernateLog --> 18:30:33 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [VARCHAR] - [12 foo]
HibernateLog --> 18:30:33 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [VARCHAR] - [FooCity12]
HibernateLog --> 18:30:33 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [4] as [BIGINT] - [12]

Hibernate: insert into employee (name_, salary_, id_) values (?, ?, ?)
HibernateLog --> 18:30:33 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [Foo1]
HibernateLog --> 18:30:33 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [DOUBLE] - [1.0]
HibernateLog --> 18:30:33 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [BIGINT] - [1]

Hibernate: insert into employee (name_, salary_, id_) values (?, ?, ?)
HibernateLog --> 18:30:33 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [Foo2]
HibernateLog --> 18:30:33 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [DOUBLE] - [2.0]
HibernateLog --> 18:30:33 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [BIGINT] - [2]

Hibernate: update employee set address_=? where id_=?
HibernateLog --> 18:30:33 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
HibernateLog --> 18:30:33 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [1]

Hibernate: update employee set address_=? where id_=?
HibernateLog --> 18:30:33 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
HibernateLog --> 18:30:33 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [2]







	

 














 		












































/ 13	.

/ Address	,
	<set
 		name="employees"
 		inverse="false"
 	>
 		<key
 			column="address_"
 		/>
 		<one-to-many class="Employee"/>
 	</set>

/ Employee	,
	<many-to-one 
		name="address"
		column="address_"
	/>

this	Main  (id=16)	
	configuration	Configuration  (id=40)	
		classes	HashMap<K,V>  (id=73)	
			size	2	
			table	HashMap$Entry<K,V>[16]  (id=91)	
				[4]	HashMap$Entry<K,V>  (id=96)	
				[5]	HashMap$Entry<K,V>  (id=98)	
					key	"my.test.own.hibernate_xml_M_N_bidir_ehcache.Employee" (id=149)	
					value	RootClass  (id=150)	
						identifierProperty	Property  (id=151)	
						properties	ArrayList<E>  (id=160)	
							elementData	Object[10]  (id=168)	
								[0]	Property  (id=169)	
								[1]	Property  (id=170)	
								[2]	Property  (id=171)	
							modCount	3	
							size	3	

	SingleTableEntityPersister(AbstractEntityPersister).insert(Serializable, Object[], Object, SessionImplementor) line: 3581	
		if ( entityMetamodel.isDynamicInsert() ) {
/ NEE
		else {
			// For the case of dynamic-insert="false", use the static SQL
			for ( int j = 0; j < span; j++ ) {
				insert( id, fields, getPropertyInsertability(), j, getSQLInsertStrings()[j], object, session );
/ getPropertyInsertability()=[true,true,true]
/ Klopt, we hebben nu NIET <many-to-one insert="false" ...>

	EntityInsertAction.execute() line: 104	
	ActionQueue.executeActions(ExecutableList<E>) line: 463	
	ActionQueue.executeActions() line: 349	
	DefaultFlushEventListener(AbstractFlushingEventListener).performExecutions(EventSource) line: 350	
	DefaultFlushEventListener.onFlush(FlushEvent) line: 56	
	SessionImpl.flush() line: 1222	
	SessionImpl.managedFlush() line: 425	
	JdbcTransaction.beforeTransactionCommit() line: 101	
	JdbcTransaction(AbstractTransactionImpl).commit() line: 177	
	Main.testBasicUsage() line: 118	
	Main.<init>() line: 63	
	Main.main(String[]) line: 57	

				dehydrate( id, fields, null, notNull, propertyColumnInsertable, j, insert, session, index, false );
/s
	protected int dehydrate(
...
			final boolean[] includeProperty,
[true,true,true] 	, van hierboven	,
			final boolean[][] includeColumns,
[[true],[true],[true]] 	, van hierboven	,

		for ( int i = 0; i < entityMetamodel.getPropertySpan(); i++ ) {
			if ( includeProperty[i] && isPropertyOfTable( i, j )
					&& !lobProperties.contains( i )) {
				getPropertyTypes()[i].nullSafeSet( ps, fields[i], index, includeColumns[i], session );

Hibernate: insert into employee (name_, salary_, address_, id_) values (?, ?, ?, ?)
HibernateLog --> 09:45:52 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [Foo1]
HibernateLog --> 09:45:55 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [DOUBLE] - [1.0]
HibernateLog --> 09:46:00 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [BIGINT] - [34]

/ 13	.

/ insert ERR	, bij .save	,

<many-to-one not-null="true" insert="false"> laat null toe bij .save als we NIET e1.setAddress(a12)	, maar alleen a12.getEmployees().add(e1)	,  maar bij .commit  PSQL-ERR op not-null="true"	,

/ config 137

/ Address	,
	<set
 		name="employees"
 		inverse="false"
 	>
 		<key
 			column="address_"
 			not-null="false"
			update="true"
 		/>
 		<one-to-many class="Employee"/>
 	</set>

/ Employee	,
	<many-to-one 
		name="address"
		column="address_"
		not-null="true"
		insert="true"
		update="true"

	/>

/ config 1313

/ Address	,
	<set
 		name="employees"
 		inverse="false"
 	>
 		<key
 			column="address_"
 			not-null="true"
 		/>
 		<one-to-many class="Employee"/>
 	</set>

/ Employee	,
	<many-to-one 
		name="address"
		column="address_"
		not-null="true"
		insert="false"
		update="true"

	/>


/ Main	,

			Employee employee=new Employee(1l,"Foo1",1.00);
			Employee employee2=new Employee(2l,"Foo2",2.00);
			Address address=new Address(12l,"foostreet", "12 foo", "FooCity12");
			Address address3=new Address(34l,"foostreet", "34 foo", "FooCity34");

//			employee.setAddress(address3);
//			employee2.setAddress(address3);
			address3.getEmployees().add(employee);
			address3.getEmployees().add(employee2);
			
			session.save(address);
			session.save(address3);
			session.save(employee);
			session.save(employee2);

/ Met config 137 ERR	, met 1313 NIET	,

org.hibernate.PropertyValueException: not-null property references a null or transient value : my.test.own.hibernate_xml_M_N_bidir_ehcache.Employee.address

	at org.hibernate.engine.internal.Nullability.checkNullability(Nullability.java:106)

nullability=[true,true,false]	// 137	, <many-to-one not-null="true" ...>
nullability=[true,true,false,false]	// 1313	, <many-to-one not-null="true" ...>, <key not-null="true">

			final boolean[] checkability = isUpdate ?
false
				persister.getPropertyUpdateability() :
				persister.getPropertyInsertability();
[true,true,true]	, want <many-to-one insert="true" ...>
[true,true,false,true]	, want <many-to-one insert="false" ...>	, de extra laatste is wel insertable, 

				if ( checkability[i] && values[i]!= LazyPropertyInitializer.UNFETCHED_PROPERTY ) {
					final Object value = values[i];
					if ( !nullability[i] && value == null ) {
/ JA, 137	,
/ NEE, 1313	, de value is wel null, maar deze prop is niet insertable, 	dus hoeven we ook niet te check	,

						//check basic level one nullablilty
						throw new PropertyValueException(
								"not-null property references a null or transient value",
								persister.getEntityName(),
								persister.getPropertyNames()[i]
							);

	at org.hibernate.action.internal.AbstractEntityInsertAction.nullifyTransientReferencesIfNotAlready(AbstractEntityInsertAction.java:132)
	at org.hibernate.action.internal.AbstractEntityInsertAction.makeEntityManaged(AbstractEntityInsertAction.java:141)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:201)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:179)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:166)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:332)
values="Foo1",1.0,null				/ 137
types=StringType@,DoubleType@,ManyToOneType@	/ 137
values="Foo1",1.0,null,12l			/ 1313
types=StringType@,DoubleType@,ManyToOneType@,LongType	/ 1313
->	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:288)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:137)
	at org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.saveWithGeneratedOrRequestedId(DefaultSaveOrUpdateEventListener.java:209)
	at org.hibernate.event.internal.DefaultSaveEventListener.saveWithGeneratedOrRequestedId(DefaultSaveEventListener.java:55)
	at org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.entityIsTransient(DefaultSaveOrUpdateEventListener.java:194)
	at org.hibernate.event.internal.DefaultSaveEventListener.performSaveOrUpdate(DefaultSaveEventListener.java:49)
	at org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.onSaveOrUpdate(DefaultSaveOrUpdateEventListener.java:90)
	at org.hibernate.internal.SessionImpl.fireSave(SessionImpl.java:715)
	at org.hibernate.internal.SessionImpl.save(SessionImpl.java:707)
	at org.hibernate.internal.SessionImpl.save(SessionImpl.java:702)
	at my.test.own.hibernate_xml_M_N_bidir_ehcache.Main.testBasicUsage(Main.java:110)
	at my.test.own.hibernate_xml_M_N_bidir_ehcache.Main.<init>(Main.java:63)
	at my.test.own.hibernate_xml_M_N_bidir_ehcache.Main.main(Main.java:57)

/ 13	.

/ 137 config	,

/ update ERR	, bij .commit	,

/ Address	,
	<set
 		name="employees"
 		inverse="false"
 	>
 		<key
 			column="address_"
 			not-null="false"	/ er staat geen not-null="true"	, er wordt geen Backref getter def,	 dus het is alsof er GEEN not-null="false" staat	,
 		/>
 		<one-to-many class="Employee"/>
 	</set>

/ Employee	,
	<many-to-one 
		name="address"
		column="address_"
		not-null="true"	/ deze telt	,
		insert="false"			/ de insert van employee gaat OK
		update="true"			/ de update van employee gaat ERR	, 
	/>

/ Main	,
			Employee employee=new Employee(1l,"Foo1",1.00);
			Employee employee2=new Employee(2l,"Foo2",2.00);
			Address address=new Address(12l,"foostreet", "12 foo", "FooCity12");
			Address address3=new Address(34l,"foostreet", "34 foo", "FooCity34");
			
//			employee.setAddress(address3);
//			employee2.setAddress(address3);
			address.getEmployees().add(employee);
			address.getEmployees().add(employee2);
			session.save(address); 
			session.save(address3);
			session.save(employee);
			session.save(employee2);
			
		
		  	address3.setCity("FooCity34A");
		  	employee.setName("Foo1A");
			
		  	printStats(stats);
			tx.commit();
/ ERR
org.hibernate.PropertyValueException: not-null property references a null or transient value : my.test.own.hibernate_xml_M_N_bidir_ehcache.Employee.address

	at org.hibernate.engine.internal.Nullability.checkNullability(Nullability.java:106)

			final boolean[] nullability = persister.getPropertyNullability();
nullability=[true,true,false]
			final boolean[] checkability = isUpdate ?
/ isUpdate=true	,
				persister.getPropertyUpdateability() :
				persister.getPropertyInsertability();
[true,true,true]							/ klopt, we hebben <many-to-one update="true" ...>

				if ( checkability[i] && values[i]!= LazyPropertyInitializer.UNFETCHED_PROPERTY ) {
					final Object value = values[i];
					if ( !nullability[i] && value == null ) {
/ JA voor config 137	,
						//check basic level one nullablilty
						throw new PropertyValueException(
								"not-null property references a null or transient value",
								persister.getEntityName(),
								persister.getPropertyNames()[i]
							);

					}



	at org.hibernate.event.internal.DefaultFlushEntityEventListener.scheduleUpdate(DefaultFlushEntityEventListener.java:309)
	at org.hibernate.event.internal.DefaultFlushEntityEventListener.onFlushEntity(DefaultFlushEntityEventListener.java:160)
	at org.hibernate.event.internal.AbstractFlushingEventListener.flushEntities(AbstractFlushingEventListener.java:231)
	at org.hibernate.event.internal.AbstractFlushingEventListener.flushEverythingToExecutions(AbstractFlushingEventListener.java:102)
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:55)
	at org.hibernate.internal.SessionImpl.flush(SessionImpl.java:1222)
	at org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:425)
	at org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.beforeTransactionCommit(JdbcTransaction.java:101)
	at org.hibernate.engine.transaction.spi.AbstractTransactionImpl.commit(AbstractTransactionImpl.java:177)
	at my.test.own.hibernate_xml_M_N_bidir_ehcache.Main.testBasicUsage(Main.java:118)
	at my.test.own.hibernate_xml_M_N_bidir_ehcache.Main.<init>(Main.java:63)
	at my.test.own.hibernate_xml_M_N_bidir_ehcache.Main.main(Main.java:57)

/ 13	.

/ 137 config	,

/ we maken <many-to-one update="false" ...>

/ Address	,
	<set
 		name="employees"
 		inverse="false"
 	>
 		<key
 			column="address_"
 			not-null="false"
 		/>
 		<one-to-many class="Employee"/>
 	</set>

/ Employee	,
	<many-to-one 
		name="address"
		column="address_"
		not-null="true"
		insert="false"
		update="false"
	/>

/ Main	,

			Employee employee=new Employee(1l,"Foo1",1.00);
			Employee employee2=new Employee(2l,"Foo2",2.00);
			Address address=new Address(12l,"foostreet", "12 foo", "FooCity12");
			Address address3=new Address(34l,"foostreet", "34 foo", "FooCity34");
			
//			employee.setAddress(address3);
//			employee2.setAddress(address3);
			address.getEmployees().add(employee);
			address.getEmployees().add(employee2);
			session.save(address); 
			session.save(address3);
			session.save(employee);
			session.save(employee2);
			
		
		  	address3.setCity("FooCity34A");
		  	employee.setName("Foo1A");
			
			tx.commit();
/ ERR	,

/ <many-to-one not-null="true" ...> , maar employee.address=null	, dus constraint violation	,
/ oplossing: <set ...><key not-null="true"> , er komt een extra Long prop	, set met Backref getter	, en omdat <many-to-one insert="false" ...> zal hij deze overslaan bij entityinsertaction, wat we hieronder ook doen en fout gaat, en pakt de laatste, die 12l is, en voldoet aan de not-null constraint	,

HibernateLog --> 14:16:46 INFO  org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl - HHH000010: On release of batch it still contained JDBC statements
org.hibernate.exception.ConstraintViolationException: could not execute statement

	at org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:129)
	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:49)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:126)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:112)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:211)
	at org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:62)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3124)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3581)
	at org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:104)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:463)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:349)
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:350)
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:56)
	at org.hibernate.internal.SessionImpl.flush(SessionImpl.java:1222)
	at org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:425)
	at org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.beforeTransactionCommit(JdbcTransaction.java:101)
	at org.hibernate.engine.transaction.spi.AbstractTransactionImpl.commit(AbstractTransactionImpl.java:177)
	at my.test.own.hibernate_xml_M_N_bidir_ehcache.Main.testBasicUsage(Main.java:118)
	at my.test.own.hibernate_xml_M_N_bidir_ehcache.Main.<init>(Main.java:63)
	at my.test.own.hibernate_xml_M_N_bidir_ehcache.Main.main(Main.java:57)
Caused by: org.postgresql.util.PSQLException: ERROR: null value in column "address_" violates not-null constraint
  Detail: Failing row contains (1, Foo1, 1, null).
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2198)
	at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:1927)
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:255)
	at org.postgresql.jdbc2.AbstractJdbc2Statement.execute(AbstractJdbc2Statement.java:561)
	at org.postgresql.jdbc2.AbstractJdbc2Statement.executeWithFlags(AbstractJdbc2Statement.java:419)
	at org.postgresql.jdbc2.AbstractJdbc2Statement.executeUpdate(AbstractJdbc2Statement.java:365)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:208)
	... 15 more

SingleTableEntityPersister(AbstractEntityPersister).insert(Serializable, Object[], Object, SessionImplementor) line: 3581	
			for ( int j = 0; j < span; j++ ) {
				insert( id, fields, getPropertyInsertability(), j, getSQLInsertStrings()[j], object, session );
/ getPropertyInsertability()=[true,true,false]
/ klopt, we hebben <many-to-one insert=false ...>

				dehydrate( id, fields, null, notNull, propertyColumnInsertable, j, insert, session, index, false );
/ OK	, want	,
/ fields="Foo1",1.0,null	,
/ notNull=[true,true,false]	, / = property insert	,

		for ( int i = 0; i < entityMetamodel.getPropertySpan(); i++ ) {
			if ( includeProperty[i] && isPropertyOfTable( i, j )
					&& !lobProperties.contains( i )) {
/ NEE, i==2	, laatste	,
				getPropertyTypes()[i].nullSafeSet( ps, fields[i], index, includeColumns[i], session );

/t
SingleTableEntityPersister(AbstractEntityPersister).insert(Serializable, Object[], boolean[], int, String, Object, SessionImplementor) line: 3124	

				if ( useBatch ) {
					session.getTransactionCoordinator().getJdbcCoordinator().getBatch( inserBatchKey ).addToBatch();
/s
				final int rowCount = jdbcCoordinator.getResultSetReturn().executeUpdate( statement );
/s
insert into employee (name_, salary_, id_) values ('Foo1', 1.0, 1)

/ 13	. 

/ config 137	,

/ Address	,
	<set
 		name="employees"
 		inverse="false"
 	>
 		<key
 			column="address_"
 			not-null="true"
 		/>
 		<one-to-many class="Employee"/>
 	</set>

/ Employee	,












/ 13	. 

/ Als we persist aan de coll kant,	 waarom moeten we dan <many-to-one ...> in de Employee mapping?

/ Address	,
	<set
 		name="employees"
 		inverse="false"
 	>
 		<key
 			column="address_"
 			not-null="true"
 		></key>
 		<one-to-many class="Employee"/>
 	</set>

/ Employee
/ GEEN <many-to-one ...>

/ Het moet, want	, 

/ 137	.

	        address3=(Address)session.get(Address.class, 34l); 
	       	  	
		employees=address3.getEmployees();
	        Iterator<Employee>iterator=employees.iterator(); 
	        while(iterator.hasNext()){
	        	Employee e=iterator.next();
/ e.address=null

//////////////////////////
/ we zien in de db WEL een fk in de employee rows	, maar blijkbaar is er in de H props bij Employee GEEN Address ref	,

/ 137	,

/ En hier gaat het mis	,

		  	Query query=session.createQuery("select e from Employee e where e.address=:address");

ibernateLog --> 08:30:12 DEBUG org.hibernate.hql.internal.ast.tree.FromReferenceNode - Resolved : e -> employee0_.id_
org.hibernate.QueryException: could not resolve property: address of: my.test.own.hibernate_xml_M_N_bidir_ehcache.Employee [select e from my.test.own.hibernate_xml_M_N_bidir_ehcache.Employee e where e.address=:address]
	at org.hibernate.QueryException.generateQueryException(QueryException.java:137)
	at org.hibernate.QueryException.wrapWithQueryString(QueryException.java:120)
	at org.hibernate.hql.internal.ast.QueryTranslatorImpl.doCompile(QueryTranslatorImpl.java:234)
	at org.hibernate.hql.internal.ast.QueryTranslatorImpl.compile(QueryTranslatorImpl.java:158)
	at org.hibernate.engine.query.spi.HQLQueryPlan.<init>(HQLQueryPlan.java:126)
	at org.hibernate.engine.query.spi.HQLQueryPlan.<init>(HQLQueryPlan.java:88)
	at org.hibernate.engine.query.spi.QueryPlanCache.getHQLQueryPlan(QueryPlanCache.java:167)
	at org.hibernate.internal.AbstractSessionImpl.getHQLQueryPlan(AbstractSessionImpl.java:301)
	at org.hibernate.internal.AbstractSessionImpl.createQuery(AbstractSessionImpl.java:236)
	at org.hibernate.internal.SessionImpl.createQuery(SessionImpl.java:1800)
	at my.test.own.hibernate_xml_M_N_bidir_ehcache.Main.testBasicUsage(Main.java:683)
	at my.test.own.hibernate_xml_M_N_bidir_ehcache.Main.<init>(Main.java:62)
	at my.test.own.hibernate_xml_M_N_bidir_ehcache.Main.main(Main.java:56)
Caused by: org.hibernate.QueryException: could not resolve property: address of: my.test.own.hibernate_xml_M_N_bidir_ehcache.Employee
	at org.hibernate.persister.entity.AbstractPropertyMapping.propertyException(AbstractPropertyMapping.java:83)
	at org.hibernate.persister.entity.AbstractPropertyMapping.toType(AbstractPropertyMapping.java:77)
	at org.hibernate.persister.entity.AbstractEntityPersister.toType(AbstractEntityPersister.java:1978)
	at org.hibernate.hql.internal.ast.tree.FromElementType.getPropertyType(FromElementType.java:367)
	at org.hibernate.hql.internal.ast.tree.FromElement.getPropertyType(FromElement.java:500)
	at org.hibernate.hql.internal.ast.tree.DotNode.getDataType(DotNode.java:652)
	at org.hibernate.hql.internal.ast.tree.DotNode.prepareLhs(DotNode.java:275)
	at org.hibernate.hql.internal.ast.tree.DotNode.resolve(DotNode.java:219)
	at org.hibernate.hql.internal.ast.tree.FromReferenceNode.resolve(FromReferenceNode.java:126)
	at org.hibernate.hql.internal.ast.tree.FromReferenceNode.resolve(FromReferenceNode.java:121)
	at org.hibernate.hql.internal.ast.HqlSqlWalker.resolve(HqlSqlWalker.java:946)
	at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.expr(HqlSqlBaseWalker.java:1267)
	at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.exprOrSubquery(HqlSqlBaseWalker.java:4686)
	at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.comparisonExpr(HqlSqlBaseWalker.java:4156)
	at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.logicalExpr(HqlSqlBaseWalker.java:2104)
	at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.whereClause(HqlSqlBaseWalker.java:796)
	at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.query(HqlSqlBaseWalker.java:597)
	at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.selectStatement(HqlSqlBaseWalker.java:301)
	at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.statement(HqlSqlBaseWalker.java:249)
	at org.hibernate.hql.internal.ast.QueryTranslatorImpl.analyze(QueryTranslatorImpl.java:278)
	at org.hibernate.hql.internal.ast.QueryTranslatorImpl.doCompile(QueryTranslatorImpl.java:206)
	... 10 more

/ 7	.

/ cascade="save-update"	,

/ Address	,
	<set
 		name="employees"
 		inverse="false"
 		cascade="save-update,delete,delete-orphan"
 	>
 		<key
 			column="address_"
 			not-null="true"
 		></key>
 		<one-to-many class="Employee"/>
 	</set>

/ new session
			Employee employee=new Employee(1l,"Foo1",1.00);
			Employee employee2=new Employee(2l,"Foo2",2.00);
			Address address3=new Address(34l,"foostreet", "34 foo", "FooCity34");
			
			address3.getEmployees().add(employee);
			address3.getEmployees().add(employee2);
			session.save(address);
/ 1c.entities=1	, 1c.colls=1
			session.save(address3);
Hibernate: select employee_.id_, employee_.name_ as name_2_1_, employee_.salary_ as salary_3_1_ from employee employee_ where employee_.id_=?
HibernateLog --> 11:10:42 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [1]
Hibernate: select employee_.id_, employee_.name_ as name_2_1_, employee_.salary_ as salary_3_1_ from employee employee_ where employee_.id_=?
HibernateLog --> 11:10:42 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [2]

/ 1c.entities=4, 1c.colls=2
			
		  	address3.setCity("FooCity34A");
		  	employee.setName("Foo1A");
			tx.commit();

/ EntityInsertActions	,

Hibernate: insert into address (address_line1__, zipcode__, city__, id__) values (?, ?, ?, ?)
HibernateLog --> 11:12:50 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [foostreet]
HibernateLog --> 11:12:50 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [VARCHAR] - [12 foo]
HibernateLog --> 11:12:50 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [VARCHAR] - [FooCity12]
HibernateLog --> 11:12:50 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [4] as [BIGINT] - [12]

Hibernate: insert into address (address_line1__, zipcode__, city__, id__) values (?, ?, ?, ?)
HibernateLog --> 11:12:50 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [foostreet]
HibernateLog --> 11:12:50 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [VARCHAR] - [34 foo]
HibernateLog --> 11:12:50 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [VARCHAR] - [FooCity34]
HibernateLog --> 11:12:50 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [4] as [BIGINT] - [34]

Hibernate: insert into employee (name_, salary_, address_, id_) values (?, ?, ?, ?)
HibernateLog --> 11:12:50 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [Foo1]
HibernateLog --> 11:12:50 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [DOUBLE] - [1.0]
HibernateLog --> 11:12:50 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [BIGINT] - [34]
HibernateLog --> 11:12:50 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [4] as [BIGINT] - [1]

Hibernate: insert into employee (name_, salary_, address_, id_) values (?, ?, ?, ?)
HibernateLog --> 11:12:50 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [Foo2]
HibernateLog --> 11:12:50 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [DOUBLE] - [2.0]
HibernateLog --> 11:12:50 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [BIGINT] - [34]
HibernateLog --> 11:12:50 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [4] as [BIGINT] - [2]

/ EntityUpdateActions	,

Hibernate: update address set address_line1__=?, zipcode__=?, city__=? where id__=?
HibernateLog --> 11:12:50 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [foostreet]
HibernateLog --> 11:12:50 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [VARCHAR] - [34 foo]
HibernateLog --> 11:12:50 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [VARCHAR] - [FooCity34A]
HibernateLog --> 11:12:50 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [4] as [BIGINT] - [34]

Hibernate: update employee set name_=?, salary_=? where id_=?
HibernateLog --> 11:12:50 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [Foo1A]
HibernateLog --> 11:12:50 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [DOUBLE] - [1.0]
HibernateLog --> 11:12:50 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [BIGINT] - [1]

/ CollectionRecreateActions	,

Hibernate: update employee set address_=? where id_=?
HibernateLog --> 11:12:50 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [34]
HibernateLog --> 11:12:50 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [1]

Hibernate: update employee set address_=? where id_=?
HibernateLog --> 11:12:50 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [34]
HibernateLog --> 11:12:50 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [2]

/ De 1c is onveranderd	, 


/ new session
			session.sessionFactory.openSession();
/ 1c.entities=0, 1c.colls=0
			address=(Address)session.get(Address.class, 34l);

Hibernate: select address0_.id__ as id__1_0_0_, address0_.address_line1__ as address_2_0_0_, address0_.zipcode__ as zipcode_3_0_0_, address0_.city__ as city__4_0_0_ from address address0_ where address0_.id__=?
HibernateLog --> 11:18:28 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [34]
Address.setId()
HibernateLog --> 11:18:28 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [foostreet]
HibernateLog --> 11:18:28 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [34 foo]
HibernateLog --> 11:18:28 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_0_] : [VARCHAR]) - [FooCity34A]
HibernateLog --> 11:18:28 TRACE org.hibernate.type.CollectionType - Created collection wrapper: [my.test.own.hibernate_xml_M_N_bidir_ehcache.Address.employees#34]

/ 1c.entities=1, 1c.colls=1	(new PersistentSet(34l))	,	 address#12 is niet in deze session	,

			session.delete(address);

Hibernate: select employees0_.address_ as address_4_0_0_, employees0_.id_ as id_1_1_0_, employees0_.id_ as id_1_1_1_, employees0_.name_ as name_2_1_1_, employees0_.salary_ as salary_3_1_1_, employees0_.address_ as address_4_1_1_ from employee employees0_ where employees0_.address_=?
HibernateLog --> 11:20:30 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [34]
HibernateLog --> 11:20:30 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [1]
HibernateLog --> 11:20:30 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo1A]
HibernateLog --> 11:20:30 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [1.0]
HibernateLog --> 11:20:30 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [34]
HibernateLog --> 11:20:30 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [34]
HibernateLog --> 11:20:30 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [1]
HibernateLog --> 11:20:30 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [2]
HibernateLog --> 11:20:30 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo2]
HibernateLog --> 11:20:30 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [2.0]
HibernateLog --> 11:20:30 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [34]
HibernateLog --> 11:20:30 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [34]
HibernateLog --> 11:20:30 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [2]

/ WH cascade -> de entities die moeten worden delete, moeten eerst in 1c,

/ 1c.entities=3, 1c.colls=1

			tx.commit();

Hibernate: delete from employee where id_=?
HibernateLog --> 11:21:58 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [1]
HibernateLog --> 11:21:58 DEBUG org.hibernate.SQL - delete from employee where id_=?

Hibernate: delete from employee where id_=?
HibernateLog --> 11:21:58 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [2]
HibernateLog --> 11:21:58 DEBUG org.hibernate.SQL - delete from address where id__=?

Hibernate: delete from address where id__=?
HibernateLog --> 11:21:58 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [34]

/ 1c.entities=0, 1c.colls=0

/ in de db is employees tbl leeg, in de address tbl is address#34 rm, address#12 is er nog wel in de db	,

/ 3de session	,
			session = sessionFactory.openSession();
	
			employee=new Employee(1l,"Foo1",1.00);
			employee2=new Employee(2l,"Foo2",2.00);
			address3=new Address(34l,"foostreet", "34 foo", "FooCity34");
			
			address3.getEmployees().add(employee);
			address3.getEmployees().add(employee2);
			
			session.save(address3);

Hibernate: select employee_.id_, employee_.name_ as name_2_1_, employee_.salary_ as salary_3_1_ from employee employee_ where employee_.id_=?
HibernateLog --> 11:33:31 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [2]
Hibernate: select employee_.id_, employee_.name_ as name_2_1_, employee_.salary_ as salary_3_1_ from employee employee_ where employee_.id_=?
HibernateLog --> 11:33:31 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [1]

/ 1c.entities=3	, 1c.colls=1				// address#12 is niet in deze session	,
			
	        	tx.commit();

/ EntityInsertActions,

Hibernate: insert into address (address_line1__, zipcode__, city__, id__) values (?, ?, ?, ?)
HibernateLog --> 11:38:43 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [foostreet]
HibernateLog --> 11:38:43 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [VARCHAR] - [34 foo]
HibernateLog --> 11:38:43 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [VARCHAR] - [FooCity34]
HibernateLog --> 11:38:43 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [4] as [BIGINT] - [34]

Hibernate: insert into employee (name_, salary_, address_, id_) values (?, ?, ?, ?)
HibernateLog --> 11:38:43 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [Foo2]
HibernateLog --> 11:38:43 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [DOUBLE] - [2.0]
HibernateLog --> 11:38:43 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [BIGINT] - [34]
HibernateLog --> 11:38:43 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [4] as [BIGINT] - [2]

Hibernate: insert into employee (name_, salary_, address_, id_) values (?, ?, ?, ?)
HibernateLog --> 11:38:43 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [Foo1]
HibernateLog --> 11:38:43 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [DOUBLE] - [1.0]
HibernateLog --> 11:38:43 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [BIGINT] - [34]
HibernateLog --> 11:38:43 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [4] as [BIGINT] - [1]

/ CollectionRecreateActions	,

Hibernate: update employee set address_=? where id_=?
HibernateLog --> 11:38:43 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [34]
HibernateLog --> 11:38:43 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [2]

Hibernate: update employee set address_=? where id_=?
HibernateLog --> 11:38:43 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [34]
HibernateLog --> 11:38:43 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [1]

/ new session	,

			session = sessionFactory.openSession();
			tx=session.beginTransaction();
			
			address=(Address)session.get(Address.class, 34l);

Hibernate: select address0_.id__ as id__1_0_0_, address0_.address_line1__ as address_2_0_0_, address0_.zipcode__ as zipcode_3_0_0_, address0_.city__ as city__4_0_0_ from address address0_ where address0_.id__=?
HibernateLog --> 11:43:20 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [34]
Address.setId()
HibernateLog --> 11:43:20 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [foostreet]
HibernateLog --> 11:43:20 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [34 foo]
HibernateLog --> 11:43:20 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_0_] : [VARCHAR]) - [FooCity34]

/ 1c.entities=1, 1c.colls=1 (new PersistentSet(34l))	,

			employee=(Employee)session.get(Employee.class, 1l);

Hibernate: select employee0_.id_ as id_1_1_0_, employee0_.name_ as name_2_1_0_, employee0_.salary_ as salary_3_1_0_, employee0_.address_ as address_4_1_0_ from employee employee0_ where employee0_.id_=?
HibernateLog --> 11:46:37 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [1]
HibernateLog --> 11:46:37 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo1]
HibernateLog --> 11:46:37 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [1.0]
HibernateLog --> 11:46:37 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [34]

/ 1c.entities=2, 1c.colls=1

			employee2=(Employee)session.get(Employee.class, 2l);

/ 1c.entities=3, 1c.colls=1

			address.getEmployees().remove(employee);

Hibernate: select employees0_.address_ as address_4_0_0_, employees0_.id_ as id_1_1_0_, employees0_.id_ as id_1_1_1_, employees0_.name_ as name_2_1_1_, employees0_.salary_ as salary_3_1_1_, employees0_.address_ as address_4_1_1_ from employee employees0_ where employees0_.address_=?
HibernateLog --> 11:48:37 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [34]
HibernateLog --> 11:48:37 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [2]
HibernateLog --> 11:48:37 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [34]
HibernateLog --> 11:48:37 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [2]
HibernateLog --> 11:48:37 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [1]
HibernateLog --> 11:48:37 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [34]
HibernateLog --> 11:48:37 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [1]

/ 1c.

			address.getEmployees().remove(employee2);
			
			session.update(address);
			
	        	tx.commit();

HibernateLog --> 11:51:44 DEBUG org.hibernate.SQL - delete from employee where id_=?
Hibernate: delete from employee where id_=?
HibernateLog --> 11:51:44 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [2]

HibernateLog --> 11:51:44 DEBUG org.hibernate.SQL - delete from employee where id_=?
Hibernate: delete from employee where id_=?
HibernateLog --> 11:51:44 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [1]

/ 1c.entities=1	, 1c.colls=1	,


/ 7	. 

/ Er is een verschil of we doen	,
			address=(Address)session.get(Address.class, 34l);
			employee=(Employee)session.get(Employee.class, 1l);
			employee2=(Employee)session.get(Employee.class, 2l);
			address.getEmployees().remove(employee);
/ of	,
			address=(Address)session.get(Address.class, 34l);
			address.getEmployees().remove(employee);

/ In .remove doet hij eerst init de coll	, en daarom doet hij de coll query	,
/ Als we al 
			employee=(Employee)session.get(Employee.class, 1l);
			employee2=(Employee)session.get(Employee.class, 2l);
/ dan staan deze dus in de 1c,	 en worden de H props niet hydrated uit de resultSet 	,




AbstractCollectionLoadQueryDetails$CollectionLoaderRowReader(AbstractRowReader).readRow(ResultSet, ResultSetProcessingContextImpl) line: 114	
			// 2) allow entity references to resolve their non-identifier hydrated state and entity instance
			for ( EntityReferenceInitializer entityReferenceInitializer : entityReferenceInitializers ) {
				entityReferenceInitializer.hydrateEntityState( resultSet, context );

////////////////////
/ DEMO
/ Als entity in 1c, dan zal hij de queried data NIET hydrate, want dat heeft hij al gedaan	,
/ Maar de query (de coll query in dit geval ) doet hij wel	, WH om te zien welke Employees er in de coll moeten	,
/ Hij checks niet 2c	, want assemble is even veel werk als hydrate	,

EntityReferenceInitializerImpl.hydrateEntityState(ResultSet, ResultSetProcessingContextImpl) line: 214	
	// see if we have an existing entry in the session for this EntityKey
		final Object existing = context.getSession().getEntityUsingInterceptor( entityKey );
		if ( existing != null ) {
/ JA	, als we al eerder session.get(Employee.class,2l) 	, 
/ NEE 	, als niet	,
/s
SessionImpl.getEntityUsingInterceptor(EntityKey) line: 637	
		final Object result = persistenceContext.getEntity(key);
			return result;
/t
			// use the existing association as the hydrated state
			processingState.registerEntityInstance( existing );
/ 7	.

/ we kunnen .seve en .update ook eerder set	,

/ 7	.

/ Address	,
	<set
 		name="employees"
 		inverse="false"
 		cascade="save-update,delete,delete-orphan"
 	>
 		<key
 			column="address_"
 
 		></key>
 		<one-to-many class="Employee"/>
 	</set>

/ Geen <key not-null="true">
/ we hoeven in <many-to-one NIET insert, update="false">

/ Employee

	<many-to-one 
		name="address"
		column="address_"
		not-null="true"

	>
	</many-to-one>

/ Wel <key not-null="true">

			Employee employee=new Employee(1l,"Foo1",1.00);
			Address address=new Address(12l,"foostreet", "12 foo", "FooCity12");
			Address address3=new Address(34l,"foostreet", "34 foo", "FooCity34");
			
//			employee.setAddress(address3);
//			employee2.setAddress(address3);
			address3.getEmployees().add(employee);
			address3.getEmployees().add(employee2);
			session.save(address3);

org.hibernate.PropertyValueException: not-null property references a null or transient value : my.test.own.hibernate_xml_M_N_bidir_ehcache.Employee.address
	at org.hibernate.engine.internal.Nullability.checkNullability(Nullability.java:106)
	at org.hibernate.action.internal.AbstractEntityInsertAction.nullifyTransientReferencesIfNotAlready(AbstractEntityInsertAction.java:132)
	at org.hibernate.action.internal.AbstractEntityInsertAction.makeEntityManaged(AbstractEntityInsertAction.java:141)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:201)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:179)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:166)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:332)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:288)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:194)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:137)
	at org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.saveWithGeneratedOrRequestedId(DefaultSaveOrUpdateEventListener.java:209)
	at org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.entityIsTransient(DefaultSaveOrUpdateEventListener.java:194)
	at org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.performSaveOrUpdate(DefaultSaveOrUpdateEventListener.java:114)
	at org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.onSaveOrUpdate(DefaultSaveOrUpdateEventListener.java:90)
	at org.hibernate.internal.SessionImpl.fireSaveOrUpdate(SessionImpl.java:684)
	at org.hibernate.internal.SessionImpl.saveOrUpdate(SessionImpl.java:676)
	at org.hibernate.engine.spi.CascadingActions$5.cascade(CascadingActions.java:235)
	at org.hibernate.engine.internal.Cascade.cascadeToOne(Cascade.java:350)
	at org.hibernate.engine.internal.Cascade.cascadeAssociation(Cascade.java:293)
	at org.hibernate.engine.internal.Cascade.cascadeProperty(Cascade.java:161)
	at org.hibernate.engine.internal.Cascade.cascadeCollectionElements(Cascade.java:379)
	at org.hibernate.engine.internal.Cascade.cascadeCollection(Cascade.java:319)
	at org.hibernate.engine.internal.Cascade.cascadeAssociation(Cascade.java:296)
	at org.hibernate.engine.internal.Cascade.cascadeProperty(Cascade.java:161)
	at org.hibernate.engine.internal.Cascade.cascade(Cascade.java:118)
	at org.hibernate.event.internal.AbstractSaveEventListener.cascadeAfterSave(AbstractSaveEventListener.java:460)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:294)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:194)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:137)
	at org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.saveWithGeneratedOrRequestedId(DefaultSaveOrUpdateEventListener.java:209)
	at org.hibernate.event.internal.DefaultSaveEventListener.saveWithGeneratedOrRequestedId(DefaultSaveEventListener.java:55)
	at org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.entityIsTransient(DefaultSaveOrUpdateEventListener.java:194)
	at org.hibernate.event.internal.DefaultSaveEventListener.performSaveOrUpdate(DefaultSaveEventListener.java:49)
	at org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.onSaveOrUpdate(DefaultSaveOrUpdateEventListener.java:90)
	at org.hibernate.internal.SessionImpl.fireSave(SessionImpl.java:715)
	at org.hibernate.internal.SessionImpl.save(SessionImpl.java:707)
	at org.hibernate.internal.SessionImpl.save(SessionImpl.java:702)
	at my.test.own.hibernate_xml_M_N_bidir_ehcache.Main.testBasicUsage(Main.java:108)
	at my.test.own.hibernate_xml_M_N_bidir_ehcache.Main.<init>(Main.java:62)
	at my.test.own.hibernate_xml_M_N_bidir_ehcache.Main.main(Main.java:56)


/ Maar als we WEL ref def in Employee, dan is deze ERR er NIET	,

/ Address	,
	<set
 		name="employees"
 		inverse="false"
 		cascade="save-update,delete,delete-orphan"
 	>
 		<key
 			column="address_"
 
 		></key>
 		<one-to-many class="Employee"/>
 	</set>

/ Employee	,
	<many-to-one 
		name="address"
		column="address_"
		not-null="true"

	>
	</many-to-one>

/ Main.java	,

			Employee employee=new Employee(1l,"Foo1",1.00);
			Employee employee2=new Employee(2l,"Foo2",2.00);
			Address address3=new Address(34l,"foostreet", "34 foo", "FooCity34");
			
			employee.setAddress(address3);
			employee2.setAddress(address3);
			address3.getEmployees().add(employee);
			address3.getEmployees().add(employee2);
			session.save(address3);
/ OK	,

/ 7	.

/ Address	,
	<set
 		name="employees"
 		inverse="false"
 		cascade="save-update,delete,delete-orphan"
 	>
 		<key
 			column="address_"
			not-null="true" 
 		></key>
 		<one-to-many class="Employee"/>
 	</set>

/ WEL <key not-null="true">

/ Employee

	<many-to-one 
		name="address"
		column="address_"
		not-null="true"

	>
	</many-to-one>

/ Tijdens factory	,

HibernateLog --> 15:19:26 INFO  org.hibernate.engine.jdbc.internal.LobCreatorBuilder - HHH000424: Disabling contextual LOB creation as createClob() method threw error : java.lang.reflect.InvocationTargetException
org.hibernate.MappingException: Repeated column in mapping for entity: my.test.own.hibernate_xml_M_N_bidir_ehcache.Employee column: address_ (should be mapped with insert="false" update="false")
	at org.hibernate.mapping.PersistentClass.checkColumnDuplication(PersistentClass.java:709)
	at org.hibernate.mapping.PersistentClass.checkPropertyColumnDuplication(PersistentClass.java:731)
	at org.hibernate.mapping.PersistentClass.checkColumnDuplication(PersistentClass.java:753)
	at org.hibernate.mapping.PersistentClass.validate(PersistentClass.java:506)
	at org.hibernate.mapping.RootClass.validate(RootClass.java:270)
	at org.hibernate.cfg.Configuration.validate(Configuration.java:1358)
	at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1849)
	at my.test.own.hibernate_xml_M_N_bidir_ehcache.Main.setUp(Main.java:73)
	at my.test.own.hibernate_xml_M_N_bidir_ehcache.Main.<init>(Main.java:61)
	at my.test.own.hibernate_xml_M_N_bidir_ehcache.Main.main(Main.java:56)

/ TODO

/ 7	.

/ Hibernate: waar de not-null="true" staat is de kant waar de fk is def	,

/ Als we de fk def aan de <many-to-one> side	, dan hoeven we aan de set kant <key NIET not-null="true"> , want dat hebben we al gedaan	,

/ 13	.

/ Address	,
	<set
 		name="employees"
 		inverse="true"
 		cascade="save-update,delete,delete-orphan"
 	>
 		<key
 			column="address_"
 		></key>
 		<one-to-many class="Employee"/>
 	</set>

/ Employee	,
	<many-to-one 
		name="address"
		column="address_"
		not-null="true"

	>
	</many-to-one>

/ 13	.

/ Address	,
	<set
 		name="employees"
 		inverse="true"
 		cascade="save-update,delete,delete-orphan"
 	>
 		<key
 			column="address_"
			not-null="true"
 		></key>
 		<one-to-many class="Employee"/>
 	</set>

/ Employee	,
	<many-to-one 
		name="address"
		column="address_"
		insert="false"
		update="false"
	>
	</many-to-one>

/ 7	. 

/ als de set inverse	, dan is er wel een collectionrecreateaction, maar die doet niets	, 
	public void recreate(PersistentCollection collection, Serializable id, SessionImplementor session) throws HibernateException {
		if ( !isInverse && isRowInsertEnabled() ) {
/ NEE
/ Dus GEEN	, 
Hibernate: update employee set address_=? where id_=?
HibernateLog --> 11:38:43 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [34]
HibernateLog --> 11:38:43 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [1]

/ 13	.

/ ehcache, read-write

/ hibernate_xml_1_N_bidir_ehcache	,

/ in de 2de session doet H bij .iterator de coll query, en omdat de employee's al in de 1ste session ->2c	, worden ze nu niet update in 2c	,  in de 3de session vinden we de employee's uit 2c, uit de 1ste session dus, en deze hebben address=null
/ maar als we een employee in de 2de session update,	 dan wordt hij in 2c wel update, omdat de soft-lock en deze update in dezelfde tx plaatsvinden	, 
/ TODO 
/ HIER HIER

/ Einde HIBERNATE MAPPINGS

/ HIBERNATE PERFORMANCE

/ 7	.

/ <many-to-one lazy="false/proxy/no-proxy"
/ <set lazy="false/true/extra">
/ <class lazy="true/false">

/ we lezen	,

By default, Hibernate3 uses lazy select fetching for collections and lazy proxy fetching for single-valued associations. 

/ bij <many-to-one ...> betekent lazy: proxy of inst	,
/ bij <set ...> betekent lazy: wanneer wordt de set collected: with .get(address) of later bij coll.size() of coll.iterator()



/ no-proxy
/ TODO

/ bij een <property lazy="true/false">

/ 13	. 

/ N_1_ehcache	,

/ <many-to-one lazy="false/proxy"> 

/ In Employee is een ref naar de Address	,
/ als we 'n Employee session.get	, en we willen geen proxy naar de Address, maar de Address zelf, dan kunnen we	, 
	class Address lazy=false
/ of	,
	in Employee <many-to-one class="Address" lazy="false"> 


/ 1313	.

/ Address
<class 
	name="Address" 
	table="address"
	lazy="true"
>

/ Employee	,
	<many-to-one 
		name="address"
		column="address_"
		not-null="false"
		lazy="proxy"
	/>

/ <many-to-one lazy="proxy"> is de default	,
/ <class lazy="true"> is de default	,

/ 1st session	,

			Address address=new Address(12l,"foostreet", "12 foo", "FooCity12");
			Employee employee=new Employee(1l,"Foo1",1.00);
			employee.setAddress(address);
			Employee employee2=new Employee(2l,"Foo2",2.00);
			employee2.setAddress(address);

			session.save(employee);
			session.save(employee2);
			session.save(address);

/ 2de session	,
	        employee = (Employee) session.get(Employee.class, 1l);
/ *
	        employee.getAddress().setCity("BarTown");
/**

/ *
select employee0_.id_ as id_1_1_0_, employee0_.name_ as name_2_1_0_, employee0_.salary_ as salary_3_1_0_, employee0_.address_ as address_4_1_0_ 
from employee employee0_ 
where employee0_.id_=?
HibernateLog --> 15:33:23 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [1]
HibernateLog --> 15:33:23 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo1]
HibernateLog --> 15:33:23 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [1.0]
HibernateLog --> 15:33:23 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [12]

employee	Employee  (id=54)	
	address	Address_$$_jvst135_1  (id=57)	

/ **
select address0_.id__ as id__1_0_0_, address0_.address_line1__ as address_2_0_0_, address0_.zipcode__ as zipcode_3_0_0_, address0_.city__ as city__4_0_0_ from address address0_ where address0_.id__=?
HibernateLog --> 15:33:43 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
HibernateLog --> 15:33:43 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [foostreet]
HibernateLog --> 15:33:43 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [12 foo]
HibernateLog --> 15:33:43 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_0_] : [VARCHAR]) - [FooCity12]


/ Als we <many-to-one lazy="false"> is employee.address een Address inst	,

/ 1313

<class 
	name="Address" 
	table="address"
	lazy="true"
>

/ Employee	,
	<many-to-one 
		name="address"
		column="address_"
		not-null="false"
		lazy="false"		/ !
	/>

/ De query naar Address komt er meteen achteraan	,  en employee.address=Address inst	,

/ 2de session	,
	        employee = (Employee) session.get(Employee.class, 1l);
/*
	        employee.getAddress().setCity("BarTown");
/**

/ *
select employee0_.id_ as id_1_1_0_, employee0_.name_ as name_2_1_0_, employee0_.salary_ as salary_3_1_0_, employee0_.address_ as address_4_1_0_ 
from employee employee0_ 
where employee0_.id_=?
HibernateLog --> 15:45:04 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [1]
HibernateLog --> 15:45:04 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo1]
HibernateLog --> 15:45:04 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [1.0]
HibernateLog --> 15:45:04 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [12]
select address0_.id__ as id__1_0_0_, address0_.address_line1__ as address_2_0_0_, address0_.zipcode__ as zipcode_3_0_0_, address0_.city__ as city__4_0_0_ from address address0_ where address0_.id__=?
HibernateLog --> 15:45:04 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
Address.setId()
HibernateLog --> 15:45:04 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [foostreet]
HibernateLog --> 15:45:04 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [12 foo]
HibernateLog --> 15:45:04 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_0_] : [VARCHAR]) - [FooCity12]

/ **
/ NIETS

employee	Employee  (id=54)	
	address	Address  (id=57)	


/ 1313	,

/ Address
<class 
	name="Address" 
	table="address"
	lazy="false" 		/ !
>

/ Employee	,
	<many-to-one 
		name="address"
		column="address_"
		not-null="false"
		lazy="false/proxy"	/ ! maakt niet uit	, we zien een join	,
	/>


	        employee = (Employee) session.get(Employee.class, 1l);
/ *
	        employee.getAddress().setCity("BarTown");
/**

/ we see a join	, and employee.address is an Adress inst	, not a proxy	,

/*
select employee0_.id_ as id_1_1_0_, employee0_.name_ as name_2_1_0_, employee0_.salary_ as salary_3_1_0_, employee0_.address_ as address_4_1_0_, 
 address1_.id__ as id__1_0_1_, address1_.address_line1__ as address_2_0_1_, address1_.zipcode__ as zipcode_3_0_1_, address1_.city__ as city__4_0_1_ 
from employee employee0_ 
left outer join address address1_ on employee0_.address_=address1_.id__ 
where employee0_.id_=?
HibernateLog --> 15:52:40 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [1]
HibernateLog --> 15:52:40 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_1_] : [BIGINT]) - [12]
HibernateLog --> 15:52:40 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo1]
HibernateLog --> 15:52:40 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [1.0]
HibernateLog --> 15:52:40 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [12]
Address.setId()
HibernateLog --> 15:52:40 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_1_] : [VARCHAR]) - [foostreet]
HibernateLog --> 15:52:40 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_1_] : [VARCHAR]) - [12 foo]
HibernateLog --> 15:52:40 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_1_] : [VARCHAR]) - [FooCity12]
Address.setAddressLine1()

employee	Employee  (id=54)	
	address	Address  (id=57)	

/ **
/ NOTHING

/ 13	



/ N_1_join_ehcache	,

/ TODO, SKIP FOR NOW

/ lazy	, ref	,

/ Employee
		<join 
			table="employee_address"
			optional="true">
			<key 
				column="employee_"
				unique="true"	
			/>
			<many-to-one 
				name="address"
				column="address_"
				not-null="true"
				lazy="false/proxy/no-proxy"
			/>
		</join>


/ 2de session	,
	        employee = (Employee) session.get(Employee.class, 1l);

select employee0_.id_ as id_1_1_0_, employee0_.name_ as name_2_1_0_, employee0_.salary_ as salary_3_1_0_, 
	employee0_1_.address_ as address_2_2_0_ 
from employee employee0_ 
left outer join employee_address employee0_1_ on employee0_.id_=employee0_1_.employee_ 
where employee0_.id_=?



/ als lazy="proxy", WH de default	, of als we lazy weglaten	, 

employee	Employee  (id=47)	
	address	Address_$$_jvstaad_0  (id=50)	
	id	1	
	name	"Foo1" (id=55)	
	salary	1.0	

/ we zien dus een proxy	,

	        employee.getAddress().getCity();
	        employee.getAddress().setCity("BarTown");
/ employee.address blijft een proxy	,

/ 13	.

/ 1_N_ehcache

/ lazy	, coll	,

/ Address	,
  	<set
 		name="employees"
 		inverse="false"
 		lazy="true/false/extra"
 	>
 		<cache usage="read-write"/>	
 		<key
 			column="address_"
 			not-null="false"
 			update="true"
 		/>
 		
		<one-to-many 
			class="Employee"
		/>
 	
 
	</set>

/ de default is <set lazy="true">

/ 1313	. 

/ <set lazy="true">

/ lazy="true" => we zien dat er GEEN speciale size query is	,

/ Main	,
/ 2de session	,

	        employee = (Employee) session.get(Employee.class, 1l);
/ uit 2c
	        address=(Address)session.get(Address.class, 12l);
/ uit 2c	, address.employees=lege PersistentSet	,

	        employees=address.getEmployees();
	        employees.size();
/ coll query	,
	        employees.size();
/ reads set.size()
	        iterator=employees.iterator();
/ GEEN coll query	,

/ 3de session
	        employee = (Employee) session.get(Employee.class, 1l);
/ uit 2c
	        address=(Address)session.get(Address.class, 12l);
/ uit 2c	,
	        employees=address.getEmployees();
	        employees.size();
/ GEEN coll query	,
	        employees.size();
/ GEEN coll query	,
	        iterator=employees.iterator();
/ GEEN coll query	,


/ 1313	. 

/ lazy="extra"

/ lazy="extra" => we zien dat er een speciale size query is	,
/ de result van deze query komt niet in 1c, 2c	,  maar =  set.size()	,

/ Main	,
/ 2de session	,

	        employee = (Employee) session.get(Employee.class, 1l);
/ uit 2c
	        address=(Address)session.get(Address.class, 12l);
/ uit 2c	,
	        employees=address.getEmployees();
	        employees.size();
/ size query	,
	        employees.size();
/ reads set.size()
	        iterator=employees.iterator();
/ coll query	,

/ 3de session
	        employee = (Employee) session.get(Employee.class, 1l);
/ uit 2c
	        address=(Address)session.get(Address.class, 12l);
/ uit 2c	,
	        employees=address.getEmployees();
	        employees.size();
/ coll query	,
	        employees.size();
/ reads set.size()
	        iterator=employees.iterator();
/ uit 2c, GEEN coll query	,

/ 1313	. 

/ <set lazy="false">

	        employee = (Employee) session.get(Employee.class, 1l);
/ uit 2c
	        address=(Address)session.get(Address.class, 12l);
/ uit 2c	, maar coll uit coll query	,

	        employees=address.getEmployees();
	        employees.size();
	        employees.size();
	        iterator=employees.iterator();
/ NIETS	, 

/ 3de session
	        employee = (Employee) session.get(Employee.class, 1l);
/ uit 2c
	        address=(Address)session.get(Address.class, 12l);
/ uit 2c	 , de coll ook uit 2c	,

	        employees=address.getEmployees();
	        employees.size();
	        iterator=employees.iterator();
/ NIETS 

/ 1313

/ <set lazy="extra"> more detail	,

/ 2de session	,  meer detail	,

	        Set<Employee>employees=address.getEmployees();
	        employees.size();

Hibernate: select count(id_) from employee where address_ =?
HibernateLog --> 13:25:20 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]

	        employees.size();
	        Iterator<Employee>iterator=employees.iterator();

select employees0_.address_ as address_4_0_0_, employees0_.id_ as id_1_1_0_, employees0_.id_ as id_1_1_1_, employees0_.name_ as name_2_1_1_, employees0_.salary_ as salary_3_1_1_ 
from employee employees0_ 
where employees0_.address_=?
HibernateLog --> 13:25:22 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
HibernateLog --> 13:25:22 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [2]
HibernateLog --> 13:25:22 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo2]
HibernateLog --> 13:25:22 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [2.0]
HibernateLog --> 13:25:22 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [12]

HibernateLog --> 13:25:22 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [2]
HibernateLog --> 13:25:22 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [1]
HibernateLog --> 13:25:22 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [12]
HibernateLog --> 13:25:22 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [1]
/ TODO

	       
/ code	, Meer detail	, 
	        employees.size();
/s
PersistentSet(AbstractPersistentCollection).readSize() line: 155	
		if ( !initialized ) {
			if ( cachedSize != -1 && !hasQueuedOperations() ) {
				return true;
			}
			else {
				final boolean isExtraLazy = withTemporarySessionIfNeeded(
						new LazyInitializationWork<Boolean>() {
							@Override
...							public Boolean doWork() {


	        employees.size();
/s
			return readSize() ? getCachedSize() : set.size();


	        iterator=employees.iterator();
/s
PersistentSet(AbstractPersistentCollection).initialize(boolean) line: 554	
		if ( initialized ) {
			return;
		}
		withTemporarySessionIfNeeded(
				new LazyInitializationWork<Object>() {
					@Override
					public Object doWork() {
...


/ 7	.

/ 1_N__ehcache
/ 1_N_bidir_ehcache

/ volgorder .save	,

/ Address
  	<set
 		name="employees"
 		inverse="false"
 	>
 		<cache 
 			usage="read-write"
 		/>	
 		<key
 			column="address_"
 			not-null="true"				/ !
 			update="true"
 		/>
 		
		<one-to-many 
			class="Employee"
		/>
 	
 
 		</set>

/ we moeten een extra H prop laten gen	, als not-null="true", dan zien we ERR als de volgorder van .save niet OK	,

/ we moeten volgorde	,
			session.save(address);
			session.save(employee);

/ want employee's H props krijgt extra	, en als we eerst .save(employee) is die extra H prop null	, want	,
BackrefPropertyAccessor$BackrefGetter.getForInsert(Object, Map, SessionImplementor) line: 125	
				return session.getPersistenceContext().getOwnerId( entityName, propertyName, target, mergeMap );

/ Dan in	,
ForeignKeys$Nullifier.isNullifiable(String, Object) line: 180	
			final EntityEntry entityEntry = session.getPersistenceContext().getEntry( object );
/ object=Address inst	,
			if ( entityEntry == null ) {
/ JA als we eerst .save(employee)	, 
/ er volgt dan een query op Address#12	,
				return isTransient( entityName, object, null, session );
			}
			else {
/ JA	, als .save(employee) na .save(eddress)	, dan is Address#12 in de 1c	,
				return entityEntry.isNullifiable( isEarlyInsert, session );

/ Ook	, 
/ Eerder	, in 
ActionQueue.addInsertAction(AbstractEntityInsertAction) line: 177	
		NonNullableTransientDependencies nonNullableTransientDependencies = insert.findNonNullableTransientEntities();
/ TODO (Wat is dit?)

/ 7	.

/ N_1_ehcache

/ volgorde .save

/ Employee
	<many-to-one 
		name="address"
		column="address_"
		not-null="true"	 		/ !
		lazy="proxy"
	/>

/ als we not-null="true"	,  dan ERR	,

/ we zien nu een latere fout als bij 1_N_ehcache	, 

org.hibernate.TransientPropertyValueException: Not-null property references a transient value - transient instance must be saved before current operation : my.test.own.hibernate_xml_N_1_ehcache.Employee.address -> my.test.own.hibernate_xml_N_1_ehcache.Address
	at org.hibernate.action.internal.UnresolvedEntityInsertActions.checkNoUnresolvedActionsAfterOperation(UnresolvedEntityInsertActions.java:137)
	at org.hibernate.engine.spi.ActionQueue.checkNoUnresolvedActionsAfterOperation(ActionQueue.java:318)
	at org.hibernate.internal.SessionImpl.checkNoUnresolvedActionsAfterOperation(SessionImpl.java:658)
	at org.hibernate.internal.SessionImpl.fireSave(SessionImpl.java:717)
	at org.hibernate.internal.SessionImpl.save(SessionImpl.java:707)
	at org.hibernate.internal.SessionImpl.save(SessionImpl.java:702)
	at my.test.own.hibernate_xml_N_1_ehcache.Main.testBasicUsage(Main.java:123)
	at my.test.own.hibernate_xml_N_1_ehcache.Main.<init>(Main.java:64)
	at my.test.own.hibernate_xml_N_1_ehcache.Main.main(Main.java:58)

/ Als we not-null="false", dan OK, maar we zien wel weer die extra query	,

select address_.id__, address_.address_line1__ as address_2_0_, address_.zipcode__ as zipcode_3_0_, address_.city__ as city__4_0_ 
from address address_ 
where address_.id__=?
HibernateLog --> 13:11:55 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]

/ 7	.

/ N_1_bidir_fetch_ehcache

/ HIER HIER


/ Book (574) 1+N probleem	,

/ EntBatchApp	,

/ Employee
	<many-to-one 
		name="address"
		column="address_"
		not-null="true"
		lazy="proxy"

	/>
	<many-to-one 
		name="living"
		column="living_"
		not-null="true"
		lazy="proxy"

	/>

/ Address	,
	
	<set
 		name="employees"
 		inverse="true"
 		lazy="true"
 	>
<!--  		<cache usage="read-write"/>	
 --> 		
 		<key
 			column="address_"
 			not-null="false"
 		/>
 		<one-to-many class="Employee"/>
 	</set>

/ Address	,
	Set<Employee>employees=new HashSet<Employee>();

/ Employee	,
   	private Address address;
    	private Address living;

/ we geven een employee ook een woon adres	, living	,  
/ address is werk adres	, deze is bidir	, living is unidir	,

/ Beide zijn not-null, dus we moeten eerst de Address's save	, daarna de Employee	,

foo=> select*from address;
 id__ | address_line1__ | zipcode__ |   city__   
------+-----------------+-----------+------------
   12 | foostreet       | 12 foo    | FooCity12
    1 | livingstreet    | 1 living  | LivingCity
    0 | livingstreet    | 0 living  | LivingCity
    3 | livingstreet    | 3 living  | LivingCity
    4 | livingstreet    | 4 living  | LivingCity
    2 | livingstreet    | 2 living  | LivingCity
(6 rows)

foo=> select*from employee;
 id_ | name_ | salary_ | address_ | living_ 
-----+-------+---------+----------+---------
   1 | Foo1  |       1 |       12 |       1
   0 | Foo0  |       0 |       12 |       0
   3 | Foo3  |       3 |       12 |       3
   4 | Foo4  |       4 |       12 |       4
   2 | Foo2  |       2 |       12 |       2
(5 rows)


/ Main	,

/ 1ste session	,

			Address address=new Address(1l,"FooStreet"+1, 1+"Foo", "FooCity"+1);
			session.save(address);
/ .save(address) voor .save(employee)
			for(int j=1;j<+ENTSIZ;j++){		
				int k=10*1+j;
				Employee employee=new Employee((long)k,"Foo"+k,(double)k);
				address.getEmployees().add(employee);
				employee.setAddress(address);
				employee.setLiving(new Address((long)k,"LivingStreet",k+" living","LivingCity"+k));
				session.save(employee.getLiving());
/ .save(living) voor .save(employee)
				session.save(employee);
			}

/ 2de session	,
			Query query=session.createQuery("from Employee");
			List<Employee>employees6=query.list();
/ *
			ListIterator<Employee>listIterator=employees6.listIterator();
			while(listIterator.hasNext()){
				Employee employee6=listIterator.next();
				String city=employee6.getLiving().getCity();
/ **

/ *
/ de 1 query	,

select employee0_.id_ as id_1_1_, employee0_.name_ as name_2_1_, employee0_.salary_ as salary_3_1_, employee0_.address_ as address_4_1_, employee0_.living_ as living_5_1_ 
from employee employee0_
HibernateLog --> 13:49:18 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_] : [BIGINT]) - [1]
HibernateLog --> 13:49:18 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_] : [VARCHAR]) - [Foo1]
HibernateLog --> 13:49:18 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_] : [DOUBLE]) - [1.0]
HibernateLog --> 13:49:18 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_] : [BIGINT]) - [12]
HibernateLog --> 13:49:18 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_] : [BIGINT]) - [1]
HibernateLog --> 13:49:18 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_] : [BIGINT]) - [0]
HibernateLog --> 13:49:18 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_] : [VARCHAR]) - [Foo0]
HibernateLog --> 13:49:18 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_] : [DOUBLE]) - [0.0]
HibernateLog --> 13:49:18 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_] : [BIGINT]) - [12]
HibernateLog --> 13:49:18 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_] : [BIGINT]) - [0]
HibernateLog --> 13:49:18 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_] : [BIGINT]) - [3]
HibernateLog --> 13:49:18 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_] : [VARCHAR]) - [Foo3]
HibernateLog --> 13:49:18 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_] : [DOUBLE]) - [3.0]
HibernateLog --> 13:49:18 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_] : [BIGINT]) - [12]
HibernateLog --> 13:49:18 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_] : [BIGINT]) - [3]
HibernateLog --> 13:49:18 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_] : [BIGINT]) - [4]
HibernateLog --> 13:49:18 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_] : [VARCHAR]) - [Foo4]
HibernateLog --> 13:49:18 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_] : [DOUBLE]) - [4.0]
HibernateLog --> 13:49:18 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_] : [BIGINT]) - [12]
HibernateLog --> 13:49:18 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_] : [BIGINT]) - [4]
HibernateLog --> 13:49:18 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_] : [BIGINT]) - [2]
HibernateLog --> 13:49:18 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_] : [VARCHAR]) - [Foo2]
HibernateLog --> 13:49:18 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_] : [DOUBLE]) - [2.0]
HibernateLog --> 13:49:18 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_] : [BIGINT]) - [12]
HibernateLog --> 13:49:18 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_] : [BIGINT]) - [2]


/ **
/ De N queries	,

select address0_.id__ as id__1_0_0_, address0_.address_line1__ as address_2_0_0_, address0_.zipcode__ as zipcode_3_0_0_, address0_.city__ as city__4_0_0_ 
from address address0_ 
where address0_.id__=?
HibernateLog --> 13:50:40 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [1]
HibernateLog --> 13:50:40 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [livingstreet]
HibernateLog --> 13:50:40 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [1 living]
HibernateLog --> 13:50:40 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_0_] : [VARCHAR]) - [LivingCity]

select address0_.id__ as id__1_0_0_, address0_.address_line1__ as address_2_0_0_, address0_.zipcode__ as zipcode_3_0_0_, address0_.city__ as city__4_0_0_ 
from address address0_ 
where address0_.id__=?
HibernateLog --> 13:51:34 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [0]
Address.setId()
HibernateLog --> 13:51:34 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [livingstreet]
HibernateLog --> 13:51:34 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [0 living]
HibernateLog --> 13:51:34 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_0_] : [VARCHAR]) - [LivingCity]

...


/ 13	. 

/ N_1_bidir_fetch_ehcache

/ batch-size

/ EntBatchApp	,

/ Address
<class 
	name="Address" 
	table="address"
	batch-size="3"
>


/ 2de session	,
			Query query=session.createQuery("from Employee");
			List<Employee>employees6=query.list();
/*
			ListIterator<Employee>listIterator=employees6.listIterator();
			while(listIterator.hasNext()){
				Employee employee6=listIterator.next();
				String city=employee6.getLiving().getCity();
/ **

/ *
/ onveranderd	,

select employee0_.id_ as id_1_1_, employee0_.name_ as name_2_1_, employee0_.salary_ as salary_3_1_, employee0_.address_ as address_4_1_, employee0_.living_ as living_5_1_ 
from employee employee0_
HibernateLog --> 07:36:14 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_] : [BIGINT]) - [4]
HibernateLog --> 07:36:14 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_] : [VARCHAR]) - [Foo4]
HibernateLog --> 07:36:14 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_] : [DOUBLE]) - [4.0]
HibernateLog --> 07:36:14 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_] : [BIGINT]) - [12]
HibernateLog --> 07:36:14 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_] : [BIGINT]) - [4]
HibernateLog --> 07:36:14 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_] : [BIGINT]) - [3]
HibernateLog --> 07:36:14 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_] : [VARCHAR]) - [Foo3]
HibernateLog --> 07:36:14 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_] : [DOUBLE]) - [3.0]
HibernateLog --> 07:36:14 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_] : [BIGINT]) - [12]
HibernateLog --> 07:36:14 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_] : [BIGINT]) - [3]
HibernateLog --> 07:36:14 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_] : [BIGINT]) - [0]
HibernateLog --> 07:36:14 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_] : [VARCHAR]) - [Foo0]
HibernateLog --> 07:36:14 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_] : [DOUBLE]) - [0.0]
HibernateLog --> 07:36:14 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_] : [BIGINT]) - [12]
HibernateLog --> 07:36:14 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_] : [BIGINT]) - [0]
HibernateLog --> 07:36:14 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_] : [BIGINT]) - [2]
HibernateLog --> 07:36:14 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_] : [VARCHAR]) - [Foo2]
HibernateLog --> 07:36:14 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_] : [DOUBLE]) - [2.0]
HibernateLog --> 07:36:14 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_] : [BIGINT]) - [12]
HibernateLog --> 07:36:14 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_] : [BIGINT]) - [2]
HibernateLog --> 07:36:14 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_] : [BIGINT]) - [1]
HibernateLog --> 07:36:14 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_] : [VARCHAR]) - [Foo1]
HibernateLog --> 07:36:14 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_] : [DOUBLE]) - [1.0]
HibernateLog --> 07:36:14 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_] : [BIGINT]) - [12]
HibernateLog --> 07:36:14 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_] : [BIGINT]) - [1]


/ **

/ In de 1ste while loop	,

select address0_.id__ as id__1_0_0_, address0_.address_line1__ as address_2_0_0_, address0_.zipcode__ as zipcode_3_0_0_, address0_.city__ as city__4_0_0_ 
from address address0_ 
where address0_.id__ in (?, ?, ?)
HibernateLog --> 07:36:39 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [4]
HibernateLog --> 07:36:39 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [0]
HibernateLog --> 07:36:39 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [BIGINT] - [3]

HibernateLog --> 07:36:39 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_0_] : [BIGINT]) - [4]
HibernateLog --> 07:36:39 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [livingstreet]
HibernateLog --> 07:36:39 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [4 living]
HibernateLog --> 07:36:39 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_0_] : [VARCHAR]) - [LivingCity]

HibernateLog --> 07:36:39 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_0_] : [BIGINT]) - [3]
HibernateLog --> 07:36:39 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [livingstreet]
HibernateLog --> 07:36:39 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [3 living]
HibernateLog --> 07:36:39 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_0_] : [VARCHAR]) - [LivingCity]

HibernateLog --> 07:36:39 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_0_] : [BIGINT]) - [0]
HibernateLog --> 07:36:39 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [livingstreet]
HibernateLog --> 07:36:39 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [0 living]
HibernateLog --> 07:36:39 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_0_] : [VARCHAR]) - [LivingCity]

/ Dan in de 4de while loop	,

select address0_.id__ as id__1_0_0_, address0_.address_line1__ as address_2_0_0_, address0_.zipcode__ as zipcode_3_0_0_, address0_.city__ as city__4_0_0_ 
from address address0_ 
where address0_.id__ in (?, ?, ?)
HibernateLog --> 07:49:13 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [2]
HibernateLog --> 07:49:13 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [12]
HibernateLog --> 07:49:13 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [BIGINT] - [1]

HibernateLog --> 07:49:13 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_0_] : [BIGINT]) - [12]
HibernateLog --> 07:49:13 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [foostreet]
HibernateLog --> 07:49:13 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [12 foo]
HibernateLog --> 07:49:13 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_0_] : [VARCHAR]) - [FooCity12]

HibernateLog --> 07:49:13 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_0_] : [BIGINT]) - [2]
HibernateLog --> 07:49:13 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [livingstreet]
HibernateLog --> 07:49:13 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [2 living]
HibernateLog --> 07:49:13 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_0_] : [VARCHAR]) - [LivingCity]

HibernateLog --> 07:49:13 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_0_] : [BIGINT]) - [1]
HibernateLog --> 07:49:13 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [livingstreet]
HibernateLog --> 07:49:13 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [1 living]
HibernateLog --> 07:49:13 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_0_] : [VARCHAR]) - [LivingCity]

/ we zien ook 12	, maar dat is een werk adres	, maar in de while loop gaat het toch goed	, bij iedere  
				String city=employee6.getLiving().getCity();
/ wordt de living proxy in employee  resolved	, en hij pakt alleen de living's in de rs	, niet de working address	,

/ 13	.

/ N_1_bidir_fetch_ehcache

/ CollBatchApp

/ Address	,


/ 1ste session	,
		  	for(int i=1;i<=ENTSIZ;i++){
				Address address=new Address((long)i,"FooStreet "+i, i+" Foo", "FooCity"+i);
				session.save(address);
				for(int j=1;j<=COLLSIZ;j++){	
					int k=10*i+j;
					Employee employee=new Employee((long)k,"Foo"+k,(double)k);
					address.getEmployees().add(employee);
					employee.setAddress(address);
					employee.setLiving(new Address((long)k,"LivingStreet",k+" living","LivingCity"+k));
					session.save(employee.getLiving());
					session.save(employee);
				}
		  	}

/ 2de session	,
			Query query=session.createQuery("from Address a where a.zipcode like '%Foo%'");
			List<Address>addresses=query.list();
/ *
			ListIterator<Address>addressIterator=addresses.listIterator();
			while(addressIterator.hasNext()){
				Address address=addressIterator.next();
				Set<Employee>employees=address.getEmployees();
				Iterator<Employee>employeeIterator=employees.iterator();
/ **
				while(employeeIterator.hasNext()){
					Employee employee=employeeIterator.next();
/ +
					Address address2=employee.getLiving();
					String c=address2.getZipcode();
/ ***
					boolean b=false;
				}
			}

/ +
/ employee.address=Address inst	, employee.living=Address proxy	, 
/ emoloyee.address is een inst	, want vlak erboven is address def	,
/ employee.living wordt resolved bij ***	,

/ we zien bij ** en bij *** batching	, ** van de coll en *** van de ent	,

/ Dus we zien steeds 3 coll in query result	, en steeds 3 entities in query result	,
 

/ we zien	,

foo=> select*from address;
 id__ | address_line1__ | zipcode__ |    city__    
------+-----------------+-----------+--------------
    1 | FooStreet 1     | 1 Foo     | FooCity1
   11 | LivingStreet    | 11 living | LivingCity11
   12 | LivingStreet    | 12 living | LivingCity12
   13 | LivingStreet    | 13 living | LivingCity13
   14 | LivingStreet    | 14 living | LivingCity14
   15 | LivingStreet    | 15 living | LivingCity15
    2 | FooStreet 2     | 2 Foo     | FooCity2
   21 | LivingStreet    | 21 living | LivingCity21
   22 | LivingStreet    | 22 living | LivingCity22
   23 | LivingStreet    | 23 living | LivingCity23
   24 | LivingStreet    | 24 living | LivingCity24
   25 | LivingStreet    | 25 living | LivingCity25
    3 | FooStreet 3     | 3 Foo     | FooCity3
   31 | LivingStreet    | 31 living | LivingCity31
   32 | LivingStreet    | 32 living | LivingCity32
   33 | LivingStreet    | 33 living | LivingCity33
   34 | LivingStreet    | 34 living | LivingCity34
   35 | LivingStreet    | 35 living | LivingCity35
    4 | FooStreet 4     | 4 Foo     | FooCity4
   41 | LivingStreet    | 41 living | LivingCity41
   42 | LivingStreet    | 42 living | LivingCity42
   43 | LivingStreet    | 43 living | LivingCity43
   44 | LivingStreet    | 44 living | LivingCity44
   45 | LivingStreet    | 45 living | LivingCity45
    5 | FooStreet 5     | 5 Foo     | FooCity5
   51 | LivingStreet    | 51 living | LivingCity51
   52 | LivingStreet    | 52 living | LivingCity52
   53 | LivingStreet    | 53 living | LivingCity53
   54 | LivingStreet    | 54 living | LivingCity54
   55 | LivingStreet    | 55 living | LivingCity55
(30 rows)

foo=> select*from employee;
 id_ | name_ | salary_ | address_ | living_ 
-----+-------+---------+----------+---------
  11 | Foo11 |      11 |        1 |      11
  12 | Foo12 |      12 |        1 |      12
  13 | Foo13 |      13 |        1 |      13
  14 | Foo14 |      14 |        1 |      14
  15 | Foo15 |      15 |        1 |      15
  21 | Foo21 |      21 |        2 |      21
  22 | Foo22 |      22 |        2 |      22
  23 | Foo23 |      23 |        2 |      23
  24 | Foo24 |      24 |        2 |      24
  25 | Foo25 |      25 |        2 |      25
  31 | Foo31 |      31 |        3 |      31
  32 | Foo32 |      32 |        3 |      32
  33 | Foo33 |      33 |        3 |      33
  34 | Foo34 |      34 |        3 |      34
  35 | Foo35 |      35 |        3 |      35
  41 | Foo41 |      41 |        4 |      41
  42 | Foo42 |      42 |        4 |      42
  43 | Foo43 |      43 |        4 |      43
  44 | Foo44 |      44 |        4 |      44
  45 | Foo45 |      45 |        4 |      45
  51 | Foo51 |      51 |        5 |      51
  52 | Foo52 |      52 |        5 |      52
  53 | Foo53 |      53 |        5 |      53
  54 | Foo54 |      54 |        5 |      54
  55 | Foo55 |      55 |        5 |      55
(25 rows)

/ 1313

/ alleen batch-size in Address's <class batch-size="3">

/ Address	,
<class 
	name="Address" 
	table="address"
	batch-size="3"
>
	<set
 		name="employees"
 		inverse="true"
 		lazy="true"
 		fetch="select"
 	>
<!--  		<cache usage="read-write"/>	
 --> 		
 		<key
 			column="address_"
 			not-null="false"
 		/>
 		<one-to-many class="Employee"/>
 	</set>

/ Employee	,
	<many-to-one 
		name="address"
		column="address_"
		not-null="true"
		lazy="proxy"
		fetch="select"
	/>
	<many-to-one 
		name="living"
		column="living_"
		not-null="false"
		lazy="proxy"
		fetch="select"
	/>


/ *
/ De 1ste query, die er altijd is	, (1)	,

select address0_.id__ as id__1_0_, address0_.address_line1__ as address_2_0_, address0_.zipcode__ as zipcode_3_0_, address0_.city__ as city__4_0_ 
from address address0_ 
where address0_.zipcode__ like '%Foo%'
HibernateLog --> 09:53:02 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_] : [BIGINT]) - [1]
Address.setId()
HibernateLog --> 09:53:02 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_] : [VARCHAR]) - [FooStreet 1]
HibernateLog --> 09:53:02 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_] : [VARCHAR]) - [1 Foo]
HibernateLog --> 09:53:02 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_] : [VARCHAR]) - [FooCity1]
HibernateLog --> 09:53:02 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_] : [BIGINT]) - [2]
Address.setId()
HibernateLog --> 09:53:02 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_] : [VARCHAR]) - [FooStreet 2]
HibernateLog --> 09:53:02 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_] : [VARCHAR]) - [2 Foo]
HibernateLog --> 09:53:02 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_] : [VARCHAR]) - [FooCity2]
HibernateLog --> 09:53:02 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_] : [BIGINT]) - [3]
Address.setId()
HibernateLog --> 09:53:02 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_] : [VARCHAR]) - [FooStreet 3]
HibernateLog --> 09:53:02 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_] : [VARCHAR]) - [3 Foo]
HibernateLog --> 09:53:02 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_] : [VARCHAR]) - [FooCity3]
HibernateLog --> 09:53:02 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_] : [BIGINT]) - [4]
Address.setId()
HibernateLog --> 09:53:02 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_] : [VARCHAR]) - [FooStreet 4]
HibernateLog --> 09:53:02 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_] : [VARCHAR]) - [4 Foo]
HibernateLog --> 09:53:02 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_] : [VARCHAR]) - [FooCity4]
HibernateLog --> 09:53:02 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_] : [BIGINT]) - [5]
Address.setId()
HibernateLog --> 09:53:02 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_] : [VARCHAR]) - [FooStreet 5]
HibernateLog --> 09:53:02 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_] : [VARCHAR]) - [5 Foo]
HibernateLog --> 09:53:02 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_] : [VARCHAR]) - [FooCity5]

/ We zien voor iedere coll een query (N)	,

/ Dit willen we staks anders	,

/ **
select employees0_.address_ as address_4_0_0_, employees0_.id_ as id_1_1_0_, employees0_.id_ as id_1_1_1_, employees0_.name_ as name_2_1_1_, employees0_.salary_ as salary_3_1_1_, employees0_.address_ as address_4_1_1_, employees0_.living_ as living_5_1_1_ 
from employee employees0_ 
where employees0_.address_=?
HibernateLog --> 09:54:19 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [1]

HibernateLog --> 09:54:19 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [11]
HibernateLog --> 09:54:19 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo11]
HibernateLog --> 09:54:19 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [11.0]
HibernateLog --> 09:54:19 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [1]
HibernateLog --> 09:54:19 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_1_] : [BIGINT]) - [11]
HibernateLog --> 09:54:19 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [1]
HibernateLog --> 09:54:19 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [11]
HibernateLog --> 09:54:19 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [12]

HibernateLog --> 09:54:19 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo12]
HibernateLog --> 09:54:19 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [12.0]
HibernateLog --> 09:54:19 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [1]
HibernateLog --> 09:54:19 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_1_] : [BIGINT]) - [12]
HibernateLog --> 09:54:19 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [1]
HibernateLog --> 09:54:19 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [12]

HibernateLog --> 09:54:19 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [13]
HibernateLog --> 09:54:19 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo13]
HibernateLog --> 09:54:19 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [13.0]
HibernateLog --> 09:54:19 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [1]
HibernateLog --> 09:54:19 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_1_] : [BIGINT]) - [13]
HibernateLog --> 09:54:19 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [1]
HibernateLog --> 09:54:19 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [13]

HibernateLog --> 09:54:19 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [14]
HibernateLog --> 09:54:19 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo14]
HibernateLog --> 09:54:19 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [14.0]
HibernateLog --> 09:54:19 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [1]
HibernateLog --> 09:54:19 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_1_] : [BIGINT]) - [14]
HibernateLog --> 09:54:19 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [1]
HibernateLog --> 09:54:19 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [14]

HibernateLog --> 09:54:19 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [15]
HibernateLog --> 09:54:19 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo15]
HibernateLog --> 09:54:19 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [15.0]
HibernateLog --> 09:54:19 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [1]
HibernateLog --> 09:54:19 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_1_] : [BIGINT]) - [15]
HibernateLog --> 09:54:19 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [1]
HibernateLog --> 09:54:19 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [15]

/ we zien
employee	Employee  (id=30)	
	address	Address  (id=32)	
	living	Address_$$_jvst76c_1  (id=45)	

/ ***

select address0_.id__ as id__1_0_0_, address0_.address_line1__ as address_2_0_0_, address0_.zipcode__ as zipcode_3_0_0_, address0_.city__ as city__4_0_0_ 
from address address0_ 
where address0_.id__ in (?, ?, ?)
HibernateLog --> 12:43:44 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [14]
HibernateLog --> 12:43:44 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [13]
HibernateLog --> 12:43:44 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [BIGINT] - [15]
HibernateLog --> 12:43:44 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_0_] : [BIGINT]) - [13]
Address.setId()
HibernateLog --> 12:43:44 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [LivingStreet]
HibernateLog --> 12:43:44 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [13 living]
HibernateLog --> 12:43:44 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_0_] : [VARCHAR]) - [LivingCity13]
HibernateLog --> 12:43:44 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_0_] : [BIGINT]) - [14]
Address.setId()
HibernateLog --> 12:43:44 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [LivingStreet]
HibernateLog --> 12:43:44 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [14 living]
HibernateLog --> 12:43:44 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_0_] : [VARCHAR]) - [LivingCity14]
HibernateLog --> 12:43:44 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_0_] : [BIGINT]) - [15]
Address.setId()
HibernateLog --> 12:43:44 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [LivingStreet]
HibernateLog --> 12:43:44 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [15 living]
HibernateLog --> 12:43:44 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_0_] : [VARCHAR]) - [LivingCity15]
HibernateLog --> 12:43:44 TRACE org.hibernate.type.CollectionType - Created collection wrapper: [my.test.own.hibernate_xml_N_1_bidir_fetch_ehcache.Address.employees#13]

/ we zien <class name="Address" batch-size="3">	,

/ ***
/ volgende	,

select address0_.id__ as id__1_0_0_, address0_.address_line1__ as address_2_0_0_, address0_.zipcode__ as zipcode_3_0_0_, address0_.city__ as city__4_0_0_ 
from address address0_ 
where address0_.id__ in (?, ?)
HibernateLog --> 12:49:18 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
HibernateLog --> 12:49:18 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [11]

HibernateLog --> 12:49:18 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_0_] : [BIGINT]) - [11]
HibernateLog --> 12:49:18 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [LivingStreet]
HibernateLog --> 12:49:18 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [11 living]
HibernateLog --> 12:49:18 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_0_] : [VARCHAR]) - [LivingCity11]

HibernateLog --> 12:49:18 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_0_] : [BIGINT]) - [12]
HibernateLog --> 12:49:18 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [LivingStreet]
HibernateLog --> 12:49:18 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [12 living]
HibernateLog --> 12:49:18 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_0_] : [VARCHAR]) - [LivingCity12]

/ **
/ volgende	, 

select employees0_.address_ as address_4_0_0_, employees0_.id_ as id_1_1_0_, employees0_.id_ as id_1_1_1_, employees0_.name_ as name_2_1_1_, employees0_.salary_ as salary_3_1_1_, employees0_.address_ as address_4_1_1_, employees0_.living_ as living_5_1_1_ 
from employee employees0_ 
where employees0_.address_=?
HibernateLog --> 12:52:45 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [2]
HibernateLog --> 12:52:45 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [21]
HibernateLog --> 12:52:45 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo21]
HibernateLog --> 12:52:45 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [21.0]
HibernateLog --> 12:52:45 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [2]
HibernateLog --> 12:52:45 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_1_] : [BIGINT]) - [21]
HibernateLog --> 12:52:45 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [2]
HibernateLog --> 12:52:45 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [21]

HibernateLog --> 12:52:45 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [22]
HibernateLog --> 12:52:45 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo22]
HibernateLog --> 12:52:45 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [22.0]
HibernateLog --> 12:52:45 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [2]
HibernateLog --> 12:52:45 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_1_] : [BIGINT]) - [22]
HibernateLog --> 12:52:45 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [2]
HibernateLog --> 12:52:45 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [22]

HibernateLog --> 12:52:45 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [23]
HibernateLog --> 12:52:45 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo23]
HibernateLog --> 12:52:45 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [23.0]
HibernateLog --> 12:52:45 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [2]
HibernateLog --> 12:52:45 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_1_] : [BIGINT]) - [23]
HibernateLog --> 12:52:45 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [2]
HibernateLog --> 12:52:45 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [23]

HibernateLog --> 12:52:45 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [24]
HibernateLog --> 12:52:45 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo24]
HibernateLog --> 12:52:45 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [24.0]
HibernateLog --> 12:52:45 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [2]
HibernateLog --> 12:52:45 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_1_] : [BIGINT]) - [24]
HibernateLog --> 12:52:45 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [2]
HibernateLog --> 12:52:45 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [24]

HibernateLog --> 12:52:45 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [25]
HibernateLog --> 12:52:45 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo25]
HibernateLog --> 12:52:45 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [25.0]
HibernateLog --> 12:52:45 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [2]
HibernateLog --> 12:52:45 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_1_] : [BIGINT]) - [25]
HibernateLog --> 12:52:45 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [2]
HibernateLog --> 12:52:45 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [25]

/ ***

select address0_.id__ as id__1_0_0_, address0_.address_line1__ as address_2_0_0_, address0_.zipcode__ as zipcode_3_0_0_, address0_.city__ as city__4_0_0_ 
from address address0_ 
where address0_.id__ in (?, ?, ?)
HibernateLog --> 12:55:08 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [23]
HibernateLog --> 12:55:08 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [24]
HibernateLog --> 12:55:08 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [BIGINT] - [25]

HibernateLog --> 12:55:08 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_0_] : [BIGINT]) - [23]
HibernateLog --> 12:55:08 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [LivingStreet]
HibernateLog --> 12:55:08 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [23 living]
HibernateLog --> 12:55:08 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_0_] : [VARCHAR]) - [LivingCity23]

HibernateLog --> 12:55:08 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_0_] : [BIGINT]) - [24]
HibernateLog --> 12:55:08 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [LivingStreet]
HibernateLog --> 12:55:08 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [24 living]
HibernateLog --> 12:55:08 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_0_] : [VARCHAR]) - [LivingCity24]

HibernateLog --> 12:55:08 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_0_] : [BIGINT]) - [25]
HibernateLog --> 12:55:08 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [LivingStreet]
HibernateLog --> 12:55:08 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [25 living]
HibernateLog --> 12:55:08 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_0_] : [VARCHAR]) - [LivingCity25]

/ ***
/ volgede	,

select address0_.id__ as id__1_0_0_, address0_.address_line1__ as address_2_0_0_, address0_.zipcode__ as zipcode_3_0_0_, address0_.city__ as city__4_0_0_ 
from address address0_ 
where address0_.id__ in (?, ?)
HibernateLog --> 12:57:54 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [22]
HibernateLog --> 12:57:54 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [21]

HibernateLog --> 12:57:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_0_] : [BIGINT]) - [21]
HibernateLog --> 12:57:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [LivingStreet]
HibernateLog --> 12:57:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [21 living]
HibernateLog --> 12:57:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_0_] : [VARCHAR]) - [LivingCity21]

HibernateLog --> 12:57:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_0_] : [BIGINT]) - [22]
HibernateLog --> 12:57:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [LivingStreet]
HibernateLog --> 12:57:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [22 living]
HibernateLog --> 12:57:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_0_] : [VARCHAR]) - [LivingCity22]


/ 1313

/ <class name="Address" batch-size="3">
/ <set batch-size="3">


/ * 
/ Hetzelfde	, 1 query voor alle werk addresses	,

select address0_.id__ as id__1_0_, address0_.address_line1__ as address_2_0_, address0_.zipcode__ as zipcode_3_0_, address0_.city__ as city__4_0_ 
from address address0_ 
where address0_.zipcode__ like '%Foo%'

/ **

/ We zien 3 collecties tegelijk in 1 query	,

select employees0_.address_ as address_4_0_1_, employees0_.id_ as id_1_1_1_, employees0_.id_ as id_1_1_0_, employees0_.name_ as name_2_1_0_, employees0_.salary_ as salary_3_1_0_, employees0_.address_ as address_4_1_0_, employees0_.living_ as living_5_1_0_ 
from employee employees0_ 
where employees0_.address_ in (?, ?, ?)
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [1]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [2]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [BIGINT] - [3]

HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [11]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo11]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [11.0]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [1]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [11]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_1_] : [BIGINT]) - [1]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [11]

HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [12]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo12]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [12.0]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [1]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [12]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_1_] : [BIGINT]) - [1]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [12]

HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [13]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo13]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [13.0]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [1]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [13]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_1_] : [BIGINT]) - [1]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [13]

HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [14]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo14]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [14.0]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [1]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [14]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_1_] : [BIGINT]) - [1]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [14]

HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [15]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo15]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [15.0]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [1]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [15]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_1_] : [BIGINT]) - [1]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [15]

HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [21]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo21]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [21.0]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [2]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [21]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_1_] : [BIGINT]) - [2]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [21]

HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [22]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo22]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [22.0]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [2]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [22]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_1_] : [BIGINT]) - [2]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [22]

HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [23]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo23]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [23.0]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [2]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [23]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_1_] : [BIGINT]) - [2]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [23]

HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [24]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo24]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [24.0]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [2]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [24]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_1_] : [BIGINT]) - [2]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [24]

HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [25]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo25]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [25.0]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [2]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [25]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_1_] : [BIGINT]) - [2]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [25]

HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [31]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo31]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [31.0]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [3]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [31]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_1_] : [BIGINT]) - [3]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [31]

HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [32]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo32]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [32.0]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [3]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [32]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_1_] : [BIGINT]) - [3]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [32]

HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [33]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo33]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [33.0]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [3]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [33]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_1_] : [BIGINT]) - [3]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [33]

HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [34]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo34]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [34.0]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [3]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [34]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_1_] : [BIGINT]) - [3]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [34]

HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [35]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo35]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [35.0]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [3]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [35]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_1_] : [BIGINT]) - [3]
HibernateLog --> 10:25:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [35]

/ we zien <set batch-size="3"> 	, dus 3 collecties (van 5)	, 

/ ***

select address0_.id__ as id__1_0_0_, address0_.address_line1__ as address_2_0_0_, address0_.zipcode__ as zipcode_3_0_0_, address0_.city__ as city__4_0_0_ 
from address address0_ 
where address0_.id__ in (?, ?, ?)
HibernateLog --> 13:35:53 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [15]
HibernateLog --> 13:35:53 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [21]
HibernateLog --> 13:35:53 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [BIGINT] - [22]

HibernateLog --> 13:35:53 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_0_] : [BIGINT]) - [15]
HibernateLog --> 13:35:53 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [LivingStreet]
HibernateLog --> 13:35:53 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [15 living]
HibernateLog --> 13:35:53 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_0_] : [VARCHAR]) - [LivingCity15]

HibernateLog --> 13:35:53 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_0_] : [BIGINT]) - [21]
HibernateLog --> 13:35:53 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [LivingStreet]
HibernateLog --> 13:35:53 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [21 living]
HibernateLog --> 13:35:53 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_0_] : [VARCHAR]) - [LivingCity21]

HibernateLog --> 13:35:53 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_0_] : [BIGINT]) - [22]
HibernateLog --> 13:35:53 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [LivingStreet]
HibernateLog --> 13:35:53 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [22 living]
HibernateLog --> 13:35:53 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_0_] : [VARCHAR]) - [LivingCity22]


/ 1313	.

/ fetch="subselect" ivp batch-size="3" in de coll	,


/ Address
<class 
	name="Address" 
	table="address"
	batch-size="3"
>
	<set
 		name="employees"
 		inverse="true"
 		lazy="true"
 		fetch="subselect"
 	>
 		<key
 			column="address_"
 			not-null="false"
 		/>
 		<one-to-many class="Employee"/>
 	</set>

/ CollBatchApp	,
			Query query=session.createQuery("from Address a where a.zipcode like '%Foo%'");
			List<Address>addresses=query.list();
/ *
			ListIterator<Address>addressIterator=addresses.listIterator();
			while(addressIterator.hasNext()){
				Address address=addressIterator.next();
				Set<Employee>employees=address.getEmployees();
				Iterator<Employee>employeeIterator=employees.iterator();
/ **
				while(employeeIterator.hasNext()){
					Employee employee=employeeIterator.next();
					Address address2=employee.getLiving();
					String c=address2.getZipcode();
/ ***
					boolean b=false;
				}
			}

/ *


/ **
select employees0_.address_ as address_4_0_1_, employees0_.id_ as id_1_1_1_, employees0_.id_ as id_1_1_0_, employees0_.name_ as name_2_1_0_, employees0_.salary_ as salary_3_1_0_, employees0_.address_ as address_4_1_0_, employees0_.living_ as living_5_1_0_ 
from employee employees0_ 
where employees0_.address_ in (
	select address0_.id__ 
	from address address0_ 
	where address0_.zipcode__ like '%Foo%'
)
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [11]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo11]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [11.0]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [1]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [11]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_1_] : [BIGINT]) - [1]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [11]

HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [12]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo12]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [12.0]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [1]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [12]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_1_] : [BIGINT]) - [1]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [12]

HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [13]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo13]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [13.0]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [1]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [13]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_1_] : [BIGINT]) - [1]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [13]

HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [14]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo14]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [14.0]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [1]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [14]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_1_] : [BIGINT]) - [1]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [14]

HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [15]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo15]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [15.0]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [1]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [15]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_1_] : [BIGINT]) - [1]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [15]

HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [21]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo21]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [21.0]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [2]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [21]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_1_] : [BIGINT]) - [2]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [21]

HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [22]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo22]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [22.0]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [2]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [22]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_1_] : [BIGINT]) - [2]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [22]

HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [23]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo23]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [23.0]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [2]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [23]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_1_] : [BIGINT]) - [2]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [23]

HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [24]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo24]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [24.0]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [2]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [24]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_1_] : [BIGINT]) - [2]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [24]

HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [25]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo25]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [25.0]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [2]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [25]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_1_] : [BIGINT]) - [2]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [25]

HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [31]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo31]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [31.0]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [3]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [31]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_1_] : [BIGINT]) - [3]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [31]

HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [32]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo32]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [32.0]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [3]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [32]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_1_] : [BIGINT]) - [3]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [32]

HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [33]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo33]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [33.0]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [3]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [33]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_1_] : [BIGINT]) - [3]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [33]

HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [34]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo34]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [34.0]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [3]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [34]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_1_] : [BIGINT]) - [3]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [34]

HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [35]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo35]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [35.0]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [3]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [35]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_1_] : [BIGINT]) - [3]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [35]

HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [41]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo41]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [41.0]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [4]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [41]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_1_] : [BIGINT]) - [4]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [41]

HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [42]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo42]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [42.0]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [4]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [42]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_1_] : [BIGINT]) - [4]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [42]

HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [43]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo43]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [43.0]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [4]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [43]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_1_] : [BIGINT]) - [4]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [43]

HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [44]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo44]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [44.0]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [4]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [44]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_1_] : [BIGINT]) - [4]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [44]

HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [45]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo45]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [45.0]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [4]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [45]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_1_] : [BIGINT]) - [4]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [45]

HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [51]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo51]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [51.0]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [5]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [51]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_1_] : [BIGINT]) - [5]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [51]

HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [52]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo52]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [52.0]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [5]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [52]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_1_] : [BIGINT]) - [5]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [52]

HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [53]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo53]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [53.0]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [5]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [53]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_1_] : [BIGINT]) - [5]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [53]

HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [54]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo54]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [54.0]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [5]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [54]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_1_] : [BIGINT]) - [5]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [54]

HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [55]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo55]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [55.0]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [5]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [55]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_1_] : [BIGINT]) - [5]
HibernateLog --> 10:59:03 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [55]

/ ***
/ See hierboven	, batch-size="3"	, 1 query in (?,?,?)	,  onveranderd	,

select address0_.id__ as id__1_0_0_, address0_.address_line1__ as address_2_0_0_, address0_.zipcode__ as zipcode_3_0_0_, address0_.city__ as city__4_0_0_ 
from address address0_ 
where address0_.id__ in (?, ?, ?)
HibernateLog --> 13:59:44 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [14]
HibernateLog --> 13:59:44 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [21]
HibernateLog --> 13:59:44 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [BIGINT] - [15]
HibernateLog --> 13:59:44 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_0_] : [BIGINT]) - [14]
Address.setId()
HibernateLog --> 13:59:44 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [LivingStreet]
HibernateLog --> 13:59:44 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [14 living]
HibernateLog --> 13:59:44 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_0_] : [VARCHAR]) - [LivingCity14]
HibernateLog --> 13:59:44 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_0_] : [BIGINT]) - [15]
Address.setId()
HibernateLog --> 13:59:44 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [LivingStreet]
HibernateLog --> 13:59:44 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [15 living]
HibernateLog --> 13:59:44 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_0_] : [VARCHAR]) - [LivingCity15]
HibernateLog --> 13:59:44 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_0_] : [BIGINT]) - [21]
Address.setId()
HibernateLog --> 13:59:44 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [LivingStreet]
HibernateLog --> 13:59:44 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [21 living]
HibernateLog --> 13:59:44 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_0_] : [VARCHAR]) - [LivingCity21]

/ ***
/ volgende	,
select address0_.id__ as id__1_0_0_, address0_.address_line1__ as address_2_0_0_, address0_.zipcode__ as zipcode_3_0_0_, address0_.city__ as city__4_0_0_ 
from address address0_ 
where address0_.id__ in (?, ?, ?)
HibernateLog --> 14:01:06 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [13]
HibernateLog --> 14:01:06 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [BIGINT] - [22]
HibernateLog --> 14:01:06 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [BIGINT] - [23]

HibernateLog --> 14:01:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_0_] : [BIGINT]) - [13]
HibernateLog --> 14:01:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [LivingStreet]
HibernateLog --> 14:01:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [13 living]
HibernateLog --> 14:01:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_0_] : [VARCHAR]) - [LivingCity13]

HibernateLog --> 14:01:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_0_] : [BIGINT]) - [22]
HibernateLog --> 14:01:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [LivingStreet]
HibernateLog --> 14:01:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [22 living]
HibernateLog --> 14:01:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_0_] : [VARCHAR]) - [LivingCity22]

HibernateLog --> 14:01:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_0_] : [BIGINT]) - [23]
HibernateLog --> 14:01:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [LivingStreet]
HibernateLog --> 14:01:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [23 living]
HibernateLog --> 14:01:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_0_] : [VARCHAR]) - [LivingCity23]

/ 13	. 

/ we create hibernate_xml_N_1_fetch_coll_ehcache	,

/ het create van de db tables doen we 1 keer, en daarna niet meer	,

$ vi Address.hbm.xml
<class 
	name="Address" 
	table="address_coll"

$ vi Employee.hbm.xml
<class 
	name="Employee" 
	table="employee_coll"


/ we doen 1 keer	,

$ vi hibernate_cfg.xml
	<property name="hbm2ddl.auto">create</property>



$ vi CollBatchApp.java

			for(int i=1;i<=ENTSIZ;i++){
				Address address=new Address((long)i,"FooStreet "+i, i+" Foo", "FooCity"+i);
				session.save(address);
				for(int j=1;j<=COLLSIZ;j++){	
					int k=10*i+j;
					Employee employee=new Employee((long)k,"Foo"+k,(double)k);
					address.getEmployees().add(employee);
					employee.setAddress(address);
					employee.setLiving(new Address((long)k,"LivingStreet",k+" living","LivingCity"+k));
					session.save(employee.getLiving());
					session.save(employee);
				}
		  	}

/ Vervolgens niet meer	, beide comment out	,


/ 13	. 

/ EntFetchApp	,

/ <many-to-one fetch="join"> 

/ werkt alleen op session.get	, session.createCriteria	, NIET op session.createQuery, tenzij je de query aanpast	,

/ hql query moeten we zelf doen	, dit heeft NIETS te doen met <many-to-one fetch="join">



/ EntFetchApp	,

/ 1 address	, meerdere employees	,

/ we see that fetch="join" works with .get and .createCriteria	, 
/ but not with .createQuery	, tenzij we de query aanpassen	,

/ we have to adjust .createQuery("from Employee") to .createQuery("from Employee e left join fetch e.living")

/ 1ste session	,

			Address address=new Address(1l,"FooStreet"+1, 1+"Foo", "FooCity"+1);
			session.save(address);
			for(int j=1;j<+ENTSIZ;j++){		
				int k=10*1+j;
				Employee employee=new Employee((long)k,"Foo"+k,(double)k);
				address.getEmployees().add(employee);
				employee.setAddress(address);
				employee.setLiving(new Address((long)k,"LivingStreet",k+" living","LivingCity"+k));
				session.save(employee.getLiving());
				session.save(employee);
			}


/ 2de session	,
			Employee employee=(Employee)session.get(Employee.class, 11l);
/ *
			Set<Employee>employees=address2.getEmployees();
			Iterator<Employee>iterator=employees.iterator();
/ **
			while (iterator.hasNext()) {
				Employee employee = (Employee) iterator.next();
				Address living =employee.getLiving();
				String zip=living.getZipcode();
/ ***

/ 1313

/ eerst default <many-to-one name="living" fetch="select">

/ Employee	,
	<many-to-one 
		name="address"
		column="address_"
		not-null="true"
		lazy="proxy"		/ inderdaad een proxy	,
	/>
	<many-to-one 
		name="living"
		column="living_"
		not-null="true/false"
		lazy="proxy"		/ ! heeft geen effect	, door fetch=join is lazy false, employee.living is een Address inst, geen Address proxy
		fetch="select"

	/>

/ *
select address0_.id__ as id__1_0_0_, address0_.address_line1__ as address_2_0_0_, address0_.zipcode__ as zipcode_3_0_0_, address0_.city__ as city__4_0_0_ from address address0_ where address0_.id__=?
HibernateLog --> 15:20:42 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [1]

HibernateLog --> 15:20:42 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [FooStreet1]
HibernateLog --> 15:20:42 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [1Foo]
HibernateLog --> 15:20:42 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_0_] : [VARCHAR]) - [FooCity1]

/ **
select employees0_.address_ as address_4_0_0_, employees0_.id_ as id_1_1_0_, employees0_.id_ as id_1_1_1_, employees0_.name_ as name_2_1_1_, employees0_.salary_ as salary_3_1_1_, employees0_.address_ as address_4_1_1_, employees0_.living_ as living_5_1_1_ 
from employee employees0_ 
where employees0_.address_=?
HibernateLog --> 15:28:15 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [1]

HibernateLog --> 15:28:15 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [11]
HibernateLog --> 15:28:15 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo11]
HibernateLog --> 15:28:15 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [11.0]
HibernateLog --> 15:28:15 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [1]
HibernateLog --> 15:28:15 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_1_] : [BIGINT]) - [11]
HibernateLog --> 15:28:15 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [1]
HibernateLog --> 15:28:15 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [11]

HibernateLog --> 15:28:15 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [12]
HibernateLog --> 15:28:15 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo12]
HibernateLog --> 15:28:15 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [12.0]
HibernateLog --> 15:28:15 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [1]
HibernateLog --> 15:28:15 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_1_] : [BIGINT]) - [12]
HibernateLog --> 15:28:15 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [1]
HibernateLog --> 15:28:15 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [12]

HibernateLog --> 15:28:15 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [13]
HibernateLog --> 15:28:15 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo13]
HibernateLog --> 15:28:15 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [13.0]
HibernateLog --> 15:28:15 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [1]
HibernateLog --> 15:28:15 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_1_] : [BIGINT]) - [13]
HibernateLog --> 15:28:15 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [1]
HibernateLog --> 15:28:15 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [13]

HibernateLog --> 15:28:15 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [14]
HibernateLog --> 15:28:15 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo14]
HibernateLog --> 15:28:15 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [14.0]
HibernateLog --> 15:28:15 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [1]
HibernateLog --> 15:28:15 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_1_] : [BIGINT]) - [14]
HibernateLog --> 15:28:15 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [1]
HibernateLog --> 15:28:15 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [14]

/ gewoon de 5 employees in the coll	,

/ we see , because <many-to-one name="living" fetch="select">	,

employee	Employee  (id=61)	
	address	Address  (id=50)	
	living	Address_$$_jvstabc_1  (id=63)	


/ ***
/ Steeds 1 living address	,

/ ***
select address0_.id__ as id__1_0_0_, address0_.address_line1__ as address_2_0_0_, address0_.zipcode__ as zipcode_3_0_0_, address0_.city__ as city__4_0_0_ 
from address address0_ 
where address0_.id__=?
HibernateLog --> 15:34:20 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [13]

HibernateLog --> 15:34:20 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [LivingStreet]
HibernateLog --> 15:34:20 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [13 living]
HibernateLog --> 15:34:20 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_0_] : [VARCHAR]) - [LivingCity13]

/ ***
/ volgende	,

select address0_.id__ as id__1_0_0_, address0_.address_line1__ as address_2_0_0_, address0_.zipcode__ as zipcode_3_0_0_, address0_.city__ as city__4_0_0_ 
from address address0_ 
where address0_.id__=?
HibernateLog --> 15:36:20 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [11]
HibernateLog --> 15:36:20 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [LivingStreet]
HibernateLog --> 15:36:20 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [11 living]
HibernateLog --> 15:36:20 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_0_] : [VARCHAR]) - [LivingCity11]


/ 1313

/ <many-to-one name="living" fetch="join">

/ Employee	,
	<many-to-one 
		name="address"
		column="address_"
		not-null="true"
		lazy="proxy"		/ inderdaad een proxy	,
	/>
	<many-to-one 
		name="living"
		column="living_"
		not-null="true/false"
		lazy="proxy"		/ ! heeft geen effect	, door fetch=join is lazy false, employee.living is een Address inst, geen Address proxy
		fetch="select"

	/>

/ we see that the fk living_ is joined with the entity Employee itself	,

/ **
/ als <many-to-one not-null="true">	, inner join	,
/ als <many-to-one not-null="false">	, left outer join	,

select employees0_.address_ as address_4_0_0_, employees0_.id_ as id_1_1_0_, employees0_.id_ as id_1_1_1_, employees0_.name_ as name_2_1_1_, employees0_.salary_ as salary_3_1_1_, employees0_.address_ as address_4_1_1_, employees0_.living_ as living_5_1_1_, 
 address1_.id__ as id__1_0_2_, address1_.address_line1__ as address_2_0_2_, address1_.zipcode__ as zipcode_3_0_2_, address1_.city__ as city__4_0_2_ 
from employee employees0_ 
left outer join address address1_ on employees0_.living_=address1_.id__ 
where employees0_.address_=?

HibernateLog --> 15:40:06 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [1]

HibernateLog --> 15:40:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [11]
HibernateLog --> 15:40:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_2_] : [BIGINT]) - [11]
HibernateLog --> 15:40:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo11]
HibernateLog --> 15:40:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [11.0]
HibernateLog --> 15:40:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [1]
HibernateLog --> 15:40:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_1_] : [BIGINT]) - [11]
HibernateLog --> 15:40:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_2_] : [VARCHAR]) - [LivingStreet]
HibernateLog --> 15:40:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_2_] : [VARCHAR]) - [11 living]
HibernateLog --> 15:40:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_2_] : [VARCHAR]) - [LivingCity11]
HibernateLog --> 15:40:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [1]
HibernateLog --> 15:40:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [11]

HibernateLog --> 15:40:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [12]
HibernateLog --> 15:40:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_2_] : [BIGINT]) - [12]
HibernateLog --> 15:40:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo12]
HibernateLog --> 15:40:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [12.0]
HibernateLog --> 15:40:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [1]
HibernateLog --> 15:40:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_1_] : [BIGINT]) - [12]
HibernateLog --> 15:40:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_2_] : [VARCHAR]) - [LivingStreet]
HibernateLog --> 15:40:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_2_] : [VARCHAR]) - [12 living]
HibernateLog --> 15:40:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_2_] : [VARCHAR]) - [LivingCity12]
HibernateLog --> 15:40:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [1]
HibernateLog --> 15:40:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [12]

HibernateLog --> 15:40:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [13]
HibernateLog --> 15:40:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_2_] : [BIGINT]) - [13]
HibernateLog --> 15:40:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo13]
HibernateLog --> 15:40:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [13.0]
HibernateLog --> 15:40:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [1]
HibernateLog --> 15:40:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_1_] : [BIGINT]) - [13]
HibernateLog --> 15:40:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_2_] : [VARCHAR]) - [LivingStreet]
HibernateLog --> 15:40:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_2_] : [VARCHAR]) - [13 living]
HibernateLog --> 15:40:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_2_] : [VARCHAR]) - [LivingCity13]
HibernateLog --> 15:40:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [1]
HibernateLog --> 15:40:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [13]

HibernateLog --> 15:40:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [14]
HibernateLog --> 15:40:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_2_] : [BIGINT]) - [14]
HibernateLog --> 15:40:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo14]
HibernateLog --> 15:40:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [14.0]
HibernateLog --> 15:40:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [1]
HibernateLog --> 15:40:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_1_] : [BIGINT]) - [14]
HibernateLog --> 15:40:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_2_] : [VARCHAR]) - [LivingStreet]
HibernateLog --> 15:40:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_2_] : [VARCHAR]) - [14 living]
HibernateLog --> 15:40:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_2_] : [VARCHAR]) - [LivingCity14]
HibernateLog --> 15:40:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [1]
HibernateLog --> 15:40:06 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [14]

HibernateLog --> 15:53:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [14]
HibernateLog --> 15:53:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [15]
HibernateLog --> 15:53:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_2_] : [BIGINT]) - [15]
HibernateLog --> 15:53:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo15]
HibernateLog --> 15:53:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [15.0]
HibernateLog --> 15:53:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [1]
HibernateLog --> 15:53:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_1_] : [BIGINT]) - [15]
HibernateLog --> 15:53:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_2_] : [VARCHAR]) - [LivingStreet]
HibernateLog --> 15:53:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_2_] : [VARCHAR]) - [15 living]
HibernateLog --> 15:53:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_2_] : [VARCHAR]) - [LivingCity15]
HibernateLog --> 15:53:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [1]
HibernateLog --> 15:53:32 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [15]

/ we see	, omdat nu <many-to-one name="living" fetch="join">	,

employee	Employee  (id=61)	
	address	Address  (id=50)	
	living	Addres  (id=...)


/ ***
/ NO QUERY	, because the living addresses are already in the join	,

/ 3de session	,

			org.hibernate.Criteria 	criteria=session.createCriteria(Employee.class);
			criteria.add(Restrictions.idEq(11l));
			Employee employee2=(Employee)criteria.uniqueResult();
/*
			employees=address2.getEmployees();
			iterator=employees.iterator();
/**
			while (iterator.hasNext()) {
				Employee employee = (Employee) iterator.next();
				Address living =employee.getLiving();
/***

/ precies als hierboven	,



/ 4de session	,

			Query query=session.createQuery("from Employee e left join fetch e.living where e.id=11");

select employee0_.id_ as id_1_1_0_, address1_.id__ as id__1_0_1_, employee0_.name_ as name_2_1_0_, employee0_.salary_ as salary_3_1_0_, employee0_.address_ as address_4_1_0_, employee0_.living_ as living_5_1_0_, 
 address1_.address_line1__ as address_2_0_1_, address1_.zipcode__ as zipcode_3_0_1_, address1_.city__ as city__4_0_1_ 
from employee employee0_ left outer join address address1_ on employee0_.living_=address1_.id__ 
where employee0_.id_=11
HibernateLog --> 09:28:58 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [11]
HibernateLog --> 09:28:58 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_1_] : [BIGINT]) - [11]
HibernateLog --> 09:28:58 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo11]
HibernateLog --> 09:28:58 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [11.0]
HibernateLog --> 09:28:58 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [1]
HibernateLog --> 09:28:58 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [11]
Address.setId()
HibernateLog --> 09:28:58 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_1_] : [VARCHAR]) - [LivingStreet]
HibernateLog --> 09:28:58 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_1_] : [VARCHAR]) - [11 living]
HibernateLog --> 09:28:58 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_1_] : [VARCHAR]) - [LivingCity11]

			List<Employee>employees6=query.list();



/ 13	.

/ N_1_bidir_fetch_ehcache

/ EntFetchApp	,

/ <set ... fetch="join" >
/ en in <many-to-one TODO


/ Address
	<set
 		name="employees"
 		inverse="true"
 		lazy="true"	/ ! niets, is in feite false	, dat komt door fetch=join	,
 		fetch="join"
 	>
<!--  		<cache usage="read-write"/>	
 --> 		
 		<key
 			column="address_"
 			not-null="false"
 		/>
 		<one-to-many class="Employee"/>
 	</set>

/ Employee
	<many-to-one 
		name="address"
		column="address_"
		not-null="true"
		lazy="proxy"

	/>
	<many-to-one 
		name="living"
		column="living_"
		not-null="false"
		lazy="proxy"
		fetch="join/select"	/ als fetch=join	, dan nog een 2de join erbij (voor de living)	, anders niet	,

	/>

/ <set fetch=join>	, dan is employee.address = Address inst	, not a proxy	,
// <many-to-one fetch="join/select"> , als join, dan is employee.living Address inst, anders proxy	,


/ 2de session	,

			Address address2=(Address)session.get(Address.class, 1l);
/*
			Set<Employee>employees=address2.getEmployees();
			Iterator<Employee>iterator=employees.iterator();
			while (iterator.hasNext()) {
				Employee employee = (Employee) iterator.next();
/ **
				Address living =employee.getLiving();
/ ***

/ 1313

/ <many-to-one name="living" fetch="select" > , de default	,

/ we join alleen de coll met de owner	,

/*

select address0_.id__ as id__1_0_0_, address0_.address_line1__ as address_2_0_0_, address0_.zipcode__ as zipcode_3_0_0_, address0_.city__ as city__4_0_0_, employees1_.address_ as address_4_0_1_, 
	employees1_.id_ as id_1_1_1_, employees1_.id_ as id_1_1_2_, employees1_.name_ as name_2_1_2_, employees1_.salary_ as salary_3_1_2_, employees1_.address_ as address_4_1_2_, employees1_.living_ as living_5_1_2_ 

from address address0_ 										/ owner of coll
left outer join employee employees1_ on address0_.id__=employees1_.address_ 			/ employee in coll,	because employee.fk=owner.id
where address0_.id__=?

/ **
employee	Employee  (id=61)	
	address	Address  (id=53)	
	living	Address_$$_jvst1e_1  (id=63)	

/ ***
/ 1+N problem	,

select address0_.id__ as id__1_0_0_, address0_.address_line1__ as address_2_0_0_, address0_.zipcode__ as zipcode_3_0_0_, address0_.city__ as city__4_0_0_, employees1_.address_ as address_4_0_1_, 
	employees1_.id_ as id_1_1_1_, employees1_.id_ as id_1_1_2_, employees1_.name_ as name_2_1_2_, employees1_.salary_ as salary_3_1_2_, employees1_.address_ as address_4_1_2_, employees1_.living_ as living_5_1_2_ 

from address address0_ 
left outer join employee employees1_ on address0_.id__=employees1_.address_ 
where address0_.id__=?

HibernateLog --> 12:41:58 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [14]
HibernateLog --> 12:41:58 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_2_] : [BIGINT]) - [null]
Address.setId()
HibernateLog --> 12:41:58 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [LivingStreet]
HibernateLog --> 12:41:58 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [14 living]
HibernateLog --> 12:41:58 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_0_] : [VARCHAR]) - [LivingCity14]
HibernateLog --> 12:41:58 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_1_] : [BIGINT]) - [null]

select address0_.id__ as id__1_0_0_, address0_.address_line1__ as address_2_0_0_, address0_.zipcode__ as zipcode_3_0_0_, address0_.city__ as city__4_0_0_, employees1_.address_ as address_4_0_1_, 
	employees1_.id_ as id_1_1_1_, employees1_.id_ as id_1_1_2_, employees1_.name_ as name_2_1_2_, employees1_.salary_ as salary_3_1_2_, employees1_.address_ as address_4_1_2_, employees1_.living_ as living_5_1_2_ 

from address address0_ 
left outer join employee employees1_ on address0_.id__=employees1_.address_ 
where address0_.id__=?

HibernateLog --> 12:50:35 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [13]
HibernateLog --> 12:50:35 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_2_] : [BIGINT]) - [null]
Address.setId()
HibernateLog --> 12:50:35 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [LivingStreet]
HibernateLog --> 12:50:35 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [13 living]
HibernateLog --> 12:50:35 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_0_] : [VARCHAR]) - [LivingCity13]
HibernateLog --> 12:50:35 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_1_] : [BIGINT]) - [null]

/ HIER HIER


/ 1313

/ <many-to-one ... fetch="join">

/ *
/ joins coll with owner	,

select address0_.id__ as id__1_0_0_, address0_.address_line1__ as address_2_0_0_, address0_.zipcode__ as zipcode_3_0_0_, address0_.city__ as city__4_0_0_, employees1_.address_ as address_4_0_1_, 
	employees1_.id_ as id_1_1_1_, employees1_.id_ as id_1_1_2_, employees1_.name_ as name_2_1_2_, employees1_.salary_ as salary_3_1_2_, employees1_.address_ as address_4_1_2_, employees1_.living_ as living_5_1_2_, 
	address2_.id__ as id__1_0_3_, address2_.address_line1__ as address_2_0_3_, address2_.zipcode__ as zipcode_3_0_3_, address2_.city__ as city__4_0_3_ 
from address address0_ 
left outer join employee employees1_ on address0_.id__=employees1_.address_ 
left outer join address address2_ on employees1_.living_=address2_.id__ where address0_.id__=?

HibernateLog --> 12:18:01 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [1]
HibernateLog --> 12:18:01 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_2_] : [BIGINT]) - [11]
HibernateLog --> 12:18:01 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_3_] : [BIGINT]) - [11]
HibernateLog --> 12:18:01 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [FooStreet1]
HibernateLog --> 12:18:01 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [1Foo]
HibernateLog --> 12:18:01 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_0_] : [VARCHAR]) - [FooCity1]
HibernateLog --> 12:18:01 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_2_] : [VARCHAR]) - [Foo11]
HibernateLog --> 12:18:01 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_2_] : [DOUBLE]) - [11.0]
HibernateLog --> 12:18:01 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_2_] : [BIGINT]) - [1]
HibernateLog --> 12:18:01 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_2_] : [BIGINT]) - [11]
HibernateLog --> 12:18:01 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_3_] : [VARCHAR]) - [LivingStreet]
HibernateLog --> 12:18:01 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_3_] : [VARCHAR]) - [11 living]
HibernateLog --> 12:18:01 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_3_] : [VARCHAR]) - [LivingCity11]
HibernateLog --> 12:18:01 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_1_] : [BIGINT]) - [1]
HibernateLog --> 12:18:01 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [11]

HibernateLog --> 12:18:01 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_2_] : [BIGINT]) - [12]
HibernateLog --> 12:18:01 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_3_] : [BIGINT]) - [12]
HibernateLog --> 12:18:01 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_2_] : [VARCHAR]) - [Foo12]
HibernateLog --> 12:18:01 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_2_] : [DOUBLE]) - [12.0]
HibernateLog --> 12:18:01 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_2_] : [BIGINT]) - [1]
HibernateLog --> 12:18:01 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_2_] : [BIGINT]) - [12]
HibernateLog --> 12:18:01 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_3_] : [VARCHAR]) - [LivingStreet]
HibernateLog --> 12:18:01 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_3_] : [VARCHAR]) - [12 living]
HibernateLog --> 12:18:01 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_3_] : [VARCHAR]) - [LivingCity12]
HibernateLog --> 12:18:01 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_1_] : [BIGINT]) - [1]
HibernateLog --> 12:18:01 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [12]

HibernateLog --> 12:18:01 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_2_] : [BIGINT]) - [13]
HibernateLog --> 12:18:01 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_3_] : [BIGINT]) - [13]
HibernateLog --> 12:18:01 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_2_] : [VARCHAR]) - [Foo13]
HibernateLog --> 12:18:01 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_2_] : [DOUBLE]) - [13.0]
HibernateLog --> 12:18:01 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_2_] : [BIGINT]) - [1]
HibernateLog --> 12:18:01 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_2_] : [BIGINT]) - [13]
Address.setId()
HibernateLog --> 12:18:01 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_3_] : [VARCHAR]) - [LivingStreet]
HibernateLog --> 12:18:01 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_3_] : [VARCHAR]) - [13 living]
HibernateLog --> 12:18:01 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_3_] : [VARCHAR]) - [LivingCity13]
HibernateLog --> 12:18:01 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_1_] : [BIGINT]) - [1]
HibernateLog --> 12:18:01 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [13]

HibernateLog --> 12:18:01 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_2_] : [BIGINT]) - [14]
HibernateLog --> 12:18:01 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_3_] : [BIGINT]) - [14]
HibernateLog --> 12:18:01 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_2_] : [VARCHAR]) - [Foo14]
HibernateLog --> 12:18:01 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_2_] : [DOUBLE]) - [14.0]
HibernateLog --> 12:18:01 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_2_] : [BIGINT]) - [1]
HibernateLog --> 12:18:01 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_2_] : [BIGINT]) - [14]
HibernateLog --> 12:18:01 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_3_] : [VARCHAR]) - [LivingStreet]
HibernateLog --> 12:18:01 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_3_] : [VARCHAR]) - [14 living]
HibernateLog --> 12:18:01 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_3_] : [VARCHAR]) - [LivingCity14]
HibernateLog --> 12:18:01 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_1_] : [BIGINT]) - [1]
HibernateLog --> 12:18:01 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [14]

/ **
employee	Employee  (id=61)	
	address	Address  (id=50)	
	id	11	
	living	Address  (id=63)	

/ ***
/ GEEN queries	, geen 1+N probleem	



/ of	,


/ 13	.

/ N_1_bidir_fetch_ehcache

/ CollFetchApp	,

/ <set ... fetch="join" >
/ <many-to-one fetch="select"

/ There are 5 working addressees	, and at each one there work 5 Employees	,
/ the employees also have a living address	,

/ 1313	

/ Address
	<set
 		name="employees"
 		inverse="true"
 		lazy="true"
 		fetch="join"
 	>
<!--  		<cache usage="read-write"/>	
 --> 		
 		<key
 			column="address_"
 			not-null="false"
 		/>
 		<one-to-many class="Employee"/>
 	</set>

/ Employee
	<many-to-one 
		name="address"
		column="address_"
		not-null="true"
		lazy="proxy"
		fetch="select"

	/>
	<many-to-one 
		name="living"
		column="living_"
		not-null="false"
		lazy="proxy"
		fetch="select"
	/>

/ CollFetchApp	,
			org.hibernate.Criteria criteria=session.createCriteria(Address.class);
			criteria.add(Restrictions.like("zipcode", "%Foo"));
			List<Address>addresses=criteria.list();
/*
			ListIterator<Address>listIterator=addresses.listIterator();
			while(listIterator.hasNext()){
				Address address=(Address)listIterator.next();
				Set<Employee>employees=address.getEmployees();
				Iterator<Employee>iterator=employees.iterator();
/**
				while (iterator.hasNext()) {
					Employee employee = (Employee) iterator.next();
					Address living =employee.getLiving();
					String zip=living.getZipcode();
/***

/*

select this_.id__ as id__1_0_1_, this_.address_line1__ as address_2_0_1_, this_.zipcode__ as zipcode_3_0_1_, this_.city__ as city__4_0_1_, 
	employees2_.address_ as address_4_0_3_, employees2_.id_ as id_1_1_3_, employees2_.id_ as id_1_1_0_, employees2_.name_ as name_2_1_0_, employees2_.salary_ as salary_3_1_0_, employees2_.address_ as address_4_1_0_, employees2_.living_ as living_5_1_0_ 
from address this_ 
left outer join employee employees2_ on this_.id__=employees2_.address_ 
where this_.zipcode__ like ?
HibernateLog --> 14:05:27 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [%Foo]

HibernateLog --> 14:05:27 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [11]
HibernateLog --> 14:05:27 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_1_] : [BIGINT]) - [1]
HibernateLog --> 14:05:27 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo11]
HibernateLog --> 14:05:27 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [11.0]
HibernateLog --> 14:05:27 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [1]
HibernateLog --> 14:05:27 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [11]
Address.setId()
HibernateLog --> 14:05:27 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_1_] : [VARCHAR]) - [FooStreet 1]
HibernateLog --> 14:05:27 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_1_] : [VARCHAR]) - [1 Foo]
HibernateLog --> 14:05:27 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_1_] : [VARCHAR]) - [FooCity1]
HibernateLog --> 14:05:27 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_3_] : [BIGINT]) - [1]
HibernateLog --> 14:05:27 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_3_] : [BIGINT]) - [11]

HibernateLog --> 14:05:27 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [12]
HibernateLog --> 14:05:27 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_1_] : [BIGINT]) - [1]
HibernateLog --> 14:05:27 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo12]
HibernateLog --> 14:05:27 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [12.0]
HibernateLog --> 14:05:27 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [1]
HibernateLog --> 14:05:27 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [12]
HibernateLog --> 14:05:27 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_3_] : [BIGINT]) - [1]
HibernateLog --> 14:05:27 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_3_] : [BIGINT]) - [12]

HibernateLog --> 14:05:27 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [21]
HibernateLog --> 14:05:27 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_1_] : [BIGINT]) - [2]
HibernateLog --> 14:05:27 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo21]
HibernateLog --> 14:05:27 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [21.0]
HibernateLog --> 14:05:27 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [2]
HibernateLog --> 14:05:27 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [21]
HibernateLog --> 14:05:27 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_1_] : [VARCHAR]) - [FooStreet 2]
HibernateLog --> 14:05:27 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_1_] : [VARCHAR]) - [2 Foo]
HibernateLog --> 14:05:27 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_1_] : [VARCHAR]) - [FooCity2]
HibernateLog --> 14:05:27 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_3_] : [BIGINT]) - [2]
HibernateLog --> 14:05:27 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_3_] : [BIGINT]) - [21]

HibernateLog --> 14:05:27 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [22]
HibernateLog --> 14:05:27 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_1_] : [BIGINT]) - [2]
HibernateLog --> 14:05:27 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo22]
HibernateLog --> 14:05:27 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [22.0]
HibernateLog --> 14:05:27 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [2]
HibernateLog --> 14:05:27 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [22]
HibernateLog --> 14:05:27 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_3_] : [BIGINT]) - [2]
HibernateLog --> 14:05:27 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_3_] : [BIGINT]) - [22]

/ **
/ NOTHING

/ ***
/ 1+N problem

select address0_.id__ as id__1_0_0_, address0_.address_line1__ as address_2_0_0_, address0_.zipcode__ as zipcode_3_0_0_, address0_.city__ as city__4_0_0_, 
	employees1_.address_ as address_4_0_1_, employees1_.id_ as id_1_1_1_, employees1_.id_ as id_1_1_2_, employees1_.name_ as name_2_1_2_, employees1_.salary_ as salary_3_1_2_, employees1_.address_ as address_4_1_2_, employees1_.living_ as living_5_1_2_ 
from address address0_ 
left outer join employee employees1_ on address0_.id__=employees1_.address_ 
where address0_.id__=?
HibernateLog --> 14:51:14 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
HibernateLog --> 14:51:14 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_2_] : [BIGINT]) - [null]
HibernateLog --> 14:51:14 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [LivingStreet]
HibernateLog --> 14:51:14 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [12 living]
HibernateLog --> 14:51:14 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_0_] : [VARCHAR]) - [LivingCity12]
HibernateLog --> 14:51:14 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_1_] : [BIGINT]) - [null]

select address0_.id__ as id__1_0_0_, address0_.address_line1__ as address_2_0_0_, address0_.zipcode__ as zipcode_3_0_0_, address0_.city__ as city__4_0_0_, 
	employees1_.address_ as address_4_0_1_, employees1_.id_ as id_1_1_1_, employees1_.id_ as id_1_1_2_, employees1_.name_ as name_2_1_2_, employees1_.salary_ as salary_3_1_2_, employees1_.address_ as address_4_1_2_, employees1_.living_ as living_5_1_2_ 
from address address0_ 
left outer join employee employees1_ on address0_.id__=employees1_.address_ 
where address0_.id__=?
HibernateLog --> 14:53:11 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [11]
HibernateLog --> 14:53:11 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_2_] : [BIGINT]) - [null]
HibernateLog --> 14:53:11 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [LivingStreet]
HibernateLog --> 14:53:11 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [11 living]
HibernateLog --> 14:53:11 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_0_] : [VARCHAR]) - [LivingCity11]
HibernateLog --> 14:53:11 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_1_] : [BIGINT]) - [null]

/ TODO (why join met employee)

/ we see	,
employee	Employee  (id=30)	
	address	Address  (id=39)	
	living	Address_$$_jvst5e5_1  (id=32)	

/ 1313	

/ Address
	<set
 		name="employees"
 		inverse="true"
 		lazy="true"
 		fetch="join"
 	>
<!--  		<cache usage="read-write"/>	
 --> 		
 		<key
 			column="address_"
 			not-null="false"
 		/>
 		<one-to-many class="Employee"/>
 	</set>

/ Employee
	<many-to-one 
		name="address"
		column="address_"
		not-null="true"
		lazy="proxy"
		fetch="select"

	/>
	<many-to-one 
		name="living"
		column="living_"
		not-null="false"
		lazy="proxy"
		fetch="join"		/ !
	/>

/ CollFetchApp	,
			org.hibernate.Criteria criteria=session.createCriteria(Address.class);
			criteria.add(Restrictions.like("zipcode", "%Foo"));
			List<Address>addresses=criteria.list();
/*
			ListIterator<Address>listIterator=addresses.listIterator();
			while(listIterator.hasNext()){
				Address address=(Address)listIterator.next();
				Set<Employee>employees=address.getEmployees();
				Iterator<Employee>iterator=employees.iterator();
/**
				while (iterator.hasNext()) {
					Employee employee = (Employee) iterator.next();
					Address living =employee.getLiving();
					String zip=living.getZipcode();
/***

/ *
select this_.id__ as id__1_0_2_, this_.address_line1__ as address_2_0_2_, this_.zipcode__ as zipcode_3_0_2_, this_.city__ as city__4_0_2_, 
	employees2_.address_ as address_4_0_4_, employees2_.id_ as id_1_1_4_, employees2_.id_ as id_1_1_0_, employees2_.name_ as name_2_1_0_, employees2_.salary_ as salary_3_1_0_, employees2_.address_ as address_4_1_0_, employees2_.living_ as living_5_1_0_, address3_.id__ as id__1_0_1_, 
	address3_.address_line1__ as address_2_0_1_, address3_.zipcode__ as zipcode_3_0_1_, address3_.city__ as city__4_0_1_ 
from address this_ 
left outer join employee employees2_ on this_.id__=employees2_.address_ 
left outer join address address3_ on employees2_.living_=address3_.id__ where this_.zipcode__ like ?

HibernateLog --> 15:00:54 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [%Foo]

HibernateLog --> 15:00:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [11]
HibernateLog --> 15:00:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_1_] : [BIGINT]) - [11]
HibernateLog --> 15:00:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_2_] : [BIGINT]) - [1]
HibernateLog --> 15:00:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo11]
HibernateLog --> 15:00:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [11.0]
HibernateLog --> 15:00:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [1]
HibernateLog --> 15:00:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [11]
Address.setId()
HibernateLog --> 15:00:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_1_] : [VARCHAR]) - [LivingStreet]
HibernateLog --> 15:00:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_1_] : [VARCHAR]) - [11 living]
HibernateLog --> 15:00:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_1_] : [VARCHAR]) - [LivingCity11]
Address.setId()
HibernateLog --> 15:00:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_2_] : [VARCHAR]) - [FooStreet 1]
HibernateLog --> 15:00:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_2_] : [VARCHAR]) - [1 Foo]
HibernateLog --> 15:00:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_2_] : [VARCHAR]) - [FooCity1]
HibernateLog --> 15:00:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_4_] : [BIGINT]) - [1]
HibernateLog --> 15:00:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_4_] : [BIGINT]) - [11]

HibernateLog --> 15:00:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [12]
HibernateLog --> 15:00:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_1_] : [BIGINT]) - [12]
HibernateLog --> 15:00:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_2_] : [BIGINT]) - [1]
HibernateLog --> 15:00:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo12]
HibernateLog --> 15:00:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [12.0]
HibernateLog --> 15:00:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [1]
HibernateLog --> 15:00:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [12]
Address.setId()
HibernateLog --> 15:00:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_1_] : [VARCHAR]) - [LivingStreet]
HibernateLog --> 15:00:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_1_] : [VARCHAR]) - [12 living]
HibernateLog --> 15:00:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_1_] : [VARCHAR]) - [LivingCity12]
HibernateLog --> 15:00:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_4_] : [BIGINT]) - [1]
HibernateLog --> 15:00:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_4_] : [BIGINT]) - [12]

HibernateLog --> 15:00:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [21]
HibernateLog --> 15:00:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_1_] : [BIGINT]) - [21]
HibernateLog --> 15:00:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_2_] : [BIGINT]) - [2]
HibernateLog --> 15:00:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo21]
HibernateLog --> 15:00:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [21.0]
HibernateLog --> 15:00:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [2]
HibernateLog --> 15:00:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [21]
Address.setId()
HibernateLog --> 15:00:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_1_] : [VARCHAR]) - [LivingStreet]
HibernateLog --> 15:00:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_1_] : [VARCHAR]) - [21 living]
HibernateLog --> 15:00:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_1_] : [VARCHAR]) - [LivingCity21]
Address.setId()
HibernateLog --> 15:00:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_2_] : [VARCHAR]) - [FooStreet 2]
HibernateLog --> 15:00:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_2_] : [VARCHAR]) - [2 Foo]
HibernateLog --> 15:00:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_2_] : [VARCHAR]) - [FooCity2]
HibernateLog --> 15:00:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_4_] : [BIGINT]) - [2]
HibernateLog --> 15:00:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_4_] : [BIGINT]) - [21]

HibernateLog --> 15:00:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [22]
HibernateLog --> 15:00:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_1_] : [BIGINT]) - [22]
HibernateLog --> 15:00:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_2_] : [BIGINT]) - [2]
HibernateLog --> 15:00:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo22]
HibernateLog --> 15:00:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [22.0]
HibernateLog --> 15:00:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [2]
HibernateLog --> 15:00:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [22]
Address.setId()
HibernateLog --> 15:00:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_1_] : [VARCHAR]) - [LivingStreet]
HibernateLog --> 15:00:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_1_] : [VARCHAR]) - [22 living]
HibernateLog --> 15:00:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_1_] : [VARCHAR]) - [LivingCity22]
HibernateLog --> 15:00:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_4_] : [BIGINT]) - [2]
HibernateLog --> 15:00:54 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_4_] : [BIGINT]) - [22]

/**
/ NOTHING
/***
/ NOTHING

/ we see	,
 
employee	Employee  (id=30)	
	address	Address  (id=32)	
	living	Address  (id=45)	



/ 13	.

/ N_1_bidir_fetch_ehcache

/ EntFetchApp	,

/ SAMENVATTING

/ <set ... fetch="join" >
/ <many-to-one fetch


/ Address
	<set
 		name="employees"
 		inverse="true"
 		lazy="true"
 		fetch="select/subselect/join"
 	>
<!--  		<cache usage="read-write"/>	
 --> 		
 		<key
 			column="address_"
 			not-null="false"
 		/>
 		<one-to-many class="Employee"/>
 	</set>

/ Employee
	<many-to-one 
		name="address"
		column="address_"
		not-null="true"
		lazy="proxy"
		fetch="select/join"

	/>
	<many-to-one 
		name="living"
		column="living_"
		not-null="false"
		lazy="proxy"
		fetch="select/join"
	/>

/ EntFetchApp

			Address address2=(Address)session.get(Address.class, 1l);
/*
			Set<Employee>employees=address2.getEmployees();
			Iterator<Employee>iterator=employees.iterator();
/**
			while (iterator.hasNext()) {
				Employee employee = (Employee) iterator.next();
				Address living =employee.getLiving();
				String zip=living.getZipcode();
/***

/ 1313
<set fetch="select">, <many-to-one name="living" fetch ="select">
/*
/ 1 querie Address#1
/ **
/ 1 querie 5 Employee#1i
/ ***
/ for each Employee#1i queries living Address#1i	: N+1 problem	,

/ 1313
<set fetch="join">, <many-to-one name="living" fetch ="select">
/*
/ queries Address#1 en 5 Employee#1i
/ **
/ nothig 
/ ***
/ for each Employee#1i queries living Address#1i	: 1+N problem

/ 1313
<set fetch="join">, <many-to-one name="living" fetch ="join">
/*
/ queries Address#1 en 5 Employee#1i
/ **
/ nothig 
/ ***
/ for each Employee#1i queries living Address#1i	: 1+N problem		



/ Einde SAMENVATTING

/ 7	 .

/ Hibenate.init

/ 7	. 

/ component_ehcache

/ een Employee heeft een Address, maar nu is Address geen entity, maar een component	,

/ Lees	,
http://www.tutorialspoint.com/hibernate/hibernate_component_mappings.htm

/ Address.hbm.xml is er nu niet	, de H config van Address is nu in Employee.hbm.xml	, Address is geen zelfstandige entity	,

/ In hibernate.cfg.xml moeten we alleen Address.hbm.xml	,

/ Employee
/ 	eigne H. props	,
	<component name="address" class="Address">
			<property
				name="addressLine1"
				column="address_line1__"
			/>
			<property 
				name="zipcode" 
				column="zipcode__">
			</property>
			<property 
				name="city"
				column="city__">
			</property>
	</component>

/ er is dus GEEN Address.hbm.xml

/ Employee	,
    private long id;
    private String name;
    private double salary;
    private Address address;
    public Employee(Long id,String name, double salary) {

/ Address	,
	public class Address {
	    private String addressLine1;
	    private String zipcode;
	    private String city;

/ Main	,
/ 1ste session	,
			Address address=new Address("foostreet", "12 foo", "FooCity12");
			Employee employee=new Employee(1l,"Foo1",1.00);
			employee.setAddress(address);
			Employee employee2=new Employee(2l,"Foo2",2.00);
			employee2.setAddress(address);

			session.save(employee);
			session.save(employee2);

			tx.commit();

/ we zien	,

Hibernate: insert into employee (name_, salary_, address_line1__, zipcode__, city__, id_) values (?, ?, ?, ?, ?, ?)
HibernateLog --> 16:33:56 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [Foo1]
HibernateLog --> 16:33:56 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [DOUBLE] - [1.0]
HibernateLog --> 16:33:56 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [VARCHAR] - [foostreet]
HibernateLog --> 16:33:56 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [4] as [VARCHAR] - [12 foo]
HibernateLog --> 16:33:56 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [5] as [VARCHAR] - [FooCity12]
HibernateLog --> 16:33:56 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [6] as [BIGINT] - [1]

Hibernate: insert into employee (name_, salary_, address_line1__, zipcode__, city__, id_) values (?, ?, ?, ?, ?, ?)
HibernateLog --> 16:33:56 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [Foo2]
HibernateLog --> 16:33:56 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [2] as [DOUBLE] - [2.0]
HibernateLog --> 16:33:56 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [3] as [VARCHAR] - [foostreet]
HibernateLog --> 16:33:56 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [4] as [VARCHAR] - [12 foo]
HibernateLog --> 16:33:56 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [5] as [VARCHAR] - [FooCity12]
HibernateLog --> 16:33:56 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [6] as [BIGINT] - [2]

foo=> select*from employee;
 id_ | name_ | salary_ | address_line1__ | zipcode__ |  city__   
-----+-------+---------+-----------------+-----------+-----------
   1 | Foo1  |       1 | foostreet       | 12 foo    | FooCity12
   2 | Foo2  |       2 | foostreet       | 12 foo    | FooCity12
(2 rows)

/ 2de session	,
	        employee = (Employee) session.get(Employee.class, 1l);

/ we zien	,
employee	Employee  (id=46)	
	address	Address  (id=49)	
		addressLine1	"foostreet" (id=54)	
		city	"FooCity12" (id=55)	
		zipcode	"12 foo" (id=56)	
	id	1	
	name	"Foo1" (id=50)	
	salary	1.0	

			




/ 7	.

/ 1_N_bidir_ehcache

/ lazy, coll
/ lazy, ref	,

/ Met <set lazy="false/true/extra" name="employees"> wordt de coll init bij .get(container)/ coll.size()/ coll.iterate()
/ Met <many-to-one lazy="false/proxy/no-proxy" class="Address"> is container.item  een proxy of een inst	, doen we later proxy.mth()	, dan wordt de proxy init	, dus wordt alsnog de inst create, maar dan als proxy.handler.target	,
/ Met <class lazy="true/false" name="Address"> hetzelfde result als <many-to-one lazy="false/proxy" class="Address">	,

/ We kunnen bij bidir combineren: 
<class name="Address" lazy="true/false">
	<set lazy="true" name="employees"> 	/ lazy=true is de default	,

/ Main	,
/ 2de session	,
	        address=(Address)session.get(Address.class, 12l);
	        Set<Employee>employees=address.getEmployees();
	        Iterator<Employee>iterator=employees.iterator();
	        while(iterator.hasNext()){
	        	Employee e=iterator.next();

/ als <class name="Address" lazy="false"> 
/ e.getAddress()=Address inst	,
/ als <class name="Address" lazy="true"> 
/ e.getAddress()=Address proxy 

/ Maar we kunnen het ook <many-to-one doen	,

<class name="Address" lazy="true">		/ default	,
	<set lazy="true" name="employees"> 	/ default	,

<class name="Employee">
	<many-to-one lazy="false/proxy">

/ als <many-to-one lazy="false">	, dan is e.getAddress()=Address inst	,
/ als <many-to-one lazy="true">	, 	dan is e.getAddress()=Address proxy	,

/ 7	.

/ N_1_bidir_ehcache	,

<class 
	name="Address"
>
	<set
 		name="employees"
 		inverse="true"
 		lazy="extra"
 	>

<class 
	name="Employee" 
>
	<many-to-one 
...
		lazy="false"
	/>

/ Main	,

	        employee = (Employee) session.get(Employee.class, 1l);
/ employee.address=Address proxy/instance	 als <many-to-one lazy="proxy/false">

	        address=(Address)session.get(Address.class, 12l);
	        Set<Employee>employees=address.getEmployees();
/ GEEN coll.init	, want lazy=extra	,
	        employees.size();
/ size query	, want lazy=extra	,
	        Iterator<Employee>iterator=employees.iterator();
	        while(iterator.hasNext()){
	        	Employee e=iterator.next();
/ e.address=Address inst	, want lazy=false	,

/ Ipv. lazy=false in <many-to-one ...> kunnen we ook <class name="Address" lazy="false">

/ 13	. 

/ lazy init exception	, als je een proxy hebt, en buiten de session (tussen 2 sessions door)	, een method call op de proxy	, H. kan dan niet de proxy init	,




/ 13	. 

/ N_1_bidir_ehcache	,

/ we query een Employee not lazy	, welke queries zien we?

/ Employee	,
	<many-to-one 
		name="address"
		column="address_"
		not-null="false"
		insert="false"
		update="false"
		lazy="false"
	/>

/ Main	,
	        employee = (Employee) session.get(Employee.class, 1l);


select employee0_.id_ as id_1_1_0_, employee0_.name_ as name_2_1_0_, employee0_.salary_ as salary_3_1_0_, employee0_.address_ as address_4_1_0_ 
from employee employee0_ 
where employee0_.id_=?
HibernateLog --> 11:11:01 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [1]
HibernateLog --> 11:11:01 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo1]
HibernateLog --> 11:11:01 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [1.0]
HibernateLog --> 11:11:01 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [12]

select address0_.id__ as id__1_0_0_, address0_.address_line1__ as address_2_0_0_, address0_.zipcode__ as zipcode_3_0_0_, address0_.city__ as city__4_0_0_ 
from address address0_ 
where address0_.id__=?
HibernateLog --> 11:11:01 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [12]
HibernateLog --> 11:11:01 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [foostreet]
HibernateLog --> 11:11:01 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [12 foo]
HibernateLog --> 11:11:01 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_0_] : [VARCHAR]) - [FooCity12]

/ we zien dat meteen ook de Address ref , Address#12 resolved is	,




/ Einde HIBERNATE PERFORMANCE

/ HIBERNATE PERFORMANCE

/ hibernate_xml_N_1_bidir_fetch_coll_ehcache  

/ TMP


			Query query=session.createQuery("from Address a left join  a.employees where a.zipcode like '%Work'" );

select address0_.id__ as id__1_0_0_, employees1_.id_ as id_1_1_1_, address0_.address_line1__ as address_2_0_0_, address0_.zipcode__ as zipcode_3_0_0_, address0_.city__ as city__4_0_0_, 
	employees1_.name_ as name_2_1_1_, employees1_.salary_ as salary_3_1_1_, employees1_.address_ as address_4_1_1_, employees1_.living_ as living_5_1_1_ 
from address_coll address0_ 
left outer join employee_coll employees1_ on address0_.id__=employees1_.address_ 
where address0_.zipcode__ like '%Work'

			Query query=session.createQuery("from Address a left join fetch  a.employees where a.zipcode like '%Work'" );

select address0_.id__ as id__1_0_0_, employees1_.id_ as id_1_1_1_, address0_.address_line1__ as address_2_0_0_, address0_.zipcode__ as zipcode_3_0_0_, address0_.city__ as city__4_0_0_, 
	employees1_.name_ as name_2_1_1_, employees1_.salary_ as salary_3_1_1_, employees1_.address_ as address_4_1_1_, employees1_.living_ as living_5_1_1_, employees1_.address_ as address_4_0_0__, employees1_.id_ as id_1_1_0__ 
from address_coll address0_ 
left outer join employee_coll employees1_ on address0_.id__=employees1_.address_ 
where address0_.zipcode__ like '%Work'



/ Einde TMP

/ 13

$ vi CollFetch.java

			org.hibernate.Criteria criteria=session.createCriteria(Address.class);
			criteria.add(Restrictions.like("zipcode", "%Foo"));
			List<Address>addresses=criteria.list();
/*
			ListIterator<Address>listIterator=addresses.listIterator();
			while(listIterator.hasNext()){
				Address address=(Address)listIterator.next();
				Set<Employee>employees=address.getEmployees();
				Iterator<Employee>iterator=employees.iterator();
/**
				while (iterator.hasNext()) {
					Employee employee = (Employee) iterator.next();
					Address living =employee.getLiving();
					String zip=living.getZipcode();
/***



/ Address
<class 
	name="Address" 
	table="address_coll"
>
	<set
 		name="employees"
 		inverse="true"
 		lazy="true"
		fetch="select"
 	>
 		<key
 			column="address_"
 			not-null="false"
 		/>
 		<one-to-many class="Employee"/>
 	</set>

/ Employee
<class 
	name="Employee" 
	table="employee_coll"
>
	<many-to-one 
		name="address"
		column="address_"
		not-null="true"
		lazy="proxy"
		fetch="select"
	/>
	<many-to-one 
		name="living"
		column="living_"
		not-null="false"
		lazy="proxy"
		fetch="select"
	/>

/*
select this_.id__ as id__1_0_0_, this_.address_line1__ as address_2_0_0_, this_.zipcode__ as zipcode_3_0_0_, this_.city__ as city__4_0_0_ 
from address_coll this_ 
where this_.zipcode__ like ?
HibernateLog --> 07:33:08 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [%Foo]
HibernateLog --> 07:33:08 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_0_] : [BIGINT]) - [1]
HibernateLog --> 07:33:08 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [FooStreet 1]
HibernateLog --> 07:33:08 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [1 Foo]
HibernateLog --> 07:33:08 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_0_] : [VARCHAR]) - [FooCity1]

HibernateLog --> 07:33:08 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_0_] : [BIGINT]) - [2]
HibernateLog --> 07:33:08 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [FooStreet 2]
HibernateLog --> 07:33:08 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [2 Foo]
HibernateLog --> 07:33:08 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_0_] : [VARCHAR]) - [FooCity2]

HibernateLog --> 07:33:08 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_0_] : [BIGINT]) - [3]
HibernateLog --> 07:33:08 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [FooStreet 3]
HibernateLog --> 07:33:08 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [3 Foo]
HibernateLog --> 07:33:08 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_0_] : [VARCHAR]) - [FooCity3]

HibernateLog --> 07:33:08 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_0_] : [BIGINT]) - [4]
HibernateLog --> 07:33:08 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [FooStreet 4]
HibernateLog --> 07:33:08 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [4 Foo]
HibernateLog --> 07:33:08 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_0_] : [VARCHAR]) - [FooCity4]

HibernateLog --> 07:33:08 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_0_] : [BIGINT]) - [5]
HibernateLog --> 07:33:08 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [FooStreet 5]
HibernateLog --> 07:33:08 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [5 Foo]
HibernateLog --> 07:33:08 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_0_] : [VARCHAR]) - [FooCity5]

/**
/ N keer, een coll

select employees0_.address_ as address_4_0_0_, employees0_.id_ as id_1_1_0_, employees0_.id_ as id_1_1_1_, employees0_.name_ as name_2_1_1_, employees0_.salary_ as salary_3_1_1_, employees0_.address_ as address_4_1_1_, employees0_.living_ as living_5_1_1_ 
from employee_coll employees0_ 
where employees0_.address_=?
HibernateLog --> 07:35:10 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [1]

HibernateLog --> 07:35:10 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [11]
HibernateLog --> 07:35:10 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo11]
HibernateLog --> 07:35:10 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [11.0]
HibernateLog --> 07:35:10 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [1]
HibernateLog --> 07:35:10 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_1_] : [BIGINT]) - [11]
HibernateLog --> 07:35:10 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [1]
HibernateLog --> 07:35:10 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [11]

HibernateLog --> 07:35:10 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [12]
HibernateLog --> 07:35:10 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo12]
HibernateLog --> 07:35:10 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [12.0]
HibernateLog --> 07:35:10 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [1]
HibernateLog --> 07:35:10 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_1_] : [BIGINT]) - [12]
HibernateLog --> 07:35:10 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [1]
HibernateLog --> 07:35:10 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [12]

HibernateLog --> 07:35:10 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [13]
HibernateLog --> 07:35:10 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo13]
HibernateLog --> 07:35:10 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [13.0]
HibernateLog --> 07:35:10 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [1]
HibernateLog --> 07:35:10 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_1_] : [BIGINT]) - [13]
HibernateLog --> 07:35:10 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [1]
HibernateLog --> 07:35:10 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [13]

HibernateLog --> 07:35:10 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [14]
HibernateLog --> 07:35:10 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo14]
HibernateLog --> 07:35:10 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [14.0]
HibernateLog --> 07:35:10 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [1]
HibernateLog --> 07:35:10 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_1_] : [BIGINT]) - [14]
HibernateLog --> 07:35:10 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [1]
HibernateLog --> 07:35:10 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [14]

HibernateLog --> 07:35:10 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [15]
HibernateLog --> 07:35:10 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo15]
HibernateLog --> 07:35:10 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [15.0]
HibernateLog --> 07:35:10 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [1]
HibernateLog --> 07:35:10 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_1_] : [BIGINT]) - [15]
HibernateLog --> 07:35:10 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [1]
HibernateLog --> 07:35:10 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [15]

/***
/ N keer	, een entity	,
select address0_.id__ as id__1_0_0_, address0_.address_line1__ as address_2_0_0_, address0_.zipcode__ as zipcode_3_0_0_, address0_.city__ as city__4_0_0_ 
from address_coll address0_ 
where address0_.id__=?
HibernateLog --> 07:39:01 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [13]

HibernateLog --> 07:39:01 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [LivingStreet]
HibernateLog --> 07:39:01 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [13 living]
HibernateLog --> 07:39:01 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_0_] : [VARCHAR]) - [LivingCity13]


/ 13

/ Address
<class 
	name="Address" 
	table="address_coll"
>
	<set
 		name="employees"
 		inverse="true"
 		lazy="true"
		fetch="join"
 	>
 		<key
 			column="address_"
 			not-null="false"
 		/>
 		<one-to-many class="Employee"/>
 	</set>

/ Employee
<class 
	name="Employee" 
	table="employee_coll"
>
	<many-to-one 
		name="address"
		column="address_"
		not-null="true"
		lazy="proxy"
		fetch="select"
	/>
	<many-to-one 
		name="living"
		column="living_"
		not-null="false"
		lazy="proxy"
		fetch="select"
	/>

/ HIER HIER

/*
/ join van de set met de owner	,

select this_.id__ as id__1_0_1_, this_.address_line1__ as address_2_0_1_, this_.zipcode__ as zipcode_3_0_1_, this_.city__ as city__4_0_1_, 
	employees2_.address_ as address_4_0_3_, employees2_.id_ as id_1_1_3_, employees2_.id_ as id_1_1_0_, employees2_.name_ as name_2_1_0_, employees2_.salary_ as salary_3_1_0_, employees2_.address_ as address_4_1_0_, employees2_.living_ as living_5_1_0_ 
from address_coll this_ 
left outer join employee_coll employees2_ on this_.id__=employees2_.address_ 
where this_.zipcode__ like ?
HibernateLog --> 07:44:45 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [%Foo]

HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [11]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_1_] : [BIGINT]) - [1]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo11]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [11.0]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [1]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [111]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_1_] : [VARCHAR]) - [WorkStreet 1]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_1_] : [VARCHAR]) - [1 Work]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_1_] : [VARCHAR]) - [WorkCity1]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_3_] : [BIGINT]) - [1]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_3_] : [BIGINT]) - [11]

HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [12]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_1_] : [BIGINT]) - [1]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo12]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [12.0]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [1]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [112]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_3_] : [BIGINT]) - [1]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_3_] : [BIGINT]) - [12]

HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [13]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_1_] : [BIGINT]) - [1]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo13]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [13.0]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [1]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [113]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_3_] : [BIGINT]) - [1]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_3_] : [BIGINT]) - [13]

HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [14]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_1_] : [BIGINT]) - [1]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo14]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [14.0]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [1]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [114]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_3_] : [BIGINT]) - [1]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_3_] : [BIGINT]) - [14]

HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [15]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_1_] : [BIGINT]) - [1]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo15]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [15.0]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [1]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [115]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_3_] : [BIGINT]) - [1]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_3_] : [BIGINT]) - [15]

HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [21]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_1_] : [BIGINT]) - [2]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo21]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [21.0]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [2]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [121]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_1_] : [VARCHAR]) - [WorkStreet 2]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_1_] : [VARCHAR]) - [2 Work]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_1_] : [VARCHAR]) - [WorkCity2]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_3_] : [BIGINT]) - [2]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_3_] : [BIGINT]) - [21]

HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [22]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_1_] : [BIGINT]) - [2]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo22]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [22.0]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [2]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [122]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_3_] : [BIGINT]) - [2]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_3_] : [BIGINT]) - [22]

HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [23]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_1_] : [BIGINT]) - [2]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo23]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [23.0]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [2]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [123]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_3_] : [BIGINT]) - [2]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_3_] : [BIGINT]) - [23]

HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [24]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_1_] : [BIGINT]) - [2]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo24]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [24.0]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [2]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [124]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_3_] : [BIGINT]) - [2]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_3_] : [BIGINT]) - [24]

HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [25]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_1_] : [BIGINT]) - [2]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo25]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [25.0]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [2]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [125]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_3_] : [BIGINT]) - [2]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_3_] : [BIGINT]) - [25]

HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [31]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_1_] : [BIGINT]) - [3]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo31]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [31.0]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [3]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [131]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_1_] : [VARCHAR]) - [WorkStreet 3]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_1_] : [VARCHAR]) - [3 Work]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_1_] : [VARCHAR]) - [WorkCity3]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_3_] : [BIGINT]) - [3]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_3_] : [BIGINT]) - [31]

HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [32]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_1_] : [BIGINT]) - [3]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo32]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [32.0]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [3]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [132]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_3_] : [BIGINT]) - [3]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_3_] : [BIGINT]) - [32]

HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [33]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_1_] : [BIGINT]) - [3]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo33]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [33.0]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [3]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [133]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_3_] : [BIGINT]) - [3]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_3_] : [BIGINT]) - [33]

HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [34]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_1_] : [BIGINT]) - [3]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo34]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [34.0]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [3]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [134]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_3_] : [BIGINT]) - [3]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_3_] : [BIGINT]) - [34]

HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [35]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_1_] : [BIGINT]) - [3]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo35]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [35.0]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [3]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [135]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_3_] : [BIGINT]) - [3]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_3_] : [BIGINT]) - [35]

HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [41]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_1_] : [BIGINT]) - [4]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo41]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [41.0]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [4]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [141]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_1_] : [VARCHAR]) - [WorkStreet 4]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_1_] : [VARCHAR]) - [4 Work]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_1_] : [VARCHAR]) - [WorkCity4]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_3_] : [BIGINT]) - [4]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_3_] : [BIGINT]) - [41]

HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [42]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_1_] : [BIGINT]) - [4]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo42]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [42.0]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [4]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [142]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_3_] : [BIGINT]) - [4]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_3_] : [BIGINT]) - [42]

HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [43]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_1_] : [BIGINT]) - [4]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo43]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [43.0]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [4]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [143]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_3_] : [BIGINT]) - [4]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_3_] : [BIGINT]) - [43]

HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [44]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_1_] : [BIGINT]) - [4]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo44]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [44.0]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [4]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [144]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_3_] : [BIGINT]) - [4]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_3_] : [BIGINT]) - [44]

HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [45]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_1_] : [BIGINT]) - [4]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo45]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [45.0]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [4]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [145]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_3_] : [BIGINT]) - [4]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_3_] : [BIGINT]) - [45]

HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [51]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_1_] : [BIGINT]) - [5]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo51]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [51.0]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [5]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [151]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_1_] : [VARCHAR]) - [WorkStreet 5]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_1_] : [VARCHAR]) - [5 Work]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_1_] : [VARCHAR]) - [WorkCity5]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_3_] : [BIGINT]) - [5]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_3_] : [BIGINT]) - [51]

HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [52]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_1_] : [BIGINT]) - [5]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo52]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [52.0]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [5]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [152]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_3_] : [BIGINT]) - [5]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_3_] : [BIGINT]) - [52]

HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [53]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_1_] : [BIGINT]) - [5]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo53]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [53.0]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [5]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [153]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_3_] : [BIGINT]) - [5]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_3_] : [BIGINT]) - [53]

HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [54]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_1_] : [BIGINT]) - [5]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo54]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [54.0]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [5]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [154]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_3_] : [BIGINT]) - [5]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_3_] : [BIGINT]) - [54]

HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [55]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_1_] : [BIGINT]) - [5]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo55]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [55.0]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [5]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [155]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_3_] : [BIGINT]) - [5]
HibernateLog --> 09:42:57 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_3_] : [BIGINT]) - [55]




/ **
/ NO QJUERY, zit al in de join bij *

/ ***
/ N queries	, steeds een ent, een living address	, 

select address0_.id__ as id__1_0_0_, address0_.address_line1__ as address_2_0_0_, address0_.zipcode__ as zipcode_3_0_0_, address0_.city__ as city__4_0_0_, employees1_.address_ as address_4_0_1_, employees1_.id_ as id_1_1_1_, employees1_.id_ as id_1_1_2_, employees1_.name_ as name_2_1_2_, employees1_.salary_ as salary_3_1_2_, employees1_.address_ as address_4_1_2_, employees1_.living_ as living_5_1_2_ 
from address_coll address0_ 
left outer join employee_coll employees1_ on address0_.id__=employees1_.address_ 
where address0_.id__=?
HibernateLog --> 07:49:35 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [15]

HibernateLog --> 07:49:35 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_2_] : [BIGINT]) - [null]
HibernateLog --> 07:49:35 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [LivingStreet]
HibernateLog --> 07:49:35 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [15 living]
HibernateLog --> 07:49:35 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_0_] : [VARCHAR]) - [LivingCity15]
HibernateLog --> 07:49:35 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_1_] : [BIGINT]) - [null]

/ Die null's zijn de id en address fk van de employee die werkt op living address 15	, die employee is er niet	,

/ Waarom doet hij hier een join met een employee, die op die living address zou werken?
/ TODO

/ 13	.

/ Address	,
	<set
 		name="employees"
 		inverse="true"
 		lazy="true"
		fetch="select"
 	>
 		<key
 			column="address_"
 			not-null="false"
 		/>
 		<one-to-many class="Employee"/>
 	</set>

/ Employee
	<many-to-one 
		name="address"
		column="address_"
		not-null="true"
		lazy="proxy"
		fetch="select"
	/>
	<many-to-one 
		name="living"
		column="living_"
		not-null="false"
		lazy="proxy"
		fetch="join"
	/>


/ CollFetchApp	,
			org.hibernate.Criteria criteria=session.createCriteria(Address.class);
			criteria.add(Restrictions.like("zipcode", "%Foo"));
			List<Address>addresses=criteria.list();
/*
			ListIterator<Address>listIterator=addresses.listIterator();
			while(listIterator.hasNext()){
				Address address=(Address)listIterator.next();
				System.out.println("ZIP: "+address.getZipcode());
				Set<Employee>employees=address.getEmployees();
				Iterator<Employee>iterator=employees.iterator();
/**
				while (iterator.hasNext()) {
					Employee employee = (Employee) iterator.next();
					Address living =employee.getLiving();
					String zip=living.getZipcode();
/***
					boolean b=false;

/*
list van work addresses	,
/**
list van employees & their living address	,
/***
/ NO QUERY	,

/**
select employees0_.address_ as address_4_0_0_, employees0_.id_ as id_1_1_0_, employees0_.id_ as id_1_1_1_, employees0_.name_ as name_2_1_1_, employees0_.salary_ as salary_3_1_1_, employees0_.address_ as address_4_1_1_, employees0_.living_ as living_5_1_1_, 
	address1_.id__ as id__1_0_2_, address1_.address_line1__ as address_2_0_2_, address1_.zipcode__ as zipcode_3_0_2_, address1_.city__ as city__4_0_2_ 
from employee_coll employees0_ 
left outer join address_coll address1_ on employees0_.living_=address1_.id__ 
where employees0_.address_=?

HibernateLog --> 09:14:47 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [1]

HibernateLog --> 09:14:48 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [11]
HibernateLog --> 09:14:48 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_2_] : [BIGINT]) - [111]
HibernateLog --> 09:14:48 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo11]
HibernateLog --> 09:14:48 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [11.0]
HibernateLog --> 09:14:48 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [1]
HibernateLog --> 09:14:48 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_1_] : [BIGINT]) - [111]
HibernateLog --> 09:14:48 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_2_] : [VARCHAR]) - [LivingStreet]
HibernateLog --> 09:14:48 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_2_] : [VARCHAR]) - [111 living]
HibernateLog --> 09:14:48 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_2_] : [VARCHAR]) - [LivingCity111]
HibernateLog --> 09:14:48 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [1]
HibernateLog --> 09:14:48 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [11]

HibernateLog --> 09:14:48 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [12]
HibernateLog --> 09:14:48 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_2_] : [BIGINT]) - [112]
HibernateLog --> 09:14:48 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo12]
HibernateLog --> 09:14:48 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [12.0]
HibernateLog --> 09:14:48 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [1]
HibernateLog --> 09:14:48 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_1_] : [BIGINT]) - [112]
HibernateLog --> 09:14:48 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_2_] : [VARCHAR]) - [LivingStreet]
HibernateLog --> 09:14:48 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_2_] : [VARCHAR]) - [112 living]
HibernateLog --> 09:14:48 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_2_] : [VARCHAR]) - [LivingCity112]
HibernateLog --> 09:14:48 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [1]
HibernateLog --> 09:14:48 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [12]

HibernateLog --> 09:14:48 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [13]
HibernateLog --> 09:14:48 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_2_] : [BIGINT]) - [113]
HibernateLog --> 09:14:48 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo13]
HibernateLog --> 09:14:48 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [13.0]
HibernateLog --> 09:14:48 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [1]
HibernateLog --> 09:14:48 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_1_] : [BIGINT]) - [113]
HibernateLog --> 09:14:48 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_2_] : [VARCHAR]) - [LivingStreet]
HibernateLog --> 09:14:48 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_2_] : [VARCHAR]) - [113 living]
HibernateLog --> 09:14:48 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_2_] : [VARCHAR]) - [LivingCity113]
HibernateLog --> 09:14:48 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [1]
HibernateLog --> 09:14:48 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [13]

HibernateLog --> 09:14:48 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [14]
HibernateLog --> 09:14:48 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_2_] : [BIGINT]) - [114]
HibernateLog --> 09:14:48 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo14]
HibernateLog --> 09:14:48 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [14.0]
HibernateLog --> 09:14:48 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [1]
HibernateLog --> 09:14:48 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_1_] : [BIGINT]) - [114]
HibernateLog --> 09:14:48 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_2_] : [VARCHAR]) - [LivingStreet]
HibernateLog --> 09:14:48 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_2_] : [VARCHAR]) - [114 living]
HibernateLog --> 09:14:48 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_2_] : [VARCHAR]) - [LivingCity114]
HibernateLog --> 09:14:48 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [1]
HibernateLog --> 09:14:48 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [14]

HibernateLog --> 09:14:48 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [15]
HibernateLog --> 09:14:48 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_2_] : [BIGINT]) - [115]
HibernateLog --> 09:14:48 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo15]
HibernateLog --> 09:14:48 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [15.0]
HibernateLog --> 09:14:48 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [1]
HibernateLog --> 09:14:48 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_1_] : [BIGINT]) - [115]
HibernateLog --> 09:14:48 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_2_] : [VARCHAR]) - [LivingStreet]
HibernateLog --> 09:14:48 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_2_] : [VARCHAR]) - [115 living]
HibernateLog --> 09:14:48 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_2_] : [VARCHAR]) - [LivingCity115]
HibernateLog --> 09:14:48 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [1]
HibernateLog --> 09:14:48 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [15]

/ 13	.

/ Address	,
	<set
 		name="employees"
 		inverse="true"
 		lazy="false"
		fetch="select"
 	>
 		<key
 			column="address_"
 			not-null="false"
 		/>
 		<one-to-many class="Employee"/>
 	</set>

/ OR
	<set
 		name="employees"
 		inverse="true"
 		lazy="true"
		fetch="join"
 	>


/ CollFetchApp	,
			Address address=(Address)session.get(Address.class, 1l);
/*
			Set<Employee>employees=address.getEmployees();
			Iterator<Employee>iterator=employees.iterator();
			while (iterator.hasNext()) {
				Employee employee = (Employee) iterator.next();
				Address living =employee.getLiving();
				String zip=living.getZipcode();
/**
				boolean b=false;
				
			}

/ we hebben 1 work address	,  

/*
/ with lazy=false, there are 2 queries , with fetch=join, 1 query	,
/ with fetch=join, we kunnen lazy=true/false	,

/** 
/ In both cases the same: 1+N problem, for every zip a new query for the address	,

/ with lazy false : there are 2 queries	, because in Address's mapping	, <set lazy=false> , dus in een living address wil hij de set van employees init	, die er niet zijn	, 
/ Ook hier probeert H de set van employees van een living address te init	, maar die is er niet, vandaar de nulls	,


/*
/ lazy=false, fetch="select"	,

select address0_.id__ as id__1_0_0_, address0_.address_line1__ as address_2_0_0_, address0_.zipcode__ as zipcode_3_0_0_, address0_.city__ as city__4_0_0_ from address_coll address0_ where address0_.id__=?
HibernateLog --> 07:37:05 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [1]

HibernateLog --> 07:37:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [WorkStreet 1]
HibernateLog --> 07:37:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [1 Work]
HibernateLog --> 07:37:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_0_] : [VARCHAR]) - [WorkCity1]
HibernateLog --> 07:37:05 TRACE org.hibernate.type.CollectionType - Created collection wrapper: [my.test.own.hibernate_xml_N_1_bidir_fetch_coll_ehcache.Address.employees#1]

select employees0_.address_ as address_4_0_0_, employees0_.id_ as id_1_1_0_, employees0_.id_ as id_1_1_1_, employees0_.name_ as name_2_1_1_, employees0_.salary_ as salary_3_1_1_, employees0_.address_ as address_4_1_1_, employees0_.living_ as living_5_1_1_ from employee_coll employees0_ where employees0_.address_=?
HibernateLog --> 07:20:28 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [1]

HibernateLog --> 07:20:28 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [11]
HibernateLog --> 07:20:28 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo11]
HibernateLog --> 07:20:28 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [11.0]
HibernateLog --> 07:20:28 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [1]
HibernateLog --> 07:20:28 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_1_] : [BIGINT]) - [111]
HibernateLog --> 07:20:28 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [1]
HibernateLog --> 07:20:28 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [11]
HibernateLog --> 07:20:28 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [12]
HibernateLog --> 07:20:28 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo12]
HibernateLog --> 07:20:28 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [12.0]
HibernateLog --> 07:20:28 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [1]
HibernateLog --> 07:20:28 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_1_] : [BIGINT]) - [112]
HibernateLog --> 07:20:28 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [1]
HibernateLog --> 07:20:28 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [12]
HibernateLog --> 07:20:28 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [13]
HibernateLog --> 07:20:28 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo13]
HibernateLog --> 07:20:28 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [13.0]
HibernateLog --> 07:20:28 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [1]
HibernateLog --> 07:20:28 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_1_] : [BIGINT]) - [113]
HibernateLog --> 07:20:28 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [1]
HibernateLog --> 07:20:28 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [13]
HibernateLog --> 07:20:28 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [14]
HibernateLog --> 07:20:28 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo14]
HibernateLog --> 07:20:28 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [14.0]
HibernateLog --> 07:20:28 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [1]
HibernateLog --> 07:20:28 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_1_] : [BIGINT]) - [114]
HibernateLog --> 07:20:28 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [1]
HibernateLog --> 07:20:28 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [14]
HibernateLog --> 07:20:28 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [15]
HibernateLog --> 07:20:28 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo15]
HibernateLog --> 07:20:28 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [15.0]
HibernateLog --> 07:20:28 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [1]
HibernateLog --> 07:20:28 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_1_] : [BIGINT]) - [115]
HibernateLog --> 07:20:28 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [1]
HibernateLog --> 07:20:28 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [15]

/**
select address0_.id__ as id__1_0_0_, address0_.address_line1__ as address_2_0_0_, address0_.zipcode__ as zipcode_3_0_0_, address0_.city__ as city__4_0_0_ 
from address_coll address0_ 
where address0_.id__=?
HibernateLog --> 08:32:43 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [115]
HibernateLog --> 08:32:43 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [LivingStreet]
HibernateLog --> 08:32:43 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [115 living]
HibernateLog --> 08:32:43 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_0_] : [VARCHAR]) - [LivingCity115]

select employees0_.address_ as address_4_0_0_, employees0_.id_ as id_1_1_0_, employees0_.id_ as id_1_1_1_, employees0_.name_ as name_2_1_1_, employees0_.salary_ as salary_3_1_1_, employees0_.address_ as address_4_1_1_, employees0_.living_ as living_5_1_1_ 
from employee_coll employees0_ 
where employees0_.address_=?
HibernateLog --> 08:32:43 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [115]


/*
/ lazy=true, fetch=join

select address0_.id__ as id__1_0_0_, address0_.address_line1__ as address_2_0_0_, address0_.zipcode__ as zipcode_3_0_0_, address0_.city__ as city__4_0_0_, employees1_.address_ as address_4_0_1_, 
	employees1_.id_ as id_1_1_1_, employees1_.id_ as id_1_1_2_, employees1_.name_ as name_2_1_2_, employees1_.salary_ as salary_3_1_2_, employees1_.address_ as address_4_1_2_, employees1_.living_ as living_5_1_2_ 
from address_coll address0_ 
left outer join employee_coll employees1_ on address0_.id__=employees1_.address_ 
where address0_.id__=?
HibernateLog --> 07:26:38 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [1]

HibernateLog --> 07:26:38 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_2_] : [BIGINT]) - [11]
HibernateLog --> 07:26:38 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [WorkStreet 1]
HibernateLog --> 07:26:38 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [1 Work]
HibernateLog --> 07:26:38 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_0_] : [VARCHAR]) - [WorkCity1]
HibernateLog --> 07:26:38 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_2_] : [VARCHAR]) - [Foo11]
HibernateLog --> 07:26:38 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_2_] : [DOUBLE]) - [11.0]
HibernateLog --> 07:26:38 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_2_] : [BIGINT]) - [1]
HibernateLog --> 07:26:38 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_2_] : [BIGINT]) - [111]
HibernateLog --> 07:26:38 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_1_] : [BIGINT]) - [1]
HibernateLog --> 07:26:38 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [11]
HibernateLog --> 07:26:38 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_2_] : [BIGINT]) - [12]
HibernateLog --> 07:26:38 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_2_] : [VARCHAR]) - [Foo12]
HibernateLog --> 07:26:38 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_2_] : [DOUBLE]) - [12.0]
HibernateLog --> 07:26:38 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_2_] : [BIGINT]) - [1]
HibernateLog --> 07:26:38 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_2_] : [BIGINT]) - [112]
HibernateLog --> 07:26:38 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_1_] : [BIGINT]) - [1]
HibernateLog --> 07:26:38 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [12]
HibernateLog --> 07:26:38 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_2_] : [BIGINT]) - [13]
HibernateLog --> 07:26:38 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_2_] : [VARCHAR]) - [Foo13]
HibernateLog --> 07:26:38 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_2_] : [DOUBLE]) - [13.0]
HibernateLog --> 07:26:38 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_2_] : [BIGINT]) - [1]
HibernateLog --> 07:26:38 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_2_] : [BIGINT]) - [113]
HibernateLog --> 07:26:38 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_1_] : [BIGINT]) - [1]
HibernateLog --> 07:26:38 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [13]
HibernateLog --> 07:26:38 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_2_] : [BIGINT]) - [14]
HibernateLog --> 07:26:38 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_2_] : [VARCHAR]) - [Foo14]
HibernateLog --> 07:26:38 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_2_] : [DOUBLE]) - [14.0]
HibernateLog --> 07:26:38 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_2_] : [BIGINT]) - [1]
HibernateLog --> 07:26:38 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_2_] : [BIGINT]) - [114]
HibernateLog --> 07:26:38 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_1_] : [BIGINT]) - [1]
HibernateLog --> 07:26:38 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [14]
HibernateLog --> 07:26:38 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_2_] : [BIGINT]) - [15]
HibernateLog --> 07:26:38 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_2_] : [VARCHAR]) - [Foo15]
HibernateLog --> 07:26:38 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_2_] : [DOUBLE]) - [15.0]
HibernateLog --> 07:26:38 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_2_] : [BIGINT]) - [1]
HibernateLog --> 07:26:38 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_2_] : [BIGINT]) - [115]
HibernateLog --> 07:26:38 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_1_] : [BIGINT]) - [1]
HibernateLog --> 07:26:38 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [15]

/ **

select address0_.id__ as id__1_0_0_, address0_.address_line1__ as address_2_0_0_, address0_.zipcode__ as zipcode_3_0_0_, address0_.city__ as city__4_0_0_, employees1_.address_ as address_4_0_1_, employees1_.id_ as id_1_1_1_, employees1_.id_ as id_1_1_2_, employees1_.name_ as name_2_1_2_, employees1_.salary_ as salary_3_1_2_, employees1_.address_ as address_4_1_2_, employees1_.living_ as living_5_1_2_ 
from address_coll address0_ left 
outer join employee_coll employees1_ on address0_.id__=employees1_.address_ 
where address0_.id__=?
HibernateLog --> 08:40:17 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [111]
HibernateLog --> 08:40:17 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_2_] : [BIGINT]) - [null]
Address.setId()
HibernateLog --> 08:40:17 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [LivingStreet]
HibernateLog --> 08:40:17 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [111 living]
HibernateLog --> 08:40:17 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_0_] : [VARCHAR]) - [LivingCity111]
HibernateLog --> 08:40:17 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_1_] : [BIGINT]) - [null]
Address.setAddressLine1()

/ Ook hier probeert H de set van employees van een living address te init	, maar die is er niet, vandaar de nulls	,


/ 13	.

/ Address	,
	<set
 		name="employees"
 		inverse="true"
 		lazy="false"
		fetch="select"
 	>
 		<key
 			column="address_"
 			not-null="false"
 		/>
 		<one-to-many class="Employee"/>
 	</set>

/ CollFetchApp	,

			org.hibernate.Criteria criteria=session.createCriteria(Address.class);
			criteria.add(Restrictions.like("zipcode", "%Work"));
			List<Address>addresses=criteria.list();
/*
			ListIterator<Address>listIterator=addresses.listIterator();
			while(listIterator.hasNext()){
				Address address=(Address)listIterator.next();
				Set<Employee>employees=address.getEmployees();
				Iterator<Employee>iterator=employees.iterator();
				while (iterator.hasNext()) {
					Employee employee = (Employee) iterator.next();
					Address living =employee.getLiving();
					String zip=living.getZipcode();
/**
					
				}
			}

/ Nu een coll work addresses	, zonet 1 work address	,

'/ bij ** zien we  een overbodige query , omdat <set lazy=false> wil H ook bij een living address de set van employees fill (er werken geen employees op het living address, dus de set is leeg)	, op de lazy=false manier, dwz een query er na, geen join	,

/*
select this_.id__ as id__1_0_0_, this_.address_line1__ as address_2_0_0_, this_.zipcode__ as zipcode_3_0_0_, this_.city__ as city__4_0_0_ 
from address_coll this_ 
where this_.zipcode__ like ?
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [%Work]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_0_] : [BIGINT]) - [1]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [WorkStreet 1]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [1 Work]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_0_] : [VARCHAR]) - [WorkCity1]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_0_] : [BIGINT]) - [2]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [WorkStreet 2]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [2 Work]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_0_] : [VARCHAR]) - [WorkCity2]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_0_] : [BIGINT]) - [3]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [WorkStreet 3]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [3 Work]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_0_] : [VARCHAR]) - [WorkCity3]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_0_] : [BIGINT]) - [4]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [WorkStreet 4]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [4 Work]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_0_] : [VARCHAR]) - [WorkCity4]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_0_] : [BIGINT]) - [5]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [WorkStreet 5]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [5 Work]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_0_] : [VARCHAR]) - [WorkCity5]

select employees0_.address_ as address_4_0_0_, employees0_.id_ as id_1_1_0_, employees0_.id_ as id_1_1_1_, employees0_.name_ as name_2_1_1_, employees0_.salary_ as salary_3_1_1_, employees0_.address_ as address_4_1_1_, employees0_.living_ as living_5_1_1_ 
from employee_coll employees0_ 
where employees0_.address_=?
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [5]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [51]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo51]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [51.0]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [5]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_1_] : [BIGINT]) - [151]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [5]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [51]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [52]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo52]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [52.0]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [5]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_1_] : [BIGINT]) - [152]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [5]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [52]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [53]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo53]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [53.0]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [5]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_1_] : [BIGINT]) - [153]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [5]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [53]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [54]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo54]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [54.0]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [5]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_1_] : [BIGINT]) - [154]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [5]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [54]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [55]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo55]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [55.0]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [5]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_1_] : [BIGINT]) - [155]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [5]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [55]

Hibernate: select employees0_.address_ as address_4_0_0_, employees0_.id_ as id_1_1_0_, employees0_.id_ as id_1_1_1_, employees0_.name_ as name_2_1_1_, employees0_.salary_ as salary_3_1_1_, employees0_.address_ as address_4_1_1_, employees0_.living_ as living_5_1_1_ from employee_coll employees0_ where employees0_.address_=?
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [4]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [41]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo41]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [41.0]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [4]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_1_] : [BIGINT]) - [141]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [4]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [41]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [42]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo42]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [42.0]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [4]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_1_] : [BIGINT]) - [142]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [4]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [42]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [43]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo43]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [43.0]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [4]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_1_] : [BIGINT]) - [143]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [4]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [43]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [44]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo44]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [44.0]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [4]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_1_] : [BIGINT]) - [144]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [4]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [44]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [45]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo45]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [45.0]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [4]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_1_] : [BIGINT]) - [145]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [4]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [45]

select employees0_.address_ as address_4_0_0_, employees0_.id_ as id_1_1_0_, employees0_.id_ as id_1_1_1_, employees0_.name_ as name_2_1_1_, employees0_.salary_ as salary_3_1_1_, employees0_.address_ as address_4_1_1_, employees0_.living_ as living_5_1_1_ 
from employee_coll employees0_ 
where employees0_.address_=?
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [3]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [31]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo31]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [31.0]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [3]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_1_] : [BIGINT]) - [131]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [3]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [31]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [32]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo32]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [32.0]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [3]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_1_] : [BIGINT]) - [132]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [3]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [32]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [33]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo33]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [33.0]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [3]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_1_] : [BIGINT]) - [133]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [3]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [33]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [34]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo34]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [34.0]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [3]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_1_] : [BIGINT]) - [134]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [3]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [34]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [35]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo35]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [35.0]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [3]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_1_] : [BIGINT]) - [135]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [3]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [35]

select employees0_.address_ as address_4_0_0_, employees0_.id_ as id_1_1_0_, employees0_.id_ as id_1_1_1_, employees0_.name_ as name_2_1_1_, employees0_.salary_ as salary_3_1_1_, employees0_.address_ as address_4_1_1_, employees0_.living_ as living_5_1_1_ 
from employee_coll employees0_ where employees0_.address_=?
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [2]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [21]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo21]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [21.0]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [2]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_1_] : [BIGINT]) - [121]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [2]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [21]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [22]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo22]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [22.0]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [2]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_1_] : [BIGINT]) - [122]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [2]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [22]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [23]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo23]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [23.0]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [2]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_1_] : [BIGINT]) - [123]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [2]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [23]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [24]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo24]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [24.0]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [2]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_1_] : [BIGINT]) - [124]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [2]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [24]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [25]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo25]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [25.0]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [2]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_1_] : [BIGINT]) - [125]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [2]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [25]

select employees0_.address_ as address_4_0_0_, employees0_.id_ as id_1_1_0_, employees0_.id_ as id_1_1_1_, employees0_.name_ as name_2_1_1_, employees0_.salary_ as salary_3_1_1_, employees0_.address_ as address_4_1_1_, employees0_.living_ as living_5_1_1_ 
from employee_coll employees0_ 
where employees0_.address_=?
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [1]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [11]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo11]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [11.0]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [1]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_1_] : [BIGINT]) - [111]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [1]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [11]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [12]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo12]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [12.0]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [1]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_1_] : [BIGINT]) - [112]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [1]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [12]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [13]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo13]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [13.0]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [1]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_1_] : [BIGINT]) - [113]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [1]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [13]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [14]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo14]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [14.0]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [1]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_1_] : [BIGINT]) - [114]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [1]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [14]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_1_] : [BIGINT]) - [15]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_1_] : [VARCHAR]) - [Foo15]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_1_] : [DOUBLE]) - [15.0]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_1_] : [BIGINT]) - [1]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_1_] : [BIGINT]) - [115]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_0_] : [BIGINT]) - [1]
HibernateLog --> 08:18:05 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [15]

/**
select address0_.id__ as id__1_0_0_, address0_.address_line1__ as address_2_0_0_, address0_.zipcode__ as zipcode_3_0_0_, address0_.city__ as city__4_0_0_ 
from address_coll address0_ 
where address0_.id__=?
HibernateLog --> 08:21:51 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [113]
HibernateLog --> 08:21:51 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_0_] : [VARCHAR]) - [LivingStreet]
HibernateLog --> 08:21:51 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_0_] : [VARCHAR]) - [113 living]
HibernateLog --> 08:21:51 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_0_] : [VARCHAR]) - [LivingCity113]

select employees0_.address_ as address_4_0_0_, employees0_.id_ as id_1_1_0_, employees0_.id_ as id_1_1_1_, employees0_.name_ as name_2_1_1_, employees0_.salary_ as salary_3_1_1_, employees0_.address_ as address_4_1_1_, employees0_.living_ as living_5_1_1_ 
from employee_coll employees0_ 
where employees0_.address_=?
HibernateLog --> 08:21:51 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [113]

/ we zien extra query, nutteloos bij een living address	, maar dat komt dus door de <set lazy=false>	: een living address heeft ook een set, en deze probeert hij te init	, bij fetch="join" zien we nulls	, 

/ 13	.

/ Address	,
	<set
 		name="employees"
 		inverse="true"
 		lazy="true"
		fetch="join"
 	>

select this_.id__ as id__1_0_1_, this_.address_line1__ as address_2_0_1_, this_.zipcode__ as zipcode_3_0_1_, this_.city__ as city__4_0_1_, 
	employees2_.address_ as address_4_0_3_, employees2_.id_ as id_1_1_3_, employees2_.id_ as id_1_1_0_, employees2_.name_ as name_2_1_0_, employees2_.salary_ as salary_3_1_0_, employees2_.address_ as address_4_1_0_, employees2_.living_ as living_5_1_0_ 
from address_coll this_ 
left outer join employee_coll employees2_ on this_.id__=employees2_.address_ 
where this_.zipcode__ like ?
HibernateLog --> 09:50:15 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [%Work]

HibernateLog --> 09:50:58 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [11]
HibernateLog --> 09:51:22 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_1_] : [BIGINT]) - [1]
HibernateLog --> 09:51:35 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo11]
HibernateLog --> 09:51:35 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [11.0]
HibernateLog --> 09:51:35 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [1]
HibernateLog --> 09:51:35 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [111]
HibernateLog --> 09:51:35 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_1_] : [VARCHAR]) - [WorkStreet 1]
HibernateLog --> 09:51:35 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_1_] : [VARCHAR]) - [1 Work]
HibernateLog --> 09:51:35 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_1_] : [VARCHAR]) - [WorkCity1]
HibernateLog --> 09:51:36 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_3_] : [BIGINT]) - [1]
HibernateLog --> 09:51:36 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_3_] : [BIGINT]) - [11]

HibernateLog --> 09:52:13 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [12]
HibernateLog --> 09:52:13 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_1_] : [BIGINT]) - [1]
HibernateLog --> 09:52:13 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo12]
HibernateLog --> 09:52:13 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [12.0]
HibernateLog --> 09:52:13 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [1]
HibernateLog --> 09:52:13 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [112]
HibernateLog --> 09:52:13 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_3_] : [BIGINT]) - [1]
HibernateLog --> 09:52:13 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_3_] : [BIGINT]) - [12]

HibernateLog --> 10:01:14 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [13]
HibernateLog --> 10:01:14 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_1_] : [BIGINT]) - [1]
HibernateLog --> 10:01:14 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo13]
HibernateLog --> 10:01:14 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [13.0]
HibernateLog --> 10:01:14 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [1]
HibernateLog --> 10:01:14 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [113]
HibernateLog --> 10:01:14 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_3_] : [BIGINT]) - [1]
HibernateLog --> 10:01:14 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_3_] : [BIGINT]) - [13]

/ 13	. 

/ We debug	,

			org.hibernate.Criteria criteria=session.createCriteria(Address.class);
			criteria.add(Restrictions.like("zipcode", "%Work"));
			List<Address>addresses=criteria.list();
/s
SessionImpl.list(Criteria) line: 1682	
			for( int i=0; i<size; i++ ) {
/ size=1
				final List currentResults = loaders[i].list(this);
/s
CriteriaLoader(Loader).doList(SessionImplementor, QueryParameters, ResultTransformer) line: 2553	
			result = doQueryAndInitializeNonLazyCollections( session, queryParameters, true, forcedResultTransformer );
/s
CriteriaLoader(Loader).doQueryAndInitializeNonLazyCollections(SessionImplementor, QueryParameters, boolean, ResultTransformer) line: 354	
				result = doQuery( session, queryParameters, returnProxies, forcedResultTransformer );
/s
CriteriaLoader(Loader).doQuery(SessionImplementor, QueryParameters, boolean, ResultTransformer) line: 910	
		final SqlStatementWrapper wrapper = executeQueryStatement( queryParameters, false, afterLoadActions, session );

select this_.id__ as id__1_0_1_, this_.address_line1__ as address_2_0_1_, this_.zipcode__ as zipcode_3_0_1_, this_.city__ as city__4_0_1_, 
	employees2_.address_ as address_4_0_3_, employees2_.id_ as id_1_1_3_, employees2_.id_ as id_1_1_0_, employees2_.name_ as name_2_1_0_, employees2_.salary_ as salary_3_1_0_, employees2_.address_ as address_4_1_0_, employees2_.living_ as living_5_1_0_ 
from address_coll this_ 
left outer join employee_coll employees2_ on this_.id__=employees2_.address_ 
where this_.zipcode__ like ?
HibernateLog --> 10:24:48 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [%Work]

			return processResultSet( rs, queryParameters, session, returnProxies, forcedResultTransformer, maxRows, afterLoadActions );
/s
		for ( count = 0; count < maxRows && rs.next(); count++ ) {
			if ( DEBUG_ENABLED )
				LOG.debugf( "Result set row: %s", count );
			Object result = getRowFromResultSet(
					rs,
					session,
					queryParameters,
					lockModesArray,
					optionalObjectKey,
					hydratedObjects,
					keys,
					returnProxies,
					forcedResultTransformer
			);
/ 1ste	,

HibernateLog --> 10:36:29 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [11]
HibernateLog --> 10:36:29 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_1_] : [BIGINT]) - [1]
HibernateLog --> 10:36:29 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo11]
HibernateLog --> 10:36:29 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [11.0]
HibernateLog --> 10:36:29 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [1]
HibernateLog --> 10:36:29 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [111]
HibernateLog --> 10:36:29 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_2_0_1_] : [VARCHAR]) - [WorkStreet 1]
HibernateLog --> 10:36:29 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([zipcode_3_0_1_] : [VARCHAR]) - [1 Work]
HibernateLog --> 10:36:29 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([city__4_0_1_] : [VARCHAR]) - [WorkCity1]
HibernateLog --> 10:36:29 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_3_] : [BIGINT]) - [1]
HibernateLog --> 10:36:29 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_3_] : [BIGINT]) - [11]

/ we zien	,
result	Address  (id=3212)	
	addressLine1	null	
	city	null	
	employees	HashSet<E>  (id=3213)	
[]
	id	1	
	zipcode	null	

/ 2de	,

HibernateLog --> 10:37:55 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_0_] : [BIGINT]) - [12]
HibernateLog --> 10:37:55 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id__1_0_1_] : [BIGINT]) - [1]
HibernateLog --> 10:37:55 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([name_2_1_0_] : [VARCHAR]) - [Foo12]
HibernateLog --> 10:37:55 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([salary_3_1_0_] : [DOUBLE]) - [12.0]
HibernateLog --> 10:37:55 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_1_0_] : [BIGINT]) - [1]
HibernateLog --> 10:37:55 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([living_5_1_0_] : [BIGINT]) - [112]
HibernateLog --> 10:37:55 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([address_4_0_3_] : [BIGINT]) - [1]
HibernateLog --> 10:37:55 TRACE org.hibernate.type.descriptor.sql.BasicExtractor - extracted value ([id_1_1_3_] : [BIGINT]) - [12]

/ we zien	,
result	Address  (id=3212)	
	addressLine1	null	
	city	null	
	employees	HashSet<E>  (id=3213)	
[]
	id	1	
	zipcode	null	

/ 3de, ..., 25ste	,

/ 13	.

/ Lees boek(674)

/ Maar als we	,

			org.hibernate.Criteria criteria=session.createCriteria(Address.class);
			criteria.add(Restrictions.like("zipcode", "%Work"));
			criteria.setResultTransformer(org.hibernate.Criteria.DISTINCT_ROOT_ENTITY);
			List<Address>addresses=criteria.list();

/ dan zien we precies dezelfde result set (25 entries)	, maar H maakt nu maar 5 addresses	, ipv 25	, elk met de set van 5 Employee's	, 
/ TODO 

/ Als we 
	lazy="false"
	fetch="select"
/ dan zien we 2 queries, eerst de 5 Address's	, en worden er 5 addresses create	, en dan een query die 25 Employee's geeft	, die worden in de sets van deze 5 Address's set	, 

/ we kunnen ook in HQL	,

			Query query=session.createQuery("select distinct a from Address a left join fetch a.employees where a.zipcode like '%Work'" );
			List<Address>addresses=query.list();
			ListIterator<Address>listIterator=addresses.listIterator();
			while(listIterator.hasNext()){
				Address address=(Address)listIterator.next();
...

/ 13	.

/ Lees boek(671)

/ we kunnen joins maken met criteria, door ze achter elkaar te schakelen, 
/ ipv createCriteria kunnen we ook .createAlias	, 

/ TMP
			org.hibernate.Criteria criteria=session.createCriteria(Address.class);
			criteria.add(Restrictions.like("zipcode", "%Work"));
			criteria.createAlias("employees", "es");
			criteria.setResultTransformer(org.hibernate.Criteria.DISTINCT_ROOT_ENTITY);
			List<Address>addresses=criteria.list();
			ListIterator<Address>listIterator=addresses.listIterator();
			while(listIterator.hasNext()){
				Address address=(Address)listIterator.next();

/we zien	,

select this_.id__ as id__1_0_1_, this_.address_line1__ as address_2_0_1_, this_.zipcode__ as zipcode_3_0_1_, this_.city__ as city__4_0_1_, 
	es1_.id_ as id_1_1_0_, es1_.name_ as name_2_1_0_, es1_.salary_ as salary_3_1_0_, es1_.address_ as address_4_1_0_, es1_.living_ as living_5_1_0_ 
from address_coll this_ 
inner join employee_coll es1_ on this_.id__=es1_.address_ 
where this_.zipcode__ like ?
HibernateLog --> 08:16:47 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [%Work]

 
/ 7	.

/ DIFFERENCE JOIN & JOIN FETCH IN HQL



/ 13	.

			Query query=session.createQuery("from Address a left join  a.employees  where a.zipcode like '%Work'" );
/=
			Query query=session.createQuery("select a,es from Address a left join  a.employees es  where a.zipcode like '%Work'" );

			List<Address>addresses=query.list();

select address0_.id__ as id__1_0_0_, employees1_.id_ as id_1_1_1_, address0_.address_line1__ as address_2_0_0_, address0_.zipcode__ as zipcode_3_0_0_, address0_.city__ as city__4_0_0_, 
	employees1_.name_ as name_2_1_1_, employees1_.salary_ as salary_3_1_1_, employees1_.address_ as address_4_1_1_, employees1_.living_ as living_5_1_1_ 
from address_coll address0_ 
left outer join employee_coll employees1_ on address0_.id__=employees1_.address_ 
where address0_.zipcode__ like '%Work'

addresses	ArrayList<E>  (id=42)	
	elementData	Object[25]  (id=59)	
		[0]	Object[2]  (id=61)	
			[0]	Address  (id=66)	
			[1]	Employee  (id=67)	
		[1]	Object[2]  (id=62)	
			[0]	Address  (id=66)	
			[1]	Employee  (id=70)	

/ Er zijn 25 van deze entries	, 
/ Address#1 bijv 5 keer , en bij elk, 	Employee#j (j=1,...,5)	, 
/ dus Address#1 zien we 5 keer	, en iedere Emplooyee is een andere	,
/ er zijn 5 Address insts	, 25 Employee insts	,
/ Maar de set in ieder van de 5 Address's is LEEG	, en bij een "left join fetch" is de set NIET leeg	,
////////////////////////////////////////////////////////

/ 13	.

			Query query=session.createQuery(" select a from Address a left join  a.employees  where a.zipcode like '%Work'" );
			List<Address>addresses=query.list();

select address0_.id__ as id__1_0_, address0_.address_line1__ as address_2_0_, address0_.zipcode__ as zipcode_3_0_, address0_.city__ as city__4_0_ 
from address_coll address0_ 
left outer join employee_coll employees1_ on address0_.id__=employees1_.address_ 
where address0_.zipcode__ like '%Work'

/we zien	,
addresses	ArrayList<E>  (id=113)	
	elementData	Object[25]  (id=114)	
		[0]	Address  (id=65)	
...
/ we zien 25 entries	, 5 verschillende Address insts	, de PersistenSet's zijn LEEG	, 
/ Dat is wel logisch, 	want we select a	, en niet a,es	, als es alias voor a.employees	,
//////////////////////////////////////////////////////////////////
/ als we click op een PersistentSet	, dan 	,
select employees0_.address_ as address_4_0_0_, employees0_.id_ as id_1_1_0_, employees0_.id_ as id_1_1_1_, employees0_.name_ as name_2_1_1_, employees0_.salary_ as salary_3_1_1_, employees0_.address_ as address_4_1_1_, employees0_.living_ as living_5_1_1_ 
from employee_coll employees0_ 
where employees0_.address_=?

/13	.

			Query query=session.createQuery(" select distinct a from Address a left join  a.employees  where a.zipcode like '%Work'" );
			List<Address>addresses=query.list();

select distinct address0_.id__ as id__1_0_, address0_.address_line1__ as address_2_0_, address0_.zipcode__ as zipcode_3_0_, address0_.city__ as city__4_0_ 
from address_coll address0_ 
left outer join employee_coll employees1_ on address0_.id__=employees1_.address_ 
where address0_.zipcode__ like '%Work'

/ we zien	,
addresses	ArrayList<E>  (id=243)	
	elementData	Object[7]  (id=244)	
		[0]	Address  (id=131)	
		[1]	Address  (id=152)	
...
/ we zien 5 entries, 5 verschillende Address insts	, met lege PersistenSet, want we query alleen naar a	, niet naar a,es waar es alias voor a.employees	,


/ 13	.
			Query query=session.createQuery(" from Address a left join fetch a.employees  where a.zipcode like '%Work'" );
/ =
			Query query=session.createQuery(" select a from Address a left join fetch  a.employees  where a.zipcode like '%Work'" );
			List<Address>addresses=query.list();

select address0_.id__ as id__1_0_0_, 
	employees1_.id_ as id_1_1_1_, 
	address0_.address_line1__ as address_2_0_0_, address0_.zipcode__ as zipcode_3_0_0_, address0_.city__ as city__4_0_0_, 
	employees1_.name_ as name_2_1_1_, employees1_.salary_ as salary_3_1_1_, employees1_.address_ as address_4_1_1_, employees1_.living_ as living_5_1_1_, employees1_.address_ as address_4_0_0__, employees1_.id_ as id_1_1_0__ 
from address_coll address0_ 
left outer join employee_coll employees1_ on address0_.id__=employees1_.address_ 
where address0_.zipcode__ like '%Work'

addresses	ArrayList<E>  (id=146)	
	elementData	Object[25]  (id=147)	
		[0]	Address  (id=66)	
		[1]	Address  (id=66)	
		[2]	Address  (id=66)	
		[3]	Address  (id=66)	
		[4]	Address  (id=66)	
		[5]	Address  (id=142)	
		[6]	Address  (id=142)	
		[7]	Address  (id=142)	
....

/ we zien 25 entries	5 verschillende Address insts	, ze hebben alle 5 een INITIALIZED PersistentSet	, omdat we "left join fetch" doen	,

/ als we in debugger click op een PersistentSet	, zien we	,

select employees0_.address_ as address_4_0_0_, employees0_.id_ as id_1_1_0_, employees0_.id_ as id_1_1_1_, employees0_.name_ as name_2_1_1_, employees0_.salary_ as salary_3_1_1_, employees0_.address_ as address_4_1_1_, employees0_.living_ as living_5_1_1_ 
from employee_coll employees0_ 
where employees0_.address_=?
HibernateLog --> 12:27:29 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [BIGINT] - [5]

/ Dus in 1 van de 5 Address's is de set init	,  

/ 13	.

			Query query=session.createQuery("  select distinct a from Address a left join fetch  a.employees  where a.zipcode like '%Work'" );
			List<Address>addresses=query.list();

select distinct address0_.id__ as id__1_0_0_, 
	employees1_.id_ as id_1_1_1_, 
	address0_.address_line1__ as address_2_0_0_, address0_.zipcode__ as zipcode_3_0_0_, address0_.city__ as city__4_0_0_, 
	employees1_.name_ as name_2_1_1_, employees1_.salary_ as salary_3_1_1_, employees1_.address_ as address_4_1_1_, employees1_.living_ as living_5_1_1_, employees1_.address_ as address_4_0_0__, employees1_.id_ as id_1_1_0__ 
from address_coll address0_ 
left outer join employee_coll employees1_ on address0_.id__=employees1_.address_ 
where address0_.zipcode__ like '%Work'

/ we zien 5 entries	, 5 verschillende Address inst	, elk met INITIALIZED set	,

/ 13	.
			Query query=session.createQuery(" from Address a left join fetch a.employees  where a.zipcode like '%Work'" );
/=
			Query query=session.createQuery("select a  from Address a left join fetch a.employees  where a.zipcode like '%Work'" );
/=
			Query query=session.createQuery("select a,es  from Address a left join fetch a.employees es where a.zipcode like '%Work'" );
/ TODO

/ 13	. 

/ criteria, fetch join	,

/ SAMENVATTING CRITERIA

file:///home/eric/Devel/Java/Ehcache/hibernate_xml_N_1_bidir_fetch_coll_ehcache 

/ 7	. 

/ De global 
<set fetch="join"></set>
/ werkt WEL met criteria	,
/ we kunnen ook
	.setFetchMode(...,FetchMode.JOIN)

/ 7	. 

/ Verschil	,

/ A
			List objects=session.createCriteria(Address.class)
				.add(Restrictions.like("zipcode", "%Work"))
				.setResultTransformer(org.hibernate.Criteria.ALIAS_TO_ENTITY_MAP)
				.list();		
/ B
			List objects=session.createCriteria(Address.class)
				.add(Restrictions.like("zipcode", "%Work"))
				.createAlias("employees", "employees")
				.setResultTransformer(org.hibernate.Criteria.ALIAS_TO_ENTITY_MAP)
				.list();		
/ C
			List objects=session.createCriteria(Address.class)
				.add(Restrictions.like("zipcode", "%Work"))
				.createCriteria("employees")
				.setResultTransformer(org.hibernate.Criteria.ALIAS_TO_ENTITY_MAP)
				.list();		

/ A
/ WH of,	
				.setResultTransformer(org.hibernate.Criteria.ROOT_ENTITY)


/ A
select this_.id__ as id__1_0_0_, this_.address_line1__ as address_2_0_0_, this_.zipcode__ as zipcode_3_0_0_, this_.city__ as city__4_0_0_ 
from address_coll this_ 
where this_.zipcode__ like ?

/ 5 Adddress	, elk Address heeft lege set van Employees	,

/ B
select this_.id__ as id__1_0_1_, this_.address_line1__ as address_2_0_1_, this_.zipcode__ as zipcode_3_0_1_, this_.city__ as city__4_0_1_, 
	employees1_.id_ as id_1_1_0_, employees1_.name_ as name_2_1_0_, employees1_.salary_ as salary_3_1_0_, employees1_.address_ as address_4_1_0_, employees1_.living_ as living_5_1_0_ 
from address_coll this_ 
inner join employee_coll employees1_ on this_.id__=employees1_.address_ 
where this_.zipcode__ like ?

/ 15 paren van Address, Employee, in Address is employees set leeg	,

/ C
select this_.id__ as id__1_0_1_, this_.address_line1__ as address_2_0_1_, this_.zipcode__ as zipcode_3_0_1_, this_.city__ as city__4_0_1_, 
	employee1_.id_ as id_1_1_0_, employee1_.name_ as name_2_1_0_, employee1_.salary_ as salary_3_1_0_, employee1_.address_ as address_4_1_0_, employee1_.living_ as living_5_1_0_ 
from address_coll this_ 
inner join employee_coll employee1_ on this_.id__=employee1_.address_ 
where this_.zipcode__ like ?

/ 15 Address	, elk met lege employees set	,

/ MORGEN

/ 7	. 

/ verschil	,
/ A
			List objects=session.createCriteria(Address.class)
				.add(Restrictions.like("zipcode", "%Work"))
				.setFetchMode("employees", FetchMode.JOIN)
				.setResultTransformer(org.hibernate.Criteria.ALIAS_TO_ENTITY_MAP)
				.list();		
/ B
			List objects=session.createCriteria(Address.class)
				.add(Restrictions.like("zipcode", "%Work"))
				.createAlias("employees", "employees")
				.setFetchMode("employees", FetchMode.JOIN)
				.setResultTransformer(org.hibernate.Criteria.ALIAS_TO_ENTITY_MAP)
				.list();		
/ C
			List objects=session.createCriteria(Address.class)
				.add(Restrictions.like("zipcode", "%Work"))
				.createCriteria("employees")
				.setFetchMode("employees", FetchMode.JOIN)
				.setResultTransformer(org.hibernate.Criteria.ALIAS_TO_ENTITY_MAP)
				.list();		


/ De createAlias geeft een Employee result naast de Address result in de hashmap	,
/ Het result met .createAlias  

/ A
select this_.id__ as id__1_0_1_, this_.address_line1__ as address_2_0_1_, this_.zipcode__ as zipcode_3_0_1_, this_.city__ as city__4_0_1_, 
	employees2_.address_ as address_4_0_3_, employees2_.id_ as id_1_1_3_, employees2_.id_ as id_1_1_0_, employees2_.name_ as name_2_1_0_, employees2_.salary_ as salary_3_1_0_, employees2_.address_ as address_4_1_0_, employees2_.living_ as living_5_1_0_ 
from address_coll this_ 
left outer join employee_coll employees2_ on this_.id__=employees2_.address_ 
where this_.zipcode__ like ?

/ B
select this_.id__ as id__1_0_1_, this_.address_line1__ as address_2_0_1_, this_.zipcode__ as zipcode_3_0_1_, this_.city__ as city__4_0_1_, 
	employees1_.id_ as id_1_1_0_, employees1_.name_ as name_2_1_0_, employees1_.salary_ as salary_3_1_0_, employees1_.address_ as address_4_1_0_, employees1_.living_ as living_5_1_0_ 
from address_coll this_ 
inner join employee_coll employees1_ on this_.id__=employees1_.address_ 
where this_.zipcode__ like ?

/ C
select this_.id__ as id__1_0_1_, this_.address_line1__ as address_2_0_1_, this_.zipcode__ as zipcode_3_0_1_, this_.city__ as city__4_0_1_, 
	employee1_.id_ as id_1_1_0_, employee1_.name_ as name_2_1_0_, employee1_.salary_ as salary_3_1_0_, employee1_.address_ as address_4_1_0_, employee1_.living_ as living_5_1_0_ 
from address_coll this_ 
inner join employee_coll employee1_ on this_.id__=employee1_.address_ 
where this_.zipcode__ like ?


/ Einde SAMENVATTING CRITERIA



/ we kunnen	,

/ Address.hbm.xml
	<set
 		name="employees"
 		inverse="true"
  		lazy="true"
		fetch="join"
 	>

/ CollFetch.class	,
			List objects=session.createCriteria(Address.class)
				.add(Restrictions.like("zipcode", "%Work"))
				.setResultTransformer(org.hibernate.Criteria.ROOT_ENTITY)
				.list();		
/ of	,

/ Address.hbm.xml
	<set
 		name="employees"
 		inverse="true"
  		lazy="true"
		fetch="select"
 	>

/ CollFetch.class	,
			List objects=session.createCriteria(Address.class)
				.add(Restrictions.like("zipcode", "%Work"))
				.setFetchMode("employees", FetchMode.JOIN)
				.setResultTransformer(org.hibernate.Criteria.ROOT_ENTITY)
				.list();		

/ In beide gevallen zien we de set INITIALIZED,

/ 13	. 

/ we houden	,

/ Address.hbm.xml
	<set
 		name="employees"
 		inverse="true"
  		lazy="true"
		fetch="select"
 	>

			List objects=session.createCriteria(Address.class)
				.add(Restrictions.like("zipcode", "%Work"))
				.createCriteria("employees","employees")
				.list();		
/ set is NIET initialized	,

			List objects=session.createCriteria(Address.class)
				.add(Restrictions.like("zipcode", "%Work"))
				.setFetchMode("employees", FetchMode.JOIN)
				.setResultTransformer(org.hibernate.Criteria.ROOT_ENTITY)
				.list();		
/ set is WEL initialized	,

			List objects=session.createCriteria(Address.class)
				.add(Restrictions.like("zipcode", "%Work"))
				.createAlias("employees", "employees")
				.setResultTransformer(org.hibernate.Criteria.ROOT_ENTITY)
				.list();		
/ set is WEL initialized	,

/ 13	. 

/ Address.hbm.xml
	<set
 		name="employees"
 		inverse="true"
  		lazy="true"
		fetch="select"
 	>

			List objects=session.createCriteria(Address.class)
				.add(Restrictions.like("zipcode", "%Work"))
				.createAlias("employees", "employees")
				.setResultTransformer(org.hibernate.Criteria.ALIAS_TO_ENTITY_MAP)
				.list();		
			for(Object obj:objects){
				Map map=(Map)obj;
				Address address=(Address)map.get(org.hibernate.Criteria.ROOT_ALIAS);
				Employee employee=(Employee)map.get("employees");
				boolean b=false;
			}

/ Nu krijgen we niet Address terug, toen we .setResultTransformer(org.hibernate.Criteria.ROOT_ENITTY) deden	, 
/ Maar	,
/ We zien dat de set in de Address initialized is	, klopt, dat is hij ook bij Criteria.ROOT_ENTITY	,

objects	ArrayList<E>  (id=34)	
	elementData	Object[33]  (id=54)	
		[0]	HashMap<K,V>  (id=56)	
			table	HashMap$Entry<K,V>[4]  (id=61)	
				[1]	HashMap$Entry<K,V>  (id=64)	
					value	Address  (id=71)	
						addressLine1	"WorkStreet 1" (id=76)	
						city	"WorkCity1" (id=77)	
						employees	PersistentSet  (id=78)	
							set	HashSet<E>  (id=88)	
				[3]	HashMap$Entry<K,V>  (id=66)	
					value	Employee  (id=74)	
						address	Address  (id=71)	
						id	11	
						living	Address_$$_jvsta51_0  (id=216)	
						name	"Foo11" (id=233)	
						salary	11.0	

/ 13	. 

/ Als we 	,
			List objects=session.createCriteria(Address.class)
				.add(Restrictions.like("zipcode", "%Work"))
				.createCriteria("employees")
				.setResultTransformer(org.hibernate.Criteria.ROOT_ENTITY)
				.list();		

/ dan	,
objects	ArrayList<E>  (id=460)	
	elementData	Object[15]  (id=467)	
		[0]	Address  (id=473)	
		[1]	Address  (id=473)	
...
/ De Address's hebben lege set	,

/ 13	. 

/ Deze zijn hetzelfde	,

			List objects=session.createCriteria(Address.class)
				.add(Restrictions.like("zipcode", "%Work"))
				.createCriteria("employees")
				.setResultTransformer(org.hibernate.Criteria.ROOT_ENTITY)
				.list();		
			boolean b=false;
			}
			{
			List objects=session.createCriteria(Address.class)
				.add(Restrictions.like("zipcode", "%Work"))
				.createCriteria("employees", "employees")
				.setResultTransformer(org.hibernate.Criteria.ROOT_ENTITY)
				.list();		
			boolean b=false;
			}

/ MORGEN	,

my.test.own.hibernate_xml_N_1_bidir_fetch_coll_ehcache.CollFetchApp at localhost:57664	

/ 1	, 
			List objects=session.createCriteria(Address.class)
				.add(Restrictions.like("zipcode", "%Work"))
				.createCriteria("employees")
				.setResultTransformer(org.hibernate.Criteria.ALIAS_TO_ENTITY_MAP)
				.list();		
			boolean b=false;
			}
/ 2
			{
			List objects=session.createCriteria(Address.class)
				.add(Restrictions.like("zipcode", "%Work"))
				.setResultTransformer(org.hibernate.Criteria.ALIAS_TO_ENTITY_MAP)
				.list();		
			boolean b=false;
			}

/ 1
Hibernate: select this_.id__ as id__1_0_1_, this_.address_line1__ as address_2_0_1_, this_.zipcode__ as zipcode_3_0_1_, this_.city__ as city__4_0_1_, employee1_.id_ as id_1_1_0_, employee1_.name_ as name_2_1_0_, employee1_.salary_ as salary_3_1_0_, employee1_.address_ as address_4_1_0_, employee1_.living_ as living_5_1_0_ from address_coll this_ inner join employee_coll employee1_ on this_.id__=employee1_.address_ where this_.zipcode__ like ?

/ 15 Address's,

/ 2	,
Hibernate: select this_.id__ as id__1_0_0_, this_.address_line1__ as address_2_0_0_, this_.zipcode__ as zipcode_3_0_0_, this_.city__ as city__4_0_0_ from address_coll this_ where this_.zipcode__ like ?

/ 5 Address's,


/ MORGEN	,

/ 13.

/ Verschil 
				.createCriteria("employees")
/ en 
				.createCriteria("employees","employees")

/ Met .createCriteria("employees") zien we 25 HashMap's	, elk met 1 entries: een Address , in de Address is employees NIET initialized	, 
/ Met .createCriteria("employees","employees") zien we 25 HashMap's	, elk met 2 entries: een Address en een Employee	, in de Address is employees NIET initialized	, 

/ Address's mapping	,
	<set
 		name="employees"
 		inverse="true"
  		lazy="true"
		fetch="select"
 	>

			List objects=session.createCriteria(Address.class)
				.add(Restrictions.like("zipcode", "%Work"))
				.createCriteria("employees","employees")
				.setResultTransformer(org.hibernate.Criteria.ALIAS_TO_ENTITY_MAP)
				.list();		
/ of	,
			List objects=session.createCriteria(Address.class)
				.add(Restrictions.like("zipcode", "%Work"))
				.createCriteria("employees","employees")
				.setResultTransformer(org.hibernate.Criteria.ALIAS_TO_ENTITY_MAP)
				.list();		

/ Met	,.createCriteria("employees")
/ we zien 25 entries, 5 Address's , in elk Address is de set NIET initialized	,

objects	ArrayList<E>  (id=37)	
	elementData	Object[33]  (id=54)	
		[0]	HashMap<K,V>  (id=56)	
			table	HashMap$Entry<K,V>[1]  (id=84)	
				[0]	HashMap$Entry<K,V>  (id=87)	
					value	Address  (id=93)	
						addressLine1	"WorkStreet 1" (id=95)	
						city	"WorkCity1" (id=96)	
						employees	PersistentSet  (id=97)	
							set	null	
							storedSnapshot	null	
						id	1	
						zipcode	"1 Work" (id=102)	
...
		[24]	HashMap<K,V>  (id=83)	
	size	25	


/ Met	,.createCriteria("employees","employees")	,
/ we zien 25 entries, 5 Address's en voor elk de 5 Employee's , in de Address is de set NIET initialized	,

objects	ArrayList<E>  (id=41)	
	elementData	Object[33]  (id=54)	
		[0]	HashMap<K,V>  (id=56)	
			table	HashMap$Entry<K,V>[4]  (id=87)	
				[1]	HashMap$Entry<K,V>  (id=130)	
					value	Address  (id=71)	
						addressLine1	"WorkStreet 1" (id=73)	
						city	"WorkCity1" (id=74)	
						employees	PersistentSet  (id=75)	
							set 	null	
						id	1	
						zipcode	"1 Work" (id=80)	
				[3]	HashMap$Entry<K,V>  (id=131)	
					value	Employee  (id=158)	
						address	Address  (id=71)	
						id	12	
						living	Address_$$_jvst9c7_0  (id=162)	
						name	"Foo12" (id=168)	
						salary	12.0	
		[2]	HashMap<K,V>  (id=85)	
...
		[24]	HashMap<K,V>  (id=128)	
	size	25	





/ 13	.

/ Maar als we .createCriteria(Employee.class) 	, dan is de set altijd NOT filled	,
/ TODO

/ 13	. 

/ criteria geeft default alleen de root quantity 	,

			List objects=session.createCriteria(Address.class)
				.add(Restrictions.like("zipcode", "%Work"))
				.setFetchMode("employees", FetchMode.JOIN)
				.setResultTransformer(org.hibernate.Criteria.ROOT_ENTITY)
				.list();		

/ hij geeft alleen Address's	,







/ 13	.

			List<Address>addresses=session.createCriteria(Address.class)
				.add(Restrictions.like("zipcode", "%Work"))
				.createCriteria("employees")
				.setResultTransformer(org.hibernate.Criteria.ROOT_ENTITY)
				.list();

select this_.id__ as id__1_0_1_, this_.address_line1__ as address_2_0_1_, this_.zipcode__ as zipcode_3_0_1_, this_.city__ as city__4_0_1_, 
	employee1_.id_ as id_1_1_0_, employee1_.name_ as name_2_1_0_, employee1_.salary_ as salary_3_1_0_, employee1_.address_ as address_4_1_0_, employee1_.living_ as living_5_1_0_ 
from address_coll this_ 
inner join employee_coll employee1_ on this_.id__=employee1_.address_ 
where this_.zipcode__ like ?
HibernateLog --> 07:59:30 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [%Work]

addresses	ArrayList<E>  (id=39)	
	elementData	Object[33]  (id=54)	
		[0]	Address  (id=56)	
...

/ we zien 25 entries, 5 verschillende Address	,  en de Address's set is LEEG	,

/ dit is als	,
			Query query=session.createQuery(" select a from Address a left join  a.employees  where a.zipcode like '%Work'" );

/ 13	.

			List<Address>addresses=session.createCriteria(Address.class)
				.add(Restrictions.like("zipcode", "%Work"))
				.setFetchMode("employees", FetchMode.JOIN)
				.setResultTransformer(org.hibernate.Criteria.ROOT_ENTITY)
				.list();		

/ we hebben VERVANGEN
				.createCriteria("employees")
/ DOOR
				.setFetchMode("employees", FetchMode.JOIN)

/ we moeten nu NIET OOK
				.createCriteria("employees")
/ want dan doet setFetchMode NIETS	,

select this_.id__ as id__1_0_1_, this_.address_line1__ as address_2_0_1_, this_.zipcode__ as zipcode_3_0_1_, this_.city__ as city__4_0_1_, 
	employees2_.address_ as address_4_0_3_, employees2_.id_ as id_1_1_3_, employees2_.id_ as id_1_1_0_, employees2_.name_ as name_2_1_0_, employees2_.salary_ as salary_3_1_0_, employees2_.address_ as address_4_1_0_, employees2_.living_ as living_5_1_0_ 
from address_coll this_ 
left outer join employee_coll employees2_ on this_.id__=employees2_.address_ 
where this_.zipcode__ like ?
HibernateLog --> 08:49:08 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [%Work]

addresses	ArrayList<E>  (id=39)	
	elementData	Object[33]  (id=54)	
		[0]	Address  (id=56)	
...

/ we zien 25 entries, 5 verschillende Address	,  en de Address's set is INITIALIZED,

/ dit is als	,
			Query query=session.createQuery(" select a from Address a left join fetch  a.employees  where a.zipcode like '%Work'" );

/ 13	. 

			org.hibernate.Criteria criteria=session.createCriteria(Address.class);
			Criterion criterion=Restrictions.like("zipcode", "%Work");
			Projection projection=Projections.id();
			criteria.add(criterion).setProjection(projection);
			List<Object>objects=criteria.list();

select this_.id__ as y0_ 
from address_coll this_ 
where this_.zipcode__ like ?
HibernateLog --> 10:56:55 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [%Work]

objects	ArrayList<E>  (id=57)	
	elementData	Object[10]  (id=66)	
		[0]	Long  (id=68)	
			value	1	
		[1]	Long  (id=69)	
			value	2	
		[2]	Long  (id=73)	
		[3]	Long  (id=74)	
		[4]	Long  (id=93)	

/ 13	.

			List<Object>objects=session.createCriteria(Address.class)
				.add(Restrictions.like("zipcode", "%Work"))
				.createCriteria("employees")
				.setProjection(Projections.rowCount())
				.list();		


select count(*) as y0_ 
from address_coll this_ 
inner join employee_coll employees1_ on this_.id__=employees1_.address_ 
where this_.zipcode__ like ?
HibernateLog --> 11:02:14 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [%Work]

objects	ArrayList<E>  (id=37)	
	elementData	Object[10]  (id=54)	
		[0]	Long  (id=56)	
			value	25	



/ 13	.

			List<Object>objects=session.createCriteria(Address.class)
				.add(Restrictions.like("zipcode", "%Work"))
				.createAlias("employees","employees")
				.setProjection(Projections.property("employees.name"))
				.list();		

Hibernate: select employees1_.name_ as y0_ 
from address_coll this_ 
inner join employee_coll employees1_ on this_.id__=employees1_.address_ 
where this_.zipcode__ like ?
HibernateLog --> 10:56:59 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [%Work]

objects	ArrayList<E>  (id=39)	
	elementData	Object[33]  (id=54)	
		[0]	"Foo11" (id=56)	
		[1]	"Foo12" (id=57)	
...
/ 25 entries , alle names van de employees	, 
/ OK

/  13	,
















/ 13	.
			org.hibernate.Criteria criteria=session.createCriteria(Address.class);
			criteria.add(Restrictions.like("zipcode", "%Work"));
			criteria.setFetchMode("employees", FetchMode.JOIN);
			criteria.setResultTransformer(org.hibernate.Criteria.DISTINCT_ROOT_ENTITY);
			List<Address>addresses=criteria.list();

select this_.id__ as id__1_0_1_, this_.address_line1__ as address_2_0_1_, this_.zipcode__ as zipcode_3_0_1_, this_.city__ as city__4_0_1_, 
	employees2_.address_ as address_4_0_3_, employees2_.id_ as id_1_1_3_, employees2_.id_ as id_1_1_0_, employees2_.name_ as name_2_1_0_, employees2_.salary_ as salary_3_1_0_, employees2_.address_ as address_4_1_0_, employees2_.living_ as living_5_1_0_ 
from address_coll this_ 
left outer join employee_coll employees2_ on this_.id__=employees2_.address_ 
where this_.zipcode__ like ?
HibernateLog --> 09:55:19 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [%Work]

/ TODO

/ Einde DIFFERENCE JOIN & JOIN FETCH IN HQL

/ 7	.

/ BOOK (647)

/ als we hibernate.cfg.xml veranderen, moeten we opnieuw mvn clean install	,

/ 13	.

				Query query=session.createQuery("from Address a join a.employees where a.zipcode like '%Work'");

select address0_.id__ as id__1_0_0_, employees1_.id_ as id_1_1_1_, address0_.address_line1__ as address_2_0_0_, address0_.zipcode__ as zipcode_3_0_0_, address0_.city__ as city__4_0_0_, employees1_.name_ as name_2_1_1_, employees1_.salary_ as salary_3_1_1_, employees1_.address_ as address_4_1_1_, employees1_.living_ as living_5_1_1_ 
from address_coll address0_ 
inner join employee_coll employees1_ on address0_.id__=employees1_.address_ 
where address0_.zipcode__ like '%Work'

1 Work:Foo11
1 Work:Foo13
1 Work:Foo15
2 Work:Foo21
2 Work:Foo23
2 Work:Foo25
3 Work:Foo31
3 Work:Foo33
3 Work:Foo35
4 Work:Foo41
4 Work:Foo43
4 Work:Foo45
5 Work:Foo51
5 Work:Foo53
5 Work:Foo55

/ allemaal	,


/ 13	.

				Query query=session.createQuery("from Address a left join a.employees where a.zipcode like '%Work'");

select address0_.id__ as id__1_0_0_, employees1_.id_ as id_1_1_1_, address0_.address_line1__ as address_2_0_0_, address0_.zipcode__ as zipcode_3_0_0_, address0_.city__ as city__4_0_0_, employees1_.name_ as name_2_1_1_, employees1_.salary_ as salary_3_1_1_, employees1_.address_ as address_4_1_1_, employees1_.living_ as living_5_1_1_ 
from address_coll address0_ 
left outer join employee_coll employees1_ on address0_.id__=employees1_.address_ 
where address0_.zipcode__ like '%Work'

1 Work:Foo11
1 Work:Foo13
1 Work:Foo15
2 Work:Foo21
2 Work:Foo23
2 Work:Foo25
3 Work:Foo31
3 Work:Foo33
3 Work:Foo35
4 Work:Foo41
4 Work:Foo43
4 Work:Foo45
5 Work:Foo51
5 Work:Foo53
5 Work:Foo55

/ 13	.
			Query query=session.createQuery("from Address a left join a.employees e where a.zipcode like '%Work' and e.salary>30");

				List<Object>objects=query.list();

select address0_.id__ as id__1_0_0_, 
	employees1_.id_ as id_1_1_1_, 
	address0_.address_line1__ as address_2_0_0_, address0_.zipcode__ as zipcode_3_0_0_, address0_.city__ as city__4_0_0_, 
	employees1_.name_ as name_2_1_1_, employees1_.salary_ as salary_3_1_1_, employees1_.address_ as address_4_1_1_, employees1_.living_ as living_5_1_1_ 
from address_coll address0_ 
left outer join employee_coll employees1_ on address0_.id__=employees1_.address_ 
where (address0_.zipcode__ like '%Work') and employees1_.salary_>30


3 Work:Foo31
3 Work:Foo33
3 Work:Foo35
4 Work:Foo41
4 Work:Foo43
4 Work:Foo45
5 Work:Foo51
5 Work:Foo53
5 Work:Foo55

/ 13	.

/ left join e where e.salary>30 , dus als je een restrictie op de rhs legt, ondermijnt de outer join	, want null voldoet niet aan deze restrictie	, dus outer join = inner join	, 
/ daarom doen we with ipv where	, 
/ where doen we hieronder	,

				Query query=session.createQuery("from Address a left join a.employees e with e.salary>30 where a.zipcode like '%Work'");

select address0_.id__ as id__1_0_0_, 
	employees1_.id_ as id_1_1_1_, 
	address0_.address_line1__ as address_2_0_0_, address0_.zipcode__ as zipcode_3_0_0_, address0_.city__ as city__4_0_0_, 
	employees1_.name_ as name_2_1_1_, employees1_.salary_ as salary_3_1_1_, employees1_.address_ as address_4_1_1_, employees1_.living_ as living_5_1_1_ 
from address_coll address0_ 
left outer join employee_coll employees1_ on address0_.id__=employees1_.address_ and (employees1_.salary_>30) 
where address0_.zipcode__ like '%Work'

3 Work:Foo31
3 Work:Foo33
3 Work:Foo35
4 Work:Foo41
4 Work:Foo43
4 Work:Foo45
5 Work:Foo51
5 Work:Foo53
5 Work:Foo55
2 Work:null
1 Work:null

/ De list is 2 langer	, de laatste 2 entries hebben alleen een Address	, geen Employee	,

/ 13	.

				Query query=session.createQuery("from Address a left join fetch a.employees e where a.zipcode like '%Work' and e.salary>30");

/ outer join=inner join, omdat where e.salary>30 null uitsluit	,

select address0_.id__ as id__1_0_0_, employees1_.id_ as id_1_1_1_, address0_.address_line1__ as address_2_0_0_, address0_.zipcode__ as zipcode_3_0_0_, address0_.city__ as city__4_0_0_, employees1_.name_ as name_2_1_1_, employees1_.salary_ as salary_3_1_1_, employees1_.address_ as address_4_1_1_, employees1_.living_ as living_5_1_1_, employees1_.address_ as address_4_0_0__, employees1_.id_ as id_1_1_0__ 
from address_coll address0_ 
left outer join employee_coll employees1_ on address0_.id__=employees1_.address_ 
where (address0_.zipcode__ like '%Work') 
and employees1_.salary_>30

3 Work:Foo31
3 Work:Foo35
3 Work:Foo33
3 Work:Foo31
3 Work:Foo35
3 Work:Foo33
3 Work:Foo31
3 Work:Foo35
3 Work:Foo33
4 Work:Foo45
4 Work:Foo41
4 Work:Foo43
4 Work:Foo45
4 Work:Foo41
4 Work:Foo43
4 Work:Foo45
4 Work:Foo41
4 Work:Foo43
5 Work:Foo53
5 Work:Foo51
5 Work:Foo55
5 Work:Foo53
5 Work:Foo51
5 Work:Foo55
5 Work:Foo53
5 Work:Foo51
5 Work:Foo55

/ 13	.

				Query query=session.createQuery("from Address a left join fetch a.employees e with e.salary>30 where a.zipcode like '%Work'");
/ ERR	, met fetch join kun je geen with	,
/ een fetch join wil WH alleen hele collections	,

				Query query=session.createQuery("from Address a join fetch a.employees e where a.zipcode like '%Work' and e.salary>30");

select address0_.id__ as id__1_0_0_, employees1_.id_ as id_1_1_1_, address0_.address_line1__ as address_2_0_0_, address0_.zipcode__ as zipcode_3_0_0_, address0_.city__ as city__4_0_0_, employees1_.name_ as name_2_1_1_, employees1_.salary_ as salary_3_1_1_, employees1_.address_ as address_4_1_1_, employees1_.living_ as living_5_1_1_, employees1_.address_ as address_4_0_0__, employees1_.id_ as id_1_1_0__ 
from address_coll address0_ 
inner join employee_coll employees1_ on address0_.id__=employees1_.address_ 
where (address0_.zipcode__ like '%Work') 
and employees1_.salary_>30

3 Work:Foo35
3 Work:Foo33
3 Work:Foo31
3 Work:Foo35
3 Work:Foo33
3 Work:Foo31
3 Work:Foo35
3 Work:Foo33
3 Work:Foo31
4 Work:Foo43
4 Work:Foo45
4 Work:Foo41
4 Work:Foo43
4 Work:Foo45
4 Work:Foo41
4 Work:Foo43
4 Work:Foo45
4 Work:Foo41
5 Work:Foo53
5 Work:Foo51
5 Work:Foo55
5 Work:Foo53
5 Work:Foo51
5 Work:Foo55
5 Work:Foo53
5 Work:Foo51
5 Work:Foo55

/ 13	.

/ we set een max aantal results	,

				Query query=session.createQuery("from Address a left join fetch a.employees e where a.zipcode like '%Work' and e.salary>30");
				query.setMaxResults(2);
				List<Address>addresses=query.list();
				for(Address address:addresses){
...

/ we zien	,

3 Work:Foo35
3 Work:Foo33
3 Work:Foo31
4 Work:Foo45
4 Work:Foo43
4 Work:Foo41

/ we kunnen ook start bij een result	, deze telt vanaf 0	,

				Query query=session.createQuery("from Address a left join fetch a.employees e where a.zipcode like '%Work' and e.salary>30");
				query.setMaxResults(2);
				query.setFirstResult(2);
				List<Address>addresses=query.list();
				for(Address address:addresses){

/ we zien	,

5 Work:Foo53
5 Work:Foo55
5 Work:Foo51

/ 7	.

<query name="join_with_salary">
	<![CDATA[
	from Address a left join fetch a.employees e where a.zipcode like '%Work' and e.salary>30
	]]>
</query>

/ TODO

 

/ Einde HIBERNATE PERFORMANCE

/ HIBERNATE

/ 7	. 

/ proj hibernate_xml_N_1_bidir_ehcache	, 
/ Main5

/ meerdere Hibernate sessions, caches	, 
/ OK

/ 7	.

			session4=sessionFactory.openSession();
/ *
	        address=(Address)session4.get(Address.class, 12l); // lazy, address.set==null
/ **

/ als we na *  inspect	, dan = {}
ontext4_.getCollectionsByKey()

/ als we na **  inspect	, dan triggers query op employee where address=? en = {Employee@...,Employee@...} 
ontext4_.getCollectionsByKey()


/ 7	.

TransientPropertyValueException	,
Thrown when a property cannot be persisted because it is an association with a transient unsaved entity instance.

TransientObjectException	,
Thrown when the user passes a transient instance to a Session method that expects a persistent instance.

/ see proj merge2	,
/ Main2	,
		// nieuw	,
		session = sessionFactory.openSession();
    	session.beginTransaction();
    	
    	Item item3=new Item("second","Bar");
    	session.merge(item3);
	
    	session.getTransaction().commit();
		session.close();

org.hibernate.TransientObjectException: The given object has a null identifier: org.hibernate.book.hbm.Item
	at org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.getUpdateId(DefaultSaveOrUpdateEventListener.java:270)
	at org.hibernate.event.internal.DefaultUpdateEventListener.getUpdateId(DefaultUpdateEventListener.java:70)
	at org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.entityIsDetached(DefaultSaveOrUpdateEventListener.java:238)
	at org.hibernate.event.internal.DefaultUpdateEventListener.performSaveOrUpdate(DefaultUpdateEventListener.java:55)
	at org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.onSaveOrUpdate(DefaultSaveOrUpdateEventListener.java:90)
	at org.hibernate.internal.SessionImpl.fireUpdate(SessionImpl.java:739)
	at org.hibernate.internal.SessionImpl.update(SessionImpl.java:731)
	at org.hibernate.internal.SessionImpl.update(SessionImpl.java:726)
	at org.hibernate.book.hbm.Main2.testBasicUsage(Main2.java:149)
	at org.hibernate.book.hbm.Main2.<init>(Main2.java:52)
	at org.hibernate.book.hbm.Main2.main(Main2.java:46)

/ als we 
    	Item item3=new Item(2l,"second","Bar");
    	session.merge(item3);

org.hibernate.StaleStateException: Batch update returned unexpected row count from update [0]; actual row count: 0; expected: 1
	at org.hibernate.jdbc.Expectations$BasicExpectation.checkBatched(Expectations.java:81)
	at org.hibernate.jdbc.Expectations$BasicExpectation.verifyOutcome(Expectations.java:73)
	at org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:63)
	at org.hibernate.persister.entity.AbstractEntityPersister.update(AbstractEntityPersister.java:3281)
	at org.hibernate.persister.entity.AbstractEntityPersister.updateOrInsert(AbstractEntityPersister.java:3183)
	at org.hibernate.persister.entity.AbstractEntityPersister.update(AbstractEntityPersister.java:3525)
	at org.hibernate.action.internal.EntityUpdateAction.execute(EntityUpdateAction.java:159)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:463)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:349)
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:350)
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:56)
	at org.hibernate.internal.SessionImpl.flush(SessionImpl.java:1222)
	at org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:425)
	at org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.beforeTransactionCommit(JdbcTransaction.java:101)
	at org.hibernate.engine.transaction.spi.AbstractTransactionImpl.commit(AbstractTransactionImpl.java:177)
	at org.hibernate.book.hbm.Main2.testBasicUsage(Main2.java:152)
	at org.hibernate.book.hbm.Main2.<init>(Main2.java:52)
	at org.hibernate.book.hbm.Main2.main(Main2.java:46)

/ TODO

/ 7	.

       <id 
		name="id">	
		<generator 
			class="increment"/>
	</id>

/ we create proj hibernate_xml_N_1_3_6_10_Final	,

//////////
/ Met hibernate-core.3.6.10.Final moeten we ook javassist	, bijv javassist.3.16.1-GA	,

/ 7	. 

/ proj hibernate_xml_N_1_bidir_ehcache

/ 13	. 

/ Sporter's mapping	,

	<many-to-one 
		name="club"
		column="club_"
		not-null="true"
	/>

/ Main6	,

			session = sessionFactory.openSession();
		  	Sporter sporter=new Sporter("Sporter");
		  	Club club=new Club("Club");

		  	sporter.setClub(club);
		  	session.save(club); // eerst, anders TransientPropertyValueException
		  	session.save(sporter);
		  	session.beginTransaction().commit();
		  	
		  	session2=sessionFactory.openSession();
		  	sporter=(Sporter)session2.get(Sporter.class, 1l);
		  	club=sporter.getClub();
/ club is een NIET init proxy	,
		  	String name=club.getName();
/ club is een WEL init proxy	,


/ 13	. 

/ Sporter's mapping	,

	<many-to-one 
		name="club"
		column="club_"
		not-null="true"
		cascade="all,delete-orphan"
	/>

Caused by: org.hibernate.MappingException: many-to-one attribute [club] does not support orphan delete as it is not unique

/ als we 	,
	<many-to-one 
		name="club"
		column="club_"
		not-null="true"
		cascade="all,delete-orphan"
		unique="true"
	/>
/ Dan OK	,
/ TODO

/ 7	. 

/ proj hibernate_xml_N_1_bidir_ehcache

$ vi Main6.java

/ laxy init exc	,

			session = sessionFactory.openSession();
			PersistenceContext context=((SessionImplementor)session).getPersistenceContext();

		  	Sporter sporter=new Sporter("Sporter");
		  	Club club=new Club("Club");
		  	sporter.setClub(club);

		  	session.save(club); // moet eerst, 
		  	session.save(sporter);// anders hier TransientPropertyValueException
		  	// entityEntryContext={dirty:true,nonEnhancedEntityXref:{2 obj:prop}, reentrantSafeEntries:{}}
		  	session.flush();
		  	// entityEntryContext={dirty:false,nonEnhancedEntityXref:{2 obj:props}, reentrantSafeEntries:{2 obj:props}}
		  	session.beginTransaction().commit();

		  	session3=sessionFactory.openSession();
			PersistenceContext context3=((SessionImplementor)session3).getPersistenceContext();
		  	sporter=(Sporter)session3.get(Sporter.class, 1l);
		  	// entityEntryContext={count:1, dirty:true,head:...,nonEnhanceEntityXref={...}, reentrantSafeEntries=[]}
		  	club=sporter.getClub();
		  	session3.close();
		  	// entityEntryContext={count:0, dirty:true,head:null,nonEnhanceEntityXref={}, reentrantSafeEntries=null}
		  	String name=club.getName(); // LazyInitializationException


$ vi Main6a.java


/ 7	. 

/ proj hibernate_xml_N_1_bidir_ehcache	,
$ vi Main6a5.java

			session = sessionFactory.openSession();
			PersistenceContext context=((SessionImplementor)session).getPersistenceContext();

		  	Sporter sporter=new Sporter("Sporter");
		  	Club club=new Club("Club");
		  	sporter.setClub(club);

		  	session.save(club); // moet eerst, 
		  	session.save(sporter);// anders hier TransientPropertyValueException
		  	// entityEntryContext={dirty:true,nonEnhancedEntityXref:{2 obj:prop}, reentrantSafeEntries:{}}
		  	session.flush();
		  	// entityEntryContext={dirty:false,nonEnhancedEntityXref:{2 obj:props}, reentrantSafeEntries:{2 obj:props}}
		  	session.beginTransaction().commit();
		  	
		  	session2=sessionFactory.openSession();
			PersistenceContext context2=((SessionImplementor)session2).getPersistenceContext();
			
			Club club2=new Club("Club2");
			sporter.setClub(club2);
			session2.update(sporter);
			// org.hibernate.TransientObjectException: object references an unsaved transient instance - save the transient instance before flushing: my.test.own.hibernate_xml_N_1_bidir_ehcache.Club


org.hibernate.TransientObjectException: object references an unsaved transient instance - save the transient instance before flushing: my.test.own.hibernate_xml_N_1_bidir_ehcache.Club
	at org.hibernate.engine.internal.ForeignKeys.getEntityIdentifierIfNotUnsaved(ForeignKeys.java:294)
	at org.hibernate.type.EntityType.getIdentifier(EntityType.java:537)
	at org.hibernate.type.ManyToOneType.nullSafeSet(ManyToOneType.java:165)
	at org.hibernate.persister.entity.AbstractEntityPersister.dehydrate(AbstractEntityPersister.java:2843)
	at org.hibernate.persister.entity.AbstractEntityPersister.update(AbstractEntityPersister.java:3248)
	at org.hibernate.persister.entity.AbstractEntityPersister.updateOrInsert(AbstractEntityPersister.java:3183)
	at org.hibernate.persister.entity.AbstractEntityPersister.update(AbstractEntityPersister.java:3525)
	at org.hibernate.action.internal.EntityUpdateAction.execute(EntityUpdateAction.java:159)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:463)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:349)
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:350)
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:56)
	at org.hibernate.internal.SessionImpl.flush(SessionImpl.java:1222)
	at my.test.own.hibernate_xml_N_1_bidir_ehcache.Main6a5.testBasicUsage(Main6a5.java:142)
	at my.test.own.hibernate_xml_N_1_bidir_ehcache.Main6a5.<init>(Main6a5.java:76)
	at my.test.own.hibernate_xml_N_1_bidir_ehcache.Main6a5.main(Main6a5.java:70)

/ Verschil session2.get session2.update, dan ook TransientObjectException	,  

/ 13	.

/ we zijn debug hierboven	, we zijn in update, en we komen langs,	

	DefaultUpdateEventListener(DefaultSaveOrUpdateEventListener).getUpdateId(Object, EntityPersister, Serializable, SessionImplementor) line: 276	
	DefaultUpdateEventListener.getUpdateId(Object, EntityPersister, Serializable, SessionImplementor) line: 70	
	DefaultUpdateEventListener(DefaultSaveOrUpdateEventListener).entityIsDetached(SaveOrUpdateEvent) line: 238	
	DefaultUpdateEventListener.performSaveOrUpdate(SaveOrUpdateEvent) line: 55	
	DefaultUpdateEventListener(DefaultSaveOrUpdateEventListener).onSaveOrUpdate(SaveOrUpdateEvent) line: 90	
	SessionImpl.fireUpdate(SaveOrUpdateEvent) line: 739	
	SessionImpl.update(String, Object) line: 731	
	SessionImpl.update(Object) line: 726	
	Main6a5.testBasicUsage() line: 140	
	Main6a5.<init>() line: 76	
	Main6a5.main(String[]) line: 70	

	protected Serializable getUpdateId(
			Object entity,
			EntityPersister persister,
			Serializable requestedId,
			SessionImplementor session) {
		// use the id assigned to the instance
		Serializable id = persister.getIdentifier( entity, session );
		if ( id == null ) {
/ NEE
			// assume this is a newly instantiated transient object
			// which should be saved rather than updated
			throw new TransientObjectException(
					"The given object has a null identifier: " +
							persister.getEntityName()
			);
		}
		else {
			return id;
		}

	}

/ we komen nu niet bij NEE	, maar als we daar wel komen, dan ook een throw new TransientObjectException	,

/ 13	. 


/ Einde HIBERNATE

/ DEBUG HIBERNATE TRANSIENTOBJECTEXCEPTION

/ 7	. 

/ in proj hibernate_xml_N_1_bidir_ehcache	,

/ Main6a5.java	,


DefaultSaveEventListener(AbstractSaveEventListener).performSave(Object, Serializable, EntityPersister, boolean, Object, EventSource, boolean) line: 184	
			key = source.generateEntityKey( id, persister );
key	EntityKey  (id=263)	
	identifier	Long  (id=253)	
	persister	SingleTableEntityPersister  (id=181)	
			Object old = source.getPersistenceContext().getEntity( key );
/ TODO OLD

			persister.setIdentifier( entity, id, source );
/ set gen id in entity
/ WAS	, 
entity	Sporter  (id=115)	
	...
	id	0	
/ IS	,
entity	Sporter  (id=115)	
	...
	id	1	

/ 7	. 

/ wanneer .save inserts entry in 1c	?

	SessionImpl.save(Object) line: 702	
/s
DefaultSaveEventListener(DefaultSaveOrUpdateEventListener).onSaveOrUpdate(SaveOrUpdateEvent) line: 90	
			event.setResultId( performSaveOrUpdate( event ) );
/s
DefaultSaveEventListener.performSaveOrUpdate(SaveOrUpdateEvent) line: 49	
			return entityIsTransient(event);
/ (Verschil transient en detached) TODO ERICJ 
/s
DefaultSaveEventListener(DefaultSaveOrUpdateEventListener).entityIsTransient(SaveOrUpdateEvent) line: 194	
		Serializable id = saveWithGeneratedOrRequestedId( event );
/s
DefaultSaveEventListener(AbstractSaveEventListener).performSaveOrReplicate(Object, EntityKey, EntityPersister, boolean, Object, EventSource, boolean) line: 288	
		AbstractEntityInsertAction insert = addInsertAction(
				values, id, entity, persister, useIdentityColumn, source, shouldDelayIdentityInserts
		);
/s
DefaultSaveEventListener(AbstractSaveEventListener).addInsertAction(Object[], Serializable, Object, EntityPersister, boolean, EventSource, boolean) line: 332	
			source.getActionQueue().addAction( insert );
/s
ActionQueue.addResolvedEntityInsertAction(AbstractEntityInsertAction) line: 201	
			insertions.add( insert );
		}
		insert.makeEntityManaged();
/s
EntityInsertAction(AbstractEntityInsertAction).makeEntityManaged() line: 143	
		getSession().getPersistenceContext().addEntity(
				getInstance(),
				( getPersister().isMutable() ? Status.MANAGED : Status.READ_ONLY ),
				getState(),
				getEntityKey(),
				version,
				LockMode.WRITE,
				isExecuted,
				getPersister(),
				isVersionIncrementDisabled,
				false
		);
/s
StatefulPersistenceContext.addEntity(Object, Status, Object[], EntityKey, Object, LockMode, boolean, EntityPersister, boolean, boolean) line: 461	
		addEntity( entityKey, entity );
/s
			entitiesByKey.put( key, entity );
/t
		return addEntry(
				entity,
				status,
				loadedState,
				null,
				entityKey.getIdentifier(),
				version,
				lockMode,
				existsInDatabase,
				persister,
				disableVersionIncrement,
				lazyPropertiesAreUnfetched
		);
/s
StatefulPersistenceContext.addEntry(Object, Status, Object[], Object, Serializable, Object, LockMode, boolean, EntityPersister, boolean, boolean) line: 491	
		final EntityEntry e = new EntityEntry(
				status,
				loadedState,
				rowId,
				id,
				version,
				lockMode,
				existsInDatabase,
				persister,
				disableVersionIncrement,
				lazyPropertiesAreUnfetched,
				this
		);
		entityEntryContext.addEntityEntry( entity, e );

/ hij komt dus niet op een queue
/ TODO ERICJ

/ 13	. 

/ .save de sporter, de loadedState 	,
loadedState	Object[2]  (id=312)	
	[0]	"Sporter" (id=315)	
	[1]	Club  (id=40)	

/ 7	. 

/ FLUSH

/ 13	. 


	public void onFlush(FlushEvent event) throws HibernateException {
				flushEverythingToExecutions( event );
				performExecutions( source );


/ 1313

protected void flushEverythingToExecutions(FlushEvent event) throws HibernateException {

/ Alvast: sets reentrantSafeEntries	, 

		final PersistenceContext persistenceContext = session.getPersistenceContext();

		prepareEntityFlushes( session, persistenceContext );
/s
DefaultFlushEventListener(AbstractFlushingEventListener).prepareEntityFlushes(EventSource, PersistenceContext) line: 153	
		for ( Map.Entry<Object,EntityEntry> me : persistenceContext.reentrantSafeEntityEntries() ) {
/s
EntityEntryContext.reentrantSafeEntityEntries() line: 260	
			ManagedEntity managedEntity = head;
			while ( managedEntity != null ) {
				reentrantSafeEntries[i++] = new EntityEntryCrossRefImpl(
						managedEntity.$$_hibernate_getEntityInstance(),
						managedEntity.$$_hibernate_getEntityEntry()
				);
				managedEntity = managedEntity.$$_hibernate_getNextManagedEntity();
/t
DefaultFlushEventListener(AbstractFlushingEventListener).prepareEntityFlushes(EventSource, PersistenceContext) line: 161	
		for ( Map.Entry<Object,EntityEntry> me : persistenceContext.reentrantSafeEntityEntries() ) {
/d
			...
				cascadeOnFlush( session, entry.getPersister(), me.getKey(), anything );
/ NIETS bij ons	,
/t
DefaultFlushEventListener(AbstractFlushingEventListener).flushEverythingToExecutions(FlushEvent) line: 102	
		prepareEntityFlushes( session, persistenceContext );
/d
			int entityCount = flushEntities( event, persistenceContext );

/ de loaded state van de Sporter is	, heeft dus de gewone (ref) naar de Club	,
loadedState	Object[2]  (id=101)	
	[0]	"Sporter" (id=144)	
	[1]	Club  (id=35)	

/s
DefaultFlushEventListener(AbstractFlushingEventListener).flushEntities(FlushEvent, PersistenceContext) line: 231	
		final Map.Entry<Object,EntityEntry>[] entityEntries = persistenceContext.reentrantSafeEntityEntries();
////////////////
/ H. flushes alles in reentrantSafeEntries	,
					listener.onFlushEntity( entityEvent );
/s
DefaultFlushEntityEventListener.onFlushEntity(FlushEntityEvent) line: 150	

		final boolean mightBeDirty = entry.requiresDirtyCheck( entity );
true
		final Object[] values = getValues( entity, entry, mightBeDirty, session );
/ alvast: Object[1]{"Club"} als entity=Club inst	,

	private Object[] getValues(Object entity, EntityEntry entry, boolean mightBeDirty, SessionImplementor session) {
		final Object[] loadedState = entry.getLoadedState();
loadedState	Object[2]  (id=101)	
	[0]	"Sporter" (id=144)	
	[1]	Club  (id=35)	

		final Status status = entry.getStatus();
		if ( status == Status.DELETED ) {
/ NEE
			values = entry.getDeletedState();
		}
		else if ( !mightBeDirty && loadedState != null ) {
/ NEE	,
mightBeDirty	true	
			values = loadedState;
/ NIET
		}
		else {
/ JA
			// grab its current state
			values = persister.getPropertyValues( entity );

/ we zien dat de values NIET loadedState is	, want hij might be dirty	,
/ TODO

		if ( isUpdateNecessary( event, mightBeDirty ) ) {
/ NEE
			substitute = scheduleUpdate( event ) || substitute;
/ NIET nu	,
		}

		if ( status != Status.DELETED ) {
/ JA
		// now update the object .. has to be outside the main if block above (because of collections)
			if ( substitute ) {
/ NEE
				persister.setPropertyValues( entity, values );
/ NIET nu	,
			}

			// Search for collections by reachability, updating their role.
			// We don't want to touch collections reachable from a deleted object
			if ( persister.hasCollections() ) {
/ NEE
				new FlushVisitor( session, entity ).processEntityPropertyValues( values, types );
/ NIET nu	,

/t
	public void onFlush(FlushEvent event) throws HibernateException {
				flushEverythingToExecutions( event );
/d
/ sets reentrantSafeEntries	, 
				performExecutions( source );
/s
					session.getActionQueue().executeActions();

/ de EntityInsertAction is al bij .save in de session.actionQueue.insertions set	,

/s
ActionQueue.executeActions() line: 348	
		for ( ExecutableList<?> l : executableLists ) {
			executeActions( l );

/ eerder	,
	public ActionQueue(SessionImplementor session) {
		// Important: these lists are in execution order
		List<ExecutableList<?>> tmp = new ArrayList<ExecutableList<?>>( 7 );
		tmp.add( orphanRemovals );
		tmp.add( insertions );
		tmp.add( updates );
		// do before actions are handled in the other collection queues
		tmp.add( collectionQueuedOps );
		tmp.add( collectionRemovals );
		tmp.add( collectionUpdates );
		tmp.add( collectionCreations );
		tmp.add( deletions );
		executableLists = Collections.unmodifiableList( tmp );

l	ExecutableList<E>  (id=258)	
	executables	ArrayList<E>  (id=272)	
		elementData	Object[5]  (id=283)	
			[0]	EntityInsertAction  (id=285)	
				areTransientReferencesNullified	true	
				cacheEntry	null	
				entityName	"my.test.own.hibernate_xml_N_1_bidir_ehcache.Club" (id=293)	
				id	Long  (id=294)	
				instance	Club  (id=40)	
				isExecuted	false	
				isVersionIncrementDisabled	false	
				persister	SingleTableEntityPersister  (id=189)	
				session	SessionImpl  (id=43)	
				state	Object[1]  (id=299)	
					[0]	"Club" (id=211)	
				version	null	
			[1]	EntityInsertAction  (id=286)	
				areTransientReferencesNullified	true	
				cacheEntry	null	
				entityName	"my.test.own.hibernate_xml_N_1_bidir_ehcache.Sporter" (id=304)	
				id	Long  (id=294)	
				instance	Sporter  (id=38)	
				isExecuted	false	
				isVersionIncrementDisabled	false	
				persister	SingleTableEntityPersister  (id=214)	
				session	SessionImpl  (id=43)	
				state	Object[2]  (id=324)	
					[0]	"Sporter" (id=219)	
					[1]	Club  (id=40)	
					id	1	
					name	"Club" (id=211)	
				version	null	

/ eerder was called	,
	public ActionQueue(SessionImplementor session) {
		private void addInsertAction(AbstractEntityInsertAction insert) {
/ TODO

/s
EntityInsertAction.execute() line: 104	
			persister.insert( id, getState(), instance, session );
/s
SingleTableEntityPersister(AbstractEntityPersister).insert(Serializable, Object[], Object, SessionImplementor) line: 3581	
		else {
			// For the case of dynamic-insert="false", use the static SQL
			for ( int j = 0; j < span; j++ ) {
/////////////////////
				insert( id, fields, getPropertyInsertability(), j, getSQLInsertStrings()[j], object, session );
/ getSQLInsertStrings()[j]=insert into club2 (name_, id_) values (?, ?)
/s
SingleTableEntityPersister(AbstractEntityPersister).insert(Serializable, Object[], boolean[], int, String, Object, SessionImplementor) line: 3091	
		if ( useBatch && inserBatchKey == null ) {
/ JA
			inserBatchKey = new BasicBatchKey(
					getEntityName() + "#INSERT",
					expectation
			);
			if ( useBatch ) {
				insert = session.getTransactionCoordinator()
						.getJdbcCoordinator()
						.getBatch( inserBatchKey )
						.getBatchStatement( sql, callable );
/s
NonBatchingBatch(AbstractBatchImpl).getBatchStatement(String, boolean) line: 146	
		PreparedStatement statement = statements.get( sql );
		if ( statement == null ) {
/ JA
			statement = buildBatchStatement( sql, callable );
/s
	private PreparedStatement buildBatchStatement(String sql, boolean callable) {
		return jdbcCoordinator.getStatementPreparer().prepareStatement( sql, callable );
/t
NonBatchingBatch(AbstractBatchImpl).getBatchStatement(String, boolean) line: 146	
			statements.put( sql, statement );
		return statement;
/t
SingleTableEntityPersister(AbstractEntityPersister).insert(Serializable, Object[], boolean[], int, String, Object, SessionImplementor) line: 3121	
				insert = session.getTransactionCoordinator()
						.getJdbcCoordinator()
						.getStatementPreparer()
						.prepareStatement( sql, callable );
/d
insert	Jdbc4PreparedStatement  (id=235)	

				dehydrate( id, fields, null, notNull, propertyColumnInsertable, j, insert, session, index, false );
/ id=1l, dit betreft de Club inst	,
/ we zitten in 	,
	private <E extends Executable & Comparable<?> & Serializable> void executeActions(ExecutableList<E> list) throws HibernateException {
			for ( E e : list ) {
				try {
					e.execute();
/ list is de insertions list	, met 2 EntityInsertAction's	,

/s
VarcharTypeDescriptor$1.doBind(PreparedStatement, X, int, WrapperOptions) line: 64	
	@Override
	public <X> ValueBinder<X> getBinder(final JavaTypeDescriptor<X> javaTypeDescriptor) {
		return new BasicBinder<X>( javaTypeDescriptor, this ) {
			@Override
			protected void doBind(PreparedStatement st, X value, int index, WrapperOptions options) throws SQLException {
->				st.setString( index, javaTypeDescriptor.unwrap( value, String.class, options ) );

/t
SingleTableEntityPersister(AbstractEntityPersister).dehydrate(Serializable, Object[], Object, boolean[], boolean[][], int, PreparedStatement, SessionImplementor, int, boolean) line: 2849	
				getPropertyTypes()[i].nullSafeSet( ps, fields[i], index, includeColumns[i], session );
/d
			index += dehydrateId( id, rowId, ps, session, index );
/s
LongType(AbstractStandardBasicType<T>).nullSafeSet(PreparedStatement, Object, int, WrapperOptions) line: 286	
/s
BigIntTypeDescriptor$1.doBind(PreparedStatement, X, int, WrapperOptions) line: 64	
	public <X> ValueBinder<X> getBinder(final JavaTypeDescriptor<X> javaTypeDescriptor) {
		return new BasicBinder<X>( javaTypeDescriptor, this ) {
			@Override
			protected void doBind(PreparedStatement st, X value, int index, WrapperOptions options) throws SQLException {
				st.setLong( index, javaTypeDescriptor.unwrap( value, Long.class, options ) );
/t
SingleTableEntityPersister(AbstractEntityPersister).insert(Serializable, Object[], boolean[], int, String, Object, SessionImplementor) line: 3124	
				dehydrate( id, fields, null, notNull, propertyColumnInsertable, j, insert, session, index, false );
/d
				if ( useBatch ) {
					session.getTransactionCoordinator().getJdbcCoordinator().getBatch( inserBatchKey ).addToBatch();
/s
NonBatchingBatch.addToBatch() line: 62	
		for ( Map.Entry<String,PreparedStatement> entry : getStatements().entrySet() ) {
			try {
				final PreparedStatement statement = entry.getValue();
				final int rowCount = jdbcCoordinator.getResultSetReturn().executeUpdate( statement );
/s
ResultSetReturnImpl.executeUpdate(PreparedStatement) line: 207	
			return statement.executeUpdate();

/t
Main6a5.testBasicUsage() line: 131	
		  	session.flush();
/d
		  	session.beginTransaction().commit();

/ 7	. 

/ Session.save / Session.update	,

$ vi SessionImpl.java

	private Serializable fireSave(SaveOrUpdateEvent event) {
		for ( SaveOrUpdateEventListener listener : listeners( EventType.SAVE ) ) {
			listener.onSaveOrUpdate( event );

	private void fireUpdate(SaveOrUpdateEvent event) {
		for ( SaveOrUpdateEventListener listener : listeners( EventType.UPDATE ) ) {
			listener.onSaveOrUpdate( event );


/ bij save	,
/s
DefaultSaveEventListener(DefaultSaveOrUpdateEventListener).onSaveOrUpdate(SaveOrUpdateEvent) line: 90	
/ this==DefaultSaveEventListener inst	,
			event.setResultId( performSaveOrUpdate( event ) );
/s
DefaultSaveEventListener.performSaveOrUpdate(SaveOrUpdateEvent) line: 44	
			return entityIsTransient(event);
/s
DefaultSaveEventListener(DefaultSaveOrUpdateEventListener).entityIsTransient(SaveOrUpdateEvent) line: 194	
		Serializable id = saveWithGeneratedOrRequestedId( event );
/s
	DefaultSaveEventListener.saveWithGeneratedOrRequestedId(SaveOrUpdateEvent) line: 55	
/s
	DefaultSaveEventListener(DefaultSaveOrUpdateEventListener).saveWithGeneratedOrRequestedId(SaveOrUpdateEvent) line: 209	
/s
	DefaultSaveEventListener(AbstractSaveEventListener).saveWithGeneratedId(Object, String, Object, EventSource, boolean) line: 137	
/s
	DefaultSaveEventListener(AbstractSaveEventListener).performSave(Object, Serializable, EntityPersister, boolean, Object, EventSource, boolean) line: 176	
			key = source.generateEntityKey( id, persister );
			Object old = source.getPersistenceContext().getEntity( key );
null
/ TODO PETER/PAUL
		return performSaveOrReplicate(
				entity,
				key,
				persister,
				useIdentityColumn,
				anything,
				source,
				requiresImmediateIdAccess
		);
/s
DefaultSaveEventListener(AbstractSaveEventListener).performSaveOrReplicate(Object, EntityKey, EntityPersister, boolean, Object, EventSource, boolean) line: 288	
		AbstractEntityInsertAction insert = addInsertAction(
				values, id, entity, persister, useIdentityColumn, source, shouldDelayIdentityInserts
		);
/s
DefaultSaveEventListener(AbstractSaveEventListener).addInsertAction(Object[], Serializable, Object, EntityPersister, boolean, EventSource, boolean) line: 333	
			EntityInsertAction insert = new EntityInsertAction(
					id, values, entity, version, persister, isVersionIncrementDisabled(), source
			);
			source.getActionQueue().addAction( insert );

/ 13	

/ we zien in de entityentry wel loadedState

nonEnhancedEntityXref	IdentityHashMap<K,V>  (id=174)	
	table	Object[64]  (id=178)	
		[20]	Sporter  (id=131)	
		[21]	EntityEntryContext$ManagedEntityImpl  (id=147)	
			entityEntry	EntityEntry  (id=160)	
				id	Long  (id=79)	
				loadedState	Object[2]  (id=186)	
					[0]	"Sporter" (id=183)	
					[1]	Club  (id=41)	


/ 7	. 

/ Session.flush na .save	,

	SessionImpl.flush() line: 1222	
/s
	DefaultFlushEventListener.onFlush(FlushEvent) line: 55	
/s
	DefaultFlushEventListener(AbstractFlushingEventListener).flushEverythingToExecutions(FlushEvent) line: 102	
/s
	DefaultFlushEventListener(AbstractFlushingEventListener).flushEntities(FlushEvent, PersistenceContext) line: 231	
/s
	DefaultFlushEntityEventListener.onFlushEntity(FlushEntityEvent) line: 159	
		if ( isUpdateNecessary( event, mightBeDirty ) ) {
/ NEE
			substitute = scheduleUpdate( event ) || substitute;
/ NIET

/ De EntityInsertAction is set in the 'insertions' queue in .save	,
DefaultSaveEventListener(AbstractSaveEventListener).performSaveOrReplicate(Object, EntityKey, EntityPersister, boolean, Object, EventSource, boolean) line: 288	
		AbstractEntityInsertAction insert = addInsertAction(
				values, id, entity, persister, useIdentityColumn, source, shouldDelayIdentityInserts
		);

/ 7	.

/ bij .save wordt de entityentry in 1ste cache set	,
	EntityInsertAction(AbstractEntityInsertAction).makeEntityManaged() line: 143	
	ActionQueue.addResolvedEntityInsertAction(AbstractEntityInsertAction) line: 201	
	ActionQueue.addInsertAction(AbstractEntityInsertAction) line: 179	
	ActionQueue.addAction(EntityInsertAction) line: 166	
	DefaultSaveEventListener(AbstractSaveEventListener).addInsertAction(Object[], Serializable, Object, EntityPersister, boolean, EventSource, boolean) line: 332	
	DefaultSaveEventListener(AbstractSaveEventListener).performSaveOrReplicate(Object, EntityKey, EntityPersister, boolean, Object, EventSource, boolean) line: 288	
	DefaultSaveEventListener(AbstractSaveEventListener).performSave(Object, Serializable, EntityPersister, boolean, Object, EventSource, boolean) line: 194	
	DefaultSaveEventListener(AbstractSaveEventListener).saveWithGeneratedId(Object, String, Object, EventSource, boolean) line: 137	
	DefaultSaveEventListener(DefaultSaveOrUpdateEventListener).saveWithGeneratedOrRequestedId(SaveOrUpdateEvent) line: 209	
	DefaultSaveEventListener.saveWithGeneratedOrRequestedId(SaveOrUpdateEvent) line: 55	
	DefaultSaveEventListener(DefaultSaveOrUpdateEventListener).entityIsTransient(SaveOrUpdateEvent) line: 194	
	DefaultSaveEventListener.performSaveOrUpdate(SaveOrUpdateEvent) line: 49	
	DefaultSaveEventListener(DefaultSaveOrUpdateEventListener).onSaveOrUpdate(SaveOrUpdateEvent) line: 90	
	SessionImpl.fireSave(SaveOrUpdateEvent) line: 715	
	SessionImpl.save(String, Object) line: 707	
	SessionImpl.save(Object) line: 702	
	Main6a5.testBasicUsage() line: 126	
	Main6a5.<init>() line: 76	
	Main6a5.main(String[]) line: 70	

	public final void makeEntityManaged() {
		nullifyTransientReferencesIfNotAlready();
		final Object version = Versioning.getVersion( getState(), getPersister() );
		getSession().getPersistenceContext().addEntity(
				getInstance(),
				( getPersister().isMutable() ? Status.MANAGED : Status.READ_ONLY ),
				getState(),																	/ loadedState <-
				getEntityKey(),
				version,
				LockMode.WRITE,
				isExecuted,
				getPersister(),
				isVersionIncrementDisabled,
				false
		);
	}

/ de state zit in de EntityInsertAction	,
/ TODO

/ 7	.

/ later, in .flush, zien we dat deze loadedState helemaal niet wordt used	, maar de properties worden req	, 

	public void onFlush(FlushEvent event) throws HibernateException {
->				flushEverythingToExecutions( event );
				performExecutions( source );
->/s
	protected void flushEverythingToExecutions(FlushEvent event) throws HibernateException {
		prepareEntityFlushes( session, persistenceContext );
/ -> reentrant...
			int entityCount = flushEntities( event, persistenceContext );
...
/s
	public void onFlushEntity(FlushEntityEvent event) throws HibernateException {
		final Object[] values = getValues( entity, entry, mightBeDirty, session );
/s
	private Object[] getValues(Object entity, EntityEntry entry, boolean mightBeDirty, SessionImplementor session) {
		final Object[] loadedState = entry.getLoadedState();
/ is er	,
		else if ( !mightBeDirty && loadedState != null ) {
/ NEE
			values = loadedState;
/ NIET
		else {
			// grab its current state
			values = persister.getPropertyValues( entity );
...
/s
	public Object[] getPropertyValues(Object entity) throws HibernateException {
				result[j] = getters[j].get( entity );
/s
		public Object get(Object target) throws HibernateException {
				return method.invoke( target, (Object[]) null );

/ 7	. 

/ terug in .flush na .save	, 

	public void onFlushEntity(FlushEntityEvent event) throws HibernateException {
		final Object[] values = getValues( entity, entry, mightBeDirty, session );
/ d
/ uit properties van entity	, NIET: loadedState in entry, want entity is dirty	,

->		if ( isUpdateNecessary( event, mightBeDirty ) ) {
/ NEE
			substitute = scheduleUpdate( event ) || substitute;
/ NIET
...
->/s
	private boolean isUpdateNecessary(final FlushEntityEvent event, final boolean mightBeDirty) {
			dirtyCheck( event );
/s
DefaultFlushEntityEventListener.dirtyCheck(FlushEntityEvent) line: 546	
		if ( dirtyProperties == null ) {
/ JA
				cannotDirtyCheck = loadedState == null;
false
/ TODO
				if ( !cannotDirtyCheck ) {
					// dirty check against the usual snapshot of the entity
					dirtyProperties = persister.findDirty( values, loadedState, entity, session );
/s
	public int[] findDirty(Object[] currentState, Object[] previousState, Object entity, SessionImplementor session)
	throws HibernateException {
		int[] props = TypeHelper.findDirty(
				entityMetamodel.getProperties(),
				currentState,
				previousState,
				propertyColumnUpdateable,
				hasUninitializedLazyProperties( entity ),
				session
			);
/s
	public static int[] findDirty(
		for ( int i = 0; i < span; i++ ) {
			final boolean dirty = currentState[i] != LazyPropertyInitializer.UNFETCHED_PROPERTY
					&& properties[i].isDirtyCheckable( anyUninitializedProperties )
->					&& properties[i].getType().isDirty( previousState[i], currentState[i], includeColumns[i], session );
/ vergl	, 

/ MORGEN HIBERNATE

/ 7	. 

/ Session.update	,

/ sets entity in 1st cache	,  in nonEnhancedEntityRef	,

/ SAMENVATTING

/ In	,
	DefaultUpdateEventListener(DefaultSaveOrUpdateEventListener).performUpdate(SaveOrUpdateEvent, Object, EntityPersister) line: 337	
	DefaultUpdateEventListener(DefaultSaveOrUpdateEventListener).entityIsDetached(SaveOrUpdateEvent) line: 244	
	DefaultUpdateEventListener.performSaveOrUpdate(SaveOrUpdateEvent) line: 55	
	DefaultUpdateEventListener(DefaultSaveOrUpdateEventListener).onSaveOrUpdate(SaveOrUpdateEvent) line: 90	
	SessionImpl.fireUpdate(SaveOrUpdateEvent) line: 739	
	SessionImpl.update(String, Object) line: 731	
	SessionImpl.update(Object) line: 726	
	Main6a5.testBasicUsage() line: 140	
	Main6a5.<init>() line: 76	
	Main6a5.main(String[]) line: 70	

		source.getPersistenceContext().addEntity(
				entity,
entity	Sporter  (id=33)	
	club	Club  (id=38)	
		id	0	
		name	"Club2" (id=96)	
	id	1	
	name	"Sporter" (id=92)	
key	EntityKey  (id=79)	
				( persister.isMutable() ? Status.MANAGED : Status.READ_ONLY ),
				null, // cachedState,
				key,
key	EntityKey  (id=79)	
	hashCode	630	
	identifier	Long  (id=83)	
	persister	SingleTableEntityPersister  (id=61)	
				persister.getVersion( entity ),
				LockMode.NONE,
				true,
				persister,
				false,
				true // assume true, since we don't really know, and it doesn't matter
		);

/ Einde SAMENVATTING

		  	session2=sessionFactory.openSession();
			PersistenceContext context2=((SessionImplementor)session2).getPersistenceContext();
			Club club2=new Club("Club2");
			sporter.setClub(club2);
			session2.update(sporter);

/ Intermezzo

/ Bij .save(club) komen we in 	,
Thread [main] (Suspended)	
	DefaultSaveEventListener.performSaveOrUpdate(SaveOrUpdateEvent) line: 49	
	DefaultSaveEventListener(DefaultSaveOrUpdateEventListener).onSaveOrUpdate(SaveOrUpdateEvent) line: 90	
	SessionImpl.fireSave(SaveOrUpdateEvent) line: 715	
	SessionImpl.save(String, Object) line: 707	
	SessionImpl.save(Object) line: 702	
	Main6a5.testBasicUsage() line: 126	
	Main6a5.<init>() line: 76	
	Main6a5.main(String[]) line: 70	

public class DefaultSaveEventListener extends DefaultSaveOrUpdateEventListener {
    protected Serializable performSaveOrUpdate(SaveOrUpdateEvent event) {
        else {
            return entityIsTransient(event);


/ bij .update(club) komen we in	,
my.test.own.hibernate_xml_N_1_bidir_ehcache.Main6a5 at localhost:60353	
	Thread [main] (Suspended)	
		DefaultUpdateEventListener.performSaveOrUpdate(SaveOrUpdateEvent) line: 45	
		DefaultUpdateEventListener(DefaultSaveOrUpdateEventListener).onSaveOrUpdate(SaveOrUpdateEvent) line: 90	
		SessionImpl.fireUpdate(SaveOrUpdateEvent) line: 739	
		SessionImpl.update(String, Object) line: 731	
		SessionImpl.update(Object) line: 726	
		Main6a5.testBasicUsage() line: 140	
		Main6a5.<init>() line: 76	
		Main6a5.main(String[]) line: 70	

public class DefaultUpdateEventListener extends DefaultSaveOrUpdateEventListener {
	protected Serializable performSaveOrUpdate(SaveOrUpdateEvent event) {
		else {
->			entityIsDetached(event);

/ Einde Intermezzo

/ t
Main6a5.testBasicUsage() line: 143	
		  	session2=sessionFactory.openSession();
			PersistenceContext context2=((SessionImplementor)session2).getPersistenceContext();
			Club club2=new Club("Club2");
			sporter.setClub(club2);
			session2.update(sporter);
/d
/ loadedState in de entry =null
/ TODO
/  Maar dat zagen we hierboven al, bij save, flush, dat hij de state omdat dirty is, uit de properties haalt, niet uit de loaded state	,

		  	session2.flush();

/ 7	. 


/ Session.flush

/ SAMENVATTING

	public void onFlush(FlushEvent event) throws HibernateException {
				flushEverythingToExecutions( event );
				performExecutions( source );

/ 1ste	,
	protected void flushEverythingToExecutions(FlushEvent event) throws HibernateException {
		prepareEntityFlushes( session, persistenceContext );
/ sets in 1ste cache, in reentrantSafeEntries	,
			int entityCount = flushEntities( event, persistenceContext );
/ sets EntityUpdateAction in de updates queue	, 

/ 2de	,
	protected void performExecutions(EventSource session) {
			session.getActionQueue().executeActions();


/s
	private void prepareEntityFlushes(EventSource session, PersistenceContext persistenceContext) throws HibernateException {
		for ( Map.Entry<Object,EntityEntry> me : persistenceContext.reentrantSafeEntityEntries() ) {
/ sets in 1ste cache, in reentrantSafeEntries	,
/ en cascades, maar doen we niet	,
/t
/s
	private int flushEntities(final FlushEvent event, final PersistenceContext persistenceContext) throws HibernateException {
					listener.onFlushEntity( entityEvent );
/s
	public void onFlushEntity(FlushEntityEvent event) throws HibernateException {
		final Object[] values = getValues( entity, entry, mightBeDirty, session );
/ calls .getProperties	, en loadedState=null	,

		if ( isUpdateNecessary( event, mightBeDirty ) ) {
/ JA
/ TODO
			substitute = scheduleUpdate( event ) || substitute;
/s
		// note that we intentionally do _not_ pass in currentPersistentState!
		session.getActionQueue().addAction(
				new EntityUpdateAction(
						entry.getId(),
						values,
values	Object[2]  (id=204)	
	[0]	"Sporter" (id=205)	
	[1]	Club  (id=38)	
		id	0	
		name	"Club2" (id=217)	
						dirtyProperties,
						event.hasDirtyCollection(),
						( status == Status.DELETED && !entry.isModifiableEntity() ?
								persister.getPropertyValues( entity ) :
								entry.getLoadedState() ),
						entry.getVersion(),
						nextVersion,
						entity,
						entry.getRowId(),
						persister,
						session
				)
		);








/ Einde SAMENVATTING
/s
DefaultFlushEntityEventListener.onFlushEntity(FlushEntityEvent) line: 152	
		final boolean mightBeDirty = entry.requiresDirtyCheck( entity );
true
		final Object[] values = getValues( entity, entry, mightBeDirty, session );
/s
DefaultFlushEntityEventListener.getValues(Object, EntityEntry, boolean, SessionImplementor) line: 180	
		final Object[] loadedState = entry.getLoadedState();
null
		final Object[] values;
		else if ( !mightBeDirty && loadedState != null ) {
/ NEE
			values = loadedState;
/ NIET
		}
		else {
/ JA
			// grab its current state
			values = persister.getPropertyValues( entity );
values	Object[2]  (id=295)	
	[0]	"Sporter" (id=81)	
	[1]	Club  (id=38)	
		return values;
/t
DefaultFlushEntityEventListener.onFlushEntity(FlushEntityEvent) line: 154	
		final Object[] values = getValues( entity, entry, mightBeDirty, session );
/d
		if ( isUpdateNecessary( event, mightBeDirty ) ) {
/ JA
/ TODO
			substitute = scheduleUpdate( event ) || substitute;
/s
		session.getActionQueue().addAction(
				new EntityUpdateAction(
						entry.getId(),
						values,
values	Object[2]  (id=295)	
	[0]	"Sporter" (id=81)	
	[1]	Club  (id=38)	
		id	0	
		name	"Club2" (id=339)	

						dirtyProperties,
null
						event.hasDirtyCollection(),
						( status == Status.DELETED && !entry.isModifiableEntity() ?
								persister.getPropertyValues( entity ) :
								entry.getLoadedState() ),
/ values
						entry.getVersion(),
						nextVersion,
						entity,
						entry.getRowId(),
						persister,
						session
				)
		);

/ we zijn nog steeds in 	,
	public void onFlush(FlushEvent event) throws HibernateException {
->				flushEverythingToExecutions( event );
				performExecutions( source );

/ performExecutions zal de EntityUpdateAction exec	, en zal de update in de db doen	,

				performExecutions( source );
/s
			session.getActionQueue().executeActions();
/s
		for ( ExecutableList<?> l : executableLists ) {
			executeActions( l );
/s
			for ( E e : list ) {
				try {
					e.execute();
/s
EntityUpdateAction.execute() line: 129	
			persister.update( 
					id, 
					state, 
state	Object[2]  (id=295)	
	[0]	"Sporter" (id=81)	
	[1]	Club  (id=38)	
		id	0	
		name	"Club2" (id=339)	

					dirtyFields, 
null
					hasDirtyCollection, 
					previousState, 
null
					previousVersion, 
					instance, 
/ sporter met Club["Club2"]
					rowId, 
					session 
			);
/s
SingleTableEntityPersister(AbstractEntityPersister).update(Serializable, Object[], int[], boolean, Object[], Object, Object, Object, SessionImplementor) line: 3515	
		else {
			// For the case of dynamic-update="false", or no snapshot, we use the static SQL
			updateStrings = getUpdateStrings(
					rowId != null,
					hasUninitializedLazyProperties( object )
			);
[update sporter2 set name_=?, club_=? where id_=?]
			propsToUpdate = getPropertyUpdateability( object );
[true, true]

		for ( int j = 0; j < span; j++ ) {
			// Now update only the tables with dirty properties (and the table with the version number)
			if ( tableUpdateNeeded[j] ) {
				updateOrInsert(
						id,
						fields,
						oldFields,
						j == 0 ? rowId : null,
						propsToUpdate,
						j,
						oldVersion,
						object,
						updateStrings[j],
						session
					);
			}
/s
SingleTableEntityPersister(AbstractEntityPersister).updateOrInsert(Serializable, Object[], Object[], Object, boolean[], int, Object, Object, String, SessionImplementor) line: 3183	
			else {
				//there is probably a row there, so try to update
				//if no rows were updated, we will find out
				isRowToUpdate = update( id, fields, oldFields, rowId, includeProperty, j, oldVersion, object, sql, session );

/ we geven contiue	,
org.hibernate.TransientObjectException: object references an unsaved transient instance - save the transient instance before flushing: my.test.own.hibernate_xml_N_1_bidir_ehcache.Club
	at org.hibernate.engine.internal.ForeignKeys.getEntityIdentifierIfNotUnsaved(ForeignKeys.java:294)
	at org.hibernate.type.EntityType.getIdentifier(EntityType.java:537)
	at org.hibernate.type.ManyToOneType.nullSafeSet(ManyToOneType.java:165)
	at org.hibernate.persister.entity.AbstractEntityPersister.dehydrate(AbstractEntityPersister.java:2843)
	at org.hibernate.persister.entity.AbstractEntityPersister.update(AbstractEntityPersister.java:3248)
	at org.hibernate.persister.entity.AbstractEntityPersister.updateOrInsert(AbstractEntityPersister.java:3183)
	at org.hibernate.persister.entity.AbstractEntityPersister.update(AbstractEntityPersister.java:3525)
	at org.hibernate.action.internal.EntityUpdateAction.execute(EntityUpdateAction.java:159)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:463)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:349)
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:350)
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:56)
	at org.hibernate.internal.SessionImpl.flush(SessionImpl.java:1222)
	at my.test.own.hibernate_xml_N_1_bidir_ehcache.Main6a5.testBasicUsage(Main6a5.java:143)
	at my.test.own.hibernate_xml_N_1_bidir_ehcache.Main6a5.<init>(Main6a5.java:76)
	at my.test.own.hibernate_xml_N_1_bidir_ehcache.Main6a5.main(Main6a5.java:70)

 

/ Einde DEBUG HIBERNATE TRANSIENTOBJECTEXCEPTION

/ DEBUG HIBERNATE HQL 

/ 7	.

SingleTableEntityPersister(AbstractEntityPersister).getSQLUpdateStrings() line: 414	
	protected String[] getSQLUpdateStrings() {
		return sqlUpdateStrings;
	}

	private void doLateInit() {
		//insert/update/delete SQL
		final int joinSpan = getTableSpan();
		sqlDeleteStrings = new String[joinSpan];
		sqlInsertStrings = new String[joinSpan];
		...
/ TODO




/ Einde DEBUG HIBERNATE HQL 

/ WICKET REPEATER 

/ in project wicket-book	,

/ In Cn55.java

		{
			List<Person> persons = Arrays.asList(new Person("John", "Smith"), new Person("Dan", "Wong"));
			ListDataProvider<Person>listDataProvider=new ListDataProvider<Person>(persons);
			int i=0;
			DataView<Person>dataView=new DataView<Person>("personrow",listDataProvider) {
				@Override
				protected void populateItem(Item<Person> item) {
					Person person=item.getModelObject();
					RepeatingView repeatingView=new RepeatingView("persondata");
					{
					String id=repeatingView.newChildId();
					Label label=new Label(id,person.getFirst());
					repeatingView.add(label);
					}
					{
					String id=repeatingView.newChildId();
					Label label=new Label(id,person.getLast());
					repeatingView.add(label);
					}
				
					item.add(repeatingView);
					
					
				}
			};
			add(dataView);
			dataView.setItemsPerPage(1);
			add(new PagingNavigator("navigator", dataView));
		}

		<span wicket:id="navigator"></span>
		<table>
 		<tr wicket:id="personrow">
 			<td wicket:id="persondata"></td>
 		</tr>
 		</table>

/ OK

/ Een org.apache.wicket.markup.repeater.Item is een WebMarkupContainer	, 	/ DataView, RefreshingView	,
/ Een ListItem is ook een WebMarkupContainer	,	 / ListView	,


 

/ 7	. 

/ we maken Views in wicket-book	, 
/ zoals SimplePage.java in wicket-examples	,

$ vi Views.java

	public Views() {
		List<Person>list=Arrays.asList(new Person("Eric", "Velden"),new Person("Edwin","Poot"));
		ListDataProvider<Person>listDataProvider=new ListDataProvider<Views.Person>(list);
		DataView<Person>dataView=new DataView<Person>("personrow",listDataProvider) {
			@Override
			protected void populateItem(Item<Person> item) {

				Panel panel=new MyPanel("action");
				item.add(panel);
				
				Person person=item.getModelObject();
				RepeatingView repeatingView=new RepeatingView("persondata");
				{
				String id=repeatingView.newChildId();
				Label label=new Label(id, person.getFirst());
				repeatingView.add(label);
				}
				{
				String id=repeatingView.newChildId();
				Label label=new Label(id, person.getLast());
				repeatingView.add(label);
				}
				item.add(repeatingView);
			}
		};
		add(dataView);
		dataView.setItemsPerPage(1);
		add(new PagingNavigator("navigator",dataView));
		
	}
	 private class Person implements Serializable{
...
	 }
	 
	 private class MyPanel extends Panel{
		 public MyPanel(String id) {
			super(id);
			Link<Void>link=new Link<Void>("link"){
				@Override
				public void onClick() {
					LOG.info("\n**************** clicked ****************\n");
					
				}
			};
			add(link);
		}
	 }

$ vi Views.html

<span wicket:id="navigator"></span>
<table>
	<tr wicket:id="personrow">
		<td wicket:id="action"></td>
		<td wicket:id="persondata"></td>
	</tr>
</table>

$ vi Views$MyPanel.html

<wicket:panel>
	<a href="#" wicket:id="link">link</a>
</wicket:panel>

/ 7	.

/ we maken net als DataPage in wicket-examples	,

/ MORGEN

/ 7	. 


/ Lees	,

/ we geven in google: wicket defaultdatatable	,
https://cwiki.apache.org/confluence/display/WICKET/Simple+Sortable+DataTable+Example
https://www.packtpub.com/books/content/apache-wicket-displaying-data-using-datatable

https://cwiki.apache.org/confluence/display/WICKET/Simple+Sortable+DataTable+Example
/ is ViewsTODO.

/ 7	. 

/ we maken in proj. wicket_book een package my.test.own.repeater	, 
/ uit wicket-examples, we cp DataTablePage en alles wat daarbij hoort hierin	,

/ we hebben in my.test.own.wicket_book en in my.test.own.repeater een WebApplication	, welke kiest wicket? Dat zet je in web.xml	,
$ vi web.xml
	<filter>
		<filter-name>wicket.wicket-book</filter-name>
		<filter-class>org.apache.wicket.protocol.http.WicketFilter</filter-class>
		<init-param>
			<param-name>applicationClassName</param-name>
			<!-- <param-value>my.test.own.wicket_book.WicketApplication</param-value> -->
			<param-value>my.test.own.repeater.RepeaterApplication</param-value>
			
		</init-param>
	</filter>

/ wicket pakte dus die uit my.test.own.wicket_book, nu uit my.test.own.repeater	,

/ we passen in my.test.own.repeater de copies aan	,

$ vi BasePage.java
public class BasePage extends WebPage
/ in wicket-examples is het	,
public class BasePage extends ExamplePage

$ vi RepeaterApplication.java
	@Override
	public Class<? extends Page> getHomePage()
	{
		return DataTablePage.class;
	}
/ in wicket-examples is het	,,
		return Index.class;

$ vi BasePage.html
...
/ in wicket examples wat het	,
<wicket:extend xmlns:wicket="http://wicket.apache.org">
...
</wicket:extend>
/ We moeten de wicket:extend rm, want BasePage extends ExamplePage in wicket-examples	, en bij ons in my.test.own.repeater niet	,


/ 7	.

/ ContactsDataBase heeft 
map, voor .get(long)	, om een contact op id te zoeken	, 
fnameIdx, lnameIdx, fnameDescIdx, lnameDescIdx	, voor .find(long,long,sort param), 
/ de ctor calls ContactsGenerator.getInstance().generate()	,

/ WH NIET USED	,
/ ContactDataProvider.find calls ContactsDatabase.find	,	met sort param "firstName"	,
/ ContactDataProvider.size calls ContactsDatabase.getCount	,
/ ContactDataProvider.model(object) calls  new DetachableContactModel(object)
/ TODO
/ ContactDataProvider.detach doet niets	,
/ TODO

/ SortableContactDataProvider

/ 7	. 

/ WICKET PAGER IN REPEATER

/ in proj wicket_book	,
/ we copy my.test.own.repeater naar my.test.own.repeater.copy 	,
/ we halen de filter eruit	,
$ vi web.xml
 			<param-value>my.test.own.repeater.copy.RepeaterApplication</param-value>

$ vi SortableContactDataProvider.java

	@Override
	public Iterator<Contact> iterator(long first, long count)
	{
		List<Contact> contactsFound = getContactsDB().getIndex(getSort());
		
		return contactsFound.
			subList((int)first, (int)(first + count)). 	// !!!!!!!!!!
			iterator();
	}

/ Zonder 
			subList((int)first, (int)(first + count)). 
 werkt de pager NIET	,

/ 7	. 

/ we maken in proj. wicket-book	,
Views.java/.html Views$MyPanel.html	,

/ 2 tables, met DataView, en met DataTable	,
/ er is ook een data provider	,  in Views.java	,

/ we maken Views2.java/.html	, voor sortable en filter	, en Views2$MyPanel.html	,

/ we zien op 	,
http://localhost:9090/wicket-examples-step-by-step/repeater/wicket/bookmarkable/org.apache.wicket.examples.repeater.DataTableFilterToolbarPage?9
/ dat als we sort op de 1ste column, hij alle rows sort, niet alleen die je op de page ziet	, 
/ ook verspringt hij altijd naar page 1	, we zien andersom sort	, dus de achterste eerst	, op page 1	,




/ 7	. 

/ we zien in wicket src	,

$ vi DefaultDataTable.java
	public DefaultDataTable(final String id, final List<? extends IColumn<T, S>> columns,
		final ISortableDataProvider<T, S> dataProvider, final int rowsPerPage)
	{
		addTopToolbar(new NavigationToolbar(this));

$ vi NavigationToolbar.java
	public NavigationToolbar(final DataTable<?, ?> table)
	{
		span.add(newPagingNavigator("navigator", table));

	protected PagingNavigator newPagingNavigator(final String navigatorId,
		final DataTable<?, ?> table)
	{
		return new PagingNavigator(navigatorId, table);


$ vi PagingNavigator.java

		add(newPagingNavigationLink("first", pageable, 0).add(
			new TitleAppender("PagingNavigator.first")));
		add(newPagingNavigationIncrementLink("prev", pageable, -1).add(
			new TitleAppender("PagingNavigator.previous")));
		add(newPagingNavigationIncrementLink("next", pageable, 1).add(
			new TitleAppender("PagingNavigator.next")));
		add(newPagingNavigationLink("last", pageable, -1).add(
			new TitleAppender("PagingNavigator.last")));

/ Hier zien we dus << < > >> program	,

/ 7	. 

$ vi DataTable.html

<thead wicket:id="topToolbars">
	<wicket:container wicket:id="toolbars"></wicket:container>
</thead>

$ vi DataTable.java
	public DataTable(final String id, final List<? extends IColumn<T, S>> columns, ...
		topToolbars = new ToolbarsContainer("topToolbars");
		add(topToolbars);

/ 7	.

$ vi MarkupContainer.java
	@Override
	public final void internalInitialize()
	{
		super.fireInitialize();
		visitChildren(new IVisitor<Component, Void>()
		{
			@Override
			public void component(final Component component, final IVisit<Void> visit)
			{
				component.fireInitialize();
			}
		});
	}

/ TODO


$ vi PagingNavigator.html

<wicket:panel>
	<a wicket:id="first" class="first">&lt;&lt;</a>
	<a wicket:id="prev" class="prev">&lt;</a>
	<span wicket:id="navigation" class="goto">
		<a wicket:id="pageLink" href="#"><span wicket:id="pageNumber">5</span></a>
	</span>
	<a wicket:id="next" class="next">&gt;</a>
	<a wicket:id="last" class="last">&gt;&gt;</a>
</wicket:panel>

/ 7.	 

/  we zien	,

$ vi DataTable.java
	private void addToolbar(final AbstractToolbar toolbar, final ToolbarsContainer container)
	{
		Args.notNull(toolbar, "toolbar");

		container.getRepeatingView().add(toolbar);
	}

/ In wicket-book lukt het, in wicket-1.4 NIET	,

/ 7	.
$ pwd
/home/eric/tmp
$ mkdir wicket-1.4.23-orig-mvn-repo
$ mkdir wicket-1.4.23-mod-mvn-repo
$ mkdir wicket-1.4.23			/ work dir	, 


[eric@localhost tmp]$ cp ~/.mo2/repository/org/apache/wicket/wicket/1.4.23/wicket-1.4.23.jar wicket-1.4.23-orig-mvn-repo/
/ we willen de oude bewaren	,
[eric@localhost tmp]$ cp ~/.mo2/repository/org/apache/wicket/wicket/1.4.23/wicket-1.4.23.jar wicket-1.4.23-mod-mvn-repo
/ eig is alleen deze nodig	,

[eric@localhost tmp]$ jar tvf wicket-1.4.23-orig/wicket-1.4.23.jar  | grep PagingNavigator
  1184 Wed Feb 05 09:09:36 CET 2014 org/apache/wicket/markup/html/navigation/paging/PagingNavigator.html

$ cd wicket-1.4.23 
[eric@localhost wicket-1.4.23]$ jar xvf ../wicket-1.4.23-orig/wicket-1.4.23.jar 
[eric@localhost wicket-1.4.23]$ vi ./org/apache/wicket/markup/html/navigation/paging/PagingNavigator.html
/ edit	,
[eric@localhost wicket-1.4.23]$ jar uvf ../wicket-1.4.23-mod-mvn-repo/wicket-1.4.23.jar ./org/apache/wicket/markup/html/navigation/paging/PagingNavigator.html
/ deze jar is nu nieuw	,

[eric@localhost wicket-1.4.23]$ jar tvf ../wicket-1.4.23-mod/wicket-1.4.23.jar | grep PagingNavigator
  1237 Mon Jun 01 16:20:32 CEST 2015 org/apache/wicket/markup/html/navigation/paging/PagingNavigator.html
[eric@localhost tmp]$ cp wicket-1.4.23-mod-mvn-repo/wicket-1.4.23.jar ~/.m2/repository/org/apache/wicket/wicket/1.4.23/

/ we moeten de applicatie opnieuw build	(mvn)
/ OK	,

/ Hernoem deze en ook in de pom	,
/ TODO

/ 7	. 

/ Met .visitChildren, en AttributeModifier	, de class attr van de links aanpassen	,
/ TODO
/ Valt hij wel in de component fct van de IVisitor? 


/ 7	. 

/ in wicket-book proj	,

/ we zien dat de PagingNavigator toch met new DefaultDataTable wordt set	,
/ en de links? 	, we zien de links pas in App.onBeforeRender	, 
/ TODO
$ vi ViewsAttributeModifier.java
...



$ vi ViewsGetPagingNavigator.java

	public ViewsGetPagingNavigator() {
			List<IColumn<Person, String>>columns=new ArrayList<>();
			columns.add(new PropertyColumn<ViewsPagingNavigator.Person, String>(new Model<>("First Name"), "first","first"));
			columns.add(new PropertyColumn<ViewsPagingNavigator.Person, String>(new Model<>("Last Name"), "last","last"));
			
			ISortableDataProvider<Person, String>dataProvider=new PersonSortableDataProvider();
			
			int rowsPerPage=1;			
			dataTable=new DefaultDataTable<>("dataTable", columns, dataProvider, rowsPerPage);
			dataTable.setOutputMarkupId(true);
			add(dataTable);
			
			MarkupContainer container=dataTable.getTopToolbars();
			RepeatingView repeatingView=(RepeatingView)container.iterator().next();
			NavigationToolbar navigationToolbar=(NavigationToolbar)repeatingView.iterator().next();
			MarkupContainer container2=(MarkupContainer)navigationToolbar.iterator().next();
//			PagingNavigator pagingNavigator=(PagingNavigator)container2.iterator().next();
/ of	,
			
			MarkupContainer container3=(MarkupContainer)dataTable.get("topToolbars:toolbars:1:span");
			
			container2.remove("navigator").add(new MyPageNavigator("navigator", dataTable));
/ of	,
			container3.remove("navigator").add(new MyPageNavigator("navigator", dataTable));

/ OK	, 

/ Maar we gaan het toch anders doen	,

/ 7	. 

/ in wicket7	, 

$ vi  MyPagingNavigator.java 

ublic class MyPagingNavigator extends PagingNavigator {

	public MyPagingNavigator(String id, IPageable pageable) {
		super(id, pageable);
	}

	public MyPagingNavigator(String id, IPageable pageable,
			IPagingLabelProvider labelProvider) {
		super(id, pageable, labelProvider);
	}

$ vi  MyPagingNavigator.html

<wicket:panel>
	<a wicket:id="first" class="first"style="color:red">&lt;&lt;</a>
	<a wicket:id="prev" class="prev" style="color:red">&lt;</a>
	<span wicket:id="navigation" class="goto">
		<a wicket:id="pageLink" href="#"><span wicket:id="pageNumber">5</span></a>
	</span>
	<a wicket:id="next" class="next" style="color:red">&gt;</a>
	<a wicket:id="last" class="last" style="color:red">&gt;&gt;</a>
</wicket:panel>

/ we hebben rode classes added	,

$ vi MyNavigationToolbar.java 

public class MyNavigationToolbar extends NavigationToolbar {	
	private static final long serialVersionUID = 1L;
	
	public MyNavigationToolbar(DataTable<?, ?> table) {
		super(table);
	}
	
	protected PagingNavigator newPagingNavigator(final String navigatorId,
			final DataTable<?, ?> table){
		return new MyPagingNavigator(navigatorId, table);
	}
}

$ vi MyDataTable.java 

public class MyDataTable<T,S> extends DataTable<T, S> {
	private static final long serialVersionUID = 1L;

	
	public MyDataTable(final String id, final List<? extends IColumn<T, S>> columns,
		final ISortableDataProvider<T, S> dataProvider, final int rowsPerPage)
	{
		super(id, columns, dataProvider, rowsPerPage);

		addTopToolbar(new MyNavigationToolbar(this));
		addTopToolbar(new HeadersToolbar<>(this, dataProvider));
		addBottomToolbar(new NoRecordsToolbar(this));
	}

	@Override
	protected Item<T> newRowItem(final String id, final int index, final IModel<T> model)
	{
		return new OddEvenItem<>(id, index, model);
	}

$ vi ViewsMyPagingNavigator.java 

	public ViewsMyPagingNavigator() {
		{
			List<IColumn<Person, String>>columns=new ArrayList<>();
			columns.add(new PropertyColumn<ViewsMyPagingNavigator.Person, String>(new Model<>("First Name"), "first","first"));
			columns.add(new PropertyColumn<ViewsMyPagingNavigator.Person, String>(new Model<>("Last Name"), "last","last"));
			
			ISortableDataProvider<Person, String>dataProvider=new PersonSortableDataProvider();
			
			int rowsPerPage=1;			
			dataTable=new MyDataTable<>("dataTable", columns, dataProvider, rowsPerPage);
			dataTable.setOutputMarkupId(true);
			add(dataTable);
		}
...

/ 7	. 

/ in wicket1.4	,

/ OK	,




Einde WICKET PAGER IN REPEATER

/ Einde WICKET REPEATER

/ WICKET REPEATER SORT

/ proj. wicket-book 	,

/ MyPerson, 
/ MyPersonDatabase, 
/ MyPersonSortableDataProvider,	
/ MyPersonSortPage

$ vi MyPerson.java

public class MyPerson implements Serializable{
	private String first;
	private String last;
...

$ vi MyPersonDatabase.java

public class MyPersonDatabase {
	private List<MyPerson>firstAscIdx=new ArrayList<MyPerson>();
	private List<MyPerson>lastAscIdx=new ArrayList<MyPerson>();
	private List<MyPerson>firstDescIdx=new ArrayList<MyPerson>();
	private List<MyPerson>lastDescIdx=new ArrayList<MyPerson>();
	private Map<Long, MyPerson>map=new HashMap<Long, MyPerson>();
	
	public MyPersonDatabase() {
		firstAscIdx.add(new MyPerson("Eric","Velden"));
		firstAscIdx.add(new MyPerson("Edwin","Poot"));
		firstAscIdx.add(new MyPerson("Foo", "Bar"));
		firstAscIdx.add(new MyPerson("Gee", "Hee"));
		lastAscIdx.addAll(firstAscIdx);
		firstDescIdx.addAll(firstAscIdx);
		lastDescIdx.addAll(firstAscIdx);
		updateIdxs();
	}
	
	public List<MyPerson> getIdx(SortParam<String>sortParam) {
		if(sortParam==null){
			return firstAscIdx;
		}
		else if (sortParam.getProperty().equals("first")){
			if(sortParam.isAscending()){
				return firstAscIdx;
			}
			else{
				return firstDescIdx;
			}
		}
		else if(sortParam.getProperty().equals("last")){
			if(sortParam.isAscending()){
				return lastAscIdx;
			}
			else {
				return lastDescIdx;
			}
		}
		throw new RuntimeException("Unknown sort param");
	}
	
	private void updateIdxs(){
		Collections.sort(firstAscIdx,new Comparator<MyPerson>() {
			@Override
			public int compare(MyPerson o1, MyPerson o2) {
				int i=o1.getFirst().compareTo(o2.getFirst());
				return i;
			}
		});
		Collections.sort(lastAscIdx, new Comparator<MyPerson>() {
			@Override
			public int compare(MyPerson o1, MyPerson o2) {
				int i=o1.getLast().compareTo(o2.getLast());
				return i;
			}
		});
		Collections.sort(firstDescIdx, new Comparator<MyPerson>() {
			@Override
			public int compare(MyPerson o1, MyPerson o2) {
				int i=o2.getFirst().compareTo(o1.getFirst());
				return i;
			}
		});
		Comparator<MyPerson>comparator=new Comparator<MyPerson>() {
			@Override
			public int compare(MyPerson o1, MyPerson o2) {
				int i=o2.getLast().compareTo(o1.getLast());
				return i;
			}
		};
		Collections.sort(lastDescIdx,comparator);	
	}
	
}


$ vi MyPersonSortableDataProvider.java

public class MyPersonSortableDataProvider extends SortableDataProvider<MyPerson, String>{

	public MyPersonSortableDataProvider() {
		setSort("first",SortOrder.ASCENDING);
	}
	
	private MyPersonDatabase getDatabase(){
		WicketApplication application=(WicketApplication)Application.get();
		return application.getMyPersonDatabase();
	}
	@Override
	public Iterator<? extends MyPerson> iterator(long first, long count) {
		SortParam<String>sortParam=getSort();
		List<MyPerson>list=getDatabase().getIdx(sortParam);
		return list.
				subList((int)first, (int)(first + count))
				.iterator();
	}
	@Override
	public long size() {
		return getDatabase().getIdx(getSort()).size();
	}
	
	@Override
	public IModel<MyPerson> model(MyPerson object) {
		return new Model<>(object);
	}
}	


$ vi MyPersonSortPage.java

public class MyPersonSortPage extends WebPage{
	
	private static final Logger LOG=LogManager.getLogger(MyPersonSortPage.class);
	private DataTable<MyPerson, String> dataTable;
	
	public MyPersonSortPage() {
			List<IColumn<MyPerson, String>>columns=new ArrayList<>();
			columns.add(new PropertyColumn<MyPerson, String>(new Model<>("First Name"), "first","first"));
			columns.add(new PropertyColumn<MyPerson, String>(new Model<>("Last Name"), "last","last"));
			
			ISortableDataProvider<MyPerson, String>dataProvider=new MyPersonSortableDataProvider();
			
			int rowsPerPage=2;			
			dataTable=new DefaultDataTable<>("dataTable", columns, dataProvider, rowsPerPage);
			dataTable.setOutputMarkupId(true);
			add(dataTable);
	}
}

$ vi MyPersonSortPage.html

<table wicket:id="dataTable"></table>



/ Einde WICKET REPEATER SORT

/ WICKET REPEATER SORT FILTER

/ 7	.

$ vi DataTableFilterToolbarPage.java

//		FilterToolbar filterToolbar = new FilterToolbar(tableWithFilterForm, filterForm);
		
//		tableWithFilterForm.addTopToolbar(filterToolbar);

/ wordt helemaal niet used	,
/ we zien dat elke column een filter zou hebben ?
/ TODO

$ vi FilterToolbar.java

/**
 * Toolbar that creates a form to hold form components used to filter data in the data table. Form
 * components are provided by columns that implement IFilteredColumn.
 * 
 * @author Igor Vaynberg (ivaynberg)
 */
public class FilterToolbar extends AbstractToolbar
{

/ we moeten dus de columns implements IFilteredColumn
/ WH
/ TODO

/ 7	. 

/ Lees	,
http://stackoverflow.com/questions/20270330/how-to-create-date-filtered-column-property-in-wicket

/ we hebben in proj. wicket-book 	,
StackOverflowToolbarPage.java/.html	,

/ we hebben veranderd   ,

            FilterToolbar filterToolbar = new FilterToolbar(table, filterForm);
/ was
            FilterToolbar filterToolbar = new FilterToolbar(table, filterForm,dataProvider);

//                  filter.getFilter().add(new DatePicker());

/ 7	. 

/ proj. wicket-book	, StackOverflowFilterPage.html/.java	,

/ we set b	,
public class PropertyColumn<T, S> extends AbstractColumn<T, S> implements IExportableColumn<T, S>
{
	public void populateItem(final Item<ICellPopulator<T>> item, final String componentId,
		final IModel<T> rowModel)
	{
		item.add(new Label(componentId, getDataModel(rowModel)));

/ wat is item?

item	Item<T>  (id=194)	
	children	null	
	data	Object[2]  (id=221)	
		[0]	Model<T>  (id=226)	
			object	TextFilteredPropertyColumn<T,F,S>  (id=191)	
				displayModel	Model<T>  (id=308)	
				propertyExpression	"start" (id=309)	
				sortProperty	StackOverflowFilterPage$Entity  (id=311)	
					finish	null	
					note	null	
					start	Date  (id=371)	
		[1]	DataTable$DefaultDataGridView$1  (id=227)	
			this$1	DataTable$DefaultDataGridView  (id=187)	
				cachedItemCount	1	
				childIdCounter	7	
				children	null	
				currentPage	0	
				data	null	
				dataProvider	StackOverflowFilterPage$MySortableDataProvider  (id=186)	
				flags	1073950874	
				generatedMarkupId	-1	
				id	"rows" (id=246)	
				itemReuseStrategy	null	
				itemsPerPage	2147483647	
				markup	null	
				markupSourcingStrategy	DefaultMarkupSourcingStrategy  (id=249)	
				parent	WebMarkupContainer  (id=254)	
				populators	LinkedList<E>  (id=255)	
				queue	null	
				requestFlags	16	
				this$0	DefaultDataTable<T,S>  (id=258)	
			val$column	TextFilteredPropertyColumn<T,F,S>  (id=191)	
				displayModel	Model<T>  (id=308)	
					object	"Start Date" (id=313)	
				propertyExpression	"start" (id=309)	
				sortProperty	StackOverflowFilterPage$Entity  (id=311)	

this	TextFilteredPropertyColumn<T,F,S>  (id=191)	
	displayModel	Model<T>  (id=308)	
	propertyExpression	"start" (id=309)	
	sortProperty	StackOverflowFilterPage$Entity  (id=311)	


/ we zijn in	,

	TextFilteredPropertyColumn<T,F,S>(PropertyColumn<T,S>).populateItem(Item<ICellPopulator<T>>, String, IModel<T>) line: 97	
	DataTable$DefaultDataGridView(AbstractDataGridView<T>).populateItem(Item<T>) line: 156	
	RefreshingView$1.newItem(int, IModel<T>) line: 115	
	DefaultItemReuseStrategy$1.next() line: 75	
	DefaultItemReuseStrategy$1.next() line: 56	
	DataTable$DefaultDataGridView(RefreshingView<T>).addItems(Iterator<Item<T>>) line: 190	
	DataTable$DefaultDataGridView(RefreshingView<T>).onPopulate() line: 98	
	DataTable$DefaultDataGridView(AbstractRepeater).onBeforeRender() line: 126	
	DataTable$DefaultDataGridView(AbstractPageableView<T>).onBeforeRender() line: 115	
	DataTable$DefaultDataGridView(Component).internalBeforeRender() line: 949	
	DataTable$DefaultDataGridView(Component).beforeRender() line: 1017	
	WebMarkupContainer(MarkupContainer).onBeforeRenderChildren() line: 1712	
	WebMarkupContainer(Component).onBeforeRender() line: 3869	
	WebMarkupContainer(Component).internalBeforeRender() line: 949	
	WebMarkupContainer(Component).beforeRender() line: 1017	
	DefaultDataTable<T,S>(MarkupContainer).onBeforeRenderChildren() line: 1712	
	DefaultDataTable<T,S>(Component).onBeforeRender() line: 3869	
	DefaultDataTable<T,S>(Component).internalBeforeRender() line: 949	
	DefaultDataTable<T,S>(Component).beforeRender() line: 1017	
	FilterForm<T>(MarkupContainer).onBeforeRenderChildren() line: 1712	
	FilterForm<T>(Component).onBeforeRender() line: 3869	
	FilterForm<T>(Form<T>).onBeforeRender() line: 1782	
	FilterForm<T>(Component).internalBeforeRender() line: 949	
	FilterForm<T>(Component).beforeRender() line: 1017	
	StackOverflowFilterPage(MarkupContainer).onBeforeRenderChildren() line: 1712	
	StackOverflowFilterPage(Component).onBeforeRender() line: 3869	
	StackOverflowFilterPage(Page).onBeforeRender() line: 801	
	StackOverflowFilterPage(Component).internalBeforeRender() line: 949	
	StackOverflowFilterPage(Component).beforeRender() line: 1017	
	StackOverflowFilterPage(Component).internalPrepareForRender(boolean) line: 2207	
	StackOverflowFilterPage(Page).internalPrepareForRender(boolean) line: 242	
	StackOverflowFilterPage(Component).render() line: 2296	
	StackOverflowFilterPage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 837	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 97	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
	ApplicationFilterChain.internalDoFilter(ServletRequest, ServletResponse) line: 241	
	ApplicationFilterChain.doFilter(ServletRequest, ServletResponse) line: 208	
	StandardWrapperValve.invoke(Request, Response) line: 220	
	StandardContextValve.invoke(Request, Response) line: 122	
	NonLoginAuthenticator(AuthenticatorBase).invoke(Request, Response) line: 503	
	StandardHostValve.invoke(Request, Response) line: 170	
	ErrorReportValve.invoke(Request, Response) line: 103	
	AccessLogValve.invoke(Request, Response) line: 950	
	StandardEngineValve.invoke(Request, Response) line: 116	
	CoyoteAdapter.service(Request, Response) line: 421	
	Http11Processor(AbstractHttp11Processor<S>).process(SocketWrapper<S>) line: 1070	
	Http11Protocol$Http11ConnectionHandler(AbstractProtocol$AbstractConnectionHandler<S,P>).process(SocketWrapper<S>, SocketStatus) line: 611	
	JIoEndpoint$SocketProcessor.run() line: 316	
	ThreadPoolExecutor(ThreadPoolExecutor).runWorker(ThreadPoolExecutor$Worker) line: 1145	
	ThreadPoolExecutor$Worker.run() line: 615	
	TaskThread$WrappingRunnable.run() line: 61	
	TaskThread(Thread).run() line: 745	


/ TODO


/ Einde WICKET REPEATER SORT FILTER

/ WICKET WEBAPPLICATION

/ 7	.

/ proj. wicket-book	,

/ we set aan	,
tomcat7-or-jetty-remote-on-wicket-book

/ we deploy wicket-book	,
wicket-book-deploy

/ we vallen in 	,
Daemon Thread [http-bio-9090-exec-53] (Suspended (entry into method <init> in WicketApplication))	
	WicketApplication.<init>() line: 21	
	NativeConstructorAccessorImpl.newInstance0(Constructor, Object[]) line: not available [native method]	
	NativeConstructorAccessorImpl.newInstance(Object[]) line: 57	
	DelegatingConstructorAccessorImpl.newInstance(Object[]) line: 45	
	Constructor<T>.newInstance(Object...) line: 526	
	Class<T>.newInstance() line: 379	
	ContextParamWebApplicationFactory.createApplication(String) line: 76	
	ContextParamWebApplicationFactory.createApplication(WicketFilter) line: 50	
	WicketFilter.init(boolean, FilterConfig) line: 387	
	WicketFilter.init(FilterConfig) line: 353	
	ApplicationFilterConfig.initFilter() line: 279	
	ApplicationFilterConfig.getFilter() line: 260	
	ApplicationFilterConfig.<init>(Context, FilterDef) line: 105	
	StandardContext.filterStart() line: 4830	
	StandardContext.startInternal() line: 5510	
	StandardContext(LifecycleBase).start() line: 150	
	StandardHost(ContainerBase).addChildInternal(Container) line: 901	
	StandardHost(ContainerBase).addChild(Container) line: 877	
	StandardHost.addChild(Container) line: 649	
	HostConfig.deployWAR(ContextName, File) line: 1081	
	HostConfig.deployApps(String) line: 553	
	HostConfig.check(String) line: 1668	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 57	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 606	
	BaseModelMBean.invoke(String, Object[], String[]) line: 301	
	DefaultMBeanServerInterceptor.invoke(ObjectName, String, Object[], String[]) line: 819	
	JmxMBeanServer.invoke(ObjectName, String, Object[], String[]) line: 801	
	ManagerServlet.check(String) line: 1480	
	ManagerServlet.deploy(PrintWriter, ContextName, String, boolean, HttpServletRequest, StringManager) line: 709	
	ManagerServlet.doPut(HttpServletRequest, HttpServletResponse) line: 450	
	ManagerServlet(HttpServlet).service(HttpServletRequest, HttpServletResponse) line: 649	
	ManagerServlet(HttpServlet).service(ServletRequest, ServletResponse) line: 727	
	ApplicationFilterChain.internalDoFilter(ServletRequest, ServletResponse) line: 303	
	ApplicationFilterChain.doFilter(ServletRequest, ServletResponse) line: 208	
	WsFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 52	
	ApplicationFilterChain.internalDoFilter(ServletRequest, ServletResponse) line: 241	
	ApplicationFilterChain.doFilter(ServletRequest, ServletResponse) line: 208	
	SetCharacterEncodingFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 108	
	ApplicationFilterChain.internalDoFilter(ServletRequest, ServletResponse) line: 241	
	ApplicationFilterChain.doFilter(ServletRequest, ServletResponse) line: 208	
	StandardWrapperValve.invoke(Request, Response) line: 220	
	StandardContextValve.invoke(Request, Response) line: 122	
	BasicAuthenticator(AuthenticatorBase).invoke(Request, Response) line: 612	
	StandardHostValve.invoke(Request, Response) line: 170	
	ErrorReportValve.invoke(Request, Response) line: 103	
	AccessLogValve.invoke(Request, Response) line: 950	
	StandardEngineValve.invoke(Request, Response) line: 116	
	CoyoteAdapter.service(Request, Response) line: 421	
	Http11Processor(AbstractHttp11Processor<S>).process(SocketWrapper<S>) line: 1070	
	Http11Protocol$Http11ConnectionHandler(AbstractProtocol$AbstractConnectionHandler<S,P>).process(SocketWrapper<S>, SocketStatus) line: 611	
	JIoEndpoint$SocketProcessor.run() line: 314	
	ThreadPoolExecutor(ThreadPoolExecutor).runWorker(ThreadPoolExecutor$Worker) line: 1145	
	ThreadPoolExecutor$Worker.run() line: 615	
	TaskThread$WrappingRunnable.run() line: 61	
	TaskThread(Thread).run() line: 745	

/ we geven continue	,

tomcat7-or-jetty-remote-on-wicket-book [Remote Java Application]	
			WicketApplication(Application).configure() line: 300	
			WicketApplication(WebApplication).internalInit() line: 758	
			WicketApplication(Application).initApplication() line: 913	
			WicketFilter.init(boolean, FilterConfig) line: 426	
			WicketFilter.init(FilterConfig) line: 353	
			ApplicationFilterConfig.initFilter() line: 279	
			ApplicationFilterConfig.getFilter() line: 260	
			ApplicationFilterConfig.<init>(Context, FilterDef) line: 105	
			StandardContext.filterStart() line: 4830	
			StandardContext.startInternal() line: 5510	
			StandardContext(LifecycleBase).start() line: 150	
			StandardHost(ContainerBase).addChildInternal(Container) line: 901	
			StandardHost(ContainerBase).addChild(Container) line: 877	
			StandardHost.addChild(Container) line: 649	
			HostConfig.deployWAR(ContextName, File) line: 1081	
			HostConfig.deployApps(String) line: 553	
			HostConfig.check(String) line: 1668	
			NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
			NativeMethodAccessorImpl.invoke(Object, Object[]) line: 57	
			DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
			Method.invoke(Object, Object...) line: 606	
			BaseModelMBean.invoke(String, Object[], String[]) line: 301	
			DefaultMBeanServerInterceptor.invoke(ObjectName, String, Object[], String[]) line: 819	
			JmxMBeanServer.invoke(ObjectName, String, Object[], String[]) line: 801	
			ManagerServlet.check(String) line: 1480	
			ManagerServlet.deploy(PrintWriter, ContextName, String, boolean, HttpServletRequest, StringManager) line: 709	
			ManagerServlet.doPut(HttpServletRequest, HttpServletResponse) line: 450	
			ManagerServlet(HttpServlet).service(HttpServletRequest, HttpServletResponse) line: 649	
			ManagerServlet(HttpServlet).service(ServletRequest, ServletResponse) line: 727	
			ApplicationFilterChain.internalDoFilter(ServletRequest, ServletResponse) line: 303	
			ApplicationFilterChain.doFilter(ServletRequest, ServletResponse) line: 208	
			WsFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 52	
			ApplicationFilterChain.internalDoFilter(ServletRequest, ServletResponse) line: 241	
			ApplicationFilterChain.doFilter(ServletRequest, ServletResponse) line: 208	
			SetCharacterEncodingFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 108	
			ApplicationFilterChain.internalDoFilter(ServletRequest, ServletResponse) line: 241	
			ApplicationFilterChain.doFilter(ServletRequest, ServletResponse) line: 208	
			StandardWrapperValve.invoke(Request, Response) line: 220	
			StandardContextValve.invoke(Request, Response) line: 122	
			BasicAuthenticator(AuthenticatorBase).invoke(Request, Response) line: 612	
			StandardHostValve.invoke(Request, Response) line: 170	
			ErrorReportValve.invoke(Request, Response) line: 103	
			AccessLogValve.invoke(Request, Response) line: 950	
			StandardEngineValve.invoke(Request, Response) line: 116	
			CoyoteAdapter.service(Request, Response) line: 421	
			Http11Processor(AbstractHttp11Processor<S>).process(SocketWrapper<S>) line: 1070	
			Http11Protocol$Http11ConnectionHandler(AbstractProtocol$AbstractConnectionHandler<S,P>).process(SocketWrapper<S>, SocketStatus) line: 611	
			JIoEndpoint$SocketProcessor.run() line: 314	
			ThreadPoolExecutor(ThreadPoolExecutor).runWorker(ThreadPoolExecutor$Worker) line: 1145	
			ThreadPoolExecutor$Worker.run() line: 615	
			TaskThread$WrappingRunnable.run() line: 61	
			TaskThread(Thread).run() line: 745	

	public final void configure()
	{
		// As long as this is public api the development and deployment mode
		// should counter act each other for all properties.
		switch (getConfigurationType())
/s
WicketApplication(WebApplication).getConfigurationType() line: 786	
		if (configurationType == null)
/ NEE
DEVELOPMENT




/ Einde WICKET WEBAPPLICATION

/ WICKET BEHAVIOR

/ 7	. 

/ AttributeModifier werkt met onComponentTag	,

package org.apache.wicket;
public class AttributeModifier extends Behavior implements IClusterable
{
	@Override
	public final void onComponentTag(Component component, ComponentTag tag)
	{
		if (tag.getType() != TagType.CLOSE)
			replaceAttributeValue(component, tag);

/ we use in proj. wicket-book in Ch12_1_2 AttributeModifier	,

/ 7	. 

/ we hadden ook behaviors gemaakt, werkt met afterRender	, 

/ In Man17_1	, afterRender 	,
/ In Ch5_6_2a	, AjaxEventBehavior	,

/ 7	. 

/ we maken MyBehaviors.java/.html

/ we debug	, 

/ we vallen in	,
tomcat7-or-jetty-remote [Remote Java Application]	
	OpenJDK 64-Bit Server VM [localhost:9966]	
		Daemon Thread [http-bio-9090-exec-121] (Suspended (breakpoint at line 159 in AttributeModifier))	
			owns: SocketWrapper<E>  (id=20895)	
			AttributeModifier.replaceAttributeValue(Component, ComponentTag) line: 159	
			AttributeModifier.onComponentTag(Component, ComponentTag) line: 144	
			Label(Component).renderComponentTag(ComponentTag) line: 4002	
			Label(Component).internalRenderComponent() line: 2548	
			Label(WebComponent).onRender() line: 56	
			Label(Component).internalRender() line: 2372	
			Label(Component).render() line: 2300	
			MyBehaviors(MarkupContainer).renderNext(MarkupStream) line: 1405	
			MyBehaviors(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1601	
			MyBehaviors(Page).onRender() line: 879	
			MyBehaviors(WebPage).onRender() line: 142	
			MyBehaviors(Component).internalRender() line: 2372	
			MyBehaviors(Component).render() line: 2300	
			MyBehaviors(Page).renderPage() line: 1018	
			WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
			WebPageRenderer.respond(RequestCycle) line: 236	
			RenderPageRequestHandler.respond(IRequestCycle) line: 175	
			RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 837	
			RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
			RequestCycle.execute(IRequestHandler) line: 265	
			RequestCycle.processRequest() line: 222	
			RequestCycle.processRequestAndDetach() line: 293	
			WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
			WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
			WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
			ApplicationFilterChain.internalDoFilter(ServletRequest, ServletResponse) line: 241	
			ApplicationFilterChain.doFilter(ServletRequest, ServletResponse) line: 208	
			StandardWrapperValve.invoke(Request, Response) line: 220	
			StandardContextValve.invoke(Request, Response) line: 122	
			NonLoginAuthenticator(AuthenticatorBase).invoke(Request, Response) line: 503	
			StandardHostValve.invoke(Request, Response) line: 170	
			ErrorReportValve.invoke(Request, Response) line: 103	
			AccessLogValve.invoke(Request, Response) line: 950	
			StandardEngineValve.invoke(Request, Response) line: 116	
			CoyoteAdapter.service(Request, Response) line: 421	
			Http11Processor(AbstractHttp11Processor<S>).process(SocketWrapper<S>) line: 1070	
			Http11Protocol$Http11ConnectionHandler(AbstractProtocol$AbstractConnectionHandler<S,P>).process(SocketWrapper<S>, SocketStatus) line: 611	
			JIoEndpoint$SocketProcessor.run() line: 314	
			ThreadPoolExecutor(ThreadPoolExecutor).runWorker(ThreadPoolExecutor$Worker) line: 1145	
			ThreadPoolExecutor$Worker.run() line: 615	
			TaskThread$WrappingRunnable.run() line: 61	
			TaskThread(Thread).run() line: 745	

	public final void replaceAttributeValue(final Component component, final ComponentTag tag)
	{
		if (isEnabled(component))
/ JA
		{
			final IValueMap attributes = tag.getAttributes();
wicket:id = "label"
			final Object replacementValue = getReplacementOrNull(component);
color:red;font-style:italic;
			else
			{
				final String value = toStringOrNull(attributes.get(attribute));
attribute="style"
				final String newValue = newValue(value, toStringOrNull(replacementValue));
color:red;font-style:italic;
				if (newValue == VALUELESS_ATTRIBUTE_REMOVE)
				{
/ NEE
					attributes.remove(attribute);
/ NIET
				}
				else if (newValue != null)
/ JA
				{
					attributes.put(attribute, newValue);
				}

/ TODO (Afmaken)



/ Einde WICKET BEHAVIOR


/ HIBERNATE HQL CRITERIA

/ see PNL-579	,

/ we zagen in plnoms  ,

from ShipmentOrderVO s
, UserParty up
and s.toPartyVO.code = up.party.partyId
/ ->
from SHIPMENT_ORDER shipmentor0_
cross join OMS_USER_PARTY userparty8_
cross join PARTY partyvo13_
and userparty8_.PARTY_SYSTEMID=partyvo13_.SYSTEM_ID
and shipmentor0_.TO_LOCATION_ID=partyvo13_.PARTY_ID

/ we proberen dit op eclipse-jee-test   ,

/ we maken proj hibernate_hql_criteria

$ vi Party.hbm.xml

<class name="Party" table="party" >
	<id
		name="id"
		column="system_id"
	>		
	</id>
	<property
		name="partyId"
		column="party_id">
	</property>

$ vi UserParty.hbm.xml

<class 
	name="UserParty"
	table="user_party"
>
	<id 
		name="id"
		column="system_id"
	>		
	</id>
	<many-to-one name="party">
		<column name="party_systemid"></column>
	</many-to-one>

$ vi ShipmentOrder.hbm.xml

<class 
	name="ShipmentOrder" 
	table="shipment_order"
>
	<id 
		name="id"
		column="system_id"
	>	
	</id>
 
 	<property
 		name="code"
 		column="code">
 	</property>
 

$ vi Party.java

public class Party {
	private long id;
	private String partyId;

$ vi UserParty.java

public class UserParty {
	private long id;
	private Party party;

$ vi ShipmentOrder.java
public class ShipmentOrder {
	private long id;
	private String code;

$ vi HqlApp.java

			Party party=new Party();
			party.setPartyId("foo");
			party.setId(1l);
			UserParty userParty=new UserParty();
			userParty.setParty(party);
			userParty.setId(2l);;
			ShipmentOrder shipmentOrder=new ShipmentOrder();
			shipmentOrder.setCode("foo");
			shipmentOrder.setId(3l);
				
			Session session = sessionFactory.openSession();
			session.save(party);
			session.save(userParty);
			session.save(shipmentOrder);
			session.beginTransaction().commit();
			{
			Query query=session.createQuery(
					"from ShipmentOrder so "
					+ ",UserParty up "
					+ "where so.code=up.party.partyId");
			List<ShipmentOrder> list=query.list();

/ we zien	,

select ... 
from shipment_order shipmentor0_ 
cross join user_party userparty1_ 
cross join party party2_ 
where userparty1_.party_systemid=party2_.system_id 
and shipmentor0_.code=party2_.party_id


/ Einde HIBERNATE HQL CRITERIA

/ FEDORA 

/ 7	. 

[eric@localhost pnloms]$ top -p $(pgrep -d',' java)

/ Hoe iotop	?

[eric@localhost LOGS]$ PGPASSWORD=mpopostgres@mpo psql -U mpopostgres pnloms7 <<MY_SQL
select*from shipment_order
MY_SQL

/ 7	.




/ Einde FEDORA







/ POSTGRESQL

/ 7	.

/ serial	,

/ 13	.

/ we mogen de serial column name use	, het hoeft niet	,

foo=> drop table p;create table p(id serial primary key,name varchar(255) not null);\d+ p
foo=> insert into p(name) values('foo');select*from p;
INSERT 0 1
 id | name 
----+------
  1 | foo
(1 row)

foo=> insert into p(name) values('foo');select*from p;
INSERT 0 1
 id | name 
----+------
  1 | foo
  2 | foo
(2 rows)

/ of	,
foo=> insert into p(id,name) values(default,'foo');select*from p;
INSERT 0 1
 id | name 
----+------
  1 | foo
  2 | foo
  3 | foo
(3 rows)


/ 13	,

/ als we alleen een serial column hebben	, moeten we de column name use in insert	, 

foo=> drop table p;create table p(id serial primary key);\d+ p
DROP TABLE
CREATE TABLE
                                             Table "public.p"
 Column |  Type   |                   Modifiers                    | Storage | Stats target | Description 
--------+---------+------------------------------------------------+---------+--------------+-------------
 id     | integer | not null default nextval('p_id_seq'::regclass) | plain   |              | 
Indexes:
    "p_pkey" PRIMARY KEY, btree (id)
Has OIDs: no

foo=> insert into p(id) values(default);
INSERT 0 1
foo=> insert into p(id) values(default);
INSERT 0 1
foo=> insert into p(id) values(default);select*from p;
INSERT 0 1
 id 
----
  1
  2
  3
(3 rows)

foo=> insert into p() values();select*from p;
/ ERR	,

/ 7	.

/ outer join	,

/ en verschil	,
foo=> select*from p left join r on p.id=r.ref and r.ref>6;
/ en	,
foo=> select*from p left join r on p.id=r.ref where r.ref>6;

/ Met where r.ref>6 verdwijnt effect outer join	, want null voldoet niet aan r.ref>6	,

=> drop table p;create table p(id serial primary key);\d+ p
...
foo=> delete from p;
DELETE 5
foo=> insert into p(id) values(default),(default);
INSERT 0 2
foo=> select*from p;
 id 
----
  6
  7
(2 rows)
foo=> insert into p(id) values(default),(default);
INSERT 0 2
foo=> select*from p;
 id 
----
  6
  7
  8
  9
(4 rows)


foo=> create table r(id serial primary key,ref int not null references p(id));
foo=> \d+ r;
                                             Table "public.r"
 Column |  Type   |                   Modifiers                    | Storage | Stats target | Description 
--------+---------+------------------------------------------------+---------+--------------+-------------
 id     | integer | not null default nextval('r_id_seq'::regclass) | plain   |              | 
 ref    | integer | not null                                       | plain   |              | 

foo=> insert into r(ref) values(6),(7);
INSERT 0 2
foo=> select*from r;
 id | ref 
----+-----
  1 |   6
  2 |   7
(2 rows)

foo=> select*from p inner join r on p.id=r.ref;
/ =
foo=> select*from p join       r on p.id=r.ref;

 id | id | ref 
----+----+-----
  6 |  1 |   6
  7 |  2 |   7
(2 rows)

foo=> select*from p left join r on p.id=r.ref;
/=
foo=> select*from p left outer join r on p.id=r.ref;
 id | id | ref 
----+----+-----
  6 |  1 |   6
  7 |  2 |   7
  8 |    |    
  9 |    |    
(4 rows)


=> select*from p left join r on p.id=r.ref and r.ref>6;
 id | id | ref 
----+----+-----
  7 |  2 |   7
  8 |    |    
  6 |    |    
  9 |    |    
(4 rows)

foo=> select*from p left join r on p.id=r.ref where r.ref>6;
 id | id | ref 
----+----+-----
  7 |  2 |   7
(1 row)

/ 7	. 

/ we kunnen niet een implicit join (hier : ,r) ertussen set	,

foo=> select*from r join u on r.user_id=u.id;
ERROR:  column r.user_id does not exist
LINE 1: select*from r join u on r.user_id=u.id;
                                ^
foo=> select*from ur join u on ur.user_id=u.id;
 user_id | role_id | id | name 
---------+---------+----+------
      11 |       2 | 11 | eric
(1 row)

foo=> select*from ur,r join u on ur.user_id=u.id;
ERROR:  invalid reference to FROM-clause entry for table "ur"
LINE 1: select*from ur,r join u on ur.user_id=u.id;
                                   ^
HINT:  There is an entry for table "ur", but it cannot be referenced from this part of the query.

/ Hij gaat eerst explicit joins doen	, dus	, 
	r join u on ur.user_id=u.id

/ 7	.

/ Lees over dates	, 
http://unix.stackexchange.com/questions/69322/how-to-get-milliseconds-since-unix-epoch

/ het enigste wat we hoeven te doen	, 

time PGPASSWORD=mpopostgres@mpo psql -U mpopostgres pnloms7 <<MY_SQL
select *
...

/ STRAKS

/ Intermezzo

/ we hadden	,

start=$(date +%s)

PGPASSWORD=mpopostgres@mpo psql -U mpopostgres pnloms7 <<MY_SQL
select *
...

end=$(date +%s)
duration=$((end-start))
echo $(($(date +%s%N -d"@$duration")/1000000))

/ Maar we zien steeds	,
5.000
6.000
/ Dus alleen 0'en achter de ,	, 
/ TODO

/ Einde Intermezzo

/ 7	.

foo=> select*from ob order by i desc;
 i | j  
---+----
 2 | 21
 2 | 24
 1 | 11
 1 | 12
(4 rows)

foo=> select count(*)from ob order by i desc;
ERROR:  column "ob.i" must appear in the GROUP BY clause or be used in an aggregate function
LINE 2: order by i desc;
/ count is een voorbeeld van een aggregate function	,

foo=> select i,count(j) from ob group by i order by i desc;
 i | count 
---+-------
 2 |     2
 1 |     2
(2 rows)

foo=> select i,sum(j) from ob group by i order by i desc;
 i | sum 
---+-----
 2 |  45
 1 |  23
(2 rows)

/ 7	. 

/ print result naar file	,
/ use \o ervoor en \o erna	,

pnloms7=# \o /tmp/sho.txt
pnloms7=# \d+ shipment_order
pnloms7=# \o /tmp/party.txt
pnloms7=# \d+ party
pnloms7=# \o
/ Als je \o zonder arg staat er \o naar geen file, dus naar hier of zoiets	, dus weer zoals het was	,


 
/ Lees  ,
http://stackoverflow.com/questions/117262/what-is-postgresql-explain-telling-me-exactly
/ die refs naar ,
https://wiki.postgresql.org/images/4/45/Explaining_EXPLAIN.pdf

/ 7	. 

/ joins	,

[eric@localhost Manual]$ pwd
/home/eric/Devel/Postgres/scripts/Manual
[eric@localhost Manual]$ cat joins.sql 
drop table if exists x;create table x(i int,s varchar);
drop table if exists y;create table y(j int,t varchar);
drop table if exists z;create table z(k int,u varchar);
insert into x values(1,'xfoo');
insert into y values(2,'yfoo');
insert into z values(1,'zfoo');
select *from x join y on x.i=y.j join z on x.i=z.k

/ we zien dat als er 1 join wegvalt, er geen result is	,

[eric@localhost Manual]$  cat joins.sh
PGPASSWORD=foo psql -U foo <joins.sql
[eric@localhost Manual]$ ./joins.sh 
DROP TABLE
CREATE TABLE
DROP TABLE
CREATE TABLE
DROP TABLE
CREATE TABLE
INSERT 0 1
INSERT 0 1
INSERT 0 1
 i | s | j | t | k | u 
---+---+---+---+---+---
(0 rows)


/ 13	. 

/ foo kon z niet drop	, want is niet de owner	, 
/ de owner zien we met \dt	,
foo=> \dt
              List of relations
 Schema |        Name        | Type  | Owner 
 public | z                  | table | bar


[eric@localhost LOGS]$ sudo su - postgres 
Last login: Wed May 27 09:16:51 CEST 2015 on pts/14
-bash-4.2$ psql
psql (9.3.5)
Type "help" for help.
postgres=# \c foo
You are now connected to database "foo" as user "postgres".
foo=# drop table z;
DROP TABLE
foo=# \q
-bash-4.2$ exit
logout
[eric@localhost LOGS]$ 

/ 7	.

/ cast	,

http://www.postgresql.org/docs/9.1/static/datatype-datetime.html

/ is cast nodig voor date in postgresql?

[eric@localhost Manual]$ cat dates.sql 
drop table if exists x;
create table x(t date);
insert into x values('2015-05-15');
select t < '2015-04-20' from x;

drop table if exists y;
create table y(t timestamp);
insert into x values('2015-05-15 01:02:03');
select t < '2015-05-15 01:02:03' from x;


[eric@localhost Manual]$ ./dates.sh 
DROP TABLE
CREATE TABLE
INSERT 0 1
 ?column? 
----------
 f
 f
(2 rows)

/ 13	. 

/ met de hand	,

foo=> drop table if exists u;select cast(t as date) into u  from y;
DROP TABLE
SELECT 1
foo=> \d u
     Table "public.u"
 Column | Type | Modifiers 
--------+------+-----------
 t      | date | 

/ 13	. 

foo=> \d y
                 Table "public.y"
 Column |            Type             | Modifiers 
--------+-----------------------------+-----------
 t      | timestamp without time zone | 


foo=> select*from y where '2015-05-16' <= t and t <= '2015-06-17';
/ of	,
foo=> select*from y where t between '2015-05-16'  and  '2015-06-17';
          t          
---------------------
 2015-05-16 07:08:09
 2015-06-16 07:08:09
(2 rows)

where sh.requested_departure_after between '2015-05-21'  and  '2015-05-31' as timestamp)

/ 13	. 

/ comment in sql script met --	,

/ 13	. 

[eric@localhost Rapport]$ ls

shipment_order_screenExtractV9.jrxml   
/ orig jasper report file	,
shipment_order_screenExtractV9.sql
/ orig query uit jasper report file	,
shipment_order_screenExtractV9.sh
/ script die uses shipment_order_screenExtractV9.sql

$ vi shipment_order_screenExtractV9.sh
time PGPASSWORD=mpopostgres@mpo psql -U mpopostgres pnloms7 <shipment_order_screenExtractV9.sql
real	0m9.753s
user	0m0.008s
sys	0m0.004s
/ Dus over 10 dagen ongeveer 10 sec	, 

$ vi shipment_order_screenExtractV9.sql
...
where sh.requested_departure_after between  '2015-05-21'  and '2015-05-31'

/ 13	. 

my-shipment_order_screenExtractV9.sql  
/ mijn aanpassingen	,

/ 7	. 

/ we oef. met subselect vervangen	, 

$ vi subselect.sql

drop table if exists p;create table p(i int,i2 int,i3 int,a varchar);
drop table if exists g;create table g(j int,b varchar);
drop table if exists s;create table s(k int);
insert into p values(1,2,3,'Foo');
insert into g values(2,'V');
insert into s values(3);

select
k,
(select a 
from p join g on p.i2=g.j and g.b='V'
where p.i3=s.k
)
from s;

-- of zo	,

select k,p.a 
from s
join p on p.i3=s.k
join g on p.i2=g.j and g.b='V'


[eric@localhost Manual]$ ./subselect.sh 
 k |  a  
---+-----
 3 | Foo
(1 row)

 k |  a  
---+-----
 3 | Foo
(1 row)

/ 7	. 

[eric@localhost Manual]$ pwd
/home/eric/Devel/Postgres/scripts/Manual

subselect2.sql		zonder s	,
subselect2a.sql	 	met s	,	
subselect2b.sql	  	subselects vervangen door joins	, TODO	
subselect2m.sql	 	s heet sh, p heet shod	, g heet edt	,	
subselect2am.sql	 	,,	
subselect2bm.sql	 ,, 

subselect2am2.sql	  / we snappen dat joins 1 rij geeft, net als de subselects	,

/ 7	. 

[eric@localhost Rapport]$ pwd
/home/eric/Devel/Postgres/scripts/SCS/Rapport
$ vi my-shipment_order_screenExtractV9_edt2.sql

SELECT
sh.system_id,
sh.SHIPMENT_ORDER_ID,
-- shod.field_value,
shod.*,
edt.system_id,
edt.name


from shipment_order sh

  join shipment_order_detail shod on shod.entity_systemid = sh.system_id
  left join entity_detail_type edt on shod.edt_systemid = edt.system_id  and edt.name='laadvenstertype'


 where sh.system_id=26875783;

/ de 1ste join kan ook left join	, 
/ de 2de join kan ook zonder left	, als je de conditie and edt.name='laadvenstertype' weglaat	,
/ er zijn 21 entries in de shod join table bij deze sho	, dus 21 entity detail types zoals 'laadvenstertype'	,
/ 1 ervan heeft type 'laadvenstertype'	, als we de 2de join left join doen, dan zien we 21 entries	, maar 20 entity_detail_type  zijn leeg	, als we de 2de join join doen, dan zien we 1 entry	,

/ we zien	,

[eric@localhost Rapport]$ ./my-shipment_order_screenExtractV9_edt2.sh 
 system_id |  shipment_order_id   | entity_systemid | edt_systemid |     field_value     | system_id |      name       
-----------+----------------------+-----------------+--------------+---------------------+-----------+-----------------
  26875783 | SH000009402-20150521 |        26875783 |     26673491 | B                   |  26673491 | laadvenstertype
  26875783 | SH000009402-20150521 |        26875783 |     26673790 | B                   |           | 
  26875783 | SH000009402-20150521 |        26875783 |     26673820 |                     |           | 
  26875783 | SH000009402-20150521 |        26875783 |     26674124 | 1                   |           | 
  26875783 | SH000009402-20150521 |        26875783 |     26674127 | 0                   |           | 
  26875783 | SH000009402-20150521 |        26875783 |     26678883 |                     |           | 
  26875783 | SH000009402-20150521 |        26875783 |     26680301 |                     |           | 
  26875783 | SH000009402-20150521 |        26875783 |     26680940 | 171                 |           | 
  26875783 | SH000009402-20150521 |        26875783 |     26684117 | 5232BV2V            |           | 
  26875783 | SH000009402-20150521 |        26875783 |     26684145 | 3439NT80S           |           | 
  26875783 | SH000009402-20150521 |        26875783 |     26684532 | INTER               |           | 
  26875783 | SH000009402-20150521 |        26875783 |     26684556 |                     |           | 
  26875783 | SH000009402-20150521 |        26875783 |     26684766 | Centrum             |           | 
  26875783 | SH000009402-20150521 |        26875783 |     26685473 | NWR                 |           | 
  26875783 | SH000009402-20150521 |        26875783 |     26685833 | 44                  |           | 
  26875783 | SH000009402-20150521 |        26875783 |     26694522 |                     |           | 
  26875783 | SH000009402-20150521 |        26875783 |     26694524 |                     |           | 
  26875783 | SH000009402-20150521 |        26875783 |     26704472 |                     |           | 
  26875783 | SH000009402-20150521 |        26875783 |     26716321 | 1                   |           | 
  26875783 | SH000009402-20150521 |        26875783 |     26800962 |                     |           | 
  26875783 | SH000009402-20150521 |        26875783 |     26827906 | info@mp-objects.com |           | 
(21 rows)

/ als we	,

rom shipment_order sh

  join shipment_order_detail shod on shod.entity_systemid = sh.system_id
  join entity_detail_type edt on shod.edt_systemid = edt.system_id  and edt.name='laadvenstertype'

/ dan zien we,	

[eric@localhost Rapport]$ ./my-shipment_order_screenExtractV9_edt2.sh 
 system_id |  shipment_order_id   | entity_systemid | edt_systemid | field_value | system_id |      name       
-----------+----------------------+-----------------+--------------+-------------+-----------+-----------------
  26875783 | SH000009402-20150521 |        26875783 |     26673491 | B           |  26673491 | laadvenstertype
(1 row)


real	0m0.008s
user	0m0.001s
sys	0m0.003s

/ 7	.

/ we doen dit na	, 


[eric@localhost Manual]$ pwd
/home/eric/Devel/Postgres/scripts/Manual
$ vi edt.sql
drop table if exists shod;create table shod(i int,r_s int,r_d int,val varchar);
drop table if exists sh;create table sh(k int);
drop table if exists edt;create table edt(j int,name varchar);

insert into shod values(111,1,11,'val111');
insert into shod values(112,1,12,'val112');
insert into sh values(1),(2);
insert into edt values(11,'name11');
insert into edt values(12,'name12');

select*from sh;
select*from shod;
select*from edt;

select*
from sh
left join shod on sh.k=shod.r_s
left join edt on shod.r_d=edt.j  and edt.name='name11';

/ er is maar 1 edt met deze name	, 
/ we zien	,

k |  i  | r_s | r_d |  val   | j  |  name  
---+-----+-----+-----+--------+----+--------
 1 | 111 |   1 |  11 | val111 | 11 | name11
 1 | 112 |   1 |  12 | val112 |    | 
 2 |     |     |     |        |    | 
(3 rows)

/ als we	,
select*
from sh
left join shod on sh.k=shod.r_s
join edt on shod.r_d=edt.j  and edt.name='name11';
;

/ dan zien we	,
k |  i  | r_s | r_d |  val   | j  |  name  
---+-----+-----+-----+--------+----+--------
 1 | 111 |   1 |  11 | val111 | 11 | name11
(1 row)

/ 7	. 

/ we nemen een edt.name die niet voorkomt	,

select*
from sh
left join shod on sh.k=shod.r_s
join edt on shod.r_d=edt.j  and edt.name='name13';
;

select*
from sh
left join shod 
join edt on shod.r_d=edt.j  and edt.name='name13'
on sh.k=shod.r_s
;

/ we zien	,

 k | i | r_s | r_d | val | j | name 
---+---+-----+-----+-----+---+------
(0 rows)

 k | i | r_s | r_d | val | j | name 
---+---+-----+-----+-----+---+------
 1 |   |     |     |     |   | 
 2 |   |     |     |     |   | 
(2 rows)

/ HIER HIER HIER




/ 7	.



/ Einde POSTGRESQL

/ POSTGRESQL EXPLAIN

/ Geef in google	,

/ Lees  ,
http://stackoverflow.com/questions/117262/what-is-postgresql-explain-telling-me-exactly
/ die refs naar ,
https://wiki.postgresql.org/images/4/45/Explaining_EXPLAIN.pdf
/ en	,
http://postgresguide.com/performance/explain.html


/ Einde POSTGRESQL EXPLAIN

/ POSTGRESQL PL/PGSQL

/ 7	.

/ Lees	,
http://www.postgresql.org/docs/9.3/static/plpgsql-structure.html

/ lees	,
http://stackoverflow.com/questions/1295520/good-resources-for-learning-pl-pgsql
http://postgres.cz/wiki/PostgreSQL_SQL_Tricks

/ Lees	,
http://www.joeconway.com/presentations/function_basics.pdf

/ Lees	,
https://wiki.postgresql.org/images/4/45/Explaining_EXPLAIN.pdf



[eric@localhost Manual]$ pwd
/home/eric/Devel/Postgres/scripts/Manual

/ we hebben 2 sh scripts, 	 
9.3_40.sh		: calls 9.3_40.sql	, 
9.3_40_2.sh		: niet-interactive psql	, om bepaalde queries uit te voeren	,


[eric@localhost Manual]$ cat 9.3_40.sql 
create or replace function fct() returns integer as 
$$
declare 
	quantity integer:=30;
begin
	raise notice 'Quantity here is %', quantity; -- prints
	return quantity;
end;
$$
language plpgsql;
select fct();

[eric@localhost Manual]$ cat 9.3_40.sh 
PGPASSWORD=foo psql -U foo <9.3_40.sql

[eric@localhost Manual]$ ./9.3_40.sh 
CREATE FUNCTION
NOTICE:  Quantity here is 30
 fct 
-----
  30
(1 row)

/ 7	. 

/ we maken een 'gewoon' sql script, maar er staan nu fcts in	, dat is pl/pgsql	,

$ vi 9.3_40.sql


create or replace function fct1() returns integer as $$
declare
    quantity integer:=30;
begin
    raise notice 'Quantity here is %', quantity; -- prints
    return quantity;
end;
$$
language plpgsql;
select fct1();

delete from ob;
delete from oc;
create or replace function fct2() returns void as $$
begin
    perform 'select 1';
    -- perform 'delete from ob';        -- werkt niet   , 
    for i in 1..1000 loop
        insert into ob values(i,i);
        insert into oc values(i,i);
    end loop;
    -- select * into rows from ob;      -- declare rows ,
end;

$$
language plpgsql;
select fct2();

/ 7	. 

/ er is een verschil in psql tussen interactive en scripting,	

/ we kunnen psql interactive	,
foo=> select*from ob;
/ hij geeft maar zoveel rows als er in het window passen	, en voor de rest moeten we scroll	,
foo=> select*from ob;
 i   |  j   
------+------
    1 |    1
    2 |    2
    3 |    3
    4 |    4
    5 |    5
    6 |    6
    7 |    7
    8 |    8
    9 |    9
   10 |   10
   11 |   11
   12 |   12
   13 |   13
   14 |   14
   15 |   15
   16 |   16
   17 |   17
   18 |   18
   19 |   19
   20 |   20
   21 |   21
/ Geef voor elke nieuwe row enter	,
   22 |   22
   23 |   23
   24 |   24
   25 |   25
   26 |   26
/ Geeft ctrl+c	,
foo=> explain select*from ob;
                      QUERY PLAN                      
------------------------------------------------------
 Seq Scan on ob  (cost=0.00..15.00 rows=1000 width=8)
(1 row)

[eric@localhost foo]$ cat 9.3_40_2.sh 
PGPASSWORD=foo psql -U foo <<MY_SQL
select*from ob
MY_SQL
[eric@localhost foo]$ ./9.3_40_2.sh 
/ Geeft alle rijen	,

/ 7	. 

/ we kunnen met select into een niet bestaande table opgeven (of een temp table TODO)	, en daar komen dan de results in	
/ Kun je ook zeggen: select, maar discard de results, dus ik wil alleen meten hoe lang het duurt om de resultset te create	,

$ vi 9.3_40_2.sh
time PGPASSWORD=foo psql -U foo <<MY_SQL
drop table od;
select * into od 
from ob
,oc
MY_SQL

/ Hierna,	 in interactive psql	,
foo=> \d+ od
                          Table "public.od"
 Column |  Type   | Modifiers | Storage | Stats target | Description 
--------+---------+-----------+---------+--------------+-------------
 i      | integer |           | plain   |              | 
 j      | integer |           | plain   |              | 
 k      | integer |           | plain   |              | 
 l      | integer |           | plain   |              | 
Has OIDs: no

$ vi 9.3_40_2.sh
time PGPASSWORD=foo psql -U foo <<MY_SQL
drop table if exists od;
explain analyze select * into od 
from ob
,oc
MY_SQL

[eric@localhost foo]$ ./9.3_40_2.sh 
DROP TABLE
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Nested Loop  (cost=0.00..12532.50 rows=1000000 width=16) (actual time=0.018..144.201 rows=1000000 loops=1)
   ->  Seq Scan on ob  (cost=0.00..15.00 rows=1000 width=8) (actual time=0.005..0.138 rows=1000 loops=1)
   ->  Materialize  (cost=0.00..20.00 rows=1000 width=8) (actual time=0.000..0.042 rows=1000 loops=1000)
         ->  Seq Scan on oc  (cost=0.00..15.00 rows=1000 width=8) (actual time=0.007..0.090 rows=1000 loops=1)
 Total runtime: 1262.246 ms
(5 rows)

/ 13	. 

/ maar	,

$ vi 9.3_40_2.sh
time PGPASSWORD=foo psql -U foo <<MY_SQL
drop table if exists od;
explain analyze select count(*)
from ob
,oc
MY_SQL

[eric@localhost foo]$ ./9.3_40_2.sh 
DROP TABLE
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=15032.50..15032.51 rows=1 width=0) (actual time=162.304..162.304 rows=1 loops=1)
   ->  Nested Loop  (cost=0.00..12532.50 rows=1000000 width=0) (actual time=0.012..111.458 rows=1000000 loops=1)
         ->  Seq Scan on ob  (cost=0.00..15.00 rows=1000 width=0) (actual time=0.004..0.086 rows=1000 loops=1)
         ->  Materialize  (cost=0.00..20.00 rows=1000 width=0) (actual time=0.000..0.040 rows=1000 loops=1000)
               ->  Seq Scan on oc  (cost=0.00..15.00 rows=1000 width=0) (actual time=0.006..0.078 rows=1000 loops=1)
 Total runtime: 162.344 ms
(6 rows)

/ en	,

[eric@localhost foo]$ ./9.3_40_2.sh 
time PGPASSWORD=foo psql -U foo <<MY_SQL
drop table if exists od;
select count(*)
from ob
,oc
MY_SQL

[eric@localhost foo]$ ./9.3_40_2.sh 
NOTICE:  table "od" does not exist, skipping
DROP TABLE
  count  
---------
 1000000
(1 row)

real	0m0.062s
user	0m0.002s
sys	0m0.001s

/ en	,

[eric@localhost foo]$ ./9.3_40_2.sh 

time PGPASSWORD=foo psql -U foo <<MY_SQL
drop table if exists od;
select * into od 
from ob
,oc
MY_SQL


[eric@localhost foo]$ ./9.3_40_2.sh 
NOTICE:  table "od" does not exist, skipping
DROP TABLE
SELECT 1000000

real	0m1.095s
user	0m0.000s
sys	0m0.003s







/ Einde POSTGRESQL PL/PGSQL

/ HIBERNATE CRITERIA DEBUG

/ Intermezzo
			List objects=session.createCriteria(Address.class)
/ valt in de ctor van CreateImpl	,
				.createCriteria("employees")
/ valt in de ctor van CreateImpl$Subcriteria	,

/ In meer detail	,

			List objects=session.createCriteria(Address.class)
/s
	public CriteriaImpl(String entityOrClassName, SessionImplementor session) {
		this(entityOrClassName, ROOT_ALIAS, session);
/s
	public CriteriaImpl(String entityOrClassName, String alias, SessionImplementor session) {
		this.session = session;
		this.entityOrClassName = entityOrClassName;
		this.cacheable = false;
		this.rootAlias = alias;
	}
/s
	private List<Subcriteria> subcriteriaList = new ArrayList<Subcriteria>();

			List objects=session.createCriteria(Address.class)
/s
	public CriteriaImpl(String entityOrClassName, SessionImplementor session) {
		this(entityOrClassName, ROOT_ALIAS, session);
/s
	public CriteriaImpl(String entityOrClassName, String alias, SessionImplementor session) {
		this.session = session;
		this.entityOrClassName = entityOrClassName;
		this.cacheable = false;
		this.rootAlias = alias;
	}
/s
	private List<Subcriteria> subcriteriaList = new ArrayList<Subcriteria>();

				.createCriteria("employees")
/s
	public Criteria createCriteria(String associationPath) {
224		return createCriteria( associationPath, JoinType.INNER_JOIN );
/s
	public Criteria createCriteria(String associationPath, JoinType joinType) {
		return new Subcriteria( this, associationPath, joinType );
/s
CriteriaImpl$Subcriteria.<init>(CriteriaImpl, Criteria, String, JoinType, CriteriaImpl$1) line: 444	


/ Einde Intermezzo





/ 7	.

			List objects=session.createCriteria(Address.class)

/ we zien	,

select this_.id__ as id__1_0_1_, this_.address_line1__ as address_2_0_1_, this_.zipcode__ as zipcode_3_0_1_, this_.city__ as city__4_0_1_, 
	employee1_.id_ as id_1_1_0_, employee1_.name_ as name_2_1_0_, employee1_.salary_ as salary_3_1_0_, employee1_.address_ as address_4_1_0_, employee1_.living_ as living_5_1_0_ 
from address_coll this_ 
inner join employee_coll employee1_ on this_.id__=employee1_.address_ 
where this_.zipcode__ like ?
HibernateLog --> 10:47:37 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [%Work]

/s
	public CriteriaImpl(String entityOrClassName, SessionImplementor session) {
		this(entityOrClassName, ROOT_ALIAS, session);

/ Intermezzo

public class CriteriaImpl implements Criteria, Serializable {

public interface Criteria extends CriteriaSpecification {

public interface CriteriaSpecification {

	/**
	 * The alias that refers to the "root" entity of the criteria query.
	 */
	public static final String ROOT_ALIAS = "this";

	/**
	 * Each row of results is a <tt>Map</tt> from alias to entity instance
	 */
	public static final ResultTransformer ALIAS_TO_ENTITY_MAP = AliasToEntityMapResultTransformer.INSTANCE;

	/**
	 * Each row of results is an instance of the root entity
	 */
	public static final ResultTransformer ROOT_ENTITY = RootEntityResultTransformer.INSTANCE;

	/**
	 * Each row of results is a distinct instance of the root entity
	 */
	public static final ResultTransformer DISTINCT_ROOT_ENTITY = DistinctRootEntityResultTransformer.INSTANCE;

	/**
	 * This result transformer is selected implicitly by calling <tt>setProjection()</tt>
	 */
	public static final ResultTransformer PROJECTION = PassThroughResultTransformer.INSTANCE;

/ Einde Intermezzo

			List objects=session.createCriteria(Address.class)
				.add(Restrictions.like("zipcode", "%Work"))
/s
	public static SimpleExpression like(String propertyName, Object value) {
		// todo : update this to use LikeExpression
		return new SimpleExpression( propertyName, value, " like " );
/t
/s
CriteriaImpl.add(Criterion) line: 172	
		add( this, expression );
/ this=CriteriaImpl inst	,

/t
			List objects=session.createCriteria(Address.class)
				.add(Restrictions.like("zipcode", "%Work"))
				.createCriteria("employees")
/s
	public Criteria createCriteria(String associationPath) {
		return createCriteria( associationPath, JoinType.INNER_JOIN );
/s
	public Criteria createCriteria(String associationPath, JoinType joinType) {
		return new Subcriteria( this, associationPath, joinType );
/ this=CriteriaImpl inst	,
/ associationPath="employees"
/s
		private Subcriteria(Criteria parent, String path, JoinType joinType) {
			this( parent, path, null, joinType );
/s
		private Subcriteria(Criteria parent, String path, String alias, JoinType joinType) {
			this( parent, path, alias, joinType, null );
/s
		private Subcriteria(Criteria parent, String path, String alias, JoinType joinType, Criterion withClause) {
			this.alias = alias;
			this.path = path;
			this.parent = parent;
			this.joinType = joinType;
			this.withClause = withClause;
			this.hasRestriction = withClause != null;
			CriteriaImpl.this.subcriteriaList.add( this );
this	CriteriaImpl$Subcriteria  (id=95)	
parent	CriteriaImpl  (id=53)	
path	"employees" (id=92)	
alias	null	
joinType	JoinType  (id=99)	
withClause	null	

/t
			List objects=session.createCriteria(Address.class)
				.add(Restrictions.like("zipcode", "%Work"))
				.createCriteria("employees")
				.setResultTransformer(org.hibernate.Criteria.ALIAS_TO_ENTITY_MAP)
/s
CriteriaImpl$Subcriteria.setResultTransformer(ResultTransformer) line: 675	
		public Criteria setResultTransformer(ResultTransformer resultProcessor) {
			CriteriaImpl.this.setResultTransformer(resultProcessor);

/ is inderdaad op de sub criteria	,

/ maar toch 	,
CriteriaImpl.setResultTransformer(ResultTransformer) line: 265	
/ Dus WH maakt het niet uit waar je .setResultTransformer neer zet, op de criteria of op een sub criteria	,

/t
			List objects=session.createCriteria(Address.class)
				.add(Restrictions.like("zipcode", "%Work"))
				.createCriteria("employees")
				.setResultTransformer(org.hibernate.Criteria.ALIAS_TO_ENTITY_MAP)
				.list();		
/s
CriteriaImpl$Subcriteria.list() line: 619	
		before();
		if ( flushMode != null ) {
/ TODO 
		if ( cacheMode != null ) {
/ TODO 

/t
			return CriteriaImpl.this.list();
/s
CriteriaImpl.list() line: 378	
			return session.list( this );
/s
SessionImpl.list(Criteria) line: 1657	

		String[] implementors = factory.getImplementors( criteriaImpl.getEntityOrClassName() );
[my.test.own.hibernate_xml_N_1_bidir_fetch_coll_ehcache.Address]

			loaders[i] = new CriteriaLoader(
					getOuterJoinLoadable( implementors[i] ),
					factory,
					criteriaImpl,
					implementors[i],
					getLoadQueryInfluencers()
				);
/s
CriteriaLoader.<init>(OuterJoinLoadable, SessionFactoryImplementor, CriteriaImpl, String, LoadQueryInfluencers) line: 88	
		super( factory, loadQueryInfluencers );

		translator = new CriteriaQueryTranslator(
				factory, 
				criteria, 
				rootEntityName, 
				CriteriaQueryTranslator.ROOT_SQL_ALIAS
			);

/ Intermezzo

public class CriteriaQueryTranslator implements CriteriaQuery {
	public static final String ROOT_SQL_ALIAS = Criteria.ROOT_ALIAS + '_';
this_

/ Einde Intermezzo

	public CriteriaQueryTranslator(
			final SessionFactoryImplementor factory,
	        final CriteriaImpl criteria,
	        final String rootEntityName,
	        final String rootSQLAlias) throws HibernateException {
		this.rootCriteria = criteria;
		this.rootEntityName = rootEntityName;
		this.sessionFactory = factory;
		this.rootSQLAlias = rootSQLAlias;
		this.helper = new SessionFactoryHelper(factory);
		createAliasCriteriaMap();
		createAssociationPathCriteriaMap();
		createCriteriaEntityNameMap();
		createCriteriaSQLAliasMap();

/ criteria=CriteriaImpl(my.test.own.hibernate_xml_N_1_bidir_fetch_coll_ehcache.Address:this[Subcriteria(employees:)][zipcode like %Work])
/ rootSQLAlias=this_


		createAliasCriteriaMap();
/s
CriteriaQueryTranslator.createAliasCriteriaMap() line: 151	
		aliasCriteriaMap.put( rootCriteria.getAlias(), rootCriteria );
/ rootCriteria.getAlias()="this"

		Iterator<CriteriaImpl.Subcriteria> iter = rootCriteria.iterateSubcriteria();
		while ( iter.hasNext() ) {
			Criteria subcriteria = iter.next();
			if ( subcriteria.getAlias() != null ) {
/ NEE
				Object old = aliasCriteriaMap.put( subcriteria.getAlias(), subcriteria );
/ NIET
/ Dit is WH verschil	,
	.createCriteria("employee")
/ en	,
	.createCriteria("employee","employee")


/t
		createAssociationPathCriteriaMap();
/s
		final Iterator<CriteriaImpl.Subcriteria> iter = rootCriteria.iterateSubcriteria();
		while ( iter.hasNext() ) {
			CriteriaImpl.Subcriteria crit = iter.next();
			String wholeAssociationPath = getWholeAssociationPath( crit );
"employees"
			Object old = associationPathCriteriaMap.put( wholeAssociationPath, crit );
			JoinType joinType = crit.getJoinType();
INNER_JOIN
			old = associationPathJoinTypesMap.put( wholeAssociationPath, joinType );

/t
		createCriteriaEntityNameMap();
/s
CriteriaQueryTranslator.createCriteriaEntityNameMap() line: 228	

		final CriteriaInfoProvider rootProvider = new EntityCriteriaInfoProvider(
				(Queryable) sessionFactory.getEntityPersister( rootEntityName )
		);
/ heeft Address-persister	,
		criteriaInfoMap.put( rootCriteria, rootProvider);
		nameCriteriaInfoMap.put( rootProvider.getName(), rootProvider );

		for ( final String key : associationPathCriteriaMap.keySet() ) {
/ key="employees"
			final Criteria value = associationPathCriteriaMap.get( key );
value	CriteriaImpl$Subcriteria  (id=95)	, 
Subcriteria(employees:)

			final CriteriaInfoProvider info = getPathInfo( key );
/ heeft Employee-perister	,
			criteriaInfoMap.put( value, info );
{CriteriaImpl(my.test.own.hibernate_xml_N_1_bidir_fetch_coll_ehcache.Address:this[Subcriteria(employees:)][zipcode like %Work])=org.hibernate.loader.criteria.EntityCriteriaInfoProvider@49f5cd23, 
Subcriteria(employees:)=org.hibernate.loader.criteria.EntityCriteriaInfoProvider@5cc0a9f2}

			nameCriteriaInfoMap.put( info.getName(), info );
{my.test.own.hibernate_xml_N_1_bidir_fetch_coll_ehcache.Address=org.hibernate.loader.criteria.EntityCriteriaInfoProvider@49f5cd23, 
my.test.own.hibernate_xml_N_1_bidir_fetch_coll_ehcache.Employee=org.hibernate.loader.criteria.EntityCriteriaInfoProvider@5cc0a9f2}

/t
createCriteriaSQLAliasMap


	private void createCriteriaSQLAliasMap() {
		for(final Criteria crit : criteriaInfoMap.keySet()){
			final CriteriaInfoProvider value = criteriaInfoMap.get( crit );
			String alias = crit.getAlias();
alias 	"this"
/ bij Address	,

			if ( alias == null ) {
				// the entity name
				alias = value.getName();
			}
alias	"my.test.own.hibernate_xml_N_1_bidir_fetch_coll_ehcache.Employee" (id=198)	
/ bij Employee	,

			criteriaSQLAliasMap.put( crit, StringHelper.generateAlias( alias, i++ ) );
this0_

		criteriaSQLAliasMap.put( rootCriteria, rootSQLAlias );
/ altijd	, maar hadden we zojuist al set	, door dezelfde erover heen	,

{CriteriaImpl(my.test.own.hibernate_xml_N_1_bidir_fetch_coll_ehcache.Address:this[Subcriteria(employees:)][zipcode like %Work])=this_, 
Subcriteria(employees:)=employee2_}

/t
CriteriaLoader.<init>(OuterJoinLoadable, SessionFactoryImplementor, CriteriaImpl, String, LoadQueryInfluencers) line: 95	

		translator = new CriteriaQueryTranslator(
				factory, 
				criteria, 
				rootEntityName, 
				CriteriaQueryTranslator.ROOT_SQL_ALIAS
			);
/d

		querySpaces = translator.getQuerySpaces();
[address_coll, employee_coll]

		CriteriaJoinWalker walker = new CriteriaJoinWalker(
				persister, 
				translator,
				factory, 
				criteria, 
				rootEntityName, 
				loadQueryInfluencers
			);
/s
	public AbstractEntityJoinWalker(
			OuterJoinLoadable persister,
			SessionFactoryImplementor factory,
			LoadQueryInfluencers loadQueryInfluencers,
			String alias) {
		super( factory, loadQueryInfluencers );
		this.persister = persister;
		this.alias = ( alias == null ) ? generateRootAlias( persister.getEntityName() ) : alias;
/ alias==null	, 
/ generateRootAlias( persister.getEntityName() )
/s
		return CriteriaQueryTranslator.ROOT_SQL_ALIAS;
"this_"

		if ( translator.hasProjection() ) {			
/ NEE
		else {
			initAll( translator.getWhereCondition(), translator.getOrderBy(), LockOptions.NONE );
			// root entity comes last
			userAliasList.add( criteria.getAlias() ); //root entity comes *last*
			resultTypeList.add( translator.getResultType( criteria ) );
			includeInResultRowList.add( true );
			userAliases = ArrayHelper.toStringArray( userAliasList );
			resultTypes = ArrayHelper.toTypeArray( resultTypeList );
			includeInResultRow = ArrayHelper.toBooleanArray( includeInResultRowList );
		}

...
CriteriaLoader(Loader).doList(SessionImplementor, QueryParameters, ResultTransformer) line: 2561	
			result = doQueryAndInitializeNonLazyCollections( session, queryParameters, true, forcedResultTransformer );
/ TODO



/ 13	. 

/ we slaan stuk over	,

/s
CriteriaJoinWalker(JoinWalker).addAssociationToJoinTree(AssociationType, String[], String, PropertyPath, int, JoinType) line: 256	

		OuterJoinableAssociation assoc = new OuterJoinableAssociation(
				path,
				type, 
				alias, 
				aliasedLhsColumns, 
				subalias, 
				joinType, 
				getWithClause(path),
				hasRestriction( path ),
				getFactory(),
				loadQueryInfluencers.getEnabledFilters()
		);

assoc	OuterJoinableAssociation  (id=465)	
	enabledFilters	HashMap<K,V>  (id=469)	
	hasRestriction	false	
	joinable	OneToManyPersister  (id=451)	
OneToManyPersister(my.test.own.hibernate_xml_N_1_bidir_fetch_coll_ehcache.Address.employees)
	joinableType	SetType  (id=416)	
	joinType	JoinType  (id=155)	
	lhsAlias	"this_" (id=128)	
	lhsColumns	String[1]  (id=442)	
[this_.id__]
	on	"" (id=477)	
	propertyPath	PropertyPath  (id=448)	
PropertyPath[employees]
	rhsAlias	"employee1_" (id=463)	
	rhsColumns	String[1]  (id=484)	
[address_]

/ 13	. 

/ Employee heeft ook een set	, voor deze wil H. ook een join create	, maar de joinType==NONE	, dus er gebeurt NIETS	, 

/ we komen weer in 	,

CriteriaJoinWalker(JoinWalker).walkEntityTree(OuterJoinLoadable, String, PropertyPath, int) line: 550	

		for ( int i = 0; i < n; i++ ) {
			Type type = persister.getSubclassPropertyType(i);
			if ( type.isAssociationType() ) {
				walkEntityAssociationTree(
					( AssociationType ) type,
					persister,
					i,
					alias,
					path,
					persister.isSubclassPropertyNullable(i),
					currentDepth
				);
/s
CriteriaJoinWalker(JoinWalker).walkEntityAssociationTree(AssociationType, OuterJoinLoadable, int, String, PropertyPath, boolean, int) line: 415	

		String[] aliasedLhsColumns = JoinHelper.getAliasedLHSColumnNames(
				associationType, alias, propertyNumber, persister, getFactory()
		);
[employee1_.living_]
		String[] lhsColumns = JoinHelper.getLHSColumnNames(
				associationType, propertyNumber, persister, getFactory()
		);
[living_]
		String lhsTable = JoinHelper.getLHSTableName(associationType, propertyNumber, persister);
employee_coll

		PropertyPath subPath = path.append( persister.getSubclassPropertyName(propertyNumber) );
PropertyPath[employees.living]
		JoinType joinType = getJoinType(
				persister,
				subPath,
				propertyNumber,
				associationType,
				persister.getFetchMode( propertyNumber ),
				persister.getCascadeStyle( propertyNumber ),
				lhsTable,
				lhsColumns,
				nullable,
				currentDepth
		);
NONE
		addAssociationToJoinTreeIfNecessary(
				associationType,
				aliasedLhsColumns,
				alias,
				subPath,
				currentDepth,
				joinType
		);
/ NIETS	, want joinType=NONE

/ 13	.

/ later	,

CriteriaJoinWalker(JoinWalker).initPersisters(List, LockOptions, JoinWalker$AssociationInitCallback) line: 1070	

/ TODO

/ Dan	,
CriteriaJoinWalker(AbstractEntityJoinWalker).initStatementString(String, String, String, String, LockOptions) line: 118	

this
	sql	"select this_.id__ as id__1_0_1_, this_.address_line1__ as address_2_0_1_, this_.zipcode__ as zipcode_3_0_1_, this_.city__ as city__4_0_1_, employee1_.id_ as id_1_1_0_, employee1_.name_ as name_2_1_0_, employee1_.salary_ as salary_3_1_0_, employee1_.address_ as address_4_1_0_, employee1_.living_ as living_5_1_0_ from address_coll this_ inner join employee_coll employee1_ on this_.id__=employee1_.address_ where this_.zipcode__ like ?" (id=791)	

/ 13

/t
CriteriaJoinWalker.<init>(OuterJoinLoadable, CriteriaQueryTranslator, SessionFactoryImplementor, CriteriaImpl, String, LoadQueryInfluencers, String) line: 125	
			initAll( translator.getWhereCondition(), translator.getOrderBy(), LockOptions.NONE );
/d

/t
CriteriaLoader.<init>(OuterJoinLoadable, SessionFactoryImplementor, CriteriaImpl, String, LoadQueryInfluencers) line: 106	
		CriteriaJoinWalker walker = new CriteriaJoinWalker(
				persister, 
				translator,
				factory, 
				criteria, 
				rootEntityName, 
				loadQueryInfluencers
			);
/d
		initFromWalker(walker);
/s
		persisters = walker.getPersisters();
		collectionPersisters = walker.getCollectionPersisters();
		ownerAssociationTypes = walker.getOwnerAssociationTypes();
		lockOptions = walker.getLockModeOptions();
		lockModeArray = walker.getLockModeArray();
		suffixes = walker.getSuffixes();
		collectionSuffixes = walker.getCollectionSuffixes();
		owners = walker.getOwners();
		collectionOwners = walker.getCollectionOwners();
		sql = walker.getSQLString();
		aliases = walker.getAliases();

/t
		userAliases = walker.getUserAliases();
		resultTypes = walker.getResultTypes();
		includeInResultRow = walker.includeInResultRow();
[false, true]
		resultRowLength = ArrayHelper.countTrue( includeInResultRow );

/t
SessionImpl.list(Criteria) line: 1681	

			loaders[i] = new CriteriaLoader(
					getOuterJoinLoadable( implementors[i] ),
					factory,
					criteriaImpl,
					implementors[i],
					getLoadQueryInfluencers()
				);
/d
			for( int i=0; i<size; i++ ) {
				final List currentResults = loaders[i].list(this);
...
/s
CriteriaLoader(Loader).doList(SessionImplementor, QueryParameters, ResultTransformer) line: 2553	
			result = doQueryAndInitializeNonLazyCollections( session, queryParameters, true, forcedResultTransformer );
/s
CriteriaLoader(Loader).doQueryAndInitializeNonLazyCollections(SessionImplementor, QueryParameters, boolean, ResultTransformer) line: 354	
				result = doQuery( session, queryParameters, returnProxies, forcedResultTransformer );
/s
CriteriaLoader(Loader).doQuery(SessionImplementor, QueryParameters, boolean, ResultTransformer) line: 920	
			return processResultSet( rs, queryParameters, session, returnProxies, forcedResultTransformer, maxRows, afterLoadActions );
/s
CriteriaLoader(Loader).processResultSet(ResultSet, QueryParameters, SessionImplementor, boolean, ResultTransformer, int, List<AfterLoadAction>) line: 949	
		for ( count = 0; count < maxRows && rs.next(); count++ ) {
			Object result = getRowFromResultSet(
					rs,
					session,
					queryParameters,
					lockModesArray,
					optionalObjectKey,
					hydratedObjects,
					keys,
					returnProxies,
					forcedResultTransformer
			);
/s
CriteriaLoader(Loader).getRowFromResultSet(ResultSet, SessionImplementor, QueryParameters, LockMode[], EntityKey, List, EntityKey[], boolean, ResultTransformer) line: 718	

		Object[] row = getRow(
				resultSet,
				persisters,
				keys,
				queryParameters.getOptionalObject(),
				optionalObjectKey,
				lockModesArray,
				hydratedObjects,
				session
		);
row	Object[2]  (id=965)	
	[0]	Employee  (id=966)	
	[1]	Address  (id=924)	
/ Altijd	,

		return forcedResultTransformer == null
/ JA
				? getResultColumnOrRow( row, queryParameters.getResultTransformer(), resultSet, session )
/s
resultTransformer	AliasToEntityMapResultTransformer  (id=842)	

/ Klopt	, we deden	,
			List objects=session.createCriteria(Address.class)
				.add(Restrictions.like("zipcode", "%Work"))
				.createCriteria("employees")
				.setResultTransformer(org.hibernate.Criteria.ALIAS_TO_ENTITY_MAP)
				.list();		

/t
/s
CriteriaLoader.getResultColumnOrRow(Object[], ResultTransformer, ResultSet, SessionImplementor) line: 148	
		return resolveResultTransformer( transformer ).transformTuple(
				getResultRow( row, rs, session),
				getResultRowAliases()
		);
/s
	protected ResultTransformer resolveResultTransformer(ResultTransformer resultTransformer) {
		return translator.getRootCriteria().getResultTransformer();
/ arg wordt niet used	, toch weer Criteria.ALIAS_TO_ENTITY_MAP	,
/t
/s
	protected Object[] getResultRow(Object[] row, ResultSet rs, SessionImplementor session)
			throws SQLException, HibernateException {
		else {
			result = toResultRow( row );
/s
CriteriaLoader.toResultRow(Object[]) line: 180	

///////////////////////////////////////////
/ HOW DOES CRITERIA RESULT SHOW , ALIAS_TO_ENTITY_MAP ->  HASHMAP	,
/ hierboven: de query geeft altijd Object[2]{Address, Employee}	, 

/ pakt alleen de 1ste	,

		else {
			Object[] result = new Object[ resultRowLength ];
			int j = 0;
			for ( int i = 0; i < row.length; i++ ) {
				if ( includeInResultRow[i] ) result[j++] = row[i];

/t
/s
	getResultRowAliases
[this]
/t
/s
AliasToEntityMapResultTransformer.transformTuple(Object[], String[]) line: 51	
		Map result = new HashMap(tuple.length);
		for ( int i=0; i<tuple.length; i++ ) {
			String alias = aliases[i];
			if ( alias!=null ) {
				result.put( alias, tuple[i] );
/ alias="this"
/ tuple[0]=Address


/ 7	.

				.createCriteria("employees", "employees")

select this_.id__ as id__1_0_1_, this_.address_line1__ as address_2_0_1_, this_.zipcode__ as zipcode_3_0_1_, this_.city__ as city__4_0_1_, 
	employees1_.id_ as id_1_1_0_, employees1_.name_ as name_2_1_0_, employees1_.salary_ as salary_3_1_0_, employees1_.address_ as address_4_1_0_, employees1_.living_ as living_5_1_0_ 
from address_coll this_ 
inner join employee_coll employees1_ on this_.id__=employees1_.address_ 
where this_.zipcode__ like ?
HibernateLog --> 10:59:25 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [%Work]

/s
	public Criteria createCriteria(String associationPath, String alias) {
		return createCriteria( associationPath, alias, JoinType.INNER_JOIN );
/s
	public Criteria createCriteria(String associationPath, String alias, JoinType joinType) {
		return new Subcriteria( this, associationPath, alias, joinType );
/ associationPath="employees"
/ alias="employees"

/ met .createCriteria("employees") is alias==null
/ WH
/ TODO

...
/s
			List objects=session.createCriteria(Address.class)
				.add(Restrictions.like("zipcode", "%Work"))
				.createCriteria("employees", "employees")
				.setResultTransformer(org.hibernate.Criteria.ALIAS_TO_ENTITY_MAP)
				.list();		
/s
SessionImpl.list(Criteria) line: 1663	
			loaders[i] = new CriteriaLoader(
					getOuterJoinLoadable( implementors[i] ),
					factory,
					criteriaImpl,
					implementors[i],
					getLoadQueryInfluencers()
				);
/s
CriteriaLoader.<init>(OuterJoinLoadable, SessionFactoryImplementor, CriteriaImpl, String, LoadQueryInfluencers) line: 86	
...
		CriteriaJoinWalker walker = new CriteriaJoinWalker(
				persister, 
				translator,
				factory, 
				criteria, 
				rootEntityName, 
				loadQueryInfluencers
		);
...
/s
CriteriaJoinWalker.<init>(OuterJoinLoadable, CriteriaQueryTranslator, SessionFactoryImplementor, CriteriaImpl, String, LoadQueryInfluencers, String) line: 123	
		else {
			initAll( translator.getWhereCondition(), translator.getOrderBy(), LockOptions.NONE );
...
/s
CriteriaJoinWalker(AbstractEntityJoinWalker).initAll(String, String, LockOptions, JoinWalker$AssociationInitCallback) line: 85	
		walkEntityTree( persister, getAlias() );
/s
		for ( int i = 0; i < n; i++ ) {
			Type type = persister.getSubclassPropertyType(i);
			if ( type.isAssociationType() ) {
				walkEntityAssociationTree(
					( AssociationType ) type,
					persister,
					i,
					alias,
					path,
					persister.isSubclassPropertyNullable(i),
					currentDepth
				);
			}
/s
CriteriaJoinWalker(JoinWalker).walkEntityAssociationTree(AssociationType, OuterJoinLoadable, int, String, PropertyPath, boolean, int) line: 415	
...
		addAssociationToJoinTreeIfNecessary(
				associationType,
				aliasedLhsColumns,
				alias,
				subPath,
				currentDepth,
				joinType
		);
/s
CriteriaJoinWalker(JoinWalker).addAssociationToJoinTree(AssociationType, String[], String, PropertyPath, int, JoinType) line: 238	
		// important to generate alias based on size of association collection
		// *before* adding this join to that collection
		String subalias = generateTableAlias( associations.size() + 1, path, joinable );
/s
CriteriaJoinWalker.generateTableAlias(int, PropertyPath, Joinable) line: 276	
			if (joinable.consumesEntityAlias() && ! translator.hasProjection()) {
				includeInResultRowList.add( subcriteria != null && subcriteria.getAlias() != null );
				if (sqlAlias!=null) {
					if ( subcriteria.getAlias() != null ) {
/ JA, als we .criteria("employees","employees")
/ NEE, als we .criteria("employees")
						userAliasList.add( subcriteria.getAlias() );
						resultTypeList.add( translator.getResultType( subcriteria ) );
					}
				}
			}

/t
CriteriaJoinWalker.<init>(OuterJoinLoadable, CriteriaQueryTranslator, SessionFactoryImplementor, CriteriaImpl, String, LoadQueryInfluencers, String) line: 128	
		else {
			initAll( translator.getWhereCondition(), translator.getOrderBy(), LockOptions.NONE );
/d
...
			resultTypeList.add( translator.getResultType( criteria ) );


/s
CriteriaJoinWalker.includeInResultRow() line: 82	
		return includeInResultRow;
[true,true]
		resultRowLength = ArrayHelper.countTrue( includeInResultRow );
/ 2

/t
SessionImpl.list(Criteria) line: 1646	
		for( int i=0; i <size; i++ ) {

			loaders[i] = new CriteriaLoader(
					getOuterJoinLoadable( implementors[i] ),
					factory,
					criteriaImpl,
					implementors[i],
					getLoadQueryInfluencers()
				);
/d
			for( int i=0; i<size; i++ ) {
				final List currentResults = loaders[i].list(this);
...
/s
CriteriaLoader(Loader).doQuery(SessionImplementor, QueryParameters, boolean, ResultTransformer) line: 920	
...
/s
CriteriaLoader.toResultRow(Object[]) line: 180	
		if ( resultRowLength == row.length ) {
/ JA	, 2==2
			return row;
/t
/s
	getResultRowAliases()
["employees","this"]
/t
/s
AliasToEntityMapResultTransformer.transformTuple(Object[], String[]) line: 51	

/ hij set ze er alle 2 in	,

		Map result = new HashMap(tuple.length);
		for ( int i=0; i<tuple.length; i++ ) {
			String alias = aliases[i];
			if ( alias!=null ) {
				result.put( alias, tuple[i] );



/ 7	. 

			List objects=session.createCriteria(Address.class)
				.createCriteria("employees")



CriteriaJoinWalker.<init>(OuterJoinLoadable, CriteriaQueryTranslator, SessionFactoryImplementor, CriteriaImpl, String, LoadQueryInfluencers, String) line: 132	
		else {
			initAll( translator.getWhereCondition(), translator.getOrderBy(), LockOptions.NONE );
			// root entity comes last
			userAliasList.add( criteria.getAlias() ); //root entity comes *last*
[this]
			resultTypeList.add( translator.getResultType( criteria ) );
[org.hibernate.type.ManyToOneType(my.test.own.hibernate_xml_N_1_bidir_fetch_coll_ehcache.Address)]
			includeInResultRowList.add( true );
[false, true]
			userAliases = ArrayHelper.toStringArray( userAliasList );
[this]
			resultTypes = ArrayHelper.toTypeArray( resultTypeList );
[org.hibernate.type.ManyToOneType(my.test.own.hibernate_xml_N_1_bidir_fetch_coll_ehcache.Address)]
			includeInResultRow = ArrayHelper.toBooleanArray( includeInResultRowList );
[false, true]

/ TODO

/ 7	.

				.createAlias("employees", "employees")
/=
				.createCriteria("employees", "employees")


			List objects=session.createCriteria(Address.class)
				.add(Restrictions.like("zipcode", "%Work"))
				.createAlias("employees", "employees")
				.setResultTransformer(org.hibernate.Criteria.ALIAS_TO_ENTITY_MAP)
				.list();		


				.createAlias("employees", "employees")
/s
	public Criteria createAlias(String associationPath, String alias) {
		return createAlias( associationPath, alias, JoinType.INNER_JOIN );
/s
	public Criteria createAlias(String associationPath, String alias, JoinType joinType) {
		new Subcriteria( this, associationPath, alias, joinType );

/ Dus precies hetzelfde als	

/ 7	.

			List objects=session.createCriteria(Address.class)
				.add(Restrictions.like("zipcode", "%Work"))
				.setFetchMode("employees", FetchMode.JOIN)
				.setResultTransformer(org.hibernate.Criteria.ALIAS_TO_ENTITY_MAP)
				.list();		

				.setFetchMode("employees", FetchMode.JOIN)
/s
CriteriaImpl.setFetchMode(String, FetchMode) line: 185	
	public Criteria setFetchMode(String associationPath, FetchMode mode) {
		fetchModes.put( associationPath, mode );

/t
				.list();		
/s
CriteriaJoinWalker.<init>(OuterJoinLoadable, CriteriaQueryTranslator, SessionFactoryImplementor, CriteriaImpl, String, LoadQueryInfluencers, String) line: 127	
			userAliasList.add( criteria.getAlias() ); //root entity comes *last*
[this]
			resultTypeList.add( translator.getResultType( criteria ) );
[org.hibernate.type.ManyToOneType(my.test.own.hibernate_xml_N_1_bidir_fetch_coll_ehcache.Address)]
			includeInResultRowList.add( true );
[false, true]
			userAliases = ArrayHelper.toStringArray( userAliasList );
[this]
			resultTypes = ArrayHelper.toTypeArray( resultTypeList );
[org.hibernate.type.ManyToOneType(my.test.own.hibernate_xml_N_1_bidir_fetch_coll_ehcache.Address)]
			includeInResultRow = ArrayHelper.toBooleanArray( includeInResultRowList );
[false, true]


/ Einde HIBERNATE CRITERIA DEBUG

/ HIBERNATE CRITERIA

file:///home/eric/Devel/Java/Ehcache/hibernate_xml_N_1_bidir_fetch_coll_ehcache 

/13	.

			List objects=session.createCriteria(Address.class)
				.add(Restrictions.like("zipcode", "%Work"))
				.createCriteria("employees")
				.setResultTransformer(org.hibernate.Criteria.ALIAS_TO_ENTITY_MAP)
				.list();		

Hibernate: select this_.id__ as id__1_0_1_, this_.address_line1__ as address_2_0_1_, this_.zipcode__ as zipcode_3_0_1_, this_.city__ as city__4_0_1_, 
	employee1_.id_ as id_1_1_0_, employee1_.name_ as name_2_1_0_, employee1_.salary_ as salary_3_1_0_, employee1_.address_ as address_4_1_0_, employee1_.living_ as living_5_1_0_ 
from address_coll this_ 
inner join employee_coll employee1_ on this_.id__=employee1_.address_ 
where this_.zipcode__ like ?
HibernateLog --> 11:22:25 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [%Work]

/ we zien 25 entries	, die uit alleen een Address bestaan,  5 verschillende Address, elk met PersistentSet leeg	, dus 5 entries hebben dezelfde Address	,

/ 13	.

			List objects=session.createCriteria(Address.class)
				.add(Restrictions.like("zipcode", "%Work"))
				.createCriteria("employees", "employees")
/=
				.createAlias("employees", "employees")
				.setResultTransformer(org.hibernate.Criteria.ALIAS_TO_ENTITY_MAP)
				.list();		


Hibernate: select this_.id__ as id__1_0_1_, this_.address_line1__ as address_2_0_1_, this_.zipcode__ as zipcode_3_0_1_, this_.city__ as city__4_0_1_, 
	employees1_.id_ as id_1_1_0_, employees1_.name_ as name_2_1_0_, employees1_.salary_ as salary_3_1_0_, employees1_.address_ as address_4_1_0_, employees1_.living_ as living_5_1_0_ 
from address_coll this_ 
inner join employee_coll employees1_ on this_.id__=employees1_.address_ 
where this_.zipcode__ like ?
HibernateLog --> 11:29:22 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [%Work]

/ we zien 25 entries	, die uit een Address en een Employee bestaan,  5 verschillende Address, elk met PersistentSet leeg	, en elke Address heeft andere Employee, dus 5 entries hebben dezelfde Address	, en een verschillende Employee	,

/ 13	.

			List objects=session.createCriteria(Address.class)
				.add(Restrictions.like("zipcode", "%Work"))
				.setFetchMode("employees", FetchMode.JOIN)
				.setResultTransformer(org.hibernate.Criteria.ALIAS_TO_ENTITY_MAP)
				.list();		
Hibernate: select this_.id__ as id__1_0_1_, this_.address_line1__ as address_2_0_1_, this_.zipcode__ as zipcode_3_0_1_, this_.city__ as city__4_0_1_, 
	employees2_.address_ as address_4_0_3_, employees2_.id_ as id_1_1_3_, employees2_.id_ as id_1_1_0_, employees2_.name_ as name_2_1_0_, employees2_.salary_ as salary_3_1_0_, employees2_.address_ as address_4_1_0_, employees2_.living_ as living_5_1_0_ 
from address_coll this_ 
left outer join employee_coll employees2_ on this_.id__=employees2_.address_ 
where this_.zipcode__ like ?
HibernateLog --> 11:34:10 TRACE org.hibernate.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [%Work]

/ we zien 25 entries	, die uit alleen een Address bestaan,  5 verschillende Address, elk met PersistentSet INITIALIZED, dus 5 entries hebben dezelfde Address	,





/ Einde HIBERNATE CRITERIA

/ SPRING 

/ 7	. 

/ we hadden in eclipse, in window, preferences, maven, archetypes	,
/ WH add remote catalog...
Remote: repo1
Edit
Catalog file: http://repo1.maven.org/maven2/archetype-catalog.xml
description: repo1

/ 7	. 

/ op de spring site, 
/ projects	, spring framework , quick start	,

<dependencies>
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-context</artifactId>
        <version>4.1.1.RELEASE</version>
    </dependency>
</dependencies>


/ we maken een maven-archetype-quickstart project spring_xml	,
group id: my.test.own
artifact id: spring_xml

/ 7	. 

/ we import spring_knight	,

$ vi pom.xml

	<dependency>
	    <groupId>org.springframework</groupId>
	    <artifactId>spring-context</artifactId>
	    <version>4.1.1.RELEASE</version>
	</dependency>
	
	<dependency>
	    <groupId>org.springframework</groupId>
	    <artifactId>spring-aspects</artifactId>
	    <version>4.1.1.RELEASE</version>
	</dependency>

    	<dependency>
      		<groupId>junit</groupId>
      		<artifactId>junit</artifactId>
      		<version>4.11</version>
      		<scope>test</scope>
    	</dependency>

	<dependency>
	    <groupId>log4j</groupId>
	    <artifactId>log4j</artifactId>
	    <version>1.2.17</version>
	</dependency>

/ we hoeven alleen spring-context en spring-aspects	,

[eric@localhost spring_knight]$ mvn dependency:tree

[INFO] sia.ch01:spring_knight:jar:1.0-SNAPSHOT
[INFO] +- junit:junit:jar:4.11:test
[INFO] |  \- org.hamcrest:hamcrest-core:jar:1.3:test
[INFO] +- org.springframework:spring-context:jar:4.1.1.RELEASE:compile
[INFO] |  +- org.springframework:spring-aop:jar:4.1.1.RELEASE:compile
[INFO] |  |  \- aopalliance:aopalliance:jar:1.0:compile
[INFO] |  +- org.springframework:spring-beans:jar:4.1.1.RELEASE:compile
[INFO] |  +- org.springframework:spring-core:jar:4.1.1.RELEASE:compile
[INFO] |  |  \- commons-logging:commons-logging:jar:1.1.3:compile
[INFO] |  \- org.springframework:spring-expression:jar:4.1.1.RELEASE:compile
[INFO] +- org.springframework:spring-aspects:jar:4.1.1.RELEASE:compile
[INFO] |  \- org.aspectj:aspectjweaver:jar:1.8.2:compile
[INFO] \- log4j:log4j:jar:1.2.17:compile

/ welke hebben we precies nodig	?
/ TODO

$ vi knight.xml		,

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="
    	http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd"
        
        >

	<bean 	
		id="quest" 
		class="sia.ch01.HolyGrailQuest">
	</bean>
	<bean 
		id="knight" 
		class="sia.ch01.KnightOfTheRoundTable">
        <property 
			name="quest" 
			ref="quest"
		/>
		<constructor-arg
			value="Bedivere"
		/>
	</bean>
	
	<bean
		id="minstrel"
		class="sia.ch01.Minstrel"
	></bean>
	
	<aop:config>
		<aop:aspect 
			ref="minstrel"
		>
			<aop:pointcut
				id="questPointcut"
				expression="execution(* *.embarkOnQuest(..)) and target(bean)"	
			/>
			<aop:before
				method="singBefore"
				pointcut-ref="questPointcut"
				arg-names="bean"
			/>
			<aop:after-returning
				method="singAfter"
				pointcut-ref="questPointcut"
				arg-names="bean"
			/>
		</aop:aspect>
	</aop:config>
	
	</beans>

$ vi App.java

	ApplicationContext c=new ClassPathXmlApplicationContext("knight.xml");
	Knight k=(Knight)c.getBean("knight");
	k.embarkOnQuest();	

/ 7	.

/ Einde SPRING

/ WICKET

/ Maak in eclipse een nieuwe maven project	, 
/ Location: Devel/Java/Wicket
/ org.apache.wicket:wicket-archetype-quickstart:7.0.0-M3
Group Id: my.test.own
Artifact Id: wicket_quickstart

/ maven	, Goals: jetty:run
/ OK
/ Geef localhost:8080
/ OK

11522  2909 11521 28370 pts/61   11521 Sl+   1000   0:12 /usr/lib/jvm/java-1.7.0-openjdk-1.7.0.71-2.5.3.0.fc20.x86_64/bin/java -agentlib:jdwp=transport=dt_socket,suspend=y,address=localhost:33492 -Dmaven.home=/usr/share/maven -Dclassworlds.conf=/home/eric/Devel/Java/Eclipse/eclipse-jee-test/workspace/.metadata/.plugins/org.eclipse.m2e.launching/launches/m2conf1527380789360839949.tmp -Dmaven.bootclasspath=/usr/share/maven/boot/plexus-classworlds.jar -Dfile.encoding=UTF-8 -classpath /usr/share/maven/boot/plexus-classworlds.jar org.codehaus.classworlds.Launcher -B -s /home/eric/.m2/settings.xml jetty:run

/ we kunnen dus debug	,
/ TODO

/ we kunnen ook in test/ Start start als Java application	,
/ OK
/ Geef localhost:9090
/ OK

/ stop zoals we altijd doen	,

/ 7	.

/ we willen 
$ mvn jetty:stop

/ Daarom moeten we 	,
			<plugin>
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-maven-plugin</artifactId>
				<version>${jetty9.version}</version>
				<configuration>
					<stopKey>stop</stopKey>
					<stopPort>1313</stopPort>
					<stopWait>10</stopWait>
...
				</configuration>
			</plugin>

/ Nu kunnen we 	,
$ mvn jetty:stop

 
/ 7	.

[eric@localhost Wicket]$ pwd
/home/eric/Devel/Java/Wicket
[eric@localhost Wicket]$ unzip  ~/Downloads/wicket-in-action-1.0-source.zip 
[eric@localhost Wicket]$ cd wicket-in-action-1.0/

 

/ Einde WICKET

/ WICKET GENERICS

/ Lees	,
http://brie.com/brian/blog/?p=61

[eric@localhost Wicket]$ unzip  ~/Downloads/hippo02.zip 
/ we edit	,
$ vi pom.xml
        <groupId>my.test.own</groupId>
        <artifactId>wicket_hippo02</artifactId>


/ 7	.

/ my.test.own.wicket_quickstart

$ vi MyPage2.java

ublic class MyPage2 extends WebPage {
	private TextField<Integer> field;

	public MyPage2(final PageParameters parameters) {
		field=new TextField<Integer>("field", new PropertyModel<Integer>(this, "counter"));
/ 2 generics moeten dezelfde zijn	,
				Integer value=field.getModelObject();
/ Moet Integer zijn	, omdat we niet

/ 7	.

		field=new TextField<Integer>("field", new Model<Integer>(7));
				Integer value=field.getModelObject();
/ OK

/ Intermezzo

/ int -> String	,

		Integer integer=7;
//		String string=(String)integer;
/ NEE
		int i=7;
//		String s=(String)i;
/ NEE
		String string=integer.toString();
	
		String s=String.valueOf(i);
		s=Integer.toString(i);


/ Einde Intermezzo


/ Einde WICKET GENERICS

/ WICKET MODELS

/ als we een nieuwe page maken, moeten we 	,

$ mvn test

/ omdat we Start ook willen run in src/test/java	,

--- maven-resources-plugin:2.6:resources (default-resources) @ wicket_quickstart ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 1 resource
[INFO] Copying 4 resources

[INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ wicket_quickstart ---
[INFO] Compiling 5 source files to /home/eric/Devel/Java/Wicket/wicket_quickstart/target/classes

[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ wicket_quickstart ---
[INFO] Copying 1 resource

[INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ wicket_quickstart ---
[INFO] Compiling 3 source files to /home/eric/Devel/Java/Wicket/wicket_quickstart/target/test-classes

[INFO] --- jetty-maven-plugin:9.2.2.v20140723:run (default-cli) @ wicket_quickstart ---
...

/ 7	.

		Serializable ser=MyTest.pick("d", new ArrayList<String>());
		
	}
	static<T>T pick(T a,T b){
		return b;
	}
/ OK

/ T=Serializable	,


/ 7	.

 List<A> is a subtype of List<?>

/ 7	.

$ vi Page3.java

/ in page	,
/ in form	,
		IModel<String>model=new Model<String>();
		field=new TextField<String>("field", model);
		
		Button button=new Button("submit"){
			public void onSubmit() {
				IModel<String>model=field.getModel();
				String value=model.getObject();
/*
				label.setDefaultModelObject(value);

/ in page,	
		label=new Label("message", new Model<String>(""));
		add(label);

		IModel<String>model2=(IModel<String>)label.getDefaultModel();
/**
		String string= model2.getObject();
/***
		
		Object object= label.getDefaultModelObject();
/****


/* 
/ Als we TextField<Integer> en z'n model ook , dan bij * ERR, niet vanwege de assign, maar intern in model.getObject()	, omdat deze method de "7" string wil cast naar Integer, 	en dat kan niet	, (we hadden 7 gegeven in de textfield)	,

/**
/ een form component doet een IModel<T> cast, over de IModel<?> heen, wij doen het hier dus zelf	,
/***
/ gaat dan vanzelf	,

/****
/  we kunnen alleen aan Object assign	,

/ 7	. 

/////////////////////////////////
/ VERSCHIL MODEL EN PROPERTYMODEL

/ bij 'n property model is de binding 2-way	, bij Model 1-way	, we moeten set value zelf doen	,

$ vi Page2.java


	public MyPage2(final PageParameters parameters) {
		super(parameters);
		
		Form<String>form=new Form<String>("form");				// we use form model niet, dus generics maakt niet uit	,
		IModel<Integer>model=new PropertyModel<Integer>(this, "counter");
		field=new TextField<Integer>("field", model);
		form.add(field);
		Button button=new Button("submit")
		form.add(button);
		add(form);

		label=new Label("message", new PropertyModel<X>(this, "counter"));
		add(label);

/ Dit is OK	, 

$ vi Page3.java

	public MyPage3(final PageParameters parameters) {
		super(parameters);
		
		Form<String>form=new Form<String>("form");
		
		IModel<String>model=new Model<String>();
		field=new TextField<String>("field", model);
		form.add(field);
		
		Button button=new Button("submit")
		{
			public void onSubmit() {
				IModel<String>model=field.getModel();
				String value=model.getObject();
				label.setDefaultModelObject(value);
/*
			}
		};
		form.add(button);
		add(form);
		
		IModel<String>model2=new Model<String>("");
		label=new Label("message", model2);
		add(label);
		

/* 
/ dit moeten we nu zelf doen	,

/ 7	.

$ vi MyPage3a.html

		{
		Label widget=new Label("dummy", 13);
		IModel<Integer>model=(IModel<Integer>)widget.getDefaultModel();
		Integer integer=model.getObject();
		boolean b=false;		
		}
		{
		IModel<Integer>model=new Model<Integer>(13);
		TextField<Integer>widget=new TextField<Integer>("dummy",model); 
		model=widget.getModel();
		Integer integer=model.getObject();
		boolean b=false;
		}
		{
		IModel<Integer>model=new Model<Integer>(13);	
		Label widget=new Label("dummy", model);
		model=(IModel<Integer>)widget.getDefaultModel();
		Integer integer=model.getObject();
		boolean b=false;
		}
/ OK
/ als widget 'n component is, dan getModel()=(IModel<T>)getDefaultModel()	, bij Label doen we dat met de hand	,

/ 7	.

/ Opmerkingen over Wicket	,

		IModel<String>model2=new Model<String>("");
		label=new Label("message", model2);
		add(label);
		
		IModel<String>model3=(IModel<String>)label.getDefaultModel();
		String string= model3.getObject();

		IModel<?>model4=label.getDefaultModel();
		Object object=model4.getObject();
/=
		Object object= label.getDefaultModelObject();

/ 7	

/ Page4	,

public class MyForm<T> extends Form<T>{
	public MyForm(String id) {
		super(id);
		
	}
}
/ we moeten super(id) call	, want Form<T> heeft geen default ctor	,

/ 7. 	


/ we hebben MyForm5	, MyPage5	, Person5	,

$ vi MyForm5.java

public class MyForm5<T extends Serializable> extends Form<T>{
	
	private T t;

	public T getT() {
		return t;
	}
	public void setT(T t) {
		this.t = t;
	}

	public MyForm5(String id) {
		super(id);
	}
	
	public void  set() {
		setModel(new Model<T>(t));

		IModel<String>nameModel=new PropertyModel<String>(t, "name");
		TextField<String>name=new TextField<String>("name", nameModel);
		add(name);

		IModel<String>addressModel=new PropertyModel<String>(t, "address");
		TextField<String>address=new TextField<String>("address", addressModel);
		add(address);

	}
	@Override
	protected void onSubmit() {
		IModel<T>model=this.getModel();
		T t=model.getObject();
		boolean b=false;
	}

$ vi MyPage5.java

public class MyPage5 extends WebPage {

	public MyPage5(final PageParameters parameters) {
		super(parameters);
		
		MyForm5<Person5>form=new MyForm5<Person5>("form");
		Person5 person=new Person5();
		form.setT(person5);
		form.set();
		add(form);
    }

$ vi MyPage5.html

		<form  wicket:id="form">
		
			<input  wicket:id="name" type="text">
			<br>
			<input wicket:id="address" type="text">
			<br>		
			<input  type="submit" value ="Set">
			
		</form>

$ vi Person5.java

public class Person5 implements Serializable{
	private String name;
	private String address;
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getAddress() {
		return address;
	}
	public void setAddress(String address) {
		this.address = address;
	}
}


/ we moeten T extends Serializable	,
/ anderrs gaat new Model<T>(t) NIET	,
public class MyForm5<T extends Serializable> extends Form<T>{
	public void  set() {
		setModel(new Model<T>(t));

/ we zien in submit, dat t een Person5	 is	,
/ In submit wilde we doen	,
	t.getName()
/ Maar dat kan niet	, omdat T extends Serializable	,

/ Ook Person5 implements Serializable, omdat er een Model omheen moet	,

/ 7	.

/ we hebben MyForm6, Person6, IP6, MyPage6	,

/ we willen MyForm6.onSubmit t.getName()	,  

$ vi MyForm6.java

public class MyForm6<T extends IP6> extends Form<T>{
	
	private T t;

	public T getT() {
		return t;
	}
	public void setT(T t) {
		this.t = t;
	}

	protected void onSubmit() {
		IModel<T>model=this.getModel();
		T t=model.getObject();
		boolean b=false;
		String name=t.getName();
		String address=t.getAddress();
		System.out.println(name);
		System.out.println(address);
		
	}
/ OK



	public MyPage6(final PageParameters parameters) {
		super(parameters);

		
		MyForm6<Person6>form6=new MyForm6<Person6>("form");
		Person6 person6=new Person6();
		form6.setT(person6);
		form6.set();
		add(form6);

/ we kunnen NIET 
		IP6 person6=new Person6();
		form6.setT(person6);

/ want MyForm6.setT verwacht een Person6	, niet een IP6	,

/ we kunnen OOK	,
		IP6 person6=new Person6();
		form6.setT((Person6)person6);

/ 7	.

/ MyForm7	, MyPage7	, Person7	,

/ met Person7.getAddress().getStreet()

$ vi MyForm7.java

public class MyForm7<T extends Serializable> extends Form<T>{

	public void  set() {
		setModel(new Model<T>(t));

		IModel<String>nameModel=new PropertyModel<String>(t, "name");
		TextField<String>name=new TextField<String>("name", nameModel);
		add(name);

		IModel<String>addressModel=new PropertyModel<String>(t, "address.street");
		TextField<String>address=new TextField<String>("address.street", addressModel);
		add(address);

	}

	protected void onSubmit() {
		IModel<T>model=this.getModel();
		T t=model.getObject();
		Person7 person7=(Person7)t;
		String name=person7.getName();
		String street=person7.getAddress().getStreet();
		System.out.println(name);
		System.out.println(street);
		boolean b=false;
	}

$ vi MyPage7.java

		MyForm7<Person7>form7=new MyForm7<Person7>("form");
		Person7 person7=new Person7();
		form7.setT(person7);
		form7.set();
		add(form7);

/ person.getName()==person.getAddress()==null	,


$ vi MyPage7.html

		<form  wicket:id="form">
		
			<input  wicket:id="name" type="text">
			<br>
			<input wicket:id="address.street" type="text">
			<br>		
			<input  type="submit" value ="Set">
			
		</form>

/ 7	. 

/ MyPage8.html, MyPage8.java, MyForm8.java, Person8.java	, Address8.java	,

/ CompoundPropertyModel	,

$ vi MyPage8.html
		<form  wicket:id="form">
		
			<input  wicket:id="name" type="text">
			<br>
			<input wicket:id="address.street" type="text">
			<br>		
			<input  type="submit" value ="Set">
			
		</form>

$ vi MyPage8.java

		MyForm8<Person8>form8=new MyForm8<Person8>("form");
		Person8 person8=new Person8();
		form8.setT(person8);
		form8.set();
		add(form8);

$ vi MyForm8.java

public class MyForm8<T extends Serializable> extends Form<T>{

	public void  set() {
		setModel(new CompoundPropertyModel<T>(t));

		TextField<String>name=new TextField<String>("name");
		add(name);

		TextField<String>street=new TextField<String>("address.street");
		add(street);

	}
	@Override
	protected void onSubmit() {
		IModel<T>model=this.getModel();
		T t=model.getObject();
		Person8 person8=(Person8)t;
		String name=person8.getName();
		String street=person8.getAddress().getStreet();
		System.out.println(name);
		System.out.println(street);
		boolean b=false;
	}


$ vi Person8.java

public class Person8 implements Serializable{
	private String name;
	private Address8 address;
...

$ vi Address8.java

public class Address8 implements Serializable{
	private String street;
...


/ Einde WICKET MODELS

/ WICKET LAYOUT

/ we maken in eclipse een nieuw wicket maven project	, wicket-book	, met de wicket-archetype-quickstart	,


/ 7	.

$ vi Ch710.java

public class Ch710 extends WebPage {
	private static final long serialVersionUID = 1L;

	public Ch710(final PageParameters parameters) {
		super(parameters);

		Label label=new Label("dexter", "Omelette du fromage");
		add(label);
		Label label2=new Label("deedee","That's all you can say!");
		add(label2);
    }
}

$ vi Ch710.html

	<body>
		<blockquote wicket:id="dexter"></blockquote>
		<blockquote wicket:id="deedee"></blockquote>
	</body>

/ we zien	,

<body>
		<blockquote wicket:id="dexter">Omelette du fromage</blockquote>
		<blockquote wicket:id="deedee">That's all you can say!</blockquote>
</body>

/ 7	.

$ vi C711.html

	<body>
		<div wicket:id="container">
			<blockquote wicket:id="dexter"></blockquote>
			<blockquote wicket:id="deedee"></blockquote>		
		</div>
		<a href="#" wicket:id="link">Visible</a>
	</body>

$ vi Ch711.java

		final WebMarkupContainer container=new WebMarkupContainer("container");
		add(container);

		Label label=new Label("dexter", "Omelette du fromage");
		container.add(label);
		Label label2=new Label("deedee","That's all you can say!");
		container.add(label2);
		
		Link<Integer>link=new Link<Integer>("link"){
			@Override
			public void onClick() {
				container.setVisible(! container.isVisible());
				
			}

		};
		add(link);

		Link<Integer>ajaxLink=new AjaxFallbackLink<Integer>("ajaxLink") {
			@Override
			public void onClick(AjaxRequestTarget target) {
				container.setVisible(! container.isVisible());
				if(target!=null){
					target.add(container);
				}
				
			}
		};
		container.setOutputMarkupPlaceholderTag(true);
		add(ajaxLink);

/ we zien	, als container zichtbaar	,

<body>
		<div wicket:id="container">
			<blockquote wicket:id="dexter">Omelette du fromage</blockquote>
			<blockquote wicket:id="deedee">That's all you can say!</blockquote>		
		</div>
		<a href="./?6-7.ILinkListener-link" wicket:id="link">Visible</a>
		<a href="./?0-1.ILinkListener-ajaxLink" wicket:id="ajaxLink" id="ajaxLink1">ajax Visible</a>
	

</body>

/ we zien	, als container niet zichtbaar	,

<body>
		<div id="container2" style="display:none"></div>
		<a href="./?5-6.ILinkListener-link" wicket:id="link">Visible</a>
		<a href="./?5-6.ILinkListener-ajaxLink" wicket:id="ajaxLink" id="ajaxLink1">ajax Visible</a>
</body>

/ 7	.

$ vi Ch711a.java

public class Ch711a extends WebPage {
	private static final long serialVersionUID = 1L;
	public class MyContainer extends WebMarkupContainer{
		public MyContainer(String id) {
			super(id);
			Label label=new Label("dexter", "Omelette du fromage");
			add(label);
			Label label2=new Label("deedee","That's all you can say!");
			add(label2);

		}
	}
	

	public Ch711a(final PageParameters parameters) {
		super(parameters);
		
		final WebMarkupContainer container=new MyContainer("container");
		add(container);

		
		Link<Integer>link=new Link<Integer>("link"){
			@Override
			public void onClick() {
				container.setVisible(! container.isVisible());
				
			}

		};
		add(link);
		
		Link<Integer>ajaxLink=new AjaxFallbackLink<Integer>("ajaxLink") {
			@Override
			public void onClick(AjaxRequestTarget target) {
				container.setVisible(! container.isVisible());
				if(target!=null){
					target.add(container);
				}
				
			}
		};
		container.setOutputMarkupPlaceholderTag(true);
		add(ajaxLink);
		
		
    } 

	
}

$ vi Ch711a.html

	<body>
		<div wicket:id="container">
			<blockquote wicket:id="dexter"></blockquote>
			<blockquote wicket:id="deedee"></blockquote>		
		</div>
		<a href="#" wicket:id="link">Visible</a>
		<a href="#" wicket:id="ajaxLink">ajax Visible</a>
	</body>

/ 7	.

/ we kunnen de MyContainer ook in eigen class file	,

$ vi MyContainer.java

public class MyContainer extends WebMarkupContainer{
	public MyContainer(String id) {
		super(id);
		Label label=new Label("dexter", "Omelette du fromage");
		add(label);
		Label label2=new Label("deedee","That's all you can say!");
		add(label2);

	}
}

$ vi Ch711b.java

public class Ch711b extends WebPage {
	private static final long serialVersionUID = 1L;

	public Ch711b(final PageParameters parameters) {
		super(parameters);
		
		final WebMarkupContainer container=new MyContainer("container");
		add(container);
...

/ 7	.

/ PANEL IN WICKET

/ panel

/ we kunnen ook <wicket:link> om de MyPanel.css niet in src/main/webapp te set, maar in src/main/java	,  

$ vi Ch712a.html

<body>
	<div wicket:id="container">This get's replaced</div>
	<div wicket:id="container2">This get's replaced</div>
		
	<a href="#" wicket:id="link">Visible</a>
	<a href="#" wicket:id="ajaxLink">ajax Visible</a>
	<a href="#" wicket:id="swapLink">swap</a>

</body>

$ vi MyPanel.html

<head>
<wicket:head>
	<wicket:link>
		<link href="MyPanel.css" rel="stylesheet"/>
	</wicket:link>
</wicket:head>
</head>
<body>
	<h1>This tag will not be used.</h1>
	<wicket:panel>
		<h3 wicket:id="dexter">This text will be overwritten<h3>
		<h3 wicket:id="deedee">This text will be overwritten</h3>
	</wicket:panel>
</body>

$ vi Ch712a.java

	private Component container;
	private Component container2;

	public Ch712a(final PageParameters parameters) {
		super(parameters);
		
		container=new MyPanel("container");
		add(container);
		container2=new MyPanel("container2");
		add(container2);
...
		Link<Integer>ajaxLink=new AjaxFallbackLink<Integer>("ajaxLink") {
			@Override
			public void onClick(AjaxRequestTarget target) {
				container.setVisible(! container.isVisible());
				if(target!=null){
					target.add(container);
				}
				
			}
		};
		container.setOutputMarkupPlaceholderTag(true);
//		container.setOutputMarkupId(true);
		add(ajaxLink);
...


$ vi MyPanel.java

public class MyPanel extends Panel{
	public MyPanel(String id) {
		super(id);
		Label label=new Label("dexter", "Omelette du fromage");
		add(label);
		Label label2=new Label("deedee","That's all you can say!");
		add(label2);

	}
}

$ vi WicketApplication.java

	public void init()
	{
		super.init();
		
		  getMarkupSettings().setStripWicketTags(true);


/ Voor ajax moeten we altijd  de container een id geven	,
	container.setOutputMarkupPlaceholderTag(true);
// of	,
	container.setOutputMarkupId(true);

/ Maar hier moeten we 
	container.setOutputMarkupPlaceholderTag(true);
/ want dan	, als er in HTML ,
<div id="container2">
	...
</div>
/ dan wordt deze vervangen door 
<div id="container2">/div>
/ Met container.setOutputMarkupId(true) gebeurt dat niet als we de component isVisible=false set	,	

/ we zien,	

<head>

	<link href="./wicket/resource/my.test.own.wicket_book.MyPanel/MyPanel-ver-1416219826000.css" rel="stylesheet">
	
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.resource.JQueryResourceReference/jquery/jquery-1.11.1-ver-1415797672000.js"></script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-event-jquery-ver-1415797672000.js"></script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-ajax-jquery-ver-1415797672000.js"></script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-ajax-jquery-debug-ver-1415797672000.js"></script>

	<meta charset="utf-8">
	<title>Apache Wicket Quickstart</title>
	<link href="http://fonts.googleapis.com/css?family=Yanone+Kaffeesatz:regular,bold" rel="stylesheet" type="text/css">
	<link rel="stylesheet" href="style.css" type="text/css" media="screen" title="Stylesheet">
</head>

</script>
	<meta charset="utf-8">
	<title>Apache Wicket Quickstart</title>
	<link href="http://fonts.googleapis.com/css?family=Yanone+Kaffeesatz:regular,bold" rel="stylesheet" type="text/css">
	<link rel="stylesheet" href="style.css" type="text/css" media="screen" title="Stylesheet">
<script type="text/javascript">
</script>
<div wicket:id="container" id="container2">
	<wicket:panel>
		<h3 wicket:id="dexter">Omelette du fromage</h3>
		<h3 wicket:id="deedee">That's all you can say!</h3>
	</wicket:panel>
</div>
		
<a href="./?2-3.ILinkListener-link" wicket:id="link">Visible</a>
<a href="./?2-3.ILinkListener-ajaxLink" wicket:id="ajaxLink" id="ajaxLink1">ajax Visible</a>


</body>


/ 13	. 
/ als we steeds 
localhost:8080

/ dus NIET reload localhost:8080/?12 bijv	,

/ dan zien we steeds een andere id in
<div wicket:id="container" id="container2">
/ id="container2"/ "containera" / ...

/ en de href's veranderen in	,
<a href="./?2-3.ILinkListener-link" wicket:id="link">Visible</a>
/ later	, "./?10-1.ILinkListener-link" 	, ...

/ 13	.

/ als niet visible, zien we alleen	,

<div wicket:id="container" id="container2"></div>

/ 13	. 

/ we add nog een link	,

		Link<Integer>swapLink=new Link<Integer>("swapLink"){
			@Override
			public void onClick() {
				container.replaceWith(alt);
				
				Component component=container;
				container=alt;
				alt=component;
				
			}
			private Component alt=new EmptyPanel("container");
		};
		add(swapLink);

/ we hoeven geen EmptyPanel.html te create	,

/ als we swap click , is de hele container WEG	, dus we zien NIET	, zoals bij not visible set	,
<div id="container2" style="display:none"></div>
/ er is gewoon niets	,
/ als we swap hebben click  , heeft visible click geen zin (ajax of niet)	,

/ Einde PANEL IN WICKET

/ 7	. 

/ FRAGMENTS IN WICKET

/ met panels moeten we geen eigen html page maken	, maar de markup van de fragment moet in die van de page	,

/ In new MyFragment("container",this) is "container" de wicket:id in HTML	, en in MyFragment zien we super(id,"myfragment",page)	, hier is id="container"	, en "myfragment" is de wicket:id in HTML 	, van de 

/ we kunnen WH op een component maar 1 fragment add	,

$ vi  Ch713.java

	private Component container;

	public Ch713(final PageParameters parameters) {
		super(parameters);
		
		container=new MyFragment("container",this);
		add(container);
		container=new MyOtherFragment("container2",this);
		add(container);
...

$ vi Ch713.html

	<div wicket:id="container">This get's replaced</div>
	<div wicket:id="container2">This get's replaced</div>
	
	<wicket:fragment wicket:id="myfragment">
		<h3 wicket:id="dexter">This text will be overwritten</h3>
		<h3 wicket:id="deedee">This text will be overwritten</h3>
	</wicket:fragment>
	
	<wicket:fragment wicket:id="myotherfragment">
		<h3 wicket:id="foo">This text will be overwritten</h3>
		<h3 wicket:id="bar">This text will be overwritten</h3>
	</wicket:fragment>

$ vi MyFragment.java

	public MyFragment(String id,WebPage page) {
		super(id,"myfragment",page);
		Label label=new Label("dexter", "Omelette du fromage");
		add(label);
		Label label2=new Label("deedee","That's all you can say!");
		add(label2);

	}

$ vi MyOtherFragment.java

	public MyOtherFragment(String id,WebPage page) {
		super(id,"myotherfragment",page);
		Label label=new Label("foo", "Foo is Foo");
		add(label);
		Label label2=new Label("bar","Bar is Bar!");
		add(label2);

	}

/ stackoverflow	,

/ Einde FRAGMENTS IN WICKET

/ 7	.

/ Lees	,
https://wicket.apache.org/guide/guide/urls.html

/ In wicket_quickstart , MyLinks.java/MyLinks.html	,

/ 13	. 
/ we kunnen in MyLinks.java	,

		BookmarkablePageLink<Integer>blink=new BookmarkablePageLink<Integer>("blink", MyTarget.class);
		add(blink);

/ of in MyLinks.html	,

	<wicket:link>
	<a href="MyTarget.html">my target</a>
	</wicket:link>

/ In beide gevallen zien we in HTML	,
	<a href="./wicket/bookmarkable/my.test.own.wicket_quickstart.MyTarget">my target</a>

/ als we geen <wicket:link> om deze a	, dan gaat hij naar localhost:8080/MyTarget.html	, en die is er niet, 	ERR	,
/ TODO

/ 13	. 

/ Als we in MyLinks.java	,

		Link<Integer>link2=new Link<Integer>("link2") {
			@Override
			public void onClick() {
				setResponsePage(MyTarget.class);
				
			}
		};

/ dan zien in in HTML	,
	<a wicket:id="link2" id="link214" href="./?6-2.ILinkListener-link2">link2</a>

/ Maar als we er op click , komen we toch in 	,
http://localhost:8080/wicket/bookmarkable/my.test.own.wicket_quickstart.MyTarget

/ Hieromheen <wicket:link> set is zinloos	,

/ 13	.

	<a wicket:id="elink">elink</a>


		ExternalLink elink=new ExternalLink("elink", new Model<String>("//www.google.com"));
		add(elink);

/ 13	.

$ vi WicketApplication.java

	public void init()
	{
		super.init();
		
		mountPage("/mytarget", MyTarget.class);


/ Als we nu click op 1 van de mytarget links, zien  we niet meer de bookmarkable url, maar	,
http://localhost:8080/mytarget

/ we zien ook dat binnen <wicket:link>	, 
	<a href="./target">

/ 7	.

/ wicket-in-action	,

$ vi WicketInActionApplication.java

   getMarkupSettings().setStripWicketTags(true);

/ We zien in de result HTML GEEN <wicket:extend> of <wicket:link>

/ 7	.

/ project wicket-book	,

/ INHERITANCE IN WICKET 


/ 13	. 

/ we zagen bij panels in wicket dat we 
/ in de panel's html <wicket:panel> use (en <wicket:head>)	, 
/ in de container's html <div id="panel"> 	, 

/ inh werkt met <wicket:extend/>, <wicket:child/>	,

/ In wicket-in-action	,

Index.html
	-------------------------ChildPage.html
|	-------------------------------------------------CheesrPage.html					|
|					|			|
| 					|			|
AbstractBasePage.html		BasePage.html		BasePage.html
/ met menu	,

/ we zien een extend op AbstractBasePage, en op BasePage	,

/ we maken ook zoiets	,

$ vi Index.html

<wicket:extend>
<wicket:link>
<a href="Ch722_1.html">Ch722_1</a>
<a href="Ch722_2.html">Ch722_2</a>
</wicket:link>
</wicket:extend>

$ vi Index.java

public class Index extends AbstractBasePage {
	public Index(final PageParameters parameters) {
		super(parameters);
    } 
}

$ vi AbstractBasePage.html

<h1>Before child</h1>
<wicket:child/>
<h1>After child</h1>

$ vi AbstractBasePage.java

public class AbstractBasePage extends WebPage {
	public AbstractBasePage(final PageParameters parameters) {
		super(parameters);
    } 
}

$ vi Ch722_1/2.html

<wicket:extend>
<h1>Ch722_1/2</h1>
</wicket:extend>

$ vi Ch722_1/2.java

public class Ch722_1/2 extends BasePage {
	public Ch722_1/2(final PageParameters parameters) {
		super(parameters);
    } 
}








/ Einde WICKET LAYOUT

/ WICKET FORM COMPONENTS

/ 7	. 

/ button	,

/ Lees
/ boek(70)

/ Lees	,
http://ci.apache.org/projects/wicket/apidocs/7.x/

public Button(String id, IModel<String> model)
Constructor taking an model for rendering the 'label' of the button (the value attribute of the input/button tag). Use a StringResourceModel for a localized value.

/ in project wicket-book	,

$ vi Ch64.html

		<form wicket:id="form">
			<input type="submit" wicket:id="button">
			
			<input type="submit" wicket:id="link">
<!-- 			
			<a wicket:id="link">link</a>
 -->		
 		</form>

$ vi Ch64.java

		Form<Integer>form=new Form<Integer>("form", new Model<Integer>(13));
		add(form);
		
		Button button=new Button("button", new Model<String>("X")){
			public void onSubmit() {
				IModel<String>model=this.getModel();
				String string=model.getObject();
				LOG.info("submit "+string);
			}
		};
		form.add(button);
		
		Link<String>link=new Link<String>("link",new Model<String>("Y")) {
			@Override
			public void onClick() {
				IModel<String>model=this.getModel();
				String string=model.getObject();
				LOG.info("link "+string);
				
				
			}
		};
		form.add(link);
		IModel<String>model=link.getModel();
		AttributeModifier attributeModifier=new AttributeModifier("value", model);
		link.add(attributeModifier);


/ we kunnen een Button , of een Link set op een <input type="submit", of een <a 	, 
/ WH kunnen we alles door elkaar use	,
		
/ we zien dat bij Wicket's Button de model de value attr geeft	,  bij Wicket's Link moeten we het zelf doen	,

/ we zien	,

<form id="form1" method="post" action="./?0-3.IFormSubmitListener-form">
	<div style="width:0px;height:0px;position:absolute;left:-100px;top:-100px;overflow:hidden">
		<input type="hidden" name="form1_hf_0" id="form1_hf_0">
	</div>
	<input type="submit" name="button" id="button2" value="X">
	<input type="submit" onclick="var win = this.ownerDocument.defaultView || this.ownerDocument.parentWindow; if (win == window) { window.location.href='./?0-3.ILinkListener-form-link'; } ;return false" value="Y">
<!-- 			
	<a wicket:id="link">link</a>
 -->		
 /form>

/ 13	. 

/ we hebben iets uitgebreid	,

$ vi Ch64.html

			<input type="text" wicket:id="field">
			<input type="submit" wicket:id="button">
			<input type="submit" wicket:id="link">

/ we zien	,

<body>
	<form id="form1" method="post" action="./?1-4.IFormSubmitListener-form">
		<div style="width:0px;height:0px;position:absolute;left:-100px;top:-100px;overflow:hidden"><input type="hidden" name="form1_hf_0" id="form1_hf_0"></div>
		<input type="text" value="45" name="field">
		<input type="submit" name="button" id="button2" value="X">
		<input type="submit" onclick="var win = this.ownerDocument.defaultView || this.ownerDocument.parentWindow; if (win == window) { window.location.href='./?1-4.ILinkListener-form-link'; } ;return false" value="Y">
 	</form>
	

</body>


$ vi Ch64.java
/ TODO

/ 7	

/ we maken cp van Ch64	, Ch64_1	,

/ see	,
TextField<T>(FormComponent<T>).setType(Class<?>) line: 1078	
/ ,
TextField<T>(AbstractTextComponent<T>).resolveType() line: 153	
/ ,
TextField<T>(Component).getConverter(Class<C>) line: 1366	

Thread [qtp1326354973-20] (Suspended (breakpoint at line 1366 in Component))	
	TextField<T>(Component).getConverter(Class<C>) line: 1366	
	TextField<T>(Component).getDefaultModelObjectAsString(Object) line: 1671	
	TextField<T>(Component).getDefaultModelObjectAsString() line: 1646	
	TextField<T>(FormComponent<T>).getModelValue() line: 1293	
	TextField<T>(FormComponent<T>).getValue() line: 877	
	TextField<T>.onComponentTag(ComponentTag) line: 108	
	TextField<T>(Component).internalRenderComponent() line: 2513	
	TextField<T>(MarkupContainer).onRender() line: 1540	
	TextField<T>(Component).internalRender() line: 2372	
	TextField<T>(Component).render() line: 2300	
	Form<T>(MarkupContainer).renderNext(MarkupStream) line: 1405	
	Form<T>(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1601	
	Form<T>(MarkupContainer).renderComponentTagBody(MarkupStream, ComponentTag) line: 1576	
	Form<T>(MarkupContainer).onComponentTagBody(MarkupStream, ComponentTag) line: 1500	
	Form<T>.onComponentTagBody(MarkupStream, ComponentTag) line: 1683	
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
	Form<T>(Component).internalRenderComponent() line: 2557	
	Form<T>(MarkupContainer).onRender() line: 1540	
	Form<T>(Component).internalRender() line: 2372	
	Form<T>(Component).render() line: 2300	
	Ch64_0(MarkupContainer).renderNext(MarkupStream) line: 1405	
	Ch64_0(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1601	
	Ch64_0(Page).onRender() line: 879	
	Ch64_0(WebPage).onRender() line: 142	
	Ch64_0(Component).internalRender() line: 2372	
	Ch64_0(Component).render() line: 2300	
	Ch64_0(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 837	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 97	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
	ServletHandler$CachedChain.doFilter(ServletRequest, ServletResponse) line: 1650	
	ServletHandler.doHandle(String, Request, HttpServletRequest, HttpServletResponse) line: 583	
	ServletHandler(ScopedHandler).handle(String, Request, HttpServletRequest, HttpServletResponse) line: 143	
	ConstraintSecurityHandler(SecurityHandler).handle(String, Request, HttpServletRequest, HttpServletResponse) line: 577	
	SessionHandler.doHandle(String, Request, HttpServletRequest, HttpServletResponse) line: 223	
	WebAppContext(ContextHandler).doHandle(String, Request, HttpServletRequest, HttpServletResponse) line: 1125	
	ServletHandler.doScope(String, Request, HttpServletRequest, HttpServletResponse) line: 515	
	SessionHandler.doScope(String, Request, HttpServletRequest, HttpServletResponse) line: 185	
	WebAppContext(ContextHandler).doScope(String, Request, HttpServletRequest, HttpServletResponse) line: 1059	
	WebAppContext(ScopedHandler).handle(String, Request, HttpServletRequest, HttpServletResponse) line: 141	
	Server(HandlerWrapper).handle(String, Request, HttpServletRequest, HttpServletResponse) line: 97	
	Server.handle(HttpChannel<?>) line: 497	
	HttpConnection$HttpChannelOverHttp(HttpChannel<T>).handle() line: 311	
	HttpConnection.onFillable() line: 248	
	AbstractConnection$2.run() line: 540	
	QueuedThreadPool.runJob(Runnable) line: 610	
	QueuedThreadPool$3.run() line: 539	
	Thread.run() line: 745	

/t
TextField<T>(Component).getDefaultModelObjectAsString(Object) line: 1676	
			final IConverter converter = getConverter(objectClass);

			// Model string from property
			final String modelString = converter.convertToString(modelObject, getLocale());
"7"
...
/t
TextField<T>.onComponentTag(ComponentTag) line: 108	
		tag.put("value", getValue());

/ Ch64_0	, 
/ = Ch64, maar dat maar 1 form	, 

/ 7	.

/ <input name="name" value="74" is niet wat meegezonden wordt	,  maar wat er in de model van de input staat (=wat we ingetypt hebben)	,
/ stel dat we "748" mee, dan wordt WH via getters op wicket value="748"	, 
/ maar als we in dev tools value="7148" set	, zien we die in de input ook	, 


/ 7	.  

/ Ch64_1 

		<form wicket:id="form4">	
			<select wicket:id="list4"></select>
			<input type="submit" wicket:id="button4">
 		</form>


$ vi Ch64_1.java

public class Ch64_1 extends WebPage {
		{
		Form<Integer>form=new Form<Integer>("form4", new Model<Integer>(13));
		add(form);
		
		final class MyType{
			private final int id;
			private final String name;
			public MyType(int id,String name) {
				this.id=id;
				this.name=name;
			}
			
		}
		
		final class Cont{
			private MyType myType;

			public MyType getMyType() {
				return myType;
			}

			public void setMyType(MyType myType) {
				this.myType = myType;
			}
		}
		
		Cont cont=new Cont();
		List<MyType>myTypes=Arrays.asList(
				new MyType(1, "Value1"),
				new MyType(2, "Value2"),
				new MyType(3, "Value3"),
				new MyType(4, "Value4")
				);
		
		IModel<MyType>model=new PropertyModel<MyType>(cont, "myType");
		IChoiceRenderer<MyType>choiceRenderer=new ChoiceRenderer<MyType>("name", "id");
		final ListChoice<MyType>list=new ListChoice<MyType>("list4", model,myTypes,choiceRenderer);
		form.add(list);
		cont.setMyType(myTypes.get(2));
		
		form.add(list);
		
		Button button=new Button("button4", new Model<String>("X")){
			public void onSubmit() {
				IModel<MyType>model=list.getModel();
				MyType myType=model.getObject();
				LOG.info("submit "+myType.id+","+myType.name);
			}
		};
		form.add(button);

		}

/ we zien een list met Value1, ... . De value="1", ... op de items	,

/ Maar als we	,
		IChoiceRenderer<MyType>choiceRenderer=new ChoiceRenderer<MyType>("id", "name");

/ dan zien we juist een list met 1,2,..., 	en is in HTML value="Value1", ...

/ 7	. 

/ SPRING-BOOK

/ In spring-book project, 
/ mvn clean test
/ run application Start	,

/ Einde SPRING-BOOK

/ WICKET REPEATING VIEW LISTVIEW

/ 7	.

/ we deploy nu ook in tomcat7	, 
$ vi pom.xml

	<properties>
		<tomcat.version>2.2</tomcat.version>
	</properties>
	<plugin>
		<groupId>org.apache.tomcat.maven</groupId>
		<artifactId>tomcat7-maven-plugin</artifactId>
		<version>${tomcat.version}</version>
		<configuration>
    			<port>8080</port>
    			<path>/${project.artifactId}</path>
    			<url>http://localhost:8080/manager/text</url>
    			<server>my_tomcat</server>
 		</configuration>
	</plugin>

/ 7	.


/ In Start.java hebben we de port op 9090 set	,
		http.setPort(9090);

/ mvn clean test
/ run Start as Java application	,
/ Geef localhost:9090 

/ RepeatingView, ListView	,

/ Beide extends AbstractRepeater	,

/ MORGEN	,
/ source code ajax form	,
http://www.wicket-library.com/wicket-examples/index.html
/ Kies ajax	,
http://www.wicket-library.com/wicket-examples/ajax/
/ Kies Form example

/ een RepeatingView op een table gaat NIET OK	, see rview1_2	, in Ch55.java/html	,
/ WH niet geschikt voor een table	,
/ TODO

/ 13	. 

/ een repeating view is een template , niet een parent,	 al doe je rview.add(label)

		<li wicket:id="rvlist"></li>

		RepeatingView rview=new RepeatingView("rvlist");
		add(rview);
		for(int i=0;i<5;i++){
			String id=Integer.toString(i+100);
			Label label=new Label(id, "value "+String.valueOf(i));
			rview.add(label);

/ een repeating view geeft templates	, meerdere	, deze worden gekoppeld aan de label obj uit Java	, we zien ook dat de templates de id van het label hebben	, dus het klopt	,

/ met 	add(rview); we add het template aan de page, of alle instances, alle li's	,

<li wicket:id="rvlist" id="id1001">value 0</li>
<li wicket:id="rvlist" id="id1002">value 1</li>


/ in een andere page doen we met de hand	,

		<div wicket:id="label4"></div>

		Label label=new Label("label4", "Foo Bar");
		label.setOutputMarkupId(true);
		add(label);

/ we zien dan 	
<div wicket:id="label4" id="label41">Foo Bar</div>

/ hier is dus de <div> de repeating view template	, 



/ 13	. 

/ gen id's	,

		    <li wicket:id="rvlist"></li>
		    <div wicket:id="rvlist0"></div>


		RepeatingView rview=new RepeatingView("rvlist");
		add(rview);
		for(int i=0;i<5;i++){
			String id=Integer.toString(i+100);
			Label label=new Label(id, "value "+String.valueOf(i));
			rview.add(label);

		RepeatingView rview=new RepeatingView("rvlist0");
		add(rview);
		for(int i=0;i<5;i++){
			String id=rview.newChildId();
			Label label=new Label(id, "value "+String.valueOf(i));
			rview.add(label);



/ we zien	,

		<h2>rvlist</h2>
		
		<li id="id1001">value 0</li>
		<li id="id1012">value 1</li>
		<li id="id1023">value 2</li>
		<li id="id1034">value 3</li>
		<li id="id1045">value 4</li>
		
		
		<h2>rvlist0</h2>
		<div id="id16">value 0</div>
		<div id="id27">value 1</div>
		<div id="id38">value 2</div>
		<div id="id49">value 3</div>
		<div id="id5a">value 4</div>
	
	
/ we zien dat 
			String id=rview.newChildId();
/ voor iedere RepeatableView steeds opnieuw begint met 1,2,... en dat er ook steeds een getal achter komt, maar die loopt in de page door	, 1,2,...,a,..., f,10, 11, ...
/ dus hierna komen	,
		<li id="id1b" 
		<li id="id2c" 
		<li id="id3d"
		<li id="id4e" 
		<li id="id5f"

<ul>
	   	<li id="id110"
		<li id="id211"
		<li id="id312"
		<li id="id413"
		<li id="id514"

/ 13	. 

/ repeating view is template voor container	,

		    <div wicket:id="rvmenu">
		        <a  wicket:id="link">
		            <span wicket:id="caption"></span>
		        </a>
		    </div>

		RepeatingView rview=new RepeatingView("rvmenu");
		add(rview);
		List<MenuItem>menu=createMenu();
		int i=1001;
		for(MenuItem item:menu){
			String id=Integer.toString(i++);
			WebMarkupContainer container=new WebMarkupContainer(id);
			container.setOutputMarkupId(true);
			rview.add(container);
			BookmarkablePageLink<Integer>link=new BookmarkablePageLink<Integer>("link", item.getDestination());
			container.add(link);
			link.setOutputMarkupId(true);
			Label label=new Label("caption",item.getCaption());
			label.setOutputMarkupId(true);
			link.add(label);
		}

<div wicket:id="rvmenu" id="id100123">
	<a wicket:id="link" id="link24" href="./wicket/bookmarkable/my.test.own.wicket_book.Page55">
		<span wicket:id="caption" id="caption25">Home</span>
	</a>
</div>
<div wicket:id="rvmenu" id="id100226">
        <a wicket:id="link" id="link27" href="./wicket/bookmarkable/my.test.own.wicket_book.Page55">
            <span wicket:id="caption" id="caption28">Cheeses</span>
        </a>
</div>

/ we zien dat iedere repeating view een container is	, met de juiste id	,  (eig. repeating view template)	, en deze hebben ieder een eigen id	, daarom kunnen we  de link id "link" geven	, want alle link's zitten in de andere container	, en we zien ook dat de id doortelt: "id1000226" , "link27", "caption28"

/ 13	. 

/ ListView is WH als RepeatableView: ListView is een template, voor  ListItem is als WebMarkupContainer	, dus <li wicket:id="lvmenu" id="id037">

		ListView<MenuItem> lview=new ListView<MenuItem>("lvmenu",menu) {
			@Override
			protected void populateItem(ListItem<MenuItem> item) {
				item.setOutputMarkupId(true);
				MenuItem menuItem=item.getModel().getObject();
				BookmarkablePageLink<Integer>link=new BookmarkablePageLink<Integer>("link"	,menuItem.getDestination());
				item.add(link);
				link.setOutputMarkupId(true);
				Label label=new Label("lcaption", menuItem.getCaption());
				link.add(label);
				label.setOutputMarkupId(true);

/ we zien	,

<li wicket:id="lvmenu" id="id037">
	<a wicket:id="link" id="link38" href="./wicket/bookmarkable/my.test.own.wicket_book.Page55">
        	<span wicket:id="lcaption" id="lcaption39">Home</span>
	</a>
</li>
<li wicket:id="lvmenu" id="id15a">
	<a wicket:id="link" id="link5b" href="./wicket/bookmarkable/my.test.own.wicket_book.Page55">
        	<span wicket:id="lcaption" id="lcaption5c">Cheeses</span>
	</a>
</li>

/ 13	. 

/ listdataprovider

/ we kunnen deze use op een <tr><td/>...</tr>
/ maar hoeft niet perse	, ook <div><div/>...</div>

	<table>
		<tr wicket:id="row">
		   <td wicket:id="datum"></td>
		</tr>
	</table>

/ of	,

		<div wicket:id="row">
		   <div wicket:id="datum"></div>
		</div>

		List<Person> persons = Arrays.asList(new Person("Foo","Street 1"),new Person("Bar","Lane 7"));
		ListDataProvider<Person> listDataProvider = new ListDataProvider<Person>(persons);
		DataView<Person> dataView = new DataView<Person>("row", listDataProvider) {
		  @Override
		  protected void populateItem(Item<Person> item) {
			item.setOutputMarkupId(true);
		    Person person = item.getModelObject();
		    RepeatingView repeatingView = new RepeatingView("datum");

		    {
		    Label label=new Label(repeatingView.newChildId(), person.getName());
		    label.setOutputMarkupId(true);
		    repeatingView.add(label);
		    }
		    {
    		Label label=new Label(repeatingView.newChildId(), person.getAddress()); 
    		label.setOutputMarkupId(true);
		    repeatingView.add(label);
		    }
		    item.add(repeatingView); 
		  }
		};
		dataView.setOutputMarkupId(true);
		add(dataView);

/ als we 	,
	<table>
		<tr wicket:id="row">
		   <td wicket:id="datum"></td>
		</tr>
	</table>

/ we zien	,

	<table>
		<tbody><tr>
		   <th>Name</th><th>Surename</th><th>Address</th><th>Email</th>
		</tr>
		<tr wicket:id="row" id="id11">
		   <td wicket:id="datum" id="id12">Foo</td><td wicket:id="datum" id="id23">Street 1</td>
		</tr><tr wicket:id="row" id="id24">
		   <td wicket:id="datum" id="id15">Bar</td><td wicket:id="datum" id="id26">Lane 7</td>
		</tr>
		</tbody>
	</table>


/ als we	,
		<div wicket:id="row">
		   <div wicket:id="datum"></div>
		</div>

/ dan zien we	,

		<div wicket:id="row" id="id11">
		   <div wicket:id="datum" id="id12">Foo</div><div wicket:id="datum" id="id23">Street 1</div>
		</div><div wicket:id="row" id="id24">
		   <div wicket:id="datum" id="id15">Bar</div><div wicket:id="datum" id="id26">Lane 7</div>
		</div>
	
	
/ 13	. 

/ gofilter	,

/ in wicket-extensions	,

[eric@localhost wicket]$ pwd
/home/eric/.m2/repository/org/apache/wicket
[eric@localhost wicket]$ for j in $(find -name "*.jar");do echo $j;jar tvf $j|grep -i gofilter;done
./wicket-extensions/1.3.7/wicket-extensions-1.3.7.jar
  1633 Thu Jul 23 10:11:40 CEST 2009 org/apache/wicket/extensions/markup/html/repeater/data/table/filter/GoFilter.class
   878 Thu Jul 23 10:11:38 CEST 2009 org/apache/wicket/extensions/markup/html/repeater/data/table/filter/GoFilter.html
  1165 Thu Jul 23 10:11:40 CEST 2009 org/apache/wicket/extensions/markup/html/repeater/data/table/filter/GoFilter$1.class

/ 13	. 

/ we willen wicket-examples	,

/ we hebben POM en sources.jar van search.maven.org 	, en zelf in maven struct set	,
[eric@localhost Examples]$  pwd
/home/eric/Devel/Java/Wicket/Examples
[eric@localhost Examples]$ ls
pom.xml  src 
/ Toen hebben we import maven project	, 
/ en hebben jetty:run
/ ERR
/ TODO

/ 13	.

/ we hebben my-webapp en my-main	,

/ my-wabapp's pom	,

	<groupId>my.test.own</groupId>
	<version>0.0.1-SNAPSHOT</version>
  	<artifactId>my-webapp</artifactId>
  	<packaging>war</packaging>
  	<name>My Webapp</name>
  	<url>http://maven.apache.org</url>
  	<dependencies>
	<dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>servlet-api</artifactId>
            <version>2.5</version>
            <scope>provided</scope>
        </dependency>
  	</dependencies>
  	<build>
    		<finalName>my-webapp</finalName>
  	</build>	

/ Deze moeten we $ mvn clean install

/ my-main pom	,

	<groupId>my.test.own</groupId>
	<version>0.0.1-SNAPSHOT</version>
  	<artifactId>my-main</artifactId>
  	<packaging>war</packaging>
  	<name>My Main</name>
  	<url>http://maven.apache.org</url>
  	<dependencies>
    	<dependency>
    		<groupId>my.test.own</groupId>
    		<artifactId>my-webapp</artifactId>
    		<version>0.0.1-SNAPSHOT</version>
    		<type>war</type>
    	</dependency>		
  	</dependencies>
  	<build>
    		<finalName>my-main</finalName>
	<plugins>
		<plugin>
			<groupId>org.mortbay.jetty</groupId>
			<artifactId>jetty-maven-plugin</artifactId>
		</plugin>
	</plugins>
  </build>

/ Deze kunnen we dan $ mvn jetty:run -Djetty.port=9090

/ we maken met org.apache.wicket:wicket-archetype-quickstart:7.0.0.M4 een mvn project wicket-examples-import, en doen in de pom	,
		<dependency>
		    <groupId>org.apache.wicket</groupId>
		    <artifactId>wicket-examples</artifactId>
		    <version>${wicket.version}</version>
		    <type>war</type>
		</dependency>

/ Maar dan ERR	,
2015-01-02 08:20:41.488:WARN:oejuc.AbstractLifeCycle:main: FAILED org.eclipse.jetty.annotations.ServletContainerInitializersStarter@148a8965: java.lang.NoClassDefFoundError: org/apache/catalina/core/ApplicationContextFacade
java.lang.NoClassDefFoundError: org/apache/catalina/core/ApplicationContextFacade

/ Dit is een Tomcat class type	,
/ TODO

/ als we  de dep op wicket-examples rm, dus alleen wicket-archetype-quickstart doen, dan OK	, 
/ hier zien we org.eclipse.jetty	,

/ 13	. 

/ In my-main hebben we org.mortbay.jetty:jetty-maven-plugin	, 
/ OK

/ In my-main2 hebben we org.eclipse.jetty:jetty-maven-plugin	, 

	<plugin>
		<groupId>org.eclipse.jetty</groupId>
		<artifactId>jetty-maven-plugin</artifactId>
		<version>${jetty.version}</version>
		<configuration>
                	<httpConnector>
                    		<port>9090</port>
                	</httpConnector>
            	</configuration>
	</plugin>
/ OK

/ 13	. 

/ we hebben maven project org.apache.tomcat.maven:tomcat-maven-archetype:2.2 create	,
/ we doen in my-tomcat	,
$ mvn clean install

/ Daarna zullen we doen in my-tomcat-webapp	,
$ mvn tomcat7:run

[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Build Order:
[INFO] 
[INFO] my-tomcat
[INFO] my-tomcat-api
[INFO] my-tomcat-api-impl
[INFO] my-tomcat-webapp
[INFO] my-tomcat-webapp-exec
[INFO] my-tomcat-webapp-it
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building my-tomcat 0.0.1-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ my-tomcat ---
[INFO] 
[INFO] --- maven-enforcer-plugin:1.0.1:enforce (enforce-java) @ my-tomcat ---
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/apache/maven/enforcer/enforcer-api/1.0.1/enforcer-api-1.0.1.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/apache/maven/enforcer/enforcer-api/1.0.1/enforcer-api-1.0.1.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/apache/maven/enforcer/enforcer-api/1.0.1/enforcer-api-1.0.1.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/apache/maven/enforcer/enforcer-api/1.0.1/enforcer-api-1.0.1.pom (4 KB at 37.5 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/apache/maven/enforcer/enforcer-rules/1.0.1/enforcer-rules-1.0.1.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/apache/maven/enforcer/enforcer-rules/1.0.1/enforcer-rules-1.0.1.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/apache/maven/enforcer/enforcer-rules/1.0.1/enforcer-rules-1.0.1.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/apache/maven/enforcer/enforcer-rules/1.0.1/enforcer-rules-1.0.1.pom (4 KB at 91.1 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/apache/maven/enforcer/enforcer-api/1.0.1/enforcer-api-1.0.1.jar
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/apache/maven/enforcer/enforcer-rules/1.0.1/enforcer-rules-1.0.1.jar
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/apache/maven/enforcer/enforcer-api/1.0.1/enforcer-api-1.0.1.jar
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/apache/maven/enforcer/enforcer-rules/1.0.1/enforcer-rules-1.0.1.jar
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/apache/maven/enforcer/enforcer-api/1.0.1/enforcer-api-1.0.1.jar
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/apache/maven/enforcer/enforcer-rules/1.0.1/enforcer-rules-1.0.1.jar
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/apache/maven/enforcer/enforcer-api/1.0.1/enforcer-api-1.0.1.jar (10 KB at 140.7 KB/sec)
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/apache/maven/enforcer/enforcer-rules/1.0.1/enforcer-rules-1.0.1.jar (60 KB at 583.6 KB/sec)
[INFO] 
[INFO] --- maven-install-plugin:2.4:install (default-install) @ my-tomcat ---
[INFO] Installing /home/eric/Devel/Java/Maven/my-tomcat/pom.xml to /home/eric/.m2/repository/my/test/own/my-tomcat/0.0.1-SNAPSHOT/my-tomcat-0.0.1-SNAPSHOT.pom
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building my-tomcat-api 0.0.1-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ my-tomcat-api ---
[INFO] Deleting /home/eric/Devel/Java/Maven/my-tomcat/my-tomcat-api/target
[INFO] 
[INFO] --- maven-enforcer-plugin:1.0.1:enforce (enforce-java) @ my-tomcat-api ---
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ my-tomcat-api ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /home/eric/Devel/Java/Maven/my-tomcat/my-tomcat-api/src/main/resources
[INFO] 
[INFO] --- maven-compiler-plugin:2.5.1:compile (default-compile) @ my-tomcat-api ---
[INFO] Compiling 1 source file to /home/eric/Devel/Java/Maven/my-tomcat/my-tomcat-api/target/classes
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ my-tomcat-api ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /home/eric/Devel/Java/Maven/my-tomcat/my-tomcat-api/src/test/resources
[INFO] 
[INFO] --- maven-compiler-plugin:2.5.1:testCompile (default-testCompile) @ my-tomcat-api ---
[INFO] No sources to compile
[INFO] 
[INFO] --- maven-surefire-plugin:2.13:test (default-test) @ my-tomcat-api ---
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/apache/maven/surefire/maven-surefire-common/2.13/maven-surefire-common-2.13.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/apache/maven/surefire/maven-surefire-common/2.13/maven-surefire-common-2.13.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/apache/maven/surefire/maven-surefire-common/2.13/maven-surefire-common-2.13.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/apache/maven/surefire/maven-surefire-common/2.13/maven-surefire-common-2.13.pom (6 KB at 122.0 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/apache/maven/surefire/surefire-api/2.13/surefire-api-2.13.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/apache/maven/surefire/surefire-api/2.13/surefire-api-2.13.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-api/2.13/surefire-api-2.13.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-api/2.13/surefire-api-2.13.pom (3 KB at 58.2 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/apache/maven/surefire/surefire-booter/2.13/surefire-booter-2.13.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/apache/maven/surefire/surefire-booter/2.13/surefire-booter-2.13.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-booter/2.13/surefire-booter-2.13.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-booter/2.13/surefire-booter-2.13.pom (3 KB at 70.5 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/apache/maven/surefire/maven-surefire-common/2.13/maven-surefire-common-2.13.jar
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/apache/maven/surefire/surefire-booter/2.13/surefire-booter-2.13.jar
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/apache/maven/surefire/surefire-api/2.13/surefire-api-2.13.jar
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/apache/maven/surefire/maven-surefire-common/2.13/maven-surefire-common-2.13.jar
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/apache/maven/surefire/surefire-booter/2.13/surefire-booter-2.13.jar
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/apache/maven/surefire/surefire-api/2.13/surefire-api-2.13.jar
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/apache/maven/surefire/maven-surefire-common/2.13/maven-surefire-common-2.13.jar
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-booter/2.13/surefire-booter-2.13.jar
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-api/2.13/surefire-api-2.13.jar
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-booter/2.13/surefire-booter-2.13.jar (35 KB at 392.8 KB/sec)
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/apache/maven/surefire/maven-surefire-common/2.13/maven-surefire-common-2.13.jar (221 KB at 1452.8 KB/sec)
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-api/2.13/surefire-api-2.13.jar (152 KB at 867.0 KB/sec)
[INFO] No tests to run.
[INFO] 
[INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ my-tomcat-api ---
[INFO] Building jar: /home/eric/Devel/Java/Maven/my-tomcat/my-tomcat-api/target/my-tomcat-api-0.0.1-SNAPSHOT.jar
[INFO] 
[INFO] --- maven-install-plugin:2.4:install (default-install) @ my-tomcat-api ---
[INFO] Installing /home/eric/Devel/Java/Maven/my-tomcat/my-tomcat-api/target/my-tomcat-api-0.0.1-SNAPSHOT.jar to /home/eric/.m2/repository/my/test/own/my-tomcat-api/0.0.1-SNAPSHOT/my-tomcat-api-0.0.1-SNAPSHOT.jar
[INFO] Installing /home/eric/Devel/Java/Maven/my-tomcat/my-tomcat-api/pom.xml to /home/eric/.m2/repository/my/test/own/my-tomcat-api/0.0.1-SNAPSHOT/my-tomcat-api-0.0.1-SNAPSHOT.pom
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building my-tomcat-api-impl 0.0.1-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ my-tomcat-api-impl ---
[INFO] Deleting /home/eric/Devel/Java/Maven/my-tomcat/my-tomcat-api-impl/target
[INFO] 
[INFO] --- maven-enforcer-plugin:1.0.1:enforce (enforce-java) @ my-tomcat-api-impl ---
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ my-tomcat-api-impl ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 1 resource
[INFO] 
[INFO] --- maven-compiler-plugin:2.5.1:compile (default-compile) @ my-tomcat-api-impl ---
[INFO] Compiling 1 source file to /home/eric/Devel/Java/Maven/my-tomcat/my-tomcat-api-impl/target/classes
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ my-tomcat-api-impl ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /home/eric/Devel/Java/Maven/my-tomcat/my-tomcat-api-impl/src/test/resources
[INFO] 
[INFO] --- maven-compiler-plugin:2.5.1:testCompile (default-testCompile) @ my-tomcat-api-impl ---
[INFO] Compiling 1 source file to /home/eric/Devel/Java/Maven/my-tomcat/my-tomcat-api-impl/target/test-classes
[INFO] 
[INFO] --- maven-surefire-plugin:2.13:test (default-test) @ my-tomcat-api-impl ---
[INFO] Surefire report directory: /home/eric/Devel/Java/Maven/my-tomcat/my-tomcat-api-impl/target/surefire-reports
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/apache/maven/surefire/surefire-junit4/2.13/surefire-junit4-2.13.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/apache/maven/surefire/surefire-junit4/2.13/surefire-junit4-2.13.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.13/surefire-junit4-2.13.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.13/surefire-junit4-2.13.pom (3 KB at 56.6 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/apache/maven/surefire/surefire-providers/2.13/surefire-providers-2.13.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/apache/maven/surefire/surefire-providers/2.13/surefire-providers-2.13.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-providers/2.13/surefire-providers-2.13.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-providers/2.13/surefire-providers-2.13.pom (3 KB at 52.8 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/apache/maven/surefire/surefire-junit4/2.13/surefire-junit4-2.13.jar
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/apache/maven/surefire/surefire-junit4/2.13/surefire-junit4-2.13.jar
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.13/surefire-junit4-2.13.jar
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.13/surefire-junit4-2.13.jar (78 KB at 1188.4 KB/sec)

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running my.test.own.my_tomcat.api.impl.TestDefaultHelloService
Jan 02, 2015 9:48:36 AM org.apache.coyote.AbstractProtocol init
INFO: Initializing ProtocolHandler ["http-bio-auto-1"]
Jan 02, 2015 9:48:36 AM org.apache.catalina.core.StandardService startInternal
INFO: Starting service Tomcat
Jan 02, 2015 9:48:36 AM org.apache.catalina.core.StandardEngine startInternal
INFO: Starting Servlet Engine: Apache Tomcat/7.0.47
Jan 02, 2015 9:48:36 AM org.apache.catalina.startup.DigesterFactory register
WARNING: Could not get url for /javax/servlet/jsp/resources/jsp_2_0.xsd
Jan 02, 2015 9:48:36 AM org.apache.catalina.startup.DigesterFactory register
WARNING: Could not get url for /javax/servlet/jsp/resources/jsp_2_1.xsd
Jan 02, 2015 9:48:36 AM org.apache.catalina.startup.DigesterFactory register
WARNING: Could not get url for /javax/servlet/jsp/resources/jsp_2_2.xsd
Jan 02, 2015 9:48:36 AM org.apache.catalina.startup.DigesterFactory register
WARNING: Could not get url for /javax/servlet/jsp/resources/web-jsptaglibrary_1_1.dtd
Jan 02, 2015 9:48:36 AM org.apache.catalina.startup.DigesterFactory register
WARNING: Could not get url for /javax/servlet/jsp/resources/web-jsptaglibrary_1_2.dtd
Jan 02, 2015 9:48:36 AM org.apache.catalina.startup.DigesterFactory register
WARNING: Could not get url for /javax/servlet/jsp/resources/web-jsptaglibrary_2_0.xsd
Jan 02, 2015 9:48:36 AM org.apache.catalina.startup.DigesterFactory register
WARNING: Could not get url for /javax/servlet/jsp/resources/web-jsptaglibrary_2_1.xsd
Jan 02, 2015 9:48:37 AM org.apache.catalina.core.ApplicationContext log
INFO: Initializing Spring root WebApplicationContext
Jan 02, 2015 9:48:37 AM org.springframework.web.context.ContextLoader initWebApplicationContext
INFO: Root WebApplicationContext: initialization started
Jan 02, 2015 9:48:37 AM org.springframework.context.support.AbstractApplicationContext prepareRefresh
INFO: Refreshing Root WebApplicationContext: startup date [Fri Jan 02 09:48:37 CET 2015]; root of context hierarchy
Jan 02, 2015 9:48:37 AM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions
INFO: Loading XML bean definitions from URL [file:/home/eric/Devel/Java/Maven/my-tomcat/my-tomcat-api-impl/target/classes/META-INF/spring-context.xml]
Jan 02, 2015 9:48:37 AM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions
INFO: Loading XML bean definitions from class path resource [META-INF/cxf/cxf.xml]
Jan 02, 2015 9:48:37 AM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions
INFO: Loading XML bean definitions from class path resource [META-INF/cxf/cxf-servlet.xml]
Jan 02, 2015 9:48:37 AM org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider registerDefaultFilters
INFO: JSR-250 'javax.annotation.ManagedBean' found and supported for component scanning
Jan 02, 2015 9:48:38 AM org.springframework.beans.factory.support.DefaultListableBeanFactory preInstantiateSingletons
INFO: Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@901846d: defining beans [cxf,org.apache.cxf.bus.spring.BusWiringBeanFactoryPostProcessor,org.apache.cxf.bus.spring.Jsr250BeanPostProcessor,org.apache.cxf.bus.spring.BusExtensionPostProcessor,org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,helloService#default,testServices,org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor]; root of factory hierarchy
Jan 02, 2015 9:48:38 AM org.apache.cxf.endpoint.ServerImpl initDestination
INFO: Setting the server's publish address to be /testServices
Jan 02, 2015 9:48:38 AM org.springframework.web.context.ContextLoader initWebApplicationContext
INFO: Root WebApplicationContext: initialization completed in 985 ms
Jan 02, 2015 9:48:38 AM org.apache.coyote.AbstractProtocol start
INFO: Starting ProtocolHandler ["http-bio-auto-1-34284"]
Tomcat started on port:34284
Jan 02, 2015 9:48:38 AM org.apache.coyote.AbstractProtocol pause
INFO: Pausing ProtocolHandler ["http-bio-auto-1-34284"]
Jan 02, 2015 9:48:38 AM org.apache.catalina.core.StandardService stopInternal
INFO: Stopping service Tomcat
Jan 02, 2015 9:48:38 AM org.apache.catalina.core.ApplicationContext log
INFO: Closing Spring root WebApplicationContext
Jan 02, 2015 9:48:38 AM org.springframework.context.support.AbstractApplicationContext doClose
INFO: Closing Root WebApplicationContext: startup date [Fri Jan 02 09:48:37 CET 2015]; root of context hierarchy
Jan 02, 2015 9:48:38 AM org.springframework.beans.factory.support.DefaultSingletonBeanRegistry destroySingletons
INFO: Destroying singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@901846d: defining beans [cxf,org.apache.cxf.bus.spring.BusWiringBeanFactoryPostProcessor,org.apache.cxf.bus.spring.Jsr250BeanPostProcessor,org.apache.cxf.bus.spring.BusExtensionPostProcessor,org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,helloService#default,testServices,org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor]; root of factory hierarchy
Jan 02, 2015 9:48:38 AM org.apache.coyote.AbstractProtocol stop
INFO: Stopping ProtocolHandler ["http-bio-auto-1-34284"]
Jan 02, 2015 9:48:43 AM org.apache.tomcat.util.net.AbstractEndpoint shutdownExecutor
WARNING: The executor associated with thread pool [http-bio-auto-1] has not fully shutdown. Some application threads may still be running.
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 7.273 sec

Results :

Tests run: 1, Failures: 0, Errors: 0, Skipped: 0

[INFO] 
[INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ my-tomcat-api-impl ---
[INFO] Building jar: /home/eric/Devel/Java/Maven/my-tomcat/my-tomcat-api-impl/target/my-tomcat-api-impl-0.0.1-SNAPSHOT.jar
[INFO] 
[INFO] --- maven-install-plugin:2.4:install (default-install) @ my-tomcat-api-impl ---
[INFO] Installing /home/eric/Devel/Java/Maven/my-tomcat/my-tomcat-api-impl/target/my-tomcat-api-impl-0.0.1-SNAPSHOT.jar to /home/eric/.m2/repository/my/test/own/my-tomcat-api-impl/0.0.1-SNAPSHOT/my-tomcat-api-impl-0.0.1-SNAPSHOT.jar
[INFO] Installing /home/eric/Devel/Java/Maven/my-tomcat/my-tomcat-api-impl/pom.xml to /home/eric/.m2/repository/my/test/own/my-tomcat-api-impl/0.0.1-SNAPSHOT/my-tomcat-api-impl-0.0.1-SNAPSHOT.pom
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building my-tomcat-webapp 0.0.1-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ my-tomcat-webapp ---
[INFO] Deleting /home/eric/Devel/Java/Maven/my-tomcat/my-tomcat-webapp/target
[INFO] 
[INFO] --- maven-enforcer-plugin:1.0.1:enforce (enforce-java) @ my-tomcat-webapp ---
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ my-tomcat-webapp ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 1 resource
[INFO] 
[INFO] --- maven-compiler-plugin:2.5.1:compile (default-compile) @ my-tomcat-webapp ---
[INFO] No sources to compile
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ my-tomcat-webapp ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /home/eric/Devel/Java/Maven/my-tomcat/my-tomcat-webapp/src/test/resources
[INFO] 
[INFO] --- maven-compiler-plugin:2.5.1:testCompile (default-testCompile) @ my-tomcat-webapp ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-surefire-plugin:2.13:test (default-test) @ my-tomcat-webapp ---
[INFO] No tests to run.
[INFO] 
[INFO] --- maven-war-plugin:2.3:war (default-war) @ my-tomcat-webapp ---
[INFO] Packaging webapp
[INFO] Assembling webapp [my-tomcat-webapp] in [/home/eric/Devel/Java/Maven/my-tomcat/my-tomcat-webapp/target/my-tomcat-webapp-0.0.1-SNAPSHOT]
[INFO] Processing war project
[INFO] Copying webapp resources [/home/eric/Devel/Java/Maven/my-tomcat/my-tomcat-webapp/src/main/webapp]
[INFO] Webapp assembled in [45 msecs]
[INFO] Building war: /home/eric/Devel/Java/Maven/my-tomcat/my-tomcat-webapp/target/my-tomcat-webapp-0.0.1-SNAPSHOT.war
[INFO] 
[INFO] --- maven-install-plugin:2.4:install (default-install) @ my-tomcat-webapp ---
[INFO] Installing /home/eric/Devel/Java/Maven/my-tomcat/my-tomcat-webapp/target/my-tomcat-webapp-0.0.1-SNAPSHOT.war to /home/eric/.m2/repository/my/test/own/my-tomcat-webapp/0.0.1-SNAPSHOT/my-tomcat-webapp-0.0.1-SNAPSHOT.war
[INFO] Installing /home/eric/Devel/Java/Maven/my-tomcat/my-tomcat-webapp/pom.xml to /home/eric/.m2/repository/my/test/own/my-tomcat-webapp/0.0.1-SNAPSHOT/my-tomcat-webapp-0.0.1-SNAPSHOT.pom
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building my-tomcat-webapp-exec 0.0.1-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ my-tomcat-webapp-exec ---
[INFO] 
[INFO] --- maven-enforcer-plugin:1.0.1:enforce (enforce-java) @ my-tomcat-webapp-exec ---
[INFO] 
[INFO] --- tomcat7-maven-plugin:2.2:exec-war-only (tomcat-war-exec) @ my-tomcat-webapp-exec ---
[INFO] 
[INFO] --- maven-install-plugin:2.4:install (default-install) @ my-tomcat-webapp-exec ---
[INFO] Installing /home/eric/Devel/Java/Maven/my-tomcat/my-tomcat-webapp-exec/pom.xml to /home/eric/.m2/repository/my/test/own/my-tomcat-webapp-exec/0.0.1-SNAPSHOT/my-tomcat-webapp-exec-0.0.1-SNAPSHOT.pom
[INFO] Installing /home/eric/Devel/Java/Maven/my-tomcat/my-tomcat-webapp-exec/target/my-tomcat-webapp-exec-0.0.1-SNAPSHOT-war-exec.jar to /home/eric/.m2/repository/my/test/own/my-tomcat-webapp-exec/0.0.1-SNAPSHOT/my-tomcat-webapp-exec-0.0.1-SNAPSHOT-exec-war.jar
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building my-tomcat-webapp-it 0.0.1-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/apache/maven/plugins/maven-dependency-plugin/2.4/maven-dependency-plugin-2.4.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/apache/maven/plugins/maven-dependency-plugin/2.4/maven-dependency-plugin-2.4.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-dependency-plugin/2.4/maven-dependency-plugin-2.4.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-dependency-plugin/2.4/maven-dependency-plugin-2.4.pom (11 KB at 183.2 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/apache/maven/plugins/maven-dependency-plugin/2.4/maven-dependency-plugin-2.4.jar
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/apache/maven/plugins/maven-dependency-plugin/2.4/maven-dependency-plugin-2.4.jar
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-dependency-plugin/2.4/maven-dependency-plugin-2.4.jar
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-dependency-plugin/2.4/maven-dependency-plugin-2.4.jar (132 KB at 1097.6 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/codehaus/mojo/selenium-maven-plugin/2.3/selenium-maven-plugin-2.3.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/codehaus/mojo/selenium-maven-plugin/2.3/selenium-maven-plugin-2.3.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/codehaus/mojo/selenium-maven-plugin/2.3/selenium-maven-plugin-2.3.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/codehaus/mojo/selenium-maven-plugin/2.3/selenium-maven-plugin-2.3.pom (13 KB at 290.0 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/codehaus/mojo/mojo-parent/30/mojo-parent-30.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/codehaus/mojo/mojo-parent/30/mojo-parent-30.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/codehaus/mojo/mojo-parent/30/mojo-parent-30.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/codehaus/mojo/mojo-parent/30/mojo-parent-30.pom (27 KB at 619.1 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/codehaus/mojo/selenium-maven-plugin/2.3/selenium-maven-plugin-2.3.jar
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/codehaus/mojo/selenium-maven-plugin/2.3/selenium-maven-plugin-2.3.jar
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/codehaus/mojo/selenium-maven-plugin/2.3/selenium-maven-plugin-2.3.jar
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/codehaus/mojo/selenium-maven-plugin/2.3/selenium-maven-plugin-2.3.jar (71 KB at 1102.0 KB/sec)
[INFO] 
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ my-tomcat-webapp-it ---
[INFO] 
[INFO] --- maven-enforcer-plugin:1.0.1:enforce (enforce-java) @ my-tomcat-webapp-it ---
[INFO] 
[INFO] --- maven-dependency-plugin:2.4:unpack (unzip-webapp) @ my-tomcat-webapp-it ---
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/codehaus/plexus/plexus-archiver/2.0/plexus-archiver-2.0.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/codehaus/plexus/plexus-archiver/2.0/plexus-archiver-2.0.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-archiver/2.0/plexus-archiver-2.0.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-archiver/2.0/plexus-archiver-2.0.pom (3 KB at 59.9 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/codehaus/plexus/plexus-io/2.0/plexus-io-2.0.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/codehaus/plexus/plexus-io/2.0/plexus-io-2.0.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-io/2.0/plexus-io-2.0.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-io/2.0/plexus-io-2.0.pom (2 KB at 35.5 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/apache/maven/shared/maven-dependency-analyzer/1.2/maven-dependency-analyzer-1.2.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/apache/maven/shared/maven-dependency-analyzer/1.2/maven-dependency-analyzer-1.2.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-dependency-analyzer/1.2/maven-dependency-analyzer-1.2.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-dependency-analyzer/1.2/maven-dependency-analyzer-1.2.pom (5 KB at 124.3 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/codehaus/plexus/plexus-archiver/2.0/plexus-archiver-2.0.jar
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/apache/maven/shared/maven-dependency-analyzer/1.2/maven-dependency-analyzer-1.2.jar
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/asm/asm/3.0/asm-3.0.jar
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/apache/maven/shared/maven-dependency-analyzer/1.2/maven-dependency-analyzer-1.2.jar
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/codehaus/plexus/plexus-archiver/2.0/plexus-archiver-2.0.jar
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/asm/asm/3.0/asm-3.0.jar
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-archiver/2.0/plexus-archiver-2.0.jar
[INFO] Downloading: http://repo.maven.apache.org/maven2/asm/asm/3.0/asm-3.0.jar
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-dependency-analyzer/1.2/maven-dependency-analyzer-1.2.jar
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-dependency-analyzer/1.2/maven-dependency-analyzer-1.2.jar (28 KB at 295.3 KB/sec)
[INFO] Downloaded: http://repo.maven.apache.org/maven2/asm/asm/3.0/asm-3.0.jar (42 KB at 389.8 KB/sec)
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-archiver/2.0/plexus-archiver-2.0.jar (176 KB at 1488.8 KB/sec)
[INFO] Configured Artifact: my.test.own:my-tomcat-webapp:0.0.1-SNAPSHOT:war
[INFO] Unpacking /home/eric/Devel/Java/Maven/my-tomcat/my-tomcat-webapp/target/my-tomcat-webapp-0.0.1-SNAPSHOT.war to /home/eric/Devel/Java/Maven/my-tomcat/my-tomcat-webapp-it/target/webapp with includes "" and excludes ""
[INFO] 
[INFO] --- maven-compiler-plugin:2.5.1:testCompile (default) @ my-tomcat-webapp-it ---
[INFO] Compiling 1 source file to /home/eric/Devel/Java/Maven/my-tomcat/my-tomcat-webapp-it/target/test-classes
[INFO] 
[INFO] --- tomcat7-maven-plugin:2.2:run-war-only (tomcat-run) @ my-tomcat-webapp-it ---
[INFO] Running war on http://localhost:9898/
[INFO] Creating Tomcat server configuration at /home/eric/Devel/Java/Maven/my-tomcat/my-tomcat-webapp-it/target/tomcat
[INFO] create webapp with contextPath: 
Jan 02, 2015 9:48:54 AM org.apache.coyote.AbstractProtocol init
INFO: Initializing ProtocolHandler ["http-bio-9898"]
Jan 02, 2015 9:48:55 AM org.apache.catalina.core.StandardService startInternal
INFO: Starting service Tomcat
Jan 02, 2015 9:48:55 AM org.apache.catalina.core.StandardEngine startInternal
INFO: Starting Servlet Engine: Apache Tomcat/7.0.47
Jan 02, 2015 9:48:57 AM org.apache.catalina.core.ApplicationContext log
INFO: No Spring WebApplicationInitializer types detected on classpath
Jan 02, 2015 9:48:57 AM org.apache.catalina.core.ApplicationContext log
INFO: Initializing Spring root WebApplicationContext
2015-01-02 09:48:57,415 [localhost-startStop-1] INFO  org.springframework.web.context.ContextLoader  - Root WebApplicationContext: initialization started
2015-01-02 09:48:57,477 [localhost-startStop-1] INFO  org.springframework.web.context.support.XmlWebApplicationContext  - Refreshing Root WebApplicationContext: startup date [Fri Jan 02 09:48:57 CET 2015]; root of context hierarchy
2015-01-02 09:48:57,526 [localhost-startStop-1] INFO  org.springframework.beans.factory.xml.XmlBeanDefinitionReader  - Loading XML bean definitions from URL [jar:file:/home/eric/Devel/Java/Maven/my-tomcat/my-tomcat-webapp-it/target/webapp/WEB-INF/lib/my-tomcat-api-impl-0.0.1-SNAPSHOT.jar!/META-INF/spring-context.xml]
2015-01-02 09:48:57,633 [localhost-startStop-1] INFO  org.springframework.beans.factory.xml.XmlBeanDefinitionReader  - Loading XML bean definitions from class path resource [META-INF/cxf/cxf.xml]
2015-01-02 09:48:57,659 [localhost-startStop-1] INFO  org.springframework.beans.factory.xml.XmlBeanDefinitionReader  - Loading XML bean definitions from class path resource [META-INF/cxf/cxf-servlet.xml]
2015-01-02 09:48:57,694 [localhost-startStop-1] INFO  org.springframework.context.annotation.ClassPathBeanDefinitionScanner  - JSR-250 'javax.annotation.ManagedBean' found and supported for component scanning
2015-01-02 09:48:57,695 [localhost-startStop-1] INFO  org.springframework.context.annotation.ClassPathBeanDefinitionScanner  - JSR-330 'javax.inject.Named' annotation found and supported for component scanning
2015-01-02 09:48:58,085 [localhost-startStop-1] INFO  org.springframework.beans.factory.xml.XmlBeanDefinitionReader  - Loading XML bean definitions from ServletContext resource [/WEB-INF/applicationContext.xml]
2015-01-02 09:48:58,157 [localhost-startStop-1] INFO  org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor  - JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2015-01-02 09:48:58,177 [localhost-startStop-1] INFO  org.springframework.beans.factory.support.DefaultListableBeanFactory  - Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@5accc38c: defining beans [cxf,org.apache.cxf.bus.spring.BusWiringBeanFactoryPostProcessor,org.apache.cxf.bus.spring.Jsr250BeanPostProcessor,org.apache.cxf.bus.spring.BusExtensionPostProcessor,org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,helloService#default,testServices,org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor]; root of factory hierarchy
Jan 02, 2015 9:48:58 AM org.apache.cxf.endpoint.ServerImpl initDestination
INFO: Setting the server's publish address to be /testServices
2015-01-02 09:48:58,469 [localhost-startStop-1] INFO  org.springframework.web.context.ContextLoader  - Root WebApplicationContext: initialization completed in 1053 ms
Jan 02, 2015 9:48:58 AM org.apache.coyote.AbstractProtocol start
INFO: Starting ProtocolHandler ["http-bio-9898"]
[INFO] 
[INFO] --- selenium-maven-plugin:2.3:start-server (default) @ my-tomcat-webapp-it ---
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/seleniumhq/selenium/selenium-server/2.37.0/selenium-server-2.37.0.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/seleniumhq/selenium/selenium-server/2.37.0/selenium-server-2.37.0.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/seleniumhq/selenium/selenium-server/2.37.0/selenium-server-2.37.0.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/seleniumhq/selenium/selenium-server/2.37.0/selenium-server-2.37.0.pom (6 KB at 123.1 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/bouncycastle/bcprov-jdk15on/1.48/bcprov-jdk15on-1.48.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/bouncycastle/bcprov-jdk15on/1.48/bcprov-jdk15on-1.48.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/bouncycastle/bcprov-jdk15on/1.48/bcprov-jdk15on-1.48.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/bouncycastle/bcprov-jdk15on/1.48/bcprov-jdk15on-1.48.pom (2 KB at 22.9 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/bouncycastle/bcpkix-jdk15on/1.48/bcpkix-jdk15on-1.48.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/bouncycastle/bcpkix-jdk15on/1.48/bcpkix-jdk15on-1.48.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/bouncycastle/bcpkix-jdk15on/1.48/bcpkix-jdk15on-1.48.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/bouncycastle/bcpkix-jdk15on/1.48/bcpkix-jdk15on-1.48.pom (2 KB at 31.5 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/mx4j/mx4j-tools/3.0.1/mx4j-tools-3.0.1.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/mx4j/mx4j-tools/3.0.1/mx4j-tools-3.0.1.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/mx4j/mx4j-tools/3.0.1/mx4j-tools-3.0.1.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/mx4j/mx4j-tools/3.0.1/mx4j-tools-3.0.1.pom (155 B at 3.7 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/mortbay/jetty/servlet-api-2.5/6.1.9/servlet-api-2.5-6.1.9.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/mortbay/jetty/servlet-api-2.5/6.1.9/servlet-api-2.5-6.1.9.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/mortbay/jetty/servlet-api-2.5/6.1.9/servlet-api-2.5-6.1.9.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/mortbay/jetty/servlet-api-2.5/6.1.9/servlet-api-2.5-6.1.9.pom (4 KB at 79.1 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/mortbay/jetty/project/6.1.9/project-6.1.9.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/mortbay/jetty/project/6.1.9/project-6.1.9.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/mortbay/jetty/project/6.1.9/project-6.1.9.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/mortbay/jetty/project/6.1.9/project-6.1.9.pom (12 KB at 305.4 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/seleniumhq/selenium/jetty-repacked/7.6.1/jetty-repacked-7.6.1.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/seleniumhq/selenium/jetty-repacked/7.6.1/jetty-repacked-7.6.1.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/seleniumhq/selenium/jetty-repacked/7.6.1/jetty-repacked-7.6.1.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/seleniumhq/selenium/jetty-repacked/7.6.1/jetty-repacked-7.6.1.pom (5 KB at 111.7 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/net/jcip/jcip-annotations/1.0/jcip-annotations-1.0.pom
[INFO] Downloaded: http://maven.repository.redhat.com/earlyaccess/all/net/jcip/jcip-annotations/1.0/jcip-annotations-1.0.pom (491 B at 0.8 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/yaml/snakeyaml/1.8/snakeyaml-1.8.pom
[INFO] Downloaded: http://maven.repository.redhat.com/earlyaccess/all/org/yaml/snakeyaml/1.8/snakeyaml-1.8.pom (14 KB at 23.8 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/codehaus/gmaven/gmaven-mojo/1.3/gmaven-mojo-1.3.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/codehaus/gmaven/gmaven-mojo/1.3/gmaven-mojo-1.3.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/codehaus/gmaven/gmaven-mojo/1.3/gmaven-mojo-1.3.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/codehaus/gmaven/gmaven-mojo/1.3/gmaven-mojo-1.3.pom (3 KB at 69.4 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/codehaus/gmaven/gmaven/1.3/gmaven-1.3.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/codehaus/gmaven/gmaven/1.3/gmaven-1.3.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/codehaus/gmaven/gmaven/1.3/gmaven-1.3.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/codehaus/gmaven/gmaven/1.3/gmaven-1.3.pom (42 KB at 928.4 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/codehaus/codehaus-parent/1/codehaus-parent-1.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/codehaus/codehaus-parent/1/codehaus-parent-1.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/codehaus/codehaus-parent/1/codehaus-parent-1.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/codehaus/codehaus-parent/1/codehaus-parent-1.pom (4 KB at 80.0 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/codehaus/gmaven/runtime/gmaven-runtime-api/1.3/gmaven-runtime-api-1.3.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/codehaus/gmaven/runtime/gmaven-runtime-api/1.3/gmaven-runtime-api-1.3.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/codehaus/gmaven/runtime/gmaven-runtime-api/1.3/gmaven-runtime-api-1.3.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/codehaus/gmaven/runtime/gmaven-runtime-api/1.3/gmaven-runtime-api-1.3.pom (2 KB at 37.6 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/codehaus/gmaven/runtime/gmaven-runtime/1.3/gmaven-runtime-1.3.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/codehaus/gmaven/runtime/gmaven-runtime/1.3/gmaven-runtime-1.3.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/codehaus/gmaven/runtime/gmaven-runtime/1.3/gmaven-runtime-1.3.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/codehaus/gmaven/runtime/gmaven-runtime/1.3/gmaven-runtime-1.3.pom (3 KB at 69.2 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/codehaus/gmaven/feature/gmaven-feature-api/1.3/gmaven-feature-api-1.3.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/codehaus/gmaven/feature/gmaven-feature-api/1.3/gmaven-feature-api-1.3.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/codehaus/gmaven/feature/gmaven-feature-api/1.3/gmaven-feature-api-1.3.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/codehaus/gmaven/feature/gmaven-feature-api/1.3/gmaven-feature-api-1.3.pom (2 KB at 42.2 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/codehaus/gmaven/feature/gmaven-feature/1.3/gmaven-feature-1.3.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/codehaus/gmaven/feature/gmaven-feature/1.3/gmaven-feature-1.3.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/codehaus/gmaven/feature/gmaven-feature/1.3/gmaven-feature-1.3.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/codehaus/gmaven/feature/gmaven-feature/1.3/gmaven-feature-1.3.pom (2 KB at 36.8 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/codehaus/gmaven/runtime/gmaven-runtime-1.5/1.3/gmaven-runtime-1.5-1.3.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/codehaus/gmaven/runtime/gmaven-runtime-1.5/1.3/gmaven-runtime-1.5-1.3.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/codehaus/gmaven/runtime/gmaven-runtime-1.5/1.3/gmaven-runtime-1.5-1.3.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/codehaus/gmaven/runtime/gmaven-runtime-1.5/1.3/gmaven-runtime-1.5-1.3.pom (3 KB at 56.1 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/slf4j/slf4j-api/1.5.10/slf4j-api-1.5.10.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/slf4j/slf4j-api/1.5.10/slf4j-api-1.5.10.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/slf4j/slf4j-api/1.5.10/slf4j-api-1.5.10.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/slf4j/slf4j-api/1.5.10/slf4j-api-1.5.10.pom (3 KB at 75.0 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/slf4j/slf4j-parent/1.5.10/slf4j-parent-1.5.10.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/slf4j/slf4j-parent/1.5.10/slf4j-parent-1.5.10.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/slf4j/slf4j-parent/1.5.10/slf4j-parent-1.5.10.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/slf4j/slf4j-parent/1.5.10/slf4j-parent-1.5.10.pom (9 KB at 209.7 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/codehaus/gmaven/feature/gmaven-feature-support/1.3/gmaven-feature-support-1.3.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/codehaus/gmaven/feature/gmaven-feature-support/1.3/gmaven-feature-support-1.3.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/codehaus/gmaven/feature/gmaven-feature-support/1.3/gmaven-feature-support-1.3.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/codehaus/gmaven/feature/gmaven-feature-support/1.3/gmaven-feature-support-1.3.pom (2 KB at 38.8 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/codehaus/gmaven/runtime/gmaven-runtime-support/1.3/gmaven-runtime-support-1.3.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/codehaus/gmaven/runtime/gmaven-runtime-support/1.3/gmaven-runtime-support-1.3.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/codehaus/gmaven/runtime/gmaven-runtime-support/1.3/gmaven-runtime-support-1.3.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/codehaus/gmaven/runtime/gmaven-runtime-support/1.3/gmaven-runtime-support-1.3.pom (3 KB at 51.3 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/sonatype/gshell/gshell-io/2.0/gshell-io-2.0.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/sonatype/gshell/gshell-io/2.0/gshell-io-2.0.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/sonatype/gshell/gshell-io/2.0/gshell-io-2.0.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/sonatype/gshell/gshell-io/2.0/gshell-io-2.0.pom (2 KB at 32.2 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/sonatype/gshell/gshell/2.0/gshell-2.0.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/sonatype/gshell/gshell/2.0/gshell-2.0.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/sonatype/gshell/gshell/2.0/gshell-2.0.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/sonatype/gshell/gshell/2.0/gshell-2.0.pom (15 KB at 323.2 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/sonatype/gossip/gossip/1.0/gossip-1.0.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/sonatype/gossip/gossip/1.0/gossip-1.0.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/sonatype/gossip/gossip/1.0/gossip-1.0.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/sonatype/gossip/gossip/1.0/gossip-1.0.pom (20 KB at 454.8 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/com/thoughtworks/qdox/qdox/1.10/qdox-1.10.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/com/thoughtworks/qdox/qdox/1.10/qdox-1.10.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/com/thoughtworks/qdox/qdox/1.10/qdox-1.10.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/com/thoughtworks/qdox/qdox/1.10/qdox-1.10.pom (17 KB at 377.2 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/codehaus/gmaven/gmaven-mojo-support/1.3/gmaven-mojo-support-1.3.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/codehaus/gmaven/gmaven-mojo-support/1.3/gmaven-mojo-support-1.3.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/codehaus/gmaven/gmaven-mojo-support/1.3/gmaven-mojo-support-1.3.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/codehaus/gmaven/gmaven-mojo-support/1.3/gmaven-mojo-support-1.3.pom (3 KB at 47.7 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/codehaus/groovy/groovy-all-minimal/1.5.8/groovy-all-minimal-1.5.8.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/codehaus/groovy/groovy-all-minimal/1.5.8/groovy-all-minimal-1.5.8.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/codehaus/groovy/groovy-all-minimal/1.5.8/groovy-all-minimal-1.5.8.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/codehaus/groovy/groovy-all-minimal/1.5.8/groovy-all-minimal-1.5.8.pom (18 KB at 398.0 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/codehaus/groovy/groovy-all/1.7.5/groovy-all-1.7.5.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/codehaus/groovy/groovy-all/1.7.5/groovy-all-1.7.5.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/codehaus/groovy/groovy-all/1.7.5/groovy-all-1.7.5.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/codehaus/groovy/groovy-all/1.7.5/groovy-all-1.7.5.pom (27 KB at 607.5 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/seleniumhq/selenium/selenium-remote-control/2.0rc2/selenium-remote-control-2.0rc2.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/seleniumhq/selenium/selenium-remote-control/2.0rc2/selenium-remote-control-2.0rc2.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/seleniumhq/selenium/selenium-remote-control/2.0rc2/selenium-remote-control-2.0rc2.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/seleniumhq/selenium/selenium-remote-control/2.0rc2/selenium-remote-control-2.0rc2.pom (6 KB at 47.1 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/seleniumhq/selenium/selenium-parent/2.0rc2/selenium-parent-2.0rc2.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/seleniumhq/selenium/selenium-parent/2.0rc2/selenium-parent-2.0rc2.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/seleniumhq/selenium/selenium-parent/2.0rc2/selenium-parent-2.0rc2.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/seleniumhq/selenium/selenium-parent/2.0rc2/selenium-parent-2.0rc2.pom (8 KB at 165.0 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/seleniumhq/selenium/selenium-chrome-driver/2.0rc2/selenium-chrome-driver-2.0rc2.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/seleniumhq/selenium/selenium-chrome-driver/2.0rc2/selenium-chrome-driver-2.0rc2.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/seleniumhq/selenium/selenium-chrome-driver/2.0rc2/selenium-chrome-driver-2.0rc2.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/seleniumhq/selenium/selenium-chrome-driver/2.0rc2/selenium-chrome-driver-2.0rc2.pom (3 KB at 65.1 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/seleniumhq/selenium/selenium-remote-driver/2.0rc2/selenium-remote-driver-2.0rc2.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/seleniumhq/selenium/selenium-remote-driver/2.0rc2/selenium-remote-driver-2.0rc2.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/seleniumhq/selenium/selenium-remote-driver/2.0rc2/selenium-remote-driver-2.0rc2.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/seleniumhq/selenium/selenium-remote-driver/2.0rc2/selenium-remote-driver-2.0rc2.pom (3 KB at 72.2 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/seleniumhq/selenium/selenium-api/2.0rc2/selenium-api-2.0rc2.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/seleniumhq/selenium/selenium-api/2.0rc2/selenium-api-2.0rc2.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/seleniumhq/selenium/selenium-api/2.0rc2/selenium-api-2.0rc2.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/seleniumhq/selenium/selenium-api/2.0rc2/selenium-api-2.0rc2.pom (4 KB at 92.3 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/com/google/guava/guava/r09/guava-r09.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/com/google/guava/guava/r09/guava-r09.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/com/google/guava/guava/r09/guava-r09.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/com/google/guava/guava/r09/guava-r09.pom (4 KB at 77.3 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/seleniumhq/selenium/selenium-htmlunit-driver/2.0rc2/selenium-htmlunit-driver-2.0rc2.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/seleniumhq/selenium/selenium-htmlunit-driver/2.0rc2/selenium-htmlunit-driver-2.0rc2.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/seleniumhq/selenium/selenium-htmlunit-driver/2.0rc2/selenium-htmlunit-driver-2.0rc2.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/seleniumhq/selenium/selenium-htmlunit-driver/2.0rc2/selenium-htmlunit-driver-2.0rc2.pom (3 KB at 54.5 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/net/sourceforge/htmlunit/htmlunit/2.8/htmlunit-2.8.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/net/sourceforge/htmlunit/htmlunit/2.8/htmlunit-2.8.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/net/sourceforge/htmlunit/htmlunit/2.8/htmlunit-2.8.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/net/sourceforge/htmlunit/htmlunit/2.8/htmlunit-2.8.pom (31 KB at 719.0 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/apache/httpcomponents/httpclient/4.0.1/httpclient-4.0.1.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/apache/httpcomponents/httpclient/4.0.1/httpclient-4.0.1.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/apache/httpcomponents/httpclient/4.0.1/httpclient-4.0.1.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/apache/httpcomponents/httpclient/4.0.1/httpclient-4.0.1.pom (7 KB at 150.9 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/apache/httpcomponents/httpcomponents-client/4.0.1/httpcomponents-client-4.0.1.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/apache/httpcomponents/httpcomponents-client/4.0.1/httpcomponents-client-4.0.1.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/apache/httpcomponents/httpcomponents-client/4.0.1/httpcomponents-client-4.0.1.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/apache/httpcomponents/httpcomponents-client/4.0.1/httpcomponents-client-4.0.1.pom (9 KB at 224.5 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/apache/httpcomponents/httpmime/4.0.1/httpmime-4.0.1.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/apache/httpcomponents/httpmime/4.0.1/httpmime-4.0.1.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/apache/httpcomponents/httpmime/4.0.1/httpmime-4.0.1.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/apache/httpcomponents/httpmime/4.0.1/httpmime-4.0.1.pom (7 KB at 170.6 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/apache/james/apache-mime4j/0.6/apache-mime4j-0.6.pom
[INFO] Downloaded: http://maven.repository.redhat.com/earlyaccess/all/org/apache/james/apache-mime4j/0.6/apache-mime4j-0.6.pom (14 KB at 23.0 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/apache/james/james-project/1.2/james-project-1.2.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/apache/james/james-project/1.2/james-project-1.2.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/apache/james/james-project/1.2/james-project-1.2.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/apache/james/james-project/1.2/james-project-1.2.pom (3 KB at 62.1 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/apache/james/james-parent/1.1/james-parent-1.1.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/apache/james/james-parent/1.1/james-parent-1.1.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/apache/james/james-parent/1.1/james-parent-1.1.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/apache/james/james-parent/1.1/james-parent-1.1.pom (12 KB at 250.6 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/commons-codec/commons-codec/1.4/commons-codec-1.4.pom
[INFO] Downloaded: http://maven.repository.redhat.com/earlyaccess/all/commons-codec/commons-codec/1.4/commons-codec-1.4.pom (11 KB at 13.3 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/net/sourceforge/htmlunit/htmlunit-core-js/2.8/htmlunit-core-js-2.8.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/net/sourceforge/htmlunit/htmlunit-core-js/2.8/htmlunit-core-js-2.8.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/net/sourceforge/htmlunit/htmlunit-core-js/2.8/htmlunit-core-js-2.8.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/net/sourceforge/htmlunit/htmlunit-core-js/2.8/htmlunit-core-js-2.8.pom (2 KB at 38.1 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/net/sourceforge/nekohtml/nekohtml/1.9.14/nekohtml-1.9.14.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/net/sourceforge/nekohtml/nekohtml/1.9.14/nekohtml-1.9.14.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/net/sourceforge/nekohtml/nekohtml/1.9.14/nekohtml-1.9.14.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/net/sourceforge/nekohtml/nekohtml/1.9.14/nekohtml-1.9.14.pom (2 KB at 30.3 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/net/sourceforge/cssparser/cssparser/0.9.5/cssparser-0.9.5.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/net/sourceforge/cssparser/cssparser/0.9.5/cssparser-0.9.5.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/net/sourceforge/cssparser/cssparser/0.9.5/cssparser-0.9.5.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/net/sourceforge/cssparser/cssparser/0.9.5/cssparser-0.9.5.pom (4 KB at 82.6 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/seleniumhq/selenium/selenium-firefox-driver/2.0rc2/selenium-firefox-driver-2.0rc2.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/seleniumhq/selenium/selenium-firefox-driver/2.0rc2/selenium-firefox-driver-2.0rc2.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/seleniumhq/selenium/selenium-firefox-driver/2.0rc2/selenium-firefox-driver-2.0rc2.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/seleniumhq/selenium/selenium-firefox-driver/2.0rc2/selenium-firefox-driver-2.0rc2.pom (4 KB at 68.4 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/commons-io/commons-io/2.0.1/commons-io-2.0.1.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/commons-io/commons-io/2.0.1/commons-io-2.0.1.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/commons-io/commons-io/2.0.1/commons-io-2.0.1.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/commons-io/commons-io/2.0.1/commons-io-2.0.1.pom (9 KB at 187.2 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/apache/commons/commons-parent/15/commons-parent-15.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/apache/commons/commons-parent/15/commons-parent-15.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/apache/commons/commons-parent/15/commons-parent-15.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/apache/commons/commons-parent/15/commons-parent-15.pom (31 KB at 719.7 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/seleniumhq/selenium/selenium-ie-driver/2.0rc2/selenium-ie-driver-2.0rc2.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/seleniumhq/selenium/selenium-ie-driver/2.0rc2/selenium-ie-driver-2.0rc2.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/seleniumhq/selenium/selenium-ie-driver/2.0rc2/selenium-ie-driver-2.0rc2.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/seleniumhq/selenium/selenium-ie-driver/2.0rc2/selenium-ie-driver-2.0rc2.pom (4 KB at 71.0 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/net/java/dev/jna/jna/3.2.2/jna-3.2.2.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/net/java/dev/jna/jna/3.2.2/jna-3.2.2.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/net/java/dev/jna/jna/3.2.2/jna-3.2.2.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/net/java/dev/jna/jna/3.2.2/jna-3.2.2.pom (2 KB at 36.8 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/seleniumhq/selenium/selenium-iphone-driver/2.0rc2/selenium-iphone-driver-2.0rc2.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/seleniumhq/selenium/selenium-iphone-driver/2.0rc2/selenium-iphone-driver-2.0rc2.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/seleniumhq/selenium/selenium-iphone-driver/2.0rc2/selenium-iphone-driver-2.0rc2.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/seleniumhq/selenium/selenium-iphone-driver/2.0rc2/selenium-iphone-driver-2.0rc2.pom (2 KB at 44.6 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/bouncycastle/bcprov-jdk15/140/bcprov-jdk15-140.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/bouncycastle/bcprov-jdk15/140/bcprov-jdk15-140.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/bouncycastle/bcprov-jdk15/140/bcprov-jdk15-140.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/bouncycastle/bcprov-jdk15/140/bcprov-jdk15-140.pom (2 KB at 25.8 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/seleniumhq/selenium/client-drivers/selenium-java-client-driver/1.0.2/selenium-java-client-driver-1.0.2.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/seleniumhq/selenium/client-drivers/selenium-java-client-driver/1.0.2/selenium-java-client-driver-1.0.2.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/seleniumhq/selenium/client-drivers/selenium-java-client-driver/1.0.2/selenium-java-client-driver-1.0.2.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/seleniumhq/selenium/client-drivers/selenium-java-client-driver/1.0.2/selenium-java-client-driver-1.0.2.pom (3 KB at 72.0 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/seleniumhq/selenium/client-drivers/selenium-client-drivers/1.0.2/selenium-client-drivers-1.0.2.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/seleniumhq/selenium/client-drivers/selenium-client-drivers/1.0.2/selenium-client-drivers-1.0.2.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/seleniumhq/selenium/client-drivers/selenium-client-drivers/1.0.2/selenium-client-drivers-1.0.2.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/seleniumhq/selenium/client-drivers/selenium-client-drivers/1.0.2/selenium-client-drivers-1.0.2.pom (5 KB at 96.0 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/seleniumhq/selenium/selenium-rc/1.0.2/selenium-rc-1.0.2.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/seleniumhq/selenium/selenium-rc/1.0.2/selenium-rc-1.0.2.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/seleniumhq/selenium/selenium-rc/1.0.2/selenium-rc-1.0.2.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/seleniumhq/selenium/selenium-rc/1.0.2/selenium-rc-1.0.2.pom (7 KB at 155.0 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/commons-codec/commons-codec/1.5/commons-codec-1.5.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/commons-codec/commons-codec/1.5/commons-codec-1.5.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/commons-codec/commons-codec/1.5/commons-codec-1.5.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/commons-codec/commons-codec/1.5/commons-codec-1.5.pom (10 KB at 237.5 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/apache/commons/commons-parent/20/commons-parent-20.pom
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/apache/commons/commons-parent/20/commons-parent-20.pom
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/apache/commons/commons-parent/20/commons-parent-20.pom
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/apache/commons/commons-parent/20/commons-parent-20.pom (33 KB at 724.8 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/seleniumhq/selenium/selenium-server/2.37.0/selenium-server-2.37.0.jar
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/bouncycastle/bcprov-jdk15on/1.48/bcprov-jdk15on-1.48.jar
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/bouncycastle/bcpkix-jdk15on/1.48/bcpkix-jdk15on-1.48.jar
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/mx4j/mx4j-tools/3.0.1/mx4j-tools-3.0.1.jar
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/mortbay/jetty/servlet-api-2.5/6.1.9/servlet-api-2.5-6.1.9.jar
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/seleniumhq/selenium/jetty-repacked/7.6.1/jetty-repacked-7.6.1.jar
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/net/jcip/jcip-annotations/1.0/jcip-annotations-1.0.jar
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/yaml/snakeyaml/1.8/snakeyaml-1.8.jar
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/codehaus/gmaven/gmaven-mojo/1.3/gmaven-mojo-1.3.jar
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/codehaus/gmaven/runtime/gmaven-runtime-api/1.3/gmaven-runtime-api-1.3.jar
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/codehaus/gmaven/feature/gmaven-feature-api/1.3/gmaven-feature-api-1.3.jar
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/codehaus/gmaven/runtime/gmaven-runtime-1.5/1.3/gmaven-runtime-1.5-1.3.jar
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/slf4j/slf4j-api/1.5.10/slf4j-api-1.5.10.jar
[INFO] Downloaded: http://maven.repository.redhat.com/earlyaccess/all/net/jcip/jcip-annotations/1.0/jcip-annotations-1.0.jar (3 KB at 2.7 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/codehaus/gmaven/feature/gmaven-feature-support/1.3/gmaven-feature-support-1.3.jar
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/codehaus/gmaven/runtime/gmaven-runtime-support/1.3/gmaven-runtime-support-1.3.jar
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/sonatype/gshell/gshell-io/2.0/gshell-io-2.0.jar
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/sonatype/gossip/gossip/1.0/gossip-1.0.jar
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/com/thoughtworks/qdox/qdox/1.10/qdox-1.10.jar
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/codehaus/plexus/plexus-utils/1.5.5/plexus-utils-1.5.5.jar
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/codehaus/gmaven/gmaven-mojo-support/1.3/gmaven-mojo-support-1.3.jar
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/codehaus/groovy/groovy-all/1.7.5/groovy-all-1.7.5.jar
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/seleniumhq/selenium/selenium-remote-control/2.0rc2/selenium-remote-control-2.0rc2.jar
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/seleniumhq/selenium/selenium-chrome-driver/2.0rc2/selenium-chrome-driver-2.0rc2.jar
[INFO] Downloaded: http://maven.repository.redhat.com/earlyaccess/all/org/yaml/snakeyaml/1.8/snakeyaml-1.8.jar (252 KB at 164.0 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/seleniumhq/selenium/selenium-htmlunit-driver/2.0rc2/selenium-htmlunit-driver-2.0rc2.jar
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/net/sourceforge/htmlunit/htmlunit/2.8/htmlunit-2.8.jar
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/apache/httpcomponents/httpmime/4.0.1/httpmime-4.0.1.jar
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/apache/james/apache-mime4j/0.6/apache-mime4j-0.6.jar
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/net/sourceforge/htmlunit/htmlunit-core-js/2.8/htmlunit-core-js-2.8.jar
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/xml-apis/xml-apis/1.3.04/xml-apis-1.3.04.jar
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/net/sourceforge/nekohtml/nekohtml/1.9.14/nekohtml-1.9.14.jar
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/net/sourceforge/cssparser/cssparser/0.9.5/cssparser-0.9.5.jar
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/seleniumhq/selenium/selenium-firefox-driver/2.0rc2/selenium-firefox-driver-2.0rc2.jar
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/commons-io/commons-io/2.0.1/commons-io-2.0.1.jar
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/seleniumhq/selenium/selenium-ie-driver/2.0rc2/selenium-ie-driver-2.0rc2.jar
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/seleniumhq/selenium/selenium-iphone-driver/2.0rc2/selenium-iphone-driver-2.0rc2.jar
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/bouncycastle/bcprov-jdk15/140/bcprov-jdk15-140.jar
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/org/seleniumhq/selenium/client-drivers/selenium-java-client-driver/1.0.2/selenium-java-client-driver-1.0.2.jar
[INFO] Downloading: http://maven.repository.redhat.com/earlyaccess/all/commons-codec/commons-codec/1.5/commons-codec-1.5.jar
[INFO] Downloaded: http://maven.repository.redhat.com/earlyaccess/all/org/apache/james/apache-mime4j/0.6/apache-mime4j-0.6.jar (337 KB at 111.8 KB/sec)
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/seleniumhq/selenium/selenium-server/2.37.0/selenium-server-2.37.0.jar
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/bouncycastle/bcprov-jdk15on/1.48/bcprov-jdk15on-1.48.jar
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/bouncycastle/bcpkix-jdk15on/1.48/bcpkix-jdk15on-1.48.jar
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/mx4j/mx4j-tools/3.0.1/mx4j-tools-3.0.1.jar
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/mortbay/jetty/servlet-api-2.5/6.1.9/servlet-api-2.5-6.1.9.jar
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/seleniumhq/selenium/jetty-repacked/7.6.1/jetty-repacked-7.6.1.jar
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/codehaus/gmaven/gmaven-mojo/1.3/gmaven-mojo-1.3.jar
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/codehaus/gmaven/runtime/gmaven-runtime-api/1.3/gmaven-runtime-api-1.3.jar
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/codehaus/gmaven/feature/gmaven-feature-api/1.3/gmaven-feature-api-1.3.jar
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/codehaus/gmaven/runtime/gmaven-runtime-1.5/1.3/gmaven-runtime-1.5-1.3.jar
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/slf4j/slf4j-api/1.5.10/slf4j-api-1.5.10.jar
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/codehaus/gmaven/feature/gmaven-feature-support/1.3/gmaven-feature-support-1.3.jar
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/codehaus/gmaven/runtime/gmaven-runtime-support/1.3/gmaven-runtime-support-1.3.jar
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/sonatype/gshell/gshell-io/2.0/gshell-io-2.0.jar
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/sonatype/gossip/gossip/1.0/gossip-1.0.jar
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/com/thoughtworks/qdox/qdox/1.10/qdox-1.10.jar
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/codehaus/plexus/plexus-utils/1.5.5/plexus-utils-1.5.5.jar
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/codehaus/gmaven/gmaven-mojo-support/1.3/gmaven-mojo-support-1.3.jar
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/codehaus/groovy/groovy-all/1.7.5/groovy-all-1.7.5.jar
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/seleniumhq/selenium/selenium-remote-control/2.0rc2/selenium-remote-control-2.0rc2.jar
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/seleniumhq/selenium/selenium-chrome-driver/2.0rc2/selenium-chrome-driver-2.0rc2.jar
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/seleniumhq/selenium/selenium-htmlunit-driver/2.0rc2/selenium-htmlunit-driver-2.0rc2.jar
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/net/sourceforge/htmlunit/htmlunit/2.8/htmlunit-2.8.jar
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/apache/httpcomponents/httpmime/4.0.1/httpmime-4.0.1.jar
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/net/sourceforge/htmlunit/htmlunit-core-js/2.8/htmlunit-core-js-2.8.jar
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/xml-apis/xml-apis/1.3.04/xml-apis-1.3.04.jar
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/net/sourceforge/nekohtml/nekohtml/1.9.14/nekohtml-1.9.14.jar
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/net/sourceforge/cssparser/cssparser/0.9.5/cssparser-0.9.5.jar
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/seleniumhq/selenium/selenium-firefox-driver/2.0rc2/selenium-firefox-driver-2.0rc2.jar
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/commons-io/commons-io/2.0.1/commons-io-2.0.1.jar
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/seleniumhq/selenium/selenium-ie-driver/2.0rc2/selenium-ie-driver-2.0rc2.jar
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/seleniumhq/selenium/selenium-iphone-driver/2.0rc2/selenium-iphone-driver-2.0rc2.jar
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/bouncycastle/bcprov-jdk15/140/bcprov-jdk15-140.jar
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/org/seleniumhq/selenium/client-drivers/selenium-java-client-driver/1.0.2/selenium-java-client-driver-1.0.2.jar
[INFO] Downloading: http://maven.repository.redhat.com/techpreview/all/commons-codec/commons-codec/1.5/commons-codec-1.5.jar
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/seleniumhq/selenium/selenium-server/2.37.0/selenium-server-2.37.0.jar
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/bouncycastle/bcprov-jdk15on/1.48/bcprov-jdk15on-1.48.jar
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/bouncycastle/bcpkix-jdk15on/1.48/bcpkix-jdk15on-1.48.jar
[INFO] Downloading: http://repo.maven.apache.org/maven2/mx4j/mx4j-tools/3.0.1/mx4j-tools-3.0.1.jar
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/mortbay/jetty/servlet-api-2.5/6.1.9/servlet-api-2.5-6.1.9.jar
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/mortbay/jetty/servlet-api-2.5/6.1.9/servlet-api-2.5-6.1.9.jar (130 KB at 793.4 KB/sec)
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/seleniumhq/selenium/jetty-repacked/7.6.1/jetty-repacked-7.6.1.jar
[INFO] Downloaded: http://repo.maven.apache.org/maven2/mx4j/mx4j-tools/3.0.1/mx4j-tools-3.0.1.jar (486 KB at 1709.0 KB/sec)
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/codehaus/gmaven/gmaven-mojo/1.3/gmaven-mojo-1.3.jar
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/codehaus/gmaven/gmaven-mojo/1.3/gmaven-mojo-1.3.jar (10 KB at 27.9 KB/sec)
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/codehaus/gmaven/runtime/gmaven-runtime-api/1.3/gmaven-runtime-api-1.3.jar
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/bouncycastle/bcpkix-jdk15on/1.48/bcpkix-jdk15on-1.48.jar (572 KB at 1671.0 KB/sec)
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/codehaus/gmaven/feature/gmaven-feature-api/1.3/gmaven-feature-api-1.3.jar
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/codehaus/gmaven/runtime/gmaven-runtime-api/1.3/gmaven-runtime-api-1.3.jar (22 KB at 55.9 KB/sec)
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/codehaus/gmaven/runtime/gmaven-runtime-1.5/1.3/gmaven-runtime-1.5-1.3.jar
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/codehaus/gmaven/feature/gmaven-feature-api/1.3/gmaven-feature-api-1.3.jar (17 KB at 42.9 KB/sec)
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/slf4j/slf4j-api/1.5.10/slf4j-api-1.5.10.jar
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/codehaus/gmaven/runtime/gmaven-runtime-1.5/1.3/gmaven-runtime-1.5-1.3.jar (45 KB at 101.4 KB/sec)
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/codehaus/gmaven/feature/gmaven-feature-support/1.3/gmaven-feature-support-1.3.jar
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/slf4j/slf4j-api/1.5.10/slf4j-api-1.5.10.jar (24 KB at 52.9 KB/sec)
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/codehaus/gmaven/runtime/gmaven-runtime-support/1.3/gmaven-runtime-support-1.3.jar
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/codehaus/gmaven/feature/gmaven-feature-support/1.3/gmaven-feature-support-1.3.jar (14 KB at 27.4 KB/sec)
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/sonatype/gshell/gshell-io/2.0/gshell-io-2.0.jar
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/codehaus/gmaven/runtime/gmaven-runtime-support/1.3/gmaven-runtime-support-1.3.jar (78 KB at 154.6 KB/sec)
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/sonatype/gossip/gossip/1.0/gossip-1.0.jar
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/sonatype/gshell/gshell-io/2.0/gshell-io-2.0.jar (22 KB at 40.7 KB/sec)
[INFO] Downloading: http://repo.maven.apache.org/maven2/com/thoughtworks/qdox/qdox/1.10/qdox-1.10.jar
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/seleniumhq/selenium/jetty-repacked/7.6.1/jetty-repacked-7.6.1.jar (996 KB at 1797.7 KB/sec)
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/1.5.5/plexus-utils-1.5.5.jar
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/sonatype/gossip/gossip/1.0/gossip-1.0.jar (79 KB at 137.2 KB/sec)
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/codehaus/gmaven/gmaven-mojo-support/1.3/gmaven-mojo-support-1.3.jar
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/codehaus/gmaven/gmaven-mojo-support/1.3/gmaven-mojo-support-1.3.jar (31 KB at 47.5 KB/sec)
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/codehaus/groovy/groovy-all/1.7.5/groovy-all-1.7.5.jar
[INFO] Downloaded: http://repo.maven.apache.org/maven2/com/thoughtworks/qdox/qdox/1.10/qdox-1.10.jar (168 KB at 257.3 KB/sec)
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/seleniumhq/selenium/selenium-remote-control/2.0rc2/selenium-remote-control-2.0rc2.jar
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/1.5.5/plexus-utils-1.5.5.jar (246 KB at 365.7 KB/sec)
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/seleniumhq/selenium/selenium-chrome-driver/2.0rc2/selenium-chrome-driver-2.0rc2.jar
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/bouncycastle/bcprov-jdk15on/1.48/bcprov-jdk15on-1.48.jar (2264 KB at 3295.2 KB/sec)
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/seleniumhq/selenium/selenium-htmlunit-driver/2.0rc2/selenium-htmlunit-driver-2.0rc2.jar
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/seleniumhq/selenium/selenium-chrome-driver/2.0rc2/selenium-chrome-driver-2.0rc2.jar (10 KB at 13.3 KB/sec)
[INFO] Downloading: http://repo.maven.apache.org/maven2/net/sourceforge/htmlunit/htmlunit/2.8/htmlunit-2.8.jar
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/seleniumhq/selenium/selenium-htmlunit-driver/2.0rc2/selenium-htmlunit-driver-2.0rc2.jar (48 KB at 64.9 KB/sec)
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/apache/httpcomponents/httpmime/4.0.1/httpmime-4.0.1.jar
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/seleniumhq/selenium/selenium-server/2.37.0/selenium-server-2.37.0.jar (2288 KB at 2986.9 KB/sec)
[INFO] Downloading: http://repo.maven.apache.org/maven2/net/sourceforge/htmlunit/htmlunit-core-js/2.8/htmlunit-core-js-2.8.jar
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/seleniumhq/selenium/selenium-remote-control/2.0rc2/selenium-remote-control-2.0rc2.jar (308 KB at 393.7 KB/sec)
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/apache/httpcomponents/httpmime/4.0.1/httpmime-4.0.1.jar (25 KB at 31.8 KB/sec)
[INFO] Downloading: http://repo.maven.apache.org/maven2/xml-apis/xml-apis/1.3.04/xml-apis-1.3.04.jar
[INFO] Downloading: http://repo.maven.apache.org/maven2/net/sourceforge/nekohtml/nekohtml/1.9.14/nekohtml-1.9.14.jar
[INFO] Downloaded: http://repo.maven.apache.org/maven2/net/sourceforge/nekohtml/nekohtml/1.9.14/nekohtml-1.9.14.jar (122 KB at 138.0 KB/sec)
[INFO] Downloading: http://repo.maven.apache.org/maven2/net/sourceforge/cssparser/cssparser/0.9.5/cssparser-0.9.5.jar
[INFO] Downloaded: http://repo.maven.apache.org/maven2/xml-apis/xml-apis/1.3.04/xml-apis-1.3.04.jar (190 KB at 204.7 KB/sec)
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/seleniumhq/selenium/selenium-firefox-driver/2.0rc2/selenium-firefox-driver-2.0rc2.jar
[INFO] Downloaded: http://repo.maven.apache.org/maven2/net/sourceforge/htmlunit/htmlunit-core-js/2.8/htmlunit-core-js-2.8.jar (892 KB at 905.7 KB/sec)
[INFO] Downloading: http://repo.maven.apache.org/maven2/commons-io/commons-io/2.0.1/commons-io-2.0.1.jar
[INFO] Downloaded: http://repo.maven.apache.org/maven2/net/sourceforge/cssparser/cssparser/0.9.5/cssparser-0.9.5.jar (248 KB at 245.3 KB/sec)
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/seleniumhq/selenium/selenium-ie-driver/2.0rc2/selenium-ie-driver-2.0rc2.jar
[INFO] Downloaded: http://repo.maven.apache.org/maven2/net/sourceforge/htmlunit/htmlunit/2.8/htmlunit-2.8.jar (940 KB at 910.1 KB/sec)
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/seleniumhq/selenium/selenium-iphone-driver/2.0rc2/selenium-iphone-driver-2.0rc2.jar
[INFO] Downloaded: http://repo.maven.apache.org/maven2/commons-io/commons-io/2.0.1/commons-io-2.0.1.jar (156 KB at 146.8 KB/sec)
[INFO] Downloading: http://repo.maven.apache.org/maven2/bouncycastle/bcprov-jdk15/140/bcprov-jdk15-140.jar
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/seleniumhq/selenium/selenium-iphone-driver/2.0rc2/selenium-iphone-driver-2.0rc2.jar (11 KB at 9.7 KB/sec)
[INFO] Downloading: http://repo.maven.apache.org/maven2/org/seleniumhq/selenium/client-drivers/selenium-java-client-driver/1.0.2/selenium-java-client-driver-1.0.2.jar
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/seleniumhq/selenium/client-drivers/selenium-java-client-driver/1.0.2/selenium-java-client-driver-1.0.2.jar (54 KB at 44.5 KB/sec)
[INFO] Downloading: http://repo.maven.apache.org/maven2/commons-codec/commons-codec/1.5/commons-codec-1.5.jar
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/seleniumhq/selenium/selenium-firefox-driver/2.0rc2/selenium-firefox-driver-2.0rc2.jar (640 KB at 516.6 KB/sec)
[INFO] Downloaded: http://repo.maven.apache.org/maven2/commons-codec/commons-codec/1.5/commons-codec-1.5.jar (72 KB at 54.1 KB/sec)
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/seleniumhq/selenium/selenium-ie-driver/2.0rc2/selenium-ie-driver-2.0rc2.jar (908 KB at 677.6 KB/sec)
[INFO] Downloaded: http://repo.maven.apache.org/maven2/bouncycastle/bcprov-jdk15/140/bcprov-jdk15-140.jar (1557 KB at 1106.7 KB/sec)
[INFO] Downloaded: http://repo.maven.apache.org/maven2/org/codehaus/groovy/groovy-all/1.7.5/groovy-all-1.7.5.jar (5354 KB at 3231.0 KB/sec)
Created dir: /home/eric/Devel/Java/Maven/my-tomcat/my-tomcat-webapp-it/target/selenium
Launching Selenium Server
Waiting for Selenium Server...
[INFO] Redirecting output to: /home/eric/Devel/Java/Maven/my-tomcat/my-tomcat-webapp-it/target/selenium/server.log
[INFO] User extensions: /home/eric/Devel/Java/Maven/my-tomcat/my-tomcat-webapp-it/target/selenium/user-extensions.js
Selenium Server started
[INFO] 
[INFO] --- maven-surefire-plugin:2.13:test (selenium-integration-tests) @ my-tomcat-webapp-it ---
[INFO] Surefire report directory: /home/eric/Devel/Java/Maven/my-tomcat/my-tomcat-webapp-it/target/surefire-reports

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running my.test.own.my_tomcat.webapp.test.SimpleTest
log4j:WARN No appenders could be found for logger (com.gargoylesoftware.htmlunit.WebClient).
log4j:WARN Please initialize the log4j system properly.
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 4.587 sec

Results :

Tests run: 1, Failures: 0, Errors: 0, Skipped: 0

[INFO] 
[INFO] --- tomcat7-maven-plugin:2.2:shutdown (tomcat-shutdown) @ my-tomcat-webapp-it ---
Jan 02, 2015 9:49:49 AM org.apache.coyote.AbstractProtocol pause
INFO: Pausing ProtocolHandler ["http-bio-9898"]
Jan 02, 2015 9:49:49 AM org.apache.catalina.core.StandardService stopInternal
INFO: Stopping service Tomcat
Jan 02, 2015 9:49:49 AM org.apache.catalina.core.ApplicationContext log
INFO: Closing Spring root WebApplicationContext
2015-01-02 09:49:49,521 [localhost-startStop-2] INFO  org.springframework.web.context.support.XmlWebApplicationContext  - Closing Root WebApplicationContext: startup date [Fri Jan 02 09:48:57 CET 2015]; root of context hierarchy
2015-01-02 09:49:49,523 [localhost-startStop-2] INFO  org.springframework.beans.factory.support.DefaultListableBeanFactory  - Destroying singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@5accc38c: defining beans [cxf,org.apache.cxf.bus.spring.BusWiringBeanFactoryPostProcessor,org.apache.cxf.bus.spring.Jsr250BeanPostProcessor,org.apache.cxf.bus.spring.BusExtensionPostProcessor,org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,helloService#default,testServices,org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor]; root of factory hierarchy
Jan 02, 2015 9:49:49 AM org.apache.coyote.AbstractProtocol stop
INFO: Stopping ProtocolHandler ["http-bio-9898"]
[INFO] 
[INFO] --- maven-install-plugin:2.4:install (default-install) @ my-tomcat-webapp-it ---
[INFO] Installing /home/eric/Devel/Java/Maven/my-tomcat/my-tomcat-webapp-it/pom.xml to /home/eric/.m2/repository/my/test/own/my-tomcat-webapp-it/0.0.1-SNAPSHOT/my-tomcat-webapp-it-0.0.1-SNAPSHOT.pom
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Summary:
[INFO] 
[INFO] my-tomcat ......................................... SUCCESS [3.123s]
[INFO] my-tomcat-api ..................................... SUCCESS [3.952s]
[INFO] my-tomcat-api-impl ................................ SUCCESS [10.228s]
[INFO] my-tomcat-webapp .................................. SUCCESS [0.539s]
[INFO] my-tomcat-webapp-exec ............................. SUCCESS [2.551s]
[INFO] my-tomcat-webapp-it ............................... SUCCESS [1:02.485s]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 1:23.024s
[INFO] Finished at: Fri Jan 02 09:49:49 CET 2015
[INFO] Final Memory: 44M/279M
[INFO] ------------------------------------------------------------------------

/ Daarna in my-tomcat-webapp	,
$ mvn tomcat7:run
/ OK 

/ TODO 
/ Study selenium	,

/ 13	. 

/ we hebben my-main	, deze include my-webapp en is org.mortbay.jetty:jetty-maven-plugin	,	jetty:run
/ we hebben my-main2	, deze include my-webapp en is org.eclipse.jetty:jetty-maven-plugin	, jetty:run
/ en is ook org.apache.tomcat.maven:tomcat7-maven-plugin	, maar die doet NIET include my-webapp	, tomcat7:run	, maar wel gewoon een jsp	,

/ in my-main3	, we hebben org.eclipse.jetty:jetty-maven-plugin, org.apache.tomcat.maven:tomcat7-maven-plugin en een index.jsp, en nu doet de tomcat plugin OK

 <properties>
	  <jetty.version>9.3.0.M1</jetty.version>
	  <tomcat.version>2.2</tomcat.version>
  </properties>
 <build>
    <finalName>my-main3</finalName>
	<plugins>
		<plugin>
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>jetty-maven-plugin</artifactId>
			<version>${jetty.version}</version>
			<configuration>
                <httpConnector>
                    <port>9090</port>
                </httpConnector>
               <webApp>
               		<contextPath>/${build.finalName}</contextPath>
               </webApp>
            </configuration>
		</plugin>
		<plugin>
			<groupId>org.apache.tomcat.maven</groupId>
			<artifactId>tomcat7-maven-plugin</artifactId>
			<version>${tomcat.version}</version>
			<configuration>
    				<port>9090</port>
  			</configuration>
		</plugin>
	</plugins>
  </build>

/ Bij tomcat7	, 
http://localhost:9090/my-main3/
/ dan toont hij index.jsp	,

/ Bij jetty9	, 
http://localhost:9090/my-main3/
/ dan toont hij index.jsp	,

/ bij de jetty plugin is de default context path /	, bij tomcat7 blijkbaar 

/ Lees	,
http://tomcat.apache.org/
/ click linksboven in vertical menu	, 'Maven plugin'	,
http://tomcat.apache.org/maven-plugin.html
/ click 'Version 2.2'	,
http://tomcat.apache.org/maven-plugin-2.2/
/we zijn op	,
Apache /  Apache Tomcat /  Apache Tomcat Maven plugin /  About Apache Tomcat Maven Plugin
/ click link 'Documentation	,
http://tomcat.apache.org/maven-plugin-2.2/run-mojo-features.html

/ onder Goals 	,
Goals to manipulate deployed projects within Tomcat
Goals to obtain information from Tomcat

/ we kunnen ook in het horizontale menu boven	,
Modules, Apache Tomcat Maven Plugin: Tomcat 7.x	, 
/ we komen op	,
http://tomcat.apache.org/maven-plugin-2.2/tomcat7-maven-plugin/index.html
Apache /  Apache Tomcat /  Apache Tomcat Maven plugin /  Apache Tomcat Maven Plugin :: Tomcat 7.x /  Introduction
/ hier zien we de link 'goals page'	,
/ click tomcat7:run
/ we zien path , de default is /${project.artifactId}	, klopt	,

/ Lees	,
http://eclipse.org/jetty/documentation/current/jetty-maven-plugin.html
/ over configure jetty:run 	, ...

/ 13	. 

/ we doen eerst	,
[eric@localhost apache-tomcat-7.0.57]$ bin/catalina.sh run

/ we dachten dat we een WEB-INF/web.xml moesten hebben, 	maar dat is niet zo	, 
/ dat komt omdat we alleen index.jsp hebben	, 
/ als we andere server components hebben, bijv een servlet, dan moet het	, see in 13. 	hieronder	,
/ lees toch	,
/ als we WEB-INF/web.xml hebben in src/main/webapp	, zien we in eclipse deze onder	,
Deployed Resources
	webapp
/ Maar ook verschijnt er Deployment Descriptor:...

/ Inderdaad	, we hebben src/main/webapp	, maar in eclipse zien we deze niet (onder Java Resources)	, we zien hem onder Deployed Resources	,

/ we use tomcat-7.0.57	, 

/ tomcat-7.0.53 ERR
/ TODO

$ vi conf/tomcat-users.xml

<role rolename="manager-gui"/>
<user username="tomcat" password="s3cret" roles="manager-gui"/>

/ nu kunnen we inlog op localhost:8080/manager of localhost:8080/manager/html	,

/ In tomcat-users.xml kunnen we NIET 2 regels maken zoals,	
<user username="tomcat" password="s3cret" roles="manager-gui"/>
<user username="tomcat" password="s3cret" roles="manager-script"/>
/ we moeten WEL	,
<user username="tomcat" password="s3cret" roles="manager-gui,manager-script"/>

/ 13	. 

/ my-main3 	, 

/ tomcat7:deploy ipv tomcat7:run

$ vi ~/.m2/settings.xml
...
       <servers>
        <server>
                <id>my_tomcat</id>
                <username>tomcat</username>
                <password>s3cret</password>
        </server>
        </servers>
</settings>

$ vi pom.xml
...
		<plugin>
			<groupId>org.apache.tomcat.maven</groupId>
			<artifactId>tomcat7-maven-plugin</artifactId>
			<version>${tomcat.version}</version>
			<configuration>
    				<port>8080</port> 				/ default
    				<path>/${project.artifactId}</path>		/ default
    				<url>http://localhost:8080/manager/text</url>
    				<server>my_tomcat</server>
  			</configuration>
		</plugin>
	</plugins>
  </build>

/ start tomcat7	, 
[eric@localhost apache-tomcat-7.0.57]$ bin/catalina.sh run

$ mvn tomcat7:undeploy tomcat7:deploy

/ we zien	,
[eric@localhost apache-tomcat-7.0.57]$ bin/catalina.sh run
...
n 02, 2015 3:04:42 PM org.apache.catalina.startup.HostConfig undeploy
INFO: Undeploying context [/my-main3]
Jan 02, 2015 3:04:43 PM org.apache.catalina.startup.HostConfig deployWAR
INFO: Deploying web application archive /home/eric/Devel/Java/Tomcat/apache-tomcat-7.0.57/webapps/my-main3.war

/ Geef 
localhost:8080/my-main3
/ of	,
localhost:8080/manager
/ of	,
localhost:8080/examples

/ we zien in tomcat	,
[eric@localhost apache-tomcat-7.0.57]$ pwd
/home/eric/Devel/Java/Tomcat/apache-tomcat-7.0.57
[eric@localhost apache-tomcat-7.0.57]$ ls webapps/
docs  examples  host-manager  manager  my-main3  my-main3.war  ROOT

/ 13	. 

/ jetty standalone	,
/ TODO

/ 13	. 

/ my-main3	,

/ see my-webapp	,

/ we maken een servlet die javax.servlet.http.HttpServlet extends	, 

/ maar dan moeten we wel in pom	,

	<dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>servlet-api</artifactId>
            <version>2.5</version>
            <scope>provided</scope>
        </dependency>
 
$ vi src/main/java/own/test/my/MyServlet.java

  protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        PrintWriter out = response.getWriter();
        out.println( "MyServlet Executed" );
        out.flush();
        out.close();
  }

$ vi src/main/webapp/WEB-INF/web.xml

<?xml version="1.0" encoding="utf-8"?>

<webapp>

 <servlet>
    <servlet-name>foo</servlet-name>
    <servlet-class>own.test.my.MyServlet</servlet-class>
    <load-on-startup>1</load-on-startup>
  </servlet>

  <servlet-mapping>
    <servlet-name>foo</servlet-name>
    <url-pattern>/foo/*</url-pattern>
  </servlet-mapping>
</webapp>

/ Geef
localhost:8080/my-main3
My Main 3
/ we zien index.jsp

/ Geef
localhost:8080/my-main3/foo/my
/ of	,
localhost:8080/my-main3/foo
MyServlet Executed
/ dan zien we de servlet


/ we hebben  dus in <webapp/> alle attributes rm, zoals xmlns	, 
/ als we hetzelfde doen in pom.xml , dan ook OK	. 
/ TODO

/ 13. 	

/ in my-main4	,

/ we doen in my-main3	,
$ clean install
[eric@localhost repository]$ ls my/test/own/my-main3/0.0.1-SNAPSHOT/
maven-metadata-local.xml     my-main3-0.0.1-SNAPSHOT.pom  my-main3-0.0.1-SNAPSHOT.war  _remote.repositories

/ Kunnen we deze use in my-main4	?

/ we hebben my-main4 delete uit ecliopse, hij is nog in fs	,
/ Allemaal kruisjes	, ERRs	,
/ TODO
/ in my-main3	, Copy of web.xml	, heeft 0d0a ipv 0a, 
/ TODO

/ 13	. 

/ In project wicket-examples-step-by-step proberen we stap voor stap wicket-examples	,

$ vi pom.xml

			<plugin>
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-maven-plugin</artifactId>
				<version>${jetty9.version}</version>
				<configuration>
					<httpConnector>
	                    <port>9090</port>
	                </httpConnector>
	                <webApp>
               			<contextPath>/${project.artifactId}</contextPath>
               		</webApp>
			...
			</plugin>
			<plugin>
				<groupId>org.apache.tomcat.maven</groupId>
				<artifactId>tomcat7-maven-plugin</artifactId>
				<version>${tomcat.version}</version>
				<configuration>
	    			<port>8080</port>
	    			<path>/${project.artifactId}</path>
	    			<url>http://localhost:8080/manager/text</url>
	    			<server>my_tomcat</server>
 	 			</configuration>
			</plugin>

jetty:run
tomcat7:run
/ we kunnen tomcat7 zelf start	,  en 	,
tomcat7:undeploy tomcat7:deploy

/ 13	 

/ we willen debug wicket	,

/ we start Tomcat op de command line	,

/ simple-webapp starten we in eclipse, dus dan in de run config 	,
	-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n
/ is -Xnoagent -Djava.compiler=NONE nodig?
/ TODO

/ maar tomcat op de command line (we doen NIET tomcat7:run, maar tomcat7:deploy)	, en we edit
$ vi bin/catalina.sh
CATALINA_OPTS="-Xdebug -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n"

/ dan in ecliopse maken we de debug config	,
Remote Java Application
	wicket-examples-step-by-step
Project: wicket-examples-step-by-step
Connection type: Standard (socket attach)
Host : localhost
Port :8000
/ click Debug
/ Het window verdwijnt, en er lijkt niets te gebeuren, totdat we in de browser geven	,
http://localhost:8080/wicket-examples-step-by-step/helloworld/
/ dan valt de debugger in eclipse in	,

public class HelloWorld extends WicketExamplePage
{
	public HelloWorld()
	{
->		add(new Label("message", "Hello World!"));

/ omdat we daar een b hadden set	,

/ 13	. 

/ we geven 
http://localhost:8080/wicket-examples-step-by-step/repeater

/ wat gebeurt er?
$ vi WEB-INF/web.xml
      <filter>
                <filter-name>RepeaterExamplesApplication</filter-name>
                <filter-class>org.apache.wicket.protocol.http.WicketFilter</filter-class>
                <init-param>
                        <param-name>applicationClassName</param-name>
                        <param-value>org.apache.wicket.examples.repeater.RepeaterApplication</param-value>
                </init-param>
        </filter>
        
        <filter-mapping>
                <filter-name>RepeaterExamplesApplication</filter-name>
                <url-pattern>/repeater/*</url-pattern>
                <dispatcher>REQUEST</dispatcher>
                <dispatcher>INCLUDE</dispatcher>
        </filter-mapping>
  
/ Dus 	,
$ vi RepeaterApplication.java
	public Class<? extends Page> getHomePage()
	{
		return Index.class;
	}

/ Dus	,
$ vi Index.java
...
$ vi Index.html
<wicket:link>
<a href="SimplePage.html">Simple DataView Example - simple example of a dataview</a><br/>
...

/ Vanwege <wicket:link> zien we bookmarkable links	,
http://localhost:8080/wicket-examples-step-by-step/repeater/wicket/bookmarkable/org.apache.wicket.examples.repeater.SimplePage?0
/ Als we NIET <wicket:link>, dan als we de link click	,
http://localhost:8080/wicket-examples-step-by-step/SimplePage.html
/ en die is er niet	,

/ als we edit, doe dan de run config	,
tomcat7:undeploy tomcat7:deploy

/ 13	. 

/ als we click op de link 'Simple DataView Example - simple example of a dataview'	, dan vallen we in 	,
	public SimplePage()
	{
->		add(new DataView<Contact>("simple", new ContactDataProvider())

/ 13	. 
/////////////////////////////////////////////////////////////////////
/ DEBUGGER VALT IN WICKET APPLICATION
/ als we Run as Debug 
tomcat7:undeploy tomcat7:deploy
/ dan valt  code in	,
public class RepeaterApplication extends WebApplication
{
->	private final ContactsDatabase contactsDB = new ContactsDatabase(50);
/s
ContactsDatabase.<init>(int) line: 50	
/=
	public ContactsDatabase(int count)
	{
		for (int i = 0; i < count; i++)
		{
			add(ContactGenerator.getInstance().generate());
/s
ContactGenerator.generate() line: 72	
...

/t
->	private final ContactsDatabase contactsDB = new ContactsDatabase(50);
/d
...
RepeaterApplication.init() line: 47	

/ geef	,
http://localhost:8080/wicket-examples-step-by-step/repeater/
/ dan vallen we in	,
SimplePage.<init>() line: 39	
/=
	public SimplePage()
	{
		add(new DataView<Contact>("simple", new ContactDataProvider())
/s
ContactDataProvider.size() line: 60	
		return getContactsDB().getCount();
/s
ContactDataProvider.getContactsDB() line: 36	
		return DatabaseLocator.getDatabase();
/s
DatabaseLocator.getDatabase() line: 34	
		RepeaterApplication app = (RepeaterApplication)Application.get();
/ calls ThreadCcontext.getApplication()
/TODO
app	RepeaterApplication  (id=6581)	
		return app.getContactsDB();

/ later	,
	public Iterator<Contact> iterator(long first, long count)
	{
->		return getContactsDB().find(first, count, new SortParam<String>("firstName", true)).iterator();
/s
/ eerst weer in getContactsDB	, net als net	, 
/ new SortParam is in wicket-extensions	,
/s
ContactsDatabase.find(long, long, SortParam) line: 92	
		return getIndex(sort).subList((int)first, (int)(first + count));
/s
ContactsDatabase.getIndex(SortParam) line: 104	
		if (sort.getProperty().equals("firstName")){
/ JA
			return sort.isAscending() ? fnameIdx : fnameDescIdx;
[[Contact id=32 firstName=Abby lastName=Nelson homePhone=706-555-8247 cellPhone=665-555-5262], 
[Contact id=50 firstName=Christopher lastName=Fisher homePhone=377-555-1084 cellPhone=442-555-8130], 
[Contact id=9 firstName=Debra lastName=Baker homePhone=812-555-1780 cellPhone=776-555-5232], 
[Contact id=49 firstName=Debra lastName=Davis homePhone=573-555-2605 cellPhone=615-555-1733], 
[Contact id=2 firstName=Douglas lastName=Rose homePhone=377-555-2700 cellPhone=431-555-3754], 
[Contact id=25 firstName=Douglas lastName=Smiith homePhone=388-555-2882 cellPhone=760-555-4772], 
....

/ later	,
	public SimplePage()
	{
		add(new DataView<Contact>("simple", new ContactDataProvider())
		{
			private static final long serialVersionUID = 1L;

			@Override
			protected void populateItem(final Item<Contact> item)

/ populateItem is een DataView method	, in feite een RefreshingView method	,
/ de hierarchy is	,
java.lang.Object
org.apache.wicket.Component
org.apache.wicket.MarkupContainer
org.apache.wicket.markup.html.WebMarkupContainer
org.apache.wicket.markup.repeater.AbstractRepeater
org.apache.wicket.markup.repeater.RepeatingView
org.apache.wicket.markup.repeater.RefreshingView<T>
org.apache.wicket.markup.repeater.AbstractPageableView<T>
org.apache.wicket.markup.repeater.data.DataViewBase<T>
org.apache.wicket.markup.repeater.data.DataView<T>

/ in populateItem	,
			protected void populateItem(final Item<Contact> item) {
				Contact contact = item.getModelObject();
item	Item<T>  (id=3962)	
[Item [Component id = 1]]
contact	Contact  (id=3967)	
[Contact id=23 firstName=Abby lastName=Gonzalez homePhone=805-555-6357 cellPhone=784-555-7144]

				item.add(new ActionPanel("actions", item.getModel()));
/ ActionPanel.class is inner class van BasePage.java	, en is een Panel met een link, "select"	,

/ In SimplePage.html	,
	<tr wicket:id="simple">
		<td><span wicket:id="actions">[actions]</span></td>
		<td><span wicket:id="contactid">[contactid]</span> </td>
...
/ we zien "actions"	, 

/ In BasePage$ActionPanel.html	,
<wicket:panel xmlns:wicket="http://wicket.apache.org">
<a href="#" wicket:id="select">select</a>
</wicket:panel>

/ volgende contact	,

			protected void populateItem(final Item<Contact> item)
			{
				Contact contact = item.getModelObject();

[Item [Component id = 2]]
[Contact id=27 firstName=Abby lastName=Jones homePhone=578-555-3655 cellPhone=730-555-5428]

/ 7	. 

/ multiple ways to create table	,

/ in wicket examples	,

/ Geef
http://localhost:8080/wicket-examples-step-by-step/repeater
/ en click op een link, bijv	,
http://localhost:8080/wicket-examples-step-by-step/repeater/wicket/bookmarkable/org.apache.wicket.examples.repeater.SimplePage?2

/ 13	. 

/ In SimplePage	,

/ je geeft in htm 1 header row en 1 data row	, en die data row wordt repeated	,
/ maar je moet wel alle th's en td's geven	,

<table cellspacing="0" class="dataview">
        <tr>
		..
        </tr>
                <td><span wicket:id="..."
                <td><span wicket:id="..."
		...

               add(new DataView<Contact>("simple", new ContactDataProvider()) {
                        @Override
                        protected void populateItem(final Item<Contact> item) {
                                Contact contact = item.getModelObject();
                                item.add(new ActionPanel("actions", item.getModel()));
				...

/ 13	. 

/ DataTablePage 	,

/ je geeft in html 1 table, 

    <table class="dataview" cellspacing="0" wicket:id="table">[table]</table>

                List<IColumn<Contact, String>> columns = new ArrayList<>();
		...
               	columns.add(new PropertyColumn<Contact, String>(new Model<>("Cell Phone"), "cellPhone"));
                SortableContactDataProvider dataProvider = new SortableContactDataProvider();
                DataTable<Contact, String> dataTable = new DefaultDataTable<>("table", columns,
                                dataProvider, 8);


/ HIER HIER HIER
 


/ RM



/ 13	. 

/ een ListView is meer dan een RepeatableView	,

$ vi Ch55.html	,

		<ul>
		    <li wicket:id="rvlist4">
		    	<span wicket:id="label"></span>
		    </li>
		</ul>

$ vi Ch55.java

		RepeatingView rview=new RepeatingView("rvlist4");
		add(rview);
		for(int i=0;i<5;i++){
			String id=rview.newChildId();
			Link<Integer>link=new Link<Integer>(id) {
				@Override
				public void onClick() {
					setResponsePage(Page55.class);
				}
			};
			rview.add(link);
			link.setOutputMarkupId(true);
			Label label=new Label("label","Value "+id);
			link.add(label);
			label.setOutputMarkupId(true);
			
		}

/ er staat 	,
		    <li wicket:id="rvlist4">
		RepeatingView rview=new RepeatingView("rvlist4");
/ Dus worden er <li/>'s create	, 

/ we doen 
			rview.add(link);

/ dat betekent dat de <li/> zelf de link wordt	, 
/ als we willen dat de <li/> een link contains, moeten we	,

			WebMarkupContainer li=new WebMarkupContainer(id);
			li.setOutputMarkupId(true);
			rview.add(li);
			BookmarkablePageLink<Integer>a=new BookmarkablePageLink<Integer>("link", Page55.class);
			li.add(a);

/ ListView doet dit automatisch, we hoeven dus niet zelf een WebMarkupContainer te create	,

/ Ook kunnen we aan ListView de list geven	, we hoeven zelf geen for loops te program	, maar dit is minor of importance	, 

/ bij repeating view moeten we zelf een id 


/ als we op label setMarkupId , of setOutputMarkupId	, dan verschijnen id="id01" bijv op de li	,
/ TODO

/ 7	.

/ id's	,

/ Het lijkt dat we van hoofd elems verschillende id's moeten geven, en van children niet: Wicket geeft de children een eigen id	,
/ TODO

$ vi Ch55a.html

		<a href ="#" wicket:id="link">
			<span wicket:id="label"></span>
		</a>
		<a href="#" wicket:id="link2">
			<span wicket:id="label"></span>
		</a>

$ vi Ch55a.java

		{
		Link<Integer>link=new Link<Integer>("link") {
			
			@Override
			public void onClick() {
				// TODO Auto-generated method stub
				
			}
		};
		add(link);
		link.setOutputMarkupId(true);
		Label label=new Label("label","Foo");
		label.setOutputMarkupId(true);
		link.add(label);
		}

		{
		Link<Integer>link=new Link<Integer>("link2") {
			
			@Override
			public void onClick() {
				// TODO Auto-generated method stub
				
			}
		};
		add(link);
		link.setOutputMarkupId(true);
		Label label=new Label("label","Foo");
		label.setOutputMarkupId(true);
		link.add(label);
		}

/ we zien	,

		<a href="./?0-1.ILinkListener-link" id="link1">
			<span id="label2">Foo</span>
		</a>
		<a href="./?0-1.ILinkListener-link2" id="link23">
			<span id="label4">Foo</span>
		</a>

/ 7	.

/ WEBMARKUPCONTAINER

/ Wat doet een WebMarkupContainer	?

/ we hadden boven al gezien dat de directe child van de webpage een unieke wicket:id moeten geven	, dat doen we hieronder aan de WebMarkupContainer in het 1ste geval, en aan de  link in het 2de geval	,

/ als we 

$ vi Ch55.html

		<ul>
		    <li wicket:id="rvmenu">
		        <a  wicket:id="link">
		            <span wicket:id="caption"></span>
		        </a>
		    </li>
		</ul>
	
		<ul>
		    <li wicket:id="rvnocontmenu">
		       
		            <span wicket:id="caption"></span>
		        
		    </li>
		</ul>

////////////////////////////////////////////////
/ we set de repeatedview dus op de li's	, in het 1ste geval zijn de li's dus webmarkupcontainers	, in het 2de geval zijn de li's links	,


$ vi Ch55.java

		{
		RepeatingView rview=new RepeatingView("rvmenu");
		add(rview);
		List<MenuItem>menu=createMenu();
		for(MenuItem item:menu){
			String id=rview.newChildId();
			WebMarkupContainer container=new WebMarkupContainer(id);
			container.setOutputMarkupId(true);
			rview.add(container);
			BookmarkablePageLink<Integer>link=new BookmarkablePageLink<Integer>("link", item.getDestination());
			container.add(link);
			link.setOutputMarkupId(true);
			Label label=new Label("caption",item.getCaption());
			label.setOutputMarkupId(true);
			link.add(label);
		}
		}

		{
		RepeatingView rview=new RepeatingView("rvnocontmenu");
		add(rview);
		List<MenuItem>menu=createMenu();
		for(MenuItem item:menu){
			String id=rview.newChildId();
			BookmarkablePageLink<Integer>link=new BookmarkablePageLink<Integer>(id, item.getDestination());
			rview.add(link);
			link.setOutputMarkupId(true);
			Label label=new Label("caption",item.getCaption());
			label.setOutputMarkupId(true);
			link.add(label);
		}
		}

/ we zien dat de eerste list een list is met a's	, en de tweede een gewone list, die toch links zijn, maar er zijn geen a's	,

<ul>
		    <li id="id117">
		        <a id="link18" href="./wicket/bookmarkable/my.test.own.wicket_book.Page55">
		            <span id="caption19">Home</span>
		        </a>
		    </li><li id="id21a">
		        <a id="link1b" href="./wicket/bookmarkable/my.test.own.wicket_book.Page55">
		            <span id="caption1c">Cheeses</span>
		        </a>
		    </li><li id="id31d">
		        <a id="link1e" href="./wicket/bookmarkable/my.test.own.wicket_book.Page55">
		            <span id="caption1f">Wines</span>
		        </a>
		    </li><li id="id420">
		        <a id="link21" href="./wicket/bookmarkable/my.test.own.wicket_book.Page55">
		            <span id="caption22">Recipes</span>
		        </a>
		    </li>
		</ul>

/ en	,

<ul>
		    <li id="id123" onclick="var win = this.ownerDocument.defaultView || this.ownerDocument.parentWindow; if (win == window) { window.location.href='./wicket/bookmarkable/my.test.own.wicket_book.Page55'; } ;return false">
		       
		            <span id="caption24">Home</span>
		        
		    </li><li id="id225" onclick="var win = this.ownerDocument.defaultView || this.ownerDocument.parentWindow; if (win == window) { window.location.href='./wicket/bookmarkable/my.test.own.wicket_book.Page55'; } ;return false">
		       
		            <span id="caption26">Cheeses</span>
		        
		    </li><li id="id327" onclick="var win = this.ownerDocument.defaultView || this.ownerDocument.parentWindow; if (win == window) { window.location.href='./wicket/bookmarkable/my.test.own.wicket_book.Page55'; } ;return false">
		       
		            <span id="caption28">Wines</span>
		        
		    </li><li id="id429" onclick="var win = this.ownerDocument.defaultView || this.ownerDocument.parentWindow; if (win == window) { window.location.href='./wicket/bookmarkable/my.test.own.wicket_book.Page55'; } ;return false">
		       
		            <span id="caption2a">Recipes</span>
		        
		    </li>
		</ul>


/ Einde WEBMARKUPCONTAINER

/ 7	. 

/ bij een listview is de webmarkupcontainer er al	,


/ we kunnen dezelfde wicket id use binnen verschillende wicket id's	,

		<ul>
		    <li wicket:id="rvmenu">
		        <a  wicket:id="link">
		            <span wicket:id="caption"></span>
		        </a>
		    </li>
		</ul>
		
		<ul>
		    <li wicket:id="lvmenu">
		        <a  wicket:id="link">
		            <span wicket:id="lcaption"></span>
		        </a>
		    </li>
		</ul>


/ we vergl	,

		{
		RepeatingView rview=new RepeatingView("rvmenu");
		add(rview);
		List<MenuItem>menu=createMenu();
		for(MenuItem item:menu){
			String id=rview.newChildId();
			WebMarkupContainer container=new WebMarkupContainer(id);
			container.setOutputMarkupId(true);
			rview.add(container);
			BookmarkablePageLink<Integer>link=new BookmarkablePageLink<Integer>("link", item.getDestination());
			container.add(link);
			link.setOutputMarkupId(true);
			Label label=new Label("caption",item.getCaption());
			label.setOutputMarkupId(true);
			link.add(label);
		}
		}
		
		{
		List<MenuItem>menu=createMenu();
		ListView<MenuItem> lview=new ListView<MenuItem>("lvmenu",menu) {
			@Override
			protected void populateItem(ListItem<MenuItem> item) {
				MenuItem menuItem=item.getModel().getObject();
				BookmarkablePageLink<Integer>link=new BookmarkablePageLink<Integer>("link", menuItem.getDestination());
				item.add(link);
				link.setOutputMarkupId(true);
				Label label=new Label("lcaption", menuItem.getCaption());
				link.add(label);
				label.setOutputMarkupId(true);
			}
		};
		add(lview);

		}

/ we zien de generic MenuItem in ListItem<MenuItem>	,
/ we zien dus dat WH een ListItem een WebMarkupContainer is	, 
/ de naam ListItem is logisch, want is bind aan een <li/>	,

/ 7	. 

/ Dezelfde wicket code als in lvmenu hierboven	,
/ Alleen andere HTML	,

		List<MenuItem>menu=createMenu();
		ListView<MenuItem> lview=new ListView<MenuItem>("lvmenu2",menu) {
			@Override
			protected void populateItem(ListItem<MenuItem> item) {
				MenuItem menuItem=item.getModel().getObject();
				BookmarkablePageLink<Integer>link=new BookmarkablePageLink<Integer>("link"	,menuItem.getDestination());
				item.add(link);
				link.setOutputMarkupId(true);
				Label label=new Label("lcaption", menuItem.getCaption());
				link.add(label);
				label.setOutputMarkupId(true);
				
		<div>
		    <div wicket:id="lvmenu">
		        <a  wicket:id="link">
		            <span wicket:id="lcaption"></span>
		        </a>
		    </div>
		</div>	

/ we zien hetzelfde, 	maar niet in een list	,

<div>
		    <div>
		        <a id="link43" href="./wicket/bookmarkable/my.test.own.wicket_book.Page55">
		            <span id="lcaption44">Home</span>
		        </a>
		    </div><div>
		        <a id="link45" href="./wicket/bookmarkable/my.test.own.wicket_book.Page55">
		            <span id="lcaption46">Cheeses</span>
		        </a>
		    </div><div>
		        <a id="link47" href="./wicket/bookmarkable/my.test.own.wicket_book.Page55">
		            <span id="lcaption48">Wines</span>
		        </a>
		    </div><div>
		        <a id="link49" href="./wicket/bookmarkable/my.test.own.wicket_book.Page55">
		            <span id="lcaption4a">Recipes</span>
		        </a>
		    </div>
		</div>

/ 7	. 

/ we doen net als op tutorial	,
https://wicket.apache.org/guide/guide/repeaters.html#repeaters_2

/we doen	,
				Label label=new Label("lcaption", new PropertyModel<MenuItem>(item.getModel(), "caption"));

/ de manier om de caption property te bind	,

		List<MenuItem>menu=createMenu();
		ListView<MenuItem> lview=new ListView<MenuItem>("lvmenu3",menu) {
			@Override
			protected void populateItem(ListItem<MenuItem> item) {
				MenuItem menuItem=item.getModel().getObject();
				BookmarkablePageLink<Integer>link=new BookmarkablePageLink<Integer>("link"	,menuItem.getDestination());
				item.add(link);
				link.setOutputMarkupId(true);
				Label label=new Label("lcaption", new PropertyModel<MenuItem>(item.getModel(), "caption"));
				link.add(label);
				label.setOutputMarkupId(true);
				
			}
		};
		add(lview);

		<div>
		    <div wicket:id="lvmenu3">
		        <a  wicket:id="link">
		            <span wicket:id="lcaption"></span>
		        </a>
		    </div>
		</div>

/ we kunnen	,
				Label label=new Label("lcaption", new PropertyModel<MenuItem>(item.getModel(), "caption"));
/ of	,
				Label label=new Label("lcaption", new PropertyModel<MenuItem>(item.getModel().getObject(), "caption"));

/ we zijn de laatste gewend	,

/ 7	. 

/ we doen self in Ch55b.java/.html

	<span wicket:id="label"></span>
	<br>
	<span wicket:id="label2"></span>
	<br>
	<span wicket:id="label3"></span>
	<br>
	<span wicket:id="label4"></span>
	<br>

		{
		Person p=new Person();
		p.setName("Foo Bar");
		Label label=new Label("label",p.getName());
		label.setOutputMarkupId(true);
		add(label);
		}
		{
		Person p=new Person();
		p.setName("Foo Bar");
		IModel<String>model=new Model<String>(p.getName());
		Label label=new Label("label2",model);
		add(label);
		}
		{
		Person p=new Person();
		p.setName("Foo Bar");
		IModel<Person>model=new Model<Person>(p);
		PropertyModel<String>pmodel=new PropertyModel<String>(model.getObject(), "name");
		Label label=new Label("label3",pmodel);
		add(label);
		}
		{
		Person p=new Person();
		p.setName("Foo Bar");
		IModel<Person>model=new Model<Person>(p);
		PropertyModel<String>pmodel=new PropertyModel<String>(model, "name");
		Label label=new Label("label4",pmodel);
		add(label);
		}

/ Beide kunnen	,
		PropertyModel<String>pmodel=new PropertyModel<String>(model.getObject(), "name");
/ en	,
		PropertyModel<String>pmodel=new PropertyModel<String>(model, "name");

/ Verklaring	,

/ We zien in de code	,

	public final Object getInnermostModelOrObject()
	{
		Object object = getTarget();
		while (object instanceof IModel)
		{
			Object tmp = ((IModel<?>)object).getObject();
			if (tmp == object)
/ NEE
			{
				break;
			}
			object = tmp;
		}
		return object;

/ als we 'n model hebben gegeven ipv model.getObject()	, doet hij het alsnog	,

/ we zijn in 	,

	PropertyModel<T>(AbstractPropertyModel<T>).getInnermostModelOrObject() line: 265	
	PropertyModel<T>(AbstractPropertyModel<T>).getObject() line: 83	
	Label(Component).getDefaultModelObject() line: 1618	
	Label(Component).getDefaultModelObjectAsString() line: 1646	
	Label.onComponentTagBody(MarkupStream, ComponentTag) line: 115	
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
	Label(Component).internalRenderComponent() line: 2557	
	Label(WebComponent).onRender() line: 56	
	Label(Component).internalRender() line: 2372	
	Label(Component).render() line: 2300	
	Ch55b(MarkupContainer).renderNext(MarkupStream) line: 1405	
	Ch55b(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1601	
	Ch55b(Page).onRender() line: 879	
	Ch55b(WebPage).onRender() line: 142	
	Ch55b(Component).internalRender() line: 2372	
	Ch55b(Component).render() line: 2300	
	Ch55b(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 837	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
	ServletHandler$CachedChain.doFilter(ServletRequest, ServletResponse) line: 1650	
	ServletHandler.doHandle(String, Request, HttpServletRequest, HttpServletResponse) line: 583	
	ServletHandler(ScopedHandler).handle(String, Request, HttpServletRequest, HttpServletResponse) line: 143	
	ConstraintSecurityHandler(SecurityHandler).handle(String, Request, HttpServletRequest, HttpServletResponse) line: 577	
	SessionHandler.doHandle(String, Request, HttpServletRequest, HttpServletResponse) line: 223	
	WebAppContext(ContextHandler).doHandle(String, Request, HttpServletRequest, HttpServletResponse) line: 1125	
	ServletHandler.doScope(String, Request, HttpServletRequest, HttpServletResponse) line: 515	
	SessionHandler.doScope(String, Request, HttpServletRequest, HttpServletResponse) line: 185	
	WebAppContext(ContextHandler).doScope(String, Request, HttpServletRequest, HttpServletResponse) line: 1059	
	WebAppContext(ScopedHandler).handle(String, Request, HttpServletRequest, HttpServletResponse) line: 141	
	Server(HandlerWrapper).handle(String, Request, HttpServletRequest, HttpServletResponse) line: 97	
	Server.handle(HttpChannel<?>) line: 497	
	HttpConnection$HttpChannelOverHttp(HttpChannel<T>).handle() line: 311	
	HttpConnection.onFillable() line: 248	
	AbstractConnection$2.run() line: 540	
	QueuedThreadPool.runJob(Runnable) line: 610	
	QueuedThreadPool$3.run() line: 539	
	Thread.run() line: 745	

/ Einde Verklaring	,

/ 7	. 

/ ListDataProvider

/ We kunnen met/zonder RepeatingView	,

/ in project wicket-book	,

	<table>
	<tr>
			 <th>Name</th><th>Surename</th><th>Address</th><th>Email</th>
		</tr>
		<tr wicket:id="rows">
		   <td wicket:id="dataRow"></td>
		</tr>
	</table>
	
		<table>
		<tr>
		   <th>Name</th><th>Surename</th><th>Address</th><th>Email</th>
		</tr>
		<tr wicket:id="rows2">
		   <td wicket:id="name"></td>
		   <td wicket:id="address"></td>
		</tr>
	</table>

$ vi Ch55c.java

		{
		List<Person> persons = Arrays.asList(new Person("Foo","Street 1"),new Person("Bar","Lane 7"));
		ListDataProvider<Person> listDataProvider = new ListDataProvider<Person>(persons);
		DataView<Person> dataView = new DataView<Person>("rows", listDataProvider) {
		  @Override
		  protected void populateItem(Item<Person> item) {
		    Person person = item.getModelObject();
		    RepeatingView repeatingView = new RepeatingView("dataRow");
		    repeatingView.add(new Label(repeatingView.newChildId(), person.getName()));
		    repeatingView.add(new Label(repeatingView.newChildId(), person.getAddress()));    
		    item.add(repeatingView); 
		  }
		};
		add(dataView);
		}
		
		{
		List<Person> persons = Arrays.asList(new Person("Foo","Street 1"),new Person("Bar","Lane 7"));
		ListDataProvider<Person> listDataProvider = new ListDataProvider<Person>(persons);
		DataView<Person> dataView = new DataView<Person>("rows2", listDataProvider) {
		  @Override
		  protected void populateItem(Item<Person> item) {
		    Person person = item.getModelObject();

		    item.add(new Label("name", person.getName()));
		    item.add(new Label("address", person.getAddress()));    
		  }
		};
		add(dataView);
		}

/ we zien	,
	
	<table>
		<tbody><tr>
		   <th>Name</th><th>Surename</th><th>Address</th><th>Email</th>
		</tr>
		<tr>
		   <td id="id11">Foo</td><td id="id22">Street 1</td>
		</tr><tr>
		   <td id="id13">Bar</td><td id="id24">Lane 7</td>
		</tr>
	</tbody></table>
	
		<table>
		<tbody><tr>
		   <th>Name</th><th>Surename</th><th>Address</th><th>Email</th>
		</tr>
		<tr>
		   <td id="name5">Foo</td>
		   <td id="address6">Street 1</td>
		</tr><tr>
		   <td id="name7">Bar</td>
		   <td id="address8">Lane 7</td>
		</tr>
	</tbody></table>


/ repeatingView.newChildId() is achtereenvolgens "1" en "2"	, het wordt dan "id1" en "id2" , en er komt nog een getal achter	,
/ zonder RepeatingView moeten we zelf de id's geven, "name" en "address"	, en er komt nog een getal achter	,

/ we kunnen of zelf alle obj add, of 1 repeater, die de list van objs heeft	, 


	

</body>
	


	

</body>

/ Einde RM

 
/ Einde WICKET FORM COMPONENTS

/ MY WICKET COMPONENTS

/ 7. 	

/ in wicket-examples-step-by-step project	, 
/ we maken my.components 

/ zoals het nu moeten we geven,	
http://localhost:8080/wicket-examples-step-by-step/my
/ dit kan NIET	,
http://localhost:8080/wicket-examples-step-by-step/my/index.html
/ TODO

/ we kunnen Index extends MyPage	,
/ Index.html moet dan <wicket:extend> hebben	, en MyPage moet <wicket:child/> hebben	,
/ MyPage mag abstract zijn	,
/ Maar bij ons hoeft Index niet MyPage, extends WebPage is OK	,

/ we maken MyFirst.html	,
Hello, <span wicket:id="label"></span>, how are you?
/ we moeten dan de wicket label component in de MyFirst ctor bijv	, als we hem 	,
public class MyFirst extends WebPage {
	public MyFirst() {
		Label l=new Label("label","Foo Bar");
		add(l);
	}

/ Lees	,
http://www.tutorialspoint.com/java/java_date_time.htm
     	SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd"); 
      	String input = args.length == 0 ? "1818-11-11" : args[0]; 
      	Date t; 
      	try { 
          t = ft.parse(input); 

/ we hebben in MyFirst X implements Serializable	, en X.toString
/ OK
/ Y extends DetachableModel  TODO, Y is dus niet ser	,
/ In MySecond willen we DataView	,

/ HIER HIER HIER



/ Einde MY WICKET COMPONENTS

/ MONITOR HIBERNATE EHCACHE 

/ 7	.

/ in project hibernate_xml_N_1_bidir_join_ehcache	,

/ in Main	,
		session = sessionFactory.openSession();
	        address=(Address)session.get(Address.class, 12l);
	        Set<Employee>employees=address.getEmployees();
/ PersistentSet.set==null	,
/ in pc's collection

/ als hij later de set initialize	, dan aut ook in de pc.collection cache	, want de persistentset zit al in de cache, is nu leeg	,

/ 7	.

 <defaultCache 
    		maxBytesLocalHeap="100M" 
			eternal="true"
  			statistics="true">
 			<persistence strategy="none" />
    </defaultCache>   
    
    <cache 
    		name="my.test.own.hibernate_xml_N_1_bidir_join_ehcache.Employee"
   			maxBytesLocalHeap="100M" 
			eternal="true"
  			
   	>
 			<persistence strategy="none" />

      </cache> 

/ 7	.

/ in project ehcach-my	,
$ vi log4j.properties

log4j.rootLogger=debug,A1
log4j.appender.A1=org.apache.log4j.ConsoleAppender
log4j.appender.A1.layout=org.apache.log4j.PatternLayout
log4j.appender.A1.layout.ConversionPattern=%d{HH:mm:ss} %-5p %c - %m%n

$ vi pom.xml

	<dependency>
	    <groupId>org.slf4j</groupId>
	    <artifactId>slf4j-log4j12</artifactId>
	    <version>${slf4j.version}</version>
	</dependency>

/ dan zien we vanzelf dat ehcache logs doet	,

/ 13	. 

/ we kunnen in Display view	,

java.util.Iterator<Object> iterator=container.getEmployeeCache().getKeys().iterator();
while(iterator.hasNext())System.out.println(iterator.next());
/ select allebei en inspect	,

net.sf.ehcache.Ehcache cache=container.getCachemanager().getCache("employees");
java.util.Iterator<Object> iterator=cache.getKeys().iterator();
//while(iterator.hasNext())System.out.println(iterator.next());
cache.get(new Integer(1)).getObjectValue();
/ als we de 3de niet comment out, dan window van 4de line meteen weg	,

/ 7	.

/ in project hibernate_xml_N_1_bidir_join_ehcache	,

/ Lees	,
http://ehcache.org/documentation/2.8/code-samples

/ we maken Main4	,

my.test.own.hibernate_xml_N_1_bidir_join_ehcache.Employee
my.test.own.hibernate_xml_N_1_bidir_join_ehcache.Address
my.test.own.hibernate_xml_N_1_bidir_join_ehcache.Address.employees

/ Lees	,
http://stackoverflow.com/questions/2961070/ehcache-default-cache-in-java

My understanding is that the "default cache" is actually a template for new caches that get created, rather than being a specific named cache.

CacheManager.getCache will only return a cache instance if it has already been created, so you'll need to tell it to create a new one, using something like addCacheIfAbsent(). The name doesn't matter, it will be created on demand using the default cache settings.

/ er is CacheManager.getCache en .getEhcache	,
/ class Cache implements Ehcache	,

/ 7	.

/ we hebben Main4 in hibernate_xml_N_1_join_ehcache, hibernate_xml_N_1_ehcache

/ Dus bij hibernate_xml_N_1_join_ehcache verschijnen de employees in de 1ste session NIET in 2c	,
/ TODO

/ in project hibernate_xml_N_1_bidir_join_ehcache	,
/ in Main4	,

	protected void setUp() throws Exception {
...
            cacheManager=CacheManager.getInstance();
            addressCache=cacheManager.getEhcache("my.test.own.hibernate_xml_N_1_bidir_join_ehcache.Address");
            employeeCache=cacheManager.getEhcache("my.test.own.hibernate_xml_N_1_bidir_join_ehcache.Employee");
            employeesCache=cacheManager.getEhcache("my.test.own.hibernate_xml_N_1_bidir_join_ehcache.Address.employees");


/ 7	.

		public void afterTransactionCompletion(boolean success) {
			while ( !processes.isEmpty() ) {
					processes.poll().doAfterTransactionCompletion( success, session );
/s
	public void doAfterTransactionCompletion(boolean success, SessionImplementor session) throws HibernateException {
		final EntityPersister persister = getPersister();
		if ( success && isCachePutEnabled( persister, getSession() ) ) {
/s
	private boolean isCachePutEnabled(EntityPersister persister, SessionImplementor session) {
		return persister.hasCache()
				&& !persister.isCacheInvalidationRequired()
				&& session.getCacheMode().isPutEnabled();

/ Address	,
	public boolean isCacheInvalidationRequired() {
false
/ want	,
		return hasFormulaProperties() ||
false
				( !isVersioned() && ( entityMetamodel.isDynamicUpdate() || getTableSpan() > 1 ) );
!isVersioned()=true
entityMetamodel.isDynamicUpdate()=false
getTableSpan()=1

/ In hibernate_xml_N_1_ehcache/Main4  is bij 
	Address getTableSpan()=1	,
	Employee getTableSpan()=1	,
/ In hibernate_xml_N_1_join_ehcache/Main4  is bij	,
	Address getTableSpan()=1	,
	Employee getTableSpan()=2	,	 WH door de join table	,
/ TODO


/ 7	.

/ Lees	,
http://www.javacodegeeks.com/2011/05/avoid-concurrentmodificationexception.html

/ we deden in hibernate_xml_N_1_bidir_ehcache, Main4	,

	        Iterator<Employee>iterator=employees.iterator();
	        while(iterator.hasNext()){	        	
	        	Employee e=iterator.next();
	        	e.setAddress(null);
	        	employees.remove(e);
	        }
/ Maar dan	,
java.util.ConcurrentModificationException

/ 7	.

/ we hebben Main4 in hibernate_xml_N_1_join_ehcache, hibernate_xml_N_1_ehcache

/ eerst session 1	,

		session4=sessionFactory.openSession();
	        address=(Address)session4.get(Address.class, 12l);
/ uit 2c
/ coll in 2c =lock	,
	        Set<Employee>employees=address.getEmployees();
/ lege pset	,
	        
            employee=(Employee)session4.get(Employee.class, 2l);
            employees.size();
/ pset initialized uit db	, coll in 2c=[1,2]	,
			session4.beginTransaction().commit();
/ coll in 2c=[1,2]	,

//////////////////////////////////////////////////////////////////////////////
			
			session2 = sessionFactory.openSession();
//			CacheManager.getInstance().clearAll();
	        address=(Address)session2.get(Address.class, 12l);
/ uit 2c	,
	        employees=address.getEmployees();
/ lege pset	,
	        
            employee2=(Employee)session2.get(Employee.class, 2l);
            employees.remove(employee2);
/ pset init uit 2c	, coll in 2c is nog steeds	[1,2]
			session2.beginTransaction().commit();
/ coll in 2c=lock

/  coll in 2c is invalidated	,






/ Einde MONITOR HIBERNATE EHCACHE

/ WICKET STYLE

/ 7	.

/ In wicket-book project maken Ch61.java/.html

$ vi pom.xml

		<plugin>
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-maven-plugin</artifactId>
				<version>${jetty9.version}</version>
				<configuration>
				
		            <httpConnector>
		                    <port>9090</port>
		            </httpConnector>

/ we deden EERST	,
jetty:run -Djetty.port=9090

/ we maken een run confg	, wicket-book(4)	,
jetty:run
VM arguments: -Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,address=9000,server=y,suspend=n

/ we maken een debug config, Remote Java Application	,
project wicket-book
host: localhost
port: 9000

/ run eerst de 1ste, dan de tweede	, 
/ geef 
localhost:9090
/ Eclipse's debugger valt in Ch61.java
 
/ 7	.

/ we maken in wicket-book Man61.java/.html	,

/ we maken 2 forms	, een met een model en de fields die een property model hebben	, en een die een compoundproperty heeft, en de fields geen model	,

/ als we een form submit, zien we de results ook in de andere	, omdat beide de person obj edit die een field is in Tut62	,

$ vi Man61.html

<form wicket:id="form">
	<input type="text" wicket:id="name">
	<input type="text" wicket:id="address">
	<input type="submit" value="Go">
</form>

<form wicket:id="form2">
	<input type="text" wicket:id="name">
	<input type="text" wicket:id="address">
	<input type="submit" value="Go">
</form>

$ vi Man61.java

	private Person person;
	
	

	public Tut61(final PageParameters parameters) {
		super(parameters);

		{
			Form<Person>form=new MyForm<Person>("form",person);
			add(form);
		
		}
		{
			Form<Person>form=new MyForm<Person>("form2",person);
			add(form);
		
		}
    } 
	
	public Person getPerson() {
		return person;
	}

	public void setPerson(Person person) {
		this.person = person;
	}


	
	private class MyForm<T extends Serializable> extends Form<T>{
		
		private T t;


		public MyForm(String id,T t) {
			super(id);
			this.t=t;
			
			IModel<T>mt=new Model<T>(t);
			setModel(mt);
			
			IModel<String>mname=new PropertyModel<String>(t, "name");
			IModel<String>maddress=new PropertyModel<String>(t, "address");
			FormComponent<String>cname=new TextField<String>("name", mname);
			FormComponent<String>caddress=new TextField<String>("address", maddress);
			add(cname);
			add(caddress);
		}
		@Override
		protected void onSubmit() {
			IModel<T>mt=getModel();
			T t=mt.getObject();
			System.out.println(t);
			
		}
	}
	
	private class MyForm2<T extends Serializable> extends Form<T>{
		
		private T t;


		public MyForm2(String id,T t) {
			super(id);
			this.t=t;
			
			IModel<T>mt=new CompoundPropertyModel<T>(t);
			setModel(mt);
			
			FormComponent<String>cname=new TextField<String>("name");
			FormComponent<String>caddress=new TextField<String>("address");
			add(cname);
			add(caddress);
		}
		@Override
		protected void onSubmit() {
			IModel<T>mt=getModel();
			T t=mt.getObject();
			System.out.println(t);
			
		}
	}

	private class Person implements Serializable{	
		private static final long serialVersionUID = 1L;

		
		private String name;
		private String address;
		
		
		public String getName() {
			return name;
		}

		public void setName(String name) {
			this.name = name;
		}

		public String getAddress() {
			return address;
		}

		public void setAddress(String address) {
			this.address = address;
		}
	}

/ 7	.

/ we maken Man52.java/.html en Man52Panel.java/.html

$ vi Man52.java

	public Man52(final PageParameters parameters) {
		super(parameters);

		Panel panel=new Man52Panel("panel");
		add(panel);
	
    } 

$ vi Man52.html

<head>
<meta charset="UTF-8">
<title>Man52</title>
<wicket:head>
<wicket:link>
	<link href="Man52.css" rel="stylesheet">
</wicket:link>
</wicket:head>
</head>

<body>
	<div wicket:id="panel"></div>
</body>

$ vi Main52.css

div{
	border:solid 2px blue;
}

$ vi Man52Panel.java

	public Man52Panel(String id) {
		super(id);
		Link<Void>link=new Link<Void>("link") {
			@Override
			public void onClick() {
				logger.info("Main52Panel");
				
			}
		};
		link.setOutputMarkupId(true);
		add(link);
    } 

$ vi Main52Panel.html

<head>
<meta charset="UTF-8">
<title>Man52Panel</title>
<wicket:head>
<wicket:link>
	<link href="Man52Panel.css" rel="stylesheet">
</wicket:link>
</wicket:head>

</head>
<body>

<wicket:panel>
	<a href="#" wicket:id="link">link</a>
</wicket:panel>

</body>

$ vi Man52Panel.css

a{
	color:#aaa;
}

/ we zien	,

<html>
<head>
</head>
<body><wicket:link>
	<link href="./wicket/resource/my.test.own.wicket_book.Man52Panel/Man52Panel-ver-1421939350000.css" rel="stylesheet">
</wicket:link>

<meta charset="UTF-8">
<title>Man52</title>

<wicket:link>
	<link href="./wicket/resource/my.test.own.wicket_book.Man52/Man52-ver-1421939350000.css" rel="stylesheet">
</wicket:link>

	<div wicket:id="panel">
	<wicket:panel>
		<a href="./?0-1.ILinkListener-panel-link" wicket:id="link" id="link1">link</a>
	</wicket:panel>
	</div>

</body></html>

/ <link> is juist geen link, maar wordt voor css used	, <a> is de link	, 
/ we zien dus 2 css files included	,

/ We zien NIET	,
<meta charset="UTF-8">
<title>Man52Panel</title>

/ we kunnen in Man52 WEGLATEN	,
<wicket:head>
</wicket:head>

/ 7	.

/ Ipv een link kunnen we ook een button use, 
/ een button MOET in een form	,
/ een link hoeft NIET in een form (mag wel).

/ we maken 	,

$ vi Man52.html

	<div wicket:id="panel"></div>

 	<a href="#" wicket:id="link">link</a>
 	<form wicket:id="form" action="">
		<input wicket:id="button" type="submit">
	</form>

$ vi Man52.java

		panel=new Man52Panel("panel");
		add(panel);
	
		IModel<String>model=new Model<String>("Press");
		Link<String>link=new Link<String>("link",model) {
			@Override
			public void onClick() {
				if(getPanel().isVisible()){
					getPanel().setVisible(false);
				}else{
					getPanel().setVisible(true);
				}
				
				IModel<String>model=getModel();
				String value=model.getObject();
				logger.info(value);
				
			}
		};
		add(link);
	
		
		Form<String>form=new Form<String>("form");
		Button button=new Button("button",model){
			@Override
			public void onSubmit() {
				if(getPanel().isVisible()){
					getPanel().setVisible(false);
				}else{
					getPanel().setVisible(true);
				}
			};
		};
		form.add(button);
		add(form);

/ we kunnen een link ook een model geven	, en doorgeven aan page die wordt linked, maar wij log alleen de model object	, 
/ bij button verschijnt model als label op het button	,

/ eclipse geeft geen @Override op onSubmit method, wel als we een nieuwe type create	,

	private class MyButton extends Button{	
		public MyButton(String id) {
			super(id);
		}
		@Override
		public void onSubmit() {
			// TODO Auto-generated method stub
			super.onSubmit();
		}
	}
/ Deze use wij niet	,

/ 7	. 

/ over links	,
		IModel<String>model=new Model<String>("Press");
		Link<String>link=new Link<String>("link",model) {
			@Override
			public void onClick() {
				IModel<String>model=getModel();
				String value=model.getObject();
				logger.info(value);

/ als model is IModel<String>,	 dan moeten we Link<String>	, 
/ TODO

/ 7	.

/ we hebben met inheritance ipv panels	,
/ maar dan kunnen we het panel niet laten verdwijnen, alleen de hele page, omdat we de handler in de sub page moeten set	,

/ In Man52 is er een ref naar de panel, in Man54 niet	, de on click handler in de link kan in Man54 niet ref naar de panel, maar via een inh truc wel naar de hele (sub)page	, we maken dus de hele page onzichtbaar	,

/ Man52Panel en Man54Child verschillen nauwelijks	, alleen Man54Child krijgt een handler fct om de (sub) page invisible te maken	,

/ Man52.html
	<div wicket:id="panel"></div>
/ Man54.html
	<wicket:child/>

/ Man52Panel.html
<wicket:panel>
	<a href="#" wicket:id="link">link</a>
</wicket:panel>
/ Man54Child.html
<wicket:extend>
	<a href="#" wicket:id="link2">link</a>
</wicket:extend>

/ we moeten in  Man54Child de link link2 id geven, want link is er al in de (parent) page	,

/ het verschil is dat Man54Child (Man54) 1 page is	, en er zijn 2 pages Man52 en Man52Panel, die inj wordt	,

/ je geeft in WicketApplication	,

	@Override
	public Class<? extends WebPage> getHomePage()
	{
		return Man52.class;
	}
/ of
		return Man54Child.class;

/ Bij Man52 zien we	,
<div wicket:id="panel">
	<wicket:panel>
		<a href="./?0-1.ILinkListener-panel-link" wicket:id="link" id="link1">link</a>
	</wicket:panel>
</div>

/ bij Man54Child	,
<wicket:child>
	<wicket:extend>
		<a href="./?0-1.ILinkListener-link2" wicket:id="link2" id="link21">link</a>
	</wicket:extend>
</wicket:child>  

/ In Man52 hebben we een panel field, en in Man52.html moet dan ook 	,
	<div wicket:id="panel"></div>
/ In Man54 is de panel field er niet en zien we 	,
	<wicket:child/>

/ In Main52Panel zien we	,
<wicket:panel>...
/ In Main54Child zien we
<wicket:extend>...

/ 7	.

/ 13	.

/ In wicket-book project, Main62	,

/ In Main62.html	,
div wicket:id="name" style="color:blue;font-style:italic"></div>

/ In Main62.java
			Label label=new Label("name", person.getName());
			label.add(new AttributeModifier("style","color:red;font-weight:bold;"));

/ we zien	,
<div wicket:id="name" style="color:red;font-weight:bold">Foo</div>

/ dus de hele style uit html is overwrite	, 

/ 13	. 

/ In Main62.html
<div wicket:id="name2" style="color:blue;font-style:italic"></div>
/ In Main62.java
			Label label=new Label("name2", person.getName());
			label.add(new AttributeAppender("style", "color:red;font-weight:bold;"));
/ we zien	,
<div wicket:id="name2" style="color:blue;font-style:italic;color:red;font-weight:bold">Foo</div>

/ de browser leest vlnr dus blue wordt overwrite door red	,

/ 13	.

<div wicket:id="name3" style="color:blue;font-style:italic;"></div>
<div wicket:id="name4" style="color:blue;font-style:italic;"></div>
<div wicket:id="name5" style="color:blue;font-style:italic;"></div>

		{
			Person person=new Person();
			person.setName("Foo");
			Label label=new Label("name3", person.getName());
			add(label);
			label.add(AttributeModifier.replace("style", "color:red;font-weight:bold"));
		}
		{
			Person person=new Person();
			person.setName("Foo");
			Label label=new Label("name4", person.getName());
			add(label);
			label.add(AttributeModifier.append("style", "color:red;font-weight:bold"));
		}
		{
			Person person=new Person();
			person.setName("Foo");
			Label label=new Label("name5", person.getName());
			add(label);
			label.add(AttributeModifier.prepend("style", "color:red;font-weight:bold"));
		}

/ we zien	,
<body>
<div wicket:id="name3" style="color:red;font-weight:bold">Foo</div>
<div wicket:id="name4" style="color:blue;font-style:italic; color:red;font-weight:bold">Foo</div>
<div wicket:id="name5" style="color:red;font-weight:bold; color:blue;font-style:italic;">Foo</div>

/ replace replaces inderdaad de hele style	, niet aparte 	, 

/ 7	. 

/ we lezen 17 in Manual	,

/ 13	. 

/ red asterisk 	,

$ vi Man171.html

<div wicket:id="name" style="color:blue;font-style:italic;"></div>

$ vi Man171.java

			Label label=new Label("name", person.getName());
			label.add(new MyBehavior());

	private class MyBehavior extends Behavior{
		@Override
		public void afterRender(Component component) {
			Response response=component.getResponse();
			StringBuffer buffer=new StringBuffer(200);
			buffer.append("<b style='color:red;font-weight:bold;'>*</b>");
			response.write(buffer);
			
		}
	}

/ we zien	,

<div wicket:id="name" style="color:blue;font-style:italic;">Foo</div>
<b style="color:red;font-weight:bold;">*</b>

/ als we beforeRender use, dan verschijnt * voor de label, als we afterRender, dan erachter	, 

/ 13	. 

/ we voegen nu de * achter een text field in een form 	,

$ vi Man171.java

		{
			
			person=new Person();

			Person person=new Person();
			person.setName("Foo");
			Label label=new Label("name", person.getName());
			add(label);
			label.add(new MyBehavior());
		}
		{
			Form<Person>form=new MyForm<Person>("form",person);
			add(form);
		
		}

	private class MyForm<T extends Serializable> extends Form<T>{
		
		private T t;


		public MyForm(String id,T t) {
			super(id);
			this.t=t;
			
			IModel<T>mt=new Model<T>(t);
			setModel(mt);
			
			IModel<String>mname=new PropertyModel<String>(t, "name");
			IModel<String>maddress=new PropertyModel<String>(t, "address");
			FormComponent<String>cname=new TextField<String>("name", mname);

			Behavior behavior=new MyBehavior();
			cname.add(behavior);
			FormComponent<String>caddress=new TextField<String>("address", maddress);
			caddress.add(behavior);

			add(cname);
			add(caddress);
		}
		@Override
		protected void onSubmit() {
			IModel<T>mt=getModel();
			T t=mt.getObject();
			System.out.println(t);
			
		}
	}

	

	private class Person implements Serializable{	
...
	}
	
	private class MyBehavior extends Behavior{
		@Override
		public void afterRender(Component component) {
			Response response=component.getResponse();
			StringBuffer buffer=new StringBuffer(200);
			buffer.append("<b style='color:red;font-weight:bold;'>*</b>");
			response.write(buffer);
			
		}
	}


/ 7	. 

/ Zoek in google op	,
wicket behavior javascript

/ 7	. 

/ Lees	,
http://www.wicket-library.com/wicket-examples/repeater/

/ 7	.

/ Lees	,
https://cwiki.apache.org/confluence/display/WICKET/Everything+about+Wicket+internationalization

/ in wicket-book project	,

$ vi Ch12_1_2.html

	<div wicket:id="second"></div>
	<wicket:message key="first"></wicket:message>
	<div wicket:id="third"></div>

$ vi Ch12_1_2.java

		Label label=new Label("second",new Model<String>("Foo Bar"));
		add(label);

		Label label3=new Label("third",new ResourceModel("third"));
		add(label3);

$ vi Ch12_1_2.properties

first=My First Label
third=My Third Label


/ 7	. 

/ SimpleResourceModel	,

/ bundle is de .properties file	,

/ in project wicket-book	,

/ 13	. 

/ we kunnen de property krijgen door een var te resolve,	

$ vi Ch12_1_2a.java

		WeatherStation ws=new WeatherStation();
		ws.setCurrentStatus("raining");
		IModel<String>model3=new StringResourceModel("weather.${currentStatus}",this,new Model<WeatherStation>(ws));
		Label label3=new Label("weatherMessage",model3);
		add(label3);
	
		
	}
	private class WeatherStation implements Serializable{
		private String currentStatus;
/ en getters/setters	,

$ vi Ch12_1_2a.properties

 weather.sunny=Don't forget sunscreen!
 weather.raining=You might need an umbrella
 weather.snowing=Got your skis?
 weather.overcast=Best take a coat to be safe

$ vi Ch12_1_2a.html

	<div wicket:id="weatherMessage"></div>

/we zien	,
You might need an umbrella

/ In 
		IModel<String>model3=new StringResourceModel("weather.${currentStatus}",this,new Model<WeatherStation>(ws));
/ wordt ${currentStatus} tegen ws bepaald	, 

/ Wat doet this	?
/ TODO

/ 13	.

/ we kunnen ook in de regel var's te resolve,	


$ vi Ch12_1_2a.java
		WeatherStation ws=new WeatherStation();
		ws.setCurrentStatus("raining");
		ws.setCurrentTemperature(4);
		ws.setUnits("\u00b0C");
		
		IModel<String>model4=new StringResourceModel("weather.message",this,new Model<WeatherStation>(ws));
		Label label4=new Label("weatherMessage2",model4);
		add(label4);

	private class WeatherStation implements Serializable{
		private static final long serialVersionUID = 1L;
		private String currentStatus;
		private int currentTemperature;
		private String units;
/ en getters/setters	,

$ vi Ch12_1_2a.properties

weather.message=Weather station reports that the temperature is ${currentTemperature} ${units}

/ we zien	,
Weather station reports that the temperature is 4 °C

/ 13	. 

/ Maar wat NIET kan is	, dat hij 2 keer resolves	,
weather.message=Weather station reports that the temperature is ${currentTemperature} ${units}, and weather.${currentStatus} is.

/ we zien	,
Weather station reports that the temperature is 4 °C, and weather.raining is.

/ hij resolves NIET weather.raining	,

/ 7	.

/ we kunnen ook

$ vi Ch12_1_2a.java

				
		Object[]params=new Object[]{
				new Date(),
				new PropertyModel<String>(model,"currentStatus"),
				new PropertyModel<Integer>(model,"currentTemperature"),
				new PropertyModel<String>(model,"units")
		};
		IModel<String>model5=new StringResourceModel("weather.detail",this,model,params);
		
		Label label5=new Label("weatherMessage5",model5);
		add(label5);


$ vi Ch12_1_2a.properties

weather.detail=The report for {0,date}, shows the temperature as {2,number,###.##} {3} and the weather to be {1}

/ we zien	,

The report for Feb 3, 2015, shows the temperature as 4 °C and the weather to be raining

/ In de string zijn date, number format types	, in {0,date}

/ als we {0}, ipv {0,date}	, dus als we 	,
weather.detail=The report for {0}, shows the temperature as {2,number,###.##} {3} and the weather to be {1}
/ dan zien we	,
The report for 2/3/15 9:00 AM, shows the temperature as 4 °C and the weather to be raining

/ we kunnen ze ook door elkaar use, dus	, 
	{2,number,###.##} or ${currentTemperature}
/ we zien	,
	4 or 4
/////////////////////////////////////////////////////////////////////////////////
/ WH komt ${currentTemperatur} uit de model, en {2} uit de params	,
/ we geven de laatste 3 params values uit de model, dus bij die komt het op hetzelfde neer	,

/ 7	. 

/ project wicket-book

/ Misc	,

/ Lees	,
http://stackoverflow.com/questions/5395603/wicket-changing-the-text-of-an-ajaxbutton-on-submit



/ Het model op een (Ajax)Button verschijnt op het button als we <input type="submit"> use, en NIET <button>	, want het model verschijnt als value-attribute, en dat werkt zo alleen met <input type="submit">

$ vi Misc.html

	<h1 wicket:id="label0"></h1>
	
	<form wicket:id="form">
		
		<input type="submit" wicket:id="button">
		
		<label for="button3">Foo Bar</label>		
		<input id="button3" type="submit" value="Foo Bar">
	</form>

$ vi Misc.java

		IModel<String>model0=new ResourceModel("label");
		Label label0=new Label("label0",model0);
		label0.setOutputMarkupId(true);
		add(label0);
		
		Form<Void>form=new Form<Void>("form");
		IModel<String>model=new ResourceModel("button");
		AjaxButton button=new AjaxButton("button", model,form){
			@Override
			protected void onSubmit(AjaxRequestTarget target, Form<?> form) {
				// TODO Auto-generated method stub
				super.onSubmit(target, form);
			}
		
		};
		form.add(button);

		add(form);

$ vi Misc.properties
label=My Label
button=My Button

/ we zien in HTML	,

<h1 wicket:id="label0" id="label03">My Label</h1>

<form wicket:id="form" id="form1" method="post" action="./?0-3.IFormSubmitListener-form"><div style="width:0px;height:0px;position:absolute;left:-100px;top:-100px;overflow:hidden">
	<input type="hidden" name="form1_hf_0" id="form1_hf_0"></div>
	<input type="button" wicket:id="button" name="button" id="button2" value="My Button">

	<label for="button3">Foo Bar</label>		
	<input id="button3" type="submit" value="Foo Bar">
</form>

/ Kunnen we ook het for attribute program in wicket? Met AttributeModifier? Hoe dan met id van de target, de <input type="submit">?
/ Met zoiets als	,
		Label label=new Label("label", model);
		Behavior behavior=new AttributeModifier("for", model);
/ TODO

/ 7	. 

/ form's model	,

/ we kunnen 2 dingen doen	,

		Form<PersonSer>form=new Form<PersonSer>("form5",model){
/ or	,
		Form<PersonSer>form=new Form<PersonSer>("form5"){
...
		form.setModel(model);

/ 7	.

/ we kunnen 	,

		dropdown=new DropDownChoice<String>("dropdown",model3,list);
/ of	,
		dropdown=new DropDownChoice<String>("dropdown",list);
		dropdown.setModel(model3);

/ In Man11_4d2 veranderen we de model van een label, en we zien de label view veranderd	,

/ 7	.

/ form & model

///////////////////////
/ In een form moeten we een <input type="submit"> opnemen, zonder wicket:id dus	, en dan valt hij in de Form.onSubmit	,

///////////////////////
/ als we submit, in het model van het form write	,

$ vi Misc3.java

public class Misc3 extends WebPage{
	public Misc3() {
		Form<Data>form=new MyForm("form");
		add(form);
		
		boolean b=false;
		
	}
	
	private class MyForm extends Form<Data>{
		public MyForm(String id) {
			super(id);
			Data d=new Data();
			d.setS("Foo");
			d.setI(13);
			IModel<Data>model=new CompoundPropertyModel<>(d);
			setDefaultModel(model);
			FormComponent<String>s=new TextField<>("s");
			add(s);
			FormComponent<Integer>i=new TextField<>("i");
			add(i);
			
		}
		@Override
		protected void onSubmit() {
			super.onSubmit();
			Data d=getModelObject();
			boolean b=false;
		}
		
	}
	private class Data implements Serializable{
		String s;
		int i;
		public String getS() {
			return s;
		}
		public void setS(String s) {
			this.s = s;
		}
		public int getI() {
			return i;
		}
		public void setI(int i) {
			this.i = i;
		}
	}
}

$ vi Misc3.html

	<form wicket:id="form">
		<input type="text" wicket:id="s">
		<input type="text" wicket:id="i">
		<input type="submit">
	</form>

/ we zien omdat we de model al hebben init in de text fields Foo en 13	, 
/ maar dat hoeven we niet te doen	,
/ als we click op submit, zien we dat in het model staat wat we in de text fields hebben gegeven	,

/ 7	. 

/ we voegen een zelf wicket button toe	,


$ vi Misc3.java

	private class MyForm extends Form<Data>{
		public MyForm(String id) {
			super(id);
			Data d=new Data();
			d.setS("Foo");
			d.setI(13);
			IModel<Data>model=new CompoundPropertyModel<>(d);
			setDefaultModel(model);
			FormComponent<String>s=new TextField<>("s");
			add(s);
			FormComponent<Integer>i=new TextField<>("i");
			add(i);
			FormComponent<String>b=new Button("b"){
				@Override
				public void onSubmit() {
					super.onSubmit();
					System.out.println("************************");
					System.out.println("In Button");
					System.out.println("************************");

				}
			};
			add(b);
			
		}
		@Override
		protected void onSubmit() {
//			super.onSubmit();
			Data d=getModelObject();
			System.out.println("************************");
			System.out.println(d);
			System.out.println(d.getS());
			System.out.println(d.getI());
			System.out.println("************************");
			boolean b=false;
		}
		
	}

/ we zien als we click op het ajax-button	,

************************
In Button
************************
************************
my.test.own.wicket_book.Misc3$Data@363fe0c7
Foo
13
************************

/ we zien als we click op het niet-wicket button	, net als eerst	,

************************
my.test.own.wicket_book.Misc3$Data@363fe0c7
Foo
13
************************



/ 7	. 

/ we maken een form met een ajax submit button	,

$ vi Misc3.java

	private class MyForm extends Form<Data>{
		public MyForm(String id) {
			super(id);
			Data d=new Data();
			d.setS("Foo");
			d.setI(13);
			IModel<Data>model=new CompoundPropertyModel<>(d);
			setDefaultModel(model);
			FormComponent<String>s=new TextField<>("s");
			add(s);
			FormComponent<Integer>i=new TextField<>("i");
			add(i);
			FormComponent<String>b=new Button("b"){
				@Override
				public void onSubmit() {
					super.onSubmit();
					System.out.println("************************");
					System.out.println("In Button");
					System.out.println("************************");

				}
			};
			add(b);
			FormComponent<String>aj=new AjaxButton("aj",new Model<String>("Click")) {
				@Override
				protected void onSubmit(AjaxRequestTarget target, Form<?> form) {
					super.onSubmit(target, form);
					System.out.println("************************");
					System.out.println("In Ajax Button");
					System.out.println("************************");
	
				}
			};
			aj.setOutputMarkupId(true);
			add(aj);
			
	
			
		}
		@Override
		protected void onSubmit() {
			super.onSubmit();
			Data d=getModelObject();
			System.out.println("************************");
			System.out.println(d);
			System.out.println(d.getS());
			System.out.println(d.getI());
			System.out.println("************************");
			boolean b=false;
		}
		
	}

/ we hoeven in de ajax buttons' onSubmit NIET	,
	target.add(...) 
	target.add(...) 
/ met op ... een  component die je door ajax wil laten veranderen	,


/ Einde WICKET STYLE

/ WICKET RENDER STACKTRACES

/ In Man11_4d3	, 

/ we komen in	,

	Man11_4d3$1.onBeforeRender() line: 48	
/=
			@Override
			protected void onBeforeRender() {
				super.onBeforeRender();
			}
	Man11_4d3$1(Component).internalBeforeRender() line: 949	
/ label
	Man11_4d3$1(Component).beforeRender() line: 1017	
/ label
	Man11_4d3(MarkupContainer).onBeforeRenderChildren() line: 1712	
/ this=Man11_4d3
	Man11_4d3(Page).renderPage() line: 1018	
	Man11_4d3(Component).onBeforeRender() line: 3869	
	Man11_4d3(Page).onBeforeRender() line: 801	
	Man11_4d3(Component).internalBeforeRender() line: 949	
	Man11_4d3(Component).beforeRender() line: 1017	
	Man11_4d3(Component).internalPrepareForRender(boolean) line: 2207	
	Man11_4d3(Page).internalPrepareForRender(boolean) line: 242	
	Man11_4d3(Component).render() line: 2296	
	Man11_4d3(Page).renderPage() line: 1018	
/ this=Man11_4d3
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
/ this=WebPageRenderer	,
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 837	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
	ApplicationFilterChain.internalDoFilter(ServletRequest, ServletResponse) line: 241	
	ApplicationFilterChain.doFilter(ServletRequest, ServletResponse) line: 208	
	StandardWrapperValve.invoke(Request, Response) line: 220	
	StandardContextValve.invoke(Request, Response) line: 122	
	NonLoginAuthenticator(AuthenticatorBase).invoke(Request, Response) line: 503	
	StandardHostValve.invoke(Request, Response) line: 170	
	ErrorReportValve.invoke(Request, Response) line: 103	
	AccessLogValve.invoke(Request, Response) line: 950	
	StandardEngineValve.invoke(Request, Response) line: 116	
	CoyoteAdapter.service(Request, Response) line: 421	
	Http11Processor(AbstractHttp11Processor<S>).process(SocketWrapper<S>) line: 1070	
	Http11Protocol$Http11ConnectionHandler(AbstractProtocol$AbstractConnectionHandler<S,P>).process(SocketWrapper<S>, SocketStatus) line: 611	
	JIoEndpoint$SocketProcessor.run() line: 314	
	ThreadPoolExecutor(ThreadPoolExecutor).runWorker(ThreadPoolExecutor$Worker) line: 1145	
	ThreadPoolExecutor$Worker.run() line: 615	
	TaskThread$WrappingRunnable.run() line: 61	
	TaskThread(Thread).run() line: 745	

/ Later	,

	Man11_4d3$2.onBeforeRender() line: 62	
/ textfield	,
	Man11_4d3$2(Component).internalBeforeRender() line: 949	
	Man11_4d3$2(Component).beforeRender() line: 1017	
/ textfield	,
	Man11_4d3(MarkupContainer).onBeforeRenderChildren() line: 1712	
/ this=Man11_4d3
	Man11_4d3(Component).onBeforeRender() line: 3869	
	Man11_4d3(Page).onBeforeRender() line: 801	
	Man11_4d3(Component).internalBeforeRender() line: 949	
	Man11_4d3(Component).beforeRender() line: 1017	
	Man11_4d3(Component).internalPrepareForRender(boolean) line: 2207	
	Man11_4d3(Page).internalPrepareForRender(boolean) line: 242	
	Man11_4d3(Component).render() line: 2296	
	Man11_4d3(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	


/ later	, 

	TextField<T>(AbstractTextComponent<T>).getModelType(IModel<?>) line: 165	
	TextField<T>(AbstractTextComponent<T>).resolveType() line: 152	
	TextField<T>(AbstractTextComponent<T>).onBeforeRender() line: 142	
	TextField<T>(Component).internalBeforeRender() line: 949	
	TextField<T>(Component).beforeRender() line: 1017	
this=TextField<T>
	Man11_4d3(MarkupContainer).onBeforeRenderChildren() line: 1712	
this=Man11_4d3
	Man11_4d3(Component).onBeforeRender() line: 3869	
this=Man11_4d3
	Man11_4d3(Page).onBeforeRender() line: 801	
this=Man11_4d3
	Man11_4d3(Component).internalBeforeRender() line: 949	
this=Man11_4d3
	Man11_4d3(Component).beforeRender() line: 1017	
this=Man11_4d3
	Man11_4d3(Component).internalPrepareForRender(boolean) line: 2207	
this=Man11_4d3
	Man11_4d3(Page).internalPrepareForRender(boolean) line: 242	
this=Man11_4d3
	Man11_4d3(Component).render() line: 2296	
this=Man11_4d3
	Man11_4d3(Page).renderPage() line: 1018	
this=Man11_4d3
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	

/ Later	,

/ 1ste child	,

Daemon Thread [http-bio-9090-exec-253] (Suspended (breakpoint at line 2288 in Component))	
	HtmlHeaderContainer(Component).render() line: 2288	
	Man11_4d3(MarkupContainer).renderNext(MarkupStream) line: 1405	
	Man11_4d3(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1601	
	Man11_4d3(Page).onRender() line: 879	
	Man11_4d3(WebPage).onRender() line: 142	
	Man11_4d3(Component).internalRender() line: 2372	
	Man11_4d3(Component).render() line: 2300	
				internalPrepareForRender(true);
/d (hierboven)
			}

			// Do the render
			internalRender();

	Man11_4d3(Page).renderPage() line: 1018	

/ later	,
/ 2de child	,

	Man11_4d3$1(Component).render() line: 2288	
/ label
	Man11_4d3(MarkupContainer).renderNext(MarkupStream) line: 1405	
	Man11_4d3(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1601	
	Man11_4d3(Page).onRender() line: 879	
	Man11_4d3(WebPage).onRender() line: 142	
	Man11_4d3(Component).internalRender() line: 2372	
	Man11_4d3(Component).render() line: 2300	
				internalPrepareForRender(true);
/d
			}

			// Do the render
			internalRender();

	Man11_4d3(Page).renderPage() line: 1018	

/ later	,

	Man11_4d3$1.onRender() line: 47	
/=
			@Override protected void onRender() {
				super.onRender();
			}
	Man11_4d3$1(Component).internalRender() line: 2372	
	Man11_4d3$1(Component).render() line: 2300	
	Man11_4d3(MarkupContainer).renderNext(MarkupStream) line: 1405	
	Man11_4d3(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1601	
	Man11_4d3(Page).onRender() line: 879	
	Man11_4d3(WebPage).onRender() line: 142	
	Man11_4d3(Component).internalRender() line: 2372	
	Man11_4d3(Component).render() line: 2300	
	Man11_4d3(Page).renderPage() line: 1018	

/ later	,

Daemon Thread [http-bio-9090-exec-253] (Suspended (breakpoint at line 2288 in Component))	
	TextField<T>(Component).render() line: 2288	
/ this=TextField<T> 
	Man11_4d3(MarkupContainer).renderNext(MarkupStream) line: 1405	
	Man11_4d3(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1601	
	Man11_4d3(Page).onRender() line: 879	
	Man11_4d3(WebPage).onRender() line: 142	
	Man11_4d3(Component).internalRender() line: 2372	
	Man11_4d3(Component).render() line: 2300	
	Man11_4d3(Page).renderPage() line: 1018	




/ Einde WICKET RENDER STACKTRACES

/ WICKET MODEL UPDATE

/ In Man11_4db : ajax en niet-ajax button update een textfield en dropdown in een form	,
/ compound property model 	,

/ In Man11_4d5a: ajax en niet-ajax button renew their label when we click on it	,

/ we kunnen niet compound property model use met button	,
/ voor button moeten we apart model ,dan property model zijn	,
/ TODO

/ 7	.

/ Man11_4db	,

/ als we click op de buttons , zien we het textfield en dropdown veranderen, omdat we het compound property model veranderen	,

$ vi Man11_4db.html

<form wicket:id="form">

	<input type="text" wicket:id="f">
	<select  wicket:id="d"></select>
	<input type="submit" wicket:id="a">
	<input type="submit" wicket:id="b">
	
</form>
<h1 wicket:id="label"></h1>

$ vi Man11_4db.java

public class Man11_4db extends WebPage {
	private static final long serialVersionUID = 1L;
	
	private static final Logger logger=LoggerFactory.getLogger(Man11_4db.class);
	
	private FormComponent<String >field;
	private Label label;
	private FormComponent<String >dropdown;
	private FormComponent<String>abtn;
	private FormComponent<String>btn;
	
	
	

	public Man11_4db(final PageParameters parameters) {
		super(parameters);

		Form<Data>form=new MyForm2("form");
		add(form);
		label=new Label("label",new Model<String>(""));
		label.setOutputMarkupId(true);
		add(label);


    } 
	
	
	private class Data implements Serializable{
		private String l;
		private String f;
		private String d;
		private String b;
		private String a;
		
		public String getL() {
			return l;
		}
		public void setL(String l) {
			this.l = l;
		}
		public String getF() {
			return f;
		}
		public void setF(String f) {
			this.f = f;
		}
		public String getD() {
			return d;
		}
		public void setD(String d) {
			this.d = d;
		}
		
		public Data() {
		}
		public String getB() {
			return b;
		}
		public void setB(String b) {
			this.b = b;
		}
		public String getA() {
			return a;
		}
		public void setA(String a) {
			this.a = a;
		}

		
	}
	


	
	private class MyForm2 extends Form<Data>{
		private FormComponent<String>text;
		public MyForm2(String id) {
			super(id);
			
			Data data=new Data();
//			data.setL("Initial");
			data.setF("initial");
			data.setD("0Initial");
			data.setA("Initial");
			data.setB("Initial");
			IModel<Data>model=new CompoundPropertyModel<>(data);
			setModel(model);
			
//			Label label=new Label("l");
//			label.setOutputMarkupId(true);
//			add(label);
			
			field=new TextField<String>("f");
			field.setOutputMarkupId(true);
			add(field);

			List<String>list=Arrays.asList("0Initial","aInitial","bInitial");
//			ChoiceRenderer<String>renderer=new ChoiceRenderer<String>();
			dropdown=new DropDownChoice<String>("d",list);
			dropdown.setOutputMarkupId(true);
			add(dropdown);
			
			IModel<String>model5=new Model<String>("Press");
			abtn=new ABtn("a",model5);
			add(abtn);
			
			IModel<String>model6=new Model<String>("Press");
			btn=new Btn("b",model6);
			add(btn);
		}
		
	}
	
	private class ABtn extends AjaxButton{
		public ABtn(String id,IModel<String>model) {
			super(id,model);
		}
		@Override
		protected void onSubmit(AjaxRequestTarget target, Form<?> form) {
			String value=dropdown.getModelObject();
			label.setDefaultModelObject(value);
			if(target!=null){
				target.add(dropdown);
				target.add(field);
				target.add(abtn);
			}
			Data data=new Data();
//			data.setL("New L");
			data.setF("aNew");
			data.setD("aInitial");			
			data.setA("aNew");
			data.setB("aNew");
//			IModel<Data>model=new CompoundPropertyModel<>(data);
//			((Form<Data>)form).setModel(model);
			((Form<Data>)form).getModel().setObject(data);
		}
		
	}
	
	private class Btn extends Button{
		public Btn(String id,IModel<String>model){
			super(id,model);
		}
		@Override
		public void onSubmit(){
			String value=dropdown.getModelObject();
			label.setDefaultModelObject(value);
			
			Data data=new Data();
//			data.setL("New L");
			data.setF("bNew");
			data.setD("bInitial");
			data.setA("bNew");
			data.setB("bNew");
//			IModel<Data>model=new CompoundPropertyModel<>(data);
//			((Form<Data>)form).setModel(model);
			((Form<Data>)getForm()).getModel().setObject(data);
		}
		
	}
	
}

/ 7	. 

/ Verander label op buttons	, 

/ we kunnen dit alleen met een property model	, niet met de compoundpropertymodel 	,
/ TODO

/ als we click op button met Initial, verschijnt er op het button New	,
/ als we click op ajax button met Initial, verschijnt er op het button aNew	,

$ vi Man11_4d5a.html

<form wicket:id="form">
	<input wicket:id="button" type="submit">
	<input wicket:id="abtn" type="submit">
</form>

$ vi Man11_4d5a.java

public class Man11_4d5a extends WebPage {
	
	private class Data implements Serializable{
		
		private String button;
		private String abtn;
		
		
		
		public String getButton() {
			return button;
		}
		public void setButton(String button) {
			this.button = button;
		}
		public String getAbtn() {
			return abtn;
		}
		public void setAbtn(String abtn) {
			this.abtn = abtn;
		}
	}
	
	
	private class MyForm extends Form<Data>{
		
		public MyForm(String id) {
			super(id);
			
			
			IModel<String>model=new PropertyModel<String>(data, "button");
			button=new Button("button",model){
				protected void onRender() {
					super.onRender();
				};
				@Override
				public void onSubmit(){
					super.onSubmit();
					
					data.setButton("New");				
				}
			};
			button.setOutputMarkupId(true);
			add(button);
			
			IModel<String>amodel=new PropertyModel<String>(data, "abtn");
			abtn=new AjaxButton("abtn",amodel) {
				@Override
				protected void onSubmit(AjaxRequestTarget target, Form<?> form) {
					super.onSubmit(target, form);
					if(target!=null){
						target.add(abtn);
					}
					data.setAbtn("aNew");
				}
			};
			abtn.setOutputMarkupId(true);
			add(abtn);
		}
		
		
	}
	
	private static final long serialVersionUID = 1L;
	
	private static final Logger logger=LoggerFactory.getLogger(Man11_4d5a.class);
	private FormComponent<String> button;
	private FormComponent<String>abtn;
	private Data data;


	public Man11_4d5a(final PageParameters parameters) {
		super(parameters);
		
		data=new Data();
		data.setButton("Initial");
		data.setAbtn("Initial");

		Form<Data>form=new MyForm("form");
		add(form);
		

	
		
	}




/ Einde WICKET MODEL UPDATE

/ WICKET MODEL COMPOUND

/ In WICKET MODEL UPDATE hebben we Man11_4b en Man11_4d5a	,
/ In Man11_4b hebben we een compound model, maar dat is de model van een form	, 
/ In Man11_4d5a veranderen we het label van een button	,

/ In Man11_4d6 hebben we een compound property model, maar is default model van de page	,

$ vi Man11_4d6.html

	<div wicket:id="l"></div>
	<input type="text" wicket:id="f">
	<select  wicket:id="d"></select>
	<input type="submit" wicket:id="a">
	<a href="#" wicket:id="link">link</a>


$ vi Man11_4d6.java

		Data data=new Data();
		data.setF("Initial");
		data.setL("Initial");
		data.setD("Initial");
		data.setA("Initial");
		data.setB("Initial");
		model=new CompoundPropertyModel<>(data);
		setDefaultModel(model);
		
		Label label=new Label("l");
		label.setOutputMarkupId(true);
		add(label);
		
		field=new TextField<String>("f");
		field.setOutputMarkupId(true);
		add(field);

		List<String>list=Arrays.asList("Initial","New");
//		ChoiceRenderer<String>renderer=new ChoiceRenderer<String>();
		dropdown=new DropDownChoice<String>("d",list);
		dropdown.setOutputMarkupId(true);
		add(dropdown);
		
		IModel<String>model5=new Model<String>("Button");
		abtn=new Button("a",model5);
		add(abtn);
		
		IModel<String>model7=new Model<String>("Link");
		link=new Link<String>("link",model7) {
			@Override
			public void onClick() {
				Data data=new Data();
				data.setF("New");
				data.setL("New");
				data.setD("New");
				data.setA("New");
				data.setB("New");

				getParent().setDefaultModelObject(data);
/ of	,
				((IModel<Data>)getParent().getDefaultModel()).setObject(data);
			}
		};
		add(link);

	private class Data implements Serializable{
		private String l;
		private String f;
		private String d;
		private String b;
		private String a;
/ + getters/setters

/ Wat doet model7 op de link?
/ TODO

/ Als we de link click, zien we de label, textfield en dropdown veranderen	, 

/ we kunnen op page alleen setDefaultModel	, op form setModel	,

/ we maken Man11_4d6a	, met form	,
/ TODO

/ Form.setModel=setDefaultModel	, een Form is een MarkupContainer	, en die heeft de method setDefaultModel	,
/ Component heeft ook setDefaultModel, vandaar dat Label hem ook heeft	,
/ MarkupContainer.setDefaultModel is in feite Component.setDefaultModel	,



/ Einde WICKET MODEL COMPOUND

/ DEBUG WICKET MODEL COMPOUND

/ we debug Man11_4d6	,

		IModel<String>model5=new Model<String>("Button");
		abtn=new Button("a",model5){
/s
	Man11_4d6$4(Component).setModelImpl(IModel<?>) line: 3021	
	Man11_4d6$4(Component).<init>(String, IModel<?>) line: 698	
	Man11_4d6$4(MarkupContainer).<init>(String, IModel<?>) line: 120	
	Man11_4d6$4(WebMarkupContainer).<init>(String, IModel<?>) line: 52	
	Man11_4d6$4(LabeledWebMarkupContainer).<init>(String, IModel<?>) line: 70	
	Man11_4d6$4(FormComponent<T>).<init>(String, IModel<T>) line: 477	
	Man11_4d6$4(Button).<init>(String, IModel<String>) line: 86	
	Man11_4d6$4.<init>(Man11_4d6, String, IModel) line: 85	
	Man11_4d6.<init>(PageParameters) line: 85	
...

/ Bij een form component zonder eigen model wordt setModelImpl later called, in onBeforeRender	,

	Man11_4d6$2(Component).setModelImpl(IModel<?>) line: 3021	
model	CompoundPropertyModel$AttachedCompoundPropertyModel<C>  (id=4804)	

	Man11_4d6$2(Component).getDefaultModel() line: 1598	
	Man11_4d6$2(AbstractTextComponent<T>).resolveType() line: 152	
	Man11_4d6$2(AbstractTextComponent<T>).onBeforeRender() line: 142	
	Man11_4d6$2(Component).internalBeforeRender() line: 949	
	Man11_4d6$2(Component).beforeRender() line: 1017	
	Man11_4d6(MarkupContainer).onBeforeRenderChildren() line: 1712	
	Man11_4d6(Component).onBeforeRender() line: 3869	
	Man11_4d6(Page).onBeforeRender() line: 801	
	Man11_4d6(Component).internalBeforeRender() line: 949	
	Man11_4d6(Component).beforeRender() line: 1017	
	Man11_4d6(Component).internalPrepareForRender(boolean) line: 2207	
	Man11_4d6(Page).internalPrepareForRender(boolean) line: 242	
	Man11_4d6(Component).render() line: 2296	
	Man11_4d6(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 837	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
	ApplicationFilterChain.internalDoFilter(ServletRequest, ServletResponse) line: 241	
	ApplicationFilterChain.doFilter(ServletRequest, ServletResponse) line: 208	
	StandardWrapperValve.invoke(Request, Response) line: 220	
	StandardContextValve.invoke(Request, Response) line: 122	
	NonLoginAuthenticator(AuthenticatorBase).invoke(Request, Response) line: 503	
	StandardHostValve.invoke(Request, Response) line: 170	
	ErrorReportValve.invoke(Request, Response) line: 103	
	AccessLogValve.invoke(Request, Response) line: 950	
	StandardEngineValve.invoke(Request, Response) line: 116	
	CoyoteAdapter.service(Request, Response) line: 421	
	Http11Processor(AbstractHttp11Processor<S>).process(SocketWrapper<S>) line: 1070	
	Http11Protocol$Http11ConnectionHandler(AbstractProtocol$AbstractConnectionHandler<S,P>).process(SocketWrapper<S>, SocketStatus) line: 611	
	JIoEndpoint$SocketProcessor.run() line: 316	
	ThreadPoolExecutor(ThreadPoolExecutor).runWorker(ThreadPoolExecutor$Worker) line: 1145	
	ThreadPoolExecutor$Worker.run() line: 615	
	TaskThread$WrappingRunnable.run() line: 61	
	TaskThread(Thread).run() line: 745	

/ dit gaan we beter bekijken	,

Man11_4d6(Component).render() line: 2296	
this	Man11_4d6  (id=3952)	
->			internalPrepareForRender(true);
...
/s
Man11_4d6(Component).onBeforeRender() line: 3869	
this	Man11_4d6  (id=3952)	
		onBeforeRenderChildren();
/s
Man11_4d6(MarkupContainer).onBeforeRenderChildren() line: 1712	
this	Man11_4d6  (id=3952)	
			for (final Component child : children)
					child.beforeRender();
/s
Man11_4d6$2(Component).beforeRender() line: 1017	
this	Man11_4d6$2  (id=3989)	
[TextField [Component id = f]]
			internalBeforeRender();
...
/s
Man11_4d6$2(AbstractTextComponent<T>).onBeforeRender() line: 142	
		super.onBeforeRender();
		resolveType();
/s
Man11_4d6$2(AbstractTextComponent<T>).resolveType() line: 152	
			Class<?> type = getModelType(getDefaultModel());
/s
Man11_4d6$2(Component).getDefaultModel() line: 1598	
		IModel<?> model = getModelImpl();
null
		if (model == null)
		{
			// give subclass a chance to lazy-init model
			model = initModel();
/s
Man11_4d6$2(Component).initModel() line: 3795	
		for (Component current = getParent(); current != null; current = current.getParent())
		{
			// Get model
			// Don't call the getModel() that could initialize many in between
			// completely useless models.
			// IModel model = current.getDefaultModel();
			IModel<?> model = current.getModelImpl();
model	CompoundPropertyModel<T>  (id=4061)	

			if (model instanceof IComponentInheritedModel)
			{
				// return the shared inherited
				foundModel = ((IComponentInheritedModel<?>)model).wrapOnInheritance(this);
/s
CompoundPropertyModel<T>.wrapOnInheritance(Component) line: 81	
		return new AttachedCompoundPropertyModel<C>(component);
/s
CompoundPropertyModel$AttachedCompoundPropertyModel<C>.<init>(CompoundPropertyModel, Component) line: 123	
			super(CompoundPropertyModel.this);
...
/s
CompoundPropertyModel$AttachedCompoundPropertyModel<C>(ChainingModel<T>).<init>(Object) line: 42	
		target = modelObject;
modelObject	CompoundPropertyModel<T>  (id=4061)	
/t
CompoundPropertyModel$AttachedCompoundPropertyModel<C>.<init>(CompoundPropertyModel, Component) line: 123	
			super(CompoundPropertyModel.this);
/d
			this.owner = owner;
owner	Man11_4d6$2  (id=4060)	
/t
Man11_4d6$2(Component).initModel() line: 3795	
				foundModel = ((IComponentInheritedModel<?>)model).wrapOnInheritance(this);
/d
foundModel	CompoundPropertyModel$AttachedCompoundPropertyModel<C>  (id=4063)	
/t
Man11_4d6$2(Component).getDefaultModel() line: 1598	
			model = initModel();
/d
model	CompoundPropertyModel$AttachedCompoundPropertyModel<C>  (id=4063)	
	owner	Man11_4d6$2  (id=4060)	
	target	CompoundPropertyModel<T>  (id=4061)	

			setModelImpl(model);
/t
Man11_4d6$2(AbstractTextComponent<T>).resolveType() line: 152	
			Class<?> type = getModelType(getDefaultModel());
/s
Man11_4d6$2(AbstractTextComponent<T>).getModelType(IModel<?>) line: 165	
this	Man11_4d6$2  (id=4060)	
			Class<?> objectClass = ((IObjectClassAwareModel<?>)model).getObjectClass();
/s
CompoundPropertyModel$AttachedCompoundPropertyModel<C>(AbstractPropertyModel<T>).getObjectClass() line: 143	
		final String expression = propertyExpression();
"f"
		final Object target = getInnermostModelOrObject();
/s
CompoundPropertyModel$AttachedCompoundPropertyModel<C>(AbstractPropertyModel<T>).getInnermostModelOrObject() line: 261	
this	CompoundPropertyModel$AttachedCompoundPropertyModel<C>  (id=4063)	
		Object object = getTarget();
object	CompoundPropertyModel<T>  (id=4061)	
		while (object instanceof IModel)
		{
			Object tmp = ((IModel<?>)object).getObject();
tmp	Man11_4d6$Data  (id=4065)	
			object = tmp;
/ volgende	,
		while (object instanceof IModel)
/ NEE
		return object;
/t
CompoundPropertyModel$AttachedCompoundPropertyModel<C>(AbstractPropertyModel<T>).getObjectClass() line: 145	
		final Object target = getInnermostModelOrObject();
/d
target	Man11_4d6$Data  (id=4065)	
				return (Class<T>)PropertyResolver.getPropertyClass(expression, target);
expression="f"

/t
Man11_4d6$2(AbstractTextComponent<T>).resolveType() line: 153	
			Class<?> type = getModelType(getDefaultModel());
/d
type	Class<T> (java.lang.String) (id=3290)	
			setType(type);
/s
		typeName = type == null ? null : type.getName();
this	Man11_4d6$2  (id=4060)	
	typeName	"java.lang.String" (id=4105)	

/t
Man11_4d6(MarkupContainer).onBeforeRenderChildren() line: 1712	
			for (final Component child : children)
			{
				// Get next child
				// Call begin request on the child
				// We need to check whether the child's wasn't removed from the
				// component in the meanwhile (e.g. from another's child
				// onBeforeRender)
				if (child.getParent() == this)
				{
					child.beforeRender();
/d
/ volgende	,
			for (final Component child : children)
					child.beforeRender();
child	Man11_4d6$3  (id=4129)	
[DropDownChoice [Component id = d]]

/ 7	. 

/ WICKET ID

/ Waar wordt de id gen ?

Man11_4d6$3(Component).onComponentTag(ComponentTag) line: 3889	
			tag.putInternal(MARKUP_ID_ATTR_NAME, getMarkupId());
/s
Man11_4d6$3(Component).getMarkupId(boolean) line: 1516	
		IMarkupIdGenerator markupIdGenerator = getApplication().getMarkupSettings().getMarkupIdGenerator();
		String markupId = markupIdGenerator.generateMarkupId(this, createIfDoesNotExist);



/ 7	. 


/ Einde DEBUG WICKET MODEL COMPOUND

/ WICKET SERIALIZE

/ 7	. 

/ we maken Man11_4d7	, een kleinere Man11_4d6	,

/ we click op een link	,

	DefaultPageStore(AbstractPageStore).deserializePage(byte[]) line: 150	
		return (IManageablePage) pageSerializer.deserialize(data);

	DefaultPageStore(AbstractCachingPageStore<P>).getPage(String, int) line: 67	
			return deserializePage(data);

	PageStoreManager$SessionEntry.getPage(int) line: 203	
			return getPageStore().getPage(sessionId, id);

	PageStoreManager$PersistentRequestAdapter.getPage(int) line: 357	
				return entry.getPage(id);

	PageStoreManager(AbstractPageManager).getPage(int) line: 82	
		IManageablePage page = getRequestAdapter().getPage(id);

	PageAccessSynchronizer$2(PageManagerDecorator).getPage(int) line: 50	
		return delegate.getPage(id);

	PageAccessSynchronizer$2.getPage(int) line: 246	
					page = super.getPage(pageId);

	DefaultMapperContext.getPageInstance(int) line: 113	
		IManageablePage manageablePage = Session.get().getPageManager().getPage(pageId);

	PageAndComponentProvider(PageProvider).getStoredPage(int) line: 296	
		IRequestablePage storedPageInstance = getPageSource().getPageInstance(pageId);

	PageAndComponentProvider(PageProvider).resolvePageInstance(Integer, Class<IRequestablePage>, PageParameters, Integer) line: 261	
			page = getStoredPage(pageId);

	PageAndComponentProvider(PageProvider).getPageInstance() line: 166	
			resolvePageInstance(pageId, pageClass, pageParameters, renderCount);

	ListenerInterfaceRequestHandler.getPage() line: 96	
		return pageComponentProvider.getPageInstance();

	ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 157	
		final IRequestablePage page = getPage();

	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 837	
				handler.respond(RequestCycle.this);

	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
			respond(handler);

	RequestCycle.execute(IRequestHandler) line: 265	
			requestHandlerExecutor.execute(handler);

	RequestCycle.processRequest() line: 222	
				execute(handler);

	RequestCycle.processRequestAndDetach() line: 293	
			result = processRequest();

	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
		if (!requestCycle.processRequestAndDetach())

	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
				res = processRequestCycle(requestCycle, webResponse, httpServletRequest,
					httpServletResponse, chain);

	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
		processRequest(request, response, chain);

	ApplicationFilterChain.internalDoFilter(ServletRequest, ServletResponse) line: 241	
	ApplicationFilterChain.doFilter(ServletRequest, ServletResponse) line: 208	
	StandardWrapperValve.invoke(Request, Response) line: 220	
	StandardContextValve.invoke(Request, Response) line: 122	
	NonLoginAuthenticator(AuthenticatorBase).invoke(Request, Response) line: 503	
	StandardHostValve.invoke(Request, Response) line: 170	
	ErrorReportValve.invoke(Request, Response) line: 103	
	AccessLogValve.invoke(Request, Response) line: 950	
	StandardEngineValve.invoke(Request, Response) line: 116	
	CoyoteAdapter.service(Request, Response) line: 421	
	Http11Processor(AbstractHttp11Processor<S>).process(SocketWrapper<S>) line: 1070	
	Http11Protocol$Http11ConnectionHandler(AbstractProtocol$AbstractConnectionHandler<S,P>).process(SocketWrapper<S>, SocketStatus) line: 611	
	JIoEndpoint$SocketProcessor.run() line: 314	
	ThreadPoolExecutor(ThreadPoolExecutor).runWorker(ThreadPoolExecutor$Worker) line: 1145	
	ThreadPoolExecutor$Worker.run() line: 615	
	TaskThread$WrappingRunnable.run() line: 61	
	TaskThread(Thread).run() line: 745	

/ we zijn dus in	,
DefaultPageStore(AbstractPageStore).deserializePage(byte[]) line: 152	
		return (IManageablePage) pageSerializer.deserialize(data);
/ data zijn alle bytes	,
/s
JavaSerializer.deserialize(byte[]) line: 104	
			ois = newObjectInputStream(in);
				String applicationName = (String)ois.readObject();
				return ois.readObject();
...
/t
PageStoreManager(AbstractPageManager).getPage(int) line: 85	
		IManageablePage page = getRequestAdapter().getPage(id);
/d
...
/t
ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 184	
		final IRequestablePage page = getPage();
/d
			((Page)page).internalInitialize();
...
/t
		IModel<String>model3=new Model<String>("Link");
		Link link3=new Link<String>("link3",model3) {
			@Override
			public void onClick() {
				Data data=new Data();
				data.setF("New2");
->				((IModel<Data>)getParent().getDefaultModel()).setObject(data);

/ Inderdaad , hier hadden we clicked	,
/ TODO
/s
Man11_4d7(Component).getDefaultModel() line: 1592	

/ Hierna volgt weer render, serialize	,

/ 7	.

/ als we click op een link,	 dan weer	,

	PageAndComponentProvider(PageProvider).resolvePageInstance(Integer, Class<IRequestablePage>, PageParameters, Integer) line: 261	
			page = getStoredPage(pageId);

	PageAndComponentProvider(PageProvider).getPageInstance() line: 166	
			resolvePageInstance(pageId, pageClass, pageParameters, renderCount);

	ListenerInterfaceRequestHandler.getPage() line: 96	
		return pageComponentProvider.getPageInstance();

	ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 157	
		final IRequestablePage page = getPage();

	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 837	
		final IRequestablePage page = getPage();

	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
			respond(handler);

	RequestCycle.execute(IRequestHandler) line: 265	
			requestHandlerExecutor.execute(handler);

	RequestCycle.processRequest() line: 222	
				execute(handler);

	RequestCycle.processRequestAndDetach() line: 293	
			result = processRequest();

	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
		if (!requestCycle.processRequestAndDetach())

	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
				res = processRequestCycle(requestCycle, webResponse, httpServletRequest,
					httpServletResponse, chain);

	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
		processRequest(request, response, chain);

	ApplicationFilterChain.internalDoFilter(ServletRequest, ServletResponse) line: 241	
	ApplicationFilterChain.doFilter(ServletRequest, ServletResponse) line: 208	
	StandardWrapperValve.invoke(Request, Response) line: 220	
	StandardContextValve.invoke(Request, Response) line: 122	
	NonLoginAuthenticator(AuthenticatorBase).invoke(Request, Response) line: 503	
	StandardHostValve.invoke(Request, Response) line: 170	
	ErrorReportValve.invoke(Request, Response) line: 103	
	AccessLogValve.invoke(Request, Response) line: 950	
	StandardEngineValve.invoke(Request, Response) line: 116	
	CoyoteAdapter.service(Request, Response) line: 421	
	Http11Processor(AbstractHttp11Processor<S>).process(SocketWrapper<S>) line: 1070	
	Http11Protocol$Http11ConnectionHandler(AbstractProtocol$AbstractConnectionHandler<S,P>).process(SocketWrapper<S>, SocketStatus) line: 611	
	JIoEndpoint$SocketProcessor.run() line: 316	
	ThreadPoolExecutor(ThreadPoolExecutor).runWorker(ThreadPoolExecutor$Worker) line: 1145	
	ThreadPoolExecutor$Worker.run() line: 615	
	TaskThread$WrappingRunnable.run() line: 61	
	TaskThread(Thread).run() line: 745	












/ Einde WICKET SERIALIZE


/ DEBUG WICKET RENDER  

/ Verander deze notes	,
/TODO
/ See BASIC RENDER FUNCTION	,

/ we stop in 	,
Man11_4d3(Component).render() line: 2288	
				internalPrepareForRender(true);
/s
Man11_4d3(Page).internalPrepareForRender(boolean) line: 242	
		super.internalPrepareForRender(setRenderingFlag);
/s
Man11_4d3(Component).internalPrepareForRender(boolean) line: 2207	
		beforeRender();
/s
Man11_4d3(Component).beforeRender() line: 982	
		else
		{
			internalBeforeRender();
/s
Man11_4d3(Component).internalBeforeRender() line: 940	
/ this=Man11_4d3
			onBeforeRender();
/s
Man11_4d3(Page).onBeforeRender() line: 801	
		super.onBeforeRender();
/s
Man11_4d3(Component).onBeforeRender() line: 3868	
		onBeforeRenderChildren();
/s
Man11_4d3(MarkupContainer).onBeforeRenderChildren() line: 1695	
		for (final Component child : children)
			{
				// Get next child
				// Call begin request on the child
				// We need to check whether the child's wasn't removed from the
				// component in the meanwhile (e.g. from another's child
				// onBeforeRender)
				if (child.getParent() == this)
				{
					child.beforeRender();
/s
Man11_4d3$1(Component).beforeRender() line: 982	

/ Hier waren we net ook , maar this =Man11_4d3 	toen	,

		else
		{
			internalBeforeRender();
/s
Man11_4d3$1(Component).internalBeforeRender() line: 949	
			onBeforeRender();
/s
Man11_4d3$1.onBeforeRender() line: 48	

/ onze eigen fct	,
			@Override
			protected void onBeforeRender() {
				super.onBeforeRender();
/s
Man11_4d3$1(Component).onBeforeRender() line: 3868	
		onBeforeRenderChildren();
/ Doet NIETS	,

/ volgende child	,
/ Man11_4d3$2	, 'n TextField	,
			@Override protected void onBeforeRender() {
				super.onBeforeRender();
			}
/s
Man11_4d3$2(AbstractTextComponent<T>).onBeforeRender() line: 142	
	protected void onBeforeRender()
	{
		super.onBeforeRender();
/d
/ WH NIETS
		resolveType();
/s
Man11_4d3$2(AbstractTextComponent<T>).resolveType() line: 152	
			Class<?> type = getModelType(getDefaultModel());
/s
Man11_4d3$2(Component).getDefaultModel() line: 1592	
		IModel<?> model = getModelImpl();
/s
			return (IModel<?>)data_get(0);
/s
			return data;
/t
/s
Man11_4d3$2(AbstractTextComponent<T>).getModelType(IModel<?>) line: 177	
		else
		{
			return null;
/t
Man11_4d3$2(AbstractTextComponent<T>).resolveType() line: 153	
			Class<?> type = getModelType(getDefaultModel());
/d
			setType(type);
/s
	/**
	 * Sets the type that will be used when updating the model for this component. If no type is
	 * specified String type is assumed.
	 * 
	 * @param type
	 * @return this for chaining
	 */
	public FormComponent<T> setType(Class<?> type)
	{
		typeName = type == null ? null : type.getName();
null

\t
Man11_4d3$2(Component).internalBeforeRender() line: 950	
			onBeforeRender();
/d
/ Beide onze eigen onBeforeRender fcts zijn called	, van de label en textfield	,

/t
Man11_4d3(Component).render() line: 2300	
				internalPrepareForRender(true);
/d
			// Do the render
			internalRender();
/s
Man11_4d3(Component).internalRender() line: 2337	
		IMarkupFragment markup = getMarkup();
/s
Man11_4d3(Component).getMarkup() line: 739	

		// No parent, than check associated markup files
		if (parent == null)
/ JA
		{
			// Must be a MarkupContainer to have associated markup file
			if (this instanceof MarkupContainer)
/ JA
			{
				MarkupContainer container = (MarkupContainer)this;
				Markup associatedMarkup = container.getAssociatedMarkup();
/s
/ via Application.get	,
MarkupFactory.getMarkup(MarkupContainer, boolean) line: 194	
		return getMarkup(container, container.getClass(), enforceReload);
/ TODO

/t
				Markup associatedMarkup = container.getAssociatedMarkup();
/ toString():

file:/home/eric/Devel/Java/Tomcat/apache-tomcat-7.0.57/webapps/wicket-book/WEB-INF/classes/my/test/own/wicket_book/Man11_4d3.html
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>


<h1 wicket:id="label"></h1>
<input type="text" wicket:id="field">

</body>
</html>

/ In Variables:	

this	Man11_4d3  (id=27200)	
markup	Markup  (id=27227)	
	markupElements	Collections$UnmodifiableRandomAccessList<E>  (id=27228)	
	markupResourceStream	MarkupResourceStream  (id=27229)	
		baseMarkup	null	
		cacheKey	"my.test.own.wicket_book.Man11_4d3_en_US.html" (id=27233)	
		containerInfo	ContainerInfo  (id=27235)	
		doctype	"html" (id=27237)	
		encoding	null	
		markupClassName	"my.test.own.wicket_book.Man11_4d3" (id=27240)	

		resourceStream	UrlResourceStream  (id=27242)	
file:/home/eric/Devel/Java/Tomcat/apache-tomcat-7.0.57/webapps/wicket-book/WEB-INF/classes/my/test/own/wicket_book/Man11_4d3.html

		wicketId	"wicket:id" (id=27244)	
		wicketNamespace	"wicket" (id=27246)	

/t
Man11_4d3(Component).internalRender() line: 2344	
/ Dit is de fct na internalPrepareForRender(true) in de basis fct render	,

		IMarkupFragment markup = getMarkup();
/d
		MarkupElement elem = markup.get(0);
<!DOCTYPE html>
<html>
		if (elem instanceof ComponentTag)
				onRender();
/s
Man11_4d3(WebPage).onRender() line: 136	
		configureResponse((WebResponse)RequestCycle.get().getResponse());
/s
Man11_4d3(WebPage).configureResponse(WebResponse) line: 167	
			contentType = getMarkupType().getMimeType() + "; charset=" + encoding;
contentType	"text/html; charset=UTF-8" (id=27265)	
		response.setContentType(contentType);

/t
Man11_4d3(WebPage).onRender() line: 142	
		// Configure the response such as headers etc.
		configureResponse((WebResponse)RequestCycle.get().getResponse());
/d
		// The rules if and when to insert an xml decl in the response are a bit tricky. Allow the
		// user to replace the default per page and per application.
		renderXmlDecl();
/ TODO

		super.onRender();
/s
Man11_4d3(Page).onRender() line: 879	
		// Loop through the markup in this container
		MarkupStream markupStream = new MarkupStream(getMarkup());
		renderAll(markupStream, null);
/s
Man11_4d3(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1588	
			// Remember where we are
			final int index = markupStream.getCurrentIndex();
0
			// Render the markup element
			boolean rawMarkup = renderNext(markupStream);
/s
Man11_4d3(MarkupContainer).renderNext(MarkupStream) line: 1379	
		// Get the current markup element
		final MarkupElement element = markupStream.get();
<!DOCTYPE html>
<html>
		// If it's a tag like <wicket..> or <span wicket:id="..." >
		if ((element instanceof ComponentTag) && !markupStream.atCloseTag())
/ NEE
		else
		{
			// Render as raw markup
			getResponse().write(element.toCharSequence());

/t
Man11_4d3(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1605	
			// Render the markup element
			boolean rawMarkup = renderNext(markupStream);
/d
			markupStream.setCurrentIndex(index);

			if (rawMarkup)
			{
				markupStream.next();

/ volgende	,
		while (markupStream.hasMore())
			// Remember where we are
			final int index = markupStream.getCurrentIndex();
1
			// Render the markup element
			boolean rawMarkup = renderNext(markupStream);
/s
Man11_4d3(MarkupContainer).renderNext(MarkupStream) line: 1376	
		// Get the current markup element
		final MarkupElement element = markupStream.get();
<head>
		// If it's a tag like <wicket..> or <span wicket:id="..." >
		if ((element instanceof ComponentTag) && !markupStream.atCloseTag())
/ JA
				component = ComponentResolvers.resolve(this, markupStream, tag, null);
[HtmlHeaderContainer [Component id = _header_0]]
				if ((component != null) && (component.getParent() == null))
				{
					autoAdd(component, markupStream);
/s
Man11_4d3(MarkupContainer).autoAdd(Component, MarkupStream) line: 249	
			component.setMarkup(markupStream.getMarkupFragment());
/ component=[HtmlHeaderContainer [Component id = _header_0]]
/ markupStream.getMarkupFragment()=
file:/home/eric/Devel/Java/Tomcat/apache-tomcat-7.0.57/webapps/wicket-book/WEB-INF/classes/my/test/own/wicket_book/Man11_4d3.html
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>

		add(component);
/s
Man11_4d3(MarkupContainer).add(Component...) line: 134	
			// Add to map
			if (put(child) != null)
/ TODO

/t
Man11_4d3(MarkupContainer).renderNext(MarkupStream) line: 1405	
				component.setMarkup(markupStream.getMarkupFragment());
/d
				component.render();
/ component=[HtmlHeaderContainer [Component id = _header_0]]
...
/ TODO

/t
Man11_4d3(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1605	
			// Render the markup element
			boolean rawMarkup = renderNext(markupStream);
/d
			markupStream.setCurrentIndex(index);
1

			if (rawMarkup)
/ NEE
			else if (!markupStream.getTag().isClose())
			{
				markupStream.skipComponent();

/ volgende,	
		while (markupStream.hasMore())
		{
			// Remember where we are
			final int index = markupStream.getCurrentIndex();
4
			boolean rawMarkup = renderNext(markupStream);
/s
Man11_4d3(MarkupContainer).renderNext(MarkupStream) line: 1376	
		final MarkupElement element = markupStream.get();
element	RawMarkup  (id=27329)	
<body>

		// If it's a tag like <wicket..> or <span wicket:id="..." >
		if ((element instanceof ComponentTag) && !markupStream.atCloseTag())
/ NEE
		else
		{
			// Render as raw markup
			getResponse().write(element.toCharSequence());

/t
Man11_4d3(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1588	
			boolean rawMarkup = renderNext(markupStream);
/d
			markupStream.setCurrentIndex(index);
4
			if (rawMarkup)
/ JA
				markupStream.next();

/ volgende	,
		while (markupStream.hasMore())
			final int index = markupStream.getCurrentIndex();
5
			boolean rawMarkup = renderNext(markupStream);
/s
Man11_4d3(MarkupContainer).renderNext(MarkupStream) line: 1376	
		final MarkupElement element = markupStream.get();
element	ComponentTag  (id=27331)	
<h1 wicket:id="label">

			// Get component id
			final String id = tag.getId();
/ "label"
			// Get the component for the id from the given container
			Component component = get(id);
component	Man11_4d3$1  (id=27213)	
[Component id = label]

				component.render();
/s
Man11_4d3$1(Component).render() line: 2288	
			// Invoke prepareForRender only if this is the root component to be rendered
			MarkupContainer parent = getParent();
parent	Man11_4d3  (id=27200)	
[Page class = my.test.own.wicket_book.Man11_4d3, id = 0, render count = 1]
			if ((parent == null) || (parent.getFlag(FLAG_RENDERING) == false) || isAuto())
/ NEE

			// Do the render
			internalRender();
/s
Man11_4d3$1(Component).internalRender() line: 2337	
		// Make sure there is a markup available for the Component
		IMarkupFragment markup = getMarkup();
markup	MarkupFragment  (id=27346)	
file:/home/eric/Devel/Java/Tomcat/apache-tomcat-7.0.57/webapps/wicket-book/WEB-INF/classes/my/test/own/wicket_book/Man11_4d3.html
<h1 wicket:id="label"></h1>

				onRender();
/s
Man11_4d3$1.onRender() line: 51	
			@Override protected void onRender() {
				super.onRender();
/ onze eigen fct

//////////////////////////////////////////
/ render label	,

/s
Man11_4d3$1(WebComponent).onRender() line: 56	
		internalRenderComponent();
/s
///////////////////////////////////////////////
/ BASIC RENDER FUNCTION 
/ wordt called vrijwel direct na eigen @Override protected void onRender	,
///////////////////////////////////////////////
	/**
	 * THIS METHOD IS NOT PART OF THE WICKET PUBLIC API. DO NOT USE IT.
	 * <p>
	 * Renders the component at the current position in the given markup stream. The method
	 * onComponentTag() is called to allow the component to mutate the start tag. The method
	 * onComponentTagBody() is then called to permit the component to render its body.
	 */
Man11_4d3$1(Component).internalRenderComponent() line: 2500	

		// Get mutable copy of next tag
		final ComponentTag openTag = markupStream.getTag();
<h1 wicket:id="label">
		final ComponentTag tag = openTag.mutable();

		// Call any tag handler
		onComponentTag(tag);
////////////////////////////////////////////////////////////
/ Link, Button , hebben elk eigen onComponentTag fct	,



/s
Man11_4d3$1(Label).onComponentTag(ComponentTag) line: 124	
		super.onComponentTag(tag);
/s
/////////////////////////////////////////////
/ berekent id uit wicket:id	,
//////////////////////////////////////////
Man11_4d3$1(Component).onComponentTag(ComponentTag) line: 3889	
			tag.putInternal(MARKUP_ID_ATTR_NAME, getMarkupId());
/s
		return getMarkupId(true);
/s
Man11_4d3$1(Component).getMarkupId(boolean) line: 1518	
		IMarkupIdGenerator markupIdGenerator = getApplication().getMarkupSettings().getMarkupIdGenerator();
		String markupId = markupIdGenerator.generateMarkupId(this, createIfDoesNotExist);
		return markupId;
/ "label1"

/t
Man11_4d3$1(Component).onComponentTag(ComponentTag) line: 3892	
			tag.putInternal(MARKUP_ID_ATTR_NAME, getMarkupId());
/d

///////////////////////////////////////////
/ label: calls model for render	,
 
Man11_4d3$1(Component).internalRenderComponent() line: 2531	
				getMarkupSourcingStrategy().onComponentTagBody(this, markupStream, tag);
...
/s
		replaceComponentTagBody(markupStream, openTag, getDefaultModelObjectAsString());
///////////////////////////////////

/t
Man11_4d3$1(Component).internalRenderComponent() line: 2531	
		onComponentTag(tag);
/d
			// Render open tag
			if (getRenderBodyOnly())
/ NEE
			else
			{
				renderComponentTag(tag);
/ Doet NIETS in dit geval	,
			markupStream.next();

			// Render the body only if open-body-close. Do not render if open-close.
			if (tag.isOpen())
			{
				// Render the body. The default strategy will simply call the component's
				// onComponentTagBody() implementation.
				getMarkupSourcingStrategy().onComponentTagBody(this, markupStream, tag);
/s
DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
		component.onComponentTagBody(markupStream, openTag);
/s
Man11_4d3$1(Label).onComponentTagBody(MarkupStream, ComponentTag) line: 115	
		replaceComponentTagBody(markupStream, openTag, getDefaultModelObjectAsString());
/s
Man11_4d3$1(Component).getDefaultModelObjectAsString() line: 1646	
		return getDefaultModelObjectAsString(getDefaultModelObject());
/s
Man11_4d3$1(Component).getDefaultModelObject() line: 1618	
		final IModel<?> model = getDefaultModel();
/s
		IModel<?> model = getModelImpl();
/s
			return (IModel<?>)data_get(0);

/t
Man11_4d3$1(Component).getDefaultModelObjectAsString(Object) line: 1666	
/=
	public final String getDefaultModelObjectAsString(final Object modelObject)
modelObject	"Initial Label" (id=25788)	

			final Class<?> objectClass = modelObject.getClass();

			final IConverter converter = getConverter(objectClass);
/s
Man11_4d3$1(Component).getConverter(Class<C>) line: 1366	
		return getApplication().getConverterLocator().getConverter(type);

[null,
 null,
 null,
 java.util.Calendar=org.apache.wicket.util.convert.converter.CalendarConverter@63904e12,
 null,
 java.lang.Boolean=org.apache.wicket.util.convert.converter.BooleanConverter@16f5b2cf,
 int=org.apache.wicket.util.convert.converter.IntegerConverter@5cae3fcf,
 null,
 java.sql.Timestamp=org.apache.wicket.util.convert.converter.SqlTimestampConverter@33df5e92,
 java.lang.Integer=org.apache.wicket.util.convert.converter.IntegerConverter@5cae3fcf,
 null,
 java.util.Date=org.apache.wicket.util.convert.converter.DateConverter@db9ddd9,
 long=org.apache.wicket.util.convert.converter.LongConverter@2593d899,
 float=org.apache.wicket.util.convert.converter.FloatConverter@d713815,
 null,
 null,
 short=org.apache.wicket.util.convert.converter.ShortConverter@418f198,
 null,
 java.sql.Date=org.apache.wicket.util.convert.converter.SqlDateConverter@19d3442,
 java.math.BigInteger=org.apache.wicket.util.convert.converter.BigIntegerConverter@77d1d9e1,
 java.lang.Double=org.apache.wicket.util.convert.converter.DoubleConverter@7237803b,
 byte=org.apache.wicket.util.convert.converter.ByteConverter@19c3dc12,
 null,
 null,
 java.lang.Character=org.apache.wicket.util.convert.converter.CharacterConverter@9a52ef5,
 java.sql.Time=org.apache.wicket.util.convert.converter.SqlTimeConverter@3baddbc5,
 boolean=org.apache.wicket.util.convert.converter.BooleanConverter@16f5b2cf,
 java.lang.Byte=org.apache.wicket.util.convert.converter.ByteConverter@19c3dc12,
 null,
 null,
 null,
 null]

		if (converter == null)
/ JA, voor String	,
		{
			return new DefaultConverter<C>(type);

/t
Man11_4d3$1(Label).onComponentTagBody(MarkupStream, ComponentTag) line: 115	
		replaceComponentTagBody(markupStream, openTag, getDefaultModelObjectAsString());
/s
Man11_4d3$1(Component).replaceComponentTagBody(MarkupStream, ComponentTag, CharSequence) line: 4046	
		if (tag.isOpen())
/ JA
		{
			// Get what tag was in the markup; not what the user it might
			// have changed it to.
			markupOpenTag = markupStream.getPreviousTag();
<h1 wicket:id="label">

			// If it was an open tag in the markup as well, than ...
			if (markupOpenTag.isOpen())
/ JA
			{
				// skip any raw markup in the body
				markupStream.skipRawMarkup();


		if (body != null)
		{
			// Write the new body
			getResponse().write(body);
body	"Initial Label" (id=27467)	

/t
Man11_4d3$1(Component).internalRenderComponent() line: 2562	
				getMarkupSourcingStrategy().onComponentTagBody(this, markupStream, tag);
/d
				// Render close tag
				if (openTag.isOpen())
				{
					renderClosingComponentTag(markupStream, tag, getRenderBodyOnly());
/ tag=<h1 wicket:id="label" id="label1">

/t
			@Override protected void onRender() {
				super.onRender();
/ d
/ onze fct	,

/ volgende	,

////////////////////////////////////////////
/ render textfield 	,

	field=new TextField<String>("field"){
			@Override protected void onRender() {
				super.onRender();
/s
Man11_4d3$2(MarkupContainer).onRender() line: 1540	
		internalRenderComponent();
/s
Man11_4d3$2(Component).internalRenderComponent() line: 2506	
		final IMarkupFragment markup = getMarkup();
<input type="text" wicket:id="field">

		onComponentTag(tag);

//////////////////////
/ Hoe label	?

/s
Man11_4d3$2(TextField<T>).onComponentTag(ComponentTag) line: 108	
		tag.put("value", getValue());
/s
Man11_4d3$2(FormComponent<T>).getValue() line: 877	
		if (NO_RAW_INPUT.equals(rawInput))
		{
			return getModelValue();
/s
Man11_4d3$2(FormComponent<T>).getModelValue() line: 1293	
		return getDefaultModelObjectAsString();
/s
Man11_4d3$2(Component).getDefaultModelObjectAsString() line: 1646	
		return getDefaultModelObjectAsString(getDefaultModelObject());
/s
Man11_4d3$2(Component).getDefaultModelObjectAsString(Object) line: 1666	
/=
	public final String getDefaultModelObjectAsString(final Object modelObject)
modelObject	"Initial Field" (id=25831)	

/t
Man11_4d3$2(TextField<T>).onComponentTag(ComponentTag) line: 108	
		tag.put("value", getValue());
/d

/t
Man11_4d3$2(Component).internalRenderComponent() line: 2548	
		onComponentTag(tag);
/d
				getMarkupSourcingStrategy().onComponentTagBody(this, markupStream, tag);
///////////////////////////
/ Deze doet NIETS voor textfield	,

/ 7	. 

/ We click de link	, met model update	,

/s
Man11_4d3$3(Link<T>).onLinkClicked() line: 190	
		onClick();
/s
Man11_4d3$3.onClick() line: 76	
/ onze fct	,
				model2.setObject("New Field");
/s
Model<T>.setObject(T) line: 192	
...
/ we komen in 	,
/ TODO
Man11_4d3(Page).renderPage() line: 1018	
/=
	public final void render()
	{
				internalPrepareForRender(true);
/ Calls onze onBeforeRender's	,
			// Do the render
			internalRender();
/s


/ label	,
	Model<T>.getObject() line: 178	
	Model<T>.getObject() line: 46	
	Man11_4d3$1(Component).getDefaultModelObject() line: 1618	
	Man11_4d3$1(Component).getDefaultModelObjectAsString() line: 1646	
	Man11_4d3$1(Label).onComponentTagBody(MarkupStream, ComponentTag) line: 115	
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
	Man11_4d3$1(Component).internalRenderComponent() line: 2557	
	Man11_4d3$1(WebComponent).onRender() line: 56	
	Man11_4d3$1.onRender() line: 51	
	Man11_4d3$1(Component).internalRender() line: 2372	
	Man11_4d3$1(Component).render() line: 2300	
	Man11_4d3(MarkupContainer).renderNext(MarkupStream) line: 1405	




/ Einde DEBUG WICKET RENDER  

/ WICKET FORMS

/ Lees	,
http://wicket.apache.org/guide/guide/modelsforms.html
/ over transient model & jpa	, bij	,
  public JpaLoadableModel(EntityManagerFactory entityManagerFactory, T entity) {

/ en 	,
http://stackoverflow.com/questions/5395603/wicket-changing-the-text-of-an-ajaxbutton-on-submit


/ Einde WICKET FORMS

/ WICKET COMPONENTS

/ In Man11_4c.java

			IModel<Data>model=new Model<Data>();
			ddc=new DropDownChoice<Data>("ddc",model,	list,renderer);
/ OK

/ In Man11_4d.java

			IModel<Data>model=new Model<Data>(new Data());
			setModel(model);

			IModel<String>model2=new PropertyModel<String>(model, "n");

/ In Man11_4d moeten we new Data() doen in 
			IModel<Data>model=new Model<Data>(new Data());
/ In Man11_4c hoeft dat NIET	,
/ TODO


/ Einde WICKET COMPONENTS

/ WICKET REST

/ Lees	,
http://wicket.apache.org/guide/guide/wicketstuff.html
27.6 Module wicketstuff-rest-annotations

/ Lees	,
http://stackoverflow.com/questions/18235950/use-wicket-as-a-rest-api
/ @MountPath is iets van Wicket	,




/ Einde WICKET REST

/ WICKET AJAX

/ 7	.

/ in project wicket-book	,

$ vi Ch1_3_2.java

		Link<Void>link2=new AjaxFallbackLink<Void>("link2") {
			@Override
			public void onClick(AjaxRequestTarget target) {
				counter2++;
				if(target!=null){
					target.add(label2);
					target.add(label3);
				}
				
			}
		};
		add(link2);

		IModel<Integer>model2=new PropertyModel<Integer>(this, "counter2");
		
		label2=new Label("label2",model2);
		label2.setOutputMarkupId(true);
		add(label2);
		
		label3=new Label("label3",model2);
		label3.setOutputMarkupId(true);
		add(label3);

		AjaxLink<Void>link3=new AjaxLink<Void>("link3") {
			@Override
			public void onClick(AjaxRequestTarget target) {
				counter2++;
				if(target!=null){
					target.add(label2);
					target.add(label3);
				}
				
			}
		};
		add(link3);

$ vi Ch1_3_2.html

	<a href="#" wicket:id="link2">lnk2</a>
	<h1 wicket:id="label2"></h1>
	<h1 wicket:id="label3"></h1>
	<a href="#" wicket:id="link3">lnk3</a>


/ als we click op lnk2 of op lnk3	, dan worden EN label2 EN label3 update	,

/ Let op dat we bij components die AJAX notified moeten	,
		label2.setOutputMarkupId(true);
/ want id wordt key in tbl	,
/ TODO



/ 7	.

/ Einde WICKET AJAX

/ WICKET FORMS

/ 7	. 

/ See project wicket-book	, 

$ vi Man11_3.java 

	public Man11_3(final PageParameters parameters) {
		super(parameters);

		Form<Void>form=new MyForm<Void>("form");
		add(form);
    	}	 
	private class MyForm<T > extends Form<T>{
		public MyForm(String id) {
			super(id);
		}
		@Override
		protected void onSubmit() {
			logger.info("...");
		}
	}
}
$ vi Man11_3.java 

<form wicket:id="form">
	<input type="submit" value="Go">
</form>

/ We hoeven in wicket's From GEEN submit field te def	, de onSubmit werkt al	, 
/ ook heeft deze <input> geen wicket:id	,

/ OK

/ 7	.

/ we add een FormComponent	,

$ vi Man11_3.java 

	public Man11_3(final PageParameters parameters) {
		super(parameters);

		Form<Void>form=new MyForm<>("form");
		add(form);

    } 
	

	
	
	private class MyForm<T  > extends Form<T>{
		private FormComponent<String>text;
		public MyForm(String id) {
			super(id);
			IModel<String>model=Model.of("");
			text=new TextField<String>("text",model);
			add(text);
		}
		@Override
		protected void onSubmit() {
			String s=text.getModelObject();
			logger.info("\n"+s+"\n");
		}
	}

$ vi Man11_3.java 

<form wicket:id="form">
	<input type="text" wicket:id="text">
	<input type="submit" value="Go">
</form>

/ we zien in chrome een text field en een button	,
/ OK

/ 7	.

/ See Man11_3b.java

/ We hebben Man11_3.java, Man11_3b.java	,
/ Man11_3a.java TODO

/ form heeft model, een CompoundPropertyModel	,

$ vi Man11_3b.java

	public Man11_3b(final PageParameters parameters) {
		super(parameters);

		Form<D>form=new MyForm2<>("form");
		add(form);
		
		
    	} 

	private class D implements Serializable{
		private String n;
		

		public String getN() {
			return n;
		}

		public void setN(String n) {
			this.n = n;
		}
	}

	private class MyForm2<T extends D> extends Form<D>{
		
		public MyForm2(String id) {
			super(id,new CompoundPropertyModel<D>(new D()));
			add(new TextField<T>("n"));
		}
		@Override
		protected void onSubmit() {
			D d=getModelObject();
			String n=d.getN();logger.info(n);
		}
	}

$ vi Man11_3b.html

<form wicket:id="form">
	<input type="text" wicket:id="n">
	<input type="submit" value="Go">
</form>

/ We kunnen ipv
		public MyForm2(String id) {
			super(id,new CompoundPropertyModel<D>(new D()));
/ ook	,
		public MyForm3(String id) {
			super(id);
			setModel(new CompoundPropertyModel<D>(new D()));

/ Dat kan beter zijn, als je wilt	,
			super(id);
			D d=new D();
			IModel<D>m=new CompoundPropertyModel<D>(d);
			setModel(m);


/ 7	.

/ in project wicket-book	,

$ vi Man11_3c.java

	public Man11_3c(final PageParameters parameters) {
		super(parameters);

		Form<Void>form=new MyForm<>("form");
		add(form);
		label=new Label("label",new Model<String>(""));
		add(label);

    } 
	private FormComponent<String>text;
	private Label label;
	private class MyBtn extends Button{
		public MyBtn(String id) {
			super(id);
		}
		@Override
		public void onSubmit() {
			String value=text.getModelObject();
			label.setDefaultModelObject(value);
			text.setModelObject("");
		}
	}
	private class MyForm<Void> extends Form<Void>{
		
		public MyForm(String id) {
			super(id);
			IModel<String>mt=Model.of("");
			text=new TextField<String>("text",mt);
			add(text);
			FormComponent<String>btn=new MyBtn("btn");
			add(btn);
		}
		@Override
		protected void onSubmit() {
			logger.info("\n**************************************\n");
			String s=label.getDefaultModelObjectAsString();
			logger.info("\n"+s+"\n");
			logger.info("\n**************************************\n");
		}
	}

$ vi Man11_3c.html

<form wicket:id="form">
	<input type="text" wicket:id="text">
	<input type="submit" wicket:id="btn" value="Go">
</form>
<h1 wicket:id="label"></h1>

/ we hebben nu op <input type="submit"> een wicket:id	,

/ de fct onSubmit van het form wordt ook called	, dus die van de btn en van het form worden beide called	,

/ 7	. 

/ ajax button op het form	,

/ we moeten zorgen dat de component c die we door AJAX willen veranderen	, 
/ 13	 c.setOutputMarkup(true)
/ 13	.addTarget(c) in onSubmit()	,

$ vi Man11_3d.java

	public Man11_3d(final PageParameters parameters) {
		super(parameters);

		Form<Void>form=new MyForm<>("form");
		add(form);
		label=new Label("label",new Model<String>(""));
		label.setOutputMarkupId(true);					// !
		add(label);

    } 
	
	private FormComponent<String>text;
	private Label label;
	private class MyBtn extends AjaxButton{
		public MyBtn(String id) {
			super(id);
		}
		@Override
		protected void onSubmit(AjaxRequestTarget target, Form<?> form) {
			String value=text.getModelObject();
			label.setDefaultModelObject(value);
			text.setModelObject("");
			if(target!=null){
				target.add(label);
				target.add(text);				// !  * 
			}
		}
		
	}

	private class MyForm<Void> extends Form<Void>{
		
		public MyForm(String id) {
			super(id);
			IModel<String>mt=Model.of("");
			text=new TextField<String>("text",mt);
			text.setOutputMarkupId(true);				// !
			add(text);
			FormComponent<String>btn=new MyBtn("btn");
			add(btn);
		}
	}

$ vi Man3_11d.html

<form wicket:id="form">
	<input type="text" wicket:id="text">
	<input type="submit" wicket:id="btn" value="Go">
</form>
<h1 wicket:id="label"></h1>

/ is onveranderd	,

/ 7	. 

/ dropdownchoice	,

/ we hebben Man11_4, Man11_4b	,
/ de ddc hebben zelf ook een model
/ OK


$ vi Man11_4.java

	public Man11_4b(final PageParameters parameters) {
		super(parameters);

		Form<Void>form=new MyForm<>("form");
		add(form);
		label=new Label("label",new Model<String>(""));
		label.setOutputMarkupId(true);
		add(label);
	} 

	private class D{
		private String n;
		
		public D(String n){
			setN(n);
		}
		public D() {
		}

		public String getN() {
			return n;
		}

		public void setN(String n) {
			this.n = n;
		}
	}
/ alleen nodig als ddc een propertymodel hieronder	,


	private FormComponent<String>ddc;
	private Label label;
	
	private class MyForm<Void> extends Form<Void>{
		private FormComponent<String>text;
		public MyForm(String id) {
			super(id);
			
			List<String>list=Arrays.asList("Foo Bar","Eric J.","Gee Hee");

			IModel<String>model=new PropertyModel<String>(new D(), "n");
/ of	,
			IModel<String>model=new Model<String>();

			ddc=new DropDownChoice<String>("ddc",model,	list);
			ddc.setOutputMarkupId(true);
			add(ddc);
			FormComponent<String>btn=new MyBtn("btn");
			add(btn);
		}
		
	}
 
	private class MyBtn extends AjaxButton{
		public MyBtn(String id) {
			super(id);
		}
		@Override
		protected void onSubmit(AjaxRequestTarget target, Form<?> form) {
			String value=ddc.getModelObject();
			label.setDefaultModelObject(value);
			if(target!=null){
				target.add(label);
				target.add(ddc);
			}
		}
		
	}

/ OK

/ 7	. 

/ project wicket-book

$ vi Man11_4c.java

			List<Data>list=Arrays.asList(new Data("Foo Bar"),new Data("Eric J."),new Data("Gee Hee"));
			IModel<Data>model=new Model<Data>();
			ddc=new DropDownChoice<Data>("ddc",model,	list);
			ddc.setOutputMarkupId(true);
			add(ddc);

/ we doen dus new Model<Data>()	, 
/ als we een Data inst kiezen en Go click, dan wordt deze model.setObject called met de gekozen Data inst, bijv new Data("Foo Bar")	,

/ In Man11_4b.java

			List<String>list=Arrays.asList("Foo Bar","Eric J.","Gee Hee");
			IModel<String>model=new PropertyModel<String>(new D(), "n");
			ddc=new DropDownChoice<String>("ddc",model,	list);

/ Hier zien we dat de gekozen string bijv "Foo Bar" wordt set in model's target	, dat is de new D()	, 

/ 7	. 

$ vi Main11_4c.java

			List<Data>list=Arrays.asList(new Data("Foo Bar"),new Data("Eric J."),new Data("Gee Hee"));
			IModel<Data>model=new Model<Data>();
			ddc=new DropDownChoice<Data>("ddc",model,	list);
			ddc.setOutputMarkupId(true);
			add(ddc);

/ we zien op de select in de browser NIET "Foo Bar"	, ...	, maar my.test.own.wicket_book.Man11_4c$Data@43cbf461	,

<select wicket:id="ddc" name="ddc" id="ddc3">
<option selected="selected" value="0">my.test.own.wicket_book.Man11_4c$Data@43cbf461</option>
<option value="1">my.test.own.wicket_book.Man11_4c$Data@3192f0d</option>
<option value="2">my.test.own.wicket_book.Man11_4c$Data@44a492a6</option>
</select>

/ De values zijn wel OK	,

/ Maar makkelijk te repareren	,

			List<Data>list=Arrays.asList(new Data("Foo Bar"),new Data("Eric J."),new Data("Gee Hee"));
			IModel<Data>model=new Model<Data>();
			ChoiceRenderer<Data>renderer=new ChoiceRenderer<Data>("n");
			ddc=new DropDownChoice<Data>("ddc",model,	list,renderer);

/ Ipv de index kunnen we WH ook een ander prop geven	, als Data deze zou hebben	, Data moet dan een String/int prop "id" hebben (TODO) 
			ChoiceRenderer<Data>renderer=new ChoiceRenderer<Data>("n","id");

/ 7	.

/ In Man11_4a2 hebben we een dropdownlist zonder eigen model, maar de model=compoundpropertymodel is in Main11_4a2 	,
/ We hebben geen ddc	, maar Man11_4a2 is de model	,

$ vi Man11_4a2.java

	public Man11_4a2(final PageParameters parameters) {
		super(parameters);

		Form<Man11_4a2>form=new MyForm<Void>("form");
		add(form);
		label=new Label("label",new Model<String>(""));
		label.setOutputMarkupId(true);
		add(label);


    } 
	

	private String n;
	
	public String getN() {
		return n;
	}

	public void setN(String n) {
		this.n = n;
	}
	
	private String m;
	
	public String getM() {
		return m;
	}

	public void setM(String m) {
		this.m = m;
	}


	

	private FormComponent<String>c_m;
	private Label label;
	private FormComponent<String>c_n;

	private class MyForm<Void> extends Form<Man11_4a2>{
		
		public MyForm(String id) {
			super(id);
			IModel<Man11_4a2>model=new CompoundPropertyModel<>(Man11_4a2.this);
			setModel(model);
			
			c_n=new TextField<String>("n");
			c_n.setOutputMarkupId(true);
			add(c_n);
			
			List<String>list=Arrays.asList("Foo Bar","Eric J.","Gee Hee");
			c_m=new DropDownChoice<String>("m",list);
			c_m.setOutputMarkupId(true);
			add(c_m);
			
			FormComponent<String>btn=new MyBtn("btn");
			add(btn);
		}
		
	}
	

	private class MyBtn extends AjaxButton{
		public MyBtn(String id) {
			super(id);
		}
		@Override
		protected void onSubmit(AjaxRequestTarget target, Form<?> form) {
			String n=c_n.getModelObject();
			String m=c_m.getModelObject();
...

		}
		
	}

$ vi Man11_4a2.html

<form wicket:id="form">
	<input type="text" wicket:id="n">
	<select wicket:id="m"></select>
	<input type="submit" wicket:id="btn" value="Go">
</form>
<h1 wicket:id="label"></h1>

/ OK	,

/ 7	.

/ Maar we kunnen ook makkelijk een apart object Data create	, met de properties	, en daar het compoundpropertymodel op zetten	,

$ vi Man11_4b3.java

	public Man11_4a3(final PageParameters parameters) {
		super(parameters);

		Form<Data>form=new MyForm<Void>("form");
		add(form);
		label=new Label("label",new Model<String>(""));
		label.setOutputMarkupId(true);
		add(label);


    } 
	

	private class Data{
		private String n;
		
		public String getN() {
			return n;
		}
		
		public void setN(String n) {
			this.n = n;
		}
		
		private String m;
		
		public String getM() {
			return m;
		}
		
		public void setM(String m) {
			this.m = m;
		}
	}


	

	private FormComponent<String>c_m;
	private Label label;
	private FormComponent<String>c_n;

	private class MyForm<Void> extends Form<Data>{
		
		public MyForm(String id) {
			super(id);
			IModel<Data>model=new CompoundPropertyModel<>(new Data());
			setModel(model);
			
			c_n=new TextField<String>("n");
			c_n.setOutputMarkupId(true);
			add(c_n);
			
			List<String>list=Arrays.asList("Foo Bar","Eric J.","Gee Hee");
			c_m=new DropDownChoice<String>("m",list);
			c_m.setOutputMarkupId(true);
			add(c_m);
			
			FormComponent<String>btn=new MyBtn("btn");
			add(btn);
		}
		
	}
	

	private class MyBtn extends AjaxButton{
		public MyBtn(String id) {
			super(id);
		}
		@Override
		protected void onSubmit(AjaxRequestTarget target, Form<?> form) {
			String n=c_n.getModelObject();
			String m=c_m.getModelObject();
...
		}
		
	}

$ vi Man11_4a2.html

<form wicket:id="form">
	<input type="text" wicket:id="n">
	<select wicket:id="m"></select>
	<input type="submit" wicket:id="btn" value="Go">
</form>
<h1 wicket:id="label"></h1>

/ deze html is onveranderd	,

/ OK	,

/ Einde WICKET FORMS

/ WICKET MODELS

/ 7	.

$ vi Ch5_6_2.java

	private String n;
	private IModel<String>model;
	private Label label;
	public Ch5_6_2(final PageParameters parameters) {
		super(parameters);
		
		model=new Model<String>(n);
		label=new Label("label",model);
		label.setOutputMarkupId(true);
		add(label);
		Link<String>link=new Link<String>("link") {
			@Override
			public void onClick() {

				model.setObject("Foo Bar");
/ of	,
				label.setDefaultModelObject("Foo Bar");
				
			}
		};
		add(link);

    } 

$ vi Ch5_6_2.html

	<h1 wicket:id="label"></h1>
	<a href="#"	wicket:id="link">lnk</a>

/ 7	.

/ we zagen	,
			IModel<String>model=new Model<String>();
			ddc=new DropDownChoice<String>("ddc",model,	list);

/ als we Go click wordt model.setObject called, dus wordt view->model 	,

/ 7	. 

/ Als model er niet was	, was van een label string een directe child, en moet bijv de label een db query call	, 
/ nu doet model dat, en label weet van niets	,


/ Einde WICKET MODELS

/ WICKET MODAL WINDOW

/ project wicket-book, file Man18_2	,

/ 7	. 

/ ipv 	
	add(label)
/ doen we	,
	window.setContent(label)

/ window.getContentId()=="content"
//////////////////////////////////////////////////////////
/ als we een component in het modal window willen, moeten we altijd de component id="content" geven	, 
/ maar in HTML schrijven we nooit wicket:id="content" ergens in de <div wicket:id="window">	,

/ we zien het verschil tussen de HTML van een fragment en van een panel: <wicket:fragment wicket:id="..."> heeft een wicket:id	, <wicket:panel> heeft geen wicket:id	, daarom heeft Fragment.<init> een 2de arg dat deze id is	,

/ als we het modal window visible maken verdwijnt wat bij /* staat	,

/ we zien in src code van Component 	,

       /**
         * This is useful, for example, in ajax situations where the component starts out invisible and
         * then becomes visible through an ajax update. With a placeholder tag already in the markup you
         * do not need to repaint this component's parent, instead you can repaint the component
         * directly.
/ TODO
         */
        public final Component setOutputMarkupPlaceholderTag(final boolean outputTag)


/ 7	.

ModalWindow.setContent  calls	,
	omponent.setOutputMarkupPlaceholderTag(true);
/ Dus op de label, myFragment en de myPanel worden deze method called	,
/ we zien in HTML als de modal window niet zichtbaar	,

<div wicket:id="window" id="window16" style="display:none">
	<wicket:panel xmlns:wicket="http://wicket.apache.org">
		<div wicket:id="content" id="content17">I am a modal window</div>		/*
	</wicket:panel>
</div>
<div wicket:id="window2" id="window218" style="display:none">
	<wicket:panel xmlns:wicket="http://wicket.apache.org">
		<div wicket:id="content" id="content19">					/*
			<h3 wicket:id="deedee">That's all you can say!</h3>
		</div>
	</wicket:panel>
</div>
<div wicket:id="window3" id="window31a" style="display:none">
	<wicket:panel xmlns:wicket="http://wicket.apache.org">
		<div id="content1b" style="display:none"></div>					/*
	</wicket:panel>
</div>


$ vi Man18_2.java

		final ModalWindow window=new ModalWindow("window");
		add(window);
		
		Label label=new Label(window.getContentId(),new Model<String>("I am a modal window"));
		window.setContent(label);
		
		window.setTitle("Foo Bar");
		
		AjaxLink<Void>link=new AjaxLink<Void>("link") {
			@Override
			public void onClick(AjaxRequestTarget target) {
				window.show(target);
				
			}
		};
		add(link);
		
		//////////////////////////////////////////////////////
		
		final ModalWindow window2=new ModalWindow("window2");
		add(window2);

		Fragment fragment2=new MyFragment(window2.getContentId(), this);
		window2.setContent(fragment2);
		window2.setTitle("Gee Hee");
		
		AjaxLink<Void>link2=new AjaxLink<Void>("link2") {
			@Override
			public void onClick(AjaxRequestTarget target) {
				window2.show(target);
				
			}
		};
		add(link2);
		
		//////////////////////////////////////////////////////
		
		final ModalWindow window3=new ModalWindow("window3");
		add(window3);

		Panel panel3=new MyPanel(window3.getContentId());
		window3.setContent(panel3);
		window3.setTitle("Eric J.");
		
		AjaxLink<Void>link3=new AjaxLink<Void>("link3") {
			@Override
			public void onClick(AjaxRequestTarget target) {
				window3.show(target);
				
			}
		};
		add(link3);

$ vi Man18_2.html

		<div wicket:id="window"></div>
		<a href="#" wicket:id="link">link</a>
		
		<div wicket:id="window2"></div>
		<a href="#" wicket:id="link2">link</a>
		
		<wicket:fragment wicket:id="myfragment">
			<h3 wicket:id="dexter">This text will be overwritten</h3>
			<h3 wicket:id="deedee">This text will be overwritten</h3>
		</wicket:fragment>
	
		<div wicket:id="window3"></div>
		<a href="#" wicket:id="link3">link</a>

$ vi MyFragment.java

public class MyFragment extends Fragment{
	public MyFragment(String id,WebPage page) {
		super(id,"myfragment",page);
		Label label=new Label("dexter", "Omelette du fromage");
		add(label);
		Label label2=new Label("deedee","That's all you can say!");
		add(label2);

	}

$ vi MyFragment.html
/ Is er niet	, de HTML staat in Man18_2.html

$ vi MyPanel.java

public class MyPanel extends Panel{
	public MyPanel(String id) {
		super(id);
		Label label=new Label("dexter", "Omelette du fromage");
		add(label);
		Label label2=new Label("deedee","That's all you can say!");
		add(label2);

	}

$ vi MyPanel.html

	<wicket:panel>
		<h3 wicket:id="dexter">This text will be overwritten</h3>
		<h3 wicket:id="deedee">This text will be overwritten</h3>
	</wicket:panel>

/ 13	. 

/ we zien dat we voor het label geen HTML hoeven te geven	, en voor het fragment en panel wel	,
/ TODO

/ we zien dat voor het label is generate	, bij ->	,

<div wicket:id="window" id="window4" style="display:none">
	<wicket:panel xmlns:wicket="http://wicket.apache.org">
->		<div wicket:id="content" id="content5">I am a modal window</div>
	</wicket:panel>
</div>

/ bij het fragment zien we onze HTML terug	,

<div wicket:id="window2" id="window26" style="display:none">
	<wicket:panel xmlns:wicket="http://wicket.apache.org">
		<div wicket:id="content" id="content7">
			<h3 wicket:id="dexter">Omelette du fromage</h3>
			<h3 wicket:id="deedee">That's all you can say!</h3>
		</div>
	</wicket:panel>
</div>

/ dit zijn dus de tags window, window2 die we opgeven in onze HTML	, 
/ maar het modal window zelf is andere HTML	,

<div class="wicket-modal" id="_wicket_window_52" role="dialog" aria-labelledby="Foo Bar" style="top: 0px; left: 391px; width: 600px; position: absolute; visibility: visible;">
	<form style="background-color:transparent;padding:0px;margin:0px;border-width:0px;position:static">
		<div id="_wicket_window_53" class="w_blue">
			<div class="w_top_1">
				<div class="w_topLeft" id="_wicket_window_57"></div>
				<div class="w_topRight" id="_wicket_window_58"></div>
				<div class="w_top" id="_wicket_window_56"></div>
			</div>
			<div class="w_left" id="_wicket_window_59">
				<div class="w_right_1">
					<div class="w_right" id="_wicket_window_60">
						<div class="w_content_1" onmousedown="Wicket.Event.stop(event);">
							<div class="w_caption" id="_wicket_window_54">
								<a class="w_close" style="z-index:1" href="#"></a>
								<h3 id="_wicket_window_64" class="w_captionText">Foo Bar</h3>
							</div>
							<div class="w_content_2">
								<div class="w_content_3">
									<div class="w_content">
										<div id="_wicket_window_55" class="w_content_container" style="overflow: auto; height: 422px;">
											<div wicket:id="content" id="content5">I am a modal window</div>
										</div>
									</div>
								</div>
							</div>
	</div></div></div></div><div class="w_bottom_1" id="_wicket_window_63_1"><div class="w_bottomRight" id="_wicket_window_62"></div><div class="w_bottomLeft" id="_wicket_window_61"></div><div class="w_bottom" id="_wicket_window_63"></div></div></div></form></div>

/ in tags window, window2, zien we als we app start niets	, als het label (als div dus) in het modal window verschijnt en we close het modal window, dan verschijnt het label (als div) pas in window tag	, 


/ 7	.

/ project wicket-book	, Ch5_6_2a	, 

/ AjaxEventBehavior	,

$ vi Ch5_6_2a.java

	final ModalWindow window=new ModalWindow("window");
		add(window);
		window.setTitle("Foo Bar");
			
		Label label=new Label(window.getContentId(),new Model<String>("I am a modal window"));
		window.setContent(label);
		
		WebMarkupContainer group=new WebMarkupContainer("group");
		add(group);
		group.setOutputMarkupId(true);
		Behavior behavior=new AjaxEventBehavior("click") {	
			@Override
			protected void onEvent(AjaxRequestTarget target) {
				window.show(target);
				
			}
		};
		group.add(behavior);

$ vi Ch5_6_2a.html

	<div wicket:id="window"></div>
	<div wicket:id="group" style="width:100px;height:100px;position:relative;background:#ccc;"></div>

/ we hoeven in HTML GEEN DOM elem voor de label te maken	,die wordt al create door .setOutputMarkupPlaceHolder	, 

/ we hebben in Man18_2.java
		AjaxLink<Void>link=new AjaxLink<Void>("link") {
			@Override
			public void onClick(AjaxRequestTarget target) {
				window.show(target);

/ Met AjaxEventBehavior kunnen we ook click op een WebMarkupContainer	,
/ WH
/ TODO 

/ Einde WICKET MODAL WINDOW



/ WICKET COMPONENTS
/ 7	.




/ Lees	,
http://stackoverflow.com/questions/7921694/wicket-add-body-tag-attribute
/ over .setTransparentResolver op body	,

/ See in wicket-book project	, AdjustBody.java/.html	,

/ Lees	,
https://cwiki.apache.org/confluence/display/WICKET/Migration+to+Wicket+1.5#MigrationtoWicket1.5-MarkupContainer.isTransparentResolver()removed

/ 7	.

/ Wat is .wrapOnAssignment	?

/ Deze wordt eig. altijd called	, als we een label create met als model een ResourceModel	,
/ in project wicket-book	, Ch12_1_2.java/.html	,
		Label label3=new Label("third",new ResourceModel("third"));
...
/s
Label(Component).<init>(String, IModel<?>) line: 698	
			setModelImpl(wrap(model));
/s
Label(Component).wrap(IModel<V>) line: 4161	
		if (model instanceof IComponentAssignedModel)
		{
			return ((IComponentAssignedModel<V>)model).wrapOnAssignment(this);
/s
ResourceModel.wrapOnAssignment(Component) line: 88	
		return new AssignmentWrapper(component);
/ component=Label
/ this=ResourceModel

/s
ResourceModel$AssignmentWrapper.<init>(ResourceModel, Component) line: 108	
/=
public class ResourceModel extends AbstractReadOnlyModel<String>
	implements
		IComponentAssignedModel<String>
{
	private class AssignmentWrapper extends LoadableDetachableModel<String>
		implements
			IWrapModel<String>
	{
		@Override
		public IModel<String> getWrappedModel()
		{
			return ResourceModel.this;
		}

/t
Label(Component).<init>(String, IModel<?>) line: 698	
			setModelImpl(wrap(model));
/d
/s
Label(Component).setModelImpl(IModel<?>) line: 3021	
			if (model != null)
model	ResourceModel$AssignmentWrapper  (id=101)	
			{
				data_insert(0, model);
/s
Label(Component).data_insert(int, Object) line: 579	
			data = object;
object	ResourceModel$AssignmentWrapper  (id=101)	

//////////////////
/ Dus de data van de component wordt de model	, logisch	,

/t
Ch12_1_2.<init>(PageParameters) line: 36	
		Label label3=new Label("third",new ResourceModel("third"));
/d
		IModel<String>model=new Model<String>("color:red;font-style:italic;");
		label3.add(new AttributeModifier("style",model));
		add(label3);

/ Geef cont	, 

/ we komen in	,

Daemon Thread [http-bio-9090-exec-5] (Suspended (breakpoint at line 124 in ResourceModel$AssignmentWrapper))	
	owns: SocketWrapper<E>  (id=60)	
	ResourceModel$AssignmentWrapper.load() line: 124	
			return Application.get()
				.getResourceSettings()
				.getLocalizer()
				.getString(resourceKey, component, defaultValue);

	ResourceModel$AssignmentWrapper.load() line: 94	

	ResourceModel$AssignmentWrapper(LoadableDetachableModel<T>).getObject() line: 121	
			transientModelObject = load();
	Label(Component).getDefaultModelObject() line: 1618	
				return model.getObject();

	Label(Component).getDefaultModelObjectAsString() line: 1646	
	Label.onComponentTagBody(MarkupStream, ComponentTag) line: 115	
		replaceComponentTagBody(markupStream, openTag, getDefaultModelObjectAsString());

	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
	Label(Component).internalRenderComponent() line: 2557	
			if (tag.isOpen())
			{
				// Render the body. The default strategy will simply call the component's
				// onComponentTagBody() implementation.
				getMarkupSourcingStrategy().onComponentTagBody(this, markupStream, tag);

	Label(WebComponent).onRender() line: 56	
	Label(Component).internalRender() line: 2372	
	Label(Component).render() line: 2300	
	Ch12_1_2(MarkupContainer).renderNext(MarkupStream) line: 1405	
	Ch12_1_2(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1601	
	Ch12_1_2(Page).onRender() line: 879	
	Ch12_1_2(WebPage).onRender() line: 142	
	Ch12_1_2(Component).internalRender() line: 2372	
	Ch12_1_2(Component).render() line: 2300	
	Ch12_1_2(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 837	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
	ApplicationFilterChain.internalDoFilter(ServletRequest, ServletResponse) line: 241	
	ApplicationFilterChain.doFilter(ServletRequest, ServletResponse) line: 208	
	StandardWrapperValve.invoke(Request, Response) line: 220	
	StandardContextValve.invoke(Request, Response) line: 122	
	NonLoginAuthenticator(AuthenticatorBase).invoke(Request, Response) line: 503	
	StandardHostValve.invoke(Request, Response) line: 170	
	ErrorReportValve.invoke(Request, Response) line: 103	
	AccessLogValve.invoke(Request, Response) line: 950	
	StandardEngineValve.invoke(Request, Response) line: 116	
	CoyoteAdapter.service(Request, Response) line: 421	
	Http11Processor(AbstractHttp11Processor<S>).process(SocketWrapper<S>) line: 1070	
	Http11Protocol$Http11ConnectionHandler(AbstractProtocol$AbstractConnectionHandler<S,P>).process(SocketWrapper<S>, SocketStatus) line: 611	
	JIoEndpoint$SocketProcessor.run() line: 314	
	ThreadPoolExecutor(ThreadPoolExecutor).runWorker(ThreadPoolExecutor$Worker) line: 1145	
	ThreadPoolExecutor$Worker.run() line: 615	
	TaskThread$WrappingRunnable.run() line: 61	
	TaskThread(Thread).run() line: 745	

/ we gaan er verder in	,
/s
Localizer.getString(String, Component, String) line: 149	
/ this.cache=
{third-2:third-1-en_US-null-null=My Third Label, first-1-en_US-null-null=My First Label}

/ 7	. 

/ In Ch12_1_2.java, in wicket-book	,

	IModel<String>model3=new ResourceModel("third");
		Label label3=new Label("third",model3);
//		Object o=model3.getObject();
// ERR
// TODO

/ 7	.

/ In Ch12_1_2.java, in proj wicket-book	,
/ .wrapAssignment	,

		IModel<String>model3=new ResourceModel("third");
		Label label3=new Label("third",model3);
		add(label3);
		
		IModel<String>model4=new ResourceModel("fourth").wrapOnAssignment(label3);
		Label label4=new Label("fourth",model4);
		add(label4);

/ in Ch12_1_2.properties
fourth=My Fourth Label

/ in Ch12_1_2.html
	<div wicket:id="fourth"></div>

/ model4 is geen IComponentAssignedModel, zoals ResourceModel	, de wrap is al gedaan, het is een AssignmentWrapper extends LoadableDetachableModel<String>	, dus in new Label("fourth",model4) wordt er niet nog een keer .wrapOnAssignment called	,

/ we komen in	,
ResourceModel$AssignmentWrapper.load() line: 124	
		@Override
		protected String load()
		{
			return Application.get()
				.getResourceSettings()
				.getLocalizer()
				.getString(resourceKey, component, defaultValue);
...
/s
Localizer.getStringIgnoreSettings(String, Component, IModel<?>, Locale, String, String) line: 338	
		if ((cache != null) && ((component == null) || addedToPage))
		{
			cacheKey = getCacheKey(key, component, locale, style, variation);

/ key="fourth"
/ component=label3
/ locale=en_US
this	Localizer  (id=10081)	
	cache	ConcurrentHashMap<K,V>  (id=10105)	
{third-2:third-1-en_US-null-null=My Third Label, 
fourth-2:third-1-en_US-null-null=My Fourth Label, 
first-1-en_US-null-null=My First Label}
	metaDatabase	Localizer$ClassMetaDatabase  (id=10203)	
		nameCounter	AtomicLong  (id=10248)	
		nameToId	ConcurrentHashMap<K,V>  (id=10249)	
{my.test.own.wicket_book.Ch12_1_2=1, org.apache.wicket.markup.html.basic.Label=2}

/ wat is rol component	?

/ 7	.







/ Einde WICKET COMPONENTS

/ WICKET TABLE

/ 7	. 

/ Onze eigen provider	,

$ vi Ch55c.html

	<div wicket:id="row3">
		   <div wicket:id="name"></div>
		   <div wicket:id="address"></div>
	</div>

$ vi Ch55c.java

	private class MyProvider<T extends Serializable> implements IDataProvider<T> {
	 
		private List<T>l;

		public MyProvider(List<T>l) {
			this.l=l;
		}
	        public Iterator<T> iterator(long first, long count)
	        {
	        	long last=first+count;
	        	if(last>l.size())last=l.size();
	        	List<T>sub=l.subList((int)first,(int)last);
	        	return sub.listIterator();
	        }
	 
	        public long size()
	        {
	                return (long)l.size();
	        }
	 
	        @Override
	        public IModel model(T t)
	        {
	                return new Model<T>(t);
	        }
	      
	        @Override
	        public void detach() {
	        
	        }
	 }

		{
			IDataProvider<Person>dataProvider=new MyProvider<Person>(persons);
			DataView<Person> dataView = new DataView<Person>("row3", dataProvider) {

			  @Override
			  protected void populateItem(Item<Person> item) {
			    Person person = item.getModelObject();

			    {
			    Label label=new Label("name", person.getName());
			    label.setOutputMarkupId(true);
			    item.add(label);
			    }
			    {
			    Label label=new Label("address", person.getAddress());
			    label.setOutputMarkupId(true);
			    item.add(label);
			    }
			      
			    
			  }
			};
			add(dataView);
			dataView.setOutputMarkupId(true);
			}
    		} 

/ we zien	,

	<div wicket:id="row3">
	  	<div wicket:id="name" id="nameb">Foo</div>
	  	<div wicket:id="address" id="addressc">Street 1</div>
	</div>
	<div wicket:id="row3">
		   <div wicket:id="name" id="named">Bar</div>
		   <div wicket:id="address" id="addresse">Lane 7</div>
	</div>

/ 7	.

/ proj wicket-exxamples-step-by-step

/ In SimplePage	, 
		add(new DataView<Contact>("simple", new ContactDataProvider()) {
			@Override
			protected void populateItem(final Item<Contact> item)
				Contact contact = item.getModelObject();
/ Hier wordt de transient obj set in het model	,

/ 7	.  

/ proj wicket-exxamples-step-by-step

/ In SortingPage.java	,
		SortableContactDataProvider dp = new SortableContactDataProvider();

/ public class SortableContactDataProvider extends SortableDataProvider<Contact, String> implements IFilterStateLocator<ContactFilter>
	@Override
	public Iterator<Contact> iterator(long first, long count)
	@Override
	public long size()
	@Override
	public IModel<Contact> model(Contact object)
/ Dus implement IDataProvider	,
	@Override
	public ContactFilter getFilterState()
	@Override
	public void setFilterState(ContactFilter state)
/ dus implements IFilterStateLocator	,

public abstract class SortableDataProvider<T, S> implements ISortableDataProvider<T, S>
	private final SingleSortState<S> state = new SingleSortState<>();
	@Override
	public final ISortState<S> getSortState(){
		return state;
	@Override
	public void detach()
/ Dus is abstract, omdat hij NIET IDataProvider impl	,


public interface ISortableDataProvider<T, S> extends IDataProvider<T>, ISortStateLocator<S>

public interface IDataProvider<T> extends IDetachable
	Iterator<? extends T> iterator(long first, long count);
	long size();
	IModel<T> model(T object);

public interface IDetachable extends IClusterable
	void detach();

public interface ISortStateLocator<T> extends IClusterable
	ISortState<T> getSortState();

public interface IFilterStateLocator<T> extends IClusterable
	T getFilterState();
	void setFilterState(T state);

 */
public class SingleSortState<T> implements ISortState<T>, IClusterable {
	@Override
	public void setPropertySortOrder(final T property, final SortOrder order)
	@Override
	public SortOrder getPropertySortOrder(final T property)

public interface ISortState<S> extends IClusterable {
	public void setPropertySortOrder(S property, SortOrder order);
	public SortOrder getPropertySortOrder(S property);



/ Einde WICKET TABLE


/ OPEN IN CHROME

http://localhost:9090/simple-webapp/weather.x?zip=60202

http://dev.mysql.com/doc/refman/5.0/en/subquery-errors.html
http://stackoverflow.com/questions/7869592/how-to-do-an-update-join-in-postgresql
http://www.postgresql.org/docs/9.1/static/datatype-datetime.html

http://ehcache.org/documentation/2.8/code-samples
http://ehcache.org/generated/2.9.0/html/ehc-all/#page/Ehcache_Documentation_Set%2Fco-persist_config_examples.html%23
http://ehcache.org/documentation
https://weblogs.java.net/blog/maxpoon/archive/2007/06/extending_the_n_2.html

http://www.journaldev.com/3481/hibernate-save-vs-saveorupdate-vs-persist-vs-merge-vs-update-explanation-with-examples

http://postgresguide.com/tips/dates.html

http://stackoverflow.com/questions/5459176/difference-between-hibernate-update-by-session-update-and-hibernatetemplate-merg

https://acceptance.scs.mp-objects.com/isbscs/authentication/login-form
https://test.scs.mp-objects.com/pnloms/authentication/login-form

file:///home/eric/Downloads/finalized-invoice-list.pdf

http://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html#beans-standard-annotations

https://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/PatternLayout.html


/ Einde OPEN IN CHROME


/ GOOGLE

https://www.google.com/landing/2step/features.html
/ we hebben saved in ~	,
Backup-codes-ericjvandervelden.txt



/ Einde GOOGLE

/ WICKET EXAMPLES

/ we maken project wicket-examples-step-by-step

/ 7	.

/ In wicket-examples' pom zien we dependencies bijv. op wicket-ccre, zonder version	,. De pom heeft parent org.apache.wicket:wicket-parent:7.0.0.M4	, en die zien we in de repo	,
/ Daar zien we de dep op wicket-core met version	,  in <dependencyManagement/>	,
/ Lees	,
http://books.sonatype.com/mvnref-book/reference/pom-relationships-sect-project-dependencies.html

Luckily, Maven provides a way for you to consolidate dependency version numbers in the dependencyManagement element. You’ll usually see the dependencyManagement element in a top-level parent POM for an organization or project. Using the dependencyManagement element in a pom.xml allows you to reference a dependency in a child project without having to explicitly list the version. Maven will walk up the parent-child hierarchy until it finds a project with a dependencyManagement element, it will then use the version specified in this dependencyManagement element.

/ 7	.

/ we cp van project wicket-examples	,

org/apache/wicket/examples 
	HelloWorldServlet.java
	WicketExampleApplication.java
org/apache/wicket/examples/helloworld 
	HelloWorld.java
	HelloWorldApplication.java
	HelloWorld.html
org/apache/wicket/examples/repeater 
	RepeaterApplication.java
org/apache/wicket/examples/source 
	...

/ HelloWorldApplication extends WicketExampleApplication

/ Ook in repeater hebben we een appl	, RepeaterApplication	,

/ we extract de war in de org.apache.wicket:wicket-examples:7.0.0.M4 	,
$ pwd
/home/eric/Devel/Java/Wicket
$ jar xvf ~/Downloads/wicket-examples-7.0.0-M4.war
/ Hier zien we ook alle src files	, maar ook de web.xml	,
/ In wicket-examples-7.0.0-M4-sources.jar zien we web.xml NIET, maar die moeten we echt wel hebben	, in wicket-examples-7.0.0-M4-sources.jar zitten alleen de .java files	,

$ vi WEB-INF/web.xml


 	<filter>
                <filter-name>HelloWorldApplication</filter-name>
                <filter-class>org.apache.wicket.protocol.http.WicketFilter</filter-class>
                <init-param>
                  <param-name>applicationClassName</param-name>
                  <param-value>org.apache.wicket.examples.helloworld.HelloWorldApplication</param-value>
                </init-param>
        </filter>
        
        <filter-mapping>
                <filter-name>HelloWorldApplication</filter-name>
                <url-pattern>/helloworld/*</url-pattern>
                <dispatcher>REQUEST</dispatcher>
                <dispatcher>INCLUDE</dispatcher>
        </filter-mapping>
        
        <filter>
                <filter-name>RepeaterExamplesApplication</filter-name>
                <filter-class>org.apache.wicket.protocol.http.WicketFilter</filter-class>
                <init-param>
                        <param-name>applicationClassName</param-name>
                        <param-value>org.apache.wicket.examples.repeater.RepeaterApplication</param-value>
                </init-param>
        </filter>
        
        <filter-mapping>
                <filter-name>RepeaterExamplesApplication</filter-name>
                <url-pattern>/repeater/*</url-pattern>
                <dispatcher>REQUEST</dispatcher>
                <dispatcher>INCLUDE</dispatcher>
        </filter-mapping>
 
        <servlet>
                <servlet-name>HelloWorldServlet</servlet-name>
                <servlet-class>org.apache.wicket.examples.HelloWorldServlet</servlet-class>
        </servlet>

        <servlet-mapping>
                <servlet-name>HelloWorldServlet</servlet-name>
                <url-pattern>/helloworldservlet/*</url-pattern>
        </servlet-mapping>


/ Voor ons tellen de filters	, als we een bepaalde url geven	, pakt hij de juiste appl, door het filter	,
/ we kunnen ook de servlet aan een url bind	,

/ we start tomcat7	,
[eric@localhost apache-tomcat-7.0.57]$ bin/catalina.sh run
...
/ we deploy in tomcat7	, 
$ mvn tomcat7:undeploy tomcat7:deploy	

/vergl met
http://www.wicket-library.com/wicket-examples/helloworld/
/ geef	,
http://localhost:8080/wicket-examples-step-by-step/repeater/
http://localhost:8080/wicket-examples-step-by-step/helloworld/
http://localhost:8080/wicket-examples-step-by-step/helloworldservlet

/ Geef	
http://localhost:8080/wicket-examples-step-by-step/repeater/






/ Einde WICKET EXAMPLES

/ TOMCAT 

[eric@localhost apache-tomcat-7.0.57]$ vi bin/catalina.sh

# [ERICJ]
CATALINA_OPTS="-Xdebug -Xrunjdwp:transport=dt_socket,address=9966,server=y,suspend=n"

[eric@localhost apache-tomcat-7.0.57]$ vi conf/server.xml 
   <Connector port="9090" protocol="HTTP/1.1"
               connectionTimeout="20000"
               redirectPort="8443" />

/ Nu kunnen we tomcat start naast onze appl	, maar we zien nog wel ERRS	,
/ TODO

/ We doen in wicket-book's pom.xml	,

			<plugin>
				<groupId>org.apache.tomcat.maven</groupId>
				<artifactId>tomcat7-maven-plugin</artifactId>
				<version>${tomcat.version}</version>
				<configuration>
	    				<url>http://localhost:9090/manager/text</url>
	    				<server>my_tomcat</server>
 	 			</configuration>
			</plugin>

/ bij tomcat7:deploy hoeven we alleen <url> 	, GEEN <port>	, ook <path>, 
/ maar deze is de default	,
	    			<path>/${project.artifactId}</path>

/ als we  tomcat7:run	, moeten we <port> geven, 
/ TODO

/ Einde TOMCAT 

/ JETTY

/ in wicket-book's pom.xml	,

				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-maven-plugin</artifactId>
				<version>${jetty9.version}</version>
				<configuration>
				
		            <httpConnector>
		                    <port>9090</port>
		            </httpConnector>

/ Als onze appl ook runs	,
/ Maar toch conflict op 8080
/ TODO 

/ Einde JETTY



/ WICKET SOURCE 

[eric@localhost Wicket]$ pwd
/home/eric/Devel/Java/Wicket
[eric@localhost Wicket]$ git clone https://github.com/apache/wicket.git
[eric@localhost Wicket]$ cd wicket
[eric@localhost wicket]$ git tag -l
/ TODO

/ Hier zien we wel de wicket-examples in de src	,
/ Lees	,
http://www.mkyong.com/wicket/how-do-setup-wicket-examples-in-eclipse/
/ TODO
/ HIER HIER HIER
`

/ Einde WICKET SOURCE

/ FEDORA

/ Uit X	, 
ctrl+alt+F>2, dus F2, of F3, ...
/ terug naar X	,
ctrl+alt+F1

/ Ga eruit	, 
$ killall gnome-session
 
/ Einde FEDORA

/ JETTY

/ 7	.

/ jetty9 zelfstandig zoals tomcat7	,

[eric@localhost Jetty]$ pwd
/home/eric/Devel/Java/Jetty
[eric@localhost Jetty]$ tar xxvzf ~/Downloads/jetty-distribution-9.2.6.v20141205.tar.gz 
[eric@localhost Jetty]$ cd jetty-distribution-9.2.6.v20141205/
[eric@localhost jetty-distribution-9.2.6.v20141205]$ ls
bin        etc  license-eplv10-aslv20.html  modules      README.TXT  start.ini  VERSION.txt
demo-base  lib  logs                        notice.html  resources   start.jar  webapps

/ we lezen	,
http://www.eclipse.org/jetty/documentation/current/

[eric@localhost jetty-distribution-9.2.6.v20141205]$ pwd
/home/eric/Devel/Java/Jetty/jetty-distribution-9.2.6.v20141205
[eric@localhost jetty-distribution-9.2.6.v20141205]$ java -jar start.jar 
2015-01-05 09:00:50.232:INFO::main: Logging initialized @392ms
2015-01-05 09:00:50.289:WARN:oejs.HomeBaseWarning:main: This instance of Jetty is not running from a separate {jetty.base} directory, this is not recommended.  See documentation at http://www.eclipse.org/jetty/documentation/current/startup.html
2015-01-05 09:00:50.445:INFO:oejs.Server:main: jetty-9.2.6.v20141205
2015-01-05 09:00:50.459:INFO:oejdp.ScanningAppProvider:main: Deployment monitor [file:/home/eric/Devel/Java/Jetty/jetty-distribution-9.2.6.v20141205/webapps/] at interval 1
2015-01-05 09:00:50.471:INFO:oejs.ServerConnector:main: Started ServerConnector@2695c1b4{HTTP/1.1}{0.0.0.0:8080}
2015-01-05 09:00:50.472:INFO:oejs.Server:main: Started @632ms

/ Geef
localhost:8080
Error 404 - Not Found.

No context on this server matched or handled this request.
Contexts known to this server are:

[eric@localhost jetty-distribution-9.2.6.v20141205]$ cd demo-base/

[eric@localhost demo-base]$ ls
etc  lib  resources  start.d  start.ini  webapps
[eric@localhost demo-base]$ ls webapps/
async-rest.war     README.TXT  test.d         test-jaas.xml  test-jndi.xml  test-spec.xml  test.xml
example-moved.xml  ROOT        test-jaas.war  test-jndi.war  test-spec.war  test.war       xref-proxy.war

[eric@localhost demo-base]$ java -jar ../start.jar 
2015-01-05 09:02:23.183:INFO::main: Logging initialized @420ms
2015-01-05 09:02:23.466:WARN::main: demo test-realm is deployed. DO NOT USE IN PRODUCTION!
2015-01-05 09:02:23.468:INFO:oejs.Server:main: jetty-9.2.6.v20141205
2015-01-05 09:02:23.482:INFO:oejdp.ScanningAppProvider:main: Deployment monitor [file:/home/eric/Devel/Java/Jetty/jetty-distribution-9.2.6.v20141205/demo-base/webapps/] at interval 1
2015-01-05 09:02:23.913:WARN::main: test webapp is deployed. DO NOT USE IN PRODUCTION!
2015-01-05 09:02:24.473:INFO:oejsh.ContextHandler:main: Started o.e.j.w.WebAppContext@60a943af{/test,file:/tmp/jetty-0.0.0.0-8080-test.war-_test-any-8194949497782332205.dir/webapp/,AVAILABLE}{/test.war}
2015-01-05 09:02:24.587:WARN::main: test-jndi webapp is deployed. DO NOT USE IN PRODUCTION!
2015-01-05 09:02:24.744:INFO:oejsh.ContextHandler:main: Started o.e.j.w.WebAppContext@34b363f8{/test-jndi,file:/tmp/jetty-0.0.0.0-8080-test-jndi.war-_test-jndi-any-2545473013574447912.dir/webapp/,AVAILABLE}{/test-jndi.war}
2015-01-05 09:02:24.935:WARN::main: async-rest webapp is deployed. DO NOT USE IN PRODUCTION!
2015-01-05 09:02:25.031:INFO:oejsh.ContextHandler:main: Started o.e.j.w.WebAppContext@5a3dfc08{/async-rest,[file:/tmp/jetty-0.0.0.0-8080-async-rest.war-_async-rest-any-6070766363191872686.dir/webapp/, jar:file:/tmp/jetty-0.0.0.0-8080-async-rest.war-_async-rest-any-6070766363191872686.dir/webapp/WEB-INF/lib/example-async-rest-jar-9.2.6.v20141205.jar!/META-INF/resources],AVAILABLE}{/async-rest.war}
2015-01-05 09:02:25.039:INFO:oejsh.ContextHandler:main: Started o.e.j.s.h.MovedContextHandler@4d0f5115{/oldContextPath,null,AVAILABLE}
2015-01-05 09:02:25.256:INFO:oejsh.ContextHandler:main: Started o.e.j.w.WebAppContext@28946139{/proxy,file:/tmp/jetty-0.0.0.0-8080-xref-proxy.war-_xref-proxy-any-2171852212076253224.dir/webapp/,AVAILABLE}{/xref-proxy.war}
2015-01-05 09:02:25.305:WARN::main: test-jaas webapp is deployed. DO NOT USE IN PRODUCTION!
2015-01-05 09:02:25.355:INFO:oejsh.ContextHandler:main: Started o.e.j.w.WebAppContext@64d6f6fd{/test-jaas,file:/tmp/jetty-0.0.0.0-8080-test-jaas.war-_test-jaas-any-5141516540938589014.dir/webapp/,AVAILABLE}{/test-jaas.war}
2015-01-05 09:02:25.451:INFO:oejsh.ContextHandler:main: Started o.e.j.w.WebAppContext@5e223ed2{/,file:/home/eric/Devel/Java/Jetty/jetty-distribution-9.2.6.v20141205/demo-base/webapps/ROOT/,AVAILABLE}{/ROOT}
2015-01-05 09:02:25.556:WARN::main: test-spec webapp is deployed. DO NOT USE IN PRODUCTION!
Calling TestListener.contextInitialized
2015-01-05 09:02:25.633:INFO:oejsh.ContextHandler:main: Started o.e.j.w.WebAppContext@1a12b4d3{/test-spec,[file:/tmp/jetty-0.0.0.0-8080-test-spec.war-_test-spec-any-8819481114796518847.dir/webapp/, jar:file:/tmp/jetty-0.0.0.0-8080-test-spec.war-_test-spec-any-8819481114796518847.dir/webapp/WEB-INF/lib/test-web-fragment-9.2.6.v20141205.jar!/META-INF/resources],AVAILABLE}{/test-spec.war}
2015-01-05 09:02:25.640:INFO:oejs.ServerConnector:main: Started ServerConnector@15363c8e{HTTP/1.1}{0.0.0.0:8080}
2015-01-05 09:02:25.649:INFO:oejs.ServerConnector:main: Started ServerConnector@660221ad{SSL-http/1.1}{0.0.0.0:8443}
2015-01-05 09:02:25.649:INFO:oejs.Server:main: Started @2887ms

/ Geef
localhost:8080
/ OK

/ 7	.

[eric@localhost mybase]$ pwd
/tmp/mybase
[eric@localhost mybase]$ java -jar ~/Devel/Java/Jetty/jetty-distribution-9.2.6.v20141205/start.jar 
WARNING: Nothing to start, exiting ...

Usage: java -jar start.jar [options] [properties] [configs]
       java -jar start.jar --help  # for more information

[eric@localhost mybase]$ java -jar ~/Devel/Java/Jetty/jetty-distribution-9.2.6.v20141205/start.jar --add-to-startd=http,deploy
INFO: http            initialised in ${jetty.base}/start.d/http.ini (created)
INFO: http            enabled in     ${jetty.base}/${jetty.base}/start.d/http.ini
INFO: server          initialised transitively
INFO: server          initialised in ${jetty.base}/start.d/server.ini (created)
INFO: server          enabled in     ${jetty.base}/${jetty.base}/start.d/server.ini
INFO: deploy          initialised in ${jetty.base}/start.d/deploy.ini (created)
INFO: deploy          enabled in     ${jetty.base}/${jetty.base}/start.d/deploy.ini
MKDIR: ${jetty.base}/webapps
INFO: webapp          enabled in     <transitive>
INFO: servlet         enabled in     <transitive>
INFO: security        enabled in     <transitive>
INFO: server          initialised in ${jetty.base}/${jetty.base}/start.d/server.ini
INFO: server          enabled in     <transitive>
INFO: server          enabled in     ${jetty.base}/${jetty.base}/start.d/server.ini

[eric@localhost mybase]$ find
.
./webapps
./start.d
./start.d/deploy.ini
./start.d/server.ini
./start.d/http.ini

[eric@localhost mybase]$ java -jar ~/Devel/Java/Jetty/jetty-distribution-9.2.6.v20141205/start.jar 
2015-01-05 09:32:38.883:INFO::main: Logging initialized @311ms
2015-01-05 09:32:39.051:INFO:oejs.Server:main: jetty-9.2.6.v20141205
2015-01-05 09:32:39.070:INFO:oejdp.ScanningAppProvider:main: Deployment monitor [file:/tmp/mybase/webapps/] at interval 1
2015-01-05 09:32:39.084:INFO:oejs.ServerConnector:main: Started ServerConnector@2e0dc005{HTTP/1.1}{0.0.0.0:8080}
2015-01-05 09:32:39.085:INFO:oejs.Server:main: Started @514ms

http://localhost:8080/
/ we zien hetzelfde als we het in de jetty root  doen	,

/ 7	.

[eric@localhost mybase]$ java -jar ~/Devel/Java/Jetty/jetty-distribution-9.2.6.v20141205/start.jar --add-to-startd=https
INFO: https           initialised in ${jetty.base}/start.d/https.ini (created)
INFO: https           enabled in     ${jetty.base}/${jetty.base}/start.d/https.ini
INFO: ssl             initialised transitively
INFO: ssl             initialised in ${jetty.base}/start.d/ssl.ini (created)
INFO: ssl             enabled in     ${jetty.base}/${jetty.base}/start.d/ssl.ini
DOWNLOAD: http://git.eclipse.org/c/jetty/org.eclipse.jetty.project.git/plain/jetty-server/src/main/config/etc/keystore to etc/keystore
INFO: server          initialised in ${jetty.base}/start.d/server.ini
INFO: server          enabled in     <transitive>
INFO: server          enabled in     ${jetty.base}/start.d/server.ini

[eric@localhost mybase]$ find 
.
./etc
./etc/keystore
./webapps
./start.d
./start.d/ssl.ini
./start.d/https.ini
./start.d/deploy.ini
./start.d/server.ini
./start.d/http.ini

[eric@localhost mybase]$ java -jar ~/Devel/Java/Jetty/jetty-distribution-9.2.6.v20141205/start.jar 
/ TODO

/ 7	. 

/ in demo-base	,
$ java -jar ../start.jar

[eric@localhost demo-base]$ ls webapps/
async-rest.war     README.TXT  test.d         test-jaas.xml  test-jndi.xml  test-spec.xml  test.xml
example-moved.xml  ROOT        test-jaas.war  test-jndi.war  test-spec.war  test.war       xref-proxy.war

/ geef 
localhost:8080
/ we zien de ROOT webapp	, 
[eric@localhost demo-base]$ ls webapps/ROOT/
images  index.html  jetty.css
/ Alleen een .html, .css, images/	, 

/ in webapp zien we ook de test webapp	,




/ Einde JETTY

/ SPRING MAVEN BOOK HIBERNATE APPL 

/ 7	. 

/ simple-parent: clean install
/ simple-webapp: jetty:run

/ Geef	,
http://localhost:8080/simple-webapp/weather.x?zip=60202
http://localhost:8080/simple-webapp/history.x?zip=60202

/ 7	.

/ Uit maven boek	, 
[eric@localhost ch-multi-spring-postgres]$ pwd
/home/eric/Devel/Java/Spring/ch-multi-spring-postgres
[eric@localhost ch-multi-spring-postgres]$ ls
pom.xml  simple-parent
[eric@localhost ch-multi-spring-postgres]$ ls simple-parent/
pom.xml  simple-command  simple-model  simple-persist  simple-weather  simple-webapp

/ als we import in eclipse	,
/home/eric/Devel/Java/Spring/ch-multi-spring-postgres
/ dan zien we de projects	,
simple-parent simple-command  simple-model  simple-persist  simple-weather  simple-webapp

/ we doen aanpassingen	,

$ vi simple-persist/pom.xml	,

 <dependency>
    <groupId>org.hsqldb</groupId>
    <artifactId>hsqldb</artifactId>
    <version>2.3.2</version>
 </dependency>

$ vi applicationContext-persist.xml

        <property name="hibernateProperties">
            <props>
		...
            	<prop key="hibernate.hbm2ddl.auto">create</prop>
            </props>
        </property>


/ Dus simple-parent is er ook, en deze moeten we hebben	, we doen in eclipse : clean install op simple-parent	, 
[eric@localhost repository]$ ls org/sonatype/mavenbook/multispring/
parent          simple-model   simple-persist  simple-webapp
simple-command  simple-parent  simple-weather

/ Dan op de pom.xml in simple-webapp/	, 
jetty:run 

/ Geef	,
http://localhost:8080/simple-webapp/weather.x?zip=60202
/ OK


/ 7	. 

/ we willen postgresql	,


$ vi applicationContext-persist.xml

	<property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQLDialect</prop>
        	<prop key="hibernate.connection.driver_class">org.postgresql.Driver</prop>
        	<prop key="hibernate.connection.url">jdbc:postgresql://localhost/foo</prop>
        	<prop key="hibernate.connection.username">foo</prop>
        	<prop key="hibernate.connection.password">foo</prop>
	...
            </props>
        </property>

$ vi simple-persist/pom.xml

<dependency>
	<groupId>org.postgresql</groupId>
	<artifactId>postgresql</artifactId>
	<version>9.3-1102-jdbc41</version>
</dependency>

/ run clean install in simple-parent	,
/ run jetty:run in simple-webapp	,

/ Geef	,
http://localhost:8080/simple-webapp/weather.x?zip=60202
/ OK
 
/ we zien	,

foo=> \d+ atmosphere
                                                       Table "public.atmosphere"
   Column   |          Type          |                        Modifiers                        | Storage  | Stats target | Description 
------------+------------------------+---------------------------------------------------------+----------+--------------+-------------
 id         | integer                | not null default nextval('atmosphere_id_seq'::regclass) | plain    |              | 
 humidity   | character varying(255) |                                                         | extended |              | 
 pressure   | character varying(255) |                                                         | extended |              | 
 rising     | character varying(255) |                                                         | extended |              | 
 visibility | character varying(255) |                                                         | extended |              | 
 weather_id | integer                | not null                                                | plain    |              | 
Indexes:
    "atmosphere_pkey" PRIMARY KEY, btree (id)
Foreign-key constraints:
    "fk2af43942e377ee06" FOREIGN KEY (weather_id) REFERENCES weather(id)
Has OIDs: no



=> \d+ condition
                                                       Table "public.condition"
   Column   |          Type          |                       Modifiers                        | Storage  | Stats target | Description 
------------+------------------------+--------------------------------------------------------+----------+--------------+-------------
 id         | integer                | not null default nextval('condition_id_seq'::regclass) | plain    |              | 
 code       | character varying(255) |                                                        | extended |              | 
 date       | character varying(255) |                                                        | extended |              | 
 temp       | character varying(255) |                                                        | extended |              | 
 text       | character varying(255) |                                                        | extended |              | 
 weather_id | integer                | not null                                               | plain    |              | 
Indexes:
    "condition_pkey" PRIMARY KEY, btree (id)
Foreign-key constraints:
    "fk441b8cfbe377ee06" FOREIGN KEY (weather_id) REFERENCES weather(id)
Has OIDs: no


foo=> \d+ location;
                               Table "public.location"
 Column  |          Type          | Modifiers | Storage  | Stats target | Description 
---------+------------------------+-----------+----------+--------------+-------------
 zip     | character varying(255) | not null  | extended |              | 
 city    | character varying(255) |           | extended |              | 
 country | character varying(255) |           | extended |              | 
 region  | character varying(255) |           | extended |              | 
Indexes:
    "location_pkey" PRIMARY KEY, btree (zip)
Referenced by:
    TABLE "weather" CONSTRAINT "fkac24cfd41d328c00" FOREIGN KEY (location_zip) REFERENCES location(zip)
Has OIDs: no


foo=> \d+ weather
                                                          Table "public.weather"
    Column    |            Type             |                      Modifiers                       | Storage  | Stats target | Description 
--------------+-----------------------------+------------------------------------------------------+----------+--------------+-------------
 id           | integer                     | not null default nextval('weather_id_seq'::regclass) | plain    |              | 
 date         | timestamp without time zone |                                                      | plain    |              | 
 location_zip | character varying(255)      |                                                      | extended |              | 
Indexes:
    "weather_pkey" PRIMARY KEY, btree (id)
Foreign-key constraints:
    "fkac24cfd41d328c00" FOREIGN KEY (location_zip) REFERENCES location(zip)
Referenced by:
    TABLE "wind" CONSTRAINT "fk292428e377ee06" FOREIGN KEY (weather_id) REFERENCES weather(id)
    TABLE "atmosphere" CONSTRAINT "fk2af43942e377ee06" FOREIGN KEY (weather_id) REFERENCES weather(id)
    TABLE "condition" CONSTRAINT "fk441b8cfbe377ee06" FOREIGN KEY (weather_id) REFERENCES weather(id)
Has OIDs: no


foo=> \d+ wind
                                                       Table "public.wind"
   Column   |          Type          |                     Modifiers                     | Storage  | Stats target | Description 
------------+------------------------+---------------------------------------------------+----------+--------------+-------------
 id         | integer                | not null default nextval('wind_id_seq'::regclass) | plain    |              | 
 chill      | character varying(255) |                                                   | extended |              | 
 direction  | character varying(255) |                                                   | extended |              | 
 speed      | character varying(255) |                                                   | extended |              | 
 weather_id | integer                | not null                                          | plain    |              | 
Indexes:
    "wind_pkey" PRIMARY KEY, btree (id)
Foreign-key constraints:
    "fk292428e377ee06" FOREIGN KEY (weather_id) REFERENCES weather(id)
Has OIDs: no

foo=> select*from atmosphere
foo-> ;
 id | humidity | pressure | rising | visibility | weather_id 
----+----------+----------+--------+------------+------------
  1 | 74       | 30.22    | 1      | 7          |          1
(1 row)

foo=> select*from condition;
 id | code |             date             | temp |  text  | weather_id 
----+------+------------------------------+------+--------+------------
  1 | 26   | Thu, 27 Nov 2014 1:26 am CST | 25   | Cloudy |          1
(1 row)

foo=> select*from location;
  zip  |   city   | country | region 
-------+----------+---------+--------
 60202 | Evanston | US      | IL
(1 row)

foo=> select*from weather;
 id |          date           | location_zip 
----+-------------------------+--------------
  1 | 2014-11-27 09:08:20.574 | 60202
(1 row)

foo=> select*from wind;
 id | chill | direction | speed | weather_id 
----+-------+-----------+-------+------------
  1 | 14    | 310       | 13    |          1
(1 row)



/ 7	.

/ debug jetty	,

http://stackoverflow.com/questions/9066733/how-do-i-debug-a-web-application-running-on-jetty-in-eclipse/ 

/ Lees	,
Create Maven Eclipse Runtime for your project:
right-click on project -> maven build -> goals: jetty:run
go to JRE tab of your Maven Eclipse Runtime, and in the VM arguments section add:
-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n

When you execute this runtime, the first thing the Eclipse console outputs (in blue) is:

Listening for transport dt_socket at address: 8000

Now you can create a Remote Java application Debug Runtime and connect to the debug port (8000 in this example)

/ we create a run configuration in eclipse (Not a debug configuration)	, op project simple-webapp	, met Maven, 
/ right click simple-webapp	, Run as, Maven build	, 
Base dir:/home/eric/Devel/Java/Spring/ch-multi-spring-postgres/simple-parent/simple-webapp
Goals: jetty:run
/ onder JRE tab	, 
VM arguments: -Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n

/ we create debug configuration	, onder Remote Java application	,
Name: Jetty
project: simple-webapp
Host: localhost
Port: 8000

/ Geef	,
http://localhost:8080/simple-webapp/weather.x?zip=60202

/ Eclipse vind source code niet	in simple-persist	, wel in simple-webapp	, 
/ click op source code not found	,  kies Java project: simple-perist	, de souce code wordt gevonden	,

/ als we niet Java project, maar File system  kiezen, en kiezen dir (/home/eric/Devel/Java/Spring/ch-multi-spring-postgres	, or sub dir TODO), dan krijgen we in eclipse files dubbel	, en mist hij bp's	,
/ TODO

/ Hij valt in WeatherDOA.save	,

/ Geef	,
http://localhost:8080/simple-webapp/history.x?zip=60202

/ Hij valt in 	,
public class LocationDAO extends HibernateDaoSupport {
    public Location findByZip(final String zip) {
    	return (Location) getHibernateTemplate().execute(new HibernateCallback() {
/s
LocationDAO$1.doInHibernate(Session) line: 20	

public class LocationDAO extends HibernateDaoSupport {
    public Location findByZip(final String zip) {
    	return (Location) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) {
->				Query query = getSession().getNamedQuery("Location.uniqueByZip");

/ 7	.

/ Welke Spring beans zijn er	?

./simple-parent/simple-persist/src/main/resources/applicationContext-persist.xml
    <bean 
	id="sessionFactory"
       	class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
    <bean 
	id="locationDAO" 
	class="org.sonatype.mavenbook.weather.persist.LocationDAO">
       	<property name="sessionFactory" ref="sessionFactory"/>

    <bean 
	id="weatherDAO" 
	class="org.sonatype.mavenbook.weather.persist.WeatherDAO">
       	<property name="sessionFactory" ref="sessionFactory"/>
    </bean>


./simple-parent/simple-webapp/src/main/webapp/WEB-INF/weather-servlet.xml
     <bean 
	id="weatherController" 
	class="org.sonatype.mavenbook.web.WeatherController">
       	<property name="weatherService" ref="weatherService"/>
       	<property name="weatherDAO" ref="weatherDAO"/>
     </bean>

     <bean 
	id="historyController"
        class="org.sonatype.mavenbook.web.HistoryController">
       	<property name="weatherDAO" ref="weatherDAO"/>
       	<property name="locationDAO" ref="locationDAO"/>
     </bean>

     <bean 
	id="urlMapping"
        class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
         <property name="urlMap">
               <map>
                    <entry key="/weather.x">
                         <ref bean="weatherController" />
                    </entry>
                    <entry key="/history.x">
                         <ref bean="historyController" />
                    </entry>
               </map>
          </property>


    <bean 
	id="velocityConfig" 
	class="org.springframework.web.servlet.view.velocity.VelocityConfigurer">
       	<property name="resourceLoaderPath" value="/WEB-INF/vm/"/>
     </bean>

     <bean id="viewResolver" class="org.springframework.web.servlet.view.velocity.VelocityViewResolver">
       <property name="cache" value="true"/>
       <property name="prefix" value=""/>
       <property name="suffix" value=".vm"/>
       <property name="exposeSpringMacroHelpers" value="true"/>
     </bean>

./simple-parent/simple-weather/src/main/resources/applicationContext-weather.xml
   <bean 
	id="weatherService" 
	class="org.sonatype.mavenbook.weather.WeatherService">
      	<property name="yahooRetriever" ref="yahooRetriever"/>
      	<property name="yahooParser" ref="yahooParser"/>
    </bean>

    <bean 
	id="yahooRetriever" 
	class="org.sonatype.mavenbook.weather.YahooRetriever"/>

    <bean 
	id="yahooParser" 
	class="org.sonatype.mavenbook.weather.YahooParser"/>

./simple-parent/simple-command/src/test/resources/ny-weather.xml
./simple-parent/simple-model/src/test/resources/ny-weather.xml

/ Lees	over AnnotationSessionFactoryBean	,
http://stackoverflow.com/questions/8565051/spring-3-1-hibernate-4-sessionfactory


 
/ Einde SPRING MAVEN BOOK HIBERNATE APPL 

/ SPRING MVC SPRING BOOK

/ we lezen spring book, en proberen mvc in maven book hibernate appl te begrijpen, ch-multi-spring-postgres	, 

/ we kijken in simple-webapp/	,

/ 7	. 

/ (493) 

$ vi WEB-INF/web.xml
 <servlet>
    <servlet-name>weather</servlet-name>
    <servlet-class>
      org.springframework.web.servlet.DispatcherServlet
    </servlet-class>

/ Dus hij automatisch loads Spring config file   WEB-INF/weather-servlet.xml	, omdat de dispatcher servlet zo heet	, weather	,
/ Deze is er inderdaad	, hierin zijn de controllers en urlmapping als Spring beans def	, dus de mvc spring beans staan config in WEB-INF/ , logisch	,

/ Deze inj andere beans, die dao's of service's zijn	, deze staan in andere Spring config files, 
/ deze geef je ook op in WEB-INF/web.xml	,

$ vi WEB-INF/web.xml
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
 <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>
      classpath:applicationContext-weather.xml
      classpath:applicationContext-persist.xml

/ bij ons	,
$ vi WEB-INF/web.xml
 <servlet-mapping>
    <servlet-name>weather</servlet-name>
    <url-pattern>*.x</url-pattern>
/ ipv	 in Spring book,
    <url-pattern>*.htm</url-pattern>
/ TODO (Als je weglaat)	,

/ de page controller geef je  in url mappings	,

$ vi WEB-INF/weather-servlet.xml

<beans>  
    <bean id="urlMapping" 
          class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
          <property name="urlMap">
               <map>
                    <entry key="/weather.x">
                         <ref bean="weatherController" />
                    </entry>
                    <entry key="/history.x">
                         <ref bean="historyController" />

/ De dispatcher servlet stuurt de request naar de juiste controller, afh welke url je geeft 	,
  
$ vi WEB-INF/weather-servlet.xml

<beans>  
     <bean id="weatherController" 
           class="org.sonatype.mavenbook.web.WeatherController">
       <property name="weatherService" ref="weatherService"/>
       <property name="weatherDAO" ref="weatherDAO"/>
     </bean>



/ 7	. 

/ Geef	,
http://localhost:8080/simple-webapp/weather.x?zip=60203

/ we zien in de db	,
foo=> select*from location;
  zip  |   city   | country | region 
-------+----------+---------+--------
 60202 | Evanston | US      | IL
 60203 | Evanston | US      | IL
(2 rows)

/ history.x?zip=... kun je alleen geven als je voor deze zip weather.x?zip=... al hebt gegeven	,

/ Evanston ligt bij Chicago	,

/ Kijk op	,
http://www.unitedstateszipcodes.org/

/ Geef	,
http://localhost:8080/simple-webapp/weather.x?zip=10007

/ we zien	,
Current Weather Conditions for: New York, NY, US
Temperature: 40
Condition: Partly Cloudy
Humidity: 51
Wind Chill: 34
Date: Tue Dec 02 08:57:43 CET 2014

/ we zien	,

foo=> select*from location;
  zip  |   city   | country | region 
-------+----------+---------+--------
 60202 | Evanston | US      | IL
 60203 | Evanston | US      | IL
 10007 | New York | US      | NY
(3 rows)

/ 7	. 

$ vi WeatherController.java

	public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception {
...
		return new ModelAndView("weather", "weather", weather);
/ 1ste "weather" is voor view resolver (TODO)
/ 2de ("weather", weather) , key="weather" is used in view	, en value=weather (TODO)




/ 7	.






/ Einde SPRING MVC SPRING BOOK

/ SPRING HIBERNATE 

/ we zien merge proj, z'n parent is hibernate-book proj	, die is er ook	, daar zien we de pom.xml	,

/ Lees Chapter 15. Criteria Queries	, 15.8 Detached queries and subqueries in Hibernate docs	,

DetachedCriteria query = DetachedCriteria.forClass(Cat.class).add( Property.forName("sex").eq('F') );
Session session = ....;
Transaction txn = session.beginTransaction();
List results = query.getExecutableCriteria(session).setMaxResults(100).list();
txn.commit();
session.close();






/ Einde SPRING HIBERNATE 

/ MPO

/ nieuw LDAP password	,
eric123@MPO

/ Einde MPO

/ HIBERNATE JMX

/ Geef in google, 
spring jmx hibernate
/ Lees	,
http://stackoverflow.com/questions/5930803/exposing-hibernate-cache-statistics-through-jmx-with-spring-in-tomcat

/ Geef in google	,
jboss jmx hibernate
/ Lees	,
https://access.redhat.com/documentation/en-US/JBoss_Operations_Network/2.4/html/Resource_Monitoring_and_Operations_Reference/Hibernate_Statistics_Service.html







/ Einde HIBERNATE JMX

/ WICKET SPRING

/ we zien	,

public abstract class Application
extends Object
implements ISessionStore.UnboundListener, IEventSink
public final ComponentInstantiationListenerCollection getComponentInstantiationListeners()


public class ComponentInstantiationListenerCollection
extends ListenerCollection<IComponentInstantiationListener>
implements IComponentInstantiationListener

/ TODO



/ Einde WICKET SPRING

/ SPRING XML

/ we hebben projects spring_knight	, spring_intro (annots)	,

/ we maken spring_book	, in eclipse	,
/ new maven project	, 
/ location: /home/eric/Devel/Java/Spring	,

/ org.apache.maven.archetypes:maven-archetype-quickstart	,

/ my.test.own:spring-book	,

/ we moeten wel	,
/ right click spring-book proj	, new , source folder	,
src/main/resources
src/test/resources


/ lees	,
http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/html/index.html

/ 7	.

/ AUTOWIRED BY NAME

/ we inject in HomeImpl bean een andere bean en een string,

$ vi spring-book_ch2.xml

   <bean 
    	id="home" 
    	class="my.test.own.spring_book.HomeImpl"
    	autowire="byName"
    >
        <constructor-arg name="name" value="Foo Bar" />
        <property name="age" value="52"/>
    </bean>	

    <bean
    	id="my"
    	class="my.test.own.spring_book.MyImpl"
    >
    </bean> 
    
    <bean
    	id="my2"
    	class="my.test.own.spring_book.MyImpl2"
    >
    </bean>

$ vi App.java

       	ApplicationContext applicationContext=new ClassPathXmlApplicationContext("spring-book_ch2.xml");
        {
        Home home=(Home)applicationContext.getBean("home");
        String string=home.say();
        }

$ vi Home.java

public interface Home {
	String say();

}

$ vi HomeImpl.java

	private My my;
	private My my2;

	public My getMy() {
		return my;
	}
	public void setMy(My my) {
		this.my = my;
	}
	
	public My getMy2() {
		return my2;
	}
	public void setMy2(My my2) {
		this.my2 = my2;
	}

$ vi My.java

public interface My {
	String say(String s,int i);
}

$ vi MyImpl.java

public class MyImpl implements My {

	public String say(String s,int i) {
		return "MyImpl "+s+","+i;
	}

}

$ vi MyImpl2.java

public class MyImpl2 implements My {

	public String say(String s,int i) {
		return "MyImpl2 "+s+","+i;
	}

////////////////////////////////////////////////////////// 
   <bean 
 		class="my.test.own.spring_book.HomeImpl"
    	autowire="byName"
/ is als
   <bean 
     	<property name="my" ref="my"/>	
     	<property name="my2" ref="my2"/>	

/ name="my"  is de naam van de property in de bean van type HomeImpl	, en die zien we in setMy en setMy2, dus  my en my2	,
/ ref is de id van de bean die wordt inject , zien we in <bean id="my" class=...> en <bean id="my2" class=...>

/ Dus de property name in de bean type = id van de bean in de config file	,
///////////////////////////////////////////////////////////

/ 13	. 

/ als we in dit voorbeeld autowired="byType", dan ERR, 
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'home' defined in class path resource [spring-book_ch2.xml]: Unsatisfied dependency expressed through bean property 'my': : No qualifying bean of type [my.test.own.spring_book.My] is defined: expected single matching bean but found 2: my,my2; nested exception is org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type [my.test.own.spring_book.My] is defined: expected single matching bean but found 2: my,my2

aused by: org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type [my.test.own.spring_book.My] is defined: expected single matching bean but found 2: my,my2

$ vi HomeImpl.java

	public void setMy(My my) {
		this.my = my;
	}

$ vi spring-book_ch2.xml

  <bean
    	id="my"
    	class="my.test.own.spring_book.MyImpl"
    	
    >
    </bean> 
    
    <bean
    	id="my2"
    	class="my.test.own.spring_book.MyImpl2"
    	
    >

/ HomeImpl heeft properties my en my2 van (interface) type My	, we zien dit aan setMy en setMy2	,
/ Er zijn 2 candidates	, de beans met id my en my2	, 
/ beide beans hebben (interface) type My	,
/////////////////////////////////////////////////////////

/ HomeImpl heeft ook property my2	, en daar geldt hetzelfde probleem, maar daar komt de ERR msg niet eens	,



/ Einde AUTOWIRED BY NAME

/ 13	. 

/ AUTOWIRED BY TYPE

/ we veranderen	,

$ vi spring-book_ch2.xml

   	id="home" 
    	class="my.test.own.spring_book.HomeImpl"
    	autowire="byType"
    >

/ we moeten als enige aanpassen	,

$ vi HomeImpl.java

	private My2 my2;
	
	public My2 getMy2() {
		return my2;
	}
	public void setMy2(My2 my2) {
		this.my2 = my2;
	}

$ vi My2.java

public interface My2 {
	String say(String s,int i);
}

$ vi MyImpl2.java

public class MyImpl2 implements My2 {
...

/ Einde AUTOWIRED BY TYPE

/ AUTOWIRE BY CONSTRUCTOR

/ we maken een 2de Home-bean	, HomeImpl2	,

$ vi spring-book_ch2.xml

   <bean
    	id="age"
    	class="java.lang.Integer"
    >
    	<constructor-arg value="53"></constructor-arg>
    </bean>
    
       <bean
    	id="name"
    	class="java.lang.String"
    >
    	<constructor-arg value="Bar Baz"></constructor-arg>
    </bean>
    
    <bean 
    	id="home2" 
    	class="my.test.own.spring_book.HomeImpl2"
    	autowire="constructor"
    >
    </bean>	

$ vi HomeImpl2.java

public class HomeImpl2 implements Home {

	private My my;
	private My2 my2;
	private String name;
	private int age;

	public HomeImpl2(String name,My my,My2 my2,int age) {
		this.my=my;
		this.my2=my2;
		this.name=name;
		this.age=age;
	}

/ OK	,
/ we zien	,

337  INFO  App  - 
MyImpl Bar Baz,53



/ Einde AUTOWIRE BY CONSTRUCTOR

/ SPRING SCHEMA

/ Lees	,
http://www.springframework.org/schema/beans/spring-beans-4.1.xsd

<xsd:group name="beanElements">
<xsd:sequence>
<xsd:element ref="description" minOccurs="0"/>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="meta"/>
<xsd:element ref="constructor-arg"/>
<xsd:element ref="property"/>
<xsd:element ref="qualifier"/>
<xsd:element ref="lookup-method"/>
<xsd:element ref="replaced-method"/>
<xsd:any namespace="##other" processContents="strict" minOccurs="0" maxOccurs="unbounded"/>
</xsd:choice>
</xsd:sequence>
</xsd:group>
<xsd:attributeGroup name="beanAttributes">
<xsd:attribute name="name" type="xsd:string">...</xsd:attribute>
<xsd:attribute name="class" type="xsd:string">...</xsd:attribute>
<xsd:attribute name="parent" type="xsd:string">...</xsd:attribute>
<xsd:attribute name="scope" type="xsd:string">...</xsd:attribute>
<xsd:attribute name="abstract" type="xsd:boolean">...</xsd:attribute>
<xsd:attribute name="lazy-init" default="default" type="defaultable-boolean">...</xsd:attribute>
<xsd:attribute name="autowire" default="default">...</xsd:attribute>
<xsd:attribute name="depends-on" type="xsd:string">...</xsd:attribute>
<xsd:attribute name="autowire-candidate" default="default" type="defaultable-boolean">...</xsd:attribute>
<xsd:attribute name="primary" type="xsd:boolean">...</xsd:attribute>
<xsd:attribute name="init-method" type="xsd:string">...</xsd:attribute>
<xsd:attribute name="destroy-method" type="xsd:string">...</xsd:attribute>
<xsd:attribute name="factory-method" type="xsd:string">...</xsd:attribute>
<xsd:attribute name="factory-bean" type="xsd:string">...</xsd:attribute>
<xsd:anyAttribute namespace="##other" processContents="lax"/>
</xsd:attributeGroup>

<xsd:element name="bean">
<xsd:annotation>...</xsd:annotation>
<xsd:complexType>
<xsd:complexContent>
<xsd:extension base="identifiedType">
<xsd:group ref="beanElements"/>
<xsd:attributeGroup ref="beanAttributes"/>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
</xsd:element>

<xsd:element name="constructor-arg">
<xsd:annotation>
<xsd:documentation source="java:org.springframework.beans.factory.config.ConstructorArgumentValues">
<![CDATA[
Bean definitions can specify zero or more constructor arguments. This is an alternative to "autowire constructor". Arguments correspond to either a specific index of the constructor argument list or are supposed to be matched generically by type. Note: A single generic argument value will just be used once, rather than potentially matched multiple times (as of Spring 1.1). constructor-arg elements are also used in conjunction with the factory-method element to construct beans using static or instance factory methods.
]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element ref="description" minOccurs="0"/>
<xsd:choice minOccurs="0" maxOccurs="1">
<xsd:element ref="bean"/>
<xsd:element ref="ref"/>
<xsd:element ref="idref"/>
<xsd:element ref="value"/>
<xsd:element ref="null"/>
<xsd:element ref="array"/>
<xsd:element ref="list"/>
<xsd:element ref="set"/>
<xsd:element ref="map"/>
<xsd:element ref="props"/>
<xsd:any namespace="##other" processContents="strict"/>
</xsd:choice>
</xsd:sequence>


/ Einde SPRING SCHEMA

/ 13	.

/ we kunnen ook ctor-inject	,

$ vi HouseImpl.java

	public HouseImpl(String name) {
		this.name=name;
	}

$ vi spring-book_ch2.xml

  <bean 
    	id="house" 
    	class="my.test.own.spring_book.HouseImpl"
    >
        <property name="my" ref="my"/>
        <constructor-arg name="name" value="Foo Bar" />
        <property name="age" value="52"/>
    
    </bean>

/ We hoeven geen HouseImpl() ctor te def, want die uses Spring niet, 
/ maar als we MyImpl(String string) ctor alleen def, ERR, Spring heeft My() def ctor nodig	, 

/ 7	.


/ by type	,

$ vi spring-book_ch2.xml

    <bean 
    	id="house" 
    	class="my.test.own.spring_book.HouseImpl"
    	autowire="byType"
    >
        <constructor-arg name="name" value="Foo Bar" />
        <property name="age" value="52"/>
    
    </bean>

    <bean
    	id="my"
    	class="my.test.own.spring_book.MyImpl"
    	
    >
    </bean>

    <bean
    	id="my2"
    	class="my.test.own.spring_book.MyImpl2"
    >
    </bean>

/ we zien	, omdat er 2 kandidaten zijn	,

Caused by: org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type [my.test.own.spring_book.My] is defined: expected single matching bean but found 2: my,my2

/ 13	.

http://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html#beans-factory-autowire
/ 5.4.5
/ autowire	,

/ We hebben in spring-book in WorkImpl een autowire="constructor"	,
/ we hebben 2 My impls	, MyImpl, MyImpl2	,
/ dan kijkt hij naar de name van de arg	, 

public class WorkImpl implements Work {

	private You you;

	public WorkImpl(You you2) {
		this.you=you2;

	}

    <bean
    	id="you"
    	class="my.test.own.spring_book_annotations.YouImpl"
    >
    </bean>
    
    <bean
    	id="you2"
    	class="my.test.own.spring_book_annotations.YouImpl2"
    >
    </bean>

/ er zijn 2 kandidaten,  omdat hun type klopt	, dan kijkt hij naar de arg name	, en nu pakt hij dus YouImpl2, dus wordt er new YouImpl2 gedaan, 

/ als we 
    <bean
    	id="you2"
    	class="my.test.own.spring_book_annotations.YouImpl2"
    	autowire-candidate="false"
    >
    </bean>

/ dan pakt Spring YouImpl	, ondanks dat	,
	public WorkImpl(You you2) {
		this.you=you2;
	}

/ ook als er staat	,
	public WorkImpl(You you3) {
		this.you=you3;
	}
/ dan pakt hij YouImpl	,

/ 13	.




/ Einde SPRING XML

/ SPRING XML

/ ws 
/ project spring-book

/ 7	. 

/ Primitive types, String kunnen we NIET autowire byName, byType	, WEL constructor	,

/ we autowire de String name en int age property NIET byName, byType, omdat dat niet kan	,
/ we autowire de My my en My2 my2 WEL	, 

/ Je moet naar de 2 properties name en age kijken hoe injected	, 
/ Als <constructor-arg name="name"/> en <property name="age"/> dan moet er een HomeImpl(String name) ctor zijn	,
/ Als <property name="name"/> en <property name="age"/> dan moet er een HomeImpl() ctor zijn	,

$ vi HomeImpl.java
public class HomeImpl implements Home {

	private My my;
	private My2 my2;
	private String name;
	private int age;
	public HomeImpl(String name) {

		this.name=name;
	}
	public HomeImpl() {
	}
	public HomeImpl(My my,My2 my2,String name,int age){
		this.my=my;
		this.my2=my2;
		this.name=name;
		this.age=age;
	}
	
	public String say() {
		return getMy()+":"+getMy().say(name,age)+getMy2()+":"+getMy2().say(name, age)+name+age;
	}

$ vi spring-book_ch2.xml

    <bean 
    	id="home" 
    	class="my.test.own.spring_book.HomeImpl"
    	autowire="byName"												/ My, My2	,
    >
        <constructor-arg name="name" value="Foo Bar" />				
/ of	,
		<property name="name" ref="name"/>						

        <property name="age" value="52"/>	 
/ of	,
        <property name="age" ref="age"/>
    </bean>

    <bean
    	id="name"
    	class="java.lang.String"
    >
    	<constructor-arg value="Bar Baz"></constructor-arg>
    </bean>

    <bean
    	id="age"
    	class="java.lang.Integer"
    >
    	<constructor-arg value="55"></constructor-arg>
    </bean>

    <bean
    	id="my"
    	class="my.test.own.spring_book.MyImpl"
    >
    </bean> 
    
    <bean
    	id="my2"
    	class="my.test.own.spring_book.My2Impl"
    >
    </bean>

/ 13	. 

/ Primitive types, String kunnen we NIET autowire byName, byType, 
/ met constructor autowire kunnen we wel String beans inject, en Integer beans	, NIET 

$ vi HomeImpl.java
	public HomeImpl(My my,My2 my2,String name,int age){
		this.my=my;
		this.my2=my2;
		this.name=name;
		this.age=age;
	}

$ vi spring-book_ch2.xml


    <bean 
    	id="home" 
    	class="my.test.own.spring_book.HomeImpl"
    	autowire="constructor"
    >

    <bean
    	id="name"
    	class="java.lang.String"
    >
    	<constructor-arg value="Bar Baz"></constructor-arg>
    </bean>
    
    <bean
    	id="age"
    	class="java.lang.Integer"
    >
    	<constructor-arg value="55"></constructor-arg>
    </bean>

    <bean
    	id="my"
    	class="my.test.own.spring_book.MyImpl"
    >
    </bean> 
    
    <bean
    	id="my2"
    	class="my.test.own.spring_book.My2Impl"
    >
    </bean>

/ 13	. 

/ autowire byType , multiple possibilities -> ERR

$ vi spring-book_ch2.xml

   <bean 
    	id="home" 
    	class="my.test.own.spring_book.HomeImpl"
    	autowire="byType"
    >
        <!-- <constructor-arg name="name" value="Foo Bar" /> -->
        <property name="name" ref="name"/>
        <!-- <property name="age" value="52"/> -->
        <property name="age" ref="age"/>
    </bean>

    <bean
    	id="my"
    	class="my.test.own.spring_book.MyImpl"
    >
    </bean> 
    
    <bean
    	id="mya"
    	class="my.test.own.spring_book.MyImpl"    
    >
    </bean> 

/ 13	. 

/ autowire constructor	.

/ constructor autowire is byName	,
/ bij byName ging het om de property name (bepaald door getter/setter)	, bij constructor om de name van de ctor arg	, 

/ primitive type bean problemen	, String OK	,

/ Als we 	,
	public HomeImpl(My myb,My2 my2,String name){
		this.my=myb;
		this.my2=my2;
		this.name=name;	
	}
/ dan verwacht Spring een bean met id "myb", die My interface impl	,

    <bean
    	id="myb"
    	class="my.test.own.spring_book.MyImpl"    
    >
    </bean> 

/ MORGENOCHTEND
/ type ambiguities	, als ctor arg int	, 
/ bij constructor autowire	,als ctor arg Integer, werkt Integer bean OK


/ 7	. 

/ ws 
/ project spring-book	,

/ we komen later terug op String, Integer , int beans	, 

/ Nu werken we met Integer	, 
/ autowire byName, byType inj werken NIET met String, Integer	, we inject  ze explicit	, 
/ autowire ctor werkt WEL met String, Integer	, 

/ autowire ctor met int	?
/ TODO

    <bean 
    	id="homename" 
    	class="my.test.own.spring_book.HomeImpl"
    	autowire="byName"
    >
        <property name="name" ref="name"/>
        <property name="age" ref="age"/>
    </bean>
    
    <bean
    	id="hometype"
    	class="my.test.own.spring_book.HomeImpl"
    	autowire="byType"
    >
    	<property name="name" ref="name"/>
    	<property name="age" ref="age"/>
    </bean>
    
    <bean
    	id="homector"
    	class="my.test.own.spring_book.HomeImpl"
    	autowire="constructor"
    >
    </bean>

/ 7	. 

/ project spring-book	,

/ Par 2.5

/ spring beans zijn singletons	,

$ vi HomeImpl.java 
	public String say() {
		return getMy().toString();
	}

/ we hebben de 3 autowired beans hierboven	, we zien	,

481  DEBUG DefaultListableBeanFactory  - Returning cached instance of singleton bean 'homename'
481  INFO  App  - my.test.own.spring_book.MyImpl@300f8aa3
481  DEBUG DefaultListableBeanFactory  - Returning cached instance of singleton bean 'hometype'
481  INFO  App  - my.test.own.spring_book.MyImpl@300f8aa3
482  DEBUG DefaultListableBeanFactory  - Returning cached instance of singleton bean 'homector'
482  INFO  App  - my.test.own.spring_book.MyImpl@300f8aa3

/ Als we dat niet willen	, 
$ vi spring-book_ch2.xml

    <bean
    	id="my"
    	class="my.test.own.spring_book.MyImpl"
    	scope="prototype"														<-
    >
    </bean> 

512  DEBUG DefaultListableBeanFactory  - Returning cached instance of singleton bean 'homename'
512  INFO  App  - my.test.own.spring_book.MyImpl@300f8aa3
512  DEBUG DefaultListableBeanFactory  - Returning cached instance of singleton bean 'hometype'
512  INFO  App  - my.test.own.spring_book.MyImpl@4c56ebfb
512  DEBUG DefaultListableBeanFactory  - Returning cached instance of singleton bean 'homector'
512  INFO  App  - my.test.own.spring_book.MyImpl@5e9ed2e4

/ 7	. 

/ factory-method

$ vi spring-book_ch2.xml

   <bean 
   		id="stage" 
   		class="my.test.own.spring_book.Stage"
   		factory-method="getInstance"	
   	>
   </bean>

$ vi Stage.java

package my.test.own.spring_book;

public class Stage {

	private Stage(){}
	private static class StageSingletonHolder{
		static Stage instance=new Stage();
	}
	public static Stage getInstance(){				// MOET static	,
		return StageSingletonHolder.instance;
	}
}

$ vi App.java

package my.test.own.spring_book;

public class App 
{
    public static void main( String[] args )    {
       	Stage stage=(Stage)applicationContext.getBean("stage");
       	LOG.info(stage);
       	}

614  DEBUG DefaultListableBeanFactory  - Returning cached instance of singleton bean 'stage'
615  INFO  App  - my.test.own.spring_book.Stage@59e0b2fa

/ 7	. 

/ init-method, destroy-method	,

/ De init en destroy methods worden NIET via het interface called	, dus het zijn HomeImpl methods	, GEEN Home methods	,

$ vi App.java

        Home home=(Home)applicationContext.getBean("hometype");
        String string=home.say();
        LOG.info(string);

public class HomeImpl implements Home {

	private final static Logger LOG=Logger.getLogger(App.class);        }
	public void lock(){
		LOG.info("lock");
	}
	public void unlock(){
		LOG.info("unlock");
	}
}

$ vi spring-book_ch2.xml

    <bean
    	id="hometype"
    	class="my.test.own.spring_book.HomeImpl"
    	autowire="byType"
    	init-method="unlock"
    	destroy-method="lock"
    >
    	<property name="name" ref="name"/>
    	<property name="age" ref="age"/>
    </bean>

/ we zien	,
446  DEBUG DefaultListableBeanFactory  - Creating shared instance of singleton bean 'hometype'
446  DEBUG DefaultListableBeanFactory  - Creating instance of bean 'hometype'
446  DEBUG DefaultListableBeanFactory  - Eagerly caching bean 'hometype' to allow for resolving potential circular references
451  DEBUG DefaultListableBeanFactory  - Invoking init method  'unlock' on bean with name 'hometype'
451  INFO  App  - unlock
370  DEBUG DisposableBeanAdapter  - Invoking destroy method 'lock' on bean with name 'hometype'
370  INFO  App  - lock

/	7	.

/ we kunnen ook ipv of er naast	, HomeImpl implements InitializingBean,DisposableBean	, 

/ Deze methods worden dus called op homename, hometype, homector fcts	,

$ vi HomeImpl.java

public class HomeImpl implements Home ,InitializingBean,DisposableBean{

	public void lock(){
		LOG.info("lock");
	}
	public void unlock(){
		LOG.info("unlock");
	}
	public void afterPropertiesSet() throws Exception {
		LOG.info("afterPropertiesSet");
		
	}
	public void destroy() throws Exception {
		LOG.info("destroy");
		
	}

$ vi spring-book_ch2.xml
/ verandert niets	,

$ vi App.java
/ verandert niets	,
308  DEBUG DefaultListableBeanFactory  - Invoking afterPropertiesSet() on bean with name 'homename'
308  INFO  App  - afterPropertiesSet
311  DEBUG DefaultListableBeanFactory  - Invoking afterPropertiesSet() on bean with name 'hometype'
311  INFO  App  - afterPropertiesSet
311  DEBUG DefaultListableBeanFactory  - Invoking init method  'unlock' on bean with name 'hometype'
311  INFO  App  - unlock
315  DEBUG DefaultListableBeanFactory  - Invoking afterPropertiesSet() on bean with name 'homector'
315  INFO  App  - afterPropertiesSet
...
322  DEBUG DisposableBeanAdapter  - Invoking destroy() on bean with name 'homector'
322  INFO  App  - destroy
322  DEBUG DisposableBeanAdapter  - Invoking destroy() on bean with name 'hometype'
322  INFO  App  - destroy
322  DEBUG DisposableBeanAdapter  - Invoking destroy method 'lock' on bean with name 'hometype'
322  INFO  App  - lock
323  DEBUG DisposableBeanAdapter  - Invoking destroy() on bean with name 'homename'
323  INFO  App  - destroy

/ 7	. 

/ Ch3	, 

/ project spring-book	, 
/ package my.test.own.spring_book_ch3	, 

/ 13	. 

$ vi spring-book_ch3.xml

    <bean
    	id="hometype"
    	class="my.test.own.spring_book_ch3.HomeImpl"
    	autowire="byType"
    	init-method="unlock"
    	destroy-method="lock"
    	abstract="true"
    >
    	<property name="name" ref="name"/>
    	<property name="age" ref="age"/>
    </bean>

$ vi App.java

package my.test.own.spring_book_ch3;

public class App 
{
	private final static Logger LOG=Logger.getLogger(App.class);
    public static void main( String[] args )    {
        ConfigurableApplicationContext applicationContext=new ClassPathXmlApplicationContext("spring-book_ch3.xml");
       	{
        Home home=(Home)applicationContext.getBean("hometype");
        String string=home.say();
        LOG.info(string);
       	}
       	applicationContext.registerShutdownHook();

Exception in thread "main" org.springframework.beans.factory.BeanIsAbstractException: Error creating bean with name 'hometype': Bean definition is abstract

/ 13	. 

/ Lees	,
http://stackoverflow.com/questions/11273070/spring-autowiring-not-working-for-abstract-classes
http://blog.maaloe.com/2008/11/spring-autowired-doesnt-work-in.html

$ vi App.java

       {
        Home home=(Home)applicationContext.getBean("hometypechld1");
        String string=home.say();
        LOG.info(string);
        }
        {
        Home home=(Home)applicationContext.getBean("hometypechld2");
        String string=home.say();
        LOG.info(string);
        }

$ vi spring-book_ch3.xml

    <bean
    	id="hometype"
    	class="my.test.own.spring_book_ch3.HomeImpl"
    	autowire="byType"
    	init-method="unlock"
    	destroy-method="lock"
    	abstract="true"
    >
    	<property name="name" ref="name"/>
    	<property name="age" ref="age"/>
    </bean>

/ ERR	, my en my2 worden NIET inject	, 

$ vi spring-book_ch3.xml

    <bean
    	id="hometype"
    	class="my.test.own.spring_book_ch3.HomeImpl"
    	init-method="unlock"
    	destroy-method="lock"
    	abstract="true"
    >
    	<property name="name" ref="name"/>
    	<property name="age" ref="age"/>
       	<property name="my" ref="my"/>
    	<property name="my2" ref="my2"/>
    </bean>
/ OK	, 

/ TODO

/ Lees	, over autowire in abstract bean	,
http://stackoverflow.com/questions/3505421/injecting-fields-via-spring-into-entities-loaded-by-hibernate
http://forum.spring.io/forum/spring-projects/container/46815-problem-with-autowired-in-abstract-class




    








/ Einde SPRING XML

/ WICKET REPEATERS

/ 7	. 

public class RepeatingView extends AbstractRepeater
public abstract class ListView<T> extends AbstractRepeater
public abstract class RefreshingView<T> extends RepeatingView

/ 7	. 

/ ListView is net als RepeatingView	,

			<div wicket:id="persons" style="display: table-row;">
				<div wicket:id="fullName" style="display: table-cell;"></div>
				<div wicket:id="address" style="display: table-cell;"></div>

  	add(new ListView<Person>("persons", persons) {
		@Override
		protected void populateItem(ListItem<Person> item) {
	   		item.add(new Label("fullName", new PropertyModel(item.getModel(), "fullName")));

/ we zien in HTML net zoveel	, 
			<div wicket:id="persons" style="display: table-row;">
als dat er persons zijn	, dus net als RepeatingView	,

/ De naam ListView is verwarrend: ListView is de view van 1 van de items uit de list	, 

/ 7	. 

/ Ook DataView is de view van 1 row	,

	<tr wicket:id="rows">
	   <td wicket:id="dataRow"></td>

DataView<Person> dataView = new DataView<Person>("rows", listDataProvider) {

  @Override
  protected void populateItem(Item<Person> item) {
    Person person = item.getModelObject();
    RepeatingView repeatingView = new RepeatingView("dataRow");
    repeatingView.add(new Label(repeatingView.newChildId(), person.getName()));
    repeatingView.add(new Label(repeatingView.newChildId(), person.getSurename()));

/ 7	. 

/ ListView moet een array of model met array 	, DataView een IDataProvider	, 





/ Einde WICKET REPEATERS

/ POSTGRESQL

/ Lees	,
https://wiki.postgresql.org/wiki/Disk_Usage

geosco0706p=# select pg_database_size('kramp0706a');
 pg_database_size 
------------------
      14503805444
(1 row)

geosco0706p=# select pg_size_pretty(pg_database_size('kramp0706a'));
 pg_size_pretty 
----------------
 14 GB
(1 row)

/ we kunnen ook pg_catalog. voor beide fcts set	, 
/ TODO

/ Einde POSTGRESQL

/ POSTGRES

/ Lees	, 
https://www.postgresql.org/docs/9.4/static/datatype-oid.html

/ Einde POSTGRES

/ WICKET TABLES

public abstract class DataView<T> extends DataViewBase<T>

public class DataTable<T, S> extends Panel implements IPageableItems
        private final DataGridView<T> datagrid;
        public DataTable(final String id, final List<? extends IColumn<T, S>> columns,
                datagrid = newDataGridView("rows", columns, dataProvider);
        protected DataGridView<T> newDataGridView(String id, List<? extends IColumn<T, S>> columns, IDataProvider<T> dataProvider)
        {
                return new DefaultDataGridView(id, columns, dataProvider);
        }
        private class DefaultDataGridView extends DataGridView<T>

public class DataGridView<T> extends AbstractDataGridView<T>

public abstract class AbstractDataGridView<T> extends DataViewBase<T>


/ Einde WICKET TABLES


/ SPRING ANNOTATIONS 

/ Lees	,
http://www.journaldev.com/2410/spring-dependency-injection-example-with-annotations-and-xml-configuration

/ Lees,
http://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html#beans-factory-autowire
/ 5.2.1 Configuration metadata	,
/ we zien de link 'Java-based configuration'	,
http://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html#beans-java
/ TODO

/ Lees	,
http://stackoverflow.com/questions/7414794/difference-between-contextannotation-config-vs-contextcomponent-scan
/ Lees	,
http://docs.spring.io/spring/docs/3.0.x/spring-framework-reference/html/beans.html#beans-annotation-config
/ Lees	,
http://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html#beans-factory-autowire

/ Lees	,
http://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html#beans-annotation-config

/ MORGEN	,
http://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html#beans-annotation-config
http://www.javabeat.net/difference-resource-autowired-inject-spring-injection/
http://blogs.sourceallies.com/2011/08/spring-injection-with-resource-and-autowired/



/ we moeten 	,

$ vi spring-book-annotations.xml

<beans 
    xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"				/ !
    xsi:schemaLocation="http://www.springframework.org/schema/beans	
    	http://www.springframework.org/schema/beans/spring-beans.xsd
    	http://www.springframework.org/schema/context 						/ !
    	http://www.springframework.org/schema/context/spring-context.xsd"
>

    <context:annotation-config></context:annotation-config>
	
    <bean 
    	id="house" 
    	class="my.test.own.spring_book_annotations.HouseImpl"
    >
        <constructor-arg name="name" value="Foo Bar" />
        <property name="age" value="52"/>
    </bean>
<!--
	autowire="byName"
-->

    <bean
    	id="my"
    	class="my.test.own.spring_book_annotations.MyImpl"
    >
    </bean> 
    
    <bean
    	id="my2"
    	class="my.test.own.spring_book_annotations.MyImpl2"
    >
    </bean>

$ vi HouseImpl.java 

public class HouseImpl implements House {

	private My my;
	public My getMy() {
		return my;
	}
	@Autowired
	public void setMy(My my) {
		this.my = my;
	} 

/ 7	. 

/ We kunnen @Autowired vervangen door @Inject	, 
/ we hoeven in spring config file NIETS te doen, zoals wel voor @Autowired met context, maar we moeten wel een POM dep add	,
	<dependency>
	    <groupId>javax.inject</groupId>
	    <artifactId>javax.inject</artifactId>
	    <version>1</version>
	</dependency>

/ 7	. 

/ @Autowired setMy(...)	, dus op een setter	,

/ Zonder annots	, dus 
<bean 	id="house" 
	class="...HouseImpl"
	autowired="byName"
> 
/ bepaalt de property name welke  bean wordt inject	,

/ Hier wordt <bean id="my2" class="...MyImpl2" inject	,
	public void setMy2(My my) {
		this.my = my;
	}

/ Als er @Autowired op staat, bepaalt de name van het arg welke bean wordt inject,	

/ Hier wordt dus bean <bean id="my" class="...MyImpl>  inject	, 

public class HouseImpl implements House {
	@Autowired
	public void setMy2(My my) {
		this.my = my;
	}

/ Hier wordt dus bean <bean id="my2" class="...MyImpl2>  inject	, 
	@Autowired
	public void setMy2(My my2) {
		this.my = my2;
	}

/ 7	. 

/ op een ctor werkt het wel precies als 	, 
<bean 
	id="work" 
    	class="my.test.own.spring_book_annotations.WorkImpl"
 	autowire="constructor"
>
</bean>

/ nu wordt <bean id="you2" class="...YouImpl2"> inject	,
public class WorkImpl implements Work {
	@Autowired
	public WorkImpl(You you2) {
		this.you=you2;

	}

/ nu wordt <bean id="you" class="...YouImpl"> inject	,
public class WorkImpl implements Work {
	@Autowired
	public WorkImpl(You you) {
		this.you=you;

	}

/ 7	.

$ vi HouseImpl.java
	@Autowired
	private My my2;
	public My getMy() {
		return my2;
	}

	public void setMy(My my) {
		this.my2 = my;
	}

/ Nu wordt <bean id="my2" class="...MyImpl2"> inject	, dus hij kijkt naar de name van de var	,

/ 7	.

/ Dus nogmaals	, 

$ vi HouseImpl.java
	private My my2;
	public My getMy2() {
		return my2;
	}
	@Autowired
	public void setMy2(My my) {
		this.my2 = my;
	}

/ Nu wordt <bean id="my" class="...MyImpl"> inject	,

/ 7	.

/ SAMENVATTING

/ spring-book project

/ 13	. 

/ setter inj	,

$ vi HouseImpl.java

	private My my;
	public void setMy2(My my) {
		this.my = my;
	}


$ vi spring-book_ch2.xml

    <bean 
    	id="house" 
    	class="my.test.own.spring_book.HouseImpl"
    	autowire="byName"
    >
...
    </bean>


    <bean
    	id="my"
    	class="my.test.own.spring_book.MyImpl"
    	
    >
    </bean> 
    
    <bean
    	id="my2"
    	class="my.test.own.spring_book.MyImpl2"
    	
    >
    </bean>

/ Als we autowire="byName"	, dan wordt MyImpl2 inject,	 want de property heet my2, omdat de setter zo heet	,

/ Als we autowire="byType", hebben we ERR, want er zijn er 2	,

/ 13	. 

/ ctor inj	,

$ vi WorkImpl.java

	private You you;
	public WorkImpl(You you2) {
		this.you=you2;
	}

$ vi spring-book_ch2.xml

   <bean
    	id="you"
    	class="my.test.own.spring_book.YouImpl"
    >
    </bean>
    
    <bean
    	id="you2"
    	class="my.test.own.spring_book.YouImpl2"
    >
    </bean>

/ ctor kijkt eerst naar de type	, als we meer zijn, dan kijkt hij naar de name van ctor arg	, dus hier zal hij YouImpl2 inj	,

///////////////////////////////////////////////////////////////////
/ 7	. 

/ project spring-book-annotations

$ vi HouseImpl.java

	private My my2;
	
	@Autowired
	public void setMy2(My my) {
		this.my2 = my;
	}

$ vi spring-book-annotations.xml

	<context:annotation-config></context:annotation-config>

   <bean 
    	id="house" 
    	class="my.test.own.spring_book_annotations.HouseImpl"
    >
...
    </bean>

   <bean
    	id="my"
    	class="my.test.own.spring_book_annotations.MyImpl"
	autowire-candidate="true/false"
    >
    </bean> 
    
    <bean
    	id="my2"
    	class="my.test.own.spring_book_annotations.MyImpl2"
    >
    </bean>

////////////////////////////////////////////////
/ @Autowired op setter is als ctor inj bij XML	,

/ Dus op een setter en op ctor kijkt hij NIET naar de property name my2 in dit geval	, hij kijkt naar type van arg, My hier 	, en inj een inst	, als er meerdere zijn kijkt hij naar de name van arg	, 

/ we kunnen ook	,
	@Autowired
	private My my;

/ Hij kijkt naar de type, My dus	, en als er meerdere zijn, kijkt hij naar de name van de var	, 
/ dus als var my heet, en we autowire-candidate="false" de id="my" bean, dan inj hij MyImpl2	, als we autowire-candidate="true" de id="my" bean, dan inj hij de id="my" bean, omdat de var zo heet	,


/ dus	,

public class HomeImpl implements Home {
	private My my;
	@Autowired public void setMy2(My my2) {
		this.my = my2;
	}
public class WorkImpl implements Work {
	@Autowired
	public WorkImpl(You you2) {
		this.you=you2;
	}
spring.xml
   	<bean id="my" class="my.test.own.spring_book_annotations.MyImpl" > </bean> 
    <bean id="my2" class="my.test.own.spring_book_annotations.MyImpl2" > 
   	<bean id="you" class="my.test.own.spring_book_annotations.YouImpl" > </bean>
    <bean id="you2" class="my.test.own.spring_book_annotations.YouImpl2" > 

public class MyImpl implements My {
public class MyImpl2 implements My {
public class YouImpl implements You {
public class YouImpl2 implements You {


/ De property heet my2	, maar dat doet er niet toe	,
/ het type van arg is My	, en als er 2 kandidaten zijn	, MyImpl implements My	, en MyImpl2 implements My	, dan kijkt hij naar de name van arg	, my2 hier	, en kiest hij MyImpl2, omdat deze bean id="my2"	, 
/ Maar het kijken naar name arg kun je overwrite met Qualifier	, 

//////////////////////////////////////////////////////

/ 7	. 

////////////////////////////////////////////
/ @Resource = byName in XML	,

$ vi HouseImpl.java

	private My my;
	
	@Resource public void setMy2(My my) {
		this.my = my;
	}

public class MyImpl implements My {
public class MyImpl2 implements My {


$ vi spring-book-annotations.xml

   <bean id="my" class="my.test.own.spring_book_annotations.MyImpl" > </bean> 
   <bean id="my2" class="my.test.own.spring_book_annotations.MyImpl2" > </bean>

/ Spring inst een MyImpl2 	, want de prop heet my2	, omdat setMy2	, dus pakt hij de bean met id="my2"	,
/ Maar deze moet dan wel van type My zijn	, want dat is de type van de injected (arg)	, 
/ dus als 
public class MyImpl2 implements My2 {
/ dan  ERR	, 

/ @Resource is byName	, en kan niet op een ctor	,

/ Einde SAMENVATTING


///////////////////////////////////////////////////////////
/ 7	. 

/ spring-book-annotations project	, 

/ qualifier	,

$ vi HouseImpl.java

	private My my;
	
	@Autowired @Qualifier("sub") public void setMy2(My my2) {
		this.my = my2;
	}

/ 13	. 

/ we kunnen qualifier in XML 

$ vi spring-book-annotations.xml

	<context:annotation-config></context:annotation-config>

    
    <bean id="my" class="my.test.own.spring_book_annotations.MyImpl" >
    	<qualifier value="sub"></qualifier>
    </bean> 
    
    <bean id="my2" class="my.test.own.spring_book_annotations.MyImpl2" >
        	<qualifier value="sub2"></qualifier>
    </bean>

/ Gezien de type My van de inject zijn er 2 mog	, zonder qualifier kiest spring bean my2	, dus een MyImpl2 inst	, maar de qualifier kiest hij bean my, dus een MyImpl inst	, 

/ 13	. 

/ we kunnen qualifier in Java	,

$ vi spring-book-annotations.xml

	<context:annotation-config></context:annotation-config>
    
    <bean id="my" class="my.test.own.spring_book_annotations.MyImpl" >
    </bean> 
    
    <bean id="my2" class="my.test.own.spring_book_annotations.MyImpl2" >
    </bean>

$ vi MyImpl.java 
@Qualifier("sub")
public class MyImpl implements My {
...

$ vi MyImpl2.java 
@Qualifier("sub2")
public class MyImpl implements My {
...


////////////////////////////////////////////////

/ 7	. 

/ lees	,
/ geef in google	,
spring @Resource
http://blogs.sourceallies.com/2011/08/spring-injection-with-resource-and-autowired/
http://www.javabeat.net/difference-resource-autowired-inject-spring-injection/

/ @Resource is in Java 7	, 
$ vi pom.xml
...
 <properties>
...
    <compiler.version>3.2</compiler.version>
  </properties>
  <build>
  	<plugins>
  		<plugin>
  			<groupId>org.apache.maven.plugins</groupId>
        		<artifactId>maven-compiler-plugin</artifactId>
        		<version>${compiler.version}</version>
        		<configuration>
          			<source>1.7</source>
          			<target>1.7</target>
        		</configuration>
  		</plugin>
  	</plugins>
  </build>

$ vi HouseImpl.java

	private My my;
	
	public My getMy2() {
		return my;
	}
	@Resource
	public void setMy2(My my) {
		this.my = my;
	}

$ vi spring-book-annotations.xml

   <bean
    	id="my"
    	class="my.test.own.spring_book_annotations.MyImpl"
    >
    </bean> 
    

    <bean
    	id="my2"
    	class="my.test.own.spring_book_annotations.MyImpl2"
    >
    </bean>

/ Spring inst een MyImpl2 	, want de prop heet my2	, omdat setMy2	,

/ @Resouce is byName	, en kan niet op een ctor	,

/ Einde SPRING ANNOTATIONS


/ SPRING ANNOTATIONS 2

/ project spring-book-annotations2

/ 7	.

/ we kunnen @Component use, ipv in XML <bean id="..." class="...">

/ 13	. 

/ er is 1 impl type voor intf type My	,

$ vi HouseImpl.java

	private My my;
	@Autowired
	public void setMy(My my) {
		this.my = my;
	}

$ vi MyImpl.java

@Component
public class MyImpl implements My {

$ vi MyImpl2.java

@Component
public class MyImpl2 implements My22 {


$ vi spring-book-annotations2.xml

 		<context:component-scan base-package="my.test.own.spring_book_annotations2"></context:component-scan>

/ Deze is overbodig geworden	,
<!-- 	<context:annotation-config></context:annotation-config>
 -->	

/ Deze is overbodig geworden	,
<!--    <bean
    	id="my"
    	class="my.test.own.spring_book_annotations2.MyImpl"
    	
    >
    </bean> 
    
    <bean
    	id="my2"
    	class="my.test.own.spring_book_annotations2.MyImpl2"
    	
    >
    </bean> -->

/ een inst van MyImpl wordt inj	, want alleen MyImpl impl My	,

/ 13	. 

/ Als we meerdere impl types hebben van My	, moeten we @Qualifier use	,

$ vi HouseImpl.java

	private My my;
	@Autowired
	@Qualifier("my2")
	public void setMy(My my) {
		this.my = my;
	}

$ vi MyImpl.java

@Component
@Qualifier("my")
public class MyImpl implements My {

$ vi MyImpl2.java

@Component
@Qualifier("my2")
public class MyImpl2 implements My{

/ Een inst van MyImpl2 wordt inj,  want er zijn nu 2 types, MyImpl en MyImpl2	, en de qualifier zegt dat het MyImpl2 moet zijn	,

/ 7	.

/ @Bean op een producer method	,

/ 13	. 

/ als we een producer method maken, kunnen we de impl type NIET als bean annot met @Component	, als we dat WEL doen, krijgen we not unique exc	,
/ maar als we het inderdaad WEL doen, moeten we met @Qualifier werken 	,


$ vi HomeImpl.java

	private My my;
	@Autowired
	public void setMy(My my) {
		this.my = my;
	}

$ vi MyImpl.java

public class MyImpl implements My {

$ vi MyProducer.java

@Component
public class MyProducer {
	@Bean
	public My getMy(){
		return new MyImpl();
	}
}

/ OK

/ 13	. 

/  We maken MyImpl toch ook tot een bean	,

$ vi HomeImpl.java

	private My my;
	@Autowired
	@Qualifier("myp")
	public void setMy(My my) {
		this.my = my;
	}

$ vi MyImpl.java

@Component
@Qualifier("my")
public class MyImpl implements My {


$ vi MyProducer.java

@Component
public class MyProducer {
	@Bean
	@Qualifier("myp")
	public My getMy(){
		return new MyImpl();
	}
}

/ OK

/ 7	.

/ we kunnen ook een MyImplp class type maken	, 

@Component
public class MyProducer {
	@Bean
	@Qualifier("myp")
	public My getMy(){
		return new MyImplp();
	}
}

public class MyImplp implements My {

	public String say(String string,int i) {
		return "Myp "+string+","+i;
	}

}

public class HomeImpl implements Home {

	private My my;
	public My getMy() {
		return my;
	}
	@Autowired
	@Qualifier("myp")
	public void setMy(My my) {
		this.my = my;
	}

/ we zien	,

350  INFO  App  - Myp Foo Bar,52

/ 7	. 

/ Bij ctor inj kunnen we ook @Qualifier	,

public class WorkImpl implements Work {

	private You you;

	@Autowired
	public WorkImpl(@Qualifier("sub2") You you2) {
		this.you=you2;

	}

@Component
@Qualifier("sub")
public class YouImpl implements You {

	public String say(String string,int i) {
		return "YouImpl "+string+","+i;
	}

}

@Component
@Qualifier("sub2")
public class YouImpl2 implements You {

	public String say(String string,int i) {
		return "YouImpl2 "+string+","+i;
	}

}

/ we zien	,

379  INFO  App  - Myp Foo Bar,52
379  INFO  App  - YouImpl2 Foo Bar,52

/ 7	. 

/ we zien in HomeImpl bij setter inj dat we @Qualifier op 2 plaatsen kunnen set	,

public class HomeImpl implements Home {

	private My my;
	@Autowired
	public void setMy(@Qualifier("myp")My my) {
		this.my = my;
	}

/ of	,

public class HomeImpl implements Home {

	private My my;
	@Autowired
	@Qualifier("myp")
	public void setMy(My my) {
		this.my = my;
	}
 
/ 7	.



/ Einde SPRING ANNOTATIONS 

/ SPRING JUNIT

/ 7	. 

/ Lees	,
http://docs.spring.io/spring/docs/current/spring-framework-reference/html/testing.html

/ 7	.

[eric@localhost Spring]$ git clone https://github.com/CodeSolid/tutorials.git CodeSolid
/ repo1

/ Lees	,
http://codesolid.com/spring-unit-testing-using-junit/

https://github.com/CodeSolid/tutorials

/ Lees	,
http://stackoverflow.com/questions/7414794/difference-between-contextannotation-config-vs-contextcomponent-scan

/ 7	. 

/ als we archetype-webapp use	, dan is er src/main/webapp	,  we moeten daarom	,

$ vi pom.xml

	<dependency>
		<groupId>javax.servlet</groupId>
		<artifactId>servlet-api</artifactId>
		<version>2.5</version>
		<scope>provided</scope>
	</dependency>

/ we kunnen	,

<web-app xmlns="http://java.sun.com/xml/ns/j2ee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"
         version="2.4">

    <display-name>Wicket Examples</display-name>
</web-app>

/ of	,
 
<web-app xmlns="http://java.sun.com/xml/ns/javaee" 
        	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
			xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
			version="2.5">
	display-name>Wicket Examples</display-name>
</web-app>

/ bij 2.4 staat er j2ee	, bij 2.5 javaee	,

/  7	.

/ we maken run config	,
spring-test-first-mvn-test	: mvn test
spring-test-first-mvn-test-debug	: mvn -Dmaven.surefire.debug test	, listens op 5005	,

/ we maken de debug config	,
spring-test-first-mvn-test-debug-remote	: mvn -Dmaven.surefire.debug test : project : spring-test-first, port: 5005	,

 /in  src/main/java	,

$ vi MyService.java
public interface MyService {
	 String serve();
	 void setPrinter(MyPrinter printer);
}

$ vi MyServiceImpl.java
@Component
public class MyServiceImpl implements MyService {

	@Autowired
	private MyPrinter printer;

	public void setPrinter(MyPrinter printer) {
		this.printer = printer;
	}
	public String serve() {
		return "Foo Bar";
	}
}

/ in src/main/resources	,
$ vi spring-test-first.xml
<beans 
	xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
    	http://www.springframework.org/schema/beans	http://www.springframework.org/schema/beans/spring-beans.xsd"
>
 		<context:component-scan base-package="my.own.spring_test_first"></context:component-scan>
 </beans>

/ in src/test/java

$ vi MyServiceTest.java

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration("classpath:spring-test-first.xml")
public class MyServiceTest {
	
	@Autowired
	private MyService myService;
	
	@Test
	public void first(){
		String res=myService.serve);
		Assert.assertEquals(res,"Foo Bar");
	}
}

/ we zien in first dat myService een MyServiceImpl is	,

/ 7	.

/ we maken meerdere tests	,

$ vi MyServiceTest.java

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration("classpath:spring-test-first.xml")
public class MyServiceTest {
	
	
	@Autowired
	private MyPrinter myPrinter;
	
	
	@Test
	public void printer(){
		String res=myPrinter.print();
		Assert.assertEquals(res,"Foo Bar");
	}
	@Autowired
	private MyService myService;
	
	@Test 
	public void service(){
		String res=myService.foo();
		Assert.assertEquals("Foo Bar", res);
	}
	
	@Autowired
	ConfigurableApplicationContext context;

	@Test	
	public void servcice2() {
		MyPrinter printer=context.getBean(MyPrinter.class);
		myService.setPrinter(printer);
		Assert.assertEquals("Foo Bar",myService.res());

	}

	@Autowired 
	private MyThing thing;
	
	@Test
	public void thing(){
		Assert.assertEquals(thing.doit(), "Do It");
	}

}

/ in service testen we WH 2 beans	, in service2 een 	,
/TODO

/ we zien	,
context	GenericApplicationContext  (id=45)	
/ TODO



/ 7	.

/ Lees	,
http://www.springbyexample.org/examples/simple-spring-transactional-junit4-test-code-example.html

/ 7	.

/ Lees	,
http://docs.spring.io/spring/docs/current/spring-framework-reference/html/testing.html
/ Maak met @Configuration @WebAppConfiguration	, en welke .xml worden dan read	?
/ TODO
 



/ Einde SPRING JUNIT

/ SPRING ANNOTATIONS

/ we kunnen de config xml helemaal vervangen	,
/ we moeten AnnotationConfigApplicationContext use ipv. ClassPathXmlApplicationContext (waarbij WH de xml in het classpath staat)	,

/ Lees	,
http://www.tutorialspoint.com/spring/spring_java_based_configuration.htm
http://docs.spring.io/spring-framework/docs/4.0.4.RELEASE/javadoc-api/org/springframework/context/annotation/Bean.html

$ vi MyServiceApp2.java

public class MyServiceApp2 {
	public static void main(String[] args) {
		ConfigurableApplicationContext context=new AnnotationConfigApplicationContext(MyConfig.class);
		MyService service=context.getBean(MyService.class);
		String res=service.serve();
		System.out.println(res);
		context.registerShutdownHook();
	}
} 

$ vi MyConfig.java

Configuration
@ComponentScan(basePackages="my.own.spring_test_first")
public class MyConfig {
}

$ vi MyPrinterImpl.java

@Component
public class MyPrinterImpl implements MyPrinter {
	public String print(){
		return "Foo Bar";
	}
}

$ vi MyServiceImpl.java

@Component
public class MyServiceImpl implements MyService {
	
	@Autowired
	private MyPrinter printer;
	
	public void setPrinter(MyPrinter printer) {
		this.printer = printer;
	}
	
	public String serve() {
		return printer.print();
	}

}

/ 7	. 

/ Lees	over @Bean	
http://www.tutorialspoint.com/spring/spring_java_based_configuration.htm
http://docs.spring.io/spring-framework/docs/4.0.4.RELEASE/javadoc-api/org/springframework/context/annotation/Bean.html

/ WH	,
/ we kunnen @Bean use in een produce method (in MyConfig)	, of @Component op de bean zelf set	,

$ vi MyConfig.java

@Configuration
@ComponentScan(basePackages="my.own.spring_test_first")
public class MyConfig {

	@Bean
	public MyThing getMyThing(){
		return new MyThingImpl();
	}
}

$ vi MyThngImpl.java

public class MyThingImpl implements MyThing {
	
	public String doit(){
		return "Do It";
	}
}

$ vi MyServiceTest.java

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(classes=MyConfig.class)
public class MyServiceTest {
	
	@Autowired 
	private MyThing thing;
	
	@Test
	public void thing(){
		Assert.assertEquals(thing.doit(), "Do It");
	}

}

/ 7	. 

/ Hoe kunnen we MyConfig use in de test?

$ vi MyServiceTest.java

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(classes=MyConfig.class)
public class MyServiceTest {

/ we DEDEN	,

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration("classpath:spring-test-first.xml")
public class MyServiceTest {

/ Lees	,
http://docs.spring.io/spring-framework/docs/4.1.6.RELEASE/javadoc-api/org/springframework/test/context/ContextConfiguration.html



 

/ Einde SPRING ANNOTATIONS

/ JUNIT

/ 7	. 

/ we maken maven-archetype-webapp project first-junit	,

/ we maken zelf src folder src/main/webapp	, met daarin WEB-INF/ en daarin web.xml

/ we hebben src code boek	,
[eric@localhost junitbook2]$ pwd
/home/eric/Devel/Java/Testing/junitbook2

/ 7	. 

/ In CalculatorTest kent eclipse assertEquals niet	, 
/ ga naar 
Window, preferences, Java, Editor, content assist, favorites
/ click new Type: org.junit.Assert
/ we zien added	,
org.junit.Assert.*

 we zien	,

import static org.junit.Assert.assertEquals;
		assertEquals(60, res,0);

/ we kunnen ook de static method Assert.assertEquals use	, we zien dan	,

/ we zien	,

import org.junit.Assert;
		Assert.assertEquals(60, res,0);

/ 7	.

/ debug een maven junit test	,

/ maak een run config	, 'junit-first with debug'	,
Base dir: /home/eric/Devel/Java/Testing/junit-first
goals: test -Dmaven.surefire.debug

/ maak een debug config	, remote java application	, 'junit debug remote'
project: junit-first
port :5005

/ set b's aan, 
/ run de test	, hij valt vanzelf in het b	,

/ 7	. 

$ vi Calculator.java

public class Calculator {
	public int add(int num1, int num2){
		return num1+num2;
	}
}

$ vi ParameterTest.java

import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

@RunWith(value=Parameterized.class)
public class ParameterTest {
	
	private  int exp, one, two;
	
	@Parameters 
	public static Collection<Integer[]>_(){
		Integer[][]a={{2,1,1},{3,2,1},{4,3,1}};
		List<Integer[]>ints=Arrays.asList(a);
/ of	,

		List<Integer[]>ints=new ArrayList<Integer[]>();
/ of	,
		Set<Integer[]>ints=new HashSet<Integer[]>();
		ints.add(new Integer[]{2,1,1});
		ints.add(new Integer[]{-4,-6,2});		
		ints.add(new Integer[]{10,7,3});

		return ints;
	}
	
	public ParameterTest(Integer exp,Integer one,Integer two) {
		this.exp=exp;
		this.one=one;
		this.two=two;
	}
	
	@Test 
	public void add(){
		Calculator calculator=new Calculator();
		Integer res=calculator.add(one,two);
		Assert.assertEquals(exp,res,0);
	}
}	

/ Er is maar 1 eis	, deze method moet static	, 
	@Parameters 
	public static Collection<Integer[]>_(){

/ 7	. 

/ Wat NIET kan is de Integer[] vervangen door een ArrayList<Integer>	,

/ Lees	,
http://stackoverflow.com/questions/16956720/how-to-create-an-2d-arraylist-in-java

$ vi ParameterTest.java

	@Parameters 
	public static Collection<List<Integer>>__(){
		
		List<List<Integer>>ints=new ArrayList<List<Integer>>();
		for(int i=0;i<3;i++){
			ints.add(new ArrayList<Integer>());
		}
		ints.get(0).add(2);
		ints.get(0).add(1);
		ints.get(0).add(1);
		ints.get(1).add(3);
		ints.get(1).add(2);
		ints.get(1).add(1);
	

		return ints;
	}

/ we zien	,
add[0](my.test.own.junit_first.ParameterTest)  Time elapsed: 0.007 sec  <<< ERROR!
/ en	,
add[1](my.test.own.junit_first.ParameterTest)  Time elapsed: 0.007 sec  <<< ERROR!
/en 	,
add[2](my.test.own.junit_first.ParameterTest)  Time elapsed: 0.007 sec  <<< ERROR!
java.lang.IllegalArgumentException: wrong number of arguments
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:526)
	at org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters.createTestUsingConstructorInjection(BlockJUnit4ClassRunnerWithParameters.java:43)
	at org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters.createTest(BlockJUnit4ClassRunnerWithParameters.java:38)
	at org.junit.runners.BlockJUnit4ClassRunner$1.runReflectiveCall(BlockJUnit4ClassRunner.java:266)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.BlockJUnit4ClassRunner.methodBlock(BlockJUnit4ClassRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:27)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:252)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:141)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:112)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)

/ 7	.

/ Als we mvn test geven	, dan worden (default suite) alle tests run	,

/ we maken zelf een suite	,


$ vi AllTests.java

package my.test.own.junit_first;

import org.junit.runner.RunWith;
import org.junit.runners.Suite;
import org.junit.runners.Suite.SuiteClasses;

@RunWith(Suite.class)
@SuiteClasses({ CalculatorTest.class })
public class AllTests {

}

/ maak  run config	,
goals: test  -Dtest=my.test.own.junit_first.AllTests

/ We zien dat er 4 tests worden run	,
/ Met de default suite	, zien we	 
1 test run
3 tests run	,

/ 7	. 

/ als we CalculatorTest NIET willen run , comment out @Test
/ als we ParameterTest NIET willen run , comment out @Test EN @@RunWith(value=Parameterized.class)
/ TODO

/ 7	.

/ Omdat controller in de fixture, @Before init, hebben we het probleem niet , dat we 2 requests met dezelfde name add aan de ctrl	,
/ Daarom doen we het zelf	,

$ vi ControllerTest.java

	@Test
	public void processException(){
		controller.addHandler(request, exceptionHandler);
		controller.addHandler(request, exceptionHandler);

Running my.test.own.junit_first.ControllerTest
Tests run: 3, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.046 sec <<< FAILURE!
processException(my.test.own.junit_first.ControllerTest)  Time elapsed: 0.005 sec  <<< ERROR!
java.lang.RuntimeException: There is already a handler for Sample Request
...





/ Einde JUNIT

/ WICKET 

/ 7	.

$ vi Ch55.java

/ ListItem in ListView is WebMarkupContainer

		ListView<MenuItem> lview=new ListView<MenuItem>("lvmenu",menu) {
			@Override
			protected void populateItem(ListItem<MenuItem> item) {
				item.setOutputMarkupId(true);
				MenuItem menuItem=item.getModel().getObject();
				BookmarkablePageLink<Integer>link=new BookmarkablePageLink<Integer>("link"	,menuItem.getDestination());
				item.add(link);
				link.setOutputMarkupId(true);
				Label label=new Label("lcaption", menuItem.getCaption());
				link.add(label);
				label.setOutputMarkupId(true);
				
			}
		};


		RepeatingView rview=new RepeatingView("rvmenu");
		add(rview);
		List<MenuItem>menu=createMenu();
		int i=1001;
		for(MenuItem item:menu){
//			String id=rview.newChildId();
			String id=Integer.toString(i++);
			WebMarkupContainer container=new WebMarkupContainer(id);
			container.setOutputMarkupId(true);
			rview.add(container);
			BookmarkablePageLink<Integer>link=new BookmarkablePageLink<Integer>("link", item.getDestination());
			container.add(link);
			link.setOutputMarkupId(true);
			Label label=new Label("caption",item.getCaption());
			label.setOutputMarkupId(true);
			link.add(label);
		}
		}


$ vi Ch55.html

			<li wicket:id="lvmenu">
		        <a  wicket:id="link">
		            <span wicket:id="lcaption"></span>
		        </a>
		    </li>

	    <div wicket:id="rvmenu">
	        <a  wicket:id="link">
	            <span wicket:id="caption"></span>
	        </a>
	    </div>

/ RepeatingView is een tpl	, met .add	,  de children worden steeds herhaald	,
			WebMarkupContainer container=new WebMarkupContainer(id);
			rview.add(container);
/ de container wordt steeds herhaald	, krijgt 
/ de <div wicket:id="rvmenu"> is de container	,

/ het ListView is dit ook	, de ListItem is de container die steeds wordt herhaald,
/ de ListView zelf zien we niet	,

/ 7	.

/ we maken een list van textfields	, beide met repeating view , met en zonder een container	, 

/ repeatingview & id
/ TODO

/ zonder cdontainer zien we de <input>s naast elkaar	,
/ met container kunnen we ze onder elkaar set	, 

$ vi Ch55.html

		<h2>rvlisttext</h2>
		<input type="text" wicket:id="rvlisttext">

 
 		<h2>rvlistconttext</h2>
		<li wicket:id="rvlistconttext">
			<input type="text" wicket:id="text">
		</li>

$ vi CH55.java

		{
			RepeatingView rview=new RepeatingView("rvlisttext");
			add(rview);
			for(int i=0;i<5;i++){
				String id=Integer.toString(i+100);
				TextField<String>text=new TextField<String>(id, new Model("Foo Bar"));
				rview.add(text);
				text.setOutputMarkupId(true);
				boolean b=false;
			}
		}
			
		{
			RepeatingView rview=new RepeatingView("rvlistconttext");
			add(rview);
			for(int i=0;i<5;i++){
				String id=Integer.toString(i+100);
				WebMarkupContainer container=new WebMarkupContainer(id);
				container.setOutputMarkupId(true);
				rview.add(container);
				TextField<String>text=new TextField<String>("text", new Model("Foo Bar"));
				container.add(text);
				text.setOutputMarkupId(true);
				boolean b=false;
			}
		}
		






/ Einde WICKET 

/ OPENSTACK

/ 7	. 

https://www.openstack.org/
/ kies in menu: 'Docs'	,
http://docs.openstack.org/
/ we zien 'Installation guide for RHEL, Fedora, ...'	,
http://docs.openstack.org/juno/install-guide/install/yum/content/

/ of	,

https://fedoraproject.org/wiki/OpenStack
/ we zien de link naar	,
https://www.rdoproject.org/Quickstart


/ 7	. 

https://www.openstack.org/
/ kies in menu	,
Software, Getting started	,

http://www.openstack.org/software/start/
/ click 'Getting started'	,
/ click Books	,	 'Learn more'	,

http://docs.openstack.org/ops/

/ Einde OPENSTACK

/ AWK

/ 7	. 

/ we hebben log file met stack traces	,
/ we willen alleen de 'at com.mpbojects....' zien, en omdraaien	,


/ count lines	,
calhost LOGS]$ awk  '$0 ~ "\tat "{count++}END{print count}' LOG_MPO_81.txt 
2211
[eric@localhost LOGS]$ awk  'BEGIN{count=0}$0 ~ "\tat com.mpobjects"{count++}END{print count}' LOG_MPO_81.txt 
204

/ rm at org.springframework, at sun.... de rest zo laten	,
[eric@localhost LOGS]$ awk  '$0 ~ "at com.mpobjects"{print}$0 ~ "\tat " && $0 !~ "\tat com.mpobjects"{}$0 !~ "\tat "{print}' LOG_MPO_81.txt 

/ draai een stacktrace om 	, die op bepaalde regels staat	,
[eric@localhost LOGS]$ awk  '810<=NR && NR<=1147 && $0~"at com.mpobjects"' LOG_MPO_81.txt | awk '{l[n++]=$0}END{while(n--)print l[n]}'





/ Einde AWK

/ SELENIUM

/ 7	.

/ lees	,

https://sites.google.com/a/chromium.org/chromedriver/getting-started

http://docs.seleniumhq.org/docs/03_webdriver.jsp
https://code.google.com/p/selenium/wiki/ChromeDriver

/ we doen eerst vb van 03_webdriver.jsp, 
/ op getting-started staan ook voorbeelden (later), en hoe het moet met de chromedriver	 start, doen we nu al	, 

/ 7	.

/ Lees	,
https://code.google.com/p/selenium/issues/detail?id=2960

package org.openqa.selenium.support.ui;

public interface ExpectedCondition<T>  extends com.google.common.base.Function<org.openqa.selenium.WebDriver,T> {
}
The issue was ExpectedCondition interface extends com.google.common.base.Function that is present only in google-collections.jar. 

/ Is nu guava	,

/ 7	.

$ vi Selenium2Example.java

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.ExpectedCondition;
import org.openqa.selenium.support.ui.WebDriverWait;

public class Selenium2Example  {
    public static void main(String[] args) {
        // Create a new instance of the Firefox driver
        // Notice that the remainder of the code relies on the interface,
        // not the implementation.
        //System.setProperty("webdriver.chrome.driver", "path/to/chromedriver");
        WebDriver driver = new ChromeDriver();

        // And now use this to visit Google
        driver.get("http://www.google.com");
        // Alternatively the same thing can be done like this
        // driver.navigate().to("http://www.google.com");

        // Find the text input element by its name
        WebElement element = driver.findElement(By.name("q"));

        // Enter something to search for
        element.sendKeys("Cheese!");

        // Now submit the form. WebDriver will find the form for us from the element
        element.submit();

        // Check the title of the page
        System.out.println("Page title is: " + driver.getTitle());

        // Google's search is rendered dynamically with JavaScript.
        // Wait for the page to load, timeout after 10 seconds
        (new WebDriverWait(driver, 10)).until(new ExpectedCondition<Boolean>() {
            public Boolean apply(WebDriver d) {
                return d.getTitle().toLowerCase().startsWith("cheese!");
            }
        });
        // Should see: "cheese! - Google Search"
        System.out.println("Page title is: " + driver.getTitle());

        //Close the browser
        driver.quit();
    }
}


[eric@localhost Selenium]$ javac -g -classpath ./selenium-2.44.0/selenium-java-2.44.0.jar:./guava-18.0.jar  Selenium2Example.java 

/ lees	,
https://sites.google.com/a/chromium.org/chromedriver/getting-started

/ 7	. 

/ via	,
https://sites.google.com/a/chromium.org/chromedriver/getting-started
/ Lees	,
https://code.google.com/p/selenium/wiki/GettingStarted

/ 7	.

[eric@localhost Selenium]$ java -classpath ./selenium-2.44.0/selenium-java-2.44.0.jar:./guava-18.0.jar:.  Selenium2Example
Exception in thread "main" java.lang.NoClassDefFoundError: org/apache/http/protocol/HttpContext


/ Geef in google	,
jar org/apache/http/protocol/HttpContext
/ we zien httpcore	, we geven in google	,
httpcore jar
/ we komen op	,
https://hc.apache.org/downloads.cgi
[eric@localhost Selenium]$  pwd
/home/eric/Devel/Java/Selenium
[eric@localhost Selenium]$ tar xvzf ~/Downloads/httpcomponents-core-4.3.3-bin.tar.gz 

[eric@localhost Selenium]$ java -classpath ./selenium-2.44.0/selenium-java-2.44.0.jar:./guava-18.0.jar:.:./httpcomponents-core-4.3.3/lib/httpcore-4.3.3.jar  Selenium2Example
Exception in thread "main" java.lang.NoClassDefFoundError: org/apache/http/auth/Credentials
/ we moeten httpclient jar hebben,	
/ we komen weer op 	,
https://hc.apache.org/downloads.cgi
/ we doen	,
[eric@localhost Selenium]$  tar xvzf ~/Downloads/httpcomponents-client-4.3.6-bin.tar.gz 

[eric@localhost Selenium]$ java -classpath ./selenium-2.44.0/selenium-java-2.44.0.jar:./guava-18.0.jar:.:./httpcomponents-core-4.3.3/lib/httpcore-4.3.3.jar:./httpcomponents-client-4.3.6/lib/httpclient-4.3.6.jar  Selenium2Example
Exception in thread "main" java.lang.NoClassDefFoundError: com/google/gson/JsonParseException

/ we komen op 	,
https://code.google.com/p/google-gson/
/ we download van search.maven.org	,

[eric@localhost Selenium]$ java -classpath ./selenium-2.44.0/selenium-java-2.44.0.jar:./guava-18.0.jar:.:./httpcomponents-core-4.3.3/lib/httpcore-4.3.3.jar:./httpcomponents-client-4.3.6/lib/httpclient-4.3.6.jar:./gson-2.3.jar  Selenium2Example
Exception in thread "main" java.lang.NoClassDefFoundError: org/apache/commons/logging/LogFactory

/we geven in google,
jar org/apache/commons/logging/LogFactory
/ we doen	,
[eric@localhost Selenium]$ tar xvzf ~/Downloads/commons-logging-1.2-bin.tar.gz 

[eric@localhost Selenium]$ java -classpath ./selenium-2.44.0/selenium-java-2.44.0.jar:./guava-18.0.jar:.:./httpcomponents-core-4.3.3/lib/httpcore-4.3.3.jar:./httpcomponents-client-4.3.6/lib/httpclient-4.3.6.jar:./gson-2.3.jar:./commons-logging-1.2/commons-logging-1.2.jar  Selenium2Example
Exception in thread "main" java.lang.NoClassDefFoundError: org/apache/commons/exec/Executor

[eric@localhost Selenium]$ tar xvzf ~/Downloads/commons-exec-1.3-bin.tar.gz 

[eric@localhost Selenium]$ getsebool -a
unconfined_chrome_sandbox_transition --> on


/ Uiteindelijk	,

$ sudo setsebool -P unconfined_chrome_sandbox_transition 0
/ Helpt NIET	,

# grep chrome /var/log/audit/audit.log | audit2allow -M mypol
# semodule -i mypol.pp
/ TODO

# grep chronyd /var/log/audit/audit.log | audit2allow -M mypol
# semodule -i mypol.pp


/////////////////////
/ SELENIUM JAVA
[eric@localhost Selenium]$  java -classpath ./selenium-2.44.0/selenium-java-2.44.0.jar:./guava-18.0.jar:.:./httpcomponents-core-4.3.3/lib/httpcore-4.3.3.jar:./httpcomponents-client-4.3.6/lib/httpclient-4.3.6.jar:./gson-2.3.jar:./commons-logging-1.2/commons-logging-1.2.jar:./commons-exec-1.3/commons-exec-1.3.jar  Selenium2Example
Starting ChromeDriver 2.12.301324 (de8ab311bc9374d0ade71f7c167bad61848c7c48) on port 23538
Only local connections are allowed.
[0.617][WARNING]: PAC support disabled because there is no system implementation
Page title is: Google
Page title is: Cheese! - Google zoeken

/ we hoeven chromedriver niet zelf te start	, dat doet deze appl (onder een andere pprt dan 9515)	,



/ Dit hoeft NIET	,
/ we kunnen	,
[eric@localhost Selenium]$ PATH=$PATH:$(pwd)/chromedriver
/ of	, 
      	System.setProperty("webdriver.chrome.driver", "/home/eric/Devel/Java/Selenium/chromedriver");
        WebDriver driver = new ChromeDriver();

/ Wat is deze site	?
https://code.google.com/p/chromedriver/issues/detail?id=539

/ Lees	,
http://blog.varunin.com/2011/10/running-tests-on-google-chrome-using.html

/ Zoek op	,
selenium chrome automation extension has crashed


/ Einde SELENIUM

/ SELENIUM JUNIT

http://stackoverflow.com/questions/16893229/selenium-webdriver-and-junit-class-design
https://code.google.com/p/selenium/wiki/PageObjects

/ 7	. 

/ selenium ide	, 

[eric@localhost Selenium]$ pwd
/home/eric/Devel/Java/Testing/Selenium


/ Ga naar in firefox 	,
http://www.seleniumhq.org/download/
/ In het midden bij Selenium IDE zien we de link 2.8.0	,  click 'Install Now', hij installs ...

/ er verschijnt een icon rechts , 'Selenium IDE'	,click
/ click Options, options
Enable experimental features: check
Start recording immediately on open: check

/ hij is recording	, click wat	,

Options , format	, 
/ kies Java/JUnit4/Webdriver
/ kies daarna	,
File , save test case 
...
/ TODO

/ we cp de MyTestCase.java naar 	,
[eric@localhost Selenium]$ pwd
/home/eric/Devel/Java/Selenium
[eric@localhost Selenium]$ ls
chromedriver         gson-2.3.jar           httpcomponents-client-4.3.6  MyTestCase.class  Selenium2Example$1.class
commons-exec-1.3     guava-18.0.jar         httpcomponents-core-4.3.3    MyTestCase.java   Selenium2Example.class
commons-logging-1.2  hamcrest-core-1.3.jar  junit-4.12.jar               selenium-2.44.0   Selenium2Example.java

/ we hebben ook junit-4.12.jar, hamcrest-core-1.3.jar download	,

[eric@localhost Selenium]$ javac -g -classpath ./selenium-2.44.0/selenium-java-2.44.0.jar:./guava-18.0.jar:./junit-4.12.jar:./hamcrest-core-1.3.jar  MyTestCase.java 
[eric@localhost Selenium]$  java -classpath ./selenium-2.44.0/selenium-java-2.44.0.jar:./guava-18.0.jar:.:./httpcomponents-core-4.3.3/lib/httpcore-4.3.3.jar:./httpcomponents-client-4.3.6/lib/httpclient-4.3.6.jar:./gson-2.3.jar:./commons-logging-1.2/commons-logging-1.2.jar:./commons-exec-1.3/commons-exec-1.3.jar:./junit-4.12.jar:./hamcrest-core-1.3.jar org.junit.runner.JUnitCore MyTestCase
/ OK

/ SELENIUM 2.44.0 2.45.0
/ In selenium-java-2.44.0.jar zit de chrome driver	, in selenium-2.45.0.jar uit mvn NIET, 
/ TODO

/ Ook MyTestCaseSecond	, MyTestCaseThird	,
/ Vergeet niet package in de .java files te rm	,


/ 7	. 

/ we maken in eclipse-interfacing-testing	,
/ workspace-tesing	,

/ maven project vlg maven-archetype-quickstart
my.test.own:testing-first

[eric@localhost Testing]$ ls
my.test.own  Selenium
[eric@localhost Testing]$ pwd
/home/eric/Devel/Java/Testing

/ 7	. 

/ Op	,
http://docs.seleniumhq.org/download/
/ we download	,
Selenium Client & WebDriver Language Bindings
Java	2.45.0	2015-02-26	Download  	Change log  	Ja...
/ click Download	,
selenium-java-2.44.0.zip

[eric@localhost Selenium]$ pwd
/home/eric/Devel/Java/Testing/Selenium
[eric@localhost Selenium]$ unzip ~/Downloads/selenium-java-2.44.0.zip 
[eric@localhost Selenium]$ ls selenium-2.44.0/
CHANGELOG  libs  selenium-java-2.44.0.jar  selenium-java-2.44.0-srcs.jar

/ In de selenium-java-2.44.0.jar zit ook ChromeDriver.class	,
[eric@localhost Selenium]$ jar tvf selenium-2.44.0/selenium-java-2.44.0.jar  | grep Chrome
  3316 Thu Oct 23 13:02:10 CEST 2014 org/openqa/selenium/chrome/ChromeDriver.class

/ Maar in de maven deps dit dat niet zo	, daar zitten ze apart	,

[eric@localhost repository]$ jar tvf org/seleniumhq/selenium/selenium-java/2.45.0/selenium-java-2.45.0.jar | grep -i chrome
[eric@localhost repository]$ jar tvf org/seleniumhq/selenium/selenium-chrome-driver/2.45.0/selenium-chrome-driver-2.45.0.jar | grep -i chrome
  3308 Fri Feb 27 09:11:42 CET 2015 org/openqa/selenium/chrome/ChromeDriver.class

/ 7	. 

/ Op http://docs.seleniumhq.org/download/	, we zien	,
Third Party Drivers, Bindings, and Plugins
Chrome	 2.14	...
/ click op 2.14	,
/ we download van	,
http://chromedriver.storage.googleapis.com/index.html?path=2.14/
-rw-r-----. 1 eric eric   2162844 Nov 13 16:34 chromedriver_linux64.zip
/ we cp chromedriver naar /home/eric/bin	,

/	7	.

/ we maken maven project wicket-testing	,

/ In maven , eclipse (TODO) moet de test class met Test beginnen	,

/ In src/test/java	,
$ vi TestMyCaseSecond.java

	@Before
  	public void setUp() throws Exception {
	  	System.setProperty("webdriver.chrome.driver", "/home/eric/bin/chromedriver");
    	driver = new ChromeDriver();

$ vi pom.xml

	<dependencies>
	
		<dependency>
		    <groupId>org.seleniumhq.selenium</groupId>
		    <artifactId>selenium-java</artifactId>
		    <version>${selenium.version}</version>
		</dependency>

/ de pom van selenium-java heeft selenium-chrome als dep	, dus die hoeven we niet op te nemen hier	,

/ 7	. 

/ firefox is makkelijker	, we hoeven niet een firefoxdriver of zoiets te install	, geen webdriver.firefox.driver property	,

$ vi TestMyCaseSecond.java

	@Before
  	public void setUp() throws Exception {
    	driver = new FirefoxDriver();

$ vi pom.xml

	<dependencies>
	
		<dependency>
		    <groupId>org.seleniumhq.selenium</groupId>
		    <artifactId>selenium-java</artifactId>
		    <version>${selenium.version}</version>
		</dependency>

/ Dit is alles	, 

/ 7	.

/ we zien 	,

$ vi TestMyCaseSecond.java

 @Test
  public void testMyTestCaseSecond() throws Exception {
    driver.get(baseUrl + "/?gfe_rd=cr&ei=kET4VM-ROMuo-wba5IGIDA&gws_rd=ssl");
    driver.findElement(By.id("lst-ib")).clear();
    driver.findElement(By.id("lst-ib")).sendKeys("angular.js");
    driver.findElement(By.linkText("AngularJS — Superheroic JavaScript MVW Framework")).click();
    driver.findElement(By.linkText("View on GitHub")).click();
    driver.findElement(By.xpath("//li[2]/a/span[2]")).click();
 
/ Inderdaad	, By.id	, bij wicket verandert deze steeds	, en bovendien is de wicket:id value er nooit	, als deze "myid" is , dan zien we altijd "myid7" of "myid1a"	,


/ 7	. 

/ we hebben de Misc3 wicket app cp in wicket-testing	, en we hebben deze page record	,

$ vi TestMisc3.java

  @Before
  public void setUp() throws Exception {
//    driver = new FirefoxDriver();
	  System.setProperty("webdriver.chrome.driver", "/home/eric/bin/chromedriver");
	    driver = new ChromeDriver();
    baseUrl = "http://localhost:9090/";
    driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
  }

  @Test
  public void testMisc3() throws Exception {
    driver.get(baseUrl + "/wicket-testing");
    driver.findElement(By.cssSelector("input[type=\"submit\"]")).click();
    driver.findElement(By.id("b9")).click();
    driver.findElement(By.id("aj8")).click();
    driver.findElement(By.cssSelector("input[type=\"submit\"]")).click();
    driver.findElement(By.id("bc")).click();
    driver.findElement(By.id("ajb")).click();
  }

/ we record:
/ geef www.google.com
/ we doen niets	, dus zien we niets in de recording	, 
/ geef localhost:9090/wicket-testing
/ click de 3 buttons	,
/ geef www.google.com
/ we doen niets	, dus zien we niets in de recording	,
/ geef localhost:9090/wicket-testing
/ click de 3 buttons	,

/ het nut van www.google.com load is om localhost:9090/wicket-testing opnieuw te laten load	, zodat we andere id's krijgen	,

/ 7	. 

/ we hebben in project wicket-testing 2 runs	,
test
tomcat7:undeploy clean tomcat7:deploy	, skip tests: check	,

/ we deploy Misc3 met de 2de	, en test met de 1ste	, 
/ TODO (moet dit anders?)

/ we zien dat de TestMisc3 niet loopt	: element not found	,


/ 7	.

/ Lees	,
http://www.jdev.it/testing-a-wicket-application-with-selenium-ide/
/ en	,
https://cwiki.apache.org/confluence/display/WICKET/Selenium+Tips


[eric@calhost wicketPathLocatorBuilder]$ pwd
/home/eric/testing/wicketPathLocatorBuilder
[eric@localhost wicketPathLocatorBuilder]$ cat user-extensions.js

LocatorBuilders.add('wicketpath', function(e) {
        this.log.debug("wicketpath: e=" + e);
        if (e.attributes && e.hasAttribute("wicketpath")) {
            this.log.info("found attribute " + e.getAttribute("wicketpath"));
            return "//" + this.xpathHtmlElement(e.nodeName.toLowerCase()) +
                "[@wicketpath=" + this.attributeValue(e.getAttribute("wicketpath")) + "]";
        }
        return null;
    });
LocatorBuilders.order.unshift(LocatorBuilders.order.pop());

/ Ga naar Selenium IDE	,
/ click Options, Options...
/ geef in field bij Selenium ore extensions	,
/home/eric/testing/wicketPathLocatorBuilder/user-extensions.js

/ we record	, in project wicket-testing	, src/test/java	,
$ vi TestMisc3.java
...
/ TODO

/ Bij afspelen blijft hangen	,

$ vi TestIDE3.java
    driver.get(baseUrl);
    driver.findElement(By.id("lst-ib")).clear();
    driver.findElement(By.id("lst-ib")).sendKeys("angular.js");
    driver.findElement(By.linkText("AngularJS — Superheroic JavaScript MVW Framework")).click();
    driver.findElement(By.linkText("View on GitHub")).click();

/ Deze gaat OK	, 
/ we moeten wel angular.js geven	, als we angularjs geven	, loopt hij niet door	,
/ TODO

/ we kunnen ook op de command line	,
[eric@localhost wicket-testing]$ pwd
/home/eric/Devel/Java/Wicket/wicket-testing
[eric@localhost wicket-testing]$ mvn test
/ OK





/7	.

/ HIER HIER HIER

/ org.apache.wicket.Application.getDebugSettings() = org.apache.wicket.settings.DebugSettings inst	,
/ DebugSettings.setOutputComponentPath is deprecated	,

	public void init()
	{
		super.init();
		getDebugSettings().setOutputComponentPath(true);
/ deprecated	,
/ of	,
		getDebugSettings().setComponentPathAttributeName("wicketpath");
/ OK	,





$ vi WicketApplication.java

	@Override
	public void init()
	{
		super.init();
		getDebugSettings().setOutputComponentPath(true);
//		getMarkupSettings().setStripWicketTags(true);


/ we hoeven in HTML niets te doen	,  net als getMarkupSettings().setStripWicketTags komt in de uiteindelijke HTML een wicketpath attr	,



/ 7	.

[eric@localhost pnloms]$ env | grep SERVER
TMS_SERVER_TYPE=development

/ Op mposerv11 gaat het anders	,
[eric@localhost pnloms]$ ssh mposerv11
eric@mposerv11:~$ cd /local/apps/jboss-4.0.5.GA/server/pnloms/
eric@mposerv11:/local/apps/jboss-4.0.5.GA/server/pnloms$  less run.conf 
export TMS_SERVER_TYPE=test

/ 7	. 

/ in proj. wicket-testing	,

/ Lees	,
http://maven.apache.org/surefire/maven-surefire-plugin/examples/inclusion-exclusion.html

/ in eclipse (of de surefire plugin) moet  de junit test file heten *Test.java of Test*.java, anders doet mvn test niets	,
/ TODO

/ Doe met de hand	,
/ See hierboven bij SELENIUM 2.44.0 2.45.0, in selenium-2.45.0.jar uit mvn repo zit geen chrome driver, in in selenium-java-2.44.0.jar in /home/eric/Devel/Java/Testing/Selenium wel	,
/ TODO




/ Einde SELENIUM JUNIT

/ SELENIUM JUNIT MAVEN

/ 7	. 

$ vi pom.xml

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<skip>true</skip>
				</configuration>
				<executions>
					<execution>
						<phase>integration-test</phase>
						<goals>
							<goal>test</goal>
						</goals>
						<configuration>
							<skip>false</skip>
						</configuration>
					</execution>
				</executions>
			</plugin>

/ we moeten 
$ mvn integration-test

/ NIET 
$ mvn test

/ Geef in google	,
maven integration-test phase
/ Lees	,
https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html

/ we zien de lifecycle	,
validate - validate the project is correct and all necessary information is available
compile - compile the source code of the project
test - test the compiled source code using a suitable unit testing framework. These tests should not require the code be packaged or deployed
package - take the compiled code and package it in its distributable format, such as a JAR.
integration-test - process and deploy the package if necessary into an environment where integration tests can be run

/ Dus test komt te vroeg	, eerst moet blijkbaar package	,

/ We hoeven niet eerst tomcat7:deploy	 voor integration-test	,
/ we kunnen: clean integration-test

/ 7	. 

/ geef in google,	
maven-surefire-plugin test class name
/ Lees	,
http://maven.apache.org/surefire/maven-surefire-plugin/examples/inclusion-exclusion.html

By default, the Surefire Plugin will automatically include all test classes with the following wildcard patterns:

"**/Test*.java" - includes all of its subdirectories and all Java filenames that start with "Test".
"**/*Test.java" - includes all of its subdirectories and all Java filenames that end with "Test".
"**/*TestCase.java" - includes all of its subdirectories and all Java filenames that end with "TestCase".
If the test classes do not follow any of these naming conventions, then configure Surefire Plugin and specify the tests you want to include.
...

/ Dus XTestIDE.java zal niet run, tenzij je extra configure	,

/ we noemen ze	,
XFirefoxIDE2Test.java
XFirefoxIDE3Test.java
XChromeIDE4Test.java
XFirefoxIDETest.java

/we willen alleen in chrome test	,

$ vi pom.xml
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<skip>true</skip>
					<excludes>
						<exclude>**/*Firefox*.java</exclude>
					</excludes>
				</configuration>
				<executions>
					<execution>
						<phase>integration-test</phase>
						<goals>
							<goal>test</goal>
						</goals>
						<configuration>
							<skip>false</skip>
						</configuration>
					</execution>
				</executions>
			</plugin>


/ 7	. 

/ we hoeven alleen dep. selenium-java   te nemen, 
/ want dan ook selenium-chrome-driver	, selenium-firefox-driver, ... 

$ vi pom.xml

	<properties>
		<selenium.version>2.48.2</selenium.version>

	<dependencies>
		<dependency>
	        <groupId>org.seleniumhq.selenium</groupId>
	        <artifactId>selenium-java</artifactId>
	        <version>${selenium.version}</version>
	    </dependency>

$ vi MySeleniumTest.java

  @Before
  public void setUp() throws Exception {
    driver = new ChromeDriver();
    baseUrl = "http://localhost:9090/";
    driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
  }

/ we moeten chromedriver	, dat een exec is	, in ons $PATH set	, 
[eric@localhost bin]$ unzip -l ~/Downloads/chromedriver_linux64
Archive:  /home/eric/Downloads/chromedriver_linux64.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
  4827288  10-27-2014 02:26   chromedriver
---------                     -------
  4827288                     1 file

/ we hebben hem (via een soft link) in /home/eric/bin	, maar misschien is /usr/local/bin beter	,
/ TODO

/ als we de link anders willen noemen	, 
[eric@localhost bin]$ mv chromedriver mychromedriver
/ dan moeten we	,
  @Before
  public void setUp() throws Exception {
    driver = new ChromeDriver();
	System.setProperty("webdriver.chrome.driver", "/home/eric/bin/mychromedriver");
    baseUrl = "http://localhost:9090/";

/ 7	. 

/ Lees	,
http://www.seleniumhq.org/
/ Kies	'Selenium Webdriver'	,
http://www.seleniumhq.org/projects/webdriver/
/ click tab Download	,
/ Ga naar Third Party Drivers, Bindings, and Plugins
/  click link 'Google Chrome  driver'	, 
https://sites.google.com/a/chromium.org/chromedriver/
/ of op dezelfde rij selenium wiki page	,
https://github.com/SeleniumHQ/selenium/wiki/ChromeDriver

/ Lees	,
https://github.com/SeleniumHQ/selenium
/ of	,
https://github.com/SeleniumHQ/selenium/wiki

/ 13	. 

/ Ga naar	,
https://github.com/SeleniumHQ/selenium/wiki/ChromeDriver

The ChromeDriver consists of three separate pieces. 
There is the browser itself ("chrome"), 
the language bindings provided by the Selenium project ("the driver")	/ new ChromeDriver()  
and an executable downloaded from the Chromium project which acts as a bridge between "chrome" and the "driver". This executable is called "chromedriver", but we'll try and refer to it as the "server" in this page to reduce confusion. / chromedriver exec uit de zip	,


/ Lees	,
https://sites.google.com/a/chromium.org/chromedriver/downloads

/ Einde SELENIUM JUNIT MAVEN

/ SELENIUM WEBDRIVER JUNIT 

/ 7	. 

/ als we automatisch username & password door ff	, dan worden deze niet record	, ook niet als we opnieuw intype	, 
/ TODO

/ geef in ff search	,
firefox delete username password
/ Lees	,
https://support.mozilla.org/en-US/questions/737769
/ Lees	,
http://kb.mozillazine.org/Deleting_autocomplete_entries

/ Ga in pnllogistics naar user name text field	, is leeg	, click pijltje down, eric verschijnt	, select en click Delete	, 
/ hij is weg	, en in selenium zien we eric	, rtdMpo45	, recorded	,

/ we kunnen deze helemaal empty	,
History, Clear Recent history	, select form & search history	,

/ we kunnen ook zeggen: nooit history maken	,
Edit, preferences	, privacy,	 
History
	Firefox will: Never remember history

/ we zien in de url field	,
https://test-pnl.mp-objects.com/pnllogistics/authentication/login-form
/ het geven van de url is NIET onderdeel van de record	,
///////////////////////////////////////////////////////////////
/ delete automatic username	, 
/ geef eric, rtdMpo45	,
/ we zien dat hij record	,
open	 /pnllogistics/authentication/login-form
type	id=j_usename 	eric
type	id=j_password 	rtdMpo45
clickAndWait	css=input[type="submit"] 

https://test-pnl.mp-objects.com/pnllogistics/core/index_frameset

/ 7	. 

/ we zien in HTML 	,

<tr>
	<td>selectFrame</td>
	<td>main_frame</td>
	<td></td>
</tr>

/  De compiling naar Webdriver gaat niet OK	,

/ Lees	,
http://seleniumhq.github.io/selenium/docs/api/java/
http://seleniumhq.github.io/selenium/docs/api/java/org/openqa/selenium/WebDriver.TargetLocator.html

/ er is ook	,
https://github.com/SeleniumHQ/docs
/ de nieuwe docs	,
http://seleniumhq.github.io/docs/

/ Geef in google	,
selectFrame selectWindow webdriver
http://stackoverflow.com/questions/10879206/how-to-switch-between-frames-in-selenium-webdriver-using-java
/we zien link	, driver.switchTo().frame()
http://seleniumhq.github.io/selenium/docs/api/java/org/openqa/selenium/WebDriver.TargetLocator.html

/ See XMisc5Test.java in wicket-testing	, 
/ MORGENOCHTEND 

/ 7	. 

/ we maken een directe HTML page	,	,  
[eric@localhost Wicket]$ ls wicket-testing/src/main/webapp/
LinksWithSeleniumPage.html

$ vi LinksWithSeleniumPage.html
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
<h1>LinksWithSeleniumPage</h1>
<a href="http://www.google.com">My Link</a>
</body>
</html>

/ Dit verschijnt in de WAR	,

[eric@localhost wicket-testing]$ pwd
/home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28/webapps/wicket-testing
[eric@localhost wicket-testing]$ ls
LinksWithSeleniumPage.html  logo.png  META-INF  RedirectStudy.jsp  style.css  towicket.jsp  WEB-INF
[eric@localhost wicket-testing]$ ls WEB-INF/
classes/ lib/     web.xml  

/ Geef	,
http://localhost:9090/wicket-testing/LinksWithSeleniumPage.html

/ selenium record werkt OK	,

/ 13	. 

/ Nu met frames	,

$ vi FramesWithSeleniumPage.java
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<frameset cols="50%,50%">
	<frame src="LinksWithSeleniumPage.html">
	<frame src="LinksWithSeleniumPage.html">
</frameset>
</html>

/ Maar de links werken niet in de frames	,
Refused to display 'https://www.google.com/?gws_rd=ssl' in a frame because it set 'X-Frame-Options' to 'SAMEORIGIN'.  
/ Lees	,
http://stackoverflow.com/questions/27358966/how-to-set-x-frame-options-on-iframe
You can't set X-Frame-Options on the iframe. That is a response header set by the domain from which you are requesting the resource (google.com.ua in your example). They have set the header to SAMEORIGIN in this case, which means that they have disallowed loading of the resource in an iframe outside of their domain. For more information see The X-Frame-Options response header on MDN.
Inderdaad	, we zien in de Response headers	,
x-frame-options: SAMEORIGIN

/ Dus onze link naar www.google.com was ongelukkig	,

/ we link nu naar jquery.com	, deze link werkt	, en jquery.com komt in het frame	,

/ 13	. 

$ vi FramesWithSeleniumPage.java

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<frameset cols="50%,50%">
	<frame name="left" id="left" src="LinksWithSeleniumPage.html">
	<frame name="right" id="right" src="LinksWithSeleniumPage.html">
</frameset>
</html>

$ vi XFrameTest.java
...
  @Test
  public void testFrames() throws Exception {
    driver.get(baseUrl + "/wicket-testing/FramesWithSeleniumPage.html");
    driver.switchTo().frame("left");
    driver.findElement(By.linkText("My Link")).click();
    driver.findElement(By.xpath("(//a[contains(text(),'Plugins')])[2]")).click();
  }

/ we hebben zelf insert	,
    driver.switchTo().frame("left");

/ De laatste geeft ERR	,
/ TODO

/ 7	. 

/ we hebben bij record in google geen enter gegeven, maar op de submit button click	,

$ vi XJQueryTest.java

  @Test
  public void testXJQuery() throws Exception {
    driver.get(baseUrl + "/?gfe_rd=cr&ei=ScFqVrHVL9K0cqa4hfgP&gws_rd=ssl");
    driver.findElement(By.id("lst-ib")).clear();
    driver.findElement(By.id("lst-ib")).sendKeys("jquery");
    driver.findElement(By.name("btnG")).click();
    driver.findElement(By.linkText("jQuery")).click();
    driver.findElement(By.xpath("(//a[contains(text(),'Plugins')])[2]")).click();
  }

/ Omdat we submit click	,
    driver.findElement(By.name("btnG")).click();

/ Daardoor komt hij op de nieuwe pagina	, 

/ SELENIUM MAANDAGOCHTEND
/ XFrames2Test ERR bij chrome	,
/ XJQueryTest OK bij chrome, ff	,
/ XJQuery2Test OK bij chrome, 

    driver.findElement(By.xpath("(//a[contains(text(),'Plugins')])[2]")).click();
/ OK in XJQuery2Test	, ERR in XFrames2Test

/ Ook	. 
goBack, goBackAndWait	,

/ we zijn dus op 	,
http://localhost:9090/wicket-testing/FramesWithSeleniumPage.html

/ 7	. 

/ eclipse-jee-test
/ ws wicket-testing
/ in src/test/java XFramesTest.java
/ in src/main/webapp FramesWithSeleniumPage.html, LinksWithSeleniumPage.html

/ Geef in browser   ,
http://localhost:9090/wicket-testing/FramesWithSeleniumPage.html
/ OK
/ we zien FramesWithSeleniumPage.html   , met in elk frame een LinksWithSeleniumPage.html   ,

/ Op jquey.com staan 2 Plugin links: 1 helemaal bovenaan in horizontale zwarte menu, de andere in het horizontale blauwe menu onder het logo	,
/ als het frame te smal, zien we de menus niet	, de chrome driver vindt het 2de plugin link wel, maar is niet visible voor hem	, 
/ we moeten ervoor zorgen dat het frame, en we kiezen het linker frame , breed genoeg is	,

$ vi FramesWithSeleniumPage.html

<frameset cols="75%,25%">
	<frame name="left" id="left" src="LinksWithSeleniumPage.html">
	<frame name="right" id="right" src="LinksWithSeleniumPage.html">
</frameset>

/ RUN SELENIUM JNIT FILE AND DEPLOY TARGET
///////////////////////////////
/ we moeten voordat we XFramesTest exec in eclipse, eerst wicket-testing deploy	,  omdat we FramesWithSeleniumPage.java hebben veranderd	, 
/ voor XFramesTest.java hoeft dit NIET, als we deze debug, of run, pakt hij meteen de nieuwe	, hij compiles hem eerst WH
/ TODO 

/ nu is het frame breed genoeg, en staan de menus met de Plugin links erop	,en gaat de test OK	,

/ XJQueryTest.java dee

/ 7	. 

/ AANPASSEN SELENIUMIDE JUNIT 

/ Als we record met seleniumIDE, dan gaat de vertaling naar JUnit van een frame kiezen niet OK	,
/ we record in HTML, en vertalen naar JUNIT	, 
/ we gaan naar
http://localhost:9090/wicket-testing/FramesWithSeleniumPage.html
/ click de link in het linker frame	, en click Plugins op het menu onder het logo	,
/ vertaal naar JUnit	,

 @Test
  public void testUntitled2() throws Exception {
    driver.get(baseUrl + "/wicket-testing/FramesWithSeleniumPage.html");
    // ERROR: Caught exception [ERROR: Unsupported command [selectFrame | left | ]]
    driver.findElement(By.linkText("My Link")).click();
    driver.findElement(By.xpath("(//a[contains(text(),'Plugins')])[2]")).click();
    driver.findElement(By.linkText("form")).click();
  }
/ we moeten zelf	,
    // ERROR: Caught exception [ERROR: Unsupported command [selectFrame | left | ]]
/ vervangen door	,
    driver.switchTo().frame("left");

/ 7	.

/ Lees	,
http://seleniumhq.github.io/selenium/docs/api/java/

/ we zien bij WebDriver	, 
WebElement  			findElement(By by)
WebDriver.TargetLocator switchTo()

/ 7	.

/ Als we in seleniumIDE right click op link ui, op de 'The jQuery Plugin Registry' 	, zien we 	 
assertText link=ui ui
verifyText link=ui ui
/ Deze zijn hetzelfde in JUnit	,
    assertEquals("ui", driver.findElement(By.linkText("ui")).getText());





/ Einde SELENIUM WEBDRIVER JUNIT 

/ WICKET WICKETPATH

/ 7.	 

/ Hoe wordt wicketpath create	?

/ we maken een button in een form	,





/ Einde WICKET WICKETPATH

/ WICKET MODELS WICKETPATH

/ 7	. 

/ we maken vanwege de breakpoints ee niewe workspace	,
 ~/Devel/Java/Eclipse/eclipse-jee-test/workspace-wicket7_3

/ 7. 

/ ws wicket7
/ proj. wicket-testing

/ default Link.<init> , zonder model	,

$ vi WicketpathStudyPage2.java

		final Link link=new Link("link"){
			@Override
			public void onClick() {
				boolean b=false;
				
			}
		};
		add(link);

/ stack trace	, 

/ Link.<init> wordt called als de page wordt create	,

/s
	WicketpathStudyPage2$1(Link<T>).<init>(String) line: 105	
	WicketpathStudyPage2$1.<init>(WicketpathStudyPage2, String) line: 29	
	WicketpathStudyPage2.<init>(PageParameters) line: 29	
	DefaultPageFactory.newPage(Constructor<C>, PageParameters) line: 171	
			if (argument != null)
			{
				return constructor.newInstance(argument);

	DefaultPageFactory.newPage(Class<C>) line: 76	
			if (constructor != null)
			{
				PageParameters pp = new PageParameters();
				return processPage(newPage(constructor, pp), pp);

	DefaultMapperContext.newPageInstance(Class<IRequestablePage>, PageParameters) line: 102	
		if (pageParameters == null)
		{
			return application.getPageFactory().newPage(pageClass);

	PageProvider.resolvePageInstance(Integer, Class<IRequestablePage>, PageParameters, Integer) line: 268	
		if (page == null)
		{
			if (pageClass != null)
			{
				page = getPageSource().newPageInstance(pageClass, pageParameters);

	PageProvider.getPageInstance() line: 166	
			resolvePageInstance(pageId, pageClass, pageParameters, renderCount);

	WebPageRenderer(PageRenderer).getPage() line: 78	
		return getPageProvider().getPageInstance();

	WebPageRenderer.isPageStateless() line: 287	
		return getPage().isPageStateless();

	WebPageRenderer.shouldRenderPageAndWriteResponse(RequestCycle, Url, Url) line: 329	
		return (compatibleProtocols(currentUrl.getProtocol(), targetUrl.getProtocol())) &&
				(neverRedirect(getRedirectPolicy())
			|| ((isOnePassRender() && notForcedRedirect(getRedirectPolicy())) || (targetUrl
				.equals(currentUrl) && notNewAndNotStatelessPage(isNewPageInstance(),
				isPageStateless()))) || (targetUrl.equals(currentUrl) && isRedirectToRender())
			|| (shouldPreserveClientUrl(cycle) && notForcedRedirect(getRedirectPolicy())));

	WebPageRenderer.respond(RequestCycle) line: 193	
		if (shouldRenderPageAndWriteResponse(requestCycle, currentUrl, targetUrl))

	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 837	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/s
WicketpathStudyPage2$1(Link<T>).<init>(String) line: 105	
/=
	public Link(final String id)
	{
		super(id);
/s
WicketpathStudyPage2$1(AbstractLink).<init>(String) line: 43	
		this(id, null);
/s
WicketpathStudyPage2$1(AbstractLink).<init>(String, IModel<?>) line: 56	
		super(id, model);
model=null
/s
WicketpathStudyPage2$1(WebMarkupContainer).<init>(String, IModel<?>) line: 52	
		super(id, model);
/s
WicketpathStudyPage2$1(MarkupContainer).<init>(String, IModel<?>) line: 120	
		super(id, model);
/s
WicketpathStudyPage2$1(Component).<init>(String, IModel<?>) line: 682	
		if (model != null)
/ NEE
		{
			setModelImpl(wrap(model));
/ NIET

/ 7	.

/ wat doet een model van een link	?

/ bij Link en AjaxFallbackLink kun je hem use in de onClick	, in de rol van href, of label	, 
/ bij ExternalLink zul je geen onClick def	, daar is de href een model, en de label is een model	,

/ we maken 2 Link's	, 1 die href uit z'n model haalt	, en 1 die de nieuwe label uit z'n model haalt	. 

$ vi WicketpathStudyPage2.java

		final IModel<Class>model=new Model<Class>(this.getClass());	
		final Link<Class> link=new Link<Class>("link",model){
			@Override
			public void onClick() {
				Class c=getModelObject();
				setResponsePage(c);
				
			}
		};
		add(link);
		
		final IModel<String>model2=Model.of("other");
		final Link<String> link2=new Link<String>("link2",model2){
			@Override
			public void onClick() {
				String s=getModelObject();	
				setBody(model2);
			}
		};
		add(link2);
		
		final IModel<String>href=Model.of("https://www.google.com");
		final IModel<String>label=Model.of("Google");
		
		final ExternalLink externalLink=new ExternalLink("externalLink", href, label);
		add(externalLink);


/ we zien 	,
link 
link 
Google

/ Als we op de 1ste link click zien we in de url field	,
http://localhost:9090/wicket-testing/?4
http://localhost:9090/wicket-testing/?5
...
/ er wordt dus steeds een nieuwe page create	,

/ Als we 2de link click	,  zien we de label in other veranderen, en we zien	in de url,
http://localhost:9090/wicket-testing/?4
http://localhost:9090/wicket-testing/?4
...

/ Hoe werkt Model.of	, want Class is raw type ERR in	,
		final IModel<Class>model=Model.of(this.getClass());	
/ TODO

/ 7	.

/ Lees,	
https://cwiki.apache.org/confluence/display/WICKET/Getting+a+url+for+display
http://stackoverflow.com/questions/5800974/redirect-to-external-non-wicket-page-in-wicket-1-5

/ links	,

$ vi WicketpathStudyPage2.java

package my.test.own;

import java.io.Serializable;

import org.apache.wicket.ajax.AjaxRequestTarget;
import org.apache.wicket.ajax.markup.html.AjaxFallbackLink;
import org.apache.wicket.ajax.markup.html.AjaxLink;
import org.apache.wicket.ajax.markup.html.form.AjaxFallbackButton;
import org.apache.wicket.markup.html.WebPage;
import org.apache.wicket.markup.html.basic.Label;
import org.apache.wicket.markup.html.form.Form;
import org.apache.wicket.markup.html.form.TextField;
import org.apache.wicket.markup.html.link.BookmarkablePageLink;
import org.apache.wicket.markup.html.link.ExternalLink;
import org.apache.wicket.markup.html.link.Link;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.Model;
import org.apache.wicket.model.PropertyModel;
import org.apache.wicket.request.Url;
import org.apache.wicket.request.UrlRenderer;
import org.apache.wicket.request.cycle.RequestCycle;
import org.apache.wicket.request.mapper.parameter.PageParameters;

import com.gargoylesoftware.htmlunit.javascript.host.fetch.Request;

public class WicketpathStudyPage2 extends WebPage{

	
	
	public WicketpathStudyPage2(PageParameters pageParameters) {	
		
		final M m=new M();
		
		final Link<Class> link0=new Link<Class>("link0"){
			@Override
			public void onClick() {
				setResponsePage(LinkOnlyStudyPage2.class);
				
			}
		};
		add(link0);
		
		final IModel<Class>model01=new Model<Class>(LinkOnlyStudyPage2.class);
		final Link<Class> link01=new Link<Class>("link01",model01){
			@Override
			public void onClick() {
				Class c=getModelObject();
				setResponsePage(c);
				
				
			}
		};
		add(link01);

		m.setC(LinkOnlyStudyPage2.class);
		final IModel<Class>model02=new PropertyModel<Class>(m, "c");
		final Link<Class> link02=new Link<Class>("link02",model02){
			@Override
			public void onClick() {
				Class c=getModelObject();
				setResponsePage(c);
				
				
			}
		};
		add(link02);
		
		final Link<Class> link1=new Link<Class>("link1"){
			@Override
			public void onClick() {
				setResponsePage(WicketpathStudyPage2.class);
				
			}
		};
		add(link1);
		
		final IModel<Class>model=new Model<Class>(this.getClass());	
		final Link<Class> link=new Link<Class>("link",model){
			@Override
			public void onClick() {
				Class c=getModelObject();
				setResponsePage(c);
				
				
			}
		};
		add(link);
		
		final IModel<String>model2=Model.of("other");
		final Link<String> link2=new Link<String>("link2",model2){
			@Override
			public void onClick() {
				String s=getModelObject();	
				setBody(model2);
			}
		};
		add(link2);

//		final String homePageUrl=getUrl(WicketpathStudyPage2.class);
//kk
		final String homePageUrl=getUrl(this.getClass());
		final String otherPageUrl=getUrl(LinkOnlyStudyPage2.class);

		IModel<String>model3=new Model<String>(homePageUrl);
		final Link<String> link3=new Link<String>("link3",model3){
			@Override
			public void onClick() {				
/ TODO				
				
			}
		};
		add(link3);
		
		Link<String>link4=new BookmarkablePageLink<String>("link4",this.getClass());
		add(link4);
		Link<String>link5=new BookmarkablePageLink<String>("link5",LinkOnlyStudyPage2.class);
		add(link5);

		
		
		final IModel<String>href=Model.of("https://www.google.com");
		final IModel<String>label=Model.of("Google");
		
		final ExternalLink externalLink=new ExternalLink("externalLink", href, label);
		add(externalLink);
	}
	
	private String getUrl(Class c){
		CharSequence tmpUrlAsString=urlFor(c, null);
		Url tmpUrl=Url.parse(tmpUrlAsString);
		RequestCycle requestCycle=RequestCycle.get();
		UrlRenderer urlRenderer=requestCycle.getUrlRenderer();
		String urlAsString=urlRenderer.renderFullUrl(tmpUrl);
		return urlAsString;
	}
	

	private class M implements Serializable{
		private String s;

		public String getS() {
			return s;
		}

		public void setS(String s) {
			this.s = s;
		}

		private Class c;

		public Class getC() {
			return c;
		}

		public void setC(Class c) {
			this.c = c;
		}
	}
}

$ vi WicketpathStudyPage2.html

<div>
	<a wicket:id="link0" href="#">link</a>
</div>
<div>
	<a wicket:id="link01" href="#">link</a>
</div>
<div>
	<a wicket:id="link02" href="#">link</a>
</div>
<div>
	<a wicket:id="link1" href="#">link</a>
</div>
<div>
	<a wicket:id="link" href="#">link</a>
</div>
<div>
	<a wicket:id="link2" href="#">link</a>
</div>
<div>
	<a wicket:id="link3" href="#">link</a>
</div>
<div>
	<a wicket:id="link4" href="#">link</a>
</div>
<div>
	<a wicket:id="link5" href="#">link</a>
</div>

<div>
	<a wicket:id="externalLink" href="#">[Label]</a>
</div>


/ we zien dat de bookmarkable url van de homepage	,
http://localhost:9090/wicket-testing
/ en van een andere wicket page	,
http://localhost:9090/wicket-testing/wicket/bookmarkable/my.test.own.LinkOnlyStudyPage2

/ Hoe in wicket redirect met String url?
/ See	,
Using HTTP 302 ("Moved Temporarily"):
import org.apache.wicket.request.flow.RedirectToUrlException;
...
throw new RedirectToUrlException(
    "http://www.facebook.com/login.php?api_key="+ _apiKey + "&v=1.0");

Using HTTP 301 ("Moved Permanently", SEO friendly):
import org.apache.wicket.request.flow.RedirectToUrlException;
import javax.servlet.http.HttpServletResponse;
...
throw new RedirectToUrlException(
    "http://www.facebook.com/login.php?api_key="+ _apiKey + "&v=1.0", 
    HttpServletResponse.SC_MOVED_PERMANENTLY);

/ 7	. 

/ labels	,

$ vi WicketpathStudyPage3.java

		final IModel<String>model=new Model<>("Foo Bar");
		final Label label=new Label("label", model);
		add(label);

$ vi WicketpathStudyPage3.html

	<span wicket:id="label"></span>



/ we zien een label met text	, 
Foo Bar

/ Maar we kunnen ook een PropertyModel	,

$ vi WicketpathStudyPage3.java

	public WicketpathStudyPage3(PageParameters pageParameters) {	
		
		final M m=new M();
		m.setS("Gee Hee");
		
		final IModel<String>model2=new PropertyModel<String>(m, "s");
		final Label label=new Label("label", model2);
		add(label);
	}

	private class M implements Serializable{
		private String s;

		public String getS() {
			return s;
		}

		public void setS(String s) {
			this.s = s;
		}
	}
/ OK

/ 7	. 

/ forms	,

/ we doen eerst een leeg form, en daarnaast een label en een link 	,

/ we namen Label en Link, want die hebben een 2de arg IModel	, die dan uit de CompoundPropertyModel wordt genomen	, 
/ Hoe met ExternalLink	, die 2 IModel args heeft?
/ TODO
/ Hoe met BookmarkablePageLink	, die geen IModel arg heeft?
/ TODO

/ we moeten de wicket:id's s resp. c nemen	, ipv label en link	, vanwege de CompountPropertyModel	,

$ vi WicketpathStudyPage4.java

	public WicketpathStudyPage4(PageParameters pageParameters) {	

	public WicketpathStudyPage4(PageParameters pageParameters) {	
		
		final M m=new M();
		m.setS("Gee Hee");
		m.setC(LinkOnlyStudyPage2.class);
		
		final CompoundPropertyModel<M>model=new CompoundPropertyModel<M>(m);
		setDefaultModel(model);
		
		final Form<M>form=new Form<WicketpathStudyPage4.M>("form", model);
		add(form);
		
		final Label label=new Label("s");
		add(label);
		final Link<Class>link=new Link<Class>("c") {
			@Override
			public void onClick() {
				Class c=getModelObject();
				setResponsePage(c);
			}
		};
		add(link);
	}

	private class M implements Serializable{
		private String s;

		public String getS() {
			return s;
		}

		public void setS(String s) {
			this.s = s;
		}
		
		private Class c;

		public Class getC() {
			return c;
		}

		public void setC(Class c) {
			this.c = c;
		}
		
	}

$ vi WicketpathStudyPage4.html

	<form wicket:id="form"></form>
	<span wicket:id="s"></span>
	<link wicket:id="c">
	
/ OK

/ 13	. 

/ Nu de Label en Link in het form,	

$ vi WicketpathStudyPage4.java

	public WicketpathStudyPage4(PageParameters pageParameters) {	
		
		final M m=new M();
		m.setS("Gee Hee");
		m.setC(LinkOnlyStudyPage2.class);
		
		final CompoundPropertyModel<M>model=new CompoundPropertyModel<M>(m);
		final Form<M>form=new Form<WicketpathStudyPage4.M>("form", model);
		form.setDefaultModel(model);
		add(form);
		
		final Label label=new Label("s");
		form.add(label);
		
		final Link<Class>link=new Link<Class>("c") {
			@Override
			public void onClick() {
				Class c=getModelObject();
				setResponsePage(c);
			}
		};
		final IModel<String>model2=new Model<String>("link");
		link.setBody(model2);
		form.add(link);
	
	}

	private class M implements Serializable{
		private String s;

		public String getS() {
			return s;
		}

		public void setS(String s) {
			this.s = s;
		}
		
		private Class c;

		public Class getC() {
			return c;
		}

		public void setC(Class c) {
			this.c = c;
		}
		
	}
 
$ vi WicketpathStudyPage4.java

<div>
	<form wicket:id="form">
		<span wicket:id="s"></span>
		<a wicket:id="c"></a>
	</form>
	
</div>

/ we zien in HTML	,

<body>
<h1>WicketpathStudyPage4</h1>

<div>
	<form wicket:id="form" id="form1" wicketpath="form" method="post" action="./?0-2.IFormSubmitListener-form">
		<div style="width:0px;height:0px;position:absolute;left:-100px;top:-100px;overflow:hidden">
			<input type="hidden" name="form1_hf_0" id="form1_hf_0">
		</div>
		<span wicket:id="s" wicketpath="form_s">Gee Hee</span>
		<a wicket:id="c" wicketpath="form_c" href="./?0-2.ILinkListener-form-c">link</a>
	</form>
</div>

/ we zien inderdaad wicketpath's	,
"form_s"
"form_c"

/ Dus wicketpath volgt de hierarchy	,


/ Einde WICKET MODELS WICKETPATH

/ DEBUG WICKET MODELS WICKETPATH

/ waar wordt de wicket path set	?

/ Dat moet in render zijn	,

/we set b in Label.onComponentTag	,

/ stack trace	,
/c
	Label.onComponentTag(ComponentTag) line: 124	
		super.onComponentTag(tag);

	Label(Component).internalRenderComponent() line: 2513	
		onComponentTag(tag);

	Label(WebComponent).onRender() line: 56	
		internalRenderComponent();

	Label(Component).internalRender() line: 2372	
				onRender();

	Label(Component).render() line: 2300	
			// do the render
			internalRender();

	Form<T>(MarkupContainer).renderNext(MarkupStream) line: 1405	
				component.render();

	Form<T>(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1601	
			// Render the markup element
			boolean rawMarkup = renderNext(markupStream);

	Form<T>(MarkupContainer).renderComponentTagBody(MarkupStream, ComponentTag) line: 1576	
			renderAll(markupStream, openTag);

	Form<T>(MarkupContainer).onComponentTagBody(MarkupStream, ComponentTag) line: 1500	
		renderComponentTagBody(markupStream, openTag);

	Form<T>.onComponentTagBody(MarkupStream, ComponentTag) line: 1683	
		super.onComponentTagBody(markupStream, openTag);

	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
		component.onComponentTagBody(markupStream, openTag);

	Form<T>(Component).internalRenderComponent() line: 2557	
				getMarkupSourcingStrategy().onComponentTagBody(this, markupStream, tag);

	Form<T>(MarkupContainer).onRender() line: 1540	
		internalRenderComponent();

	Form<T>(Component).internalRender() line: 2372	
				onRender();

	Form<T>(Component).render() line: 2300	
			// Do the render
			internalRender();

	WicketpathStudyPage4(MarkupContainer).renderNext(MarkupStream) line: 1405	
				component.render();

	WicketpathStudyPage4(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1601	
			// Render the markup element
			boolean rawMarkup = renderNext(markupStream);

	WicketpathStudyPage4(Page).onRender() line: 879	
		renderAll(markupStream, null);

	WicketpathStudyPage4(WebPage).onRender() line: 142	
		// Configure the response such as headers etc.
		configureResponse((WebResponse)RequestCycle.get().getResponse());

		// The rules if and when to insert an xml decl in the response are a bit tricky. Allow the
		// user to replace the default per page and per application.
		renderXmlDecl();

->		super.onRender();


	WicketpathStudyPage4(Component).internalRender() line: 2372	
				onRender();

	WicketpathStudyPage4(Component).render() line: 2300	
			// Do the render
			internalRender();

	WicketpathStudyPage4(Page).renderPage() line: 1018	
			render();

	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	try
		{
			requestCycle.setResponse(response);
			requestablePage.renderPage();

	WebPageRenderer.respond(RequestCycle) line: 195	
		if (shouldRenderPageAndWriteResponse(requestCycle, currentUrl, targetUrl))
currentUrl="?3"
targetUrl="?3"
		{
			BufferedWebResponse response = renderPage(currentUrl, requestCycle);
/ TODO
/ Normaal vallen we in 
		else
		{
			...
/ TODO 
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 837	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	


/ we debug verder	,

/ we zijn in	,
Label.onComponentTag(ComponentTag) line: 124	
		super.onComponentTag(tag);
/s
Label(Component).onComponentTag(ComponentTag) line: 3887	

		DebugSettings debugSettings = getApplication().getDebugSettings();
		String componentPathAttributeName = debugSettings.getComponentPathAttributeName();
wicketpath

/ Intermezzo

/ Die hebben we zelf set	,
$ vi WicketApplication.java

	@Override
	public void init()
	{
		super.init();
//		getDebugSettings().setOutputComponentPath(true);
		getDebugSettings().setComponentPathAttributeName("wicketpath");

/ Einde Intermezzo

		if (Strings.isEmpty(componentPathAttributeName) && debugSettings.isOutputComponentPath())
true & false=false

		if (Strings.isEmpty(componentPathAttributeName) == false)
		{
			String path = getPageRelativePath();
form:s
/ want	,
/s
Label(Component).getPageRelativePath() line: 1743	
		return Strings.afterFirstPathComponent(getPath(), PATH_SEPARATOR);
/s
Label(Component).getPath() line: 1764	
		final PrependingStringBuffer buffer = new PrependingStringBuffer(32);
		for (Component c = this; c != null; c = c.getParent())
		{
			if (buffer.length() > 0)
/ NEE	, 1ste keer	, c=Label	,
/ JA, 2de keer, c=Form<T>
/ JA, 3de keer, c=WicketpathStudyPage4	, 
			{
				buffer.prepend(PATH_SEPARATOR);
/ 2de keer, buffer=":s"
/ 3de keer, buffer=":form:s"
			}
			buffer.prepend(c.getId());
/ 1ste keer	, c=Label	, buffer="s"
/ 2de keer	, c=Form<T>	, buffe="form:s"
/ 2de keer	, c=WicketpathStudyPage4	, buffe="3:form:s"
		}
		return buffer.toString();
/t
Label(Component).getPageRelativePath() line: 1743	
		return Strings.afterFirstPathComponent(getPath(), PATH_SEPARATOR);
/pd
/t
Label(Component).onComponentTag(ComponentTag) line: 3901	
			String path = getPageRelativePath();
/d
form:s
			path = path.replace("_", "__");
			path = path.replace(':', '_');
form_s
			tag.put(componentPathAttributeName, path);

/ 7	. 

/ we copy WicetpathStudyPage4.java	,
/ en passen de target van de link aan tot WicketpathStudyPageSeleniumTarget2.class	, 

public class WicketpathStudyPageSelenium2 extends WebPage{

	public WicketpathStudyPageSelenium2(PageParameters pageParameters) {	
		
		final M m=new M();
		m.setS("Gee Hee");
		m.setC(WicketpathStudyPageSeleniumTarget2.class);
		
		final CompoundPropertyModel<M>model=new CompoundPropertyModel<M>(m);
		
		
		final Form<M>form=new Form<M>("form", model);
		form.setDefaultModel(model);
		add(form);
		
		final Label label=new Label("s");
		form.add(label);
		
		
		final Link<Class>link=new Link<Class>("c") {
			@Override
			public void onClick() {
				Class c=getModelObject();
				setResponsePage(c);
			}
			

		};
		final IModel<String>model2=new Model<String>("link");
		link.setBody(model2);
		form.add(link);
	
	}

	private class M implements Serializable{
		private String s;

		public String getS() {
			return s;
		}

		public void setS(String s) {
			this.s = s;
		}
		
		private Class c;

		public Class getC() {
			return c;
		}

		public void setC(Class c) {
			this.c = c;
		}
		
	}


/ MORGEN
WicketpathStudyPageSeleniumTarget2Test			

/ STRAKS

/ Einde DEBUG WICKET MODELS WICKETPATH


/ WICKET STUDY

/ See PAT-267
go to planning>service order>Planning Export. in PNLTMS Test. 
Service Order Planning Export
/ click icon naar HUB	,
/ we zien alleen type PlanOrganization	,

/ Bestudeer deze wicket pages	,
/ TODO 


/ Einde WICKET STUDY

/ SCS-4910

/ configuration, master data	, airports
public class AirportPage extends EvoEditPage<Airport> {
public abstract class EvoEditPage<T extends DescribedUniqueFieldValueObject> extends EvoListPage<T> implements EvoEditFormCallback {
public abstract class EvoListPage<T extends DescribedUniqueFieldValueObject> extends BaseContextPage {
public class BaseContextPage extends BasePage implements Serializable {
public class BasePage extends WebPage implements Serializable {

/ er is GEEN AirportPage.html	,

$ vi EvoEditPage.html
	<wicket:extend>
		<form wicket:id="createForm">
				<button wicket:id="createButton" class="icon icon_new" wicket:message="title:create">
					<span><wicket:message key="create">Create new</wicket:message></span>
				</button>
		</form>
		<div wicket:id="editWindow"></div>
		<wicket:child />
	</wicket:extend>

$ vi EvoListPage.html
		<wicket:extend>
			<div wicket:id="feedback"></div>
			<div wicket:id="evoSearchList"></div>
			<wicket:child />
		</wicket:extend>

$ vi BaseContextPage.html
<wicket:extend>
	<wicket:child/>
</wicket:extend>

$ vi BasePage.html

<html ... wicket:id="html"  > 
<body wicket:id="pageId">
	<div class="wicketPage"><wicket:child /></div> 

/ we zien dus de wicket:id's html en pageId	, see BasePage.java	,

/ 13	. 

/ we zien in HTML	,

<body wicketpath="pageId" id="AirportPage" class=" xMenu">
	<div class="wicketPage">

			<div id="evoSearchList2" wicketpath="evoSearchList">
/ de list met alle airports,	 met filter	,
/ = alles, zonder create button form	,

				<form class="genericListPanelForm" name="genericListPanelForm" id="filterForm4" wicketpath="evoSearchList_filterForm" method="post" action="?wicket:interface=:1:evoSearchList:filterForm:1:IFormSubmitListener::" _lpchecked="1">
					<div style="width:0px;height:0px;position:absolute;left:-100px;top:-100px;overflow:hidden">
					<input type="hidden" name="filterForm4_hf_0" id="filterForm4_hf_0"></div>
					<h2><div wicketpath="evoSearchList_filterForm_tableTitle">Select Airport</div></h2>
/ de title	,
					<p><input type="hidden" name="focus-tracker" value="filter8" wicketpath="evoSearchList_filterForm_focus-tracker" id="evoSearchList:filterForm:focus-tracker" class=""></p>
/ TODO
		
					<table class="grid wicketPagination" wicketpath="evoSearchList_filterForm_group_objectTable">
						<thead>
							<tr class="headers">
								<th wicketpath="evoSearchList_filterForm_group_objectTable_topToolbars_2_toolbar_headers_1_header"><span wicketpath="evoSearchList_filterForm_group_objectTable_topToolbars_2_toolbar_headers_1_header_label">Filters</span></th>
							<tr class="filters-tr">
								<td class="filter-td" wicketpath="evoSearchList_filterForm_group_objectTable_topToolbars_3_toolbar_filters_1_filter"> <nobr>
									<button type="submit" class="small icon icon_filter" title="filter" name="group:objectTable:topToolbars:3:toolbar:filters:1:filter:go" id="go5" wicketpath="evoSearchList_filterForm_group_objectTable_topToolbars_3_toolbar_filters_1_filter_go" value="filter" accesskey="R"><span class="fallback">filter</span></button>
								</td>
						<tbody wicketpath="evoSearchList_filterForm_group_objectTable_body">
							...
						</tbody>
					</table>
				</form>
			</div> 

	
		<form id="createFormc" wicketpath="createForm" method="post" action="?wicket:interface=:1:createForm:1:IFormSubmitListener::"><div style="width:0px;height:0px;position:absolute;left:-100px;top:-100px;overflow:hidden"><input type="hidden" name="createFormc_hf_0" id="createFormc_hf_0"></div>
				<button class="icon icon_new" name="createButton" id="createButtond" wicketpath="createForm_createButton" onclick="var wcall=wicketSubmitFormById('createFormc', '?wicket:interface=:1:createForm:createButton:1:IActivePageBehaviorListener:0:&amp;wicket:ignoreIfNotActive=true', 'createButton' ,function() { }.bind(this),function() { }.bind(this), function() {return Wicket.$$(this)&amp;&amp;Wicket.$$('createFormc')}.bind(this));;; return false;" title="Create a new entry ">
				</button>
		</form>
/ form met create button 		

<div id="menu">
	<div id="menuContainer">
/ het horizontale menu	,

/ 7	. 

/ we gaan debug	, 

/ stack trace	,

Daemon Thread [http-0.0.0.0-8080-2] (Suspended)	
	AirportPage(BasePage).onInitialize() line: 75	
/ (*)

	AirportPage(Component).fireInitialize() line: 4105	
			onInitialize();

	AirportPage(MarkupContainer).initialize() line: 433	
		super.fireInitialize();

	AirportPage(Page).componentAdded(Component) line: 1613	
			// initialize the page if not yet initialized
			initialize();

	AirportPage(MarkupContainer).addedComponent(Component) line: 995	
			page.componentAdded(component);

	AirportPage(MarkupContainer).add(Component...) line: 142	
this	com.mpobjects.oms.view.wicket.airport.AirportPage  (id=17820)	
child	org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow  (id=17827)	
			addedComponent(child);

	AirportPage(EvoEditPage).createAjaxWindow() line: 109	
		editWindow = new ModalWindow("editWindow");
		...
		add(editWindow);

	AirportPage(EvoEditPage).createEditInterface() line: 149	
		createAjaxWindow();

	AirportPage(EvoEditPage).createPage() line: 161	
		createEditInterface();

	AirportPage(EvoListPage).<init>() line: 51	
		super();
		daoWrapper = getBeanWrapper();
com.mpobjects.view.wicket.util.BeanWrapper@4619b00f[type=interface com.mpobjects.oms.dao.AirportDAO,beanName=<null>]
		setDataProperties();
		createPage();

	AirportPage(EvoEditPage).<init>() line: 80	
		super();

	AirportPage.<init>() line: 24	
		super();

	NativeConstructorAccessorImpl.newInstance0(Constructor, Object[]) line: not available [native method]	
	NativeConstructorAccessorImpl.newInstance(Object[]) line: 57	
	DelegatingConstructorAccessorImpl.newInstance(Object[]) line: 45	
	Constructor.newInstance(Object...) line: 526	
	DefaultPageFactory.createPage(Constructor<Page>, PageParameters) line: 192	
	DefaultPageFactory.newPage(Class<C>, PageParameters) line: 97	
	BaseHomePage.doRedirect() line: 63	
	BaseHomePage.<init>() line: 27	
	NativeConstructorAccessorImpl.newInstance0(Constructor, Object[]) line: not available [native method]	
	NativeConstructorAccessorImpl.newInstance(Object[]) line: 57	
	DelegatingConstructorAccessorImpl.newInstance(Object[]) line: 45	
	Constructor.newInstance(Object...) line: 526	
	DefaultPageFactory.createPage(Constructor<Page>, PageParameters) line: 192	
	DefaultPageFactory.newPage(Class<C>, PageParameters) line: 97	
	BookmarkablePageRequestTarget.newPage(Class<C>, RequestCycle) line: 305	
	BookmarkablePageRequestTarget.getPage(RequestCycle) line: 320	
	BookmarkablePageRequestTarget.processEvents(RequestCycle) line: 234	
	WebRequestCycleProcessor(AbstractRequestCycleProcessor).processEvents(RequestCycle) line: 92	
	MpoWebRequestCycle(RequestCycle).processEventsAndRespond() line: 1279	
	MpoWebRequestCycle(RequestCycle).step() line: 1358	
	MpoWebRequestCycle(RequestCycle).steps() line: 1465	
	MpoWebRequestCycle(RequestCycle).request() line: 545	
	WicketFilter.doGet(HttpServletRequest, HttpServletResponse) line: 486	
	WicketServlet.doGet(HttpServletRequest, HttpServletResponse) line: 138	
	WicketServlet(HttpServlet).service(HttpServletRequest, HttpServletResponse) line: 697	
	WicketServlet(HttpServlet).service(ServletRequest, ServletResponse) line: 810	
...

/ we gaan verder debug	,

AirportPage(BasePage).onInitialize() line: 75	
		super.onInitialize();
/ calls Component.initialize()

		WebMarkupContainer myPageBody = new WebMarkupContainer("pageId") {
		...
		myPageBody.add(new AttributeModifier("id", true, new Model<String>(getClass().getSimpleName())));
		add(myPageBody);

		WebMarkupContainer htmlTag = new WebMarkupContainer("html") {
		...
		Locale loc = getLocale();
		String languageTag = new ULocale(loc.getLanguage(), loc.getCountry(), loc.getVariant()).toLanguageTag();
		htmlTag.add(new SimpleAttributeModifier("xml:lang", languageTag));
		htmlTag.add(new SimpleAttributeModifier("lang", languageTag));
		add(htmlTag);

/ Intermezzo

/ we zagen in 
$ vi BasePage.html

<html ... wicket:id="html"  >  
	<body wicket:id="pageId">
		<div class="wicketPage"><wicket:child /></div>

/ We zien dus dat ze WH attr's willen add dat ze die WebMarkupContainer's create	, 
/ TODO

/ Einde Intermezzo

		createPrivilegeLogView();
/ dit geeft ook nog een child	,
[MarkupContainer [Component id = __privilege_log__]]

/t
AirportPage(MarkupContainer).addedComponent(Component) line: 998	
			page.componentAdded(component);
/d
this	com.mpobjects.oms.view.wicket.airport.AirportPage  (id=17820)	
page	com.mpobjects.oms.view.wicket.airport.AirportPage  (id=17820)	
component	org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow  (id=17827)	

			component.initialize();
/s
ModalWindow(MarkupContainer).initialize() line: 433	
		super.fireInitialize();
/s
ModalWindow(Component).fireInitialize() line: 4106	
			onInitialize();
/ calls Component.initialize()

/t
AirportPage(MarkupContainer).add(Component...) line: 143	
			addedComponent(child);
/d
			if (put(child) != null)
/s
				children_add(child);
/t
AirportPage(EvoEditPage).createAjaxWindow() line: 111	
		add(editWindow);
/d
/ Dus de page initialize() itself ook, omdat dat nog niet was gedaan	, see BasePage, waar met truc (TODO) attr's are add to <html/> en <body/>	, door WebCompoentContainer's te create	,

		editWindow.setPageCreator(new PageCreator() {
			@Override
			public Page createPage() {
				return getEditPage();
/ TODO

/t
AirportPage(EvoEditPage).createEditInterface() line: 150	
		createAjaxWindow();
/d
		createCreateButton();
/s
AirportPage(EvoEditPage).createCreateButton() line: 124	

		Form<T> createForm = new Form<T>("createForm");
		add(createForm);

		final IModel<String> createPageTitle = new StringResourceModel("createEntity", EvoEditPage.this, new Model<EvoEditPage<T>>(EvoEditPage.this), "Create ${entityName}");
		createButton = new AjaxFallbackButton("createButton", createForm) {
			@Override
			protected void onSubmit(AjaxRequestTarget aTarget, Form<?> aForm) {
				EvoEditFormPage<T> page = getEditPage();
				...

		createForm.add(createButton);

/t
AirportPage(EvoEditPage).createPage() line: 162	
		createEditInterface();
/d
		super.createPage();
/s
AirportPage(EvoListPage).createPage() line: 92	
		add(new Label("pageTitle", "Search " + getSearchPageTitle().getObject()));
/s
AirportPage(EvoListPage).getSearchPageTitle() line: 108	
		final IModel<String> pageTitle = new StringResourceModel("pageTitle", EvoListPage.this, new Model<EvoListPage<T>>(EvoListPage.this), "Search ${entityName}");
		return pageTitle;
/t
/s
StringResourceModel(LoadableDetachableModel).getObject() line: 117	
		if (!attached)
		{
			attached = true;
			transientModelObject = load();
"Search Airport"
		return transientModelObject;
/t
AirportPage(EvoListPage).createPage() line: 93	
		add(new Label("pageTitle", "Search " + getSearchPageTitle().getObject()));
/d
		createFeedbackPanel();
		createListPanel();
/s
AirportPage.createListPanel() line: 30	
		searchListPanel = new AirportSearchListPanel("evoSearchList", null, webComponentEventSwitchBoard, daoWrapper, getListActions());

/ Intermezzo

public class AirportSearchListPanel extends EvoSearchListPanel<Airport> {
public class EvoSearchListPanel<T extends DescribedUniqueFieldValueObject> extends GenericListPanel<T> {
abstract public class GenericListPanel<T extends EntityInterface> extends BaseWebComponent {
abstract public class BaseWebComponent extends Panel implements WebComponentListener, Serializable {


/ Er is GEEN AirportSearchListPanel.html
/ Er is GEEN EvoSearchListPanel.html

$ vi GenericListPanel.html
<wicket:extend>
	<div wicket:id="status" class="status">[[status messages]]</div>
	<form class="genericListPanelForm" wicket:id="filterForm" name="genericListPanelForm" id="genericListPanelForm">
	<wicket:enclosure>
		<h2><div wicket:id="tableTitle" /></h2>
	</wicket:enclosure>
	<p><input type="hidden" name="tracker" wicket:id="focus-tracker" /></p>
	<span wicket:id="group">
		<input type="checkbox" wicket:id="groupselector">Check/Uncheck all (displayed)</input>
		<table wicket:id="objectTable" class="grid wicketPagination"></table>
	</span>
	<wicket:child />
	<div class="groupaction">
		<span wicket:id="groupactions"></span>
		<wicket:child />
	</div> 
	<span wicket:id="focus-restore">[call to focus restore script]</span>
	</form>
</wicket:extend>

$ vi BaseWebComponent.java
<wicket:panel>
	<wicket:child/>
</wicket:panel>

/ Dus GenericListPanel extends Panel	,

/ Einde Intermezzo

/ we waren in	,j
AirportPage.createListPanel() line: 30	
		searchListPanel = new AirportSearchListPanel("evoSearchList", null, webComponentEventSwitchBoard, daoWrapper, getListActions());
/s
AirportPage(EvoEditPage).getListActions() line: 181	
/ Dit zijn de 2 action die we op elke row zien	, edit en delete	,
		EntityActionButton<T> button = new EntityActionAjaxButton<T>("edit", new ResourceModel("edit")) {
			@Override
			protected void onSubmit(Button aButton, AjaxRequestTarget aTarget, IModel<T> aSelection) {
				EvoEditFormPage<T> page = getEditPage();
				...
		actions.add(button);
/ EDIT BUTTON BUTTONS ON SEARCHLISTFORM

		// Delete the selected entity
		button = new EntityActionAjaxButton<T>("delete", new ResourceModel("delete")) {
			@Override
			protected void onSubmit(Button aButton, AjaxRequestTarget aTarget, IModel<T> aSelection) {
				T selection = aSelection.getObject();
				...
		actions.add(button);
/ DELETE BUTTON BUTTONS ON SEARCHLISTFORM
		return actions;
/t
AirportPage.createListPanel() line: 30	
		searchListPanel = new AirportSearchListPanel("evoSearchList", null, webComponentEventSwitchBoard, daoWrapper, getListActions());
/s
AirportSearchListPanel.<init>(String, BaseWebComponent, WebComponentEventSwitchBoard, BeanWrapper<BaseDAOInterface<Airport>>, Collection<EntityAction<Airport>>) line: 30	
		super(aId, aParent, aWebComponentEventSwitchBoard, new EntityListActionBuilder<Airport>(anActionList), aDaoWrapper);
/s
EntityListActionBuilder.<init>(Collection<EntityAction<T>>) line: 28	
		super(aActions);

/ Intermezzo

public class AirportSearchListPanel extends EvoSearchListPanel<Airport> {
	public AirportSearchListPanel(String aId, BaseWebComponent aParent, WebComponentEventSwitchBoard aWebComponentEventSwitchBoard,
			BeanWrapper<? extends BaseDAOInterface<Airport>> aDaoWrapper, Collection<EntityAction<Airport>> anActionList) {
		super(aId, aParent, aWebComponentEventSwitchBoard, new EntityListActionBuilder<Airport>(anActionList), aDaoWrapper);
	}

	@Override
	protected void addFilterColumns(List<IColumn> aColumnList) {
		super.addFilterColumns(aColumnList);
		aColumnList.add(new ConfigurableTextFilteredPropertyColumn<String>(new ResourceModel("country"), "country", "country",
				new ConfigurableTextFilteredPropertyColumn.FilterTextfieldBuilder<String>(15)));
		aColumnList.add(new ConfigurableTextFilteredPropertyColumn<String>(new ResourceModel("city"), "city", "city",
				new ConfigurableTextFilteredPropertyColumn.FilterTextfieldBuilder<String>(30)));
	}
}

public class EntityListActionBuilder<T extends EntityInterface> extends BaseActionBuilder<T> implements ListActionsPanelBuilder<T> {
	public EntityListActionBuilder(Collection<EntityAction<T>> aActions) {
		super(aActions);
	}

	@Override
	public AbstractActionsPanel<T> build(String aId, WebComponentEventSwitchBoard aWebComponentEventSwitchBoard, GenericListPanel<T> aParent, IModel<T> aModel) {
		return new EntityActionPanel(aId, aParent, aWebComponentEventSwitchBoard, aModel);
	}
}

/ Einde Intermezzo

/t
AirportSearchListPanel.<init>(String, BaseWebComponent, WebComponentEventSwitchBoard, BeanWrapper<BaseDAOInterface<Airport>>, Collection<EntityAction<Airport>>) line: 30	
		super(aId, aParent, aWebComponentEventSwitchBoard, new EntityListActionBuilder<Airport>(anActionList), aDaoWrapper);
/s
...
AirportSearchListPanel(GenericListPanel).<init>(String, BaseWebComponent, WebComponentEventSwitchBoard, BeanWrapper<BaseDAOInterface<T>>, int, TableDataProviderBuilder<T>, List<EntityGroupAction<T>>) line: 84	

	protected List<IColumn> columns = new ArrayList<IColumn>();

	protected BeanWrapper<? extends BaseDAOInterface<T>> daoWrapper;

	protected TableDataProviderInterface<T> dataProvider = null;

	protected List<EntityCollectionAction<T>> entityCollectionActions = null;

	private ListActionsPanelBuilder<T> panelBuilder = new ListCrudActionsPanel.Builder<T>();

	private TableDataProviderBuilder<T> tableDataProviderBuilder;

	public GenericListPanel(final String id, BaseWebComponent parent, final WebComponentEventSwitchBoard aWebComponentEventSwitchBoard, BeanWrapper<? extends BaseDAOInterface<T>> aDaoWrapper, int aListLength, TableDataProviderBuilder<T> aTableDataProviderBuilder, List<EntityGroupAction<T>> aGroupActionList) {
		super(id, parent, aWebComponentEventSwitchBoard);
/d
		daoWrapper = aDaoWrapper;

		if (aTableDataProviderBuilder != null) {
/ NEE
		initialize();
/s
AirportSearchListPanel(GenericListPanel).initialize() line: 241	
			tableDataProviderBuilder = getDefaultTableDataProviderBuilder();
		dataProvider = tableDataProviderBuilder.build(daoWrapper, getDefaultSortPropertyName());

		IModel<String> filterColTitle = new IModel<String>() {
		...
		myColumnsList.add(new FilteredAbstractColumn(filterColTitle) {
/  FilteredAbstractColumn is een Wicket type	,
				ResetableGoAndClearFilter resetableGoAndClearFilter = new ResetableGoAndClearFilter(componentId, form, dataProvider, GenericListPanel.this);
/ Dit zijn de go, clear, excel buttons	, de go button is WH in wicket program	, de clear, excel doen we zelf	,
// GO CLEAR EXCEL BUTTONS BUTTONS IN SEARCHLISTFORM
				return resetableGoAndClearFilter;

		...
		addFilterColumns(myColumnsList);
/s
AirportSearchListPanel.addFilterColumns(List<IColumn>) line: 35	

		columnList.add(new ConfigurableTextFilteredPropertyColumn<String>(new ResourceModel(EvoDataProperties.CODE), EvoDataProperties.CODE, EvoDataProperties.CODE, new ConfigurableTextFilteredPropertyColumn.FilterTextfieldBuilder<String>(getDataProperties().getCodeFilterSize())));

		columnList.add(new ConfigurableTextFilteredPropertyColumn<String>(new ResourceModel(EvoDataProperties.DESCRIPTION), EvoDataProperties.DESCRIPTION, EvoDataProperties.DESCRIPTION, new ConfigurableTextFilteredPropertyColumn.FilterTextfieldBuilder<String>(getDataProperties() .getDescriptionFilterSize())));

/t
AirportSearchListPanel.addFilterColumns(List<IColumn>) line: 36	
		super.addFilterColumns(aColumnList);

		aColumnList.add(new ConfigurableTextFilteredPropertyColumn<String>(new ResourceModel("country"), "country", "country", new ConfigurableTextFilteredPropertyColumn.FilterTextfieldBuilder<String>(15)));

		aColumnList.add(new ConfigurableTextFilteredPropertyColumn<String>(new ResourceModel("city"), "city", "city", new ConfigurableTextFilteredPropertyColumn.FilterTextfieldBuilder<String>(30)));

/t
AirportSearchListPanel(GenericListPanel).initialize() line: 298	
		addFilterColumns(myColumnsList);
/d
		columns.addAll(myColumnsList);
		makeTable(myColumnsList);
/s
AirportSearchListPanel(GenericListPanel).makeTable(List<IColumn>) line: 459	
		objectDataTable = getMpoDataTable(aColumnsList);
		filterForm = new FilterForm("filterForm", dataProvider);
		if (isFilterOn()) {
			objectDataTable.addTopToolbar(new FilterToolbar(objectDataTable, filterForm, dataProvider));
/s
FilterToolbar.<init>(DataTable<?>, FilterForm<T>, IFilterStateLocator<T>) line: 83	
				filter = filteredCol.getFilter(FILTER_COMPONENT_ID, form);
/s
GenericListPanel$2.getFilter(String, FilterForm) line: 280	

		...
		filterForm.add(group);
		filterForm.add(titleLabel);

		addOrReplace(filterForm);

		addGroupActions();
/t
AirportPage.createListPanel() line: 31	
		searchListPanel = new AirportSearchListPanel("evoSearchList", null, webComponentEventSwitchBoard, daoWrapper, getListActions());
/d
		searchListPanel.setDataProperties(dataProperties);
		...
		add(searchListPanel);
		searchListPanel.setOutputMarkupId(true);
/t

/ 7	. 

/ we click op een edit button	,

/ we nemen incoterm page, ipv airport	, want in cargo zijn er geen airports config	,


/ we set b in	,
EvoEditPage$4 [line: 189] - onSubmit(Button, AjaxRequestTarget, IModel<T>)	

/ Intermezzo

/=
public abstract class EvoEditPage<T extends DescribedUniqueFieldValueObject> extends EvoListPage<T> implements EvoEditFormCallback {
	@Override
	protected Collection<EntityAction<T>> getListActions() {
		List<EntityAction<T>> actions = new ArrayList<EntityAction<T>>();
		// Edit the selected entity
		final IModel<String> editPageTitle = new StringResourceModel("editEntity", EvoEditPage.this, new Model<EvoEditPage<T>>(EvoEditPage.this),
				"Update ${entityName}");
		EntityActionButton<T> button = new EntityActionAjaxButton<T>("edit", new ResourceModel("edit")) {
			@Override
			protected void onSubmit(Button aButton, AjaxRequestTarget aTarget, IModel<T> aSelection) {
->				EvoEditFormPage<T> page = getEditPage();

/ Einde Intermezzo

/s
EvoEditPage$4.onSubmit(Button, AjaxRequestTarget, IModel<T>) line: 189	
	@Override
	protected Collection<EntityAction<T>> getListActions() {
		...
		EntityActionButton<T> button = new EntityActionAjaxButton<T>("edit", new ResourceModel("edit")) {
			@Override
			protected void onSubmit(Button aButton, AjaxRequestTarget aTarget, IModel<T> aSelection) {
				EvoEditFormPage<T> page = getEditPage();
/s
IncoTermPage.getEditPage() line: 56	
		return super.getEditPage();
/s
IncoTermPage(EvoEditPage).getEditPage() line: 169	
		if (editPage == null) {
			// The edit page to which we will redirect when needed
			editPage = new EvoEditFormPage<T>(this, daoWrapper, dataProperties);
/s
EvoEditFormPage.<init>(EvoEditFormCallback, BeanWrapper<EnumeratedValueObjectDAOInterface<T>>, EvoDataProperties) line: 86	
aCallback	com.mpobjects.oms.view.wicket.incoterm.IncoTermPage  (id=20317)	
aDaoWrapper com.mpobjects.view.wicket.util.BeanWrapper@6bafa1c[type=interface com.mpobjects.oms.dao.incoterm.IncoTermDAO,beanName=<null>]	
aDataProperties	com.mpobjects.oms.view.wicket.enumeratedvo.EvoDataProperties  (id=20363)	
/ TODO
		super();
		callback = aCallback;
		daoWrapper = aDaoWrapper;
		dataProperties = aDataProperties;
		createPage();
/s
EvoEditFormPage.createPage() line: 141	
		add(new Label("pageTitle", new PropertyModel<String>(this, "pageTitle")));
		createFeedbackPanel();
		createEditPanel();
/s
EvoEditFormPage.createEditPanel() line: 122	
		EntityFormActionBuilder<T> panelBuilder = new EntityFormActionBuilder<T>(getFormActions());
/s
EvoEditFormPage.getFormActions() line: 152	
		EntityActionButton<T> saveBtn = new EntityActionAjaxButton<T>("ok", new ResourceModel("save")) {
			@Override
			protected void onSubmit(Button aButton, AjaxRequestTarget aTarget, IModel<T> aSelection) {
				T evo = aSelection.getObject();
				...
		actions.add(saveBtn);
		EntityActionButton<T> cancelBtn = new EntityActionAjaxButton<T>("cancel", new ResourceModel("cancel")) {
			@Override
			protected Button createButton(final IModel<T> aModel, String aId) {
/ TODO
			@Override
			protected void onSubmit(Button aButton, AjaxRequestTarget aTarget, IModel<T> aSelection) {
				callback.onEditFormCallback(true, aTarget, null);
				...
		cancelBtn.setDefaultFormProcessing(false);
		actions.add(cancelBtn);

/t
EvoEditFormPage.createEditPanel() line: 122	
		EntityFormActionBuilder<T> panelBuilder = new EntityFormActionBuilder<T>(getFormActions());
/d
/s
EntityFormActionBuilder.<init>(Collection<EntityAction<T>>) line: 28	
		super(aActions);
/t
EvoEditFormPage.createEditPanel() line: 123	
		EntityFormActionBuilder<T> panelBuilder = new EntityFormActionBuilder<T>(getFormActions());
/d
		editPanel = new EvoEditPanel<T>("editPanel", new WebComponentEventSwitchBoard(), panelBuilder, daoWrapper, dataProperties);
/s
EvoEditPanel.<init>(String, WebComponentEventSwitchBoard, FormActionsPanelBuilder<T>, BeanWrapper<EnumeratedValueObjectDAOInterface<T>>, EvoDataProperties) line: 45	
		super(id, null, webComponentEventSwitchBoard, null, formActionsPanelBuilder, aDaoWrapper);

/ Intermezzo

public class EvoEditFormPage<T extends DescribedUniqueFieldValueObject> extends BaseContextPage {
public class BaseContextPage extends BasePage implements Serializable {

$ vi EvoEditFormPage.html

<wicket:extend>
		<div wicket:id="feedback"></div>
		<div wicket:id="editPanel"></div>
		<wicket:child />
	</wicket:extend>

public class EvoEditPanel<T extends DescribedUniqueFieldValueObject> extends GenericFormPanel<T> {
abstract public class GenericFormPanel<T extends EntityInterface> extends BaseWebComponent {
abstract public class BaseWebComponent extends Panel implements WebComponentListener, Serializable {

$ vi EvoEditPanel.html

	<wicket:extend>
		<dl>
				<wicket:enclosure child="code">
					<dt>
						<wicket:message key="code">Code</wicket:message>
					</dt>
					<dd>
						<input type="text" wicket:id="code" size="10" name="code" />
						<span wicket:id="code_feedback"></span>
					</dd>
				</wicket:enclosure>

				<wicket:enclosure child="description">
					<dt>
						<wicket:message key="description">Description</wicket:message>
					</dt>
					<dd>
						<textarea wicket:id="description" name="description" rows="4" cols="50"></textarea>
						<span wicket:id="description_feedback"></span>
					</dd>
				</wicket:enclosure>

			<wicket:child />
		</dl>
	</wicket:extend>

$ vi GenericFormPanel.java

<form class="genericForm" name="genericForm" id="genericForm" wicket:id="genericForm">
	<h2><div wicket:id="formTitle"/></h2>
	<wicket:child/>
	<div class="actionPanelContainer" wicket:id="actionPanel" />
</form>

/ Einde Intermezzo

/ we waren 	in,	
EvoEditPanel.<init>(String, WebComponentEventSwitchBoard, FormActionsPanelBuilder<T>, BeanWrapper<EnumeratedValueObjectDAOInterface<T>>, EvoDataProperties) line: 45	
this	com.mpobjects.oms.view.wicket.enumeratedvo.EvoEditPanel  (id=20662)	

		super(id, null, webComponentEventSwitchBoard, null, formActionsPanelBuilder, aDaoWrapper);
/s
EvoEditPanel(GenericFormPanel).<init>(String, BaseWebComponent, WebComponentEventSwitchBoard, T, FormActionsPanelBuilder<T>, BeanWrapper<BaseDAOInterface<T>>) line: 55	

		super(id, null, webComponentEventSwitchBoard, null, formActionsPanelBuilder, aDaoWrapper);
/s
EvoEditPanel(GenericFormPanel).<init>(String, BaseWebComponent, WebComponentEventSwitchBoard, T, FormActionsPanelBuilder<T>, BeanWrapper<BaseDAOInterface<T>>) line: 56	

	protected BeanWrapper<? extends BaseDAOInterface<T>> daoWrapper;

	protected GenericForm<T> form;

	protected FormActionsPanelBuilder<T> panelBuilder = new FormCrudActionsPanel.Builder<T>();

		daoWrapper = aDaoWrapper;

		T myObject = null;
		if (anObject == null) {
			myObject = daoWrapper.getBean().createNewObject();
/s
	@Override
	public Type createNewObject() {
		try {
			return type.newInstance();
/t
	public GenericFormPanel(final String id, BaseWebComponent parent, final WebComponentEventSwitchBoard aWebComponentEventSwitchBoard, final T anObject, FormActionsPanelBuilder<T> formActionsPanelBuilder, BeanWrapper<? extends BaseDAOInterface<T>> aDaoWrapper) {
			myObject = daoWrapper.getBean().createNewObject();
/d
SystemId:0	isDeleted:false	Code:	Description:Version:2000
		if (formActionsPanelBuilder != null) {
			panelBuilder = formActionsPanelBuilder;
		}

		IModel<T> myModel = new EntityDetachableModel<T>(myObject, aDaoWrapper);
		createPanel(new CompoundPropertyModel<T>(myModel));
/s
EvoEditPanel.createPanel(CompoundPropertyModel<T>) line: 84	
			if (dataProperties == null) {
/ JA
				tempModel = aModel;
/t
EvoEditPanel.<init>(String, WebComponentEventSwitchBoard, FormActionsPanelBuilder<T>, BeanWrapper<EnumeratedValueObjectDAOInterface<T>>, EvoDataProperties) line: 46	
		super(id, null, webComponentEventSwitchBoard, null, formActionsPanelBuilder, aDaoWrapper);

		// call again, this time is will be executed for real
		createPanel(tempModel);
/s
EvoEditPanel.createPanel(CompoundPropertyModel<T>) line: 84	
		if (dataProperties == null) {
/ NEE
		} else {
			super.createPanel(aModel);
/s
EvoEditPanel(GenericFormPanel).createPanel(CompoundPropertyModel<T>) line: 167	
		form = new GenericForm<T>("genericForm", model);
		add(form);
		AbstractActionsPanel<T> actionPanel = getActionsPanel("actionPanel", model);
/s
EvoEditPanel(GenericFormPanel).getActionsPanel(String, CompoundPropertyModel<T>) line: 187	
		return panelBuilder.build(componentId, model, webComponentEventSwitchBoard, this);
/s
EntityFormActionBuilder.build(String, CompoundPropertyModel<T>, WebComponentEventSwitchBoard, GenericFormPanel<T>) line: 38	
		return new EntityActionPanel(aId, aParent, aWebComponentEventSwitchBoard, aModel);
/s
BaseActionBuilder$EntityActionPanel.<init>(String, BaseWebComponent, WebComponentEventSwitchBoard, IModel<T>) line: 31	
			super(aId, aParent, aWebComponentEventSwitchBoard);
/s
BaseActionBuilder$EntityActionPanel(AbstractActionsPanel).<init>(String, BaseWebComponent, WebComponentEventSwitchBoard) line: 45	
		super(id, parent, aWebComponentEventSwitchBoard);
/ BaseWebComponent
/t
BaseActionBuilder$EntityActionPanel.<init>(String, BaseWebComponent, WebComponentEventSwitchBoard, IModel<T>) line: 32	
			super(aId, aParent, aWebComponentEventSwitchBoard);
/d
			RepeatingView view = new RepeatingView("actions");
			add(view);
			createActions(view, aModel);
/s
EntityFormActionBuilder(BaseActionBuilder).createActions(RepeatingView, IModel<T>) line: 74	
		for (EntityAction<T> action : actions) {
			Component component = action.createComponent(view.newChildId(), aModel);
/s
EvoEditFormPage$1(EntityActionButton).createComponent(String, IModel<T>) line: 49	
		return new EntityABPanel(aComponentId, createButton(aModel, "button"));
/t
EntityFormActionBuilder(BaseActionBuilder).createActions(RepeatingView, IModel<T>) line: 76	
			Component component = action.createComponent(view.newChildId(), aModel);
/d
component	AbstractEntityActionButton$EntityABPanel  (id=22416)	
			if (component != null) {
				view.add(component);
/ volgende	,
		for (EntityAction<T> action : actions) {
			Component component = action.createComponent(view.newChildId(), aModel);
/s
EvoEditFormPage$2(EntityActionButton).createComponent(String, IModel<T>) line: 49	
		return new EntityABPanel(aComponentId, createButton(aModel, "button"));
/s
EvoEditFormPage$2.createButton(IModel<T>, String) line: 192	
/ Dit is NIET bij 'ok', alleen bij cancel	,
/ TODO
			if (component != null) {
				view.add(component);
...
/t
EvoEditPanel(GenericFormPanel).createPanel(CompoundPropertyModel<T>) line: 171	
		AbstractActionsPanel<T> actionPanel = getActionsPanel("actionPanel", model);
/d
		form.add(actionPanel);
		setForm(form);
/s
EvoEditPanel.setForm(GenericForm<T>) line: 113	
		TextField<String> codeField = new RequiredTextField<String>(EvoDataProperties.CODE);
		...
		aform.addWithFeedBackLabel(codeField);

		TextArea<String> descField = new TextArea<String>(EvoDataProperties.DESCRIPTION);
		...
		aform.addWithFeedBackLabel(descField);
/t
EvoEditPanel(GenericFormPanel).createPanel(CompoundPropertyModel<T>) line: 181	
		setForm(form);
/d
		Label myTitleLable = new Label("formTitle", new PropertyModel<String>(this, "title")) {
		...
		form.add(myTitleLable);
...
/t
EvoEditFormPage.createEditPanel() line: 124	
		editPanel = new EvoEditPanel<T>("editPanel", new WebComponentEventSwitchBoard(), panelBuilder, daoWrapper, dataProperties);
/d
		editPanel.setOutputMarkupId(true);
		add(editPanel);

this	EvoEditFormPage  (id=20319)	
	children	MarkupContainer$ChildList  (id=22671)	
		childs	Object[6]  (id=23355)	
			[0]	BasePage$2  (id=23356)	
			[1]	BasePage$3  (id=23357)	
			[2]	WebMarkupContainer  (id=23358)	
			[3]	Label  (id=23366)	
			[4]	FeedbackPanel  (id=22672)	
			[5]	EvoEditPanel  (id=20662)	
				children	MarkupContainer$ChildList  (id=22670)	
					childs	Object[3]  (id=22674)	
						[0]	GenericForm  (id=22589)	
							children	MarkupContainer$ChildList  (id=22731)	
								childs	Object[6]  (id=22736)	
									[0]	BaseActionBuilder$EntityActionPanel  (id=22294)	
									[1]	RequiredTextField  (id=22603)	
									[2]	FeedbackLabel  (id=22738)	
									[3]	TextArea  (id=22739)	
									[4]	FeedbackLabel  (id=22749)	
									[5]	GenericFormPanel$2  (id=22626)	
/ ok, cancel buttons	,
								size	6	

/ Intermezzo

/ we zien hierboven in de hierarch GenericForm, NIET GenericFormPanel	,

abstract public class GenericFormPanel<T extends EntityInterface> extends BaseWebComponent {
	public GenericFormPanel(final String id, BaseWebComponent parent, final WebComponentEventSwitchBoard aWebComponentEventSwitchBoard, final T anObject, FormActionsPanelBuilder<T> formActionsPanelBuilder, BeanWrapper<? extends BaseDAOInterface<T>> aDaoWrapper) {
		...
		createPanel(new CompoundPropertyModel<T>(myModel));
/s
	protected void createPanel(CompoundPropertyModel<T> model) {
		form = new GenericForm<T>("genericForm", model);
		add(form);

/ Einde Intermezzo

/t
EvoEditPage$4.onSubmit(Button, AjaxRequestTarget, IModel<T>) line: 190	
				EvoEditFormPage<T> page = getEditPage();
/d
page	EvoEditFormPage  (id=23506)	

/ Intermezzo

/=
public abstract class EvoEditPage<T extends DescribedUniqueFieldValueObject> extends EvoListPage<T> implements EvoEditFormCallback {
	@Override
	protected Collection<EntityAction<T>> getListActions() {
		EntityActionButton<T> button = new EntityActionAjaxButton<T>("edit", new ResourceModel("edit")) {
			@Override
			protected void onSubmit(Button aButton, AjaxRequestTarget aTarget, IModel<T> aSelection) {
->			EvoEditFormPage<T> page = getEditPage();
/d

/ Einde Intermezzo

				page.setPageTitle(editPageTitle.getObject());
				page.setEditRecord(aSelection.getObject());
				if (useAjax && usePopupEdit && aTarget != null) {
/ useAjax=false
/ usePopupEdit=true
/ aTarget	AjaxRequestTarget  (id=23491)	

					editWindow.show(aTarget);
				} else {
					setResponsePage(page);

/ FIX SCS-4910

$ vi Country.java

@Privilege(object = "Country", type = "edit")
public class CountryPage extends EvoEditPage<Country> {
	public CountryPage() {
		...
		usePopupEdit = false;

/ Einde FIX SCS-4910
















































/ Einde SCS-4910

/ SELENIUM BUILD FROM SOURCE

/ we zijn op	,
https://github.com/SeleniumHQ/selenium/

[eric@localhost Selenium]$ pwd
/home/eric/Devel/Selenium
[eric@localhost Selenium]$ git clone https://github.com/SeleniumHQ/selenium.git

[eric@localhost selenium]$ find -iname "*chrome*"
./java/client/src/org/openqa/selenium/chrome
./java/client/src/org/openqa/selenium/chrome/ChromeOptions.java
./java/client/src/org/openqa/selenium/chrome/ChromeDriverService.java
./java/client/src/org/openqa/selenium/chrome/ChromeDriver.java
./java/client/src/org/openqa/selenium/chrome/ChromeDriverCommand.java
./java/client/src/org/openqa/selenium/chrome/ChromeDriverCommandExecutor.java
/ Dit is de chromedriver	,

[eric@localhost selenium]$ ./go
(in /home/eric/Devel/Selenium/selenium)
[eric@localhost selenium]$ ./go
(in /home/eric/Devel/Selenium/selenium)
Compiling: //java/client/src/org/openqa/selenium:beta as build/java/client/src/org/openqa/selenium/beta.jar
Compiling: //java/client/src/org/openqa/selenium:base as build/java/client/src/org/openqa/selenium/base.jar
Compiling: //java/client/src/org/openqa/selenium:codecs as build/java/client/src/org/openqa/selenium/codecs.jar
Compiling: //java/client/src/org/openqa/selenium/interactions:api as build/java/client/src/org/openqa/selenium/interactions/api.jar
Compiling: //java/client/src/org/openqa/selenium/logging:api as build/java/client/src/org/openqa/selenium/logging/api.jar
Compiling: //java/client/src/org/openqa/selenium/security:security as build/java/client/src/org/openqa/selenium/security/security.jar
Compiling: //java/client/src/org/openqa/selenium:webdriver-api as build/java/client/src/org/openqa/selenium/webdriver-api.jar
Compiling: //java/client/src/org/openqa/selenium/os:os as build/java/client/src/org/openqa/selenium/os/os.jar
Compiling: //java/client/test/org/openqa/selenium/testing:dev_mode as build/java/client/test/org/openqa/selenium/testing/dev_mode.jar
Compiling: //java/client/test/org/openqa/selenium/testing:util as build/java/client/test/org/openqa/selenium/testing/util.jar
Compiling: //java/client/test/org/openqa/selenium:build as build/java/client/test/org/openqa/selenium/build.jar
Compiling: //java/client/src/com/thoughtworks/selenium:api as build/java/client/src/com/thoughtworks/selenium/api.jar
Compiling: //java/client/src/org/openqa/selenium/interactions:interactions as build/java/client/src/org/openqa/selenium/interactions/interactions.jar
Compiling: //java/client/src/org/openqa/selenium/net:net as build/java/client/src/org/openqa/selenium/net/net.jar
Compiling: //java/client/src/org/openqa/selenium/remote:api as build/java/client/src/org/openqa/selenium/remote/api.jar
Compiling: //java/client/src/org/openqa/selenium/logging:logging as build/java/client/src/org/openqa/selenium/logging/logging.jar
Compiling: //java/client/src/org/openqa/selenium/remote:base as build/java/client/src/org/openqa/selenium/remote/base.jar
Compiling: //java/client/src/org/openqa/selenium/remote:common as build/java/client/src/org/openqa/selenium/remote/common.jar
Compiling: //java/client/src/org/openqa/selenium/remote:http-session-id as build/java/client/src/org/openqa/selenium/remote/http-session-id.jar
Compiling: //java/client/src/org/openqa/selenium/io:io as build/java/client/src/org/openqa/selenium/io/io.jar
Compiling: //java/client/src/org/openqa/selenium/remote:remote as build/java/client/src/org/openqa/selenium/remote/remote.jar
Scanning deps
Writing build/javascript/deps.js
Compiling: //java/client/test/org/openqa/selenium/testing/drivers:browser as build/java/client/test/org/openqa/selenium/testing/drivers/browser.jar
Repacking jetty
Compiling: //java/client/test/org/openqa/selenium/environment/webserver:webserver as build/java/client/test/org/openqa/selenium/environment/webserver/webserver.jar
Compiling: //java/client/test/org/openqa/selenium/environment:environment as build/java/client/test/org/openqa/selenium/environment/environment.jar
Compiling: //java/server/src/org/openqa/selenium/remote/server/log:log as build/java/server/src/org/openqa/selenium/remote/server/log/log.jar
Compiling: //java/server/src/org/openqa/selenium/remote/server:restish as build/java/server/src/org/openqa/selenium/remote/server/restish.jar
Compiling: //java/client/src/org/openqa/selenium/support/events:events as build/java/client/src/org/openqa/selenium/support/events/events.jar
Compiling: //java/server/src/org/openqa/selenium/remote/server:server_very_core as build/java/server/src/org/openqa/selenium/remote/server/server_very_core.jar
Compiling: //javascript/remote:clientbin as build/javascript/remote/clientbin.js
Compiling: //java/server/src/org/openqa/selenium/remote/server:server_core as build/java/server/src/org/openqa/selenium/remote/server/server_core.jar
Preparing: //third_party/js/sizzle:sizzle:header as build/third_party/js/sizzle/sizzle.h
Generating header for build/third_party/js/sizzle/sizzle.js
Compiling: //java/client/src/org/openqa/selenium/remote/service:service as build/java/client/src/org/openqa/selenium/remote/service/service.jar
Compiling: //java/client/src/org/openqa/selenium/ie:ie as build/java/client/src/org/openqa/selenium/ie/ie.jar
Compiling: //cpp:noblur64 as build/cpp/amd64/libnoblur64.so
Falling back to cpp/prebuilt/amd64/libnoblur64.so
Compiling: //cpp:imehandler64 as build/cpp/amd64/libimehandler64.so
Falling back to cpp/prebuilt/amd64/libimehandler64.so
Preparing: //java/client/src/org/openqa/selenium/firefox:amd64 as build/java/client/src/org/openqa/selenium/firefox/amd64
Compiling: //javascript/firefox-driver:bad-cert-listener as build/javascript/firefox-driver/bad-cert-listener.js
Compiling: //javascript/firefox-driver:session as build/javascript/firefox-driver/session.js
Compiling: //javascript/firefox-driver:session-store as build/javascript/firefox-driver/session-store.js
Compiling: //javascript/firefox-driver:command-processor as build/javascript/firefox-driver/command-processor.js
Building: //javascript/firefox-driver:command-processor-xpt as build/javascript/firefox-driver/nsICommandProcessor.xpt
Falling back to javascript/firefox-driver/prebuilt/firefox-driver/nsICommandProcessor.xpt
Building: //javascript/firefox-driver:coordinates-xpt as build/javascript/firefox-driver/wdICoordinate.xpt
Falling back to javascript/firefox-driver/prebuilt/firefox-driver/wdICoordinate.xpt
Compiling: //javascript/firefox-driver:modifier-keys as build/javascript/firefox-driver/modifier-keys.js
Building: //javascript/firefox-driver:modifier-keys-xpt as build/javascript/firefox-driver/wdIModifierKeys.xpt
Falling back to javascript/firefox-driver/prebuilt/firefox-driver/wdIModifierKeys.xpt
Compiling: //javascript/firefox-driver:driver-component as build/javascript/firefox-driver/driver-component.js
Building: //javascript/firefox-driver:httpd-xpt as build/javascript/firefox-driver/nsIHttpServer.xpt
Falling back to javascript/firefox-driver/prebuilt/firefox-driver/nsIHttpServer.xpt
Building: //javascript/firefox-driver:mouse-xpt as build/javascript/firefox-driver/wdIMouse.xpt
Falling back to javascript/firefox-driver/prebuilt/firefox-driver/wdIMouse.xpt
Compiling: //javascript/firefox-driver:prompt-service as build/javascript/firefox-driver/prompt-service.js
Building: //javascript/firefox-driver:response-handler-xpt as build/javascript/firefox-driver/nsIResponseHandler.xpt
Falling back to javascript/firefox-driver/prebuilt/firefox-driver/nsIResponseHandler.xpt
Building: //javascript/firefox-driver:status-xpt as build/javascript/firefox-driver/wdIStatus.xpt
Falling back to javascript/firefox-driver/prebuilt/firefox-driver/wdIStatus.xpt
Compiling: //javascript/firefox-driver:synthetic-mouse as build/javascript/firefox-driver/synthetic-mouse.js
Compiling: //javascript/firefox-driver:web-element-cache as build/javascript/firefox-driver/web-element-cache.js
Preparing: //javascript/firefox-driver:webdriver as build/javascript/firefox-driver/webdriver.xpi
Compiling: //cpp:noblur as build/cpp/i386/libnoblur.so
Falling back to cpp/prebuilt/i386/libnoblur.so
Compiling: //cpp:imehandler as build/cpp/i386/libimehandler.so
Falling back to cpp/prebuilt/i386/libimehandler.so
Preparing: //java/client/src/org/openqa/selenium/firefox:x86 as build/java/client/src/org/openqa/selenium/firefox/x86
Compiling: //java/client/src/org/openqa/selenium/firefox:firefox as build/java/client/src/org/openqa/selenium/firefox/firefox.jar
Compiling: //java/server/src/org/openqa/selenium/server:logging as build/java/server/src/org/openqa/selenium/server/logging.jar
Compiling: //java/client/src/com/thoughtworks/selenium/webdriven:emulation-api as build/java/client/src/com/thoughtworks/selenium/webdriven/emulation-api.jar
Compiling: //java/client/src/com/thoughtworks/selenium/condition:condition as build/java/client/src/com/thoughtworks/selenium/condition/condition.jar
Compiling: //java/client/src/com/thoughtworks/selenium:selenium as build/java/client/src/com/thoughtworks/selenium/selenium.jar
Compiling: //java/client/src/com/thoughtworks/selenium/webdriven/commands:commands as build/java/client/src/com/thoughtworks/selenium/webdriven/commands/commands.jar
Generating export file for core.locators.findElement at build/javascript/selenium-atoms/findElement_exports.js
Compiling //javascript/selenium-atoms:findElement as build/javascript/selenium-atoms/findElement.js
Generating export file for core.select.option.findOption at build/javascript/selenium-atoms/findOption_exports.js
Compiling //javascript/selenium-atoms:findOption as build/javascript/selenium-atoms/findOption.js
Generating export file for core.events.fire at build/javascript/selenium-atoms/fireEvent_exports.js
Compiling //javascript/selenium-atoms:fireEvent as build/javascript/selenium-atoms/fireEvent.js
Generating export file for core.events.fireAt at build/javascript/selenium-atoms/fireEventAt_exports.js
Compiling //javascript/selenium-atoms:fireEventAt as build/javascript/selenium-atoms/fireEventAt.js
Generating export file for core.element.getAttribute at build/javascript/selenium-atoms/getAttribute_exports.js
Compiling //javascript/selenium-atoms:getAttribute as build/javascript/selenium-atoms/getAttribute.js
Generating export file for core.text.getText at build/javascript/selenium-atoms/getText_exports.js
Compiling //javascript/selenium-atoms:getText as build/javascript/selenium-atoms/getText.js
Generating export file for core.text.linkLocator at build/javascript/selenium-atoms/linkLocator_exports.js
Compiling //javascript/selenium-atoms:linkLocator as build/javascript/selenium-atoms/linkLocator.js
Generating export file for core.locators.isElementPresent at build/javascript/selenium-atoms/isElementPresent_exports.js
Compiling //javascript/selenium-atoms:isElementPresent as build/javascript/selenium-atoms/isElementPresent.js
Generating export file for core.select.isSomethingSelected at build/javascript/selenium-atoms/isSomethingSelected_exports.js
Compiling //javascript/selenium-atoms:isSomethingSelected as build/javascript/selenium-atoms/isSomethingSelected.js
Generating export file for core.text.isTextPresent at build/javascript/selenium-atoms/isTextPresent_exports.js
Compiling //javascript/selenium-atoms:isTextPresent as build/javascript/selenium-atoms/isTextPresent.js
Generating export file for core.browserbot.isVisible at build/javascript/selenium-atoms/isVisible_exports.js
Compiling //javascript/selenium-atoms:isVisible as build/javascript/selenium-atoms/isVisible.js
Generating export file for core.events.setValue at build/javascript/selenium-atoms/type_exports.js
Compiling //javascript/selenium-atoms:type as build/javascript/selenium-atoms/type.js
Compiling: //java/client/src/com/thoughtworks/selenium/webdriven:webdriven as build/java/client/src/com/thoughtworks/selenium/webdriven/webdriven.jar
Compiling: //java/client/src/org/openqa/selenium/browserlaunchers/locators:locators as build/java/client/src/org/openqa/selenium/browserlaunchers/locators/locators.jar
Compiling: //java/client/src/org/openqa/selenium/support/ui:clock as build/java/client/src/org/openqa/selenium/support/ui/clock.jar
Compiling: //java/client/src/org/openqa/selenium/support/ui:components as build/java/client/src/org/openqa/selenium/support/ui/components.jar
Compiling: //java/client/src/org/openqa/selenium/support:page-factory as build/java/client/src/org/openqa/selenium/support/page-factory.jar
Compiling: //java/client/src/org/openqa/selenium/support/ui:wait as build/java/client/src/org/openqa/selenium/support/ui/wait.jar
Compiling: //java/client/src/org/openqa/selenium/lift:lift as build/java/client/src/org/openqa/selenium/lift/lift.jar
Compiling: //java/client/src/org/openqa/selenium/support/ui:elements as build/java/client/src/org/openqa/selenium/support/ui/elements.jar
Compiling: //java/client/src/org/openqa/selenium/support:support as build/java/client/src/org/openqa/selenium/support/support.jar
Compiling: //java/server/src/org/openqa/grid/shared:cli as build/java/server/src/org/openqa/grid/shared/cli.jar
Compiling: //java/server/src/org/openqa/grid/shared:interfaces as build/java/server/src/org/openqa/grid/shared/interfaces.jar
Compiling: //java/server/src/org/openqa/selenium/server/security:security as build/java/server/src/org/openqa/selenium/server/security/security.jar
Compiling: //java/server/src/cybervillains:cybervillains as build/java/server/src/cybervillains/cybervillains.jar
Compiling: //java/server/src/org/openqa/selenium/server:base as build/java/server/src/org/openqa/selenium/server/base.jar
Compiling: //javascript/selenium-atoms:selenium-atoms as build/javascript/selenium-atoms/selenium-atoms.js
Compiling: //javascript/selenium-core:selenium-core as build/javascript/selenium-core/selenium-core.jar
Compiling: //java/server/src/org/openqa/selenium/server:server_resources as build/java/server/src/org/openqa/selenium/server/server_resources.jar
Compiling: //java/client/src/org/openqa/selenium/chrome:chrome as build/java/client/src/org/openqa/selenium/chrome/chrome.jar
Compiling: //java/client/src/org/openqa/selenium/edge:edge as build/java/client/src/org/openqa/selenium/edge/edge.jar
Compiling: //java/client/src/org/openqa/selenium/opera:opera as build/java/client/src/org/openqa/selenium/opera/opera.jar
Compiling: //javascript/safari-driver:client as build/javascript/safari-driver/client.js
Compiling: //java/client/src/org/openqa/selenium/safari:safari as build/java/client/src/org/openqa/selenium/safari/safari.jar
Compiling: //java/client/src/org/openqa/selenium/remote:augmenter as build/java/client/src/org/openqa/selenium/remote/augmenter.jar
Compiling: //java/client/src/org/openqa/selenium/htmlunit:htmlunit as build/java/client/src/org/openqa/selenium/htmlunit/htmlunit.jar
Compiling: //java/server/src/org/openqa/grid/common:common as build/java/server/src/org/openqa/grid/common/common.jar
Compiling: //java/server/src/org/openqa/grid:grid as build/java/server/src/org/openqa/grid/grid.jar
Compiling: //java/server/src/org/openqa/grid/selenium:selenium as build/java/server/src/org/openqa/grid/selenium/selenium.jar
Writing: build/java/server/src/org/openqa/grid/selenium/selenium.classpath
Compiling: //java/client/test/org/openqa/selenium/testing/drivers:test_selenium_server as build/java/client/test/org/openqa/selenium/testing/drivers/test_selenium_server.jar
Compiling: //java/client/test/org/openqa/selenium/testing:annotations as build/java/client/test/org/openqa/selenium/testing/annotations.jar
Compiling: //java/client/test/org/openqa/selenium/testing/drivers:drivers as build/java/client/test/org/openqa/selenium/testing/drivers/drivers.jar
Compiling: //java/client/test/org/openqa/selenium/testing:testing as build/java/client/test/org/openqa/selenium/testing/testing.jar
Compiling: //java/client/test/org/openqa/selenium:base as build/java/client/test/org/openqa/selenium/base.jar
Compiling: //java/client/test/org/openqa/selenium/javascript:javascript as build/java/client/test/org/openqa/selenium/javascript/javascript.jar
Compiling: //java/server/test/org/openqa/selenium:server-with-tests as build/java/server/test/org/openqa/selenium/server-with-tests.jar
Uber-jar: //java/server/test/org/openqa/selenium:server-with-tests as build/java/server/test/org/openqa/selenium/server-with-tests-standalone.jar
 Testing: //javascript/atoms:test_ff 
Testing: //javascript/atoms:test_marionette 
go aborted!
org.apache.tools.ant.BuildException: Test org.openqa.selenium.javascript.ClosureTestSuite failed

(See full trace by running task with --trace)
[eric@localhost selenium]$    

/ Hij ging tests run in een chrome 	, maar failed een test	,
/ TODO





/ Einde SELENIUM BUILD FROM SOURCE

/ SELENIUM

[eric@localhost eclipse-jee-test]$ eclipse/eclipse 
/ ws workspace-wicket7

/ we zien projects

webapp-with-js
src/test/java
	MySeleniumTest.java 
	FormSeleniumTest.java 

wicket-testing
src/test/java
XTestMyCaseSecond

/ right click 	, Run as	, of Debug as	,

/ Einde SELENIUM

/ WICKET JUNIT 

/ Lees	,
/ wicket guide, 23	,
http://ci.apache.org/projects/wicket/guide/7.x/guide/testing.html
/ refs wicket guide,  8	,
http://ci.apache.org/projects/wicket/guide/7.x/guide/versioningCaching.html

/ 7	. 

/ in proj.  wicket-testing	,

/ we doen expres fout	, Simple.html klopt niet met Simple.java

$ vi Simple.java	,

public class Simple extends WebPage {
	public Simple() {

		final IModel<String>model=new Model<String>();
		final Label label=new Label("label",model);
		add(label);
		model.setObject("Foo Bar");
		
		final IModel<String>model2=new Model<String>();
		final Label label2=new Label("label", model2);
		model2.setObject("Gee Hee");
		
	}
}

$ vi Simple.html

<body>
	<h1 wicket:id="title"></h1>
</body>

$ vi SimpleTest.java

public class SimpleTest {

		private WicketTester wicketTester;
		
		@Before
		public void setup() {
			WebApplication application=new WicketApplication();
			wicketTester=new WicketTester(application);
		}

		@Test
		public void first(){
			wicketTester.startPage(Simple.class);
			wicketTester.assertRenderedPage(Simple.class);
		}
}

$ mvn test
/ fails	, want Simple.html is NIET OK	, 

/ we repair	,

$ vi Simple.html

<body>
	<h1 wicket:id="label"></h1>
</body>

/ Nu is de test OK	,

/ 7	. 

/ Nu een link erbij	,

$ vi Simple.java

		final IModel<String>model=new Model<String>();
		final Label label=new Label("label",model);
		add(label);
		model.setObject("Foo Bar");
		
		final IModel<String>model2=new Model<String>();
		final Label label2=new Label("label", model2);
		model2.setObject("Gee Hee");
		
		final IModel<String>model3=new Model<String>();
		Link<String>link=new Link<String>("reload",model3) {
			@Override
			public void onClick() {
				Page page=getPage();
				if(page.contains(label, true)){
					page.replace(label2);
				}
				else if(page.contains(label2, true)){
					page.replace(label);
				}
				
			}
		};
		add(link);
		model3.setObject("Reload");

$ vi Simple.html

<body>
	<h1 wicket:id="label"></h1>
	<a wicket:id="reload"></a>
</body>

$ vi SimpleTest.java

public class SimpleTest {

		private WicketTester wicketTester;
		
		@Before
		public void setup() {
			WebApplication application=new WicketApplication();
			wicketTester=new WicketTester(application);
		}

		@Test
		public void first(){
			wicketTester.startPage(Simple.class);
			wicketTester.assertRenderedPage(Simple.class);
		}

}
/ ONVERANDERD	,

/ $ mvn test is OK	,

/ In de test we click de link	,

/ in proj. wicket-testing	,

$ vi SimpleTest.java

public class SimpleTest {

		private WicketTester wicketTester;
		
		@Before
		public void setup() {
			WebApplication application=new WicketApplication();
			wicketTester=new WicketTester(application);
		}

		@Test
		public void first(){
			wicketTester.startPage(Simple.class);
			wicketTester.assertRenderedPage(Simple.class);
		}

		@Test
		public void click(){
			wicketTester.startPage(Simple.class);
			wicketTester.assertRenderedPage(Simple.class);
			wicketTester.assertLabel("label", "Foo Bar");
			wicketTester.clickLink("reload");
			wicketTester.assertLabel("label", "Gee Hee");
			
		}
}
/ OK

/ we kunnen deze tests vereenvoudigen	, door code in de fixture te stoppen	,

$ vi SimpleTest.java

public class SimpleTest {

		private WicketTester wicketTester;
		
		@Before
		public void setup() {
			WebApplication application=new WicketApplication();
			wicketTester=new WicketTester(application);
			wicketTester.startPage(Simple.class);
			wicketTester.assertRenderedPage(Simple.class);
		}

		@Test
		public void first(){
		}

		@Test
		public void click(){
			wicketTester.assertLabel("label", "Foo Bar");
			wicketTester.clickLink("reload");
			wicketTester.assertLabel("label", "Gee Hee");
			
		}
}
/ OK

/ 7	. 

/ in 23.3 TagTester	,

/ use org.junit.Assert	, 

$ vi Tags.html

<body>
	<div class="custom"></div>
	<div wicket:id="label" class="custom"></div>
</body>

$ vi Tags.java

public class Tags extends WebPage {
	public Tags() {
		final IModel<String>model=new Model<String>();
		final Label label=new Label("label",model);
		add(label);
		model.setObject("Foo Bar");
	}
} 

$ vi TagsTest.java

public class TagsTest {
	
	private WebApplication webApplication;
	private WicketTester wicketTester;

	@Before
	public void setUp() {
		webApplication=new WicketApplication();
		wicketTester=new WicketTester(webApplication);
		wicketTester.startPage(Tags.class);
		wicketTester.assertRenderedPage(Tags.class);
	}
	@Test
	public void first(){		
	}
	
	@Test 
	public void tags(){
		MockHttpServletResponse mockHttpServletResponse=wicketTester.getLastResponse();
		String markup=mockHttpServletResponse.getDocument();
		String other=wicketTester.getLastResponseAsString();
		Assert.assertEquals(markup, other);
	}
}

/ Waarom first()? 
/ Voordat we de tags() method hadden ,   hadden we alleen de fixture	,  als we dan $ mvn test doen, is er geen test, dus runs de fixture niet niet	, want er is geen test, we moeten daarom een lege test, first()	, toevoegen, dan runs de fixture	, 

/ We use Assert van junit, we zien dat .getLastResponse().getDocument()==.getLastResponseAsString()

/ 7	. 

/ we willen de junit test debug	,

/ Lees	,
http://maven.apache.org/surefire/maven-surefire-plugin/examples/debugging.html

/ we maken run config	wicket-testing-test-debug	,
base direcctory: /home/eric/Devel/Java/Wicket/wicket-testing
goals: -Dmaven.surefire.debug test

/ we maken debug config mvm-remote-on-wicket-testing	,
project: wicket-testing
host: localhost
port: 5005

/ set b in tags() method	, 
/ valt er in	,

	@Test 
	public void tags(){
		MockHttpServletResponse mockHttpServletResponse=wicketTester.getLastResponse();
		String markup=mockHttpServletResponse.getDocument();
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
	<div class="custom"></div>
	<div wicket:id="label" class="custom" wicketpath="label">Foo Bar</div>
</body>
</html>
 
/ 7	.

[eric@localhost wicket]$ pwd
/home/eric/Devel/Java/Wicket/wicket
[eric@localhost wicket]$ mvn test
...
INFO] Reactor Summary:
[INFO] 
[INFO] Wicket Parent ..................................... SUCCESS [2.591s]
[INFO] Wicket Util ....................................... SUCCESS [21.495s]
[INFO] Wicket Request .................................... SUCCESS [1.363s]
[INFO] Wicket Core ....................................... SUCCESS [1:35.965s]
[INFO] Wicket ............................................ SUCCESS [0.105s]
[INFO] Wicket Date/Time .................................. SUCCESS [2.149s]
[INFO] Wicket Extensions ................................. SUCCESS [8.907s]
[INFO] Wicket Development Utilities ...................... SUCCESS [1.247s]
[INFO] Wicket IoC common code ............................ SUCCESS [1.006s]
[INFO] Wicket CDI Integration ............................ SUCCESS [0.840s]
[INFO] Wicket Spring Integration ......................... SUCCESS [1.609s]
[INFO] Wicket Velocity ................................... SUCCESS [1.149s]
[INFO] Wicket Auth Roles ................................. SUCCESS [1.407s]
[INFO] Wicket Guice Integration .......................... SUCCESS [1.091s]
[INFO] Wicket JMX ........................................ SUCCESS [0.611s]
[INFO] Wicket Objects Sizeof Agent ....................... SUCCESS [0.216s]
[INFO] Wicket Bean Validation ............................ SUCCESS [2.473s]
[INFO] Wicket CDI 1.1 .................................... SUCCESS [7.082s]
[INFO] Wicket-Experimental ............................... SUCCESS [0.027s]
[INFO] Wicket-Atmosphere ................................. SUCCESS [1.398s]
[INFO] Wicket Examples ................................... SUCCESS [9.367s]
[INFO] Wicket Quickstart Archetype ....................... SUCCESS [0.476s]
[INFO] Wicket Native WebSocket Parent .................... SUCCESS [0.025s]
[INFO] Wicket Native WebSocket Core ...................... SUCCESS [1.126s]
[INFO] Wicket Native WebSocket Javax ..................... SUCCESS [1.395s]
[INFO] Wicket Native WebSocket Jetty ..................... SUCCESS [0.710s]
[INFO] Wicket Native WebSocket Jetty 9 ................... SUCCESS [0.617s]
[INFO] Wicket Native WebSocket Tomcat 7.x ................ SUCCESS [0.787s]
[INFO] Wicket Common Tests ............................... SUCCESS [0.734s]
[INFO] Wicket JavaScript Tests ........................... SUCCESS [0.079s]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 2:48.799s
[INFO] Finished at: Thu Jun 04 13:15:32 CEST 2015
[INFO] Final Memory: 75M/992M

/ 7	.

/ we test css classes	,

$ vi Css.html

	<div wicket:id="first" class="first"></div>
	<div wicket:id="prev" class="prev"></div>
	<div wicket:id="next" class="next"></div>
	<div wicket:id="last" class="last"></div>

$ vi Css.java

public class Css extends WebPage {
	public Css() {
		
		final IModel<String>model=new Model<String>();
		final Label label=new Label("first",model);
		add(label);
		model.setObject("First link");

		final IModel<String>model2=new Model<String>();
		final Label label2=new Label("prev",model);
		add(label2);
		model.setObject("Prev link");

		final IModel<String>model3=new Model<String>();
		final Label label3=new Label("next",model);
		add(label3);
		model.setObject("Next link");

		final IModel<String>model4=new Model<String>();
		final Label label4=new Label("last",model);
		add(label4);
		model.setObject("Last link");

$ vi CssTest.java

public class CssTest extends Assert{

	private WebApplication application;
	private WicketTester tester;

	@Before
	public void fixture(){
		application=new WicketApplication();
		tester=new WicketTester(application);
		tester.startPage(Css.class);
		tester.assertRenderedPage(Css.class);
	}
	@Test
	public void first(){
		
	}
	@Test
	public void css(){
		MockHttpServletResponse mockHttpServletResponse=tester.getLastResponse();
		String markup=mockHttpServletResponse.getDocument();
		List<TagTester>list=TagTester.createTagsByAttribute(markup, "wicket:id", "first", false);
		assertEquals(1, list.size());
		TagTester tagTester=list.get(0);
		boolean b=tagTester.getAttributeContains("class", "first");
		assertEquals(true, b);
		
		
	}
}

/ 7	.

/ we maken wicket-testing1.4, naast wicket-book1.4	, 

[localhost Wicket]$ pwd
/home/eric/Devel/Java/Wicket
[eric@localhost Wicket]$ mv ~/Devel/Java/Eclipse/eclipse-jee-test/workspace-wicket1.4/wicket-book1.4/ .
[eric@localhost Wicket]$ cp -a wicket-testing/ wicket-testing1.4
$ vi pom.xml
   <artifactId>wicket-testing1.4</artifactId>

     <properties>
        <wicket.version>1.4.23</wicket.version>

		<dependency>
			<groupId>org.apache.wicket</groupId>
			<artifactId>wicket</artifactId>

/ in 1.4.23 wicket, in 7 wicket-core	,

$ vi web.xml

<filter>
		<filter-name>wicket.wicket-book</filter-name>
		<filter-class>org.apache.wicket.protocol.http.WicketFilter</filter-class>
		<init-param>
			<param-name>applicationClassName</param-name>
			<param-value>my.own.WicketApplication</param-value>

/ we hebben package hermoent tot my.own	, pas hier ook aan	, dat doet eclipse niet	,


/ import beide in eclipse	,

/ 7	.

/ in proj. wicket-testing1.4	,

[eric@localhost wicket-testing1.4]$ mvn dependency:tree -Dincludes=*slf4j*

[INFO] --- maven-dependency-plugin:2.8:tree (default-cli) @ wicket-testing1.4 ---
[INFO] my.test.own:wicket-testing1.4:war:0.0.1-SNAPSHOT
[INFO] \- org.apache.wicket:wicket:jar:1.4.23:compile
[INFO]    \- org.slf4j:slf4j-api:jar:1.5.8:compile

/ In eclipse zien we	,
SLF4J: The requested version 1.6 by your slf4j binding is not compatible with [1.5.5, 1.5.6, 1.5.7, 1.5.8]
SLF4J: See http://www.slf4j.org/codes.html#version_mismatch for further details.
/ TODO

/ 7	.

	protected static final String CONFIGURATION_ROOT_DIR = "jboss.server.home.dir";

	public static final String getConfigurationRoot() {
		return System.getProperty(CONFIGURATION_ROOT_DIR);
	}

/ 7	.

/ proj. wicket-testing	,

$ vi OnlyWicketTesterTest.java

public class OnlyWicketTesterTest extends Assert{

	private WicketTester wicketTester;
	private WebApplication webApplication;

	@Test
	public void withoutApplication(){
		wicketTester=new WicketTester();
	}
	
	@Test
	public void withApplication(){
		webApplication=new WebApplication() {
			
			@Override
			public Class<? extends Page> getHomePage() {
				// TODO Auto-generated method stub
				return null;
			}
		};
		wicketTester=new WicketTester(webApplication);
	}


}

/ In de 1ste test geen (wicket) WebApplication	,
	new WicketTester()

/ we komen in	,
	public BaseWicketTester()
	{
		this(new MockApplication());
	}
/s
	public BaseWicketTester(final WebApplication application)
	{
		this(application, (MockServletContext)null);
	}

/ in de 2de test geven we wel een WebApplication, 	en komen we direct in 	,
   public BaseWicketTester(final WebApplication application)
    {
        this(application, (MockServletContext)null);
    }

/ 7	. 

/ Bestudeer	, 
	public BaseWicketTester(final WebApplication application, final ServletContext servletCtx)
/ met allemnaal mock objs	,

/ 7	. 

/ we lezen in wicket7 docs,	

public final <C extends Component> C startComponentInPage(Class<C> componentClass)
Process a component. A web page will be automatically created with the markup created in createPageMarkup(String).
Note: the instantiated component will have an auto-generated id. To reach any of its children use their relative path to the component itself. For example if the started component has a child a Link component with id "link" then after starting the component you can click it with: tester.clickLink("link"

/ Kunnen we deze page krijgen , en .assertRenderedPage() er op call?

/ 7	.

$ vi RenderPageRequestHandler.java 


/**
 * {@link IRequestHandler} that renders page instance. Depending on the <code>redirectPolicy</code>
 * flag and current request strategy the handler either just renders the page to the response, or
 * redirects to render the page. <code>REDIRECT_TO_BUFFER</code> strategy is also supported.
 * <p>

/ dus renders to the response	,

/ 7	.

public class BaseWicketTester
	public Page startPage(final IPageProvider pageProvider)
	{
		...

		// prepare request
		request.setURL(request.getContextPath() + request.getServletPath() + "/");
		IRequestHandler handler = new RenderPageRequestHandler(pageProvider);

		// process request
		processRequest(request, handler);

		// The page rendered
		return getLastRenderedPage();

/ Dus startPage calls processRequest	, 

/ 7	. 

/ we komen in	,
	WebPageRenderer.respond(RequestCycle) line: 185	
	BaseWicketTester$LastPageRecordingPageRendererProvider$1.respond(RequestCycle) line: 2672	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 837	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler, boolean) line: 667	
	WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler) line: 606	
	WicketTester(BaseWicketTester).startPage(IPageProvider) line: 836	
	WicketTester(BaseWicketTester).startPage(T) line: 853	
	WicketTester(BaseWicketTester).startComponentInPage(C, IMarkupFragment) line: 1413	
	WicketTester(BaseWicketTester).startComponentInPage(Class<C>, IMarkupFragment) line: 1313	
	WicketTester(BaseWicketTester).startComponentInPage(Class<C>) line: 1267	
	WicketTesterTest.visitPanel() line: 49	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 57	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 606	
	FrameworkMethod$1.runReflectiveCall() line: 47	
	FrameworkMethod$1(ReflectiveCallable).run() line: 12	
	FrameworkMethod.invokeExplosively(Object, Object...) line: 44	
	InvokeMethod.evaluate() line: 17	
	BlockJUnit4ClassRunner(ParentRunner<T>).runLeaf(Statement, Description, RunNotifier) line: 271	
	BlockJUnit4ClassRunner.runChild(FrameworkMethod, RunNotifier) line: 70	
	BlockJUnit4ClassRunner.runChild(Object, RunNotifier) line: 50	
	ParentRunner$3.run() line: 238	
	ParentRunner$1.schedule(Runnable) line: 63	
	BlockJUnit4ClassRunner(ParentRunner<T>).runChildren(RunNotifier) line: 236	
	ParentRunner<T>.access$000(ParentRunner, RunNotifier) line: 53	
	ParentRunner$2.evaluate() line: 229	
	BlockJUnit4ClassRunner(ParentRunner<T>).run(RunNotifier) line: 309	
	JUnit4TestSet.execute(Class, RunNotifier, String) line: 53	
	JUnit4Provider.executeTestSet(Class, RunListener, RunNotifier) line: 123	
	JUnit4Provider.invoke(Object) line: 104	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 57	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 606	
	ReflectionUtils.invokeMethodWithArray(Object, Method, Object[]) line: 164	
	ProviderFactory$ProviderProxy.invoke(Object) line: 110	
	SurefireStarter.invokeProvider(Object, ClassLoader, ClassLoader, Object) line: 175	
	SurefireStarter.runSuitesInProcessWhenForked() line: 107	
	ForkedBooter.main(String[]) line: 68	

public class WebPageRenderer extends PageRenderer
	@Override
	public void respond(RequestCycle requestCycle)
	{
		Url currentUrl = requestCycle.getUrlRenderer().getBaseUrl();
/ ""
/ TODO
		Url targetUrl = requestCycle.mapUrlFor(getRenderPageRequestHandler());
"wicket/page?0"

		else
		{
			Url beforeRenderUrl = requestCycle.mapUrlFor(getRenderPageRequestHandler());
"wicket/page?0"
			// redirect to buffer
			BufferedWebResponse response = renderPage(beforeRenderUrl, requestCycle);
/s
WebPageRenderer.renderPage(Url, RequestCycle) line: 116	

		// get the page before checking for a scheduled request handler because
		// the page may call setResponsePage in its constructor
		IRequestablePage requestablePage = getPage();
[Page class = org.apache.wicket.util.tester.BaseWicketTester$StartComponentInPage, id = 0, render count = 0]

		// keep the original response
		final WebResponse originalResponse = (WebResponse)requestCycle.getResponse();
org.apache.wicket.util.tester.BaseWicketTester$WicketTesterServletWebResponse@4b06d10b

			requestablePage.renderPage();

/ TODO

/ 7	. 

/ we debug	, 

	@Test
	public void visitPage(){
		wicketTester=new WicketTester();
		wicketTester.startPage(Simplest.class);

/ we laten expres ERR	, omdat we in Simplest.html de wicket:id="abel"	, 

org.apache.wicket.markup.MarkupException: Unable to find component with id 'abel' in [Page class = my.test.own.Simplest, id = 0, render count = 1]
	Expected: ':abel'.
	Found with similar names: 'label'
	at org.apache.wicket.markup.MarkupStream.throwMarkupException(MarkupStream.java:526) ~[wicket-core-7.0.0-M4.jar:7.0.0-M4]
	at org.apache.wicket.MarkupContainer.renderNext(MarkupContainer.java:1451) ~[wicket-core-7.0.0-M4.jar:7.0.0-M4]
	at org.apache.wicket.MarkupContainer.renderAll(MarkupContainer.java:1601) ~[wicket-core-7.0.0-M4.jar:7.0.0-M4]
	at org.apache.wicket.Page.onRender(Page.java:879) ~[wicket-core-7.0.0-M4.jar:7.0.0-M4]
	at org.apache.wicket.markup.html.WebPage.onRender(WebPage.java:142) ~[wicket-core-7.0.0-M4.jar:7.0.0-M4]
	at org.apache.wicket.Component.internalRender(Component.java:2372) ~[wicket-core-7.0.0-M4.jar:7.0.0-M4]
	at org.apache.wicket.Component.render(Component.java:2300) ~[wicket-core-7.0.0-M4.jar:7.0.0-M4]
	at org.apache.wicket.Page.renderPage(Page.java:1018) ~[wicket-core-7.0.0-M4.jar:7.0.0-M4]
	at org.apache.wicket.request.handler.render.WebPageRenderer.renderPage(WebPageRenderer.java:124) ~[wicket-core-7.0.0-M4.jar:7.0.0-M4]
	at org.apache.wicket.request.handler.render.WebPageRenderer.respond(WebPageRenderer.java:236) ~[wicket-core-7.0.0-M4.jar:7.0.0-M4]
	at org.apache.wicket.util.tester.BaseWicketTester$LastPageRecordingPageRendererProvider$1.respond(BaseWicketTester.java:2672) ~[wicket-core-7.0.0-M4.jar:7.0.0-M4]
	at org.apache.wicket.core.request.handler.RenderPageRequestHandler.respond(RenderPageRequestHandler.java:175) ~[wicket-core-7.0.0-M4.jar:7.0.0-M4]
	at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:837) ~[wicket-core-7.0.0-M4.jar:7.0.0-M4]
	at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:64) ~[wicket-request-7.0.0-M4.jar:7.0.0-M4]
	at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:265) [wicket-core-7.0.0-M4.jar:7.0.0-M4]
	at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:222) [wicket-core-7.0.0-M4.jar:7.0.0-M4]
	at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:293) [wicket-core-7.0.0-M4.jar:7.0.0-M4]
	at org.apache.wicket.util.tester.BaseWicketTester.processRequest(BaseWicketTester.java:667) [wicket-core-7.0.0-M4.jar:7.0.0-M4]
	at org.apache.wicket.util.tester.BaseWicketTester.processRequest(BaseWicketTester.java:606) [wicket-core-7.0.0-M4.jar:7.0.0-M4]
	at org.apache.wicket.util.tester.BaseWicketTester.processRequest(BaseWicketTester.java:578) [wicket-core-7.0.0-M4.jar:7.0.0-M4]
	at org.apache.wicket.util.tester.BaseWicketTester.startPage(BaseWicketTester.java:1211) [wicket-core-7.0.0-M4.jar:7.0.0-M4]
	at org.apache.wicket.util.tester.BaseWicketTester.startPage(BaseWicketTester.java:1184) [wicket-core-7.0.0-M4.jar:7.0.0-M4]
	at my.test.own.WicketTesterTest.visitPage(WicketTesterTest.java:42) [test-classes/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.7.0_71]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) ~[?:1.7.0_71]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.7.0_71]
	at java.lang.reflect.Method.invoke(Method.java:606) ~[?:1.7.0_71]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47) [junit-4.11.jar:?]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) [junit-4.11.jar:?]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44) [junit-4.11.jar:?]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) [junit-4.11.jar:?]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271) [junit-4.11.jar:?]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70) [junit-4.11.jar:?]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50) [junit-4.11.jar:?]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238) [junit-4.11.jar:?]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63) [junit-4.11.jar:?]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236) [junit-4.11.jar:?]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53) [junit-4.11.jar:?]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229) [junit-4.11.jar:?]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309) [junit-4.11.jar:?]
	at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:53) [surefire-junit4-2.10.jar:2.10]
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:123) [surefire-junit4-2.10.jar:2.10]
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:104) [surefire-junit4-2.10.jar:2.10]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.7.0_71]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) ~[?:1.7.0_71]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.7.0_71]
	at java.lang.reflect.Method.invoke(Method.java:606) ~[?:1.7.0_71]
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164) [surefire-api-2.10.jar:2.10]
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110) [surefire-booter-2.10.jar:2.10]
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:175) [surefire-booter-2.10.jar:2.10]
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:107) [surefire-booter-2.10.jar:2.10]
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:68) [surefire-booter-2.10.jar:2.10]
11:46:59.450 [main] WARN  RequestCycleExtra - ********************************

/ 7	.

/ we hebben een panel met css elems	,

$ vi MyCssPanel.html

<wicket:panel>
	<span wicket:id="first" class="first" style="color:blue"></span>
	<span wicket:id="prev"	class="prev"></span>
</wicket:panel>

$ vi MyCssPanel.java

public class MyCssPanel extends Panel {
	public MyCssPanel(String id) {
		super(id);
		
		IModel<String>model=new Model<>();
		Label label=new Label("first",model);
		add(label);
		model.setObject("First Label");
		
		IModel<String>model2=new Model<>();
		Label label2=new Label("prev",model2);
		add(label2);
		model2.setObject("Prev Label");
	}

}

/ we test	,

$ vi MyCssPanelTest.java

		wicketTester=new WicketTester();
		wicketTester.assertLabel("first", "First Label");
...
/s
	BaseWicketTester$StartComponentInPage(MarkupContainer).get(String) line: 354	
	WicketTester(BaseWicketTester).getComponentFromLastRenderedPage(String, boolean) line: 1524	
	WicketTester(BaseWicketTester).getComponentFromLastRenderedPage(String) line: 1553	
	WicketTester.assertLabel(String, String) line: 574	
	MyCssPanelTest.css() line: 29	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 57	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 606	
	FrameworkMethod$1.runReflectiveCall() line: 47	
	FrameworkMethod$1(ReflectiveCallable).run() line: 12	
	FrameworkMethod.invokeExplosively(Object, Object...) line: 44	
	InvokeMethod.evaluate() line: 17	
	RunBefores.evaluate() line: 26	
	BlockJUnit4ClassRunner(ParentRunner<T>).runLeaf(Statement, Description, RunNotifier) line: 271	
	BlockJUnit4ClassRunner.runChild(FrameworkMethod, RunNotifier) line: 70	
	BlockJUnit4ClassRunner.runChild(Object, RunNotifier) line: 50	
	ParentRunner$3.run() line: 238	
	ParentRunner$1.schedule(Runnable) line: 63	
	BlockJUnit4ClassRunner(ParentRunner<T>).runChildren(RunNotifier) line: 236	
	ParentRunner<T>.access$000(ParentRunner, RunNotifier) line: 53	
	ParentRunner$2.evaluate() line: 229	
	BlockJUnit4ClassRunner(ParentRunner<T>).run(RunNotifier) line: 309	
	JUnit4TestSet.execute(Class, RunNotifier, String) line: 53	
	JUnit4Provider.executeTestSet(Class, RunListener, RunNotifier) line: 123	
	JUnit4Provider.invoke(Object) line: 104	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 57	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 606	
	ReflectionUtils.invokeMethodWithArray(Object, Method, Object[]) line: 164	
	ProviderFactory$ProviderProxy.invoke(Object) line: 110	
	SurefireStarter.invokeProvider(Object, ClassLoader, ClassLoader, Object) line: 175	
	SurefireStarter.runSuitesInProcessWhenForked() line: 107	
	ForkedBooter.main(String[]) line: 68	

		// Get child by id
		Component child = container.children_get(id);

this	BaseWicketTester$StartComponentInPage  (id=187)	
path	"testObject:first" (id=230)	
container	BaseWicketTester$StartComponentInPage  (id=187)	
id	"testObject" (id=232)	
child	MyCssPanel  (id=180)	

/ dus de container is de WebPage,  BaseWicketTester$StartComponentInPage	, 
/ omdat we .startComponentInPage	, is  "testObject" het panel	, 
/ als we .startPage, dan is "testObject" de page	,

/ 7	.

public abstract class MarkupContainer extends Component implements Iterable<Component>
	private Component children_get(final String id)
			for (int i = 0; i < size; i++)
			{
				if (getId(children[i]).equals(id))

children	Object[3]  (id=318)	
	[0]	MyCssPanel  (id=180)	
	[1]	HtmlHeaderContainer  (id=321)	

/ 7	.

/ 13	. 

		wicketTester.assertLabel("first", "First Label");
///////////////////////
/ asserts of de string "First Label" op het label staat	,
/s
	public void assertLabel(String path, String expectedLabelText)
	{
		Label label = (Label)getComponentFromLastRenderedPage(path);
		assertEquals(expectedLabelText, label.getDefaultModelObjectAsString());

/ 13	. 

		wicketTester.assertComponent("first", Label.class);
///////////////////////////
/ asserts of de componnent "first"  een Label is	,
/s
	public void assertComponent(String path, Class<? extends Component> expectedComponentClass)
	{
		assertResult(isComponent(path, expectedComponentClass));
/s
	public <C extends Component> Result isComponent(String path, Class<C> expectedComponentClass)
	{
		Component component = getComponentFromLastRenderedPage(path);
		return isTrue(<Not passes-msg>, expectedComponentClass.isAssignableFrom(component.getClass()));
/s
class BaseWicketTester
	private Result isTrue(String message, boolean condition)
	{
		if (condition) { return Result.pass(); }
		return Result.fail(message);

/ Het gaat dus om	,
		expectedComponentClass.isAssignableFrom(component.getClass())

/ 13	. 

		wicketTester.assertContains("first");
//////////////////////////////////////////
/ asserts dat de string  "first"  voorkomt in de markup	,
/s
		assertResult(ifContains(pattern));
/s
	public Result ifContains(String pattern)
pattern=="first"
	{
		return isTrue(<Not passes-msg>, getLastResponseAsString().matches("(?s).*" + pattern + ".*"));
/ getLastResponseAsString()==
<span wicket:id="testObject"><wicket:panel>
	<span wicket:id="first" class="first" style="color:blue">First Label</span>
	<span wicket:id="prev" class="prev">Prev Label</span>
</wicket:panel></span>

/ 13	. 

		Component component=myCssPanel.get("first");
		wicketTester.assertMarkupStyle(component, "color");
/ TODO

/ 13	. 

		List<TagTester>tagTesters=TagTester.createTagsByAttribute(markup, "wicket:id","first",false);
/s
TagTester.createTagsByAttribute(String, String, String, boolean) line: 665	
					if ((openTag != null) && (closeTag != null) && (level == 0))
					{
						TagTester tester = new TagTester(parser, openTag, closeTag);
/ parser=XmlPullParser
<html><body><span wicket:id="testObject"><wicket:panel>
	<span wicket:id="first" class="first">First Label</span>
	<span wicket:id="prev" class="prev">Prev Label</span>
</wicket:panel></span></body></html>

/ openTag=<span wicket:id="first" class="first">
/ closeTag=</span>
/s
	private TagTester(XmlPullParser parser, XmlTag openTag, XmlTag closeTag)
	{
		this.parser = parser;
		this.openTag = openTag;
		this.closeTag = closeTag;
	}

/ 13	. 

		List<TagTester>tagTesters=TagTester.createTagsByAttribute(markup, "wicket:id","first",false);
		TagTester tagTester=tagTesters.get(0);
		boolean b=tagTester.getAttributeIs("class", "first");
/s
	public String getAttribute(String attribute)
	{
		String value = null;

		IValueMap attributeMap = openTag.getAttributes();
/ Is er al	,
/ TODO
		if (attributeMap != null)
		{
			for (String attr : attributeMap.keySet())
/ loopt ze af	, 
/ er zijn wicket:id, en class	,
			{
				if (attr.equalsIgnoreCase(attribute))
				{
					value = attributeMap.getString(attr);
first

/ 7	.

/ wicket7	, 

/ de HTML van de page (ComponentInPage) is eerst,	

<html><body><span wicket:id="testObject"></span></body></html>

/ testObject is de id van de component , die nog moet komen	, 

/ later wordt het	,

<html><body><span wicket:id="testObject"><wicket:panel>
    <span wicket:id="first" class="first">First Label</span>
    <span wicket:id="prev" class="prev">Prev Label</span>
</wicket:panel></span></body></html>

/ we zijn in	,

	MyCssPanel(MarkupContainer).renderNext(MarkupStream) line: 1376	
	MyCssPanel(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1601	
	MyCssPanel(MarkupContainer).renderComponentTagBody(MarkupStream, ComponentTag) line: 1576	
	MyCssPanel(MarkupContainer).renderAssociatedMarkup(String, String) line: 691	
	PanelMarkupSourcingStrategy(AssociatedMarkupSourcingStrategy).renderAssociatedMarkup(Component) line: 76	
	PanelMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 112	
	MyCssPanel(Component).internalRenderComponent() line: 2557	
	MyCssPanel(MarkupContainer).onRender() line: 1540	
	MyCssPanel(Component).internalRender() line: 2372	
	MyCssPanel(Component).render() line: 2300	
	BaseWicketTester$StartComponentInPage(MarkupContainer).renderNext(MarkupStream) line: 1405	
	BaseWicketTester$StartComponentInPage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1601	
	BaseWicketTester$StartComponentInPage(Page).onRender() line: 879	
	BaseWicketTester$StartComponentInPage(WebPage).onRender() line: 142	
	BaseWicketTester$StartComponentInPage(Component).internalRender() line: 2372	
	BaseWicketTester$StartComponentInPage(Component).render() line: 2300	
	BaseWicketTester$StartComponentInPage(Page).renderPage() line: 1018	
->	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	BaseWicketTester$LastPageRecordingPageRendererProvider$1.respond(RequestCycle) line: 2672	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 837	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler, boolean) line: 667	
	WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler) line: 606	
	WicketTester(BaseWicketTester).startPage(IPageProvider) line: 836	
	WicketTester(BaseWicketTester).startPage(T) line: 853	
	WicketTester(BaseWicketTester).startComponentInPage(C, IMarkupFragment) line: 1413	
	WicketTester(BaseWicketTester).startComponentInPage(Class<C>, IMarkupFragment) line: 1313	
	WicketTester(BaseWicketTester).startComponentInPage(Class<C>) line: 1267	
	MyCssPanelTest.css() line: 25	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 57	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 606	
	FrameworkMethod$1.runReflectiveCall() line: 47	
	FrameworkMethod$1(ReflectiveCallable).run() line: 12	
	FrameworkMethod.invokeExplosively(Object, Object...) line: 44	
	InvokeMethod.evaluate() line: 17	
	RunBefores.evaluate() line: 26	
	BlockJUnit4ClassRunner(ParentRunner<T>).runLeaf(Statement, Description, RunNotifier) line: 271	
	BlockJUnit4ClassRunner.runChild(FrameworkMethod, RunNotifier) line: 70	
	BlockJUnit4ClassRunner.runChild(Object, RunNotifier) line: 50	
	ParentRunner$3.run() line: 238	
	ParentRunner$1.schedule(Runnable) line: 63	
	BlockJUnit4ClassRunner(ParentRunner<T>).runChildren(RunNotifier) line: 236	
	ParentRunner<T>.access$000(ParentRunner, RunNotifier) line: 53	
	ParentRunner$2.evaluate() line: 229	
	BlockJUnit4ClassRunner(ParentRunner<T>).run(RunNotifier) line: 309	
	JUnit4TestSet.execute(Class, RunNotifier, String) line: 53	
	JUnit4Provider.executeTestSet(Class, RunListener, RunNotifier) line: 123	
	JUnit4Provider.invoke(Object) line: 104	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 57	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 606	
	ReflectionUtils.invokeMethodWithArray(Object, Method, Object[]) line: 164	
	ProviderFactory$ProviderProxy.invoke(Object) line: 110	
	SurefireStarter.invokeProvider(Object, ClassLoader, ClassLoader, Object) line: 175	
	SurefireStarter.runSuitesInProcessWhenForked() line: 107	
	ForkedBooter.main(String[]) line: 68	

MarkupContainer
	protected final void renderAll(final MarkupStream markupStream, final ComponentTag openTag)
	{
		while (markupStream.hasMore())
		{
			// Render the markup element
			boolean rawMarkup = renderNext(markupStream);
/s
	protected boolean renderNext(final MarkupStream markupStream)
	{
		// Get the current markup element
		final MarkupElement element = markupStream.get();

		// If it's a tag like <wicket..> or <span wicket:id="..." >
		if ((element instanceof ComponentTag) && !markupStream.atCloseTag())
element=<span wicket:id="first" class="first">
/ JA
			// Get the component for the id from the given container
			Component component = get(id);
			if (component == null)
/ NEE
/ TODO
			// Failed to find it?
			if (component != null)
			{
 				component.render();
/ recursive call	, want hierin zijn we nu ook	,
	else
		{
			// Render as raw markup
			getResponse().write(element.toCharSequence());

/ Hier is	,
Component.class
	public final Response getResponse()
	{
		return getRequestCycle().getResponse();
	}
/s
RequestCycle.class
	@Override
	public Response getResponse()
	{
		return activeResponse;
	}
/t
/s
BufferedWebResponse.write(CharSequence) line: 480	
		if (charSequenceAction == null)
/ JA
/ 1ste keer, bij <html>
		{
			charSequenceAction = new WriteCharSequenceAction();
			actions.add(charSequenceAction);
		}
		charSequenceAction.append(sequence);

this	BufferedWebResponse  (id=211)	
	actions	ArrayList<E>  (id=213)	
		elementData	Object[10]  (id=238)	
			[0]	BufferedWebResponse$SetDateHeaderAction  (id=243)	
			[1]	BufferedWebResponse$SetDateHeaderAction  (id=244)	
			[2]	BufferedWebResponse$SetHeaderAction  (id=245)	
			[3]	BufferedWebResponse$SetHeaderAction  (id=246)	
			[4]	BufferedWebResponse$SetContentTypeAction  (id=247)	
			[5]	BufferedWebResponse$WriteCharSequenceAction  (id=235)	
				builder	StringBuilder  (id=254)	
		modCount	6	
		size	6	
	charSequenceAction	BufferedWebResponse$WriteCharSequenceAction  (id=235)	
	dataAction	null	
	originalResponse	BaseWicketTester$WicketTesterServletWebResponse  (id=206)	
sequence	"<html>" (id=231)	

/ we waren in	

org.apache.wicket.ThreadContext.class
	public static RequestCycle getRequestCycle()
	{
		ThreadContext context = get(false);
		return context != null ? context.requestCycle : null;
	}
context	ThreadContext  (id=2520)	
	application	MockApplication  (id=146)	
	requestCycle	RequestCycle  (id=178)	
		activeResponse	BufferedWebResponse  (id=211)	
			actions	ArrayList<E>  (id=213)	
				elementData	Object[10]  (id=238)	
					[0]	BufferedWebResponse$SetDateHeaderAction  (id=243)	
					[1]	BufferedWebResponse$SetDateHeaderAction  (id=244)	
					[2]	BufferedWebResponse$SetHeaderAction  (id=245)	
					[3]	BufferedWebResponse$SetHeaderAction  (id=246)	
					[4]	BufferedWebResponse$SetContentTypeAction  (id=247)	
					[5]	BufferedWebResponse$WriteCharSequenceAction  (id=235)	
				modCount	6	
				size	6	
			charSequenceAction	BufferedWebResponse$WriteCharSequenceAction  (id=235)	
			dataAction	null	
			originalResponse	BaseWicketTester$WicketTesterServletWebResponse  (id=206)	
		exceptionMapper	BaseWicketTester$TestExceptionMapper  (id=2522)	
		listeners	RequestCycleListenerCollection  (id=2523)	
		metaData	null	
		originalResponse	BaseWicketTester$WicketTesterServletWebResponse  (id=206)	
		request	ServletWebRequest  (id=2524)	
		requestHandlerExecutor	RequestCycle$HandlerExecutor  (id=186)	
		requestMapper	BaseWicketTester$TestRequestMapper  (id=2525)	
		startTime	1434017205162	
		urlRenderer	UrlRenderer  (id=2549)	
	session	WebSession  (id=2521)	

/ Dus de reponse, de activeResponse , is in een ThreadContext	,
/ TODO
/ Je doet Component.getReponse() op een MarkupContainer, zoals MyCssPanel	, 
	public final Response getResponse()
	{
		return getRequestCycle().getResponse();
	}




/ 13	. 

/ bij ->
///////////////////////////////////////////////////
WebPageRenderer.class
	protected BufferedWebResponse renderPage(Url targetUrl, RequestCycle requestCycle)
	{
		// buffered web response for page
		BufferedWebResponse response = new BufferedWebResponse(originalResponse);

		try
		{
			requestCycle.setResponse(response);
			requestablePage.renderPage();
/d
response	BufferedWebResponse  (id=201)	
	actions	ArrayList<E>  (id=228)	
		elementData	Object[10]  (id=237)	
			[0]	BufferedWebResponse$SetDateHeaderAction  (id=239)	
			[1]	BufferedWebResponse$SetDateHeaderAction  (id=244)	
			[2]	BufferedWebResponse$SetHeaderAction  (id=245)	
			[3]	BufferedWebResponse$SetHeaderAction  (id=247)	
			[4]	BufferedWebResponse$SetContentTypeAction  (id=248)	
			[5]	BufferedWebResponse$WriteCharSequenceAction  (id=259)	
				builder	StringBuilder  (id=261)	
<html><body><span wicket:id="testObject"><wicket:panel>
	<span wicket:id="first" class="first">First Label</span>
	<span wicket:id="prev" class="prev">Prev Label</span>
</wicket:panel></span></body></html>
///////////////////////////////////////
/ Dit is dus dezelfde reponse als in de ThreadContext, 

/ Intermezzo

	public BaseWicketTester(final WebApplication application, final ServletContext servletCtx)
		// prepare session
		setupNextRequestCycle();
/s
	private void setupNextRequestCycle()
		requestCycle = application.createRequestCycle(servletWebRequest,
			newServletWebResponse(servletWebRequest));
		ThreadContext.setRequestCycle(requestCycle);

this	WicketTester  (id=149)	
	requestCycle	RequestCycle  (id=194)	
		activeResponse	BaseWicketTester$WicketTesterServletWebResponse  (id=205)	
			cookies	ArrayList<E>  (id=215)	
			httpServletResponse	MockHttpServletResponse  (id=198)	
			redirect	false	
			webRequest	ServletWebRequest  (id=165)	
		exceptionMapper	BaseWicketTester$TestExceptionMapper  (id=206)	
		listeners	RequestCycleListenerCollection  (id=208)	
		metaData	null	
		originalResponse	BaseWicketTester$WicketTesterServletWebResponse  (id=205)	
		request	ServletWebRequest  (id=165)	
		requestHandlerExecutor	RequestCycle$HandlerExecutor  (id=233)	
		requestMapper	BaseWicketTester$TestRequestMapper  (id=236)	
		startTime	1434022442648	
		urlRenderer	null	
	response	MockHttpServletResponse  (id=198)	
	servletContext	MockServletContext  (id=201)	
	session	null	
	useRequestUrlAsBase	true	

/ Later in 	,
BaseWicketTester$StartComponentInPage(MarkupContainer).renderNext(MarkupStream) line: 1457	
			getResponse().write(element.toCharSequence());
/s
BaseWicketTester$StartComponentInPage(Component).getResponse() line: 1817	
		return getRequestCycle().getResponse();
/s
RequestCycle.getResponse() line: 741	
		return activeResponse;

this	RequestCycle  (id=194)	
	activeResponse	BufferedWebResponse  (id=262)	
		actions	ArrayList<E>  (id=286)	
		charSequenceAction	null	
		dataAction	null	
		originalResponse	BaseWicketTester$WicketTesterServletWebResponse  (id=205)	
	exceptionMapper	BaseWicketTester$TestExceptionMapper  (id=206)	
	listeners	RequestCycleListenerCollection  (id=208)	
	metaData	null	
	originalResponse	BaseWicketTester$WicketTesterServletWebResponse  (id=205)	
	request	ServletWebRequest  (id=277)	
	requestHandlerExecutor	RequestCycle$HandlerExecutor  (id=233)	
	requestMapper	BaseWicketTester$TestRequestMapper  (id=236)	
	startTime	1434022442648	
	urlRenderer	UrlRenderer  (id=278)	

/ Dit is omdat	,

WebPageRenderer.renderPage(Url, RequestCycle) line: 123	
		BufferedWebResponse response = new BufferedWebResponse(originalResponse);
/ met de actions	,
		try
		{

/ NU
requestCycle	RequestCycle  (id=175)	
	activeResponse	BaseWicketTester$WicketTesterServletWebResponse  (id=176)	

			requestCycle.setResponse(response);
/ HIERNA	,
requestCycle	RequestCycle  (id=175)	
	activeResponse	BufferedWebResponse  (id=230)	
/d
			requestablePage.renderPage();
/d
			requestCycle.setResponse(response);
/d
requestCycle	RequestCycle  (id=175)	
	activeResponse	BufferedWebResponse  (id=230)	
		actions	ArrayList<E>  (id=233)	
			elementData	Object[10]  (id=278)	
				[0]	BufferedWebResponse$SetDateHeaderAction  (id=281)	
				[1]	BufferedWebResponse$SetDateHeaderAction  (id=282)	
				[2]	BufferedWebResponse$SetHeaderAction  (id=283)	
				[3]	BufferedWebResponse$SetHeaderAction  (id=284)	
				[4]	BufferedWebResponse$SetContentTypeAction  (id=285)	
				[5]	BufferedWebResponse$WriteCharSequenceAction  (id=272)	
					builder	StringBuilder  (id=296)	
			modCount	6	
			size	6	
		charSequenceAction	BufferedWebResponse$WriteCharSequenceAction  (id=272)	
		dataAction	null	
		originalResponse	BaseWicketTester$WicketTesterServletWebResponse  (id=176)	

				return response;
			}
		}
		finally
		{
			// restore original response and base URL
			requestCycle.setResponse(originalResponse);
requestCycle	RequestCycle  (id=175)	
	activeResponse	BaseWicketTester$WicketTesterServletWebResponse  (id=176)	

			requestCycle.getUrlRenderer().setBaseUrl(originalBaseUrl);

/t
WebPageRenderer.respond(RequestCycle) line: 238	
			// redirect to buffer
			BufferedWebResponse response = renderPage(beforeRenderUrl, requestCycle);
/ Dus response is met de actions	, en in de requestCycle is activeReponse weer hetsteld	,

response	BufferedWebResponse  (id=230)	
	actions	ArrayList<E>  (id=233)	
		elementData	Object[10]  (id=278)	
			[0]	BufferedWebResponse$SetDateHeaderAction  (id=281)	
			[1]	BufferedWebResponse$SetDateHeaderAction  (id=282)	
			[2]	BufferedWebResponse$SetHeaderAction  (id=283)	
			[3]	BufferedWebResponse$SetHeaderAction  (id=284)	
			[4]	BufferedWebResponse$SetContentTypeAction  (id=285)	
			[5]	BufferedWebResponse$WriteCharSequenceAction  (id=272)	

requestCycle	RequestCycle  (id=175)	
	activeResponse	BaseWicketTester$WicketTesterServletWebResponse  (id=176)	
		cookies	ArrayList<E>  (id=189)	
		httpServletResponse	MockHttpServletResponse  (id=196)	
		redirect	false	
		webRequest	ServletWebRequest  (id=165)	

			else
			{
				storeBufferedResponse(afterRenderUrl, response);
/s
/ In de WebApplication	(MockApplication)	,
		storedResponses.put(key, response);

/ Hier wordt dus de response met de HTML bewaard	, (in de laatste action)	,
<html><body><span wicket:id="testObject"><wicket:panel>
	<span wicket:id="first" class="first">First Label</span>
	<span wicket:id="prev" class="prev">Prev Label</span>
</wicket:panel></span></body></html>

				redirectTo(afterRenderUrl, requestCycle);

/t
BaseWicketTester$LastPageRecordingPageRendererProvider$1.respond(RequestCycle) line: 2675	
		@Override
		public PageRenderer get(final RenderPageRequestHandler handler)
		{
			return new PageRenderer(handler)
			{
				@Override
				public void respond(RequestCycle requestCycle)
				{
					delegate.get(handler).respond(requestCycle);
/d
					// WICKET-5424 record page after wrapped renderer has responded
					if (handler.getPageProvider().hasPageInstance())
					{
						Page renderedPage = (Page)handler.getPageProvider().getPageInstance();

						lastRenderedPage = lastPage = renderedPage;
/ sets BasicWicketTester.lastRenderedPage	,
renderedPage	BaseWicketTester$StartComponentInPage  (id=221)	

/ later	,

Thread [main] (Suspended (modification of field lastResponse in BaseWicketTester))	
	WicketTester(BaseWicketTester).setLastResponse(MockHttpServletResponse) line: 522	
	WicketTester(BaseWicketTester).recordRequestResponse() line: 809	
	WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler, boolean) line: 674	
	WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler) line: 606	
	WicketTester(BaseWicketTester).startPage(IPageProvider) line: 836	
	WicketTester(BaseWicketTester).startPage(T) line: 853	
	WicketTester(BaseWicketTester).startComponentInPage(C, IMarkupFragment) line: 1413	
	WicketTester(BaseWicketTester).startComponentInPage(Class<C>, IMarkupFragment) line: 1313	
	WicketTester(BaseWicketTester).startComponentInPage(Class<C>) line: 1267	
	MyCssPanelTest.css() line: 25	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 57	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 606	
	FrameworkMethod$1.runReflectiveCall() line: 47	
	FrameworkMethod$1(ReflectiveCallable).run() line: 12	
	FrameworkMethod.invokeExplosively(Object, Object...) line: 44	
	InvokeMethod.evaluate() line: 17	
	RunBefores.evaluate() line: 26	
	BlockJUnit4ClassRunner(ParentRunner<T>).runLeaf(Statement, Description, RunNotifier) line: 271	
	BlockJUnit4ClassRunner.runChild(FrameworkMethod, RunNotifier) line: 70	
	BlockJUnit4ClassRunner.runChild(Object, RunNotifier) line: 50	
	ParentRunner$3.run() line: 238	
	ParentRunner$1.schedule(Runnable) line: 63	
	BlockJUnit4ClassRunner(ParentRunner<T>).runChildren(RunNotifier) line: 236	
	ParentRunner<T>.access$000(ParentRunner, RunNotifier) line: 53	
	ParentRunner$2.evaluate() line: 229	
	BlockJUnit4ClassRunner(ParentRunner<T>).run(RunNotifier) line: 309	
	JUnit4TestSet.execute(Class, RunNotifier, String) line: 53	
	JUnit4Provider.executeTestSet(Class, RunListener, RunNotifier) line: 123	
	JUnit4Provider.invoke(Object) line: 104	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 57	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 606	
	ReflectionUtils.invokeMethodWithArray(Object, Method, Object[]) line: 164	
	ProviderFactory$ProviderProxy.invoke(Object) line: 110	
	SurefireStarter.invokeProvider(Object, ClassLoader, ClassLoader, Object) line: 175	
	SurefireStarter.runSuitesInProcessWhenForked() line: 107	
	ForkedBooter.main(String[]) line: 68	

BaseWicketTester.class
	protected boolean processRequest(final MockHttpServletRequest forcedRequest,
		final IRequestHandler forcedRequestHandler, final boolean redirect)
	{
		finally
		{
			recordRequestResponse();
/s
	private void recordRequestResponse()
	{
		lastRequest = request;
		setLastResponse(response);
/s
		this.lastResponse = response;

requestablePage	BaseWicketTester$StartComponentInPage  (id=228)	

/ later	,

/ schrijf de 

WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler, boolean) line: 730	
			if (!requestCycle.processRequestAndDetach())
		finally
		{
			recordRequestResponse();
			setupNextRequestCycle();

				processRequest(null, null, true);
/ recursive call	,
/ Hier worden de actions (met de HTML) exec op de (latere) lastResponse	,
response	BaseWicketTester$WicketTesterServletWebResponse  (id=2515)	


Thread [main] (Suspended)	
	BufferedWebResponse.writeTo(WebResponse) line: 588	
->	BufferedResponseRequestHandler.respond(IRequestCycle) line: 53	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 837	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler, boolean) line: 667	
	WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler, boolean) line: 730	
	WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler) line: 606	
	WicketTester(BaseWicketTester).startPage(IPageProvider) line: 836	
	WicketTester(BaseWicketTester).startPage(T) line: 853	
	WicketTester(BaseWicketTester).startComponentInPage(C, IMarkupFragment) line: 1413	
	WicketTester(BaseWicketTester).startComponentInPage(Class<C>, IMarkupFragment) line: 1313	
	WicketTester(BaseWicketTester).startComponentInPage(Class<C>) line: 1267	
	MyCssPanelTest.css() line: 25	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 57	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 606	
	FrameworkMethod$1.runReflectiveCall() line: 47	
	FrameworkMethod$1(ReflectiveCallable).run() line: 12	
	FrameworkMethod.invokeExplosively(Object, Object...) line: 44	
	InvokeMethod.evaluate() line: 17	
	RunBefores.evaluate() line: 26	
	BlockJUnit4ClassRunner(ParentRunner<T>).runLeaf(Statement, Description, RunNotifier) line: 271	
	BlockJUnit4ClassRunner.runChild(FrameworkMethod, RunNotifier) line: 70	
	BlockJUnit4ClassRunner.runChild(Object, RunNotifier) line: 50	
	ParentRunner$3.run() line: 238	
	ParentRunner$1.schedule(Runnable) line: 63	
	BlockJUnit4ClassRunner(ParentRunner<T>).runChildren(RunNotifier) line: 236	
	ParentRunner<T>.access$000(ParentRunner, RunNotifier) line: 53	
	ParentRunner$2.evaluate() line: 229	
	BlockJUnit4ClassRunner(ParentRunner<T>).run(RunNotifier) line: 309	
	JUnit4TestSet.execute(Class, RunNotifier, String) line: 53	
	JUnit4Provider.executeTestSet(Class, RunListener, RunNotifier) line: 123	
	JUnit4Provider.invoke(Object) line: 104	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 57	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 606	
	ReflectionUtils.invokeMethodWithArray(Object, Method, Object[]) line: 164	
	ProviderFactory$ProviderProxy.invoke(Object) line: 110	
	SurefireStarter.invokeProvider(Object, ClassLoader, ClassLoader, Object) line: 175	
	SurefireStarter.runSuitesInProcessWhenForked() line: 107	
	ForkedBooter.main(String[]) line: 68	

/ Nu gaan we  de actions in de BufferedWebResponse (stored in the MockAppliction) act on the httpServletResponse, such that e.g. the stringWriter wordt set	,	
originalResponse	BaseWicketTester$WicketTesterServletWebResponse  (id=3010)	
	cookies	ArrayList<E>  (id=3012)	
	httpServletResponse	MockHttpServletResponse  (id=3013)	
		byteStream	ByteArrayOutputStream  (id=3016)	
		characterEncoding	"UTF-8" (id=2899)	
		cookies	ArrayList<E>  (id=3017)	
		errorMessage	null	
		headers	ValueMap  (id=3018)	
		locale	null	
		mode	0	
		printWriter	MockHttpServletResponse$2  (id=3027)	
		redirectLocation	null	
		servletRequest	MockHttpServletRequest  (id=2890)	
		servletStream	MockHttpServletResponse$1  (id=3028)	
		status	200	
		stringWriter	StringWriter  (id=3029)	
	redirect	false	
	webRequest	ServletWebRequest  (id=3015)	



RequestCycle.class
	private class HandlerExecutor extends RequestHandlerStack
	{
		@Override
		protected void respond(IRequestHandler handler)
		{
			Response originalResponse = getResponse();
			try
			{
				handler.respond(RequestCycle.this);
/s
BufferedResponseRequestHandler.class
	@Override
	public void respond(IRequestCycle requestCycle)
	{
		bufferedWebResponse.writeTo((WebResponse)requestCycle.getResponse());
/s
	public void writeTo(final WebResponse response)
	{
		for (Action action : actions)
		{
			action.invoke(response);

/ Hij gaat al de actions doen op de reponse	,
response	BaseWicketTester$WicketTesterServletWebResponse  (id=2515)	
/ volgende	,
/s
BufferedWebResponse.class
	private static class SetDateHeaderAction extends MetaDataAction
	{
		private final String name;
		private final Time value;

		public SetDateHeaderAction(String name, Time value)
		{
			this.name = name;
			this.value = Args.notNull(value, "value");
		}

		@Override
		protected void invoke(WebResponse response)
response	BaseWicketTester$WicketTesterServletWebResponse  (id=2515)	
		{
			response.setDateHeader(name, value);

/ volgende	,
BufferedWebResponse.class
	private static class SetHeaderAction extends MetaDataAction
	{
		private final String name;
		private final String value;

		public SetHeaderAction(String name, String value)
		{
			this.name = name;
			this.value = value;
		}

		@Override
		protected void invoke(WebResponse response)
response	BaseWicketTester$WicketTesterServletWebResponse  (id=2515)	
		{
			response.setHeader(name, value);

/ volgende	,
BufferedWebResponse.class
	private static class SetContentTypeAction extends MetaDataAction
	{
		private final String contentType;

		public SetContentTypeAction(String contentType)
		{
			this.contentType = contentType;
		}

		@Override
		protected void invoke(WebResponse response)
response	BaseWicketTester$WicketTesterServletWebResponse  (id=2515)	
		{
			response.setContentType(contentType);
...
/s
MockHttpServletResponse.setContentType(String) line: 657	
		setHeader("Content-Type", type);

/ t
/ volgende	,
BufferedWebResponse.class
	private static class WriteCharSequenceAction extends Action
	{
		private final StringBuilder builder = new StringBuilder(4096);
/ builder=
<html><body><span wicket:id="testObject"><wicket:panel>
	<span wicket:id="first" class="first">First Label</span>
	<span wicket:id="prev" class="prev">Prev Label</span>
</wicket:panel></span></body></html>

		@Override
		protected void invoke(WebResponse response)
		{
			response.write(responseBuffer);


/ 7	. 

/ See -> hierboven	, 

/ de 1ste keer	,

RequestCycle.class
	public boolean processRequest()
			IRequestHandler handler = resolveRequestHandler();
/s
		return requestMapper.mapRequest(request);
/s
BaseWicketTester$TestRequestMapper.mapRequest(Request) line: 2787	
			if (forcedHandler != null) {
				IRequestHandler handler = forcedHandler;
handler	RenderPageRequestHandler  (id=214)	

				forcedHandler = null;
				return handler;
/t
			if (handler != null)
			{
				execute(handler);
/d
...
/t
WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler, boolean) line: 674	
			if (!requestCycle.processRequestAndDetach())
/d
		finally
		{
			recordRequestResponse();
			setupNextRequestCycle();

				processRequest(null, null, true);
...
/s
RequestCycle.class
	public boolean processRequest()
			IRequestHandler handler = resolveRequestHandler();
...
/s
BaseWicketTester$TestRequestMapper.mapRequest(Request) line: 2792	
			if (forcedHandler != null)
/ NEE
			else
			{
				return delegate.mapRequest(request);
/s
SystemMapper(CompoundRequestMapper).mapRequest(Request) line: 132	
request	ServletWebRequest  (id=233)	
this	SystemMapper  (id=198)	
	application	MockApplication  (id=146)	
	mappers	CopyOnWriteArrayList<E>  (id=248)	
		array	Object[7]  (id=251)	
			[0]	BufferedResponseMapper  (id=242)	
			[1]	RestartResponseAtInterceptPageException$1  (id=258)	
			[2]	UrlResourceReferenceMapper  (id=259)	
			[3]	ResourceReferenceMapper  (id=260)	
			[4]	HomePageMapper  (id=261)	
			[5]	BookmarkableMapper  (id=262)	
			[6]	PageInstanceMapper  (id=263)	
/ array->list

		for (MapperWithScore mapperWithScore : list)
		{
			IRequestMapper mapper = mapperWithScore.getMapper();
mapper	BufferedResponseMapper  (id=242)	
			IRequestHandler handler = mapper.mapRequest(request);
/s
BufferedResponseMapper.mapRequest(Request) line: 116	
request	ServletWebRequest  (id=233)	
		BufferedWebResponse response = getAndRemoveBufferedResponse(request.getUrl());
/ request.getUrl()==wicket/page?0
/s
BufferedResponseMapper.getAndRemoveBufferedResponse(Url) line: 86	
		String sessionId = getSessionId();
sessionId	"153656d4-7487-4fb5-991b-00720da51949" (id=2900)	
		BufferedWebResponse response = null;
		if (Strings.isEmpty(sessionId) == false)
		{
			response = WebApplication.get().getAndRemoveBufferedResponse(sessionId, url);
/s
MockApplication(WebApplication).getAndRemoveBufferedResponse(String, Url) line: 986	
		String key = sessionId + url.toString();
		return storedResponses.remove(key);
key	"153656d4-7487-4fb5-991b-00720da51949wicket/page?0" (id=2901)	
storedRepsonses={153656d4-7487-4fb5-991b-00720da51949wicket/page?0=org.apache.wicket.protocol.http.StoredResponsesMap$Value@293c8965}
/s
StoredResponsesMap.remove(Object) line: 140	
		Value removedValue;
		synchronized (this)
		{
			removedValue = (Value)super.remove(key);
/ this={}
		}
		return removedValue != null ? removedValue.response : null;
removedValue	StoredResponsesMap$Value  (id=2968)	
	response	BufferedWebResponse  (id=2971)	
		actions	ArrayList<E>  (id=2974)	
...
/t
BufferedResponseMapper.mapRequest(Request) line: 119	
		BufferedWebResponse response = getAndRemoveBufferedResponse(request.getUrl());
/d
			return new BufferedResponseRequestHandler(response);
/t
BaseWicketTester$TestRequestMapper.mapRequest(Request) line: 2792	
		@Override
		public IRequestHandler mapRequest(Request request)
		{
			if (forcedHandler != null)
/ NEE
			else
			{
				return delegate.mapRequest(request);
/d
/t
RequestCycle.processRequest() line: 220	
	public boolean processRequest()
	{
		try
		{
			IRequestHandler handler = resolveRequestHandler();
/d
handler	BufferedResponseRequestHandler  (id=3006)	
/ Dus nu NIET die forcedHandler	, maar een ogv de ... TODO
				execute(handler);

/ 7	. 

/ De 1ste handler is RenderPageRequestHandler ,

	RenderPageRequestHandler.respond(IRequestCycle) line: 174	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 837	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler, boolean) line: 667	
	WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler) line: 606	
	WicketTester(BaseWicketTester).startPage(IPageProvider) line: 836	
	WicketTester(BaseWicketTester).startPage(T) line: 853	
	WicketTester(BaseWicketTester).startComponentInPage(C, IMarkupFragment) line: 1413	
	WicketTester(BaseWicketTester).startComponentInPage(Class<C>, IMarkupFragment) line: 1313	
	WicketTester(BaseWicketTester).startComponentInPage(Class<C>) line: 1267	
	MyCssPanelTest.css() line: 25	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 57	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 606	
	FrameworkMethod$1.runReflectiveCall() line: 47	
	FrameworkMethod$1(ReflectiveCallable).run() line: 12	
	FrameworkMethod.invokeExplosively(Object, Object...) line: 44	
	InvokeMethod.evaluate() line: 17	
	RunBefores.evaluate() line: 26	
	BlockJUnit4ClassRunner(ParentRunner<T>).runLeaf(Statement, Description, RunNotifier) line: 271	
	BlockJUnit4ClassRunner.runChild(FrameworkMethod, RunNotifier) line: 70	
	BlockJUnit4ClassRunner.runChild(Object, RunNotifier) line: 50	
	ParentRunner$3.run() line: 238	
	ParentRunner$1.schedule(Runnable) line: 63	
	BlockJUnit4ClassRunner(ParentRunner<T>).runChildren(RunNotifier) line: 236	
	ParentRunner<T>.access$000(ParentRunner, RunNotifier) line: 53	
	ParentRunner$2.evaluate() line: 229	
	BlockJUnit4ClassRunner(ParentRunner<T>).run(RunNotifier) line: 309	
	JUnit4TestSet.execute(Class, RunNotifier, String) line: 53	
	JUnit4Provider.executeTestSet(Class, RunListener, RunNotifier) line: 123	
	JUnit4Provider.invoke(Object) line: 104	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 57	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 606	
	ReflectionUtils.invokeMethodWithArray(Object, Method, Object[]) line: 164	
	ProviderFactory$ProviderProxy.invoke(Object) line: 110	
	SurefireStarter.invokeProvider(Object, ClassLoader, ClassLoader, Object) line: 175	
	SurefireStarter.runSuitesInProcessWhenForked() line: 107	
	ForkedBooter.main(String[]) line: 68	


/ De 2de handler	,

	BufferedResponseRequestHandler.respond(IRequestCycle) line: 53	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 837	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler, boolean) line: 667	
	WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler, boolean) line: 730	
	WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler) line: 606	
	WicketTester(BaseWicketTester).startPage(IPageProvider) line: 836	
	WicketTester(BaseWicketTester).startPage(T) line: 853	
	WicketTester(BaseWicketTester).startComponentInPage(C, IMarkupFragment) line: 1413	
	WicketTester(BaseWicketTester).startComponentInPage(Class<C>, IMarkupFragment) line: 1313	
	WicketTester(BaseWicketTester).startComponentInPage(Class<C>) line: 1267	
	MyCssPanelTest.css() line: 25	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 57	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 606	
	FrameworkMethod$1.runReflectiveCall() line: 47	
	FrameworkMethod$1(ReflectiveCallable).run() line: 12	
	FrameworkMethod.invokeExplosively(Object, Object...) line: 44	
	InvokeMethod.evaluate() line: 17	
	RunBefores.evaluate() line: 26	
	BlockJUnit4ClassRunner(ParentRunner<T>).runLeaf(Statement, Description, RunNotifier) line: 271	
	BlockJUnit4ClassRunner.runChild(FrameworkMethod, RunNotifier) line: 70	
	BlockJUnit4ClassRunner.runChild(Object, RunNotifier) line: 50	
	ParentRunner$3.run() line: 238	
	ParentRunner$1.schedule(Runnable) line: 63	
	BlockJUnit4ClassRunner(ParentRunner<T>).runChildren(RunNotifier) line: 236	
	ParentRunner<T>.access$000(ParentRunner, RunNotifier) line: 53	
	ParentRunner$2.evaluate() line: 229	
	BlockJUnit4ClassRunner(ParentRunner<T>).run(RunNotifier) line: 309	
	JUnit4TestSet.execute(Class, RunNotifier, String) line: 53	
	JUnit4Provider.executeTestSet(Class, RunListener, RunNotifier) line: 123	
	JUnit4Provider.invoke(Object) line: 104	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 57	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 606	
	ReflectionUtils.invokeMethodWithArray(Object, Method, Object[]) line: 164	
	ProviderFactory$ProviderProxy.invoke(Object) line: 110	
	SurefireStarter.invokeProvider(Object, ClassLoader, ClassLoader, Object) line: 175	
	SurefireStarter.runSuitesInProcessWhenForked() line: 107	
	ForkedBooter.main(String[]) line: 68	

/ 7		.

	public final <C extends Component> C startComponentInPage(final C component,
		IMarkupFragment pageMarkup)
	{
			String markup = createPageMarkup(component.getId());
			...
			((StartComponentInPage)page).setPageMarkup(pageMarkup);


/ component.getId()="testObject"	, is de id van de component in de page	, daarmee wordt de HTML van de page create	,

/ 7	.

/ Hoe komt de MyCssPane.html in de MockHttpServletResponse?

WebPageRenderer.respond(RequestCycle) line: 231	
			// redirect to buffer
			BufferedWebResponse response = renderPage(beforeRenderUrl, requestCycle);
/s
WebPageRenderer.renderPage(Url, RequestCycle) line: 116	
		// keep the original response
		final WebResponse originalResponse = (WebResponse)requestCycle.getResponse();
originalResponse	BaseWicketTester$WicketTesterServletWebResponse  (id=177)	
	httpServletResponse	MockHttpServletResponse  (id=281)	

		// buffered web response for page
		BufferedWebResponse response = new BufferedWebResponse(originalResponse);
			requestablePage.renderPage();
...
/s
BaseWicketTester$StartComponentInPage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1592	
			// Render the markup element
			boolean rawMarkup = renderNext(markupStream);
/s
BaseWicketTester$StartComponentInPage(MarkupContainer).renderNext(MarkupStream) line: 1376	
		final MarkupElement element = markupStream.get();
///////////////////////////////////
<span wicket:id="testObject">

		// If it's a tag like <wicket..> or <span wicket:id="..." >
		if ((element instanceof ComponentTag) && !markupStream.atCloseTag())
/ JA
		{
			// Get element as tag
			final ComponentTag tag = (ComponentTag)element;

			// Get component id
			final String id = tag.getId();
/s
			// Get the component for the id from the given container
			Component component = get(id);
MyCssPanel inst	,
			// Failed to find it?
			if (component != null)
			{
				component.render();
...
/s
MyCssPanel(Component).internalRender() line: 2338	
		IMarkupFragment markup = getMarkup();
org.apache.wicket.util.resource.StringResourceStream@3ed62895: <html><head></head><body><span wicket:id='testObject'></span></body></html>
<span wicket:id="testObject"></span>
/ TODO
/ dit is toch de markup van de parent ( de page)?

		MarkupElement elem = markup.get(0);
<span wicket:id="testObject">
...
/s
MyCssPanel(Component).internalRenderComponent() line: 2548	
			else
			{
				renderComponentTag(tag);
/s
MyCssPanel(Component).renderComponentTag(ComponentTag) line: 4026	
			// Write the tag
			tag.writeOutput(getResponse(), !needToRenderTag(null),
				getMarkup().getMarkupResourceStream().getWicketNamespace());
/s
ComponentTag.writeOutput(Response, boolean, String) line: 725	
/ writes <span wicket:id="testObject"> naar ...

/t
MyCssPanel(Component).internalRenderComponent() line: 2557	
				renderComponentTag(tag);
/d
				getMarkupSourcingStrategy().onComponentTagBody(this, markupStream, tag);
...
/s
MyCssPanel(MarkupContainer).renderAssociatedMarkup(String, String) line: 691	
		// Get associated markup file for the Border or Panel component
		final MarkupStream associatedMarkupStream = new MarkupStream(getMarkup(null));
/s
MyCssPanel(MarkupContainer).getMarkup(Component) line: 453	
		// Delegate request to attached markup sourcing strategy.
		return getMarkupSourcingStrategy().getMarkup(this, child);
/s
PanelMarkupSourcingStrategy(AssociatedMarkupSourcingStrategy).getMarkup(MarkupContainer, Component) line: 92	
		IMarkupFragment associatedMarkup = parent.getAssociatedMarkup();
/ parent=MyCssPanel	,
/ TODO
/s
MyCssPanel(MarkupContainer).getAssociatedMarkup() line: 407	
			Markup markup = MarkupFactory.get().getMarkup(this, false);
/s
MarkupFactory.getMarkup(MarkupContainer, boolean) line: 194	
		return getMarkup(container, container.getClass(), enforceReload);
/s
MarkupFactory.getMarkup(MarkupContainer, Class<?>, boolean) line: 236	
		IMarkupCache cache = getMarkupCache();
		if (cache != null)
		{
			// MarkupCache acts as pull-through cache. It'll call the same loadMarkup() method as
			// below, if needed.
			// @TODO may be that can be changed. I don't like it too much.
			return cache.getMarkup(container, containerClass, enforceReload);
/ s
/TODO

/' MORGEN WICKET7 





/d
/ TODO
			renderComponentTagBody(associatedMarkupStream, associatedMarkupOpenTag);
/ associatedMarkupStream=
[markup = file:/home/eric/Devel/Java/Wicket/wicket-testing/target/classes/my/test/own/MyCssPanel.html
<wicket:panel>
	<span wicket:id="first" class="first"></span>
	<span wicket:id="prev" class="prev"></span>
</wicket:panel>, index = 1, current = [Raw markup]]
/ associatedMarkupOpenTag 
<wicket:panel>

			renderAll(markupStream, openTag);



























/ 7	. 

/ belangrijke methods	,
/ we kwamen in	,

BaseWicketTester.class
	protected boolean processRequest(final MockHttpServletRequest forcedRequest,
		final IRequestHandler forcedRequestHandler, final boolean redirect)
	{
			if (!requestCycle.processRequestAndDetach())
...
/s
BaseWicketTester.class
	private class LastPageRecordingPageRendererProvider implements IPageRendererProvider
	{
		@Override
		public PageRenderer get(final RenderPageRequestHandler handler)
		{
			return new PageRenderer(handler)
			{
				@Override
				public void respond(RequestCycle requestCycle)
				{
					delegate.get(handler).respond(requestCycle);
/d
						Page renderedPage = (Page)handler.getPageProvider().getPageInstance();
						lastRenderedPage = lastPage = renderedPage;
/t
BaseWicketTester.class
	protected boolean processRequest(final MockHttpServletRequest forcedRequest,
		final IRequestHandler forcedRequestHandler, final boolean redirect)
	{
			if (!requestCycle.processRequestAndDetach())
/d
		finally
		{
			recordRequestResponse();
/s
		setLastResponse(response);


/ 7	.

/ terug in onze appl	,

/t
MyCssPanelTest.css() line: 26	
		MyCssPanel myCssPanel=wicketTester.startComponentInPage(MyCssPanel.class);
/d
		MockHttpServletResponse mockHttpServletResponse=wicketTester.getLastResponse();
		String markup=mockHttpServletResponse.getDocument();









/ Einde Intermezzo

/t
WebPageRenderer.respond(RequestCycle) line: 278	
			// redirect to buffer
			BufferedWebResponse response = renderPage(beforeRenderUrl, requestCycle);
/d
			else
			{
				storeBufferedResponse(afterRenderUrl, response);
/s
MockApplication(WebApplication).storeBufferedResponse(String, Url, BufferedWebResponse) line: 1006	
		String key = sessionId + url.toString();
key	"a403f94e-a10f-495b-bcec-f973f239f110wicket/page?0" (id=309)	
		storedResponses.put(key, response);
response	BufferedWebResponse  (id=201)	

/t
/s
WebPageRenderer.redirectTo(Url, RequestCycle) line: 157	
		WebResponse response = (WebResponse)requestCycle.getResponse();
/ alvast antwoord	,
response	BaseWicketTester$WicketTesterServletWebResponse  (id=199)	
	cookies	ArrayList<E>  (id=299)	
	httpServletResponse	MockHttpServletResponse  (id=300)	
		byteStream	ByteArrayOutputStream  (id=326)	
		characterEncoding	"UTF-8" (id=329)	
		cookies	ArrayList<E>  (id=333)	
		errorMessage	null	
		headers	ValueMap  (id=334)	
		locale	null	
		mode	0	
		printWriter	MockHttpServletResponse$2  (id=341)	
		redirectLocation	null	
		servletRequest	MockHttpServletRequest  (id=344)	
		servletStream	MockHttpServletResponse$1  (id=348)	
		status	200	
		stringWriter	StringWriter  (id=350)	
	redirect	false	
	webRequest	ServletWebRequest  (id=325)	

/s
	@Override
	public Response getResponse()
	{
		return activeResponse;
/ Hier werd in geschreven in .renderNext hierboven	,
				getResponse().write(element.toCharSequence());
/ TODO 

		String relativeUrl = requestCycle.getUrlRenderer().renderUrl(url);
./wicket/page?0
		response.sendRedirect(relativeUrl);
/s
				httpServletResponse.sendRedirect(url);

/t
BaseWicketTester$LastPageRecordingPageRendererProvider$1.respond(RequestCycle) line: 2685	
		@Override
		public PageRenderer get(final RenderPageRequestHandler handler)
		{
			return new PageRenderer(handler)
			{
				@Override
				public void respond(RequestCycle requestCycle)
				{
						lastRenderedPage = lastPage = renderedPage;
renderedPage	BaseWicketTester$StartComponentInPage  (id=192)	











/ 7 .










/ Einde WICKET JUNIT 

/ JUNIT WICKET AJAX

/ 7	.

		wicketTester.assertRenderedPage(CounterPage.class);
/ checks of de render page van class type CounterPage is	,

/ 7	. 

//////////////////////////////////////////////
/ Als we een label in een link hebben, moeten we de wicket:id's in het path geven in de test	,
		wicketTester.assertLabel("link:llabel","[[Link]]");

$ vi CounterPage.java

public class CounterPage extends WebPage{

	private int counter=0;
	private String text="[[Link]]";
	
	public CounterPage() {
		
		Link<Void>link=new Link<Void>("link") {
			@Override
			public void onClick() {
				counter++;	
			}
		};
		
		IModel<String>lmodel=new PropertyModel<String>(this, "text");
		Label linkl=new Label("text", lmodel);
		
		IModel<Integer>cmodel=new PropertyModel<Integer>(this, "counter");
		Label counterl=new Label("counter",cmodel);
		
		add(counterl);
		link.add(linkl);
		add(link);	

		
	}
}

$ vi CounterPage.html

<body>
<a wicket:id="link"><span wicket:id="text"></span></a>
<span wicket:id="counter">[Label]</span>
</body>


$ vi CounterPageTest.java

public class CounterPageTest {

	private WicketTester wicketTester;

	@Before
	public void fixture(){
		wicketTester=new WicketTester();
	}
	
	@Test
	public void test(){
		wicketTester.startPage(CounterPage.class);
		wicketTester.assertRenderedPage(CounterPage.class);
		wicketTester.assertLabel("link:text","[[Link]]");
		wicketTester.assertLabel("counter", "0");
		
	}

}

/ Inderdaad	,
		wicketTester.assertLabel("link:text","[[Link]]");

/ 7	.

/ we kunnen	, 
		IModel<String>counterlm=new Model<>("[[Link]]");
		Label counterl=new Label("counter", counterlm);
/ of	,
		Label counterl=new Label("llabel", Model.of("[[Link]]"));
/ of	,
public class CounterPage extends WebPage{
	private String text="[[Link]]";
	
	public CounterPage() {
		IModel<String>lmodel=new PropertyModel<String>(this, "text");
		Label llabel=new Label("text", lmodel);
	

/ OK

/ 7	. 

/ Met compoundpropertymodel	,

$ vi CounterPage2.java

public class CounterPage2 extends WebPage{
	
	private int counter=0;
	private String text="[[Link]]";
	
	public CounterPage2() {
		
		IModel<CounterPage2>model=new CompoundPropertyModel<CounterPage2>(this);
		this.setDefaultModel(model);
		
		Link<Void>link=new Link<Void>("link") {
			@Override
			public void onClick() {
				counter++;	
			}
		};
		
		Label linkl=new Label("text");
		
		Label counterl=new Label("counter");
		
		add(counterl);
		link.add(linkl);
		add(link);
		 
/ OK

/ 7	. 

/ we dachten: bij een compound property model , krijgt link dan een model?

/ In CounterPage heeft link data null heeft	, en linkl data 'n PropertyModel	,
/ In CounterPage heeft linkl een propertymodel set	, 
/ In CounterPage2 heeft link data null heeft	, en linkl data  null	, 
/ In CounterPage2 heeft de page een compound property model	,
/ TODO

/ 7	.

/ we click de link	,

$ vi CounterPage2Test.java

	@Test
	public void test(){
		wicketTester.startPage(CounterPage2.class);
		wicketTester.assertRenderedPage(CounterPage2.class);
		wicketTester.assertLabel("link:text","[[Link]]");
		wicketTester.assertLabel("counter", "0");
		wicketTester.clickLink("link");
		wicketTester.assertLabel("counter", "1");
		
	}
/ OK

/ 7	.

/ we change models -> see on screen	, 

/ als we een link click , wordt de page refresh, en zien we inderdaad de verandering in de model	,
/ TODO

$ vi CounterPage.java

public class Counter2Page extends WebPage{
	
	private int counter=0;
	private String text="Link";
	private String link="Foo Bar";
	
	public Counter2Page() {
		
		IModel<Counter2Page>model=new CompoundPropertyModel<Counter2Page>(this);
		this.setDefaultModel(model);
		
		Link<String>link=new Link<String>("link") {
			@Override
			public void onClick() {
				String s=getModelObject();
				counter++;	
				text="["+text+"]";
			}
		};
		
		Label linkl=new Label("text");
		
		Label counterl=new Label("counter");
		
		add(counterl);
		link.add(linkl);
		add(link);
	}
}

/ Door een 
	private String link 
/ op te nemen	, heeft de wicket component "link" een model	, en we kunnen de value opvragen in de onClick	,
				String s=getModelObject();
/ maar we doen er verder niets mee	,

/ we veranderen text en counter, die zijn de models avn de wicket components "text" en "counter"	,
/ als we click wordt page refresh 

/7	. 

/ de counter is on the link	,

$ vi Counter3Page.java

public class Counter3Page extends WebPage{
	
	private int counter=0;
	private String text="[[Link]]";
	private String link="Foo Bar";
	
	public Counter3Page() {
		
		IModel<Counter3Page>model=new CompoundPropertyModel<Counter3Page>(this);
		this.setDefaultModel(model);
		
		Link<Void>link=new Link<Void>("link") {
			@Override
			public void onClick() {
				counter++;	
			}
		};
		
		Label counterl=new Label("counter");
		
		link.add(counterl);
		add(link);
	}
}


/ we hoeven NIET	,
//				((IModel<Integer>)Counter3Page.this.get("link:counter").getDefaultModel()).setObject(counter);

/	7	.


/ we maken een AjaxFallbackLink	,  of een AjaxLink	,
/ we zien in de test inderdaad, dat als we gewoon click of een ajax event link exec, in beide gevallen ... 
/ TODO

$ vi Counter2AjaxPage.java

public class Counter2AjaxPage extends WebPage{
	
	private int counter=0;
	private String text="Link";
	private String link="Foo Bar";
	
	private Label counterl;
	private Label linkl;
	
	public Counter2AjaxPage() {
		
		IModel<Counter2AjaxPage>model=new CompoundPropertyModel<Counter2AjaxPage>(this);
		this.setDefaultModel(model);
		
		Link<String>link=new AjaxFallbackLink<String>("link") {

			@Override
			public void onClick(AjaxRequestTarget target) {
                counter++;
                text="["+text+"]";
                if(target!=null){
                	target.add(counterl);
                	target.add(linkl);
                	
                }
			}
		};
/ of	,
		AjaxLink link=new AjaxLink("link") {

			@Override
			public void onClick(AjaxRequestTarget target) {
                counter++;
                text="["+text+"]";
                if(target!=null){
                	target.add(counterl);
                	target.add(linkl);
                	
                }
			}
		};
		
		linkl=new Label("text");
		linkl.setOutputMarkupId(true);
		
		counterl=new Label("counter");
		counterl.setOutputMarkupId(true);
		
		add(counterl);
		link.add(linkl);
		add(link);
	}
}

$ vi Counter2AjaxPage.java

<a wicket:id="link"><span wicket:id="text"></span></a>
<span wicket:id="counter">[Label]</span>

$ vi Counter2AjaxPageTest.java

public class Counter2AjaxPageTest {
	
	private WicketTester wicketTester;

	@Before
	public void fixture(){
		wicketTester=new WicketTester();
	}
	
	@Test
	public void test(){
		wicketTester.startPage(Counter2AjaxPage.class);
		wicketTester.assertRenderedPage(Counter2AjaxPage.class);
		wicketTester.assertLabel("link:text","Link");
		wicketTester.assertLabel("counter", "0");

		wicketTester.clickLink("link");
		wicketTester.assertLabel("link:text", "[Link]");
		wicketTester.assertLabel("counter", "1");

		wicketTester.assertComponentOnAjaxResponse("counter");
		wicketTester.assertComponentOnAjaxResponse("link:text");
		wicketTester.executeAjaxEvent("link", "click");
		wicketTester.assertLabel("counter", "2");
		wicketTester.assertLabel("link:text", "[[Link]]");
	}
}
/ OK	,

/ Maar we kunnen ook	,

		AjaxLink link=new AjaxLink("link") {

			@Override
			public void onClick(AjaxRequestTarget target) {
				counter++;
                text="["+text+"]";
                if(target!=null){
                	target.add(counterl);
                	target.add(linkl);
                	
                }
				
			}
		};

/ Dan pass de test ook 	, 
/ TODO	

/ we hebben 	,

CounterPage.java
/ labels hebben eigen propperty model	, 

Counter2Page.java
/ label's model is onderdeel van de page's compound property model	,
Counter2AjaxPage.java
/ link met ajax	,

Counter3Page.java
/ de counter is de link's label	,




/ 7	.



 
/ Einde JUNIT WICKET AJAX

/ WICKET REDIRECT

/ 7	.

/ Lees	,
http://stackoverflow.com/questions/3334827/wicket-how-to-redirect-to-another-page
       throw new RestartResponseAtInterceptPageException(targetPage);
RestartResponseException.
/ TODO
getRequestCycle().setResponsePage(MyOtherPage.class);	?
/ TODO

/ Lees	,
http://stackoverflow.com/questions/18001231/wicket-exception-on-page-redirect
 throw new RedirectToUrlException(previousPageUrl);

/ Lees	,
http://ci.apache.org/projects/wicket/apidocs/7.x/org/apache/wicket/settings/RequestCycleSettings.html
http://ci.apache.org/projects/wicket/apidocs/1.4.x/

You could also look at the RequestCycle and check that a 
BookmarkablePageRequestTarget was set with correct page class. 

/ 7	.

/ we maken 2 wicket pages, die na elkaar kunnen redirect	, 
/ als we op de 1ste zijn, en we geven hem een bepaalde state	, en we direct naar de andere, en we redirect meteen weer terug, dan zien we dat de state van de 1ste totaal verdwenen is	,

/ proj wicket-testing	,

$ vi RedirectStudyPage.java

public class RedirectStudyPage extends WebPage{
	
	private int counter=0;
	private String text="Link";
	private String link="Foo Bar";
	private String redirect="Gee Hee";
	
	public RedirectStudyPage() {
		
		IModel<RedirectStudyPage>model=new CompoundPropertyModel<RedirectStudyPage>(this);
		
		Link<String>link=new Link<String>("link") {
			@Override
			public void onClick() {
				text="["+text+"]";
				counter+=13;
				
			}
		};
		Label linkl=new Label("text");

		Link<String>redirect=new Link<String>("redirect") {

			@Override
			public void onClick() {
				setResponsePage(RedirectStudyTargetPage.class);
				
			}
		};
		
		Label counterl=new Label("counter");
		
		this.setDefaultModel(model);
		add(counterl);
		link.add(linkl);
		add(link);
		add(redirect);
	}
}

$ vi RedirectStudyPage.html

<body>
<a wicket:id="link"><span wicket:id="text"></span></a>
<span wicket:id="counter"></span>
<a wicket:id="redirect">Redirect</a>
</body>

$ vi RedirectStudyTargetPage.java

public class RedirectStudyTargetPage extends WebPage{
	
	private int cnt=0;
	private String txt="Lnk";
	private String lnk="Foo Bar";
	private String redir="Gee Hee";
	
	public RedirectStudyTargetPage(PageParameters pageParameters) {
		IModel<RedirectStudyTargetPage>model=new CompoundPropertyModel<RedirectStudyTargetPage>(this);
		
		Link<String>link=new Link<String>("lnk"){

			@Override
			public void onClick() {
				String s=getModelObject();
				txt="("+txt+")";
				cnt+=7;
			}
			
		};
		Label linkl=new Label("txt");

		Link<String>redir=new Link<String>("redir") {

			@Override
			public void onClick() {
				setResponsePage(RedirectStudyPage.class);
			}

		};
		
		Label counterl=new Label("cnt");
		
		setDefaultModel(model);
		add(counterl);
		link.add(linkl);
		add(link);
		add(redir);
	}
}

$ vi RedirectStudyTargetPage.html

<a wicket:id="lnk"><span wicket:id="txt"></span></a>
<span wicket:id="cnt"></span>
<a wicket:id="redir">Redir</a>

$ vi RedirectStudyPageTest.java


public class RedirectStudyPageTest {
	
	private WicketTester wicketTester;

	@Before
	public void fixture(){
		wicketTester=new WicketTester();
	}
	
	@Test
	public void test(){
		wicketTester.startPage(RedirectStudyPage.class);
		wicketTester.assertRenderedPage(RedirectStudyPage.class);
		wicketTester.assertLabel("link:text","Link");
		wicketTester.assertLabel("counter", "0");
		wicketTester.clickLink("link");
		wicketTester.assertLabel("link:text", "[Link]");
		wicketTester.assertLabel("counter", "13");
		
		wicketTester.clickLink("redirect");
		wicketTester.assertRenderedPage(RedirectStudyTargetPage.class);
		wicketTester.assertLabel("lnk:txt", "Lnk");
		wicketTester.assertLabel("cnt", "0");
		
		wicketTester.clickLink("redir");
		wicketTester.assertRenderedPage(RedirectStudyPage.class);
		wicketTester.assertLabel("link:text", "Link");
		wicketTester.assertLabel("counter", "0");
// state is WEG	, WAS "[Link]", 13	,

	}
	
	@Test
	public void test2(){
		wicketTester.startPage(RedirectStudyTargetPage.class);
		wicketTester.assertRenderedPage(RedirectStudyTargetPage.class);
		wicketTester.assertLabel("lnk:txt","Lnk");
		wicketTester.assertLabel("cnt", "0");
		wicketTester.clickLink("lnk");
		wicketTester.assertLabel("lnk:txt", "(Lnk)");
		wicketTester.assertLabel("cnt", "7");
		
		wicketTester.clickLink("redir");
		wicketTester.assertRenderedPage(RedirectStudyPage.class);
		wicketTester.assertLabel("link:text", "Link");
		wicketTester.assertLabel("counter", "0");
		
		wicketTester.clickLink("redirect");
		wicketTester.assertRenderedPage(RedirectStudyTargetPage.class);
		wicketTester.assertLabel("lnk:txt", "Lnk");
		wicketTester.assertLabel("cnt", "0");
// state is WEG	, WAS "(Lnk)", 7	,

	}
}

/ we zien in beide gevallen dat de state weg is in het 1ste scherm, als we ernaar terugkeren	,

/ 7	.

/ we oef of we naar een jsp kunnen 	,

/ Lees	,
http://stackoverflow.com/questions/5800974/redirect-to-external-non-wicket-page-in-wicket-1-5

/ In 1.4	,
page.getRequestCycle().setRequestTarget(new RedirectRequestTarget("http://www.facebook.com/login.php?api_key="+ _apiKey + "&v=1.0"));

/ Vanaf 1.5	,
throw new RedirectToUrlException(
    "http://www.facebook.com/login.php?api_key="+ _apiKey + "&v=1.

/ 7	. 

/ geef in google,	
wickettester RedirectToUrlException
/ Lees	,
https://issues.apache.org/jira/browse/WICKET-4104

/ we maken in src/main/webapp/	, 

$ vi RedirectStudy.jsp

<h1>Redirect Study</h1>

/ 13	. 

/ eerst nog in de originele test	, 
/ we set	, 
		wicketTester.setFollowRedirects(false);

/ dan zien we inderdaad dat de test fails, omdat de link niet meer followed wordt	,

$ vi RedirectStudyPageTest.java

	@Test
	public void test(){
		wicketTester.startPage(RedirectStudyPage.class);
		wicketTester.assertRenderedPage(RedirectStudyPage.class);
		wicketTester.assertLabel("link:text","Link");
		wicketTester.assertLabel("counter", "0");
		wicketTester.clickLink("link");
		wicketTester.assertLabel("link:text", "[Link]");
		wicketTester.assertLabel("counter", "13");
		
		wicketTester.clickLink("redirect");
		wicketTester.assertRenderedPage(RedirectStudyTargetPage.class);
		wicketTester.assertLabel("lnk:txt", "Lnk");
		wicketTester.assertLabel("cnt", "0");
		
		wicketTester.setFollowRedirects(false);
// !
		wicketTester.clickLink("redir");
		wicketTester.assertRenderedPage(RedirectStudyPage.class);
		wicketTester.assertLabel("link:text", "Link");
		wicketTester.assertLabel("counter", "0");

/ de test fails	, 

/ we use dit als we link naar een jsp	, deze kan hij niet volgen, maar wel test	,


$ vi RedirectStudyPageTest.java

	public void test(){
		wicketTester.startPage(RedirectStudyPage.class);
		wicketTester.assertRenderedPage(RedirectStudyPage.class);
		wicketTester.assertLabel("link:text","Link");
		wicketTester.assertLabel("counter", "0");
		wicketTester.clickLink("link");
		wicketTester.assertLabel("link:text", "[Link]");
		wicketTester.assertLabel("counter", "13");
		
		wicketTester.clickLink("redirect");
		wicketTester.assertRenderedPage(RedirectStudyTargetPage.class);
		wicketTester.assertLabel("lnk:txt", "Lnk");
		wicketTester.assertLabel("cnt", "0");

		wicketTester.clickLink("redir");
		wicketTester.assertRenderedPage(RedirectStudyPage.class);
		wicketTester.assertLabel("link:text", "Link");
		wicketTester.assertLabel("counter", "0");
		
		wicketTester.setFollowRedirects(false);
		wicketTester.clickLink("jsp");
		MockHttpServletResponse mockHttpServletResponse=wicketTester.getLastResponse();
		Assert.assertTrue(mockHttpServletResponse.isRedirect());
		String redirectLocation=mockHttpServletResponse.getRedirectLocation();
		Assert.assertFalse(redirectLocation.isEmpty());
		Assert.assertEquals("RedirectStudy.jsp", redirectLocation);
		
		wicketTester.setFollowRedirects(true);
		wicketTester.startPage(RedirectStudyPage.class);
		wicketTester.assertLabel("link:text", "Link");
		wicketTester.assertLabel("counter", "0");
		
	
	}

/ De redirect naar de jsp gaat OK test	,
/ Hij geeft de redirect toch ahw gedaan	, want erna moeten we eerst	,
		wicketTester.startPage(RedirectStudyPage.class);
/ anders geven ERR	,
		wicketTester.assertLabel("link:text", "Link");

/ 7	. 

/ we set b in 	,
MockHttpServletResponse.sendRedirect(String) line: 609	

/ we zien dat deze al wordt called in	, 
		wicketTester.startPage(RedirectStudyPage.class);

Thread [main] (Suspended (entry into method sendRedirect in MockHttpServletResponse))	
	MockHttpServletResponse.sendRedirect(String) line: 609	
	BaseWicketTester$WicketTesterServletWebResponse(ServletWebResponse).sendRedirect(String) line: 298	
	BaseWicketTester$WicketTesterServletWebResponse.sendRedirect(String) line: 2884	
	WebPageRenderer.redirectTo(Url, RequestCycle) line: 161	
	WebPageRenderer.respond(RequestCycle) line: 280	
	BaseWicketTester$LastPageRecordingPageRendererProvider$1.respond(RequestCycle) line: 2672	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 837	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler, boolean) line: 667	
	WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler) line: 606	
	WicketTester(BaseWicketTester).processRequest() line: 578	
	WicketTester(BaseWicketTester).startPage(Class<C>, PageParameters) line: 1211	
	WicketTester(BaseWicketTester).startPage(Class<C>) line: 1184	
	RedirectStudyPageTest.test() line: 22	
	...
/ TODO

/ Als we continue geven, zien we dat deze fct vaker wordt called	, door meerdere .clickLink die we hebben, maar ook op een andere manier	, 
/ TODO
MockHttpServletResponse.sendRedirect(String) line: 609	
/ TODO

/ 7	. 


$ vi RedirectStudyPageTest.java 

	public void test(){
		wicketTester.startPage(RedirectStudyPage.class);
		wicketTester.assertRenderedPage(RedirectStudyPage.class);
		wicketTester.setFollowRedirects(false);
		wicketTester.clickLink("jsp");
/s
/ See DEBUG CLICKLINK
...
/s
MockHttpServletResponse.sendRedirect(String) line: 609	
		redirectLocation = location;
location	"RedirectStudy.jsp" (id=224)	

/ 7	. 

/ we komen met jsp in	,
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	

/ maar met jsp2	, komen we in	,
ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 158	

 


/ we zien dat 	,
$ vi RedirectStudyPageTest.java

	@Test
	public void test1(){
		wicketTester.startPage(RedirectStudyPage.class);
		wicketTester.setFollowRedirects(false);
		wicketTester.clickLink("jsp2");
/ hij NIET valt in	,
MockHttpServletResponse.sendRedirect(String) line: 609	
/ TODO

/ Daardoor gaat alles mis	,
/ TODO

/ als we deploy gaat het OK	,
/ TODO

/ 7	.

$ vi RedirectToUrlException.java

 * Causes Wicket to interrupt current request processing and send a redirect to the given url.
 * Use this if you want to redirect to an external or none Wicket url. If you want to redirect to a
 * page use the {@link RestartResponseException}

/ we deden bij redirect	, (dit is WH 1.4)	,

		Link<String>redirect=new Link<String>("redirect") {

			@Override
			public void onClick() {
				setResponsePage(RedirectStudyTargetPage.class);
				
			}
		};

/ maar we kunnen ook	, (WH sinds 1.5)	,
		
		Link<String>redirect2=new Link<String>("redirect2") {

			@Override
			public void onClick() {
				throw new RestartResponseException(RedirectStudyTargetPage.class);
				
			}
		};


$ vi RedirectStudyPageTest.java

	@Test
	public void test3(){
		wicketTester.startPage(RedirectStudyPage.class);
		wicketTester.assertRenderedPage(RedirectStudyPage.class);
		wicketTester.assertLabel("link:text","Link");
		wicketTester.assertLabel("counter", "0");
		wicketTester.clickLink("link");
		wicketTester.assertLabel("link:text", "[Link]");
		wicketTester.assertLabel("counter", "13");
		
		wicketTester.clickLink("redirect2");
		wicketTester.assertRenderedPage(RedirectStudyTargetPage.class);
		wicketTester.assertLabel("lnk:txt", "Lnk");
		wicketTester.assertLabel("cnt", "0");
	}

/ OK

/ 7	. 

/ lees	,
https://cwiki.apache.org/confluence/display/WICKET/How+to+redirect+to+an+external+non-Wicket+page

This page applies to Wicket 1.3.

Normally, you'd use one of the following to redirect to a Wicket page:
setResponsePage(new FooPage(arg0, arg1));
setResponsePage(BarPage.class);

If you're trying to integrate with JSPs or similar, you may need to redirect to a non-Wicket page. Do use then the RedirectRequestTarget where you can specify an url.
public void onSubmit()
{
    // Make sure no output for the current cycle is ever sent.
    getRequestCycle().setRequestTarget(new RedirectRequestTarget("/path/to/legacyJspFile.jsp"));
 
}

Note that if you just want to make standard anchor tag links to other pages, don't create a Link and use this method in the onClick() handler; instead use the ExternalLink class.

/ 7	. 

/ In appl in shipment order search	, is een list van shioment orders	, en op elke row is een edit button	,
				getRequestCycle().setRequestTarget( new RedirectRequestTarget("../oms/shipment-order_edit?base_sessionLevelOffset=1&systemid=" + aObject + "&systemId=" + aObject));

/ RedirectRequestTarget is 1.4	, en is voor naar een absolute url: wicket -> jsp	, 

/ 7	. 





/ Einde WICKET REDIRECT

/ DEBUG WICKET REDIRECT

/ 7. 	

/ proj. wicket-testing	, 
/ class RedirectStudyPage	,

		Link<String>redirect=new Link<String>("redirect") {

			@Override
			public void onClick() {
				setResponsePage(RedirectStudyTargetPage.class);
				
			}
		};

...
/s
	WebPageRenderer.respond(RequestCycle) line: 193	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 837	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 97	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
	...

	public void respond(RequestCycle requestCycle)
	{
		Url currentUrl = requestCycle.getUrlRenderer().getBaseUrl();
?11-1.ILinkListener-redirect
		Url targetUrl = requestCycle.mapUrlFor(getRenderPageRequestHandler());
wicket/bookmarkable/my.test.own.RedirectStudyTargetPage

		else if (shouldRedirectToTargetUrl(requestCycle, currentUrl, targetUrl))
		{
			redirectTo(targetUrl, requestCycle);
/s
	protected void redirectTo(Url url, RequestCycle requestCycle)
	{
		...
		WebResponse response = (WebResponse)requestCycle.getResponse();
		String relativeUrl = requestCycle.getUrlRenderer().renderUrl(url);
relativeUrl	"./wicket/bookmarkable/my.test.own.RedirectStudyTargetPage" (id=8678)	
		response.sendRedirect(relativeUrl);
/s
BufferedWebResponse.sendRedirect(String) line: 559	
		actions.add(new SendRedirectAction(url));

/ we geven continue	,

	BufferedWebResponse.writeTo(WebResponse) line: 582	
	HeaderBufferingWebResponse.stopBuffering() line: 60	
	HeaderBufferingWebResponse.flush() line: 97	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 271	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ we waren zojuist in	,
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
->		if (!requestCycle.processRequestAndDetach())
/ WAREN	,
		{
			if (chain != null)
			{
				chain.doFilter(httpServletRequest, httpServletResponse);
			}
			res = false;
		}
		else
		{
->			webResponse.flush();
/ NU	,

/ we zijn in 	,
BufferedWebResponse.writeTo(WebResponse) line: 588	
			action.invoke(response);
/s
BufferedWebResponse$SendRedirectAction.invoke(WebResponse) line: 400	
			response.sendRedirect(url);
/s
ServletWebResponse.sendRedirect(String) line: 298	
				httpServletResponse.sendRedirect(url);
url	"wicket/bookmarkable/my.test.own.RedirectStudyTargetPage" (id=8688)	
/  httpServletResponse=org.apache.catalina.connector.ResponseFacade@7cab2b5d

/ 7	.

BufferedWebResponse.write(CharSequence) line: 471	
/=
	@Override
	public void write(CharSequence sequence)
/ Hier komen we steeds	,
/ TODO

/ 7	.

http://www.wicket-library.com/wicket-examples/index.html

/ lees	,
http://ci.apache.org/projects/wicket/guide/7.x/guide/single.html#helloWorld_4

/ Lees	, 
/ boek (30)

/ lees	 migration to 1.5	,
https://cwiki.apache.org/confluence/display/WICKET/Migration+to+Wicket+1.5

/ 1.4	,
getRequestCycle().setRequestTarget(new RedirectRequestTarget("/usage.html"));

/ 1.5
getRequestCycle().scheduleRequestHandlerAfterCurrent(new RedirectRequestHandler("/usage.html"));

/ wat is	,
<a onclick="jsfunction()" href="javascript:void(0);">
/ en	,
<a onclick="jsfunction()" href="#">
/ TODO

/ 7	. 

/ Lees	,
http://ci.apache.org/projects/wicket/guide/7.x/guide/urls.html

/ 7	. 

$ vi ToJSPPage.java 
public class ToJSPPage extends WebPage{
		Link<Void>toJSPLink=new Link<Void>("tojsp") {

			@Override
			public void onClick() {
				PageParameters pageParameters=new PageParameters();
				String myurl=(String)getPage().urlFor(ToJSPPage.class, null);
				IRequestHandler requestHandler=new RedirectRequestHandler("/towicket.jsp?myurl="+myurl);
				getRequestCycle().scheduleRequestHandlerAfterCurrent(requestHandler);

$ vi towicket.jsp
	<a href='<%= request.getParameter("myurl") %>'>wicket</a>

/ of dubbel quotes 	,
	<a href="<%= request.getParameter("myurl") %>">wicket</a>
/ we hoeven de interne dubbel quotes niet te escape	, 

/ Geef in chrome	,
http://localhost:9090/wicket-testing
/ hij maakt	, 
http://localhost:9090/wicket-testing/?0
/ click Count een aantal keer: 8	,
/ we click JSP	,
http://localhost:9090/wicket-testing/towicket.jsp?myurl=./
/ we edit deze url	,
http://localhost:9090/wicket-testing/towicket.jsp?myurl=./?0
/ geef Enter
/ click wicket
/ we komen op	,
http://localhost:9090/wicket-testing/?0
/ met de juiste state	,

/ 13	. 

/ lees	,
https://cwiki.apache.org/confluence/display/WICKET/Getting+a+url+for+display

/ we maken de absolute url	, 

$ vi ToJSPPage.java 

	Link<Void>toJSPLink2=new Link<Void>("tojsp2") {

			@Override
			public void onClick() {
				String urlAsString=getPage().urlFor(ToJSPPage.class, null).toString();
				Url url=Url.parse(urlAsString);
				RequestCycle requestCycle=RequestCycle.get();
				UrlRenderer urlRenderer=requestCycle.getUrlRenderer();
				String absoluteUrlAsString=urlRenderer.renderFullUrl(url);
				IRequestHandler requestHandler=new RedirectRequestHandler("/towicket.jsp?myurl="+absoluteUrlAsString);
				getRequestCycle().scheduleRequestHandlerAfterCurrent(requestHandler);
			}
		};

/ we zien als we click op de JSP2 link	,
http://localhost:9090/wicket-testing/towicket.jsp?myurl=http://localhost:9090/wicket-testing
/ als we op de wicket link click op de jsp	, dan OK, maar wel naar een nieuwe version	, dus hetzelfde als bij de relative url	,


/ 13	. 

$ vi  EntityActionGroupListPage.java
public class EntityActionGroupListPage extends BaseContextPage {
	private EntityListActionBuilder<EntityActionGroup> getPanelAction() {
		Collection<EntityAction<EntityActionGroup>> actions = new ArrayList<EntityAction<EntityActionGroup>>();
		EntityActionButton<EntityActionGroup> editAction = new EntityActionButton<EntityActionGroup>("edit",
				new ResourceModel("edit").wrapOnAssignment(EntityActionGroupListPage.this)) {

			@Override
			protected void onSubmit(Button aButton, IModel<EntityActionGroup> aSelection) {
				setResponsePage(new EntityActionGroupEditPage(daoWrapper, Model.of(aSelection.getObject()), EntityActionGroupListPage.this));
			}
		};

/ 13	. 

/ Geef in google,	
wicket setresponsepage page id
/ lees	,
http://apache-wicket.1842946.n4.nabble.com/setResponsePage-Class-c-versus-setResponsePage-Page-p-td1860997.html

/ 13	. 

/ we maken	
$ vi RedirectStudyPage.java

		Link<String>redirect=new Link<String>("redirect") {

			@Override
			public void onClick() {
				PageParameters pageParameters=new PageParameters();
				pageParameters.add("returnPage", RedirectStudyPage.this);
				setResponsePage(RedirectStudyTargetPage.class,pageParameters);

/ we zien op de url	, dus de page id=4	,
http://localhost:9090/wicket-testing/?4
/ we zien de links op de page	,
<body>
<a wicket:id="link" wicketpath="link" href="./?4-1.ILinkListener-link"><span wicket:id="text" wicketpath="link_text">Link</span></a>
<span wicket:id="counter" wicketpath="counter">0</span>
<a wicket:id="redirect" wicketpath="redirect" href="./?4-1.ILinkListener-redirect">Redirect</a>
<a wicket:id="redirect1" wicketpath="redirect1" href="./?4-1.ILinkListener-redirect1">Redirect1</a>
<a wicket:id="redirect2" wicketpath="redirect2" href="./?4-1.ILinkListener-redirect2">Redirect2</a>
<a wicket:id="jsp" wicketpath="jsp" href="./?4-1.ILinkListener-jsp">JSP</a>
<a wicket:id="jsp2" wicketpath="jsp2" href="./?4-1.ILinkListener-jsp2">JSP Permanently</a>

</body> 

/ we click deze link 'Rediredt'	,
http://localhost:9090/wicket-testing/wicket/bookmarkable/my.test.own.RedirectStudyTargetPage?1&returnPage=%5BPage+class+%3D+my.test.own.RedirectStudyPage,+id+%3D+0,+render+count+%3D+1%5D

http://localhost:9090/wicket-testing/wicket/bookmarkable/my.test.own.RedirectStudyTargetPage?5&returnPage=%5BPage+class+%3D+my.test.own.RedirectStudyPage,+id+%3D+4,+render+count+%3D+1%5D


/ 7	. 

http://localhost:9090/wicket-testing/towicket.jsp?returnUrl=./?pageId=0

/ 7	. 

/ see versions in  wicket-testing proj.		,
OtherFormPage2.class;

/ 7	.

/ MORGEN	,
RedirectStudyPage
ToJSPPage

/ 7	. 

$ vi ToJSPPage.java

/ we doen het op 2 manieren	, 
/ toJSPLink3 is de beste	,

		Link<Void>toJSPLink3=new Link<Void>("tojsp3") {

			@Override
			public void onClick() {
				PageParameters pageParameters=new PageParameters();
				String pageId=ToJSPPage.this.getId();
				pageParameters.add("pageId", pageId);

				String returnUrl=(String)getPage().urlFor(ToJSPPage.class, pageParameters);
				IRequestHandler requestHandler=new RedirectRequestHandler("/towicket.jsp?returnUrl="+returnUrl);
				getRequestCycle().scheduleRequestHandlerAfterCurrent(requestHandler);
			}
		};
		
		Link<Void>toJSPLink4=new Link<Void>("tojsp4") {

			@Override
			public void onClick() {
				String pageId=ToJSPPage.this.getId();

				String returnUrl=(String)getPage().urlFor(ToJSPPage.class, null);
				IRequestHandler requestHandler=new RedirectRequestHandler("/towicket.jsp?returnUrl="+returnUrl+"?"+pageId);
				getRequestCycle().scheduleRequestHandlerAfterCurrent(requestHandler);
			}
		};

$ vi ToJSPPage.html

<a wicket:id="tojsp3">JSP3</a>
<a wicket:id="tojsp4">JSP4</a>

$ vi towicket.jsp

	<a href="<%= request.getParameter("returnUrl").replaceAll("pageId=", "") %>">wicket3</a>
	<a href="<%= request.getParameter("returnUrl") %>">wicket4</a>

/ als we click op tojsp3 op ToJSPPage.html, dan moeten we in towicket.jsp click op wicket3	,

/ 13	. 
/ we zijn op ToJSPPage.html	, 
http://localhost:9090/wicket-testing/?0
/ we click een aantal keer op Count	, tot 7	, bijv	,
/ we click tojsp3 op ToJSPPage.html	, we zien	,
http://localhost:9090/wicket-testing/towicket.jsp?returnUrl=./?pageId=0
/ click op wicket3	, we zien	,
http://localhost:9090/wicket-testing/?0
/ en we zien de count op 7	,

/ we click op tojsp4	,
http://localhost:9090/wicket-testing/towicket.jsp?returnUrl=./?0
/ we click op wicket4	,
http://localhost:9090/wicket-testing/?0

/ 7	.

/ we oef. met 2 pages	, die naar elkaar link	,

/  proj. wicket-testing	,

$ vi RedirectStudyPage.java

		Link<String>redirect=new Link<String>("redirect") {
			@Override
			public void onClick() {
				PageParameters pageParameters=new PageParameters();
				setResponsePage(RedirectStudyTargetPage.class);

$ vi RedirectStudyTargetPage.java

		Link<String>redir=new Link<String>("redir") {

			@Override
			public void onClick() {
				Session session=getSession();
				IPageManager pageManager=session.getPageManager();
				int id=Integer.parseInt(RedirectStudyTargetPage.this.getId())-1;
				IManageablePage page=pageManager.getPage(id);
				setResponsePage((IRequestablePage)page);

/ RedirectStudyPage is de home page	,
/ we geven	,
http://localhost:9090/wicket-testing/?0
/ click redirect	,
http://localhost:9090/wicket-testing/wicket/bookmarkable/my.test.own.RedirectStudyTargetPage?1
/ click redir	,
http://localhost:9090/wicket-testing/?0
/ click redirect	,
http://localhost:9090/wicket-testing/wicket/bookmarkable/my.test.own.RedirectStudyTargetPage?2
/ click redir	,
http://localhost:9090/wicket-testing/wicket/bookmarkable/my.test.own.RedirectStudyTargetPage?1
 /click redir	,
http://localhost:9090/wicket-testing/?0

/ 7	. 

/ we kunnen ook de page zelf meesturen, maar dan moet de target page in z'n constructor een page hebben	,

$ vi RedirectStudyPage.java

		Link<String>redirect0=new Link<String>("redirect0") {
			@Override
			public void onClick() {
				IRequestablePage page=new RedirectStudyTargetWithRefPage(null, RedirectStudyPage.this);
				setResponsePage(page);		
			}
		};

$ vi RedirectStudyTargetWithRefPage.java

	public RedirectStudyTargetWithRefPage(PageParameters pageParameters,final IRequestablePage page) {
		
		Link<String>redir=new Link<String>("redir") {

			@Override
			public void onClick() {
					setResponsePage(page);
			}

		};


/ de home page is RedirectStudyPage	,
/ geef	,
http://localhost:9090/wicket-testing/?0
/ click redirect0	,
http://localhost:9090/wicket-testing/wicket/page?4
/ click redir	,
http://localhost:9090/wicket-testing/?0


/ 7	. 

/ Kijk in 	,

/ in 1.4	,
$ vi RequestCycle.java

    private final CharSequence encodeUrlFor(final IRequestTarget requestTarget)
    {
        CharSequence url = getProcessor().getRequestCodingStrategy().encode(this, requestTarget);
        url = cutNilChar(url);
        urlForNewWindowEncoding = false;
        return url;
    }

/ In 7 is er niet meer	, 
/ TODO







/ Einde DEBUG WICKET REDIRECT

/ WICKET LINKS

/ 7	.

/ in workspace-wicket7 

/ in wicket-testing proj	.

public class LinkStudyPage extends WebPage{

		PageParameters pageParameters=new PageParameters();
		pageParameters.add("id", "13");
		CharSequence url=urlFor(LinkStudyTargetPage.class,pageParameters);
		Url url2=Url.parse(url);
		RequestCycle requestCycle =RequestCycle.get();
		UrlRenderer urlRenderer= requestCycle.getUrlRenderer();

		String urlAsString=url.toString();
		String absUrl=urlRenderer.renderFullUrl(url2);

		System.out.println(urlAsString);
		System.out.println(absUrl);

/ we zien	,
./wicket/bookmarkable/my.test.own.LinkStudyTargetPage?id=13
http://localhost:9090/wicket-testing/wicket/bookmarkable/my.test.own.LinkStudyTargetPage?id=13


/ 1.4	.

				String returnUrl = getRequestCycle().urlFor(ShipmentOrderListPage.this).toString();
				returnUrl = RequestUtils.toAbsolutePath(returnUrl);
				getRequestCycle().setRequestTarget(
						new RedirectRequestTarget("../oms/shipment-order_edit?" + "base_sessionLevelOffset=1" + "&systemid=" + aObject + "&systemId=" + aObject + "&returnUrl=" + returnUrl));

/ 7	. 

/ we maken 2 links, een external link, en een link naar een andere page	,

/ wicket1.4	,

public class LinkStudyPage extends WebPage{
	
	public LinkStudyPage() {
	
	
		Link<Void>link=new Link<Void>("link") {
			@Override
			public void onClick() {
				setResponsePage(LinkStudyTargetPage.class);
			}
		};
	
		ExternalLink externalLink=new ExternalLink("externalLink", "//www.google.com");
		
		
		add(externalLink);
		add(link);
	}

$ vi LinkStudyPage.html

<a wicket:id="externalLink">[External Link</a>
<a wicket:id="link">[Link]</a>


/ wicket7	.

public class LinkStudyPage extends WebPage{
	
	private String extLink="//www.google.com";
	private String extLabel="Google";

	
	public LinkStudyPage() {
		
		ExternalLink externalLink=new ExternalLink("externalLink", "//www.google.com","Google") 
		
		Link<Void>link=new Link<Void>("link") {

			@Override
			public void onClick() {
				setResponsePage(LinkStudyTargetPage.class);
				
			}
		};
		
$ vi LinkStudyPage.html

<a wicket:id="externalLink">[External Link</a>
<a wicket:id="link">[Link]</a>

/ we zien in HTML

/ 1.4

<h1>LinkStudyPage</h1>
<a wicket:id="externalLink" href="//www.google.com">[External Link</a>
<a wicket:id="link" href="?wicket:interface=:0:link::ILinkListener::">[Link]</a>

<h1>LinkStudyTargetPage</h1>
<body>
<h1>LinkStudyTargetPage</h1>
<a wicket:id="link" href="?wicket:interface=:5:link::ILinkListener::">[Link]</a>

/ als we click op link op LinkStudyPage	, dan zien we de url	,
http://localhost:9090/wicket-testing1.4/?wicket:bookmarkablePage=:my.own.LinkStudyTargetPage

</body>

/ wicket7	.

<h1>LinkStudyPage</h1>
<a wicket:id="externalLink" wicketpath="externalLink" href="//www.google.com">Google</a>
<a wicket:id="link" wicketpath="link" href="./?0-7.ILinkListener-link">[Link]</a>
/ *

<h1>LinkStudyTargetPage</h1>
<a wicket:id="link" wicketpath="link" href="./my.test.own.LinkStudyTargetPage?3-1.ILinkListener-link">[Link]</a>

</body>

/ bij *
/ iedere keer als we de page reload, loopt de teller , nu 7 op	, de page id=0 blijft	,

/ als we click op link op LinkStudyPage	, dan zien we de url	,
http://localhost:9090/wicket-testing/wicket/bookmarkable/my.test.own.LinkStudyTargetPage?11


/ 7	. 

/ mount	,

$ vi WicketApplication.java

	public void init()
	{
		super.init();

//		mount("web",PackageName.forClass(LinkStudyPage.class));
// TODO
		
//		mountPage("/web", LinkStudyTargetPage.class);
//		mountPackage("/web", LinkStudyPage.class);


/ Geef in google	,
wicket map to url
/ Lees	,
http://blog.xebia.com/2008/10/09/readable-url%E2%80%99s-in-wicket-an-introduction-to-wicketstuff-annotation

/ lees	,
http://ci.apache.org/projects/wicket/guide/7.x/guide/urls.html#urls_2

/ Lees	,
http://ceki.blogspot.nl/2009/10/page-links-with-wicket.html

/ Einde Intermezzo

/ 7	.

/ Lees	,
https://cwiki.apache.org/confluence/display/WICKET/Getting+a+url+for+display 

/ UrlRenderer bestaat niet in 1.4	,

/ 13	. 

/ wicket 7	,

/ 13	. 

/ wicket 1.4



/ Einde WICKET LINKS

/ ECLIPSE SETUP DEBUG WICKET

/ we maken een run config 
Name: wicket-testing1.4-deploy
Base dir: / home page is LinkStudyPage    ,
Goals: tomcat7:undeploy clean tomcat7:deploy

/ we maken den debug config	,
Name: tomcat7-or-jetty-remote-on-wicket-testing1.4
Project: wicket-testing1.4
Host: localhost
Port: 9966

/ In tomcat	
$ vi bin/catalina.sh
JPDA_ADDRESS=9966

/ en vanwege andere tomcat op 8080 hebben we	,
$ vi conf/server.xml
    <!-- ERICJ 9090 -->
    <Connector port="9090" protocol="HTTP/1.1"
               connectionTimeout="20000"
               redirectPort="8443" />

/ we doen
$ bin/catalina.sh jpda run


/ ECLIPSE SETUP DEBUG WICKET

/ WICKET 1.4 LINKS

/ proj wicket-testing1.4	, in workspace-wicket1.4	,

/ home page is LinkStudyPage	,

$ vi LinkStudyPage.java

		final PageParameters pageParameters=new PageParameters();
		CharSequence urlAsCharSequence =getRequestCycle().urlFor(this);
		String urlAsString = urlAsCharSequence.toString();
		String absoluteUrlAsString=RequestUtils.toAbsolutePath(urlAsString);
		pageParameters.add("returnUrl", absoluteUrlAsString);
		
		System.out.println(urlAsString);
		System.out.println(absoluteUrlAsString);
		
		Link<Void>link=new Link<Void>("link") {
			@Override
			public void onClick() {
				setResponsePage(LinkStudyTargetPage.class, pageParameters);
			}
		};

$ vi LinkStudyPage.html
<a wicket:id="externalLink">[External Link</a>
<a wicket:id="link">[Link To Target]</a>

/ we zien in HTML	,
<a wicket:id="externalLink" href="//www.google.com">[External Link</a>
<a wicket:id="link" href="?wicket:interface=:0:link::ILinkListener::">[Link To Target]</a>


$ vi LinkStudyTargetPage.java

	public LinkStudyTargetPage(PageParameters pageParameters) {
		
		final String returnUrl=pageParameters.getString("returnUrl");

		ExternalLink externalLink=new ExternalLink("externalLink", returnUrl,"Back");

		Link<Void>link=new Link<Void>("link") {
			@Override
			public void onClick() {
				RequestCycle requestCycle=getRequestCycle();
				RedirectRequestTarget redirectRequestTarget=new RedirectRequestTarget(returnUrl);
				requestCycle.setRequestTarget(redirectRequestTarget);
			}
		};

$ vi LinkStudyTargetPage.html
<a wicket:id="externalLink">[External Link Back To Target]</a>
<a wicket:id="link">[Link Back To Target]</a>

/we zien in HTML	,
<a wicket:id="externalLink" href="http://localhost:9090/wicket-testing1.4/?wicket:interface=:0::::">Back</a>
<a wicket:id="link" href="?wicket:interface=:1:link::ILinkListener::">[Link Back To Target]</a>

/ we zien bij redirectrequesttarget de relative url	,
/ TODO



/ Geef	,
http://localhost:9090/wicket-testing1.4/
/ click een aantal keer [Link0]	, we maken state	,
/ click [Link]	, we gaan naar LinkStudyTargetPage	, 
http://localhost:9090/wicket-testing1.4/?wicket:bookmarkablePage=:my.own.LinkStudyTargetPage&returnUrl=http://localhost:9090/wicket-testing1.4/?wicket:interface%3D:5::::
/ %3D is url encoding voor =	,

/ we zien in Tomcat's output	,
?wicket:interface=:5::::
http://localhost:9090/wicket-testing1.4/?wicket:interface=:5::::

/ op de target page	,
/ click [Link]	, terug naar LinkStudyPage	,
http://localhost:9090/wicket-testing1.4/?wicket:interface=:0::::

/ we zien de state	, 



				getRequestCycle().setRequestTarget( new RedirectRequestTarget("../oms/shipment-order_edit?" + "base_sessionLevelOffset=1" + "&systemid=" + aObject + "&systemId=" + aObject + "&returnUrl=" + returnUrl));
 


/ Einde WICKET 1.4 LINKS

/ DEBUG WICKET 1.4 LINKS

LinkStudyPage.<init>() line: 42	
		CharSequence urlAsCharSequence =getRequestCycle().urlFor(this);
/s
WebRequestCycle(RequestCycle).urlFor(Page) line: 1054	
		IRequestTarget target = new PageRequestTarget(page);
		getSession().touch(((IPageRequestTarget)target).getPage());
		return encodeUrlFor(target);
/s
WebRequestCycle(RequestCycle).encodeUrlFor(IRequestTarget) line: 811	
		CharSequence url = getProcessor().getRequestCodingStrategy().encode(this, requestTarget);
...
/s
WebRequestCodingStrategy.encode(RequestCycle, IRequestTarget) line: 253	

		// First check to see whether the target is mounted
		CharSequence url = pathForTarget(requestTarget);
null

		if (url != null && !portletRequest)
/ NEE
		else if (requestTarget instanceof IBookmarkablePageRequestTarget)
/ NEE
		else if (requestTarget instanceof ISharedResourceRequestTarget)
/ NEE
		else if (requestTarget instanceof PageReferenceRequestTarget)
/ NEE
		else if (requestTarget instanceof IListenerInterfaceRequestTarget)
/ NEE
		else if (url == null)
/ JA
			if (requestTarget instanceof IPageRequestTarget)
			{
				// This calls page.urlFor(IRedirectListener.INTERFACE), which calls
				// the function we're in again. We therefore need to jump out here
				// and return the url immediately, otherwise we end up prefixing it
				// with relative path or absolute prefixes twice.
				return encode(requestCycle, (IPageRequestTarget)requestTarget);
/s
WebRequestCodingStrategy.encode(RequestCycle, IPageRequestTarget) line: 1050	
/ recursive call	,
		// Get the page we want a url from:
		Page page = requestTarget.getPage();
LinkStudyPage inst	,

//////////////////////////////////////////////////////////////////////////////////////////////
/ TODO ERICJ
		// A url to a page is the IRedirectListener interface:
		CharSequence urlRedirect = page.urlFor(IRedirectListener.INTERFACE);
/////////////////////////////////////////////////////////////////////////////////////////////

/ Intermezzo

public interface IRedirectListener extends IRequestListener
{
	/** Redirect listener interface */
	public static final RequestListenerInterface INTERFACE = new RequestListenerInterface(
		IRedirectListener.class);

	/**
	 * Called when a page redirect happens.
	 */
	void onRedirect();
}

public class RequestListenerInterface
{
	...

./wicket/src/main/java/org/apache/wicket/Page.java:public abstract class Page extends MarkupContainer implements IRedirectListener, IPageMapEntry
   public final void onRedirect()
    {
    }



/ Einde Intermezzo



/s
LinkStudyPage(Component).urlFor(RequestListenerInterface) line: 3480	
		return getRequestCycle().urlFor(this, listener);
...
/s
WebRequestCycle(RequestCycle).urlFor(Component, RequestListenerInterface, ValueMap) line: 970	
/=
	/**
	 * Returns a URL that references a given interface on a component. When the URL is requested
	 * from the server at a later time, the interface will be called. A URL returned by this method
	 * will not be stable across sessions and cannot be bookmarked by a user.
	 *
	public final CharSequence urlFor(final Component component,
		final RequestListenerInterface listener, ValueMap params)

		if ((listener != IRedirectListener.INTERFACE) && component.isStateless() &&
			page.isBookmarkable() && page.getStatelessHint())
/ NEE
/ TODO
		else
		{
			page.setPageStateless(Boolean.FALSE);
			...
			// Get the listener interface name
			target = new ListenerInterfaceRequestTarget(page, component, listener);
/ page==component bij ons, omdat we de page willen, maar iha is component een component op de page	,
target	ListenerInterfaceRequestTarget  (id=190)	
	component	LinkStudyPage  (id=89)	
	listener	RequestListenerInterface  (id=172)	
	page	LinkStudyPage  (id=89)	
	requestParameters	null	

			CharSequence url = encodeUrlFor(target);
/s
WebRequestCycle(RequestCycle).encodeUrlFor(IRequestTarget) line: 811	
/=
	private final CharSequence encodeUrlFor(final IRequestTarget requestTarget)
		CharSequence url = getProcessor().getRequestCodingStrategy().encode(this, requestTarget);
/ Hier zijn we al in	,
/ Maar toen was argument requestTarget: Page (LinkStudyPage)	,
/ Nu: org.apache.wicket.request.target.component.listener.ListenerInterfaceRequestTarget@531428942[Page class = my.own.LinkStudyPage, id = 0, version = 0]->0->interface org.apache.wicket.IRedirectListener.IRedirectListener
...
/s
WebRequestCodingStrategy.encode(RequestCycle, IRequestTarget) line: 253	
		else if (requestTarget instanceof IListenerInterfaceRequestTarget)
/ JA
		{
			if (url == null)
			{
				url = encode(requestCycle, (IListenerInterfaceRequestTarget)requestTarget);
/s
WebRequestCodingStrategy.encode(RequestCycle, IListenerInterfaceRequestTarget) line: 968	

		// Start string buffer for url
		final AppendingStringBuffer url = new AppendingStringBuffer(64);
		url.append('?');
		url.append(INTERFACE_PARAMETER_NAME);
		url.append('=');
?wicket:interface=

		// Get component and page for request target
		final Component component = requestTarget.getTarget();
		final Page page = component.getPage();
component	LinkStudyPage  (id=75)	
page	LinkStudyPage  (id=75)	

		// Add pagemap
		final IPageMap pageMap = page.getPageMap();
		if (!pageMap.isDefault())
/ NEE

		url.append(Component.PATH_SEPARATOR);
?wicket:interface=:

		// Add path to component
		url.append(component.getPath());
/s
		for (Component c = this; c != null; c = c.getParent())
			buffer.prepend(c.getId());
/s
		return Integer.toString(numericId);
/t
/t
?wicket:interface=:0
		url.append(Component.PATH_SEPARATOR);
?wicket:interface=:0:

		// Add version
		final int versionNumber = component.getPage().getCurrentVersionNumber();
0
/ want	,
/s
/**
	 * @return The current version number of this page. If the page has been changed once, the
	 *         return value will be 1. If the page has not yet been revised, the version returned
	 *         will be 0, indicating that the page is still in its original state.
	 */
	public final int getCurrentVersionNumber()
	{
		return versionManager == null ? 0 : versionManager.getCurrentVersionNumber();
/ versionManager==null, dus returns 0	,
/t
		if (!rli.getRecordsPageVersion())
/ NEE
		else if (versionNumber > 0)
/ NEE

		url.append(Component.PATH_SEPARATOR);
?wicket:interface=:0::
		// Add listener interface
		final String listenerName = rli.getName();
IRedirectListener
		if (!IRedirectListener.INTERFACE.getName().equals(listenerName))
/ NEE

		url.append(Component.PATH_SEPARATOR);
?wicket:interface=:0:::
		// Add behaviourId
		RequestParameters params = requestTarget.getRequestParameters();
null
		if (params != null && params.getBehaviorId() != null)
/ NEE

		url.append(Component.PATH_SEPARATOR);
?wicket:interface=:0::::

		// Add URL depth
		if (params != null && params.getUrlDepth() != 0)
/ NEE

		if (IActivePageBehaviorListener.INTERFACE.getName().equals(listenerName))
/ NEE

		return url;
/t
WebRequestCodingStrategy.encode(RequestCycle, IRequestTarget) line: 298	
		else if (requestTarget instanceof IListenerInterfaceRequestTarget)
		{
			if (url == null)
			{
				url = encode(requestCycle, (IListenerInterfaceRequestTarget)requestTarget);
/d
?wicket:interface=:0::::

			else
			{
				...
/ TODO
				result = prepender.toString();
?wicket:interface=:0::::
			CharSequence encoded = requestCycle.getOriginalResponse().encodeURL(result);
/s
BufferedWebResponse(WebResponse).encodeURL(CharSequence) line: 138	
			if (url.length() > 0 && url.charAt(0) == '?')
			{
				// there is a bug in apache tomcat 5.5 where tomcat doesn't put sessionid to url
				// when the URL starts with '?'. So we prepend the URL with ./ and remove it
				// afterwards (unless some container prepends session id before './' or mangles
				// the URL otherwise

				String encoded = httpServletResponse.encodeURL("./" + url.toString());
./?wicket:interface=:0::::
				if (encoded.startsWith("./"))
				{
					return encoded.substring(2);
/t
WebRequestCodingStrategy.encode(RequestCycle, IRequestTarget) line: 388	
			CharSequence encoded = requestCycle.getOriginalResponse().encodeURL(result);
?wicket:interface=:0::::
/t
WebRequestCycle(RequestCycle).encodeUrlFor(IRequestTarget) line: 812	
		CharSequence url = getProcessor().getRequestCodingStrategy().encode(this, requestTarget);
?wicket:interface=:0::::
...
\t
LinkStudyPage.<init>() line: 43	
		CharSequence urlAsCharSequence =getRequestCycle().urlFor(this);
/d

/ 7	. 

/ we rm de b's
WebApplication.getRequestCycleProcessor


/ 7	. 

/ we click in de LinkStudyTargetPage op de link [Link Back To Target]	,

<a wicket:id="link" href="?wicket:interface=:1:link::ILinkListener::">[Link To Target]</a>

WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 319	
319:				boolean requestHandledByWicket = doGet(httpServletRequest, httpServletResponse);
/s
WicketFilter.doGet(HttpServletRequest, HttpServletResponse) line: 486	
					// Process request
485:				cycle.request();
...
/s
WebRequestCycle(RequestCycle).step() line: 1339	
				case RESOLVE_TARGET : {
					// resolve the target of the request using the request
					// parameters
					final IRequestTarget target = processor.resolve(this,
						request.getRequestParameters());
/s
ServletWebRequest(Request).getRequestParameters() line: 165	
			requestParameters = encoder.decode(this);
/s
WebRequestCodingStrategy.decode(Request) line: 210	
/=
	public RequestParameters decode(final Request request)
			addInterfaceParameters(request, parameters);
/s
WebRequestCodingStrategy.addInterfaceParameters(Request, RequestParameters) line: 618	
		...
		addInterfaceParameters(request.getParameter(INTERFACE_PARAMETER_NAME), parameters);
/ INTERFACE_PARAMETER_NAME="wicket:interface"
/s
		return httpServletRequest.getParameter(key);
/t
/s
WebRequestCodingStrategy.addInterfaceParameters(String, RequestParameters) line: 635	
/=
	public static void addInterfaceParameters(final String interfaceParameter,
		final RequestParameters parameters)
interfaceParameter	":1:link::ILinkListener::" (id=1739)	

		String[] pathComponents = Strings.split(interfaceParameter, Component.PATH_SEPARATOR);
[, 1, link, , ILinkListener, , ]

/ volgende	,
			versionNumberString = pathComponents[pathComponents.length - 4];
""
			final int versionNumber = Strings.isEmpty(versionNumberString) ? 0
				: Integer.parseInt(versionNumberString);
0
			parameters.setVersionNumber(versionNumber);

/ volgende	,
		// Set pagemap name
		final String pageMapName = pathComponents[0];
""
		parameters.setPageMapName(pageMapName.length() == 0 ? PageMap.DEFAULT_NAME : pageMapName);

/ volgende	,
		final String urlDepthString = pathComponents[pathComponents.length - 1];
""
			urlDepth = Strings.isEmpty(urlDepthString) ? -1 : Integer.parseInt(urlDepthString);
-1
		parameters.setUrlDepth(urlDepth);

/ volgende	,
		// Extract behavior ID after last colon
		final String behaviourId = pathComponents[pathComponents.length - 2];
""
		parameters.setBehaviorId(behaviourId.length() != 0 ? behaviourId : null);

/ volgende	,
		// Extract interface name after second-to-last colon
		final String interfaceName = pathComponents[pathComponents.length - 3];
"ILinkListener"
		parameters.setInterfaceName(interfaceName.length() != 0 ? interfaceName
			: IRedirectListener.INTERFACE.getName());

/ volgende	,
		// Component path is everything after pageMapName and before version
		final int start = pageMapName.length() + 1;
1
		final int end = interfaceParameter.length() - behaviourId.length() -
			interfaceName.length() - versionNumberString.length() - urlDepthString.length() - 4;
7
		final String componentPath = interfaceParameter.substring(start, end);
1:link

/ uiteindelijk	,
interfaceParameter	":1:link::ILinkListener::" (id=1739)	
parameters	RequestParameters  (id=128)	
	behaviorId	null	
	bookmarkablePageClass	null	
	componentId	null	
	componentPath	"1:link" (id=1797)	
	interfaceName	"ILinkListener" (id=1778)	
	onlyProcessIfPathActive	false	
	pageMapName	null	
	parameters	null	
	path	"" (id=141)	
	queryString	null	
	resourceKey	null	
	stateless	true	
	urlDepth	-1	
	versionNumber	0	

/t
WebRequestCodingStrategy.decode(Request) line: 211	
			addInterfaceParameters(request, parameters);
/d
/ paremeters hierboven	,

			addBookmarkablePageParameters(request, parameters);
/s
WebRequestCodingStrategy.addBookmarkablePageParameters(Request, RequestParameters) line: 583	
/=
	protected void addBookmarkablePageParameters(final Request request,
		final RequestParameters parameters)
		final String requestString = request.getParameter(WebRequestCodingStrategy.BOOKMARKABLE_PAGE_PARAMETER_NAME);
/ WebRequestCodingStrategy.BOOKMARKABLE_PAGE_PARAMETER_NAME="wicket:bookmarkablePage"
null
/returns	,
/t
			addBookmarkablePageParameters(request, parameters);
/d
			addResourceParameters(request, parameters);
/s
WebRequestCodingStrategy.addResourceParameters(Request, RequestParameters) line: 721	
/=
	protected void addResourceParameters(Request request, RequestParameters parameters)
		String pathInfo = request.getPath();
""
		if (pathInfo != null && pathInfo.startsWith(RESOURCES_PATH_PREFIX))
/ RESOURCES_PATH_PREFIX="resources/"
/ returns	,
/t
			addResourceParameters(request, parameters);
/d
			if (request.getParameter(IGNORE_IF_NOT_ACTIVE_PARAMETER_NAME) != null)
/ IGNORE_IF_NOT_ACTIVE_PARAMETER_NAME="wicket:ignoreIfNotActive"
/ NEE

			Map<String, String[]> map = request.getParameterMap();
{wicket:interface=[:1:link::ILinkListener::}
			while (iterator.hasNext())
			{
				String key = iterator.next();
				if (key.startsWith(NAME_SPACE))
/ NAME_SPACE="wicket:"
				{
					iterator.remove();
/ Dus map ={}

			parameters.setParameters(map);
{}
			parameters.setQueryString(request.getQueryString());
wicket:interface=:1:link::ILinkListener::
			return parameters;
/t
ServletWebRequest(Request).getRequestParameters() line: 191	
			requestParameters = encoder.decode(this);
this	ServletWebRequest  (id=92)	
	requestParameters	RequestParameters  (id=128)	
		behaviorId	null	
		bookmarkablePageClass	null	
		componentId	null	
		componentPath	"1:link" (id=1797)	
		interfaceName	"ILinkListener" (id=1778)	
		onlyProcessIfPathActive	false	
		pageMapName	null	
		parameters	HashMap<K,V>  (id=1821)	
		path	"" (id=141)	
		queryString	"wicket:interface=:1:link::ILinkListener::" (id=1853)	
		resourceKey	null	
		stateless	true	
		urlDepth	-1	
		versionNumber	0	
/t
WebRequestCycle(RequestCycle).step() line: 1339	
					final IRequestTarget target = processor.resolve(this,
						request.getRequestParameters());
/d
/s
WebRequestCycleProcessor.resolve(RequestCycle, RequestParameters) line: 69	
			if (requestParameters.getBookmarkablePageClass() != null)
/ NEE
			// See whether this request points to a rendered page
			else if (requestParameters.getComponentPath() != null)
/ JA
componentPath	"1:link" (id=1797)	
					try
					{
						target = resolveRenderedPage(requestCycle, requestParameters);
/s
WebRequestCycleProcessor(AbstractRequestCycleProcessor).resolveRenderedPage(RequestCycle, RequestParameters) line: 457	
		final String componentPath = requestParameters.getComponentPath();
"1:link"
		final Session session = requestCycle.getSession();
		final Page page = session.getPage(requestParameters.getPageMapName(), componentPath,
			requestParameters.getVersionNumber());
/s
WebSession(Session).getPage(String, String, int) line: 699	
/=
	public final Page getPage(final String pageMapName, final String componentPath,
pageMapName	null	
componentPath	"1:link" (id=1797)	
versionNumber	0	

		// Get page map by name, creating the default page map automatically
		IPageMap pageMap = pageMapForName(pageMapName, pageMapName == PageMap.DEFAULT_NAME);
pageMap	SecondLevelCacheSessionStore$SecondLevelCachePageMap  (id=153)	
	applicationKey	"wicket-testing" (id=162)	
	interceptContinuationURL	null	
	lastPage	LinkStudyTargetPage  (id=163)	
	metaData	null	
	name	null	
	pageId	0	
	sessionId	"D29E3A426868A5AE3581F50DB3E8CB67" (id=199)	

				PageMapsUsedInRequestEntry newEntry = new PageMapsUsedInRequestEntry();
				newEntry.thread = Thread.currentThread();
				newEntry.requestCycle = RequestCycle.get();
				pageMapsUsedInRequest.put(pageMap, newEntry);
				final String id = Strings.firstPathComponent(componentPath,
					Component.PATH_SEPARATOR);
"0"
				Page page = pageMap.get(Integer.parseInt(id), versionNumber);
/s
SecondLevelCacheSessionStore$SecondLevelCachePageMap.get(int, int) line: 287	

			IntHashMap<Page> pages = getUsedPages(getName());
this	SecondLevelCacheSessionStore$SecondLevelCachePageMap  (id=210)	
	applicationKey	"wicket-testing" (id=244)	
	interceptContinuationURL	null	
	lastPage	OnlyLinkStudyPage  (id=224)	
	metaData	null	
	name	null	
	pageId	0	
	sessionId	"977A396404B2A79FFBDF5B3A35B9FC8B" (id=248)	
/ dus	,
getName()=null
/s
SecondLevelCacheSessionStore.getUsedPages(String) line: 661	

		Map<String, IntHashMap<Page>> usedPages = RequestCycle.get().getMetaData(USED_PAGES);
usedPages	HashMap<K,V>  (id=295)	
	entrySet	HashMap$EntrySet  (id=297)	
	hashSeed	0	
	keySet	null	
	loadFactor	0.75	
	modCount	1	
	size	1	
	table	HashMap$Entry<K,V>[16]  (id=301)	
		[0]	HashMap$Entry<K,V>  (id=309)	
			hash	0	
			key	null	
			next	null	
			value	IntHashMap<V>  (id=258)	
				entrySet	null	
				keySet	null	
				loadFactor	0.75	
				modCount	1	
				size	1	
				table	IntHashMap$Entry<V>[16]  (id=262)	
					[0]	IntHashMap$Entry<V>  (id=268)	
						key	0	
						next	null	
						value	OnlyLinkStudyPage  (id=224)	
				threshold	12	
				values	null	
	threshold	12	
	values	null	

		IntHashMap<Page> intHashMap = usedPages.get(pageMapName);
		return intHashMap;
/t
SecondLevelCacheSessionStore$SecondLevelCachePageMap.get(int, int) line: 287	
			IntHashMap<Page> pages = getUsedPages(getName());
/d
			Page page = pages.get(id);
[Page class = my.own.OnlyLinkStudyPage, id = 0, version = 0]

/ PAGEMAP
/ we zien dat PageMap null RequestCycle queries	, misschien vandaar de name null	,
/ Wat is id , version	?
/ TODO




/ 7	. 

/ we zien een BookmarkablePageRequestTarget	, en een IListenerInterfaceRequestTarget
/ TODO

/ Nu een ... voor een component (een link), NIET voor een page	,

/ we komen in,	
	WebRequestCodingStrategy.encode(RequestCycle, IRequestTarget) line: 253	
	WebRequestCycle(RequestCycle).encodeUrlFor(IRequestTarget) line: 811	
	WebRequestCycle(RequestCycle).urlFor(Component, RequestListenerInterface, ValueMap) line: 972	
	WebRequestCycle(RequestCycle).urlFor(Component, RequestListenerInterface) line: 1005	
	LinkStudyPage$1(Component).urlFor(RequestListenerInterface) line: 3480	
	LinkStudyPage$1(Link<T>).getURL() line: 376	
		return urlFor(ILinkListener.INTERFACE);
	LinkStudyPage$1(Link<T>).onComponentTag(ComponentTag tag) line: 417	
tag==<a wicket:id="link0">
	LinkStudyPage$1(Component).renderComponent(MarkupStream) line: 2696	
	LinkStudyPage$1(MarkupContainer).onRender(MarkupStream) line: 1559	
	LinkStudyPage$1(Component).render(MarkupStream) line: 2525	
	LinkStudyPage(MarkupContainer).renderNext(MarkupStream) line: 1461	
	LinkStudyPage(MarkupContainer).renderAll(MarkupStream) line: 1575	
	LinkStudyPage(Page).onRender(MarkupStream) line: 1599	
	LinkStudyPage(Component).render(MarkupStream) line: 2525	
	LinkStudyPage(Page).renderPage() line: 933	
	BookmarkablePageRequestTarget.respond(RequestCycle) line: 261	
	WebRequestCycleProcessor(AbstractRequestCycleProcessor).respond(RequestCycle) line: 105	
	WebRequestCycle(RequestCycle).processEventsAndRespond() line: 1287	
		// generate a response
		processor.respond(this);
	WebRequestCycle(RequestCycle).step() line: 1358	
				case PROCESS_EVENTS : {
					processEventsAndRespond();
	WebRequestCycle(RequestCycle).steps() line: 1465	
	WebRequestCycle(RequestCycle).request() line: 545	
	WicketFilter.doGet(HttpServletRequest, HttpServletResponse) line: 486	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 319	

/s
WebRequestCodingStrategy.encode(RequestCycle, IListenerInterfaceRequestTarget) line: 968	
		// Add path to component
		url.append(component.getPath());
/ 0:link0	, want de component heeft id link0	, en z'n parent 0	, vandaar de name: getPath()	,

url==?wicket:interface=:0:link0::
		// Add listener interface
		final String listenerName = rli.getName();
		if (!IRedirectListener.INTERFACE.getName().equals(listenerName))
		{
			url.append(listenerName);
?wicket:interface=:0:link0::ILinkListener

/ 7	. 

/ we geven continue	,

Daemon Thread [http-bio-9090-exec-5] (Suspended (entry into method serializePage in AbstractPageStore))	
	SerializedPagesCache.storePage(String, Page, List<SerializedPage>) line: 138	

	DiskPageStore(AbstractPageStore).serializePage(Page) line: 185	
		serializedPagesCache.storePage(sessionId, page, pages);
	DiskPageStore.storePage(String, Page) line: 840	
		List<SerializedPage> pages = serializePage(page);
	SecondLevelCacheSessionStore$SecondLevelCachePageMap.put(Page) line: 332	
					getStore().storePage(sessionId, page);
	WebSession(Session).requestDetached() line: 1459	
					Page page = touchedPages.get(i);
					// page must be detached before it gets stored
					page.detach();
/ TODO
					page.getPageMap().put(page);
	WebRequestCycle(RequestCycle).detach() line: 1205	
	WebRequestCycle(RequestCycle).steps() line: 1491	
		finally
		{
			// clean up the request
			detach();
	WebRequestCycle(RequestCycle).request() line: 545	
	WicketFilter.doGet(HttpServletRequest, HttpServletResponse) line: 486	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 319	

/ 7	. 

/ wicket1.4	,

$ vi LinkStudyPage.java

		final Label textl=new Label("text");
		final Label counterl=new Label("counter");
/ al	,

		textl.setOutputMarkupId(true);
		counterl.setOutputMarkupId(true);
/ nieuw	, voor ajax	,
		
		AjaxLink<Void>ajaxLink=new AjaxLink<Void>("ajaxlink") {
			
			@Override
			public void onClick(AjaxRequestTarget target) {
				text="["+text+"]";
				counter+=13;
				target.addComponent(textl);
				target.addComponent(counterl);
				
			}
		};
/ nieuw	,

		Form<LinkStudyPage>form=new Form<LinkStudyPage>("form", model){
			@Override
			protected void onSubmit() {
				System.out.println(text);
			}
			
		};
		final TextField<String>textField=new TextField<String>("text");
		form.add(textField);
		final Button button=new Button("button");
/ nieuw	,		




$ vi LinkStudyPage.html

<a wicket:id="link">[Link To Target]</a>

<form wicket:id="form">	
	<input type="text" wicket:id="text">
	<input type="submit" wicket:id="button">
</form>

/ we zien in HTML	, als we 2 keer reload hebben gedaan	,

<a wicket:id="link0" href="?wicket:interface=:2:link0::ILinkListener::">[Link0]</a>
<a wicket:id="ajaxlink" 
id="ajaxlink1" 
href="#" 
onclick="var wcall=wicketAjaxGet('?wicket:interface=:2:ajaxlink::IBehaviorListener:0:',function() { }.bind(this),function() { }.bind(this), function() {return Wicket.$('ajaxlink1') != null;}.bind(this));return !wcall;">[Ajax Link]</a>
<span id="text2">[[[[[[]]]]]]</span>
<span id="counter3">78</span>

<form wicket:id="form" id="forme" method="post" action="?wicket:interface=:2:form::IFormSubmitListener::">
	<div style="width:0px;height:0px;position:absolute;left:-100px;top:-100px;overflow:hidden"><input type="hidden" name="forme_hf_0" id="forme_hf_0"></div>	
	<input type="text" wicket:id="text" value="" name="text">
	<input type="submit" wicket:id="button" name="button" id="buttonf">
</form>

/ In wicket 7 zien we ,


		<form wicket:id="form" id="form7" wicketpath="form" method="post" action="./?3-6.IFormSubmitListener-form"><div style="width:0px;height:0px;position:absolute;left:-100px;top:-100px;overflow:hidden"><input type="hidden" name="form7_hf_0" id="form7_hf_0"></div>	
			<input type="text" wicket:id="text" value="" name="text" wicketpath="form_text">
			<input type="submit" wicket:id="button" name="button" id="button8" wicketpath="form_button">
		</form>
		
		<a wicket:id="link" wicketpath="link" href="./?3-6.ILinkListener-link">[Link]</a>

/ we zien steeds ./?3-6	, 
/ de 3 loopt op als we 
/ TODO
/ MORGEN 




/ Einde DEBUG WICKET 1.4 LINKS


/ DEBUG WICKET 1.4 LINKS

/ WICKET GET PAGE WITH LINK

/ 7	.

/ we maken OnlyLinkStudyPage	,

/ we geven	,
http://localhost:9090/wicket-testing1.4/
/ hij gaat de home page resolve	,

/ we zien geen request parameters	,

/ stack trace	,
	WebRequestCycleProcessor(AbstractRequestCycleProcessor).resolveHomePageTarget(RequestCycle, RequestParameters) line: 326	
	WebRequestCycleProcessor.resolve(RequestCycle, RequestParameters) line: 175	
			if (requestParameters.getBookmarkablePageClass() != null)
/ NEE, er zijn geen request params	,
...
			else if (Strings.isEmpty(path) || ("/".equals(path)))
			{
				target = resolveHomePageTarget(requestCycle, requestParameters);

	WebRequestCycle(RequestCycle).step() line: 1339	
				case RESOLVE_TARGET : {
					// resolve the target of the request using the request
					// parameters
					final IRequestTarget target = processor.resolve(this,
						request.getRequestParameters());

	WebRequestCycle(RequestCycle).steps() line: 1465	
	WebRequestCycle(RequestCycle).request() line: 545	
	WicketFilter.doGet(HttpServletRequest, HttpServletResponse) line: 486	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 319	

/ we debug	,
WebRequestCycleProcessor(AbstractRequestCycleProcessor).resolveHomePageTarget(RequestCycle, RequestParameters) line: 333	
		Session session = requestCycle.getSession();
		Application application = session.getApplication();
			Class<? extends Page> homePageClass = application.getHomePage();
homePageClass	Class<T> (my.own.OnlyLinkStudyPage) (id=91)	
			BookmarkablePageRequestTarget homepageTarget = new BookmarkablePageRequestTarget( homePageClass, parameters);
/ TODO
...
			return homepageTarget;
/t
WebRequestCycle(RequestCycle).step() line: 1354	
				case RESOLVE_TARGET : {
					// resolve the target of the request using the request
					// parameters
					final IRequestTarget target = processor.resolve(this,
						request.getRequestParameters());
/d
/c
				case PROCESS_EVENTS : {
					processEventsAndRespond();
/s
WebRequestCycle(RequestCycle).processEventsAndRespond() line: 1279	

/ Intermezzo

		processor.processEvents(this);
/ create Page	,

		currentStep = RESPOND;

		processor.respond(this);
/ create resulting HTML	, 
/ dus render	,


/ Einde Intermezzo
		processor.processEvents(this);
/s
WebRequestCycleProcessor(AbstractRequestCycleProcessor).processEvents(RequestCycle) line: 94	
			((IEventProcessor)target).processEvents(requestCycle);
/ creates target.page met new	,
/s
BookmarkablePageRequestTarget.processEvents(RequestCycle) line: 232	
			page = getPage(requestCycle);
/s
BookmarkablePageRequestTarget.getPage
			page = newPage(getPageClass(), requestCycle);
/ doet new my.own.OnlyLinkStudyPage
/t
WebRequestCycle(RequestCycle).processEventsAndRespond() line: 1287	
		// let the processor handle/ issue any events, including building the component hierarchy
		processor.processEvents(this);
/d
		// set current stage manually this time
		currentStep = RESPOND;
		// generate a response
		processor.respond(this);
/s
WebRequestCycleProcessor(AbstractRequestCycleProcessor).respond(RequestCycle) line: 105	
			requestTarget.respond(requestCycle);
/s
BookmarkablePageRequestTarget.respond(RequestCycle) line: 261	
			if (requestCycle.isRedirect())
/ NEE
			else
			{
				// Let the page render itself
				getPage(requestCycle).renderPage();
/s
OnlyLinkStudyPage(Page).renderPage() line: 889	
		// Set form component values from cookies
		setFormComponentValuesFromCookies();
/ TODO
			prepareForRender();
...
/s
OnlyLinkStudyPage(Component).prepareForRender(boolean) line: 2297	
		beforeRender();
/s
OnlyLinkStudyPage(Component).beforeRender() line: 1103	
			internalBeforeRender();
/s
OnlyLinkStudyPage(Component).internalBeforeRender() line: 1069	
...
			onBeforeRender();

/ Intermezzo

/ sets WebSession in http session	, en een page map	, 
/  onBeforeRender gaat	,

httpSession.attributes= {
wicket:wicket-testing:session=org.apache.wicket.protocol.http.WebSession@79a2a5ae, 
Wicket:SessionUnbindingListener-wicket-testing=org.apache.wicket.protocol.http.AbstractHttpSessionStore$SessionBindingListener@22e32197, 
wicket:wicket-testing:m:null=[PageMap name=null]}
}

/ TODO

/ Einde Intermezzo

/s
OnlyLinkStudyPage(Page).onBeforeRender() line: 1561	
...
			getSession().bind();
/s
WebSession(Session).bind() line: 423	
		if (store.lookup(request) == null)
/ JA
		{
			// explicitly create a session
			id = store.getSessionId(request, true);
016F4C8E732CF197BC7F96B3262A93D3
/s
		WebRequest webRequest = toWebRequest(request);
/ webRequest==request=wicket's ServletWebRequest	,
		HttpSession httpSession = webRequest.getHttpServletRequest().getSession(false);
request	ServletWebRequest  (id=13693)	
	httpServletRequest	RequestFacade  (id=12148)	/=org.apache.catalina.connector.RequestFacade@5906346d
		request	Request  (id=14282)	
			session	StandardSession  (id=14253)	
				sessionContext	null	
				accessCount	null	
				attributes	ConcurrentHashMap<K,V>  (id=14277)	
				authType	null	
				creationTime	1446379597718	
				expiring	false	
				facade	StandardSessionFacade  (id=13753)	
				id	"016F4C8E732CF197BC7F96B3262A93D3" (id=14269)	
				isNew	true	
				isValid	true	
				lastAccessedTime	1446379597718	
				listeners	ArrayList<E>  (id=14278)	
				manager	StandardManager  (id=14279)	
				maxInactiveInterval	1800	
				notes	Hashtable<K,V>  (id=14371)	
				principal	null	
				support	PropertyChangeSupport  (id=14372)	
				thisAccessedTime	1446379597728	

			// bind it
			store.bind(request, this);
/s
SecondLevelCacheSessionStore(AbstractHttpSessionStore).bind(Request, Session) line: 148	
		WebRequest webRequest = toWebRequest(request);
		HttpSession httpSession = getHttpSession(webRequest, true);
/=
		return request.getHttpServletRequest().getSession(create);
httpSession	StandardSessionFacade  (id=13753)	
	session	StandardSession  (id=14253)				/= org.apache.catalina.session.StandardSession	
		sessionContext	null	
		accessCount	null	
		attributes	ConcurrentHashMap<K,V>  (id=14277)	
		authType	null	
		creationTime	1446379597718	
		expiring	false	
		facade	StandardSessionFacade  (id=13753)	
		id	"016F4C8E732CF197BC7F96B3262A93D3" (id=14269)	
		isNew	true	
		isValid	true	
		lastAccessedTime	1446379597718	
		listeners	ArrayList<E>  (id=14278)	
		manager	StandardManager  (id=14279)	
		maxInactiveInterval	1800	
		notes	Hashtable<K,V>  (id=14371)	
		principal	null	
		support	PropertyChangeSupport  (id=14372)	
		thisAccessedTime	1446379597728	

		// register an unbinding listener for cleaning up
		String applicationKey = application.getApplicationKey();
		httpSession.setAttribute("Wicket:SessionUnbindingListener-" + applicationKey, new SessionBindingListener(applicationKey, httpSession.getId()));
/ TODO (writes in catalina's StandardSession	, 

		// register the session object itself
		setAttribute(webRequest, Session.SESSION_ATTRIBUTE_NAME, newSession);
/s
SecondLevelCacheSessionStore(HttpSessionStore).setAttribute(Request, String, Object) line: 158	
/=
	public void setAttribute(Request request, String name, Object value)
request	ServletWebRequest  (id=13693)	
name	"session" (id=14258)	
value	WebSession  (id=13748)	
/ WebSession heeft nu eig. alleen  de session id van de catalina's session	, 
/ TODO
		WebRequest webRequest = toWebRequest(request);
		HttpSession httpSession = getHttpSession(webRequest);
/=catalina's session	,
			String attributeName = getSessionAttributePrefix(webRequest) + name;
wicket:wicket-testing:session
			httpSession.setAttribute(attributeName, value);
//////////////////////
/ we set in catalina's web session de wicket's WebSession	,

/ Intermezzo

/ we hebben nu	,
httpSession.attributes= {
wicket:wicket-testing:session=org.apache.wicket.protocol.http.WebSession@79a2a5ae, 
Wicket:SessionUnbindingListener-wicket-testing=org.apache.wicket.protocol.http.AbstractHttpSessionStore$SessionBindingListener@22e32197
}
/ Einde Intermezzo

/t
WebSession(Session).bind() line: 429	
			store.bind(request, this);
/d
				for (Entry<String, Object> entry : temporarySessionAttributes.entrySet())
				{
					store.setAttribute(request, String.valueOf(entry.getKey()), entry.getValue());
/ entry.getKey()=m:null
/ entry.getValue=SecondLevelCacheSessionStore$SecondLevelCachePageMap  (id=14435)	
[PageMap name=null]

/ Intermezzo

/ we hebben nu	,
httpSession.attributes= {
wicket:wicket-testing:session=org.apache.wicket.protocol.http.WebSession@79a2a5ae, 
Wicket:SessionUnbindingListener-wicket-testing=org.apache.wicket.protocol.http.AbstractHttpSessionStore$SessionBindingListener@22e32197, 
wicket:wicket-testing:m:null=[PageMap name=null]}
}
/ Einde Intermezzo

/t
OnlyLinkStudyPage(Component).internalBeforeRender() line: 1070	
			onBeforeRender();
/d
/t
OnlyLinkStudyPage(Component).prepareForRender(boolean) line: 2299	
		beforeRender();
/d
/t
OnlyLinkStudyPage(Page).renderPage() line: 927	
			prepareForRender();
/d
			render(null);
/s
OnlyLinkStudyPage(Component).render(MarkupStream) line: 2488	
/=
	public final void render(final MarkupStream markupStream)
markupStream=null
				onRender(markupStream);
/s
OnlyLinkStudyPage(Page).onRender(MarkupStream) line: 1592	
/=
	protected void onRender(final MarkupStream markupStream)
markupStream=null
		// Set page's associated markup stream
		final MarkupStream associatedMarkupStream = getAssociatedMarkupStream(true);
/s
OnlyLinkStudyPage(MarkupContainer).getAssociatedMarkupStream(boolean) line: 371	
			return getApplication().getMarkupSettings()
				.getMarkupCache()
				.getMarkupStream(this, false, throwException);
/s
MarkupCache.getMarkupStream(MarkupContainer, boolean, boolean) line: 216	
		// Look for associated markup
		final Markup markup = getMarkup(container, container.getClass(), enforceReload);
container	OnlyLinkStudyPage  (id=305)	
/s
MarkupCache.getMarkup(MarkupContainer, Class<?>, boolean) line: 295	

		// Get the cache key to be associated with the markup resource stream
		final String cacheKey = getMarkupCacheKeyProvider(container).getCacheKey(container, containerClass);
cacheKey	"my.own.OnlyLinkStudyPageen_US.html" (id=1958)	
/ class name + locale en_US	+ .html

		// Is the markup already in the cache?
		Markup markup = (enforceReload == false ? getMarkupFromCache(cacheKey, container) : null);
/s
MarkupCache.getMarkupFromCache(CharSequence, MarkupContainer) line: 433	
			String locationString = (String)markupKeyCache.get(cacheKey);
locationString	"file:/home/eric/Devel/Java/Tomcat/apache-tomcat-7.0.57/webapps/wicket-testing1.4/WEB-INF/classes/my/own/OnlyLinkStudyPage.html" (id=1959)	
				return markupCache.get(locationString);
/t
MarkupCache.getMarkup(MarkupContainer, Class<?>, boolean) line: 296	
		Markup markup = (enforceReload == false ? getMarkupFromCache(cacheKey, container) : null);
/d
markup	Markup  (id=338)	

file:/home/eric/Devel/Java/Tomcat/apache-tomcat-7.0.57/webapps/wicket-testing1.4/WEB-INF/classes/my/own/OnlyLinkStudyPage.html
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
<a wicket:id="link">[Link0]</a>
<span wicket:id="text"></span>
<span wicket:id="counter"></span>
</body>
</html>

markup	Markup  (id=338)	
	componentMap	HashMap<K,V>  (id=1968)	
		size	3	
		table	HashMap$Entry<K,V>[16]  (id=1979)	
			[2]	HashMap$Entry<K,V>  (id=1982)	
				hash	3493538	
				key	"text" (id=1985)	
				next	null	
				value	Integer  (id=1986)	
			[7]	HashMap$Entry<K,V>  (id=1983)	
				hash	989307623	
				key	"counter" (id=1990)	
				value	Integer  (id=1992)	
				next	HashMap$Entry<K,V>  (id=1991)	
					hash	3269447	
					key	"link" (id=1994)	
					next	null	
					value	Integer  (id=1996)	
		threshold	12	
		values	null	
	currentPath	null	
	markupElements	Collections$UnmodifiableRandomAccessList<E>  (id=1969)	
		c	ArrayList<E>  (id=2001)	
			elementData	Object[15]  (id=2005)	
				[0]	RawMarkup  (id=332)	
				[1]	ComponentTag  (id=2008)	
				[2]	RawMarkup  (id=2009)	
				[3]	ComponentTag  (id=2010)	
				[4]	RawMarkup  (id=2012)	
				[5]	ComponentTag  (id=2013)	
					autoComponent	false	
					autolink	false	
					behaviors	null	
					closes	null	
					hasNoCloseTag	false	
					id	"link" (id=1994)	
					ignore	false	
					markupClassRef	null	
					modified	false	
					path	null	
					userData	null	
					xmlTag	XmlTag  (id=2095)	
						attributes	TagAttributes  (id=2113)	
							accessOrder	false	
							entrySet	HashMap$EntrySet  (id=2122)	
							hashSeed	0	
							header	LinkedHashMap$Entry<K,V>  (id=2123)	
							immutable	true	
							keySet	HashMap$KeySet  (id=2124)	
							loadFactor	0.75	
							modCount	1	
							size	1	
							table	HashMap$Entry<K,V>[16]  (id=2129)	
							threshold	12	
							values	null	
						closes	null	
						columnNumber	1	
						copyOf	XmlTag  (id=2095)	
						isMutable	false	
						length	20	
						lineNumber	8	
						name	"a" (id=2116)	
						nameChanged	false	
						namespace	null	
						pos	101	
						text	null	
						type	XmlTag$Type  (id=2037)
							locale	Locale  (id=2039)	
							text	"OPEN" (id=2040)	
				[6]	RawMarkup  (id=2014)	
				[7]	ComponentTag  (id=2015)	
				[8]	RawMarkup  (id=2016)	
				[9]	ComponentTag  (id=2018)	
				[10]	ComponentTag  (id=2049)	
				[11]	RawMarkup  (id=2051)	
				[12]	ComponentTag  (id=2052)	
					autoComponent	false	
					autolink	false	
					behaviors	null	
					closes	null	
					hasNoCloseTag	false	
					id	"counter" (id=1990)	
					ignore	false	
					markupClassRef	null	
					modified	false	
					path	null	
					userData	null	
					xmlTag	XmlTag  (id=2061)	
						attributes	TagAttributes  (id=2063)	
							accessOrder	false	
							entrySet	HashMap$EntrySet  (id=2073)	
								this$0	TagAttributes  (id=2063)	
									accessOrder	false	
									entrySet	HashMap$EntrySet  (id=2073)	
									hashSeed	0	
									header	LinkedHashMap$Entry<K,V>  (id=2074)	
									immutable	true	
									keySet	HashMap$KeySet  (id=2075)	
									loadFactor	0.75	
									modCount	1	
									size	1	
									table	HashMap$Entry<K,V>[16]  (id=2077)	
									threshold	12	
									values	null	
							hashSeed	0	
							header	LinkedHashMap$Entry<K,V>  (id=2074)	
							immutable	true	
							keySet	HashMap$KeySet  (id=2075)	
							loadFactor	0.75	
							modCount	1	
							size	1	
							table	HashMap$Entry<K,V>[16]  (id=2077)	
							threshold	12	
							values	null	
						closes	null	
						columnNumber	1	
						copyOf	XmlTag  (id=2061)	
						isMutable	false	
						length	26	
						lineNumber	10	
						name	"span" (id=2065)	
						nameChanged	false	
						namespace	null	
						pos	164	
						text	null	
						type	XmlTag$Type  (id=2037)	
							locale	Locale  (id=2039)	
							text	"OPEN" (id=2040)	
				[13]	ComponentTag  (id=2053)	
				[14]	RawMarkup  (id=2054)	
					string	"\n\n</body>\n</html>" (id=2056)	
			modCount	15	
			size	15	
		list	ArrayList<E>  (id=2001)	
	markupResourceData	MarkupResourceData  (id=1974)	

		return markup;
/t
MarkupCache.getMarkupStream(MarkupContainer, boolean, boolean) line: 221	
		final Markup markup = getMarkup(container, container.getClass(), enforceReload);
/d
			return new MarkupStream(markup);
/t
	public MarkupStream getAssociatedMarkupStream(final boolean throwException)
			return getApplication().getMarkupSettings()
				.getMarkupCache()
				.getMarkupStream(this, false, throwException);
/d
/t
OnlyLinkStudyPage(Page).onRender(MarkupStream) line: 1593	
		final MarkupStream associatedMarkupStream = getAssociatedMarkupStream(true);
/d
		// Configure response object with locale and content type
		configureResponse();
/ TODO
		// Render markup
		renderAll(associatedMarkupStream);
/s
OnlyLinkStudyPage(MarkupContainer).renderAll(MarkupStream) line: 1575	
		while (markupStream.hasMore())
		{
			// Element rendering is responsible for advancing markup stream!
			final int index = markupStream.getCurrentIndex();
0
1
...
			renderNext(markupStream);
/s
OnlyLinkStudyPage(MarkupContainer).renderNext(MarkupStream) line: 1444	
this	OnlyLinkStudyPage  (id=155)	
[Page class = my.own.OnlyLinkStudyPage, id = 1, version = 0]
/ Dit is de container	, de page is de container	,
		final MarkupElement element = markupStream.get();
RawMarkup <!doctype><html>
/ of 	,
/ nu	,
ComponentTag <head>
			// Get component id
			final String id = tag.getId();
"_header_"
			// Get the component for the id from the given container
			final Component component = get(id);
/ de page is de container, de container is this	, er staat this.get	,
...
/s
OnlyLinkStudyPage(MarkupContainer).children_get(String) line: 1176	
		else
		{
			if (this.children instanceof ChildList)
			{
				children = ((ChildList)this.children).childs;
this	OnlyLinkStudyPage  (id=155)	
	children	MarkupContainer$ChildList  (id=190)	
		childs	Object[3]  (id=206)	
			[0]	OnlyLinkStudyPage$1  (id=209)	
[MarkupContainer [Component id = link]]
			[1]	Label  (id=210)	
[Component id = text]
			[2]	Label  (id=211)	
[Component id = counter]
		size	3	
				size = ((ChildList)this.children).size;

			for (int i = 0; i < size; i++)
			{
				if (getId(children[i]).equals(id))
/ NEE

		return component;
null
/t
OnlyLinkStudyPage(MarkupContainer).renderNext(MarkupStream) line: 1459	
			// Get the component for the id from the given container
			final Component component = get(id);
null
			else
			{
				if (ComponentResolvers.resolve(getApplication(), this, markupStream, tag))
/s
ComponentResolvers.resolve(Application, MarkupContainer, MarkupStream, ComponentTag) line: 81	
		Iterator<IComponentResolver> resolvers = application.getPageSettings()
			.getComponentResolvers()
			.iterator();
resolvers	ArrayList$Itr  (id=267)	
	this$0	ArrayList<E>  (id=281)	
		elementData	Object[15]  (id=285)	
			[0]	ParentResolver  (id=270)	
			[1]	AutoComponentResolver  (id=274)	
			[2]	MarkupInheritanceResolver  (id=276)	
			[3]	HtmlHeaderResolver  (id=278)	
			[4]	WicketLinkResolver  (id=289)	
			[5]	WicketMessageResolver  (id=292)	
			[6]	WicketMessageTagHandler  (id=295)	
			[7]	FragmentResolver  (id=296)	
			[8]	RelativePathPrefixHandler  (id=302)	
			[9]	EnclosureResolver  (id=305)	
			[10]	WicketContainerResolver  (id=308)	
			[11]	BorderBodyResolver  (id=309)	
			[12]	AutoLinkResolver  (id=313)	
			[13]	AutoLabelResolver  (id=316)	
			[14]	AutoLabelTextResolver  (id=317)	
		size	15	
		while (resolvers.hasNext())
		{
			IComponentResolver resolver = resolvers.next();
resolver	HtmlHeaderResolver  (id=278)	
			if (resolver.resolve(container, markupStream, tag))
/s
HtmlHeaderResolver.resolve(MarkupContainer, MarkupStream, ComponentTag) line: 74	
		// Only <head> component tags have the id == "_header"
		if (tag.getId().equals(HtmlHeaderSectionHandler.HEADER_ID))
tag	ComponentTag  (id=163)	
	autoComponent	true	
	autolink	false	
	behaviors	null	
	closes	null	
	hasNoCloseTag	false	
	id	"_header_" (id=170)	
	ignore	false	
	markupClassRef	null	
	modified	true	
	path	null	
	userData	null	
	xmlTag	XmlTag  (id=353)	
/ Wanneer worden ComponentTag's create?
/ TODO

			// Create a special header component which will gather additional
			// input the <head> from 'contributors'.
			final WebMarkupContainer header = newHtmlHeaderContainer(HtmlHeaderSectionHandler.HEADER_ID +
				container.getPage().getAutoIndex());
/s
HtmlHeaderResolver.newHtmlHeaderContainer(String) line: 178	
/=
	protected HtmlHeaderContainer newHtmlHeaderContainer(String id)
id	"_header_0" (id=385)	
	{
		return new HtmlHeaderContainer(id);
/ TODO
/t
HtmlHeaderResolver.resolve(MarkupContainer, MarkupStream, ComponentTag) line: 80	
			final WebMarkupContainer header = newHtmlHeaderContainer(HtmlHeaderSectionHandler.HEADER_ID +
				container.getPage().getAutoIndex());
/d
			container.autoAdd(header, markupStream);
/s
OnlyLinkStudyPage(MarkupContainer).add(Component...) line: 142	
/=
	public final MarkupContainer add(final Component... childs)
childs	Component[1]  (id=415)	
[[MarkupContainer [Component id = _header_0]]]
/ array van 1 elem	,
			// Add to map
			addedComponent(child);
child	HtmlHeaderContainer  (id=387)	
	id	"_header_0" (id=385)	
/s
OnlyLinkStudyPage(MarkupContainer).addedComponent(Component) line: 984	
		component.setParent(this);
this	OnlyLinkStudyPage  (id=155)	
			page.componentAdded(component);
/ TODO
			component.initialize();
/ TODO
/t
	public final MarkupContainer add(final Component... childs)
			// Add to map
			addedComponent(child);
/d
			if (put(child) != null)
/t
OnlyLinkStudyPage(MarkupContainer).autoAdd(Component, MarkupStream) line: 219	
		add(component);
this	OnlyLinkStudyPage  (id=155)	
	children	MarkupContainer$ChildList  (id=190)	
		childs	Object[6]  (id=484)	
			[0]	OnlyLinkStudyPage$1  (id=209)	
			[1]	Label  (id=210)	
			[2]	Label  (id=211)	
			[3]	HtmlHeaderContainer  (id=387)	
		size	4	
/ we zien de HtmlHeaderContainer erbij	,
		component.prepareForRender();
/ TODO
			else
			{
				component.render(markupStream);
/s
HtmlHeaderContainer(Component).render(MarkupStream) line: 2525	
				onRender(markupStream);
...
/s
HtmlHeaderContainer(Component).renderComponent(MarkupStream) line: 2696	
				// Render the body
				onComponentTagBody(markupStream, tag);
/ TODO
/c
/t
OnlyLinkStudyPage(MarkupContainer).renderAll(MarkupStream) line: 1575	

/ volgende	,
		while (markupStream.hasMore())
		{
			// Element rendering is responsible for advancing markup stream!
			final int index = markupStream.getCurrentIndex();
4
			renderNext(markupStream);
/s
OnlyLinkStudyPage(MarkupContainer).renderNext(MarkupStream) line: 1447	
		final MarkupElement element = markupStream.get();
element	RawMarkup  (id=409)	
<body>
			getResponse().write(element.toCharSequence());

/t
OnlyLinkStudyPage(MarkupContainer).renderAll(MarkupStream) line: 1575	

/ volgende	,
		while (markupStream.hasMore())
		{
			// Element rendering is responsible for advancing markup stream!
			final int index = markupStream.getCurrentIndex();
5
			renderNext(markupStream);
/s
OnlyLinkStudyPage(MarkupContainer).renderNext(MarkupStream) line: 1447	
		final MarkupElement element = markupStream.get();
element	ComponentTag  (id=410)	
<a wicket:id="link">
			// Get element as tag
			final ComponentTag tag = (ComponentTag)element;

			// Get component id
			final String id = tag.getId();
"link"
			// Get the component for the id from the given container
			final Component component = get(id);
component	OnlyLinkStudyPage$1  (id=209)	

				component.render(markupStream);
/s
				onRender(markupStream);
/s
OnlyLinkStudyPage$1(Component).renderComponent(MarkupStream) line: 2689	
this	OnlyLinkStudyPage$1  (id=209)	
markupStream	MarkupStream  (id=161)	
openTag	ComponentTag  (id=410)	
/ Let op: this=[MarkupContainer [Component id = link]]	, en er is de tag	,
		// Call any tag handler
		onComponentTag(tag);
/s
OnlyLinkStudyPage$1(Link<T>).onComponentTag(ComponentTag) line: 417	
		else
		{
			// Set href to link to this link's linkClicked method
			CharSequence url = getURL();
/s
		return urlFor(ILinkListener.INTERFACE);
/s
[RequestListenerInterface name=ILinkListener, method=public abstract void org.apache.wicket.markup.html.link.ILinkListener.onLinkClicked()]

/ Intermezzo

/ ILINKLISTENER IFORMSUBMITLISTENER REQUESTLISTENERINTERFACE

/ See INVOKE REQUESTLISTENERINTERFACE METHOD ON LINK

/ See SAMENVATTING URL

/ RequestListenerInterface heeft table van ILinkListener.class:Method ILinkListener.onLinkClicked 	, IFormSubmitListener.onForm...	, iedere entry is created met call RequestListenerInterface(ILinkListener.class), RequestListenerInterface(IFormSubmitListener.class)	,...


/ RequestListenerInterface is een class	,  maar toch heet hij Interface	, dit klopt wel	, die rol speelt hij	,
/ Een ILinkListener, een IFormSubmitListener heeft een INTERFACE, dit is een RequestListenerInterface 	, 
/ Een RequestListenerInterface heeft een Method	, bijv 
/s
RequestListenerInterface.invoke(Page, Component) line: 182	
this	RequestListenerInterface  (id=395)	
	method	Method  (id=399)	
public abstract void org.apache.wicket.markup.html.link.ILinkListener.onLinkClicked()
	name	"ILinkListener" (id=400)	
	recordsPageVersion	true	

/ we zijn in .invoke	, inderdaad	, 
		try
		{
			// Invoke the interface method on the component
			method.invoke(component, new Object[] { });
component	OnlyLinkStudyPage$1  (id=404)	
[MarkupContainer [Component id = link]]
/s
OnlyLinkStudyPage$1(Link<T>).onLinkClicked() line: 225	
		onClick();
/s
OnlyLinkStudyPage$1.onClick() line: 31	
		Link<String>link=new Link<String>("link") {
			@Override
			public void onClick() {
->				text="["+text+"]";
				counter+=13;

 




$ vi ILinkListener.java

public interface ILinkListener extends IRequestListener

{
	/** Listener interface */
	public static final RequestListenerInterface INTERFACE = new RequestListenerInterface(
		ILinkListener.class);

	/**
	 * Called when a link is clicked.
	 */
	void onLinkClicked();
}
$ vi IFormSubmitListener.java

public interface IFormSubmitListener extends IRequestListener
{
	/** Listener interface */
	public static final RequestListenerInterface INTERFACE = new RequestListenerInterface(
		IFormSubmitListener.class);

	/**
	 * Called when a form is submitted
	 */
	void onFormSubmitted();
}

$ vi RequestListenerInterface.java

public class RequestListenerInterface
	public RequestListenerInterface(final Class<? extends IRequestListener> listenerInterfaceClass, boolean recordsPageVersion) {
		final Method[] methods = listenerInterfaceClass.getMethods();
		method = methods[0];
	}
	public final void invoke(final Page page, final Component component)
			method.invoke(component, new Object[] { });

/ Dus er wordt een RequestListenerInterface create	, met een Method inst	, een public abstract void org.apache.wicket.markup.html.link.ILinkListener.onLinkClicked()	, of een IFormSubmitListener.onFormSubmitted	, 
/ en bij invoke moet de juiste component worden gegeven	, waarop de method wordt called	, 

/ Einde Intermezzo

/ we waren in	,
OnlyLinkStudyPage$1(Link<T>).getURL() line: 376	
		return urlFor(ILinkListener.INTERFACE);
/s
	public final CharSequence urlFor(final RequestListenerInterface listener)
listener	RequestListenerInterface  (id=568)	
	method	Method  (id=571)	public abstract void org.apache.wicket.markup.html.link.ILinkListener.onLinkClicked()
	name	"ILinkListener" (id=572)	

		return getRequestCycle().urlFor(this, listener);
...
/s
WebRequestCycle(RequestCycle).urlFor(Component, RequestListenerInterface, ValueMap) line: 923	
/=
	public final CharSequence urlFor(final Component component, final RequestListenerInterface listener, ValueMap params)
component	OnlyLinkStudyPage$1  (id=209)	
listener	RequestListenerInterface  (id=568)	
		if ((listener != IRedirectListener.INTERFACE) && component.isStateless() &&
			page.isBookmarkable() && page.getStatelessHint())
/ NEE
/ TODO STATELESS BOOKMARKABLE
		else
		{
			page.setPageStateless(Boolean.FALSE);

			// Get the listener interface name
			target = new ListenerInterfaceRequestTarget(page, component, listener);
			CharSequence url = encodeUrlFor(target);
/s
		CharSequence url = getProcessor().getRequestCodingStrategy().encode(this, requestTarget);
/s
WebRequestCodingStrategy.encode(RequestCycle, IRequestTarget) line: 253	
		else if (requestTarget instanceof IListenerInterfaceRequestTarget)
		{
				url = encode(requestCycle, (IListenerInterfaceRequestTarget)requestTarget);
/s
WebRequestCodingStrategy.encode(RequestCycle, IListenerInterfaceRequestTarget) line: 968	

/ WICKET INTERFACE 
/ pagemap:componentpath:versionnumber:listener:behaviorid:urldepth(TODO)
/ componentpath is samengesteld	, dus heeft een :	,  = pageid:component	, bijv 3:link

/ bij ons	,
?wicket:interface=:1:link::ILinkListener::
/t
WebRequestCodingStrategy.encode(RequestCycle, IRequestTarget) line: 372	
				url = encode(requestCycle, (IListenerInterfaceRequestTarget)requestTarget);
/d
		if (url != null)
		{
			...
			return encoded;
?wicket:interface=:1:link::ILinkListener::
/t
OnlyLinkStudyPage$1(Link<T>).getURL() line: 376	
		return urlFor(ILinkListener.INTERFACE);
/d
/t
OnlyLinkStudyPage$1(Link<T>).onComponentTag(ComponentTag) line: 420	
			CharSequence url = getURL();
/d
			// append any anchor
			url = appendAnchor(tag, url);
/ NIETS
this	OnlyLinkStudyPage$1  (id=168)	[MarkupContainer [Component id = link]]
tag	ComponentTag  (id=172)	<a wicket:id="link">
url	StringBuilder  (id=258)	?wicket:interface=:1:link::ILinkListener::

				// generate the href attribute
				tag.put("href", Strings.replaceAll(url, "&", "&amp;"));
/ tag= <a wicket:id="link" href="?wicket:interface=:1:link::ILinkListener::">
/ want	,
/s
		xmlTag.put(key, value);
/s
		return getAttributes().put(key, value);

/t
OnlyLinkStudyPage$1(Component).renderComponent(MarkupStream) line: 2714	
		onComponentTag(tag);
/d
				renderComponentTag(tag);
/s
OnlyLinkStudyPage$1(Component).renderComponentTag(ComponentTag) line: 4294	
this	ComponentTag  (id=172)	

		if (!(tag instanceof WicketTag) || !stripWicketTags)
		{
			// Apply behavior modifiers
			List<IBehavior> behaviors = getBehaviors();
behaviors	Collections$UnmodifiableRandomAccessList<E>  (id=318)	
[]
			// Write the tag
			tag.writeOutput(getResponse(), stripWicketTags, findMarkupStream().getWicketNamespace());
/s
ComponentTag.writeOutput(Response, boolean, String) line: 672	
/ response	BufferedWebResponse  (id=119)	
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
		response.write("<");
<
		response.write(getName());
a
			final Iterator<String> iterator = getAttributes().keySet().iterator();
getAttributes()= this(ComponentTag).xmlTag.attributes= wicket:id = "link" href = "?wicket:interface=:1:link::ILinkListener::"

/ response=
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
<a wicket:id
					CharSequence value = getString(key);
"link"
						response.write("=\"");
						value = Strings.replaceAll(value, "\"", "&#34;");
						response.write(value);
						response.write("\"");

		response.write(">");
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
<a wicket:id="link" href="?wicket:interface=:1:link::ILinkListener::">
/t
OnlyLinkStudyPage$1(Component).renderComponent(MarkupStream) line: 2725	
				renderComponentTag(tag);
/d
			if (tag.isOpen())
			{
				// Render the body
				onComponentTagBody(markupStream, tag);
/s
OnlyLinkStudyPage$1(AbstractLink).onComponentTagBody(MarkupStream, ComponentTag) line: 166	
		renderComponentTagBody(markupStream, openTag);
/s
OnlyLinkStudyPage$1(MarkupContainer).renderComponentTagBody(MarkupStream, ComponentTag) line: 1624	
/ herinner	,
this	OnlyLinkStudyPage$1  (id=168)	
markupStream	MarkupStream  (id=161)	
	current	RawMarkup  (id=403)	
	currentIndex	6	
	markup	Markup  (id=410)	
		componentMap	HashMap<K,V>  (id=417)	
			size	3	
			table	HashMap$Entry<K,V>[16]  (id=465)	
				[2]	HashMap$Entry<K,V>  (id=469)	
					hash	3493538	
					key	"text" (id=480)	
					next	null	
					value	Integer  (id=481)
9
				[7]	HashMap$Entry<K,V>  (id=470)	
					hash	989307623	
					key	"counter" (id=472)	
					next	HashMap$Entry<K,V>  (id=473)	
						hash	3269447	
						key	"link" (id=288)	
						next	null	
						value	Integer  (id=478)	
5
					value	Integer  (id=474)	
12
			values	null	
		currentPath	null	
		markupElements	Collections$UnmodifiableRandomAccessList<E>  (id=418)	
			c	ArrayList<E>  (id=421)	
				elementData	Object[15]  (id=425)	
					[0]	RawMarkup  (id=427)	
					[1]	ComponentTag  (id=428)	
					[2]	RawMarkup  (id=429)	
					[3]	ComponentTag  (id=430)	
					[4]	RawMarkup  (id=431)	
					[5]	ComponentTag  (id=176)	
					[6]	RawMarkup  (id=403)	
					[7]	ComponentTag  (id=432)	
					[8]	RawMarkup  (id=453)	
					[9]	ComponentTag  (id=454)	
					[10]	ComponentTag  (id=455)	
					[11]	RawMarkup  (id=456)	
					[12]	ComponentTag  (id=457)	
					[13]	ComponentTag  (id=458)	
					[14]	RawMarkup  (id=459)	
				size	15	
index	6	
				final int index = markupStream.getCurrentIndex();
6
/ het volgende elem 
				renderNext(markupStream);
/s
OnlyLinkStudyPage$1(MarkupContainer).renderNext(MarkupStream) line: 1447	

/ we geven	,
/c








/ we debug	, 

	WebRequestCodingStrategy.encode(RequestCycle, IRequestTarget) line: 253	
	WebRequestCycle(RequestCycle).encodeUrlFor(IRequestTarget) line: 811	
		CharSequence url = getProcessor().getRequestCodingStrategy().encode(this, requestTarget);

	WebRequestCycle(RequestCycle).urlFor(Component, RequestListenerInterface, ValueMap) line: 972	
			CharSequence url = encodeUrlFor(target);

	WebRequestCycle(RequestCycle).urlFor(Component, RequestListenerInterface) line: 1005	
		return urlFor(component, listener, null);

	OnlyLinkStudyPage$1(Component).urlFor(RequestListenerInterface) line: 3480	
		return getRequestCycle().urlFor(this, listener);

	OnlyLinkStudyPage$1(Link<T>).getURL() line: 376	
		return urlFor(ILinkListener.INTERFACE);

	OnlyLinkStudyPage$1(Link<T>).onComponentTag(ComponentTag) line: 417	
			// Set href to link to this link's linkClicked method
			CharSequence url = getURL();

	OnlyLinkStudyPage$1(Component).renderComponent(MarkupStream) line: 2696	
	OnlyLinkStudyPage$1(MarkupContainer).onRender(MarkupStream) line: 1559	
	OnlyLinkStudyPage$1(Component).render(MarkupStream) line: 2525	
	OnlyLinkStudyPage(MarkupContainer).renderNext(MarkupStream) line: 1461	
	OnlyLinkStudyPage(MarkupContainer).renderAll(MarkupStream) line: 1575	
	OnlyLinkStudyPage(Page).onRender(MarkupStream) line: 1599	
	OnlyLinkStudyPage(Component).render(MarkupStream) line: 2525	
	OnlyLinkStudyPage(Page).renderPage() line: 933	
	BookmarkablePageRequestTarget.respond(RequestCycle) line: 261	
	WebRequestCycleProcessor(AbstractRequestCycleProcessor).respond(RequestCycle) line: 105	
	WebRequestCycle(RequestCycle).processEventsAndRespond() line: 1287	
	WebRequestCycle(RequestCycle).step() line: 1358	
	WebRequestCycle(RequestCycle).steps() line: 1465	
	WebRequestCycle(RequestCycle).request() line: 545	
	WicketFilter.doGet(HttpServletRequest, HttpServletResponse) line: 486	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 319	

/ we zijn dus in 	,
	public CharSequence encode(final RequestCycle requestCycle, final IRequestTarget requestTarget)
		else if (requestTarget instanceof IBookmarkablePageRequestTarget)
/ NEE
/ we zijn nu met de link bezig	,
requestTarget	ListenerInterfaceRequestTarget  (id=200)	

		else if (requestTarget instanceof IListenerInterfaceRequestTarget)
/ JA
				url = encode(requestCycle, (IListenerInterfaceRequestTarget)requestTarget);
/s
WebRequestCodingStrategy.encode(RequestCycle, IListenerInterfaceRequestTarget) line: 968	
		// Get component and page for request target
		final Component component = requestTarget.getTarget();
component	OnlyLinkStudyPage$1  (id=198)	
		final Page page = component.getPage();

		url.append(component.getPath());
5:link
		final RequestListenerInterface rli = requestTarget.getRequestListenerInterface();
[RequestListenerInterface name=ILinkListener, method=public abstract void org.apache.wicket.markup.html.link.ILinkListener.onLinkClicked()]
		// Add listener interface
		final String listenerName = rli.getName();
		if (!IRedirectListener.INTERFACE.getName().equals(listenerName))
		{
			url.append(listenerName);
ILinkListener

/t
WebRequestCodingStrategy.encode(RequestCycle, IRequestTarget) line: 387	
				url = encode(requestCycle, (IListenerInterfaceRequestTarget)requestTarget);
/d
				prepender.prepend(requestCycle.getRequest().getRelativePathPrefixToWicketHandler());
				result = prepender.toString();
?wicket:interface=:5:link::ILinkListener::
...
/t
OnlyLinkStudyPage$1(Link<T>).onComponentTag(ComponentTag) line: 420	
			// Set href to link to this link's linkClicked method
			CharSequence url = getURL();
/d
?wicket:interface=:5:link::ILinkListener::

			// if the tag is an anchor proper
			if (tag.getName().equalsIgnoreCase("a") || tag.getName().equalsIgnoreCase("link") ||
				tag.getName().equalsIgnoreCase("area"))
			{
				// generate the href attribute
				tag.put("href", Strings.replaceAll(url, "&", "&amp;"));
/ Dit is wat we gezien hebben: de href van de <a/> wordt set	,

			// Render open tag
			if (getRenderBodyOnly() == false)
			{
				renderComponentTag(tag);
<a wicket:id="link" href="?wicket:interface=:5:link::ILinkListener::">
/s
OnlyLinkStudyPage$1(Component).renderComponentTag(ComponentTag) line: 4295	
			// Write the tag
			tag.writeOutput(getResponse(), stripWicketTags, findMarkupStream().getWicketNamespace());
/s
ComponentTag.writeOutput(Response, boolean, String) line: 672	
/=
	public final void writeOutput(final Response response, final boolean stripWicketAttributes,
		final String namespace)
/ response=
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
/ stripWicketAttributes=true
/ namespace="wicket" 			/ NIET nodig, we strip NIET wicket tags	,
		response.write("<");
		response.write(getName());
a
		if (getAttributes().size() > 0)
wicket:id = "link" href = "?wicket:interface=:5:link::ILinkListener::"

		if (stripWicketAttributes == true)
/ NEE
			namespacePrefix = namespace + ":";
/ NIET
...
		response.write(">");
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
<a wicket:id="link" href="?wicket:interface=:5:link::ILinkListener::">

/t
OnlyLinkStudyPage$1(Component).renderComponent(MarkupStream) line: 2725	
				renderComponentTag(tag);
/d
				// Render the body
				onComponentTagBody(markupStream, tag);
/ render de body of de tag	, de link nu	,

/t
OnlyLinkStudyPage$1(Component).renderComponent(MarkupStream) line: 2733	
				onComponentTagBody(markupStream, tag);
/d
					renderClosingComponentTag(markupStream, tag, getRenderBodyOnly());

/t
OnlyLinkStudyPage(MarkupContainer).renderAll(MarkupStream) line: 1575	
		while (markupStream.hasMore())
		{
			// Element rendering is responsible for advancing markup stream!
			final int index = markupStream.getCurrentIndex();
			renderNext(markupStream);

/ markupStream=
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
<a wicket:id="link">[Link0]</a>
<span wicket:id="text"></span>
<span wicket:id="counter"></span>

</body>
</html>, index = 8, current = [Raw markup]]

/ we zien <a wicket:id="link">[Link0]</a>	, en het wordt in de response <a wicket:id="link" href="wicket:interface=":5:link:::IListenerInterface::">[Link0]</a>

/ we geven  continue	,

	DiskPageStore.storePage(String, Page) line: 840	
	SecondLevelCacheSessionStore$SecondLevelCachePageMap.put(Page) line: 332	
	WebSession(Session).requestDetached() line: 1459	
	WebRequestCycle(RequestCycle).detach() line: 1205	
	WebRequestCycle(RequestCycle).steps() line: 1491	
	WebRequestCycle(RequestCycle).request() line: 545	
	WicketFilter.doGet(HttpServletRequest, HttpServletResponse) line: 486	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 319	
/ TODO

/ Einde WICKET GET PAGE WITH LINK

/ 7	.

/ WICKET CLICK LINK

/ we click de link	,

/ Lees		,
http://docs.oracle.com/javaee/6/api/javax/servlet/ServletRequest.html
java.util.Map<java.lang.String,java.lang.String[]> getParameterMap()

/ Lees	,
http://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServletRequest.html
java.lang.String getQueryString()

/we zien in chrome devtools	,
Request URL:http://localhost:9090/wicket-testing1.4/?wicket:interface=:4:link::ILinkListener::
Request Headers
Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Referer:http://localhost:9090/wicket-testing1.4/
User-Agent:Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.104 Safari/537.36
X-DevTools-Emulate-Network-Conditions-Client-Id:4B208944-58BA-7BA3-B061-F8288839192A
Query String Parameters
wicket:interface::4:link::ILinkListener::

/ stacktrace:
	WebRequestCodingStrategy.decode(Request) line: 224	
	ServletWebRequest(Request).getRequestParameters() line: 183	
			requestParameters = encoder.decode(this);

	WebRequestCycle(RequestCycle).step() line: 1339	
				case RESOLVE_TARGET : {
					// resolve the target of the request using the request
					// parameters
					final IRequestTarget target = processor.resolve(this,
						request.getRequestParameters());

	WebRequestCycle(RequestCycle).steps() line: 1465	
	WebRequestCycle(RequestCycle).request() line: 545	
	WicketFilter.doGet(HttpServletRequest, HttpServletResponse) line: 486	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 319	

/ we debug 	,

WebRequestCycle(RequestCycle).step() line: 1339	
				case RESOLVE_TARGET : {
					// resolve the target of the request using the request
					// parameters
					final IRequestTarget target = processor.resolve(this,
						request.getRequestParameters());
/s
ServletWebRequest(Request).getRequestParameters() line: 183	
			requestParameters = encoder.decode(this);
/s
WebRequestCodingStrategy.decode(Request) line: 206	
			addInterfaceParameters(request, parameters);
////////////////////////////////
/ writes parameters	,
/s
		addInterfaceParameters(request.getParameter(INTERFACE_PARAMETER_NAME), parameters);
/ INTERFACE_PARAMETER_NAME="wicket:interface"
/ request.getParameter(INTERFACE_PARAMETER_NAME)=":5:link::ILinkListener::"
/s
WebRequestCodingStrategy.addInterfaceParameters(String, RequestParameters) line: 641	
		// Split into array of strings
		String[] pathComponents = Strings.split(interfaceParameter, Component.PATH_SEPARATOR);
[, 5, link, , ILinkListener, , ]

/ WICKET INTERFACE 

/ pagemap:<componentpath>:versionnumber:listener:behaviorid:urldepth(TODO)
/ componentpath is samengesteld	, dus heeft een :	,  = pageid:component	, bijv 3:link

		// Extract version
			versionNumberString = pathComponents[pathComponents.length - 4];
""
/ pathComponents.length=7
			final int versionNumber = Strings.isEmpty(versionNumberString) ? 0
				: Integer.parseInt(versionNumberString);
0
			parameters.setVersionNumber(versionNumber);

		// Set pagemap name
		final String pageMapName = pathComponents[0];
""
		parameters.setPageMapName(pageMapName.length() == 0 ? PageMap.DEFAULT_NAME : pageMapName);
/  PageMap.DEFAULT_NAME=null


		// Extract URL depth after last colon
		final String urlDepthString = pathComponents[pathComponents.length - 1];
""
			urlDepth = Strings.isEmpty(urlDepthString) ? -1 : Integer.parseInt(urlDepthString);
-1
		parameters.setUrlDepth(urlDepth);

		// Extract behavior ID after last colon
		final String behaviourId = pathComponents[pathComponents.length - 2];
""
		parameters.setBehaviorId(behaviourId.length() != 0 ? behaviourId : null);

		// Extract interface name after second-to-last colon
		final String interfaceName = pathComponents[pathComponents.length - 3];
"ILinkListener"
		parameters.setInterfaceName(interfaceName.length() != 0 ? interfaceName : IRedirectListener.INTERFACE.getName());
		final String componentPath = interfaceParameter.substring(start, end);
"5:link"
		parameters.setComponentPath(componentPath);

/t
WebRequestCodingStrategy.decode(Request) line: 211	
			addInterfaceParameters(request, parameters);
/d
parameters	RequestParameters  (id=150)	
	behaviorId	null	
	bookmarkablePageClass	null	
	componentId	null	
	componentPath	"5:link" (id=221)	
	interfaceName	"ILinkListener" (id=219)	
	onlyProcessIfPathActive	false	
	pageMapName	null	
	parameters	null	
	path	"" (id=153)	
	queryString	null	
	resourceKey	null	
	stateless	true	
	urlDepth	-1	
	versionNumber	0	


			Map<String, String[]> map = request.getParameterMap();
{wicket:interface=:5:link::ILinkListener::}
			Iterator<String> iterator = map.keySet().iterator();
			// remove the parameters with a wicket namespace prefix from the paramter list
			while (iterator.hasNext())
			{
				String key = iterator.next();
				if (key.startsWith(NAME_SPACE))
/ JA
				{
					iterator.remove();
				}
			}
			parameters.setParameters(map);
{}

			parameters.setQueryString(request.getQueryString());
wicket:interface=:5:link::ILinkListener::

/ Uiteindelijk	,
parameters	RequestParameters  (id=150)	
	behaviorId	null	
	bookmarkablePageClass	null	
	componentId	null	
	componentPath	"5:link" (id=221)	
	interfaceName	"ILinkListener" (id=219)	
	onlyProcessIfPathActive	false	
	pageMapName	null	
	parameters	HashMap<K,V>  (id=240)	
{}
	path	"" (id=153)	
	queryString	"wicket:interface=:5:link::ILinkListener::" (id=256)	
	resourceKey	null	
	stateless	true	
	urlDepth	-1	
	versionNumber	0	


			return parameters;
/t
WebRequestCycle(RequestCycle).step() line: 1339	
				case RESOLVE_TARGET : {
					// resolve the target of the request using the request
					// parameters
					final IRequestTarget target = processor.resolve(this,
						request.getRequestParameters());
/d
/s
WebRequestCycleProcessor.resolve(RequestCycle, RequestParameters) line: 84	
			final String path = requestParameters.getPath();
""
/ TODO
			// See whether this request points to a bookmarkable page
			if (requestParameters.getBookmarkablePageClass() != null)
/ NEE
/ TODO
			// See whether this request points to a rendered page
			else if (requestParameters.getComponentPath() != null)
/ JA
0:link
			{
						target = resolveRenderedPage(requestCycle, requestParameters);
/s
WebRequestCycleProcessor(AbstractRequestCycleProcessor).resolveRenderedPage(RequestCycle, RequestParameters) line: 458	
		final String componentPath = requestParameters.getComponentPath();
0:link
		final Page page = session.getPage(requestParameters.getPageMapName(), componentPath,
			requestParameters.getVersionNumber());
/s
WebSession(Session).getPage(String, String, int) line: 699	
/ Haalt page uit 2L ogv id uit componentPath	, dus als dit path "3:link",	 dan haalt hij de page met id=3 op uit 2L	,
componentPath="1:link"

		// Get page map by name, creating the default page map automatically
		IPageMap pageMap = pageMapForName(pageMapName, pageMapName == PageMap.DEFAULT_NAME);
pageMap	SecondLevelCacheSessionStore$SecondLevelCachePageMap  (id=151)	
				PageMapsUsedInRequestEntry entry = pageMapsUsedInRequest.get(pageMap);
null
				PageMapsUsedInRequestEntry newEntry = new PageMapsUsedInRequestEntry();
				newEntry.thread = Thread.currentThread();
				newEntry.requestCycle = RequestCycle.get();
				pageMapsUsedInRequest.put(pageMap, newEntry);
				final String id = Strings.firstPathComponent(componentPath,
					Component.PATH_SEPARATOR);
1
/ want  componentPath="1:link"
				Page page = pageMap.get(Integer.parseInt(id), versionNumber);
/s
SecondLevelCacheSessionStore$SecondLevelCachePageMap.get(int, int) line: 287	

			IntHashMap<Page> pages = getUsedPages(getName());
this	SecondLevelCacheSessionStore$SecondLevelCachePageMap  (id=210)	
	applicationKey	"wicket-testing" (id=244)	
	interceptContinuationURL	null	
	lastPage	OnlyLinkStudyPage  (id=224)	
	metaData	null	
	name	null	
	pageId	0	
	sessionId	"977A396404B2A79FFBDF5B3A35B9FC8B" (id=248)	
/ dus	,
getName()=null
/s
SecondLevelCacheSessionStore.getUsedPages(String) line: 661	

		Map<String, IntHashMap<Page>> usedPages = RequestCycle.get().getMetaData(USED_PAGES);
usedPages	HashMap<K,V>  (id=295)	
	entrySet	HashMap$EntrySet  (id=297)	
	hashSeed	0	
	keySet	null	
	loadFactor	0.75	
	modCount	1	
	size	1	
	table	HashMap$Entry<K,V>[16]  (id=301)	
		[0]	HashMap$Entry<K,V>  (id=309)	
			hash	0	
			key	null	
			next	null	
			value	IntHashMap<V>  (id=258)	
				entrySet	null	
				keySet	null	
				loadFactor	0.75	
				modCount	1	
				size	1	
				table	IntHashMap$Entry<V>[16]  (id=262)	
					[0]	IntHashMap$Entry<V>  (id=268)	
						key	0	
						next	null	
						value	OnlyLinkStudyPage  (id=224)	
				threshold	12	
				values	null	
	threshold	12	
	values	null	

		IntHashMap<Page> intHashMap = usedPages.get(pageMapName);
		return intHashMap;
/t
SecondLevelCacheSessionStore$SecondLevelCachePageMap.get(int, int) line: 287	
			IntHashMap<Page> pages = getUsedPages(getName());
/d
			Page page = pages.get(id);
[Page class = my.own.OnlyLinkStudyPage, id = 0, version = 0]

/ PAGEMAP
/ we zien dat PageMap null RequestCycle queries	, misschien vandaar de name null	,
/ Wat is id , version	?
/ TODO


/t
WebRequestCycleProcessor(AbstractRequestCycleProcessor).resolveRenderedPage(RequestCycle, RequestParameters) line: 469	
		final Page page = session.getPage(requestParameters.getPageMapName(), componentPath,
			requestParameters.getVersionNumber());
/d
[Page class = my.own.OnlyLinkStudyPage, id = 0, version = 0]

			// see whether this resolves to a component call or just the page
			final String interfaceName = requestParameters.getInterfaceName();
ILinkListener
			if (interfaceName != null)
			{
				return resolveListenerInterfaceTarget(requestCycle, page, componentPath,
					interfaceName, requestParameters);
/s
WebRequestCycleProcessor(AbstractRequestCycleProcessor).resolveListenerInterfaceTarget(RequestCycle, Page, String, String, RequestParameters) line: 397	
		else
		{
			// Get the listener interface we need to call
			final RequestListenerInterface listener = RequestListenerInterface.forName(interfaceName);
/ interfaceName=""ILinkListener"
/ alvast antwoord	,
/ listener=
[RequestListenerInterface name=ILinkListener, method=public abstract void org.apache.wicket.markup.html.link.ILinkListener.onLinkClicked()]
/s
public class RequestListenerInterface
{
	/** Map from name to request listener interface */
	private static final Map<String, RequestListenerInterface> interfaces = Collections.synchronizedMap(new HashMap<String, RequestListenerInterface>());
	/** The listener interface method */
	private Method method;
	/** The name of this listener interface */
	private final String name;

	public static final RequestListenerInterface forName(final String interfaceName)
	{
		return interfaces.get(interfaceName);
/ interfaces=
{IFormSubmitListener=[RequestListenerInterface name=IFormSubmitListener, method=public abstract void org.apache.wicket.markup.html.form.IFormSubmitListener.onFormSubmitted()], 
IBehaviorListener=[RequestListenerInterface name=IBehaviorListener, method=public abstract void org.apache.wicket.behavior.IBehaviorListener.onRequest()], 
IOnChangeListener=[RequestListenerInterface name=IOnChangeListener, method=public abstract void org.apache.wicket.markup.html.form.IOnChangeListener.onSelectionChanged()], 
ILinkListener=[RequestListenerInterface name=ILinkListener, method=public abstract void org.apache.wicket.markup.html.link.ILinkListener.onLinkClicked()], 
IResourceListener=[RequestListenerInterface name=IResourceListener, method=public abstract void org.apache.wicket.IResourceListener.onResourceRequested()]}

/t
WebRequestCycleProcessor(AbstractRequestCycleProcessor).resolveListenerInterfaceTarget(RequestCycle, Page, String, String, RequestParameters) line: 439	
			// Get the listener interface we need to call
			final RequestListenerInterface listener = RequestListenerInterface.forName(interfaceName);
/d
			// Get component
			Component component;
			final String pageRelativeComponentPath = Strings.afterFirstPathComponent(componentPath,
				Component.PATH_SEPARATOR);
/ componentPath="0:link"
/ Component.PATH_SEPARATOR=":"
"link"
			else
			{
				component = page.get(pageRelativeComponentPath);
/s
OnlyLinkStudyPage(MarkupContainer).get(String) line: 308	
/=
	public final Component get(String path)
/ path="link"
		String id = Strings.firstPathComponent(path, Component.PATH_SEPARATOR);
"link"
		// Get child by id
		Component child = container.children_get(id);
child	OnlyLinkStudyPage$1  (id=269)	

		// Found child?
		if (child != null)
/ JA
		{
			final String path2 = Strings.afterFirstPathComponent(path, Component.PATH_SEPARATOR);
""
			// Recurse on latter part of path
			return child.get(path2);
/s
	public final Component get(String path)
	{
		// Reference to this container
		if (Strings.isEmpty(path))
/ JA
		{
			return this;
/t
WebRequestCycleProcessor(AbstractRequestCycleProcessor).resolveListenerInterfaceTarget(RequestCycle, Page, String, String, RequestParameters) line: 425	
				component = page.get(pageRelativeComponentPath);
/d
			// Ask the request listener interface object to create a request
			// target
			return listener.newRequestTarget(page, component, listener, requestParameters);
/s
RequestListenerInterface.newRequestTarget(Page, Component, RequestListenerInterface, RequestParameters) line: 225	
		return new ListenerInterfaceRequestTarget(page, component, listener, requestParameters);
/t
WebRequestCycleProcessor.resolve(RequestCycle, RequestParameters) line: 149	
						target = resolveRenderedPage(requestCycle, requestParameters);
/d
target	ListenerInterfaceRequestTarget  (id=299)	
	component	OnlyLinkStudyPage$1  (id=269)	
	listener	RequestListenerInterface  (id=252)	
	page	OnlyLinkStudyPage  (id=168)	
	requestParameters	RequestParameters  (id=123)	

			return target;
/t
WebRequestCycle(RequestCycle).step() line: 1343	
				case RESOLVE_TARGET : {
					// resolve the target of the request using the request
					// parameters
					final IRequestTarget target = processor.resolve(this,
						request.getRequestParameters());
/d
/ volgende	,
				case PROCESS_EVENTS : {
					processEventsAndRespond();
/s
WebRequestCycle(RequestCycle).processEventsAndRespond() line: 1279	
		// let the processor handle/ issue any events, including building the component hierarchy
		processor.processEvents(this);
/s
WebRequestCycleProcessor(AbstractRequestCycleProcessor).processEvents(RequestCycle) line: 92	

		IRequestTarget target = requestCycle.getRequestTarget();
org.apache.wicket.request.target.component.listener.ListenerInterfaceRequestTarget@-1495021441[Page class = my.own.OnlyLinkStudyPage, id = 0, version = 0]->link->interface org.apache.wicket.markup.html.link.ILinkListener.ILinkListener (request paramaters: [RequestParameters  componentPath=0:link pageMapName=null versionNumber=0 interfaceName=ILinkListener componentId=null behaviorId=null urlDepth=-1 parameters={} onlyProcessIfPathActive=false])
/ Deze hebben  we zojuist create	, 
/ TODO (Hoe komt deze in RequestCycle	?)

			((IEventProcessor)target).processEvents(requestCycle);
/s
ListenerInterfaceRequestTarget.processEvents(RequestCycle) line: 72	
		onProcessEvents(requestCycle);
/s
ListenerInterfaceRequestTarget(AbstractListenerInterfaceRequestTarget).onProcessEvents(RequestCycle) line: 195	
		getPage().startComponentRender(getTarget());
/s
			renderedComponents = null;
/t
ListenerInterfaceRequestTarget(AbstractListenerInterfaceRequestTarget).onProcessEvents(RequestCycle) line: 197	
		// and see if we have to redirect the render part by default
		IRequestCycleSettings.RenderStrategy strategy = application.getRequestCycleSettings()
			.getRenderStrategy();
		boolean issueRedirect = (strategy == IRequestCycleSettings.REDIRECT_TO_RENDER || strategy == IRequestCycleSettings.REDIRECT_TO_BUFFER);
REDIRECT_BUFFER
true
		requestCycle.setRedirect(issueRedirect);
/t
ListenerInterfaceRequestTarget.processEvents(RequestCycle) line: 73	
		onProcessEvents(requestCycle);
/d

/ INVOKE REQUESTLISTENERINTERFACE METHOD ON LINK

		getRequestListenerInterface().invoke(getPage(), getTarget());
/s
RequestListenerInterface.invoke(Page, Component) line: 169	
/=
	public final void invoke(final Page page, final Component component)
component	OnlyLinkStudyPage$1  (id=269)	

			method.invoke(component, new Object[] { });
public abstract void org.apache.wicket.markup.html.link.ILinkListener.onLinkClicked()
/s
OnlyLinkStudyPage$1(Link<T>).onLinkClicked() line: 217	
		// Invoke subclass handler
		onClick();
/s
		Link<String>link=new Link<String>("link") {
			@Override
			public void onClick() {
				text="["+text+"]";
				counter+=13;


/////////////////////////////////////////////
/ SAMENVATTING URL

/ url="3:link:::ILinkListener::::::

/ 3 is de page, 	link is de component op page 3	, "ILinkListener" is de key voor een RequestListenerInterface inst als value	, deze heeft een method=public abstract void org.apache.wicket.markup.html.link.ILinkListener.onLinkClicked()	, en de invoke op deze method krijgt de resolved component mee	, dit is een OnlyLinkStudyPage$1 inst	, en dus ook een Link inst	, en wordt Link.onLinkClicked called	, die calls OnlyLinkStudyPage$1.onClick	, 
/ Dus de rol van de "ILinkListener": RequestListenerInterface  inst is dat hij een method heeft: ILinkListener.onLinkClicked, en deze wordt called op de component die zojuist is resolved	,

/ Link.class implements ILinkListener: heeft de onLinkClicked method	, een RequestListenerInterface is een drager van deze Method	, calls .invoke daarop	,

/ IFormSubmitListener heeft onFormSubmitted method	,


/////////////////////////////////////////////

/t
RequestListenerInterface.invoke(Page, Component) line: 205	
			method.invoke(component, new Object[] { });
/t
WebRequestCycle(RequestCycle).processEventsAndRespond() line: 1284	
		processor.processEvents(this);
/d
		currentStep = RESPOND;
		processor.respond(this);
/ TODO (Afmaken)

/ Einde WICKET CLICK LINK

/ 7	. 

/ WICKET GET PAGE WITH FORM

/ In render phase, in onComponentTag wordt urlFor(INTERFACE) called, die wicket:interface=:2:form::IFormSubmitListener:: create	, IFormSubmitListener wordt uit de RequestListenerInterface gehaald met getName() call	,

/ WICKET CLICK SUBMIT FORM

/ Als we form click zien we in devtools	,

Headers

Request URL:http://localhost:9090/wicket-testing1.4/?wicket:interface=:2:form::IFormSubmitListener::
Request 
	Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
	Content-Type:application/x-www-form-urlencoded
	Origin:http://localhost:9090
	Referer:http://localhost:9090/wicket-testing1.4/
	User-Agent:Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.104 Safari/537.36
	X-DevTools-Emulate-Network-Conditions-Client-Id:D7561A68-C495-6E19-C426-761B7E4A9253
Query String Parameters
	wicket:interface::2:form::IFormSubmitListener::
Form Dataview sourceview URL encoded
form3_hf_0:



/ 7	.

/ WICKET GET PAGE WITH FORM

/ we maken wicket form	,

/ workspace 1.4	, proj. wicket-testting1.4	, 

$ vi OnlyFormStudyPage.java

	
	public OnlyFormStudyPage() {
		Form<Void>form=new OnlyForm("form");
		add(form);
	}
	
	private class OnlyForm extends Form<Void>{
		public OnlyForm(String id) {
			super(id);
		}
		@Override
		protected void onSubmit() {
			System.out.println("Only Form");
		}
	}

$ vi OnlyFormStudyPage.java

<form wicket:id="form">
	<input type="submit">
</form>

/ we zien in HTML

<form wicket:id="form" id="form1" method="post" action="?wicket:interface=:0:form::IFormSubmitListener::">
	<div style="width:0px;height:0px;position:absolute;left:-100px;top:-100px;overflow:hidden">
	<input type="hidden" name="form1_hf_0" id="form1_hf_0"></div>
	<input type="submit">
</form>

/ we zien op scherm alleen de Submit button	, als we submit , zien we in Tomcat output: Only Form

/ Intermezzo

/ Belangrijke stap	,

WebRequestCycle(RequestCycle).step() line: 1358	
				case RESOLVE_TARGET : {
					// resolve the target of the request using the request
					// parameters
					final IRequestTarget target = processor.resolve(this,
						request.getRequestParameters());
					...
				}
				case PROCESS_EVENTS : {
					processEventsAndRespond();
/s
WebRequestCycle(RequestCycle).processEventsAndRespond() line: 1279	

		// let the processor handle/ issue any events, including building the component hierarchy
		processor.processEvents(this);

		// set current stage manually this time
		currentStep = RESPOND;

		// generate a response
		processor.respond(this);
/ Hier wordt de HTML create	,

/ Einde Intermezzo

/s
WebRequestCycle(RequestCycle).step() line: 1339	
				case RESOLVE_TARGET : {
					// resolve the target of the request using the request
					// parameters
					final IRequestTarget target = processor.resolve(this,
						request.getRequestParameters());
[RequestParameters  parameters={} onlyProcessIfPathActive=false]
/s
WebRequestCycleProcessor.resolve(RequestCycle, RequestParameters) line: 175	
			else if (requestParameters.getComponentPath() != null)
/ NEE
			else if (Strings.isEmpty(path) || ("/".equals(path)))
/ JA
			{
				target = resolveHomePageTarget(requestCycle, requestParameters);
/s
WebRequestCycleProcessor(AbstractRequestCycleProcessor).resolveHomePageTarget(RequestCycle, RequestParameters) line: 336	

			// Get the home page class
			Class<? extends Page> homePageClass = application.getHomePage();
homePageClass	Class<T> (my.own.OnlyFormStudyPage) (id=1627)	

			// and create a dummy target for looking up whether the home page is
			// mounted
			BookmarkablePageRequestTarget homepageTarget = new BookmarkablePageRequestTarget(
				homePageClass, parameters);
			// else the home page was not mounted; render it now so
			// that we will keep a clean path
			return homepageTarget;
/ TODO

/t
WebRequestCycle(RequestCycle).step() line: 1343	
				case RESOLVE_TARGET : {
					// resolve the target of the request using the request
					// parameters
					final IRequestTarget target = processor.resolve(this,
						request.getRequestParameters());
/d
target	BookmarkablePageRequestTarget  (id=1666)	

/ volgende	,
				case PROCESS_EVENTS : {
					processEventsAndRespond();
/s
		// let the processor handle/ issue any events, including building the component hierarchy
		processor.processEvents(this);
/s
			((IEventProcessor)target).processEvents(requestCycle);
/s
BookmarkablePageRequestTarget.processEvents(RequestCycle) line: 234	
			page = getPage(requestCycle);
/s
			page = newPage(getPageClass(), requestCycle);
/s
BookmarkablePageRequestTarget.getPageClass() line: 194	
		return pageClassRef.get();
this	BookmarkablePageRequestTarget  (id=1666)	
	pageClassRef	WeakReference<T>  (id=1678)	
		referent	Class<T> (my.own.OnlyFormStudyPage) (id=1627)	
/t
/s
BookmarkablePageRequestTarget.newPage(Class<C>, RequestCycle) line: 292	

		// Construct a new instance using the default page factory
		IPageFactory pageFactory = requestCycle.getApplication() .getSessionSettings() .getPageFactory();

		if (pageParameters == null || pageParameters.size() == 0)
		{
			return pageFactory.newPage(pageClass);
/s
DefaultPageFactory.newPage(Class<C>) line: 57	

		Constructor<? extends Page> constructor = constructor(pageClass);
		if (constructor != null)
		{
			// return new Page()
			return createPage(constructor, null);
/s
DefaultPageFactory.createPage(Constructor<Page>, PageParameters) line: 186	
				return constructor.newInstance();

/t
WebRequestCycle(RequestCycle).processEventsAndRespond() line: 1287	
		// let the processor handle/ issue any events, including building the component hierarchy
		processor.processEvents(this);
/ TODO

/ 13	. 

/ we geven  continue	,

/ stack trace	,
	WebRequestCodingStrategy.encode(RequestCycle, IRequestTarget) line: 253	
		CharSequence url = pathForTarget(requestTarget);

	WebRequestCycle(RequestCycle).encodeUrlFor(IRequestTarget) line: 811	
		CharSequence url = getProcessor().getRequestCodingStrategy().encode(this, requestTarget);

	WebRequestCycle(RequestCycle).urlFor(Component, RequestListenerInterface, ValueMap) line: 972	
			// Get the listener interface name
			target = new ListenerInterfaceRequestTarget(page, component, listener);

			CharSequence url = encodeUrlFor(target);

	WebRequestCycle(RequestCycle).urlFor(Component, RequestListenerInterface) line: 1005	
		return urlFor(component, listener, null);

	OnlyFormStudyPage$OnlyForm(Component).urlFor(RequestListenerInterface) line: 3480	
		return getRequestCycle().urlFor(this, listener);

	OnlyFormStudyPage$OnlyForm(Form<T>).onComponentTag(ComponentTag) line: 1911	
			String url = urlFor(IFormSubmitListener.INTERFACE).toString();			/ Hier wordt dus de listener gegeven	, 

	OnlyFormStudyPage$OnlyForm(Component).renderComponent(MarkupStream) line: 2696	
		// Call any tag handler
		onComponentTag(tag);

	OnlyFormStudyPage$OnlyForm(MarkupContainer).onRender(MarkupStream) line: 1559	
	OnlyFormStudyPage$OnlyForm(Component).render(MarkupStream) line: 2525	
	OnlyFormStudyPage(MarkupContainer).renderNext(MarkupStream) line: 1461	
		if ((element instanceof ComponentTag) && !markupStream.atCloseTag())
		{
			// Get element as tag
			final ComponentTag tag = (ComponentTag)element;

			// Get component id
			final String id = tag.getId();

			// Get the component for the id from the given container
			final Component component = get(id);

			// Failed to find it?
			if (component != null)
			{
				component.render(markupStream);

	OnlyFormStudyPage(MarkupContainer).renderAll(MarkupStream) line: 1575				/ !	
		while (markupStream.hasMore())
		{
			// Element rendering is responsible for advancing markup stream!
			final int index = markupStream.getCurrentIndex();
			renderNext(markupStream);

	OnlyFormStudyPage(Page).onRender(MarkupStream) line: 1599	
		// Render markup
		renderAll(associatedMarkupStream);

	OnlyFormStudyPage(Component).render(MarkupStream) line: 2525	
	OnlyFormStudyPage(Page).renderPage() line: 933	
	BookmarkablePageRequestTarget.respond(RequestCycle) line: 261	
				getPage(requestCycle).renderPage();

	WebRequestCycleProcessor(AbstractRequestCycleProcessor).respond(RequestCycle) line: 105	
	WebRequestCycle(RequestCycle).processEventsAndRespond() line: 1287	
		processor.processEvents(this);										/ creates page	, calls OnlyFormStudyPage.<init>	, creates hierarchy	, calls Form.<init>
		currentStep = RESPOND;
		processor.respond(this);											/ creates HTML, calls urlFor	,
																			/ TODO Hoe zijn deze twee (hierarchy & HTML ) connected	?

	WebRequestCycle(RequestCycle).step() line: 1358	
	WebRequestCycle(RequestCycle).steps() line: 1465	
	WebRequestCycle(RequestCycle).request() line: 545	
	WicketFilter.doGet(HttpServletRequest, HttpServletResponse) line: 486	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 319	


/ we gaan verder debug	,

WebRequestCodingStrategy.encode(RequestCycle, IRequestTarget) line: 253	
requestTarget	ListenerInterfaceRequestTarget  (id=109)	
	component	OnlyFormStudyPage$OnlyForm  (id=105)	
	listener	RequestListenerInterface  (id=126)	
		method	Method  (id=175)	
public abstract void org.apache.wicket.markup.html.form.IFormSubmitListener.onFormSubmitted()
		name	"IFormSubmitListener" (id=179)	
		recordsPageVersion	true	
	page	OnlyFormStudyPage  (id=102)	
	requestParameters	null	

/ de listener was hierboven gegeven	, in de urlFor(IFormSubmitListener.INTERFACE) call	,

		else if (requestTarget instanceof IListenerInterfaceRequestTarget)
		{
			if (url == null)
			{
				url = encode(requestCycle, (IListenerInterfaceRequestTarget)requestTarget);
/s
WebRequestCodingStrategy.encode(RequestCycle, IListenerInterfaceRequestTarget) line: 968	

/ De url wordt	,
?wicket:interface=<pagemap>:<path>:<versionnumber>:<behaviorid>:
/ path=0:link	, dus in path zit ook een :	,


		// Start string buffer for url
		final AppendingStringBuffer url = new AppendingStringBuffer(64);
		url.append('?');
		url.append(INTERFACE_PARAMETER_NAME);
		url.append('=');
?wicket:interface=

		// Get component and page for request target
		final Component component = requestTarget.getTarget();
component	OnlyFormStudyPage$OnlyForm  (id=105)	
		final Page page = component.getPage();

		// Add pagemap
		final IPageMap pageMap = page.getPageMap();
pageMap	SecondLevelCacheSessionStore$SecondLevelCachePageMap  (id=224)	
/=
[PageMap name=null]

		if (!pageMap.isDefault())
/ NEE
		url.append(Component.PATH_SEPARATOR);
?wicket:interface=:
/ Dus de 1ste : betekent: de default pagemap	, anders had er iets voor de : gestaan	,

		// Add path to component
		url.append(component.getPath());
		url.append(Component.PATH_SEPARATOR);
?wicket:interface=:0:form:

		// Add version
		final int versionNumber = component.getPage().getCurrentVersionNumber();
0
		if (!rli.getRecordsPageVersion())
/ NEE
		else if (versionNumber > 0)
/ NEE
		url.append(Component.PATH_SEPARATOR);
?wicket:interface=:0:form::

		// Add listener interface
		final String listenerName = rli.getName();
		if (!IRedirectListener.INTERFACE.getName().equals(listenerName))
		{
			url.append(listenerName);
		}
		url.append(Component.PATH_SEPARATOR);
?wicket:interface=:0:form::IFormSubmitListener:

		// Add behaviourId
		RequestParameters params = requestTarget.getRequestParameters();
null
		if (params != null && params.getBehaviorId() != null)
/ NEE
		url.append(Component.PATH_SEPARATOR);
?wicket:interface=:0:form::IFormSubmitListener::

/c
/t
OnlyFormStudyPage$OnlyForm(Form<T>).onComponentTag(ComponentTag) line: 1924	
			String url = urlFor(IFormSubmitListener.INTERFACE).toString();
/d
?wicket:interface=:0:form::IFormSubmitListener::

				tag.put("action", Strings.escapeMarkup(url));
/t
OnlyFormStudyPage$OnlyForm(Component).renderComponent(MarkupStream) line: 2716	
		// Call any tag handler
		onComponentTag(tag);
/d
			// Render open tag
				renderComponentTag(tag);
/s
OnlyFormStudyPage$OnlyForm(Component).renderComponentTag(ComponentTag) line: 4326	
			// Write the tag
			tag.writeOutput(getResponse(), stripWicketTags, findMarkupStream().getWicketNamespace());
/ antwoord: "wicket"
/s
	 * Get the markup stream for this component.
OnlyFormStudyPage$OnlyForm(MarkupContainer).findMarkupStream() line: 1533	
		MarkupContainer c = this;
		return c.getMarkupStream();
[markup = file:/home/eric/Devel/Java/Tomcat/apache-tomcat-7.0.57/webapps/wicket-testing1.4/WEB-INF/classes/my/own/OnlyFormStudyPage.html
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
<form wicket:id="form">
	<input type="submit">
</form>

</body>
</html>, index = 5, current = '<form wicket:id="form">' (line 8, column 1)]
/ TODO
////////////////////////////////////////////////
/ Dit is de HTML die wij gaven	: 					getMarkupStream	, 
/ Hieronder wordt de uiteindelijke HTML create	:	response	,
/t
/s
ComponentTag.writeOutput(Response, boolean, String) line: 672	
/ response=
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
		response.write("<");
		response.write(getName());
/ response=
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
<form

		if (getAttributes().size() > 0)
wicket:id = "form" id = "form1" method = "post" action = "?wicket:interface=:0:form::IFormSubmitListener::"
/ TODO
			final Iterator<String> iterator = getAttributes().keySet().iterator();
			while (iterator.hasNext())

					response.write(" ");
					response.write(key);
					CharSequence value = getString(key);

						response.write("=\"");
						value = Strings.replaceAll(value, "\"", "&#34;");
						response.write(value);
						response.write("\"");

/ response=
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
<form wicket:id="form" id="form1" method="post" action="?wicket:interface=:0:form::IFormSubmitListener::"

		response.write(">");
/t
OnlyFormStudyPage$OnlyForm(Component).renderComponent(MarkupStream) line: 2725	
				renderComponentTag(tag);
/d
				// Render the body
				onComponentTagBody(markupStream, tag);
/s
OnlyFormStudyPage$OnlyForm(Form<T>).onComponentTagBody(MarkupStream, ComponentTag) line: 2002	
			// get the hidden field id
			String nameAndId = getHiddenFieldId();
form1_hf_0
			// render the hidden field
			AppendingStringBuffer buffer = new AppendingStringBuffer(HIDDEN_DIV_START).append(
				"<input type=\"hidden\" name=\"")
				.append(nameAndId)
				.append("\" id=\"")
				.append(nameAndId)
				.append("\" />");
/ HIDDEN_DIV_START=<div style="width:0px;height:0px;position:absolute;left:-100px;top:-100px;overflow:hidden">
div style="width:0px;height:0px;position:absolute;left:-100px;top:-100px;overflow:hidden"><input type="hidden" name="form1_hf_0" id="form1_hf_0" />

			buffer.append("</div>");
			getResponse().write(buffer);

		// do the rest of the processing
		super.onComponentTagBody(markupStream, openTag);
/c
/ TODO

/ 7	.

/ we submit het form	,

/ workspace-wicket1.4	, proj. wicket-testing1.4	, 

/ OnlyFormStudyPage.java

/s
WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 319	
					boolean requestHandledByWicket = doGet(httpServletRequest, httpServletResponse);
/s
WicketFilter.doGet(HttpServletRequest, HttpServletResponse) line: 396	
...
/s
WebRequestCycle(RequestCycle).step() line: 1339	
				case RESOLVE_TARGET : {
					// resolve the target of the request using the request
					// parameters
					final IRequestTarget target = processor.resolve(this,
						request.getRequestParameters());
/s
ServletWebRequest(Request).getRequestParameters() line: 183	
			requestParameters = encoder.decode(this);
/s
WebRequestCodingStrategy.decode(Request) line: 206	
			addInterfaceParameters(request, parameters);
/s
		addInterfaceParameters(request.getParameter(INTERFACE_PARAMETER_NAME), parameters);
/ writes in parameters	,
/s
WebRequestCodingStrategy.addInterfaceParameters(String, RequestParameters) line: 635	
		// Split into array of strings
		String[] pathComponents = Strings.split(interfaceParameter, Component.PATH_SEPARATOR);

			versionNumberString = pathComponents[pathComponents.length - 4];
""
			final int versionNumber = Strings.isEmpty(versionNumberString) ? 0
				: Integer.parseInt(versionNumberString);
0
			parameters.setVersionNumber(versionNumber);

		final String pageMapName = pathComponents[0];
""
		parameters.setPageMapName(pageMapName.length() == 0 ? PageMap.DEFAULT_NAME : pageMapName);

		final String urlDepthString = pathComponents[pathComponents.length - 1];
		final int urlDepth;
			urlDepth = Strings.isEmpty(urlDepthString) ? -1 : Integer.parseInt(urlDepthString);
-1
		parameters.setUrlDepth(urlDepth);

		final String behaviourId = pathComponents[pathComponents.length - 2];
""
		parameters.setBehaviorId(behaviourId.length() != 0 ? behaviourId : null);
null

		final String interfaceName = pathComponents[pathComponents.length - 3];
interfaceName	"IFormSubmitListener" (id=413)	
		parameters.setInterfaceName(interfaceName.length() != 0 ? interfaceName
			: IRedirectListener.INTERFACE.getName());

		final int start = pageMapName.length() + 1;
		final int end = interfaceParameter.length() - behaviourId.length() -
			interfaceName.length() - versionNumberString.length() - urlDepthString.length() - 4;
		final String componentPath = interfaceParameter.substring(start, end);
"0:form"
		parameters.setComponentPath(componentPath);


/ Einde WICKET GET PAGE WITH FORM


/ WICKET GET AJAX LINK

/ proj. wicket-testing1.4	, 

$ vi OnlyAjaxLinkStudyPage.java

public class AjaxLinkStudyPage extends WebPage{	
	
	private String text="";
	private int counter;
	
	public AjaxLinkStudyPage() {
		
		IModel<AjaxLinkStudyPage>model=new CompoundPropertyModel<AjaxLinkStudyPage>(this);
	
		final Label textl=new Label("text");
		textl.setOutputMarkupId(true);
		final Label counterl=new Label("counter");
		counterl.setOutputMarkupId(true);
		
		AjaxLink<Void>ajaxLink=new AjaxLink<Void>("ajaxlink") {
			
			@Override
			public void onClick(AjaxRequestTarget target) {
				text="["+text+"]";
				counter+=13;
				target.addComponent(textl);
				target.addComponent(counterl);
				
			}
		};
	
		add(textl);
		add(counterl);
		add(ajaxLink);
	}
}

$ vi OnlyAjaxLinkStudyPage.html

<a wicket:id="link">[Link0]</a>
<span wicket:id="text"></span>
<span wicket:id="counter"></span>

/ 13	. 

/ Geef	,
http://localhost:9090/wicket-testing1.4/

/ we zien	,

Headers

Remote Address:[::1]:9090
Request URL:http://localhost:9090/wicket-testing1.4/
Request Method:GET
Status Code:200 OK

Request Headers

Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Encoding:gzip,deflate,sdch
Accept-Language:en-US,en;q=0.8
Cache-Control:max-age=0
Connection:keep-alive
Cookie:JSESSIONID=0CF99454E05CDA605E3DE43C70AB9885; visited=yes; JSESSIONID=1llua8yc8hq0d14hmf8vs3f621
Host:localhost:9090
User-Agent:Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.104 Safari/537.36

Response Headers

Cache-Control:no-cache, max-age=0, must-revalidate
Content-Language:en-US
Content-Length:977
Content-Type:text/html;charset=UTF-8
Date:Tue, 11 Aug 2015 05:49:36 GMT
Pragma:no-cache
Server:Apache-Coyote/1.1

Response

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
<script type="text/javascript" src="resources/org.apache.wicket.markup.html.WicketEventReference/wicket-event.js"></script>
<script type="text/javascript" src="resources/org.apache.wicket.ajax.WicketAjaxReference/wicket-ajax.js"></script>
<script type="text/javascript" src="resources/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/wicket-ajax-debug.js"></script>
<script type="text/javascript" id="wicket-ajax-debug-enable"><!--/*--><![CDATA[/*><!--*/
wicketAjaxDebugEnable=true;
/*-->]]>*/</script>

</head>
<body>
<a wicket:id="link" id="link1" href="#" 
	onclick="var wcall=wicketAjaxGet('?wicket:interface=:0:link::IBehaviorListener:0:',function() { }.bind(this),function() { }.bind(this), function() {return Wicket.$('link1') != null;}.bind(this));return !wcall;">[Link0]</a>
<span wicket:id="text" id="text2"></span>
<span wicket:id="counter" id="counter3">0</span>

</body>
</html>

/ DEBUG 

/ 7	.

/ Intermezzo

	public AjaxLink(final String id, final IModel<T> model)
	{
		super(id, model);

		add(new AjaxEventBehavior("onclick")
		{
			...

/ Einde Intermezzo

/ we komen in 	,

/ stack trace	,

	WebRequestCodingStrategy.encode(RequestCycle, IRequestTarget) line: 253	
	WebRequestCycle(RequestCycle).encodeUrlFor(IRequestTarget) line: 811	
		CharSequence url = getProcessor().getRequestCodingStrategy().encode(this, requestTarget);

	WebRequestCycle(RequestCycle).urlFor(ResourceReference, ValueMap) line: 1115	
		return encodeUrlFor(new SharedResourceRequestTarget(requestParameters));

	WebRequestCycle(RequestCycle).urlFor(ResourceReference) line: 1082	
		return urlFor(resourceReference, null);

	HtmlHeaderContainer$2(HeaderResponse).renderJavascriptReference(ResourceReference) line: 152	
			CharSequence url = RequestCycle.get().urlFor(reference);

	AjaxLink$1(AbstractDefaultAjaxBehavior).renderHead(IHeaderResponse) line: 76	
		...
		response.renderJavascriptReference(WicketEventReference.INSTANCE);				/ wicket-event.js	,
		response.renderJavascriptReference(WicketAjaxReference.INSTANCE);				/ wicket-ajax.js	,

	OnlyAjaxLinkStudyPage$1(Component).renderHead(HtmlHeaderContainer) line: 2807	
	HtmlHeaderContainer$1.component(Component) line: 231	
	OnlyAjaxLinkStudyPage(MarkupContainer).visitChildren(Class<?>, IVisitor<S>) line: 920	
	OnlyAjaxLinkStudyPage(MarkupContainer).visitChildren(IVisitor<Component>) line: 960	
	HtmlHeaderContainer.renderHeaderSections(MarkupContainer, HtmlHeaderContainer) line: 222	
	HtmlHeaderContainer.onComponentTagBody(MarkupStream, ComponentTag) line: 137	
	HtmlHeaderContainer(Component).renderComponent(MarkupStream) line: 2725	
	HtmlHeaderContainer(MarkupContainer).onRender(MarkupStream) line: 1559	
	HtmlHeaderContainer(Component).render(MarkupStream) line: 2525	
	OnlyAjaxLinkStudyPage(MarkupContainer).autoAdd(Component, MarkupStream) line: 229	
	HtmlHeaderResolver.resolve(MarkupContainer, MarkupStream, ComponentTag) line: 80	
	ComponentResolvers.resolve(Application, MarkupContainer, MarkupStream, ComponentTag) line: 81	
	OnlyAjaxLinkStudyPage(MarkupContainer).renderNext(MarkupStream) line: 1465	
	OnlyAjaxLinkStudyPage(MarkupContainer).renderAll(MarkupStream) line: 1575	
	OnlyAjaxLinkStudyPage(Page).onRender(MarkupStream) line: 1599	
	OnlyAjaxLinkStudyPage(Component).render(MarkupStream) line: 2525	
	OnlyAjaxLinkStudyPage(Page).renderPage() line: 933	
	BookmarkablePageRequestTarget.respond(RequestCycle) line: 261	
	WebRequestCycleProcessor(AbstractRequestCycleProcessor).respond(RequestCycle) line: 105	
	WebRequestCycle(RequestCycle).processEventsAndRespond() line: 1287	
	WebRequestCycle(RequestCycle).step() line: 1358	
	WebRequestCycle(RequestCycle).steps() line: 1465	
	WebRequestCycle(RequestCycle).request() line: 545	
	WicketFilter.doGet(HttpServletRequest, HttpServletResponse) line: 486	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 319	

/ we debug verder	,
WebRequestCodingStrategy.encode(RequestCycle, IRequestTarget) line: 253	
		else if (requestTarget instanceof ISharedResourceRequestTarget)
		{
			url = requestContext.encodeSharedResourceURL(url == null ? encode(requestCycle,
				(ISharedResourceRequestTarget)requestTarget) : url);
requestTarget	SharedResourceRequestTarget  (id=294)	
	requestParameters	RequestParameters  (id=395)	
		behaviorId	null	
		bookmarkablePageClass	null	
		componentId	null	
		componentPath	null	
		interfaceName	null	
		onlyProcessIfPathActive	false	
		pageMapName	null	
		parameters	null	
		path	null	
		queryString	null	
		resourceKey	"org.apache.wicket.markup.html.WicketEventReference/wicket-event.js" (id=413)	
		stateless	true	
		urlDepth	-1	
		versionNumber	0	
		else
		{
			final AppendingStringBuffer buffer = new AppendingStringBuffer(
				sharedResourceKey.length());
			buffer.append(RESOURCES_PATH_PREFIX);
			buffer.append(sharedResourceKey);
			return buffer;
resources/org.apache.wicket.markup.html.WicketEventReference/wicket-event.js

/t
WebRequestCodingStrategy.encode(RequestCycle, IRequestTarget) line: 361	
		else if (requestTarget instanceof ISharedResourceRequestTarget)
		{
			url = requestContext.encodeSharedResourceURL(url == null ? encode(requestCycle,
				(ISharedResourceRequestTarget)requestTarget) : url);
/d
			sharedResourceURL = true;

			stripJsessionId = ((ISharedResourceRequestTarget)requestTarget).getRequestParameters()
				.isStateless();
true
		}
		if (url != null)
		{
			return encoded;
resources/org.apache.wicket.markup.html.WicketEventReference/wicket-event.js
...
/t
HtmlHeaderContainer$2(HeaderResponse).renderJavascriptReference(ResourceReference) line: 153	
			CharSequence url = RequestCycle.get().urlFor(reference);
resources/org.apache.wicket.markup.html.WicketEventReference/wicket-event.js
			renderJavascriptReference(url.toString());
/s
HtmlHeaderContainer$2(HeaderResponse).renderJavascriptReference(String) line: 188	
				JavascriptUtils.writeJavascriptUrl(getResponse(), url);
...
/s
JavascriptUtils.writeJavascriptUrl(Response, CharSequence, String) line: 108	
		response.write("<script type=\"text/javascript\" ");
		if (id != null)
		{
			response.write("id=\"" + id + "\" ");
		}
		response.write("src=\"");
		response.write(url);
		response.println("\"></script>");
/ response=
<meta charset="UTF-8">
<title>Insert title here</title>
<script type="text/javascript" src="resources/org.apache.wicket.markup.html.WicketEventReference/wicket-event.js"></script>

/t
AjaxLink$1(AbstractDefaultAjaxBehavior).renderHead(IHeaderResponse) line: 77	
		response.renderJavascriptReference(WicketEventReference.INSTANCE);
/d
		response.renderJavascriptReference(WicketAjaxReference.INSTANCE);
this	AjaxLink$1  (id=175)	
response	HtmlHeaderContainer$2  (id=178)	
	rendered	HashSet<E>  (id=204)	
		map	HashMap<K,V>  (id=212)	
			size	2	
			table	HashMap$Entry<K,V>[16]  (id=216)	
				[9]	HashMap$Entry<K,V>  (id=219)	
					hash	2124860137	
					key	Arrays$ArrayList<E>  (id=221)	
						a	Object[2]  (id=228)	
							[0]	"javascript" (id=230)	
							[1]	"resources/org.apache.wicket.ajax.WicketAjaxReference/wicket-ajax.js" (id=231)	
						modCount	0	
					next	HashMap$Entry<K,V>  (id=224)	
						hash	-642322215	
						key	Arrays$ArrayList<E>  (id=232)	
							a	Object[2]  (id=233)	
								[0]	"javascript" (id=230)	
								[1]	"resources/org.apache.wicket.markup.html.WicketEventReference/wicket-event.js" (id=234)	
							modCount	0	
						next	null	
						value	Object  (id=227)	
					value	Object  (id=227)	

			response.renderJavascriptReference(JAVASCRIPT_DEBUG);
			response.renderJavascript("wicketAjaxDebugEnable=true;", "wicket-ajax-debug-enable");
this	AjaxLink$1  (id=175)	
response	HtmlHeaderContainer$2  (id=178)	
	rendered	HashSet<E>  (id=204)	
		map	HashMap<K,V>  (id=212)	
			size	4	
			table	HashMap$Entry<K,V>[16]  (id=216)	
				[5]	HashMap$Entry<K,V>  (id=291)	
					hash	2124635557	
					key	Arrays$ArrayList<E>  (id=293)	
						a	Object[2]  (id=296)	
							[0]	"javascript" (id=230)	
							[1]	"resources/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/wicket-ajax-debug.js" (id=298)	
						modCount	0	
					next	null	
					value	Object  (id=227)	
				[7]	HashMap$Entry<K,V>  (id=292)	
					hash	1789769735	
					key	Arrays$ArrayList<E>  (id=294)	
						a	Object[2]  (id=300)	
							[0]	"wicketAjaxDebugEnable=true;" (id=302)	
							[1]	"wicket-ajax-debug-enable" (id=303)	
						modCount	0	
					next	null	
					value	Object  (id=227)	
				[9]	HashMap$Entry<K,V>  (id=219)	
					hash	2124860137	
					key	Arrays$ArrayList<E>  (id=221)	
						a	Object[2]  (id=228)	
							[0]	"javascript" (id=230)	
							[1]	"resources/org.apache.wicket.ajax.WicketAjaxReference/wicket-ajax.js" (id=231)	
						modCount	0	
					next	HashMap$Entry<K,V>  (id=224)	
						hash	-642322215	
						key	Arrays$ArrayList<E>  (id=232)	
							a	Object[2]  (id=233)	
								[0]	"javascript" (id=230)	
								[1]	"resources/org.apache.wicket.markup.html.WicketEventReference/wicket-event.js" (id=234)	
							modCount	0	
						next	null	
						value	Object  (id=227)	
					value	Object  (id=227)	

/t
OnlyAjaxLinkStudyPage$1(Component).renderHead(HtmlHeaderContainer) line: 2811	
			for (IBehavior behavior : getBehaviors())
			{
					((IHeaderContributor)behavior).renderHead(container.getHeaderResponse());
/d
"getBehaviors()"	 (pending)	
	c	ArrayList<E>  (id=420)	
		elementData	Object[1]  (id=423)	
			[0]	AjaxLink$1  (id=175)	
				component	OnlyAjaxLinkStudyPage$1  (id=188)	
				event	"onclick" (id=426)	
				this$0	OnlyAjaxLinkStudyPage$1  (id=188)	
				throttlingSettings	null	
		size	1	
/= onze AjaxLink inst	,

/t
HtmlHeaderContainer.onComponentTagBody(MarkupStream, ComponentTag) line: 158	
			renderHeaderSections(getPage(), this);
/d
			CharSequence output = response.getBuffer();

<meta charset="UTF-8">
<title>Insert title here</title>
<script type="text/javascript" src="resources/org.apache.wicket.markup.html.WicketEventReference/wicket-event.js"></script>
<script type="text/javascript" src="resources/org.apache.wicket.ajax.WicketAjaxReference/wicket-ajax.js"></script>
<script type="text/javascript" src="resources/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/wicket-ajax-debug.js"></script>
<script type="text/javascript" id="wicket-ajax-debug-enable"><!--/*--><![CDATA[/*><!--*/
wicketAjaxDebugEnable=true;
/*-->]]>*/</script>
...
					webResponse.write("<head>");
				webResponse.write(output);
					webResponse.write("</head>");
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
<script type="text/javascript" src="resources/org.apache.wicket.markup.html.WicketEventReference/wicket-event.js"></script>
<script type="text/javascript" src="resources/org.apache.wicket.ajax.WicketAjaxReference/wicket-ajax.js"></script>
<script type="text/javascript" src="resources/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/wicket-ajax-debug.js"></script>
<script type="text/javascript" id="wicket-ajax-debug-enable"><!--/*--><![CDATA[/*><!--*/
wicketAjaxDebugEnable=true;
/*-->]]>*/</script>

</head>
		finally
		{
			// Restore the original response
			getRequestCycle().setResponse(webResponse);
...
/t
OnlyAjaxLinkStudyPage(MarkupContainer).renderNext(MarkupStream) line: 1465	
			else
			{
				if (ComponentResolvers.resolve(getApplication(), this, markupStream, tag))
/d
tag=<head>
					return;
/t
OnlyAjaxLinkStudyPage(MarkupContainer).renderAll(MarkupStream) line: 1576	
		while (markupStream.hasMore())
		{
			// Element rendering is responsible for advancing markup stream!
			final int index = markupStream.getCurrentIndex();
			renderNext(markupStream);
/d
/ volgende	,
/ RawMarkup <body>
/ volgende	,
/s
OnlyAjaxLinkStudyPage(MarkupContainer).renderNext(MarkupStream) line: 1447	
		// Get the current markup element
		final MarkupElement element = markupStream.get();
element	ComponentTag  (id=527)	
<a wicket:id="link">

			final Component component = get(id);
component	OnlyAjaxLinkStudyPage$1  (id=188)	

				component.render(markupStream);

/ Intermezzo

/ we zijn bij,

			if (component != null)
/ Nu, bij <link/>
			{
				component.render(markupStream);
			}
			else
/ bij <header/>
			{
				if (ComponentResolvers.resolve(getApplication(), this, markupStream, tag))

/ Einde Intermezzo

				onRender(markupStream);
...
/s
OnlyAjaxLinkStudyPage$1(Component).renderComponent(MarkupStream) line: 2689	
		onComponentTag(tag);
/s
OnlyAjaxLinkStudyPage$1(AjaxLink<T>).onComponentTag(ComponentTag) line: 108	
		super.onComponentTag(tag);
/ sets attr id="link7"
/ TODO CREATE ID 
				tag.put("href", "#");
/t
OnlyAjaxLinkStudyPage$1(Component).renderComponent(MarkupStream) line: 2689	
		onComponentTag(tag);
/d
				renderComponentTag(tag);
/s
OnlyAjaxLinkStudyPage$1(Component).renderComponentTag(ComponentTag) line: 4267	
			// Apply behavior modifiers
			List<IBehavior> behaviors = getBehaviors();
/s
OnlyAjaxLinkStudyPage$1(Component).getBehaviors(Class<M>) line: 3732	

		final boolean ajaxRequest = getRequest() instanceof WebRequest &&
			((WebRequest)getRequest()).isAjax();
false

		List<IBehavior> behaviors = getBehaviorsRawList();
/s
OnlyAjaxLinkStudyPage$1(Component).getBehaviorsRawList() line: 1009	

/ Intermezzo

this	OnlyAjaxLinkStudyPage$1  (id=188)	
	data	Object[2]  (id=579)	
		[0]	MetaDataEntry<T>  (id=560)	
			key	Component$6  (id=563)	
			object	Boolean  (id=566)	
true
		[1]	AjaxLink$1  (id=175)	
			sequence	0	
			component	OnlyAjaxLinkStudyPage$1  (id=188)	
			event	"onclick" (id=426)	
			this$0	OnlyAjaxLinkStudyPage$1  (id=188)	
			throttlingSettings	null	
length	2	

/ TODO (1ste)

$ vi AjaxLink.class
	public AjaxLink(final String id, final IModel<T> model)
	{
		...
		add(new AjaxEventBehavior("onclick")
/ Dit is AjaxLink$1	,

/ Einde Intermezzo

				for (int i = startIndex; i < length; ++i)
				{
					Object o = data_get(i);
						result.add((IBehavior)o);
/ Voor de 2de	,
				return result;
/t
OnlyAjaxLinkStudyPage$1(Component).getBehaviors(Class<M>) line: 3733	
		List<IBehavior> behaviors = getBehaviorsRawList();
/d
		for (IBehavior behavior : behaviors)
		{
...
					subset.add(type.cast(behavior));
[org.apache.wicket.ajax.markup.html.AjaxLink$1@6afd7a6c]

		return Collections.unmodifiableList(subset);
/t
OnlyAjaxLinkStudyPage$1(Component).renderComponentTag(ComponentTag) line: 4295	
		final boolean ajaxRequest = getRequest() instanceof WebRequest &&
true
			((WebRequest)getRequest()).isAjax();
/=
	return ajax;
false
		if (!(tag instanceof WicketTag) || !stripWicketTags)
/ JA
		{
			// Apply behavior modifiers
			List<IBehavior> behaviors = getBehaviors();
...
/s
OnlyAjaxLinkStudyPage$1(Component).getBehaviors(Class<M>) line: 3732	
this	OnlyAjaxLinkStudyPage$1  (id=5636)	
	data	Object[2]  (id=6197)	
		[0]	MetaDataEntry<T>  (id=6199)	
		[1]	AjaxLink$1  (id=5634)	

/ this is de AjaxLink in onze page	,

		List<IBehavior> behaviors = getBehaviorsRawList();
/s
OnlyAjaxLinkStudyPage$1(Component).getBehaviorsRawList() line: 1003	

				for (int i = startIndex; i < length; ++i)
				{
					Object o = data_get(i);
					if (o == null || o instanceof IBehavior)
					{
						result.add((IBehavior)o);
					}
				}
				return result;
[org.apache.wicket.ajax.markup.html.AjaxLink$1@221a4e4a]

/t
OnlyAjaxLinkStudyPage$1(Component).getBehaviors(Class<M>) line: 3733	
		List<IBehavior> behaviors = getBehaviorsRawList();
/d
/t
OnlyAjaxLinkStudyPage$1(Component).renderComponentTag(ComponentTag) line: 4305	
			List<IBehavior> behaviors = getBehaviors();
/d
[org.apache.wicket.ajax.markup.html.AjaxLink$1@557a3f42]

				for (IBehavior behavior : behaviors)
				{
					// Components may reject some behavior components
					if (isBehaviorAccepted(behavior))
					{
						behavior.onComponentTag(this, tag);
/s
AjaxLink$1(AbstractAjaxBehavior).onComponentTag(Component, ComponentTag) line: 134	
		onComponentTag(tag);
/s
AjaxLink$1.onComponentTag(ComponentTag) line: 83	
				// add the onclick handler only if link is enabled
				if (isLinkEnabled())
				{
					super.onComponentTag(tag);
/s
AjaxLink$1(AjaxEventBehavior).onComponentTag(ComponentTag) line: 105	
		super.onComponentTag(tag);
/s
AbstractAjaxBehavio.class
	protected void onComponentTag(final ComponentTag tag)
	{
	}
/t
AjaxLink$1(AjaxEventBehavior).onComponentTag(ComponentTag) line: 108	
		super.onComponentTag(tag);
/d
		// only add the event handler when the component is enabled.
		Component myComponent = getComponent();
myComponent	OnlyAjaxLinkStudyPage$1  (id=5649)	

		if (myComponent.isEnabledInHierarchy())
		{
			tag.put(event, escapeAttribute(getEventHandler()));
/s
AjaxLink$1(AjaxEventBehavior).getEventHandler() line: 132	
		CharSequence handler = getCallbackScript();
/s
AjaxLink$1(AbstractDefaultAjaxBehavior).getCallbackScript() line: 106	
		return getCallbackScript(false);
/s
AjaxLink$1(AbstractDefaultAjaxBehavior).getCallbackScript(boolean) line: 118	
		return generateCallbackScript("wicketAjaxGet('" + getCallbackUrl(onlyTargetActivePage) +
			"'");
/s
AjaxLink$1(AbstractAjaxBehavior).getCallbackUrl(boolean) line: 107	
		else
		{
			rli = IBehaviorListener.INTERFACE;
[RequestListenerInterface name=IBehaviorListener, method=public abstract void org.apache.wicket.behavior.IBehaviorListener.onRequest()]
		return getComponent().urlFor(this, rli);
/s
OnlyAjaxLinkStudyPage$1(Component).urlFor(IBehavior, RequestListenerInterface) line: 3427	
this	OnlyAjaxLinkStudyPage$1  (id=5649)	
		return getRequestCycle().urlFor(this, behaviour, listener);
/s
WebRequestCycle(RequestCycle).urlFor(Component, IBehavior, RequestListenerInterface) line: 881	
/=
	public final CharSequence urlFor(final Component component, final IBehavior behaviour,
		final RequestListenerInterface listener)
component	OnlyAjaxLinkStudyPage$1  (id=5649)	
behaviour	AjaxLink$1  (id=5656)	
listener	IBehaviorListener$1  (id=5694)	

		int index = component.getBehaviorsRawList().indexOf(behaviour);

/ Intermezzo

	WebRequestCycle(RequestCycle).urlFor(Component, IBehavior, RequestListenerInterface) line: 881	
	OnlyAjaxLinkStudyPage$1(Component).urlFor(IBehavior, RequestListenerInterface) line: 3427	
	AjaxLink$1(AbstractAjaxBehavior).getCallbackUrl(boolean) line: 124	
	AjaxLink$1(AbstractDefaultAjaxBehavior).getCallbackScript(boolean) line: 118	
	AjaxLink$1(AbstractDefaultAjaxBehavior).getCallbackScript() line: 106	
	AjaxLink$1(AjaxEventBehavior).getEventHandler() line: 132	
	AjaxLink$1(AjaxEventBehavior).onComponentTag(ComponentTag) line: 111	
	AjaxLink$1.onComponentTag(ComponentTag) line: 83	
	AjaxLink$1(AbstractAjaxBehavior).onComponentTag(Component, ComponentTag) line: 134	
	OnlyAjaxLinkStudyPage$1(Component).renderComponentTag(ComponentTag) line: 4305	
	OnlyAjaxLinkStudyPage$1(Component).renderComponent(MarkupStream) line: 2716	
	OnlyAjaxLinkStudyPage$1(MarkupContainer).onRender(MarkupStream) line: 1559	
	OnlyAjaxLinkStudyPage$1(Component).render(MarkupStream) line: 2525	
	OnlyAjaxLinkStudyPage(MarkupContainer).renderNext(MarkupStream) line: 1461	
	...
/ we zijn dus in .onComponentTag	, de tag dus	,

/ Einde Intermezzo

		int index = component.getBehaviorsRawList().indexOf(behaviour);
0
component.getBehaviorsRawList()=[org.apache.wicket.ajax.markup.html.AjaxLink$1@2447885d]

		RequestParameters params = new RequestParameters();
		params.setBehaviorId(String.valueOf(index));
params	RequestParameters  (id=5652)	
	behaviorId	"0" (id=5655)	

			// If we're coming in with an existing depth, use it. Otherwise,
			// compute from the URL. This provides correct behavior for repeated
			// AJAX requests: If we need to generate a URL within an AJAX
			// request for another one, it needs to be at the same depth as the
			// original AJAX request.
			int urlDepth = swr.getRequestParameters().getUrlDepth();
-1
			params.setUrlDepth(urlDepth > -1 ? urlDepth : swr.getDepthRelativeToWicketHandler());
/s
ServletWebRequest.getDepthRelativeToWicketHandler() line: 269	
		return depthRelativeToWicketHandler;
0
/t
		final IRequestTarget target = new BehaviorRequestTarget(component.getPage(), component,
			listener, params);
		return encodeUrlFor(target);
/s
WebRequestCycle(RequestCycle).encodeUrlFor(IRequestTarget) line: 811	
		CharSequence url = getProcessor().getRequestCodingStrategy().encode(this, requestTarget);
/s
WebRequestCodingStrategy.encode(RequestCycle, IRequestTarget) line: 253	
		else if (requestTarget instanceof IListenerInterfaceRequestTarget)
requestTarget	BehaviorRequestTarget  (id=5673)	
				url = encode(requestCycle, (IListenerInterfaceRequestTarget)requestTarget);
/s
WebRequestCodingStrategy.encode(RequestCycle, IListenerInterfaceRequestTarget) line: 968	
		final RequestListenerInterface rli = requestTarget.getRequestListenerInterface();
rli	IBehaviorListener$1  (id=5632)	
[RequestListenerInterface name=IBehaviorListener, method=public abstract void org.apache.wicket.behavior.IBehaviorListener.onRequest()]

/ Intermezzo

public interface IBehaviorListener extends IRequestListener
{
	public static final RequestListenerInterface INTERFACE = new RequestListenerInterface( IBehaviorListener.class)
/ (*)
	{
		@Override
/ (**)
		public IRequestTarget newRequestTarget(Page page, Component component, RequestListenerInterface listener, RequestParameters requestParameters)
		{
			return new BehaviorRequestTarget(page, component, listener, requestParameters);
		}
	};
	void onRequest();
}

/ (*) ctor call	,

public class RequestListenerInterface
{
	public RequestListenerInterface(final Class<? extends IRequestListener> listenerInterfaceClass,
		boolean recordsPageVersion)
	{
		final Method[] methods = listenerInterfaceClass.getMethods();

		// If there is only one method
		if (methods.length == 1)
		{
			// and that method takes no parameters
			if (methods[0].getParameterTypes().length == 0)
			{
				method = methods[0];

		name = Classes.simpleName(listenerInterfaceClass);

/ (**) overwrites die uit RequestListenerInterface	, 
/ Waar called	?
/ TODO

/ Einde Intermezzo

		final RequestListenerInterface rli = requestTarget.getRequestListenerInterface();
rli	IBehaviorListener$1  (id=5646)	
[RequestListenerInterface name=IBehaviorListener, method=public abstract void org.apache.wicket.behavior.IBehaviorListener.onRequest()]
/ IBehaviorListener$1 is de INTERFACE	, een RequestListenerInterface inst	,
/ rli heeft een Method, IBehaviorListener.onRequest	, deze wordt later called op een component (TODO)

		// Start string buffer for url
		final AppendingStringBuffer url = new AppendingStringBuffer(64);
		url.append('?');
		url.append(INTERFACE_PARAMETER_NAME);
		url.append('=');
?wicket:interface=

		final Component component = requestTarget.getTarget();
component	OnlyAjaxLinkStudyPage$1  (id=5621)	
[MarkupContainer [Component id = link]]

		// Add listener interface
		final String listenerName = rli.getName();
IBehaviorListener
		if (!IRedirectListener.INTERFACE.getName().equals(listenerName))
		{
			url.append(listenerName);
		}
		url.append(Component.PATH_SEPARATOR);
?wicket:interface=:1:link::IBehaviorListener:

		// Add behaviourId
		RequestParameters params = requestTarget.getRequestParameters();
		if (params != null && params.getBehaviorId() != null)
		{
			url.append(params.getBehaviorId());
0
/ url=?wicket:interface=:1:link::IBehaviorListener:0:
		return url;
/t
WebRequestCodingStrategy.encode(RequestCycle, IRequestTarget) line: 298	
		else if (requestTarget instanceof IListenerInterfaceRequestTarget)
		{
			if (url == null)
			{
				url = encode(requestCycle, (IListenerInterfaceRequestTarget)requestTarget);
/d
			CharSequence encoded = requestCycle.getOriginalResponse().encodeURL(result);
			return encoded;
?wicket:interface=:1:link::IBehaviorListener:0:
/t
WebRequestCycle(RequestCycle).urlFor(Component, IBehavior, RequestListenerInterface) line: 903	
		return encodeUrlFor(target);
/d
/t
OnlyAjaxLinkStudyPage$1(Component).urlFor(IBehavior, RequestListenerInterface) line: 3427	
/=
	public final CharSequence urlFor(final IBehavior behaviour,
		final RequestListenerInterface listener)
this	OnlyAjaxLinkStudyPage$1  (id=5635)	
behaviour	AjaxLink$1  (id=5634)	
listener	IBehaviorListener$1  (id=5646)	
	{
		return getRequestCycle().urlFor(this, behaviour, listener);
/d
/t
AjaxLink$1(AbstractAjaxBehavior).getCallbackUrl(boolean) line: 124	
/=
	public CharSequence getCallbackUrl(final boolean onlyTargetActivePage)
this	AjaxLink$1  (id=5634)	
rli	IBehaviorListener$1  (id=5646)	
onlyTargetActivePage	false	
		return getComponent().urlFor(this, rli);
/d
/t
AjaxLink$1(AbstractDefaultAjaxBehavior).getCallbackScript(boolean) line: 118	
		return generateCallbackScript("wicketAjaxGet('" + getCallbackUrl(onlyTargetActivePage) +
			"'");
/d
/s
AjaxLink$1(AjaxEventBehavior).generateCallbackScript(CharSequence) line: 143	
/=
	protected CharSequence generateCallbackScript(CharSequence partialCall)
partialCall	"wicketAjaxGet('?wicket:interface=:1:link::IBehaviorListener:0:'" (id=5732)	
		CharSequence script = super.generateCallbackScript(partialCall);
/s
AjaxLink$1(AbstractDefaultAjaxBehavior).generateCallbackScript(CharSequence) line: 169	
		final CharSequence onSuccessScript = getSuccessScript();
null
		final CharSequence onFailureScript = getFailureScript();
null
		final CharSequence precondition = getPreconditionScript();
/s
			return "return Wicket.$('" + getComponent().getMarkupId() + "') != null;";
getComponent().getMarkupId()="link4"

		final IAjaxCallDecorator decorator = getAjaxCallDecorator();
/s
AjaxLink$1.getAjaxCallDecorator() line: 74	
/=
	public AjaxLink(final String id, final IModel<T> model)
	{
		add(new AjaxEventBehavior("onclick")
		{
			@Override
			protected IAjaxCallDecorator getAjaxCallDecorator()
			{
				return new CancelEventIfNoAjaxDecorator(AjaxLink.this.getAjaxCallDecorator());
/s
/ AjaxLink.this.getAjaxCallDecorator()==null
CancelEventIfNoAjaxDecorator.<init>(IAjaxCallDecorator) line: 55	
		super(delegate);
delegate	null	
/s
		this.delegate = delegate;

/t
AjaxLink$1(AbstractDefaultAjaxBehavior).generateCallbackScript(CharSequence) line: 175	
		final IAjaxCallDecorator decorator = getAjaxCallDecorator();
decorator	CancelEventIfNoAjaxDecorator  (id=5744)	
	delegate	null	

		String indicatorId = findIndicatorId();
/s
AjaxLink$1(AbstractDefaultAjaxBehavior).findIndicatorId() line: 282	
this	AjaxLink$1  (id=5634)	
	component	OnlyAjaxLinkStudyPage$1  (id=5635)	
	event	"onclick" (id=5650)	
		if (getComponent() instanceof IAjaxIndicatorAware)
/ NEE
		if (this instanceof IAjaxIndicatorAware)
/ NEE
		Component parent = getComponent().getParent();
		while (parent != null)
parent	OnlyAjaxLinkStudyPage  (id=5631)	
parent null
		{
			if (parent instanceof IAjaxIndicatorAware)
/ NEE
		return null;
/t
AjaxLink$1(AbstractDefaultAjaxBehavior).generateCallbackScript(CharSequence) line: 177	
		String indicatorId = findIndicatorId();
/d
null
		CharSequence success = (onSuccessScript == null) ? "" : onSuccessScript;
""
		CharSequence failure = (onFailureScript == null) ? "" : onFailureScript;
""
		if (decorator != null)
		{
			success = decorator.decorateOnSuccessScript(success);
""
/ TODO
		if (decorator != null)
		{
			failure = decorator.decorateOnFailureScript(failure);
""
/ TODO
		buff.append("var ").append(IAjaxCallDecorator.WICKET_CALL_RESULT_VAR).append("=");
/ IAjaxCallDecorator.WICKET_CALL_RESULT_VAR="wcall"
var wcall=
		buff.append(partialCall);
var wcall=wicketAjaxGet('?wicket:interface=:1:link::IBehaviorListener:0:'

		// IE 6 breaks if we pass in null for function reference, so we pass in an empty function
		// instead
		buff.append(",function() { ").append(success).append("}.bind(this)");
var wcall=wicketAjaxGet('?wicket:interface=:1:link::IBehaviorListener:0:',function() { }.bind(this)
		buff.append(",function() { ").append(failure).append("}.bind(this)");
var wcall=wicketAjaxGet('?wicket:interface=:1:link::IBehaviorListener:0:',function() { }.bind(this),function() { }.bind(this)

		if (precondition != null)
/ JA
/ = return Wicket.$('link4') != null;
		{
			buff.append(", function() {");
			if (Strings.isEmpty(indicatorId) == false)
/ NEE
			buff.append(precondition);
var wcall=wicketAjaxGet('?wicket:interface=:1:link::IBehaviorListener:0:',function() { }.bind(this),function() { }.bind(this), function() {return Wicket.$('link4') != null;
			buff.append("}.bind(this)");
var wcall=wicketAjaxGet('?wicket:interface=:1:link::IBehaviorListener:0:',function() { }.bind(this),function() { }.bind(this), function() {return Wicket.$('link4') != null;}.bind(this)

		String channel = getChannelName();
null
		buff.append(");");
var wcall=wicketAjaxGet('?wicket:interface=:1:link::IBehaviorListener:0:',function() { }.bind(this),function() { }.bind(this), function() {return Wicket.$('link4') != null;}.bind(this));

		if (decorator != null)
		{
			call = decorator.decorateScript(call);
/s
CancelEventIfNoAjaxDecorator(AjaxPostprocessingCallDecorator).decorateScript(CharSequence) line: 56	
		CharSequence s = (delegate == null) ? script : delegate.decorateScript(script);
var wcall=wicketAjaxGet('?wicket:interface=:1:link::IBehaviorListener:0:',function() { }.bind(this),function() { }.bind(this), function() {return Wicket.$('link4') != null;}.bind(this));
		return postDecorateScript(s);
/s
		return script + "return !" + IAjaxCallDecorator.WICKET_CALL_RESULT_VAR + ";";
/  IAjaxCallDecorator.WICKET_CALL_RESULT_VAR="wcall"
var wcall=wicketAjaxGet('?wicket:interface=:1:link::IBehaviorListener:0:',function() { }.bind(this),function() { }.bind(this), function() {return Wicket.$('link4') != null;}.bind(this));return !wcall;
/t
AjaxLink$1(AbstractDefaultAjaxBehavior).generateCallbackScript(CharSequence) line: 266	
			call = decorator.decorateScript(call);
/d
		return call;
/t
AjaxLink$1(AjaxEventBehavior).generateCallbackScript(CharSequence) line: 144	
		CharSequence script = super.generateCallbackScript(partialCall);
/d
var wcall=wicketAjaxGet('?wicket:interface=:1:link::IBehaviorListener:0:',function() { }.bind(this),function() { }.bind(this), function() {return Wicket.$('link4') != null;}.bind(this));return !wcall;
		return script;
...
/t
AjaxLink$1(AjaxEventBehavior).onComponentTag(ComponentTag) line: 111	
			tag.put(event, escapeAttribute(getEventHandler()));
/d
/ getEventHandler()=var wcall=wicketAjaxGet('?wicket:interface=:1:link::IBehaviorListener:0:',function() { }.bind(this),function() { }.bind(this), function() {return Wicket.$('link4') != null;}.bind(this));return !wcall;
...
/t
OnlyAjaxLinkStudyPage$1(Component).renderComponentTag(ComponentTag) line: 4305	
				for (IBehavior behavior : behaviors)
				{
						behavior.onComponentTag(this, tag);
/d
/ Geen meer,
			// Write the tag
			tag.writeOutput(getResponse(), stripWicketTags, findMarkupStream().getWicketNamespace());
/t
OnlyAjaxLinkStudyPage$1(Component).renderComponent(MarkupStream) line: 2722	
				renderComponentTag(tag);
/d
			if (tag.isOpen())
			{
				// Render the body
				onComponentTagBody(markupStream, tag);
/s
OnlyAjaxLinkStudyPage$1(AbstractLink).onComponentTagBody(MarkupStream, ComponentTag) line: 166	
		// Render the body of the link
		renderComponentTagBody(markupStream, openTag);
/s
OnlyAjaxLinkStudyPage$1(MarkupContainer).renderComponentTagBody(MarkupStream, ComponentTag) line: 1597	
		if ((markupStream != null) && (markupStream.getCurrentIndex() > 0))
		{
			// If the original tag has been changed from open-close to open-body-close,
			// than historically renderComponentTagBody gets called, but actually
			// it shouldn't do anything since there is no body for that tag.
			ComponentTag origOpenTag = (ComponentTag)markupStream.get(markupStream.getCurrentIndex() - 1);
<a wicket:id="link">
			if (origOpenTag.isOpenClose())
/ NEE
OPEN
		// If the open tag requires a close tag
		boolean render = openTag.requiresCloseTag();
true
	if (render == true)
		{
			// Loop through the markup in this container
			while (markupStream.hasMore() && !markupStream.get().closes(openTag))
			{
				// Render markup element. Doing so must advance the markup
				// stream
				final int index = markupStream.getCurrentIndex();
				renderNext(markupStream);
/s
OnlyAjaxLinkStudyPage$1(MarkupContainer).renderNext(MarkupStream) line: 1444	
		// Get the current markup element
		final MarkupElement element = markupStream.get();
[Link0]
		// If it a tag like <wicket..> or <span wicket:id="..." >
		if ((element instanceof ComponentTag) && !markupStream.atCloseTag())
/ NEE
		else
		{
			// Render as raw markup
			getResponse().write(element.toCharSequence());
			markupStream.next();
/t
OnlyAjaxLinkStudyPage$1(MarkupContainer).renderComponentTagBody(MarkupStream, ComponentTag) line: 1625	
			while (markupStream.hasMore() && !markupStream.get().closes(openTag))
			{
				// Render markup element. Doing so must advance the markup
				// stream
				final int index = markupStream.getCurrentIndex();
				renderNext(markupStream);
/d
/ Geen volgende	,
/ WH omdat de volgende </a> is	,
...
/t
OnlyAjaxLinkStudyPage$1(Component).renderComponent(MarkupStream) line: 2729	
			if (tag.isOpen())
			{
				// Render the body
				onComponentTagBody(markupStream, tag);
/d
			if (tag.isOpen())
			{
				if (openTag.isOpen())
				{
					renderClosingComponentTag(markupStream, tag, getRenderBodyOnly());
/s
OnlyAjaxLinkStudyPage$1(Component).renderClosingComponentTag(MarkupStream, ComponentTag, boolean) line: 4585	
openTag	ComponentTag  (id=5654)	
<a wicket:id="link" id="linka" href="#" onclick="var wcall=wicketAjaxGet('?wicket:interface=:3:link::IBehaviorListener:0:',function() { }.bind(this),function() { }.bind(this), function() {return Wicket.$('linka') != null;}.bind(this));return !wcall;">

markupStream	MarkupStream  (id=5645)	
[markup = file:/home/eric/Devel/Java/Tomcat/apache-tomcat-7.0.57/webapps/wicket-testing1.4/WEB-INF/classes/my/own/OnlyAjaxLinkStudyPage.html
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
<a wicket:id="link">[Link0]</a>
<span wicket:id="text"></span>
<span wicket:id="counter"></span>

</body>
</html>, index = 7, current = '</a>' (line 8, column 28)]

		// Tag should be open tag and not openclose tag
		if (openTag.isOpen())
		{
			// If we found a close tag and it closes the open tag, we're good
			if (markupStream.atCloseTag() && markupStream.getTag().closes(openTag))
			{
				// Get the close tag from the stream
				ComponentTag closeTag = markupStream.getTag();
</a>
				// Render the close tag
				if (renderTagOnly == false)
				{
					renderComponentTag(closeTag);
/s
OnlyAjaxLinkStudyPage$1(Component).renderComponentTag(ComponentTag) line: 4267	
		if (!(tag instanceof WicketTag) || !stripWicketTags)
		{
			// Apply behavior modifiers
			List<IBehavior> behaviors = getBehaviors();
[org.apache.wicket.ajax.markup.html.AjaxLink$1@362dd7d9]

			// apply behaviors that are attached to the component tag.
			if (tag.hasBehaviors())
/=
		return behaviors != null;
/ NEE
			// Write the tag
			tag.writeOutput(getResponse(), stripWicketTags, findMarkupStream().getWicketNamespace());
/s
ComponentTag.writeOutput(Response, boolean, String) line: 674	
		response.write("<");

		if (getType() == XmlTag.CLOSE)
		{
			response.write("/");
		response.write(getName());
a
		response.write(">");
...
/t
OnlyAjaxLinkStudyPage$1(Component).render(MarkupStream) line: 2526	
				onRender(markupStream);
/d
/t
OnlyAjaxLinkStudyPage(MarkupContainer).renderNext(MarkupStream) line: 1494	
this	OnlyAjaxLinkStudyPage  (id=5644)	
			// Failed to find it?
			if (component != null)
			{
				component.render(markupStream);
/d
/t
OnlyAjaxLinkStudyPage(MarkupContainer).renderAll(MarkupStream) line: 1576	
		// Loop through the markup in this container
		while (markupStream.hasMore())
		{
			// Element rendering is responsible for advancing markup stream!
			final int index = markupStream.getCurrentIndex();
			renderNext(markupStream);
/d
/ Volgende	, 
/c


/ Einde DEBUG


/ Einde WICKET GET AJAX LINK PAGE

/ DEBUG WICKET CLICK AJAX LINK

/ MORGENOCHTEND

/ Er zijn 2 scripts	,
wicket-ajax.js
wicket-event.js

/ De link is	,
<a wicket:id="link" id="linka" href="#" onclick="var wcall=wicketAjaxGet('?wicket:interface=:3:link::IBehaviorListener:0:',function() { }.bind(this),function() { }.bind(this), function() {return Wicket.$('linka') != null;}.bind(this));return !wcall;">[Link0]</a>

/ Doe search in devtools	, onderin in Console	, Search, Emulation, Rendering	,
/ we zien dat	,
$ vi wicket-ajax.js

2211:function wicketAjaxGet(url, successHandler, failureHandler, precondition, channel) {

	var call = new Wicket.Ajax.Call(url, successHandler, failureHandler, channel);
	
	if (typeof(precondition) != "undefined" && precondition != null) {
		call.request.precondition = precondition;
	}
	
	return call.call();
}

/ we click de link	,
/ s
function wicketAjaxGet(url, successHandler, failureHandler, precondition, channel) {
url:"?wicket:interface=:3:link::IBehaviorListener:0:"
successHandler: function () { [native code] }
failureHandler: function () { [native code] }
precondition: function () { [native code] }
channel:undefined

	var call = new Wicket.Ajax.Call(url, successHandler, failureHandler, channel);
/s
81:Wicket.Class = {
	create: function() {
		return function() {
			this.initialize.apply(this, arguments);


/ want	,
$ vi wicket-ajax.js
Wicket.Ajax.Call = Wicket.Class.create();




/ Einde DEBUG WICKET CLICK AJAX LINK

/ WICKET CLICK AJAX LINK


/ click de link	,

/ we zien	,  

Headers

Remote Address:[::1]:9090
Request URL:http://localhost:9090/wicket-testing1.4/?wicket:interface=:0:link::IBehaviorListener:0:&random=0.9354227818548679
Request Method:GET
Status Code:200 OK

Request Headers

Accept:text/xml
Accept-Encoding:gzip,deflate,sdch
Accept-Language:en-US,en;q=0.8
Connection:keep-alive
Cookie:JSESSIONID=0CF99454E05CDA605E3DE43C70AB9885; visited=yes; JSESSIONID=1llua8yc8hq0d14hmf8vs3f621
Host:localhost:9090
Referer:http://localhost:9090/wicket-testing1.4/
User-Agent:Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.104 Safari/537.36
Wicket-Ajax:true

Query String Parameters

wicket:interface::0:link::IBehaviorListener:0:
random:0.9354227818548679

Response Headers

Cache-Control:no-cache, must-revalidate
Content-Length:245
Content-Type:text/xml;charset=UTF-8
Date:Tue, 11 Aug 2015 05:39:45 GMT
Expires:Mon, 26 Jul 1997 05:00:00 GMT
Pragma:no-cache
Server:Apache-Coyote/1.1

Response

<?xml version="1.0" encoding="UTF-8"?>
<ajax-response>
	<component id="text2"  encoding="wicket1" >
		<![CDATA[<span id="text2">[[]^]^</span>]]>
	</component>
	<component id="counter3" >
		<![CDATA[<span id="counter3">26</span>]]>
	</component>
</ajax-response>

/ DEBUG 

/ Einde DEBUG


/ Einde WICKET CLICK AJAX LINK


/ Einde DEBUG WICKET 1.4 LINKS

/ DEBUG WICKET 7 GET

/ Geef 
localhost:9090/wicket-testing

/s
WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) 

192:		String redirectURL = checkIfRedirectRequired(httpServletRequest);
null
			if (redirectURL == null)
			{
				// No redirect; process the request
				ThreadContext.setApplication(application);
/ Iedere Thread heeft zijn eigen ThreadContext	, en daarin is application set	, 

				WebRequest webRequest = application.createWebRequest(httpServletRequest, filterPath);
/s
WicketApplication(WebApplication).createWebRequest(HttpServletRequest, String) line: 576	
		if (servletRequest.getCharacterEncoding() == null)
/ JA
				else
				{
					String requestEncoding = getRequestCycleSettings().getResponseRequestEncoding();
"UTF-8"
					servletRequest.setCharacterEncoding(requestEncoding);

		WebRequest webRequest = newWebRequest(servletRequest, filterPath);
/s
			return new ServletWebRequest(servletRequest, filterPath);
/s
/**
 * {@link WebRequest} subclass that wraps a {@link HttpServletRequest} object.

	public ServletWebRequest(HttpServletRequest httpServletRequest, String filterPrefix, Url url)
	{
		this.httpServletRequest = httpServletRequest;
httpServletRequest	RequestFacade  (id=4990)	
		this.filterPrefix = filterPrefix;
""
		if (url != null)
/ NEE
		else
		{
			this.url = getContextRelativeUrl(httpServletRequest.getRequestURI(), filterPrefix);
/s
        		return request.getRequestURI();
/ Tomcat's 
"/wicket-testing/"
/t
/s
ServletWebRequest.getContextRelativeUrl(String, String) line: 178	
/ TODO (#,?, ...)
/t
WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 199	
				WebRequest webRequest = application.createWebRequest(httpServletRequest, filterPath);
/d
/ TODO ( we kwamen class tegen met cookie, ... , ServletWebRequest?)

				WebResponse webResponse = application.createWebResponse(webRequest,
					httpServletResponse);
/ TODO

				RequestCycle requestCycle = application.createRequestCycle(webRequest, webResponse);
/s
WicketApplication(Application).createRequestCycle(Request, Response) line: 1739	
		RequestCycleContext context = new RequestCycleContext(request, response, getRootRequestMapper(), getExceptionMapperProvider().get());
/ container met deze 4 args	,
		RequestCycle requestCycle = getRequestCycleProvider().get(context);
/s
			return new RequestCycle(context);

		requestCycle.getListeners().add(requestCycleListeners);

this	WicketApplication  (id=5191)	
	requestCycleListeners	RequestCycleListenerCollection  (id=5233)	
				[0]	RequestLoggerRequestCycleListener  (id=5265)	

		requestCycle.getListeners().add(new AbstractRequestCycleListener()
			...
		return requestCycle;
/t
WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
				RequestCycle requestCycle = application.createRequestCycle(webRequest, webResponse);
/d
				res = processRequestCycle(requestCycle, webResponse, httpServletRequest,
					httpServletResponse, chain);
/s
WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
		if (!requestCycle.processRequestAndDetach())
/s
RequestCycle.processRequestAndDetach() line: 293	
			result = processRequest();
/s
RequestCycle.processRequest() line: 216	
			set(this);
/s
RequestCycle.set(RequestCycle) line: 97	
		ThreadContext.setRequestCycle(requestCycle);
/ Is nu ook the requestCycle thread local	?
/ TODO
/t
			set(this);
/d
			listeners.onBeginRequest(this);
/ TODO
			IRequestHandler handler = resolveRequestHandler();
/s
RequestCycle.resolveRequestHandler() line: 189	
		return requestMapper.mapRequest(request);

requestMapper	SystemMapper  (id=7132)	
	mappers	CopyOnWriteArrayList<E>  (id=7135)	
[org.apache.wicket.core.request.mapper.BufferedResponseMapper@cb689da,
 org.apache.wicket.RestartResponseAtInterceptPageException$1@2cee2a21,
 org.apache.wicket.UrlResourceReferenceMapper@17ef5986,
 org.apache.wicket.core.request.mapper.ResourceReferenceMapper@ebe9fc5,
 MountedMapper [mountSegments=],
 org.apache.wicket.core.request.mapper.BookmarkableMapper@4eb4613,
 org.apache.wicket.core.request.mapper.PageInstanceMapper@72458bea]

/s
	/**
	 * Searches the registered {@link IRequestMapper}s to find one that can map the {@link Request}.
	 * Each registered {@link IRequestMapper} is asked to provide its compatibility score. Then the
	 * mappers are asked to map the request in order depending on the provided compatibility
	 * score.
	 * <p>
	 * The mapper with highest compatibility score which can map the request is returned.
	 * 
SystemMapper(CompoundRequestMapper).mapRequest(Request) line: 150	

		for (IRequestMapper mapper : mappers)
		{
			int score = mapper.getCompatibilityScore(request);
			list.add(new MapperWithScore(mapper, score));
		Collections.sort(list);

list	ArrayList<E>  (id=7191)	
	elementData	Object[7]  (id=7193)	
		[0]	CompoundRequestMapper$MapperWithScore  (id=7202)	
			compatibilityScore	0	
			mapper	BufferedResponseMapper  (id=7194)	
		[1]	CompoundRequestMapper$MapperWithScore  (id=7204)	
			compatibilityScore	0	
			mapper	RestartResponseAtInterceptPageException$1  (id=7198)	
		[2]	CompoundRequestMapper$MapperWithScore  (id=7205)	
			compatibilityScore	0	
			mapper	BookmarkableMapper  (id=7210)	
		[3]	CompoundRequestMapper$MapperWithScore  (id=7206)	
			compatibilityScore	0	
			mapper	PageInstanceMapper  (id=7211)	
		[4]	CompoundRequestMapper$MapperWithScore  (id=7207)	
			compatibilityScore	-1	
			mapper	ResourceReferenceMapper  (id=7225)	
		[5]	CompoundRequestMapper$MapperWithScore  (id=7208)	
			compatibilityScore	-2147483647	
			mapper	HomePageMapper  (id=7226)	
		[6]	CompoundRequestMapper$MapperWithScore  (id=7209)	
			compatibilityScore	-2147483648	
			mapper	UrlResourceReferenceMapper  (id=7200)	
	size	7	

		for (MapperWithScore mapperWithScore : list)
		{
			IRequestMapper mapper = mapperWithScore.getMapper();
...
mapper	HomePageMapper  (id=7226)	
			IRequestHandler handler = mapper.mapRequest(request);
/s
HomePageMapper(AbstractBookmarkableMapper).mapRequest(Request) line: 346	
		UrlInfo urlInfo = parseRequest(request);
/s
HomePageMapper.parseRequest(Request) line: 84	
		// get canonical url
		final Url url = request.getUrl().canonical();
/ TODO (In url zien we /wicket-testing niet)	,
		if (url.getSegments().size() > 0)
/ NEE
		return super.parseRequest(request);
/s
HomePageMapper(MountedMapper).parseRequest(Request) line: 131	
		Url url = request.getUrl();
/ TODO (In url zien we /wicket-testing niet)	,

		// when redirect to buffer/render is active and redirectFromHomePage returns true
		// check mounted class against the home page class. if it matches let wicket redirect
		// to the mounted URL
		if (redirectFromHomePage() && checkHomePage(url))
/s
HomePageMapper(MountedMapper).checkHomePage(Url) line: 224	
		if (url.getSegments().isEmpty() && url.getQueryParameters().isEmpty())
		{
			// this is home page
			if (getPageClass().equals(getContext().getHomePageClass()))
/ JA
/ want	,
/s
HomePageMapper(MountedMapper).getPageClass() line: 268	
		return pageClassProvider.get();
/s
SystemMapper$HomePageProvider<C>.get() line: 98	
/=
public class SystemMapper extends CompoundRequestMapper
{
	private static class HomePageProvider<C extends IRequestablePage> implements IProvider<Class<C>>
	{
		private final Application application;

		private HomePageProvider(final Application application)
		{
			this.application = application;
		}

		@Override
		public Class<C> get()
		{
->			return (Class<C>) application.getHomePage();
/s
WicketApplication.getHomePage() line: 51	
		return LinkOnlyStudyPage.class;
/ Onze eigen WicketApplication	,

/t
HomePageMapper(MountedMapper).checkHomePage(Url) line: 227	
			if (getPageClass().equals(getContext().getHomePageClass()))
/d
/s
HomePageMapper(AbstractComponentMapper).getContext() line: 47	
		return Application.get().getMapperContext();
/s
WicketApplication(Application).getMapperContext() line: 1653	
		return encoderContext;

this	WicketApplication  (id=5000)	
	encoderContext	DefaultMapperContext  (id=5705)	
/t
/s
DefaultMapperContext.getHomePageClass() line: 125	
		return application.getHomePage();
/s
WicketApplication.getHomePage() line: 51	
		return LinkOnlyStudyPage.class;
/ TODO (Hier waren we net ook)

/t
HomePageMapper(MountedMapper).parseRequest(Request) line: 133	
		if (redirectFromHomePage() && checkHomePage(url))
/d
/ JA
			return new UrlInfo(null, getContext().getHomePageClass(), newPageParameters());
/s
				return Application.get().getMapperContext();
/t
/s
DefaultMapperContext.getHomePageClass() line: 125	
		return application.getHomePage();
/s
WicketApplication.getHomePage() line: 51	
		return LinkOnlyStudyPage.class;
/t
HomePageMapper(MountedMapper).newPageParameters() line: 153	
		return new PageParameters();
/t
AbstractBookmarkableMapper$UrlInfo.<init>(PageComponentInfo, Class<IRequestablePage>, PageParameters) line: 96	
			this.pageComponentInfo = pageComponentInfo;
null
			this.pageParameters = cleanPageParameters(pageParameters);
			this.pageClass = pageClass;
pageClass	Class<T> (my.test.own.LinkOnlyStudyPage) (id=5736)	

/t
HomePageMapper(AbstractBookmarkableMapper).mapRequest(Request) line: 348	
		UrlInfo urlInfo = parseRequest(request);
/d
this	HomePageMapper  (id=5676)	
urlInfo	AbstractBookmarkableMapper$UrlInfo  (id=5744)	
	pageClass	Class<T> (my.test.own.LinkOnlyStudyPage) (id=5736)	
	pageComponentInfo	null	
	pageParameters	null	

		if (urlInfo != null)
		{
			PageComponentInfo info = urlInfo.getPageComponentInfo();
null
			Class<? extends IRequestablePage> pageClass = urlInfo.getPageClass();
pageClass	Class<T> (my.test.own.LinkOnlyStudyPage) (id=5736)	
			PageParameters pageParameters = urlInfo.getPageParameters();
null
			if (info == null)
			{
				// if there are is no page instance information
				// then this is a simple bookmarkable URL
				return processBookmarkable(pageClass, pageParameters);
/s
	/**
	 * Creates a {@code IRequestHandler} that processes a bookmarkable request.
	 * 
HomePageMapper(AbstractBookmarkableMapper).processBookmarkable(Class<IRequestablePage>, PageParameters) line: 238	
		PageProvider provider = new PageProvider(pageClass, pageParameters);
/s
PageProvider.<init>(Class<IRequestablePage>, PageParameters) line: 123	
		setPageClass(pageClass);
/s
			this.pageClass = pageClass;

		if (pageParameters != null)
/ NEE
		pageId = null;
		renderCount = null;
/t
HomePageMapper(AbstractBookmarkableMapper).processBookmarkable(Class<IRequestablePage>, PageParameters) line: 238	
		PageProvider provider = new PageProvider(pageClass, pageParameters);
/d
		provider.setPageSource(getContext());
/s
/ getContext()=
			return Application.get().getMapperContext();
/t
/s
			this.pageSource = pageSource;
pageSource	DefaultMapperContext  (id=5705)	

/t
HomePageMapper(AbstractBookmarkableMapper).processBookmarkable(Class<IRequestablePage>, PageParameters) line: 238	
		PageProvider provider = new PageProvider(pageClass, pageParameters);
		provider.setPageSource(getContext());
/d
		return new RenderPageRequestHandler(provider);
/s
/**
 * {@link IRequestHandler} that renders page instance. Depending on the <code>redirectPolicy</code>
 * flag and current request strategy the handler either just renders the page to the response, or
 * redirects to render the page. <code>REDIRECT_TO_BUFFER</code> strategy is also supported.
	/**
	 * Construct. Renders the page with a redirect if necessary.

RenderPageRequestHandler.<init>(IPageProvider) line: 90	
		this(pageProvider, RedirectPolicy.AUTO_REDIRECT);

/t
SystemMapper(CompoundRequestMapper).mapRequest(Request) line: 151	
			IRequestHandler handler = mapper.mapRequest(request);
				return handler;
/t
RequestCycle.processRequest() line: 220	
			IRequestHandler handler = resolveRequestHandler();
/d
handler	RenderPageRequestHandler  (id=5789)	
				execute(handler);
/s
RequestCycle.execute(IRequestHandler) line: 260	
			requestHandlerExecutor.execute(handler);
/s
RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 58	
		final boolean first = requestHandlers.isEmpty();
true
		requestHandlers.add(handler);
			respond(handler);
/s
RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 834	
			Response originalResponse = getResponse();
/s
				return activeResponse;

this	RequestCycle  (id=5623)	
	activeResponse	HeaderBufferingWebResponse  (id=5609)	

/t
RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 837	
			Response originalResponse = getResponse();
/d
				handler.respond(RequestCycle.this);
/s
RenderPageRequestHandler.respond(IRequestCycle) line: 174	
		PageRenderer renderer = Application.get().getPageRendererProvider().get(this);
/s
WebApplication$WebPageRendererProvider.get(RenderPageRequestHandler) line: 1021	
			return new WebPageRenderer(handler);
/t
RenderPageRequestHandler.respond(IRequestCycle) line: 175	
		PageRenderer renderer = Application.get().getPageRendererProvider().get(this);
/d
renderer	WebPageRenderer  (id=5815)	

		renderer.respond((RequestCycle)requestCycle);
/s
WebPageRenderer.respond(RequestCycle) line: 185	
		Url currentUrl = requestCycle.getUrlRenderer().getBaseUrl();
/s
RequestCycle.getUrlRenderer() line: 177	
		if (urlRenderer == null)
		{
			urlRenderer = newUrlRenderer();
/s
				return new UrlRenderer(getRequest());
/s
UrlRenderer.<init>(Request) line: 61	
		this.request = request;
request	ServletWebRequest  (id=5009)	
		baseUrl = request.getClientUrl();
/s
ServletWebRequest.getClientUrl() line: 147	
		else if (!isAjax())
		{
			return getContextRelativeUrl(httpServletRequest.getRequestURI(), filterPrefix);
/ httpServletRequest.getRequestURI()="/wicket-testing/"
/s
ServletWebRequest.getContextRelativeUrl(String, String) line: 186	
/=
	private Url getContextRelativeUrl(String uri, String filterPrefix)
/ uri="/wicket-testing/"
	{
		StringBuilder url = new StringBuilder();
		...
		String contextPath = httpServletRequest.getContextPath();
"/wicket-testing"
		final int start = contextPath.length() + filterPrefix.length() + 1;
/ 1 WH voor de /
		...
/ Bij url zou append de substring van uri na "/wicket-testing/"	 en de req params ?...
/ TODO (Wat is dan url	, "/wicket-testing/" zit er niet bij)

		return setParameters(Url.parse(url.toString(), getCharset(), false));
/s
Url.parse(CharSequence, Charset, boolean) line: 222	

/ Dit is een wicket class method	,
/ TODO

/t
WebPageRenderer.respond(RequestCycle) line: 186	
		Url currentUrl = requestCycle.getUrlRenderer().getBaseUrl();
/d
		Url targetUrl = requestCycle.mapUrlFor(getRenderPageRequestHandler());
/s
	/**
	 * Returns URL for the request handler or <code>null</code> if the handler couldn't have been
	 * encoded.
	 * <p>
	 * <strong>Note</strong>: The produced URL is relative to the filter path. Application code most
	 * probably need URL relative to the currently used page, for this use
	 * {@linkplain #urlFor(org.apache.wicket.request.IRequestHandler)}
	 * </p>
	 * 
RequestCycle.mapUrlFor(IRequestHandler) line: 434	

		final Url url = requestMapper.mapHandler(handler);
handler	RenderPageRequestHandler  (id=5789)	
/s
SystemMapper(CompoundRequestMapper).mapHandler(IRequestHandler) line: 211	

/ Intermezzo

/ Eerder waren we in 	,
	public IRequestHandler mapRequest(final Request request)

/ Einde Intermezzo

		for (IRequestMapper mapper : mappers)
		{
			Url url = mapper.mapHandler(handler);
mapper	HomePageMapper  (id=5676)	
/s
HomePageMapper(MountedMapper).mapHandler(IRequestHandler) line: 159	

		Url url = super.mapHandler(requestHandler);
requestHandler	RenderPageRequestHandler  (id=5789)	
/s
HomePageMapper(AbstractBookmarkableMapper).mapHandler(IRequestHandler) line: 396	

		else if (requestHandler instanceof RenderPageRequestHandler)
		{
			// possibly hybrid URL - bookmarkable URL with page instance information
			// but only allowed if the page was created by bookmarkable URL

			RenderPageRequestHandler handler = (RenderPageRequestHandler)requestHandler;

			if (handler.getPageProvider().isNewPageInstance())
/s
	/**
	 * The page instance is new only if there is no cached instance or the data stores doesn't have
	 * a page with that id with the same {@linkplain #pageClass}.
	 * 
	 * @see IPageProvider#isNewPageInstance()
	 */
PageProvider.isNewPageInstance() line: 205	
	{
		boolean isNew = pageInstance == null;
		if (isNew && pageId != null)
/ NEE
pageId=null
		{
			IRequestablePage storedPageInstance = getStoredPage(pageId);
/ NIET
		return isNew;
true
/t
HomePageMapper(AbstractBookmarkableMapper).mapHandler(IRequestHandler) line: 432	
			if (handler.getPageProvider().isNewPageInstance())
JA
/d
			{
				// no existing page instance available, don't bother creating new page instance
				PageInfo info = new PageInfo();
info.pageId=null
				UrlInfo urlInfo = new UrlInfo(new PageComponentInfo(info, null),
					handler.getPageClass(), handler.getPageParameters());
/s
PageComponentInfo.<init>(PageInfo, ComponentInfo) line: 47	
		this.pageInfo = pageInfo;
pageInfo.pageId=null
		this.componentInfo = componentInfo;
null
/t
/ handler.getPageClass(), handler.getPageParameters()	,  calls (handler=RenderPageRequestHandler)'s pageProvider's getPageClass(),getPageParameters()	,
/s
AbstractBookmarkableMapper$UrlInfo.<init>(PageComponentInfo, Class<IRequestablePage>, PageParameters) line: 97	
			this.pageComponentInfo = pageComponentInfo;

pageComponentInfo	PageComponentInfo  (id=5893)	
	componentInfo	null	
	pageInfo	PageInfo  (id=5892)	
		pageId	null	

			this.pageParameters = cleanPageParameters(pageParameters);
null
			this.pageClass = pageClass;
pageClass	Class<T> (my.test.own.LinkOnlyStudyPage) (id=5736)	

/t
HomePageMapper(AbstractBookmarkableMapper).mapHandler(IRequestHandler) line: 436	
				UrlInfo urlInfo = new UrlInfo(new PageComponentInfo(info, null),
					handler.getPageClass(), handler.getPageParameters());
/d
				return buildUrl(urlInfo);
/s
HomePageMapper(MountedMapper).buildUrl(AbstractBookmarkableMapper$UrlInfo) line: 198	
		Url url = new Url();
		for (String s : mountSegments)
/ GEEN	,
		encodePageComponentInfo(url, info.getPageComponentInfo());
/ NIETS
		PageParameters copy = new PageParameters(info.getPageParameters());
		if (setPlaceholders(copy, url) == false)
/ NEE, setPlaceHolders doet NIETS	,
		return encodePageParameters(url, copy, pageParametersEncoder);
/s
HomePageMapper(AbstractMapper).encodePageParameters(Url, PageParameters, IPageParametersEncoder) line: 192	
		Url parametersUrl = encoder.encodePageParameters(pageParameters);
/s
PageParametersEncoder.encodePageParameters(PageParameters) line: 59	
		Url url = new Url();
		return url;
/t
HomePageMapper(AbstractMapper).encodePageParameters(Url, PageParameters, IPageParametersEncoder) line: 192	
		Url parametersUrl = encoder.encodePageParameters(pageParameters);
		if (parametersUrl != null)
		{
			// copy the url
			url = new Url(url);

		return url;
...
/t
HomePageMapper(MountedMapper).mapHandler(IRequestHandler) line: 161	
		Url url = super.mapHandler(requestHandler);
/d
		if (url == null && requestHandler instanceof ListenerInterfaceRequestHandler &&
			getRecreateMountedPagesAfterExpiry())
/ NEE
		return url;
/t
SystemMapper(CompoundRequestMapper).mapHandler(IRequestHandler) line: 214	
this	SystemMapper  (id=5020)	
		for (IRequestMapper mapper : mappers)
		{
			Url url = mapper.mapHandler(handler);

mapper	HomePageMapper  (id=5030)	
handler	RenderPageRequestHandler  (id=5034)	
url	Url  (id=5650)	

			if (url != null)
			{
				return url;
/t
RequestCycle.mapUrlFor(IRequestHandler) line: 435	
		final Url url = requestMapper.mapHandler(handler);
/d
		listeners.onUrlMapped(this, handler, url);
/ TODO
		return url;
/t
WebPageRenderer.respond(RequestCycle) line: 193	

		Url currentUrl = requestCycle.getUrlRenderer().getBaseUrl();
		Url targetUrl = requestCycle.mapUrlFor(getRenderPageRequestHandler());
/d
		//
		// the code below is little hairy but we have to handle 3 redirect policies,
		// 3 rendering strategies and two kind of requests (ajax and normal)
		//
		if (shouldRenderPageAndWriteResponse(requestCycle, currentUrl, targetUrl))
/s
WebPageRenderer.shouldRenderPageAndWriteResponse(RequestCycle, Url, Url) line: 329	
		return 	(compatibleProtocols(currentUrl.getProtocol(), targetUrl.getProtocol())) && 
true
				(
					neverRedirect(getRedirectPolicy()) || 
false (AUTO_REDIRECT)
					(	(isOnePassRender() && notForcedRedirect(getRedirectPolicy())) || 
false && true (AUTO_REDIRECT)
						(
							targetUrl.equals(currentUrl) && 
true
							notNewAndNotStatelessPage(isNewPageInstance(),isPageStateless())
true ( (false,false) )
						)
			    	) || 
					(targetUrl.equals(currentUrl) && isRedirectToRender()) || 
true && false
					(shouldPreserveClientUrl(cycle) && notForcedRedirect(getRedirectPolicy()))
false && true (AUTO_REDIRECT)
				);
false

/ we gaven c	, 

	DefaultPageManagerProvider.get(IPageManagerContext) line: 56	
		IDataStore dataStore = newDataStore();

	DefaultPageManagerProvider.get(Object) line: 38	
	WicketApplication(Application).internalGetPageManager() line: 1508	
				if (pageManager == null)
				{
					pageManager = pageManagerProvider.get(getPageManagerContext());

	WicketApplication(Application).fetchCreateAndSetSession(RequestCycle) line: 1681	
			session = newSession(requestCycle.getRequest(), requestCycle.getResponse());
			ThreadContext.setSession(session);
			internalGetPageManager().newSessionCreated();

	Session.get() line: 169	
		Session session = ThreadContext.getSession();
null
		else
		{
			return Application.get().fetchCreateAndSetSession(RequestCycle.get());

	LinkOnlyStudyPage(Component).getSession() line: 1827	
		return Session.get();

	LinkOnlyStudyPage(Page).dirty(boolean) line: 278	
		final IPageManager pageManager = getSession().getPageManager();

	LinkOnlyStudyPage(WebPage).dirty(boolean) line: 324	
		super.dirty(isInitialization);

	LinkOnlyStudyPage(Page).init() line: 717	
		dirty(true);

	LinkOnlyStudyPage(Component).<init>(String, IModel<?>) line: 685	
		init();

	LinkOnlyStudyPage(MarkupContainer).<init>(String, IModel<?>) line: 120	
		super(id, model);

	LinkOnlyStudyPage(Page).<init>(PageParameters, IModel<?>) line: 170	
		super(null, model);

	LinkOnlyStudyPage(Page).<init>() line: 134	
		this(null, null);

	LinkOnlyStudyPage(WebPage).<init>() line: 76	
	LinkOnlyStudyPage.<init>(PageParameters) line: 32	

	NativeConstructorAccessorImpl.newInstance0(Constructor, Object[]) line: not available [native method]	
	NativeConstructorAccessorImpl.newInstance(Object[]) line: 57	
	DelegatingConstructorAccessorImpl.newInstance(Object[]) line: 45	
	Constructor<T>.newInstance(Object...) line: 526	
	DefaultPageFactory.newPage(Constructor<C>, PageParameters) line: 171	
			if (argument != null)
			{
				return constructor.newInstance(argument);

	DefaultPageFactory.newPage(Class<C>) line: 76	
			if (constructor != null)
			{
				PageParameters pp = new PageParameters();
				return processPage(newPage(constructor, pp), pp);

	DefaultMapperContext.newPageInstance(Class<IRequestablePage>, PageParameters) line: 102	
		if (pageParameters == null)
		{
			return application.getPageFactory().newPage(pageClass);

	PageProvider.resolvePageInstance(Integer, Class<IRequestablePage>, PageParameters, Integer) line: 268	
		if (page == null)
		{
			if (pageClass != null)
			{
				page = getPageSource().newPageInstance(pageClass, pageParameters);

	PageProvider.getPageInstance() line: 166	
		if (pageInstance == null)
		{
			resolvePageInstance(pageId, pageClass, pageParameters, renderCount);

	WebPageRenderer(PageRenderer).getPage() line: 78	
		return getPageProvider().getPageInstance();

	WebPageRenderer.isPageStateless() line: 287	
		return getPage().isPageStateless();

	WebPageRenderer.shouldRenderPageAndWriteResponse(RequestCycle, Url, Url) line: 329	
		return (compatibleProtocols(currentUrl.getProtocol(), targetUrl.getProtocol())) &&
				(neverRedirect(getRedirectPolicy())
			|| ((isOnePassRender() && notForcedRedirect(getRedirectPolicy())) || (targetUrl
				.equals(currentUrl) && notNewAndNotStatelessPage(isNewPageInstance(),
				isPageStateless()))) || (targetUrl.equals(currentUrl) && isRedirectToRender())
			|| (shouldPreserveClientUrl(cycle) && notForcedRedirect(getRedirectPolicy())));

	WebPageRenderer.respond(RequestCycle) line: 193	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 837	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	






/t
WebPageRenderer.respond(RequestCycle) line: 201	

		if (shouldRenderPageAndWriteResponse(requestCycle, currentUrl, targetUrl))
/d
/ NEE
		else if (shouldRedirectToTargetUrl(requestCycle, currentUrl, targetUrl))
false
/ want	,
/s
WebPageRenderer.shouldRedirectToTargetUrl(RequestCycle, Url, Url) line: 305	
		return alwaysRedirect(getRedirectPolicy()) //
false (AUTO_REDIRECT)
			|| isRedirectToRender() //
false
			|| (isAjax(cycle) && targetUrl.equals(currentUrl)) //
false && true
			|| (!targetUrl.equals(currentUrl) && (isNewPageInstance() || (isSessionTemporary() && isPageStateless())));
false && (false || (true && false))

/t
WebPageRenderer.respond(RequestCycle) line: 201	
		else if (shouldRedirectToTargetUrl(requestCycle, currentUrl, targetUrl))
/d
/ NEE
		else
		{
			if (isRedirectToBuffer() == false && logger.isDebugEnabled())
/ NEE
true==false && false
			// force creation of possible stateful page to get the final target url
			getPage();
/s
WebPageRenderer(PageRenderer).getPage() line: 78	
		return getPageProvider().getPageInstance();
this	WebPageRenderer  (id=5941)	
/s
			return renderPageRequestHandler.getPageProvider();
/s
				return pageProvider;
/t
/s
PageProvider.getPageInstance() line: 164	
		if (pageInstance == null)
/ NEE
		return pageInstance;
/t
WebPageRenderer.respond(RequestCycle) line: 233	
			// force creation of possible stateful page to get the final target url
			getPage();
/d
			Url beforeRenderUrl = requestCycle.mapUrlFor(getRenderPageRequestHandler());
/s
	/**
	 * Returns URL for the request handler or <code>null</code> if the handler couldn't have been
	 * encoded.
	 * <p>
	 * <strong>Note</strong>: The produced URL is relative to the filter path. Application code most
	 * probably need URL relative to the currently used page, for this use
	 * {@linkplain #urlFor(org.apache.wicket.request.IRequestHandler)}
	 *
RequestCycle.mapUrlFor(IRequestHandler) line: 434	

this	RequestCycle  (id=5934)	
	requestMapper	SystemMapper  (id=5020)	
handler	RenderPageRequestHandler  (id=5939)	

		final Url url = requestMapper.mapHandler(handler);
/s
	/**
	 * Searches the registered {@link IRequestMapper}s to find one that can map the
	 * {@link IRequestHandler}. Each registered {@link IRequestMapper} is asked to map the
	 * {@link IRequestHandler} until a mapper which can map the {@link IRequestHandler} is found or
	 * no more mappers are left.
	 * <p>
	 * The mappers are searched in reverse order as they have been registered. More recently
	 * registered mappers have bigger priority.
	 * 
SystemMapper(CompoundRequestMapper).mapHandler(IRequestHandler) line: 211	
		for (IRequestMapper mapper : mappers)
		{
			Url url = mapper.mapHandler(handler);
mapper	HomePageMapper  (id=5028)	
/s
HomePageMapper(MountedMapper).mapHandler(IRequestHandler) line: 159	
		Url url = super.mapHandler(requestHandler);
/s
HomePageMapper(AbstractBookmarkableMapper).mapHandler(IRequestHandler) line: 396	
		...
		else if (requestHandler instanceof RenderPageRequestHandler)
		{
			if (handler.getPageProvider().isNewPageInstance())
/ NEE
/s
PageProvicer.class
	public boolean isNewPageInstance()
	{
		boolean isNew = pageInstance == null;
		if (isNew && pageId != null)
/ NEE
		return isNew;
/t
HomePageMapper(AbstractBookmarkableMapper).mapHandler(IRequestHandler) line: 396	

			IRequestablePage page = handler.getPage();
/s
RenderPageRequestHandler.getPage() line: 168	
		return pageProvider.getPageInstance();
/s
PageProvider.getPageInstance() line: 164	
		if (pageInstance == null)
/ NEE
		return pageInstance;
/t
HomePageMapper(AbstractBookmarkableMapper).mapHandler(IRequestHandler) line: 441	
			IRequestablePage page = handler.getPage();
/d
			if (checkPageInstance(page) &&
				(!pageMustHaveBeenCreatedBookmarkable() || page.wasCreatedBookmarkable()))
/ JA
pageMustHaveBeenCreatedBookmarkable()={return false;}

				PageInfo info = getPageInfo(handler);
/s
HomePageMapper(AbstractBookmarkableMapper).getPageInfo(IPageRequestHandler) line: 499	
			if (page.isPageStateless() == false)
/s
	/**
	 * Gets whether the page is stateless. Components on stateless page must not render any stateful
	 * urls, and components on stateful page must not render any stateless urls. Stateful urls are
	 * urls, which refer to a certain (current) page instance.
	 * 
LinkOnlyStudyPage(Page).isPageStateless() line: 448	
		if (isBookmarkable() == false)
/ NEE
/ want	,
/s
			return getApplication().getPageFactory().isBookmarkable(getClass());
/s
DefaultPageFactory.isBookmarkable(Class<C>) line: 244	
		Boolean bookmarkable = pageToBookmarkableCache.get(pageClass.getName());
true
		return bookmarkable;
/t
LinkOnlyStudyPage(Page).isPageStateless() line: 448	
		if (isBookmarkable() == false)
/ NEE
		if (getStatelessHint() == false)
/ NEE
/ want	,
/s
			return getFlag(FLAG_STATELESS_HINT);
true

		if (stateless == null)
/ NEE
stateless==false
/t
HomePageMapper(AbstractBookmarkableMapper).getPageInfo(IPageRequestHandler) line: 501	
			if (page.isPageStateless() == false)
/ Ja
			{
				pageId = page.getPageId();
0
/t
HomePageMapper(AbstractBookmarkableMapper).mapHandler(IRequestHandler) line: 445	
				PageInfo info = getPageInfo(handler);
/d
				PageComponentInfo pageComponentInfo = new PageComponentInfo(info, null);

				UrlInfo urlInfo = new UrlInfo(pageComponentInfo, page.getClass(),
					handler.getPageParameters());
				return buildUrl(urlInfo);
/s
HomePageMapper(MountedMapper).buildUrl(AbstractBookmarkableMapper$UrlInfo) line: 198	
		Url url = new Url();
		for (String s : mountSegments)
/ NEE
		encodePageComponentInfo(url, info.getPageComponentInfo());
/s
HomePageMapper(AbstractComponentMapper).encodePageComponentInfo(Url, PageComponentInfo) line: 106	
		if (info != null)
		{
			String s = info.toString();
"0"
			if (!Strings.isEmpty(s))
			{
				QueryParameter parameter = new QueryParameter(s, "");
				url.getQueryParameters().add(parameter);
/ adds to url.parameters	,
/t
HomePageMapper(MountedMapper).buildUrl(AbstractBookmarkableMapper$UrlInfo) line: 198	

		return encodePageParameters(url, copy, pageParametersEncoder);
/ returns url	, met url.paramaters=[0]	, want er zijn geen segments	?  (TODO) , 	see HomePageMapper(AbstractMapper).encodePageParameters(Url, PageParameters, IPageParametersEncoder) line: 208	

/t
HomePageMapper(MountedMapper).mapHandler(IRequestHandler) line: 161	
		Url url = super.mapHandler(requestHandler);
/d
		return url;
/t
RequestCycle.mapUrlFor(IRequestHandler) line: 435	
		final Url url = requestMapper.mapHandler(handler);
/d
url.paramaters=[0]
		return url;
/t
WebPageRenderer.respond(RequestCycle) line: 236	
			Url beforeRenderUrl = requestCycle.mapUrlFor(getRenderPageRequestHandler());
/d
			// redirect to buffer
			BufferedWebResponse response = renderPage(beforeRenderUrl, requestCycle);
/s
WebPageRenderer.renderPage(Url, RequestCycle) line: 102	
		// get the page before checking for a scheduled request handler because
		// the page may call setResponsePage in its constructor
		IRequestablePage requestablePage = getPage();
[Page class = my.test.own.LinkOnlyStudyPage, id = 0, render count = 0]
/ want	,
/s
			return getPageProvider().getPageInstance();
/t
WebPageRenderer.renderPage(Url, RequestCycle) line: 102	
		IRequestHandler scheduled = requestCycle.getRequestHandlerScheduledAfterCurrent();
/s
			return requestHandlerExecutor.next();
/s
				return scheduledAfterCurrent;
null
/t
WebPageRenderer.renderPage(Url, RequestCycle) line: 106	
		IRequestHandler scheduled = requestCycle.getRequestHandlerScheduledAfterCurrent();
		if (scheduled != null)
/ NEE
		// keep the original response
		final WebResponse originalResponse = (WebResponse)requestCycle.getResponse();
/s
			return activeResponse;
/t
WebPageRenderer.renderPage(Url, RequestCycle) line: 106	
		// buffered web response for page
		BufferedWebResponse response = new BufferedWebResponse(originalResponse);

		// keep the original base URL
		Url originalBaseUrl = requestCycle.getUrlRenderer().setBaseUrl(targetUrl);

		try
		{
			requestCycle.setResponse(response);
			requestablePage.renderPage();
/s
LinkOnlyStudyPage(Page).renderPage() line: 1014	
		// page id is frozen during the render
		final boolean frozen = setFreezePageId(true);
/s
LinkOnlyStudyPage(Page).setFreezePageId(boolean) line: 257	
		boolean frozen = getFlag(FLAG_PREVENT_DIRTY);
false
		setFlag(FLAG_PREVENT_DIRTY, freeze);
		return frozen;
/t
LinkOnlyStudyPage(Page).renderPage() line: 1014	
		// page id is frozen during the render
		final boolean frozen = setFreezePageId(true);
false
		try
		{
			++renderCount;
			render();
/s
LinkOnlyStudyPage(Component).render() line: 2288	
			// Invoke prepareForRender only if this is the root component to be rendered
			MarkupContainer parent = getParent();
null
			if ((parent == null) || (parent.getFlag(FLAG_RENDERING) == false) || isAuto())
			{
				internalPrepareForRender(true);
/s
LinkOnlyStudyPage(Page).internalPrepareForRender(boolean) line: 242	
		super.internalPrepareForRender(setRenderingFlag);
/s
	 * Prepares the component and it's children for rendering. On whole page render this method must
	 * be called on the page. On AJAX request, this method must be called on the updated component.
	 * 
LinkOnlyStudyPage(Component).internalPrepareForRender(boolean) line: 2207	
		beforeRender();
/s
LinkOnlyStudyPage(Component).beforeRender() line: 982	
		else
		{
			internalBeforeRender();
/s
LinkOnlyStudyPage(Component).internalBeforeRender() line: 940	
		configure();
/s
LinkOnlyStudyPage(Component).configure() line: 1051	
		if (!getRequestFlag(RFLAG_CONFIGURED))
/ JA
		{
			clearEnabledInHierarchyCache();
/s
				setRequestFlag(RFLAG_ENABLED_IN_HIERARCHY_SET, false);
/t
			clearVisibleInHierarchyCache();
/s
				setRequestFlag(RFLAG_VISIBLE_IN_HIERARCHY_SET, false);
/t
			onConfigure();
/NIETS
			for (Behavior behavior : getBehaviors())
/ NEE
			// check authorization
			setRenderAllowed();
/s
LinkOnlyStudyPage(Component).setRenderAllowed() line: 4354	
		setRenderAllowed(isActionAuthorized(RENDER));
/s
LinkOnlyStudyPage(Component).isActionAuthorized(Action) line: 2013	
		IAuthorizationStrategy authorizationStrategy = getSession().getAuthorizationStrategy();

/ MORGENOCHTEND WICKET

/ Later	, 
	DefaultPageStore.storePage(String, IManageablePage) line: 61	
	PageStoreManager$PersistentRequestAdapter.storeTouchedPages(List<IManageablePage>) line: 403	
	PageStoreManager$PersistentRequestAdapter(RequestAdapter).commitRequest() line: 172	
	PageStoreManager(AbstractPageManager).commitRequest() line: 76	
	PageAccessSynchronizer$2(PageManagerDecorator).commitRequest() line: 68	
	PageAccessSynchronizer$2.commitRequest() line: 270	
	Application$3.onDetach(RequestCycle) line: 1751	
	RequestCycleListenerCollection$3.notify(IRequestCycleListener) line: 105	
	RequestCycleListenerCollection$3.notify(Object) line: 101	
	ListenerCollection$1.notify(T) line: 120	
	RequestCycleListenerCollection(ListenerCollection<T>).reversedNotify(INotifier<T>) line: 144	
	RequestCycleListenerCollection(ListenerCollection<T>).reversedNotifyIgnoringExceptions(INotifier<T>) line: 113	
	RequestCycleListenerCollection.onDetach(RequestCycle) line: 100	
	RequestCycle.onDetach() line: 645	
	RequestCycle.detach() line: 594	
	RequestCycle.processRequestAndDetach() line: 297	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	


/ en later	,
	JavaSerializer.serialize(Object) line: 72	
	DefaultPageStore(AbstractPageStore).serializePage(IManageablePage) line: 133	
	DefaultPageStore.createSerializedPage(String, IManageablePage) line: 281	
	DefaultPageStore.storePage(String, IManageablePage) line: 61	
	PageStoreManager$PersistentRequestAdapter.storeTouchedPages(List<IManageablePage>) line: 403	
	PageStoreManager$PersistentRequestAdapter(RequestAdapter).commitRequest() line: 172	
	PageStoreManager(AbstractPageManager).commitRequest() line: 76	
	PageAccessSynchronizer$2(PageManagerDecorator).commitRequest() line: 68	
	PageAccessSynchronizer$2.commitRequest() line: 270	
	Application$3.onDetach(RequestCycle) line: 1751	
	RequestCycleListenerCollection$3.notify(IRequestCycleListener) line: 105	
	RequestCycleListenerCollection$3.notify(Object) line: 101	
	ListenerCollection$1.notify(T) line: 120	
	RequestCycleListenerCollection(ListenerCollection<T>).reversedNotify(INotifier<T>) line: 144	
	RequestCycleListenerCollection(ListenerCollection<T>).reversedNotifyIgnoringExceptions(INotifier<T>) line: 113	
	RequestCycleListenerCollection.onDetach(RequestCycle) line: 100	
	RequestCycle.onDetach() line: 645	
	RequestCycle.detach() line: 594	
	RequestCycle.processRequestAndDetach() line: 297	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ eerder of later	,

	Application$1.onInstantiation(Component) line: 280	
	ComponentInstantiationListenerCollection$1.notify(IComponentInstantiationListener) line: 38	
	ComponentInstantiationListenerCollection$1.notify(Object) line: 34	
	ComponentInstantiationListenerCollection(ListenerCollection<T>).notify(INotifier<T>) line: 80	
	ComponentInstantiationListenerCollection.onInstantiation(Component) line: 33	
	LinkOnlyStudyPage(Component).<init>(String, IModel<?>) line: 687	
	LinkOnlyStudyPage(MarkupContainer).<init>(String, IModel<?>) line: 120	
	LinkOnlyStudyPage(Page).<init>(PageParameters, IModel<?>) line: 170	
	LinkOnlyStudyPage(Page).<init>() line: 134	
	LinkOnlyStudyPage(WebPage).<init>() line: 76	
	LinkOnlyStudyPage.<init>(PageParameters) line: 32	
	NativeConstructorAccessorImpl.newInstance0(Constructor, Object[]) line: not available [native method]	
	NativeConstructorAccessorImpl.newInstance(Object[]) line: 57	
	DelegatingConstructorAccessorImpl.newInstance(Object[]) line: 45	
	Constructor<T>.newInstance(Object...) line: 526	
	DefaultPageFactory.newPage(Constructor<C>, PageParameters) line: 171	
	DefaultPageFactory.newPage(Class<C>) line: 76	
	DefaultMapperContext.newPageInstance(Class<IRequestablePage>, PageParameters) line: 102	
	PageProvider.resolvePageInstance(Integer, Class<IRequestablePage>, PageParameters, Integer) line: 268	
	PageProvider.getPageInstance() line: 166	
	WebPageRenderer(PageRenderer).getPage() line: 78	
	WebPageRenderer.isPageStateless() line: 287	
	WebPageRenderer.shouldRenderPageAndWriteResponse(RequestCycle, Url, Url) line: 329	
	WebPageRenderer.respond(RequestCycle) line: 193	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 837	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ later	,

/ .onComponentTag	,

	EnclosureHandler.onComponentTag(ComponentTag) line: 103	
	EnclosureHandler(AbstractMarkupFilter).nextElement() line: 96	
	InlineEnclosureHandler(AbstractMarkupFilter).nextElement() line: 91	
	ConditionalCommentFilter(AbstractMarkupFilter).nextElement() line: 91	
	WicketContainerTagHandler(AbstractMarkupFilter).nextElement() line: 91	
	RelativePathPrefixHandler(AbstractMarkupFilter).nextElement() line: 91	
	StyleAndScriptIdentifier(AbstractMarkupFilter).nextElement() line: 91	
	MarkupFactory$1(AbstractMarkupParser).getNextTag() line: 215	
	MarkupFactory$1(AbstractMarkupParser).parseMarkup() line: 230	
	MarkupFactory$1(AbstractMarkupParser).parse() line: 183	
	SimpleMarkupLoader.loadMarkup(MarkupContainer, MarkupResourceStream, IMarkupLoader, boolean) line: 51	
	InheritedMarkupMarkupLoader.loadMarkup(MarkupContainer, MarkupResourceStream, IMarkupLoader, boolean) line: 57	
	DefaultMarkupLoader.loadMarkup(MarkupContainer, MarkupResourceStream, IMarkupLoader, boolean) line: 52	
	MarkupFactory.loadMarkup(MarkupContainer, MarkupResourceStream, boolean) line: 412	
	MarkupCache.loadMarkup(MarkupContainer, MarkupResourceStream, boolean) line: 447	
	MarkupCache.loadMarkupAndWatchForChanges(MarkupContainer, MarkupResourceStream, boolean) line: 543	
	MarkupCache.getMarkup(MarkupContainer, Class<?>, boolean) line: 304	
	MarkupFactory.getMarkup(MarkupContainer, Class<?>, boolean) line: 236	
	MarkupFactory.getMarkup(MarkupContainer, boolean) line: 194	
	LinkOnlyStudyPage(MarkupContainer).getAssociatedMarkup() line: 407	
	LinkOnlyStudyPage(MarkupContainer).newDequeueContext() line: 2114	
	LinkOnlyStudyPage(MarkupContainer).dequeue() line: 1982	
	LinkOnlyStudyPage$1(MarkupContainer).dequeue() line: 1991	
	LinkOnlyStudyPage(MarkupContainer).addedComponent(Component) line: 946	
	LinkOnlyStudyPage(MarkupContainer).add(Component...) line: 186	
	LinkOnlyStudyPage.<init>(PageParameters) line: 54	
	NativeConstructorAccessorImpl.newInstance0(Constructor, Object[]) line: not available [native method]	
	NativeConstructorAccessorImpl.newInstance(Object[]) line: 57	
	DelegatingConstructorAccessorImpl.newInstance(Object[]) line: 45	
	Constructor<T>.newInstance(Object...) line: 526	
	DefaultPageFactory.newPage(Constructor<C>, PageParameters) line: 171	
	DefaultPageFactory.newPage(Class<C>) line: 76	
	DefaultMapperContext.newPageInstance(Class<IRequestablePage>, PageParameters) line: 102	
	PageProvider.resolvePageInstance(Integer, Class<IRequestablePage>, PageParameters, Integer) line: 268	
	PageProvider.getPageInstance() line: 166	
	WebPageRenderer(PageRenderer).getPage() line: 78	
	WebPageRenderer.isPageStateless() line: 287	
	WebPageRenderer.shouldRenderPageAndWriteResponse(RequestCycle, Url, Url) line: 329	
		return (compatibleProtocols(currentUrl.getProtocol(), targetUrl.getProtocol())) &&
				(neverRedirect(getRedirectPolicy())
			|| ((isOnePassRender() && notForcedRedirect(getRedirectPolicy())) || (targetUrl
				.equals(currentUrl) && notNewAndNotStatelessPage(isNewPageInstance(),
				isPageStateless()))) || (targetUrl.equals(currentUrl) && isRedirectToRender())
			|| (shouldPreserveClientUrl(cycle) && notForcedRedirect(getRedirectPolicy())));

	WebPageRenderer.respond(RequestCycle) line: 193	
		if (shouldRenderPageAndWriteResponse(requestCycle, currentUrl, targetUrl))
/ NU 
		else
/ EERDER
/ TODO
		{
/ EERDER 
			if (isRedirectToBuffer() == false && logger.isDebugEnabled())

	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
		PageRenderer renderer = Application.get().getPageRendererProvider().get(this);
		renderer.respond((RequestCycle)requestCycle);

	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 837	
			try
			{
				handler.respond(RequestCycle.this);

	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
		try
		{
			respond(handler);

	RequestCycle.execute(IRequestHandler) line: 265	
			requestHandlerExecutor.execute(handler);

	RequestCycle.processRequest() line: 222	
			IRequestHandler handler = resolveRequestHandler();
			if (handler != null)
			{
				execute(handler);

	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ later	,

/ Intermezzo

/ Hier komen we vaak?
/ TODO

WebPageRenderer.respond(RequestCycle) line: 193	
		if (shouldRenderPageAndWriteResponse(requestCycle, currentUrl, targetUrl))
/s
WebPageRenderer.shouldRenderPageAndWriteResponse(RequestCycle, Url, Url) line: 329	

		return 	(compatibleProtocols(currentUrl.getProtocol(), targetUrl.getProtocol())) && 
				(
					neverRedirect(getRedirectPolicy()) || 
					(	(isOnePassRender() && notForcedRedirect(getRedirectPolicy())) || 
						(
							targetUrl.equals(currentUrl) && 
							notNewAndNotStatelessPage(isNewPageInstance(),isPageStateless())
						)
			    	) || 
					(targetUrl.equals(currentUrl) && isRedirectToRender()) || 
					(shouldPreserveClientUrl(cycle) && notForcedRedirect(getRedirectPolicy()))
				);
false
/ want	,
/ TODO
/s
WebPageRenderer.isPageStateless() line: 287	
		return getPage().isPageStateless();
/s
WebPageRenderer(PageRenderer).getPage() line: 78	
		return getPageProvider().getPageInstance();
/s
PageProvider.getPageInstance() line: 166	
		if (pageInstance == null)
		{
			resolvePageInstance(pageId, pageClass, pageParameters, renderCount);
/s
PageProvider.resolvePageInstance(Integer, Class<IRequestablePage>, PageParameters, Integer) line: 268	
		if (page == null)
		{
			if (pageClass != null)
			{
				page = getPageSource().newPageInstance(pageClass, pageParameters);
/s
DefaultMapperContext.newPageInstance(Class<IRequestablePage>, PageParameters) line: 102	
		if (pageParameters == null)
		{
			return application.getPageFactory().newPage(pageClass);
/s
DefaultPageFactory.newPage(Class<C>) line: 76	
		catch (NoSuchMethodException e)
////////////////////////////////////////////////////////
/ e=java.lang.NoSuchMethodException: my.test.own.LinkOnlyStudyPage.<init>()
/ we hebben alleen LinkOnlyStudyPage.<init>(PageParameters)
		{
			// a bit of a hack here..
			Constructor<C> constructor = constructor(pageClass, PageParameters.class);
			if (constructor != null)
			{
				PageParameters pp = new PageParameters();
				return processPage(newPage(constructor, pp), pp);
/s
DefaultPageFactory.newPage(Constructor<C>, PageParameters) line: 171	
			if (argument != null)
			{
				return constructor.newInstance(argument);
/s
LinkOnlyStudyPage.<init>(PageParameters) line: 32	
/=
	public LinkOnlyStudyPage(PageParameters pageParameters) {	
/s
LinkOnlyStudyPage(WebPage).<init>() line: 76	
/s
LinkOnlyStudyPage(Page).<init>() line: 134	
/s
LinkOnlyStudyPage(Page).<init>(PageParameters, IModel<?>) line: 170	
		super(null, model);
/s
LinkOnlyStudyPage(MarkupContainer).<init>(String, IModel<?>) line: 120	
		super(id, model);
/s
LinkOnlyStudyPage(Component).<init>(String, IModel<?>) line: 685	
		setId(id);
null
		init();
/s
LinkOnlyStudyPage(Page).init() line: 708	
		if (isBookmarkable() == false)
/s
LinkOnlyStudyPage(Page).isBookmarkable() line: 411	
		return getApplication().getPageFactory().isBookmarkable(getClass());
/s
DefaultPageFactory.isBookmarkable(Class<C>) line: 272	
		Boolean bookmarkable = pageToBookmarkableCache.get(pageClass.getName());
null
		if (bookmarkable == null)
		{
			try
			{
				if (pageClass.getDeclaredConstructor(new Class[] { }) != null)
/ NEE
				{
					bookmarkable = Boolean.TRUE;
				}
			}
			catch (Exception ignore)
			{
				try
				{
					if (pageClass.getDeclaredConstructor(new Class[] { PageParameters.class }) != null)
/ JA
					{
						bookmarkable = Boolean.TRUE;

			if (bookmarkable == null)
/ NEE
			{
				bookmarkable = Boolean.FALSE;
			}
			Boolean tmpBookmarkable = pageToBookmarkableCache.putIfAbsent(pageClass.getName(), bookmarkable);
 pageToBookmarkableCache={my.test.own.LinkOnlyStudyPage=true}

/t
LinkOnlyStudyPage(Page).init() line: 714	
		if (isBookmarkable() == false)
/ NEE
		{
			setStatelessHint(false);
/ NIET
/ TODO
		// Set versioning of page based on default
		setVersioned(getApplication().getPageSettings().getVersionPagesByDefault());
/s
			setFlag(FLAG_VERSIONED, versioned);
/versioned=true
		// All Pages are born dirty so they get clustered right away
		dirty(true);
/s
LinkOnlyStudyPage(WebPage).dirty(boolean) line: 324	
		super.dirty(isInitialization);
/s
LinkOnlyStudyPage(Page).dirty(boolean) line: 287	

		if (!getFlag(FLAG_IS_DIRTY) && (isVersioned() && pageManager.supportsVersioning() ||

		// we need to get pageId for new page instances even when the page doesn't need
		// versioning, otherwise pages override each other in the page store and back button
		// support is broken
			isInitialization))
		{
			setFlag(FLAG_IS_DIRTY, true);
			setNextAvailableId();
/s
LinkOnlyStudyPage(Page).setNextAvailableId() line: 730	
		setNumericId(getSession().nextPageId());
0

/t
LinkOnlyStudyPage(Page).init() line: 721	
		dirty(true);
/d
		// this is a bit of a dirty hack, but calling dirty(true) results in isStateless called
		// which is bound to set the stateless cache to true as there are no components yet
		stateless = null;


/ later	,

/ CREATE MARKUP

/ set b in Component.onComponentTag	,

Daemon Thread [http-nio-9090-exec-13] (Suspended (entry into method onComponentTag in WicketLinkTagHandler))	
	owns: NioChannel  (id=5891)	
	WicketLinkTagHandler.onComponentTag(ComponentTag) line: 104	
	WicketLinkTagHandler(AbstractMarkupFilter).nextElement() line: 96	
	AutoLabelTagHandler(AbstractMarkupFilter).nextElement() line: 91	
	WicketNamespaceHandler(AbstractMarkupFilter).nextElement() line: 91	
	WicketMessageTagHandler(AbstractMarkupFilter).nextElement() line: 91	
	HtmlHeaderSectionHandler(AbstractMarkupFilter).nextElement() line: 91	
	HeadForceTagIdHandler(AbstractMarkupFilter).nextElement() line: 91	
	OpenCloseTagExpander(AbstractMarkupFilter).nextElement() line: 91	
	OpenCloseTagExpander.nextElement() line: 81	
	EnclosureHandler(AbstractMarkupFilter).nextElement() line: 91	
	InlineEnclosureHandler(AbstractMarkupFilter).nextElement() line: 91	
	ConditionalCommentFilter(AbstractMarkupFilter).nextElement() line: 91	
	WicketContainerTagHandler(AbstractMarkupFilter).nextElement() line: 91	
	RelativePathPrefixHandler(AbstractMarkupFilter).nextElement() line: 91	
	StyleAndScriptIdentifier(AbstractMarkupFilter).nextElement() line: 91	
	MarkupFactory$1(AbstractMarkupParser).getNextTag() line: 215	
	MarkupFactory$1(AbstractMarkupParser).parseMarkup() line: 230	
	MarkupFactory$1(AbstractMarkupParser).parse() line: 183	
	SimpleMarkupLoader.loadMarkup(MarkupContainer, MarkupResourceStream, IMarkupLoader, boolean) line: 51	
	InheritedMarkupMarkupLoader.loadMarkup(MarkupContainer, MarkupResourceStream, IMarkupLoader, boolean) line: 57	
	DefaultMarkupLoader.loadMarkup(MarkupContainer, MarkupResourceStream, IMarkupLoader, boolean) line: 52	
	MarkupFactory.loadMarkup(MarkupContainer, MarkupResourceStream, boolean) line: 412	
	MarkupCache.loadMarkup(MarkupContainer, MarkupResourceStream, boolean) line: 447	
	MarkupCache.loadMarkupAndWatchForChanges(MarkupContainer, MarkupResourceStream, boolean) line: 543	
	MarkupCache.getMarkup(MarkupContainer, Class<?>, boolean) line: 304	
	MarkupFactory.getMarkup(MarkupContainer, Class<?>, boolean) line: 236	
	MarkupFactory.getMarkup(MarkupContainer, boolean) line: 194	
	LinkOnlyStudyPage(MarkupContainer).getAssociatedMarkup() line: 407	
	LinkOnlyStudyPage(MarkupContainer).newDequeueContext() line: 2114	
	LinkOnlyStudyPage(MarkupContainer).dequeue() line: 1982	
	LinkOnlyStudyPage$1(MarkupContainer).dequeue() line: 1991	
	LinkOnlyStudyPage(MarkupContainer).addedComponent(Component) line: 946	
	LinkOnlyStudyPage(MarkupContainer).add(Component...) line: 186	
	LinkOnlyStudyPage.<init>(PageParameters) line: 54	
		IModel<LinkOnlyStudyPage>model=new CompoundPropertyModel<LinkOnlyStudyPage>(this);

		Link<String>link=new Link<String>("link") {
			@Override
			public void onClick() {
				text="["+text+"]";
				counter+=13;
				
			}
			@Override
			protected void onBeforeRender() {
				// TODO Auto-generated method stub
				super.onBeforeRender();
			}
		};	
		Label text=new Label("text");
		Label counter=new Label("counter");		
		

		setDefaultModel(model);
		add(link);

	NativeConstructorAccessorImpl.newInstance0(Constructor, Object[]) line: not available [native method]	
	NativeConstructorAccessorImpl.newInstance(Object[]) line: 57	
	DelegatingConstructorAccessorImpl.newInstance(Object[]) line: 45	
	Constructor<T>.newInstance(Object...) line: 526	
	DefaultPageFactory.newPage(Constructor<C>, PageParameters) line: 171	
	DefaultPageFactory.newPage(Class<C>) line: 76	
	DefaultMapperContext.newPageInstance(Class<IRequestablePage>, PageParameters) line: 102	
	PageProvider.resolvePageInstance(Integer, Class<IRequestablePage>, PageParameters, Integer) line: 268	
				page = getPageSource().newPageInstance(pageClass, pageParameters);

	PageProvider.getPageInstance() line: 166	
	WebPageRenderer(PageRenderer).getPage() line: 78	
	WebPageRenderer.isPageStateless() line: 287	
	WebPageRenderer.shouldRenderPageAndWriteResponse(RequestCycle, Url, Url) line: 329	
		return (compatibleProtocols(currentUrl.getProtocol(), targetUrl.getProtocol())) &&
				(neverRedirect(getRedirectPolicy())
			|| ((isOnePassRender() && notForcedRedirect(getRedirectPolicy())) || (targetUrl
				.equals(currentUrl) && notNewAndNotStatelessPage(isNewPageInstance(),
				isPageStateless()))) || (targetUrl.equals(currentUrl) && isRedirectToRender())
			|| (shouldPreserveClientUrl(cycle) && notForcedRedirect(getRedirectPolicy())));

	WebPageRenderer.respond(RequestCycle) line: 193	
		if (shouldRenderPageAndWriteResponse(requestCycle, currentUrl, targetUrl))

	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 837	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ later	,
/ we zijn nog in	,
/t
WebPageRenderer.shouldRenderPageAndWriteResponse(RequestCycle, Url, Url) line: 329	
		return (compatibleProtocols(currentUrl.getProtocol(), targetUrl.getProtocol())) &&
				(neverRedirect(getRedirectPolicy())
			|| ((isOnePassRender() && notForcedRedirect(getRedirectPolicy())) || (targetUrl
				.equals(currentUrl) && notNewAndNotStatelessPage(isNewPageInstance(),
				isPageStateless()))) || (targetUrl.equals(currentUrl) && isRedirectToRender())
			|| (shouldPreserveClientUrl(cycle) && notForcedRedirect(getRedirectPolicy())));
/s
WebPageRenderer.isPageStateless() line: 287	
		return getPage().isPageStateless();
/ we hebben nu getPage() 	, nu verder	, 
/s
LinkOnlyStudyPage(Page).isPageStateless() line: 465	
		if (stateless == null)
		{
			internalInitialize();
/s
LinkOnlyStudyPage(MarkupContainer).internalInitialize() line: 981	
		super.fireInitialize();
/s
LinkOnlyStudyPage(Component).fireInitialize() line: 877	
		if (!getFlag(FLAG_INITIALIZED))
			onInitialize();
/s
LinkOnlyStudyPage(Page).onInitialize() line: 302	
		final IPageManager pageManager = getSession().getPageManager();
/ getSession()=org.apache.wicket.protocol.http.WebSession@7a5ce247	, 
/ TODO
		pageManager.touchPage(this);

/ later	,
/ we zijn in 
WebPageRenderer.respond(RequestCycle) line: 236	
		if (shouldRenderPageAndWriteResponse(requestCycle, currentUrl, targetUrl))
/ we set b's uit	, en gaan erover heen	,
		else
		{
			// redirect to buffer
			BufferedWebResponse response = renderPage(beforeRenderUrl, requestCycle);
/ en geven c	,

/ we zien de stack trace	,

	LinkOnlyStudyPage$1(Component).isStateless() line: 2072	
		if (!getStatelessHint())

	...
	LinkOnlyStudyPage(Page).isPageStateless() line: 475	
			Component statefulComponent = visitChildren(Component.class,
				new IVisitor<Component, Component>()
				{
					@Override
					public void component(final Component component, final IVisit<Component> visit)
					{
						if (!component.isStateless())

	LinkOnlyStudyPage(Page).peekPageStateless() line: 433	
		Boolean old = stateless;
null
		Boolean res = isPageStateless();

	LinkOnlyStudyPage(Page).onBeforeRender() line: 806	
->		if (getSession().isTemporary() && !peekPageStateless())
		{
			getSession().bind();


	LinkOnlyStudyPage(Component).internalBeforeRender() line: 949	
			onBeforeRender();

	LinkOnlyStudyPage(Component).beforeRender() line: 1017	
		else
		{
			internalBeforeRender();

	LinkOnlyStudyPage(Component).internalPrepareForRender(boolean) line: 2207	
		beforeRender();

	LinkOnlyStudyPage(Page).internalPrepareForRender(boolean) line: 242	
		super.internalPrepareForRender(setRenderingFlag);

	LinkOnlyStudyPage(Component).render() line: 2296	
			if ((parent == null) || (parent.getFlag(FLAG_RENDERING) == false) || isAuto())
			{
				internalPrepareForRender(true);

	LinkOnlyStudyPage(Page).renderPage() line: 1018	
		try
		{
			++renderCount;
			render();

	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
		try
		{
			requestCycle.setResponse(response);
			requestablePage.renderPage();

	WebPageRenderer.respond(RequestCycle) line: 236	
			// redirect to buffer
			BufferedWebResponse response = renderPage(beforeRenderUrl, requestCycle);

/ we stappen er in	,
/s
LinkOnlyStudyPage(Page).onBeforeRender() line: 806	
		// If any of the components on page is not stateless, we need to bind the session
		// before we start rendering components, as then jsessionid won't be appended
		// for links rendered before first stateful component
/ TODO
		if (getSession().isTemporary() && !peekPageStateless())
/s
LinkOnlyStudyPage(Page).peekPageStateless() line: 433	
		Boolean res = isPageStateless();
/s
LinkOnlyStudyPage(Page).isPageStateless() line: 448	
		if (isBookmarkable() == false)
/ NEE
		if (getStatelessHint() == false)
/ NEE
/want	,
/s
			return getFlag(FLAG_STATELESS_HINT);
true
/t
		if (stateless == null)
		{
			internalInitialize();
/ WH NIETS	,
			if (isStateless() == false)
/ NEE
		if (stateless == null)
		{
			Component statefulComponent = visitChildren(Component.class,
				new IVisitor<Component, Component>()
				{
					@Override
					public void component(final Component component, final IVisit<Component> visit)
					{
						if (!component.isStateless())
						{
							visit.stop(component);
						}
					}
				});
/ TODO
			stateless = statefulComponent == null;
false
statefulComponent	my.test.own.LinkOnlyStudyPage$1  (id=5220)	
		return stateless;
/s
LinkOnlyStudyPage(Page).peekPageStateless() line: 435	
		Boolean old = stateless;
null
		Boolean res = isPageStateless();
false
		stateless = old;
null
		return res;
false
/t
LinkOnlyStudyPage(Page).onBeforeRender() line: 808	
		if (getSession().isTemporary() && !peekPageStateless())
/ JA
		{
			getSession().bind();
/s
WebSession(Session).bind() line: 257	
this	org.apache.wicket.protocol.http.WebSession  (id=5224)	
/ TODO (Wanneer created?)

		ISessionStore store = getSessionStore();
		Request request = RequestCycle.get().getRequest();
		if (store.lookup(request) == null)
/ JA
/ want	,
/s
HttpSessionStore.lookup(Request) line: 198	
		String sessionId = getSessionId(request, false);
null
/t
WebSession(Session).bind() line: 267	
		if (store.lookup(request) == null)
/ JA
		{
			// explicitly create a session
			id = store.getSessionId(request, true);
/ Nu is create=true	!
/s
HttpSessionStore.getSessionId(Request, boolean) line: 166	
		else if (create)
		{
			httpSession = getHttpSession(request, true);
/s
HttpSessionStore.getHttpSession(Request, boolean) line: 95	
		return getHttpServletRequest(request).getSession(create);
/s
RequestFacade.getSession(boolean) line: 895	
       } else {
            return request.getSession(create);
 /s
Request.getSession(boolean) line: 2256	
        Session session = doGetSession(create);
/s
Request.doGetSession(boolean) line: 2844	
        // There cannot be a session if no context has been assigned yet
        Context context = getContext();
context	org.apache.catalina.core.StandardContext  (id=5265)	
        // Return the requested session if it exists and is valid
        Manager manager = context.getManager();
manager	org.apache.catalina.session.StandardManager  (id=5266)	

        if (requestedSessionId != null) {
/ JA
this	org.apache.catalina.connector.Request  (id=5263)	
	requestedSessionId	"1llua8yc8hq0d14hmf8vs3f621" (id=5272)	

           try {
                session = manager.findSession(requestedSessionId);
null
/ manager.sessions={}

        // Attempt to reuse session id if one was submitted in a cookie
        // Do not reuse the session id if it is from a URL, to prevent possible
        // phishing attacks
        // Use the SSL session ID if one is present.
        if (("/".equals(context.getSessionCookiePath())
 /NEE	,
context.sessionCookiePath=null
                && isRequestedSessionIdFromCookie()) || requestedSessionSSL ) {
/ TODO

        } else {
            session = manager.createSession(null);
/s
StandardManager(ManagerBase).createSession(String) line: 688	
       // Recycle or create a Session instance
        Session session = createEmptySession();
/s
        	return (getNewSession());
/s
        		return new StandardSession(this);
this	org.apache.catalina.session.StandardManager  (id=5266)	

/t
StandardManager(ManagerBase).createSession(String) line: 700	

        // Recycle or create a Session instance
        Session session = createEmptySession();
/d
        // Initialize the properties of the new session and return it
        session.setNew(true);
/s
        	this.isNew = isNew;
/t
        session.setValid(true);
/s
        	this.isValid = isValid;
/t
        session.setCreationTime(System.currentTimeMillis());
        	this.creationTime = time;
        	this.lastAccessedTime = time;
        	this.thisAccessedTime = time;
/t
        session.setMaxInactiveInterval(this.maxInactiveInterval);
        String id = sessionId;
null
        if (id == null) {
            id = generateSessionId();
C6B00F235710619E6D62C66D4C6925C2
        session.setId(id);
/s
       		this.id = id;
        	if (manager != null)
            	manager.add(this);
/t
        sessionCounter++;
		...
        return (session);
/t
Request.doGetSession(boolean) line: 2902	
        } else {
            session = manager.createSession(null);
/d
       // Creating a new session cookie based on that session
        if (session != null
                && context.getServletContext()
                        .getEffectiveSessionTrackingModes()
[COOKIE,URL]
                        .contains(SessionTrackingMode.COOKIE)) {
/ JA	,
            Cookie cookie =
                ApplicationSessionCookieConfig.createSessionCookie(
                        context, session.getIdInternal(), isSecure());
/ session.getIdInternal()=this.id=C6B00F235710619E6D62C66D4C6925C2
/ isSecure()=this.secure=false (this=org.apachen.cataline.connector.Request)
/s
ApplicationSessionCookieConfig.createSessionCookie(Context, String, boolean) line: 165	
       SessionCookieConfig scc =
            context.getServletContext().getSessionCookieConfig();

        // NOTE: The priority order for session cookie configuration is:
        //       1. Context level configuration
        //       2. Values from SessionCookieConfig
        //       3. Defaults

        Cookie cookie = new Cookie(
                SessionConfig.getSessionCookieName(context), sessionId);
/s
SessionConfig.getSessionCookieName(Context) line: 38	
       String result = getConfiguredSessionCookieName(context);
null
        if (result == null) {
            result = DEFAULT_SESSION_COOKIE_NAME;
JSESSIONID
/t
/s
Cookie.<init>(String, String) line: 119	
=
    public Cookie(String name, String value) {
name	"JSESSIONID" (id=5489)	
value	"C6B00F235710619E6D62C66D4C6925C2" (id=5466)	
/ een cookie heeft een name, en een value	,

/t
ApplicationSessionCookieConfig.createSessionCookie(Context, String, boolean) line: 177	
       Cookie cookie = new Cookie(
                SessionConfig.getSessionCookieName(context), sessionId);

        // Just apply the defaults.
        cookie.setMaxAge(scc.getMaxAge());
-1
        cookie.setComment(scc.getComment());
null

        // Always set httpOnly if the context is configured for that
        if (scc.isHttpOnly() || context.getUseHttpOnly()) {
false || true
            cookie.setHttpOnly(true);

        String contextPath = context.getSessionCookiePath();
null
        if (contextPath == null || contextPath.length() == 0) {
            contextPath = scc.getPath();
null
        if (contextPath == null || contextPath.length() == 0) {
            contextPath = context.getEncodedPath();
"/wicket-testing"
        if (context.getSessionCookiePathUsesTrailingSlash()) {
/ JA
            // Handle special case of ROOT context where cookies require a path of
            // '/' but the servlet spec uses an empty string
            // Also ensure the cookies for a context with a path of /foo don't get
            // sent for requests with a path of /foobar
            if (!contextPath.endsWith("/")) {
                contextPath = contextPath + "/";
        cookie.setPath(contextPath);
"/wicket-testing/"
        return cookie;
/t
Request.doGetSession(boolean) line: 2910	
            Cookie cookie =
                ApplicationSessionCookieConfig.createSessionCookie(
                        context, session.getIdInternal(), isSecure());
/d
cookie	javax.servlet.http.Cookie  (id=5493)	
	serialVersionUID	1	
	validation	javax.servlet.http.NetscapeValidator  (id=5495)	
	comment	null	
	domain	null	
	httpOnly	true	
	maxAge	-1	
	name	"JSESSIONID" (id=5489)	
	path	"/wicket-testing/" (id=5497)	
	secure	false	
	value	"C6B00F235710619E6D62C66D4C6925C2" (id=5466)	
	version	0	

            response.addSessionCookieInternal(cookie);
/s
Response.addSessionCookieInternal(Cookie) line: 927	
        String name = cookie.getName();
JSESSIONID
        final String headername = "Set-Cookie";
        final String startsWith = name + "=";
        String header = generateCookieString(cookie);
/s
Response.generateCookieString(Cookie) line: 959	
       } else {
            return getContext().getCookieProcessor().generateHeader(cookie);
/s
LegacyCookieProcessor.generateHeader(Cookie) line: 295	
        int version = cookie.getVersion();
        String value = cookie.getValue();
        String path = cookie.getPath();
        String domain = cookie.getDomain();
        String comment = cookie.getComment();
version	0	
value	"C6B00F235710619E6D62C66D4C6925C2" (id=5466)	
path	"/wicket-testing/" (id=5497)	
domain	null	
comment	null	

        if (version == 0) {
/ JA
            // Check for the things that require a v1 cookie
            if (needsQuotes(value, 0) || comment != null || needsQuotes(path, 0) || needsQuotes(domain, 0)) {
/ NEE
                version = 1;
/ NIET

        // Now build the cookie header
        StringBuffer buf = new StringBuffer(); // can't use StringBuilder due to DateFormat
        // Just use the name supplied in the Cookie
        buf.append(cookie.getName());
        buf.append("=");

        // Value
        maybeQuote(buf, value, version);
JSESSIONID=C6B00F235710619E6D62C66D4C6925C2

        // Add version 1 specific information
        if (version == 1) {
/ NEE
            // Version=1 ... required
            buf.append ("; Version=1");
/ NIET
            // Comment=comment
            if (comment != null) {
/ NEE
                buf.append ("; Comment=");
/ NIET
                maybeQuote(buf, comment, version);
/ NIET

       // Add domain information, if present
        if (domain != null) {
/ NEE
            buf.append("; Domain=");
/ NIET
            maybeQuote(buf, domain, version);
/ NIET

        int maxAge = cookie.getMaxAge();
        if (maxAge >= 0) {
 /NEE
            if (version > 0) {
                buf.append ("; Max-Age=");
/ NIET
                buf.append (maxAge);
/ NIET

        // Path=path
        if (path!=null) {
/ JA
            buf.append ("; Path=");
            maybeQuote(buf, path, version);
JSESSIONID=C6B00F235710619E6D62C66D4C6925C2; Path=/wicket-testing/

        // Secure
        if (cookie.getSecure()) {
/ NEE
          buf.append ("; Secure");
/ NIET
        }

        // HttpOnly
        if (cookie.isHttpOnly()) {
/ NEE
            buf.append("; HttpOnly");
JSESSIONID=C6B00F235710619E6D62C66D4C6925C2; Path=/wicket-testing/; HttpOnly

/t
Response.addSessionCookieInternal(Cookie) line: 930	
        String header = generateCookieString(cookie);
/d
JSESSIONID=C6B00F235710619E6D62C66D4C6925C2; Path=/wicket-testing/; HttpOnly

        MimeHeaders headers = getCoyoteResponse().getMimeHeaders();
        int n = headers.size();
0
        for (int i = 0; i < n; i++) {
/ NEE
        if (!set) {
            addHeader(headername, header);
headername	"Set-Cookie" (id=5511)	
header	"JSESSIONID=C6B00F235710619E6D62C66D4C6925C2; Path=/wicket-testing/; HttpOnly" (id=5563)	
/s
Response.addHeader(String, String, Charset) line: 1030	
        getCoyoteResponse().addHeader(name, value, charset);
/s
Response.addHeader(String, String, Charset) line: 310	
        MessageBytes mb = headers.addValue(name);
name="Set-Cookie"
/s
MimeHeaders.addValue(String) line: 270	
         MimeHeaderField mh = createHeader();
/s
MimeHeaders.createHeader() line: 262	
this	org.apache.tomcat.util.http.MimeHeaders  (id=5565)	
	count	0	
	headers	org.apache.tomcat.util.http.MimeHeaderField[8]  (id=5567)	
		[0]	org.apache.tomcat.util.http.MimeHeaderField  (id=5568)	
		[1]	org.apache.tomcat.util.http.MimeHeaderField  (id=5569)	
		[2]	org.apache.tomcat.util.http.MimeHeaderField  (id=5570)	
		[3]	org.apache.tomcat.util.http.MimeHeaderField  (id=5571)	
		[4]	org.apache.tomcat.util.http.MimeHeaderField  (id=5572)	
		[5]	org.apache.tomcat.util.http.MimeHeaderField  (id=5573)	
		[6]	org.apache.tomcat.util.http.MimeHeaderField  (id=5574)	
		[7]	null	

        int len = headers.length;
8
       	if ((mh = headers[count]) == null) {
/ NEE
/ Dus pak de 1ste	,
        count++;
1
        return mh;
mh	org.apache.tomcat.util.http.MimeHeaderField  (id=5568)	
	nameB	org.apache.tomcat.util.buf.MessageBytes  (id=5576)	
	valueB	org.apache.tomcat.util.buf.MessageBytes  (id=5577)	

/t
MimeHeaders.addValue(String) line: 271	
        MimeHeaderField mh = createHeader();
/d
        mh.getName().setString(name);
Set-Cookie
        return mh.getValue();
null

/t
Response.addHeader(String, String, Charset) line: 311	
        MessageBytes mb = headers.addValue(name);
/d
        mb.setString(value);
/s
MessageBytes.setString(String) line: 138	
       	strValue=s;
JSESSIONID=C6B00F235710619E6D62C66D4C6925C2; Path=/wicket-testing/; HttpOnly
        hasHashCode=false;
        hasLongValue=false;
        if (s == null) {
/ NEE
        } else {
            hasStrValue=true;
            type=T_STR;

this	org.apache.coyote.Response  (id=5564)	
	headers	org.apache.tomcat.util.http.MimeHeaders  (id=5565)	
		count	1	
		headers	org.apache.tomcat.util.http.MimeHeaderField[8]  (id=5567)	
			[0]	org.apache.tomcat.util.http.MimeHeaderField  (id=5568)	
				nameB	org.apache.tomcat.util.buf.MessageBytes  (id=5576)	
Set-Cookie
				valueB	org.apache.tomcat.util.buf.MessageBytes  (id=5577)	
JSESSIONID=C6B00F235710619E6D62C66D4C6925C2; Path=/wicket-testing/; HttpOnly
			[1]	org.apache.tomcat.util.http.MimeHeaderField  (id=5569)	
			[2]	org.apache.tomcat.util.http.MimeHeaderField  (id=5570)	
			[3]	org.apache.tomcat.util.http.MimeHeaderField  (id=5571)	
			[4]	org.apache.tomcat.util.http.MimeHeaderField  (id=5572)	
			[5]	org.apache.tomcat.util.http.MimeHeaderField  (id=5573)	
			[6]	org.apache.tomcat.util.http.MimeHeaderField  (id=5574)	
			[7]	null	

/t
Request.doGetSession(boolean) line: 2913	
            response.addSessionCookieInternal(cookie);
/d
this	org.apache.catalina.connector.Request  (id=5263)	
	response	org.apache.catalina.connector.Response  (id=5336)	
		coyoteResponse	org.apache.coyote.Response  (id=5564)	
			headers	org.apache.tomcat.util.http.MimeHeaders  (id=5565)	
				count	1	
				headers	org.apache.tomcat.util.http.MimeHeaderField[8]  (id=5567)	
					[0]	org.apache.tomcat.util.http.MimeHeaderField  (id=5568)	
						nameB	org.apache.tomcat.util.buf.MessageBytes  (id=5576)	
Set-Cookie
						valueB	org.apache.tomcat.util.buf.MessageBytes  (id=5577)	
JSESSIONID=C6B00F235710619E6D62C66D4C6925C2; Path=/wicket-testing/; HttpOnly
					[1]	org.apache.tomcat.util.http.MimeHeaderField  (id=5569)	
					[2]	org.apache.tomcat.util.http.MimeHeaderField  (id=5570)	
					[3]	org.apache.tomcat.util.http.MimeHeaderField  (id=5571)	
					[4]	org.apache.tomcat.util.http.MimeHeaderField  (id=5572)	
					[5]	org.apache.tomcat.util.http.MimeHeaderField  (id=5573)	
					[6]	org.apache.tomcat.util.http.MimeHeaderField  (id=5574)	
					[7]	null	

        session.access();
/s
        	this.thisAccessedTime = System.currentTimeMillis();
/t
        return session;
/t
Request.getSession(boolean) line: 2257	
        Session session = doGetSession(create);
/d
session	org.apache.catalina.session.StandardSession  (id=5461)	
        return session.getSession();
/s
        	return (facade);
org.apache.catalina.session.StandardSessionFacade@7ebb06d3
/t
HttpSessionStore.getSessionId(Request, boolean) line: 167	
		else if (create)
		{
			httpSession = getHttpSession(request, true);
/d
org.apache.catalina.session.StandardSessionFacade@7ebb06d3
			id = httpSession.getId();
C6B00F235710619E6D62C66D4C6925C2

		return id;
/t
WebSession(Session).bind() line: 269	
		if (store.lookup(request) == null)
		{
			// explicitly create a session
			id = store.getSessionId(request, true);
/d
			// bind it
			store.bind(request, this);
/ Headers in response	, toen we een sessin aan het maken waren	?
/ TODO
/s
HttpSessionStore.bind(Request, Session) line: 104	
/=
	public final void bind(final Request request, final Session newSession)
/ newSession is C6B00F235710619E6D62C66D4C6925C2	,
		if (getAttribute(request, Session.SESSION_ATTRIBUTE_NAME) != newSession)
/ JA	,
getAttribute(request,"session")==null
			// call template method
			onBind(request, newSession);
/ NIETS
			for (BindListener listener : getBindListeners())
[]
			HttpSession httpSession = getHttpSession(request, false);
/s
				return getHttpServletRequest(request).getSession(create);
/s
       				} else {
            			return request.getSession(create);
create=false
/s
        					Session session = doGetSession(create);
/s
Request.doGetSession(boolean) line: 2864	

this	org.apache.catalina.connector.Request  (id=5263)	
	requestedSessionId	"1llua8yc8hq0d14hmf8vs3f621" (id=5272)	
	session	null	

       Context context = getContext();
        Manager manager = context.getManager();
        if (requestedSessionId != null) {
            try {
                session = manager.findSession(requestedSessionId);
/s
        			return sessions.get(id);
/ sessions={}
/t
Request.doGetSession(boolean) line: 2864	
            try {
                session = manager.findSession(requestedSessionId);
/d
null
      // Create a new session if requested and the response is not committed
        if (!create) {
            return (null);
/t
HttpSessionStore.bind(Request, Session) line: 115	
			HttpSession httpSession = getHttpSession(request, false);
null
/ WH: de request maakt nog geen deel uit van een session	,
/t
WebSession(Session).bind() line: 271	
			store.bind(request, this);
/d
/ TODO
/ request is niet bind?
/ TODO

/t
LinkOnlyStudyPage(Page).onBeforeRender() line: 810	
			getSession().bind();
/d
/ TODO
/ Waar is de session C6B00F235710619E6D62C66D4C6925C2 gebleven?  In de ApplicationContext WH, het is getSession() en die doet Session.get()
/ TODO
/ En wat de andere session in de request?
/ TODO
/ DONDERDAGOCHTEND
Page.class.onBeforeRender

/ Intermezzo

/ Eerder	,

LinkOnlyStudyPage(Page).onBeforeRender() line: 806	
		if (getSession().isTemporary() && !peekPageStateless())
/s
LinkOnlyStudyPage(Component).getSession() line: 1827	
		return Session.get();
/s
Session.get() line: 162	
		Session session = ThreadContext.getSession();
/s
ThreadContext.getSession() line: 119	
		ThreadContext context = get(false);
/s
ThreadContext.get(boolean) line: 61	
		ThreadContext context = threadLocal.get();
context	org.apache.wicket.ThreadContext  (id=5268)	
	threadLocal	java.lang.ThreadLocal<T>  (id=5271)	
	application	my.test.own.WicketApplication  (id=5002)	
	requestCycle	org.apache.wicket.request.cycle.RequestCycle  (id=5007)	
	session	org.apache.wicket.protocol.http.WebSession  (id=5279)	

/ Heeft iedere thread eigen Application?
/ TODO

/ 

/ Einde Intermezzo

/ 7	. 

/c

/ we zien stack trace,	

	MarkupStream.next() line: 297	
		if (++currentIndex < markup.size())

	LinkOnlyStudyPage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1609	
		while (markupStream.hasMore())
		{
			// Remember where we are
			final int index = markupStream.getCurrentIndex();

			// Render the markup element
			boolean rawMarkup = renderNext(markupStream);

			// Go back to where we were and move the markup stream forward to whatever the next
			// element is.
			markupStream.setCurrentIndex(index);

			if (rawMarkup)
			{
				markupStream.next();

	LinkOnlyStudyPage(Page).onRender() line: 879	
		// Loop through the markup in this container
		MarkupStream markupStream = new MarkupStream(getMarkup());
		renderAll(markupStream, null);

	LinkOnlyStudyPage(WebPage).onRender() line: 142	
		super.onRender();

	LinkOnlyStudyPage(Component).internalRender() line: 2372	
				onRender();

	LinkOnlyStudyPage(Component).render() line: 2300	
				internalPrepareForRender(true);
->			internalRender();
				afterRender();

	LinkOnlyStudyPage(Page).renderPage() line: 1018	
			render();

	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
			requestablePage.renderPage();

 	WebPageRenderer.respond(RequestCycle) line: 236	
/ De centrale method	,
		if (shouldRenderPageAndWriteResponse(requestCycle, currentUrl, targetUrl))
/ NEE
		else if (shouldRedirectToTargetUrl(requestCycle, currentUrl, targetUrl))
/ NEE
		else
		{
			BufferedWebResponse response = renderPage(beforeRenderUrl, requestCycle);

/ we kijken	,
MarkupStream.next() line: 297	

		if (++currentIndex < markup.size())

this	org.apache.wicket.markup.MarkupStream  (id=5940)	
	currentIndex	4	
	markup	org.apache.wicket.markup.Markup  (id=5925)	
		markupElements	java.util.Collections$UnmodifiableRandomAccessList<E>  (id=5958)	
			list	java.util.ArrayList<E>  (id=5995)	
				elementData	java.lang.Object[15]  (id=6002)	
					[0]	org.apache.wicket.markup.RawMarkup  (id=5932)	
<!DOCTYPE html>
<html>
					[1]	org.apache.wicket.markup.ComponentTag  (id=5943)	
<head>
					[2]	org.apache.wicket.markup.RawMarkup  (id=6006)	
<meta charset="UTF-8">
<title>Insert title here</title>
					[3]	org.apache.wicket.markup.ComponentTag  (id=6008)	
</head>
					[4]	org.apache.wicket.markup.RawMarkup  (id=5989)	
<body>
<h1>LinkStudyTargetPage</h1>
					[5]	org.apache.wicket.markup.ComponentTag  (id=6010)	
<a wicket:id="link">
					[6]	org.apache.wicket.markup.RawMarkup  (id=6012)	
[Link]
					[7]	org.apache.wicket.markup.ComponentTag  (id=6013)	
</a>
					[8]	org.apache.wicket.markup.RawMarkup  (id=6015)	

					[9]	org.apache.wicket.markup.ComponentTag  (id=6017)	
<span wicket:id="text">
					[10]	org.apache.wicket.markup.ComponentTag  (id=6018)	
</span>
					[11]	org.apache.wicket.markup.RawMarkup  (id=6020)	

					[12]	org.apache.wicket.markup.ComponentTag  (id=6022)	
<span wicket:id="counter">
					[13]	org.apache.wicket.markup.ComponentTag  (id=6024)	
</span>
					[14]	org.apache.wicket.markup.RawMarkup  (id=6025)	
</body>
</html>
				modCount	15	
				size	15	

/ Wanneer is deze markup created?
/ See CREATE MARKUP	

/c

LinkOnlyStudyPage(WebPage).onRender() line: 142	
		super.onRender();
/s
LinkOnlyStudyPage(Page).onRender() line: 879	
		renderAll(markupStream, null);
/s
LinkOnlyStudyPage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1601	
			boolean rawMarkup = renderNext(markupStream);
/s
LinkOnlyStudyPage(MarkupContainer).renderNext(MarkupStream) line: 1379	

		// Get the current markup element
		final MarkupElement element = markupStream.get();
<a wicket:id="link">

		// If it's a tag like <wicket..> or <span wicket:id="..." >
		if ((element instanceof ComponentTag) && !markupStream.atCloseTag())

			// Get component id
			final String id = tag.getId();
link
			// Get the component for the id from the given container
			Component component = get(id);
/s
LinkOnlyStudyPage(MarkupContainer).get(String) line: 351	
		// Get child by id
		Component child = container.children_get(id);
/s
LinkOnlyStudyPage(MarkupContainer).children_get(String) line: 1110	
			if (this.children instanceof ChildList)
			{
				children = ((ChildList)this.children).childs;
/s
this	my.test.own.LinkOnlyStudyPage  (id=5263)	
	children	org.apache.wicket.MarkupContainer$ChildList  (id=6103)	
		childs	java.lang.Object[6]  (id=6111)	
			[0]	my.test.own.LinkOnlyStudyPage$1  (id=5267)	
[Link [Component id = link]]
			[1]	org.apache.wicket.markup.html.basic.Label  (id=6112)	
[Component id = text]
			[2]	org.apache.wicket.markup.html.basic.Label  (id=6113)	
[Component id = counter]
			[3]	org.apache.wicket.markup.html.internal.HtmlHeaderContainer  (id=5952)	
[HtmlHeaderContainer [Component id = _header_0]]
			[4]	null	
			[5]	null	

			for (int i = 0; i < size; i++)
			{
				if (getId(children[i]).equals(id))
					component = (Component)children[i];
					break;
component	my.test.own.LinkOnlyStudyPage$1  (id=5267)	
[Link [Component id = link]]

/t
LinkOnlyStudyPage(MarkupContainer).renderNext(MarkupStream) line: 1405	
			Component component = get(id);
/d

/ Intermezzo


/ Intermezzo

	protected boolean renderNext(final MarkupStream markupStream)
		final MarkupElement element = markupStream.get();
			final ComponentTag tag = (ComponentTag)element;
tag	ComponentTag  (id=5379)	
			final String id = tag.getId();
link
			Component component = get(id);
component	LinkOnlyStudyPage$1  (id=5385)	

/ Dus in de preprocessed HTML geef je de id mee: <link wicket:id="link"/> 	, zodat Wicket de bijbehorende component LinkOnlyStudyPage$1 kan opzoeken in de tree	, die als root de Page heeft,	


/ Einde Intermezzo

			if (component != null)
			{
				component.render();
/s
LinkOnlyStudyPage$1(Component).render() line: 2288	
			if ((parent == null) || (parent.getFlag(FLAG_RENDERING) == false) || isAuto())
/ NEE
			{
				internalPrepareForRender(true);
/ NIET
			// Do the render
			internalRender();
/s
LinkOnlyStudyPage$1(Component).internalRender() line: 2350	
		IMarkupFragment markup = getMarkup();
		MarkupElement elem = markup.get(0);

this	my.test.own.LinkOnlyStudyPage$1  (id=5231)	
this.getClass()getSuperclass()=class org.apache.wicket.markup.html.link.Link
markup	org.apache.wicket.markup.MarkupFragment  (id=5279)	
<a wicket:id="link">[Link]</a>
elem	org.apache.wicket.markup.ComponentTag  (id=5262)	
<a wicket:id="link">

/ dus er is this=Link inst	, en ComponentTag	 	, net als in JSF WH	,

				onRender();
/s
LinkOnlyStudyPage$1(MarkupContainer).onRender() line: 1540	
/ Link is ook een MarkupContainer	,

		internalRenderComponent();
/s
LinkOnlyStudyPage$1(Component).internalRenderComponent() line: 2513	
		// Call any tag handler
		onComponentTag(tag);
/s
LinkOnlyStudyPage$1(Link<T>).onComponentTag(ComponentTag) line: 353	
		// Default handling for tag
		super.onComponentTag(tag);
/s
LinkOnlyStudyPage$1(Component).onComponentTag(ComponentTag) line: 3901	
		if (Strings.isEmpty(componentPathAttributeName) == false)
componentPathAttributeName	"wicketpath" (id=5343)	
		{
			String path = getPageRelativePath();
link
			path = path.replace("_", "__");
			path = path.replace(':', '_');
			tag.put(componentPathAttributeName, path);
wicketpath:link
		}

/t
LinkOnlyStudyPage$1(Link<T>).onComponentTag(ComponentTag) line: 359	
		// Default handling for tag
		super.onComponentTag(tag);
/d
		if (isEnabledInHierarchy())
		{
			// Set href to link to this link's linkClicked method
			CharSequence url = getURL();
/s
LinkOnlyStudyPage$1(Link<T>).getURL() line: 327	
		return urlFor(ILinkListener.INTERFACE, new PageParameters());
/s
LinkOnlyStudyPage$1(Component).urlFor(RequestListenerInterface, PageParameters) line: 3395	

		IRequestHandler handler = createRequestHandler(listener, parameters, null);

this	my.test.own.LinkOnlyStudyPage$1  (id=5231)	
listener	org.apache.wicket.RequestListenerInterface  (id=5352)	
	interfaces	java.util.Collections$SynchronizedMap<K,V>  (id=5354)	
{
IFormSubmitListener=[RequestListenerInterface name=IFormSubmitListener, method=public abstract void org.apache.wicket.markup.html.form.IFormSubmitListener.onFormSubmitted()], 
IBehaviorListener=[RequestListenerInterface name=IBehaviorListener, method=public abstract void org.apache.wicket.behavior.IBehaviorListener.onRequest()], 
IOnChangeListener=[RequestListenerInterface name=IOnChangeListener, method=public abstract void org.apache.wicket.markup.html.form.IOnChangeListener.onSelectionChanged()], 
ILinkListener=[RequestListenerInterface name=ILinkListener, method=public abstract void org.apache.wicket.markup.html.link.ILinkListener.onLinkClicked()], 
IResourceListener=[RequestListenerInterface name=IResourceListener, method=public abstract void org.apache.wicket.IResourceListener.onResourceRequested()]}
	method	java.lang.reflect.Method  (id=5358)	
public abstract void org.apache.wicket.markup.html.link.ILinkListener.onLinkClicked()
	name	"ILinkListener" (id=5359)	

		if (page.isPageStateless()
false
			|| (getApplication().getPageSettings().getRecreateMountedPagesAfterExpiry()
true
				&& page.isBookmarkable() && page.wasCreatedBookmarkable()))
true
			return new BookmarkableListenerInterfaceRequestHandler(provider, listener, id);
/s
BookmarkableListenerInterfaceRequestHandler.<init>(IPageAndComponentProvider, RequestListenerInterface, Integer) line: 57	
		this.pageComponentProvider = pageComponentProvider;
		this.listenerInterface = listenerInterface;
		this.behaviorIndex = behaviorIndex;
/t
LinkOnlyStudyPage$1(Component).urlFor(RequestListenerInterface, PageParameters) line: 3396	
		IRequestHandler handler = createRequestHandler(listener, parameters, null);
/d
		return getRequestCycle().urlFor(handler);
/s
RequestCycle.urlFor(IRequestHandler) line: 534	
			Url mappedUrl = mapUrlFor(handler);
/s
RequestCycle.mapUrlFor(IRequestHandler) line: 434	
		final Url url = requestMapper.mapHandler(handler);
/s
SystemMapper(CompoundRequestMapper).mapHandler(IRequestHandler) line: 214	
		for (IRequestMapper mapper : mappers)
		{
			Url url = mapper.mapHandler(handler);
/s
HomePageMapper(AbstractBookmarkableMapper).mapHandler(IRequestHandler) line: 396	
/=
	public Url mapHandler(IRequestHandler requestHandler)
requestHandler	BookmarkableListenerInterfaceRequestHandler  (id=5447)	

		Url url = super.mapHandler(requestHandler);
/s
HomePageMapper(AbstractBookmarkableMapper).mapHandler(IRequestHandler) line: 396	

		if (requestHandler instanceof BookmarkablePageRequestHandler)
/ NEE
		else if (requestHandler instanceof RenderPageRequestHandler)
/ NEE
		else if (requestHandler instanceof BookmarkableListenerInterfaceRequestHandler)
/ JA
			// listener interface URL with page class information
/ we gaan de url create hier	,

			BookmarkableListenerInterfaceRequestHandler handler = (BookmarkableListenerInterfaceRequestHandler)requestHandler;
			Class<? extends IRequestablePage> pageClass = handler.getPageClass();
pageClass	Class<T> (my.test.own.LinkOnlyStudyPage) (id=5080)	

			if (handler.getListenerInterface().isIncludeRenderCount())
handler.getListenerInterface()= [RequestListenerInterface name=ILinkListener, method=public abstract void org.apache.wicket.markup.html.link.ILinkListener.onLinkClicked()]
/s
RequestListenerInterface.isIncludeRenderCount() line: 155	
		return includeRenderCount;
true
/t
HomePageMapper(AbstractBookmarkableMapper).mapHandler(IRequestHandler) line: 471	
			if (handler.getListenerInterface().isIncludeRenderCount())
/d
true
			{
				renderCount = handler.getRenderCount();
/s
BookmarkableListenerInterfaceRequestHandler.getRenderCount() line: 177	
		return pageComponentProvider.getRenderCount();
/s
			return renderCount;
1
/t
HomePageMapper(AbstractBookmarkableMapper).mapHandler(IRequestHandler) line: 474	
				renderCount = handler.getRenderCount();
/d
1
			PageInfo pageInfo = getPageInfo(handler);
/s
HomePageMapper(AbstractBookmarkableMapper).getPageInfo(IPageRequestHandler) line: 495	
			IRequestablePage page = handler.getPage();
[Page class = my.test.own.LinkOnlyStudyPage, id = 0, render count = 1]

			if (page.isPageStateless() == false)
/ Ja
			{
				pageId = page.getPageId();
/s
					return numericId;
0
1
2
/t
HomePageMapper(AbstractBookmarkableMapper).getPageInfo(IPageRequestHandler) line: 505	

				pageId = page.getPageId();
/d
0

		return new PageInfo(pageId);
/t
HomePageMapper(AbstractBookmarkableMapper).mapHandler(IRequestHandler) line: 475	
			PageInfo pageInfo = getPageInfo(handler);
/d
			ComponentInfo componentInfo = new ComponentInfo(
->				renderCount,
->				requestListenerInterfaceToString(handler.getListenerInterface()),
handler.getListenerInterface()=[RequestListenerInterface name=ILinkListener, method=public abstract void org.apache.wicket.markup.html.link.ILinkListener.onLinkClicked()]
/s
DefaultMapperContext.requestListenerInterfaceToString(RequestListenerInterface) line: 93	
		return listenerInterface.getName();
"ILinkListener"
/t
->				handler.getComponentPath(), 
/s
PageAndComponentProvider.getComponentPath() line: 200	
			return component.getPageRelativePath();
/ component=[Link [Component id = link]]=LinkOnlyStudyPage$1
/s
LinkOnlyStudyPage$1(Component).getPageRelativePath() line: 1743	
		return Strings.afterFirstPathComponent(getPath(), PATH_SEPARATOR);
/s
LinkOnlyStudyPage$1(Component).getPath() line: 1764	
		final PrependingStringBuffer buffer = new PrependingStringBuffer(32);
		for (Component c = this; c != null; c = c.getParent())
		{
			if (buffer.length() > 0)
			{
				buffer.prepend(PATH_SEPARATOR);
			}
			buffer.prepend(c.getId());
link		/ c=LinkOnlyStudyPage$1
:link
0:link		/ c=LinkOnlyStudyPage
/t
/s
/ Strings.afterFirstPathComponent haalt 0: ervanaf
->				handler.getBehaviorIndex()
null
			);
/d
			PageParameters parameters = getRecreateMountedPagesAfterExpiry() 
/s
HomePageMapper(AbstractBookmarkableMapper).getRecreateMountedPagesAfterExpiry() line: 286	
		return WebApplication.get().getPageSettings().getRecreateMountedPagesAfterExpiry();
true 	/ default
				? new PageParameters(
					handler.getPage().getPageParameters()).mergeWith(handler.getPageParameters())
/s
BookmarkableListenerInterfaceRequestHandler.getPageParameters() line: 122	
		return pageComponentProvider.getPageParameters();
/t
HomePageMapper(AbstractBookmarkableMapper).mapHandler(IRequestHandler) line: 484	
			UrlInfo urlInfo = new UrlInfo(new PageComponentInfo(pageInfo, componentInfo),
				pageClass, parameters);
/d
			return buildUrl(urlInfo);
/s
HomePageMapper(MountedMapper).buildUrl(AbstractBookmarkableMapper$UrlInfo) line: 198	
		Url url = new Url();
		encodePageComponentInfo(url, info.getPageComponentInfo());
/s
HomePageMapper(AbstractComponentMapper).encodePageComponentInfo(Url, PageComponentInfo) line: 98	
		if (info != null)
		{
			String s = info.toString();
2-1.ILinkListener-link
/ want	,
info	PageComponentInfo  (id=5541)	
/s
PageComponentInfo.toString() line: 72	

this	PageComponentInfo  (id=5541)	
	SEPARATOR	-	
	componentInfo	ComponentInfo  (id=5532)	
		BEHAVIOR_INDEX_SEPARATOR	.	
		COMPONENT_SEPARATOR	:	
		SEPARATOR	-	
		SEPARATOR_ENCODED	~	
		behaviorId	null	
		componentPath	"link" (id=5533)	
		listenerInterface	"ILinkListener" (id=5359)	
		renderCount	Integer  (id=5435)	
			$assertionsDisabled	true	
			DigitOnes	(id=5494)	
			digits	(id=5495)	
			DigitTens	(id=5574)	
			MAX_VALUE	2147483647	
			MIN_VALUE	-2147483648	
			serialVersionUID	1360826667806852920	
			serialVersionUID	-8742448824652078965	
			SIZE	32	
			sizeTable	(id=5579)	
			TYPE	Class<T> (int) (id=5580)	
			value	1	
	pageInfo	PageInfo  (id=5502)	
		pageId	Integer  (id=5434)	
result	StringBuilder  (id=5557)	

		if (pageInfo != null)
		{
			result.append(pageInfo.toString());
0		
1
2
		if (componentInfo != null)
		{
			result.append(SEPARATOR);
0-
			result.append(componentInfo);
0-1.ILinkListener-link

/t
HomePageMapper(AbstractComponentMapper).encodePageComponentInfo(Url, PageComponentInfo) line: 105	
			String s = info.toString();
0-1.ILinkListener-link
/d
			if (!Strings.isEmpty(s))
			{
				QueryParameter parameter = new QueryParameter(s, "");
name="0-1.ILinkListener-link"	, value=""
url
LEEG
				url.getQueryParameters().add(parameter);
url
?2-1.ILinkListener-link

/t
HomePageMapper(MountedMapper).buildUrl(AbstractBookmarkableMapper$UrlInfo) line: 206	
		encodePageComponentInfo(url, info.getPageComponentInfo());
/d
url
?2-1.ILinkListener-link

		PageParameters copy = new PageParameters(info.getPageParameters());
		if (setPlaceholders(copy, url) == false)
/ NIETS
/ TODO
		return encodePageParameters(url, copy, pageParametersEncoder);
/= url (eig. new Url(url)	,

/t
HomePageMapper(AbstractBookmarkableMapper).mapHandler(IRequestHandler) line: 484	
			return buildUrl(urlInfo);
/d
/t
HomePageMapper(MountedMapper).mapHandler(IRequestHandler) line: 161	
		Url url = super.mapHandler(requestHandler);
/d
?0-1.ILinkListener-link
		return url;
/t
SystemMapper(CompoundRequestMapper).mapHandler(IRequestHandler) line: 216	
		for (IRequestMapper mapper : mappers)
		{
			Url url = mapper.mapHandler(handler);
			if (url != null)
JA
			{
				return url;
/t
RequestCycle.mapUrlFor(IRequestHandler) line: 435	
		final Url url = requestMapper.mapHandler(handler);
/d
		listeners.onUrlMapped(this, handler, url);
/ TODO
		return url;
/t
RequestCycle.urlFor(IRequestHandler) line: 535	
			Url mappedUrl = mapUrlFor(handler);
/d
			CharSequence url = renderUrl(mappedUrl, handler);
/s
RequestCycle.renderUrl(Url, IRequestHandler) line: 553	
		if (url != null)
		{
			boolean shouldEncodeStaticResource = Application.exists() &&
				Application.get().getResourceSettings().isEncodeJSessionId();
false
			String renderedUrl = getUrlRenderer().renderUrl(url);
/s
UrlRenderer.renderUrl(Url) line: 100	
		if (shouldRenderAsFull(url))
/s
	/**
	 * Determines whether a URL should be rendered in its full form
	 * 
UrlRenderer.shouldRenderAsFull(Url) line: 354	
		Url clientUrl = request.getClientUrl();
/ TODO 
LEEG
		if (!Strings.isEmpty(url.getProtocol())
			&& !url.getProtocol().equals(clientUrl.getProtocol()))
false
/ want	,
url.getProtocol()=null
Strings.isEmpty(url.getProtocol())=false

		if (!Strings.isEmpty(url.getHost()) 
url.getHost()=null
false
			&& !url.getHost().equals(clientUrl.getHost()))
/ NEE

		if ((url.getPort() != null) 
			&& !url.getPort().equals(clientUrl.getPort()))
/ NEE
		if (url.isContextAbsolute())
/ NEE
		return false;
/t
UrlRenderer.renderUrl(Url) line: 118	
		if (shouldRenderAsFull(url))
/ NEE
		else
		{
			renderedUrl = renderRelativeUrl(url);
/s
UrlRenderer.renderRelativeUrl(Url) line: 230	
		if (url instanceof IUrlRenderer)
/ NEE
/ Met segments
/ TODO
/ NIETS
		String renderedUrl = new Url(newSegments, url.getQueryParameters()).toString();
?0-1.ILinkListener-link
/ want	,
url.getQueryParameters()=[0-1.ILinkListener-link]

		// sanitize start
		if (!renderedUrl.startsWith("..") && !renderedUrl.equals("."))
		{
			// WICKET-4260
			renderedUrl = "./" + renderedUrl;
./?0-1.ILinkListener-link

		// add trailing slash if the url has no query string and ends with ..
		if (renderedUrl.indexOf('?') == -1 && renderedUrl.endsWith(".."))
/ NEE
		{
			// WICKET-4401
			renderedUrl = renderedUrl + '/';
/ NIET
		return renderedUrl;
/t
RequestCycle.renderUrl(Url, IRequestHandler) line: 554	
		if (url != null)
?0-1.ILinkListener-link
			String renderedUrl = getUrlRenderer().renderUrl(url);
/d
./?0-1.ILinkListener-link


/ Het ? staat er 	, want 0-1.ILinkListener-link is een QueryParameter	

			if (handler instanceof ResourceReferenceRequestHandler)
/ NEE
			else if (handler instanceof ResourceRequestHandler)
/ NEE
			else
			{
				renderedUrl = getOriginalResponse().encodeURL(renderedUrl);
/t
RequestCycle.renderUrl(Url, IRequestHandler) line: 576	
			String renderedUrl = getUrlRenderer().renderUrl(url);
/d
./?2-1.ILinkListener-link
			if (handler instanceof ResourceReferenceRequestHandler)
/ NEE
			else if (handler instanceof ResourceRequestHandler)
/ NEE
			else
			{
				renderedUrl = getOriginalResponse().encodeURL(renderedUrl);
/s
RequestCycle.getOriginalResponse() line: 164	
		return originalResponse;
/t
HeaderBufferingWebResponse.encodeURL(CharSequence) line: 160	
		return originalResponse.encodeURL(url);
/s
ServletWebResponse.encodeURL(CharSequence) line: 174	
		UrlRenderer urlRenderer = getUrlRenderer();
/s
			return requestCycle.getUrlRenderer();

		Url originalUrl = Url.parse(url);
./?2-1.ILinkListener-link

		/*
		  WICKET-4645 - always pass absolute url to the web container for encoding
		  because when REDIRECT_TO_BUFFER is in use Wicket may render PageB when
		  PageA is actually the requested one and the web container cannot resolve
		  the base url properly
		 */
		String fullUrl = urlRenderer.renderFullUrl(originalUrl);
http://localhost:9090/wicket-testing/?2-1.ILinkListener-link
/ TODO
		String encodedFullUrl = httpServletResponse.encodeURL(fullUrl);
http://localhost:9090/wicket-testing/?2-1.ILinkListener-link

		if (originalUrl.isFull())
/ NEE
		else
		{
			if (fullUrl.equals(encodedFullUrl))
/ JA
			{
				// no encoding happened so just reuse the original url
				encodedUrl = url.toString();
./?2-1.ILinkListener-link
		return encodedUrl;
/t
RequestCycle.renderUrl(Url, IRequestHandler) line: 578	
			else
			{
				renderedUrl = getOriginalResponse().encodeURL(renderedUrl);
			}
			return renderedUrl;
./?2-1.ILinkListener-link
/t
RequestCycle.urlFor(IRequestHandler) line: 535	
			Url mappedUrl = mapUrlFor(handler);
./?2-1.ILinkListener-link
			CharSequence url = renderUrl(mappedUrl, handler);
./?2-1.ILinkListener-link
/d
			return url;
/t
LinkOnlyStudyPage$1(Component).urlFor(RequestListenerInterface, PageParameters) line: 3396	
		return getRequestCycle().urlFor(handler);
/d
/t
LinkOnlyStudyPage$1(Link<T>).getURL() line: 327	
		return urlFor(ILinkListener.INTERFACE, new PageParameters());
/d
/t
LinkOnlyStudyPage$1(Link<T>).onComponentTag(ComponentTag) line: 359	
			// Set href to link to this link's linkClicked method
			CharSequence url = getURL();
/d
./?2-1.ILinkListener-link

			// append any anchor
			url = appendAnchor(tag, url);
/ TODO
			// if the tag is an anchor proper
			if (tag.getName().equalsIgnoreCase("a") || tag.getName().equalsIgnoreCase("link") ||
				tag.getName().equalsIgnoreCase("area"))
			{
				// generate the href attribute
				tag.put("href", url);

			// If the subclass specified javascript, use that
			final CharSequence onClickJavaScript = getOnClickScript(url);
null
			if (onClickJavaScript != null)
/ NEE
/t
LinkOnlyStudyPage$1(Component).internalRenderComponent() line: 2516	
		// Call any tag handler
		onComponentTag(tag);
/d
<a wicket:id="link" wicketpath="link" href="./?2-1.ILinkListener-link">
///////////////////////////////////////////////////////////////////////////////////

		try
		{
			// Render open tag
			if (getRenderBodyOnly())
/ NEE
			else
			{
				renderComponentTag(tag);
/s
LinkOnlyStudyPage$1(Component).renderComponentTag(ComponentTag) line: 3974	
		if (needToRenderTag(tag))
true
			// apply behaviors that are attached to the component tag.
			if (tag.hasBehaviors())
/ NEE
/ want	,	
/s
				return behaviors != null;
false
/t
			// Apply behavior modifiers
			List<? extends Behavior> behaviors = getBehaviors();
behaviors	Collections$UnmodifiableRandomAccessList<E>  (id=6061)	
[]
			if ((behaviors != null) 
true
			&& !behaviors.isEmpty() 
false
			&& !tag.isClose() 
true
			&& (isIgnoreAttributeModifier() == false))
true
/ NEE

			if ((tag instanceof WicketTag) 
false
			&& !tag.isClose() 
true
			&& !getFlag(FLAG_IGNORE_ATTRIBUTE_MODIFIER))
true
/ NEE

			// Write the tag
			tag.writeOutput(
->				getResponse(), 
/s
				return getRequestCycle().getResponse();
/t
->				!needToRenderTag(null),
/s
LinkOnlyStudyPage$1(Component).needToRenderTag(ComponentTag) line: 2597	

		// If a open-close tag has been modified to be open-body-close then a
		// synthetic close tag must be rendered.
		boolean renderTag = (openTag != null && !(openTag instanceof WicketTag));
false
openTag=null
		if (renderTag == false)
		{
			renderTag = !getApplication().getMarkupSettings().getStripWicketTags();
true

/ TODO (met stripWicketTags -> render)

		return renderTag;
/t
->				getMarkup().getMarkupResourceStream().getWicketNamespace()
			);
/s
ComponentTag.writeOutput(Response, boolean, String) line: 723	

/ Intermezzo

/ we zijn in	,
	ComponentTag.writeOutput(Response, boolean, String) line: 725	
	LinkOnlyStudyPage$1(Component).renderComponentTag(ComponentTag) line: 4026	
	LinkOnlyStudyPage$1(Component).internalRenderComponent() line: 2548	
	LinkOnlyStudyPage$1(MarkupContainer).onRender() line: 1540	
	LinkOnlyStudyPage$1(Component).internalRender() line: 2372	
	LinkOnlyStudyPage$1(Component).render() line: 2300	
	LinkOnlyStudyPage(MarkupContainer).renderNext(MarkupStream) line: 1405	
	LinkOnlyStudyPage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1601	
	LinkOnlyStudyPage(Page).onRender() line: 879	
	LinkOnlyStudyPage(WebPage).onRender() line: 142	
	LinkOnlyStudyPage(Component).internalRender() line: 2372	
	LinkOnlyStudyPage(Component).render() line: 2300	
	LinkOnlyStudyPage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 837	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ Einde Intermezzo

		response.write("<");

response	BufferedWebResponse  (id=5357)	
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
<h1>LinkStudyTargetPage</h1>


<

		response.write(getName());
/ we zien achteraan	,
<a

		if (getAttributes().size() > 0)
		{
			for (String key : getAttributes().keySet())
			{
key	"wicket:id" (id=5388)	
key	"wicketpath" (id=5395)	
key	"href" (id=5401)	

				if ((namespacePrefix == null) || (key.startsWith(namespacePrefix) == false))
				{
					response.write(" ");
					response.write(key);
					CharSequence value = getAttribute(key);
value	"link"
value 	"link"
value	"./?0-1.ILinkListener-link" (id=5403)	

					if (value != null)
					{
						response.write("=\"");
						value = Strings.escapeMarkup(value);
						response.write(value);
						response.write("\"");
/ achteraan	response,
<a wicket:id="link"
<a wicket:id="link" wicketpath="link"
<a wicket:id="link" wicketpath="link" href="./?0-1.ILinkListener-link"

		response.write(">");
/ achteraan response	,
<a wicket:id="link" wicketpath="link" href="./?0-1.ILinkListener-link">

/t
LinkOnlyStudyPage$1(Component).internalRenderComponent() line: 2553	
			else
			{
				renderComponentTag(tag);
/d
			}
			markupStream.next();

			// Render the body only if open-body-close. Do not render if open-close.
			if (tag.isOpen())
/ JA
			{
				// Render the body. The default strategy will simply call the component's
				// onComponentTagBody() implementation.
				getMarkupSourcingStrategy().onComponentTagBody(this, markupStream, tag);
/s
DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
		component.onComponentTagBody(markupStream, openTag);
/s
LinkOnlyStudyPage$1(AbstractLink).getBody() line: 115	
		// Get a copy of the body model from the getBody() method. This method could be overridden.
		IModel<?> tmpBodyModel = getBody();
/s
LinkOnlyStudyPage$1(AbstractLink).getBody() line: 115	
		return bodyModel;
null
/t
LinkOnlyStudyPage$1(AbstractLink).onComponentTagBody(MarkupStream, ComponentTag) line: 82	
		IModel<?> tmpBodyModel = getBody();
/d
null
		else
		{
			// Render the body of the link
			super.onComponentTagBody(markupStream, openTag);
/s
LinkOnlyStudyPage$1(MarkupContainer).onComponentTagBody(MarkupStream, ComponentTag) line: 1500	
		renderComponentTagBody(markupStream, openTag);
/s
		if ((markupStream != null) && (markupStream.getCurrentIndex() > 0))
markupStream=<a wicket:id="link">[Link]</a>, index = 1, current = [Raw markup]]

			// If the original tag has been changed from open-close to open-body-close, than we are
			// done. Other components, e.g. BorderBody, rely on this method being called.
			ComponentTag origOpenTag = (ComponentTag)markupStream.get(markupStream.getCurrentIndex() - 1);
			if (origOpenTag.isOpenClose())
/ NEE
			{
				return;
/ NIET
		// If the open tag requires a close tag
		boolean render = openTag.requiresCloseTag();
true
		if (render)
		{
			renderAll(markupStream, openTag);
/s
LinkOnlyStudyPage$1(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1601	
			// Render the markup element
			boolean rawMarkup = renderNext(markupStream);
/s
LinkOnlyStudyPage$1(MarkupContainer).renderNext(MarkupStream) line: 1376	
		// Get the current markup element
		final MarkupElement element = markupStream.get();
element	RawMarkup  (id=5421)	
[Link]
		else
		{
			// Render as raw markup
			getResponse().write(element.toCharSequence());
			return true;

this	LinkOnlyStudyPage$1  (id=5268)	
/s
LinkOnlyStudyPage$1(Component).getResponse() line: 1817	
		return getRequestCycle().getResponse();
/s
LinkOnlyStudyPage$1(Component).getRequestCycle() line: 1809	
		return RequestCycle.get();
/s
RequestCycle.get() line: 88	
		return ThreadContext.getRequestCycle();
/s
ThreadContext.getRequestCycle() line: 99	
		ThreadContext context = get(false);
/s
ThreadContext.get(boolean) line: 44	
		ThreadContext context = threadLocal.get();
		if (context == null)
/ NEE
		return context;

/ Intermezzo

/ er is 
context.application
context.requestCycle
context.session

/ Je hebt een per thread ThreadContext, en dus ook een per thread Appliction, RequestCycle, Session	,
/ TODO

/ Dit is een global obj		, in de thread	, de request cycle ook , zit dus niet in de link 	,

/ Einde Intermezzo

/t
ThreadContext.getRequestCycle() line: 100	
		ThreadContext context = get(false);
/d
		return context != null ? context.requestCycle : null;
...
/s
LinkOnlyStudyPage$1(Component).getResponse() line: 1817	
		return getRequestCycle().getResponse();
/d
/s
RequestCycle.getResponse() line: 741	
			return activeResponse;
/t
LinkOnlyStudyPage$1(MarkupContainer).renderNext(MarkupStream) line: 1457	
		else
		{
			// Render as raw markup
			getResponse().write(element.toCharSequence());

/ Intermezzo

/ we kunnen in Expressions	,

"ThreadContext.get(false)"	 (pending)	
	application	WicketApplication  (id=5000)	
	requestCycle	RequestCycle  (id=5005)	
		activeResponse	BufferedWebResponse  (id=5357)	
		exceptionMapper	DefaultExceptionMapper  (id=5554)	
		listeners	RequestCycleListenerCollection  (id=5555)	
		metaData	MetaDataEntry<T>[1]  (id=5556)	
		originalResponse	HeaderBufferingWebResponse  (id=4994)	
		request	ServletWebRequest  (id=4992)	
		requestHandlerExecutor	RequestCycle$HandlerExecutor  (id=5040)	
		requestMapper	SystemMapper  (id=5016)	
		startTime	1452061680208	
		urlRenderer	UrlRenderer  (id=5561)	
	session	WebSession  (id=5271)	

/ Blijkbaar in dezelfde thread	?
/ TODO

/ Einde Intermezzo

/s
BufferedWebResponse.write(CharSequence) line: 471	
		charSequenceAction.append(sequence);
/t
LinkOnlyStudyPage$1(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1605	
			// Render the markup element
			boolean rawMarkup = renderNext(markupStream);
true
/ Written in ThreadLocal.get(false).getRequestCycle().getResponse()


			if (rawMarkup)
			{
				markupStream.next();

/ volgende	,
		while (markupStream.hasMore())

/ markupStream MarupStream
<a wicket:id="link">[Link]</a>, index = 2, current =  '</a>' (line 0, column 0)]
		{
			// In case of Page we need to render the whole file. For all other components just what
			// is in between the open and the close tag.
			if ((openTag != null) && markupStream.get().closes(openTag))
/ JA
openTag	ComponentTag
<a wicket:id="link" wicketpath="link" href="./?0-1.ILinkListener-link">

markupStream.get()="</a>"
/ Dat komt doordat index=2	,
			{
				break;
...
/t
LinkOnlyStudyPage$1(Component).internalRenderComponent() line: 2560	
				getMarkupSourcingStrategy().onComponentTagBody(this, markupStream, tag);
/d
				// Render close tag
				if (openTag.isOpen())
				{
					renderClosingComponentTag(markupStream, tag, getRenderBodyOnly());
/s
LinkOnlyStudyPage$1(Component).renderClosingComponentTag(MarkupStream, ComponentTag, boolean) line: 4268	
/=
	final void renderClosingComponentTag(final MarkupStream markupStream, final ComponentTag openTag, final boolean renderBodyOnly)
markupStream=<a wicket:id="link">[Link]</a>, index = 2, current =  '</a>' (line 0, column 0)]
openTag=<a wicket:id="link" wicketpath="link" href="./?0-1.ILinkListener-link">
renderBodyOnly=false
		if (openTag.isOpen())
		{
			// If we found a close tag and it closes the open tag, we're good
			if (markupStream.atCloseTag() && markupStream.getTag().closes(openTag))
			{
				// Render the close tag
				if ((renderBodyOnly == false) && needToRenderTag(openTag))
				{
					getResponse().write(openTag.syntheticCloseTagString());
/s
ComponentTag.syntheticCloseTagString() line: 685	
		buf.append("</");
		if (getNamespace() != null)
/ NEE
		buf.append(getName()).append('>');

		return buf;
/t
LinkOnlyStudyPage$1(Component).internalRender() line: 2373	
				onRender();
/d
/t
LinkOnlyStudyPage$1(Component).render() line: 2312	
			// Do the render
			internalRender();
...
				// Cleanup
				afterRender();
/ sets flags

/t
LinkOnlyStudyPage(MarkupContainer).renderNext(MarkupStream) line: 1405	

			if (component != null)
			{
				component.render();
/d
		return false;
/t
LinkOnlyStudyPage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1605	
			// Render the markup element
			boolean rawMarkup = renderNext(markupStream);
/d
			if (rawMarkup)
/ NEE
			else if (!markupStream.getTag().isClose())
			{
				markupStream.skipComponent();

/ volgende	,
		while (markupStream.hasMore())

/ markupStream is het orginele HTML die wij gaven	,

/ we slaan de rest over,
...
/t
LinkOnlyStudyPage(Page).onRender() line: 880	
		// Loop through the markup in this container
		MarkupStream markupStream = new MarkupStream(getMarkup());
		renderAll(markupStream, null);
/d
LinkOnlyStudyPage(WebPage).onRender() line: 143	
		super.onRender();
/d
LinkOnlyStudyPage(Component).internalRender() line: 2373	
				onRender();
/d
		finally
		{
			try
			{
				// Cleanup
				afterRender();

/ afterRender is voor een Page wel interessant	,

/s
LinkOnlyStudyPage(Component).afterRender() line: 918	
...
			onAfterRender();
/s
LinkOnlyStudyPage(WebPage).onAfterRender() line: 215	
		super.onAfterRender();
/s
LinkOnlyStudyPage(Page).onAfterRender() line: 837	
		if (!isPageStateless())
true
			// trigger creation of the actual session in case it was deferred
			getSession().getSessionStore().getSessionId(RequestCycle.get().getRequest(), true);
/s
	protected ISessionStore getSessionStore()
	{
		if (sessionStore == null)
		{
			sessionStore = getApplication().getSessionStore();
		}
		return sessionStore;
	}
/ sessionStore is in de Application, niet in de session, al lijkt dat zo in getSession().getSessionStore()	,
/t
/s
HttpSessionStore.getSessionId(Request, boolean) line: 159	
		HttpSession httpSession = getHttpSession(request, false);
null

/want	,

/ haal de session uit de request,
/ in de request zit de sessionId	, de manager looks up de session	, manager heeft sessions	,

/s
HttpSessionStore.getHttpSession(Request, boolean) line: 95	
		return getHttpServletRequest(request).getSession(create);
/s
HttpSessionStore.getHttpServletRequest(Request) line: 79	
		Object containerRequest = request.getContainerRequest();
org.apache.catalina.connector.RequestFacade@6f2818b9
		return (HttpServletRequest)containerRequest;
/ HttpServletRequest is javax.servlet.http	,
/t
HttpSessionStore.getHttpSession(Request, boolean) line: 95	
		return getHttpServletRequest(request).getSession(create);
/d
/s
RequestFacade.getSession(boolean) line: 895	
        } else {
            return request.getSession(create);
/s
Request.getSession(boolean) line: 2256	
        Session session = doGetSession(create);
/s
Request.doGetSession(boolean) line: 2864	
        // There cannot be a session if no context has been assigned yet
        Context context = getContext();
        Manager manager = context.getManager();
        if (requestedSessionId != null) {
1llua8yc8hq0d14hmf8vs3f621
/ zit in de session	,
            try {
                session = manager.findSession(requestedSessionId);
/t
HttpSessionStore.getSessionId(Request, boolean) line: 160	
create=true
		HttpSession httpSession = getHttpSession(request, false);
/d
null
			httpSession = getHttpSession(request, true);
...
/s
Request.doGetSession(boolean) line: 2898	
       } else {
            session = manager.createSession(null);
/s
StandardManager(ManagerBase).createSession(String) line: 697	

       // Recycle or create a Session instance
        Session session = createEmptySession();
...
/s
StandardManager(ManagerBase).getNewSession() line: 857	
        return new StandardSession(this);
/t
StandardManager(ManagerBase).createSession(String) line: 709	
        // Recycle or create a Session instance
        Session session = createEmptySession();
        String id = sessionId;
null
        if (id == null) {
            id = generateSessionId();
B5BED1890E0B93A800D6576E1BB65508
        }
        session.setId(id);
/t
Request.doGetSession(boolean) line: 2906	
        } else {
            session = manager.createSession(null);
/d
            Cookie cookie =
                ApplicationSessionCookieConfig.createSessionCookie(
                        context, session.getIdInternal(), isSecure());
cookie	Cookie  (id=6031)	
	serialVersionUID	1	
	validation	NetscapeValidator  (id=6032)	
	comment	null	
	domain	null	
	httpOnly	true	
	maxAge	-1	
	name	"JSESSIONID" (id=6033)	
	path	"/wicket-testing/" (id=6035)	
	secure	false	
	value	"B5BED1890E0B93A800D6576E1BB65508" (id=6024)	
	version	0	
            response.addSessionCookieInternal(cookie);

/ de cookie wordt met de response meegestuurd	,

/s
Response.addSessionCookieInternal(Cookie) line: 936	

        String name = cookie.getName();
        final String headername = "Set-Cookie";
        final String startsWith = name + "=";
        String header = generateCookieString(cookie);
JSESSIONID=B5BED1890E0B93A800D6576E1BB65508; Path=/wicket-testing/; HttpOnly
        boolean set = false;
        MimeHeaders headers = getCoyoteResponse().getMimeHeaders();
        int n = headers.size();
        for (int i = 0; i < n; i++) {
            if (headers.getName(i).toString().equals(headername)) {
                if (headers.getValue(i).toString().startsWith(startsWith)) {
                    headers.getValue(i).setString(header);
/ Er STOND	,
JSESSIONID=7579167034361A11EDD2AE91CFAB81EE; Path=/wicket-testing/; HttpOnly
/ NU
JSESSIONID=B5BED1890E0B93A800D6576E1BB65508; Path=/wicket-testing/; HttpOnly

...
/t
HttpSessionStore.getSessionId(Request, boolean) line: 167	
		else if (create)
		{
			httpSession = getHttpSession(request, true);
/d
			id = httpSession.getId();
		return id;
/t
LinkOnlyStudyPage(Page).onAfterRender() line: 843	
		if (!isPageStateless())
		{
			// trigger creation of the actual session in case it was deferred
			getSession().getSessionStore().getSessionId(RequestCycle.get().getRequest(), true);
/d

			// Add/touch the response page in the session.
			getSession().getPageManager().touchPage(this);
/s
PageAccessSynchronizer$2.touchPage(IManageablePage) line: 261	
				lockPage(page.getPageId());
				super.touchPage(page);
/s
PageAccessSynchronizer$2(PageManagerDecorator).touchPage(IManageablePage) line: 56	
		delegate.touchPage(page);
/s
PageStoreManager(AbstractPageManager).touchPage(IManageablePage) line: 99	
		getRequestAdapter().touch(page);
/ TODO
/t
LinkOnlyStudyPage(Page).onAfterRender() line: 846	
			// Add/touch the response page in the session.
			getSession().getPageManager().touchPage(this);
/d
/t
LinkOnlyStudyPage(WebPage).onAfterRender() line: 218	
		super.onAfterRender();
/d
		// only in development mode validate the headers
		if (getApplication().usesDevelopmentConfig())
		{
			// Ignore if an exception and a redirect happened in between (e.g.
			// RestartResponseAtInterceptPageException)
			IRequestHandler activeHandler = getRequestCycle().getActiveRequestHandler();
			if (activeHandler instanceof IPageRequestHandler)
			{
				IPageRequestHandler h = (IPageRequestHandler)activeHandler;
				if (h.getPage() == this)
				{
					validateHeaders();
/ TODO (Later)
/t
LinkOnlyStudyPage(Component).afterRender() line: 933	
			onAfterRender();
...
		{
			// this flag must always be set to false.
			setFlag(FLAG_RENDERING, false);
/t
LinkOnlyStudyPage(Page).renderPage() line: 1024	
			render();
/d
		}
		finally
		{
			setFreezePageId(frozen);
frozen=false
/ TODO
/t
WebPageRenderer.renderPage(Url, RequestCycle) line: 126	
			requestablePage.renderPage();
/d
			else
			{
				return response;
/t
		finally
		{
			// restore original response and base URL
			requestCycle.setResponse(originalResponse);
/ TODO
			requestCycle.getUrlRenderer().setBaseUrl(originalBaseUrl);
/ TODO

/t
WebPageRenderer.respond(RequestCycle) line: 236	
			// redirect to buffer
			BufferedWebResponse response = renderPage(beforeRenderUrl, requestCycle);
response	BufferedWebResponse  (id=5359)	
	MAX_CACHE_DURATION	Duration  (id=6081)	
	actions	ArrayList<E>  (id=6082)	
		elementData	Object[10]  (id=6109)	
			[0]	BufferedWebResponse$SetDateHeaderAction  (id=6112)	
				name	"Date" (id=6119)	
				value	Time  (id=6120)	
2016.01.07-7.22am
			[1]	BufferedWebResponse$SetDateHeaderAction  (id=6113)	
				name	"Expires" (id=6133)	
				value	Time  (id=6134)	
			[2]	BufferedWebResponse$SetHeaderAction  (id=6114)	
				name	"Pragma" (id=6131)	
				value	"no-cache" (id=6132)	
			[3]	BufferedWebResponse$SetHeaderAction  (id=6115)	
				name	"Cache-Control" (id=6129)	
				value	"no-cache, no-store" (id=6130)	
			[4]	BufferedWebResponse$SetContentTypeAction  (id=6116)	
				contentType	"text/html; charset=UTF-8" (id=6127)	

			[5]	BufferedWebResponse$WriteCharSequenceAction  (id=6083)	
				builder	StringBuilder  (id=6122)	
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
<h1>LinkStudyTargetPage</h1>


<a wicket:id="link" wicketpath="link" href="./?0-1.ILinkListener-link">[Link]</a>
<span wicket:id="text" wicketpath="text"></span>
<span wicket:id="counter" wicketpath="counter">0</span>

</body>
</html>
			[6]	null	
			[7]	null	
			[8]	null	
			[9]	null	
		size	6	
	charSequenceAction	BufferedWebResponse$WriteCharSequenceAction  (id=6083)	
		builder	StringBuilder  (id=6122)	
	dataAction	null	
	originalResponse	HeaderBufferingWebResponse  (id=4977)	
/ TODO

/ Waar is de sessionId? Die zat toch in de response?
/ TODO

			// the url might have changed after page has been rendered (e.g. the
			// stateless flag might have changed because stateful components
			// were added)
			final Url afterRenderUrl = requestCycle
				.mapUrlFor(getRenderPageRequestHandler());
?0
			else
			{
				storeBufferedResponse(afterRenderUrl, response);
/s
WebPageRenderer.storeBufferedResponse(Url, BufferedWebResponse) line: 87	
		if (isSessionTemporary()) 
/ NEE
		WebApplication.get().storeBufferedResponse(getSessionId(), url, response);
/s
WicketApplication(WebApplication).storeBufferedResponse(String, Url, BufferedWebResponse) line: 1006	
		String key = sessionId + url.toString();
7579167034361A11EDD2AE91CFAB81EE?0
		storedResponses.put(key, response);
/t
WebPageRenderer.respond(RequestCycle) line: 280	
				storeBufferedResponse(afterRenderUrl, response);
/d
				redirectTo(afterRenderUrl, requestCycle);
/s
WebPageRenderer.redirectTo(Url, RequestCycle) line: 157	
		bindSessionIfNeeded();
/ NIETS
		WebResponse response = (WebResponse)requestCycle.getResponse();
		String relativeUrl = requestCycle.getUrlRenderer().renderUrl(url);
./?0
		response.sendRedirect(relativeUrl);
/s
BufferedWebResponse.sendRedirect(String) line: 559	
		actions.add(new SendRedirectAction(url));
./?0

/t
RenderPageRequestHandler.respond(IRequestCycle) line: 176	
		PageRenderer renderer = Application.get().getPageRendererProvider().get(this);
		renderer.respond((RequestCycle)requestCycle);
/d
/t
RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 841	

			Response originalResponse = getResponse();
			try
			{
				handler.respond(RequestCycle.this);
/d
			}
			finally
			{
				setResponse(originalResponse);
/ TODO
/t
RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 84	
		try
		{
			respond(handler);
/t
RequestCycle.execute(IRequestHandler) line: 266	
			requestHandlerExecutor.execute(handler);
/d
/t
RequestCycle.processRequest() line: 223	
			if (handler != null)
			{
				execute(handler);
/d
				return true;
/t
		finally
		{
			set(null);
/s
RequestCycle.set(RequestCycle) line: 97	
		ThreadContext.setRequestCycle(requestCycle);
/t
RequestCycle.processRequestAndDetach() line: 297	
		try
		{
			result = processRequest();
/d
		}
		finally
		{
			detach();
/s
equestCycle.set(RequestCycle) line: 97	
		set(this);
		try
		{
			onDetach();
/s
RequestCycle.onDetach() line: 641	
		try
		{
			requestHandlerExecutor.detach();
/s
RequestCycle$HandlerExecutor(RequestHandlerStack).detach() line: 180	
			try
			{
				detach(handler);
/s
RequestCycle$HandlerExecutor.detach(IRequestHandler) line: 848	
			handler.detach(RequestCycle.this);
/s
RenderPageRequestHandler.detach(IRequestCycle) line: 156	
		pageProvider.detach();
/s
PageProvider.detach() line: 327	
		if (pageInstance != null)
		{
			pageInstance.detach();
/s
LinkOnlyStudyPage(Component).detach() line: 1159	
		onDetach();
/s
LinkOnlyStudyPage(Page).onDetach() line: 868	
		setFlag(FLAG_IS_DIRTY, false);

		super.onDetach();
/s
LinkOnlyStudyPage(MarkupContainer).onDetach() line: 1932	
		super.onDetach();
/s
LinkOnlyStudyPage(Component).onDetach() line: 3931	
		setFlag(FLAG_DETACHING, false);
/t
LinkOnlyStudyPage(MarkupContainer).onDetach() line: 1932	
		super.onDetach();
/d
		if (queue != null && !queue.isEmpty())
/ NEE
queue=null
		queue = null;
/t
...
/t
LinkOnlyStudyPage(Component).detach() line: 1161	
		onDetach();
/d
		// always detach models because they can be attached without the
		// component. eg component has a compoundpropertymodel and one of its
		// children component's getmodelobject is called
/ TODO
		detachModels();
/s
LinkOnlyStudyPage(Page).detachModels() line: 228	
		super.detachModels();
/s
LinkOnlyStudyPage(Component).detachModels() line: 1255	
		// Detach any detachable model from this component
		detachModel();
/s
LinkOnlyStudyPage(Component).detachModel() line: 3625	
		IModel<?> model = getModelImpl();
/s
LinkOnlyStudyPage(Component).getModelImpl() line: 3010	
			return (IModel<?>)data_get(0);
/s
LinkOnlyStudyPage(Component).data_get(int) line: 527	
/=
	final Object data_get(int index)
		if (data == null)
/ NEE
data	CompoundPropertyModel<T>  (id=5330)	
	LOG	Log4jLogger  (id=5336)	
	serialVersionUID	1	
	target	LinkOnlyStudyPage  (id=5312)	
/ TODO MODEL

		else if (index == 0)
		{
			return data;
/t
LinkOnlyStudyPage(Component).detachModel() line: 3626	
		IModel<?> model = getModelImpl();
/d
		if (model != null)
		{
			model.detach();
/s
CompoundPropertyModel<T>(ChainingModel<T>).detach() line: 67	
		// Detach nested object if it's a detachable
		if (target instanceof IDetachable)
/ NEE
			((IDetachable)target).detach();
/ NIET
...
/t
LinkOnlyStudyPage(Component).detach() line: 1175	
		detachModels();
/d
		// detach any behaviors
		new Behaviors(this).detach();
/ TODO
		// always detach children because components can be attached
		// independently of their parents
		detachChildren();
/s
LinkOnlyStudyPage(MarkupContainer).detachChildren() line: 1647	
		super.detachChildren();
/ NIETS
		for (int i = children_size(); i-- > 0;)
4
			Object child = children_get(i, false);
[HtmlHeaderContainer [Component id = _header_0]]
[Component id = counter]
			if (child instanceof Component)
			{
				Component component = (Component)child;
				component.detach();
/s
Label(Component).detach() line: 1172	
		onDetach();
/ sets a flag	,
		// always detach models because they can be attached without the
		// component. eg component has a compoundpropertymodel and one of its
		// children component's getmodelobject is called
		detachModels();
/s
Label(Component).detachModels() line: 1255	
		// Detach any detachable model from this component
		detachModel();
/s
Label(Component).detachModel() line: 3628	

		IModel<?> model = getModelImpl();
model	CompoundPropertyModel$AttachedCompoundPropertyModel<C>  (id=5377)	
	LOG	Log4jLogger  (id=5336)	
	serialVersionUID	1	
	owner	Label  (id=5374)	
	target	CompoundPropertyModel<T>  (id=5330)	
		LOG	Log4jLogger  (id=5336)	
		serialVersionUID	1	
		target	LinkOnlyStudyPage  (id=5312)	

		if (model != null)
		{
			model.detach();
/s
CompoundPropertyModel$AttachedCompoundPropertyModel<C>.detach() line: 152	
			super.detach();
/s
		// Detach nested object if it's a detachable
		if (target instanceof IDetachable)
		{
			((IDetachable)target).detach();
/s
CompoundPropertyModel<T>(ChainingModel<T>).detach() line: 63	
		// Detach nested object if it's a detachable
		if (target instanceof IDetachable)
/ NEE
		{
			((IDetachable)target).detach();
/ NIET
/t
CompoundPropertyModel$AttachedCompoundPropertyModel<C>.detach() line: 153	
			super.detach();
/d
			CompoundPropertyModel.this.detach();

/ we gaan weer doen	 wat super.detach net ook deed	,
/s
CompoundPropertyModel<T>(ChainingModel<T>).detach() line: 63	
/ Weer	,
		// Detach nested object if it's a detachable
		if (target instanceof IDetachable)
/ NEE
		{
			((IDetachable)target).detach();
/ NEE
		}
/t
Label(Component).detach() line: 1175	
		detachModels();
/d
		// detach any behaviors
		new Behaviors(this).detach();
/ NIETS	,

		// always detach children because components can be attached
		// independently of their parents
		detachChildren();
Label(Component).detachChildren() is leeg	,

		// reset the model to null when the current model is a IWrapModel and
		// the model that created it/wrapped in it is a IComponentInheritedModel
		// The model will be created next time.
		if (getFlag(FLAG_INHERITABLE_MODEL))
/ JA
		{
			setModelImpl(null);
			setFlag(FLAG_INHERITABLE_MODEL, false);
		}
...
		internalDetach();
/s
Label(Component).internalDetach() line: 1246	
		markup = null;
/t
LinkOnlyStudyPage(MarkupContainer).detachChildren() line: 1649	

/ volgende	,
		for (int i = children_size(); i-- > 0;)
		{
			Object child = children_get(i, false);
child	LinkOnlyStudyPage$1  (id=5398)	
...
/t
LinkOnlyStudyPage(Component).detach() line: 1184	
		detachChildren();
/d
..
		internalDetach();
/s
LinkOnlyStudyPage(Component).internalDetach() line: 1246	
		markup = null;
...
/t
RequestCycle.onDetach() line: 645	
			requestHandlerExecutor.detach();
/d
		}
		finally
		{
			listeners.onDetach(this);
/s
RequestCycleListenerCollection$3.notify(IRequestCycleListener) line: 105	
/=
	@Override
	public void onDetach(final RequestCycle cycle)
	{
		reversedNotifyIgnoringExceptions(new INotifier<IRequestCycleListener>()
		{
			@Override
			public void notify(IRequestCycleListener listener)
			{
->				listener.onDetach(cycle);
/s
Application$3.onDetach(RequestCycle) line: 1749	
/=
	public final RequestCycle createRequestCycle(final Request request, final Response response)
	{
...
		requestCycle.getListeners().add(new AbstractRequestCycleListener()
		{
			@Override
			public void onDetach(final RequestCycle requestCycle)
			{
->				if (Session.exists())
/ JA
				{
					Session.get().getPageManager().commitRequest();
/s
WebSession(Session).getPageManager() line: 896	
		IPageManager pageManager = Application.get().internalGetPageManager();

pageManager	PageStoreManager  (id=5421)	
	applicationName	"wicket-testing" (id=5425)	
	context	DefaultPageManagerContext  (id=5430)	
	pageStore	DefaultPageStore  (id=5431)	
		LOG	Log4jLogger  (id=5437)	
		dataStore	AsynchronousDataStore  (id=5438)	
			dataStore	DiskDataStore  (id=5446)	
				INDEX_FILE_NAME	"DiskDataStoreIndex" (id=5452)	
				log	Log4jLogger  (id=5453)	
				applicationName	"wicket-testing" (id=5425)	
				fileStoreFolder	File  (id=5454)	
/home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28/work/Catalina/localhost/wicket-testing
				maxSizePerPageSession	Bytes  (id=5455)	
				sessionEntryMap	ConcurrentHashMap<K,V>  (id=5457)	
{}
			entries	LinkedBlockingQueue<E>  (id=5448)	
			entryMap	ConcurrentHashMap<K,V>  (id=5450)	
			pageSavingThread	Thread  (id=4984)	
		pagesCache	DefaultPageStore$SerializedPagesCache  (id=5440)	
		pageSerializer	JavaSerializer  (id=5442)	

		return pageAccessSynchronizer.get().adapt(pageManager);
/=
	public IPageManager adapt(IPageManager pagemanager)
	{
		return new PageManagerDecorator(pagemanager)
			@Override
			public IManageablePage getPage(int pageId)
			@Override
			public void touchPage(IManageablePage page)
			@Override
			public void commitRequest()

/t
Application$3.onDetach(RequestCycle) line: 1751	
					Session.get().getPageManager().commitRequest();
/d
/s
PageAccessSynchronizer$2.commitRequest() line: 270	
				try
				{
					super.commitRequest();
/s
PageAccessSynchronizer$2(PageManagerDecorator).commitRequest() line: 68	
		delegate.commitRequest();
/s
PageStoreManager(AbstractPageManager).commitRequest() line: 76	
		getRequestAdapter().commitRequest();
/s
PageStoreManager(AbstractPageManager).getRequestAdapter() line: 64	
		RequestAdapter adapter = (RequestAdapter)getContext().getRequestData();
/s
DefaultPageManagerContext.getRequestData() line: 52	
		RequestCycle requestCycle = RequestCycle.get();
		return requestCycle.getMetaData(requestCycleMetaDataKey);
/t
PageStoreManager(AbstractPageManager).getRequestAdapter() line: 65	

		RequestAdapter adapter = (RequestAdapter)getContext().getRequestData();
/d
adapter	PageStoreManager$PersistentRequestAdapter  (id=5494)	
	log	Log4jLogger  (id=5496)	
	context	DefaultPageManagerContext  (id=5430)	
	this$0	PageStoreManager  (id=5421)	
	touchedPages	ArrayList<E>  (id=5497)	

		return adapter;
/t
PageStoreManager(AbstractPageManager).commitRequest() line: 76	
		getRequestAdapter().commitRequest();
/pd
/s
PageStoreManager$PersistentRequestAdapter(RequestAdapter).commitRequest() line: 148	
		if (touchedPages.isEmpty() == false)
/ NEE
		{
			List<IManageablePage> statefulPages = new ArrayList<IManageablePage>(
				touchedPages.size());
			for (IManageablePage page : touchedPages)
			{
				boolean isPageStateless;
				try
				{
					isPageStateless = page.isPageStateless();
				}
				if (isPageStateless == false)
				{
					statefulPages.add(page);

			if (statefulPages.isEmpty() == false)
			{
				storeTouchedPages(statefulPages);
statefullPages=[[Page class = my.test.own.LinkOnlyStudyPage, id = 0, render count = 1]
/s
PageStoreManager$PersistentRequestAdapter.storeTouchedPages(List<IManageablePage>) line: 398	
			if (!touchedPages.isEmpty())
			{
				SessionEntry entry = getSessionEntry(true);
/s
PageStoreManager$PersistentRequestAdapter.getSessionEntry(boolean) line: 372	
/=
		private SessionEntry getSessionEntry(boolean create)
create=true
			String attributeName = getAttributeName();
/s
PageStoreManager.getAttributeName() line: 323	
				return ATTRIBUTE_NAME + " - " + applicationName;
	private static final String ATTRIBUTE_NAME = "wicket:persistentPageManagerData";
/t
PageStoreManager$PersistentRequestAdapter.getSessionEntry(boolean) line: 373	
			String attributeName = getAttributeName();
/d
wicket:persistentPageManagerData - wicket-testing
			SessionEntry entry = (SessionEntry)getSessionAttribute(attributeName);
/s
PageStoreManager$PersistentRequestAdapter(RequestAdapter).getSessionAttribute(String) line: 100	
		return context.getSessionAttribute(key);
/s
DefaultPageManagerContext.getSessionAttribute(String) line: 66	
		return Session.get().getAttribute(key);
/s
WebSession(Session).getAttribute(String) line: 731	
		if (!isTemporary())
/ JA
		{
			RequestCycle cycle = RequestCycle.get();
			if (cycle != null)
			{
				return getSessionStore().getAttribute(cycle.getRequest(), name);
/s
HttpSessionStore.getAttribute(Request, String) line: 261	
		HttpSession httpSession = getHttpSession(request, false);
/ create=false
/s
HttpSessionStore.getHttpSession(Request, boolean) line: 95	
		return getHttpServletRequest(request).getSession(create);
/s
HttpSessionStore.getHttpServletRequest(Request) line: 74	
		Object containerRequest = request.getContainerRequest();
containerRequest	RequestFacade  (id=5079)	
/t
/s
RequestFacade.getSession(boolean) line: 886	
       } else {
            return request.getSession(create);
create=false
/s
Request.getSession(boolean) line: 2256	
        Session session = doGetSession(create);
StandardSession[1488BF7AD5D25485EF09E959884D13FC]

        return session.getSession();
...
/t
HttpSessionStore.getAttribute(Request, String) line: 264	
		HttpSession httpSession = getHttpSession(request, false);
/d
httpSession	StandardSessionFacade  (id=8510)	
	session	StandardSession  (id=8502)	
StandardSession[1488BF7AD5D25485EF09E959884D13FC]

		if (httpSession != null)
		{
			return (Serializable)httpSession.getAttribute(getSessionAttributePrefix(request) + name);
/s
HttpSessionStore.getSessionAttributePrefix(Request) line: 243	
		String sessionAttributePrefix = MarkupParser.WICKET;
"wicket"
		if (request instanceof WebRequest)
		{
			sessionAttributePrefix = WebApplication.get().getSessionAttributePrefix( (WebRequest)request, null);
/s
WicketApplication(WebApplication).getSessionAttributePrefix(WebRequest, String) line: 277	
		if (sessionAttributePrefix == null)
/ NEE
wicket:wicket-testing:
		return sessionAttributePrefix;
...
/t
HttpSessionStore.getAttribute(Request, String) line: 264	
			return (Serializable)httpSession.getAttribute(getSessionAttributePrefix(request) + name);
/ pd
/s
StandardSessionFacade.getAttribute(String) line: 108	
        return session.getAttribute(name);
name=wicket:wicket-testing:wicket:persistentPageManagerData - wicket-testing
...
/t
PageStoreManager$PersistentRequestAdapter.getSessionEntry(boolean) line: 374	
			String attributeName = getAttributeName();
wicket:persistentPageManagerData - wicket-testing
			SessionEntry entry = (SessionEntry)getSessionAttribute(attributeName);
/d
null
			if (entry == null && create)
/ JA
			{
/ Dit gaan we doen	,
				bind();
				entry = new SessionEntry(applicationName, getSessionId());
				setSessionAttribute(attributeName, entry);
/ In meer detail	,
				bind();
/ DOET NIETS	, is al 
/ want,	
/ VANMIDDAG
/s
PageStoreManager$PersistentRequestAdapter(RequestAdapter).bind() line: 78	
		context.bind();
/s
DefaultPageManagerContext.bind() line: 43	
		Session.get().bind();
/s
	/**
	 * Force binding this session to the application's {@link ISessionStore session store} if not
	 * already done so.
	 * <p>
WebSession(Session).bind() line: 257	
		ISessionStore store = getSessionStore();
		Request request = RequestCycle.get().getRequest();
		if (store.lookup(request) == null)
/s
HttpSessionStore.lookup(Request) line: 199	
		String sessionId = getSessionId(request, false);
1488BF7AD5D25485EF09E959884D13FC
/ Is er al	,
		if (sessionId != null)
		{
			return (Session)getAttribute(request, Session.SESSION_ATTRIBUTE_NAME);
 Session.SESSION_ATTRIBUTE_NAME="session"
/s
HttpSessionStore.getAttribute(Request, String) line: 264	
		HttpSession httpSession = getHttpSession(request, false);
		if (httpSession != null)
		{
			return (Serializable)httpSession.getAttribute(getSessionAttributePrefix(request) + name);
getSessionAttributePrefix(request) + name= "wicket:wicket-testing:session"
name="session"
/t
WebSession(Session).bind() line: 280	
		if (store.lookup(request) == null)
/ NEE
org.apache.wicket.protocol.http.WebSession@67183d3f
	id=1488BF7AD5D25485EF09E959884D13FC
/t
PageStoreManager$PersistentRequestAdapter.getSessionEntry(boolean) line: 377	
				bind();
/ DOET NIETS	,
/d
				entry = new SessionEntry(applicationName, getSessionId());
applicationName="wicket-testing"
getSessionId()=1488BF7AD5D25485EF09E959884D13FC
				setSessionAttribute(attributeName, entry);
attributeName	"wicket:persistentPageManagerData - wicket-testing" (id=8456)	
/s
PageStoreManager$PersistentRequestAdapter(RequestAdapter).setSessionAttribute(String, Serializable) line: 89	
		context.setSessionAttribute(key, value);
/s
DefaultPageManagerContext.setSessionAttribute(String, Serializable) line: 99	
		Session.get().setAttribute(key, value);
key	"wicket:persistentPageManagerData - wicket-testing" (id=8456)	
value	PageStoreManager$SessionEntry  (id=9032)	
	serialVersionUID	1	
	afterReadObject	null	
	applicationName	"wicket-testing" (id=9029)	
	sessionCache	null	
	sessionId	"1488BF7AD5D25485EF09E959884D13FC" (id=8427)	
/ TODO
/ we set in session 1488BF7AD5D25485EF09E959884D13FC een entry met key="wicket:persistentPageManagerData - wicket-testing" en value=..., sessionId   "1488BF7AD5D25485EF09E959884D13FC"
...
/t
PageStoreManager$PersistentRequestAdapter.getSessionEntry(boolean) line: 380	
				setSessionAttribute(attributeName, entry);
			}
			return entry;
/t
PageStoreManager$PersistentRequestAdapter.storeTouchedPages(List<IManageablePage>) line: 399	
			if (!touchedPages.isEmpty())
			{
				SessionEntry entry = getSessionEntry(true);
/s
PageStoreManager$PersistentRequestAdapter.getSessionEntry(boolean) line: 373	

entry	PageStoreManager$SessionEntry  (id=9032)	
/d
				entry.setSessionCache(touchedPages);

touchedPages	ArrayList<E>  (id=8438)	
[[Page class = my.test.own.LinkOnlyStudyPage, id = 0, render count = 1]]
entry	PageStoreManager$SessionEntry  (id=9032)	
	serialVersionUID	1	
	afterReadObject	null	
	applicationName	"wicket-testing" (id=9029)	
	sessionCache	ArrayList<E>  (id=9043)	
[[Page class = my.test.own.LinkOnlyStudyPage, id = 0, render count = 1]]
	sessionId	"1488BF7AD5D25485EF09E959884D13FC" (id=8427)	

/ Intermezzo

/ Als we in Expressions	, 
org.apache.wicket.Session.get()
/ en
org.apache.wicket.Session.get().getSessionStore()
/ dan zien we NIET de entry met key="wicket:persistentPageManagerData - wicket-testing" en value=..., sessionId   "1488BF7AD5D25485EF09E959884D13FC"
/ TODO

/ Einde Intermezzo

/ Intermezzo

/ we zijn nog in,	

RequestCycle.onDetach() line: 645	
		finally
		{
			listeners.onDetach(this);

/ Einde Intermezzo

				for (IManageablePage page : touchedPages)
				{
					// WICKET-5103 use the same sessionId as used in SessionEntry#getPage()
					pageStore.storePage(entry.sessionId, page);
/s
DefaultPageStore.storePage(String, IManageablePage) line: 61	
/=
	public void storePage(final String sessionId, final IManageablePage page)
sessionId	"1488BF7AD5D25485EF09E959884D13FC" (id=8427)	
page	LinkOnlyStudyPage  (id=8443)	

		SerializedPage serialized = createSerializedPage(sessionId, page);
/s
DefaultPageStore.createSerializedPage(String, IManageablePage) line: 276	
		byte[] data = serializePage(page);
/s
DefaultPageStore(AbstractPageStore).serializePage(IManageablePage) line: 131	
		byte[] data = pageSerializer.serialize(page);
/s
JavaSerializer.serialize(Object) line: 72	
		try
		{
			final ByteArrayOutputStream out = new ByteArrayOutputStream();
			ObjectOutputStream oos = null;
			try
			{
				oos = newObjectOutputStream(out);
				oos.writeObject(applicationKey);
wicket-testing
				oos.writeObject(object);
[Page class = my.test.own.LinkOnlyStudyPage, id = 0, render count = 1]
			finally
			{
				try
				{
					IOUtils.close(oos);
				}
				finally
				{
					out.close();
			return out.toByteArray();
/t
DefaultPageStore(AbstractPageStore).serializePage(IManageablePage) line: 135	
		byte[] data = pageSerializer.serialize(page);
/d
		return data;
/t
DefaultPageStore.createSerializedPage(String, IManageablePage) line: 283	
		byte[] data = serializePage(page);
/d
		if (data != null)
		{
			serializedPage = new SerializedPage(sessionId, page.getPageId(), data);
page.getPageId()=0 = Page.numericId
		return serializedPage;
/t
DefaultPageStore.storePage(String, IManageablePage) line: 64	
		SerializedPage serialized = createSerializedPage(sessionId, page);
/d
		if (serialized != null)
		{
			int pageId = page.getPageId();
0
			pagesCache.storePage(sessionId, pageId, serialized);
/s
DefaultPageStore$SerializedPagesCache.storePage(String, Integer, DefaultPageStore$SerializedPage) line: 427	
				internalStore(page);
/s
DefaultPageStore$SerializedPagesCache.internalStore(DefaultPageStore$SerializedPage) line: 450	
			cache.push(new SoftReference<>(page));
...
/t
DefaultPageStore.storePage(String, IManageablePage) line: 66	
			int pageId = page.getPageId();
			pagesCache.storePage(sessionId, pageId, serialized);
/d
			storePageData(sessionId, pageId, serialized.getData());
/s
DefaultPageStore(AbstractPageStore).storePageData(String, int, byte[]) line: 119	
		dataStore.storeData(sessionId, pageId, data);
/s
AsynchronousDataStore.storeData(String, int, byte[]) line: 216	
		Entry entry = new Entry(sessionId, id, data);
		String key = getKey(entry);
/s
AsynchronousDataStore.getKey(AsynchronousDataStore$Entry) line: 257	
		return getKey(entry.sessionId, entry.pageId);
/s
			return pageId + ":::" + sessionId;
/t
AsynchronousDataStore.storeData(String, int, byte[]) line: 218	
		String key = getKey(entry);
0:::1488BF7AD5D25485EF09E959884D13FC
/d
		entryMap.put(key, entry);
		try
		{
			boolean added = entries.offer(entry, OFFER_WAIT, TimeUnit.MILLISECONDS);
true
			if (added == false)
/ NEE
			{
				entryMap.remove(key);
/ NIET
				dataStore.storeData(sessionId, id, data);
/ NIET
/ TODO
...
/t
PageAccessSynchronizer$2.commitRequest() line: 274	
					super.commitRequest();
/d
				}
				finally
				{
					unlockAllPages();
/s
PageAccessSynchronizer.internalUnlockPages(Integer) line: 204	
/=
	private void internalUnlockPages(final Integer pageId)
pageId=null
		final Thread thread = Thread.currentThread();
		final Iterator<PageLock> locks = this.locks.get().values().iterator();

		while (locks.hasNext())
		{
			// remove all locks held by this thread if 'pageId' is not specified
			// otherwise just the lock for this 'pageId'
			final PageLock lock = locks.next();
			if ((pageId == null || pageId == lock.pageId) && lock.thread == thread)
lock.pageId=0
/ de LinkOnlyStudePage	,
			{
				locks.remove();
				// if any locks were removed notify threads waiting for a lock
				lock.markReleased(isDebugEnabled);
/ TODO
/t
Application$3.onDetach(RequestCycle) line: 1754	
			public void onDetach(final RequestCycle requestCycle)
			{
				if (Session.exists())
				{
					Session.get().getPageManager().commitRequest();
/d
				}
/t
RequestCycleListenerCollection(ListenerCollection<T>).reversedNotify(INotifier<T>) line: 144	
		Iterator<T> it = new ReverseListIterator<>(listeners);
[org.apache.wicket.request.cycle.RequestCycleListenerCollection@fc0bc99, org.apache.wicket.Application$3@47b6c34b]
		while (it.hasNext())

/ volgende	,

		{
			T listener = it.next();
			notifier.notify(listener);
/ TODO
/t
RequestCycle.onDetach() line: 648	
		finally
		{
			listeners.onDetach(this);
/d
		}

		if (Session.exists())
		{
			Session.get().detach();
/s
WebSession(Session).detach() line: 648	
		else
		{
			// WICKET-5103 container might have changed id
			updateId();
/s
WebSession(Session).updateId() line: 398	
		RequestCycle requestCycle = RequestCycle.get();
		if (requestCycle != null)
		{
			id = getSessionStore().getSessionId(requestCycle.getRequest(), false);
/s
HttpSessionStore.getSessionId(Request, boolean) line: 159	
/ De sessionId komt uit de session, en die komt uit de request	, 
/ Dus helemaal niet uit de session store	,
/ TODO
/ Wat gebeurt hier,	 want de session id die hij vraagt, komt uit de session	, dus hij resets de id met zichzelf	,

/t
RequestCycle.detach() line: 600	
			onDetach();
/d
		}
		finally
		{
			try
			{
				onInternalDetach();
/s
RequestCycle.onInternalDetach() line: 611	
		if (Session.exists())
		{
			Session.get().internalDetach();
/s
WebSession(Session).internalDetach() line: 681	
		if (dirty)
/ NEE
		{
			Request request = RequestCycle.get().getRequest();
/ NIET
			getSessionStore().flushSession(request, this);
/ NIET
		dirty = false;
/t
RequestCycle.detach() line: 604	
				onInternalDetach();
			}
			finally
			{
				set(null);
/t
RequestCycle.processRequestAndDetach() line: 298	
		finally
		{
			detach();
/d
/t
WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 271	
		if (!requestCycle.processRequestAndDetach())
/ NEE
		else
		{
			webResponse.flush();
/s
HeaderBufferingWebResponse.stopBuffering() line: 60	
		if (buffering)
		{
			bufferedResponse.writeTo(originalResponse);
			buffering = false;
/t
HeaderBufferingWebResponse.flush() line: 99	
		stopBuffering();
/d
		originalResponse.flush();
/s
ServletWebResponse.flush() line: 321	
		try
		{
			HttpServletRequest httpServletRequest = webRequest.getContainerRequest();
			if (httpServletRequest.isAsyncStarted() == false)
			{
				httpServletResponse.flushBuffer();
/t
WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 205	
				res = processRequestCycle(requestCycle, webResponse, httpServletRequest,
					httpServletResponse, chain);
/d
		finally
		{
			ThreadContext.restore(previousThreadContext);

			if (newClassLoader != previousClassLoader)
			{
				Thread.currentThread().setContextClassLoader(previousClassLoader);
			}

			if (response.isCommitted() && httpServletRequest.isAsyncStarted() == false)
			{
				response.flushBuffer();

/ Einde DEBUG WICKET 7 GET 

/ DEBUG WICKET 7 GET

/ LabelOnlyStudyPage	,

/ 7	. 

/ Wanneer wordt de session create	?

	WebSession(Session).<init>(Request) line: 224	

	WebSession.<init>(Request) line: 55	
		super(request);

	WicketApplication(WebApplication).newSession(Request, Response) line: 641	
		return new WebSession(request);

	WicketApplication(Application).fetchCreateAndSetSession(RequestCycle) line: 1679	
		if (session == null)
		{
			session = newSession(requestCycle.getRequest(), requestCycle.getResponse());

	Session.get() line: 169	
		else
		{
			return Application.get().fetchCreateAndSetSession(RequestCycle.get());

	DefaultMapperContext.getPageInstance(int) line: 113	
		IManageablePage manageablePage = Session.get().getPageManager().getPage(pageId);

	PageProvider.getStoredPage(int) line: 296	
		IRequestablePage storedPageInstance = getPageSource().getPageInstance(pageId);

	PageProvider.isNewPageInstance() line: 208	
			IRequestablePage storedPageInstance = getStoredPage(pageId);

	HomePageMapper(AbstractBookmarkableMapper).processHybrid(PageInfo, Class<IRequestablePage>, PageParameters, Integer) line: 261	
		if (provider.isNewPageInstance() && !getRecreateMountedPagesAfterExpiry())

	HomePageMapper(AbstractBookmarkableMapper).mapRequest(Request) line: 365	
			else if (info.getPageInfo().getPageId() != null && info.getComponentInfo() == null)
			{
				// if there is page instance information in the URL but no component and listener
				// interface then this is a hybrid URL - we need to try to reuse existing page
				// instance
				return processHybrid(info.getPageInfo(), pageClass, pageParameters, null);

	SystemMapper(CompoundRequestMapper).mapRequest(Request) line: 150	
		for (MapperWithScore mapperWithScore : list)
		{
			IRequestMapper mapper = mapperWithScore.getMapper();
			IRequestHandler handler = mapper.mapRequest(request);

	RequestCycle.resolveRequestHandler() line: 189	
		return requestMapper.mapRequest(request);

	RequestCycle.processRequest() line: 219	
			IRequestHandler handler = resolveRequestHandler();

	RequestCycle.processRequestAndDetach() line: 293	
->			result = processRequest();

	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ 7	.

/ we geven c	,

WicketApplication(Application).fetchCreateAndSetSession(RequestCycle) line: 1681	
		if (session == null)
		{
			session = newSession(requestCycle.getRequest(), requestCycle.getResponse());
/d
			ThreadContext.setSession(session);
/d
			internalGetPageManager().newSessionCreated();
/s
WicketApplication(Application).internalGetPageManager() line: 1508	
		if (pageManager == null)
		{
			synchronized (this)
			{
				if (pageManager == null)
				{
					pageManager = pageManagerProvider.get(getPageManagerContext());
/s
DefaultPageManagerProvider.get(IPageManagerContext) line: 56	

		IDataStore dataStore = newDataStore();

		StoreSettings storeSettings = getStoreSettings();

		if (dataStore.canBeAsynchronous())
		{
			int capacity = storeSettings.getAsynchronousQueueCapacity();
			dataStore = new AsynchronousDataStore(dataStore, capacity);
		}

		IPageStore pageStore = newPageStore(dataStore);
		return new PageStoreManager(application.getName(), pageStore, pageManagerContext);

/ Dit gaan we doen	, 

/ In meer detail	,

		IDataStore dataStore = newDataStore();
/s
DefaultPageManagerProvider.newDataStore() line: 81	

		StoreSettings storeSettings = getStoreSettings();
this	DefaultPageManagerProvider  (id=6886)	
storeSettings	StoreSettings  (id=6892)	
	DEFAULT_ASYNCHRONOUS_QUEUE_CAPACITY	100	
	DEFAULT_CACHE_SIZE	0	
	DEFAULT_MAX_SIZE_PER_SESSION	Bytes  (id=6894)	
	asynchronousQueueCapacity	100	
	fileStoreFolder	null	
	inmemoryCacheSize	50	
	isAsynchronous	true	
	maxSizePerSession	Bytes  (id=6895)	
500K

		Bytes maxSizePerSession = storeSettings.getMaxSizePerSession();
500K
		File fileStoreFolder = storeSettings.getFileStoreFolder();
/home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28/work/Catalina/localhost/wicket-testing

		return new DiskDataStore(application.getName(), fileStoreFolder, maxSizePerSession);
/s
DiskDataStore.<init>(String, File, Bytes) line: 77	
		this.applicationName = applicationName;
		this.fileStoreFolder = fileStoreFolder;
		maxSizePerPageSession = Args.notNull(maxSizePerSession, "maxSizePerSession");
		sessionEntryMap = new ConcurrentHashMap<>();
		try
		{
			if (this.fileStoreFolder.exists() || this.fileStoreFolder.mkdirs())
			{
				loadIndex();
/s
DiskDataStore.loadIndex() line: 246	
		File storeFolder = getStoreFolder();
/home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28/work/Catalina/localhost/wicket-testing/wicket-testing-filestore
		File index = new File(storeFolder, INDEX_FILE_NAME);
/home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28/work/Catalina/localhost/wicket-testing/wicket-testing-filestore/DiskDataStoreIndex
		if (index.exists() && index.length() > 0)
/ NEE
		Files.remove(index);
...
/t
DefaultPageManagerProvider.get(IPageManagerContext) line: 58	
		IDataStore dataStore = newDataStore();
		StoreSettings storeSettings = getStoreSettings();

		if (dataStore.canBeAsynchronous())
/ JA
		{
			int capacity = storeSettings.getAsynchronousQueueCapacity();
100
			dataStore = new AsynchronousDataStore(dataStore, capacity);
/s
AsynchronousDataStore.<init>(IDataStore, int) line: 90	
		this.dataStore = dataStore;
		entries = new LinkedBlockingQueue<Entry>(capacity);
100
		entryMap = new ConcurrentHashMap<String, Entry>();

/ Intermezzo

/ entries is de queue	, entryMap is een soort cache voor de dataStore	,l

/ storeData zet de entry in entryMap	, en op de queue	, 
/ als er geen plaats is op de queue, doet deze thread hetzelfde als PageSavingRunnable: set 'm in de dataStore, en haalt hem uit entryMap	,

/ de PageSavingRunnable haalt de entries van de queue en stopt ze in de dataStore, en haalt ze uit de entryMap	,
 

/ Einde Intermezzo

		PageSavingRunnable savingRunnable = new PageSavingRunnable(dataStore, entries, entryMap);
		pageSavingThread = new Thread(savingRunnable, "Wicket-PageSavingThread");
		pageSavingThread.setDaemon(true);
		pageSavingThread.start();
	}

		}
/t
DefaultPageManagerProvider.get(IPageManagerContext) line: 63	

		if (dataStore.canBeAsynchronous())
		{
			int capacity = storeSettings.getAsynchronousQueueCapacity();
			dataStore = new AsynchronousDataStore(dataStore, capacity);
/d
		IPageStore pageStore = newPageStore(dataStore);
/s
DefaultPageManagerProvider.newPageStore(IDataStore) line: 73	
		int inmemoryCacheSize = getStoreSettings().getInmemoryCacheSize();
50
		ISerializer pageSerializer = application.getFrameworkSettings().getSerializer();
org.apache.wicket.serialize.java.JavaSerializer@207f1d58
		return new DefaultPageStore(pageSerializer, dataStore, inmemoryCacheSize);

dataStore	AsynchronousDataStore  (id=6924)	
inmemoryCacheSize	50	
pageSerializer	JavaSerializer  (id=6932)	

/ dus de page store uses de data store	, en zelfs de asynchrone wrapper	,
/s
DefaultPageStore.<init>(ISerializer, IDataStore, int) line: 55	
		super(pageSerializer, dataStore, new SerializedPagesCache(cacheSize));
/ cacheSize=50 (pages)	, die we opgaven in WicketApplication.getStoreSettings()	,
/ 		getStoreSettings().setInmemoryCacheSize(50);

/s
DefaultPageStore$SerializedPagesCache.<init>(int) line: 317	
			this.maxSize = maxSize;
			cache = new ConcurrentLinkedDeque<>();
/t
/s
DefaultPageStore(AbstractCachingPageStore<P>).<init>(ISerializer, IDataStore, SecondLevelPageCache<String,Integer,P>) line: 50	
/=
	protected AbstractCachingPageStore(ISerializer pageSerializer, IDataStore dataStore,
	                                   SecondLevelPageCache<String, Integer, P> pagesCache)
	{

		super(pageSerializer, dataStore);
/s
DefaultPageStore(AbstractPageStore).<init>(ISerializer, IDataStore) line: 46	
		this.pageSerializer = pageSerializer;
		this.dataStore = dataStore;
/t
DefaultPageStore(AbstractCachingPageStore<P>).<init>(ISerializer, IDataStore, SecondLevelPageCache<String,Integer,P>) line: 52	
		super(pageSerializer, dataStore);
/d
		this.pagesCache = Args.notNull(pagesCache, "pagesCache");
...
/t
DefaultPageManagerProvider.get(IPageManagerContext) line: 67	
		IPageStore pageStore = newPageStore(dataStore);
/d
		return new PageStoreManager(application.getName(), pageStore, pageManagerContext);
/s
PageStoreManager.<init>(String, IPageStore, IPageManagerContext) line: 60	
		super(context);
/s
PageStoreManager(AbstractPageManager).<init>(IPageManagerContext) line: 39	
		this.context = Args.notNull(context, "context");
/t
PageStoreManager.<init>(String, IPageStore, IPageManagerContext) line: 65	
		super(context);
/d
		this.applicationName = applicationName;
		this.pageStore = pageStore;

		MANAGERS.put(applicationName, this);
...
/t
WicketApplication(Application).fetchCreateAndSetSession(RequestCycle) line: 1681	
			internalGetPageManager().newSessionCreated();
/pd
/s
PageStoreManager(AbstractPageManager).newSessionCreated() line: 93	
		getRequestAdapter().newSessionCreated();
/s
PageStoreManager(AbstractPageManager).getRequestAdapter() line: 67	
		RequestAdapter adapter = (RequestAdapter)getContext().getRequestData();
null
		if (adapter == null)
		{
			adapter = newRequestAdapter(getContext());
/s
PageStoreManager.newRequestAdapter(IPageManagerContext) line: 412	
		return new PersistentRequestAdapter(context);
/s
PageStoreManager$PersistentRequestAdapter.<init>(PageStoreManager, IPageManagerContext) line: 339	
			super(context);
/s
PageStoreManager$PersistentRequestAdapter(RequestAdapter).<init>(IPageManagerContext) line: 47	
		this.context = context;
/t
PageStoreManager(AbstractPageManager).getRequestAdapter() line: 68	
			adapter = newRequestAdapter(getContext());
/d
			getContext().setRequestData(adapter);
/ TODO (Afmaken)

/ 7	. 

/ model creation	,

/c
	LabelOnlyStudyPage.<init>(PageParameters) line: 17	
	DefaultPageFactory.newPage(Constructor<C>, PageParameters) line: 171	
	DefaultPageFactory.newPage(Class<C>) line: 76	
	DefaultMapperContext.newPageInstance(Class<IRequestablePage>, PageParameters) line: 102	
	PageProvider.resolvePageInstance(Integer, Class<IRequestablePage>, PageParameters, Integer) line: 268	
	PageProvider.getPageInstance() line: 166	
	WebPageRenderer(PageRenderer).getPage() line: 78	
	WebPageRenderer.isPageStateless() line: 287	
	WebPageRenderer.shouldRenderPageAndWriteResponse(RequestCycle, Url, Url) line: 329	
		return (compatibleProtocols(currentUrl.getProtocol(), targetUrl.getProtocol())) &&
				(neverRedirect(getRedirectPolicy())
			|| ((isOnePassRender() && notForcedRedirect(getRedirectPolicy())) || (targetUrl
				.equals(currentUrl) && notNewAndNotStatelessPage(isNewPageInstance(),
				isPageStateless()))) || (targetUrl.equals(currentUrl) && isRedirectToRender())
			|| (shouldPreserveClientUrl(cycle) && notForcedRedirect(getRedirectPolicy())));

	WebPageRenderer.respond(RequestCycle) line: 193	
		if (shouldRenderPageAndWriteResponse(requestCycle, currentUrl, targetUrl))

	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 837	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/s
LabelOnlyStudyPage.<init>(PageParameters) line: 17	
		IModel<String>model=new PropertyModel<String>(this, "text");
/s
PropertyModel<T>.<init>(Object, String) line: 102	
		super(modelObject);
/s
PropertyModel<T>(AbstractPropertyModel<T>).<init>(Object) line: 61	
		super(modelObject);
/s
PropertyModel<T>(ChainingModel<T>).<init>(Object) line: 42	
		target = modelObject;
[Page class = my.test.own.LabelOnlyStudyPage, id = 0, render count = 0]
...
/t
PropertyModel<T>.<init>(Object, String) line: 103	
		super(modelObject);
/d
		this.expression = expression;
"text"
/t
LabelOnlyStudyPage.<init>(PageParameters) line: 19	
		IModel<String>model=new PropertyModel<String>(this, "text");
/d		
		Label text=new Label("text",model);
/s
Label.<init>(String, IModel<?>) line: 106	
		super(id, model);
/s
Label(WebComponent).<init>(String, IModel<?>) line: 50	
		super(id, model);
/s
Label(Component).<init>(String, IModel<?>) line: 682	
		setId(id);
...
		if (model != null)
		{
			setModelImpl(wrap(model));
/s
Label(Component).setModelImpl(IModel<?>) line: 3037	
		else
		{
			if (model != null)
			{
				data_insert(0, model);
/s
Label(Component).data_insert(int, Object) line: 567	
		if (currentLength == 0)
		{
			data = object;




/ 7	.

/ TODO

/c
	LabelOnlyStudyPage(MarkupContainer).renderNext(MarkupStream) line: 1379	
		final MarkupElement element = markupStream.get();
<span wicket:id="text">

	LabelOnlyStudyPage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1601	
	LabelOnlyStudyPage(Page).onRender() line: 879	
	LabelOnlyStudyPage(WebPage).onRender() line: 142	
	LabelOnlyStudyPage(Component).internalRender() line: 2372	
	LabelOnlyStudyPage(Component).render() line: 2300	
	LabelOnlyStudyPage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 837	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/s
LabelOnlyStudyPage(MarkupContainer).renderNext(MarkupStream) line: 1405	
			// Failed to find it?
			if (component != null)
			{
				component.render();
/s
Label(Component).render() line: 2300	
			// Do the render
			internalRender();
/s
		IMarkupFragment markup = getMarkup();
<span wicket:id="text"></span>
		// MarkupStream is an Iterator for the markup
		MarkupStream markupStream = new MarkupStream(markup);
<span wicket:id="text"></span>, index = 0, current =  '<span wicket:id="text">' (line 0, column 0)]

		MarkupElement elem = markup.get(0);
this	Label  (id=7229)	
markup	MarkupFragment  (id=7265)	
markupStream	MarkupStream  (id=7266)	
elem	ComponentTag  (id=7249)	

				onRender();
/s
Label(WebComponent).onRender() line: 56	
		internalRenderComponent();
/s
Label(Component).internalRenderComponent() line: 2500	

/ 7	. 

/ Wanneer wordt de model geraadpleegd?

/c
	PropertyModel<T>(AbstractPropertyModel<T>).getObject() line: 71	
	Label(Component).getDefaultModelObject() line: 1618	
	Label(Component).getDefaultModelObjectAsString() line: 1646	
	Label.onComponentTagBody(MarkupStream, ComponentTag) line: 115	
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
	Label(Component).internalRenderComponent() line: 2557	
			if (tag.isOpen())
			{
				// Render the body. The default strategy will simply call the component's
				// onComponentTagBody() implementation.
				getMarkupSourcingStrategy().onComponentTagBody(this, markupStream, tag);

	Label(WebComponent).onRender() line: 56	
	Label(Component).internalRender() line: 2372	
	Label(Component).render() line: 2300	
	LabelOnlyStudyPage(MarkupContainer).renderNext(MarkupStream) line: 1405	
	LabelOnlyStudyPage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1601	
	LabelOnlyStudyPage(Page).onRender() line: 879	
	LabelOnlyStudyPage(WebPage).onRender() line: 142	
	LabelOnlyStudyPage(Component).internalRender() line: 2372	
	LabelOnlyStudyPage(Component).render() line: 2300	
	LabelOnlyStudyPage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 837	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/s
PropertyModel<T>(AbstractPropertyModel<T>).getObject() line: 71	
		final String expression = propertyExpression();
"text"
		final Object target = getInnermostModelOrObject();
[Page class = my.test.own.LabelOnlyStudyPage, id = 0, render count = 1]
		if (target != null)
		{
			return (T)PropertyResolver.getValue(expression, target);
/s
PropertyResolver.getValue(String, Object) line: 96	
		ObjectAndGetSetter getter = getObjectAndGetSetter(expression, object, RETURN_NULL);
/s
PropertyResolver.getObjectAndGetSetter(String, Object, int) line: 251	
		return getObjectAndGetSetter(expression, object, tryToCreateNull, object.getClass());
/s
PropertyResolver.getObjectAndGetSetter(String, Object, int, Class<?>) line: 267	
		IGetAndSet getAndSetter = getGetAndSetter(exp, clz);
		return new ObjectAndGetSetter(getAndSetter, value);

/ 13	. 

/ WH met reflection	, 
/ Maar wat gebeurt er met de value	?
/ Komt dat in de model	?
/s
	PropertyModel<T>(AbstractPropertyModel<T>).getObject() line: 71	
		final String expression = propertyExpression();
		final Object target = getInnermostModelOrObject();
LabelOnlyStudePage.class inst	,
		if (target != null)
		{
			return (T)PropertyResolver.getValue(expression, target);

	Label(Component).getDefaultModelObject() line: 1618	
		final IModel<?> model = getDefaultModel();
		if (model != null)
		{
			try
			{
				// Get model value for this component.
				return model.getObject();

	Label(Component).getDefaultModelObjectAsString() line: 1646	
	Label.onComponentTagBody(MarkupStream, ComponentTag) line: 115	
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
	Label(Component).internalRenderComponent() line: 2557	
	Label(WebComponent).onRender() line: 56	
	Label(Component).internalRender() line: 2372	
	Label(Component).render() line: 2300	
	LabelOnlyStudyPage(MarkupContainer).renderNext(MarkupStream) line: 1405	
	LabelOnlyStudyPage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1601	
	LabelOnlyStudyPage(Page).onRender() line: 879	
	LabelOnlyStudyPage(WebPage).onRender() line: 142	
	LabelOnlyStudyPage(Component).internalRender() line: 2372	
	LabelOnlyStudyPage(Component).render() line: 2300	
	LabelOnlyStudyPage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 837	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ we debug	, 
/s
PropertyModel<T>(AbstractPropertyModel<T>).getObject() line: 86	

this	PropertyModel<T>  (id=12101)	
	...
	expression	"text" (id=8252)	
	target	LabelOnlyStudyPage  (id=12053)	

/ een property model is een target, en een expression	,

		final String expression = propertyExpression();
		final Object target = getInnermostModelOrObject();
LabelOnlyStudePage.class inst	,
		if (target != null)
		{
			return (T)PropertyResolver.getValue(expression, target);
/t
Label(Component).getDefaultModelObject() line: 1618	
			try
			{
				// Get model value for this component.
				return model.getObject();
/d
/t
Label(Component).getDefaultModelObjectAsString() line: 1646	
		return getDefaultModelObjectAsString(getDefaultModelObject());
/pd
/s
Label(Component).getDefaultModelObjectAsString(Object) line: 1666	
/=
	public final String getDefaultModelObjectAsString(final Object modelObject)
modelObject	"Foo Bar" (id=12120)	

			// Model string from property
			final String modelString = converter.convertToString(modelObject, getLocale());
					// Escape HTML sensitive characters only. Not all none-ascii chars
					return Strings.escapeMarkup(modelString, false, false).toString();
/t
Label(Component).getDefaultModelObjectAsString() line: 1646	
		return getDefaultModelObjectAsString(getDefaultModelObject());
/d
/t
Label.onComponentTagBody(MarkupStream, ComponentTag) line: 115	
		replaceComponentTagBody(markupStream, openTag, getDefaultModelObjectAsString());
/pd
/s
Label(Component).replaceComponentTagBody(MarkupStream, ComponentTag, CharSequence) line: 4046	
/=
	protected final void replaceComponentTagBody(final MarkupStream markupStream,
		final ComponentTag tag, final CharSequence body)
body="Foo Bar"
tag=<span wicket:id="text" wicketpath="text">

		// If tag has a body
		if (tag.isOpen())
		{
			// Get what tag was in the markup; not what the user it might
			// have changed it to.
			markupOpenTag = markupStream.getPreviousTag();
<span wicket:id="text">
/ TODO
			// If it was an open tag in the markup as well, than ...
			if (markupOpenTag.isOpen())
			{
				// skip any raw markup in the body
				markupStream.skipRawMarkup();
			}
		}

/ Intermezzo

getResponse()=
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
<h1>LabelStudyTargetPage</h1>

<span wicket:id="text" wicketpath="text">

/ Einde Intermezzo

		if (body != null)
		{
			// Write the new body
			getResponse().write(body);

/ Intermezzo

getResponse()=
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
<h1>LabelStudyTargetPage</h1>

<span wicket:id="text" wicketpath="text">Foo Bar

/ Einde Intermezzo

/t
Label.onComponentTagBody(MarkupStream, ComponentTag) line: 115	
		replaceComponentTagBody(markupStream, openTag, getDefaultModelObjectAsString());
/d
/t
DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 71	
		component.onComponentTagBody(markupStream, openTag);
/d
/t
Label(Component).internalRenderComponent() line: 2560	
				getMarkupSourcingStrategy().onComponentTagBody(this, markupStream, tag);
/d

				// Render close tag
				if (openTag.isOpen())
				{
					renderClosingComponentTag(markupStream, tag, getRenderBodyOnly());
/ TODO
/t
Label(WebComponent).onRender() line: 57	
		internalRenderComponent();
/d
/t
Label(Component).internalRender() line: 2373	
				onRender();
/d

/  we zijn nu op de stack trace	,

	Label(Component).internalRender() line: 2373	
	Label(Component).render() line: 2300	
	LabelOnlyStudyPage(MarkupContainer).renderNext(MarkupStream) line: 1405	
	LabelOnlyStudyPage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1601	
	LabelOnlyStudyPage(Page).onRender() line: 879	
	LabelOnlyStudyPage(WebPage).onRender() line: 142	
	LabelOnlyStudyPage(Component).internalRender() line: 2372	
	LabelOnlyStudyPage(Component).render() line: 2300	
	LabelOnlyStudyPage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 837	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

 
/ 	7. 

/ detach gebeurt na de getObject	, als hij wil serialize	, dus alles gebeurt in 1 request	,
/ als het model een property model is	, dan wordt de target detach	,
/ TODO

/ Lees	,
https://cwiki.apache.org/confluence/display/WICKET/Detachable+Models
https://cwiki.apache.org/confluence/display/WICKET/Using+Detachable+Models+in+Edit+Pages


/ 7	.

/ We set alleen b's in AsynchronousDataStore.class	,

/ we geven localhost:8080/wicket-testing, 
/ en de home page is LabelOnlyStudyPage.class	,
/ of de home page is LinkOnlyStudyPage2.class	,

$ vi LinkOnlyStudyPage2.class

public class LinkOnlyStudyPage2 extends WebPage{

	
	
	public LinkOnlyStudyPage2(PageParameters pageParameters) {	
		
		M m=new M();
		
		IModel<String>model=new PropertyModel<String>(m, "s");
		TextField<String>textField=new TextField<String>("text", model);
		
		IModel<String>model2=new PropertyModel<String>(m, "s");
		Link<String>link=new Link<String>("link",model2) {
			@Override
			public void onClick() {
				// TODO Auto-generated method stub
				
			}
		};
		IModel<String>model3=new Model<String>("Foo Bar");
		Label label=new Label("label", model3);
		
		add(textField);
		add(link);
		add(label);

	}
	private class M{
		private String s;

		public String getS() {
			return s;
		}

		public void setS(String s) {
			this.s = s;
		}
	}

$ vi LinkOnlyStudyPage.class

public class LinkOnlyStudyPage extends WebPage{

	
	private String text="";
	private int counter;
	
	
	public LinkOnlyStudyPage(PageParameters pageParameters) {	
		
		IModel<LinkOnlyStudyPage>model=new CompoundPropertyModel<LinkOnlyStudyPage>(this);

		Link<String>link=new Link<String>("link") {
			@Override
			public void onClick() {
				text="["+text+"]";
				counter+=13;
				
			}
			@Override
			protected void onBeforeRender() {
				// TODO Auto-generated method stub
				super.onBeforeRender();
			}
		};	
		Label text=new Label("text");
		Label counter=new Label("counter");		
		

		setDefaultModel(model);
		add(link);
		add(text);
		add(counter);
		
	}
}

/ 13	. 

/ bij	,
/ de home page is LabelOnlyStudyPage.class	,
/ de home page is LinkOnlyStudyPage.class	,
/ de home page is LinkOnlyStudyPage2.class	,
/s
	AsynchronousDataStore.<init>(IDataStore, int) line: 90	
		this.dataStore = dataStore;

	DefaultPageManagerProvider.get(IPageManagerContext) line: 63	
		IDataStore dataStore = newDataStore();

		StoreSettings storeSettings = getStoreSettings();

		if (dataStore.canBeAsynchronous())
		{
			int capacity = storeSettings.getAsynchronousQueueCapacity();
			dataStore = new AsynchronousDataStore(dataStore, capacity);

	DefaultPageManagerProvider.get(Object) line: 38	

	WicketApplication(Application).internalGetPageManager() line: 1508	
				if (pageManager == null)
				{
					pageManager = pageManagerProvider.get(getPageManagerContext());

	WicketApplication(Application).fetchCreateAndSetSession(RequestCycle) line: 1681	
		if (session == null)
		{
			session = newSession(requestCycle.getRequest(), requestCycle.getResponse());
			ThreadContext.setSession(session);
			internalGetPageManager().newSessionCreated();

	Session.get() line: 169	
			return Application.get().fetchCreateAndSetSession(RequestCycle.get());


	LabelOnlyStudyPage(Component).getSession() line: 1827	
		return Session.get();

	LabelOnlyStudyPage(Page).dirty(boolean) line: 278	
		final IPageManager pageManager = getSession().getPageManager();

	LabelOnlyStudyPage(WebPage).dirty(boolean) line: 324	
		super.dirty(isInitialization);

	LabelOnlyStudyPage(Page).init() line: 717	
		// All Pages are born dirty so they get clustered right away
		dirty(true);

	LabelOnlyStudyPage(Component).<init>(String, IModel<?>) line: 685	
		init();

	LabelOnlyStudyPage(MarkupContainer).<init>(String, IModel<?>) line: 120	
		super(id, model);

	LabelOnlyStudyPage(Page).<init>(PageParameters, IModel<?>) line: 170	
		super(null, model);

	LabelOnlyStudyPage(Page).<init>() line: 134	
		this(null, null);

	LabelOnlyStudyPage(WebPage).<init>() line: 76	
	LabelOnlyStudyPage.<init>(PageParameters) line: 15	
	NativeConstructorAccessorImpl.newInstance0(Constructor, Object[]) line: not available [native method]	
	NativeConstructorAccessorImpl.newInstance(Object[]) line: 57	
	DelegatingConstructorAccessorImpl.newInstance(Object[]) line: 45	
	Constructor<T>.newInstance(Object...) line: 526	
	DefaultPageFactory.newPage(Constructor<C>, PageParameters) line: 171	
			if (argument != null)
			{
				return constructor.newInstance(argument);

	DefaultPageFactory.newPage(Class<C>) line: 76	
		catch (NoSuchMethodException e)
		{
			// a bit of a hack here..
			Constructor<C> constructor = constructor(pageClass, PageParameters.class);
			if (constructor != null)
			{
				PageParameters pp = new PageParameters();
				return processPage(newPage(constructor, pp), pp);

	DefaultMapperContext.newPageInstance(Class<IRequestablePage>, PageParameters) line: 102	
		if (pageParameters == null)
		{
			return application.getPageFactory().newPage(pageClass);

	PageProvider.resolvePageInstance(Integer, Class<IRequestablePage>, PageParameters, Integer) line: 268	
		if (page == null)
		{
			if (pageClass != null)
			{
				page = getPageSource().newPageInstance(pageClass, pageParameters);

	PageProvider.getPageInstance() line: 166	
		if (pageInstance == null)
		{
			resolvePageInstance(pageId, pageClass, pageParameters, renderCount);

	WebPageRenderer(PageRenderer).getPage() line: 78	
		return getPageProvider().getPageInstance();

	WebPageRenderer.isPageStateless() line: 287	
		return getPage().isPageStateless();

	WebPageRenderer.shouldRenderPageAndWriteResponse(RequestCycle, Url, Url) line: 329	
		return (compatibleProtocols(currentUrl.getProtocol(), targetUrl.getProtocol())) &&
				(neverRedirect(getRedirectPolicy())
			|| ((isOnePassRender() && notForcedRedirect(getRedirectPolicy())) || (targetUrl
				.equals(currentUrl) && notNewAndNotStatelessPage(isNewPageInstance(),
				isPageStateless()))) || (targetUrl.equals(currentUrl) && isRedirectToRender())
			|| (shouldPreserveClientUrl(cycle) && notForcedRedirect(getRedirectPolicy())));

	WebPageRenderer.respond(RequestCycle) line: 193	
		if (shouldRenderPageAndWriteResponse(requestCycle, currentUrl, targetUrl))

	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 837	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ 13	. 

/ bij	,
/ NIET de home page is LabelOnlyStudyPage.class	,	 WH omdat is stateless	, ook met textfield is stateless	?
/ de home page is LinkOnlyStudyPage.class	,	 is stateful	,	 we moeten er een link op set	?
/ de home page is LinkOnlyStudyPage2.class	,	 is stateful	,	 we moeten er een link op set	?
/s
	AsynchronousDataStore.storeData(String, int, byte[]) line: 216	
		Entry entry = new Entry(sessionId, id, data);

	DefaultPageStore(AbstractPageStore).storePageData(String, int, byte[]) line: 119	
		dataStore.storeData(sessionId, pageId, data);

	DefaultPageStore.storePage(String, IManageablePage) line: 66	
		SerializedPage serialized = createSerializedPage(sessionId, page);			/ !!!!!!!!!!!!
		if (serialized != null)
		{
			int pageId = page.getPageId();
			pagesCache.storePage(sessionId, pageId, serialized);
			storePageData(sessionId, pageId, serialized.getData());

	PageStoreManager$PersistentRequestAdapter.storeTouchedPages(List<IManageablePage>) line: 403	
			if (!touchedPages.isEmpty())
			{
				SessionEntry entry = getSessionEntry(true);
				entry.setSessionCache(touchedPages);
				for (IManageablePage page : touchedPages)
				{
					// WICKET-5103 use the same sessionId as used in SessionEntry#getPage()
					pageStore.storePage(entry.sessionId, page);

	PageStoreManager$PersistentRequestAdapter(RequestAdapter).commitRequest() line: 172	
			if (statefulPages.isEmpty() == false)
			{
				storeTouchedPages(statefulPages);

	PageStoreManager(AbstractPageManager).commitRequest() line: 76	
		getRequestAdapter().commitRequest();

	PageAccessSynchronizer$2(PageManagerDecorator).commitRequest() line: 68	
		delegate.commitRequest();

	PageAccessSynchronizer$2.commitRequest() line: 270	
					super.commitRequest();

	Application$3.onDetach(RequestCycle) line: 1751	
	public final RequestCycle createRequestCycle(final Request request, final Response response)
	{
		requestCycle.getListeners().add(new AbstractRequestCycleListener()			/ na alle detaches	, commit	,
		{
			@Override
			public void onDetach(final RequestCycle requestCycle)
			{

				if (Session.exists())
				{
					Session.get().getPageManager().commitRequest();

	RequestCycleListenerCollection$3.notify(IRequestCycleListener) line: 105	
	RequestCycleListenerCollection$3.notify(Object) line: 101	
	ListenerCollection$1.notify(T) line: 120	
	RequestCycleListenerCollection(ListenerCollection<T>).reversedNotify(INotifier<T>) line: 144	
	RequestCycleListenerCollection(ListenerCollection<T>).reversedNotifyIgnoringExceptions(INotifier<T>) line: 113	
	RequestCycleListenerCollection.onDetach(RequestCycle) line: 100	
	RequestCycle.onDetach() line: 645	
		finally
		{
			listeners.onDetach(this);

	RequestCycle.detach() line: 594	
		try
		{
			onDetach();

	RequestCycle.processRequestAndDetach() line: 297	
		{
			result = processRequest();
		}
		finally
		{
			detach();

	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ 13	. 

/ SERIALIZE MODELS PAGE

$ vi LinkOnlyStudyPage2.java

public class LinkOnlyStudyPage2 extends WebPage{

	
	
	public LinkOnlyStudyPage2(PageParameters pageParameters) {	
		
		M m=new M();
		
		IModel<String>model=new PropertyModel<String>(m, "s");
		TextField<String>textField=new TextField<String>("text", model);
		
		IModel<String>model2=new PropertyModel<String>(m, "s");
		Link<String>link=new Link<String>("link",model2) {
			@Override
			public void onClick() {
				setResponsePage(LinkOnlyStudyPage2.this);
				
			}
		};

		IModel<String>model3=new Model<String>("Foo Bar");
		Label label=new Label("label", model3);
		
		add(textField);
		add(link);
		add (label);

	}
	private class M implements Serializable{
		private String s;

		public String getS() {
			return s;
		}

		public void setS(String s) {
			this.s = s;
		}
	}
}

/ Let op dat M Serializable moet zijn	,

/ we gaan debug	, 

/ 1313	.

/ de components zelf hebben geen model (data=null), omdat de page de compound property model heeft,	

DefaultPageStore.storePage(String, IManageablePage) line: 61	
		SerializedPage serialized = createSerializedPage(sessionId, page);
/s
DefaultPageStore.createSerializedPage(String, IManageablePage) line: 276	
		byte[] data = serializePage(page);
/s
DefaultPageStore(AbstractPageStore).serializePage(IManageablePage) line: 133	
		byte[] data = pageSerializer.serialize(page);
/s
JavaSerializer.serialize(Object) line: 72	
this	JavaSerializer  (id=508)	
object	LinkOnlyStudyPage  (id=428)	
	children	MarkupContainer$ChildList  (id=520)	
		childs	Object[6]  (id=529)	
			[0]	LinkOnlyStudyPage$1  (id=530)	
				anchor	null	
				autoEnable	false	
				bodyModel	null	
				children	null	
->				data	null	
				flags	1073950874	
				generatedMarkupId	-1	
				id	"link" (id=546)	
				markup	null	
				markupSourcingStrategy	DefaultMarkupSourcingStrategy  (id=547)	
				parent	LinkOnlyStudyPage  (id=428)	
				popupSettings	null	
				queue	null	
				requestFlags	32	
				this$0	LinkOnlyStudyPage  (id=428)	
			[1]	Label  (id=531)	
->				data	null	
				flags	1073950874	
				generatedMarkupId	-1	
				id	"text" (id=551)	
				markup	null	
				markupSourcingStrategy	DefaultMarkupSourcingStrategy  (id=547)	
				parent	LinkOnlyStudyPage  (id=428)	
				requestFlags	32	
			[2]	Label  (id=532)	
->				data	null	
				flags	1073950874	
				generatedMarkupId	-1	
				id	"counter" (id=552)	
				markup	null	
				markupSourcingStrategy	DefaultMarkupSourcingStrategy  (id=547)	
				parent	LinkOnlyStudyPage  (id=428)	
				requestFlags	32	
			[3]	HtmlHeaderContainer  (id=533)	
		size	4	
	data	CompoundPropertyModel<T>  (id=522)	
		target	LinkOnlyStudyPage  (id=404)	
	stateless	Boolean  (id=578)	

->	counter 0
->	text	"" (id=580)	
/ the data that this target holds	,


/ De page is de target	, dus de data is in de page: counter en text,	

/ 1313	. 

/ bij	LinkOnlyStudyPag2.class	,

/ stack trace	,
/s
	JavaSerializer.serialize(Object) line: 72	
				oos.writeObject(object);

	DefaultPageStore(AbstractPageStore).serializePage(IManageablePage) line: 133	
		byte[] data = pageSerializer.serialize(page);

	DefaultPageStore.createSerializedPage(String, IManageablePage) line: 281	
		byte[] data = serializePage(page);

	DefaultPageStore.storePage(String, IManageablePage) line: 61	
		SerializedPage serialized = createSerializedPage(sessionId, page);

	PageStoreManager$PersistentRequestAdapter.storeTouchedPages(List<IManageablePage>) line: 403	
				for (IManageablePage page : touchedPages)
				{
					// WICKET-5103 use the same sessionId as used in SessionEntry#getPage()
					pageStore.storePage(entry.sessionId, page);

	PageStoreManager$PersistentRequestAdapter(RequestAdapter).commitRequest() line: 172	
			if (statefulPages.isEmpty() == false)
			{
				storeTouchedPages(statefulPages);

	PageStoreManager(AbstractPageManager).commitRequest() line: 76	
		getRequestAdapter().commitRequest();

	PageAccessSynchronizer$2(PageManagerDecorator).commitRequest() line: 68	
		delegate.commitRequest();

	PageAccessSynchronizer$2.commitRequest() line: 270	
				try
				{
					super.commitRequest();

	Application$3.onDetach(RequestCycle) line: 1751	
				if (Session.exists())
				{
					Session.get().getPageManager().commitRequest();
/ TODO
/ Heeft iedere session een eigen page manager?

	RequestCycleListenerCollection$3.notify(IRequestCycleListener) line: 105	
	RequestCycleListenerCollection$3.notify(Object) line: 101	
	ListenerCollection$1.notify(T) line: 120	
	RequestCycleListenerCollection(ListenerCollection<T>).reversedNotify(INotifier<T>) line: 144	
	RequestCycleListenerCollection(ListenerCollection<T>).reversedNotifyIgnoringExceptions(INotifier<T>) line: 113	
	RequestCycleListenerCollection.onDetach(RequestCycle) line: 100	
	RequestCycle.onDetach() line: 645	
	RequestCycle.detach() line: 594	
	RequestCycle.processRequestAndDetach() line: 297	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ we gaan debug	,
/s
	JavaSerializer.serialize(Object) line: 72	
				oos.writeObject(object);

this	JavaSerializer  (id=145)	
object	LinkOnlyStudyPage2  (id=147)	
	autoIndex	1	
	children	MarkupContainer$ChildList  (id=160)	
		childs	Object[3]  (id=179)	
			[0]	TextField<T>  (id=181)	
				children	null	
				convertedInput	null	
				data	PropertyModel<T>  (id=201)	
					expression	"s" (id=213)	
					target	LinkOnlyStudyPage2$M  (id=214)	
						s	null	
						this$0	LinkOnlyStudyPage2  (id=147)	
				flags	1075001744	
				generatedMarkupId	-1	
				id	"text" (id=210)	
				labelModel	null	
				markup	null	
				markupSourcingStrategy	DefaultMarkupSourcingStrategy  (id=166)	
				parent	LinkOnlyStudyPage2  (id=147)	
				queue	null	
				rawInput	"[-NO-RAW-INPUT-]" (id=216)	
				requestFlags	32	
				typeName	"java.lang.String" (id=217)	
			[1]	LinkOnlyStudyPage2$1  (id=182)	
				anchor	null	
				autoEnable	false	
				bodyModel	null	
				children	null	
				data	PropertyModel<T>  (id=218)	
					expression	"s" (id=213)	
					target	LinkOnlyStudyPage2$M  (id=214)	
						s	null	
						this$0	LinkOnlyStudyPage2  (id=147)	
				flags	1074999450	
				generatedMarkupId	-1	
				id	"link" (id=219)	
				markup	null	
				markupSourcingStrategy	DefaultMarkupSourcingStrategy  (id=166)	
				parent	LinkOnlyStudyPage2  (id=147)	
				popupSettings	null	
				queue	null	
				requestFlags	32	
				this$0	LinkOnlyStudyPage2  (id=147)	
				[2]	Label  (id=183)	
					data	Model<T>  (id=204)	
						object	"Foo Bar" (id=211)	
					flags	1074999450	
					generatedMarkupId	-1	
					id	"label" (id=208)	
					markup	null	
					markupSourcingStrategy	DefaultMarkupSourcingStrategy  (id=168)	
					parent	LinkOnlyStudyPage2  (id=149)	
					requestFlags	32	

			[2]	HtmlHeaderContainer  (id=183)	
				children	null	
				data	null	
				flags	1073950907	
				generatedMarkupId	-1	
				headerResponse	null	
				id	"_header_0" (id=247)	
				markup	null	
				markupSourcingStrategy	DefaultMarkupSourcingStrategy  (id=166)	
				parent	LinkOnlyStudyPage2  (id=147)	
				queue	null	
				renderedComponentsPerScope	null	
				requestFlags	32	
		size	3	
	data	null	
	stateless	Boolean  (id=174)	
false

////////////////////////
/ wicket ser de page, dus alle models ook, want de models zijn onderdeel van de components	, 
/ Dus we zien dat het hele model wordt ser	, in geval van property model de expression en de target=data holder	,


/ we zien  een property model	,
				data	PropertyModel<T>  (id=218)	
					expression	"s" (id=213)	
					target	LinkOnlyStudyPage2$M  (id=214)	
						s	null	
						this$0	LinkOnlyStudyPage2  (id=147)	
/ en een model	,
				[2]	Label  (id=183)	
					data	Model<T>  (id=204)	
						object	"Foo Bar" (id=211)	
/ TODO

/ we zijn nog in	,
JavaSerializer.serialize(Object) line: 91	

		try
		{
			final ByteArrayOutputStream out = new ByteArrayOutputStream();
			ObjectOutputStream oos = null;
			try
			{
				oos = newObjectOutputStream(out);
				oos.writeObject(applicationKey);
				oos.writeObject(object);
			}
			finally
			{
				try
				{
					IOUtils.close(oos);
				}
				finally
				{
					out.close();
				}
			}
			return out.toByteArray();
/ Als M Serializable	,
		}
		catch (Exception e)
/ Als M NIET Serializable	,
		{
			log.error("Error serializing object " + object.getClass() + " [object=" + object + "]",
				e);
		}
/ Als M NIET Serializable	,
		return null;

/t
DefaultPageStore(AbstractPageStore).serializePage(IManageablePage) line: 133	
		byte[] data = pageSerializer.serialize(page);
/d
		return data;
/t
DefaultPageStore.createSerializedPage(String, IManageablePage) line: 283	
		byte[] data = serializePage(page);
/d
		if (data != null)
		{
			serializedPage = new SerializedPage(sessionId, page.getPageId(), data);
/s
DefaultPageStore$SerializedPage.<init>(String, int, byte[]) line: 227	
			this.pageId = pageId;
0
			this.sessionId = sessionId;
8350530884BA50685D720BC34B145F84
			this.data = data;
[-84, -19, 0, 5, 116, 0, 14, 119, 105, 99, 107, ...
/t
DefaultPageStore.createSerializedPage(String, IManageablePage) line: 291	
			serializedPage = new SerializedPage(sessionId, page.getPageId(), data);
		return serializedPage;
/t
DefaultPageStore.storePage(String, IManageablePage) line: 62	
		SerializedPage serialized = createSerializedPage(sessionId, page);
/d
		if (serialized != null)
		{
			int pageId = page.getPageId();
			pagesCache.storePage(sessionId, pageId, serialized);
/s
DefaultPageStore$SerializedPagesCache.storePage(String, Integer, DefaultPageStore$SerializedPage) line: 427	
			if (maxSize > 0)
50
				internalStore(page);
/s
DefaultPageStore$SerializedPagesCache.internalStore(DefaultPageStore$SerializedPage) line: 450	
			cache.push(new SoftReference<>(page));
...
/t
DefaultPageStore.storePage(String, IManageablePage) line: 66	
			pagesCache.storePage(sessionId, pageId, serialized);
/d
			storePageData(sessionId, pageId, serialized.getData());
serialized	DefaultPageStore$SerializedPage  (id=2009)	
/s
DefaultPageStore(AbstractPageStore).storePageData(String, int, byte[]) line: 119	
		dataStore.storeData(sessionId, pageId, data);
/s
AsynchronousDataStore.storeData(String, int, byte[]) line: 216	
		Entry entry = new Entry(sessionId, id, data);
		String key = getKey(entry);
key	"0:::8350530884BA50685D720BC34B145F84" (id=2024)	
		entryMap.put(key, entry);
		try
		{
			boolean added = entries.offer(entry, OFFER_WAIT, TimeUnit.MILLISECONDS);

			if (added == false)
/ NEE
...
/t
PageAccessSynchronizer$2.commitRequest() line: 274	
					super.commitRequest();
/d
				finally
				{
					unlockAllPages();
/ slaan we over	,
/t
Application$3.onDetach(RequestCycle) line: 1754	
				if (Session.exists())
				{
					Session.get().getPageManager().commitRequest();
/d
/ TODO (page mamanger is per session?)

			storePageData(sessionId, pageId, serialized.getData());

/////////////////////////////
/c
Daemon Thread [Wicket-PageSavingThread] (Suspended)	
	AsynchronousDataStore$PageSavingRunnable.run() line: 355	
	Thread.run() line: 745	
/ Inderdaad	, in een andere thread	,

				if (entry != null)
				{
					log.debug("Saving asynchronously: {}...", entry);
					dataStore.storeData(entry.sessionId, entry.pageId, entry.data);
/s
DiskDataStore.storeData(String, int, byte[]) line: 181	
		SessionEntry sessionEntry = getSessionEntry(sessionId, true);
/ true betekent: create
/s
DiskDataStore.getSessionEntry(String, boolean) line: 205	
		if (!create)
/ NEE
		SessionEntry entry = new SessionEntry(this, sessionId);
		SessionEntry existing = sessionEntryMap.putIfAbsent(sessionId, entry);
		return existing != null ? existing : entry;
/t
DiskDataStore.storeData(String, int, byte[]) line: 188	
		SessionEntry sessionEntry = getSessionEntry(sessionId, true);
		if (sessionEntry != null)
		{
			sessionEntry.savePage(id, data);
/s
DiskDataStore$SessionEntry.savePage(int, byte[]) line: 340	
			// only save page that has some data
			if (data != null)
			{
				// allocate window for page
				PageWindow window = getManager().createPageWindow(pageId, data.length);
/s
DiskDataStore$SessionEntry.getManager() line: 310	
			if (manager == null)
			{
				manager = new PageWindowManager(diskDataStore.maxSizePerPageSession.bytes());
/s
/ diskDataStore.maxSizePerPageSession.bytes()=512000
/s
/**
 * Manages positions and size of serialized pages in the pagemap file.
 * <p>
 * The pages are stored inside the file in a cyclic way. Newer pages are placed after older ones,
 * until the maximum file size is reached. After that, the next page is stored in the beginning of
 * the file.
PageWindowManager.<init>(long) line: 58	
		this.maxSize = maxSize;
512000
/t
DiskDataStore$SessionEntry.getManager() line: 312	
			if (manager == null)
			{
				manager = new PageWindowManager(diskDataStore.maxSizePerPageSession.bytes());
/d
			}
			return manager;
/t
DiskDataStore$SessionEntry.savePage(int, byte[]) line: 348	
				// allocate window for page
				PageWindow window = getManager().createPageWindow(pageId, data.length);
/pd
/s
PageWindowManager.createPageWindow(int, int) line: 376	
/=
	public synchronized PageWindow createPageWindow(int pageId, int size)
pageId=0
size=2380
		int index = getWindowIndex(pageId);
/s
PageWindowManager.getWindowIndex(int) line: 139	
		if (idToWindowIndex == null)
		{
			rebuildIndices();
/s
PageWindowManager.rebuildIndices() line: 120	
		idToWindowIndex = null;
		idToWindowIndex = new IntHashMap<Integer>();
		windowIndexToPageId = null;
		windowIndexToPageId = new IntHashMap<Integer>();
		for (int i = 0; i < windows.size(); ++i)
/ NEE
/t
		Integer result = idToWindowIndex.get(pageId);
null
		return result != null ? result : -1;
/t
PageWindowManager.createPageWindow(int, int) line: 379	
/=
	public synchronized PageWindow createPageWindow(int pageId, int size)
pageId=0
size=2380
		int index = getWindowIndex(pageId);
/d
-1
		// if we found the page window, mark it as invalid
		if (index != -1)
/NEE
		// if we are not going to reuse a page window (because it's not on
		// indexPointer position or because we didn't find it), increment the
		// indexPointer
		if (index == -1 || index != indexPointer)
		{
			index = incrementIndexPointer();
/s
PageWindowManager.incrementIndexPointer() line: 162	
		if ((maxSize > 0) && (totalSize >= maxSize) && (indexPointer == windows.size() - 1))
/ NEE
maxSize=512000
totalSize=0
		else
		{
			++indexPointer;
0
		}
		return indexPointer;
/t
PageWindowManager.createPageWindow(int, int) line: 393	
		if (index == -1 || index != indexPointer)
		{
			index = incrementIndexPointer();
/d
0
		PageWindowInternal window = allocatePageWindow(index, size);
/s
PageWindowManager.allocatePageWindow(int, int) line: 299	
		// new window
		if (index == windows.size())
/ JA
0==0
			// new page window
			window = new PageWindowInternal();
/s
	private static class PageWindowInternal implements Serializable
	{
		private static final long serialVersionUID = 1L;

		/** id of page or -1 if the window is empty */
		private int pageId;

		/** offset in the file where the serialized page data begins */
		private int filePartOffset;

		/** size of serialized page data */
		private int filePartSize;
	}
/t
window	PageWindowManager$PageWindowInternal  (id=2072)	
	filePartOffset	0	
	filePartSize	0	
	pageId	0	

			window.filePartOffset = getWindowFileOffset(index);
0
			totalSize += size;
3280
			window.filePartSize = size;
			windows.add(window);
window	PageWindowManager$PageWindowInternal  (id=2072)	
	filePartOffset	0	
	filePartSize	2380	
	pageId	0	
		return window;
/t
PageWindowManager.createPageWindow(int, int) line: 394	
		PageWindowInternal window = allocatePageWindow(index, size);
/d
		window.pageId = pageId;
		putWindowIndex(pageId, index);
/s
PageWindowManager.putWindowIndex(int, int) line: 92	
		if (idToWindowIndex != null && pageId != -1 && windowIndex != -1)
/ JA
		{
			Integer oldPageId = windowIndexToPageId.remove(windowIndex);
null
			idToWindowIndex.put(pageId, windowIndex);
0,0
			windowIndexToPageId.put(windowIndex, pageId);
0,0
/t
PageWindowManager.createPageWindow(int, int) line: 397	
		putWindowIndex(pageId, index);
/d
		return new PageWindow(window);
window	PageWindowManager$PageWindowInternal  (id=2072)	
	filePartOffset	0	
	filePartSize	2380	
	pageId	0	
/s
PageWindowManager$PageWindow.<init>(PageWindowManager$PageWindowInternal) line: 339	
			this.pageWindowInternal = pageWindowInternal;
pageWindowInternal	PageWindowManager$PageWindowInternal  (id=2072)	
	filePartOffset	0	
	filePartSize	2380	
	pageId	0	
/t
DiskDataStore$SessionEntry.savePage(int, byte[]) line: 350	
				// allocate window for page
				PageWindow window = getManager().createPageWindow(pageId, data.length);
/d
				FileChannel channel = getFileChannel(true);
/s
DiskDataStore$SessionEntry.getFileChannel(boolean) line: 425	
			File file = new File(getFileName());
/s
DiskDataStore$SessionEntry.getFileName() line: 319	
			if (fileName == null)
			{
				fileName = diskDataStore.getSessionFileName(sessionId, true);
/s
DiskDataStore.getSessionFileName(String, boolean) line: 513	
		File sessionFolder = getSessionFolder(sessionId, createSessionFolder);
/ createSessionFolder=true
/s
DiskDataStore.getSessionFolder(String, boolean) line: 537	
		File storeFolder = getStoreFolder();
/s
			return new File(fileStoreFolder, applicationName + "-filestore");
/home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28/work/Catalina/localhost/wicket-testing/wicket-testing-filestore
/t
		sessionId = sessionId.replace('*', '_');
		sessionId = sessionId.replace('/', '_');
		sessionId = sessionId.replace(':', '_');

		sessionId = createPathFrom(sessionId);
/s
DiskDataStore.createPathFrom(String) line: 570	
		int hash = Math.abs(sessionId.hashCode());
		String low = String.valueOf(hash % 9973);
		String high = String.valueOf((hash / 9973) % 9973);
		StringBuilder bs = new StringBuilder(sessionId.length() + 10);
		bs.append(low);
		bs.append(File.separator);
		bs.append(high);
		bs.append(File.separator);
		bs.append(sessionId);

		return bs.toString();
/t
DiskDataStore.getSessionFolder(String, boolean) line: 545	
		sessionId = createPathFrom(sessionId);
/d
3133/767/8350530884BA50685D720BC34B145F84

		File sessionFolder = new File(storeFolder, sessionId);
/home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28/work/Catalina/localhost/wicket-testing/wicket-testing-filestore/3133/767/8350530884BA50685D720BC34B145F84
		if (create && sessionFolder.exists() == false)
		{
			Files.mkdirs(sessionFolder);
		return sessionFolder;
/t
DiskDataStore.getSessionFileName(String, boolean) line: 514	
		File sessionFolder = getSessionFolder(sessionId, createSessionFolder);
		return new File(sessionFolder, "data").getAbsolutePath();
/t
DiskDataStore$SessionEntry.getFileName() line: 321	
			if (fileName == null)
			{
				fileName = diskDataStore.getSessionFileName(sessionId, true);
/d
/home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28/work/Catalina/localhost/wicket-testing/wicket-testing-filestore/3133/767/8350530884BA50685D720BC34B145F84/data
			return fileName;
/t
DiskDataStore$SessionEntry.getFileChannel(boolean) line: 427	
			File file = new File(getFileName());
/pd
/d
/home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28/work/Catalina/localhost/wicket-testing/wicket-testing-filestore/3133/767/8350530884BA50685D720BC34B145F84/data
			if (create || file.exists())
			{
				String mode = create ? "rw" : "r";
				try
				{
					RandomAccessFile randomAccessFile = new RandomAccessFile(file, mode);
					channel = randomAccessFile.getChannel();
			return channel;
/t
DiskDataStore$SessionEntry.savePage(int, byte[]) line: 351	
				FileChannel channel = getFileChannel(true);
/d
				if (channel != null)
				{
					try
					{
						// write the content
						channel.write(ByteBuffer.wrap(data), window.getFilePartOffset());

[eric@localhost wicket-testing]$ ls /home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28/work/Catalina/localhost/wicket-testing/wicket-testing-filestore/3133/767/8350530884BA50685D720BC34B145F84 -ltr
total 4
-rw-rw-r--. 1 eric eric 2380 Jan 15 17:34 data
/ Klopt 	,

					finally
					{
						IOUtils.closeQuietly(channel);
/t
AsynchronousDataStore$PageSavingRunnable.run() line: 356	
				if (entry != null)
				{
					log.debug("Saving asynchronously: {}...", entry);
					dataStore.storeData(entry.sessionId, entry.pageId, entry.data);
/d

entryMap=
{0:::8350530884BA50685D720BC34B145F84=Entry [sessionId=9B1BFE403667476888CD4A020B926D6C, pageId=0]}
					entryMap.remove(getKey(entry));
/ getKey(entry)=0:::8350530884BA50685D720BC34B145F84


/ 13	. 

/ GET PAGE FROM ... CACHE  
/ TODO

$ vi LinkOnlyStudyPage2.class

public class LinkOnlyStudyPage2 extends WebPage{
	
	public LinkOnlyStudyPage2(PageParameters pageParameters) {	
		
		M m=new M();
		
		IModel<String>model=new PropertyModel<String>(m, "s");
		TextField<String>textField=new TextField<String>("text", model);
		
		IModel<String>model2=new PropertyModel<String>(m, "s");
		Link<String>link=new Link<String>("link",model2) {
			@Override
			public void onClick() {
				setResponsePage(LinkOnlyStudyPage2.this);
			}
		};

		IModel<String>model3=new Model<String>("Foo Bar");
		Label label=new Label("label", model3);
		
		add(textField);
		add(link);
		add (label);

	}
	private class M implements Serializable{
		private String s;

		public String getS() {
			return s;
		}

		public void setS(String s) {
			this.s = s;
		}
	}
}

/ We gaan NIET deser. de page	, maar de page zit in een cache	, 

/ we click de link	,

/ stacktrace	,
/s
	DefaultMapperContext.getPageInstance(int) line: 113	
		IManageablePage manageablePage = Session.get().getPageManager().getPage(pageId);

	PageAndComponentProvider(PageProvider).getStoredPage(int) line: 296	
		IRequestablePage storedPageInstance = getPageSource().getPageInstance(pageId);

	PageAndComponentProvider(PageProvider).resolvePageInstance(Integer, Class<IRequestablePage>, PageParameters, Integer) line: 261	
		if (pageId != null)
		{
			page = getStoredPage(pageId);

	PageAndComponentProvider(PageProvider).getPageInstance() line: 166	
			resolvePageInstance(pageId, pageClass, pageParameters, renderCount);

	ListenerInterfaceRequestHandler.getPage() line: 96	
		return pageComponentProvider.getPageInstance();

	ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 157 		/ (*)	
		final IRequestablePage page = getPage();

	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 837	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
			IRequestHandler handler = resolveRequestHandler();
/ TODO
			if (handler != null)
			{
				execute(handler);

	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ Intermezzo 

/ Eerder	, WH als we de page voor de eerste keer opvragen	 (TODO)	,
	RenderPageRequestHandler.respond(IRequestCycle) line: 175				/ (*)	
/ TODO
/ See RequestCycle.processRequest() line: 222
/ TODO (Later)	,

/ Einde Intermezzo 

/ we gaan debug	,
/s
WebSession(Session).getPageManager() line: 895	
		IPageManager pageManager = Application.get().internalGetPageManager();
/= Application.pageManager	,
/ TODO SESSION (Is PageManager in Session of in Application?)

		return pageAccessSynchronizer.get().adapt(pageManager);
/s
/ Hiertussen LazyInitializer (TODO)	,
PageAccessSynchronizer.adapt(IPageManager) line: 237	
		return new PageManagerDecorator(pagemanager)
			@Override
			public IManageablePage getPage(int pageId)
			@Override
			public void touchPage(IManageablePage page)
			@Override
			public void commitRequest()
/s
PageAccessSynchronizer$2(PageManagerDecorator).<init>(IPageManager) line: 38	
		this.delegate = delegate;
delegate	PageStoreManager  (id=309)	
/t
DefaultMapperContext.getPageInstance(int) line: 113	
		IManageablePage manageablePage = Session.get().getPageManager().getPage(pageId);
/pd
/s
		return new PageManagerDecorator(pagemanager)
		{
			@Override
			public IManageablePage getPage(int pageId)
			{
				IManageablePage page = null;
				try
				{
					lockPage(pageId);
/ TODO
					page = super.getPage(pageId);
/s
PageAccessSynchronizer$2(PageManagerDecorator).getPage(int) line: 50	
		return delegate.getPage(id);
/s
PageStoreManager(AbstractPageManager).getPage(int) line: 82	
		IManageablePage page = getRequestAdapter().getPage(id);
/s
PageStoreManager(AbstractPageManager).getRequestAdapter() line: 64	
		RequestAdapter adapter = (RequestAdapter)getContext().getRequestData();
/s
DefaultPageManagerContext.getRequestData() line: 52	
		RequestCycle requestCycle = RequestCycle.get();
		return requestCycle.getMetaData(requestCycleMetaDataKey);
null
/t
PageStoreManager(AbstractPageManager).getRequestAdapter() line: 67	
		RequestAdapter adapter = (RequestAdapter)getContext().getRequestData();
null
		if (adapter == null)
		{
			adapter = newRequestAdapter(getContext());
/s
PageStoreManager.newRequestAdapter(IPageManagerContext) line: 412	
		return new PersistentRequestAdapter(context);
/t
PageStoreManager(AbstractPageManager).getRequestAdapter() line: 68	
			adapter = newRequestAdapter(getContext());
/d
			getContext().setRequestData(adapter);
		}
		return adapter;
/t
PageStoreManager(AbstractPageManager).getPage(int) line: 82	
		IManageablePage page = getRequestAdapter().getPage(id);
/pd
/s
PageStoreManager$PersistentRequestAdapter.getPage(int) line: 346	
			IManageablePage touchedPage = findPage(id);
null
			// try to get session entry for this session
			SessionEntry entry = getSessionEntry(false);
/s
PageStoreManager$PersistentRequestAdapter.getSessionEntry(boolean) line: 372	
			String attributeName = getAttributeName();
/=
				return ATTRIBUTE_NAME + " - " + applicationName;
wicket:persistentPageManagerData - wicket-testing

			SessionEntry entry = (SessionEntry)getSessionAttribute(attributeName);
/s
PageStoreManager$PersistentRequestAdapter(RequestAdapter).getSessionAttribute(String) line: 100	
		return context.getSessionAttribute(key);
/s
DefaultPageManagerContext.getSessionAttribute(String) line: 66	
		return Session.get().getAttribute(key);
/s
WebSession(Session).getAttribute(String) line: 731	
name	"wicket:persistentPageManagerData - wicket-testing" (id=426)	

		if (!isTemporary())
		{
			RequestCycle cycle = RequestCycle.get();
			if (cycle != null)
			{
				return getSessionStore().getAttribute(cycle.getRequest(), name);
/s
	protected ISessionStore getSessionStore()
	{
		if (sessionStore == null)
		{
			sessionStore = getApplication().getSessionStore();
		}
		return sessionStore;
/ TODO SESSION (Is sessionStore in Session of in Application	?)
/t
/s
HttpSessionStore.getAttribute(Request, String) line: 261	
		HttpSession httpSession = getHttpSession(request, false);
httpSession	StandardSessionFacade  (id=447)	
/ TODO SESSION (Zonet Session.get()	, toen WH uit Session, naar SessionStore via Application, en nu weer Session?)

		if (httpSession != null)
		{
			return (Serializable)httpSession.getAttribute(getSessionAttributePrefix(request) + name);
/ getSessionAttributePrefix(request)=wicket:wicket-testing:

httpSession	StandardSessionFacade  (id=165)	
	session	StandardSession  (id=168)	
		attributes	ConcurrentHashMap<K,V>  (id=171)	
			segments	ConcurrentHashMap$Segment<K,V>[16]  (id=177)	
				[0]	ConcurrentHashMap$Segment<K,V>  (id=180)			/ leeg	,
				[3]	ConcurrentHashMap$Segment<K,V>  (id=183)	
					count	1	
					loadFactor	0.75	
					modCount	1	
					sync	ReentrantLock$NonfairSync  (id=194)	
					table	ConcurrentHashMap$HashEntry<K,V>[2]  (id=195)	
						[1]	ConcurrentHashMap$HashEntry<K,V>  (id=196)	
							hash	868420651	
							key	"wicket:wicket-testing:wicket:persistentPageManagerData - wicket-testing" (id=197)	
							next	null	
							value	PageStoreManager$SessionEntry  (id=198)	
								afterReadObject	null	
								applicationName	"wicket-testing" (id=201)	
								sessionCache	ArrayList<E>  (id=202)	
									elementData	Object[1]  (id=203)	
										[0]	LinkOnlyStudyPage2  (id=204)	
											autoIndex	1	
											children	MarkupContainer$ChildList  (id=218)	
												childs	Object[6]  (id=230)	
													[0]	TextField<T>  (id=231)	
													[1]	LinkOnlyStudyPage2$1  (id=234)	
													[2]	Label  (id=240)	
													[3]	HtmlHeaderContainer  (id=245)	
												modCount	0	
												size	4	
											data	null	
											flags	1074475162	
											generatedMarkupId	-1	
											id	null	
											markup	null	
											markupSourcingStrategy	DefaultMarkupSourcingStrategy  (id=220)	
											numericId	0	
											pageParameters	PageParameters  (id=224)	
											parent	null	
											queue	null	
											renderCount	1	
											renderedComponents	null	
											requestFlags	32	
											stateless	Boolean  (id=228)	
									modCount	0	
									size	1	
								sessionId	"1E8B32BB4AF802A9E0F0B4EC391E33AC" (id=176)	
					threshold	1	
				[11]	ConcurrentHashMap$Segment<K,V>  (id=184)	
				[15]	ConcurrentHashMap$Segment<K,V>  (id=185)	

/ Dus de page zit in de cache	,

/ Intermezzo

/ want we hebben	,

	public LinkOnlyStudyPage2(PageParameters pageParameters) {	
		
		M m=new M();
		
		IModel<String>model=new PropertyModel<String>(m, "s");
		TextField<String>textField=new TextField<String>("text", model);
		
		IModel<String>model2=new PropertyModel<String>(m, "s");
		Link<String>link=new Link<String>("link",model2) {
			@Override
			public void onClick() {
				setResponsePage(LinkOnlyStudyPage2.this);

/ Hij vraagt dus om de page zelf	, ?0 als dat de page is	,

/ Einde Intermezzo

/ Intermezzo

/ we zijn in 	,
	HttpSessionStore.getAttribute(Request, String) line: 264	
			return (Serializable)httpSession.getAttribute(getSessionAttributePrefix(request) + name);

	WebSession(Session).getAttribute(String) line: 736	
				return getSessionStore().getAttribute(cycle.getRequest(), name);

	DefaultPageManagerContext.getSessionAttribute(String) line: 66	
		return Session.get().getAttribute(key);

	PageStoreManager$PersistentRequestAdapter(RequestAdapter).getSessionAttribute(String) line: 100	
		return context.getSessionAttribute(key);

	PageStoreManager$PersistentRequestAdapter.getSessionEntry(boolean) line: 373	
			String attributeName = getAttributeName();
wicket:persistentPageManagerData - wicket-testing
			SessionEntry entry = (SessionEntry)getSessionAttribute(attributeName);

	PageStoreManager$PersistentRequestAdapter.getPage(int) line: 353	
			// try to get session entry for this session
			SessionEntry entry = getSessionEntry(false);

	PageStoreManager(AbstractPageManager).getPage(int) line: 82	
		IManageablePage page = getRequestAdapter().getPage(id);

	PageAccessSynchronizer$2(PageManagerDecorator).getPage(int) line: 50	
		return delegate.getPage(id);

	PageAccessSynchronizer$2.getPage(int) line: 246	
/=
	 * Wraps a page manager with this synchronizer
	 * 
	 * @param pagemanager
	 * @return wrapped page manager
	 */
	public IPageManager adapt(IPageManager pagemanager)
	{
		return new PageManagerDecorator(pagemanager)
		{
			@Override
			public IManageablePage getPage(int pageId)
			{
				IManageablePage page = null;
				try
				{
					lockPage(pageId);
->					page = super.getPage(pageId);

/ Wat PageManagerDecorator doet TODO, maar het gaat om locPage()	, en die komt uit PageAccessSynchronizer	,

	DefaultMapperContext.getPageInstance(int) line: 113	
		IManageablePage manageablePage = Session.get().getPageManager().getPage(pageId);

	PageAndComponentProvider(PageProvider).getStoredPage(int) line: 296	
		IRequestablePage storedPageInstance = getPageSource().getPageInstance(pageId);

	PageAndComponentProvider(PageProvider).resolvePageInstance(Integer, Class<IRequestablePage>, PageParameters, Integer) line: 261	
		if (pageId != null)
		{
			page = getStoredPage(pageId);

	PageAndComponentProvider(PageProvider).getPageInstance() line: 166	
		if (pageInstance == null)
		{
			resolvePageInstance(pageId, pageClass, pageParameters, renderCount);

	ListenerInterfaceRequestHandler.getPage() line: 96	
		return pageComponentProvider.getPageInstance();

	ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 157	
		final IRequestablePage page = getPage();

	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 837	
				handler.respond(RequestCycle.this);

	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
	ApplicationFilterChain.internalDoFilter(ServletRequest, ServletResponse) line: 239	
	ApplicationFilterChain.doFilter(ServletRequest, ServletResponse) line: 206	
	StandardWrapperValve.invoke(Request, Response) line: 217	
	StandardContextValve.invoke(Request, Response) line: 106	
	NonLoginAuthenticator(AuthenticatorBase).invoke(Request, Response) line: 502	
	StandardHostValve.invoke(Request, Response) line: 142	
	ErrorReportValve.invoke(Request, Response) line: 79	
	AccessLogValve(AbstractAccessLogValve).invoke(Request, Response) line: 616	
	StandardEngineValve.invoke(Request, Response) line: 88	
	CoyoteAdapter.service(Request, Response) line: 518	
	Http11NioProcessor(AbstractHttp11Processor<S>).process(SocketWrapper<S>) line: 1091	
	Http11NioProtocol$Http11ConnectionHandler(AbstractProtocol$AbstractConnectionHandler<S,P>).process(SocketWrapper<S>, SocketStatus) line: 673	
	NioEndpoint$SocketProcessor.doRun() line: 1500	
	NioEndpoint$SocketProcessor.run() line: 1456	
	ThreadPoolExecutor(ThreadPoolExecutor).runWorker(ThreadPoolExecutor$Worker) line: 1145	
	ThreadPoolExecutor$Worker.run() line: 615	
	TaskThread$WrappingRunnable.run() line: 61	
	TaskThread(Thread).run() line: 745	



/ Einde Intermezzo


/t
PageStoreManager$PersistentRequestAdapter.getSessionEntry(boolean) line: 374	
			SessionEntry entry = (SessionEntry)getSessionAttribute(attributeName);
/d
attributeName	"wicket:persistentPageManagerData - wicket-testing" (id=426)	
entry	PageStoreManager$SessionEntry  (id=2275)	
	afterReadObject	null	
	applicationName	"wicket-testing" (id=315)	
	sessionCache	ArrayList<E>  (id=2276)	
		elementData	Object[1]  (id=2278)	
			[0]	LinkOnlyStudyPage2  (id=2279)	
		modCount	0	
		size	1	
	sessionId	"9C225C35C7DFAD65DFEDF0F8CC6A26E8" (id=2277)	



/ Einde GET PAGE FROM ... CACHE  

/ GET PAGE FROM ... 

$ vi LinkOnlyStudyPage2.java
...

/ we gaan eerst Enter geven en daarna weer enter	,

/ de 1ste Enter	,

/ stack trace	,
/s
	DefaultPageManagerProvider.get(IPageManagerContext) line: 56	
		IDataStore dataStore = newDataStore();

		StoreSettings storeSettings = getStoreSettings();

		if (dataStore.canBeAsynchronous())
		{
			int capacity = storeSettings.getAsynchronousQueueCapacity();
			dataStore = new AsynchronousDataStore(dataStore, capacity);
		}

		IPageStore pageStore = newPageStore(dataStore);
		return new PageStoreManager(application.getName(), pageStore, pageManagerContext);

	WicketApplication(Application).internalGetPageManager() line: 1508	
					pageManager = pageManagerProvider.get(getPageManagerContext());

	WicketApplication(Application).fetchCreateAndSetSession(RequestCycle) line: 1681	
			session = newSession(requestCycle.getRequest(), requestCycle.getResponse());
			ThreadContext.setSession(session);
/d
			internalGetPageManager().newSessionCreated();

	Session.get() line: 169	
			return Application.get().fetchCreateAndSetSession(RequestCycle.get());

	LinkOnlyStudyPage2(Component).getSession() line: 1827	
		return Session.get();

	LinkOnlyStudyPage2(Page).dirty(boolean) line: 278	
		final IPageManager pageManager = getSession().getPageManager();

	LinkOnlyStudyPage2(WebPage).dirty(boolean) line: 324	
	LinkOnlyStudyPage2(Page).init() line: 717	
	LinkOnlyStudyPage2(Component).<init>(String, IModel<?>) line: 685	
	LinkOnlyStudyPage2(MarkupContainer).<init>(String, IModel<?>) line: 120	
	LinkOnlyStudyPage2(Page).<init>(PageParameters, IModel<?>) line: 170	
	LinkOnlyStudyPage2(Page).<init>() line: 134	
	LinkOnlyStudyPage2(WebPage).<init>() line: 76	
	LinkOnlyStudyPage2.<init>(PageParameters) line: 18	

	DefaultPageFactory.newPage(Constructor<C>, PageParameters) line: 171	
				return constructor.newInstance(argument);

	DefaultPageFactory.newPage(Class<C>) line: 76	
				return processPage(newPage(constructor, pp), pp);

	DefaultMapperContext.newPageInstance(Class<IRequestablePage>, PageParameters) line: 102	
			return application.getPageFactory().newPage(pageClass);

	PageProvider.resolvePageInstance(Integer, Class<IRequestablePage>, PageParameters, Integer) line: 268	
				page = getPageSource().newPageInstance(pageClass, pageParameters);

	PageProvider.getPageInstance() line: 166	
			resolvePageInstance(pageId, pageClass, pageParameters, renderCount);
pageId=null

	WebPageRenderer(PageRenderer).getPage() line: 78	
		return getPageProvider().getPageInstance();

	WebPageRenderer.isPageStateless() line: 287	
		return getPage().isPageStateless();

	WebPageRenderer.shouldRenderPageAndWriteResponse(RequestCycle, Url, Url) line: 329	
		return (compatibleProtocols(currentUrl.getProtocol(), targetUrl.getProtocol())) &&
				(neverRedirect(getRedirectPolicy())
			|| ((isOnePassRender() && notForcedRedirect(getRedirectPolicy())) || (targetUrl
				.equals(currentUrl) && notNewAndNotStatelessPage(isNewPageInstance(),
				isPageStateless()))) || (targetUrl.equals(currentUrl) && isRedirectToRender())
			|| (shouldPreserveClientUrl(cycle) && notForcedRedirect(getRedirectPolicy())));

	WebPageRenderer.respond(RequestCycle) line: 193	
		if (shouldRenderPageAndWriteResponse(requestCycle, currentUrl, targetUrl))

	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 837	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ 13	. 

/ In meer detail	,
/ we zijn in 	,
DefaultPageManagerProvider.get(IPageManagerContext) line: 56	
		IDataStore dataStore = newDataStore();

		StoreSettings storeSettings = getStoreSettings();

		if (dataStore.canBeAsynchronous())
		{
			int capacity = storeSettings.getAsynchronousQueueCapacity();
			dataStore = new AsynchronousDataStore(dataStore, capacity);
		}

		IPageStore pageStore = newPageStore(dataStore);
		return new PageStoreManager(application.getName(), pageStore, pageManagerContext);

/ de datastore, pagestore, pagestoremanager is WH per application	,

/ NOTES 

 7	. 

page manager
	session <- session entry met de page erin	, (eig. een list van pages, die ze sessionCache noemen)
	context TODO
	pageStore
	|
	/
page store
	pagesCache=SerializedPagesCache: maxsize=inMemmoryCacheSize, set in getStoreSettings().setInmemoryCacheSize(50)	,
	dataStore
	|
	/
asynchronous data store	
	entries=queue of pages, size=getStoreSettings().setAsynchronousQueueCapacity(200), hier komen alle pages op die moeten ser	.
	entryMap=tijdelijke cache van pages	, als page wordt ser, gaat de page uit deze cache	,
	dataStore
	|
	/
dataStore
	dir=plaats data store	,
	max size per session in data store=getStoreSettings().setMaxSizePerSession(Bytes.kilobytes(500))
	sessionEntryMap=TODO

/ de page manager stores de page in de session, door hem in de session entry's sessionCache set set (een list)	, en schrijft naar de onderliggende page store	, (see LinkOnlyStudyPage2.class)	,
/ Als je in een link handler setResponsePage(ThePage.this)) 	, dan wordt de page uit de session gevonden in die session entry	, en wordt hij niet uit de page store gehaald	,

/ VANMIDDAG MORGENOCHTEND

/ 7	.

/ de session wordt create als de page wordt create	, als page.isStateLess TODO
/ de page store manager, page store, asynchronous data store, data store worden create als session wordt create	,
/ de page wordt stored in detach fase	,

/c

/ bind
/s
LinkOnlyStudyPage2(Page).onBeforeRender() line: 808	
		// If any of the components on page is not stateless, we need to bind the session
		// before we start rendering components, as then jsessionid won't be appended
		// for links rendered before first stateful component
		if (getSession().isTemporary() && !peekPageStateless())
		{
			getSession().bind();
/s
WebSession(Session).bind() line: 269	
		ISessionStore store = getSessionStore();
/ TODO
		Request request = RequestCycle.get().getRequest();
		if (store.lookup(request) == null)
		{
			// explicitly create a session
			id = store.getSessionId(request, true);
			// bind it
			store.bind(request, this);
/s
HttpSessionStore.bind(Request, Session) line: 107	
		if (getAttribute(request, Session.SESSION_ATTRIBUTE_NAME) != newSession)
		{
			HttpSession httpSession = getHttpSession(request, false);
httpSession	StandardSessionFacade  (id=260)	
	session	StandardSession  (id=1987)	
		accessCount	null	
		attributes	ConcurrentHashMap<K,V>  (id=1993)	
		authType	null	
		creationTime	1453462982157	
		expiring	false	
		facade	StandardSessionFacade  (id=260)	
		id	"3E22182ED981DF67DFCE6F1CD597BE65" (id=1997)	
		isNew	true	
		isValid	true	
		lastAccessedTime	1453462982157	
		listeners	ArrayList<E>  (id=2001)	
		manager	StandardManager  (id=2003)	
		maxInactiveInterval	-60	
		notes	Hashtable<K,V>  (id=2014)	
		principal	null	
		support	PropertyChangeSupport  (id=2017)	
		thisAccessedTime	1453462982158	

			if (httpSession != null)
			{
				...
				// register the session object itself
				setAttribute(request, Session.SESSION_ATTRIBUTE_NAME, newSession);
this	HttpSessionStore  (id=194)	
/s
HttpSessionStore.setAttribute(Request, String, Serializable) line: 328	
		// ignore call if the session was marked invalid
		HttpSession httpSession = getHttpSession(request, false);
		if (httpSession != null)
		{
			String attributeName = getSessionAttributePrefix(request) + name;
wicket:wicket-testing:session
			httpSession.setAttribute(attributeName, value);
/ een wicket.WebSession, is a wicket.Session kan temporary , when it's id==null	,
/ dus in de session, die er altijd is,  wordt de WebSession reg	, als de WebSession niet temp is	, en dat is als de page niet stateless is (TODO)	,
/ want we zijn nog in 	,
LinkOnlyStudyPage2(Page).onBeforeRender() line: 808	
	// If any of the components on page is not stateless, we need to bind the session
		// before we start rendering components, as then jsessionid won't be appended
		// for links rendered before first stateful component
		if (getSession().isTemporary() && !peekPageStateless())
		{
			getSession().bind();
/d
/ LATER TODO 



/c
/ de page wordt stored in detach fase	, in commit request	,

/ dit gaan we doen	, met alvast de antwoorden	,
PageStoreManager$PersistentRequestAdapter.storeTouchedPages(List<IManageablePage>) line: 398	

				SessionEntry entry = getSessionEntry(true);
/ sets entry in session	,
entry	PageStoreManager$SessionEntry  (id=6666)	
	afterReadObject	null	
	applicationName	"wicket-testing" (id=5074)	
	sessionCache null	
	sessionId	"805AA1079B32AE66A4BD176029802C56" (id=6646)	
/ TODO (Waarom , want we set 'm toch in de session)	,

				entry.setSessionCache(touchedPages);
/ sets page in entry	,
entry	PageStoreManager$SessionEntry  (id=6666)	
	afterReadObject	null	
	applicationName	"wicket-testing" (id=5074)	
	sessionCache	ArrayList<E>  (id=6683)	
		elementData	Object[1]  (id=6685)	
			[0]	LinkOnlyStudyPage2  (id=5031)	
		modCount	0	
		size	1	
	sessionId	"805AA1079B32AE66A4BD176029802C56" (id=6646)	

/ we gaan debug	, in meer detail	,

				for (IManageablePage page : touchedPages)
				{
					pageStore.storePage(entry.sessionId, page);
/s
PageStoreManager$PersistentRequestAdapter.getSessionEntry(boolean) line: 376	
			String attributeName = getAttributeName();
wicket:persistentPageManagerData - wicket-testing
			SessionEntry entry = (SessionEntry)getSessionAttribute(attributeName);
null
			if (entry == null && create)
			{
				bind();
/s
	/**
	 * Force binding this session to the application's {@link ISessionStore session store} if not
	 * already done so.
	 * <p>
	 * A Wicket application can operate in a session-less mode as long as stateless pages are used.
	 * Session objects will be then created for each request, but they will only live for that
	 * request. You can recognize temporary sessions by calling {@link #isTemporary()} which
	 * basically checks whether the session's id is null. Hence, temporary sessions have no session
	 * id.
	 * </p>
	 * <p>
	 * By calling this method, the session will be bound (made not-temporary) if it was not bound
	 * yet. It is useful for cases where you want to be absolutely sure this session object will be
	 * available in next requests. If the session was already bound (
	 * {@link ISessionStore#lookup(Request) returns a session}), this call will be a noop.
	 * </p>
	 */
WebSession(Session).bind() line: 280	
		if (store.lookup(request) == null)
/ NEE
/ is al bind	,
/t
PageStoreManager$PersistentRequestAdapter.getSessionEntry(boolean) line: 378	
				bind();
/d
				entry = new SessionEntry(applicationName, getSessionId());
afterReadObject	null	
applicationName	"wicket-testing" (id=5074)	
sessionCache	null	
sessionId	"805AA1079B32AE66A4BD176029802C56" (id=6646)	

				setSessionAttribute(attributeName, entry);
/s
PageStoreManager$PersistentRequestAdapter(RequestAdapter).setSessionAttribute(String, Serializable) line: 89	
		context.setSessionAttribute(key, value);
/s
DefaultPageManagerContext.setSessionAttribute(String, Serializable) line: 99	

		Session.get().setAttribute(key, value);
key	"wicket:persistentPageManagerData - wicket-testing" (id=5141)	
value	PageStoreManager$SessionEntry  (id=6666)	
	afterReadObject	null	
	applicationName	"wicket-testing" (id=5074)	
	sessionCache	null	
	sessionId	"805AA1079B32AE66A4BD176029802C56" (id=6646)	

			// Set the actual attribute
			store.setAttribute(request, name, value);
/s
HttpSessionStore.setAttribute(Request, String, Serializable) line: 344	

		// ignore call if the session was marked invalid
		HttpSession httpSession = getHttpSession(request, false);
		if (httpSession != null)
		{
			String attributeName = getSessionAttributePrefix(request) + name;
wicket:wicket-testing:wicket:persistentPageManagerData - wicket-testing
			httpSession.setAttribute(attributeName, value);
/ TODO (set session id in zichzelf	)	,

/t
PageStoreManager$PersistentRequestAdapter.storeTouchedPages(List<IManageablePage>) line: 399	
				SessionEntry entry = getSessionEntry(true);
/d
				entry.setSessionCache(touchedPages);
/s
PageStoreManager$SessionEntry.setSessionCache(List<IManageablePage>) line: 213	
			sessionCache = new ArrayList<>(pages);
/t
PageStoreManager$PersistentRequestAdapter.storeTouchedPages(List<IManageablePage>) line: 403	
				entry.setSessionCache(touchedPages);
/d
entry	PageStoreManager$SessionEntry  (id=6666)	
	afterReadObject	null	
	applicationName	"wicket-testing" (id=5074)	
	sessionCache	ArrayList<E>  (id=6683)	
		elementData	Object[1]  (id=6685)	
			[0]	LinkOnlyStudyPage2  (id=5031)	
		modCount	0	
		size	1	
	sessionId	"805AA1079B32AE66A4BD176029802C56" (id=6646)	

				for (IManageablePage page : touchedPages)
				{
					// WICKET-5103 use the same sessionId as used in SessionEntry#getPage()
					pageStore.storePage(entry.sessionId, page);

 








/ Einde NOTES

/ WICKET URLS

/ 7	. 

$ vi LinkOnlyStudyPage2.class
		Link<String>link=new Link<String>("link",model2) {
			@Override
			public void onClick() {
				setResponsePage(new LabelOnlyStudyPage(null));

/ we zien	, als we de link click	,
http://localhost:9090/wicket-testing/wicket/page?1

/ 7	.

$ vi WicketpathStudyPage2.java

		final Link<Class> link0=new Link<Class>("link0"){
			@Override
			public void onClick() {
				setResponsePage(LinkOnlyStudyPage2.class);

/ we zien	, als we de link click	,
http://localhost:9090/wicket-testing/wicket/bookmarkable/my.test.own.LinkOnlyStudyPage2?10

/ 7	. 

$ vi LinkOnlyStudyPage2.java

		Link<String>link=new Link<String>("link",model2) {
			@Override
			public void onClick() {
				setResponsePage(LinkOnlyStudyPage3.class);
			}
		};
/ we zien	, als we de link click	,
http://localhost:9090/wicket-testing/wicket/bookmarkable/my.test.own.LinkOnlyStudyPage3?1

/ 7	.

$ vi LinkOnlyStudyPage2.java

		Link<String>link=new Link<String>("link",model2) {
			@Override
			public void onClick() {
				setResponsePage(new LinkOnlyStudyPage3(null));
			}
		};
/ we zien	, als we de link click	,
http://localhost:9090/wicket-testing/wicket/page?1

/ 7	. 

$ vi LinkOnlyStudyPage2.java

		Link<String>link=new Link<String>("link",model2) {
			@Override
			public void onClick() {
				setResponsePage(new LinkOnlyStudyPage3(null));
			}
		};
$ vi LinkOnlyStudyPage3.java

		Link<String>link=new Link<String>("link",model2) {
			@Override
			public void onClick() {
				setResponsePage(new LinkOnlyStudyPage2(null));
			}
		};

/ geef	,
http://localhost:9090/wicket-testing/?0				/ LinkStudyTargetPage2
Page page=

/ Als we steeds op de links click	,

http://localhost:9090/wicket-testing/wicket/page?1 	/ LinkStudyTargetPage3
http://localhost:9090/wicket-testing/?2
http://localhost:9090/wicket-testing/wicket/page?3
http://localhost:9090/wicket-testing/?4
...

/ 7	. 

/ WicketpathStudyPage2: BookmarkablePageLink	,
/ WicketpathStudyPage2: renderFullUrl	, 
/ TODO

/ 7. 

/ we hebben in LinkOnlyStudyPage3 ook renderFullUrl	,
/ TODO

/ 7	. 
    setResponsePage(ObjectPage.class, new PageParameters("id="+object.getId()));
/ TODO
/ MORGENOCHTEND


/ 7	. 

http://stackoverflow.com/questions/7516705/how-to-reference-a-page-with-parameters-wicket

PageParameters pars = new PageParameters();
pars.add("id", 12345);
add(new BookmarkablePageLink("id", MyPage.class, pars);

PageParameters pars = new PageParameters();
pars.add("id", 12345);
setResponsePage(MyPage.class, pars);
/ TODO

/ 7	. 

$ vi Component.class

	public final <C extends IRequestablePage> void setResponsePage(final Class<C> cls)

	public final <C extends IRequestablePage> void setResponsePage(final Class<C> cls, PageParameters parameters)

	public final void setResponsePage(final IRequestablePage page)
/ TODO

/ 7	. 

$ vi PageProvider.java

Provides page instance for request handlers. Each of the constructors has just enough information to get existing or create new page instance. Requesting or creating page instance is deferred until getPageInstance() is called.

Purpose of this class is to reduce complexity of both IRequestMappers and IRequestHandlers. IRequestMapper examines the URL, gathers all relevant information about the page in the URL (combination of page id, page class, page parameters and render count), creates PageProvider object and creates a IRequestHandler instance that can use the PageProvider to access the page.




/ Einde WICKET URLS

/ WICKET GET PAGE

/ 7	. 

/ Hoe Page uit url, want in browser we geven http://localhost:9090/wicket-testing	,

$ vi LinkOnlyStudyPage2.class

		Link<String>link=new Link<String>("link",model2) {
			@Override
			public void onClick() {
				PageProvider pageProvider=new PageProvider(LinkOnlyStudyPage2.this);
				IRequestHandler requestHandler=new RenderPageRequestHandler(pageProvider);
				RequestCycle requestycle=getRequestCycle();
				CharSequence charSequence=requestycle.urlFor(requestHandler);
				
				Page page=getPage();
				
				Url url=Url.parse(charSequence);
				RequestCycle requestCycle=RequestCycle.get();
				UrlRenderer urlRenderer=requestCycle.getUrlRenderer();
				String urlAsString=url.toString();
				String absUrlAsString =urlRenderer.renderFullUrl(url);

				
				PageParameters pageParameters=new PageParameters();
				pageParameters.set("returnUrl",absUrlAsString);
				setResponsePage(LinkOnlyStudyPage3.class,pageParameters);
			
/ we debug eerst gewoon hoe wicket aan Page LinkOnlyStudy2Page komt , uitgaande van http://localhost:9090/wicket-testing	,	

/ we zijn (ook) in 	,
	WebPageRenderer.respond(RequestCycle) line: 186	
->		Url targetUrl = requestCycle.mapUrlFor(getRenderPageRequestHandler());

->>		if (shouldRenderPageAndWriteResponse(requestCycle, currentUrl, targetUrl))

/c
/->
	HomePageMapper(AbstractBookmarkableMapper).mapHandler(IRequestHandler) line: 429	
	HomePageMapper(MountedMapper).mapHandler(IRequestHandler) line: 159	
	SystemMapper(CompoundRequestMapper).mapHandler(IRequestHandler) line: 213	
	RequestCycle.mapUrlFor(IRequestHandler) line: 434	
	WebPageRenderer.respond(RequestCycle) line: 186	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
		Url currentUrl = requestCycle.getUrlRenderer().getBaseUrl();
->		Url targetUrl = requestCycle.mapUrlFor(getRenderPageRequestHandler());

	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 837	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/c
/->>
	DefaultPageManagerProvider.get(IPageManagerContext) line: 56	
	DefaultPageManagerProvider.get(Object) line: 38	
	WicketApplication(Application).internalGetPageManager() line: 1508	
	WicketApplication(Application).fetchCreateAndSetSession(RequestCycle) line: 1681	
	Session.get() line: 169	
	LinkOnlyStudyPage2(Component).getSession() line: 1827	
	LinkOnlyStudyPage2(Page).dirty(boolean) line: 278	
	LinkOnlyStudyPage2(WebPage).dirty(boolean) line: 324	
	LinkOnlyStudyPage2(Page).init() line: 717	



	LinkOnlyStudyPage2(Component).<init>(String, IModel<?>) line: 685	
		setId(id);
id=null
		init();
	LinkOnlyStudyPage2(MarkupContainer).<init>(String, IModel<?>) line: 120	
		super(id, model);
id=null
	LinkOnlyStudyPage2(Page).<init>(PageParameters, IModel<?>) line: 170	
	LinkOnlyStudyPage2(Page).<init>() line: 134	
	LinkOnlyStudyPage2(WebPage).<init>() line: 76	
	LinkOnlyStudyPage2.<init>(PageParameters) line: 25 (out of synch)	

	DefaultPageFactory.newPage(Constructor<C>, PageParameters) line: 171	
			if (argument != null)
			{
				return constructor.newInstance(argument);

	DefaultPageFactory.newPage(Class<C>) line: 76	
				PageParameters pp = new PageParameters();
				return processPage(newPage(constructor, pp), pp);

	DefaultMapperContext.newPageInstance(Class<IRequestablePage>, PageParameters) line: 102	
		if (pageParameters == null)
		{
			return application.getPageFactory().newPage(pageClass);

	PageProvider.resolvePageInstance(Integer, Class<IRequestablePage>, PageParameters, Integer) line: 268	
		if (page == null)
		{
			if (pageClass != null)
			{
				page = getPageSource().newPageInstance(pageClass, pageParameters);

	PageProvider.getPageInstance() line: 166	
			resolvePageInstance(pageId, pageClass, pageParameters, renderCount);
pageClass	Class<T> (my.test.own.LinkOnlyStudyPage2) (id=9289)	
pageId	null	
pageParameters	null	
renderCount	null	

	WebPageRenderer(PageRenderer).getPage() line: 78	
		return getPageProvider().getPageInstance();

	WebPageRenderer.isPageStateless() line: 287	
		return getPage().isPageStateless();

	WebPageRenderer.shouldRenderPageAndWriteResponse(RequestCycle, Url, Url) line: 329	
		return (compatibleProtocols(currentUrl.getProtocol(), targetUrl.getProtocol())) &&
				(neverRedirect(getRedirectPolicy())
			|| ((isOnePassRender() && notForcedRedirect(getRedirectPolicy())) || (targetUrl
				.equals(currentUrl) && notNewAndNotStatelessPage(isNewPageInstance(),
				isPageStateless()))) || (targetUrl.equals(currentUrl) && isRedirectToRender())
			|| (shouldPreserveClientUrl(cycle) && notForcedRedirect(getRedirectPolicy())));

	WebPageRenderer.respond(RequestCycle) line: 193	
->>		if (shouldRenderPageAndWriteResponse(requestCycle, currentUrl, targetUrl))

	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 837	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/s
LinkOnlyStudyPage2(Component).<init>(String, IModel<?>) line: 685	
		setId(id);
/d
this	LinkOnlyStudyPage2  (id=10534)	
	id	null	
	numericId	0	

		init();
/s





/ Einde WICKET GET PAGE

/ WICKET 

/ Lees	,
https://ci.apache.org/projects/wicket/guide/6.x/guide/bestpractices.html
24.10 Do not pass components to constructors

/ of	,
https://ci.apache.org/projects/wicket/guide/7.x/guide/bestpractices.html#bestpractices_10
25.10 Do not pass components to constructors

/ 7	. 

/ We hadden open in chrome	, over URLs, 
http://stackoverflow.com/questions/7516705/how-to-reference-a-page-with-parameters-wicket
http://stackoverflow.com/questions/9580071/wicket-1-5-and-obtaining-a-url-to-page-instance



/ Einde WICKET 


/ Einde GET PAGE FROM ... 

/ GET PAGE FROM ... 

$ vi LinkOnlyStudyPage2.java
		Link<String>link=new Link<String>("link",model2) {
			@Override
			public void onClick() {
				setResponsePage(LinkOnlyStudyPage2.class,null);

/we deploy de app	,
/ als we in URL field 
http://localhost:9090/wicket-testing
/ dan verschijnt er in de URL field	,	
http://localhost:9090/wicket-testing?0
/ Als we hierop Enter, blijft 	,
http://localhost:9090/wicket-testing?0
/ als we in URL field  /?0 rm	,
http://localhost:9090/wicket-testing
/ dan krijgen we in de URL field	,
http://localhost:9090/wicket-testing?1
/ als we op de link click verschijnt er 
http://localhost:9090/wicket-testing?2
/ als we weer op de link click	,
http://localhost:9090/wicket-testing?3

/ 7	. 

/ we geven	,
http://localhost:9090/wicket-testing

/ 13	. 

/s
	LinkOnlyStudyPage2(Component).<init>(String, IModel<?>) line: 683	
		setId(id);

	LinkOnlyStudyPage2(MarkupContainer).<init>(String, IModel<?>) line: 120	
	LinkOnlyStudyPage2(Page).<init>(PageParameters, IModel<?>) line: 170	
	LinkOnlyStudyPage2(Page).<init>() line: 134	
	LinkOnlyStudyPage2(WebPage).<init>() line: 76	
	LinkOnlyStudyPage2.<init>(PageParameters) line: 25	

	DefaultPageFactory.newPage(Constructor<C>, PageParameters) line: 171	
		try
		{
			if (argument != null)
			{
				return constructor.newInstance(argument);

	DefaultPageFactory.newPage(Class<C>) line: 76	
		catch (NoSuchMethodException e)
		{
			// a bit of a hack here..
			Constructor<C> constructor = constructor(pageClass, PageParameters.class);
			if (constructor != null)
			{
				PageParameters pp = new PageParameters();
				return processPage(newPage(constructor, pp), pp);

	DefaultMapperContext.newPageInstance(Class<IRequestablePage>, PageParameters) line: 102	
		if (pageParameters == null)
		{
			return application.getPageFactory().newPage(pageClass);

	PageProvider.resolvePageInstance(Integer, Class<IRequestablePage>, PageParameters, Integer) line: 268	
		if (page == null)
		{
			if (pageClass != null)
			{
				page = getPageSource().newPageInstance(pageClass, pageParameters);

	PageProvider.getPageInstance() line: 166	
		if (pageInstance == null)
		{
			resolvePageInstance(pageId, pageClass, pageParameters, renderCount);

	WebPageRenderer(PageRenderer).getPage() line: 78	
		return getPageProvider().getPageInstance();

	WebPageRenderer.isPageStateless() line: 287	
		return getPage().isPageStateless();

	WebPageRenderer.shouldRenderPageAndWriteResponse(RequestCycle, Url, Url) line: 329	
		return (compatibleProtocols(currentUrl.getProtocol(), targetUrl.getProtocol())) &&
				(neverRedirect(getRedirectPolicy())
			|| ((isOnePassRender() && notForcedRedirect(getRedirectPolicy())) || (targetUrl
				.equals(currentUrl) && notNewAndNotStatelessPage(isNewPageInstance(),
				isPageStateless()))) || (targetUrl.equals(currentUrl) && isRedirectToRender())
			|| (shouldPreserveClientUrl(cycle) && notForcedRedirect(getRedirectPolicy())));

	WebPageRenderer.respond(RequestCycle) line: 193	
		if (shouldRenderPageAndWriteResponse(requestCycle, currentUrl, targetUrl))

	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
		PageRenderer renderer = Application.get().getPageRendererProvider().get(this);
		renderer.respond((RequestCycle)requestCycle);

	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 837	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
			IRequestHandler handler = resolveRequestHandler();
handler	RenderPageRequestHandler  (id=6842)	
			if (handler != null)
			{
				execute(handler);

	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ 13	. 

/c
	DefaultPageManagerProvider.get(IPageManagerContext) line: 56	
		IDataStore dataStore = newDataStore();

		StoreSettings storeSettings = getStoreSettings();

		if (dataStore.canBeAsynchronous())
		{
			int capacity = storeSettings.getAsynchronousQueueCapacity();
			dataStore = new AsynchronousDataStore(dataStore, capacity);
		}

		IPageStore pageStore = newPageStore(dataStore);
		return new PageStoreManager(application.getName(), pageStore, pageManagerContext);

	DefaultPageManagerProvider.get(Object) line: 38	
	WicketApplication(Application).internalGetPageManager() line: 1508	
					pageManager = pageManagerProvider.get(getPageManagerContext());

 We zien in session geen ref er naar	,
	WicketApplication(Application).fetchCreateAndSetSession(RequestCycle) line: 1681	
		Session session = getSessionStore().lookup(requestCycle.getRequest());
		if (session == null)
		{
			session = newSession(requestCycle.getRequest(), requestCycle.getResponse());
/ creates Tomcat's WebSession	, nog geen bind, op Tomcat's session	,
/ Is Tomcat's session created	?
/ We zien in session geen ref er naar	,
/ TODO
			ThreadContext.setSession(session);
			internalGetPageManager().newSessionCreated();
/ internalGetPageManager()=PageStoreManager inst	,

	Session.get() line: 169	
			return Application.get().fetchCreateAndSetSession(RequestCycle.get());

	LinkOnlyStudyPage2(Component).getSession() line: 1827	
		return Session.get();

	LinkOnlyStudyPage2(Page).dirty(boolean) line: 278	
		final IPageManager pageManager = getSession().getPageManager();

	LinkOnlyStudyPage2(WebPage).dirty(boolean) line: 324	
	LinkOnlyStudyPage2(Page).init() line: 717	
		// All Pages are born dirty so they get clustered right away
		dirty(true);

	LinkOnlyStudyPage2(Component).<init>(String, IModel<?>) line: 685	
		setId(id);
/d
		init();

/ 13	. 

/ c
	WicketApplication(Application).fetchCreateAndSetSession(RequestCycle) line: 1682	
			session = newSession(requestCycle.getRequest(), requestCycle.getResponse());
/ Wicket's WebSession	,
			ThreadContext.setSession(session);
			internalGetPageManager().newSessionCreated();
/ NIETS	, 

	Session.get() line: 169	
			return Application.get().fetchCreateAndSetSession(RequestCycle.get());

	LinkOnlyStudyPage2(Component).getSession() line: 1827	

	LinkOnlyStudyPage2(Page).dirty(boolean) line: 278	
->		final IPageManager pageManager = getSession().getPageManager();

	LinkOnlyStudyPage2(WebPage).dirty(boolean) line: 324	
	LinkOnlyStudyPage2(Page).init() line: 717	
		// All Pages are born dirty so they get clustered right away
		dirty(true);

/s
LinkOnlyStudyPage2(Page).dirty(boolean) line: 278	
		final IPageManager pageManager = getSession().getPageManager();
/pd
/s
WebSession(Session).getPageManager() line: 895	
		IPageManager pageManager = Application.get().internalGetPageManager();
pageManager	PageStoreManager  (id=8557)	
/ Was er al	,
		return pageAccessSynchronizer.get().adapt(pageManager);
/t
LinkOnlyStudyPage2(Page).dirty(boolean) line: 286	
		final IPageManager pageManager = getSession().getPageManager();
		if (!getFlag(FLAG_IS_DIRTY) && (isVersioned() && pageManager.supportsVersioning() ||

		// we need to get pageId for new page instances even when the page doesn't need
		// versioning, otherwise pages override each other in the page store and back button
		// support is broken
			isInitialization))
		{
			setFlag(FLAG_IS_DIRTY, true);
			setNextAvailableId();
/s
LinkOnlyStudyPage2(Page).setNextAvailableId() line: 729	
		setNumericId(getSession().nextPageId());
/s
WebSession(Session).nextPageId() line: 884	
		dirty(false);
/s
	public final void dirty(boolean forced)
	{
		if (isTemporary())
/ JA	, want de id (van de page in dit geval is null)	,
/ dus doet niets	, 
/ geeft niet, want dirty=false	, al	,
/t
WebSession(Session).nextPageId() line: 884	
		dirty(false);
/d
		return pageId.getAndIncrement();
/s
/ MORGENOCHTEND



		IPageManager pageManager = Application.get().internalGetPageManager();


/ 13	. 

/c
	WebSession(Session).updateId() line: 398	
		if (requestCycle != null)
		{
			id = getSessionStore().getSessionId(requestCycle.getRequest(), false);

	WebSession(Session).getId() line: 382	
		if (id == null)
		{
			updateId();

	DefaultPageManagerContext.getSessionId() line: 75	
		return Session.get().getId();

	PageStoreManager$PersistentRequestAdapter(RequestAdapter).getSessionId() line: 110	
		return context.getSessionId();

	PageStoreManager$PersistentRequestAdapter.newSessionCreated() line: 387	
			// if the session is not temporary bind a session entry to it
			if (getSessionId() != null)

	PageStoreManager(AbstractPageManager).newSessionCreated() line: 93	
		getRequestAdapter().newSessionCreated();

	WicketApplication(Application).fetchCreateAndSetSession(RequestCycle) line: 1681	
		if (session == null)
		{
			session = newSession(requestCycle.getRequest(), requestCycle.getResponse());
/ creates wicket's WebSession	, nog geen bind in de Tomcat's session 
/ TODO
			ThreadContext.setSession(session);
			internalGetPageManager().newSessionCreated();

	Session.get() line: 169	
			return Application.get().fetchCreateAndSetSession(RequestCycle.get());

/ we zijn in	,
/s
WebSession(Session).updateId() line: 398	
			id = getSessionStore().getSessionId(requestCycle.getRequest(), false);
/s
WebSession(Session).getSessionStore() line: 783	
		if (sessionStore == null)
		{
			sessionStore = getApplication().getSessionStore();
/ Application.sessionStore bestaat al wel	,
/t
HttpSessionStore.getSessionId(Request, boolean) line: 157	
		HttpSession httpSession = getHttpSession(request, false);
null
////////////////////////////////////////////////////
/ TOMCAT SESSION	,
/ Dus in Tomcat is er nog geen session	,

		if (httpSession != null)
/ NEE
		else if (create)
/ NEE
		return id;
null
/ See hieronder	,

/ 13	. 

/c
	WebSession(Session).bind() line: 262	
		ISessionStore store = getSessionStore();

	LinkOnlyStudyPage2(Page).onBeforeRender() line: 808	
		if (getSession().isTemporary() && !peekPageStateless())
		{
			getSession().bind();

	LinkOnlyStudyPage2(Component).internalBeforeRender() line: 949	
	LinkOnlyStudyPage2(Component).beforeRender() line: 1017	
	LinkOnlyStudyPage2(Component).internalPrepareForRender(boolean) line: 2207	
	LinkOnlyStudyPage2(Page).internalPrepareForRender(boolean) line: 242	
	LinkOnlyStudyPage2(Component).render() line: 2296	
	LinkOnlyStudyPage2(Page).renderPage() line: 1018	

	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
			requestablePage.renderPage();

	WebPageRenderer.respond(RequestCycle) line: 236	
		Url currentUrl = requestCycle.getUrlRenderer().getBaseUrl();
		Url targetUrl = requestCycle.mapUrlFor(getRenderPageRequestHandler());
targetUrl	Url  (id=6854)	
	parameters	ArrayList<E>  (id=7582)	
[]
		if (shouldRenderPageAndWriteResponse(requestCycle, currentUrl, targetUrl))
/d
/ NEE
		else
		{
			getPage();
/ NIETS	, is er al	,
			Url beforeRenderUrl = requestCycle.mapUrlFor(getRenderPageRequestHandler());
?0
/ want	,
beforeRenderUrl	Url  (id=7574)	
	parameters	ArrayList<E>  (id=7579)	
[0]
/s
RequestCycle.mapUrlFor(IRequestHandler) line: 434	
		final Url url = requestMapper.mapHandler(handler);
/s
SystemMapper(CompoundRequestMapper).mapHandler(IRequestHandler) line: 213	
		for (IRequestMapper mapper : mappers)
		{
			Url url = mapper.mapHandler(handler);
/s
HomePageMapper(MountedMapper).mapHandler(IRequestHandler) line: 159	
		Url url = super.mapHandler(requestHandler);
/s
HomePageMapper(AbstractBookmarkableMapper).mapHandler(IRequestHandler) line: 449	
			if (checkPageInstance(page) &&
				(!pageMustHaveBeenCreatedBookmarkable() || page.wasCreatedBookmarkable()))
/ JA
			{
				PageInfo info = getPageInfo(handler);
/s
	protected final PageInfo getPageInfo(IPageRequestHandler handler)
	{
		Integer pageId = null;
		if (handler.isPageInstanceCreated())
		{
			IRequestablePage page = handler.getPage();

			if (page.isPageStateless() == false)
/ Ja
			{
				pageId = page.getPageId();
0
/= numericId

				PageComponentInfo pageComponentInfo = new PageComponentInfo(info, null);

				UrlInfo urlInfo = new UrlInfo(pageComponentInfo, page.getClass(),
					handler.getPageParameters());
				return buildUrl(urlInfo);
/t
HomePageMapper(AbstractBookmarkableMapper).mapHandler(IRequestHandler) line: 449	
				PageInfo info = getPageInfo(handler);
/d
				PageComponentInfo pageComponentInfo = new PageComponentInfo(info, null);

				UrlInfo urlInfo = new UrlInfo(pageComponentInfo, page.getClass(),
					handler.getPageParameters());
				return buildUrl(urlInfo);
/s
HomePageMapper(MountedMapper).buildUrl(AbstractBookmarkableMapper$UrlInfo) line: 203	
		encodePageComponentInfo(url, info.getPageComponentInfo());
/s
HomePageMapper(AbstractComponentMapper).encodePageComponentInfo(Url, PageComponentInfo) line: 105	
		if (info != null)
		{
			String s = info.toString();
"0"
			if (!Strings.isEmpty(s))
			{
				QueryParameter parameter = new QueryParameter(s, "");
				url.getQueryParameters().add(parameter);
url	Url  (id=8012)	
	parameters	ArrayList<E>  (id=8023)	
[0]
/ Dit zijn dus de query params	,
/t
WebPageRenderer.respond(RequestCycle) line: 233	
			Url beforeRenderUrl = requestCycle.mapUrlFor(getRenderPageRequestHandler());
/d
			// redirect to buffer
			BufferedWebResponse response = renderPage(beforeRenderUrl, requestCycle);


	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 837	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/s
LinkOnlyStudyPage2(Page).onBeforeRender() line: 808	
		// If any of the components on page is not stateless, we need to bind the session
		// before we start rendering components, as then jsessionid won't be appended
		// for links rendered before first stateful component
		if (getSession().isTemporary() && !peekPageStateless())
		{
			getSession().bind();
///////////////////////////////////////////////////////////////////////////////////////////
/ WICKET ASKS TOMCAT FOR A SESSION	,
/ Omdat de page stateful, vraagt Wicket aan Tomcat voor een session	,
/s
WebSession(Session).bind() line: 262	
		ISessionStore store = getSessionStore();
/ Is er al	,
		Request request = RequestCycle.get().getRequest();
		if (store.lookup(request) == null)
/ JA
		{
			// explicitly create a session
			id = store.getSessionId(request, true);
/s
HttpSessionStore.getSessionId(Request, boolean) line: 159	
		HttpSession httpSession = getHttpSession(request, false);
null
		if (httpSession != null)
/ NEE
		else if (create)
		{
			httpSession = getHttpSession(request, true);
/s
HttpSessionStore.getHttpSession(Request, boolean) line: 95	
		return getHttpServletRequest(request).getSession(create);
/s
RequestFacade.getSession(boolean) line: 886	 							/ Tomcat !
       } else {
            return request.getSession(create);
/s
Request.getSession(boolean) line: 2256	
        Session session = doGetSession(create);
/s
Request.doGetSession(boolean) line: 2844	
       // There cannot be a session if no context has been assigned yet
        Context context = getContext();
StandardEngine[Catalina].StandardHost[localhost].StandardContext[/wicket-testing]

        // Return the requested session if it exists and is valid
        Manager manager = context.getManager();
org.apache.catalina.session.StandardManager[/wicket-testing]

        if (requestedSessionId != null) {
requestedSessionId	"1llua8yc8hq0d14hmf8vs3f621" (id=9657)	
/ Wanneer set? Waar komt deze vandaan? Deze is voor een lookup in sessions	,
/ als Tomcat straks een session create, wordt er een sessionid  gen	, 
/ TODO
            try {
                session = manager.findSession(requestedSessionId);
/s
StandardManager(ManagerBase).findSession(String) line: 748	
        return sessions.get(id);
sessions={}
/t
Request.doGetSession(boolean) line: 2894	
           try {
                session = manager.findSession(requestedSessionId);
null
        } else {
            session = manager.createSession(null);
/s
StandardManager(ManagerBase).createSession(String) line: 688	

////////////////////////////////////////////////////
/ TOMCAT SESSION	,
/ Tomcat gaat nu pas session maken	, omdat Wicket daarom vroeg	,
/ Wel heeft de request een session id	,
/ TODO

        // Recycle or create a Session instance
        Session session = createEmptySession();
/s
StandardManager(ManagerBase).createEmptySession() line: 728	
        return (getNewSession());
/s
StandardManager(ManagerBase).getNewSession() line: 857	
        return new StandardSession(this);
/t
StandardManager(ManagerBase).createSession(String) line: 700	
        // Recycle or create a Session instance
        Session session = createEmptySession();
/d
       	session.setNew(true);
        session.setValid(true);
        session.setCreationTime(System.currentTimeMillis());
        session.setMaxInactiveInterval(this.maxInactiveInterval);
        String id = sessionId;
        if (id == null) {
            id = generateSessionId();

		...
        return (session);
/t
Request.doGetSession(boolean) line: 2902	
        } else {
            session = manager.createSession(null);
/d
            Cookie cookie =
                ApplicationSessionCookieConfig.createSessionCookie(
                        context, session.getIdInternal(), isSecure());
/s
ApplicationSessionCookieConfig.createSessionCookie(Context, String, boolean) line: 165	
   /**
     * Creates a new session cookie for the given session ID
     *
     * @param context     The Context for the web application
     * @param sessionId   The ID of the session for which the cookie will be
     *                    created
     * @param secure      Should session cookie be configured as secure
     */

        SessionCookieConfig scc =
            context.getServletContext().getSessionCookieConfig();
scc	ApplicationSessionCookieConfig  (id=9713)	
	comment	null	
	context	StandardContext  (id=9648)	
	domain	null	
	httpOnly	false	
	maxAge	-1		
	name	null	
	path	null	
	secure	false	
/ Hier zien de maxAge=-1	, dat hadden we zo config,	 dat de session niet verloopt	,
/ Maar waarom in de cookie?	
/ In de session zien we expiring=false	,
/ TODO

        Cookie cookie = new Cookie(
                SessionConfig.getSessionCookieName(context), sessionId);
/s
SessionConfig.getSessionCookieName(Context) line: 41	
        String result = getConfiguredSessionCookieName(context);
null
        if (result == null) {
            result = DEFAULT_SESSION_COOKIE_NAME;
result	"JSESSIONID" (id=9714)	
        return result;
/t
ApplicationSessionCookieConfig.createSessionCookie(Context, String, boolean) line: 173	
        Cookie cookie = new Cookie(
                SessionConfig.getSessionCookieName(context), sessionId);
/pd
/s
Cookie.<init>(String, String) line: 119	
name	"JSESSIONID" (id=9714)	
value	"F4D48AB1EE40ACCD446D9C4DCD1031C2" (id=9709)	
/t
ApplicationSessionCookieConfig.createSessionCookie(Context, String, boolean) line: 177	
        Cookie cookie = new Cookie(
                SessionConfig.getSessionCookieName(context), sessionId);
/d
       // Just apply the defaults.
        cookie.setMaxAge(scc.getMaxAge());
        cookie.setComment(scc.getComment());

       // Always set httpOnly if the context is configured for that
        if (scc.isHttpOnly() || context.getUseHttpOnly()) {
            cookie.setHttpOnly(true);

       String contextPath = context.getSessionCookiePath();
        if (contextPath == null || contextPath.length() == 0) {
            contextPath = scc.getPath();
       if (contextPath == null || contextPath.length() == 0) {
            contextPath = context.getEncodedPath();
"/wicket-testing"
        if (context.getSessionCookiePathUsesTrailingSlash()) {
            // Handle special case of ROOT context where cookies require a path of
            // '/' but the servlet spec uses an empty string
            // Also ensure the cookies for a context with a path of /foo don't get
            // sent for requests with a path of /foobar
            if (!contextPath.endsWith("/")) {
                contextPath = contextPath + "/";
        cookie.setPath(contextPath);
        return cookie;
cookie	Cookie  (id=9717)	
	comment	null	
	domain	null	
	httpOnly	true	
	maxAge	-1	
	name	"JSESSIONID" (id=9714)	
	path	"/wicket-testing/" (id=9725)	
	secure	false	
	value	"F4D48AB1EE40ACCD446D9C4DCD1031C2" (id=9709)	
	version	0	
/t
Request.doGetSession(boolean) line: 2910	
            Cookie cookie =
                ApplicationSessionCookieConfig.createSessionCookie(
                        context, session.getIdInternal(), isSecure());
/d
            response.addSessionCookieInternal(cookie);
        session.access();
        return session;													/ Tomcat's code, nog steeds	,

/t
Request.getSession(boolean) line: 2261	 	/ Tomcat's code	,
        Session session = doGetSession(create);
        return session.getSession();
/t
HttpSessionStore.getHttpSession(Request, boolean) line: 95				/ Terug in Wicket code	,
		return getHttpServletRequest(request).getSession(create);
/t
HttpSessionStore.getSessionId(Request, boolean) line: 167	
		else if (create)
		{
			httpSession = getHttpSession(request, true);
/d
			id = httpSession.getId();
/t
WebSession(Session).bind() line: 269	
			id = store.getSessionId(request, true);
			// bind it
			store.bind(request, this);
/s
HttpSessionStore.bind(Request, Session) line: 107	
			HttpSession httpSession = getHttpSession(request, false);
/ Tomcat's	,

			if (httpSession != null)
			{
...
				// register the session object itself
				setAttribute(request, Session.SESSION_ATTRIBUTE_NAME, newSession);
/s
HttpSessionStore.setAttribute(Request, String, Serializable) line: 328	
		// ignore call if the session was marked invalid
		HttpSession httpSession = getHttpSession(request, false);
/ Tomcat's
		if (httpSession != null)
		{
			String attributeName = getSessionAttributePrefix(request) + name;
wicket:wicket-testing:session
			httpSession.setAttribute(attributeName, value);
/t
WebSession(Session).bind() line: 271	
			// explicitly create a session
			id = store.getSessionId(request, true);
			// bind it
			store.bind(request, this);
/d
/t
LinkOnlyStudyPage2(Page).onBeforeRender() line: 810	
		// If any of the components on page is not stateless, we need to bind the session
		// before we start rendering components, as then jsessionid won't be appended
		// for links rendered before first stateful component
		if (getSession().isTemporary() && !peekPageStateless())
		{
			getSession().bind();
/d
///////////////////////////////////////////
/ WICKET SESSION -> TOMCAT'S SESSION & WICKET SESSION IS BIND IN TOMCAT'S SESSION
/ Er is een Tomcat session create	, en de Wicket WebSession is bind in Tomcat's session	,

/ Dit gebeurt dus in onBeforeRender	,


/ Einde GET PAGE FROM ... 

/ GET PAGE IN MULTIPLE BROWSERS

/ als we Tomcat restart	, is het alsof dat niet is gebeurd, met ?2, ?3	, gaat gewoon door	, 
/ TODO
/ Als we redeploy	, begint alles opnieuw	,

/ we geven in chrome	,
http://localhost:9090/wicket-testing/

/ we geven in ff	,
http://localhost:9090/wicket-testing/

/ 13	. 

/ we komen in	,
RequestCycle.processRequest() line: 219	
			IRequestHandler handler = resolveRequestHandler();
/s
RequestCycle.resolveRequestHandler() line: 189	
		return requestMapper.mapRequest(request);
/s
	/**
	 * Searches the registered {@link IRequestMapper}s to find one that can map the {@link Request}.
	 * Each registered {@link IRequestMapper} is asked to provide its compatibility score. Then the
	 * mappers are asked to map the request in order depending on the provided compatibility
	 * score.
	 * <p>
	 * The mapper with highest compatibility score which can map the request is returned.
	 */
SystemMapper(CompoundRequestMapper).mapRequest(Request) line: 136	

/ eerst sorteren	, en dan de request handler bepalen	,

		List<MapperWithScore> list = new ArrayList<>(mappers.size());

		for (IRequestMapper mapper : mappers)
	mappers	CopyOnWriteArrayList<E>  (id=250)	
		array	Object[7]  (id=253)	
			[0]	BufferedResponseMapper  (id=224)	
			[1]	RestartResponseAtInterceptPageException$1  (id=258)	
			[2]	UrlResourceReferenceMapper  (id=260)	
			[3]	ResourceReferenceMapper  (id=262)	
			[4]	HomePageMapper  (id=265)	
			[5]	BookmarkableMapper  (id=268)	
			[6]	PageInstanceMapper  (id=272)	
		{
			int score = mapper.getCompatibilityScore(request);
			list.add(new MapperWithScore(mapper, score));
		}

		Collections.sort(list);

		if (LOG.isDebugEnabled())
		{
			logMappers(list, request.getUrl().toString());
		}

		for (MapperWithScore mapperWithScore : list)
		{
			IRequestMapper mapper = mapperWithScore.getMapper();
			IRequestHandler handler = mapper.mapRequest(request);
			if (handler != null)
			{
				return handler;


/ In meer detail	,
/c
/ stack trace	,

	HttpSessionStore.getSessionId(Request, boolean) line: 159	
		String id = null;
		HttpSession httpSession = getHttpSession(request, false);
null
		if (httpSession != null)
/ NEE
		else if (create)
/ NEE
		return id;
null

	HttpSessionStore.lookup(Request) line: 198	
->		String sessionId = getSessionId(request, false);
		if (sessionId != null)
		{
			return (Session)getAttribute(request, Session.SESSION_ATTRIBUTE_NAME);
/TODO ( Waarom eerst sessionId, != null, en in dat geval pas getAttribute(request, ...)	, waarom niet direct	?


	BufferedResponseMapper.getSessionId() line: 59	
			ISessionStore sessionStore = Application.get().getSessionStore();
			IRequestCycle requestCycle = RequestCycle.get();
->			Session session = sessionStore.lookup(requestCycle.getRequest());

	BufferedResponseMapper.hasBufferedResponse(Url) line: 71	
/=
	protected boolean hasBufferedResponse(Url url)
/ url heeft GEEN ?0	, 
		String sessionId = getSessionId();

	BufferedResponseMapper.getCompatibilityScore(Request) line: 144	
		if (hasBufferedResponse(request.getUrl()))

	SystemMapper(CompoundRequestMapper).mapRequest(Request) line: 136	
		for (IRequestMapper mapper : mappers)
			int score = mapper.getCompatibilityScore(request);
mapper	BufferedResponseMapper  (id=224)	


/ 13	. 

/ we geven /c's  naar HomePageMapper	, bij request handler bepaling, de compabilityscore gaan we voorbij	,

/c
	HomePageMapper(MountedMapper).parseRequest(Request) line: 131	
		Url url = request.getUrl();

		// when redirect to buffer/render is active and redirectFromHomePage returns true
		// check mounted class against the home page class. if it matches let wicket redirect
		// to the mounted URL
		if (redirectFromHomePage() && checkHomePage(url))
/ JA
/ See beneden	,
		{
			return new UrlInfo(null, getContext().getHomePageClass(), newPageParameters());

	HomePageMapper.parseRequest(Request) line: 84	
		return super.parseRequest(request);

	HomePageMapper(AbstractBookmarkableMapper).mapRequest(Request) line: 346	
		UrlInfo urlInfo = parseRequest(request);

	SystemMapper(CompoundRequestMapper).mapRequest(Request) line: 150	
		List<MapperWithScore> list = new ArrayList<>(mappers.size());

		for (IRequestMapper mapper : mappers)
		{
			int score = mapper.getCompatibilityScore(request);
/ (*)
			list.add(new MapperWithScore(mapper, score));
		}

		Collections.sort(list);

		if (LOG.isDebugEnabled())
		{
			logMappers(list, request.getUrl().toString());
		}

		for (MapperWithScore mapperWithScore : list)
		{
			IRequestMapper mapper = mapperWithScore.getMapper();
->			IRequestHandler handler = mapper.mapRequest(request);

/ we zijn nu bij ->
/ Bij (*) waren we net	. 
/ Eerst worden de mappers sorted op compatability 	, 
/ TODO
list	ArrayList<E>  (id=157)	
	elementData	Object[7]  (id=216)	
		[0]	CompoundRequestMapper$MapperWithScore  (id=209)	
			compatibilityScore	0	
			mapper	BufferedResponseMapper  (id=152)	
		[1]	CompoundRequestMapper$MapperWithScore  (id=213)	
			compatibilityScore	0	
			mapper	RestartResponseAtInterceptPageException$1  (id=189)	
		[2]	CompoundRequestMapper$MapperWithScore  (id=214)	
		[3]	CompoundRequestMapper$MapperWithScore  (id=218)	
			compatibilityScore	0	
			mapper	PageInstanceMapper  (id=207)	
		[4]	CompoundRequestMapper$MapperWithScore  (id=219)	
			compatibilityScore	-1	
			mapper	ResourceReferenceMapper  (id=195)	
		[5]	CompoundRequestMapper$MapperWithScore  (id=220)	
			compatibilityScore	-2147483647	
			mapper	HomePageMapper  (id=199)	
		[6]	CompoundRequestMapper$MapperWithScore  (id=221)	
			compatibilityScore	-2147483648	
			mapper	UrlResourceReferenceMapper  (id=193)	
	size	7	

/s
HomePageMapper(AbstractBookmarkableMapper).mapRequest(Request) line: 346	
		UrlInfo urlInfo = parseRequest(request);
...
/s
HomePageMapper(MountedMapper).parseRequest(Request) line: 131	

		Url url = request.getUrl();

		// when redirect to buffer/render is active and redirectFromHomePage returns true
		// check mounted class against the home page class. if it matches let wicket redirect
		// to the mounted URL
		if (redirectFromHomePage() && checkHomePage(url))
/s
	/**
	 * If this method returns <code>true</code> and application home page class is same as the class
	 * mounted with this encoder, request to home page will result in a redirect to the mounted
	 * path.
	 * 
	 * @return whether this encode should respond to home page request when home page class is same
	 *         as mounted class.
	 */
HomePageMapper(MountedMapper).redirectFromHomePage() line: 245	
		return true;
/t
/s
	/**
	 * Check if the URL is for home page and the home page class match mounted class. If so,
	 * redirect to mounted URL.
	 * 
	 * @param url
	 * @return request handler or <code>null</code>
	 */
HomePageMapper(MountedMapper).checkHomePage(Url) line: 224	
		if (url.getSegments().isEmpty() && url.getQueryParameters().isEmpty())
		{
			// this is home page
			if (getPageClass().equals(getContext().getHomePageClass()))
/ JA
			{
				return true;
/ want	,
/s
HomePageMapper(MountedMapper).getPageClass() line: 268	
		return pageClassProvider.get();
/s
SystemMapper$HomePageProvider<C>.get() line: 98	
			return (Class<C>) application.getHomePage();

/ en die andere	, getContext().getHomePageClass() doet dit ook	, 
/ TODO

/t
HomePageMapper(MountedMapper).parseRequest(Request) line: 133	
		if (redirectFromHomePage() && checkHomePage(url))
/d
/ JA
		{
			return new UrlInfo(null, getContext().getHomePageClass(), newPageParameters());
/t
HomePageMapper(AbstractBookmarkableMapper).mapRequest(Request) line: 358	
		UrlInfo urlInfo = parseRequest(request);
/d
urlInfo	AbstractBookmarkableMapper$UrlInfo  (id=2170)	
	pageClass	Class<T> (my.test.own.LinkOnlyStudyPage2) (id=1207)	
	pageComponentInfo	null	
	pageParameters	null	

		if (urlInfo != null)
		{
			PageComponentInfo info = urlInfo.getPageComponentInfo();
null
			Class<? extends IRequestablePage> pageClass = urlInfo.getPageClass();
			PageParameters pageParameters = urlInfo.getPageParameters();

			if (info == null)
/ TODO( LATER HOE TE MAKEN EEN NIET BOOKMARKABLE PAGE, INFO != NULL)
			{
				// if there are is no page instance information
				// then this is a simple bookmarkable URL
				return processBookmarkable(pageClass, pageParameters);
/s
HomePageMapper(AbstractBookmarkableMapper).processBookmarkable(Class<IRequestablePage>, PageParameters) line: 238	
		PageProvider provider = new PageProvider(pageClass, pageParameters);
/s
PageProvider.<init>(Class<IRequestablePage>, PageParameters) line: 130	
		setPageClass(pageClass);
		if (pageParameters != null)
/ NEE
		{
			setPageParameters(pageParameters);
/ NIET
		}
		pageId = null;
		renderCount = null;
/t
HomePageMapper(AbstractBookmarkableMapper).processBookmarkable(Class<IRequestablePage>, PageParameters) line: 239	
		PageProvider provider = new PageProvider(pageClass, pageParameters);
/d
provider	PageProvider  (id=2194)	
	pageClass	Class<T> (my.test.own.LinkOnlyStudyPage2) (id=1207)	
	pageId	null	
	pageInstance	null	
	pageInstanceIsFresh	false	
	pageParameters	null	
	pageSource	null	
	renderCount	null	

		provider.setPageSource(getContext());
/s
HomePageMapper(AbstractComponentMapper).getContext() line: 47	
		return Application.get().getMapperContext();
/t
PageProvider.setPageSource(IPageSource) line: 340	
		this.pageSource = pageSource;
pageSource	DefaultMapperContext  (id=334)	
/t
HomePageMapper(AbstractBookmarkableMapper).processBookmarkable(Class<IRequestablePage>, PageParameters) line: 240	
		PageProvider provider = new PageProvider(pageClass, pageParameters);
		provider.setPageSource(getContext());
/d
		return new RenderPageRequestHandler(provider);
/s
RenderPageRequestHandler.<init>(IPageProvider) line: 90	
		this(pageProvider, RedirectPolicy.AUTO_REDIRECT);
/s
RenderPageRequestHandler.<init>(IPageProvider, RenderPageRequestHandler$RedirectPolicy) line: 115	
		this.redirectPolicy = redirectPolicy;
AUTO_REDIRECT
		this.pageProvider = pageProvider;

		if (pageProvider.hasPageInstance())
/ NEE
		{
			if (Session.exists())
/ NIET
			{
				// WICKET-5499
				Session.get().getPageManager().touchPage(pageProvider.getPageInstance());
/ NIET

/t
SystemMapper(CompoundRequestMapper).mapRequest(Request) line: 153	
		for (MapperWithScore mapperWithScore : list)
		{
			IRequestMapper mapper = mapperWithScore.getMapper();
MountedMapper [mountSegments=]
			IRequestHandler handler = mapper.mapRequest(request);
org.apache.wicket.core.request.handler.RenderPageRequestHandler@3eda6849
			if (handler != null)
			{
				return handler;
/t
RequestCycle.processRequest() line: 220	
			IRequestHandler handler = resolveRequestHandler();
/d
org.apache.wicket.core.request.handler.RenderPageRequestHandler@3eda6849

/ 13	. 

/ we komen in respond vlak voor render in de isPageStateless, de page wordt daartoe create	,

/c
	LinkOnlyStudyPage2(Component).<init>(String, IModel<?>) line: 683	
	LinkOnlyStudyPage2(MarkupContainer).<init>(String, IModel<?>) line: 120	
	LinkOnlyStudyPage2(Page).<init>(PageParameters, IModel<?>) line: 170	
	LinkOnlyStudyPage2(Page).<init>() line: 134	
	LinkOnlyStudyPage2(WebPage).<init>() line: 76	
	LinkOnlyStudyPage2.<init>(PageParameters) line: 25	
	NativeConstructorAccessorImpl.newInstance0(Constructor, Object[]) line: not available [native method]	
	NativeConstructorAccessorImpl.newInstance(Object[]) line: 57	
	DelegatingConstructorAccessorImpl.newInstance(Object[]) line: 45	
	Constructor<T>.newInstance(Object...) line: 526	
	DefaultPageFactory.newPage(Constructor<C>, PageParameters) line: 171	
	DefaultPageFactory.newPage(Class<C>) line: 76	
	DefaultMapperContext.newPageInstance(Class<IRequestablePage>, PageParameters) line: 102	
	PageProvider.resolvePageInstance(Integer, Class<IRequestablePage>, PageParameters, Integer) line: 268	
	PageProvider.getPageInstance() line: 166	
	WebPageRenderer(PageRenderer).getPage() line: 78	
	WebPageRenderer.isPageStateless() line: 287	
	WebPageRenderer.shouldRenderPageAndWriteResponse(RequestCycle, Url, Url) line: 329	

		return (compatibleProtocols(currentUrl.getProtocol(), targetUrl.getProtocol())) &&
				(neverRedirect(getRedirectPolicy())
			|| ((isOnePassRender() && notForcedRedirect(getRedirectPolicy())) || (targetUrl
				.equals(currentUrl) && notNewAndNotStatelessPage(isNewPageInstance(),
				isPageStateless()))) || (targetUrl.equals(currentUrl) && isRedirectToRender())
			|| (shouldPreserveClientUrl(cycle) && notForcedRedirect(getRedirectPolicy())));

	WebPageRenderer.respond(RequestCycle) line: 193	
->		if (shouldRenderPageAndWriteResponse(requestCycle, currentUrl, targetUrl))
/ NEE
		else
/ JA
			..
			Url beforeRenderUrl = requestCycle.mapUrlFor(getRenderPageRequestHandler());
			// redirect to buffer
			BufferedWebResponse response = renderPage(beforeRenderUrl, requestCycle);


	RenderPageRequestHandler.respond(IRequestCycle) line: 175	

		PageRenderer renderer = Application.get().getPageRendererProvider().get(this);
org.apache.wicket.request.handler.render.WebPageRenderer@323b082b
		renderer.respond((RequestCycle)requestCycle);

	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 837	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
		try
		{
			respond(handler);

	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
			IRequestHandler handler = resolveRequestHandler();
/d
			if (handler != null)
			{
->				execute(handler);

/ we gaan debug	,
/s
LinkOnlyStudyPage2(Component).<init>(String, IModel<?>) line: 683	
/=
	public Component(final String id, final IModel<?> model)
id=null
model=null
		setId(id);
		init();
/s
LinkOnlyStudyPage2(Page).init() line: 708	
		// Set versioning of page based on default
		setVersioned(getApplication().getPageSettings().getVersionPagesByDefault());
true
		// All Pages are born dirty so they get clustered right away
		dirty(true);
/s
LinkOnlyStudyPage2(WebPage).dirty(boolean) line: 324	

		super.dirty(isInitialization);
/s
LinkOnlyStudyPage2(Page).dirty(boolean) line: 278	
		final IPageManager pageManager = getSession().getPageManager();
/s
LinkOnlyStudyPage2(Component).getSession() line: 1827	
		return Session.get();
/s
Session.get() line: 169	
		Session session = ThreadContext.getSession();
null
		if (session != null)
		else
		{
			return Application.get().fetchCreateAndSetSession(RequestCycle.get());
/s
WicketApplication(Application).fetchCreateAndSetSession(RequestCycle) line: 1679	
		Session session = getSessionStore().lookup(requestCycle.getRequest());
null
/ TODO
		if (session == null)
		{
			session = newSession(requestCycle.getRequest(), requestCycle.getResponse());
org.apache.wicket.protocol.http.WebSession@3afc5c94
			ThreadContext.setSession(session);
			internalGetPageManager().newSessionCreated();
/s
PageStoreManager(AbstractPageManager).newSessionCreated() line: 93	
this	PageStoreManager  (id=2253)	
/ Is er maar 1 PageStoreManager	, is deze created toen we in Chrome http://localhost:9090/wicket-testing deden	?
/ TODO
		getRequestAdapter().newSessionCreated();
/s
PageStoreManager(AbstractPageManager).getRequestAdapter() line: 64	
		RequestAdapter adapter = (RequestAdapter)getContext().getRequestData();
null
/ want	,
/s
DefaultPageManagerContext.getRequestData() line: 52	

		RequestCycle requestCycle = RequestCycle.get();
		return requestCycle.getMetaData(requestCycleMetaDataKey);
/ eerder	,
	private static final MetaDataKey<Object> requestCycleMetaDataKey = new MetaDataKey<Object>()
/t
PageStoreManager(AbstractPageManager).getRequestAdapter() line: 65	
		RequestAdapter adapter = (RequestAdapter)getContext().getRequestData();
/d
null
		if (adapter == null)
		{
			adapter = newRequestAdapter(getContext());
/s
PageStoreManager.newRequestAdapter(IPageManagerContext) line: 412	
		return new PersistentRequestAdapter(context);
/t
PageStoreManager(AbstractPageManager).getRequestAdapter() line: 68	
			adapter = newRequestAdapter(getContext());
/d
org.apache.wicket.page.PageStoreManager$PersistentRequestAdapter@45e6efdc

			getContext().setRequestData(adapter);
/s
DefaultPageManagerContext.setRequestData(Object) line: 89	
/=
	public void setRequestData(final Object data)
data	PageStoreManager$PersistentRequestAdapter  (id=2283)	
	context	DefaultPageManagerContext  (id=2257)	
	this$0	PageStoreManager  (id=2253)	
	touchedPages	ArrayList<E>  (id=2287)	
[]
		RequestCycle requestCycle = RequestCycle.get();
		requestCycle.setMetaData(requestCycleMetaDataKey, data);
/t
PageStoreManager(AbstractPageManager).newSessionCreated() line: 93	
		getRequestAdapter().newSessionCreated();
/pd
/s
PageStoreManager$PersistentRequestAdapter.newSessionCreated() line: 387	

			// if the session is not temporary bind a session entry to it
			if (getSessionId() != null)
/s
PageStoreManager$PersistentRequestAdapter(RequestAdapter).getSessionId() line: 110	
		return context.getSessionId();
/s
DefaultPageManagerContext.getSessionId() line: 75	
		return Session.get().getId();
/s
Session.get() line: 165	
		Session session = ThreadContext.getSession();
		if (session != null)
		{
			return session;
/t
DefaultPageManagerContext.getSessionId() line: 75	
		return Session.get().getId();
/pd
/s
WebSession(Session).getId() line: 382	
		if (id == null)
		{
			updateId();
/s
WebSession(Session).updateId() line: 398	
		RequestCycle requestCycle = RequestCycle.get();
		if (requestCycle != null)
		{
			id = getSessionStore().getSessionId(requestCycle.getRequest(), false);
/s
WebSession(Session).getSessionStore() line: 783	
		if (sessionStore == null)
/ JA
		{
			sessionStore = getApplication().getSessionStore();
/ Deze is er al	,
/ TODO
/t
WebSession(Session).updateId() line: 398	
			id = getSessionStore().getSessionId(requestCycle.getRequest(), false);
/pd
/s
HttpSessionStore.getSessionId(Request, boolean) line: 157	
		String id = null;

		HttpSession httpSession = getHttpSession(request, false);
/s
HttpSessionStore.getHttpSession(Request, boolean) line: 95	
		return getHttpServletRequest(request).getSession(create);
/t
HttpSessionStore.getSessionId(Request, boolean) line: 160	
		String id = null;
		HttpSession httpSession = getHttpSession(request, false);
null
/ Tomcat session	,
		else if (create)
/ NEE
		return id;
null
/t
WebSession(Session).getId() line: 385	
		{
			updateId();
/d
			// we have one?
			if (id != null)
/ NEE
		return id;
null
/t
PageStoreManager$PersistentRequestAdapter.newSessionCreated() line: 391	
			if (getSessionId() != null)
/ NEE
/t
WicketApplication(Application).fetchCreateAndSetSession(RequestCycle) line: 1682	
			session = newSession(requestCycle.getRequest(), requestCycle.getResponse());
			ThreadContext.setSession(session);
			internalGetPageManager().newSessionCreated();
/d
		return session;
/ Wicket session	,
/ MORGENOCHTEND , stop in 
LinkOnlyStudyPage2(Component).<init>(String, IModel<?>) line: 685	
/ en ga init() in	,

/ Later	, WH session created	, 
/s
	WebSession(Session).bind() line: 262	
	LinkOnlyStudyPage2(Page).onBeforeRender() line: 808	
	LinkOnlyStudyPage2(Component).internalBeforeRender() line: 949	
	LinkOnlyStudyPage2(Component).beforeRender() line: 1017	
	LinkOnlyStudyPage2(Component).internalPrepareForRender(boolean) line: 2207	
	LinkOnlyStudyPage2(Page).internalPrepareForRender(boolean) line: 242	
	LinkOnlyStudyPage2(Component).render() line: 2296	
	LinkOnlyStudyPage2(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 837	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	



/ Einde TMP

/ we zien nog steeds niet dat ser. page wordt deser	,
/ TODO


/ Einde GET PAGE IN MULTIPLE BROWSERS

/ WICKET SER PAGES

/ 7. 	

/ we zien dat steeds wordt called,	
DefaultPageFactory.newPage(Class<C>) line: 65	

/ 7	.

/ ook wordt		, als de wicket session wordt create	,
WicketApplication(Application).fetchCreateAndSetSession(RequestCycle) line: 1681	
			session = newSession(requestCycle.getRequest(), requestCycle.getResponse());
/ wicket session	,
			ThreadContext.setSession(session);
			internalGetPageManager().newSessionCreated();
...
/s
DefaultPageManagerProvider.get(IPageManagerContext) line: 56	
		IDataStore dataStore = newDataStore();

		StoreSettings storeSettings = getStoreSettings();

		if (dataStore.canBeAsynchronous())
		{
			int capacity = storeSettings.getAsynchronousQueueCapacity();
			dataStore = new AsynchronousDataStore(dataStore, capacity);
		}

		IPageStore pageStore = newPageStore(dataStore);
		return new PageStoreManager(application.getName(), pageStore, pageManagerContext);

/ 7	.

Application$3.onDetach(RequestCycle) line: 1751	
				if (Session.exists())
/ TODO (WH Tomcat session)
				{
					Session.get().getPageManager().commitRequest();
...
/s
PageStoreManager$PersistentRequestAdapter.storeTouchedPages(List<IManageablePage>) line: 396	
			if (!touchedPages.isEmpty())
			{
				SessionEntry entry = getSessionEntry(true);
				entry.setSessionCache(touchedPages);
				for (IManageablePage page : touchedPages)
				{
					// WICKET-5103 use the same sessionId as used in SessionEntry#getPage()
					pageStore.storePage(entry.sessionId, page);
/s
DefaultPageStore.storePage(String, IManageablePage) line: 61	
		SerializedPage serialized = createSerializedPage(sessionId, page);
/ (*)
		if (serialized != null)
		{
			int pageId = page.getPageId();
			pagesCache.storePage(sessionId, pageId, serialized);
/ (**)
/ = 2nd level cache	,
			storePageData(sessionId, pageId, serialized.getData());

/ (*)
/s
DefaultPageStore.createSerializedPage(String, IManageablePage) line: 281	
		byte[] data = serializePage(page);
		if (data != null)
		{
			serializedPage = new SerializedPage(sessionId, page.getPageId(), data);

/ (**)
DefaultPageStore$SerializedPagesCache.storePage(String, Integer, DefaultPageStore$SerializedPage) line: 427	

/c
AsynchronousDataStore.storeData(String, int, byte[]) line: 216	

/ 7	. 

/ we geven nogmaals Enter in de url field	, 
/c
	DefaultMapperContext.getPageInstance(int) line: 113	
		IManageablePage manageablePage = Session.get().getPageManager().getPage(pageId);

	PageProvider.getStoredPage(int) line: 296	
		IRequestablePage storedPageInstance = getPageSource().getPageInstance(pageId);

	PageProvider.isNewPageInstance() line: 208	
			IRequestablePage storedPageInstance = getStoredPage(pageId);

	HomePageMapper(AbstractBookmarkableMapper).processHybrid(PageInfo, Class<IRequestablePage>, PageParameters, Integer) line: 261	
		PageProvider provider = new PageProvider(pageInfo.getPageId(), pageClass, pageParameters,
			renderCount);
		provider.setPageSource(getContext());
		if (provider.isNewPageInstance() && !getRecreateMountedPagesAfterExpiry())

	HomePageMapper(AbstractBookmarkableMapper).mapRequest(Request) line: 365	
			else if (info.getPageInfo().getPageId() != null && info.getComponentInfo() == null)
			{
				// if there is page instance information in the URL but no component and listener
				// interface then this is a hybrid URL - we need to try to reuse existing page
				// instance
				return processHybrid(info.getPageInfo(), pageClass, pageParameters, null);

	SystemMapper(CompoundRequestMapper).mapRequest(Request) line: 150	
		for (MapperWithScore mapperWithScore : list)
		{
			IRequestMapper mapper = mapperWithScore.getMapper();
			IRequestHandler handler = mapper.mapRequest(request);

	RequestCycle.resolveRequestHandler() line: 189	
		return requestMapper.mapRequest(request);

	RequestCycle.processRequest() line: 219	
->			IRequestHandler handler = resolveRequestHandler();
			if (handler != null)
			{
				execute(handler);
/ straks pas	,

	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/s
DefaultMapperContext.getPageInstance(int) line: 113	
		IManageablePage manageablePage = Session.get().getPageManager().getPage(pageId);
session	WebSession  (id=441)	
	clientInfo	null	
	dirty	false	
	feedbackMessages	FeedbackMessages  (id=442)	
	id	"A97A10811AA59DFECF8E06BC4D12633E" (id=444)	
	locale	AtomicReference<V>  (id=445)	
	metaData	null	
	pageAccessSynchronizer	Session$PageAccessSynchronizerProvider  (id=447)	
	pageId	AtomicInteger  (id=449)	
	sequence	AtomicInteger  (id=452)	
	sessionInvalidated	false	
	sessionStore	HttpSessionStore  (id=160)	
	style	AtomicReference<V>  (id=453)	
	temporarySessionAttributes	null	
/s
PageAccessSynchronizer$2.getPage(int) line: 242	
/ TODO
					page = super.getPage(pageId);
/s
PageAccessSynchronizer$2(PageManagerDecorator).getPage(int) line: 50	
		return delegate.getPage(id);
/s
PageStoreManager(AbstractPageManager).getPage(int) line: 82	
		IManageablePage page = getRequestAdapter().getPage(id);
/s
PageStoreManager$PersistentRequestAdapter.getPage(int) line: 346	
/ TODO
			// try to get session entry for this session
			SessionEntry entry = getSessionEntry(false);
/s
PageStoreManager$PersistentRequestAdapter.getSessionEntry(boolean) line: 372	
			String attributeName = getAttributeName();
wicket:persistentPageManagerData - wicket-testing
			SessionEntry entry = (SessionEntry)getSessionAttribute(attributeName);
/s
PageStoreManager$PersistentRequestAdapter(RequestAdapter).getSessionAttribute(String) line: 100	
		return context.getSessionAttribute(key);
/s
DefaultPageManagerContext.getSessionAttribute(String) line: 66	
		return Session.get().getAttribute(key);
/s
WebSession(Session).getAttribute(String) line: 731	
		if (!isTemporary())
		{
			RequestCycle cycle = RequestCycle.get();
			if (cycle != null)
			{
				return getSessionStore().getAttribute(cycle.getRequest(), name);
/s
HttpSessionStore.getAttribute(Request, String) line: 261	
		HttpSession httpSession = getHttpSession(request, false);
/ tomcat's session	,
		if (httpSession != null)
		{
			return (Serializable)httpSession.getAttribute(getSessionAttributePrefix(request) + name);
/s
StandardSessionFacade.getAttribute(String) line: 108	
        return session.getAttribute(name);
/ Tomcat!
/ name=wicket:wicket-testing:wicket:persistentPageManagerData - wicket-testing
...
/t
PageStoreManager$PersistentRequestAdapter.getSessionEntry(boolean) line: 374	
			String attributeName = getAttributeName();
			SessionEntry entry = (SessionEntry)getSessionAttribute(attributeName);
entry	PageStoreManager$SessionEntry  (id=494)	
	afterReadObject	null	
	applicationName	"wicket-testing" (id=281)	
	sessionCache	ArrayList<E>  (id=496)	
		elementData	Object[1]  (id=498)	
			[0]	LinkOnlyStudyPage2  (id=500)	
		modCount	0	
		size	1	
	sessionId	"A97A10811AA59DFECF8E06BC4D12633E" (id=444)	

/ dus de hele page zit in de tomcat session!

/ In PageStoreManager$PersistentRequestAdapter wordt dus de page in de (tomcat) session stored	, 
/ TODO



/ Einde WICKET SER PAGES

/ WICKET BACK BUTTON 

/ 7	. 

/ losse flodders	,

adapter	PageStoreManager$PersistentRequestAdapter  (id=532)	

        return session.getAttribute(name);
name=wicket:wicket-testing:wicket:persistentPageManagerData - wicket-testing

/ 7	. 

/ hij vindt in session entry	, maar de page id klopt niet	, 
/ daarna bij (**) gaat hij ser pages 	, 

/ we komen in 	,

/s
	PageStoreManager$SessionEntry.findPage(int) line: 138	
			for (IManageablePage p : sessionCache)
			{
				if (p.getPageId() == id)
/ NEE
			}
			return null;

	PageStoreManager$SessionEntry.getPage(int) line: 195	
			// try to find page with same id
			if (sessionCache != null)
			{
				IManageablePage page = findPage(id);
				if (page != null)
/ NEE
			// not found, ask pagestore for the page
			return getPageStore().getPage(sessionId, id);
/ (**)


	PageStoreManager$PersistentRequestAdapter.getPage(int) line: 357	
			// try to get session entry for this session
			SessionEntry entry = getSessionEntry(false);
/ (*)
			if (entry != null)
			{
				return entry.getPage(id);
id=0

	PageStoreManager(AbstractPageManager).getPage(int) line: 82	
	PageAccessSynchronizer$2(PageManagerDecorator).getPage(int) line: 50	
	PageAccessSynchronizer$2.getPage(int) line: 246	
	DefaultMapperContext.getPageInstance(int) line: 113	
	PageProvider.getStoredPage(int) line: 296	
	PageProvider.isNewPageInstance() line: 208	
	HomePageMapper(AbstractBookmarkableMapper).processHybrid(PageInfo, Class<IRequestablePage>, PageParameters, Integer) line: 261	
	HomePageMapper(AbstractBookmarkableMapper).mapRequest(Request) line: 365	
	SystemMapper(CompoundRequestMapper).mapRequest(Request) line: 150	
	RequestCycle.resolveRequestHandler() line: 189	
	RequestCycle.processRequest() line: 219	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ bij (*)
entry	PageStoreManager$SessionEntry  (id=542)	
	applicationName	"wicket-testing" (id=501)	
	sessionCache	ArrayList<E>  (id=546)	
[[Page class = my.test.own.LinkOnlyStudyPage2, id = 1, render count = 1]]

/ bij (**)
			// not found, ask pagestore for the page
			return getPageStore().getPage(sessionId, id);
/s
DefaultPageStore(AbstractCachingPageStore<P>).getPage(String, int) line: 58	
		P fromCache = pagesCache.getPage(sessionId, pageId);
/s
DefaultPageStore$SerializedPagesCache.getPage(String, Integer) line: 389	
			SerializedPage result = null;
			if (maxSize > 0)
/ maxSize=50
/ TODO (set op 0)
				SerializedPage sample = new SerializedPage(sessionId, pageId, null);

				for (Iterator<SoftReference<SerializedPage>> i = cache.iterator(); i.hasNext();)
				{
					SoftReference<SerializedPage> ref = i.next();
					SerializedPage entry = ref.get();
					if (sample.equals(entry))
/ NEE (1ste)
/ JA (2de)
					{
						i.remove();
						result = entry;
						break;

				if (result != null)
				{
					// move to top
					internalStore(result);
result	DefaultPageStore$SerializedPage  (id=619)	
	data	(id=623)	
/ ser bytes	,
	pageId	0	
	sessionId	"13CB93A8B36C873579F23222C1B77767" (id=547)	

/s
DefaultPageStore$SerializedPagesCache.internalStore(DefaultPageStore$SerializedPage) line: 450	
			cache.push(new SoftReference<>(page));
			while (cache.size() > maxSize)
/ NEE

/ we hadden hem zojuist eruit gehaald, 	maar nu zetten we hem er weer in	,

/t
DefaultPageStore(AbstractCachingPageStore<P>).getPage(String, int) line: 59	
		P fromCache = pagesCache.getPage(sessionId, pageId);
/d
fromCache	DefaultPageStore$SerializedPage  (id=619)	
	data	(id=623)	
	pageId	0	
	sessionId	"13CB93A8B36C873579F23222C1B77767" (id=547)	
		if (fromCache != null)
		{
			return convertToPage(fromCache);
/s
DefaultPageStore.convertToPage(Object) line: 73	
		else if (object instanceof SerializedPage)
		{
			SerializedPage page = (SerializedPage)object;
			byte data[] = page.getData();
			if (data == null)
			{
				data = getPageData(page.getSessionId(), page.getPageId());
			}
			if (data != null)
			{
				return deserializePage(data);
/s
DefaultPageStore(AbstractPageStore).deserializePage(byte[]) line: 152	
		return (IManageablePage) pageSerializer.deserialize(data);
/s
JavaSerializer.deserialize(byte[]) line: 104	

		final ByteArrayInputStream in = new ByteArrayInputStream(data);
		ObjectInputStream ois = null;
		try
		{
			Application oldApplication = ThreadContext.getApplication();
			try
			{
				ois = newObjectInputStream(in);
				String applicationName = (String)ois.readObject();
wicket-testing
				if (applicationName != null)
				{
					Application app = Application.get(applicationName);
					if (app != null)
					{
						ThreadContext.setApplication(app);
					}
				}
				return ois.readObject();
...
/t
PageStoreManager(AbstractPageManager).getPage(int) line: 83	
		IManageablePage page = getRequestAdapter().getPage(id);
/d
page	LinkOnlyStudyPage2  (id=707)	












/ Einde WICKET BACK BUTTON 

/ WICKET AJAX LINK

/ 7	. 

/ ws wicket7_2
/ project wicket-testing

$ less AjaxLinkStudy2Page.java

public class AjaxLinkStudy2Page extends WebPage{
	
	private String text;
	private int counter;

	public AjaxLinkStudy2Page() {
		
		IModel<String>model2=new PropertyModel<String>(this, "text");
		final Label textl=new Label("text",model2);
		textl.setOutputMarkupId(true);
		add(textl);
		
		IModel<Integer>model3=new PropertyModel<Integer>(this, "counter");
		final Label counterl=new Label("counter",model3);
		counterl.setOutputMarkupId(true);
		add(counterl);

		AjaxLink<Void>ajaxLink=new AjaxLink<Void>("ajaxlink") {
			
			private static final long serialVersionUID = 1L;

			@Override
			public void onClick(AjaxRequestTarget target) {
				text="["+text+"]";
				counter+=13;
				target.add(textl);
				target.add(counterl);
				
			}
		};
		add(ajaxLink);

/ we zien in devtools	,

<?xml version="1.0" encoding="UTF-8"?><ajax-response><component id="text2"  encoding="wicket1" ><![CDATA[<span wicket:id="text" id="text2" wicketpath="text">[[null]^]^</span>]]></component><component id="counter3" ><![CDATA[<span wicket:id="counter" id="counter3" wicketpath="counter">26</span>]]></component></ajax-response>


/ 13.	 

/ HIER HIER HIER

/ we kunnen ook een gewone link	,

$ less AjaxLinkStudy2Page.java

public class AjaxLinkStudy2Page extends WebPage{
	
	private String text;
	private int counter;
	
	public AjaxLinkStudy2Page() {
		
		IModel<String>model2=new PropertyModel<String>(this, "text");
		final Label textl=new Label("text",model2);
		textl.setOutputMarkupId(true);
		add(textl);
		
		IModel<Integer>model3=new PropertyModel<Integer>(this, "counter");
		final Label counterl=new Label("counter",model3);
		counterl.setOutputMarkupId(true);
		add(counterl);

		Link<Void >ajaxLink=new Link<Void>("ajaxlink") {
			@Override
			public void onClick() {
				text="["+text+"]";
				counter+=13;
				
			}
		};
		add(ajaxLink);

/ we zien als we op de link click in devtools	, een hele nieuwe page loaded	,

<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
		
		<a wicket:id="ajaxlink" wicketpath="ajaxlink" href="./?0-2.ILinkListener-ajaxlink">[Ajax Link]</a>
		<span wicket:id="text" id="text1" wicketpath="text">[[null]]</span>
		<span wicket:id="counter" id="counter2" wicketpath="counter">26</span>	
</body>
</html> 


/ Einde WICKET AJAX LINK

/ DEBUG WICKET AJAX LINK

/ 7. 	

/s
	AjaxLinkStudy2Page.<init>() line: 37	
	...
	DefaultPageFactory.newPage(Constructor<C>, PageParameters) line: 175	
	DefaultPageFactory.newPage(Class<C>) line: 67	
	DefaultMapperContext.newPageInstance(Class<IRequestablePage>, PageParameters) line: 102	
	PageProvider.resolvePageInstance(Integer, Class<IRequestablePage>, PageParameters, Integer) line: 268	
	PageProvider.getPageInstance() line: 166	
	WebPageRenderer(PageRenderer).getPage() line: 78	
	WebPageRenderer.isPageStateless() line: 287	
	WebPageRenderer.shouldRenderPageAndWriteResponse(RequestCycle, Url, Url) line: 329	
		return (compatibleProtocols(currentUrl.getProtocol(), targetUrl.getProtocol())) &&
				(neverRedirect(getRedirectPolicy())
			|| ((isOnePassRender() && notForcedRedirect(getRedirectPolicy())) || (targetUrl
				.equals(currentUrl) && notNewAndNotStatelessPage(isNewPageInstance(),
				isPageStateless()))) || (targetUrl.equals(currentUrl) && isRedirectToRender())
			|| (shouldPreserveClientUrl(cycle) && notForcedRedirect(getRedirectPolicy())));

	WebPageRenderer.respond(RequestCycle) line: 193	
->		if (shouldRenderPageAndWriteResponse(requestCycle, currentUrl, targetUrl))
		else
		{
			// force creation of possible stateful page to get the final target url
			getPage();

			Url beforeRenderUrl = requestCycle.mapUrlFor(getRenderPageRequestHandler());

			// redirect to buffer
			BufferedWebResponse response = renderPage(beforeRenderUrl, requestCycle);

	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 837	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ 7	. 

/ render link	,
/ stack trace	,
/s
	AjaxLinkStudy2Page(MarkupContainer).renderNext(MarkupStream) line: 1379	

	AjaxLinkStudy2Page(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1601	
		while (markupStream.hasMore())
		{
			// Remember where we are
			final int index = markupStream.getCurrentIndex();

			// Render the markup element
->			boolean rawMarkup = renderNext(markupStream);

	AjaxLinkStudy2Page(Page).onRender() line: 879	
		renderAll(markupStream, null);

	AjaxLinkStudy2Page(WebPage).onRender() line: 142	
		super.onRender();

	AjaxLinkStudy2Page(Component).internalRender() line: 2372	
				onRender();

	AjaxLinkStudy2Page(Component).render() line: 2300	
				internalPrepareForRender(true);
			}
			// Do the render
->			internalRender();

	AjaxLinkStudy2Page(Page).renderPage() line: 1018	
		try
		{
			++renderCount;
			render();

	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
		try
		{
			requestCycle.setResponse(response);
->			requestablePage.renderPage();

	WebPageRenderer.respond(RequestCycle) line: 236	
		else
		{
			// force creation of possible stateful page to get the final target url
			getPage();

			Url beforeRenderUrl = requestCycle.mapUrlFor(getRenderPageRequestHandler());

			// redirect to buffer
->			BufferedWebResponse response = renderPage(beforeRenderUrl, requestCycle);

	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
		PageRenderer renderer = Application.get().getPageRendererProvider().get(this);
		renderer.respond((RequestCycle)requestCycle);

	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 837	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ we gaan verder debug	,
/s
AjaxLinkStudy2Page(MarkupContainer).renderNext(MarkupStream) line: 1379	
this	AjaxLinkStudy2Page  (id=6765)	
			// Get element as tag
			final ComponentTag tag = (ComponentTag)element;
<a wicket:id="ajaxlink">

			// Get component id
			final String id = tag.getId();
"ajaxlink"
			// Get the component for the id from the given container
			Component component = get(id);
/s
AjaxLinkStudy2Page(MarkupContainer).get(String) line: 354	
		MarkupContainer container = this;
		// Get child by id
		Component child = container.children_get(id);
[AjaxLink [Component id = ajaxlink]]

/t
AjaxLinkStudy2Page(MarkupContainer).renderNext(MarkupStream) line: 1405	
			Component component = get(id);
/d
				component.render();
/s
AjaxLinkStudy2Page$1(Component).render() line: 2288	
				internalPrepareForRender(true);
/ NIET NU	,
			// Do the render
			internalRender();
/s
AjaxLinkStudy2Page$1(Component).internalRender() line: 2337	
		// Make sure there is a markup available for the Component
		IMarkupFragment markup = getMarkup();
markup	MarkupFragment  (id=6827)	
<a wicket:id="ajaxlink">[Ajax Link]</a>

		MarkupElement elem = markup.get(0);
elem	ComponentTag  (id=6792)	
<a wicket:id="ajaxlink">

				onRender();
/s
AjaxLinkStudy2Page$1(MarkupContainer).onRender() line: 1540	
		internalRenderComponent();
/s
AjaxLinkStudy2Page$1(Component).internalRenderComponent() line: 2513	
		// Call any tag handler
		onComponentTag(tag);
/s
AjaxLinkStudy2Page$1(AjaxLink<T>).onComponentTag(ComponentTag) line: 103	
		super.onComponentTag(tag);
/s
AjaxLinkStudy2Page$1(Component).onComponentTag(ComponentTag) line: 3887	
		if (Strings.isEmpty(componentPathAttributeName) == false)
/ JA
componentPathAttributeName="wicketpath"
		{
			String path = getPageRelativePath();
"ajaxlink"
			path = path.replace("_", "__");
			path = path.replace(':', '_');
			tag.put(componentPathAttributeName, path);

/t
AjaxLinkStudy2Page$1(AjaxLink<T>).onComponentTag(ComponentTag) line: 107	
		super.onComponentTag(tag);
/d
		if (isEnabledInHierarchy())
		{
			if (tagName.equalsIgnoreCase("a") 
/ JA
tagName=="a"
				|| tagName.equalsIgnoreCase("link") ||
				tagName.equalsIgnoreCase("area"))
			{
				// disable any href attr in markup
				tag.put("href", "javascript:;");

/t
AjaxLinkStudy2Page$1(Component).internalRenderComponent() line: 2516	
		// Call any tag handler
		onComponentTag(tag);
/d
			else
			{
				renderComponentTag(tag);
/s
AjaxLinkStudy2Page$1(Component).renderComponentTag(ComponentTag) line: 3974	
			// apply behaviors that are attached to the component tag.
			if (tag.hasBehaviors())
/ NEE

			// Apply behavior modifiers
			List<? extends Behavior> behaviors = getBehaviors();
/s
AjaxLinkStudy2Page$1(Component).getBehaviors() line: 4553	
		return getBehaviors(null);
/s
AjaxLinkStudy2Page$1(Component).getBehaviors(Class<M>) line: 3687	
		return new Behaviors(this).getBehaviors(type);
/s
Behaviors.getBehaviors(Class<M>) line: 88	
/=
	public <M extends Behavior> List<M> getBehaviors(Class<M> type)
type=null

component	AjaxLinkStudy2Page$1  (id=6815)	
[AjaxLink [Component id = ajaxlink]]

		for (int i = component.data_start(); i < len; i++)
		{
			Object obj = component.data_get(i);
obj	AjaxLink$1  (id=6851)	
obj	Behaviors$BehaviorIdList  (id=6859)	

			if (obj != null && obj instanceof Behavior)
/ JA
/ 1ste
			{
				if (type == null || type.isAssignableFrom(obj.getClass()))
/ JA
					subset.add((M)obj);
		return Collections.unmodifiableList(subset);

/t
AjaxLinkStudy2Page$1(Component).renderComponentTag(ComponentTag) line: 3993	
			// Apply behavior modifiers
			List<? extends Behavior> behaviors = getBehaviors();
/d
				for (Behavior behavior : behaviors)
				{
					// Components may reject some behavior components
					if (isBehaviorAccepted(behavior))
					{
						behavior.onComponentTag(this, tag);
/s
AjaxLink$1(AbstractAjaxBehavior).onComponentTag(Component, ComponentTag) line: 98	
this	AjaxLink$1  (id=6851)	
		onComponentTag(tag);
/ NIETS

/t
AjaxLinkStudy2Page$1(Component).renderComponentTag(ComponentTag) line: 4026	
				for (Behavior behavior : behaviors)
				{
					// Components may reject some behavior components
					if (isBehaviorAccepted(behavior))
					{
						behavior.onComponentTag(this, tag);
/d
			// Write the tag
			tag.writeOutput(getResponse(), !needToRenderTag(null),
				getMarkup().getMarkupResourceStream().getWicketNamespace());
/s
ComponentTag.writeOutput(Response, boolean, String) line: 723	
		response.write("<");
		response.write(getName());
/ we zien 	
	<a
		if (getAttributes().size() > 0)
		{
			for (String key : getAttributes().keySet())
key="wicket:id"
				if ((namespacePrefix == null) 
/ JA
				|| (key.startsWith(namespacePrefix) == false))
				{
					response.write(" ");
					response.write(key);
					CharSequence value = getAttribute(key);
key="wicket:id"
value="ajaxlink"
					// attributes without values are possible, e.g.' disabled'
					if (value != null)
					{
						response.write("=\"");
						value = Strings.escapeMarkup(value);
						response.write(value);
						response.write("\"");
/ we zien	,
		<a wicket:id="ajaxlink"

/ volgende	,
			for (String key : getAttributes().keySet())
key="id"
				if ((namespacePrefix == null) 
/ JA
				|| (key.startsWith(namespacePrefix) == false))
				{
					response.write(" ");
					response.write(key);
					CharSequence value = getAttribute(key);
key="id"
value="ajaxlink4"
					// attributes without values are possible, e.g.' disabled'
					if (value != null)
					{
						response.write("=\"");
						value = Strings.escapeMarkup(value);
						response.write(value);
						response.write("\"");
/ we zien	,
		<a wicket:id="ajaxlink" id="ajaxlink4"

/ volgende	,
			for (String key : getAttributes().keySet())
key="wicketpath"
				if ((namespacePrefix == null) 
/ JA
				|| (key.startsWith(namespacePrefix) == false))
				{
					response.write(" ");
					response.write(key);
					CharSequence value = getAttribute(key);
key="wicketpath"
value="ajaxlink"
					// attributes without values are possible, e.g.' disabled'
					if (value != null)
					{
						response.write("=\"");
						value = Strings.escapeMarkup(value);
						response.write(value);
						response.write("\"");
/ we zien	,
		<a wicket:id="ajaxlink" id="ajaxlink4" wicketpath="ajaxlink"

/ volgende	,
			for (String key : getAttributes().keySet())
key="href"
				if ((namespacePrefix == null) 
/ JA
				|| (key.startsWith(namespacePrefix) == false))
				{
					response.write(" ");
					response.write(key);
					CharSequence value = getAttribute(key);
key="href"
value="javascript:;"
					// attributes without values are possible, e.g.' disabled'
					if (value != null)
					{
						response.write("=\"");
						value = Strings.escapeMarkup(value);
						response.write(value);
						response.write("\"");
/ we zien	,
		<a wicket:id="ajaxlink" id="ajaxlink4" wicketpath="ajaxlink" href="javascript:;"

		response.write(">");
/t
AjaxLinkStudy2Page$1(Component).internalRenderComponent() line: 2557	

				renderComponentTag(tag);
/d
this	AjaxLinkStudy2Page$1  (id=6815)	
	data	Object[2]  (id=6826)	
		[0]	AjaxLink$1  (id=6851)	
		[1]	Behaviors$BehaviorIdList  (id=6859)	
/ TODO

/ we zien dus geen behavior in de HTML <a ...>
/ dat was in 1.4 wel zo	,
/ TODO

/ 13	. 

/ Maar we zien js 	,

<script type="text/javascript" >
/*<![CDATA[*/
Wicket.Event.add(window, "domready", function(event) { 
	Wicket.Ajax.ajax({"u":"./?1-1.IBehaviorListener.0-ajaxlink","c":"ajaxlink4","e":"click"});;
;});
/*]]>*/
</script>
</head>
<body>
		<a wicket:id="ajaxlink" id="ajaxlink4" wicketpath="ajaxlink" href="javascript:;">[Ajax Link]</a>

/ Als we de app deploy	, en we vragen de page voor de 1ste keer	,
/ TODO (Waarom alleen als we de page de 1ste keer vragen)	,
/ dan wordt de code die hierboven in de <head> staat exec,	

/s
jQuery.extend.Ajax.ajax (wicket-ajax-jqu…672000.js:1896)
			ajax: function(attrs) {
attrs: Object
c: "ajaxlink1"
e: "click"
u: "./?0-1.IBehaviorListener.0-ajaxlink"

				attrs.c = attrs.c || window;

(anonymous function) (?0:23)
jQuery.Callbacks.fire (jquery-1.11.1-v…672000.js:3119)
jQuery.Callbacks.self.fireWith (jquery-1.11.1-v…672000.js:3231)
jQuery.extend.ready (jquery-1.11.1-v…672000.js:3443)
completed (jquery-1.11.1-v…672000.js:3474)

/ 13	. 
/ Als we later op de link click	,
/s
(anonymous function) (wicket-ajax-jqu…672000.js:1905)
jQuery.event.dispatch (jquery-1.11.1-v…672000.js:4641)
jQuery.event.add.elemData.handle (jquery-1.11.1-v…672000.js:4309)

				jQuery.each(attrs.e, function (idx, evt) {
					Wicket.Event.add(attrs.c, evt, function (jqEvent, data) {
->						var call = new Wicket.Ajax.Call();
...
						else {
							call.ajax(attributes);
/s
Wicket.Ajax.Call.ajax (wicket-ajax-jqu…7672000.js:527)
			this._initializeDefaults(attrs);

			var res = Wicket.channelManager.schedule(attrs.ch, Wicket.bind(function () {
				this.doAjax(attrs);
			}, this));
/////////////////////////////////////////
/ we vallen in de server	, 
/s
	ServletWebRequest.<init>(HttpServletRequest, String, Url) line: 95	
		else
		{
			this.url = getContextRelativeUrl(httpServletRequest.getRequestURI(), filterPrefix);

	ServletWebRequest.<init>(HttpServletRequest, String) line: 82	
		this(httpServletRequest, filterPrefix, null);

	WicketApplication(WebApplication).newWebRequest(HttpServletRequest, String) line: 548	
		return new ServletWebRequest(servletRequest, filterPath);

	WicketApplication(WebApplication).createWebRequest(HttpServletRequest, String) line: 593	
		WebRequest webRequest = newWebRequest(servletRequest, filterPath);

	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 198	
				WebRequest webRequest = application.createWebRequest(httpServletRequest, filterPath);

	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
		processRequest(request, response, chain);

/ we gaan debug	,
/s
	ServletWebRequest.<init>(HttpServletRequest, String, Url) line: 95	
		else
		{
			this.url = getContextRelativeUrl(httpServletRequest.getRequestURI(), filterPrefix);
/s
ServletWebRequest.getContextRelativeUrl(String, String) line: 201	
			String query = httpServletRequest.getQueryString();
0-1.IBehaviorListener.0-ajaxlink&_=1455703145162

			if (!Strings.isEmpty(query))
			{
				url.append('?');
				url.append(query);

		return setParameters(Url.parse(url.toString(), getCharset(), false));
/s
Url.parse(CharSequence, Charset, boolean) line: 351	
			for (String s : queryArray)
			{
				if (Strings.isEmpty(s) == false)
				{
					result.parameters.add(parseQueryParameter(s, charset));
s="0-1.IBehaviorListener.0-ajaxlink"
s="_=1455703145162"

/t
WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 199	
				WebRequest webRequest = application.createWebRequest(httpServletRequest, filterPath);
/d
webRequest	ServletWebRequest  (id=9140)	
	url	Url  (id=9716)	
?0-1.IBehaviorListener.0-ajaxlink&_=1455703145162

				WebResponse webResponse = application.createWebResponse(webRequest,
					httpServletResponse);

				RequestCycle requestCycle = application.createRequestCycle(webRequest, webResponse);
				res = processRequestCycle(requestCycle, webResponse, httpServletRequest,
					httpServletResponse, chain);
/ TODO

/c
	RequestCycle.processRequest() line: 219	
			IRequestHandler handler = resolveRequestHandler();

	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
...
/s
MapperUtils.getPageComponentInfo(Url) line: 70	
		for (Url.QueryParameter queryParameter : url.getQueryParameters())
queryParameter="0-1.IBehaviorListener.0-ajaxlink"
		{
			PageComponentInfo pageComponentInfo = parsePageComponentInfoParameter(queryParameter);
pageComponentInfo	PageComponentInfo  (id=9755)	
	componentInfo	ComponentInfo  (id=9758)	
		behaviorId	Integer  (id=6303)	
0
		componentPath	"ajaxlink" (id=9761)	
		listenerInterface	"IBehaviorListener" (id=9762)	
		renderCount	Integer  (id=6304)	
1
	pageInfo	PageInfo  (id=9759)		
		pageId	Integer
0

/ TODO (Afmaken)

/c
	ListenerInterfaceRequestHandler.invokeListener() line: 239	

	ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 234	
		invokeListener();

	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 837	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
			IRequestHandler handler = resolveRequestHandler();
org.apache.wicket.core.request.handler.ListenerInterfaceRequestHandler@5e6a6c70
			if (handler != null)
			{
				execute(handler);

	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/s
    ListenerInterfaceRequestHandler.invokeListener() line: 239
			try
			{
				Behavior behavior = getComponent().getBehaviorById(behaviorId);
behaviorId=0
				listenerInterface.invoke(getComponent(), behavior);
/s
RequestListenerInterface.invoke(IRequestableComponent, Behavior) line: 231	
		internalInvoke(component, behavior);
/s
RequestListenerInterface.internalInvoke(Component, Object) line: 258	
			method.invoke(target);
public abstract void org.apache.wicket.behavior.IBehaviorListener.onRequest()
/s
AjaxLink$1(AbstractDefaultAjaxBehavior).onRequest() line: 571	
		WebApplication app = (WebApplication)getComponent().getApplication();
		AjaxRequestTarget target = app.newAjaxRequestTarget(getComponent().getPage());
/s
WicketApplication(WebApplication).newAjaxRequestTarget(Page) line: 907	
		AjaxRequestTarget target = getAjaxRequestTargetProvider().get(page);
/s
WebApplication$DefaultAjaxRequestTargetProvider.get(Page) line: 1073	
/=
public abstract class WebApplication extends Application
	private static class DefaultAjaxRequestTargetProvider implements
		IContextProvider<AjaxRequestTarget, Page>
	{
		@Override
		public AjaxRequestTarget get(Page page)
		{
			return new AjaxRequestHandler(page);
/t
WicketApplication(WebApplication).newAjaxRequestTarget(Page) line: 912	
		AjaxRequestTarget target = getAjaxRequestTargetProvider().get(page);
		for (AjaxRequestTarget.IListener listener : ajaxRequestTargetListeners)
		{
			target.addListener(listener);
[org.apache.wicket.protocol.http.AjaxEnclosureListener@4b182111]

/t
AjaxLink$1(AbstractDefaultAjaxBehavior).onRequest() line: 575	
		AjaxRequestTarget target = app.newAjaxRequestTarget(getComponent().getPage());
/d
[AjaxRequestHandler@1701777932 responseObject [org.apache.wicket.ajax.AjaxRequestHandler$1@3e1]
		RequestCycle requestCycle = RequestCycle.get();
		requestCycle.scheduleRequestHandlerAfterCurrent(target);

		respond(target);

/ 7	. 

/ HIER WAREN WE GEBLEVEN (LINK,  )
/ We gaan verder bij WICKET 7 LINK JAVASCRIPT





/ 7	. 

/ we click de link	,

/c
	AjaxLinkStudy2Page$1.onClick(AjaxRequestTarget) line: 43	
			@Override
			public void onClick(AjaxRequestTarget target) {
				text="["+text+"]";
				counter+=13;
				target.add(textl);
				target.add(counterl);

	AjaxLink$1.onEvent(AjaxRequestTarget) line: 84	
		return new AjaxEventBehavior(event)
		{
			private static final long serialVersionUID = 1L;

			@Override
			protected void onEvent(AjaxRequestTarget target)
			{
->				onClick(target);

	AjaxLink$1(AjaxEventBehavior).respond(AjaxRequestTarget) line: 134	
		onEvent(target);

	AjaxLink$1(AbstractDefaultAjaxBehavior).onRequest() line: 577	
		WebApplication app = (WebApplication)getComponent().getApplication();
		AjaxRequestTarget target = app.newAjaxRequestTarget(getComponent().getPage());
[AjaxRequestHandler@1701777932 responseObject [org.apache.wicket.ajax.AjaxRequestHandler$1@3e1]
		...
		respond(target);
	RequestListenerInterface.internalInvoke(Component, Object) line: 258	
			method.invoke(target);

	RequestListenerInterface.invoke(IRequestableComponent, Behavior) line: 241	
		internalInvoke(component, behavior);

	ListenerInterfaceRequestHandler.invokeListener() line: 248	
				Behavior behavior = getComponent().getBehaviorById(behaviorId);
behaviorId=0
org.apache.wicket.ajax.markup.html.AjaxLink$1@45e6db18
				listenerInterface.invoke(getComponent(), behavior);

	ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 234	
		...
		invokeListener();

	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 837	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
			IRequestHandler handler = resolveRequestHandler();
org.apache.wicket.core.request.handler.ListenerInterfaceRequestHandler@9df0104
			if (handler != null)
			{
				execute(handler);

	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ 13	. 

/ we gaan debug	,

RequestCycle.processRequest() line: 219	
			IRequestHandler handler = resolveRequestHandler();
/s
RequestCycle.resolveRequestHandler() line: 189	
		return requestMapper.mapRequest(request);
/s
SystemMapper(CompoundRequestMapper).mapRequest(Request) line: 151	
		for (MapperWithScore mapperWithScore : list)
		{
			IRequestMapper mapper = mapperWithScore.getMapper();
mapper	HomePageMapper  (id=6368)	
			IRequestHandler handler = mapper.mapRequest(request);
/s
HomePageMapper(AbstractBookmarkableMapper).mapRequest(Request) line: 348	

		UrlInfo urlInfo = parseRequest(request);
/s
HomePageMapper.parseRequest(Request) line: 76	
		final Url url = request.getUrl().canonical();


urlInfo	AbstractBookmarkableMapper$UrlInfo  (id=6383)	
	pageClass	Class<T> (my.test.own.AjaxLinkStudy2Page) (id=6118)	
	pageComponentInfo	PageComponentInfo  (id=6385)	
0-1.IBehaviorListener.0-ajaxlink
	pageParameters	null	

			else if (info.getComponentInfo() != null)
			{
				// with both page instance and component+listener this is a listener interface URL
				return processListener(info, pageClass, pageParameters);
/s
HomePageMapper(AbstractBookmarkableMapper).processListener(PageComponentInfo, Class<IRequestablePage>, PageParameters) line: 300	
		if (componentInfo != null)
		{
			renderCount = componentInfo.getRenderCount();
1
			listenerInterface = requestListenerInterfaceFromString(componentInfo.getListenerInterface());
/s
HomePageMapper(AbstractComponentMapper).requestListenerInterfaceFromString(String) line: 73	
interfaceName	"IBehaviorListener" (id=6393)	

		return getContext().requestListenerInterfaceFromString(interfaceName);
/s
DefaultMapperContext.requestListenerInterfaceFromString(String) line: 87	
		return RequestListenerInterface.forName(interfaceName);
/s
RequestListenerInterface.forName(String) line: 59	
		return interfaces.get(interfaceName);
interfaces={
IFormSubmitListener=[RequestListenerInterface name=IFormSubmitListener, method=public abstract void org.apache.wicket.markup.html.form.IFormSubmitListener.onFormSubmitted()], 
IBehaviorListener=[RequestListenerInterface name=IBehaviorListener, method=public abstract void org.apache.wicket.behavior.IBehaviorListener.onRequest()], 
IOnChangeListener=[RequestListenerInterface name=IOnChangeListener, method=public abstract void org.apache.wicket.markup.html.form.IOnChangeListener.onSelectionChanged()], 
ILinkListener=[RequestListenerInterface name=ILinkListener, method=public abstract void org.apache.wicket.markup.html.link.ILinkListener.onLinkClicked()], 
IResourceListener=[RequestListenerInterface name=IResourceListener, method=public abstract void org.apache.wicket.IResourceListener.onResourceRequested()]
}

/t
HomePageMapper(AbstractBookmarkableMapper).processListener(PageComponentInfo, Class<IRequestablePage>, PageParameters) line: 313	

			listenerInterface = requestListenerInterfaceFromString(componentInfo.getListenerInterface());
[RequestListenerInterface name=IBehaviorListener, method=public abstract void org.apache.wicket.behavior.IBehaviorListener.onRequest()]

		if (listenerInterface != null)
		{
			PageAndComponentProvider provider = new PageAndComponentProvider(pageInfo.getPageId(),
				pageClass, pageParameters, renderCount, componentInfo.getComponentPath());

			provider.setPageSource(getContext());

			return new ListenerInterfaceRequestHandler(provider, listenerInterface,
				componentInfo.getBehaviorId());

.




. Einde DEBUG WICKET AJAX LINK

/ WICKET 7 LINK JAVASCRIPT

/ 7	. 

/ andere jquery versie	,

/ In wicket-testing	,
$ vi pom.xml
	<properties>
		<wicket.version>7.2.0</wicket.version>

/ Kijk in de jar, welke jquery's er zijn	, jquery-2.2.0.js	,


$ vi WicketApplication.java

	JavaScriptResourceReference javaScriptResourceReference = new JavaScriptResourceReference(JQueryResourceReference.class,"jquery/jquery-2.2.0.js");
	getJavaScriptLibrarySettings().setJQueryReference(javaScriptResourceReference);
/ OK

/ 7	. 

/ we zien 

public class JavaScriptLibrarySettings
{
	private ResourceReference jQueryReference = JQueryResourceReference.get();

	private ResourceReference wicketEventReference = WicketEventJQueryResourceReference.get();

	private ResourceReference wicketAjaxReference = WicketAjaxJQueryResourceReference.get();

/ Dat zijn dus	,
./wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-ajax-jquery.js
./wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-event-jquery.js
./wicket-core/src/main/java/org/apache/wicket/resource/jquery/jquery-2.2.0.js

/ In HTML	,
Wicket.Event.add(window, "domready", function(event) { 
	Wicket.Ajax.ajax({"u":"./?0-1.IBehaviorListener.0-ajaxlink","c":"ajaxlink1","e":"click"});;
	Wicket.Event.publish(Wicket.Event.Topic.AJAX_HANDLERS_BOUND);
;});

/ we click de link	,
/s
				jQuery.each(attrs.e, function (idx, evt) {
					Wicket.Event.add(attrs.c, evt, function (jqEvent, data) {
->						var call = new Wicket.Ajax.Call();
						var attributes = jQuery.extend({}, attrs);
attributes: Object
c: "ajaxlink1"
e: Array[1]
0: "click"
length: 1
__proto__: Array[0]
u: "./?0-1.IBehaviorListener.0-ajaxlink"
__proto__: Object
						else {
							call.ajax(attributes);
/s
Wicket.Ajax.Call.ajax (wicket-ajax-jqu…3568000.js:560)
(anonymous function) (wicket-ajax-jqu…568000.js:1977)
jQuery.event.dispatch (jquery-2.2.0-ve…568000.js:4732)
elemData.handle (jquery-2.2.0-ve…568000.js:4544)

jax: function (attrs) {
			this._initializeDefaults(attrs);

->			var res = Wicket.channelManager.schedule(attrs.ch, Wicket.bind(function () {
				this.doAjax(attrs);
			}, this));

/ we komen op de server	,
/ we zien in devtools	,
Request URL:http://localhost:9090/wicket-testing/?0-2.IBehaviorListener.0-ajaxlink&_=1455805731363

/ 7. 	

/ build header	,

$ vi AjaxLinkStudy2Page.java
...

/s
	AjaxLink$1(AbstractAjaxBehavior).getCallbackUrl() line: 88	
		rli = IBehaviorListener.INTERFACE;
		return getComponent().urlFor(this, rli, new PageParameters());
./?0-1.IBehaviorListener.0-ajaxlink

	AjaxLink$1(AbstractDefaultAjaxBehavior).renderAjaxAttributes(Component, AjaxRequestAttributes) line: 201	
			attributesJson.put(AjaxAttributeName.URL.jsonName(), getCallbackUrl());
/ AjaxAttributeName.URL.jsonName()="u"
/ getCallbackUrl()="./?0-1.IBehaviorListener.0-ajaxlink"

	AjaxLink$1(AbstractDefaultAjaxBehavior).renderAjaxAttributes(Component) line: 185	
		AjaxRequestAttributes attributes = getAttributes();
->		return renderAjaxAttributes(component, attributes);

	AjaxLink$1(AbstractDefaultAjaxBehavior).getCallbackScript(Component) line: 465	
->		CharSequence ajaxAttributes = renderAjaxAttributes(component);
{"u":"./?0-1.IBehaviorListener.0-ajaxlink","c":"ajaxlink1","e":"click"}
		return "Wicket.Ajax.ajax(" + ajaxAttributes + ");";

	AjaxLink$1(AjaxEventBehavior).renderHead(Component, IHeaderResponse) line: 94	
			CharSequence js = getCallbackScript(component);
Wicket.Ajax.ajax({"u":"./?0-1.IBehaviorListener.0-ajaxlink","c":"ajaxlink1","e":"click"});
			response.render(OnDomReadyHeaderItem.forScript(js.toString()));

	AjaxLinkStudy2Page$1(Component).internalRenderHead(HtmlHeaderContainer) line: 2727	
			// Then ask all behaviors
			for (Behavior behavior : getBehaviors())
			{
				if (isBehaviorAccepted(behavior))
				{
					if (response.wasRendered(behavior) == false)
					{
->						behavior.renderHead(this, response);

	ChildFirstHeaderRenderStrategy$1.component(Component, IVisit<Void>) line: 85	
	ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component, Visit<Void>) line: 96	
	ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component, Visit<Void>) line: 87	
	ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component) line: 51	
	ChildFirstHeaderRenderStrategy.renderChildHeaders(HtmlHeaderContainer, Component) line: 78	
	ChildFirstHeaderRenderStrategy.renderHeader(HtmlHeaderContainer, HtmlHeaderContainer$HeaderStreamState, Component) line: 57	
	HtmlHeaderContainer.onComponentTagBody(MarkupStream, ComponentTag) line: 171	
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
	HtmlHeaderContainer(Component).internalRenderComponent() line: 2565	
	HtmlHeaderContainer(MarkupContainer).onRender() line: 1698	
	HtmlHeaderContainer(Component).internalRender() line: 2380	
	HtmlHeaderContainer(Component).render() line: 2308	
	AjaxLinkStudy2Page(MarkupContainer).renderNext(MarkupStream) line: 1524	
	AjaxLinkStudy2Page(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	AjaxLinkStudy2Page(Page).onRender() line: 879	
	AjaxLinkStudy2Page(WebPage).onRender() line: 141	
	AjaxLinkStudy2Page(Component).internalRender() line: 2380	
	AjaxLinkStudy2Page(Component).render() line: 2308	
	AjaxLinkStudy2Page(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/s
AjaxLinkStudy2Page$1(Component).urlFor(Behavior, RequestListenerInterface, PageParameters) line: 3347	
		int id = getBehaviorId(behaviour);
0
		IRequestHandler handler = createRequestHandler(listener, parameters, id);
org.apache.wicket.core.request.handler.BookmarkableListenerInterfaceRequestHandler@1b821762
		return getRequestCycle().urlFor(handler);
/s
RequestCycle.mapUrlFor(IRequestHandler) line: 434	
		final Url url = requestMapper.mapHandler(handler);
/s
SystemMapper(CompoundRequestMapper).mapHandler(IRequestHandler) line: 213	
		for (IRequestMapper mapper : mappers)
		{
			Url url = mapper.mapHandler(handler);
/s
HomePageMapper(MountedMapper).mapHandler(IRequestHandler) line: 159	
		Url url = super.mapHandler(requestHandler);
/s
HomePageMapper(AbstractBookmarkableMapper).mapHandler(IRequestHandler) line: 484	
		else if (requestHandler instanceof BookmarkableListenerInterfaceRequestHandler)
{
urlInfo	AbstractBookmarkableMapper$UrlInfo  (id=8112)	
	pageClass	Class<T> (my.test.own.AjaxLinkStudy2Page) (id=7614)	
	pageComponentInfo	PageComponentInfo  (id=8114)					0-1.IBehaviorListener.0-ajaxlink	
		componentInfo	ComponentInfo  (id=8115)						1.IBehaviorListener.0-ajaxlink
			behaviorId	Integer  (id=8079)	
0
			componentPath	"ajaxlink" (id=8119)	
			listenerInterface	"IBehaviorListener" (id=8121)	
			renderCount	Integer  (id=8075)	
1
		pageInfo	PageInfo  (id=8077)	
			pageId	Integer  (id=8079)	
0
	pageParameters	null	


/////////////////////////////////////////////////////
/ Dus WH	,
<pageId>-<renderCount>.IBehaviorListener.<behaviorId>-<componentPath>

/t
RequestCycle.urlFor(IRequestHandler) line: 535	

			Url mappedUrl = mapUrlFor(handler);
/d
?0-1.IBehaviorListener.0-ajaxlink
			CharSequence url = renderUrl(mappedUrl, handler);
./?0-1.IBehaviorListener.0-ajaxlink
			return url;
/t
AjaxLink$1(AbstractAjaxBehavior).getCallbackUrl() line: 88	
		return getComponent().urlFor(this, rli, new PageParameters());
/d
/t
AjaxLink$1(AbstractDefaultAjaxBehavior).renderAjaxAttributes(Component, AjaxRequestAttributes) line: 202	
			attributesJson.put(AjaxAttributeName.URL.jsonName(), getCallbackUrl());
/d
{"u":"./?0-1.IBehaviorListener.0-ajaxlink"}

			Method method = attributes.getMethod();
GET
			if (Method.POST == method)
/ NEE
			if (component instanceof Page == false)
			{
				String componentId = component.getMarkupId();
				attributesJson.put(AjaxAttributeName.MARKUP_ID.jsonName(), componentId);
{"u":"./?0-1.IBehaviorListener.0-ajaxlink","c":"ajaxlink1"}

			String formId = attributes.getFormId();
null
			if (Strings.isEmpty(formId) == false)
/ NEE

			String[] eventNames = attributes.getEventNames();
[click]
			if (eventNames.length == 1)
			{
				attributesJson.put(AjaxAttributeName.EVENT_NAME.jsonName(), eventNames[0]);
{"u":"./?0-1.IBehaviorListener.0-ajaxlink","c":"ajaxlink1","e":"click"}

		String attributesAsJson = attributesJson.toString();
{"u":"./?0-1.IBehaviorListener.0-ajaxlink","c":"ajaxlink1","e":"click"}
		return attributesAsJson;

/ 7	. 

/ js	,

Wicket: Object
	$: function (arg) {
	$$: function (element) {
	Ajax: Object														/ wicket-ajax-jquery.js
		Call: function () {
		arguments: (...)
		get arguments: function ThrowTypeError() { [native code] }
		set arguments: function ThrowTypeError() { [native code] }
		caller: (...)
		get caller: function ThrowTypeError() { [native code] }
		set caller: function ThrowTypeError() { [native code] }
		length: 0
		name: ""
		prototype: Object
			_asParamArray: function (parameters) {
			_calculateDynamicParameters: function (attrs) {
			_executeHandlers: function (handlers) {
			_getTarget: function (attrs) {
			_initializeDefaults: function (attrs) {
			ajax: function (attrs) {
			doAjax: function (attrs) {
			done: function (attrs) {
			failure: function (context, jqXHR, errorMessage, textStatus) {
			handleMultipartComplete: function (event) {
			initialize: function () {}
			loadedCallback: function (envelope, context) {
			process: function (data) {
			processAjaxResponse: function (data, textStatus, jqXHR, context) {
			processComponent: function (context, node) {
			processEvaluation: function (context, node) {
			processFocusedComponentMark: function (context) {
			processFocusedComponentReplaceCheck: function (steps, lastReplaceComponentStep) {
			processHeaderContribution: function (context, node) {
			processRedirect: function (context, node) {
			submitMultipartForm: function (context) {
			success: function (context) {
			__proto__: Object
			__proto__: function Empty() {}
			<function scope>
			_handleEventCancelation: function (attrs) {
			ajax: function (attrs) {
			get: function (attrs) {
			post: function (attrs) {
			process: function (data) {
			redirect: function (url) {
			__proto__: Object
	Browser: Object
	Channel: function () {
	ChannelManager: function () {
	Class: Object														/ wicket-ajax-jquery.js
	DOM: Object															/ wicket-ajax-jquery.js
		containsElement: function (element) {
		get: function (arg) {
		hide: function (e) {
		hideIncrementally: function (e) {
		inDoc: function (element) {
		replace: function (element, text) {
		serializeNode: function (node){
		serializeNodeChildren: function (node) {
		show: function (e, display) {
		showIncrementally: function (e) {
		text: function (node) {
		toggleClass: function (elementId, cssClass, Switch) {
		__proto__: Object
	Drag: Object														/ wicket-ajax-jquery.js
		clean: function (element) {
		init: function (element, onDragBegin, onDragEnd, onDrag) {
		mouseDownHandler: function (e) {
		mouseMove: function (e) {
		mouseOut: function (e) {
		mouseUp: function () {
		__proto__: Object
	Event: Object														/ wicket-event-jquery.js
	Focus: Object
	Form: Object
		encode: function (text) {
		excludeFromAjaxSerialization: Object
		serialize: function (element, dontTryToFindRootForm) {
		serializeElement: function (element, serializeRecursively) {
		serializeForm: function (form) {
		serializeInput: function (input) {
		serializeSelect: function (select){
		__proto__: Object
	Head: Object
		Contributor: Object
			_checkParserError: function (node) {
			parse: function (headerNode) {
			processComment: function (context, node) {
			processContribution: function (context, headerNode) {
			processLink: function (context, node) {
			processScript: function (context, node) {
			processStyle: function (context, node) {
			__proto__: Object
		addElement: function (element) {
		addJavascript: function (content, id, fakeSrc, type) {
		addJavascripts: function (element, contentFilter) {
		containsElement: function (element, mandatoryAttribute) {
		createElement: function (name) {
		__proto__: Object
	Log: Object
	Throttler: function () {
	ThrottlerEntry: function () {
	Timer: Object
	Xml: Object
	bind: function (fn, context) {
	channelManager: Object
	merge: function (object1, object2) {
	throttler: Object
	__proto__: Object   

$ vi AjaxLinkStudy2Page.html
Wicket.Event.add(window, "domready", function(event) { 
	Wicket.Ajax.ajax({"u":"./?2-1.IBehaviorListener.0-ajaxlink","c":"ajaxlink7","e":"click"});;
/ registers listener to click event	,
	Wicket.Event.publish(Wicket.Event.Topic.AJAX_HANDLERS_BOUND);
;});
/s
$ vi wicket-ajax-jquery.js
			ajax: function(attrs) {
				...
				jQuery.each(attrs.e, function (idx, evt) {
					Wicket.Event.add(attrs.c, evt, function (jqEvent, data) {
->						...
/ Wicket.Ajax.ajax registers deze handler als click event listener	,

/ 13	. 

getDebugSettings().setAjaxDebugModeEnabled(false); 
/ Als we dat "wicket ajax debug" niet willen	,
/ TODO

$ vi wicket-ajax-debug.js
		init : function() {
			if ( Wicket.Ajax.DebugWindow.enabled) {

/ Deze staat op de page	, 
$ vi AjaxLinkStudy2Page.java

<script type="text/javascript" id="wicket-ajax-debug-enable">
/*<![CDATA[*/
Wicket.Ajax.DebugWindow.enabled=true;
/*]]>*/
</script>

$ vi ./wicket-core/src/main/java/org/apache/wicket/resource/CoreLibrariesContributor.java     
	public static void contributeAjax(final Application application, final IHeaderResponse response)

        JavaScriptLibrarySettings jsLibrarySettings = application.getJavaScriptLibrarySettings();

        final DebugSettings debugSettings = application.getDebugSettings();
        if (debugSettings.isAjaxDebugModeEnabled())
        {
            response.render(JavaScriptHeaderItem.forReference(jsLibrarySettings.getWicketAjaxDebugReference()));
            response.render(JavaScriptHeaderItem.forScript("Wicket.Ajax.DebugWindow.enabled=true;",
                "wicket-ajax-debug-enable"));
        }
        else
        {
            ResourceReference wicketAjaxReference = jsLibrarySettings.getWicketAjaxReference();
            response.render(JavaScriptHeaderItem.forReference(wicketAjaxReference));
        }
    }

/ TODO

/ WICKET AJAX CLIENT AND SERVER

/ WICKET AJAX CLIENT

/ 13	.  


/ we click de link	,
$ vi wicket-ajax-jquery.js
					Wicket.Event.add(attrs.c, evt, function (jqEvent, data) {
->						var call = new Wicket.Ajax.Call();

/ 13	. 

/ we hebben link clicked	, 
/ s
/ stack trace	,

Wicket.Ajax.Call.doAjax (wicket-ajax-jqu…3568000.js:575)
/ we gaan deze debug	,

(anonymous function) (wicket-ajax-jqu…3568000.js:563)
			var res = Wicket.channelManager.schedule(attrs.ch, Wicket.bind(function () {
->				this.doAjax(attrs);

jQuery.extend.proxy.proxy (jquery-2.2.0-ve…3568000.js:492)
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );

Wicket.Channel.schedule (wicket-ajax-jqu…3568000.js:298)
					return callback();

Wicket.ChannelManager.schedule (wicket-ajax-jqu…3568000.js:358)
			return c.schedule(callback);

Wicket.Ajax.Call.ajax (wicket-ajax-jqu…3568000.js:562)
->			var res = Wicket.channelManager.schedule(attrs.ch, Wicket.bind(function () {
				this.doAjax(attrs);
(anonymous function) (wicket-ajax-jqu…568000.js:1977)
						else {
							call.ajax(attributes);

jQuery.event.dispatch (jquery-2.2.0-ve…568000.js:4732)
jQuery.event.add.elemData.handle (jquery-2.2.0-ve…568000.js:4544)

/ we gaan debug	,
/s
Wicket.Ajax.Call.doAjax (wicket-ajax-jqu…3568000.js:575)
...
$ vi jquery.js
		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
/ we zeggen hier wat de success fct wordt	,
/ we zeggen hier wat de error fct wordt	,
		}
jqXHR["success"]=$.Callbacks.self.add

s["success"]=Wicket.Ajax.Call.doAjax.$.ajax.success
/ TODO
$ vi wicket-ajax-jquery.js
			// execute the request
			var jqXHR = jQuery.ajax({
				success: function(data, textStatus, jqXHR) {
					if (attrs.wr) {
						self.processAjaxResponse(data, textStatus, jqXHR, context);
					} else {
						self._executeHandlers(attrs.sh, attrs, jqXHR, data, textStatus);
						we.publish(topic.AJAX_CALL_SUCCESS, attrs, jqXHR, data, textStatus);
					}
				},

/ 13	. 

/ Dan	,
$ vi jquery.js
	// Main method
	ajax: function( url, options ) {
			try {
				state = 1;

				transport.send( requestHeaders, done );

/ Einde WICKET AJAX CLIENT

/ 7. 	

/ WICKET AJAX SERVER

/ On server side	, 
/s
/ stack strace	,
	AjaxLink$1(AbstractDefaultAjaxBehavior).onRequest() line: 587	
		WebApplication app = (WebApplication)getComponent().getApplication();
		AjaxRequestTarget target = app.newAjaxRequestTarget(getComponent().getPage());

		RequestCycle requestCycle = RequestCycle.get();
		requestCycle.scheduleRequestHandlerAfterCurrent(target);

		respond(target);

	RequestListenerInterface.internalInvoke(Component, Object) line: 258	
			method.invoke(target);

	RequestListenerInterface.invoke(IRequestableComponent, Behavior) line: 241	
		internalInvoke(component, behavior);

	ListenerInterfaceRequestHandler.invokeListener() line: 248	
				Behavior behavior = getComponent().getBehaviorById(behaviorId);
org.apache.wicket.ajax.markup.html.AjaxLink$1@46d14ba0
				listenerInterface.invoke(getComponent(), behavior);

	ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 234	
		invokeListener();

	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
			IRequestHandler handler = resolveRequestHandler();
org.apache.wicket.core.request.handler.ListenerInterfaceRequestHandler@2e5176a
				execute(handler);

	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ we gaan debug	,
/ s
AjaxLink$1(AbstractDefaultAjaxBehavior).onRequest() line: 587	
		WebApplication app = (WebApplication)getComponent().getApplication();
		AjaxRequestTarget target = app.newAjaxRequestTarget(getComponent().getPage());
...
/s
WebApplication$DefaultAjaxRequestTargetProvider.get(Page) line: 1073	
			return new AjaxRequestHandler(page);
/s
* A request target that produces ajax response envelopes used on the client side to update
 * component markup as well as evaluate arbitrary javascript.
 * <p>
 * A component whose markup needs to be updated should be added to this target via
 * AjaxRequestTarget#add(Component) method. Its body will be rendered and added to the envelope when
 * the target is processed, and refreshed on the client side when the ajax response is received.
 * <p>
 * It is important that the component whose markup needs to be updated contains an id attribute in
 * the generated markup that is equal to the value retrieved from Component#getMarkupId(). This can
 * be accomplished by either setting the id attribute in the html template, or using an attribute
 * modifier that will add the attribute with value Component#getMarkupId() to the tag ( such as
 * MarkupIdSetter )
 * <p>
 * Any javascript that needs to be evaluated on the client side can be added using
 * AjaxRequestTarget#append/prependJavaScript(String). For example, this feature can be useful when
 * it is desirable to link component update with some javascript effects.
 * <p>
 * The target provides a listener interface {@link AjaxRequestTarget.IListener} that can be used to
 * add code that responds to various target events by adding listeners via
 * {@link #addListener(AjaxRequestTarget.IListener)}

/ Dus AjaxRequestHandler zorgt voor die typische AJAX HTML in de response,	 

AjaxRequestHandler.<init>(Page) line: 112	
		this.page = Args.notNull(page, "page");
		update = new XmlPartialPageUpdate(page)
/s
public class XmlPartialPageUpdate extends PartialPageUpdate
{
	public XmlPartialPageUpdate(final Page page)
	{
		super(page);
/s
/**
 * A partial update of a page that collects components and header contributions to be written to the client in a specific
 * String-based format (XML, JSON, * ...).
 * <p>
 * The elements of such response are:
 * <ul>
 * <li>priority-evaluate - an item of the prepend JavaScripts</li>
 * <li>component - the markup of the updated component</li>
 * <li>evaluate - an item of the onDomReady and append JavaScripts</li>
 * <li>header-contribution - all HeaderItems which have been contributed in
 * components' and their behaviors' #renderHead(Component, IHeaderResponse)</li>
 * </ul>
 */
public abstract class PartialPageUpdate
{
	public PartialPageUpdate(final Page page)
	{
		this.page = page;

		WebResponse response = (WebResponse) page.getResponse();
		bodyBuffer = new ResponseBuffer(response);
		headerBuffer = new ResponseBuffer(response);
	}


/t
WicketApplication(WebApplication).newAjaxRequestTarget(Page) line: 910	
		AjaxRequestTarget target = getAjaxRequestTargetProvider().get(page);
/d
		for (AjaxRequestTarget.IListener listener : ajaxRequestTargetListeners)
		{
			target.addListener(listener);
/ listener=org.apache.wicket.protocol.http.AjaxEnclosureListener@b023e92

/t
AjaxLink$1(AbstractDefaultAjaxBehavior).onRequest() line: 590	
		AjaxRequestTarget target = app.newAjaxRequestTarget(getComponent().getPage());
/d
		RequestCycle requestCycle = RequestCycle.get();
		requestCycle.scheduleRequestHandlerAfterCurrent(target);
/ TODO

/t
AjaxLink$1(AbstractDefaultAjaxBehavior).onRequest() line: 593	
		requestCycle.scheduleRequestHandlerAfterCurrent(target);
/d
		respond(target);
/s
AjaxLink$1(AjaxEventBehavior).respond(AjaxRequestTarget) line: 155	
		onEvent(target);
/s

AjaxLink$1.onEvent(AjaxRequestTarget) line: 84	
/=
public abstract class AjaxLink<T> extends AbstractLink implements IAjaxLink, IGenericComponent<T>
	protected AjaxEventBehavior newAjaxEventBehavior(String event)
		return new AjaxEventBehavior(event)
		{
			private static final long serialVersionUID = 1L;

			@Override
			protected void onEvent(AjaxRequestTarget target)
			{
->				onClick(target);
/s
AjaxLink$1.onEvent(AjaxRequestTarget) line: 84	
				text="["+text+"]";
				counter+=13;
				target.add(textl);
/s
AjaxRequestHandler.add(Component...) line: 231	
			add(component, component.getMarkupId());
/s
AjaxRequestHandler.add(Component, String) line: 238	
		update.add(component, markupId);
/s
AjaxRequestHandler$1(PartialPageUpdate).add(Component, String) line: 369	
this=AjaxRequestHandler$1=(update = new XmlPartialPageUpdate(page) )
		component.setMarkupId(markupId);
/ TODO
		markupIdToComponent.put(markupId, component);
		markupIdToComponent.put(markupId, component);
{text8=[Component id = text]}

/t
AjaxLinkStudy2Page$1.onClick(AjaxRequestTarget) line: 46	
				target.add(textl);
/d
				target.add(counterl);
/s
AjaxRequestHandler.add(Component, String) line: 238	
		update.add(component, markupId);
/s
AjaxRequestHandler$1(PartialPageUpdate).add(Component, String) line: 390	
		component.setMarkupId(markupId);
		markupIdToComponent.put(markupId, component);
{text8=[Component id = text], counter9=[Component id = counter]}

/t
/c
RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 97	
		try
		{
			respond(handler);
/d
org.apache.wicket.core.request.handler.ListenerInterfaceRequestHandler@2e5176a

		IRequestHandler scheduled = scheduledAfterCurrent;
		scheduledAfterCurrent = null;
		else if (scheduled != null)
		{
			execute(scheduled);
[AjaxRequestHandler@1701777932 responseObject [org.apache.wicket.ajax.AjaxRequestHandler$1@3e1]
/s
RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
		try
		{
			respond(handler);
[AjaxRequestHandler@1701777932 responseObject [org.apache.wicket.ajax.AjaxRequestHandler$1@3e1]

/ Nu komen we hier weer	, maar met een andere handler	,

/s
RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
			try
			{
				handler.respond(RequestCycle.this);
/s
AjaxRequestHandler.respond(IRequestCycle) line: 346	
		final StringResponse bodyResponse = new StringResponse();
		update.writeTo(bodyResponse, encoding);
/s
AjaxRequestHandler$1(PartialPageUpdate).writeTo(Response, String) line: 153	
encoding="UTF-8"
			writeHeader(response, encoding);
/s
AjaxRequestHandler$1(XmlPartialPageUpdate).writeHeader(Response, String) line: 57	
		response.write("<?xml version=\"1.0\" encoding=\"");
		response.write(encoding);
		response.write("\"?>");
		response.write(START_ROOT_ELEMENT);
<ajax-response>
/t
AjaxRequestHandler$1(PartialPageUpdate).writeTo(Response, String) line: 155	
			writeHeader(response, encoding);
/d
			onBeforeRespond(response);
/s
AjaxRequestHandler$1.onBeforeRespond(Response) line: 125	
/=
		update = new XmlPartialPageUpdate(page)
		{
			/**
			 * Freezes the {@link AjaxRequestHandler#listeners} before firing the event and
			 * un-freezes them afterwards to allow components to add more
			 * {@link AjaxRequestTarget.IListener}s for the second event.
			 */
			@Override
			protected void onBeforeRespond(final Response response)
			{
/ TODO
/t
AjaxRequestHandler$1(PartialPageUpdate).writeTo(Response, String) line: 158	
			// process added components
			writeComponents(response, encoding);
/s
AjaxRequestHandler$1(PartialPageUpdate).writeComponents(Response, String) line: 236	
		// process component markup
		for (Map.Entry<String, Component> stringComponentEntry : markupIdToComponent.entrySet())
		{
			final Component component = stringComponentEntry.getValue();
component	Label  (id=7387)	
[Component id = text]

			if (!containsAncestorFor(component))
/ JA
			{
				writeComponent(response, component.getAjaxRegionMarkupId(), component, encoding);
/s
Label(Component).getAjaxRegionMarkupId() line: 2493	
			markupId = getMarkupId();
text8
/ TODO
/t
/s
AjaxRequestHandler$1(XmlPartialPageUpdate).writeComponent(Response, String, Component, String) line: 66	

		// substitute our encoding response for the old one so we can capture
		// component's markup in a manner safe for transport inside CDATA block
		Response oldResponse = RequestCycle.get().setResponse(bodyBuffer);
/ bodyBuffer=org.apache.wicket.page.PartialPageUpdate$ResponseBuffer@76c5f881

			try
			{
				component.render();
/s
Label(Component).render() line: 2308	
			// Do the render
			internalRender();
/s
Label(Component).internalRender() line: 2352	

//////////////////////////////////////////////////////////
/ we komen waar we altijd in komen bij render	, alleen nu alleen voor het label	,

		MarkupElement elem = markup.get(0);
<span wicket:id="text">
				onRender();
/s
Label(WebComponent).onRender() line: 60	
		internalRenderComponent();
/s
Label(Component).internalRenderComponent() line: 2508	
			else
			{
				renderComponentTag(tag);
/s
Label(Component).renderComponentTag(ComponentTag) line: 4034	
			// Write the tag
			tag.writeOutput(getResponse(), !needToRenderTag(null),
				getMarkup().getMarkupResourceStream().getWicketNamespace());
/s
ComponentTag.writeOutput(Response, boolean, String) line: 720	
		response.write("<");
		response.write(getName());
<span
		if (getAttributes().size() > 0)
		{
			for (String key : getAttributes().keySet())
/ key="wicket:id"
/ key="id"
/ key="wicketpath"
				if ((namespacePrefix == null) || (key.startsWith(namespacePrefix) == false))
				{
					response.write(" ");
					response.write(key);
					CharSequence value = getAttribute(key);
"text"
"text8"
"text"
					// attributes without values are possible, e.g.' disabled'
					if (value != null)
					{
						response.write("=\"");
						value = Strings.escapeMarkup(value);
						response.write(value);
						response.write("\"");
<span wicket:id="text"
<span wicket:id="text" id="text8"
<span wicket:id="text" id="text8" wicketpath="text"
		response.write(">");

/t
Label(Component).internalRenderComponent() line: 2558	
			else
			{
				renderComponentTag(tag);
/d

/t
AjaxRequestHandler$1(XmlPartialPageUpdate).writeComponent(Response, String, Component, String) line: 133	
			try
			{
				component.render();
		finally
		{
			// Restore original response
			RequestCycle.get().setResponse(oldResponse);

ponse.write("<component id=\"");
		response.write(markupId);
		response.write("\" ><![CDATA[");
		response.write(encode(bodyBuffer.getContents()));
		response.write("]]></component>");
/ response=
<?xml version="1.0" encoding="UTF-8"?><ajax-response><component id="text8" ><![CDATA[<span wicket:id="text" id="text8" wicketpath="text">[[null]]</span>]]></component>

/t
AjaxRequestHandler$1(PartialPageUpdate).writeComponents(Response, String) line: 243	
		// process component markup
		for (Map.Entry<String, Component> stringComponentEntry : markupIdToComponent.entrySet())
/ volgende	,
		{
			final Component component = stringComponentEntry.getValue();
component	Label  (id=7479)	
[Component id = counter]

			if (!containsAncestorFor(component))
			{
				writeComponent(response, component.getAjaxRegionMarkupId(), component, encoding);
/s
AjaxRequestHandler$1(XmlPartialPageUpdate).writeComponent(Response, String, Component, String) line: 73	
			try
			{
				component.render();
/s
Label(Component).render() line: 2296	
			// Do the render
			internalRender();
/s
Label(Component).internalRender() line: 2345	
		MarkupElement elem = markup.get(0);
<span wicket:id="counter">

				onRender();
/s
Label(WebComponent).onRender() line: 60	
		internalRenderComponent();
/s
Label(Component).internalRenderComponent() line: 2508	
			else
			{
				renderComponentTag(tag);
/s
Label(Component).renderComponentTag(ComponentTag) line: 4034	
			// Write the tag
			tag.writeOutput(getResponse(), !needToRenderTag(null),
				getMarkup().getMarkupResourceStream().getWicketNamespace());
/s
ComponentTag.writeOutput(Response, boolean, String) line: 720	
		response.write("<");
		response.write(getName());
		if (getAttributes().size() > 0)
		{
			for (String key : getAttributes().keySet())
wicket:id
id
wicketpath
				if ((namespacePrefix == null) || (key.startsWith(namespacePrefix) == false))
				{
					response.write(" ");
					response.write(key);
					CharSequence value = getAttribute(key);
counter
counter9
counter
					// attributes without values are possible, e.g.' disabled'
					if (value != null)
					{
						response.write("=\"");
						value = Strings.escapeMarkup(value);
						response.write(value);
						response.write("\"");
<span wicket:id="counter"
<span wicket:id="counter" id="counter9"
<span wicket:id="counter" id="counter9" wicketpath="counter"
		response.write(">");

/t
AjaxRequestHandler$1(XmlPartialPageUpdate).writeComponent(Response, String, Component, String) line: 135	
			try
			{
				component.render();
/d
		response.write("<component id=\"");
		response.write(markupId);
		response.write("\" ><![CDATA[");
		response.write(encode(bodyBuffer.getContents()));
		response.write("]]></component>");
/ response=
<?xml version="1.0" encoding="UTF-8"?><ajax-response><component id="text8" ><![CDATA[<span wicket:id="text" id="text8" wicketpath="text">[[null]]</span>]]></component><component id="counter9" ><![CDATA[<span wicket:id="counter" id="counter9" wicketpath="counter">26</span>]]></component>

/t
AjaxRequestHandler$1(PartialPageUpdate).writeComponents(Response, String) line: 249	
		// process component markup
		for (Map.Entry<String, Component> stringComponentEntry : markupIdToComponent.entrySet())
/ GEEN volgende	,
...
/t
AjaxRequestHandler$1(PartialPageUpdate).writeTo(Response, String) line: 160	
			// process added components
			writeComponents(response, encoding);
/d
			writeFooter(response, encoding);
/s
AjaxRequestHandler$1(XmlPartialPageUpdate).writeFooter(Response, String) line: 147	
		response.write(END_ROOT_ELEMENT);
		} finally {
			if (header != null) {
				// restore a normal header
				page.replace(new HtmlHeaderContainer(HtmlHeaderSectionHandler.HEADER_ID));
/ TODO

/t
AjaxRequestHandler.respond(IRequestCycle) line: 359	
		update.writeTo(bodyResponse, encoding);
/d
/ bodyResponse=
<?xml version="1.0" encoding="UTF-8"?><ajax-response><component id="text8" ><![CDATA[<span wicket:id="text" id="text8" wicketpath="text">[[null]]</span>]]></component><component id="counter9" ><![CDATA[<span wicket:id="counter" id="counter9" wicketpath="counter">26</span>]]></component></ajax-response>

		CharSequence filteredResponse = invokeResponseFilters(bodyResponse);
<?xml version="1.0" encoding="UTF-8"?><ajax-response><component id="text8" ><![CDATA[<span wicket:id="text" id="text8" wicketpath="text">[[null]]</span>]]></component><component id="counter9" ><![CDATA[<span wicket:id="counter" id="counter9" wicketpath="counter">26</span>]]></component></ajax-response>

		response.write(filteredResponse);

/t
RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 899	
				handler.respond(RequestCycle.this);
/d
			}
			finally
			{
				setResponse(originalResponse);
/ TODO

/t
RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 84	
		try
		{
			respond(handler);
/d

/t
RequestCycle.processRequest() line: 223	
			IRequestHandler handler = resolveRequestHandler();
			if (handler != null)
			{
				execute(handler);
/d
/ nandler=
org.apache.wicket.core.request.handler.ListenerInterfaceRequestHandler@2e5176a
/ TODO

/ Einde WICKET AJAX SERVER


/ Einde WICKET 7 LINK JAVASCRIPT

/ WICKET 7 MODAL WINDOW MODALWINDOWSTUDYPAGE

/ proj wicket-testing
/ ModalWindowStudyPage.class

/ NEW	,

/s
/ stack trace
	ModalWindowStudyPage.<init>(PageParameters) line: 24	
/ Gaan we debug	,
	DefaultPageFactory.newPage(Constructor<C>, PageParameters) line: 171	
	DefaultPageFactory.newPage(Class<C>) line: 76	
	DefaultMapperContext.newPageInstance(Class<IRequestablePage>, PageParameters) line: 102	
	PageProvider.resolvePageInstance(Integer, Class<IRequestablePage>, PageParameters, Integer) line: 271	
	PageProvider.getPageInstance() line: 169	
	WebPageRenderer(PageRenderer).getPage() line: 78	
		return getPageProvider().getPageInstance();

	WebPageRenderer.isPageStateless() line: 287	
		return getPage().isPageStateless();

	WebPageRenderer.shouldRenderPageAndWriteResponse(RequestCycle, Url, Url) line: 329	
		return (compatibleProtocols(currentUrl.getProtocol(), targetUrl.getProtocol())) &&
				(neverRedirect(getRedirectPolicy())
			|| ((isOnePassRender() && notForcedRedirect(getRedirectPolicy())) || (targetUrl
				.equals(currentUrl) && notNewAndNotStatelessPage(isNewPageInstance(),
				isPageStateless()))) || (targetUrl.equals(currentUrl) && isRedirectToRender())
			|| (shouldPreserveClientUrl(cycle) && notForcedRedirect(getRedirectPolicy())));

	WebPageRenderer.respond(RequestCycle) line: 193	
		if (shouldRenderPageAndWriteResponse(requestCycle, currentUrl, targetUrl))

	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	

	RequestCycle.processRequest() line: 222	
			IRequestHandler handler = resolveRequestHandler();
org.apache.wicket.core.request.handler.RenderPageRequestHandler@27812957
				execute(handler);

	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ debug	,
/s
ModalWindowStudyPage.<init>(PageParameters) line: 24	
		final ModalWindow modalWindow=new ModalWindow("modalWindow");
/s
ModalWindow.<init>(String) line: 235	
	private static final long serialVersionUID = 1L;

	/** CSS class for window with blue border. */
	public final static String CSS_CLASS_BLUE = "w_blue";

	/** CSS class for window with gray border. */
	public final static String CSS_CLASS_GRAY = "w_silver";

	private static final ResourceReference JAVASCRIPT = new JavaScriptResourceReference(
		ModalWindow.class, "res/modal.js");
	private static final ResourceReference CSS = new CssResourceReference(ModalWindow.class,
		"res/modal.css");

	/** the default id of the content component */
	public static final String CONTENT_ID = "content";

	/** True while the ModalWindows is showing */
	private boolean shown = false;

	/** empty container - used when no component is added */
	private WebMarkupContainer empty;

	private int minimalWidth = 200;
	private int minimalHeight = 200;
	private String cssClassName = CSS_CLASS_BLUE;
	private int initialWidth = 600;
	private int initialHeight = 400;
	private boolean useInitialHeight = true;
	private boolean resizable = true;
	private String widthUnit = "px";
	private String heightUnit = "px";
	private String cookieName;
	private IModel<String> title = null;
	private MaskType maskType = MaskType.SEMI_TRANSPARENT;
	private boolean autoSize = false;
	private boolean unloadConfirmation = true;

	private PageCreator pageCreator = null;
	private CloseButtonCallback closeButtonCallback = null;
	private WindowClosedCallback windowClosedCallback = null;

		init();
/s
ModalWindow.init() line: 258	
		setVersioned(false);
		cookieName = null;

		add(empty = new WebMarkupContainer(getContentId()));
/ getContentId()="content"
		add(newCloseButtonBehavior());
/s
ModalWindow.newCloseButtonBehavior() line: 1233	
		return new CloseButtonBehavior();
/s
ModalWindow$CloseButtonBehavior.<init>(ModalWindow) line: 981	
		public CloseButtonBehavior()
{
/s
ModalWindow$CloseButtonBehavior(AbstractDefaultAjaxBehavior).<init>() line: 56	
/ TODO

/t
ModalWindow(Component).add(Behavior...) line: 4559	
		new Behaviors(this).add(behaviors);
this	ModalWindow  (id=7903)	
/s
Behaviors.add(Behavior...) line: 49	

this	Behaviors  (id=7934)	
	component	ModalWindow  (id=7903)	

		for (Behavior behavior : behaviors)
		{
			internalAdd(behavior);
/s
Behaviors.internalAdd(Behavior) line: 65	
		component.data_add(behavior);
/s
ModalWindow(Component).data_add(Object) line: 562	
		data_insert(-1, object);

this	ModalWindow  (id=7903)	
object	ModalWindow$CloseButtonBehavior  (id=7919)	

		int currentLength = data_length();
0
		if (position == -1)
		{
			position = currentLength;
0
		}
		if (currentLength == 0)
		{
			data = object;
org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow$CloseButtonBehavior@3031bb69

/t
Behaviors.internalAdd(Behavior) line: 68	
		component.data_add(behavior);
/d
		if (behavior.getStatelessHint(component) == false)
		{
			getBehaviorId(behavior);
/ TODO

/t
Behaviors.add(Behavior...) line: 53	
			internalAdd(behavior);
/d
			// Give handler the opportunity to bind this component
			behavior.bind(component);
/s
ModalWindow$CloseButtonBehavior(AbstractAjaxBehavior).bind(Component) line: 68	
		component = hostComponent;
hostComponent	ModalWindow  (id=7903)	

		// call the callback
		onBind();
/s
ModalWindow$CloseButtonBehavior(AbstractDefaultAjaxBehavior).onBind() line: 84	
		getComponent().setOutputMarkupId(true);
/t
ModalWindow.init() line: 264	
		add(newCloseButtonBehavior());
/d
		add(new WindowClosedBehavior());

this	ModalWindow  (id=7903)	
	data	Object[3]  (id=7991)	
		[0]	ModalWindow$CloseButtonBehavior  (id=7919)	
		[1]	Behaviors$BehaviorIdList  (id=7971)	
		[2]	ModalWindow$WindowClosedBehavior  (id=7988)	

/t
ModalWindowStudyPage.<init>(PageParameters) line: 26	
		final ModalWindow modalWindow=new ModalWindow("modalWindow");
/d
		Label label=new Label(modalWindow.getContentId(),"I am a modal window");
/ modalWindow.getContentId()="content"	,

		modalWindow.setContent(label);
/s
ModalWindow.setContent(Component) line: 935	
component	Label  (id=8048)	
		component.setOutputMarkupPlaceholderTag(true);
		component.setVisible(false);
/s
Label(Component).setVisible(boolean) line: 3228	
			// Change visibility
			setFlag(FLAG_VISIBLE, visible);
			onVisibleStateChanged();
/ TODO
/t
ModalWindow.setContent(Component) line: 948	
		component.setVisible(false);
/d
		replace(component);
/s
ModalWindow(MarkupContainer).replace(Component) line: 836	
		if (child.getParent() != this)
/ JA	, 
child.getParenet(()=null
		{
			final Component replaced = children_put(child);

/ Intermezzo

this	ModalWindow  (id=7903)	
	children	WebMarkupContainer  (id=7912)	
	data	Object[3]  (id=7991)	
		[0]	ModalWindow$CloseButtonBehavior  (id=7919)	
		[1]	Behaviors$BehaviorIdList  (id=7971)	
		[2]	ModalWindow$WindowClosedBehavior  (id=7988)	

/ Einde Intermezzo

			if (oldChild.getId().equals(child.getId()))
/ JA
/ oldChild=WebMarkupContainer
/ child=Label
				children = child;

this	ModalWindow  (id=7903)	
	children 	Label (id=...)

/t
ModalWindow(MarkupContainer).replace(Component) line: 839	
			final Component replaced = children_put(child);
/d
this	ModalWindow  (id=7903)	
	children	Label  (id=8048)	

			// first remove the component.
			removedComponent(replaced);
replaced	WebMarkupContainer  (id=7912)	
/s
ModalWindow(MarkupContainer).removedComponent(Component) line: 1475	
		component.detach();
/ TODO
		component.internalOnRemove();
/ TODO
		// Component is removed
		component.setParent(null);
/ TODO
/t
ModalWindow(MarkupContainer).replace(Component) line: 850	
			// first remove the component.
			removedComponent(replaced);
/d
			// The generated markup id remains the same
			child.setMarkupId(replaced);
/ TODO
			// then add the other one.
			addedComponent(child);
child	Label  (id=8048)	
/s
ModalWindow(MarkupContainer).addedComponent(Component) line: 1027	
		// Set child's parent
		child.setParent(this);
/ WAS null, NU ModalWindow	,

/t
ModalWindow.setContent(Component) line: 949	
		replace(component);
/d
		shown = false;
		pageCreator = null;
		return this;
/t
ModalWindowStudyPage.<init>(PageParameters) line: 28	
		modalWindow.setContent(label);
/d
		modalWindow.setTitle("Modal window");
/s
ModalWindow.setTitle(String) line: 748	
		this.title = new Model<>(title);
		return this;
/t
ModalWindowStudyPage.<init>(PageParameters) line: 29	
		modalWindow.setTitle("Modal window");
/d
		add(modalWindow);
/s
ModalWindowStudyPage(MarkupContainer).add(Component...) line: 231	
this	ModalWindowStudyPage  (id=7852)	
	children	null	
	data	null	

			// Add the child to my children
			Component previousChild = children_put(child);
this	ModalWindowStudyPage  (id=7852)	
	children	ModalWindow  (id=7903)	

			addedComponent(child);
/s
ModalWindowStudyPage(MarkupContainer).addedComponent(Component) line: 1025	

		// Set child's parent
		child.setParent(this);
this	ModalWindowStudyPage  (id=7852)	
child	ModalWindow  (id=7903)	

		Page page = findPage();

				childContainer.dequeue();
/ TODO
		if (page != null)
		{
			// tell the page a component has been added first, to allow it to initialize
			page.componentAdded(child);
/s
ModalWindowStudyPage(Page).componentAdded(Component) line: 892	
		if (!component.isAuto())
		{
			dirty();
/s
ModalWindowStudyPage(WebPage).dirty(boolean) line: 326	
		super.dirty(isInitialization);
/ NIETS

/t
ModalWindowStudyPage.<init>(PageParameters) line: 30	
		add(modalWindow);
/d
		AjaxLink ajaxLink=new AjaxLink<Void>("openWindow"){
			@Override
			public void onClick(AjaxRequestTarget target) {
				modalWindow.show(target);
				
			}
		};
		add(ajaxLink);
/s
this	ModalWindowStudyPage  (id=7852)	
	children	ArrayList<E>  (id=8214)	
		elementData	Object[12]  (id=8215)	
			[0]	ModalWindow  (id=7903)	
			[1]	ModalWindowStudyPage$1  (id=8210)	/ AjaxLink	,	

/ Einde NEW

/ RENDER

/s
	ModalWindowStudyPage(Component).internalRender() line: 2345	
	ModalWindowStudyPage(Component).render() line: 2308	
	ModalWindowStudyPage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
		else
		{
			getPage();

			Url beforeRenderUrl = requestCycle.mapUrlFor(getRenderPageRequestHandler());

			// redirect to buffer
->			BufferedWebResponse response = renderPage(beforeRenderUrl, requestCycle);

	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ debug	,
/s
ModalWindowStudyPage(Component).internalRender() line: 2358	
		MarkupElement elem = markup.get(0);

markup	Markup  (id=8270)	
	markupElements	Collections$UnmodifiableRandomAccessList<E>  (id=8281)	
		list	ArrayList<E>  (id=8288)	
			elementData	Object[15]  (id=8289)	
				[0]	RawMarkup  (id=8276)	
				[1]	ComponentTag  (id=8290)	
				[2]	RawMarkup  (id=8291)	
				[3]	ComponentTag  (id=8292)	
				[4]	RawMarkup  (id=8294)	
				[5]	ComponentTag  (id=8295)	
				[6]	RawMarkup  (id=8296)	
				[7]	ComponentTag  (id=8297)	
				[8]	RawMarkup  (id=8298)	
				[9]	ComponentTag  (id=8299)	
				[10]	ComponentTag  (id=8300)	
				[11]	RawMarkup  (id=8301)	
			size	12	
/ TODO (Wanneer created?)

				onRender();
/s
ModalWindowStudyPage(WebPage).onRender() line: 135	
		super.onRender();
/s
ModalWindowStudyPage(Page).onRender() line: 878	
		renderAll(markupStream, null);
/s
ModalWindowStudyPage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1746	
		while (markupStream.hasMore())

			// Render the markup element
			boolean rawMarkup = renderNext(markupStream);
/ Deze method moet je altijd ingaan	,
/s
ModalWindowStudyPage(MarkupContainer).renderNext(MarkupStream) line: 1498	

		// If it's a tag like <wicket..> or <span wicket:id="..." >
		if ((element instanceof ComponentTag) && !markupStream.atCloseTag())
			// Get element as tag
			final ComponentTag tag = (ComponentTag)element;
<head>
			// Get component id
			final String id = tag.getId();

			// Get the component for the id from the given container
			Component component = get(id);
component	HtmlHeaderContainer  (id=8407)	
[HtmlHeaderContainer [Component id = _header_]]

			// Failed to find it?
			if (component != null)
			{
				component.render();
/ TODO (Slaan we nu over)	, 

/ volgende	,
			// Get element as tag
			final ComponentTag tag = (ComponentTag)element;
<a wicket:id="openWindow">
			// Get component id
			final String id = tag.getId();
"openWindow"
			// Get the component for the id from the given container
			Component component = get(id);
this	ModalWindowStudyPage  (id=6902)	
component=[AjaxLink [Component id = openWindow]]

			// Failed to find it?
			if (component != null)
			{
				component.render();

/ Intermezzo
/s
/ stack trace
	ComponentTag.writeOutput(Response, boolean, String) line: 727	
		response.write("<");
		response.write(getName());
		if (getAttributes().size() > 0)
		{
			for (String key : getAttributes().keySet())
			{
				if (key == null)
				{
					continue;
				}

				if ((namespacePrefix == null) || (key.startsWith(namespacePrefix) == false))
				{
					response.write(" ");
					response.write(key);
					CharSequence value = getAttribute(key);

					// attributes without values are possible, e.g.' disabled'
					if (value != null)
					{
						response.write("=\"");
						value = Strings.escapeMarkup(value);
						response.write(value);
						response.write("\"");
		response.write(">");

	ModalWindowStudyPage$1(Component).renderComponentTag(ComponentTag) line: 4034	
			// Write the tag
			tag.writeOutput(getResponse(), !needToRenderTag(null),
				getMarkup().getMarkupResourceStream().getWicketNamespace());

	ModalWindowStudyPage$1(Component).internalRenderComponent() line: 2556	
		// Call any tag handler
		onComponentTag(tag);
...
				renderComponentTag(tag);

	ModalWindowStudyPage$1(MarkupContainer).onRender() line: 1698	
		internalRenderComponent();

	ModalWindowStudyPage$1(Component).internalRender() line: 2380	
				onRender();

	ModalWindowStudyPage$1(Component).render() line: 2308	
			// Do the render
			internalRender();

	ModalWindowStudyPage(MarkupContainer).renderNext(MarkupStream) line: 1524	
			if (component != null)
			{
				component.render();

/ we zien	,
<a wicket:id="openWindow" id="openWindow1" wicketpath="openWindow" href="javascript:;">


/ Einde Intermezzo

/t
ModalWindowStudyPage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1765	
			// Render the markup element
			boolean rawMarkup = renderNext(markupStream);
/d
/ volgende	,
			// Render the markup element
			boolean rawMarkup = renderNext(markupStream);
/s
ModalWindowStudyPage(MarkupContainer).renderNext(MarkupStream) line: 1498	
			// Get element as tag
			final ComponentTag tag = (ComponentTag)element;
<div wicket:id="modalWindow">

			// Get component id
			final String id = tag.getId();

			// Get the component for the id from the given container
			Component component = get(id);
component	ModalWindow  (id=6924)	

			// Failed to find it?
			if (component != null)
			{
				component.render();

/ Intermezzo

	ModalWindow(Component).internalRenderComponent() line: 2521	
		// Call any tag handler
->		onComponentTag(tag);
			else
			{
->>				renderComponentTag(tag);


	ModalWindow(MarkupContainer).onRender() line: 1698	
		internalRenderComponent();

	ModalWindow(Component).internalRender() line: 2380	
				onRender();

	ModalWindow(Component).render() line: 2308	
			// Do the render
			internalRender();

	ModalWindowStudyPage(MarkupContainer).renderNext(MarkupStream) line: 1524	
			// Failed to find it?
			if (component != null)
			{
				component.render();

/ Einde Intermezzo

/ we gaan debug	,
/ Bij ->
/s
	ModalWindow.onComponentTag(ComponentTag) line: 887	
		super.onComponentTag(tag);
/s
	ModalWindow(Component).onComponentTag(ComponentTag) line: 3900	
		// We can't try to get the ID from markup. This could be different than
		// id returned from getMarkupId() prior first rendering the component
		// (due to transparent resolvers and borders which break the 1:1
		// component <-> markup relation)
		if (getFlag(FLAG_OUTPUT_MARKUP_ID))
		{
			tag.putInternal(MARKUP_ID_ATTR_NAME, getMarkupId());
"modalWindow2"
/t
	ModalWindow.onComponentTag(ComponentTag) line: 887	
		super.onComponentTag(tag);
/d
		tag.put("style", "display:none");

/ Bij ->>
/s
ModalWindow(Component).renderComponentTag(ComponentTag) line: 4034	
			// Write the tag
			tag.writeOutput(getResponse(), !needToRenderTag(null),
				getMarkup().getMarkupResourceStream().getWicketNamespace());
/s
ComponentTag.writeOutput(Response, boolean, String) line: 720	
		response.write("<");
		response.write(getName());
<div
		if (getAttributes().size() > 0)
		{
			for (String key : getAttributes().keySet())
wicket:id
id
wicketpath
style
			{
				if ((namespacePrefix == null) || (key.startsWith(namespacePrefix) == false))
				{
					response.write(" ");
					response.write(key);
					CharSequence value = getAttribute(key);
modalWindow
modalWindow2
modalWindow
display:none
					// attributes without values are possible, e.g.' disabled'
					if (value != null)
					{
						response.write("=\"");
						value = Strings.escapeMarkup(value);
						response.write(value);
						response.write("\"");
		response.write(">");
<div wicket:id="modalWindow" id="modalWindow2" wicketpath="modalWindow" style="display:none"

/t
ModalWindow(Component).internalRenderComponent() line: 2565	
			else
			{
				renderComponentTag(tag);
/d
			markupStream.next();

			// Render the body only if open-body-close. Do not render if open-close.
			if (tag.isOpen())
/ JA
/tag=<div wicket:id="modalWindow" id="modalWindow2" wicketpath="modalWindow" style="display:none">

				// Render the body. The default strategy will simply call the component's
				// onComponentTagBody() implementation.
				getMarkupSourcingStrategy().onComponentTagBody(this, markupStream, tag);
/s
PanelMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 112	
		renderAssociatedMarkup(component);
/s
PanelMarkupSourcingStrategy(AssociatedMarkupSourcingStrategy).renderAssociatedMarkup(Component) line: 77	
		((MarkupContainer)component).renderAssociatedMarkup(tagName, "Markup for a " + tagName +
			" component must begin a tag like '<wicket:" + tagName + ">'");
/s
ModalWindow(MarkupContainer).renderAssociatedMarkup(String, String) line: 782	
			renderComponentTag(associatedMarkupOpenTag);
/s
ModalWindow(Component).renderComponentTag(ComponentTag) line: 4034	
			// Write the tag
			tag.writeOutput(getResponse(), !needToRenderTag(null),
				getMarkup().getMarkupResourceStream().getWicketNamespace());
/s
WicketTag(ComponentTag).writeOutput(Response, boolean, String) line: 722	

		response.write("<");
<div wicket:id="modalWindow" id="modalWindow2" wicketpath="modalWindow" style="display:none"><

		if (getNamespace() != null)
		{
			response.write(getNamespace());
			response.write(":");
		}
		<div wicket:id="modalWindow" id="modalWindow2" wicketpath="modalWindow" style="display:none"><wicket:

		response.write(getName());
		<div wicket:id="modalWindow" id="modalWindow2" wicketpath="modalWindow" style="display:none"><wicket:panel

		if (getAttributes().size() > 0)
		{
			for (String key : getAttributes().keySet())
xmlns:wicket
			{
				if ((namespacePrefix == null) || (key.startsWith(namespacePrefix) == false))
				{
					response.write(" ");
					response.write(key);
					CharSequence value = getAttribute(key);
http://wicket.apache.org

					// attributes without values are possible, e.g.' disabled'
					if (value != null)
					{
						response.write("=\"");
						value = Strings.escapeMarkup(value);
						response.write(value);
						response.write("\"");
		response.write(">");
<div wicket:id="modalWindow" id="modalWindow2" wicketpath="modalWindow" style="display:none"><wicket:panel xmlns:wicket="http://wicket.apache.org">

/t
ModalWindow(MarkupContainer).renderAssociatedMarkup(String, String) line: 797	
			renderComponentTag(associatedMarkupOpenTag);
/d
			renderComponentTagBody(associatedMarkupStream, associatedMarkupOpenTag);
/s
ModalWindow(MarkupContainer).renderComponentTagBody(MarkupStream, ComponentTag) line: 1713	
		// If the open tag requires a close tag
		boolean render = openTag.requiresCloseTag();
true
		if (render)
		{
			renderAll(markupStream, openTag);
/s
ModalWindow(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1746	
/=
	protected final void renderAll(final MarkupStream markupStream, final ComponentTag openTag)

markupStream=
[markup = jar:file:/home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28/webapps/wicket-testing/WEB-INF/lib/wicket-extensions-7.2.0.jar!/org/apache/wicket/extensions/ajax/markup/html/modal/ModalWindow.html
<wicket:panel xmlns:wicket="http://wicket.apache.org">
	<div wicket:id="content">
	</div>
</wicket:panel>, index = 1, current = [Raw markup]]

openTag=
<wicket:panel xmlns:wicket="http://wicket.apache.org">

/ Intermezzo

/ Inderdaad	, we zien in wicket-extensions	,

$ less ModalWindow.html

<wicket:panel xmlns:wicket="http://wicket.apache.org">
	<div wicket:id="content">
	</div>
</wicket:panel>

/ Einde Intermezzo

			// Render the markup element
			boolean rawMarkup = renderNext(markupStream);
/s
ModalWindow(MarkupContainer).renderNext(MarkupStream) line: 1498	
		// Get the current markup element
		final MarkupElement element = markupStream.get();
<div wicket:id="content">

			// Get element as tag
			final ComponentTag tag = (ComponentTag)element;
v wicket:id="content">
			// Get component id
			final String id = tag.getId();

			// Get the component for the id from the given container
			Component component = get(id);
component	Label  (id=6934)	
[Component id = content]

/ Intermezzo

$ less ModalWindow.html

<wicket:panel xmlns:wicket="http://wicket.apache.org">
	<div wicket:id="content">
	</div>
</wicket:panel>

$ vi ModalWindow.java

	private void init()
	{
		add(empty = new WebMarkupContainer(getContentId()));

	public String getContentId()
	{
		return CONTENT_ID;
"content"

$ vi ModalWindowStudy2Page.java

	public ModalWindowStudyPage(PageParameters pageParameters) {
		final ModalWindow modalWindow=new ModalWindow("modalWindow");
		Label label=new Label(modalWindow.getContentId(),"I am a modal window");
		modalWindow.setContent(label);

/ Dus inderdaad een Label	,

/ Einde Intermezzo

			// Failed to find it?
			if (component != null)
			{
				component.render();
/s
Label(Component).render() line: 2308	
			// Do the render
			internalRender();
/s
Label(Component).internalRender() line: 2401	
		// Determine if component is visible using it's authorization status
		// and the isVisible property.
		if (determineVisibility())
/ NEE
/ Dit is normaal altijd JA	, 
		// elem is null when rendering a page
		else if ((elem != null) && (elem instanceof ComponentTag))
elem=<div wicket:id="content">
		{
			if (getFlag(FLAG_PLACEHOLDER))
			{
				renderPlaceholderTag((ComponentTag)elem, getResponse());
/s
Label(Component).renderPlaceholderTag(ComponentTag, Response) line: 2446	

tag=
<div wicket:id="content">
response=
<div wicket:id="modalWindow" id="modalWindow2" wicketpath="modalWindow" style="display:none"><wicket:panel xmlns:wicket="http://wicket.apache.org">

/ Intermezzo

$ less ModalWindowStudy2Page.class
		Label label=new Label(modalWindow.getContentId(),"I am a modal window");
		modalWindow.setContent(label);

/ Dus er had WH in <wicket:panel ...>I am a modal window</wicket:panel> moeten komen	, 
/ TODO

/ Einde Intermezzo

		String ns = Strings.isEmpty(tag.getNamespace()) ? null : tag.getNamespace() + ':';
null
		response.write("<");

		response.write(tag.getName());
		response.write(" id=\"");
		response.write(getAjaxRegionMarkupId());
		response.write("\" style=\"display:none\"></");

		response.write(tag.getName());
		response.write(">");

		<div wicket:id="modalWindow" id="modalWindow2" wicketpath="modalWindow" style="display:none"><wicket:panel xmlns:wicket="http://wicket.apache.org">
	<div id="content3" style="display:none"></div>

/t
ModalWindow(MarkupContainer).renderAssociatedMarkup(String, String) line: 799	

			renderComponentTag(associatedMarkupOpenTag);
...
			renderComponentTagBody(associatedMarkupStream, associatedMarkupOpenTag);
/d
			renderClosingComponentTag(associatedMarkupStream, associatedMarkupOpenTag, false);
/s
ModalWindow(Component).renderClosingComponentTag(MarkupStream, ComponentTag, boolean) line: 4284	
		// Tag should be open tag and not openclose tag
		if (openTag.isOpen())
/ JA
openTag=<wicket:panel xmlns:wicket="http://wicket.apache.org">
		{
			// If we found a close tag and it closes the open tag, we're good
			if (markupStream.atCloseTag() && markupStream.getTag().closes(openTag))
			{
				// Render the close tag
				if ((renderBodyOnly == false) && needToRenderTag(openTag))
				{
					getResponse().write(openTag.syntheticCloseTagString());
</wicket:panel>

/t
ModalWindow(Component).internalRenderComponent() line: 2570	
			else
			{
				renderComponentTag(tag);
/d
tag=
<div wicket:id="modalWindow" id="modalWindow2" wicketpath="modalWindow" style="display:none">

				// Render close tag
				if (openTag.isOpen())
				{
					renderClosingComponentTag(markupStream, tag, getRenderBodyOnly());
</div>

/t
ModalWindowStudyPage(MarkupContainer).renderNext(MarkupStream) line: 1539	
			// Failed to find it?
			if (component != null)
			{
				component.render();
/d
element=
<div wicket:id="modalWindow">

/t
WebPageRenderer.respond(RequestCycle) line: 238	
			// redirect to buffer
			BufferedWebResponse response = renderPage(beforeRenderUrl, requestCycle);
/d
response=
<!DOCTYPE html>
<html>
<head>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.resource.JQueryResourceReference/jquery/jquery-2.2.0-ver-1455723568000.js"></script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-event-jquery-ver-1455723568000.js"></script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-ajax-jquery-ver-1455723568000.js"></script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-ajax-jquery-debug-ver-1455723568000.js"></script>
<script type="text/javascript" id="wicket-ajax-debug-enable">
/*<![CDATA[*/
Wicket.Ajax.DebugWindow.enabled=true;
/*]]>*/
</script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow/res/modal-ver-1455723568000.js"></script>
<link rel="stylesheet" type="text/css" href="./wicket/resource/org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow/res/modal-ver-1455723568000.css" />
<script type="text/javascript" id="wicket-ajax-base-url">
/*<![CDATA[*/
Wicket.Ajax.baseUrl="?0";
/*]]>*/
</script>

<meta charset="UTF-8">
<title>Insert title here</title>
<script type="text/javascript" >
/*<![CDATA[*/
Wicket.Event.add(window, "domready", function(event) { 
Wicket.Ajax.ajax({"u":"./?0-1.IBehaviorListener.0-openWindow","c":"openWindow1","e":"click"});;
Wicket.Event.publish(Wicket.Event.Topic.AJAX_HANDLERS_BOUND);
;});
/*]]>*/
</script>
</head>
<body>
		<h2>Modal window example</h2>
		<a wicket:id="openWindow" id="openWindow1" wicketpath="openWindow" href="javascript:;">open window</a>
		<div wicket:id="modalWindow" id="modalWindow2" wicketpath="modalWindow" style="display:none"><wicket:panel xmlns:wicket="http://wicket.apache.org">
	<div id="content3" style="display:none"></div>
</wicket:panel></div>
</body>
</html> 

/ Intermezzo

/ Inderdaad	, ons label zit niet in <div id="content3" style="display:none"></div>	, 

/ Einde Intermezzo

			else
			{
				storeBufferedResponse(afterRenderUrl, response);

				redirectTo(afterRenderUrl, requestCycle);
afterRenderUrl=?0
/ TODO


/ Einde RENDER

/ CLICK LINK, SHOW MODAL WINDOW

/ In JS	,
/s
				jQuery.each(attrs.e, function (idx, evt) {
					Wicket.Event.add(attrs.c, evt, function (jqEvent, data) {
->						var call = new Wicket.Ajax.Call();
						var attributes = jQuery.extend({}, attrs);
c: "openWindow1"
e: Array[1]
	0: "click"
	length: 1
	__proto__: Array[0]
u: "./?0-1.IBehaviorListener.0-openWindow"
__proto__: Object
						else {
							call.ajax(attributes);
...
/s
			// execute the request
			var jqXHR = jQuery.ajax({
				url: attrs.u,
"./?0-1.IBehaviorListener.0-openWindow"
				type: attrs.m,
"GET"
				context: self,
				beforeSend: function (jqXHR, settings) {
					...
				data: data,
""
				dataType: attrs.dt,
"xml"
				async: attrs.async,
true
				timeout: attrs.rt,
0
				cache: false,
				headers: headers,
				success: function(data, textStatus, jqXHR) {
					if (attrs.wr) {
						self.processAjaxResponse(data, textStatus, jqXHR, context);
					} else {
						self._executeHandlers(attrs.sh, attrs, jqXHR, data, textStatus);
						we.publish(topic.AJAX_CALL_SUCCESS, attrs, jqXHR, data, textStatus);
					}
				},
				error: function(jqXHR, textStatus, errorMessage) {
					self.failure(context, jqXHR, errorMessage, textStatus);
				},
				complete: function (jqXHR, textStatus) {

					context.steps.push(jQuery.proxy(function (notify) {
			});
...

/ Einde JS

/ SERVER

/s
RequestCycle.processRequest() line: 220	
			IRequestHandler handler = resolveRequestHandler();
org.apache.wicket.core.request.handler.ListenerInterfaceRequestHandler@17ad8429
				execute(handler);
...
/s
ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 234	
		invokeListener();
/s
ListenerInterfaceRequestHandler.invokeListener() line: 248	
			try
			{
				Behavior behavior = getComponent().getBehaviorById(behaviorId);
behavior	AjaxLink$1  (id=6944)	
				listenerInterface.invoke(getComponent(), behavior);
listenerInterface=
[RequestListenerInterface name=IBehaviorListener, method=public abstract void org.apache.wicket.behavior.IBehaviorListener.onRequest()]
/s
RequestListenerInterface.invoke(IRequestableComponent, Behavior) line: 241	
		internalInvoke(component, behavior);
/s
RequestListenerInterface.internalInvoke(Component, Object) line: 258	
			method.invoke(target);
method=
public abstract void org.apache.wicket.behavior.IBehaviorListener.onRequest()
target=
AjaxLink$1=	new AjaxEventBehavior(event)

/ Intermezzo

 AjaxEventBehavior extends AbstractDefaultAjaxBehavior extends AbstractAjaxBehavior extends Behavior implements IBehaviorListener

/ Einde Intermezzo
/s
AjaxLink$1(AbstractDefaultAjaxBehavior).onRequest() line: 587	

		WebApplication app = (WebApplication)getComponent().getApplication();
		AjaxRequestTarget target = app.newAjaxRequestTarget(getComponent().getPage());
		...
		respond(target);
/s
AjaxLink$1(AjaxEventBehavior).respond(AjaxRequestTarget) line: 155	
		onEvent(target);
/s
AjaxLink$1.onEvent(AjaxRequestTarget) line: 84	
/=
		return new AjaxEventBehavior(event)
		{
			@Override
			protected void onEvent(AjaxRequestTarget target)
			{
->				onClick(target);
/s
ModalWindowStudyPage$1.onClick(AjaxRequestTarget) line: 33	
		AjaxLink ajaxLink=new AjaxLink<Void>("openWindow"){
			@Override
			public void onClick(AjaxRequestTarget target) {
->				modalWindow.show(target);
/s
ModalWindow.show(IPartialPageRequestHandler) line: 366	
		if (shown == false)
		{
			getContent().setVisible(true);
/s
ModalWindow.getContent() line: 899	
		return get(getContentId());
/t
/s
Label(Component).setVisible(boolean) line: 3222	
this	Label  (id=6934)	
		// Is new visibility state a change?
		if (visible != getFlag(FLAG_VISIBLE))
		{
			// record component's visibility change
			addStateChange();

			// Change visibility
			setFlag(FLAG_VISIBLE, visible);
			onVisibleStateChanged();
		}
		return this;
/t
ModalWindow.show(IPartialPageRequestHandler) line: 369	
			getContent().setVisible(true);
/d
			target.add(this);
this	ModalWindow  (id=6924)	
			target.appendJavaScript(getWindowOpenJavaScript());
/s
ModalWindow.getWindowOpenJavaScript() line: 1017	
		if (isCustomComponent())
/s
ModalWindow.isCustomComponent() line: 909	
		return getContent() != empty;
/s
ModalWindow.getContent() line: 899	
		return get(getContentId());
/ WH Label, id="content"
/t
ModalWindow.getWindowOpenJavaScript() line: 1017	
		if (isCustomComponent())
/s
		return getContent() != empty;
/t
/ JA
/ we hebben empty vervangen door een label	,
		{
			buffer.append("var element = document.getElementById(\"");
			buffer.append(getContentMarkupId());
			buffer.append("\");\n");
		}
buffer=
var element = document.getElementById("content3");

		appendAssignment(buffer, "settings.minWidth", getMinimalWidth());
		appendAssignment(buffer, "settings.minHeight", getMinimalHeight());
		appendAssignment(buffer, "settings.className", getCssClassName());
		appendAssignment(buffer, "settings.width", getInitialWidth());
buffer=
var element = document.getElementById("content3");
var settings = new Object();
settings.minWidth=200;
settings.minHeight=200;
settings.className="w_blue";
settings.width=600;

		if ((isUseInitialHeight() == true) || (isCustomComponent() == false))
		{
			appendAssignment(buffer, "settings.height", getInitialHeight());
		appendAssignment(buffer, "settings.resizable", isResizable());
buffer=
var element = document.getElementById("content3");
var settings = new Object();
settings.minWidth=200;
settings.minHeight=200;
settings.className="w_blue";
settings.width=600;
settings.height=400;
settings.resizable=true;

		if (isCustomComponent() == false)
/ NEE
/ Hij is wel custom	, we hebben empty vervangen door een Label	,
/s
	/**
	 * Returns true if user has added own component to the window.
	 * 
	 * @return True if user has added own component to the window, false otherwise.
	 */
	protected boolean isCustomComponent()
	{
		return getContent() != empty;
/t
///////////////////////
/ Dus GEEN iframe	,

		else
		{
			buffer.append("settings.element=element;\n");

		String title = getTitle() != null ? getTitle().getObject() : null;
getTitle(()=
Model:classname=[org.apache.wicket.model.Model]:object=[Modal window]
title=
Modal window
		if (title != null)
		{
			String escaped = getDefaultModelObjectAsString(title);
/ title is een model	,
			appendAssignment(buffer, "settings.title", escaped);
		}
var element = document.getElementById("content3");
var settings = new Object();
settings.minWidth=200;
settings.minHeight=200;
settings.className="w_blue";
settings.width=600;
settings.height=400;
settings.resizable=true;
settings.element=element;
settings.title="Modal window";

		else if (getMaskType() == MaskType.SEMI_TRANSPARENT)
		{
			buffer.append("settings.mask=\"semi-transparent\";\n");

		appendAssignment(buffer, "settings.autoSize", autoSize);

		appendAssignment(buffer, "settings.unloadConfirmation", showUnloadConfirmation());
	/**
	 * Returns whether the user should be asked before leaving the page.
true

		// in case user is interested in window close callback or we have a pagemap to clean attach
		// notification request
		if (windowClosedCallback != null)
		{
			WindowClosedBehavior behavior = getBehaviors(WindowClosedBehavior.class).get(0);
behavior	ModalWindow$WindowClosedBehavior  (id=6926)	
			buffer.append("settings.onClose = function() { ");
			buffer.append(behavior.getCallbackScript());
/s
ModalWindow$WindowClosedBehavior(AbstractDefaultAjaxBehavior).getCallbackScript() line: 453	
		return getCallbackScript(getComponent());
getComponent()= ModalWindow
/s
ModalWindow$WindowClosedBehavior(AbstractDefaultAjaxBehavior).getCallbackScript(Component) line: 465	
		CharSequence ajaxAttributes = renderAjaxAttributes(component);
/s
	 * 				{
	 * 					u: 'editable-label?6-1.IBehaviorListener.0-text1-label',  // url
	 * 					m: 'POST',          // method name. Default: 'GET'
	 * 					c: 'label7',        // component id (String) or window for page
	 * 					e: 'click',         // event name
	 * 					sh: [],             // list of success handlers
	 * 					fh: [],             // list of failure handlers
	 * 					pre: [],            // list of preconditions. If empty set default : Wicket.$(settings{c}) !== null
	 * 					ep: {},             // extra parameters
	 * 					async: true|false,  // asynchronous XHR or not
	 * 					ch: 'someName|d',   // AjaxChannel
	 * 					i: 'indicatorId',   // indicator component id
	 * 					ad: true,           // allow default
	 * 				}
ModalWindow$WindowClosedBehavior(AbstractDefaultAjaxBehavior).renderAjaxAttributes(Component) line: 184	
		AjaxRequestAttributes attributes = getAttributes();
/ TODO
		return renderAjaxAttributes(component, attributes);
/s
ModalWindow$WindowClosedBehavior(AbstractDefaultAjaxBehavior).renderAjaxAttributes(Component, AjaxRequestAttributes) line: 197	
		JSONObject attributesJson = new JSONObject();

			attributesJson.put(AjaxAttributeName.URL.jsonName(), getCallbackUrl());
/s
ModalWindow$WindowClosedBehavior(AbstractAjaxBehavior).getCallbackUrl() line: 86	
		rli = IBehaviorListener.INTERFACE;
		return getComponent().urlFor(this, rli, new PageParameters());
this= ModalWindow$WindowClosedBehavior  (id=6926)	
/s
ModalWindow(Component).urlFor(Behavior, RequestListenerInterface, PageParameters) line: 3347	
/=
	public final CharSequence urlFor(final Behavior behaviour,
		final RequestListenerInterface listener, final PageParameters parameters)
this	ModalWindow  (id=6924)	
behaviour	ModalWindow$WindowClosedBehavior  (id=6926)	
		int id = getBehaviorId(behaviour);
1
		IRequestHandler handler = createRequestHandler(listener, parameters, id);
listener	RequestListenerInterface  (id=7624)	
/s
ModalWindow(Component).createRequestHandler(RequestListenerInterface, PageParameters, Integer) line: 3358	
		Page page = getPage();
		PageAndComponentProvider provider = new PageAndComponentProvider(page, this, parameters);

		if (page.isPageStateless()
			|| (getApplication().getPageSettings().getRecreateBookmarkablePagesAfterExpiry()
				&& page.isBookmarkable() && page.wasCreatedBookmarkable()))
		{
/ JA
/ TODO
			return new BookmarkableListenerInterfaceRequestHandler(provider, listener, id);
/t
ModalWindow(Component).urlFor(Behavior, RequestListenerInterface, PageParameters) line: 3349	
		IRequestHandler handler = createRequestHandler(listener, parameters, id);
/d
		return getRequestCycle().urlFor(handler);
/ TODO
/t
ModalWindow$WindowClosedBehavior(AbstractDefaultAjaxBehavior).renderAjaxAttributes(Component, AjaxRequestAttributes) line: 202	
			attributesJson.put(AjaxAttributeName.URL.jsonName(), getCallbackUrl());
{"u":"./?0-1.IBehaviorListener.1-modalWindow"}

			if (component instanceof Page == false)
/ JA	, 
component=ModalWindow
			{
				String componentId = component.getMarkupId();
				attributesJson.put(AjaxAttributeName.MARKUP_ID.jsonName(), componentId);
{"u":"./?0-1.IBehaviorListener.1-modalWindow","c":"modalWindow2"}

		String attributesAsJson = attributesJson.toString();
attributesAsJson	"{"u":"./?0-1.IBehaviorListener.1-modalWindow","c":"modalWindow2"}" (id=7774)	
		return attributesAsJson;
/t
ModalWindow$WindowClosedBehavior(AbstractDefaultAjaxBehavior).getCallbackScript(Component) line: 466	
		CharSequence ajaxAttributes = renderAjaxAttributes(component);
/d
{"u":"./?0-1.IBehaviorListener.1-modalWindow","c":"modalWindow2"}
		return "Wicket.Ajax.ajax(" + ajaxAttributes + ");";

/t
ModalWindow.getWindowOpenJavaScript() line: 1111	
		// notification request
		if (windowClosedCallback != null)
		{
			WindowClosedBehavior behavior = getBehaviors(WindowClosedBehavior.class).get(0);
			buffer.append("settings.onClose = function() { ");
			buffer.append(behavior.getCallbackScript());
/d
			buffer.append(" };\n");

			haveCloseCallback = true;
		}
buffer=
var element = document.getElementById("content3");
var settings = new Object();
settings.minWidth=200;
settings.minHeight=200;
settings.className="w_blue";
settings.width=600;
settings.height=400;
settings.resizable=true;
settings.element=element;
settings.title="Modal window";
settings.mask="semi-transparent";
settings.autoSize=false;
settings.unloadConfirmation=true;
settings.onClose = function() { Wicket.Ajax.ajax({"u":"./?0-1.IBehaviorListener.1-modalWindow","c":"modalWindow2"}); };

		postProcessSettings(buffer);
/ TODO
		buffer.append(getShowJavaScript());
/ TODO
		return buffer.toString();
buffer=
var element = document.getElementById("content3");
var settings = new Object();
settings.minWidth=200;
settings.minHeight=200;
settings.className="w_blue";
settings.width=600;
settings.height=400;
settings.resizable=true;
settings.element=element;
settings.title="Modal window";
settings.mask="semi-transparent";
settings.autoSize=false;
settings.unloadConfirmation=true;
settings.onClose = function() { Wicket.Ajax.ajax({"u":"./?0-1.IBehaviorListener.1-modalWindow","c":"modalWindow2"}); };
window.setTimeout(function(){
  Wicket.Window.create(settings).show();
}, 0);

/t
ModalWindow.show(IPartialPageRequestHandler) line: 370	
			target.appendJavaScript(getWindowOpenJavaScript());
/pd
/s
AjaxRequestHandler.appendJavaScript(CharSequence) line: 263	
		update.appendJavaScript(javascript);

this	AjaxRequestHandler  (id=9881)	
	update	AjaxRequestHandler$1  (id=9971)	
		appendJavaScripts	ArrayList<E>  (id=9972)	
/ [] met 1 string	,
[var element = document.getElementById("content3");
var settings = new Object();
settings.minWidth=200;
settings.minHeight=200;
settings.className="w_blue";
settings.width=600;
settings.height=400;
settings.resizable=true;
settings.element=element;
settings.title="Modal window";
settings.mask="semi-transparent";
settings.autoSize=false;
settings.unloadConfirmation=true;
settings.onClose = function() { Wicket.Ajax.ajax({"u":"./?0-1.IBehaviorListener.1-modalWindow","c":"modalWindow2"}); };
window.setTimeout(function(){
  Wicket.Window.create(settings).show();
}, 0);
]

/t
ModalWindow.show(IPartialPageRequestHandler) line: 371	
			target.appendJavaScript(getWindowOpenJavaScript());
/d
			shown = true;
...
/t
/ WH
/ TODO
RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 97	
		try
		{
			respond(handler);
/d
handler	ListenerInterfaceRequestHandler  (id=9868)	

		IRequestHandler scheduled = scheduledAfterCurrent;
[AjaxRequestHandler@-1146991140 responseObject [org.apache.wicket.ajax.AjaxRequestHandler$1@414e52b1]

		else if (scheduled != null)
		{
			execute(scheduled);
/s
RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
		try
		{
			respond(handler);
handler	AjaxRequestHandler  (id=9881)	
/s
RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
			try
			{
				handler.respond(RequestCycle.this);
/s
AjaxRequestHandler.respond(IRequestCycle) line: 324	
		final StringResponse bodyResponse = new StringResponse();
		update.writeTo(bodyResponse, encoding);
/s
AjaxRequestHandler$1(PartialPageUpdate).writeTo(Response, String) line: 155	

this	AjaxRequestHandler$1  (id=9971)	
/ 'n XmlPartialPageUpdate	, 

/ Intermezzo

       public AjaxRequestHandler(final Page page)
        {
                this.page = Args.notNull(page, "page");

                update = new XmlPartialPageUpdate(page)

/ Einde Intermezzo

		try {
			writeHeader(response, encoding);
response	StringResponse  (id=10096)	
	out	AppendingStringBuffer  (id=10098)	
<?xml version="1.0" encoding="UTF-8"?><ajax-response>

			onBeforeRespond(response);
/s
AjaxRequestHandler$1.onBeforeRespond(Response) line: 125	
/=
	public AjaxRequestHandler(final Page page)
	{
		update = new XmlPartialPageUpdate(page)
		{
			/**
			 * Freezes the {@link AjaxRequestHandler#listeners} before firing the event and
			 * un-freezes them afterwards to allow components to add more
			 * {@link AjaxRequestTarget.IListener}s for the second event.
			 */
			@Override
			protected void onBeforeRespond(final Response response)
			{
->				...	
/ NIETS

/t
AjaxRequestHandler$1(PartialPageUpdate).writeTo(Response, String) line: 158	
			onBeforeRespond(response);
/d
			// process added components
			writeComponents(response, encoding);
/s
AjaxRequestHandler$1(PartialPageUpdate).writeComponents(Response, String) line: 245	
		// process component markup
		for (Map.Entry<String, Component> stringComponentEntry : markupIdToComponent.entrySet())
		{
			final Component component = stringComponentEntry.getValue();
[ModalWindow [Component id = modalWindow]]
			if (!containsAncestorFor(component))
			{
				writeComponent(response, component.getAjaxRegionMarkupId(), component, encoding);
/s
ModalWindow(Component).getAjaxRegionMarkupId() line: 2493	
		for (Behavior behavior : getBehaviors())
/ 2 behaviors	, maar verder NIETS	,

		if (markupId == null)
		{
			markupId = getMarkupId();
modalWindow2
/t
AjaxRequestHandler$1(PartialPageUpdate).writeComponents(Response, String) line: 245	
				writeComponent(response, component.getAjaxRegionMarkupId(), component, encoding);
/s
AjaxRequestHandler$1(XmlPartialPageUpdate).writeComponent(Response, String, Component, String) line: 66	
		component.setOutputMarkupId(true);

		// Initialize temporary variables
		final Page page = component.findParent(Page.class);
page	ModalWindowStudyPage  (id=9950)	

		try
		{
			bodyBuffer.reset();
			
			page.startComponentRender(component);
/ TODO
			try
			{
				component.prepareForRender();
/s
ModalWindow(Component).prepareForRender() line: 2254	
		internalPrepareForRender(true);
/s
ModalWindow(Component).internalPrepareForRender(boolean) line: 2215	
		beforeRender();
/s
ModalWindow(Component).beforeRender() line: 1017	
		else
		{
			internalBeforeRender();
/s
ModalWindow(Component).internalBeforeRender() line: 949	
			onBeforeRender();
/s
ModalWindow.onBeforeRender() line: 854	
		shown = makeContentVisible();
/s
ModalWindow.makeContentVisible() line: 877	
		// if user is refreshing whole page, the window will not be shown
		if (getWebRequest().isAjax() == false)
/s
		return Strings.isTrue(getHeader(HEADER_AJAX)) ||
/ JA
			Strings.isTrue(getRequestParameters().getParameterValue(PARAM_AJAX).toString());
/t
ModalWindow.makeContentVisible() line: 877	
		// if user is refreshing whole page, the window will not be shown
		if (getWebRequest().isAjax() == false)
/d
/ NEE
		else
		{
			return shown;
/t
ModalWindow.onBeforeRender() line: 854	
		shown = makeContentVisible();
true
		getContent().setOutputMarkupId(true);
/ Label	,
		getContent().setVisible(shown);
...
/t
AjaxRequestHandler$1(XmlPartialPageUpdate).writeComponent(Response, String, Component, String) line: 101	
			try
			{
				component.prepareForRender();
/d
				// render any associated headers of the component
				writeHeaderContribution(response, component);
/s
AjaxRequestHandler$1(PartialPageUpdate).writeHeaderContribution(Response, Component) line: 481	

response=<?xml version="1.0" encoding="UTF-8"?><ajax-response>

		// create the htmlheadercontainer if needed
		if (header == null)
		{
			header = new PartialHtmlHeaderContainer(this);
			page.addOrReplace(header);
/s
ModalWindowStudyPage(MarkupContainer).addOrReplace(Component...) line: 267	
		for (Component child : children)
child	PartialPageUpdate$PartialHtmlHeaderContainer  (id=11664)	
			else
			{
				replace(child);
/s
ModalWindowStudyPage(MarkupContainer).replace(Component) line: 836	
/=
	public MarkupContainer replace(final Component child)

this	ModalWindowStudyPage  (id=11660)	
	children	ArrayList<E>  (id=11678)	
		elementData	Object[12]  (id=11680)	
			[0]	ModalWindow  (id=11641)	
			[1]	ModalWindowStudyPage$1  (id=11640)	
			[2]	HtmlHeaderContainer  (id=11681)	
		size	3	
child	PartialPageUpdate$PartialHtmlHeaderContainer  (id=11664)	



		if (child.getParent() != this)
		{
			final Component replaced = children_put(child);
this	ModalWindowStudyPage  (id=11660)	
child	PartialPageUpdate$PartialHtmlHeaderContainer  (id=11664)	
/s
ModalWindowStudyPage(MarkupContainer).children_put(Component) line: 1300	
		if (children instanceof List)
		{
			List<Component> childrenList = children();

			// first see if the child replaces an existing child
			for (int i = 0; i < childrenList.size(); i++)
			{
				Component curChild = childrenList.get(i);
				if (curChild.getId().equals(child.getId()))
/ JA, i=2	, 
				{
					return childrenList.set(i, child);
/ Sets childrenList[2]=child	, en returns de oude die er stond	,
/t
ModalWindowStudyPage(MarkupContainer).replace(Component) line: 839	
			final Component replaced = children_put(child);
replaced	HtmlHeaderContainer  (id=11681)	

			// first remove the component.
			removedComponent(replaced);

			// The generated markup id remains the same
			child.setMarkupId(replaced);
/ TODO
			// then add the other one.
			addedComponent(child);

/t
AjaxRequestHandler$1(PartialPageUpdate).writeHeaderContribution(Response, Component) line: 485	
			page.addOrReplace(header);
/d
		// save old response, set new
		Response oldResponse = requestCycle.setResponse(headerBuffer);
headerBuffer	PartialPageUpdate$ResponseBuffer  (id=11717)	

		try {
			headerBuffer.reset();

			IHeaderRenderStrategy strategy = AbstractHeaderRenderStrategy.get();

			strategy.renderHeader(header, null, component);
this
	header	PartialPageUpdate$PartialHtmlHeaderContainer  (id=11664)	
component	ModalWindow  (id=11641)	
/s
ChildFirstHeaderRenderStrategy.renderHeader(HtmlHeaderContainer, HtmlHeaderContainer$HeaderStreamState, Component) line: 50	
		// First the application level headers
		renderApplicationLevelHeaders(headerContainer);
/ NIETS	, 
/ want	,
/s
ChildFirstHeaderRenderStrategy(AbstractHeaderRenderStrategy).renderApplicationLevelHeaders(HtmlHeaderContainer) line: 138	
		if (Application.exists())
		{
			HeaderContributorListenerCollection headerContributorListenerCollection =
					Application.get().getHeaderContributorListeners();
[]
			IHeaderResponse headerResponse = headerContainer.getHeaderResponse();
org.apache.wicket.markup.head.ResourceAggregator@2c784060

			for (IHeaderContributor listener : headerContributorListenerCollection)
/ GEEN
/t
ChildFirstHeaderRenderStrategy.renderHeader(HtmlHeaderContainer, HtmlHeaderContainer$HeaderStreamState, Component) line: 57	
		// First the application level headers
		renderApplicationLevelHeaders(headerContainer);
/d
/ NIETS
		// Then its child hierarchy
		renderChildHeaders(headerContainer, rootComponent);
/s
ChildFirstHeaderRenderStrategy.renderChildHeaders(HtmlHeaderContainer, Component) line: 73	
/ install visitors	,
/ TODO
/t
ChildFirstHeaderRenderStrategy.renderHeader(HtmlHeaderContainer, HtmlHeaderContainer$HeaderStreamState, Component) line: 60	
		// Then its child hierarchy
		renderChildHeaders(headerContainer, rootComponent);
/d
		// Then the root component's headers
		renderRootComponent(headerContainer, headerStreamState, rootComponent);
/s
ChildFirstHeaderRenderStrategy(AbstractHeaderRenderStrategy).renderRootComponent(HtmlHeaderContainer, HtmlHeaderContainer$HeaderStreamState, Component) line: 118	
/=
	protected void renderRootComponent(final HtmlHeaderContainer headerContainer,
		final HeaderStreamState headerStreamState, final Component rootComponent)

headerContainer	PartialPageUpdate$PartialHtmlHeaderContainer  (id=11664)	
headerStreamState	null	
rootComponent	ModalWindow  (id=11641)	

		headerContainer.renderHeaderTagBody(headerStreamState);
/ NIETS	, want headerStreamState=null
		rootComponent.internalRenderHead(headerContainer);
/s
ModalWindow(Component).internalRenderHead(HtmlHeaderContainer) line: 2684	

		if (isVisibleInHierarchy() && isRenderAllowed())
/ JA
		{
			IHeaderResponse response = container.getHeaderResponse();
org.apache.wicket.markup.head.ResourceAggregator@2c784060

			// Allow component to contribute
			if (response.wasRendered(this) == false)
/ JA
			{
				StringResponse markupHeaderResponse = new StringResponse();
				Response oldResponse = getResponse();
				RequestCycle.get().setResponse(markupHeaderResponse);
				try
				{
					// Make sure the markup source strategy contributes to the header first
					// to be backward compatible. WICKET-3761
					getMarkupSourcingStrategy().renderHead(this, container);
/s
PanelMarkupSourcingStrategy(AssociatedMarkupSourcingStrategy).renderHead(Component, HtmlHeaderContainer) line: 188	
/=
	public void renderHead(final Component component, HtmlHeaderContainer container)
component	ModalWindow  (id=7291)	
container	PartialPageUpdate$PartialHtmlHeaderContainer  (id=7323)	

		renderHeadFromAssociatedMarkupFile((WebMarkupContainer)component, container);
/s
PanelMarkupSourcingStrategy(AssociatedMarkupSourcingStrategy).renderHeadFromAssociatedMarkupFile(WebMarkupContainer, HtmlHeaderContainer) line: 213	
		final MarkupStream markupStream = container.getAssociatedMarkupStream(false);

markupStream=
[markup = jar:file:/home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28/webapps/wicket-testing/WEB-INF/lib/wicket-extensions-7.2.0.jar!/org/apache/wicket/extensions/ajax/markup/html/modal/ModalWindow.html

<!--
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->
<wicket:panel xmlns:wicket="http://wicket.apache.org">
	<div wicket:id="content">
	</div>
</wicket:panel>, index = 0, current = [Raw markup]]

		while (nextHeaderMarkup(markupStream) != -1)
/s
PanelMarkupSourcingStrategy(AssociatedMarkupSourcingStrategy).nextHeaderMarkup(MarkupStream) line: 320	
		MarkupElement elem = associatedMarkupStream.get();
		while (elem != null)
		{
			if (elem instanceof WicketTag)
/ JA
elem=
<wicket:panel xmlns:wicket="http://wicket.apache.org">

				// wicket:head must be before border, panel or extend
				// @TODO why is that? Why can't it be anywhere? (except inside wicket:fragment)
				else if (tag.isOpen() &&
					(tag.isPanelTag() || tag.isBorderTag() || tag.isExtendTag()))
				{
					noMoreWicketHeadTagsAllowed = true;
			}
			elem = associatedMarkupStream.next();

/ volgende	,
		while (elem != null)
<div wicket:id="content">

			else if (elem instanceof ComponentTag)
			{
				ComponentTag tag = (ComponentTag)elem;
/ NIETS	,
			elem = associatedMarkupStream.next();

/ volgende,	
		while (elem != null)
</div>
			else if (elem instanceof ComponentTag)
			{
				ComponentTag tag = (ComponentTag)elem;

/ volgende,	
		while (elem != null)
</wicket:panel>
/ NIETS	,
		// No (more) wicket:head found
		return -1;

/t
PanelMarkupSourcingStrategy(AssociatedMarkupSourcingStrategy).renderHeadFromAssociatedMarkupFile(WebMarkupContainer, HtmlHeaderContainer) line: 244	
		while (nextHeaderMarkup(markupStream) != -1)
/ d
/ NEE

/t
ModalWindow(Component).internalRenderHead(HtmlHeaderContainer) line: 2704	
					getMarkupSourcingStrategy().renderHead(this, container);
/d
				...
				// Then let the component itself to contribute to the header
				renderHead(this, response);
/s
ModalWindow(Component).renderHead(Component, IHeaderResponse) line: 4489	
		renderHead(response);
/s
ModalWindow.renderHead(IHeaderResponse) line: 284	
		super.renderHead(response);

		CoreLibrariesContributor.contributeAjax(getApplication(), response);
/s
CoreLibrariesContributor.contributeAjax(Application, IHeaderResponse) line: 62	
		JavaScriptLibrarySettings jsLibrarySettings = application.getJavaScriptLibrarySettings();
jsLibrarySettings	JavaScriptLibrarySettings  (id=11895)	
	jQueryReference	JavaScriptResourceReference  (id=11897)	
	wicketAjaxDebugReference	WicketAjaxDebugJQueryResourceReference  (id=11898)	
	wicketAjaxReference	WicketAjaxJQueryResourceReference  (id=11899)	
	wicketEventReference	WicketEventJQueryResourceReference  (id=11900)	
/t
ModalWindow.renderHead(IHeaderResponse) line: 285	
		CoreLibrariesContributor.contributeAjax(getApplication(), response);
/d
		response.render(JavaScriptHeaderItem.forReference(JAVASCRIPT));
JAVASCRIPT	JavaScriptResourceReference  (id=11949)	
	data	ResourceReference$Key  (id=11951)	
		locale	null	
		name	"res/modal.js" (id=11955)	
		scope	"org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow" (id=11956)	
		style	null	
		variation	null	
	readBuffered	true	
	urlAttributesCacheMap	ConcurrentHashMap<K,V>  (id=11952)	
{locale: en_US; style: null; variation: null=locale: null; style: null; variation: null}
/s
JavaScriptHeaderItem.forReference(ResourceReference) line: 90	
/=
	public static JavaScriptReferenceHeaderItem forReference(ResourceReference reference)
reference	JavaScriptResourceReference  (id=11949)	
	data	ResourceReference$Key  (id=11951)	
		locale	null	
		name	"res/modal.js" (id=11955)	
		scope	"org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow" (id=11956)	
		style	null	
		variation	null	
	readBuffered	true	
	urlAttributesCacheMap	ConcurrentHashMap<K,V>  (id=11952)	
{locale: en_US; style: null; variation: null=locale: null; style: null; variation: null}

		return forReference(reference, null);
/s
JavaScriptHeaderItem.forReference(ResourceReference, String) line: 105	
		return forReference(reference, null, id);
/s
JavaScriptHeaderItem.forReference(ResourceReference, PageParameters, String) line: 123	
		return forReference(reference, pageParameters, id, false);
/s
JavaScriptHeaderItem.forReference(ResourceReference, PageParameters, String, boolean) line: 144	
		return forReference(reference, pageParameters, id, defer, null);
/s
JavaScriptHeaderItem.forReference(ResourceReference, PageParameters, String, boolean, String) line: 202	
		return new JavaScriptReferenceHeaderItem(reference, pageParameters, id, defer, charset, null);
/s
JavaScriptReferenceHeaderItem.<init>(ResourceReference, PageParameters, String, boolean, String, String) line: 66	
		super(condition, defer, charset);
null,false,null
->		this.reference = Args.notNull(reference, "reference");
		this.pageParameters = pageParameters;
null
		setId(id);
null
/t
ModalWindow.renderHead(IHeaderResponse) line: 285	
		response.render(JavaScriptHeaderItem.forReference(JAVASCRIPT));
/pd
/s
ResourceAggregator.render(HeaderItem) line: 258	
		item = getItemToBeRendered(item);
/ item blijft item	,
		else
		{
			Set<HeaderItem> depsDone = new LinkedHashSet<>();
			depsDone.add(item);										/ in item zit modal.js	,
			recordHeaderItem(item, depsDone);
/s
ResourceAggregator.recordHeaderItem(HeaderItem, Set<HeaderItem>) line: 226	
		renderDependencies(item, depsDone);
/ NIETS
		RecordedHeaderItem recordedItem = itemsToBeRendered.get(item);
null
		if (recordedItem == null)
		{
			recordedItem = new RecordedHeaderItem(item);	 / item heeft modal.js	,
			itemsToBeRendered.put(item, recordedItem);
		}
		recordedItem.addLocation(renderBase, indexInRenderBase, indexInRequest);
/s
ResourceAggregator$RecordedHeaderItem.addLocation(Object, int, int) line: 147	
			locations.add(new RecordedHeaderItemLocation(renderBase, indexInRenderBase,
				indexInRequest));
/t
ResourceAggregator.recordHeaderItem(HeaderItem, Set<HeaderItem>) line: 234	
		recordedItem.addLocation(renderBase, indexInRenderBase, indexInRequest);
/d
/ Hierna	,
this	ResourceAggregator  (id=11855)	
recordedItem	ResourceAggregator$RecordedHeaderItem  (id=11985)	
	item	JavaScriptReferenceHeaderItem  (id=11964)	
		async	false	
		charset	null	
		condition	null	
		defer	false	
		markupId	null	
		pageParameters	null	
		reference	JavaScriptResourceReference  (id=11949)	
			data	ResourceReference$Key  (id=11951)	
				locale	null	
				name	"res/modal.js" (id=11955)	
				scope	"org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow" (id=11956)	
				style	null	
				variation	null	
			readBuffered	true	
			urlAttributesCacheMap	ConcurrentHashMap<K,V>  (id=11952)	
	locations	ArrayList<E>  (id=11986)	
		elementData	Object[10]  (id=12012)	
			[0]	ResourceAggregator$RecordedHeaderItemLocation  (id=12014)	
				indexInRenderBase	5	
				indexInRequest	5	
				renderBase	ModalWindow  (id=11641)	
		modCount	1	
		size	1	

		indexInRenderBase++;
		indexInRequest++;

/t
ModalWindow.renderHead(IHeaderResponse) line: 290	
		response.render(JavaScriptHeaderItem.forReference(JAVASCRIPT));
/d
		ResourceReference cssResource = newCssResource();
		if (cssResource != null)
		{
			response.render(CssHeaderItem.forReference(cssResource));
...
/s
CssReferenceHeaderItem.<init>(ResourceReference, PageParameters, String, String) line: 57	
this	CssReferenceHeaderItem  (id=12077)	

		super(condition);
null
		this.pageParameters = pageParameters;
null
		this.media = media;
null
		this.reference = reference;
reference	CssResourceReference  (id=12076)	
	data	ResourceReference$Key  (id=12079)	
		locale	null	
		name	"res/modal.css" (id=12082)	
		scope	"org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow" (id=11956)	
		style	null	
		variation	null	
	readBuffered	true	
	urlAttributesCacheMap	ConcurrentHashMap<K,V>  (id=12080)	
{locale: en_US; style: null; variation: null=locale: null; style: null; variation: null}

/t
ModalWindow.renderHead(IHeaderResponse) line: 290	
			response.render(CssHeaderItem.forReference(cssResource));
/pd
/s
ResourceAggregator.render(HeaderItem) line: 258	
/=
	public void render(HeaderItem item)

this	ResourceAggregator  (id=11855)	
item	CssReferenceHeaderItem  (id=12077)	
	condition	null	
	markupId	null	
	media	null	
	pageParameters	null	
	reference	CssResourceReference  (id=12076)	
		data	ResourceReference$Key  (id=12079)	
			locale	null	
			name	"res/modal.css" (id=12082)	
			scope	"org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow" (id=11956)	
			style	null	
			variation	null	
		readBuffered	true	
		urlAttributesCacheMap	ConcurrentHashMap<K,V>  (id=12080)	

		else
		{
			Set<HeaderItem> depsDone = new LinkedHashSet<>();
			depsDone.add(item);
			recordHeaderItem(item, depsDone);
/s
ResourceAggregator.recordHeaderItem(HeaderItem, Set<HeaderItem>) line: 234	
		if (recordedItem == null)
		{
			recordedItem = new RecordedHeaderItem(item);
			itemsToBeRendered.put(item, recordedItem);
		}
		recordedItem.addLocation(renderBase, indexInRenderBase, indexInRequest);
		indexInRenderBase++;
		indexInRequest++;

/ Intermezzo

this	ResourceAggregator  (id=7341)	
	itemsToBeRendered	LinkedHashMap<K,V>  (id=7491)	
/
/ we hebben dus een entry added aan	itemsToBeRendered	, hier zitten al heel veel entries in	, see hieronder	,

/ Einde Intermezzo

recordedItem	ResourceAggregator$RecordedHeaderItem  (id=12124)	
	item	CssReferenceHeaderItem  (id=12077)	
		condition	null	
		markupId	null	
		media	null	
		pageParameters	null	
		reference	CssResourceReference  (id=12076)	
			data	ResourceReference$Key  (id=12079)	
				locale	null	
				name	"res/modal.css" (id=12082)	
				scope	"org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow" (id=11956)	
				style	null	
				variation	null	
			readBuffered	true	
			urlAttributesCacheMap	ConcurrentHashMap<K,V>  (id=12080)	
{locale: en_US; style: null; variation: null=locale: null; style: null; variation: null}
	locations	ArrayList<E>  (id=12125)	
		elementData	Object[10]  (id=12126)	
			[0]	ResourceAggregator$RecordedHeaderItemLocation  (id=12127)	
				indexInRenderBase	6	
				indexInRequest	6	
				renderBase	ModalWindow  (id=11641)	
		modCount	1	
		size	1	

/t
ModalWindow(Component).internalRenderHead(HtmlHeaderContainer) line: 2717	
				// Then let the component itself to contribute to the header
				renderHead(this, response);
/d
this	ModalWindow  (id=11641)	
container	PartialPageUpdate$PartialHtmlHeaderContainer  (id=11664)	
response	ResourceAggregator  (id=11855)	
	domReadyItemsToBeRendered	ArrayList<E>  (id=11859)	
[]
	indexInRenderBase	7	
	indexInRequest	7	
	itemsToBeRendered	LinkedHashMap<K,V>  (id=11982)	
	loadItemsToBeRendered	ArrayList<E>  (id=11972)	
	realResponse	PartialPageUpdate$PartialHeaderResponse  (id=12149)	
		closed	false	
		rendered	HashSet<E>  (id=12153)	
		this$0	AjaxRequestHandler$1  (id=11649)	
	renderBase	ModalWindow  (id=11641)	
markupHeaderResponse	StringResponse  (id=11879)	
oldResponse	PartialPageUpdate$ResponseBuffer  (id=11717)	

/ Intermezzo

response	ResourceAggregator  (id=11855)	
	itemsToBeRendered	LinkedHashMap<K,V>  (id=11982)	
		size	7	
		table	HashMap$Entry<K,V>[16]  (id=12172)	
			[0]	LinkedHashMap$Entry<K,V>  (id=12175)							<-
				after	LinkedHashMap$Entry<K,V>  (id=12170)	
					after	LinkedHashMap$Entry<K,V>  (id=12187)	
					before	LinkedHashMap$Entry<K,V>  (id=12175)	
					hash	-1	
					key	null	
					next	null	
					value	null	
				before	LinkedHashMap$Entry<K,V>  (id=12177)	
				hash	1805662688	
				key	CssReferenceHeaderItem  (id=12077)	
				next	LinkedHashMap$Entry<K,V>  (id=12180)					<-	
					after	LinkedHashMap$Entry<K,V>  (id=12182)	
					before	LinkedHashMap$Entry<K,V>  (id=12176)	
					hash	267752544	
					key	JavaScriptReferenceHeaderItem  (id=12185)	
					next	LinkedHashMap$Entry<K,V>  (id=12187)				<-	
						after	LinkedHashMap$Entry<K,V>  (id=12176)	
						before	LinkedHashMap$Entry<K,V>  (id=12170)	
						hash	1250328592	
						key	JavaScriptReferenceHeaderItem  (id=12191)	
						next	null	
						value	ResourceAggregator$RecordedHeaderItem  (id=12194)	
					value	ResourceAggregator$RecordedHeaderItem  (id=12189)	
				value	ResourceAggregator$RecordedHeaderItem  (id=12124)	
			[3]	LinkedHashMap$Entry<K,V>  (id=12176)							<-	
				after	LinkedHashMap$Entry<K,V>  (id=12180)	
				before	LinkedHashMap$Entry<K,V>  (id=12187)	
				hash	-1220022205	
				key	JavaScriptReferenceHeaderItem  (id=12203)	
				next	null	
				value	ResourceAggregator$RecordedHeaderItem  (id=12204)	
			[6]	LinkedHashMap$Entry<K,V>  (id=12177)							<-	
				after	LinkedHashMap$Entry<K,V>  (id=12175)	
				before	LinkedHashMap$Entry<K,V>  (id=12199)	
				hash	-823016506	
				key	JavaScriptReferenceHeaderItem  (id=11964)	
				next	LinkedHashMap$Entry<K,V>  (id=12199)					<-	
					after	LinkedHashMap$Entry<K,V>  (id=12177)	
					before	LinkedHashMap$Entry<K,V>  (id=12182)	
					hash	770593782	
					key	JavaScriptContentHeaderItem  (id=12226)	
					next	LinkedHashMap$Entry<K,V>  (id=12182)				<-	
						after	LinkedHashMap$Entry<K,V>  (id=12199)	
						before	LinkedHashMap$Entry<K,V>  (id=12180)	
						hash	-920079194	
						key	JavaScriptReferenceHeaderItem  (id=12279)	
						next	null	
						value	ResourceAggregator$RecordedHeaderItem  (id=12281)	
					value	ResourceAggregator$RecordedHeaderItem  (id=12230)	
				value	ResourceAggregator$RecordedHeaderItem  (id=11985)	

/ we moeten dit zo lezen	, dat 75 is after 70, en before 77	, dus 70, 75, 77	, 
			[0]	LinkedHashMap$Entry<K,V>  (id=12175)	
				after	LinkedHashMap$Entry<K,V>  (id=12170)	
				before	LinkedHashMap$Entry<K,V>  (id=12177)	

/ we zien dan in het totaal	, (er zijn 7 entries)	,
					70, 75, 77, 99, 82, 80, 76, 87, 70	, dus circular list	, en 70 is dummy entry	,

/ In meer detail	,

/ we zien 	,
name	"res/modal.css" (id=7485)	
name	"res/js/wicket-ajax-jquery.js" (id=7544)	
name	"jquery/jquery-2.2.0.js" (id=7557)	
name	"res/js/wicket-event-jquery.js" (id=7565)	
name	"res/modal.js" (id=7468)	
name	"res/js/wicket-ajax-jquery-debug.js" (id=7583)	
javaScript	"Wicket.Ajax.DebugWindow.enabled=true;" (id=7571)	

this	ResourceAggregator  (id=7341)	
	domReadyItemsToBeRendered	ArrayList<E>  (id=7348)	
	indexInRenderBase	6	
	indexInRequest	6	
	itemsToBeRendered	LinkedHashMap<K,V>  (id=7491)	
		accessOrder	false	
		entrySet	HashMap$EntrySet  (id=7493)	
		hashSeed	0	
		header	LinkedHashMap$Entry<K,V>  (id=7496)	
		keySet	null	
		loadFactor	0.75	
		modCount	7	
		size	7	
		table	HashMap$Entry<K,V>[16]  (id=7497)	
			[0]	LinkedHashMap$Entry<K,V>  (id=7498)	
				after	LinkedHashMap$Entry<K,V>  (id=7496)	
				before	LinkedHashMap$Entry<K,V>  (id=7500)	
				hash	1805662688	
				key	CssReferenceHeaderItem  (id=7486)	
				next	LinkedHashMap$Entry<K,V>  (id=7502)	
					after	LinkedHashMap$Entry<K,V>  (id=7522)	
					before	LinkedHashMap$Entry<K,V>  (id=7499)	
					hash	267752544	
					key	JavaScriptReferenceHeaderItem  (id=7525)	
					next	LinkedHashMap$Entry<K,V>  (id=7526)	
						after	LinkedHashMap$Entry<K,V>  (id=7499)	
						before	LinkedHashMap$Entry<K,V>  (id=7496)	
						hash	1250328592	
						key	JavaScriptReferenceHeaderItem  (id=7552)	
						next	null	
						value	ResourceAggregator$RecordedHeaderItem  (id=7553)	
							item	JavaScriptReferenceHeaderItem  (id=7552)	
								async	false	
								charset	null	
								condition	null	
								defer	false	
								markupId	null	
								pageParameters	null	
								reference	JavaScriptResourceReference  (id=7428)	
									data	ResourceReference$Key  (id=7555)	
										locale	null	
										name	"jquery/jquery-2.2.0.js" (id=7557)	
										scope	"org.apache.wicket.resource.JQueryResourceReference" (id=7558)	
										style	null	
										variation	null	
									readBuffered	true	
									urlAttributesCacheMap	ConcurrentHashMap<K,V>  (id=7556)	
							locations	ArrayList<E>  (id=7554)	
					value	ResourceAggregator$RecordedHeaderItem  (id=7529)	
						item	JavaScriptReferenceHeaderItem  (id=7525)	
							async	false	
							charset	null	
							condition	null	
							defer	false	
							markupId	null	
							pageParameters	null	
							reference	WicketAjaxJQueryResourceReference  (id=7430)	
								data	ResourceReference$Key  (id=7539)	
									locale	null	
									name	"res/js/wicket-ajax-jquery.js" (id=7544)	
									scope	"org.apache.wicket.ajax.AbstractDefaultAjaxBehavior" (id=7545)	
									style	null	
									variation	null	
								readBuffered	true	
								urlAttributesCacheMap	ConcurrentHashMap<K,V>  (id=7541)	
						locations	ArrayList<E>  (id=7533)	
				value	ResourceAggregator$RecordedHeaderItem  (id=7488)	
					item	CssReferenceHeaderItem  (id=7486)	
						condition	null	
						markupId	null	
						media	null	
						pageParameters	null	
						reference	CssResourceReference  (id=7482)	
							data	ResourceReference$Key  (id=7483)	
								locale	null	
								name	"res/modal.css" (id=7485)	
								scope	"org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow" (id=7469)	
								style	null	
								variation	null	
							readBuffered	true	
							urlAttributesCacheMap	ConcurrentHashMap<K,V>  (id=7484)	
					locations	ArrayList<E>  (id=7489)	
			[3]	LinkedHashMap$Entry<K,V>  (id=7499)	
				after	LinkedHashMap$Entry<K,V>  (id=7502)	
				before	LinkedHashMap$Entry<K,V>  (id=7526)	
				hash	-1220022205	
				key	JavaScriptReferenceHeaderItem  (id=7560)	
				next	null	
				value	ResourceAggregator$RecordedHeaderItem  (id=7561)	
					item	JavaScriptReferenceHeaderItem  (id=7560)	
						async	false	
						charset	null	
						condition	null	
						defer	false	
						markupId	null	
						pageParameters	null	
						reference	WicketEventJQueryResourceReference  (id=7461)	
							data	ResourceReference$Key  (id=7563)	
								locale	null	
								name	"res/js/wicket-event-jquery.js" (id=7565)	
								scope	"org.apache.wicket.ajax.AbstractDefaultAjaxBehavior" (id=7545)	
								style	null	
								variation	null	
							readBuffered	true	
							urlAttributesCacheMap	ConcurrentHashMap<K,V>  (id=7564)	
					locations	ArrayList<E>  (id=7562)	
			[6]	LinkedHashMap$Entry<K,V>  (id=7500)	
				after	LinkedHashMap$Entry<K,V>  (id=7498)	
				before	LinkedHashMap$Entry<K,V>  (id=7566)	
				hash	-823016506	
				key	JavaScriptReferenceHeaderItem  (id=7464)	
				next	LinkedHashMap$Entry<K,V>  (id=7566)	
					after	LinkedHashMap$Entry<K,V>  (id=7500)	
					before	LinkedHashMap$Entry<K,V>  (id=7522)	
					hash	770593782	
					key	JavaScriptContentHeaderItem  (id=7568)	
					next	LinkedHashMap$Entry<K,V>  (id=7522)	
						after	LinkedHashMap$Entry<K,V>  (id=7566)	
						before	LinkedHashMap$Entry<K,V>  (id=7502)	
						hash	-920079194	
						key	JavaScriptReferenceHeaderItem  (id=7573)	
						next	null	
						value	ResourceAggregator$RecordedHeaderItem  (id=7574)	
							item	JavaScriptReferenceHeaderItem  (id=7573)	
								async	false	
								charset	null	
								condition	null	
								defer	false	
								markupId	null	
								pageParameters	null	
								reference	WicketAjaxDebugJQueryResourceReference  (id=7429)	
									data	ResourceReference$Key  (id=7580)	
										locale	null	
										name	"res/js/wicket-ajax-jquery-debug.js" (id=7583)	
										scope	"org.apache.wicket.ajax.AbstractDefaultAjaxBehavior" (id=7545)	
										style	null	
										variation	null	
									readBuffered	true	
									urlAttributesCacheMap	ConcurrentHashMap<K,V>  (id=7581)	
							locations	ArrayList<E>  (id=7575)	
					value	ResourceAggregator$RecordedHeaderItem  (id=7569)	
						item	JavaScriptContentHeaderItem  (id=7568)	
							condition	null	
							javaScript	"Wicket.Ajax.DebugWindow.enabled=true;" (id=7571)	
							markupId	"wicket-ajax-debug-enable" (id=7572)	
						locations	ArrayList<E>  (id=7570)	
				value	ResourceAggregator$RecordedHeaderItem  (id=7474)	
					item	JavaScriptReferenceHeaderItem  (id=7464)	
						async	false	
						charset	null	
						condition	null	
						defer	false	
						markupId	null	
						pageParameters	null	
						reference	JavaScriptResourceReference  (id=7463)	
							data	ResourceReference$Key  (id=7466)	
								locale	null	
								name	"res/modal.js" (id=7468)	
								scope	"org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow" (id=7469)	
								style	null	
								variation	null	
							readBuffered	true	
							urlAttributesCacheMap	ConcurrentHashMap<K,V>  (id=7467)	
					locations	ArrayList<E>  (id=7476)	
		threshold	12	
		values	null	
	loadItemsToBeRendered	ArrayList<E>  (id=7494)	
	realResponse	PartialPageUpdate$PartialHeaderResponse  (id=7495)	
	renderBase	ModalWindow  (id=7291)	
item	CssReferenceHeaderItem  (id=7486)	
depsDone	LinkedHashSet<E>  (id=7487)	
recordedItem	ResourceAggregator$RecordedHeaderItem  (id=7488)	


/ we kunnen ook print	,
loadItemsToBeRendered	ArrayList<E>  (id=11972)	
/=
{
JavaScriptReferenceHeaderItem(scope: org.apache.wicket.resource.JQueryResourceReference; name: jquery/jquery-2.2.0.js; locale: null; style: null; variation: null, null)=[ModalWindow@0]:JavaScriptReferenceHeaderItem(scope: org.apache.wicket.resource.JQueryResourceReference; name: jquery/jquery-2.2.0.js; locale: null; style: null; variation: null, null), 
JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-event-jquery.js; locale: null; style: null; variation: null, null)=[ModalWindow@1]:JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-event-jquery.js; locale: null; style: null; variation: null, null), 
JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-ajax-jquery.js; locale: null; style: null; variation: null, null)=[ModalWindow@2]:JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-ajax-jquery.js; locale: null; style: null; variation: null, null), 
JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-ajax-jquery-debug.js; locale: null; style: null; variation: null, null)=[ModalWindow@3]:JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-ajax-jquery-debug.js; locale: null; style: null; variation: null, null), JavaScriptHeaderItem(Wicket.Ajax.DebugWindow.enabled=true;)=[ModalWindow@4]:JavaScriptHeaderItem(Wicket.Ajax.DebugWindow.enabled=true;), 
JavaScriptReferenceHeaderItem(scope: org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow; name: res/modal.js; locale: null; style: null; variation: null, null)=[ModalWindow@5]:JavaScriptReferenceHeaderItem(scope: org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow; name: res/modal.js; locale: null; style: null; variation: null, null), 
CSSReferenceHeaderItem(scope: org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow; name: res/modal.css; locale: null; style: null; variation: null, null)=[ModalWindow@6]:CSSReferenceHeaderItem(scope: org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow; name: res/modal.css; locale: null; style: null; variation: null, null)}

/ Einde Intermezzo

/t
ModalWindow(Component).internalRenderHead(HtmlHeaderContainer) line: 2717	
this	ModalWindow  (id=7291)	

				// Then let the component itself to contribute to the header
				renderHead(this, response);
/d

/ Intermezzo

this	ModalWindow  (id=7291)	
	...
	data	Object[4]  (id=7369)	
		[0]	MetaDataEntry<T>  (id=7738)	
		[1]	ModalWindow$CloseButtonBehavior  (id=7319)	
		[2]	Behaviors$BehaviorIdList  (id=7739)	
		[3]	ModalWindow$WindowClosedBehavior  (id=7293)	


response	ResourceAggregator  (id=7341)	
	...
	itemsToBeRendered	LinkedHashMap<K,V>  (id=7491)	
/ wat hierboven	,

/ Einde Intermezzo

				response.markRendered(this);
/s
ResourceAggregator.markRendered(Object) line: 204	
		super.markRendered(object);
/s
ResourceAggregator(DecoratingHeaderResponse).markRendered(Object) line: 69	
		realResponse.markRendered(object);

this	ResourceAggregator  (id=7341)	
	realResponse	PartialPageUpdate$PartialHeaderResponse  (id=7495)	
object	ModalWindow  (id=7291)	

/s
PartialPageUpdate$PartialHeaderResponse(HeaderResponse).markRendered(Object) line: 46	
		rendered.add(object);

this	PartialPageUpdate$PartialHeaderResponse  (id=7495)	
	rendered	HashSet<E>  (id=7772)	
		map	HashMap<K,V>  (id=7774)	
			size	2	
			table	HashMap$Entry<K,V>[16]  (id=7799)	
				[7]	HashMap$Entry<K,V>  (id=7802)	
					hash	418893879	
					key	Label  (id=7338)							<-
					next	null	
					value	Object  (id=7803)	
				[14]	HashMap$Entry<K,V>  (id=7806)	
					hash	1920365502	
					key	ModalWindow  (id=7291)						<-	
					next	null	
					value	Object  (id=7803)	

/t
ResourceAggregator.markRendered(Object) line: 207	
		super.markRendered(object);
/d
		if (object instanceof Component || object instanceof Behavior)
		{
			renderBase = null;
			indexInRenderBase = 0;

/t
ModalWindow(Component).internalRenderHead(HtmlHeaderContainer) line: 2721	
				response.markRendered(this);
/d
			// Then ask all behaviors
			for (Behavior behavior : getBehaviors())
org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow$CloseButtonBehavior@48c5860c
				if (isBehaviorAccepted(behavior))
				{
					if (response.wasRendered(behavior) == false)
/s
ResourceAggregator.wasRendered(Object) line: 218	
this	ResourceAggregator  (id=7341)	
object=org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow$CloseButtonBehavior@48c5860
		boolean ret = super.wasRendered(object);
false
/ Alleen Label, ModalWindow: true

		if (!ret && object instanceof Component || object instanceof Behavior)
/ JA
		{
			renderBase = object;
			indexInRenderBase = 0;
/t
ModalWindow(Component).internalRenderHead(HtmlHeaderContainer) line: 2727	
			for (Behavior behavior : getBehaviors())
			{
				if (isBehaviorAccepted(behavior))
				{
					if (response.wasRendered(behavior) == false)
/d
/ JA
					{
						behavior.renderHead(this, response);
/s
ModalWindow$CloseButtonBehavior(AbstractDefaultAjaxBehavior).renderHead(Component, IHeaderResponse) line: 96	
		super.renderHead(component, response);
/ NIETS	,
		CoreLibrariesContributor.contributeAjax(component.getApplication(), response);
/ TODO
		RequestCycle requestCycle = component.getRequestCycle();
		Url baseUrl = requestCycle.getUrlRenderer().getBaseUrl();
		CharSequence ajaxBaseUrl = Strings.escapeMarkup(baseUrl.toString());
?0
		response.render(JavaScriptHeaderItem.forScript("Wicket.Ajax.baseUrl=\"" + ajaxBaseUrl
			+ "\";", "wicket-ajax-base-url"));
/s
JavaScriptHeaderItem.forScript(CharSequence, String) line: 243	
/=
	public static JavaScriptContentHeaderItem forScript(CharSequence javascript, String id)
javascript	"Wicket.Ajax.baseUrl="?0";" (id=7853)	
id	"wicket-ajax-base-url" (id=7854)	

		return new JavaScriptContentHeaderItem(javascript, id, condition);
condition=null

/t
ModalWindow$CloseButtonBehavior(AbstractDefaultAjaxBehavior).renderHead(Component, IHeaderResponse) line: 104	
		response.render(JavaScriptHeaderItem.forScript("Wicket.Ajax.baseUrl=\"" + ajaxBaseUrl
			+ "\";", "wicket-ajax-base-url"));
/d

response	ResourceAggregator  (id=7341)	
	itemsToBeRendered	LinkedHashMap<K,V>  (id=7491)	
/ item added to itemsToBeRendered	,
/ Nu 8 items	,

		renderExtraHeaderContributors(component, response);
/ NIETS	,

/t
ModalWindow(Component).internalRenderHead(HtmlHeaderContainer) line: 2728	
			for (Behavior behavior : getBehaviors())
			{
				if (isBehaviorAccepted(behavior))
				{
					if (response.wasRendered(behavior) == false)
					{
						behavior.renderHead(this, response);
/d
response	ResourceAggregator  (id=7341)	
	itemsToBeRendered	LinkedHashMap<K,V>  (id=7491)	
/ item added to itemsToBeRendered	,
/ Nu 8 items	,

						List<IClusterable> pair = Arrays.asList(this, behavior);
pair	Arrays$ArrayList<E>  (id=7894)	
	a	IClusterable[2]  (id=7895)	
		[0]	ModalWindow  (id=7291)	
		[1]	ModalWindow$CloseButtonBehavior  (id=7319)	

						response.markRendered(pair);

/ Intermezzo

this	ResourceAggregator  (id=7341)	
	domReadyItemsToBeRendered	ArrayList<E>  (id=7348)	
	indexInRenderBase	6	
	indexInRequest	13	
	itemsToBeRendered	LinkedHashMap<K,V>  (id=7491)						<-
	loadItemsToBeRendered	ArrayList<E>  (id=7494)	
	realResponse	PartialPageUpdate$PartialHeaderResponse  (id=7495)		<-	
	renderBase	ModalWindow$CloseButtonBehavior  (id=7319)	

/ Einde Intermezzo

/t
ModalWindow(Component).internalRenderHead(HtmlHeaderContainer) line: 2725	

/ behaviors=
[org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow$CloseButtonBehavior@48c5860c, 
org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow$WindowClosedBehavior@52d94f6]

/ volgende	,
			for (Behavior behavior : getBehaviors())
org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow$WindowClosedBehavior@52d94f6
			{
				if (isBehaviorAccepted(behavior))
				{
					if (response.wasRendered(behavior) == false)
					{
						behavior.renderHead(this, response);
/ response.itemsToBeRendered blijft 8	, 
/ TODO

/ response.itemsToBeRendered=
{JavaScriptReferenceHeaderItem(scope: org.apache.wicket.resource.JQueryResourceReference; name: jquery/jquery-2.2.0.js; locale: null; style: null; variation: null, null)=[ModalWindow@0, CloseButtonBehavior@0, WindowClosedBehavior@0]:JavaScriptReferenceHeaderItem(scope: org.apache.wicket.resource.JQueryResourceReference; name: jquery/jquery-2.2.0.js; locale: null; style: null; variation: null, null), 
JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-event-jquery.js; locale: null; style: null; variation: null, null)=[ModalWindow@1, CloseButtonBehavior@1, WindowClosedBehavior@1]:JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-event-jquery.js; locale: null; style: null; variation: null, null), 
JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-ajax-jquery.js; locale: null; style: null; variation: null, null)=[ModalWindow@2, CloseButtonBehavior@2, WindowClosedBehavior@2]:JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-ajax-jquery.js; locale: null; style: null; variation: null, null), 
JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-ajax-jquery-debug.js; locale: null; style: null; variation: null, null)=[ModalWindow@3, CloseButtonBehavior@3, WindowClosedBehavior@3]:JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-ajax-jquery-debug.js; locale: null; style: null; variation: null, null), 
JavaScriptHeaderItem(Wicket.Ajax.DebugWindow.enabled=true;)=[ModalWindow@4, CloseButtonBehavior@4, WindowClosedBehavior@4]:JavaScriptHeaderItem(Wicket.Ajax.DebugWindow.enabled=true;), 
JavaScriptReferenceHeaderItem(scope: org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow; name: res/modal.js; locale: null; style: null; variation: null, null)=[ModalWindow@5]:JavaScriptReferenceHeaderItem(scope: org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow; name: res/modal.js; locale: null; style: null; variation: null, null), 
CSSReferenceHeaderItem(scope: org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow; name: res/modal.css; locale: null; style: null; variation: null, null)=[ModalWindow@6]:CSSReferenceHeaderItem(scope: org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow; name: res/modal.css; locale: null; style: null; variation: null, null), 
JavaScriptHeaderItem(Wicket.Ajax.baseUrl="?0";)=[CloseButtonBehavior@5, WindowClosedBehavior@5]:JavaScriptHeaderItem(Wicket.Ajax.baseUrl="?0";)}

		renderExtraHeaderContributors(component, response);

/t
ModalWindow(Component).internalRenderHead(HtmlHeaderContainer) line: 2729	
			for (Behavior behavior : getBehaviors())
			{
				if (isBehaviorAccepted(behavior))
				{
					if (response.wasRendered(behavior) == false)
					{
						behavior.renderHead(this, response);
/d
						List<IClusterable> pair = Arrays.asList(this, behavior);
pair	Arrays$ArrayList<E>  (id=7960)	
	a	IClusterable[2]  (id=7962)	
		[0]	ModalWindow  (id=7291)	
		[1]	ModalWindow$WindowClosedBehavior  (id=7293)	

						response.markRendered(pair);
/ Ook deze behavior wordt NIET added	aan response.realResponse	,
/ TODO

/t
AjaxRequestHandler$1(PartialPageUpdate).writeHeaderContribution(Response, Component) line: 498	
			strategy.renderHeader(header, null, component);
/d
		writeHeaderContribution(response);
/ NIETS	,

/ Intermezzo

/ response is weer oude 	,
response	StringResponse  (id=7300)	
<?xml version="1.0" encoding="UTF-8"?><ajax-response>

/ Einde Intermezzo

/t
AjaxRequestHandler$1(XmlPartialPageUpdate).writeComponent(Response, String, Component, String) line: 115	
				// render any associated headers of the component
				writeHeaderContribution(response, component);
/d
			try
			{
				component.render();
/s
ModalWindow(Component).render() line: 2296	
			// Invoke prepareForRender only if this is the root component to be rendered
			MarkupContainer parent = getParent();
ModalWindowStudyPage	,
			if ((parent == null) || (parent.getFlag(FLAG_RENDERING) == false) || isAuto())
/ JA
			{
				internalPrepareForRender(true);
/ VRIJWEL NIETS	,
/s
ModalWindow(Component).internalPrepareForRender(boolean) line: 2217	
		beforeRender();
/ NIETS
		...
/ TODO
/t
ModalWindow(Component).render() line: 2308	
				internalPrepareForRender(true);
/d
			}

			// Do the render
			internalRender();
/s
ModalWindow(Component).internalRender() line: 2346	
		// Make sure there is a markup available for the Component
		IMarkupFragment markup = getMarkup();
file:/home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28/webapps/wicket-testing/WEB-INF/classes/my/test/own/ModalWindowStudyPage.html
<div wicket:id="modalWindow"></div>

				onRender();
/s
ModalWindow(MarkupContainer).onRender() line: 1698	
		internalRenderComponent();
/s
ModalWindow(Component).internalRenderComponent() line: 2508	
		// Call any tag handler
		onComponentTag(tag);
/ Voor:
tag=<div wicket:id="modalWindow">
/ Na	,
<div wicket:id="modalWindow" id="modalWindow2" wicketpath="modalWindow" style="display:none">

			else
			{
				renderComponentTag(tag);
/s
ModalWindow(Component).renderComponentTag(ComponentTag) line: 4034	
			// Write the tag
			tag.writeOutput(getResponse(), !needToRenderTag(null),
				getMarkup().getMarkupResourceStream().getWicketNamespace());
/s
ComponentTag.writeOutput(Response, boolean, String) line: 720	
/=
	public final void writeOutput(final Response response, final boolean stripWicketAttributes,
		final String namespace)

this	ComponentTag  (id=8018)	
<div wicket:id="modalWindow" id="modalWindow2" wicketpath="modalWindow" style="display:none">
response	PartialPageUpdate$ResponseBuffer  (id=7327)	
/ leeg	,
stripWicketAttributes	false	
namespace	"wicket" (id=8035)	

		response.write("<");
		response.write(getName());
<div
		if (getAttributes().size() > 0)
		{
			for (String key : getAttributes().keySet())
wicket:id
id
wicketpath
style
			{
				if ((namespacePrefix == null) || (key.startsWith(namespacePrefix) == false))
				{
					response.write(" ");
					response.write(key);
					CharSequence value = getAttribute(key);
modalWindow
modalWindow2
modalWindow
display:none
					// attributes without values are possible, e.g.' disabled'
					if (value != null)
					{
						response.write("=\"");
						value = Strings.escapeMarkup(value);
						response.write(value);
						response.write("\"");
		response.write(">");
response=
<div wicket:id="modalWindow" id="modalWindow2" wicketpath="modalWindow" style="display:none"

/t
ModalWindow(Component).internalRenderComponent() line: 2565	
			else
			{
				renderComponentTag(tag);
/d
			// Render the body only if open-body-close. Do not render if open-close.
			if (tag.isOpen())
			{
				// Render the body. The default strategy will simply call the component's
				// onComponentTagBody() implementation.
				getMarkupSourcingStrategy().onComponentTagBody(this, markupStream, tag);
/s
PanelMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 112	
		renderAssociatedMarkup(component);
component	ModalWindow  (id=7291)	
/s
PanelMarkupSourcingStrategy(AssociatedMarkupSourcingStrategy).renderAssociatedMarkup(Component) line: 77	
		((MarkupContainer)component).renderAssociatedMarkup(tagName, "Markup for a " + tagName +
			" component must begin a tag like '<wicket:" + tagName + ">'");
/s
	/**
	 * Renders the entire associated markup for a container such as a Border or Panel. Any leading
	 * or trailing raw markup in the associated markup is skipped.
	 *
ModalWindow(MarkupContainer).renderAssociatedMarkup(String, String) line: 762	

		// Get associated markup file for the Border or Panel component
		final MarkupStream associatedMarkupStream = new MarkupStream(getMarkup(null));
[markup = jar:file:/home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28/webapps/wicket-testing/WEB-INF/lib/wicket-extensions-7.2.0.jar!/org/apache/wicket/extensions/ajax/markup/html/modal/ModalWindow.html
<wicket:panel xmlns:wicket="http://wicket.apache.org">
	<div wicket:id="content">
	</div>
</wicket:panel>, index = 0, current =  '<wicket:panel xmlns:wicket="http://wicket.apache.org">' (line 0, column 0)]

			renderComponentTag(associatedMarkupOpenTag);
associatedMarkupOpenTag=
<wicket:panel xmlns:wicket="http://wicket.apache.org">
/s
ModalWindow(Component).renderComponentTag(ComponentTag) line: 4034	
			// Write the tag
			tag.writeOutput(getResponse(), !needToRenderTag(null),
				getMarkup().getMarkupResourceStream().getWicketNamespace());
/s
WicketTag(ComponentTag).writeOutput(Response, boolean, String) line: 720	
/=
	public final void writeOutput(final Response response, final boolean stripWicketAttributes,
		final String namespace)

response	PartialPageUpdate$ResponseBuffer  (id=7327)	
	buffer	AppendingStringBuffer  (id=8050)	
<div wicket:id="modalWindow" id="modalWindow2" wicketpath="modalWindow" style="display:none">
stripWicketAttributes	false	
namespace	"wicket" (id=8035)	

		response.write("<");
		if (getNamespace() != null)
		{
			response.write(getNamespace());
			response.write(":");
		response.write(getName());
<div wicket:id="modalWindow" id="modalWindow2" wicketpath="modalWindow" style="display:none"><wicket:panel

		if (getAttributes().size() > 0)
		{
			for (String key : getAttributes().keySet())
xmlns:wicket
			{
				if ((namespacePrefix == null) || (key.startsWith(namespacePrefix) == false))
				{
					response.write(" ");
					response.write(key);
					CharSequence value = getAttribute(key);
http://wicket.apache.org

					// attributes without values are possible, e.g.' disabled'
					if (value != null)
					{
						response.write("=\"");
						value = Strings.escapeMarkup(value);
						response.write(value);
						response.write("\"");
		response.write(">");
<div wicket:id="modalWindow" id="modalWindow2" wicketpath="modalWindow" style="display:none"><wicket:panel xmlns:wicket="http://wicket.apache.org">

/t
ModalWindow(MarkupContainer).renderAssociatedMarkup(String, String) line: 787	
			renderComponentTag(associatedMarkupOpenTag);
/d
			renderComponentTagBody(associatedMarkupStream, associatedMarkupOpenTag);
/s
ModalWindow(MarkupContainer).renderComponentTagBody(MarkupStream, ComponentTag) line: 1734	

markupStream	MarkupStream  (id=8096)	
[markup = jar:file:/home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28/webapps/wicket-testing/WEB-INF/lib/wicket-extensions-7.2.0.jar!/org/apache/wicket/extensions/ajax/markup/html/modal/ModalWindow.html
<wicket:panel xmlns:wicket="http://wicket.apache.org">
	<div wicket:id="content">
	</div>
</wicket:panel>, index = 1, current = [Raw markup]]
openTag	WicketTag  (id=7385)	
<wicket:panel xmlns:wicket="http://wicket.apache.org">

		// If the open tag requires a close tag
		boolean render = openTag.requiresCloseTag();
true
		if (render)
		{
			renderAll(markupStream, openTag);
/s
ModalWindow(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1746	
			// Render the markup element
			boolean rawMarkup = renderNext(markupStream);
/s
ModalWindow(MarkupContainer).renderNext(MarkupStream) line: 1495	
		// Get the current markup element
		final MarkupElement element = markupStream.get();
<div wicket:id="content">

			// Get element as tag
			final ComponentTag tag = (ComponentTag)element;

			// Get component id
			final String id = tag.getId();

			// Get the component for the id from the given container
			Component component = get(id);
Label
			// Failed to find it?
			if (component != null)
			{
				component.render();
/s
Label(Component).render() line: 2296	
			// Do the render
			internalRender();
/s
Label(Component).internalRender() line: 2345	

		IMarkupFragment markup = getMarkup();
jar:file:/home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28/webapps/wicket-testing/WEB-INF/lib/wicket-extensions-7.2.0.jar!/org/apache/wicket/extensions/ajax/markup/html/modal/ModalWindow.html
<div wicket:id="content">
	</div>

				onRender();
/s
		internalRenderComponent();
/s
Label(Component).internalRenderComponent() line: 2531	
		// Call any tag handler
		onComponentTag(tag);
/ Voor	,
tag= <div wicket:id="content"> 
/ Na	,
tag= <div wicket:id="content" id="content3" wicketpath="modalWindow_content">

			else
			{
				renderComponentTag(tag);
/s
Label(Component).renderComponentTag(ComponentTag) line: 4034	
			// Write the tag
			tag.writeOutput(getResponse(), !needToRenderTag(null),
				getMarkup().getMarkupResourceStream().getWicketNamespace());
/s
ComponentTag.writeOutput(Response, boolean, String) line: 720	

response	PartialPageUpdate$ResponseBuffer  (id=7327)	
	buffer	AppendingStringBuffer  (id=8050)	
<div wicket:id="modalWindow" id="modalWindow2" wicketpath="modalWindow" style="display:none"><wicket:panel xmlns:wicket="http://wicket.apache.org">

this= <div wicket:id="content" id="content3" wicketpath="modalWindow_content">

		response.write("<");
		response.write(getName());
		if (getAttributes().size() > 0)
		{
			for (String key : getAttributes().keySet())
wicket:id
id
wicketpath
			{
				if ((namespacePrefix == null) || (key.startsWith(namespacePrefix) == false))
				{
					response.write(" ");
					response.write(key);
					CharSequence value = getAttribute(key);
content
content3
modalWindow_content
					// attributes without values are possible, e.g.' disabled'
					if (value != null)
					{
						response.write("=\"");
						value = Strings.escapeMarkup(value);
						response.write(value);
						response.write("\"");
		response.write(">");
response=
<div wicket:id="modalWindow" id="modalWindow2" wicketpath="modalWindow" style="display:none"><wicket:panel xmlns:wicket="http://wicket.apache.org">
	<div wicket:id="content" id="content3" wicketpath="modalWindow_content">

/t
Label(Component).internalRenderComponent() line: 2565	
			else
			{
				renderComponentTag(tag);
/d
tag=<div wicket:id="content" id="content3" wicketpath="modalWindow_content">

			if (tag.isOpen())
			{
				// Render the body. The default strategy will simply call the component's
				// onComponentTagBody() implementation.
				getMarkupSourcingStrategy().onComponentTagBody(this, markupStream, tag);
this=Label
tag=<div wicket:id="content" id="content3" wicketpath="modalWindow_content">
/s
DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
		component.onComponentTagBody(markupStream, openTag);
/s
Label.onComponentTagBody(MarkupStream, ComponentTag) line: 115	
		replaceComponentTagBody(markupStream, openTag, getDefaultModelObjectAsString());
/s
Label(Component).replaceComponentTagBody(MarkupStream, ComponentTag, CharSequence) line: 4074	
		if (body != null)
		{
			// Write the new body
			getResponse().write(body);
/ body=I am a modal window
/s
PartialPageUpdate$ResponseBuffer.write(CharSequence) line: 680	
			buffer.append(cs);
buffer=
<div wicket:id="modalWindow" id="modalWindow2" wicketpath="modalWindow" style="display:none"><wicket:panel xmlns:wicket="http://wicket.apache.org">
	<div wicket:id="content" id="content3" wicketpath="modalWindow_content">I am a modal window

/t
Label(Component).internalRenderComponent() line: 2570	
				// Render the body. The default strategy will simply call the component's
				// onComponentTagBody() implementation.
				getMarkupSourcingStrategy().onComponentTagBody(this, markupStream, tag);
/d
				// Render close tag
				if (openTag.isOpen())
				{
					renderClosingComponentTag(markupStream, tag, getRenderBodyOnly());
/s
Label(Component).renderClosingComponentTag(MarkupStream, ComponentTag, boolean) line: 4284	
		// Tag should be open tag and not openclose tag
		if (openTag.isOpen())
		{
			// If we found a close tag and it closes the open tag, we're good
			if (markupStream.atCloseTag() && markupStream.getTag().closes(openTag))
			{
				// Render the close tag
				if ((renderBodyOnly == false) && needToRenderTag(openTag))
				{
					getResponse().write(openTag.syntheticCloseTagString());

<div wicket:id="modalWindow" id="modalWindow2" wicketpath="modalWindow" style="display:none"><wicket:panel xmlns:wicket="http://wicket.apache.org">
	<div wicket:id="content" id="content3" wicketpath="modalWindow_content">I am a modal window</div>

/t
ModalWindow(MarkupContainer).renderAssociatedMarkup(String, String) line: 799	
			renderComponentTagBody(associatedMarkupStream, associatedMarkupOpenTag);
/d
			renderClosingComponentTag(associatedMarkupStream, associatedMarkupOpenTag, false);
/s
ModalWindow(Component).renderClosingComponentTag(MarkupStream, ComponentTag, boolean) line: 4276	

markupStream=
[markup = jar:file:/home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28/webapps/wicket-testing/WEB-INF/lib/wicket-extensions-7.2.0.jar!/org/apache/wicket/extensions/ajax/markup/html/modal/ModalWindow.html
<wicket:panel xmlns:wicket="http://wicket.apache.org">
	<div wicket:id="content">
	</div>
</wicket:panel>, index = 6, current =  '</wicket:panel>' (line 0, column 0)]
openTag=
<wicket:panel xmlns:wicket="http://wicket.apache.org">

		// Tag should be open tag and not openclose tag
		if (openTag.isOpen())
		{
			// If we found a close tag and it closes the open tag, we're good
			if (markupStream.atCloseTag() && markupStream.getTag().closes(openTag))
			{
				// Render the close tag
				if ((renderBodyOnly == false) && needToRenderTag(openTag))
				{
					getResponse().write(openTag.syntheticCloseTagString());

/t
ModalWindow(Component).internalRenderComponent() line: 2568	
			if (tag.isOpen())
			{
				// Render the body. The default strategy will simply call the component's
				// onComponentTagBody() implementation.
				getMarkupSourcingStrategy().onComponentTagBody(this, markupStream, tag);
/d
				// Render close tag
				if (openTag.isOpen())
				{
					renderClosingComponentTag(markupStream, tag, getRenderBodyOnly());
/s
ModalWindow(Component).renderClosingComponentTag(MarkupStream, ComponentTag, boolean) line: 4284	

openTag=
<div wicket:id="modalWindow" id="modalWindow2" wicketpath="modalWindow" style="display:none">

		// Tag should be open tag and not openclose tag
		if (openTag.isOpen())
		{
			// If we found a close tag and it closes the open tag, we're good
			if (markupStream.atCloseTag() && markupStream.getTag().closes(openTag))
			{
				// Render the close tag
				if ((renderBodyOnly == false) && needToRenderTag(openTag))
				{
					getResponse().write(openTag.syntheticCloseTagString());

/t
ModalWindow(Component).internalRender() line: 2391	
				onRender();
/d
/t
AjaxRequestHandler$1(XmlPartialPageUpdate).writeComponent(Response, String, Component, String) line: 125	
			try
			{
				component.render();
/d

response	StringResponse  (id=7300)	
	out	AppendingStringBuffer  (id=7980)	
<?xml version="1.0" encoding="UTF-8"?><ajax-response>

		response.write("<component id=\"");
		response.write(markupId);
		response.write("\" ><![CDATA[");
		response.write(encode(bodyBuffer.getContents()));
		response.write("]]></component>");

response	StringResponse  (id=7300)	
	out	AppendingStringBuffer  (id=7980)	
/=
<?xml version="1.0" encoding="UTF-8"?><ajax-response><component id="modalWindow2" ><![CDATA[<div wicket:id="modalWindow" id="modalWindow2" wicketpath="modalWindow" style="display:none"><wicket:panel xmlns:wicket="http://wicket.apache.org">
	<div wicket:id="content" id="content3" wicketpath="modalWindow_content">I am a modal window</div>
</wicket:panel></div>]]></component>

/t
AjaxRequestHandler$1(PartialPageUpdate).writeComponents(Response, String) line: 249	
		for (Map.Entry<String, Component> stringComponentEntry : markupIdToComponent.entrySet())
		{
			final Component component = stringComponentEntry.getValue();

			if (!containsAncestorFor(component))
			{
				writeComponent(response, component.getAjaxRegionMarkupId(), component, encoding);
/d

		if (header != null)

this	AjaxRequestHandler$1  (id=7304)	
	header	PartialPageUpdate$PartialHtmlHeaderContainer  (id=7323)	
		headerResponse	ResourceAggregator  (id=7341)	
			itemsToBeRendered	LinkedHashMap<K,V>  (id=7491)						/ met al die .js , .css files
			realResponse	PartialPageUpdate$PartialHeaderResponse  (id=7495)	
		id	"_header_" (id=7324)	
		...

			// now, close the response (which may render things)
			header.getHeaderResponse().close();
/s
ResourceAggregator.close() line: 280	
		renderHeaderItems();
/s
ResourceAggregator.renderHeaderItems() line: 298	

		List<RecordedHeaderItem> sortedItemsToBeRendered = new ArrayList<>(
			itemsToBeRendered.values());
[
[ModalWindow@0, CloseButtonBehavior@0, WindowClosedBehavior@0]:JavaScriptReferenceHeaderItem(scope: org.apache.wicket.resource.JQueryResourceReference; name: jquery/jquery-2.2.0.js; locale: null; style: null; variation: null, null), 
[ModalWindow@1, CloseButtonBehavior@1, WindowClosedBehavior@1]:JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-event-jquery.js; locale: null; style: null; variation: null, null), 
[ModalWindow@2, CloseButtonBehavior@2, WindowClosedBehavior@2]:JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-ajax-jquery.js; locale: null; style: null; variation: null, null), 
[ModalWindow@3, CloseButtonBehavior@3, WindowClosedBehavior@3]:JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-ajax-jquery-debug.js; locale: null; style: null; variation: null, null), 
[ModalWindow@4, CloseButtonBehavior@4, WindowClosedBehavior@4]:JavaScriptHeaderItem(Wicket.Ajax.DebugWindow.enabled=true;), 
[ModalWindow@5]:JavaScriptReferenceHeaderItem(scope: org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow; name: res/modal.js; locale: null; style: null; variation: null, null), 
[ModalWindow@6]:CSSReferenceHeaderItem(scope: org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow; name: res/modal.css; locale: null; style: null; variation: null, null), 
[CloseButtonBehavior@5, WindowClosedBehavior@5]:JavaScriptHeaderItem(Wicket.Ajax.baseUrl="?0";)
]
		Comparator<? super RecordedHeaderItem> headerItemComparator = Application.get()
			.getResourceSettings()
			.getHeaderItemComparator();
		if (headerItemComparator != null)
		{
			Collections.sort(sortedItemsToBeRendered, headerItemComparator);
		}
		for (RecordedHeaderItem curRenderItem : sortedItemsToBeRendered)
		{
			if (markItemRendered(curRenderItem.getItem()))
			{
				getRealResponse().render(curRenderItem.getItem());
/s
PartialPageUpdate$PartialHeaderResponse.render(HeaderItem) line: 573	
/=
		public void render(HeaderItem item)

this	PartialPageUpdate$PartialHeaderResponse  (id=7495)	
item	JavaScriptReferenceHeaderItem  (id=7552)	

			else if (headerRendering)
			{
				super.render(item);
/s
PartialPageUpdate$PartialHeaderResponse(HeaderResponse).render(HeaderItem) line: 52	

		if (!closed && !wasItemRendered(item))
		{
			item.render(getResponse());
/s
JavaScriptReferenceHeaderItem.render(Response) line: 106	
		internalRenderJavaScriptReference(response, getUrl(), getId(), isDefer(), getCharset(),
			getCondition(), isAsync());
/s
JavaScriptReferenceHeaderItem(JavaScriptHeaderItem).internalRenderJavaScriptReference(Response, String, String, boolean, String, String, boolean) line: 353	

response	PartialPageUpdate$ResponseBuffer  (id=7353)	
	buffer	AppendingStringBuffer  (id=7355)	
/ leeg, net nieuw	,
url= ./wicket/resource/org.apache.wicket.resource.JQueryResourceReference/jquery/jquery-2.2.0-ver-1455723568000.js

		JavaScriptUtils.writeJavaScriptUrl(response, escapedUrl, id, defer, charset, async);
/s
JavaScriptUtils.writeJavaScriptUrl(Response, CharSequence, String, boolean, String, boolean) line: 156	
		response.write("<script type=\"text/javascript\" ");
		response.write("src=\"");
		response.write(url);
		response.write("\"></script>");
		response.write("\n");

response	PartialPageUpdate$ResponseBuffer  (id=7353)	
	buffer	AppendingStringBuffer  (id=7355)	
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.resource.JQueryResourceReference/jquery/jquery-2.2.0-ver-1455723568000.js"></script>

/t
ResourceAggregator.renderHeaderItems() line: 309	

/ volgende	,
		for (RecordedHeaderItem curRenderItem : sortedItemsToBeRendered)
[ModalWindow@1, CloseButtonBehavior@1, WindowClosedBehavior@1]:JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-event-jquery.js; locale: null; style: null; variation: null, null)
		{
			if (markItemRendered(curRenderItem.getItem()))
			{
				getRealResponse().render(curRenderItem.getItem());
/ TODO (Waarom realResponse?)
/s
PartialPageUpdate$PartialHeaderResponse.render(HeaderItem) line: 616	
			else if (headerRendering)
			{
				super.render(item);
/s
PartialPageUpdate$PartialHeaderResponse(HeaderResponse).render(HeaderItem) line: 54	
		if (!closed && !wasItemRendered(item))
		{
			item.render(getResponse());
/s
PartialPageUpdate$PartialHeaderResponse.getRealResponse() line: 627	
			return RequestCycle.get().getResponse();
/t
/s
JavaScriptReferenceHeaderItem.render(Response) line: 106	
		internalRenderJavaScriptReference(response, getUrl(), getId(), isDefer(), getCharset(),
			getCondition(), isAsync());
/s
JavaScriptReferenceHeaderItem.getUrl() line: 128	
		IRequestHandler handler = new ResourceReferenceRequestHandler(getReference(),
			getPageParameters());
handler	ResourceReferenceRequestHandler  (id=8460)	
	resourceReference	WicketEventJQueryResourceReference  (id=7461)	

		return RequestCycle.get().urlFor(handler).toString();
/t
/s
JavaScriptReferenceHeaderItem(JavaScriptHeaderItem).internalRenderJavaScriptReference(Response, String, String, boolean, String, String, boolean) line: 353	

		JavaScriptUtils.writeJavaScriptUrl(response, escapedUrl, id, defer, charset, async);
/s
JavaScriptUtils.writeJavaScriptUrl(Response, CharSequence, String, boolean, String, boolean) line: 156	
		response.write("<script type=\"text/javascript\" ");
		response.write("src=\"");
		response.write(url);
		response.write("\"></script>");
		response.write("\n");
response	PartialPageUpdate$ResponseBuffer  (id=7353)	
	buffer	AppendingStringBuffer  (id=7355)	
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.resource.JQueryResourceReference/jquery/jquery-2.2.0-ver-1455723568000.js"></script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-event-jquery-ver-1455723568000.js"></script>

/t
ResourceAggregator.renderHeaderItems() line: 307	

/ volgende	,
		for (RecordedHeaderItem curRenderItem : sortedItemsToBeRendered)
		{
			if (markItemRendered(curRenderItem.getItem()))
			{
				getRealResponse().render(curRenderItem.getItem());

/ we geven continue	,

/t
ResourceAggregator.close() line: 282	
		renderHeaderItems();
/d
		else
		{
			renderSeperateEventScripts();
/ NIETS	,
		super.close();

/t
AjaxRequestHandler$1(PartialPageUpdate).writeComponents(Response, String) line: 265	
			// now, close the response (which may render things)
			header.getHeaderResponse().close();
/d
			// revert to old response
			RequestCycle.get().setResponse(oldResponse);

response	StringResponse  (id=7300)	
	out	AppendingStringBuffer  (id=7980)	
<?xml version="1.0" encoding="UTF-8"?><ajax-response><component id="modalWindow2" ><![CDATA[<div wicket:id="modalWindow" id="modalWindow2" wicketpath="modalWindow" style="display:none"><wicket:panel xmlns:wicket="http://wicket.apache.org">
	<div wicket:id="content" id="content3" wicketpath="modalWindow_content">I am a modal window</div>
</wicket:panel></div>]]></component>

			// write the XML tags and we're done
			writeHeaderContribution(response);
/s
AjaxRequestHandler$1(XmlPartialPageUpdate).writeHeaderContribution(Response) line: 153	
		if (headerBuffer.getContents().length() != 0)
		{
			response.write("<header-contribution>");

			// we need to write response as CDATA and parse it on client,
			// because konqueror crashes when there is a <script> element
			response.write("<![CDATA[<head xmlns:wicket=\"http://wicket.apache.org\">");
			response.write(encode(headerBuffer.getContents()));
			response.write("</head>]]>");
			response.write("</header-contribution>");

response	StringResponse  (id=7300)	
	out	AppendingStringBuffer  (id=7980)	
out=
<?xml version="1.0" encoding="UTF-8"?><ajax-response><component id="modalWindow2" ><![CDATA[<div wicket:id="modalWindow" id="modalWindow2" wicketpath="modalWindow" style="display:none"><wicket:panel xmlns:wicket="http://wicket.apache.org">
	<div wicket:id="content" id="content3" wicketpath="modalWindow_content">I am a modal window</div>
</wicket:panel></div>]]></component><header-contribution><![CDATA[<head xmlns:wicket="http://wicket.apache.org"><script type="text/javascript" src="./wicket/resource/org.apache.wicket.resource.JQueryResourceReference/jquery/jquery-2.2.0-ver-1455723568000.js"></script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-event-jquery-ver-1455723568000.js"></script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-ajax-jquery-ver-1455723568000.js"></script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-ajax-jquery-debug-ver-1455723568000.js"></script>
<script type="text/javascript" id="wicket-ajax-debug-enable">
/*<![CDATA[*/
Wicket.Ajax.DebugWindow.enabled=true;
/*]]]]><![CDATA[>*/
</script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow/res/modal-ver-1455723568000.js"></script>
<link rel="stylesheet" type="text/css" href="./wicket/resource/org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow/res/modal-ver-1455723568000.css" />
<script type="text/javascript" id="wicket-ajax-base-url">
/*<![CDATA[*/
Wicket.Ajax.baseUrl="?0";
/*]]]]><![CDATA[>*/
</script>
</head>]]></header-contribution>

/t
AjaxRequestHandler$1(PartialPageUpdate).writeTo(Response, String) line: 160	
			// process added components
			writeComponents(response, encoding);
/d
			onAfterRespond(response);
/s
AjaxRequestHandler$1.onAfterRespond(Response) line: 151	
/=
	public AjaxRequestHandler(final Page page)
	{
		this.page = Args.notNull(page, "page");

		update = new XmlPartialPageUpdate(page)
			@Override
			protected void onAfterRespond(final Response response)
->
/ NIETS
/t
AjaxRequestHandler$1(PartialPageUpdate).writeTo(Response, String) line: 164	
			onAfterRespond(response);
/d
			// queue up prepend javascripts. unlike other steps these are executed out of order so that
			// components can contribute them from inside their onbeforerender methods.
			writePriorityEvaluations(response, prependJavaScripts);
prependJavaScripts=[]

			// execute the dom ready javascripts as first javascripts
			// after component replacement
			List<CharSequence> evaluationScripts = new ArrayList<>();
			evaluationScripts.addAll(domReadyJavaScripts);
[]
			evaluationScripts.addAll(appendJavaScripts);
[var element = document.getElementById("content3");
var settings = new Object();
settings.minWidth=200;
settings.minHeight=200;
settings.className="w_blue";
settings.width=600;
settings.height=400;
settings.resizable=true;
settings.element=element;
settings.title="Modal window";
settings.mask="semi-transparent";
settings.autoSize=false;
settings.unloadConfirmation=true;
settings.onClose = function() { Wicket.Ajax.ajax({"u":"./?0-1.IBehaviorListener.1-modalWindow","c":"modalWindow2"}); };
window.setTimeout(function(){
  Wicket.Window.create(settings).show();
}, 0);
]
			writeNormalEvaluations(response, evaluationScripts);
/s
AjaxRequestHandler$1(XmlPartialPageUpdate).writeNormalEvaluations(Response, Collection<CharSequence>) line: 169	
		writeEvaluations(response, "evaluate", scripts);

/ Intermezzo

response	StringResponse  (id=7300)	
/=
<?xml version="1.0" encoding="UTF-8"?><ajax-response><component id="modalWindow2" ><![CDATA[<div wicket:id="modalWindow" id="modalWindow2" wicketpath="modalWindow" style="display:none"><wicket:panel xmlns:wicket="http://wicket.apache.org">
	<div wicket:id="content" id="content3" wicketpath="modalWindow_content">I am a modal window</div>
</wicket:panel></div>]]></component><header-contribution><![CDATA[<head xmlns:wicket="http://wicket.apache.org"><script type="text/javascript" src="./wicket/resource/org.apache.wicket.resource.JQueryResourceReference/jquery/jquery-2.2.0-ver-1455723568000.js"></script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-event-jquery-ver-1455723568000.js"></script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-ajax-jquery-ver-1455723568000.js"></script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-ajax-jquery-debug-ver-1455723568000.js"></script>
<script type="text/javascript" id="wicket-ajax-debug-enable">
/*<![CDATA[*/
Wicket.Ajax.DebugWindow.enabled=true;
/*]]]]><![CDATA[>*/
</script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow/res/modal-ver-1455723568000.js"></script>
<link rel="stylesheet" type="text/css" href="./wicket/resource/org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow/res/modal-ver-1455723568000.css" />
<script type="text/javascript" id="wicket-ajax-base-url">
/*<![CDATA[*/
Wicket.Ajax.baseUrl="?0";
/*]]]]><![CDATA[>*/
</script>
</head>]]></header-contribution>

scripts	ArrayList<E>  (id=8533)	
=
[var element = document.getElementById("content3");
var settings = new Object();
settings.minWidth=200;
settings.minHeight=200;
settings.className="w_blue";
settings.width=600;
settings.height=400;
settings.resizable=true;
settings.element=element;
settings.title="Modal window";
settings.mask="semi-transparent";
settings.autoSize=false;
settings.unloadConfirmation=true;
settings.onClose = function() { Wicket.Ajax.ajax({"u":"./?0-1.IBehaviorListener.1-modalWindow","c":"modalWindow2"}); };
window.setTimeout(function(){
  Wicket.Window.create(settings).show();
}, 0);
]

/ Einde Intermezzo

/s
AjaxRequestHandler$1(XmlPartialPageUpdate).writeEvaluations(Response, String, Collection<CharSequence>) line: 181	
		if (scripts.size() > 0)
		{
			StringBuilder combinedScript = new StringBuilder(1024);
			for (CharSequence script : scripts)
/ 1 keer	,
			{
				combinedScript.append("(function(){").append(script).append("})();");

combinedScript	StringBuilder  (id=8545)	
/=
(function(){var element = document.getElementById("content3");
var settings = new Object();
settings.minWidth=200;
settings.minHeight=200;
settings.className="w_blue";
settings.width=600;
settings.height=400;
settings.resizable=true;
settings.element=element;
settings.title="Modal window";
settings.mask="semi-transparent";
settings.autoSize=false;
settings.unloadConfirmation=true;
settings.onClose = function() { Wicket.Ajax.ajax({"u":"./?0-1.IBehaviorListener.1-modalWindow","c":"modalWindow2"}); };
window.setTimeout(function(){
  Wicket.Window.create(settings).show();
}, 0);
})();

			writeEvaluation(elementName, response, combinedScript);
/s
AjaxRequestHandler$1(XmlPartialPageUpdate).writeEvaluation(String, Response, CharSequence) line: 201	
/=
	private void writeEvaluation(final String invocation, final Response response, final CharSequence js)
invocation="evaluate"
		response.write("<");
		response.write(invocation);
		response.write(">");

		response.write("<![CDATA[");
		response.write(encode(js));
		response.write("]]>");

		response.write("</");
		response.write(invocation);
		response.write(">");

response	StringResponse  (id=7300)	
/=
<?xml version="1.0" encoding="UTF-8"?><ajax-response><component id="modalWindow2" ><![CDATA[<div wicket:id="modalWindow" id="modalWindow2" wicketpath="modalWindow" style="display:none"><wicket:panel xmlns:wicket="http://wicket.apache.org">
	<div wicket:id="content" id="content3" wicketpath="modalWindow_content">I am a modal window</div>
</wicket:panel></div>]]></component><header-contribution><![CDATA[<head xmlns:wicket="http://wicket.apache.org"><script type="text/javascript" src="./wicket/resource/org.apache.wicket.resource.JQueryResourceReference/jquery/jquery-2.2.0-ver-1455723568000.js"></script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-event-jquery-ver-1455723568000.js"></script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-ajax-jquery-ver-1455723568000.js"></script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-ajax-jquery-debug-ver-1455723568000.js"></script>
<script type="text/javascript" id="wicket-ajax-debug-enable">
/*<![CDATA[*/
Wicket.Ajax.DebugWindow.enabled=true;
/*]]]]><![CDATA[>*/
</script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow/res/modal-ver-1455723568000.js"></script>
<link rel="stylesheet" type="text/css" href="./wicket/resource/org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow/res/modal-ver-1455723568000.css" />
<script type="text/javascript" id="wicket-ajax-base-url">
/*<![CDATA[*/
Wicket.Ajax.baseUrl="?0";
/*]]]]><![CDATA[>*/
</script>
</head>]]></header-contribution><evaluate><![CDATA[(function(){var element = document.getElementById("content3");
var settings = new Object();
settings.minWidth=200;
settings.minHeight=200;
settings.className="w_blue";
settings.width=600;
settings.height=400;
settings.resizable=true;
settings.element=element;
settings.title="Modal window";
settings.mask="semi-transparent";
settings.autoSize=false;
settings.unloadConfirmation=true;
settings.onClose = function() { Wicket.Ajax.ajax({"u":"./?0-1.IBehaviorListener.1-modalWindow","c":"modalWindow2"}); };
window.setTimeout(function(){
  Wicket.Window.create(settings).show();
}, 0);
})();]]></evaluate>

/t
AjaxRequestHandler$1(PartialPageUpdate).writeTo(Response, String) line: 173	
			writeNormalEvaluations(response, evaluationScripts);
/d
			writeFooter(response, encoding);
/s
AjaxRequestHandler$1(XmlPartialPageUpdate).writeFooter(Response, String) line: 147	
		response.write(END_ROOT_ELEMENT);
</ajax-response>

/t
AjaxRequestHandler$1(PartialPageUpdate).writeTo(Response, String) line: 177	
			writeFooter(response, encoding);
/d
		} finally {
			if (header != null) {
				// restore a normal header
				page.replace(new HtmlHeaderContainer(HtmlHeaderSectionHandler.HEADER_ID));
/s
ModalWindowStudyPage(MarkupContainer).replace(Component) line: 825	
		if (child.getParent() != this)
		{
			final Component replaced = children_put(child);
replaced	PartialPageUpdate$PartialHtmlHeaderContainer  (id=7323)	
			...
/t
AjaxRequestHandler$1(PartialPageUpdate).writeTo(Response, String) line: 178	
		} finally {
			if (header != null) {
header	PartialPageUpdate$PartialHtmlHeaderContainer  (id=7323)	

				// restore a normal header
				page.replace(new HtmlHeaderContainer(HtmlHeaderSectionHandler.HEADER_ID));
/d
				header = null;
/t
AjaxRequestHandler.respond(IRequestCycle) line: 359	
		update.writeTo(bodyResponse, encoding);
/d
		CharSequence filteredResponse = invokeResponseFilters(bodyResponse);
/ NIETS
		response.write(filteredResponse);
/s
HeaderBufferingWebResponse.write(CharSequence) line: 179	

this	HeaderBufferingWebResponse  (id=7297)	
	bufferedResponse	BufferedWebResponse  (id=8592)	
	buffering	false	
	originalResponse	ServletWebResponse  (id=8593)	

		stopBuffering();

		originalResponse.write(sequence);

sequence=
<?xml version="1.0" encoding="UTF-8"?><ajax-response><component id="modalWindow2" ><![CDATA[<div wicket:id="modalWindow" id="modalWindow2" wicketpath="modalWindow" style="display:none"><wicket:panel xmlns:wicket="http://wicket.apache.org">
	<div wicket:id="content" id="content3" wicketpath="modalWindow_content">I am a modal window</div>
</wicket:panel></div>]]></component><header-contribution><![CDATA[<head xmlns:wicket="http://wicket.apache.org"><script type="text/javascript" src="./wicket/resource/org.apache.wicket.resource.JQueryResourceReference/jquery/jquery-2.2.0-ver-1455723568000.js"></script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-event-jquery-ver-1455723568000.js"></script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-ajax-jquery-ver-1455723568000.js"></script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-ajax-jquery-debug-ver-1455723568000.js"></script>
<script type="text/javascript" id="wicket-ajax-debug-enable">
/*<![CDATA[*/
Wicket.Ajax.DebugWindow.enabled=true;
/*]]]]><![CDATA[>*/
</script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow/res/modal-ver-1455723568000.js"></script>
<link rel="stylesheet" type="text/css" href="./wicket/resource/org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow/res/modal-ver-1455723568000.css" />
<script type="text/javascript" id="wicket-ajax-base-url">
/*<![CDATA[*/
Wicket.Ajax.baseUrl="?0";
/*]]]]><![CDATA[>*/
</script>
</head>]]></header-contribution><evaluate><![CDATA[(function(){var element = document.getElementById("content3");
var settings = new Object();
settings.minWidth=200;
settings.minHeight=200;
settings.className="w_blue";
settings.width=600;
settings.height=400;
settings.resizable=true;
settings.element=element;
settings.title="Modal window";
settings.mask="semi-transparent";
settings.autoSize=false;
settings.unloadConfirmation=true;
settings.onClose = function() { Wicket.Ajax.ajax({"u":"./?0-1.IBehaviorListener.1-modalWindow","c":"modalWindow2"}); };
window.setTimeout(function(){
  Wicket.Window.create(settings).show();
}, 0);
})();]]></evaluate></ajax-response>

/t
RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 899	
			try
			{
				handler.respond(RequestCycle.this);
/d
			}
			finally
			{
				setResponse(originalResponse);
/t
RequestCycle.processRequestAndDetach() line: 297	
			result = processRequest();
/d
		}
		finally
		{
			detach();

/ we geven 
/c

/ Einde SERVER

/ JS

$ vi jquery.js

				// Callback
				callback = function( type ) {
					return function() {
 							} else {
								complete(
/ call op complete, = done	,
										typeof xhr.responseText !== "string" ?
										...
										{ text: xhr.responseText },
/=
"<?xml version="1.0" encoding="UTF-8"?><ajax-response><component id="modalWindow2" ><![CDATA[<div wicket:id="modalWindow" id="modalWindow2" wicketpath="modalWindow" style="display:none"><wicket:panel xmlns:wicket="http://wicket.apache.org">
	<div wicket:id="content" id="content3" wicketpath="modalWindow_content">I am a modal window</div>
</wicket:panel></div>]]></component><header-contribution><![CDATA[<head xmlns:wicket="http://wicket.apache.org"><script type="text/javascript" src="./wicket/resource/org.apache.wicket.resource.JQueryResourceReference/jquery/jquery-2.2.0-ver-1455723568000.js"></script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-event-jquery-ver-1455723568000.js"></script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-ajax-jquery-ver-1455723568000.js"></script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-ajax-jquery-debug-ver-1455723568000.js"></script>
<script type="text/javascript" id="wicket-ajax-debug-enable">
/*<![CDATA[*/
Wicket.Ajax.DebugWindow.enabled=true;
/*]]]]><![CDATA[>*/
</script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow/res/modal-ver-1455723568000.js"></script>
<link rel="stylesheet" type="text/css" href="./wicket/resource/org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow/res/modal-ver-1455723568000.css" />
<script type="text/javascript" id="wicket-ajax-base-url">
/*<![CDATA[*/
Wicket.Ajax.baseUrl="?0";
/*]]]]><![CDATA[>*/
</script>
</head>]]></header-contribution><evaluate><![CDATA[(function(){var element = document.getElementById("content3");
var settings = new Object();
settings.minWidth=200;
settings.minHeight=200;
settings.className="w_blue";
settings.width=600;
settings.height=400;
settings.resizable=true;
settings.element=element;
settings.title="Modal window";
settings.mask="semi-transparent";
settings.autoSize=false;
settings.unloadConfirmation=true;
settings.onClose = function() { Wicket.Ajax.ajax({"u":"./?0-1.IBehaviorListener.1-modalWindow","c":"modalWindow2"}); };
window.setTimeout(function(){
  Wicket.Window.create(settings).show();
}, 0);
})();]]></evaluate></ajax-response>"

/s
$ vi jquery.js
		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );
/ response is JS obj	, 
				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );


$ vi modal.js

		// create and return instance
		return new Win(settings);
settings: Object
autoSize: false
className: "w_blue"
element: div#content3
height: 400
mask: "semi-transparent"
minHeight: 200
minWidth: 200
onClose: function () { Wicket.Ajax.ajax({"u":"./?0-1.IBehaviorListener.1-modalWindow","c":"modalWindow2"}); }
resizable: true
title: "Modal window"
unloadConfirmation: true
width: 600
__proto__: Object	
/s
$ vi wicket-ajax-jquery.js
	Wicket.Class = {
		create: function () {
			return function () {
->				this.initialize.apply(this, arguments);
/s
$ vi modal.js
		initialize: function(settings) {

			// override default settings with user settings
			this.settings = Wicket.Object.extend({
				minWidth: 200,  /* valid only if resizable */
				minHeight: 150, /* valid only if resizable */

				className: "w_blue", /* w_silver */

				width: 600,  /* initial width */
				height: 300, /* may be null for non-iframe, non-resizable window (automatic height) */

				resizable: true,

				widthUnit: "px", /* valid only if not resizable */
				heightUnit: "px", /* valid only if not resizable */

				src: null,     /* iframe src - this takes precedence over the "element" property */
				element: null, /* content element (for non-iframe window) */

				iframeName: null, /* name of the iframe */

				cookieId: null, /* id of position (and size if resizable) cookie */

				title: null, /* window title. if null and window content is iframe, title of iframe document will be used. */

				onCloseButton: Wicket.bind(function() {
					/* On firefox on Linux, at least, we need to blur() textfields, etc.
					 * to get it to update its DOM model. Otherwise you'll lose any changes
					 * made to the current form component you're editing.
					 */
					this.caption.getElementsByTagName("a")[0].focus();
					this.caption.getElementsByTagName("a")[0].blur();
					this.close();
					return false;
				}, this), /* called when close button is clicked */

				onClose: function() { }, /* called when window is closed */

				mask: "semi-transparent", /* or "transparent" */

				unloadConfirmation : true /* Display confirmation dialog if the user is about to leave a page (IE and FF) */

			}, settings || { });

		},

/c
(function(){var element = document.getElementById("content3");
var settings = new Object();
settings.minWidth=200;
settings.minHeight=200;
settings.className="w_blue";
settings.width=600;
settings.height=400;
settings.resizable=true;
settings.element=element;
settings.title="Modal window";
settings.mask="semi-transparent";
settings.autoSize=false;
settings.unloadConfirmation=true;
settings.onClose = function() { Wicket.Ajax.ajax({"u":"./?0-1.IBehaviorListener.1-modalWindow","c":"modalWindow2"}); };
window.setTimeout(function(){
  Wicket.Window.create(settings).show();
}, 0);
})();
/s
Wicket.Window.show (modal-ver-1455723568000.js:645)
(anonymous function) (VM10157:16)
		/**
		 * Shows the window.
		 */
		show: function() {
this: Object
settings: Object
autoSize: false
className: "w_blue"
cookieId: null
element: div#content3
height: 400
heightUnit: "px"
iframeName: null
mask: "semi-transparent"
minHeight: 200
minWidth: 200
onClose: function () { Wicket.Ajax.ajax({"u":"./?0-1.IBehaviorListener.1-modalWindow","c":"modalWindow2"}); }
onCloseButton: function () {
resizable: true
src: null
title: "Modal window"
unloadConfirmation: true
width: 600
widthUnit: "px"
__proto__: Object
__proto__: Object

			// create the DOM elements
			this.createDOM();
/s
Wicket.Window.createDOM (modal-ver-1455723568000.js:347)

			var markup = Wicket.Window.getMarkup(idWindow, idClassElement, idCaption, idFrame,
					idTop, idTopLeft, idTopRight, idLeft, idRight, idBottomLeft, idBottomRight,
					idBottom, idCaptionText, this.isIframe());
/s
Wicket.Window.getMarkup (modal-ver-14557…568000.js:1198)

		var s =
				"<div class=\"wicket-modal\" id=\""+idWindow+"\" role=\"dialog\" aria-labelledBy=\""+idCaptionText+"\" style=\"top: 10px; left: 10px; width: 100px;\"><form style='background-color:transparent;padding:0px;margin:0px;border-width:0px;position:static'>"+
				"<div id=\""+idClassElement+"\">"+

					"<div class=\"w_top_1\">"+

					"<div class=\"w_topLeft\" id=\""+idTopLeft+"\">"+
					"</div>"+

					"<div class=\"w_topRight\" id=\""+idTopRight+"\">"+
					"</div>"+

					"<div class=\"w_top\" id='"+idTop+"'>"+
					"</div>"+

					"</div>"+

					"<div class=\"w_left\" id='"+idLeft+"'>"+
						"<div class=\"w_right_1\">"+
							"<div class=\"w_right\" id='"+idRight+"'>"+
								"<div class=\"w_content_1\" onmousedown=\"Wicket.Event.stop(event);\">"+
									"<div class=\"w_caption\"  id=\""+idCaption+"\">"+
										"<a class=\"w_close\" style=\"z-index:1\" href=\"#\"></a>"+
										"<h3 id=\""+idCaptionText+"\" class=\"w_captionText\"></h3>"+
									"</div>"+

									"<div class=\"w_content_2\">"+
									"<div class=\"w_content_3\">"+
			                            "<div class=\"w_content\">";
					if (isFrame) {
/ NEE
						s+= "<iframe frameborder=\"0\" id=\""+idContent+"\" allowtransparency=\"false\" style=\"height: 200px\" class=\"wicket_modal\"></iframe>";
					} else {
/ JA
						s+= "<div id='"+idContent+"' class='w_content_container'></div>";
					}
						s+=
										"</div>"+
									"</div>"+
									"</div>"+
								"</div>"+
							"</div>"+
						"</div>"+
					"</div>"+


					"<div class=\"w_bottom_1\" id=\""+idBottom+"_1\">"+

						"<div class=\"w_bottomRight\"  id=\""+idBottomRight+"\">"+
						"</div>"+

						"<div class=\"w_bottomLeft\" id=\""+idBottomLeft+"\">"+
						"</div>"+

						"<div class=\"w_bottom\" id=\""+idBottom+"\">"+
						"</div>"+


					"</div>"+

				"</div>"+
			"</form></div>";

			return s;
	};

/t
Wicket.Window.createDOM (modal-ver-1455723568000.js:351)
			var markup = Wicket.Window.getMarkup(idWindow, idClassElement, idCaption, idFrame,
					idTop, idTopLeft, idTopRight, idLeft, idRight, idBottomLeft, idBottomRight,
					idBottom, idCaptionText, this.isIframe());
/d
			var element = document.createElement("div");
			element.id = idWindow;
			document.body.appendChild(element);
			Wicket.DOM.replace(element, markup);
			...
/t
Wicket.Window.show (modal-ver-1455723568000.js:648)
			// create the DOM elements
			this.createDOM();
/d
			if (this.isIframe()) {
/ NEE
				// load the file
				this.load();
			} else {
/ JA
				// it's an element content

				// is the element specified?
				if (this.settings.element == null) {
					throw "Either src or element must be set.";
				}

				// reparent the element
/ Intermezzo

/ we zien nu in de DOM	,

<div wicket:id="modalWindow" id="modalWindow2" wicketpath="modalWindow" style="display:none">
	<wicket:panel xmlns:wicket="http://wicket.apache.org">
		<div wicket:id="content" id="content3" wicketpath="modalWindow_content">I am a modal window</div>
	</wicket:panel>
</div>

///////////////////////////
/ De content moet naar de modal window	,
	<div wicket:id="content" id="content3" wicketpath="modalWindow_content">I am a modal window</div>
////////////////////////

<div class="wicket-modal" id="_wicket_window_65" role="dialog" aria-labelledby="_wicket_window_77" style="top: 10px; left: 10px; width: 100px; position: absolute;">
	<form style="background-color:transparent;padding:0px;margin:0px;border-width:0px;position:static">
		<div id="_wicket_window_66" class="w_blue">
			<div class="w_top_1">
				<div class="w_topLeft" id="_wicket_window_70"></div>
				<div class="w_topRight" id="_wicket_window_71"></div>
				<div class="w_top" id="_wicket_window_69"></div></div>
				<div class="w_left" id="_wicket_window_72">
					<div class="w_right_1">
						<div class="w_right" id="_wicket_window_73">
							<div class="w_content_1" onmousedown="Wicket.Event.stop(event);">
								<div class="w_caption" id="_wicket_window_67">
									<a class="w_close" style="z-index:1" href="#"></a>
									<h3 id="_wicket_window_77" class="w_captionText"></h3>
								</div>
								<div class="w_content_2">
									<div class="w_content_3">
										<div class="w_content">
											<div id="_wicket_window_68" class="w_content_container"></div>
///////////////////////
/ Deze komt hier	,
												<div wicket:id="content" id="content3" wicketpath="modalWindow_content">I am a modal window</div>
///////////////////////
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
				<div class="w_bottom_1" id="_wicket_window_76_1">
					<div class="w_bottomRight" id="_wicket_window_75"></div>
					<div class="w_bottomLeft" id="_wicket_window_74"></div>
					<div class="w_bottom" id="_wicket_window_76"></div>
				</div>
			</div>
		</form>
	</div>


/ Einde Intermezzo

				this.oldParent = this.settings.element.parentNode;
this.settings.element=div#content3
this.oldParent=wicket:panel
				this.settings.element.parentNode.removeChild(this.settings.element);
/ Inderdaad, div#content3 is eruit	,
				this.content.appendChild(this.settings.element);

				// set the overflow style so that scrollbars are shown when the element is bigger than window
				this.content.style.overflow="auto";

			// bind the events
			this.bindInit();
/s
Wicket.Window.bindInit (modal-ver-1455723568000.js:422)

			this.bind(this.caption, this.onMove);
/s
Wicket.Window.bind (modal-ver-1455723568000.js:408)
			Wicket.Drag.init(element, Wicket.bind(this.onBegin, this), Wicket.bind(this.onEnd, this), Wicket.bind(handler, this));
			if (this.settings.resizable) {
				this.bind(this.bottomRight, this.onResizeBottomRight);
				this.bind(this.bottomLeft, this.onResizeBottomLeft);
				this.bind(this.bottom, this.onResizeBottom);
				this.bind(this.left, this.onResizeLeft);
				this.bind(this.right, this.onResizeRight);
				this.bind(this.topLeft, this.onResizeTopLeft);
				this.bind(this.topRight, this.onResizeTopRight);
				this.bind(this.top, this.onResizeTop);
			this.caption.getElementsByTagName("a")[0].onclick = Wicket.bind(this.settings.onCloseButton, this);
/t
Wicket.Window.show (modal-ver-1455723568000.js:675)
			// bind the events
			this.bindInit();
/d
			// if the title is specified set it
			if (this.settings.title != null) {
				this.captionText.innerHTML = this.settings.title;
this.captionText=h3#wicket_window_77

/ we zien	,
<h3 id="_wicket_window_77" class="w_captionText">Modal window</h3>

			// initial width and height
			this.window.style.width = this.settings.width + (this.settings.resizable ? "px" : this.settings.widthUnit);
this.window=div#_wicket_window_65	,

<div class="wicket-modal" id="_wicket_window_65" role="dialog" aria-labelledby="_wicket_window_77" style="top: 10px; left: 10px; width: 100px; position: absolute;">
/ Dit blijft in HTML	, maar rechts in styles zien we	,
element.style {
top: 10px;
left: 10px;
width: 600px;
position: absolute;
/ TODO
			if (this.settings.height) {
				this.content.style.height = this.settings.height + (this.settings.resizable ? "px" : this.settings.heightUnit);
this.content="_wicket_window_68"
 this.content.style.height WAS ""	, maar nu "400px"	,

/ Inderdaad	, in HTML zien we	,
											<div id="_wicket_window_68" class="w_content_container"></div>
/ dus niets, vandaar WH  dat this.content.style.height ""	, er was ook in CSS WH niets	,
/ en rechts	,
element.style {
	overflow: auto;
	height: 400px;
}

			// center the window
			this.center();
/s
Wicket.Window.center (modal-ver-1455723568000.js:479)
/s
Wicket.Window.center (modal-ver-1455723568000.js:512)
			...
/ TODO
			this.window.style.left = left + "px";
423px
			this.window.style.top = top + "px";
10px

/t
Wicket.Window.show (modal-ver-1455723568000.js:697)

			// center the window
			this.center();
/d
			// load position from cookie
			this.loadPosition();
/ NIETS	,
			var doShow = Wicket.bind(function() {
				this.adjustOpenWindowZIndexesOnShow();
				this.window.style.visibility="visible";
			}, this);

			this.adjustOpenWindowsStatusOnShow();
/s
		adjustOpenWindowsStatusOnShow: function() {
			// keep reference to this window
			Wicket.Window.current = this;
/t
Wicket.Window.adjustOpenWindowsStatusOnShow (modal-ver-1455723568000.js:761)
			this.adjustOpenWindowsStatusOnShow();
			} else {
				doShow();
/ Intermezzo

/ we zijn nog steeds in	,
(function(){var element = document.getElementById("content3");
var settings = new Object();
settings.minWidth=200;
settings.minHeight=200;
settings.className="w_blue";
settings.width=600;
settings.height=400;
settings.resizable=true;
settings.element=element;
settings.title="Modal window";
settings.mask="semi-transparent";
settings.autoSize=false;
settings.unloadConfirmation=true;
settings.onClose = function() { Wicket.Ajax.ajax({"u":"./?0-1.IBehaviorListener.1-modalWindow","c":"modalWindow2"}); };
window.setTimeout(function(){
  Wicket.Window.create(settings).show(); 					<-
}, 0);
})();

/ Einde Intermezzo
/s
proxy (jquery-2.2.0-ve…3568000.js:492)
		proxy = function() {
->			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
/s
(anonymous function) (modal-ver-1455723568000.js:700)
			var doShow = Wicket.bind(function() {
				this.adjustOpenWindowZIndexesOnShow();
/s
Wicket.Window.adjustOpenWindowZIndexesOnShow (modal-ver-1455723568000.js:748)
/ NIETS	,
/t
(anonymous function) (modal-ver-1455723568000.js:700)
				this.adjustOpenWindowZIndexesOnShow();
/d
				this.window.style.visibility="visible";
/this.window=div#_wicket_window_65
////////////////////////////
/ Hij verschijnt
/ Maar de achtergrond is nog grijs	, als de vp	,
/////////////////////////////////

/t
Wicket.Window.show (modal-ver-1455723568000.js:719)
			} else {
				doShow();
/d
			// if the content supports focus and blur it, which means
			// that the already focused element will lose it's focus
			if (this.content.focus) {
/ JA
				this.content.focus();
/ TODO
				this.content.blur();
/ TODO

			// new unload handler - close the window to prevent memory leaks in ie
			window.onunload = Wicket.bind(function() {
				this.close(true);
				if (this.old_onunload) {
					return this.old_onunload();
				}
			}, this);
			if (this.settings.unloadConfirmation) {
				Wicket.Event.add(window, 'beforeunload',this.onbeforeunload);

			// create the mask that covers the background
			this.createMask();
/s
Wicket.Window.createMask (modal-ver-1455723568000.js:600)

			} else if (this.settings.mask === "semi-transparent") {
				this.mask = new Wicket.Window.Mask(false);
			}
			if (typeof(this.mask) !== "undefined") {
				this.mask.show();
/s
Wicket.Window.Mask.show (modal-ver-14557…568000.js:1257)
			// if the mask is not already shown...
			if (!Wicket.Window.Mask.element) {

				// create the mask element and add it to the document
				var e = document.createElement("div");
				document.body.appendChild(e);
/ we zien onderin	,
<div></div>
				// set the proper css class name
				if (this.transparent) {
/ NEE
				} else {
					e.className = "wicket-mask-dark";
				e.style.zIndex = Wicket.Window.Mask.zIndex;
/ we zien	,
<div class="wicket-mask-dark" style="z-index: 20000;"></div>

				// HACK - KHTML doesn't support colors with alpha transparency
				// if the mask is not transparent we have to either
				// make the background image visible (setting color to transparent) - for KHTML
				// or make the background-image invisible (setting it to null) - for other browsers
				if (this.transparent === false) {
					if (Wicket.Browser.isKHTML() === false) {
						e.style.backgroundImage = "none";
/ we zien	,
<div class="wicket-mask-dark" style="z-index: 20000; background-image: none;"></div>

				// HACK - it really sucks that we have to set this to absolute even for gecko.
				// however background with position:fixed makes the text cursor in textfieds
				// in modal window disappear
				if (Wicket.Browser.isIELessThan11() || Wicket.Browser.isGecko()) {
					e.style.position = "absolute";

				// set the element
				this.element = e;
this: Object
	element: div.wicket-mask-dark
	...
	__proto__: Object
/ this is ((vorige)this).mask 	, want we zijn in  this.mask.show();

				// set new handlers
				window.onscroll = Wicket.bind(this.onScrollResize, this);
				window.onresize = Wicket.bind(this.onScrollResize, this);

				// fix the mask position
				this.onScrollResize(true);
/s
Wicket.Window.Mask.onScrollResize (modal-ver-14557…568000.js:1404)
/=
	Wicket.Window.Mask.prototype = {
		onScrollResize: function(dontChangePosition) {
			// if the iframe is not position:fixed fix it's position
			if (this.element.style.position === "absolute") {
/ JA
this.element=div.wicket-mask-dark

/ Intermezzo

element.style {
z-index: 20000;
position: absolute;
background-image: none;
}
/ en	,
div.wicket-mask-dark {
top: 0px;
left: 0px;
width: 100%;
height: 100%;
opacity: 0.1;
background-color: black;
}

/ Dus hij beslaat de hele vp	,

/ Einde Intermezzo

				var w = Wicket.Window.getViewportWidth();
1446
				var h = Wicket.Window.getViewportHeight();
326

				var scTop = 0;
				var scLeft = 0;

	            scLeft = Wicket.Window.getScrollX();
0
				scTop = Wicket.Window.getScrollY();
0
				this.element.style.top = scTop + "px";
0px
				this.element.style.left = scLeft + "px";
0px
				if (document.all) { // opera or explorer
/ NEE
				this.element.style.height = h;
/ TODO (Niet gedaan?)
/ we zien	,
<div class="wicket-mask-dark" style="z-index: 20000; position: absolute; top: 0px; left: 0px; background-image: none;"></div>

/ Intermezzo

/ we zien rechts	,
/ TODO

/ Einde Intermezzo

/t
Wicket.Window.Mask.show (modal-ver-14557…568000.js:1306)
				// fix the mask position
				this.onScrollResize(true);
/d
				// set a static reference to mask
				Wicket.Window.Mask.element = e;

			this.shown=true;
			this.focusDisabled=false;

			this.disableCoveredContent();
/s
Wicket.Window.Mask.show (modal-ver-14557…568000.js:1306)
			var doc = document;
			this.doDisable(doc, Wicket.Window.current);
/s
Wicket.Window.Mask.doDisable (modal-ver-14557…568000.js:1382)
			this.startTask(Wicket.bind(function() {this.hideSelectBoxes(doc, win);}, this), 300);
			this.startTask(Wicket.bind(function() {this.disableTabs(doc, win);}, this), 400);
			this.startTask(Wicket.bind(function() {this.disableFocus(doc, win);}, this), 1000);
/c
proxy (jquery-2.2.0-ve…3568000.js:492)
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
/s
(anonymous function) (modal-ver-14557…568000.js:1358)
		startTask: function (fn, delay) {
			var taskId=setTimeout(Wicket.bind(function() { fn(); this.clearTask(taskId); }, this), delay);
			this.tasks.push(taskId);
/ TODO

/ Einde JS
	

/ Einde CLICK LINK, SHOW MODAL WINDOW


/ Einde WICKET 7 MODAL WINDOW  MODALWINDOWSTUDYPAGE

/ WICKET 7 MODAL WINDOW  WICKET-EXAMPLES-STEP-BY-STEP 

/ geef	,
http://localhost:9090/wicket-examples-step-by-step/ajax/modal-window

/ 7	.  

/ we zien 	,

$ vi ModalWindowPage.class
	public ModalWindowPage()
	{
		modal1.setPageCreator(new ModalWindow.PageCreator()
		{
			@Override
			public Page createPage()
			{
				return new ModalContent1Page(ModalWindowPage.this.getPageReference(), modal1);

		modal2.setContent(new ModalPanel1(modal2.getContentId()));

/ Dus modal1 doet setPageCreator	, en heeft nog content empty=new WebMarkupContainer	,
/ TODO

/ uit wicket-testing	, net als modal2	,
$ vi ModalWindowStudyPage.class
		Label label=new Label(modalWindow.getContentId(),"I am a modal window");
		modalWindow.setContent(label);

/	7	. 

/ debug	,

/ GET PAGE


ModalWindowPage.<init>() line: 51	
		modal1.setPageCreator(new ModalWindow.PageCreator()
/s
ModalWindow.setPageCreator(ModalWindow$PageCreator) line: 327	

/ Dit gaan we doen	, 
		setContent(empty);
		pageCreator = creator;
		return this;
/ -> iframe	, want omdat de content-child van de modal window empty is	,  is het GEEN custom window	, 
/ content-child = child met id "content"

		setContent(empty);

/ setContent adds/replaces a child met id "content"	, de parent van deze child is dus de ModalWindow	,

/ Herinner	,
class ModalWindow
	private void init() {
		add(empty = new WebMarkupContainer(getContentId()));			/ child met id "content"	,

		pageCreator = creator;
		return this;

/t
ModalWindowPage.<init>() line: 59	
		final ModalWindow modal1;
		add(modal1 = new ModalWindow("modal1"));

		modal1.setPageCreator(new ModalWindow.PageCreator()
/d
/ -> iframe, 	want de "content"=child van het modal window is nog steeds empty	, dus is het GEEN custom modal window	,

		modal1.setWindowClosedCallback(new ModalWindow.WindowClosedCallback()
		...
		modal1.setCloseButtonCallback(new ModalWindow.CloseButtonCallback()
		...
		add(new AjaxLink<Void>("showModal1")
		...
		add(modal2 = new ModalWindow("modal2"));
/s
ModalWindow.<init>(String) line: 236	
	...
	private int minimalWidth = 200;
	private int minimalHeight = 200;
	private String cssClassName = CSS_CLASS_BLUE;
	private int initialWidth = 600;
	private int initialHeight = 400;
	private boolean useInitialHeight = true;
	private boolean resizable = true;
	private String widthUnit = "px";
	private String heightUnit = "px";
	private String cookieName;
	private IModel<String> title = null;
	private MaskType maskType = MaskType.SEMI_TRANSPARENT;
	private boolean autoSize = false;
	private boolean unloadConfirmation = true;
	...
	init();
/s
ModalWindow.init() line: 258	
		add(empty = new WebMarkupContainer(getContentId()));
		...
/t
ModalWindowPage.<init>() line: 93	
		add(modal2 = new ModalWindow("modal2"));
/d
		modal2.setContent(new ModalPanel1(modal2.getContentId()));

/ -> GEEN iframe	, want we veranderen het "content"-child van de modal window, dus is de modal window custom, 
/s
ModalPanel1.<init>(String) line: 37	
/=
public class ModalPanel1 extends Panel
	public ModalPanel1(String id)
		...
		add(new DateTimeField("dateTimeField")
/t
/s
ModalWindow.setContent(Component) line: 935	
/=
	public ModalWindow setContent(final Component component)
		component.setOutputMarkupPlaceholderTag(true);
component	ModalPanel1  (id=7701)	
		...
		replace(component);
/s
ModalWindow(MarkupContainer).replace(Component) line: 839	
/=
	public MarkupContainer replace(final Component child)
		if (child.getParent() != this)
		{
			final Component replaced = children_put(child);
replaced	WebMarkupContainer  (id=7705)	
/ empty	, deze WAS het	,
			...
/t
ModalWindow.setContent(Component) line: 949	
		replace(component);
/d
		shown = false;
		pageCreator = null;
		return this;
/t
ModalWindowPage.<init>() line: 97	
		modal2.setContent(new ModalPanel1(modal2.getContentId()));
/d
		modal2.setTitle("This is modal window with panel content.");
		modal2.setCookieName("modal-2");

		modal2.setCloseButtonCallback(new ModalWindow.CloseButtonCallback()
		...
		modal2.setWindowClosedCallback(new ModalWindow.WindowClosedCallback()
		...
		add(new AjaxLink<Void>("showModal2")

/c
/ stack	,
	ModalWindowPage(Component).internalRender() line: 2345	
	ModalWindowPage(Component).render() line: 2308	
	ModalWindowPage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	

/s
	ModalWindowPage(Component).internalRender() line: 2345	
		IMarkupFragment markup = getMarkup();

markup=
file:/home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28/webapps/wicket-examples-step-by-step/WEB-INF/classes/org/apache/wicket/examples/ajax/builtin/modal/ModalWindowPage.html

<html xmlns:wicket="http://wicket.apache.org">
<head>
	<title>Wicket Examples - Ajax</title>
    <link rel="stylesheet" type="text/css" href="style.css"/>
</head>
<body>
    <span wicket:id="mainNavigation"></span>
    <a href="Index.html" wicket:id="back">[go back]</a><p></p>
    <wicket:child><wicket:extend xmlns:wicket="http://wicket.apache.org">
	Last modal window result: <span wicket:id="result"></span>
	
	<div wicket:id="modal1"></div>
	<a wicket:id="showModal1">Show modal dialog with a page</a>
	<br/>
	<div wicket:id="modal2"></div><br/>
	<a wicket:id="showModal2">Show modal dialog with panel</a>
</wicket:extend></wicket:child>
</body>
</html>

				onRender();
/s
ModalWindowPage(Page).onRender() line: 878	
		renderAll(markupStream, null);
/s
ModalWindowPage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1746	
		while (markupStream.hasMore())
		{
			// Render the markup element
			boolean rawMarkup = renderNext(markupStream);
/s
ModalWindowPage(MarkupContainer).renderNext(MarkupStream) line: 1495	
		// Get the current markup element
		final MarkupElement element = markupStream.get();
<div wicket:id="modal1">

		// If it's a tag like <wicket..> or <span wicket:id="..." >
		if ((element instanceof ComponentTag) && !markupStream.atCloseTag())
			// Get element as tag
			final ComponentTag tag = (ComponentTag)element;

			// Get component id
			final String id = tag.getId();

			// Get the component for the id from the given container
			Component component = get(id);
[ModalWindow [Component id = modal1]]

			// Failed to find it?
			if (component != null)
			{
				component.render();
/s
ModalWindow(Component).render() line: 2296	
			// Do the render
			internalRender();
/s
ModalWindow(Component).internalRender() line: 2345	

/ recursive call	, hier waren we al	, 
/ toen was this=ModalWindowPage,	 
/ nu ModalWindow(modal1),

		IMarkupFragment markup = getMarkup();
file:/home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28/webapps/wicket-examples-step-by-step/WEB-INF/classes/org/apache/wicket/examples/ajax/builtin/modal/ModalWindowPage.html
<div wicket:id="modal1"></div>

				onRender();
/s
ModalWindow(MarkupContainer).onRender() line: 1698	
		internalRenderComponent();

/ Toen kwamen we op WebPage.onRender	, 
/ nu op MarkupContainer.onRender	,

/ Toen gingen we naar MarkupContainer.renderAll	, 
/ nu naar Component.internalRenderComponent	,

/s
ModalWindow(Component).internalRenderComponent() line: 2508	

tag	ComponentTag  (id=7994)	
<div wicket:id="modal1">
		// Call any tag handler
		onComponentTag(tag);
tag	ComponentTag  (id=7994)	
<div wicket:id="modal1" id="modal138" wicketpath="modal1" style="display:none">

			else
			{
				renderComponentTag(tag);
/s
ModalWindow(Component).renderComponentTag(ComponentTag) line: 3982	
			// Write the tag
			tag.writeOutput(getResponse(), !needToRenderTag(null),
				getMarkup().getMarkupResourceStream().getWicketNamespace());
/s
ComponentTag.writeOutput(Response, boolean, String) line: 720	
		response.write("<");
		response.write(getName());
		if (getAttributes().size() > 0)
		{
			for (String key : getAttributes().keySet())
			{
				if ((namespacePrefix == null) || (key.startsWith(namespacePrefix) == false))
				{
					response.write(" ");
					response.write(key);
					CharSequence value = getAttribute(key);

					// attributes without values are possible, e.g.' disabled'
					if (value != null)
					{
						response.write("=\"");
						value = Strings.escapeMarkup(value);
						response.write(value);
						response.write("\"");
		response.write(">");

/ response=
	...
	<div wicket:id="modal1" id="modal138" wicketpath="modal1" style="display:none">

/t
ModalWindow(Component).internalRenderComponent() line: 2565	
			else
			{
				renderComponentTag(tag);
/d
			}
			markupStream.next();

			// Render the body only if open-body-close. Do not render if open-close.
			if (tag.isOpen())
			{
				// Render the body. The default strategy will simply call the component's
				// onComponentTagBody() implementation.
				getMarkupSourcingStrategy().onComponentTagBody(this, markupStream, tag);

this	ModalWindow  (id=7656)	
	markupSourcingStrategy	PanelMarkupSourcingStrategy  (id=7981)	
		allowWicketComponentsInBodyMarkup	false	
		noMoreWicketHeadTagsAllowed	true	
		tagName	"panel" (id=8112)	
/s
PanelMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 112	
		renderAssociatedMarkup(component);
/s
PanelMarkupSourcingStrategy(AssociatedMarkupSourcingStrategy).renderAssociatedMarkup(Component) line: 77	
		// Get associated markup file for the Border or Panel component
		final MarkupStream associatedMarkupStream = new MarkupStream(getMarkup(null));

associatedMarkupStream
=
[markup = jar:file:/home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28/webapps/wicket-examples-step-by-step/WEB-INF/lib/wicket-extensions-7.2.0.jar!/org/apache/wicket/extensions/ajax/markup/html/modal/ModalWindow.html
<wicket:panel xmlns:wicket="http://wicket.apache.org">
	<div wicket:id="content">
	</div>
</wicket:panel>, index = 0, current =  '<wicket:panel xmlns:wicket="http://wicket.apache.org">' (line 0, column 0)]

		((MarkupContainer)component).renderAssociatedMarkup(tagName, "Markup for a " + tagName +
			" component must begin a tag like '<wicket:" + tagName + ">'");
/s
ModalWindow(MarkupContainer).renderAssociatedMarkup(String, String) line: 782	

/ 1ste	,
			renderComponentTag(associatedMarkupOpenTag);
associatedMarkupOpenTag=
<wicket:panel xmlns:wicket="http://wicket.apache.org">
/s
ModalWindow(Component).renderComponentTag(ComponentTag) line: 4034	
			// Write the tag
			tag.writeOutput(getResponse(), !needToRenderTag(null),
				getMarkup().getMarkupResourceStream().getWicketNamespace());
/s
WicketTag(ComponentTag).writeOutput(Response, boolean, String) line: 720	
	...

/t
ModalWindow(MarkupContainer).renderAssociatedMarkup(String, String) line: 797	
			renderComponentTag(associatedMarkupOpenTag);
/d
/ 2de	,
			renderComponentTagBody(associatedMarkupStream, associatedMarkupOpenTag);
/s
ModalWindow(MarkupContainer).renderComponentTagBody(MarkupStream, ComponentTag) line: 1734	
			renderAll(markupStream, openTag);
/s
ModalWindow(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1746	

/ recursive call	,

markupStream	MarkupStream  (id=8129)	
=
[markup = jar:file:/home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28/webapps/wicket-examples-step-by-step/WEB-INF/lib/wicket-extensions-7.2.0.jar!/org/apache/wicket/extensions/ajax/markup/html/modal/ModalWindow.html
<wicket:panel xmlns:wicket="http://wicket.apache.org">
	<div wicket:id="content">
	</div>
</wicket:panel>, index = 1, current = [Raw markup]]

		while (markupStream.hasMore())
		{
			// Render the markup element
			boolean rawMarkup = renderNext(markupStream);
/s
ModalWindow(MarkupContainer).renderNext(MarkupStream) line: 1498	
		// Get the current markup element
		final MarkupElement element = markupStream.get();
<div wicket:id="content">

		// If it's a tag like <wicket..> or <span wicket:id="..." >
		if ((element instanceof ComponentTag) && !markupStream.atCloseTag())
		{
			// Get element as tag
			final ComponentTag tag = (ComponentTag)element;

			// Get component id
			final String id = tag.getId();

			// Get the component for the id from the given container
			Component component = get(id);
[WebMarkupContainer [Component id = content]]
		
			// Failed to find it?
			if (component != null)
			{
				component.render();
/s
WebMarkupContainer(Component).render() line: 2296	
			// Do the render
			internalRender();
/s
WebMarkupContainer(Component).internalRender() line: 2345	
		if (determineVisibility())
/ NEE
		// elem is null when rendering a page
		else if ((elem != null) && (elem instanceof ComponentTag))
		{
			if (getFlag(FLAG_PLACEHOLDER))
			{
				renderPlaceholderTag((ComponentTag)elem, getResponse());
/ TODO

/t
ModalWindow(MarkupContainer).renderAssociatedMarkup(String, String) line: 799	
			renderComponentTagBody(associatedMarkupStream, associatedMarkupOpenTag);
/d
			renderClosingComponentTag(associatedMarkupStream, associatedMarkupOpenTag, false);
...
/t
ModalWindowPage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
this	ModalWindowPage  (id=7650)	

			// Render the markup element
			boolean rawMarkup = renderNext(markupStream);
/s
ModalWindowPage(MarkupContainer).renderNext(MarkupStream) line: 1498	
		// Get the current markup element
		final MarkupElement element = markupStream.get();
<a wicket:id="showModal1">
...
/c
ModalWindowPage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	{
		while (markupStream.hasMore())
		{
			// Render the markup element
			boolean rawMarkup = renderNext(markupStream);
/s
ModalWindowPage(MarkupContainer).renderNext(MarkupStream) line: 1524	
			// Failed to find it?
			if (component != null)
			{
				component.render();
...
/s
ModalWindowPage$4(Component).internalRenderComponent() line: 2556	
			else
			{
->				renderComponentTag(tag);
			}
			markupStream.next();

			// Render the body only if open-body-close. Do not render if open-close.
			if (tag.isOpen())
			{
				// Render the body. The default strategy will simply call the component's
				// onComponentTagBody() implementation.
				getMarkupSourcingStrategy().onComponentTagBody(this, markupStream, tag);
/->
/s
ModalWindowPage$4(Component).renderComponentTag(ComponentTag) line: 4034	
			// Write the tag
			tag.writeOutput(getResponse(), !needToRenderTag(null),
				getMarkup().getMarkupResourceStream().getWicketNamespace());
/s
ComponentTag.writeOutput(Response, boolean, String) line: 720	
this	ComponentTag  (id=8177)	
<a wicket:id="showModal1" id="showModal135" wicketpath="showModal1" href="javascript:;">

		response.write("<");
...
/t
ModalWindowPage$4(Component).internalRenderComponent() line: 2565	
			else
			{
				renderComponentTag(tag);
/s
			}
			markupStream.next();

			// Render the body only if open-body-close. Do not render if open-close.
			if (tag.isOpen())
			{
				// Render the body. The default strategy will simply call the component's
				// onComponentTagBody() implementation.
->				getMarkupSourcingStrategy().onComponentTagBody(this, markupStream, tag);
/s
DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
		component.onComponentTagBody(markupStream, openTag);
/s
ModalWindowPage$4(AbstractLink).onComponentTagBody(MarkupStream, ComponentTag) line: 82	
		else
		{
			// Render the body of the link
			super.onComponentTagBody(markupStream, openTag);
/s
ModalWindowPage$4(MarkupContainer).onComponentTagBody(MarkupStream, ComponentTag) line: 1657	
		renderComponentTagBody(markupStream, openTag);
/s
ModalWindowPage$4(MarkupContainer).renderComponentTagBody(MarkupStream, ComponentTag) line: 1734	
		if (render)
		{
			renderAll(markupStream, openTag);
/s
ModalWindowPage$4(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
this=
[AjaxLink [Component id = showModal1]]

		while (markupStream.hasMore())
		{
			// Render the markup element
			boolean rawMarkup = renderNext(markupStream);
/ NIETS	,
...
/c
ModalWindowPage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1746	
		while (markupStream.hasMore())
		{
			// Render the markup element
			boolean rawMarkup = renderNext(markupStream);
/c
ModalWindowPage(MarkupContainer).renderNext(MarkupStream) line: 1524	
this=ModalWindowPage
			// Failed to find it?
			if (component != null)
			{
				component.render();
/s
ModalWindow(Component).render() line: 2308	
			// Do the render
			internalRender();
/s
ModalWindow(Component).internalRender() line: 2345	
		// Make sure there is a markup available for the Component
		IMarkupFragment markup = getMarkup();
file:/home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28/webapps/wicket-examples-step-by-step/WEB-INF/classes/org/apache/wicket/examples/ajax/builtin/modal/ModalWindowPage.html
<div wicket:id="modal2"></div>

				onRender();
/s
ModalWindow(MarkupContainer).onRender() line: 1698	
		internalRenderComponent();
/s
ModalWindow(Component).internalRenderComponent() line: 2508	
		// Call any tag handler
		onComponentTag(tag);
tag
=
<div wicket:id="modal2" id="modal23a" wicketpath="modal2" style="display:none">

			else
			{
->				renderComponentTag(tag);
			}
			markupStream.next();

			// Render the body only if open-body-close. Do not render if open-close.
			if (tag.isOpen())
			{
				// Render the body. The default strategy will simply call the component's
				// onComponentTagBody() implementation.
				getMarkupSourcingStrategy().onComponentTagBody(this, markupStream, tag);
->
/s
ModalWindow(Component).renderComponentTag(ComponentTag) line: 4034	
			// Write the tag
			tag.writeOutput(getResponse(), !needToRenderTag(null),
				getMarkup().getMarkupResourceStream().getWicketNamespace());
/s
ComponentTag.writeOutput(Response, boolean, String) line: 720	
		response.write("<");
...
/t
ModalWindow(Component).internalRenderComponent() line: 2565	
			else
			{
				renderComponentTag(tag);
/d
			}
			markupStream.next();

			// Render the body only if open-body-close. Do not render if open-close.
			if (tag.isOpen())
			{
				// Render the body. The default strategy will simply call the component's
				// onComponentTagBody() implementation.
->				getMarkupSourcingStrategy().onComponentTagBody(this, markupStream, tag);
/s
PanelMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 112	
		renderAssociatedMarkup(component);
/s
PanelMarkupSourcingStrategy(AssociatedMarkupSourcingStrategy).renderAssociatedMarkup(Component) line: 77	
		((MarkupContainer)component).renderAssociatedMarkup(tagName, "Markup for a " + tagName +
			" component must begin a tag like '<wicket:" + tagName + ">'");
/s
ModalWindow(MarkupContainer).renderAssociatedMarkup(String, String) line: 797	
/ 1ste	,
			renderComponentTag(associatedMarkupOpenTag);
/ TODO
/ 2de	,
			renderComponentTagBody(associatedMarkupStream, associatedMarkupOpenTag);
/s
ModalWindow(MarkupContainer).renderComponentTagBody(MarkupStream, ComponentTag) line: 1734	
		if (render)
		{
			renderAll(markupStream, openTag);
/s
ModalWindow(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1746	

[markup = jar:file:/home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28/webapps/wicket-examples-step-by-step/WEB-INF/lib/wicket-extensions-7.2.0.jar!/org/apache/wicket/extensions/ajax/markup/html/modal/ModalWindow.html
<wicket:panel xmlns:wicket="http://wicket.apache.org">
	<div wicket:id="content">
	</div>
</wicket:panel>, index = 1, current = [Raw markup]]

...
/c
ComponentTag.writeOutput(Response, boolean, String) line: 720	
this
=
<a wicket:id="showModal2" id="showModal236" wicketpath="showModal2" href="javascript:;">

/ 13	. 

/ we zien	,

<wicket:child>
	<wicket:extend xmlns:wicket="http://wicket.apache.org">
			Last modal window result: 
		<span wicket:id="result" id="result37" wicketpath="result"></span>
	
		<div wicket:id="modal1" id="modal138" wicketpath="modal1" style="display:none">
			<wicket:panel xmlns:wicket="http://wicket.apache.org">
				<div id="content39" style="display:none"></div>
			</wicket:panel>
		</div>
		<a wicket:id="showModal1" id="showModal135" wicketpath="showModal1" href="javascript:;">Show modal dialog with a page</a>
		<br>
		<div wicket:id="modal2" id="modal23a" wicketpath="modal2" style="display:none">	
			<wicket:panel xmlns:wicket="http://wicket.apache.org">
				<div id="content3b" style="display:none"></div>
			</wicket:panel>
		</div>
		<br>
		<a wicket:id="showModal2" id="showModal236" wicketpath="showModal2" href="javascript:;">Show modal dialog with panel</a>
	</wicket:extend>
</wicket:child>

/ we zien 2 keer een <div/> met <a/>	,
/ TODO

/ Einde GET PAGE

/ 7	.

/ debug

/ CLICK SHOW MODAL DIALOG WITH PAGE	SERVER SIDE

/s
RequestCycle.processRequest() line: 220	
			IRequestHandler handler = resolveRequestHandler();
org.apache.wicket.core.request.handler.ListenerInterfaceRequestHandler@2fce8019
				execute(handler);
/c
/s
RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
				handler.respond(RequestCycle.this);
/s
ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 234		/ we hebben nu een andere handler,		
		invokeListener();
...
/s
AjaxLink$1(AbstractDefaultAjaxBehavior).onRequest() line: 587	
		WebApplication app = (WebApplication)getComponent().getApplication();
		AjaxRequestTarget target = app.newAjaxRequestTarget(getComponent().getPage());
...
/s
AjaxApplication(WebApplication).newAjaxRequestTarget(Page) line: 907	
		AjaxRequestTarget target = getAjaxRequestTargetProvider().get(page);
/ de ajaxRequestTargetProvider zit in de application	,
/s
WebApplication$DefaultAjaxRequestTargetProvider.get(Page) line: 1073	
/=
public abstract class WebApplication extends Application
{
	private static class DefaultAjaxRequestTargetProvider implements
		IContextProvider<AjaxRequestTarget, Page>
	{
		@Override
		public AjaxRequestTarget get(Page page)
		{
			return new AjaxRequestHandler(page);
/t
AjaxLink$1(AbstractDefaultAjaxBehavior).onRequest() line: 591	
		AjaxRequestTarget target = app.newAjaxRequestTarget(getComponent().getPage());
/d
		RequestCycle requestCycle = RequestCycle.get();
		requestCycle.scheduleRequestHandlerAfterCurrent(target);
/s
RequestCycle.scheduleRequestHandlerAfterCurrent(IRequestHandler) line: 820	
		// just delegating the call to {@link IRequestHandlerExecutor} and invoking listeners
		requestHandlerExecutor.schedule(handler);
handler	AjaxRequestHandler  (id=8257)	
/s
RequestCycle$HandlerExecutor(RequestHandlerStack).schedule(IRequestHandler) line: 131	
		scheduledAfterCurrent = handler;
/t
AjaxLink$1(AbstractDefaultAjaxBehavior).onRequest() line: 593	
		requestCycle.scheduleRequestHandlerAfterCurrent(target);
/d
		respond(target);

/ Let op: target=AjaxRequestHandler	, 
/s
AjaxLink$1(AjaxEventBehavior).respond(AjaxRequestTarget) line: 155	
		onEvent(target);
/s
AjaxLink$1.onEvent(AjaxRequestTarget) line: 84	
/=
public abstract class AjaxLink<T> extends AbstractLink implements IAjaxLink, IGenericComponent<T>
	protected AjaxEventBehavior newAjaxEventBehavior(String event)
	{
		return new AjaxEventBehavior(event)
		{
			private static final long serialVersionUID = 1L;

			@Override
			protected void onEvent(AjaxRequestTarget target)
			{
->				onClick(target);
/s
ModalWindowPage$4.onClick(AjaxRequestTarget) line: 82	
/=
public class ModalWindowPage extends BasePage
		add(new AjaxLink<Void>("showModal1")
		{
			@Override
			public void onClick(AjaxRequestTarget target)
			{
				modal1.show(target);
/s
ModalWindow.show(IPartialPageRequestHandler) line: 366	
/=
	public void show(final IPartialPageRequestHandler target)
this=[ModalWindow [Component id = modal1]]
target=AjaxRequestHandler	,

		if (shown == false)
		{
			getContent().setVisible(true);
			target.add(this);
...
/s
AjaxRequestHandler$1(PartialPageUpdate).add(Component, String) line: 369	
		component.setMarkupId(markupId);
component=ModalWindow, id=modal1
markupId=model138	
/ WH 38 achter modal1
		markupIdToComponent.put(markupId, component);
/t
ModalWindow.show(IPartialPageRequestHandler) line: 370	
			target.add(this);
/d
			target.appendJavaScript(getWindowOpenJavaScript());
/s
	/**
	 * Returns the javascript used to open the window. Subclass
	 * {@link #postProcessSettings(AppendingStringBuffer)} to modify the JavaScript if needed.
/ MODIFY JAVASCRIPT TODO
     *
ModalWindow.getWindowOpenJavaScript() line: 1024	
		buffer.append("var settings = new Object();\n");
		appendAssignment(buffer, "settings.minWidth", getMinimalWidth());
		appendAssignment(buffer, "settings.minHeight", getMinimalHeight());
		appendAssignment(buffer, "settings.className", getCssClassName());
		appendAssignment(buffer, "settings.width", getInitialWidth());
		if ((isUseInitialHeight() == true) || (isCustomComponent() == false))
		{
			appendAssignment(buffer, "settings.height", getInitialHeight());
		appendAssignment(buffer, "settings.resizable", isResizable());
		if (isCustomComponent() == false)
/ JA
/s
		return getContent() != empty;
/t
/ Dus iframe,	

		{
			Page page = createPage();
/s
ModalWindow.createPage() line: 844	
		if (pageCreator == null)
/ NEE
		else
		{
			return pageCreator.createPage();
/s
ModalWindowPage$1.createPage() line: 56	
/=
	public ModalWindowPage()
		modal1.setPageCreator(new ModalWindow.PageCreator()
		{
			@Override
			public Page createPage()
			{
->				return new ModalContent1Page(ModalWindowPage.this.getPageReference(), modal1);
/s
ModalWindowPage(Page).getPageReference() line: 960	
		setStatelessHint(false);
/ TODO
		// make sure the page will be available on following request
		getSession().getPageManager().touchPage(this);
/ TODO
		return new PageReference(numericId);
numericId=10
/ WH ?10
/t
/s
ModalContent1Page.<init>(PageReference, ModalWindow) line: 42	
		add(new AjaxLink<Void>("closeOK")
		add(new AjaxLink<Void>("closeCancel")
		add(new DateTimeField("dateTimeField"));
		final ModalWindow modal;
		add(modal = new ModalWindow("modal"));
		modal.setCookieName("modal window 2");
		modal.setResizable(false);
		modal.setInitialWidth(30);
		modal.setInitialHeight(15);
		modal.setWidthUnit("em");
		modal.setHeightUnit("em");

		modal.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
		modal.setPageCreator(new ModalWindow.PageCreator()
		modal.setCloseButtonCallback(new ModalWindow.CloseButtonCallback()
		add(new AjaxLink<Void>("open")

/t
ModalWindow.getWindowOpenJavaScript() line: 1051	
			Page page = createPage();
/d
page	ModalContent1Page  (id=8292)	

			page.getSession().getPageManager().touchPage(page);
///////////////////////////////////////////////////////////////////////////////////////
			if (page.isPageStateless())
/ NEE
				pageUrl = requestCycle.urlFor(page.getClass(), page.getPageParameters());
/ NIET
			else
/ JA
			{
				IRequestHandler handler = new RenderPageRequestHandler(new PageProvider(page));
				pageUrl = requestCycle.urlFor(handler);
./wicket/page?11
			}
/////////////////////////////////////////////////////////////////////////////////////////
			appendAssignment(buffer, "settings.src", pageUrl);
buffer=
var settings = new Object();
settings.minWidth=200;
settings.minHeight=200;
settings.className="w_blue";
settings.width=600;
settings.height=400;
settings.resizable=true;
settings.src="./wicket/page?11";			/ -> iframe	,

		if (getCookieName() != null)
		{
			appendAssignment(buffer, "settings.cookieId", getCookieName());

		else if (getMaskType() == MaskType.SEMI_TRANSPARENT)
		{
			buffer.append("settings.mask=\"semi-transparent\";\n");

		appendAssignment(buffer, "settings.autoSize", autoSize);

		appendAssignment(buffer, "settings.unloadConfirmation", showUnloadConfirmation());

		// in case user is interested in window close callback or we have a pagemap to clean attach
		// notification request
		if (windowClosedCallback != null)
		{
			WindowClosedBehavior behavior = getBehaviors(WindowClosedBehavior.class).get(0);
org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow$WindowClosedBehavior@71d46432
			buffer.append("settings.onClose = function() { ");
			buffer.append(behavior.getCallbackScript());
/s
ModalWindow$WindowClosedBehavior(AbstractDefaultAjaxBehavior).getCallbackScript() line: 453	
		return getCallbackScript(getComponent());
/s
ModalWindow$WindowClosedBehavior(AbstractDefaultAjaxBehavior).getCallbackScript(Component) line: 465	
component=[ModalWindow [Component id = modal1]]

		CharSequence ajaxAttributes = renderAjaxAttributes(component);
{"u":"./modal-window?10-1.IBehaviorListener.1-modal1","c":"modal138"}

		return "Wicket.Ajax.ajax(" + ajaxAttributes + ");";

/t
ModalWindow.getWindowOpenJavaScript() line: 1118	
			buffer.append(behavior.getCallbackScript());
/d
			buffer.append(" };\n");

			haveCloseCallback = true;

		// in case we didn't set windowclosecallback, we need at least callback on close button, to
		// close window property (thus cleaning the shown flag)
		if ((closeButtonCallback != null) || (haveCloseCallback == false))
		{
			CloseButtonBehavior behavior = getBehaviors(CloseButtonBehavior.class).get(0);
			buffer.append("settings.onCloseButton = function() { ");
			buffer.append(behavior.getCallbackScript());
			buffer.append(";return false;};\n");
		}

/ buffer=
var settings = new Object();
settings.minWidth=200;
settings.minHeight=200;
settings.className="w_blue";
settings.width=600;
settings.height=400;
settings.resizable=true;
settings.src="./wicket/page?11";
settings.cookieId="modal-1";
settings.mask="semi-transparent";
settings.autoSize=false;
settings.unloadConfirmation=true;
settings.onClose = function() { Wicket.Ajax.ajax({"u":"./modal-window?10-1.IBehaviorListener.1-modal1","c":"modal138"}); };
settings.onCloseButton = function() { Wicket.Ajax.ajax({"u":"./modal-window?10-1.IBehaviorListener.0-modal1","c":"modal138"});;return false;};

		postProcessSettings(buffer);
/ NIETS	,
		buffer.append(getShowJavaScript());
/s
		return "window.setTimeout(function(){\n" + "  Wicket.Window.create(settings).show();\n"
			+ "}, 0);\n";

buffer=
var settings = new Object();
settings.minWidth=200;
settings.minHeight=200;
settings.className="w_blue";
settings.width=600;
settings.height=400;
settings.resizable=true;
settings.src="./wicket/page?11";
settings.cookieId="modal-1";
settings.mask="semi-transparent";
settings.autoSize=false;
settings.unloadConfirmation=true;
settings.onClose = function() { Wicket.Ajax.ajax({"u":"./modal-window?10-1.IBehaviorListener.1-modal1","c":"modal138"}); };
settings.onCloseButton = function() { Wicket.Ajax.ajax({"u":"./modal-window?10-1.IBehaviorListener.0-modal1","c":"modal138"});;return false;};
window.setTimeout(function(){
  Wicket.Window.create(settings).show();
}, 0);

/t
ModalWindow.show(IPartialPageRequestHandler) line: 371	
			target.appendJavaScript(getWindowOpenJavaScript());
/pd
target	AjaxRequestHandler  (id=8257)	
	update	AjaxRequestHandler$1  (id=8277)	
		appendJavaScripts	ArrayList<E>  (id=8341)	
/=
[var settings = new Object();
settings.minWidth=200;
settings.minHeight=200;
settings.className="w_blue";
settings.width=600;
settings.height=400;
settings.resizable=true;
settings.src="./wicket/page?11";
settings.cookieId="modal-1";
settings.mask="semi-transparent";
settings.autoSize=false;
settings.unloadConfirmation=true;
settings.onClose = function() { Wicket.Ajax.ajax({"u":"./modal-window?10-1.IBehaviorListener.1-modal1","c":"modal138"}); };
settings.onCloseButton = function() { Wicket.Ajax.ajax({"u":"./modal-window?10-1.IBehaviorListener.0-modal1","c":"modal138"});;return false;};
window.setTimeout(function(){
  Wicket.Window.create(settings).show();
}, 0);
]
/s
AjaxRequestHandler.appendJavaScript(CharSequence) line: 263	
		update.appendJavaScript(javascript);
javascript="var settings..."
/s
AjaxRequestHandler$1(PartialPageUpdate).appendJavaScript(CharSequence) line: 338	
		appendJavaScripts.add(javascript);
...
...
/t
RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 97	
		try
		{
			respond(handler);
/d
		else if (scheduled != null)
		{
			execute(scheduled);
/s
RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 58	
/=
	public void execute(final IRequestHandler handler)
handler	AjaxRequestHandler  (id=8257)	
		final boolean first = requestHandlers.isEmpty();
true
		requestHandlers.add(handler);

			respond(handler);
/s
RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
				handler.respond(RequestCycle.this);
/s
AjaxRequestHandler.respond(IRequestCycle) line: 324	
		if (shouldRedirectToPage(requestCycle))
false
		...
		update.writeTo(bodyResponse, encoding);
/s
AjaxRequestHandler$1(PartialPageUpdate).writeTo(Response, String) line: 153	

/ response is leeg	,

			writeHeader(response, encoding);
/s
AjaxRequestHandler$1(XmlPartialPageUpdate).writeHeader(Response, String) line: 57	
		response.write("<?xml version=\"1.0\" encoding=\"");
		response.write(encoding);
		response.write("\"?>");
		response.write(START_ROOT_ELEMENT);
/t
AjaxRequestHandler$1(PartialPageUpdate).writeTo(Response, String) line: 155	
			writeHeader(response, encoding);
/d
/response=
<?xml version="1.0" encoding="UTF-8"?><ajax-response>

			onBeforeRespond(response);
/ NIETS	,
			// process added components
			writeComponents(response, encoding);
/s
AjaxRequestHandler$1(PartialPageUpdate).writeComponents(Response, String) line: 241	
		// process component markup
		for (Map.Entry<String, Component> stringComponentEntry : markupIdToComponent.entrySet())

this	AjaxRequestHandler$1  (id=6349)	
	markupIdToComponent	LinkedHashMap<K,V>  (id=6367)	
{modal138=[ModalWindow [Component id = modal1]]}

			final Component component = stringComponentEntry.getValue();
[ModalWindow [Component id = modal1]]

			if (!containsAncestorFor(component))
/ JA
/ TODO
			{
				writeComponent(response, component.getAjaxRegionMarkupId(), component, encoding);
/s
AjaxRequestHandler$1(XmlPartialPageUpdate).writeComponent(Response, String, Component, String) line: 66	
/=
	protected void writeComponent(Response response, String markupId, Component component, String encoding)
markupId=modal138
component=[ModalWindow [Component id = modal1]]

			page.startComponentRender(component);
/s
		renderedComponents = null;
/t
				component.prepareForRender();
/ TODO
				// render any associated headers of the component
				writeHeaderContribution(response, component);
/s
AjaxRequestHandler$1(PartialPageUpdate).writeHeaderContribution(Response, Component) line: 481	
		if (header == null)
		{
			header = new PartialHtmlHeaderContainer(this);
			page.addOrReplace(header);

this	AjaxRequestHandler$1  (id=6349)	
	page	ModalWindowPage  (id=6288)	
...
/s
ModalWindowPage(MarkupContainer).replace(Component) line: 839	
			final Component replaced = children_put(child);

child	PartialPageUpdate$PartialHtmlHeaderContainer  (id=6438)	
replaced	HtmlHeaderContainer  (id=6446)	

			// first remove the component.
			removedComponent(replaced);

			// The generated markup id remains the same
			child.setMarkupId(replaced);

			// then add the other one.
			addedComponent(child);

/t
AjaxRequestHandler$1(PartialPageUpdate).writeHeaderContribution(Response, Component) line: 485	
			header = new PartialHtmlHeaderContainer(this);
			page.addOrReplace(header);
/d
			IHeaderRenderStrategy strategy = AbstractHeaderRenderStrategy.get();
strategy	ChildFirstHeaderRenderStrategy  (id=6489)	

			strategy.renderHeader(header, null, component);
/s
ChildFirstHeaderRenderStrategy.renderHeader(HtmlHeaderContainer, HtmlHeaderContainer$HeaderStreamState, Component) line: 57	
		// First the application level headers
		renderApplicationLevelHeaders(headerContainer);
/ NIETS
		// Then its child hierarchy
		renderChildHeaders(headerContainer, rootComponent);
headerContainer= [PartialHtmlHeaderContainer [Component id = _header_]]
rootComponent=[ModalWindow [Component id = modal1]]
/ TODO
		// Then the root component's headers
		renderRootComponent(headerContainer, headerStreamState, rootComponent);
/s
ChildFirstHeaderRenderStrategy(AbstractHeaderRenderStrategy).renderRootComponent(HtmlHeaderContainer, HtmlHeaderContainer$HeaderStreamState, Component) line: 118	
	/**
	 * Render the root component (e.g. Page).
	 */
	protected void renderRootComponent(final HtmlHeaderContainer headerContainer,
		final HeaderStreamState headerStreamState, final Component rootComponent)
	{
		headerContainer.renderHeaderTagBody(headerStreamState);
/ NIETS
		rootComponent.internalRenderHead(headerContainer);
/s
ModalWindow(Component).internalRenderHead(HtmlHeaderContainer) line: 2684	
	 *
	 * Print to the web response what ever the component wants to contribute to the head section.
	 * Make sure that all attached behaviors are asked as well.
	 *
	public void internalRenderHead(final HtmlHeaderContainer container)
			IHeaderResponse response = container.getHeaderResponse();

response	ResourceAggregator  (id=6493)	
	itemsToBeRendered	LinkedHashMap<K,V>  (id=6502)	
{}
	realResponse	PartialPageUpdate$PartialHeaderResponse  (id=6504)	
/ TODO
...
/t
AjaxRequestHandler$1(XmlPartialPageUpdate).writeComponent(Response, String, Component, String) line: 101	
				// render any associated headers of the component
				writeHeaderContribution(response, component);
/d
response=
<?xml version="1.0" encoding="UTF-8"?><ajax-response>
			try
			{
				component.render();
...
/s
ModalWindow(Component).internalRenderComponent() line: 2524	
tag=
<div wicket:id="modal1" id="modal138" wicketpath="modal1" style="display:none">
			else
			{
				renderComponentTag(tag);
			}
			markupStream.next();

			// Render the body only if open-body-close. Do not render if open-close.
			if (tag.isOpen())
			{
				// Render the body. The default strategy will simply call the component's
				// onComponentTagBody() implementation.
				getMarkupSourcingStrategy().onComponentTagBody(this, markupStream, tag);
...
/s
ModalWindow(MarkupContainer).renderAssociatedMarkup(String, String) line: 762	
		// Check for required open tag name
		ComponentTag associatedMarkupOpenTag = (ComponentTag)elem;
<wicket:panel xmlns:wicket="http://wicket.apache.org">

			renderComponentTag(associatedMarkupOpenTag);
/s
ModalWindow(Component).renderComponentTag(ComponentTag) line: 4034	
			// Write the tag
			tag.writeOutput(getResponse(), !needToRenderTag(null),
				getMarkup().getMarkupResourceStream().getWicketNamespace());
/t
ModalWindow(MarkupContainer).renderAssociatedMarkup(String, String) line: 797	
			renderComponentTag(associatedMarkupOpenTag);
/d
			renderComponentTagBody(associatedMarkupStream, associatedMarkupOpenTag);
associatedMarkupStream
/=
[markup = jar:file:/home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28/webapps/wicket-examples-step-by-step/WEB-INF/lib/wicket-extensions-7.2.0.jar!/org/apache/wicket/extensions/ajax/markup/html/modal/ModalWindow.html
<wicket:panel xmlns:wicket="http://wicket.apache.org">
	<div wicket:id="content">
	</div>
</wicket:panel>, index = 2, current =  '<div wicket:id="content">' (line 0, column 0)]

associatedMarkupOpenTag
=
<wicket:panel xmlns:wicket="http://wicket.apache.org">

			renderClosingComponentTag(associatedMarkupStream, associatedMarkupOpenTag, false);
...
/t
AjaxRequestHandler$1(XmlPartialPageUpdate).writeComponent(Response, String, Component, String) line: 141	
			try
			{
				component.render();
/d
		response.write("<component id=\"");
		response.write(markupId);
		response.write("\" ><![CDATA[");
		response.write(encode(bodyBuffer.getContents()));
		response.write("]]></component>");
response=
<?xml version="1.0" encoding="UTF-8"?><ajax-response><component id="modal138" ><![CDATA[<div wicket:id="modal1" id="modal138" wicketpath="modal1" style="display:none"><wicket:panel xmlns:wicket="http://wicket.apache.org">
	<div wicket:id="content" id="content39" wicketpath="modal1_content">
	</div>
</wicket:panel></div>]]></component>

/t
AjaxRequestHandler$1(PartialPageUpdate).writeComponents(Response, String) line: 262	
		for (Map.Entry<String, Component> stringComponentEntry : markupIdToComponent.entrySet())
		{
			...
				writeComponent(response, component.getAjaxRegionMarkupId(), component, encoding);
/d
		if (header != null)
		{
			...
			// now, close the response (which may render things)
			header.getHeaderResponse().close();
/s
ResourceAggregator.close() line: 280	
		renderHeaderItems();
/s
ResourceAggregator.renderHeaderItems() line: 311	
		for (RecordedHeaderItem curRenderItem : sortedItemsToBeRendered)
		{
			if (markItemRendered(curRenderItem.getItem()))
			{
				getRealResponse().render(curRenderItem.getItem());

this	ResourceAggregator  (id=6493)	
curRenderItem	ResourceAggregator$RecordedHeaderItem  (id=6655)	
i$	ArrayList$Itr  (id=6656)	
sortedItemsToBeRendered	ArrayList<E>  (id=6657)	
	elementData	Object[8]  (id=6676)	
		[0]	ResourceAggregator$RecordedHeaderItem  (id=6655)	
[ModalWindow@0, CloseButtonBehavior@0, WindowClosedBehavior@0]:JavaScriptReferenceHeaderItem(scope: org.apache.wicket.resource.JQueryResourceReference; name: jquery/jquery-2.2.0.js; locale: null; style: null; variation: null, null)
		[1]	ResourceAggregator$RecordedHeaderItem  (id=6678)	
[ModalWindow@1, CloseButtonBehavior@1, WindowClosedBehavior@1]:JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-event-jquery.js; locale: null; style: null; variation: null, null)
		[2]	ResourceAggregator$RecordedHeaderItem  (id=6679)	
		[3]	ResourceAggregator$RecordedHeaderItem  (id=6680)	
		[4]	ResourceAggregator$RecordedHeaderItem  (id=6682)	
		[5]	ResourceAggregator$RecordedHeaderItem  (id=6683)	
		[6]	ResourceAggregator$RecordedHeaderItem  (id=6684)	
		[7]	ResourceAggregator$RecordedHeaderItem  (id=6713)	
	modCount	0	
	size	8	
headerItemComparator	PriorityFirstComparator  (id=6658)	

/t
ResourceAggregator.close() line: 288	
		renderHeaderItems();
		else
		{
			renderSeperateEventScripts();
/ NIETS	,

/t
AjaxRequestHandler$1(PartialPageUpdate).writeComponents(Response, String) line: 268	
			// now, close the response (which may render things)
			header.getHeaderResponse().close();
/d
			// revert to old response
			RequestCycle.get().setResponse(oldResponse);

			// write the XML tags and we're done
			writeHeaderContribution(response);
/s
AjaxRequestHandler$1(XmlPartialPageUpdate).writeHeaderContribution(Response) line: 160	

response
=
<?xml version="1.0" encoding="UTF-8"?>
<ajax-response>
	<component id="modal138" >
		<![CDATA[<div wicket:id="modal1" id="modal138" wicketpath="modal1" style="display:none">
					<wicket:panel xmlns:wicket="http://wicket.apache.org">
						<div wicket:id="content" id="content39" wicketpath="modal1_content">
						</div>
					</wicket:panel>
				</div>]]>
	</component>

			response.write("<header-contribution>");

			// we need to write response as CDATA and parse it on client,
			// because konqueror crashes when there is a <script> element
			response.write("<![CDATA[<head xmlns:wicket=\"http://wicket.apache.org\">");
			response.write(encode(headerBuffer.getContents()));
			response.write("</head>]]>");
			response.write("</header-contribution>");

response
=
<?xml version="1.0" encoding="UTF-8"?>
<ajax-response>
	<component id="modal138" >
		<![CDATA[<div wicket:id="modal1" id="modal138" wicketpath="modal1" style="display:none">
					<wicket:panel xmlns:wicket="http://wicket.apache.org">
						<div wicket:id="content" id="content39" wicketpath="modal1_content">
						</div>
					</wicket:panel>
				</div>]]>
	</component>
	<header-contribution>
		<![CDATA[<head xmlns:wicket="http://wicket.apache.org">
			<script type="text/javascript" src="./wicket/resource/org.apache.wicket.resource.JQueryResourceReference/jquery/jquery-2.2.0-ver-1455723568000.js"></script>
			<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-event-jquery-ver-1455723568000.js"></script>
			<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-ajax-jquery-ver-1455723568000.js"></script>
			<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-ajax-jquery-debug-ver-1455723568000.js"></script>
			<script type="text/javascript" id="wicket-ajax-debug-enable">
/*<![CDATA[*/
Wicket.Ajax.DebugWindow.enabled=true;
/*]]]]><![CDATA[>*/
</script>
			<script type="text/javascript" src="./wicket/resource/org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow/res/modal-ver-1455723568000.js"></script>
			<link rel="stylesheet" type="text/css" href="./wicket/resource/org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow/res/modal-ver-1455723568000.css" />
			<script type="text/javascript" id="wicket-ajax-base-url">
/*<![CDATA[*/
Wicket.Ajax.baseUrl="modal-window?10";
/*]]]]><![CDATA[>*/
</script>
			</head>]]>
	</header-contribution>

/t
AjaxRequestHandler$1(PartialPageUpdate).writeTo(Response, String) line: 160	
			writeHeader(response, encoding);

			onBeforeRespond(response);

			// process added components
			writeComponents(response, encoding);
/d
			...
			evaluationScripts.addAll(domReadyJavaScripts);
[]
			evaluationScripts.addAll(appendJavaScripts);

appendJavaScripts
=
[var settings = new Object();
settings.minWidth=200;
settings.minHeight=200;
settings.className="w_blue";
settings.width=600;
settings.height=400;
settings.resizable=true;
settings.src="./wicket/page?12";				/ hierdoor iframe,	
settings.cookieId="modal-1";
settings.mask="semi-transparent";
settings.autoSize=false;
settings.unloadConfirmation=true;
settings.onClose = function() { Wicket.Ajax.ajax({"u":"./modal-window?10-5.IBehaviorListener.1-modal1","c":"modal138"}); };
settings.onCloseButton = function() { Wicket.Ajax.ajax({"u":"./modal-window?10-5.IBehaviorListener.0-modal1","c":"modal138"});;return false;};
window.setTimeout(function(){
  Wicket.Window.create(settings).show();
}, 0);
]
			writeNormalEvaluations(response, evaluationScripts);
			writeFooter(response, encoding);

response=
	<header-contribution>
		<![CDATA[<head xmlns:wicket="http://wicket.apache.org">
			<script type="text/javascript" src="./wicket/resource/org.apache.wicket.resource.JQueryResourceReference/jquery/jquery-2.2.0-ver-1455723568000.js"></script>
			<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-event-jquery-ver-1455723568000.js"></script>
			<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-ajax-jquery-ver-1455723568000.js"></script>
			<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-ajax-jquery-debug-ver-1455723568000.js"></script>
			<script type="text/javascript" id="wicket-ajax-debug-enable">
/*<![CDATA[*/
Wicket.Ajax.DebugWindow.enabled=true;
/*]]]]><![CDATA[>*/
</script>
			<script type="text/javascript" src="./wicket/resource/org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow/res/modal-ver-1455723568000.js"></script>
			<link rel="stylesheet" type="text/css" href="./wicket/resource/org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow/res/modal-ver-1455723568000.css" />
			<script type="text/javascript" id="wicket-ajax-base-url">
/*<![CDATA[*/
Wicket.Ajax.baseUrl="modal-window?10";
/*]]]]><![CDATA[>*/
</script>
			</head>]]>
	</header-contribution>
	<evaluate>
		<![CDATA[(function(){
var settings = new Object();
settings.minWidth=200;
settings.minHeight=200;
settings.className="w_blue";
settings.width=600;
settings.height=400;
settings.resizable=true;
settings.src="./wicket/page?12";				/ hierdoor: iframe	,
settings.cookieId="modal-1";
settings.mask="semi-transparent";
settings.autoSize=false;
settings.unloadConfirmation=true;
settings.onClose = function() { Wicket.Ajax.ajax({"u":"./modal-window?10-5.IBehaviorListener.1-modal1","c":"modal138"}); };
settings.onCloseButton = function() { Wicket.Ajax.ajax({"u":"./modal-window?10-5.IBehaviorListener.0-modal1","c":"modal138"});;return false;};
window.setTimeout(function(){
  Wicket.Window.create(settings).show();
}, 0);
})();]]>
	</evaluate>
</ajax-response>	/ footer	,

		} finally {
			if (header != null) {
				// restore a normal header
				page.replace(new HtmlHeaderContainer(HtmlHeaderSectionHandler.HEADER_ID));
/s
ModalWindowPage(MarkupContainer).replace(Component) line: 839	
			final Component replaced = children_put(child);
child	HtmlHeaderContainer  (id=6782)	
replaced	PartialPageUpdate$PartialHtmlHeaderContainer  (id=6438)	
/ weer terug	,

/t
AjaxRequestHandler.respond(IRequestCycle) line: 360	
		update.writeTo(bodyResponse, encoding);
/d
		CharSequence filteredResponse = invokeResponseFilters(bodyResponse);
/ NIETS	,
		response.write(filteredResponse);



/ Einde CLICK SHOW MODAL DIALOG WITH PAGE SERVER SIDE

/ CLICK SHOW MODAL DIALOG WITH PAGE CLIENT SIDE

/ 7	. 

[eric@localhost wicket]$ ls ./wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/
AbstractCalendar.java  calendar.js      DateField.java     DatePicker.java  DateTimeField.html  icon1.gif  icon3.gif       wicket-date.js
assets calendar-min.js  DatePickerInit.js  DatePicker.js    DateTimeField.java  icon2.gif  TimeField.java
/ DateTimeField is een YUI component	, GEEN jQueryUI	, 
/ TODO


/ 7	. 

/s
Wicket.Ajax.Call.loadedCallback (wicket-ajax-jqu…568000.js:1038)
Wicket.Ajax.Call.processAjaxResponse (wicket-ajax-jqu…3568000.js:825)
Wicket.Ajax.Call.doAjax.jQuery.ajax.success (wicket-ajax-jqu…3568000.js:705)
jQuery.Callbacks.fire (jquery-2.2.0-ve…568000.js:3182)
jQuery.Callbacks.self.fireWith (jquery-2.2.0-ve…568000.js:3312)
done (jquery-2.2.0-ve…568000.js:8754)
jQuery.ajaxTransport.send.callback (jquery-2.2.0-ve…568000.js:9120)

				var root = envelope.getElementsByTagName("ajax-response")[0];
root.outerHTML=
"<ajax-response><priority-evaluate><![CDATA[clientTimeVariable = new Date().getTime();]]></priority-evaluate><component id="modal138"><![CDATA[<div wicket:id="modal1" id="modal138" wicketpath="modal1" style="display:none"><wicket:panel xmlns:wicket="http://wicket.apache.org">
	<div wicket:id="content" id="content39" wicketpath="modal1_content">
	</div>
</wicket:panel></div>]]></component><header-contribution><![CDATA[<head xmlns:wicket="http://wicket.apache.org"><script type="text/javascript" src="./wicket/resource/org.apache.wicket.resource.JQueryResourceReference/jquery/jquery-2.2.0-ver-1455723568000.js"></script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-event-jquery-ver-1455723568000.js"></script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-ajax-jquery-ver-1455723568000.js"></script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-ajax-jquery-debug-ver-1455723568000.js"></script>
<script type="text/javascript" id="wicket-ajax-debug-enable">
/*<![CDATA[*/
Wicket.Ajax.DebugWindow.enabled=true;
/*]]]]><![CDATA[>*/
</script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow/res/modal-ver-1455723568000.js"></script>
<link rel="stylesheet" type="text/css" href="./wicket/resource/org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow/res/modal-ver-1455723568000.css" />
<script type="text/javascript" id="wicket-ajax-base-url">
/*<![CDATA[*/
Wicket.Ajax.baseUrl="modal-window?10";
/*]]]]><![CDATA[>*/
</script>
</head>]]></header-contribution><evaluate><![CDATA[(function(){var settings = new Object();
settings.minWidth=200;
settings.minHeight=200;
settings.className="w_blue";
settings.width=600;
settings.height=400;
settings.resizable=true;
settings.src="./wicket/page?12";				/ Hierdoor iframe	,
settings.cookieId="modal-1";
settings.mask="semi-transparent";
settings.autoSize=false;
settings.unloadConfirmation=true;
settings.onClose = function() { Wicket.Ajax.ajax({"u":"./modal-window?10-5.IBehaviorListener.1-modal1","c":"modal138"}); };
settings.onCloseButton = function() { Wicket.Ajax.ajax({"u":"./modal-window?10-5.IBehaviorListener.0-modal1","c":"modal138"});;return false;};
window.setTimeout(function(){
  Wicket.Window.create(settings).show();
}, 0);
})();]]></evaluate><evaluate><![CDATA[window.defaultStatus='Server parsetime: 9909.003s, Client parsetime: ' + (new Date().getTime() - clientTimeVariable)/1000 +  's';]]></evaluate></ajax-response>"

				// go through the ajax response and execute all priority-invocations first
				for (var i = 0; i < root.childNodes.length; ++i) {
 root.childNodes.length=5	,
					var childNode = root.childNodes[i];
					if (childNode.tagName === "header-contribution") {
/ JA
/ (*)
						this.processHeaderContribution(context, childNode);
					} else if (childNode.tagName === "priority-evaluate") {
/ JA
/ TODO
						this.processEvaluation(context, childNode);

/ (*)
/s
jQuery.extend.Head.Contributor.processScript (VM341 wicket-aj…568000.js:2198)

jQuery.extend.Head.Contributor.processContribution (VM341 wicket-aj…568000.js:2090)

					// go through the individual elements and process them according to their type
					for (var i = 0; i < rootNode.childNodes.length; i++) {
rootNode=<head xmlns:wicket="http://wicket.apache.org">
rootNode.childNodes.length=16
						var node = rootNode.childNodes[i];
							var name = node.tagName.toLowerCase();
							// process the element
							if (name === "link") {
								this.processLink(context, node);
							} else if (name === "script") {
->								this.processScript(context, node);
							} else if (name === "style") {
								this.processStyle(context, node);


Wicket.Ajax.Call.processHeaderContribution (VM341 wicket-aj…568000.js:1244)
			var c = Wicket.Head.Contributor;
			c.processContribution(context, node);

Wicket.Ajax.Call.loadedCallback (VM341 wicket-aj…568000.js:1055)

				// go through the ajax response and execute all priority-invocations first
				for (var i = 0; i < root.childNodes.length; ++i) {
					var childNode = root.childNodes[i];
					if (childNode.tagName === "header-contribution") {
->						this.processHeaderContribution(context, childNode);

Wicket.Ajax.Call.processAjaxResponse (VM341 wicket-aj…3568000.js:825)
Wicket.Ajax.Call.doAjax.jQuery.ajax.success (VM341 wicket-aj…3568000.js:705)
jQuery.Callbacks.fire (jquery-2.2.0-ve…568000.js:3182)
jQuery.Callbacks.self.fireWith (jquery-2.2.0-ve…568000.js:3312)
done (jquery-2.2.0-ve…568000.js:8754)
jQuery.ajaxTransport.send.callback (jquery-2.2.0-ve…568000.js:9120)

/c
/ stack trace	,
Wicket.Window.initialize (modal-ver-1455723568000.js:277)
			// override default settings with user settings
			this.settings = Wicket.Object.extend({

				minWidth: 200,  /* valid only if resizable */
				minHeight: 150, /* valid only if resizable */

				className: "w_blue", /* w_silver */

				width: 600,  /* initial width */
				height: 300, /* may be null for non-iframe, non-resizable window (automatic height) */

				resizable: true,

				widthUnit: "px", /* valid only if not resizable */
				heightUnit: "px", /* valid only if not resizable */

				src: null,     /* iframe src - this takes precedence over the "element" property */
				element: null, /* content element (for non-iframe window) */

				iframeName: null, /* name of the iframe */

				cookieId: null, /* id of position (and size if resizable) cookie */

				title: null, /* window title. if null and window content is iframe, title of iframe document will be used. */

				onCloseButton: Wicket.bind(function() {
					/* On firefox on Linux, at least, we need to blur() textfields, etc.
					 * to get it to update its DOM model. Otherwise you'll lose any changes
					 * made to the current form component you're editing.
					 */
					this.caption.getElementsByTagName("a")[0].focus();
					this.caption.getElementsByTagName("a")[0].blur();
					this.close();
					return false;
				}, this), /* called when close button is clicked */

				onClose: function() { }, /* called when window is closed */

				mask: "semi-transparent", /* or "transparent" */

				unloadConfirmation : true /* Display confirmation dialog if the user is about to leave a page (IE and FF) */

			}, settings || { });
Wicket.Class.create (VM341 wicket-aj…3568000.js:228)
				this.initialize.apply(this, arguments);

Wicket.Window.create (modal-ver-1455723568000.js:223)
		return new Win(settings);

(anonymous function) (VM3975:16)
(function(){var settings = new Object();
settings.minWidth=200;
settings.minHeight=200;
settings.className="w_blue";
settings.width=600;
settings.height=400;
settings.resizable=true;
settings.src="./wicket/page?12";			/ Hierdoor iframe	,
settings.cookieId="modal-1";
settings.mask="semi-transparent";
settings.autoSize=false;
settings.unloadConfirmation=true;
settings.onClose = function() { Wicket.Ajax.ajax({"u":"./modal-window?10-5.IBehaviorListener.1-modal1","c":"modal138"}); };
settings.onCloseButton = function() { Wicket.Ajax.ajax({"u":"./modal-window?10-5.IBehaviorListener.0-modal1","c":"modal138"});;return false;};
window.setTimeout(function(){
  Wicket.Window.create(settings).show();			<-
}, 0);
})();

/c
/ stack trace	,
Wicket.Window.show (modal-ver-1455723568000.js:645)

			// create the DOM elements
			this.createDOM();

(anonymous function) (VM3975:16)

(function(){var settings = new Object();
settings.minWidth=200;
settings.minHeight=200;
settings.className="w_blue";
settings.width=600;
settings.height=400;
settings.resizable=true;
settings.src="./wicket/page?12";			/ Hierdoor iframe,	
settings.cookieId="modal-1";
settings.mask="semi-transparent";
settings.autoSize=false;
settings.unloadConfirmation=true;
settings.onClose = function() { Wicket.Ajax.ajax({"u":"./modal-window?10-5.IBehaviorListener.1-modal1","c":"modal138"}); };
settings.onCloseButton = function() { Wicket.Ajax.ajax({"u":"./modal-window?10-5.IBehaviorListener.0-modal1","c":"modal138"});;return false;};
window.setTimeout(function(){
  Wicket.Window.create(settings).show(); 				<-
}, 0);
})();

/ we gaan debug	, 
/s
			// create the DOM elements
			this.createDOM();
/s
Wicket.Window.createDOM (modal-ver-1455723568000.js:349)
Wicket.Window.show (modal-ver-1455723568000.js:645)
(anonymous function) (VM3975:16)

			var idWindow = this.newId();
			var idClassElement = this.newId();
			var idCaption = this.newId();
			var idFrame = this.newId();
			var idTop = this.newId();
			var idTopLeft = this.newId();
			var idTopRight = this.newId();
			var idLeft = this.newId();
			var idRight = this.newId();
			var idBottomLeft = this.newId();
			var idBottomRight = this.newId();
			var idBottom = this.newId();
			var idCaptionText = this.newId();

			var markup = Wicket.Window.getMarkup(idWindow, idClassElement, idCaption, idFrame,
					idTop, idTopLeft, idTopRight, idLeft, idRight, idBottomLeft, idBottomRight,
					idBottom, idCaptionText, this.isIframe());
/s
Wicket.Window.isIframe (modal-ver-1455723568000.js:327)
			return this.settings.src != null;
"./wicket/page?12"

/t
/s
Wicket.Window.getMarkup (modal-ver-14557…568000.js:1166)

	Wicket.Window.getMarkup = function(idWindow, idClassElement, idCaption, idContent, idTop, idTopLeft, idTopRight, idLeft, idRight, idBottomLeft, idBottomRight, idBottom, idCaptionText, isFrame) {
		var s =
				"<div class=\"wicket-modal\" id=\""+idWindow+"\" role=\"dialog\" aria-labelledBy=\""+idCaptionText+"\" style=\"top: 10px; left: 10px; width: 100px;\"><form style='background-color:transparent;padding:0px;margin:0px;border-width:0px;position:static'>"+
				"<div id=\""+idClassElement+"\">"+

					"<div class=\"w_top_1\">"+

					"<div class=\"w_topLeft\" id=\""+idTopLeft+"\">"+
					"</div>"+

					"<div class=\"w_topRight\" id=\""+idTopRight+"\">"+
					"</div>"+

					"<div class=\"w_top\" id='"+idTop+"'>"+
					"</div>"+

					"</div>"+

					"<div class=\"w_left\" id='"+idLeft+"'>"+
						"<div class=\"w_right_1\">"+
							"<div class=\"w_right\" id='"+idRight+"'>"+
								"<div class=\"w_content_1\" onmousedown=\"Wicket.Event.stop(event);\">"+
									"<div class=\"w_caption\"  id=\""+idCaption+"\">"+
										"<a class=\"w_close\" style=\"z-index:1\" href=\"#\"></a>"+
										"<h3 id=\""+idCaptionText+"\" class=\"w_captionText\"></h3>"+
									"</div>"+

									"<div class=\"w_content_2\">"+
									"<div class=\"w_content_3\">"+
			                            "<div class=\"w_content\">";
					if (isFrame) {
						s+= "<iframe frameborder=\"0\" id=\""+idContent+"\" allowtransparency=\"false\" style=\"height: 200px\" class=\"wicket_modal\"></iframe>";
					} else {
						s+= "<div id='"+idContent+"' class='w_content_container'></div>";
					}
						s+=
										"</div>"+
									"</div>"+
									"</div>"+
								"</div>"+
							"</div>"+
						"</div>"+
					"</div>"+


					"<div class=\"w_bottom_1\" id=\""+idBottom+"_1\">"+

						"<div class=\"w_bottomRight\"  id=\""+idBottomRight+"\">"+
						"</div>"+

						"<div class=\"w_bottomLeft\" id=\""+idBottomLeft+"\">"+
						"</div>"+

						"<div class=\"w_bottom\" id=\""+idBottom+"\">"+
						"</div>"+


					"</div>"+

				"</div>"+
			"</form></div>";

			return s;
	};

			var element = document.createElement("div");
			element.id = idWindow;
			document.body.appendChild(element);
			Wicket.DOM.replace(element, markup);

/ we zien deze DOM onderin de page	,
"<div class="wicket-modal" id="_wicket_window_13" role="dialog" aria-labelledBy="_wicket_window_25" style="top: 10px; left: 10px; width: 100px;">
	<form style='background-color:transparent;padding:0px;margin:0px;border-width:0px;position:static'>
		<div id="_wicket_window_14">
			<div class="w_top_1">
				<div class="w_topLeft" id="_wicket_window_18"></div>
				<div class="w_topRight" id="_wicket_window_19"></div>
				<div class="w_top" id='_wicket_window_17'></div>
			</div>
			<div class="w_left" id='_wicket_window_20'>
				<div class="w_right_1">
					<div class="w_right" id='_wicket_window_21'>
						<div class="w_content_1" onmousedown="Wicket.Event.stop(event);">
							<div class="w_caption"  id="_wicket_window_15">
								<a class="w_close" style="z-index:1" href="#"></a>
								<h3 id="_wicket_window_25" class="w_captionText"></h3>
							</div>
							<div class="w_content_2">
								<div class="w_content_3">
									<div class="w_content">
										<iframe frameborder="0" id="_wicket_window_16" allowtransparency="false" style="height: 200px" class="wicket_modal"></iframe>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
			<div class="w_bottom_1" id="_wicket_window_24_1">
				<div class="w_bottomRight"  id="_wicket_window_23"></div>
				<div class="w_bottomLeft" id="_wicket_window_22"></div>
				<div class="w_bottom" id="_wicket_window_24"></div>
			</div>
		</div>
	</form>
</div>"

			var _ = function(name) { return document.getElementById(name); };

			this.window = _(idWindow);
			this.classElement = _(idClassElement);
			this.caption = _(idCaption);
			this.content = _(idFrame);
			this.top = _(idTop);
			this.topLeft = _(idTopLeft);
			this.topRight = _(idTopRight);
			this.left = _(idLeft);
			this.right = _(idRight);
			this.bottomLeft = _(idBottomLeft);
			this.bottomRight = _(idBottomRight);
			this.bottom = _(idBottom);
			this.captionText = _(idCaptionText);

this: Wicket.Class.create
bottom: div#_wicket_window_50.w_bottom
bottomLeft: div#_wicket_window_48.w_bottomLeft
bottomRight: div#_wicket_window_49.w_bottomRight
caption: div#_wicket_window_41.w_caption
captionText: h3#_wicket_window_51.w_captionText
classElement: div#_wicket_window_40
content: iframe#_wicket_window_42.wicket_modal
left: div#_wicket_window_46.w_left
right: div#_wicket_window_47.w_right
settings: Object
top: div#_wicket_window_43.w_top
topLeft: div#_wicket_window_44.w_topLeft
topRight: div#_wicket_window_45.w_topRight
window: div#_wicket_window_39.wicket-modal
__proto__: Object

			if (Wicket.Browser.isIELessThan11() || Wicket.Browser.isGecko()) {
/ TODO
				this.window.style.position = "absolute";

/t
Wicket.Window.show (modal-ver-1455723568000.js:648)
			// create the DOM elements
			this.createDOM();
/d
			// set the class of window (blue or silver by default)
			this.classElement.className = this.settings.className;
w_blue
			// is it an iframe window?
			if (this.isIframe()) {
				// load the file
/ ->			this.load();
			} else {
/ NIET
				// it's an element content

				// is the element specified?
				if (this.settings.element == null) {
					throw "Either src or element must be set.";
/////////////////////////
				}

				// reparent the element
				this.oldParent = this.settings.element.parentNode;
				this.settings.element.parentNode.removeChild(this.settings.element);
				this.content.appendChild(this.settings.element);

				// set the overflow style so that scrollbars are shown when the element is bigger than window
				this.content.style.overflow="auto";
/s
Wicket.Window.load (modal-ver-1455723568000.js:616)
		if (!this.settings.title) {
				this.update = window.setInterval(Wicket.bind(this.updateTitle, this), 100);
this.update=73928
/ TODO
			} else {
				this.content.contentWindow.name = this.settings.iframeName;
null
			try
			{
				this.content.contentWindow.location.replace(this.settings.src);
/ native code
/t
Wicket.Window.show (modal-ver-1455723568000.js:645)
(anonymous function) (VM7702:16)

			// initial width and height
			this.window.style.width = this.settings.width + (this.settings.resizable ? "px" : this.settings.widthUnit);

			if (this.settings.height) {
				this.content.style.height = this.settings.height + (this.settings.resizable ? "px" : this.settings.heightUnit);

			// center the window
			this.center();

			// load position from cookie
			this.loadPosition();
/s
Wicket.Window.loadPosition (modal-ver-1455723568000.js:575)
			if (this.settings.cookieId) {
modal-1
				var string = this.findPositionString(false);
/s
Wicket.Window.findPositionString (modal-ver-1455723568000.js:521)
			var cookie = Wicket.Cookie.get(this.cookieKey);
"modal-1::419px,1px,626px,451px|modal-2::423px,0px,600px,387px|"
/ TODO

			for (var i = 0; i < entries.length; ++i) {
				if (entries[i].indexOf(this.settings.cookieId + "::") === 0) {
					var string = entries[i];
					if (remove) {
/ NEE
					return string;
/t
Wicket.Window.loadPosition (modal-ver-1455723568000.js:577)
				var string = this.findPositionString(false);
"modal-1::419px,1px,626px,451px"

				if (string != null) {
					var array = string.split("::");
					var positions = array[1].split(",");
					if (positions.length === 4) {
						this.window.style.left = positions[0];		419px
						this.window.style.top = positions[1];		1px
						this.window.style.width = positions[2];		626px
						this.content.style.height = positions[3];	451px

/t
Wicket.Window.show (modal-ver-1455723568000.js:699)
			// load position from cookie
			this.loadPosition();
/d
			// show the window
			if (false && Wicket.Browser.isGecko() && this.isIframe()) {
/ NEE
			} else {
				doShow();
/s
				this.window.style.visibility="visible";
this.window=div#_wicket_window_65
/ Dit is de buitenste div	,  bij: we zien deze DOM onderin de page	,

			// create the mask that covers the background
			this.createMask();
/s
Wicket.Window.createMask (modal-ver-1455723568000.js:597)
/=
		/**
		 * Creates the mask accordingly to the settings.
		 */
		createMask: function() {
			if (this.settings.mask === "transparent") {
/ NEE
			} else if (this.settings.mask === "semi-transparent") {
				this.mask = new Wicket.Window.Mask(false);
			}
			if (typeof(this.mask) !== "undefined") {
				this.mask.show();
/s
Wicket.Window.Mask.show (modal-ver-14557…568000.js:1257)
			// if the mask is not already shown...
			if (!Wicket.Window.Mask.element) {

				// create the mask element and add it to the document
				var e = document.createElement("div");
				document.body.appendChild(e);

				// set the proper css class name
				if (this.transparent) {
/ NEE
				} else {
					e.className = "wicket-mask-dark";
				}
				e.style.zIndex = Wicket.Window.Mask.zIndex;
20000
				if (this.transparent === false) {
					if (Wicket.Browser.isKHTML() === false) {
						e.style.backgroundImage = "none";
				if (Wicket.Browser.isIELessThan11() || Wicket.Browser.isGecko()) {
					e.style.position = "absolute";
				// set the element
				this.element = e;
this: Wicket.Class.create
	element: div.wicket-mask-dark
		outerHTML:
			"<div class="wicket-mask-dark" style="z-index: 20000; position: absolute; background-image: none;"></div>"
	transparent: false

				...
				// fix the mask position
				this.onScrollResize(true);

				// set a static reference to mask
				Wicket.Window.Mask.element = e;

/ Later wordt de page loaded in het iframe	, 
/ TODO

/ 7	. 


/ Einde CLICK SHOW MODAL DIALOG WITH PAGE CLIENT SIDE

/ CLICK SHOW MODAL DIALOG WITH PAGE

/ 7	. 

/ in wicket-examples-step-by-step	,

$ vi ModalWindowPage.java

		modal1.setCloseButtonCallback(new ModalWindow.CloseButtonCallback()
		{
			@Override
			public boolean onCloseButtonClicked(AjaxRequestTarget target)
			{
				setResult("Modal window 1 - close button");
				return true;
			}
		});

		modal1.setWindowClosedCallback(new ModalWindow.WindowClosedCallback()
		{
			@Override
			public void onClose(AjaxRequestTarget target)
			{
				target.add(result);
			}
		});

/ We zien dat hij 2 keer bij	,

RequestCycle.processRequest() line: 219	
			IRequestHandler handler = resolveRequestHandler();
handler	ListenerInterfaceRequestHandler  (id=7024)	

			if (handler != null)
			{
				execute(handler);


/ Eerst wordt onCloseButtonClicked called	, daarna onClose	, 
/ we doen target.add(result)	, want dan krijgen we als antwoord	, 

<?xml version="1.0" encoding="UTF-8"?>
<ajax-response>
	<priority-evaluate><![CDATA[clientTimeVariable = new Date().getTime();]]></priority-evaluate>
	<component id="result3" ><![CDATA[<span wicket:id="result" id="result3" wicketpath="result">Modal window 1 - close button</span>]]></component>
	<evaluate><![CDATA[window.defaultStatus='Server parsetime: 0.003s, Client parsetime: ' + (new Date().getTime() - clientTimeVariable)/1000 +  's';]]></evaluate>
</ajax-response>


/ 13	. 

/ onCloseButtonClicked wordt called	, 
				setResult("Modal window 1 - close button");

/ we zien in devtools dat gestuurd wordt	, 

<?xml version="1.0" encoding="UTF-8"?><ajax-response><priority-evaluate><![CDATA[clientTimeVariable = new Date().getTime();]]></priority-evaluate><evaluate><![CDATA[(function(){var win;
try {
	win = window.parent.Wicket.Window;
} catch (ignore) {
}
if (typeof(win) == "undefined" || typeof(win.current) == "undefined") {
  try {
     win = window.Wicket.Window;
  } catch (ignore) {
  }
}
if (win && win.current) {
 var close = function(w) { w.setTimeout(function() {
		win.current.close();
	}, 0);  };
	try { close(window.parent); } catch (ignore) { close(window); }
}})();]]></evaluate><evaluate><![CDATA[window.defaultStatus='Server parsetime: 32.269s, Client parsetime: ' + (new Date().getTime() - clientTimeVariable)/1000 +  's';]]></evaluate></ajax-response>

/ Dan	,
			public void onClose(AjaxRequestTarget target)
			{
				target.add(result);

/we zien een 2de package	,
<?xml version="1.0" encoding="UTF-8"?><ajax-response><priority-evaluate><![CDATA[clientTimeVariable = new Date().getTime();]]></priority-evaluate><component id="result3" ><![CDATA[<span wicket:id="result" id="result3" wicketpath="result">Modal window 1 - close button</span>]]></component><evaluate><![CDATA[window.defaultStatus='Server parsetime: 21.153s, Client parsetime: ' + (new Date().getTime() - clientTimeVariable)/1000 +  's';]]></evaluate></ajax-response>



/ 7	. 

/ we zien 

$ vi ModalWindowPage.html
<wicket:extend xmlns:wicket="http://wicket.apache.org">
...
</wicket:extend>

/ Waarom wicket:extend	?

$ vi ModalWindowPage.java
public class ModalWindowPage extends BasePage
...
$ vi BasePage.java
public class BasePage extends WicketExamplePage
...
$ vi BasePage.html
<head>
	<title>Wicket Examples - Ajax</title>
    <link rel="stylesheet" type="text/css" href="style.css"/>
</head>
<body>
    <span wicket:id="mainNavigation"></span>
    <a href="Index.html" wicket:id="back">[go back]</a><p/>
    <wicket:child/>												<-
</body>
</html>

/ 7	.

/ Waarom modal1.show(target)	?	, in	,

public class ModalWindowPage extends BasePage
{
	/**
	 */
	public ModalWindowPage()
		add(new AjaxLink<Void>("showModal1")
		{
			@Override
			public void onClick(AjaxRequestTarget target)
			{
				modal1.show(target);
			}
		});

/ Omdat	,
$ vi Modalwindow.java
	public void show(final IPartialPageRequestHandler target)
	{
			...
			target.add(this);
			target.appendJavaScript(getWindowOpenJavaScript());

/ Daarom zien we als response	,

response	StringResponse  (id=7300)	
/=
<?xml version="1.0" encoding="UTF-8"?><ajax-response><component id="modalWindow2" ><![CDATA[<div wicket:id="modalWindow" id="modalWindow2" wicketpath="modalWindow" style="display:none"><wicket:panel xmlns:wicket="http://wicket.apache.org">
	<div wicket:id="content" id="content3" wicketpath="modalWindow_content">I am a modal window</div>
</wicket:panel></div>]]></component><header-contribution><![CDATA[<head xmlns:wicket="http://wicket.apache.org"><script type="text/javascript" src="./wicket/resource/org.apache.wicket.resource.JQueryResourceReference/jquery/jquery-2.2.0-ver-1455723568000.js"></script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-event-jquery-ver-1455723568000.js"></script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-ajax-jquery-ver-1455723568000.js"></script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-ajax-jquery-debug-ver-1455723568000.js"></script>
<script type="text/javascript" id="wicket-ajax-debug-enable">
/*<![CDATA[*/
Wicket.Ajax.DebugWindow.enabled=true;
/*]]]]><![CDATA[>*/
</script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow/res/modal-ver-1455723568000.js"></script>
<link rel="stylesheet" type="text/css" href="./wicket/resource/org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow/res/modal-ver-1455723568000.css" />
<script type="text/javascript" id="wicket-ajax-base-url">
/*<![CDATA[*/
Wicket.Ajax.baseUrl="?0";
/*]]]]><![CDATA[>*/
</script>
</head>]]></header-contribution>

scripts	ArrayList<E>  (id=8533)	
=
[var element = document.getElementById("content3");
var settings = new Object();
settings.minWidth=200;
settings.minHeight=200;
settings.className="w_blue";
settings.width=600;
settings.height=400;
settings.resizable=true;
settings.element=element;
settings.title="Modal window";
settings.mask="semi-transparent";
settings.autoSize=false;
settings.unloadConfirmation=true;
settings.onClose = function() { Wicket.Ajax.ajax({"u":"./?0-1.IBehaviorListener.1-modalWindow","c":"modalWindow2"}); };
window.setTimeout(function(){
  Wicket.Window.create(settings).show();
}, 0);
]







/ Einde CLICK SHOW MODAL DIALOG WITH PAGE


/ Einde WICKET 7 MODAL WINDOW  WICKET-EXAMPLES-STEP-BY-STEP 

/ WICKET 7 MODAL WINDOW  WICKET-TESTING SELF

/ we maken in wicket-testing ModelWindowStudy2Page	, 

/ 7	. 

$ vi ModalPanel.java

package my.test.own;

import org.apache.wicket.markup.html.panel.Panel;

public class ModalPanel extends Panel {
	public ModalPanel(String id) {
		super(id);
	}
}
/ er moet zo'n ctor zijn	, met super(id) er in	,

/ 7	. 

/ we use geen model in ModalWindow	,
/ er is wel een ctor ModalWindow(str,model)
/ TODO

/ 7	. 

$ vi ModalPage.java

public class ModalPage extends WebPage {
	
	public ModalPage(final PageReference pageReference,final ModalWindow modalWindow) {
		AjaxLink<Void>close;
		add(close=new AjaxLink<Void>("close") {
			@Override
			public void onClick(AjaxRequestTarget target) {
				...
				modalWindow.close(target);
				
/ Waarom argument target	?

$ less ModalWindow.java
       public void close(final IPartialPageRequestHandler target) {
                if (isCustomComponent())
                {
                        target.add(getContent());
                }
                target.appendJavaScript(getCloseJavacript());

/ WH	, omdat we zien in devtools's network	,

/ 1ste	,

/ result of
		target.appendJavaScript(getCloseJavacript())

<?xml version="1.0" encoding="UTF-8"?><ajax-response><component id="content5" ><![CDATA[<div id="content5" style="display:none"></div>]]></component><evaluate><![CDATA[(function(){var win;
try {
	win = window.parent.Wicket.Window;
} catch (ignore) {
}
if (typeof(win) == "undefined" || typeof(win.current) == "undefined") {
  try {
     win = window.Wicket.Window;
  } catch (ignore) {
  }
}
if (win && win.current) {
 var close = function(w) { w.setTimeout(function() {
		win.current.close();
	}, 0);  };
	try { close(window.parent); } catch (ignore) { close(window); }
}})();]]></evaluate></ajax-response>

/ 2de	,

/ result of	,
     target.add(getContent());

<?xml version="1.0" encoding="UTF-8"?><ajax-response><component id="result3" ><![CDATA[<span wicket:id="result" id="result3" wicketpath="result">Closed modal window with page on 2016/03/01 12:45:54</span>]]></component></ajax-response>


/ Als we NIET
				modalWindow.close(target);
/ dan ALLEEN	,
<?xml version="1.0" encoding="UTF-8"?><ajax-response></ajax-response>


/ 7	. 

/ in project wicket-testing	,
$ vi ModalWindowStudyPage2.java/.html
$ vi Modal2Page.java/.html
$ vi Modal2Panel.java/.html

/ Als we een page in een modal window hebben	, dan moeten we altijd een <head/> tag zetten in de template, 
/ Anders werkt de close link op de modal page niet	,  

$ vi ModalPage.html

<!doctype html>
<html>
<head>
	<meta charset="Utf-8">					/ mag, hoeft niet	,
</head>

	<a wicket:id="close">Close window</a>
</html>
/ Deze is OK	, 

/ we zien dan	,
<head><script type="text/javascript" src="./resource/org.apache.wicket.resource.JQueryResourceReference/jquery/jquery-2.2.0-ver-1455723568000.js"></script>
<script type="text/javascript" src="./resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-event-jquery-ver-1455723568000.js"></script>
<script type="text/javascript" src="./resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-ajax-jquery-ver-1455723568000.js"></script>
<script type="text/javascript" src="./resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-ajax-jquery-debug-ver-1455723568000.js"></script>
<script type="text/javascript" id="wicket-ajax-debug-enable">
/*<![CDATA[*/
Wicket.Ajax.DebugWindow.enabled=true;
/*]]>*/
</script>
<script type="text/javascript" id="wicket-ajax-base-url">
/*<![CDATA[*/
Wicket.Ajax.baseUrl="wicket/page?3";
/*]]>*/
</script>

	<script type="text/javascript">
/*<![CDATA[*/
Wicket.Event.add(window, "domready", function(event) { 
Wicket.Ajax.ajax({"u":"./page?3-1.IBehaviorListener.0-close","c":"close10","e":"click"});;
Wicket.Event.publish(Wicket.Event.Topic.AJAX_HANDLERS_BOUND);
;});
/*]]>*/
</script>
</head>

/ Maar als we geen <head/> 	,

<!doctype html>
<html>
	<a wicket:id="close">Close window</a>
</html>
/ Dan werkt de link NIET	, want we zien dan in HTML	,

<head>
</head>
/ Dus we missen alle JavaScript	.

/ 7	. 

/ in project wicket-testing	,
$ vi ModalWindowStudyPage2a.java/.html
$ vi Modal2aPage.java/.html
$ vi Modal2aPanel.java/.html

/ we maken een close button op het panel, dat in de modal window komt	, 

$ vi ModalWindowStudyPage2a.java

	public ModalWindowStudy2aPage() {
		...
		modalWindow.setContent(new Modal2aPanel(
				modalWindow.getContentId(),ModalWindowStudy2aPage.this.getPageReference(),modalWindow));

$ vi Modal2aPanel.java

	public Modal2aPanel(final String id,final PageReference pageReference,final ModalWindow modalWindow) {
		...
		AjaxLink<Void>close;
		add(close=new AjaxLink<Void>("close") {
			@Override
			public void onClick(AjaxRequestTarget target) {
				DateFormat dateFormat=new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
				Date date=new Date();
				String str=dateFormat.format(date);
				((ModalWindowStudy2aPage)pageReference.getPage()).setResult("Closed modal window with page on "+str);
				
				modalWindow.close(target);
				
			}

$ vi Modal2aPanel.html
	...
	<a wicket:id="close">Close</a>

/ 7	. 

/ Lees	,
https://ci.apache.org/projects/wicket/guide/7.x/guide/modelsforms.html

The purpose of FormComponent is to store the corresponding user input into its model when the form is submitted. The form is responsible for mapping input values to the corresponding components, avoiding us the burden of manually synchronizing models with input fields and vice versa.

/ we oef met OtherForm3Page.java	,

/ 7	.

/ See 1ste voorbeeld	,
https://ci.apache.org/projects/wicket/guide/7.x/guide/modelsforms.html

/ Wicket sets de value in de text field in de property van de class	, dus het is juist de bedoeling dat we de properties op de server opvragen, en niet textField.getModelObject() doen, Wicket doet het voor ons	, 

/ Deze is voor alle varianten hetzelfde	,
$ vi OtherForm3Page.html

	<form wicket:id="form">	
		<input type="text" wicket:id="text">
		<br>
		<input type="text" wicket:id="count">
		<br>
		<input type="submit">
	</form>

$ vi OtherForm3Page.java

public class OtherForm3Page extends WebPage{
	
	private String text;
	private int count;
	
	public OtherForm3Page() {
		
		final IModel<String>model=new PropertyModel<String>(this, "text");
		final FormComponent<String>textField=new TextField<String>("text",model);
		
		final IModel<Integer>model2=new PropertyModel<Integer>(this,"count");
		final FormComponent<Integer>countField=new TextField<Integer>("count",model2);
		
		final Form<OtherForm3Page>form=new Form<OtherForm3Page>("form"){
			@Override
			protected void onSubmit() {
				System.out.println("text: "+text);
				System.out.println("count: "+count);
			}
		};
		add(form);
		form.add(textField);
		form.add(countField);
	}
}

/ we kunnen ook de properties in het form	,

$ vi OtherForm3aPage.java

public class OtherForm3aPage extends WebPage{
	
	public OtherForm3aPage() {
		
		final Form<OtherForm3aPage>form=new MyForm("form");
		add(form);

	}
	
	private class MyForm extends Form<OtherForm3aPage>{
		
		private String text=null;				
		private Integer count=null;
		final private FormComponent<String>textField;
		final private FormComponent<Integer>countField;
		
		
		public MyForm(String id){
			super(id);
			
			final IModel<String>model=new PropertyModel<String>(this, "text");
			textField=new TextField<String>("text",model);
			add(textField);
			
			final IModel<Integer>model2=new PropertyModel<Integer>(this,"count");
			countField=new TextField<Integer>("count",model2);
			add(countField);

		}
		@Override
		protected void onSubmit() {
			System.out.println("text: "+text);
			System.out.println("count:"+count);
			
		}
	}
}

/ we kunnen ook met compound property model werken	, in de page of in het form	,

/ in de page	,

public class OtherForm3bPage extends WebPage{
	
	final String text=null;
	final Integer count=null;
	
	public OtherForm3bPage() {
		
		final IModel<OtherForm3bPage>model=new CompoundPropertyModel<OtherForm3bPage>(this);
		this.setDefaultModel(model);
		
		final FormComponent<String>textField=new TextField<String>("text");
		
		final FormComponent<Integer>countField=new TextField<Integer>("count");
		
		final Form<OtherForm3bPage>form=new Form<OtherForm3bPage>("form"){
			@Override
			protected void onSubmit() {
				System.out.println("text: "+text);
				System.out.println("count: "+count);
				
			}
		};
		add(form);
		form.add(textField);
		form.add(countField);
		
	}
	
}

/ en in het form	,

$ vi OtherForm3cPage.java

public class OtherForm3cPage extends WebPage{
	
	public OtherForm3cPage() {
		final Form<OtherForm3cPage>form=new MyForm("form");
		add(form);
	}
	
	private class MyForm extends Form<OtherForm3cPage>{
		
		private String text=null;
		private Integer count=null;
		final private FormComponent<String>textField;
		final private FormComponent<Integer>countField;
		
		public MyForm(String id){
			super(id);
			
			IModel<MyForm>model=new CompoundPropertyModel<>(this);
			setDefaultModel(model);
			textField=new TextField<String>("text");
			add(textField);
			countField=new TextField<Integer>("count");
			add(countField);
		}
		@Override
		protected void onSubmit() {
			System.out.println("text: "+text);
			System.out.println("count:"+count);
		}
	}
} 
		
/ 7	. 


/ we oef met final properties	, wat je normaal niet doet	,
/ we zien verschil in de property & model object	, als field primitive type heeft, niet als hij de class type heeft	,

$ vi OtherForm3aPage.java

	public OtherForm3aPage() {
		final Form<OtherForm3aPage>form=new MyForm("form");
		add(form);
	}
	
	private class MyForm extends Form<OtherForm3aPage>{
		
		final private String text=null;				
		final private int count=0;
		final private FormComponent<String>textField;
		final private FormComponent<Integer>countField;
		
		public MyForm(String id){
			super(id);
			
			final IModel<String>model=new PropertyModel<String>(this, "text");
			textField=new TextField<String>("text",model);
			add(textField);
			
			final IModel<Integer>model2=new PropertyModel<Integer>(this,"count");
			countField=new TextField<Integer>("count",model2);
			add(countField);

		}
		@Override
		protected void onSubmit() {
		
			System.out.println("text: "+text);
			System.out.println("count:"+count);
			System.out.println("count of model: "+countField.getModelObject());
			
		}
		
		
	}

/ we geven in de browser
eric j. 
13

/ we zien op de server	, 
text: eric j.
count:0
count of model: 13

/ Dus count is niet set	, maar de model object geeft wel 13	,
/ TODO

/ Maar als we het field Integer maken ipv int	, 

		final private String text=null;				
		final private Integer count=null;

/ dan zien we op de server wel	,
text: eric j.
count:13
count of model: 13
/ TODO

/ 7	. 

/ we maken een form	, gedeeltelijk in een modal window	,

ModalWindowStudy3Page.java/.html
Modal3Page.java/.html 
Modal3Panel.java/.html 

/ 7	. 

/ we gaan attr toevoegen aan het iframe	,

/ 7	. 

/ we lezen	,

$ vi ModalWindow.java

public class ModalWindow extends Panel

	private static final ResourceReference JAVASCRIPT = new JavaScriptResourceReference(
		ModalWindow.class, "res/modal.js");

	@Override
	public void renderHead(final IHeaderResponse response)
	{
		super.renderHead(response);

		CoreLibrariesContributor.contributeAjax(getApplication(), response);
		response.render(JavaScriptHeaderItem.forReference(JAVASCRIPT));

		ResourceReference cssResource = newCssResource();
		if (cssResource != null)
		{
			response.render(CssHeaderItem.forReference(cssResource));
		}

/ of we lezen	,
https://ci.apache.org/projects/wicket/guide/7.x/guide/jsintegration.html

@Override
public void renderHead(IHeaderResponse response) {
	super.renderHead(response);
	//add package resources
	response.render(JavaScriptHeaderItem.
	      forReference(new PackageResourceReference(getClass(), "jquery-ui.min.js")));
	response.render(JavaScriptHeaderItem.
	      forReference(new PackageResourceReference(getClass(), "jquery-ui-i18n.min.js")));

/ of we lezen	,
wicket/wicket-examples/src/main/java/org/apache/wicket/examples/media/Home.java

    @Override
    public void renderHead(IHeaderResponse response)
    {
        super.renderHead(response);
        response.render(CssHeaderItem.forReference(new PackageResourceReference(Home.class,
            "Home.css")));
    }


/ 7	. 

$ vi ModalWindowStudy2bPage.java

	@Override
	public void renderHead(IHeaderResponse response) {
		super.renderHead(response);
/*
		PackageResourceReference packageResourceReference=new PackageResourceReference(ModalWindowStudy2bPage.class,ModalWindowStudy2bPage.class.getName()+".js");
		JavaScriptHeaderItem javaScriptHeaderItem=JavaScriptHeaderItem.forReference(packageResourceReference);
		response.render(javaScriptHeaderItem);
*/
// ERR
/ TODO

		response.render(JavaScriptHeaderItem.forReference(new PackageResourceReference(Modal2bPage.class,
				"Modal2bPage.js")));
/ OK
	}

/ we zien 	, 
/ na tomcat7:deploy	,
[eric@localhost Wicket]$ jar tvf /home/eric/Devel/Java/Wicket/wicket-testing/target/wicket-testing-0.0.1-SNAPSHOT.war | grep js
    34 Tue Mar 01 15:11:50 CET 2016 WEB-INF/classes/my/test/own/ModalWindowStudy2bPage.js

/ terwijl in HTML	,
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow/res/modal-ver-1455723568000.js"></script>
...
<script type="text/javascript" src="./wicket/resource/my.test.own.ModalWindowStudy2bPage/my.test.own.ModalWindowStudy2bPage.js"></script>
/ TODO

/ 13	. 

/ we hebben ook in wicket-examples-step-by-step de media appl add	,
/ OK

/	13	. 

/ Lees	,
http://stackoverflow.com/questions/17210600/wicket-6-calling-javascript-function-after-page-load

@Override
public void renderHead(IHeaderResponse response)
{
    super.renderHead(response);
    String bar = "something";
    response.render(JavaScriptHeaderItem.forScript("window.onload = function () {var foo='" + bar + "'}"));
    // or
    response.render(OnDomReadyHeaderItem.forScript("functionToCall(" + bar + ");") ;
}

/ Het kan dus ook direct	, ipv. dat je een .js file met het script er in maakt	,

/ 13	. 

/ we hebben een project wicket-js gemaakt	, 
/ om al die bp's uit wicket-testing te vermijden	,
/ In wicket-js	,
[eric@localhost own]$ ls
Index.html  Modal2bPage.html  Modal2bPage.js     Modal2bPanel.java            ModalWindowStudy2bPage.java  WicketApplication.java Index.java  Modal2bPage.java  Modal2bPanel.html  ModalWindowStudy2bPage.html  ModalWindowStudy2bPage.js

/ we hebben in pom.xml artifactId wicket-js set	, 
/ we hebben web.xml aangepast, maar was niet nodig	, (filter name)	,

/ 13	. 

/ In Modal2bPage.js	hebben we een bp set	,
/ we zien 
window=Window
window.frameELement=iframe#wicket_window_16.wicket_modal
winodw.parent=Window

$ vi Modal2bPage.js
$(document).ready(function(){
	$(window.frameElement).attr("name","iframe");
});
/ OK

/ 13	. 

/ we maken  project wicket-js-1.4	, 

$ vi WicketApplication.java

		getDebugSettings().setComponentPathAttributeName("wicketpath");	/ 7
		getDebugSettings().setOutputComponentPath(true);			/ 1.4

//		javaScriptResourceReference = new JavaScriptResourceReference(JQueryResourceReference.class,"jquery/jquery-2.2.0.js");
//		getJavaScriptLibrarySettings().setJQueryReference(javaScriptResourceReference);
/ TODO
/ In wicket-1.4.23 zit geen jquery.js	,

		mountPage("modalwindow2b", ModalWindowStudy2bPage.class);				/ 7
		mountBookmarkablePage("modalwindow2b", ModalWindowStudy2bPage.class); 	/ 1.4

$ vi Modal2bPage.java

public class Modal2bPage extends WebPage{ 									/ 7 
public class Modal2bPage extends WebPage  implements IHeaderContributor{	/ 1.4

	public void renderHead(IHeaderResponse response) {

		super.renderHead(response);																			/ 7
		response.render(JavaScriptHeaderItem.forReference(new PackageResourceReference(Modal2bPage.class,
				"Modal2bPage.js")));

		response.renderJavascriptReference(new JavascriptResourceReference(Modal2bPage.class,"jquery-1.12.1.js"));	/ 1.4
		
	}

$ pom.xml
	<properties>
		<wicket.version>7.2.0</wicket.version>	 / 7
	<properties>
		<wicket.version>1.4.23</wicket.version>	/ 1.4

		<dependency>							/ 7 
			<groupId>org.apache.wicket</groupId>
			<artifactId>wicket-core</artifactId>
			<version>${wicket.version}</version>
		</dependency>
		<dependency>							/ 1.4 
			<groupId>org.apache.wicket</groupId>
			<artifactId>wicket</artifactId>
			<version>${wicket.version}</version>
		</dependency>
	
/ 13	. 

/ Lees	, in 1.4.23	,
public abstract class AbstractDefaultAjaxBehavior extends AbstractAjaxBehavior
   @Override
    public void renderHead(IHeaderResponse response)
    {
        super.renderHead(response);
        response.renderJavascriptReference(WicketEventReference.INSTANCE);

/ in 1.4.23 is WebPage.renderHead final	, dus die kunnen we niet super.renderHead in Modal2bPage	,
/ TODO

        clock.add(new AjaxSelfUpdatingTimerBehavior(Duration.seconds(5)));

/ Lees	,
[eric@localhost Wicket]$ less ./apache-wicket-1.4.23/wicket/src/main/java/org/apache/wicket/ajax/AbstractAjaxTimerBehavior.java
       @Override
        public void renderHead(IHeaderResponse response)
        {
                super.renderHead(response);
				...
                        response.renderOnLoadJavascript(getJsTimeoutCall(updateInterval));
/ TODO

/ 13	. 

/ Lees	,
https://cwiki.apache.org/confluence/display/WICKET/Adding+Javascript+or+CSS+using+a+Resource
https://developer.mozilla.org/en-US/docs/Web/API/Window/parent
http://stackoverflow.com/questions/9248459/calling-a-javascript-function-from-wicket
https://cwiki.apache.org/confluence/display/WICKET/Calling+Wicket+from+Javascript
https://cwiki.apache.org/confluence/display/WICKET/Wicket+Ajax
http://localhost:9090/wicket-examples-step-by-step/media/

/ 7	. 

/ MORGENOCHTEND
/ JavaScript met Behaviors	,
/ Boek (247)	,
 

/ WICKET 7 REPEATING VIEW 

/ 7.	 

/ in wicket-testing	,

$ vi RepeatingViewPage.java

public class RepeatingViewPage extends WebPage {
	
	public RepeatingViewPage() {
		
		final RepeatingView repeatingView=new RepeatingView("list");
		add(repeatingView);
		final Label label=new Label(repeatingView.newChildId(),"blue");
		repeatingView.add(label);
		final Label label2=new Label(repeatingView.newChildId(),"green");
		repeatingView.add(label2);
		
	}
}

/////////////////////////////
/ we zien hieronder dat de 2 labels zelf geen markup hebben !
/ die krijgen ze van hun parent, de repeating view	, ze krijgen letterlijk de markup van hun parent, de repeating view	, 
/ dus de markup van elk label is uiteindelijk	, 
	<div wicket:id="list"></div>

/ Dus we hebben markup, markupstream	, dat is de markup template	, die we naast de java file geven	, 
/ hier staat bijv in	, 
	<div wicket:id="list"/> 
/ en we hebben response, 	dat is de markup die naar de client gaat	, 
/ hier staat bijv in	,	
	<div wicket:id="list"/> 

 
$ vi RepeatingViewPage.html

<!doctype html>
<html>
<head>
</head>
<body>
	<div wicket:id="list"></div>
</body>
</html>

$ vi WicketApplication.java

	public void init()
	{
		mountPage("repeatingview",RepeatingViewPage.class);

/ we zien in HTML	,

<html>
<head>
</head>
<body>
	<div wicket:id="list" wicketpath="list_1">blue</div>
	<div wicket:id="list" wicketpath="list_2">green</div>
</body>
</html>

/ 7	. 

/ De markup wordt bepaald via een onverwachte call, nl dequeue	, 
/ Dit is voor renderPage	, maar in respond	, in die 1ste test line	,
/s
	MarkupCache.getMarkup(MarkupContainer, Class<?>, boolean) line: 313	
				// load the markup and watch for changes
->				markup = loadMarkupAndWatchForChanges(container, resourceStream, enforceReload);

	MarkupFactory.getMarkup(MarkupContainer, Class<?>, boolean) line: 236	
	MarkupFactory.getMarkup(MarkupContainer, boolean) line: 194	
	RepeatingViewPage(MarkupContainer).getAssociatedMarkup() line: 456	
	RepeatingViewPage(MarkupContainer).getRegionMarkup() line: 2224	
	RepeatingViewPage(MarkupContainer).newDequeueContext() line: 2211	
	RepeatingViewPage(MarkupContainer).dequeueAutoComponents() line: 1670	
	RepeatingViewPage(MarkupContainer).onInitialize() line: 1664	
	RepeatingViewPage(Page).onInitialize() line: 299	
	RepeatingViewPage(Component).fireInitialize() line: 877	
	RepeatingViewPage(MarkupContainer).internalInitialize() line: 1084	
	RepeatingViewPage(Page).isPageStateless() line: 465	
	WebPageRenderer.isPageStateless() line: 287	
	WebPageRenderer.shouldRenderPageAndWriteResponse(RequestCycle, Url, Url) line: 329	
	WebPageRenderer.respond(RequestCycle) line: 193	
->		if (shouldRenderPageAndWriteResponse(requestCycle, currentUrl, targetUrl))
		else
		{
/ Later,
			Url beforeRenderUrl = requestCycle.mapUrlFor(getRenderPageRequestHandler());
			// redirect to buffer
/ Later,
			BufferedWebResponse response = renderPage(beforeRenderUrl, requestCycle);

	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	


$ vi RepeatingViewPage.html
<!doctype html>
<html>
<head>
</head>
<body>
	<div wicket:id="list"></div>
</body>
</html>
/ Na de -> bovenin	,

markup	Markup  (id=8362)	
	markupElements	Collections$UnmodifiableRandomAccessList<E>  (id=8366)	
		c	ArrayList<E>  (id=8367)	
			elementData	Object[10]  (id=8368)	
				[0]	RawMarkup  (id=8369)	
<!doctype html>
<html>
				[1]	ComponentTag  (id=8372)	
<head>
				[2]	RawMarkup  (id=8374)	

				[3]	ComponentTag  (id=8375)	
</head>
				[4]	RawMarkup  (id=8376)	

<body>
				[5]	ComponentTag  (id=8377)	
<div wicket:id="list">
				[6]	ComponentTag  (id=8378)	
</div>
				[7]	RawMarkup  (id=8379)	

</body>
</html>
			size	8	



/ 7	. 

/s
WebPageRenderer.respond(RequestCycle) line: 201	
		if (shouldRenderPageAndWriteResponse(requestCycle, currentUrl, targetUrl))
/ NEE
/ new page is created	, 
/ en de page is stateless	,
/ TODO
		else
		{
			Url beforeRenderUrl = requestCycle.mapUrlFor(getRenderPageRequestHandler());
repeatingView
/ TODO (Geen ?0)

/ Comppnent.render (this=RepeatingViewPage inst)	, calls Component.internalRender, calls WebPage.onRender,  calls via super Page.onRender, calls MarkupContainer.renderAll


/s
RepeatingViewPage(MarkupContainer).renderNext(MarkupStream) line: 1498	
			// Get element as tag
			final ComponentTag tag = (ComponentTag)element;
<div wicket:id="list">

			// Get component id
			final String id = tag.getId();

			// Get the component for the id from the given container
			Component component = get(id);
[RepeatingView [Component id = list]]

			// Failed to find it?
			if (component != null)
			{
				component.render();

//////////////
/ dus nu komen we weer in Component.render, 

/s
RepeatingView(Component).render() line: 2308	
			// Do the render
			internalRender();
/s
RepeatingView(Component).internalRender() line: 2345	
		// Make sure there is a markup available for the Component
		IMarkupFragment markup = getMarkup();
/s
RepeatingView(Component).getMarkup() line: 755	
		// Markup already determined or preset?
		if (markup != null)
/ NEE
		// Ask the parent for find the markup for me
		markup = parent.getMarkup(this);
parent=RepeatingViewPage	,
/s
RepeatingViewPage(MarkupContainer).getMarkup(Component) line: 502	
		// Delegate request to attached markup sourcing strategy.
		return getMarkupSourcingStrategy().getMarkup(this, child);
this=RepeatingViewPage	,
child=RepeatingView	,
/s
DefaultMarkupSourcingStrategy.getMarkup(MarkupContainer, Component) line: 81	
	MarkupFragment containerMarkup = container.getMarkup();
container=RepeatingViewPage	,
/ Deze heeft de markup wel	,

containerMarkup	Markup  (id=8362)	
	markupElements	Collections$UnmodifiableRandomAccessList<E>  (id=8366)	
		c	ArrayList<E>  (id=8367)	
			elementData	Object[10]  (id=8368)	
				[0]	RawMarkup  (id=8369)	
				[1]	ComponentTag  (id=8372)	
				[2]	RawMarkup  (id=8374)	
				[3]	ComponentTag  (id=8375)	
				[4]	RawMarkup  (id=8376)	
				[5]	ComponentTag  (id=8377)	
				[6]	ComponentTag  (id=8378)	
				[7]	RawMarkup  (id=8379)	
			size	8	

		// Find the child's markup
		IMarkupFragment childMarkup = containerMarkup.find(child.getId());
/s
Markup.find(String) line: 210	
/=
	public final IMarkupFragment find(final String id)
id="list"
		return find(id, 0);
/s
Markup(AbstractMarkupFragment).find(String, int) line: 43	

		boolean canFind = true;
/ TODO

		MarkupStream stream = new MarkupStream(this);
		stream.setCurrentIndex(streamOffset);
streamOffset=0
/ begin aan het begin van de stream	,
		while (stream.hasMore())
		{
			MarkupElement elem = stream.get();
<!doctype html>
<html>
			if (elem instanceof ComponentTag)
/ NEE
			stream.next();
/s
	public MarkupElement next()
	{
		if (++currentIndex < markup.size())				<-	
		{
			return current = get(currentIndex);
/t

/ Intermezzo 

this	MarkupStream  (id=8331)	
	current	RawMarkup  (id=8281)	
	currentIndex	2	
	markup	Markup  (id=8253)	
		markupElements	Collections$UnmodifiableRandomAccessList<E>  (id=8274)	
		markupResourceStream	MarkupResourceStream  (id=8235)	

/ MarkupStream houdt de positie in de Markup bij	, currentIndex	, 
/ straks is currentIndex=5	, de postitie van de markup van de RepeatingView	, <div wicket:id="list"></div>	, 
/ returned wordt MarkupFragment	, dat is de Markup  + startIndex=index markup RepeatingView=5


/ Einde Intermezzo 

/ volgende	,
		while (stream.hasMore())
		{
			MarkupElement elem = stream.get();
<head>
			if (elem instanceof ComponentTag)
			{
				ComponentTag tag = stream.getTag();

				if (tag.isOpen() || tag.isOpenClose())
				{
					if (canFind && tag.getId().equals(id))
/ NEE
					else if (tag.isOpen() && !tag.hasNoCloseTag())
					{
						openTagUsability.push(canFind);
[true]
/ TODO

						if (tag instanceof WicketTag)
/ NEE
			stream.next();

/ volgende,	
		while (stream.hasMore())
		{
			MarkupElement elem = stream.get();
"\n"
			if (elem instanceof ComponentTag)
/ NEE
			stream.next();

/ volgende,	
		while (stream.hasMore())
		{
			MarkupElement elem = stream.get();
</head>
			if (elem instanceof ComponentTag)
			{
				ComponentTag tag = stream.getTag();

				if (tag.isOpen() || tag.isOpenClose())
/ NEE
				}
				else if (tag.isClose())
				{
					if (openTagUsability.isEmpty())
/ NEE
					else
					{
						canFind = openTagUsability.pop();
true
/ TODO
			stream.next();

/ volgende	,
		while (stream.hasMore())
		{
			MarkupElement elem = stream.get();

<body>
			if (elem instanceof ComponentTag)
/ NEE
			stream.next();

/ volgende	,
		while (stream.hasMore())
		{
			MarkupElement elem = stream.get();
<div wicket:id="list">

			if (elem instanceof ComponentTag)
			{
				ComponentTag tag = stream.getTag();

				if (tag.isOpen() || tag.isOpenClose())
				{
					if (canFind && tag.getId().equals(id))
					{
						return stream.getMarkupFragment();
/s
MarkupStream.getMarkupFragment() line: 485	
		return new MarkupFragment(markup, currentIndex);
/s
MarkupFragment.<init>(IMarkupFragment, int) line: 61	
/=
	public MarkupFragment(final IMarkupFragment markup, final int startIndex)
this	MarkupFragment  (id=8685)	
/ markup is wat we altijd zien	, met het hele array	,
/ startIndex=5

		// Make sure we are at an open tag
		MarkupElement startElem = markup.get(startIndex);
startElem	ComponentTag  (id=8377)	
<div wicket:id="list">

		else
		{
			for (endIndex = startIndex + 1; endIndex < markupSize; endIndex++)
			{
				MarkupElement elem = markup.get(endIndex);
				if (elem instanceof ComponentTag)
				{
					ComponentTag tag = (ComponentTag)elem;
</div>
					if (tag.closes(startTag))
/ JA
					{
						break;
		this.size = endIndex - startIndex + 1;
2
/t
DefaultMarkupSourcingStrategy.getMarkup(MarkupContainer, Component) line: 94	
		// Find the child's markup
		IMarkupFragment childMarkup = containerMarkup.find(child.getId());
/d
		if (childMarkup != null)
		{
			return childMarkup;
/t
RepeatingView(Component).getMarkup() line: 756	
		// Ask the parent for find the markup for me
		markup = parent.getMarkup(this);
/d
this	RepeatingView  (id=8586)	
	markup	MarkupFragment  (id=8685)	
		markup	Markup  (id=8362)	
		size	2	
		startIndex	5	

/ een MarkupFragment is dus de hele markup array	, en een positie daarin	, 

		return markup;

/t
RepeatingView(Component).internalRender() line: 2346	
		// Make sure there is a markup available for the Component
		IMarkupFragment markup = getMarkup();
/d
/ Nu heeft this=RepeatingView ook markup	, en zal getMarkup() deze meteen return	,

markup	MarkupFragment  (id=8685)	
	markup	Markup  (id=8362)	
	size	2	
	startIndex	5	

		MarkupElement elem = markup.get(0);
/s
MarkupFragment.get(int) line: 144	
		// Ask the parent markup
		return markup.get(startIndex + index);
/t
RepeatingView(Component).internalRender() line: 2358	
		MarkupElement elem = markup.get(0);
/d
elem	ComponentTag  (id=8377)	
<div wicket:id="list">
/ Zonder </div> dus	,

				onRender();
/s
RepeatingView(AbstractRepeater).onRender() line: 92	

this	RepeatingView  (id=10430)	
	children	ArrayList<E>  (id=10480)	
		elementData	Object[12]  (id=10485)	
			[0]	Label  (id=10486)	
			[1]	Label  (id=10487)	
		size	2	

		Iterator<? extends Component> it = renderIterator();
/s
RepeatingView.renderIterator() line: 108	
		return iterator();
/s
RepeatingView(MarkupContainer).iterator() line: 658	
		return new MarkupChildIterator();
/t
RepeatingView(AbstractRepeater).onRender() line: 93	
		Iterator<? extends Component> it = renderIterator();
/d
		while (it.hasNext())
/s
MarkupContainer$1MarkupChildIterator.hasNext() line: 572	
				refreshInternalIteratorIfNeeded();
/s
MarkupContainer$1MarkupChildIterator.refreshInternalIteratorIfNeeded() line: 592	
this	MarkupContainer$1MarkupChildIterator  (id=10489)	

////////////////////
/ Hier wordt de echte iterator bepaald	, al na gelang het een List is of een Map	, ...

				else if (children instanceof List)
				{
					List<Component> childrenList = children();
childrenList	ArrayList<E>  (id=10480)	
	elementData	Object[12]  (id=10485)	
		[0]	Label  (id=10486)	
		[1]	Label  (id=10487)	
	size	2	
					internalIterator = childrenList.iterator();

				// since we now have a new iterator, we need to set it to the last known position
				currentComponent = findLastExistingChildAlreadyReturned(currentComponent);
null
				expectedModCounter = modCounter;
2
				indexInRemovalsSinceLastUpdate = removals_size();
0
/t
MarkupContainer$1MarkupChildIterator.hasNext() line: 573	
				refreshInternalIteratorIfNeeded();
/d
				return internalIterator.hasNext();
/t
RepeatingView(AbstractRepeater).onRender() line: 95	
		while (it.hasNext())
/d
			Component child = it.next();
/s
MarkupContainer$1MarkupChildIterator.next() line: 579	
				refreshInternalIteratorIfNeeded();
/ NIETS, is al	,
				return currentComponent = internalIterator.next();
/t
RepeatingView(AbstractRepeater).onRender() line: 96	
			Component child = it.next();
/d
child	Label  (id=10486)	
			renderChild(child);
/s
RepeatingView(AbstractRepeater).renderChild(Component) line: 115	
		child.render();
/s
Label(Component).render() line: 2296	

/////////////////////////////
/ Nu komen we weer in Component.render	, Component.internalRender	, calls WebComponent.onRender	, calls Component.internalRenderComponent	, calls 

			// Do the render
			internalRender();
/s
Label(Component).internalRender() line: 2345	
		// Make sure there is a markup available for the Component
		IMarkupFragment markup = getMarkup();
/s
Label(Component).getMarkup() line: 734	
		if (markup != null)
/ NEE
		// Ask the parent for find the markup for me
		markup = parent.getMarkup(this);
/s
AbstractRepeatingView
	@Override
	public IMarkupFragment getMarkup(final Component child)
	{
		// each direct child gets the markup of this repeater
		return getMarkup();

///////////////////////////////
/ we zien hier hoe RepeatingView.getMarkup werkt: hij geeft zijn eigen markup aan z'n child	, 
/ Dus hier Label krijgt letterlijk de markup van  RepeatingView	,

/t
Label(Component).internalRender() line: 2345	
		IMarkupFragment markup = getMarkup();
/d
				onRender();
/s
Label(WebComponent).onRender() line: 60	
		internalRenderComponent();
/s
Label(Component).internalRenderComponent() line: 2524	
		final IMarkupFragment markup = getMarkup();
/ Die heeft hij nu	,
this	Label  (id=8299)	
	markup	MarkupFragment  (id=8344)	
		markup	Markup  (id=8253)	
		size	2	
		startIndex	5	

		final MarkupStream markupStream = new MarkupStream(markup);
/s
MarkupStream.<init>(IMarkupFragment) line: 71	
		this.markup = markup;

		if (markup.size() > 0)
		{
			current = get(currentIndex);
currentIndex=0
/s
MarkupStream.get(int) line: 208	
		return markup.get(index);
/s
MarkupFragment.get(int) line: 144	
		// Ask the parent markup
		return markup.get(startIndex + index);
/ startIndex=5	, index=0

/t
MarkupStream.<init>(IMarkupFragment) line: 71	
			current = get(currentIndex);
/d
this	MarkupStream  (id=8399)	
	current	ComponentTag  (id=8284)	
<div wicket:id="list">
	currentIndex	0	
	markup	MarkupFragment  (id=8344)	

/t
Label(Component).internalRenderComponent() line: 2517	
		final MarkupStream markupStream = new MarkupStream(markup);
/d
markupStream	MarkupStream  (id=8399)	
	current	ComponentTag  (id=8284)	
<div wicket:id="list">
	currentIndex	0	
	markup	MarkupFragment  (id=8344)	

		final ComponentTag openTag = markupStream.getTag();
/=
			return (ComponentTag)current;

		onComponentTag(tag);
tag=
<div wicket:id="list" wicketpath="list_1">
/ wicketpath erbij	,

			else
			{
				renderComponentTag(tag);
/s
Label(Component).renderComponentTag(ComponentTag) line: 4034	
			// Write the tag
			tag.writeOutput(getResponse(), !needToRenderTag(null),
				getMarkup().getMarkupResourceStream().getWicketNamespace());

/ Dus we hebben markup, markupstream	, dat is de markup template	, 
/ en we hebben response, 	dat is de markup die naar de client gaat	, 
/s
ComponentTag.writeOutput(Response, boolean, String) line: 720	
		response.write("<");
		response.write(getName());
		if (getAttributes().size() > 0)
		{
			for (String key : getAttributes().keySet())
			{
				if ((namespacePrefix == null) || (key.startsWith(namespacePrefix) == false))
				{
					response.write(" ");
					response.write(key);
					CharSequence value = getAttribute(key);
key	"wicket:id" (id=8424)	
value	"list" (id=8315)	
/ ,
key	"wicketpath" (id=8429)	
value	"list_1" (id=8430)	

					// attributes without values are possible, e.g.' disabled'
					if (value != null)
					{
						response.write("=\"");
						value = Strings.escapeMarkup(value);
						response.write(value);
						response.write("\"");
					}
				}
			}
		}
		response.write(">");

/ response=
<!doctype html>
<html>
<head>
</head>
<body>
	<div wicket:id="list" wicketpath="list_1">

/t
Label(Component).internalRenderComponent() line: 2565	
			else
			{
				renderComponentTag(tag);

			markupStream.next();

markupStream	MarkupStream  (id=8399)	
	current	ComponentTag  (id=8285)	
</div>
	currentIndex	1	
	markup	MarkupFragment  (id=8344)	
		markup	Markup  (id=8253)	
		size	2	
		startIndex	5	

			if (tag.isOpen())
tag=
<div wicket:id="list" wicketpath="list_1">
			{
				// Render the body. The default strategy will simply call the component's
				// onComponentTagBody() implementation.
				getMarkupSourcingStrategy().onComponentTagBody(this, markupStream, tag);
/s
DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
		component.onComponentTagBody(markupStream, openTag);
component	Label  (id=8299)	
/s
Label.onComponentTagBody(MarkupStream, ComponentTag) line: 115	
		replaceComponentTagBody(markupStream, openTag, getDefaultModelObjectAsString());

/ Intermezzo

		final Label label=new Label(repeatingView.newChildId(),"blue");
		repeatingView.add(label);

/ Einde Intermezzo

/s
Label(Component).replaceComponentTagBody(MarkupStream, ComponentTag, CharSequence) line: 4054	
/=
	protected final void replaceComponentTagBody(final MarkupStream markupStream,
		final ComponentTag tag, final CharSequence body)
body="true"

		// The tag might have been changed from open-close to open. Hence
		// we'll need what was in the markup itself
		ComponentTag markupOpenTag = null;
/ TODO

		// If tag has a body
		if (tag.isOpen())
<div wicket:id="list" wicketpath="list_1">
/ JA

markupStream	MarkupStream  (id=8399)	
	current	ComponentTag  (id=8285)	
	currentIndex	1	
	markup	MarkupFragment  (id=8344)	
/ markupStream is in </div>	, vandaar currentIndex=1	,

			// Get what tag was in the markup; not what the user it might
			// have changed it to.
			markupOpenTag = markupStream.getPreviousTag();
<div wicket:id="list">

			// If it was an open tag in the markup as well, than ...
			if (markupOpenTag.isOpen())
			{
				// skip any raw markup in the body
				markupStream.skipRawMarkup();
/ TODO
		if (body != null)
"blue"
		{
			// Write the new body
			getResponse().write(body);
/t
Label(Component).internalRenderComponent() line: 2570	
				// Render the body. The default strategy will simply call the component's
				// onComponentTagBody() implementation.
				getMarkupSourcingStrategy().onComponentTagBody(this, markupStream, tag);
/d
				// Render close tag
				if (openTag.isOpen())
				{
					renderClosingComponentTag(markupStream, tag, getRenderBodyOnly());
/s
Label(Component).renderClosingComponentTag(MarkupStream, ComponentTag, boolean) line: 4284	
/=
	final void renderClosingComponentTag(final MarkupStream markupStream,
		final ComponentTag openTag, final boolean renderBodyOnly)
openTag=
<div wicket:id="list" wicketpath="list_1">
renderBodyOnly	false	

		// Tag should be open tag and not openclose tag
		if (openTag.isOpen())
		{
			// If we found a close tag and it closes the open tag, we're good
			if (markupStream.atCloseTag() && markupStream.getTag().closes(openTag))
			{
				// Render the close tag
				if ((renderBodyOnly == false) && needToRenderTag(openTag))
				{
					getResponse().write(openTag.syntheticCloseTagString());
</div>
/ TODO
/ In de markup stream zit </div> , deze wordt niet used	,

/t
RepeatingView(AbstractRepeater).onRender() line: 95	

/ volgende	,
		while (it.hasNext())
		{
			Component child = it.next();
			renderChild(child);



/ Intermezzo

/ Nogmaals	, 
/ we hebben de markup stream	, dat is het template	, 
/ en de response	, dat is wat naar de client gaat	, 
/ in de markup	,
	<div wicket:id="list"></div> 
/ in de response	,
	<div wicket:id="list" wicketpath="list_1">blue</div> 
	<div wicket:id="list" wicketpath="list_1">red</div> 
			
/ Einde Intermezzo


/ Intermezzo

/ Wicket passeert altijd Component.render, Component.internalRender	, WebPage/AbstractRepeater/WebComponent.onRender	,

/s
	ComponentTag.writeOutput(Response, boolean, String) line: 720	
	Label(Component).renderComponentTag(ComponentTag) line: 4034	
	Label(Component).internalRenderComponent() line: 2556	
	Label(WebComponent).onRender() line: 60	
	Label(Component).internalRender() line: 2380	
	Label(Component).render() line: 2308	

	RepeatingView(AbstractRepeater).renderChild(Component) line: 115	
	RepeatingView(AbstractRepeater).onRender() line: 102	
	RepeatingView(Component).internalRender() line: 2380	
	RepeatingView(Component).render() line: 2308	

	RepeatingViewPage(MarkupContainer).renderNext(MarkupStream) line: 1524	
	RepeatingViewPage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	RepeatingViewPage(Page).onRender() line: 879	
	RepeatingViewPage(WebPage).onRender() line: 141	
	RepeatingViewPage(Component).internalRender() line: 2380	
	RepeatingViewPage(Component).render() line: 2308	
	RepeatingViewPage(Page).renderPage() line: 1018	

	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ Waar is onRender	?
[eric@localhost wicket]$ grep 'void onRender' $(find -name "*.java")
./wicket-core/src/main/java/org/apache/wicket/markup/html/border/Border.java:		protected void onRender()
./wicket-core/src/main/java/org/apache/wicket/markup/html/WebPage.java:	protected void onRender()
./wicket-core/src/main/java/org/apache/wicket/markup/html/WebComponent.java:	protected void onRender()
./wicket-core/src/main/java/org/apache/wicket/markup/repeater/AbstractRepeater.java:	protected final void onRender()
./wicket-core/src/main/java/org/apache/wicket/markup/transformer/AbstractOutputTransformerContainer.java:	protected final void onRender()
./wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java:	protected void onRender()
./wicket-core/src/main/java/org/apache/wicket/Component.java:	protected abstract void onRender();
./wicket-core/src/main/java/org/apache/wicket/Page.java:	protected void onRender()


/ In meer detail	,

	RepeatingView(AbstractRepeater).renderChild(Component) line: 115	
	RepeatingView(AbstractRepeater).onRender() line: 102	
		while (it.hasNext())
			renderChild(child);

	RepeatingView(Component).internalRender() line: 2380	
	RepeatingView(Component).render() line: 2308	

/ Einde Intermezzo

/ 7	. 



/ Einde WICKET 7 REPEATING VIEW 

/ WICKET 7 MARKUP

/ Hoe wordt de markup bepaald	, want de Labels hierboven hebben op de een of andere manier als markup
	<div wicket:id="list"></div>

/ Eerst bij page	,
/s
	WebPageRenderer.respond(RequestCycle) line: 236	
/s
	RepeatingViewPage(Page).renderPage() line: 1018	
/s
	RepeatingViewPage(Component).render() line: 2308	
/s
	RepeatingViewPage(Component).internalRender() line: 2345	
		IMarkupFragment markup = getMarkup();
/s
RepeatingViewPage(Component).getMarkup() line: 740	
				MarkupContainer container = (MarkupContainer)this;
				Markup associatedMarkup = container.getAssociatedMarkup();
/s
RepeatingViewPage(MarkupContainer).getAssociatedMarkup() line: 456	
			Markup markup = MarkupFactory.get().getMarkup(this, false);
/s
MarkupFactory.getMarkup(MarkupContainer, boolean) line: 194	
		return getMarkup(container, container.getClass(), enforceReload);
/s
MarkupFactory.getMarkup(MarkupContainer, Class<?>, boolean) line: 219	
		IMarkupCache cache = getMarkupCache();
/ = new MarupCache()
		if (cache != null)
		{
			// MarkupCache acts as pull-through cache. It'll call the same loadMarkup() method as
			// below, if needed.
			// @TODO may be that can be changed. I don't like it too much.
			return cache.getMarkup(container, containerClass, enforceReload);
/s
MarkupCache.getMarkup(MarkupContainer, Class<?>, boolean) line: 272	
		// Get the cache key to be associated with the markup resource stream.
		// If the cacheKey returned == null, than caching is disabled for the resource stream.
		final String cacheKey = getMarkupCacheKeyProvider(container).getCacheKey(container,
			containerClass);
my.test.own.RepeatingViewPage_en_US.html

		// Is the markup already in the cache?
		Markup markup = null;
		if ((enforceReload == false) && (cacheKey != null))
		{
			markup = getMarkupFromCache(cacheKey, container);
/s
MarkupCache.getMarkupFromCache(String, MarkupContainer) line: 415	
		if (cacheKey != null)
my.test.own.RepeatingViewPage_en_US.html
		{
			String locationString = markupKeyCache.get(cacheKey);
file:/home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28/webapps/wicket-testing/WEB-INF/classes/my/test/own/RepeatingViewPage.html
			if (locationString != null)
			{
				return markupCache.get(locationString);
/s
			return cache.get(key);
/ TODO

/ Einde WICKET 7 MARKUP

/ WICKET 7 MARKUP

/s
	DefaultMarkupResourceStreamProvider.getMarkupResourceStream(MarkupContainer, Class<?>) line: 87	
	MarkupFactory.getMarkupResourceStream(MarkupContainer, Class<?>) line: 320	
	MarkupCache.getMarkup(MarkupContainer, Class<?>, boolean) line: 295	
	MarkupFactory.getMarkup(MarkupContainer, Class<?>, boolean) line: 236	
	MarkupFactory.getMarkup(MarkupContainer, boolean) line: 194	
	RepeatingViewPage(MarkupContainer).getAssociatedMarkup() line: 456	
	RepeatingViewPage(MarkupContainer).getRegionMarkup() line: 2224	
	RepeatingViewPage(MarkupContainer).newDequeueContext() line: 2211	
	RepeatingViewPage(MarkupContainer).dequeueAutoComponents() line: 1670	
	RepeatingViewPage(MarkupContainer).onInitialize() line: 1664	
	RepeatingViewPage(Page).onInitialize() line: 299	
	RepeatingViewPage(Component).fireInitialize() line: 877	
	RepeatingViewPage(MarkupContainer).internalInitialize() line: 1084	
	RepeatingViewPage(Page).isPageStateless() line: 465	
	WebPageRenderer.isPageStateless() line: 287	
	WebPageRenderer.shouldRenderPageAndWriteResponse(RequestCycle, Url, Url) line: 329	
	WebPageRenderer.respond(RequestCycle) line: 193	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/t
MarkupFactory.getMarkup(MarkupContainer, Class<?>, boolean) line: 236	
		IMarkupCache cache = getMarkupCache();
/d
		if (cache != null)
		{
			// MarkupCache acts as pull-through cache. It'll call the same loadMarkup() method as
			// below, if needed.
			// @TODO may be that can be changed. I don't like it too much.
			return cache.getMarkup(container, containerClass, enforceReload);

container	RepeatingViewPage  (id=8226)	
clazz	Class<T> (my.test.own.RepeatingViewPage) (id=8214)	
enforceReload	false	
/s
MarkupCache.getMarkup(MarkupContainer, Class<?>, boolean) line: 276	

		final String cacheKey = getMarkupCacheKeyProvider(container).getCacheKey(container,
			containerClass);
my.test.own.RepeatingViewPage_en_US.html
/ en_US is de locale	,

		if ((enforceReload == false) && (cacheKey != null))
		{
			markup = getMarkupFromCache(cacheKey, container);
null
		if (markup == null)
		{
			// Get the markup resource stream for the container
			final MarkupResourceStream resourceStream = MarkupFactory.get()
				.getMarkupResourceStream(container, containerClass);
/s
MarkupFactory.getMarkupResourceStream(MarkupContainer, Class<?>) line: 307	
		// Who is going to provide the markup resource stream?
		// And ask the provider to locate the markup resource stream
		final IResourceStream resourceStream = getMarkupResourceStreamProvider(container).getMarkupResourceStream(
			container, containerClass);
/s
DefaultMarkupResourceStreamProvider.getMarkupResourceStream(MarkupContainer, Class<?>) line: 70	

		// Get locator to search for the resource
		final IResourceStreamLocator locator = Application.get()
			.getResourceSettings()
			.getResourceStreamLocator();
org.apache.wicket.core.util.resource.locator.caching.CachingResourceStreamLocator@49e35a97

		String style = container.getStyle();
null
		String variation = container.getVariation();
null
		Locale locale = container.getLocale();
en_US
		MarkupType markupType = container.getMarkupType();
MarkupType [extension=html, mimeType=text/html]
		String ext = (markupType != null ? markupType.getExtension() : null);
html
		// Markup is associated with the containers class. Walk up the class
		// hierarchy up to MarkupContainer to find the containers markup
		// resource.
		while (containerClass != MarkupContainer.class)
			String path = containerClass.getName().replace('.', '/');
my/test/own/RepeatingViewPage
			IResourceStream resourceStream = locator.locate(containerClass, path, style, variation, locale, ext, false);

containerClass	Class<T> (my.test.own.RepeatingViewPage) (id=8214)	
path	"my/test/own/RepeatingViewPage" (id=8953)	
style	null	
variation	null	
locale	Locale  (id=8265)	
ext	"html" (id=8946)	
/s
CachingResourceStreamLocator.locate(Class<?>, String, String, String, Locale, String, boolean) line: 116	
scope	Class<T> (my.test.own.RepeatingViewPage) (id=8214)	
/ 1ste arg	,
		CacheKey key = new CacheKey(scope.getName(), path, extension, locale, style, variation, strict);
key	CachingResourceStreamLocator$CacheKey  (id=8965)	
	extension	"html" (id=8946)	
	locale	Locale  (id=8265)	
	name	"my/test/own/RepeatingViewPage" (id=8953)	
	scope	"my.test.own.RepeatingViewPage" (id=8263)	
	strict	false	
	style	null	
	variation	null	

		IResourceStreamReference resourceStreamReference = cache.get(key);
null
		if (resourceStreamReference == null)
		{
			result = delegate.locate(scope, path, style, variation, locale, extension, strict);
/s
ResourceStreamLocator.locate(Class<?>, String, String, String, Locale, String, boolean) line: 149	
		// If path contains a locale, then it'll replace the locale provided to this method
		PathLocale data = ResourceUtils.getLocaleFromFilename(path);
data	ResourceUtils$PathLocale  (id=9020)	
	locale	null	
	path	"my/test/own/RepeatingViewPage" (id=9021)	

		if ((data != null) && (data.locale != null))
/ NEE
		// Try the various combinations of style, locale and extension to find the resource.
		IResourceNameIterator iter = newResourceNameIterator(path, locale, style, variation, extension, strict);
/s
ResourceStreamLocator.newResourceNameIterator(String, Locale, String, String, String, boolean) line: 243	
		return newResourceNameIterator(realPath, locale, style, variation, extensions, strict);
/s
ResourceStreamLocator.newResourceNameIterator(String, Locale, String, String, Iterable<String>, boolean) line: 250	
		return new ResourceNameIterator(path, style, variation, locale, extensions, strict);
/s
ResourceNameIterator.<init>(String, String, String, Locale, Iterable<String>, boolean) line: 106	
		else
		{
			this.extensions = extensions;
[html]
			this.path = path;
my/test/own/RepeatingViewPage

		styleIterator = newStyleAndVariationResourceNameIterator(style, variation);
org.apache.wicket.core.util.resource.locator.StyleAndVariationResourceNameIterator@5f7627fc
		this.strict = strict;
false
/t
ResourceStreamLocator.locate(Class<?>, String, String, String, Locale, String, boolean) line: 159	
		// Try the various combinations of style, locale and extension to find the resource.
		IResourceNameIterator iter = newResourceNameIterator(path, locale, style, variation,
			extension, strict);
/d
		while (iter.hasNext())
		{
			String newPath = iter.next();
my/test/own/RepeatingViewPage_en_US.html

			IResourceStream stream = locate(clazz, newPath);
null
/ want	,
/s
ResourceStreamLocator.locate(Class<?>, String) line: 128	

this	ResourceStreamLocator  (id=8936)	

		// First try with the resource finder registered with the application
		// (allows for markup reloading)
		if (finders == null)
/ NEE
		{
			finders = Application.get().getResourceSettings().getResourceFinders();
/ EERDER

	finders	ArrayList<E>  (id=9014)	
		elementData	Object[10]  (id=9048)	
			[0]	ClassPathResourceFinder  (id=9045)	
				prefix	"" (id=9054)	
			[1]	WebApplicationPath  (id=9051)	
				path	"/" (id=9056)	
				servletContext	ApplicationContextFacade  (id=9057)	
			[2]	ClassPathResourceFinder  (id=9052)	
				prefix	"META-INF/resources/" (id=9059)	
		size	3	
/=
[[classpath], [webapppath: /], [classpath: META-INF/resources/]]

		for (IResourceFinder finder : finders)
		{
			log.debug("Attempting to locate resource '{}' using finder'{}'", path, finder);
			result = finder.find(clazz, path);
null, als finder=[classpath]
null, als finder=[webclasspath: /]
null, als finder=[classpath: META-INF/resources/]

/t
ResourceStreamLocator.locate(Class<?>, String, String, String, Locale, String, boolean) line: 164	
		while (iter.hasNext())
		{
			String newPath = iter.next();

			IResourceStream stream = locate(clazz, newPath);
null
			if (stream != null)
/ NEE

/ volgende	,
		while (iter.hasNext())
		{
			String newPath = iter.next();

			IResourceStream stream = locate(clazz, newPath);
null
newPATH=my/test/own/RepeatingViewPage_en.html

/ zojuist hadden we 
my/test/own/RepeatingViewPage_en_US.html

/ volgende, 	
		while (iter.hasNext())
		{
			String newPath = iter.next();
my/test/own/RepeatingViewPage.html

			IResourceStream stream = locate(clazz, newPath);
/s
ResourceStreamLocator.locate(Class<?>, String) line: 130	
		for (IResourceFinder finder : finders)
		{
			result = finder.find(clazz, path);
finder=[classpath]
result	UrlResourceStream  (id=9126)	
file:/home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28/webapps/wicket-testing/WEB-INF/classes/my/test/own/RepeatingViewPage.html

/t
ResourceStreamLocator.locate(Class<?>, String, String, String, Locale, String, boolean) line: 166	
			IResourceStream stream = locate(clazz, newPath);
/d
stream	UrlResourceStream  (id=9126)	
	lastModified	null	
	locale	null	
	streamData	null	
	style	null	
	url	URL  (id=9133)	
file:/home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28/webapps/wicket-testing/WEB-INF/classes/my/test/own/RepeatingViewPage.html
	variation	null	

			if (stream != null)
			{
				stream.setLocale(iter.getLocale());
null
				stream.setStyle(iter.getStyle());
null
				stream.setVariation(iter.getVariation());
null
				return stream;
/t
CachingResourceStreamLocator.locate(Class<?>, String, String, String, Locale, String, boolean) line: 124	
			result = delegate.locate(scope, path, style, variation, locale, extension, strict);
/d
			updateCache(key, result);

key	CachingResourceStreamLocator$CacheKey  (id=8965)	
	extension	"html" (id=8946)	
	locale	Locale  (id=8265)	
	name	"my/test/own/RepeatingViewPage" (id=8953)	
	scope	"my.test.own.RepeatingViewPage" (id=8263)	
	strict	false	
	style	null	
	variation	null	
result	UrlResourceStream  (id=9126)	
	lastModified	null	
	locale	null	
	streamData	null	
	style	null	
	url	URL  (id=9133)	
	variation	null	

/ key heeft locale	, maar result NIET	, 
/ TODO

/s
CachingResourceStreamLocator.updateCache(CachingResourceStreamLocator$CacheKey, IResourceStream) line: 107	
		else if (stream instanceof UrlResourceStream)
		{
			UrlResourceStream urlResourceStream = (UrlResourceStream)stream;
			cache.put(key, new UrlResourceStreamReference(urlResourceStream));
/t
DefaultMarkupResourceStreamProvider.getMarkupResourceStream(MarkupContainer, Class<?>) line: 93	
		while (containerClass != MarkupContainer.class)
		{
			String path = containerClass.getName().replace('.', '/');
			IResourceStream resourceStream = locator.locate(containerClass, path, style,
				variation, locale, ext, false);
/d
resourceStream	UrlResourceStream  (id=9126)	
	lastModified	null	
	locale	null	
	streamData	null	
	style	null	
	url	URL  (id=9133)	
	variation	null	

			// Did we find it already?
			if (resourceStream != null)
			{
				return new MarkupResourceStream(resourceStream, new ContainerInfo(containerClass, container), containerClass);
/t
MarkupFactory.getMarkupResourceStream(MarkupContainer, Class<?>) line: 324	
		// Who is going to provide the markup resource stream?
		// And ask the provider to locate the markup resource stream
		final IResourceStream resourceStream = getMarkupResourceStreamProvider(container).getMarkupResourceStream(
			container, containerClass);
/d
		if (resourceStream instanceof MarkupResourceStream)
		{
			return (MarkupResourceStream)resourceStream;
/t
MarkupCache.getMarkup(MarkupContainer, Class<?>, boolean) line: 301	
			// Get the markup resource stream for the container
			final MarkupResourceStream resourceStream = MarkupFactory.get()
				.getMarkupResourceStream(container, containerClass);
/d
			// Found markup?
			if (resourceStream != null)
			{
				resourceStream.setCacheKey(cacheKey);
my.test.own.RepeatingViewPage_en_US.html

				// load the markup and watch for changes
				markup = loadMarkupAndWatchForChanges(container, resourceStream, enforceReload);
/s
MarkupCache.loadMarkupAndWatchForChanges(MarkupContainer, MarkupResourceStream, boolean) line: 494	
		final String cacheKey = markupResourceStream.getCacheKey();
my.test.own.RepeatingViewPage_en_US.html
		if (cacheKey != null)
		{
			if (enforceReload == false)
			{
				// get the location String
				String locationString = markupResourceStream.locationAsString();
file:/home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28/webapps/wicket-testing/WEB-INF/classes/my/test/own/RepeatingViewPage.html
				Markup markup = markupCache.get(locationString);
null
			// Watch file in the future
			final IModificationWatcher watcher = application.getResourceSettings()
				.getResourceWatcher(true);
watcher	ModificationWatcher  (id=9227)	
	modifiableToEntry	ConcurrentHashMap<K,V>  (id=9230)	
{}
	task	Task  (id=9231)	
[name=ModificationWatcher, startTime=2016.03.07-8.51am, isDaemon=true, isStarted=true, codeListener=org.apache.logging.slf4j.Log4jLogger@130fc109]
			if (watcher != null)
			{
				watcher.add(markupResourceStream, new IChangeListener()

		return loadMarkup(container, markupResourceStream, enforceReload);
/s
MarkupCache.loadMarkup(MarkupContainer, MarkupResourceStream, boolean) line: 438	
		String cacheKey = markupResourceStream.getCacheKey();
my.test.own.RepeatingViewPage_en_US.html
		String locationString = markupResourceStream.locationAsString();
file:/home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28/webapps/wicket-testing/WEB-INF/classes/my/test/own/RepeatingViewPage.html
		Markup markup = MarkupFactory.get().loadMarkup(container, markupResourceStream,
			enforceReload);
/s
MarkupFactory.loadMarkup(MarkupContainer, MarkupResourceStream, boolean) line: 387	

		try
		{
			// The InheritedMarkupMarkupLoader needs to load the base markup. It'll do it via
			// MarkupFactory.getMarkup() as main entry point, which in turn allows to choose between
			// use or ignore the cache. That's why we need to propagate enforceReload to the markup
			// loader as well.

			// Markup loader is responsible to load the full markup for the container. In case of
			// markup inheritance, the markup must be merged from different markup files. It is the
			// merged markup which eventually will be cached, thus avoiding repetitive merge
			// operations, which always result in the same outcome.
			// The base markup will still be cached though, in order to avoid any unnecessary
			// reloads. The base markup itself might be merged as it might inherit from its base
			// class.

			return getMarkupLoader().loadMarkup(container, markupResourceStream, null,
				enforceReload);
/s
DefaultMarkupLoader.loadMarkup(MarkupContainer, MarkupResourceStream, IMarkupLoader, boolean) line: 51	
		IMarkupLoader loader = new InheritedMarkupMarkupLoader();
		return loader.loadMarkup(container, markupResourceStream, new SimpleMarkupLoader(),
			enforceReload);
/s
InheritedMarkupMarkupLoader.loadMarkup(MarkupContainer, MarkupResourceStream, IMarkupLoader, boolean) line: 57	
		// read and parse the markup
		Markup markup = baseLoader.loadMarkup(container, markupResourceStream, null, enforceReload);
/s
SimpleMarkupLoader.loadMarkup(MarkupContainer, MarkupResourceStream, IMarkupLoader, boolean) line: 51	
		return MarkupFactory.get().newMarkupParser(markupResourceStream).parse();
/s
MarkupFactory.newMarkupParser(MarkupResourceStream) line: 111	
		// Markup parsers can not be re-used
		return new MarkupParser(newXmlPullParser(), resource)
/s
MarkupFactory$1(AbstractMarkupParser).<init>(IXmlPullParser, MarkupResourceStream) line: 112	
		this.xmlParser = xmlParser;
		markupSettings = Application.get().getMarkupSettings();
this	MarkupFactory$1  (id=9285)	
	markupSettings	MarkupSettings  (id=8924)	
		automaticLinking	false	
		compressWhitespace	false	
		defaultMarkupEncoding	null	
		markupFactory	MarkupFactory  (id=8220)	
		markupIdGenerator	DefaultMarkupIdGenerator  (id=9296)	
		stripComments	false	
		stripWicketTags	false	
		throwExceptionOnMissingXmlDeclaration	false	

		markup = new Markup(resource);
this	MarkupFactory$1  (id=9285)	
	markup	Markup  (id=9312)	
		markupElements	ArrayList<E>  (id=9313)	
[]
		markupResourceStream	MarkupResourceStream  (id=9217)	
file:/home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28/webapps/wicket-testing/WEB-INF/classes/my/test/own/RepeatingViewPage.html

		// The root of all filters is the xml parser
		markupFilterChain = new RootMarkupFilter(xmlParser, resource);
this	MarkupFactory$1  (id=9285)	
	markupFilterChain	RootMarkupFilter  (id=9328)	
		markupResourceStream	MarkupResourceStream  (id=9217)	
file:/home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28/webapps/wicket-testing/WEB-INF/classes/my/test/own/RepeatingViewPage.html
		parser	XmlPullParser  (id=9284)	
		parent 	null

		// Initialize the markup filter chain
		filters = initializeMarkupFilters(markup);
/s
MarkupFactory$1(MarkupParser).initializeMarkupFilters(Markup) line: 145	
/=
	/**
	 * Initialize Wicket's MarkupParser with all necessary markup filters. You may subclass this
	 * method, to add your own filters to the list.
	 * 
	 * @param markup
	 * @return The list of markup filter
	 */
	@Override
	protected MarkupFilterList initializeMarkupFilters(final Markup markup)

		filters.add(new WicketTagIdentifier(markupResourceStream));
		filters.add(new HtmlHandler());
		filters.add(new WicketRemoveTagHandler(markupResourceStream));
		filters.add(new WicketLinkTagHandler(markupResourceStream));
		filters.add(new AutoLabelTagHandler(markupResourceStream));
		filters.add(new WicketNamespaceHandler(markupResourceStream));
		filters.add(new WicketMessageTagHandler(markupResourceStream));

/ Intermezzo

/ 1313
/**
 * This is a markup inline filter. It identifies xml tags which have a special meaning for Wicket.
 * There are two type of tags which have a special meaning for Wicket.
 * <p>
 * <ul>
 * <li>All tags with Wicket namespace, e.g. &lt;wicket:remove&gt;</li>
 * <li>All tags with an attribute like wicket:id="myLabel"</li>
 * </ul>
 * 
 * @author Juergen Donnerstag
 */
public final class WicketTagIdentifier extends AbstractMarkupFilter
{

/ 1313

/**
 * This is a markup inline filter. It identifies HTML specific issues which make HTML not 100% xml
 * compliant. E.g. tags like &lt;p&gt; often are missing the corresponding close tag.
 * 
 * @author Juergen Donnerstag
 */
public final class HtmlHandler extends AbstractMarkupFilter

/ 1313

/**
 * This is a markup inline filter. It identifies preview regions useful for HTML designers to design
 * the page. But they must be removed prior to sending the markup to the client. Preview regions are
 * enclosed by &lt;wicket:remove&gt; tags.
 * 
 * @author Juergen Donnerstag
 */
public final class WicketRemoveTagHandler extends AbstractMarkupFilter
{

/ 1313

/**
 * This is a markup inline filter. It identifies xml tags which include a href attribute and which
 * are not Wicket specific components and flags these tags (ComponentTag) as autolink enabled. A
 * component resolver will later resolve the href and assign a BookmarkablePageLink<?> to it
 * (automatically).
 * <p>
 * An application setting is used as default value, which might be modified for specific regions.
 * These regions are identified by &lt;wicket:link&gt; tags with an optional 'autolink' attribute.
 * The default value for the attribute is true, thus enabling autolinking. An open-close
 * &lt;wicket:link/&gt tag will change the autolink status until the end of the markup document or
 * the next &lt;wicket:link&gt; tag respectively. &lt;wicket:link&gt; regions may be nested.
 * 
 * @author Juergen Donnerstag
 */
public class WicketLinkTagHandler extends AbstractMarkupFilter implements IComponentResolver

/ 1313

/**
 * Markup filter that identifies tags with the {@code wicket:for} attribute. See
 * {@link AutoLabelResolver} for details.
 * 
 * @author igor
 */
public class AutoLabelTagHandler extends AbstractMarkupFilter

/ 1313

/**
 * This is a markup inline filter. It determines the Wicket namespace name from the markup. Examples
 * are xmlns:wicket or xmlns:wicket="http://wicket.apache.org/dtds.data/wicket-xhtml1.3-strict.dtd"
 * though every URI that starts with "http://wicket.apache.org" will work as well.
 * 
 * @see org.apache.wicket.markup.MarkupParser
 * @author Juergen Donnerstag
 */
public final class WicketNamespaceHandler extends AbstractMarkupFilter

/ 1313	.

/**
 * This is a markup inline filter and a component resolver. It identifies wicket:message attributes
 * and adds an attribute modifier to the component tag that can localize
 * wicket:message="attr-name:i18n-key,attr-name-2:i18n-key-2,..." expressions, replacing values of
 * attributes specified by attr-name with a localizer lookup with key i18n-key. If an attribute
 * being localized has a set value that value will be used as the default value for the localization
 * lookup. This handler also resolves and localizes raw markup with wicket:message attribute.
 * 
 * @author Juergen Donnerstag
 * @author Igor Vaynberg
 */
public final class WicketMessageTagHandler extends AbstractMarkupFilter

/ Einde Intermezzo

		// Provided the wicket component requesting the markup is known ...
		if ((markupResourceStream != null) && (markupResourceStream.getResource() != null))
		{
			final ContainerInfo containerInfo = markupResourceStream.getContainerInfo();
			if (containerInfo != null)
			{
				// Pages require additional handlers
				if (Page.class.isAssignableFrom(containerInfo.getContainerClass()))
/ JA
				{
					filters.add(new HtmlHeaderSectionHandler(markup));
				}

				filters.add(new HeadForceTagIdHandler(containerInfo.getContainerClass()));

/ Intermezzo

/ 1313	.

/**
 * This is a markup inline filter.
 * <p>
 * It assumes that {@link org.apache.wicket.markup.parser.filter.WicketTagIdentifier}
 * has been called first and search for a &lt;head&gt; tag (note: not wicket:head). Provided the markup contains a
 * &lt;body&gt; tag it will automatically prepend a &lt;head&gt; tag if missing.
 * </p>
 * <p>
 * Additionally this filter handles &lt;wicket:header-items/&gt;. If there is such tag then it is marked
 * as the one that should be used as {@link org.apache.wicket.markup.html.internal.HtmlHeaderContainer}, by
 * setting its id to {@value #HEADER_ID}.
 * </p>
 * <p>
 * Note: This handler is only relevant for Pages (see MarkupParser.newFilterChain())
 * 
 * @see org.apache.wicket.markup.MarkupParser
 * @see org.apache.wicket.markup.resolver.HtmlHeaderResolver
 * @author Juergen Donnerstag
 */
public final class HtmlHeaderSectionHandler extends AbstractMarkupFilter

/ 1313	.

/**
 * Handler that sets unique tag id for every inline script and style element in &lt;wicket:head&gt;,
 * unless the element already has one. <br/>
 * This is needed to be able to detect multiple ajax header contribution. Tags that are not inline
 * (stript with src attribute set and link with href attribute set) do not require id, because the
 * detection is done by comparing URLs.
 * <p>
 * Tags with wicket:id are <strong>not processed</strong>. To setOutputWicketId(true) on attached
 * component is developer's responsibility. FIXME: Really? And if so, document properly
 * 
 * @author Matej Knopp
 */
public class HeadForceTagIdHandler extends AbstractMarkupFilter


/ Einde Intermezzo

		filters.add(new OpenCloseTagExpander());
		filters.add(new RelativePathPrefixHandler(markupResourceStream));
		filters.add(new EnclosureHandler(markupResourceStream));
		filters.add(new InlineEnclosureHandler(markupResourceStream));

		// Append it. See WICKET-4390
		filters.add(new StyleAndScriptIdentifier(), StyleAndScriptIdentifier.class);
		filters.add(new ConditionalCommentFilter());
		filters.add(new WicketContainerTagHandler(markupResourceStream, Application.get().usesDevelopmentConfig()));

/ Intermezzo

/ 1313

/**
 * MarkupFilter that expands certain open-close tag as separate open and close tags. Firefox, unless
 * it gets text/xml mime type, treats these open-close tags as open tags which results in corrupted
 * DOM. This happens even with xhtml doctype.
 * 
 * In addition, some tags are required open-body-close for Wicket to work properly.
 * 
 * @author Juergen Donnerstag
 * @author Matej Knopp
 */
public class OpenCloseTagExpander extends AbstractMarkupFilter

/ 1313	.

/**
 * The purpose of this filter is to make all "href", "src" and "background" attributes found in the
 * markup which contain a relative URL like "myDir/myPage.gif" actually resolve in the output HTML,
 * by prefixing them with with an appropriate path to make the link work properly, even if the
 * current page is being displayed at a mounted URL or whatever. It is applied to all non wicket
 * component tags, except for auto-linked tags.
 * 
 * It achieves this by being both an IMarkupFilter and IComponentResolver, and works similarly to
 * the &lt;wicket:message&gt; code. For each tag, we look to see if the path in "href", "src" and
 * "background" attributes is relative. If it is, we assume it's relative to the context path and we
 * should prefix it appropriately so that it resolves correctly for the current request, even if
 * that's for something that's not at the context root. This is done for ServletWebRequests by
 * prepending with "../" tokens, for example.
 * 
 * 
 * @author Al Maw
 */
public final class RelativePathPrefixHandler extends AbstractMarkupFilter

/ 1313	.

/**
 * This is a markup inline filter. It identifies &lt;wicket:enclosure&gt; tags. If the 'child'
 * attribute is empty it determines the wicket:id of the child component automatically by analyzing
 * the wicket component (in this case on one wicket component is allowed) in between the open and
 * close tags. If the enclosure tag has a 'child' attribute like
 * <code>&lt;wicket:enclosure child="xxx"&gt;</code> than more than just one wicket component inside
 * the enclosure tags are allowed and the child component which determines the visibility of the
 * enclosure is identified by the 'child' attribute value which must be equal to the relative child
 * id path.
 * 
 * @see Enclosure
 * 
 * @author Juergen Donnerstag
 */
public final class EnclosureHandler extends AbstractMarkupFilter implements IComponentResolver
{

/ 1313	.

/**
 * This is a markup inline filter. It identifies enclosures as attribute, for example: &lt;tr
 * wicket:enclosure=""&gt;. The &lt;tr&gt; tag used in the example can be replaced with any html tag
 * that can contain child elements. If the 'child' attribute is empty it determines the wicket:id of
 * the child component automatically by analyzing the wicket component (in this case one wicket
 * component is allowed) in between the open and close tags. If the enclosure tag has a 'child'
 * attribute like <code>&lt;tr
 * wicket:enclosure="controllingChildId"&gt;</code> than more than just one wicket component inside
 * the enclosure tags are allowed and the child component which determines the visibility of the
 * enclosure is identified by the 'child' attribute value which must be equal to the relative child
 * id path.
 * 
 * @see InlineEnclosure
 * 
 * @author Joonas Hamalainen
 * @author Juergen Donnerstag
 */
public final class InlineEnclosureHandler extends AbstractMarkupFilter

/ 1313	.

/**
 * An IMarkupFilter that wraps the body of all &lt;style&gt; elements and &lt;script&gt;
 * elements which are plain JavaScript in CDATA blocks. This allows the user application
 * to use unescaped XML characters without caring that those may break Wicket's XML Ajax
 * response.
 * 
 * @author Juergen Donnerstag
 */
public final class StyleAndScriptIdentifier extends AbstractMarkupFilter

/ 1313	,

**
 * Skip duplicated mismatched markup inside conditional comments
 * 
 * @author Pedro Santos
 * @author Juergen Donnerstag
 * @deprecated This class is removed in Wicket 8.0. It did nothing since a long time
 */
@Deprecated
public class ConditionalCommentFilter extends AbstractMarkupFilter

/ 1313	.

/**
 * This markup filter warns if a wicket:container tag has an attribute besides wicket:id. This is
 * most likely a programmer mistake because the wicket:container tag won't be available in
 * deployment mode.
 *
 * The filter is only active in development mode and does nothing in deployment mode.
 *
 * @since 6.0
 */
public class WicketContainerTagHandler extends AbstractMarkupFilter

/t
SimpleMarkupLoader.loadMarkup(MarkupContainer, MarkupResourceStream, IMarkupLoader, boolean) line: 51	
		return MarkupFactory.get().newMarkupParser(markupResourceStream).parse();
/pd
/s
MarkupFactory$1(AbstractMarkupParser).parse() line: 169	

		// The root of all markup filters is the xml parser
		markupFilterChain = new RootMarkupFilter(xmlParser, markup.getMarkupResourceStream());

this	MarkupFactory$1  (id=8275)	
	markupFilterChain	RootMarkupFilter  (id=8319)	
		markupResourceStream	MarkupResourceStream  (id=8257)	
		parent	null	
		parser	XmlPullParser  (id=8314)	

		// Convert the list of markup filters into a chain
		for (IMarkupFilter filter : getMarkupFilters())
		{
			filter.setNextFilter(markupFilterChain);
			markupFilterChain = filter;

/ ze staan in een rijtje	,

this	MarkupFactory$1  (id=8275)	
	filters	MarkupParser$MarkupFilterList  (id=8285)	
	markup	Markup  (id=8276)	
		markupElements	ArrayList<E>  (id=8351)	
		markupResourceStream	MarkupResourceStream  (id=8257)	
			baseMarkup	null	
			cacheKey	"my.test.own.RepeatingViewPage_en_US.html" (id=8265)	
			containerInfo	ContainerInfo  (id=8290)	
			doctype	null	
			encoding	null	
			markupClassName	"my.test.own.RepeatingViewPage" (id=8352)	
			resourceStream	UrlResourceStream  (id=8353)	
				lastModified	Time  (id=8359)	
				locale	null	
				streamData	null	
				style	null	
				url	URL  (id=8363)	
				variation	null	
			wicketId	"wicket:id" (id=8356)	
			wicketNamespace	"wicket" (id=8357)	
	markupFilterChain	StyleAndScriptIdentifier  (id=8303)	
	markupSettings	MarkupSettings  (id=8320)	
	this$0	MarkupFactory  (id=8250)	
	xmlParser	XmlPullParser  (id=8314)	

/ Al heet hij this.markup.markupResourceStream	, we zien alleen nog een URL	,

		// Initialize the xml parser
		MarkupResourceStream markupResourceStream = markup.getMarkupResourceStream();
		xmlParser.parse(markupResourceStream.getResource().getInputStream(),
			markupSettings.getDefaultMarkupEncoding());
/s
UrlResourceStream.getInputStream() line: 178	
		try
		{
			StreamData data = getData(true);
/s
UrlResourceStream.getData(boolean) line: 119	
		if (streamData == null && initialize)
		{
			streamData = new StreamData();

this	UrlResourceStream  (id=8353)	
	streamData	UrlResourceStream$StreamData  (id=9063)	
		connection	null	
		contentLength	0	
		contentType	null	
		inputStreams	null	

			try
			{
				streamData.connection = url.openConnection();
connection	FileURLConnection  (id=9069)	

				streamData.contentLength = streamData.connection.getContentLength();
90
				if (Application.exists())
				{
					streamData.contentType = Application.get().getMimeType(url.getFile());
contentType	"text/html" (id=9089)	

/t
UrlResourceStream.getInputStream() line: 179	
			StreamData data = getData(true);
/d
			InputStream is = data.connection.getInputStream();
is	BufferedInputStream  (id=9093)	

			if (data.inputStreams == null) {
				data.inputStreams = new ArrayList<>();
			}
			data.inputStreams.add(is);
/t
MarkupFactory$1(AbstractMarkupParser).parse() line: 180	
		xmlParser.parse(markupResourceStream.getResource().getInputStream(),
			markupSettings.getDefaultMarkupEncoding());
/pd
/s
XmlPullParser.parse(InputStream, String) line: 601	
			XmlReader xmlReader = new XmlReader(new BufferedInputStream(inputStream, 4000),
				encoding);

xmlReader	XmlReader  (id=9100)	
	encoding	null	
	inputStream	BOMInputStream  (id=9101)	
	lock	XmlReader  (id=9100)	
	reader	InputStreamReader  (id=9104)	
	skipBuffer	null	

			this.input = new FullyBufferedReader(xmlReader);
			this.encoding = xmlReader.getEncoding();

/t
MarkupFactory$1(AbstractMarkupParser).parse() line: 185	
		xmlParser.parse(markupResourceStream.getResource().getInputStream(),
			markupSettings.getDefaultMarkupEncoding());
/d

		// parse the xml markup and tokenize it into wicket relevant markup
		// elements
		parseMarkup();
/s
MarkupFactory$1(AbstractMarkupParser).parseMarkup() line: 228	

/ Intermezzo

/ WH werkt deze zo:
<!doctype html>
<html>
<head>
/ <head> heeft een id="_header_"	, dan wat ervoor staat is 1 elem in de markup, en <head>	, dus	,
[ <!doctype html>
<html>	,
<head>
]
/ Einde Intermezzo

this	MarkupFactory$1  (id=8275)	
	filters	MarkupParser$MarkupFilterList  (id=8285)	
	markup	Markup  (id=8276)	
	markupFilterChain	StyleAndScriptIdentifier  (id=8303)	
	markupSettings	MarkupSettings  (id=8320)	
	this$0	MarkupFactory  (id=8250)	
	xmlParser	XmlPullParser  (id=8314)	

			while (null != (elem = getNextTag()))
/=
		return markupFilterChain.nextElement();
/ TODO

elem	HtmlSpecialTag  (id=9138)	
SPECIAL_TAG: '<!doctype html>'

				if (elem instanceof HtmlSpecialTag)
				{
					elem = new ComponentTag(((HtmlSpecialTag)elem).getXmlTag());

elem	ComponentTag  (id=9141)	
<!doctype html>

				if (elem instanceof ComponentTag)
				{
					ComponentTag tag = (ComponentTag)elem;
					boolean add = (tag.getId() != null);
false
					// always remember the latest index (size)
					size = markup.size();
0

/ volgende	,
			// Loop through tags
			MarkupElement elem;
			while (null != (elem = getNextTag()))

elem	ComponentTag  (id=9144)	
<html>

				if (elem instanceof ComponentTag)
				{
					ComponentTag tag = (ComponentTag)elem;

					boolean add = (tag.getId() != null);
false
					// always remember the latest index (size)
					size = markup.size();
0

/ volgende,	
			// Loop through tags
			MarkupElement elem;
			while (null != (elem = getNextTag()))

elem	ComponentTag  (id=9153)	
<head>

				if (elem instanceof ComponentTag)
				{
					ComponentTag tag = (ComponentTag)elem;

					boolean add = (tag.getId() != null);
true
id	"_header_" (id=9160)	
/ TODO

					// Add tag to list?
					if (add || tag.isModified() || (markup.size() != size))
/ JA
						// Add text from last position to the current tag position
						CharSequence text = xmlParser.getInputFromPositionMarker(tag.getPos());
<!doctype html>
<html>

this	MarkupFactory$1  (id=8275)	
	markup	Markup  (id=8276)	
		markupElements	ArrayList<E>  (id=8351)	
[]
		markupResourceStream	MarkupResourceStream  (id=8257)	


							// Make sure you add it at the correct location.
							// IMarkupFilters might have added elements as well.
							markup.addMarkupElement(size, new RawMarkup(text));

this	MarkupFactory$1  (id=8275)	
	markup	Markup  (id=8276)	
		markupElements	ArrayList<E>  (id=8351)	
[<!doctype html>
<html>
]
		markupResourceStream	MarkupResourceStream  (id=8257)	

						xmlParser.setPositionMarker();
						if (add)
						{
							// Add to the markup unless the tag has been flagged as
							// to be removed from the markup. (e.g. <wicket:remove>
							if (tag.isIgnore() == false)
							{
								markup.addMarkupElement(tag);

this	MarkupFactory$1  (id=8275)	
	markup	Markup  (id=8276)	
		markupElements	ArrayList<E>  (id=8351)	
[<!doctype html>
<html>
, <head>]
		markupResourceStream	MarkupResourceStream  (id=8257)	

					// always remember the latest index (size)
					size = markup.size();
2

/ volgend	,
			// Loop through tags
			MarkupElement elem;
			while (null != (elem = getNextTag()))

elem	ComponentTag  (id=9197)	
</head>

				if (elem instanceof ComponentTag)
				{
					ComponentTag tag = (ComponentTag)elem;

					boolean add = (tag.getId() != null);
false
					if (!add && tag.isClose())
					{
						add = ((tag.getOpenTag() != null) && (tag.getOpenTag().getId() != null));
true
					// Add tag to list?
					if (add || tag.isModified() || (markup.size() != size))
						// Add text from last position to the current tag position
						CharSequence text = xmlParser.getInputFromPositionMarker(tag.getPos());
"\n"
						if (text.length() > 0)
						{
							text = handleRawText(text.toString());

							// Make sure you add it at the correct location.
							// IMarkupFilters might have added elements as well.
							markup.addMarkupElement(size, new RawMarkup(text));

this	MarkupFactory$1  (id=8275)	
	markup	Markup  (id=8276)	
		markupElements	ArrayList<E>  (id=8351)	
			elementData	Object[10]  (id=9214)	
				[0]	RawMarkup  (id=9216)	
				[1]	ComponentTag  (id=9153)	
				[2]	RawMarkup  (id=9217)	
/=
[<!doctype html>
<html>
, <head>, 
]
						xmlParser.setPositionMarker();

						if (add)
						{
							// Add to the markup unless the tag has been flagged as
							// to be removed from the markup. (e.g. <wicket:remove>
							if (tag.isIgnore() == false)
							{
								markup.addMarkupElement(tag);

markupElements	ArrayList<E>  (id=8351)	
	elementData	Object[10]  (id=9214)	
		[0]	RawMarkup  (id=9216)	
		[1]	ComponentTag  (id=9153)	
		[2]	RawMarkup  (id=9217)	
		[3]	ComponentTag  (id=9197)	
/=
[<!doctype html>
<html>
, <head>, 
, </head>]

					// always remember the latest index (size)
					size = markup.size();
4

/ volgende	,
			// Loop through tags
			MarkupElement elem;
			while (null != (elem = getNextTag()))
elem	ComponentTag  (id=9318)	
<body>
				if (elem instanceof ComponentTag)
				{
					ComponentTag tag = (ComponentTag)elem;

					boolean add = (tag.getId() != null);
false
					// always remember the latest index (size)
					size = markup.size();
4

/ volgende	,

			// Loop through tags
			MarkupElement elem;
			while (null != (elem = getNextTag()))
elem	ComponentTag  (id=9325)	
<div wicket:id="list">

				if (elem instanceof ComponentTag)
				{
					boolean add = (tag.getId() != null);
true
					if (add || tag.isModified() || (markup.size() != size))
					{
						// Add text from last position to the current tag position
						CharSequence text = xmlParser.getInputFromPositionMarker(tag.getPos());
text	"\n<body>\n\t" (id=9333)	
						if (text.length() > 0)
						{
							text = handleRawText(text.toString());


							// Make sure you add it at the correct location.
							// IMarkupFilters might have added elements as well.
							markup.addMarkupElement(size, new RawMarkup(text));
						}

						xmlParser.setPositionMarker();

						if (add)
						{
							// Add to the markup unless the tag has been flagged as
							// to be removed from the markup. (e.g. <wicket:remove>
							if (tag.isIgnore() == false)
							{
								markup.addMarkupElement(tag);

this	MarkupFactory$1  (id=8275)	
	filters	MarkupParser$MarkupFilterList  (id=8285)	
	markup	Markup  (id=8276)	
		markupElements	ArrayList<E>  (id=8351)	
			elementData	Object[10]  (id=9214)	
				[0]	RawMarkup  (id=9216)	
				[1]	ComponentTag  (id=9153)	
				[2]	RawMarkup  (id=9217)	
				[3]	ComponentTag  (id=9197)	
				[4]	RawMarkup  (id=9342)	
string	"\n<body>\n\t" (id=9333)	
				[5]	ComponentTag  (id=9325)	
			size	6	

					size = markup.size();
6

/ volgende,	
			// Loop through tags
			MarkupElement elem;
			while (null != (elem = getNextTag()))
elem	ComponentTag  (id=9363)	
</div>
				if (elem instanceof ComponentTag)
				{
					boolean add = (tag.getId() != null);
false
					if (!add && tag.isClose())
/ JA
					{
						add = ((tag.getOpenTag() != null) && (tag.getOpenTag().getId() != null));
true
					if (add || tag.isModified() || (markup.size() != size))
					{
						// Add text from last position to the current tag position
						CharSequence text = xmlParser.getInputFromPositionMarker(tag.getPos());
						if (text.length() > 0)
/ NEE

						xmlParser.setPositionMarker();

						if (add)
						{
							// Add to the markup unless the tag has been flagged as
							// to be removed from the markup. (e.g. <wicket:remove>
							if (tag.isIgnore() == false)
							{
								markup.addMarkupElement(tag);

/ volgende	,
			// Loop through tags
			MarkupElement elem;
			while (null != (elem = getNextTag()))
elem	ComponentTag  (id=9380)	
</body>
				if (elem instanceof ComponentTag)
				{
					ComponentTag tag = (ComponentTag)elem;

					boolean add = (tag.getId() != null);
false
					if (!add && tag.isClose())
					{
						add = ((tag.getOpenTag() != null) && (tag.getOpenTag().getId() != null));
false
/ </body> sluit geen wicket:id tag af	, de </div> van zojuist wel	,

/ MORGENOCHTEND	,
Daemon Thread [http-nio-9090-exec-1] (Suspended)	
	owns: NioChannel  (id=8228)	
	MarkupFactory$1(AbstractMarkupParser).parseMarkup() line: 285	
	MarkupFactory$1(AbstractMarkupParser).parse() line: 185	
	SimpleMarkupLoader.loadMarkup(MarkupContainer, MarkupResourceStream, IMarkupLoader, boolean) line: 51	
	InheritedMarkupMarkupLoader.loadMarkup(MarkupContainer, MarkupResourceStream, IMarkupLoader, boolean) line: 57	
	DefaultMarkupLoader.loadMarkup(MarkupContainer, MarkupResourceStream, IMarkupLoader, boolean) line: 52	
	MarkupFactory.loadMarkup(MarkupContainer, MarkupResourceStream, boolean) line: 412	
	MarkupCache.loadMarkup(MarkupContainer, MarkupResourceStream, boolean) line: 447	
	MarkupCache.loadMarkupAndWatchForChanges(MarkupContainer, MarkupResourceStream, boolean) line: 543	
	MarkupCache.getMarkup(MarkupContainer, Class<?>, boolean) line: 304	
	MarkupFactory.getMarkup(MarkupContainer, Class<?>, boolean) line: 236	
	MarkupFactory.getMarkup(MarkupContainer, boolean) line: 194	
	RepeatingViewPage(MarkupContainer).getAssociatedMarkup() line: 456	
	RepeatingViewPage(MarkupContainer).getRegionMarkup() line: 2224	
	RepeatingViewPage(MarkupContainer).newDequeueContext() line: 2211	
	RepeatingViewPage(MarkupContainer).dequeueAutoComponents() line: 1670	
	RepeatingViewPage(MarkupContainer).onInitialize() line: 1664	
	RepeatingViewPage(Page).onInitialize() line: 299	
	RepeatingViewPage(Component).fireInitialize() line: 877	
	RepeatingViewPage(MarkupContainer).internalInitialize() line: 1084	
	RepeatingViewPage(Page).isPageStateless() line: 465	
	WebPageRenderer.isPageStateless() line: 287	
	WebPageRenderer.shouldRenderPageAndWriteResponse(RequestCycle, Url, Url) line: 329	
	WebPageRenderer.respond(RequestCycle) line: 193	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	


/ Einde WICKET 7 MARKUP

/ WICKET 7 REPEATING VIEWs

/ 7	. 

$ vi RepeatingViewPage.html

	<div wicket:id="repeatingView"></div>

$ vi RepeatingViewPage.java

		final RepeatingView repeatingView=new RepeatingView("repeatingView");
		add(repeatingView);
		
		final Label label=new Label("7","blue");
		label.setOutputMarkupId(true);
		repeatingView.add(label);
		
		final Label label2=new Label("13","green");
		label2.setOutputMarkupId(true);
		repeatingView.add(label2);

/ we zien	,
	<div wicket:id="repeatingView" id="id71" wicketpath="repeatingView_7">blue</div>		/ (*)
	<div wicket:id="repeatingView" id="id132" wicketpath="repeatingView_13">green</div>		/ (*)

/////////////////////////////
/ (*) We zien in het tpl dat de Labels geen tpl hebben . Klopt: de Labels krijgen hun tpl van hun parent, de RepeatingView	,

/ 7	. 

$ vi ListViewPage.html

<ul wicket:id="listView">
	<li wicket:id="label"></li>
</ul>

$ vi ListViewPage.java

		List<Person>list=Arrays.asList(new Person("Foo","Bar"),new Person("Gee","Hee"));
		IModel<List<Person>>model=new PropertyModel<List<Person>>(this, "list");
		ListView<Person>listView=new ListView<Person>("listView",list) {
			@Override	
			protected void populateItem(ListItem<Person> item) {
//				item.setOutputMarkupId(true);
				Label label=new Label("label", new PropertyModel<String>(item.getDefaultModel(),"full"));
				item.add(label);
				label.setOutputMarkupId(true);
				
			}
		};		
		add(listView);
		listView.setOutputMarkupId(true); 	// geen effect	,

	private class Person{
		private String first;
		private String last;
		private String full;
		public Person(String first,String last){
			this.first=first;
			this.last=last;
			this.full=first+" "+last;
		}
	}

/ we zien	,

<ul wicket:id="listView" wicketpath="listView_0">									/ (**) 
	<li wicket:id="label" id="label1" wicketpath="listView_0_label">Foo Bar</li>
</ul><ul wicket:id="listView" wicketpath="listView_1">								/ (**)	
	<li wicket:id="label" id="label2" wicketpath="listView_1_label">Gee Hee</li>
</ul>

//////////////////////////////
/ (**) We zien in het tpl dat de ListItems geen tpl hebben: ze komen niet voor in ListViewPage.html. Klopt: de ListItems krijgen hun tpl van hun parent , de ListView	. De children van de ListItem hebben wel hun eigen tpl, hun wicket:id kan hetzelfde zijn	, want ze zitten elk in een eigen parent, een ListItem	,
/ ListView is bedoeld voor complexe kleinkinderen, hier alleen een Label	, 
/ we zien dat de ListItems hier hetzelfde is als de Labels in de RepeatingView hierboven: beide  krijgen hun tpl's van hun parent	.
/ we zien inderdaad dat de <ul/> geen id attr heeft: en hadden item.setOutputMarkupId NIET set	,

/ Krijgt de ListItems ook hun model van hun parent	?
				Label label=new Label("listItem", new PropertyModel<String>(item.getDefaultModel(),"full"));
/ TODO

/ 7	. 

/ reuse tiems	,

$ vi ListView.java

    protected final void onPopulate()
    {
        // Get number of items to be displayed
        final int size = getViewSize();
        if (size > 0)
        {
            if (getReuseItems())
/ NEE
            }
            else
            {
                // Automatically rebuild all ListItems before rendering the
                // list view
                removeAll();
...

/ Bij debug zien we dat reuseItems=false default	, 
/ Hij gaat opnieuw de ListItems create	, (die hun view van de parent ListView krijgen)	, en hun model zo ongeveer ook, het enigste verschil is dat de model van de ListItem een index in die van de ListView heeft	, 0 of 1 bij ons	, dat is Person 0 of 1	,

/ 7	. 

/ refreshingview	,

/ Deze werkt met models	. Deze view is dus voor dynamically changing data	,

/ We maken	,
RefreshingViewPage
RefreshingView2Page
RefreshingView3Page
RepaintPage	,
/ Als data verandert	, waarom view niet	?

/ 7	. 

/ Geef in google	,
wicket dynamically model refresh repaint
/ Lees	,
http://blog.xebia.com/wicket-updating-listviews-using-an-ajaxlink/
https://cwiki.apache.org/confluence/display/WICKET/How+to+repaint+a+ListView+via+Ajax

/ 7	. 

/ Lees	Clock.java	, 
/ we zien AbstractReadableModel	, 
/ WH moeten we een model op de propertymodel set	, TODO
/ we zien dat ComponentPropertyModel implements AbstractReadableModel	, 

/ Geef	,
http://localhost:9090/wicket-examples-step-by-step/ajax/clock?1


/ Einde WICKET 7 REPEATING VIEWs


/ DEBUG WICKET 7 LISTVIEW

/ 7	. 

$ vi ListViewPage.java

public class ListViewPage extends WebPage {
	
	public ListViewPage() {
		List<Person>list=Arrays.asList(new Person("Foo","Bar"),new Person("Gee","Hee"));
		ListView<Person>listView=new ListView<Person>("listView",list) {
			@Override	
			protected void populateItem(ListItem<Person> item) {
				Label label=new Label("listItem", new PropertyModel<String>(item.getDefaultModel(),"full"));
				item.add(label);
				
			}
		};		
		add(listView);
	}

	private class Person{
		private String first;
		private String last;
		private String full;
		public Person(String first,String last){
			this.first=first;
			this.last=last;
			this.full=first+" "+last;
		}
	}
}

/ de ListView krijgt een ListModel	,
/ TODO

$ vi ListViewPage.html

<ul wicket:id="listView">
	<li wicket:id="listItem"></li>
</ul>


/ ListViewPage heeft geen model, 
/ ListviewPage heeft children, 2, de ListView en de HtmlHeaderContainer	, 
/ ListView heeft geen children	,
/ ListView heeft een model, een ListModel	, het obj is een array	,

this	ListViewPage$1  (id=10432)		 					/ ListView
	children	null	
	data	ListModel<T>  (id=10437)	
		object	Arrays$ArrayList<E>  (id=10439)	
			a	ListViewPage$Person[2]  (id=10440)	
				[0]	ListViewPage$Person  (id=10443)	
				[1]	ListViewPage$Person  (id=10444)	
	parent	ListViewPage  (id=10428)						/ ListViewPage	
		children	ArrayList<E>  (id=10434)	
			elementData	Object[12]  (id=10435)	
				[0]	ListViewPage$1  (id=10432)	
				[1]	HtmlHeaderContainer  (id=10436)	
			modCount	2	
			size	2	
		data	null	

/s
ListViewPage.<init>() line: 18	
		ListView<Person>listView=new ListView<Person>("listView",list) {
/s
ListViewPage$1(ListView<T>).<init>(String, List<T>) line: 161	
		this(id, Model.ofList(list));
/s
Model<T>.ofList(List<C>) line: 83	
		return new ListModel<>(list);
/s
ListModel<T>.<init>(List<T>) line: 47	
		setObject(list);
/s
ListModel<T>(GenericBaseModel<T>).setObject(T) line: 60	
		this.object = object;

/c
/s
     at my.test.own.ListViewPage$1.populateItem(ListViewPage.java:22)
     at org.apache.wicket.markup.html.list.ListView.onPopulate(ListView.java:523)
     at org.apache.wicket.markup.repeater.AbstractRepeater.onBeforeRender(AbstractRepeater.java:124)
     at org.apache.wicket.Component.internalBeforeRender(Component.java:949)
     at org.apache.wicket.Component.beforeRender(Component.java:1017)
     at org.apache.wicket.MarkupContainer.onBeforeRenderChildren(MarkupContainer.java:1866)
     at org.apache.wicket.Component.onBeforeRender(Component.java:3877)
     at org.apache.wicket.Page.onBeforeRender(Page.java:801)
     at org.apache.wicket.Component.internalBeforeRender(Component.java:949)
     at org.apache.wicket.Component.beforeRender(Component.java:1017)
     at org.apache.wicket.Component.internalPrepareForRender(Component.java:2215)
     at org.apache.wicket.Page.internalPrepareForRender(Page.java:242)
     at org.apache.wicket.Component.render(Component.java:2304)
     at org.apache.wicket.Page.renderPage(Page.java:1018)
     at org.apache.wicket.request.handler.render.WebPageRenderer.renderPage(WebPageRenderer.java:124)
     at org.apache.wicket.request.handler.render.WebPageRenderer.respond(WebPageRenderer.java:236)
     at org.apache.wicket.core.request.handler.RenderPageRequestHandler.respond(RenderPageRequestHandler.java:175)
     at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:895)
     at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:64)
     at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:265)
     at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:222)
     at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:293)
     at org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(WicketFilter.java:261)
     at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:203)
     at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:284)

/s
ListViewPage$1(ListView<T>).onPopulate() line: 475	

			boolean hasChildren = size() != 0;
false
			// Loop through the markup in this container for each item
			for (int i = 0; i < size; i++)
			{
				// Get index
				final int index = firstIndex + i;
0

				ListItem<T> item = null;
				if (hasChildren)
/ NEE
				{
					// If this component does not already exist, populate it
					item = (ListItem<T>)get(Integer.toString(index));
				}
				if (item == null)
/ JA
				{
					// Create item for index
					item = newItem(index, getListItemModel(getModel(), index));
/s
ListViewPage$1(ListView<T>).getModel() line: 622	
		return (IModel<? extends List<T>>)getDefaultModel();
model	ListModel<T>  (id=8277)	
	object	Arrays$ArrayList<E>  (id=8278)	
		a	ListViewPage$Person[2]  (id=8305)	
			[0]	ListViewPage$Person  (id=8356)	
			[1]	ListViewPage$Person  (id=8357)	
/t
ListViewPage$1(ListView<T>).onPopulate() line: 516	
					item = newItem(index, getListItemModel(getModel(), index));
/pd
/s
ListViewPage$1(ListView<T>).getListItemModel(IModel<List<T>>, int) line: 448	
		return new ListItemModel<>(this, index);
/s
	public ListItemModel(final ListView<T> listView, final int index)
	{
		this.listView = listView;
		this.index = index;
/t
ListViewPage$1(ListView<T>).onPopulate() line: 516	
					item = newItem(index, getListItemModel(getModel(), index));
/pd
/s
ListViewPage$1(ListView<T>).newItem(int, IModel<T>) line: 461	
/=
	protected ListItem<T> newItem(final int index, IModel<T> itemModel)
		return new ListItem<>(index, itemModel);
/s
ListItem<T>(LoopItem).<init>(int, IModel<?>) line: 57	
		super(index, model);
		this.index = index;

this	ListItem<T>  (id=8416)	
	children	null	
	data	ListItemModel<T>  (id=8413)	
		index	0	
		listView	ListViewPage$1  (id=8283)	
			children	null	
			data	ListModel<T>  (id=8277)	
				object	Arrays$ArrayList<E>  (id=8278)	

/t
ListViewPage$1(ListView<T>).onPopulate() line: 519	
					// Create item for index
					item = newItem(index, getListItemModel(getModel(), index));
/d
					// Add list item
					add(item);
/ add aan ListView	,
/ Nu heeft item markup	, weer via dequeue	, en een child	,
this	ListViewPage$1  (id=8283)					/ de listView	,	
	children	ListItem<T>  (id=8416)	
		children	null							/ de listitem heeft nog geen children	, er is nog niet aan .add	,
		data	ListItemModel<T>  (id=8413)	
			index	0	
			listView	ListViewPage$1  (id=8283)	
		id	"0" (id=8421)	
		markup	MarkupFragment  (id=8666)	
			markup	Markup  (id=8333)	
			size	6	
			startIndex	5	
	data	ListModel<T>  (id=8277)	
		object	Arrays$ArrayList<E>  (id=8278)	
			a	ListViewPage$Person[2]  (id=8305)	
			modCount	0	

///////////
/ verschil children, model	, 
/ de listview heeft een model, met daarin 2 persons	, zijn children, labels, maken gebruik van deze data	,
///////////

					// Populate the list item
					onBeginPopulateItem(item);
/ NIETS
					populateItem(item);
/s
ListViewPage$1.populateItem(ListItem<Person>) line: 21	
				Label label=new Label("full", new PropertyModel<String>(item.getDefaultModelObject(),"full"));
/s
PropertyModel<T>.<init>(Object, String) line: 102	
/=
	public PropertyModel(final Object modelObject, final String expression)
modelObject	ListItemModel<T>  (id=8413)	
	index	0	
	listView	ListViewPage$1  (id=8283)	
expression	"full" (id=8705)	

		super(modelObject);
		this.expression = expression;

this	PropertyModel<T>  (id=8704)	
	expression	"full" (id=8705)	
	target	ListItemModel<T>  (id=8413)	

/t
ListViewPage$1.populateItem(ListItem<Person>) line: 22	
				Label label=new Label("listItem", new PropertyModel<String>(item.getDefaultModel(),"full"));
/d
				item.add(label);

/t
ListViewPage$1(ListView<T>).onPopulate() line: 505	
					populateItem(item);
/d

/ volgende	,
			for (int i = 0; i < size; i++)
size=2
					// Create item for index
					item = newItem(index, getListItemModel(getModel(), index));

this	ListViewPage$1  (id=8283)	 /= ListView
item	ListItem<T>  (id=8734)	
	children	null	
	data	ListItemModel<T>  (id=8732)	
		index	1	
		listView	ListViewPage$1  (id=8283)	
	id	"1" (id=8735)	

					add(item);

this	ListViewPage$1  (id=8283)	
	children	ArrayList<E>  (id=8741)	
		elementData	Object[12]  (id=8742)	
			[0]	ListItem<T>  (id=8416)	
				children	Label  (id=8728)	
					data	PropertyModel<T>  (id=8704)	
						expression	"full" (id=8705)	
						target	ListItemModel<T>  (id=8413)	
					id	"listItem" (id=8729)	
				data	ListItemModel<T>  (id=8413)	
					index	0									<-
					listView	ListViewPage$1  (id=8283)	
				id	"0" (id=8421)	
			[1]	ListItem<T>  (id=8734)	
				children	null							/ moet nog	, straks Label, id="listItem" ook	,
				data	ListItemModel<T>  (id=8732)	
					index	1									<-	
					listView	ListViewPage$1  (id=8283)	
				id	"1" (id=8735)	
		size	2	
	data	ListModel<T>  (id=8277)	
		object	Arrays$ArrayList<E>  (id=8278)	
			a	ListViewPage$Person[2]  (id=8305)	
			modCount	0	

/ de ListView heeft model=2 persons
/ de ListItem heeft model=index , 0,1, ...
/ de Label heeft model=property model TODO

/ SAMENVATTING

/ ListView heeft al een model	, nu children add	,

/////////////////////
/ Als een ListView, ListItem, Label, ... wordt create	, heeft hij altijd een model	, 
/ Later worden children add	, 
/ Children 

ListViewPage$1(ListView<T>).onPopulate() line: 502	

		final int size = getViewSize();
2
			else
			{
				// Automatically rebuild all ListItems before rendering the
				// list view
				removeAll();
/ rm all children (ListItem's) van ListView	,

		if (size > 0)
		{
			// Loop through the markup in this container for each item
			for (int i = 0; i < size; i++)
			{
				// Get index
				final int index = firstIndex + i;

				ListItem<T> item = null;
				if (item == null)
				{
					// Create item for index
					item = newItem(index, getListItemModel(getModel(), index));
/ item heeft model, geen children	,

					// Add list item
					add(item);
/ listview krijgt child	,

					populateItem(item);
/ item krijgt children 	, 1 Label bij ons	,  
/ dit Label heeft een model, Labels hebben geen children	,
				}
			}
		}

/ Einde SAMENVATTING

/t
ListViewPage$1(AbstractRepeater).onBeforeRender() line: 126	
		onPopulate();

/ Bij repeaters gebeurt er dus echt iets in onBeforeRender	,

/c

/ BREAKPOINTS
--rm Component.getMarkup	

/s
/ stack trace	,

	ListViewPage$1(AbstractRepeater).onRender() line: 95	

	ListViewPage$1(Component).internalRender() line: 2380	
		IMarkupFragment markup = getMarkup();
<ul wicket:id="listView">
	<li wicket:id="label"></li>
</ul>
///////////////////////////////////////////////////////
/ ListView heeft zijn eigen markup	,
/ die hij zal geven aan zijn children	, de ListItems	, we kunnen hier dus ook de markup van iedere ListItem zien	,
/ de Labels hebben ook hun eigen markup	, zoals we zien	,

				onRender();

	ListViewPage$1(Component).render() line: 2308	
	ListViewPage(MarkupContainer).renderNext(MarkupStream) line: 1524	
	ListViewPage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	ListViewPage(Page).onRender() line: 879	
	ListViewPage(WebPage).onRender() line: 141	
	ListViewPage(Component).internalRender() line: 2380	
	ListViewPage(Component).render() line: 2308	
	ListViewPage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ we zien dus rijtje	,
Component.render, Component.internalRender, Page/AbstractRepeater.onRender, 
/ Dus de .onRender is component specifiek	,
/ Page.onRender calls Page.renderAll	,
/ AbstractRepeater.onRender loops over 

/ we gaan debug	,
/s
ListViewPage$1(AbstractRepeater).onRender() line: 95	
		Iterator<? extends Component> it = renderIterator();
/ TODO
		while (it.hasNext())
		{
			Component child = it.next();
child	ListItem<T>  (id=8337)	
			renderChild(child);
/s
ListViewPage$1(ListView<T>).renderChild(Component) line: 573	
		renderItem((ListItem<?>)child);
/s
ListViewPage$1(ListView<T>).renderItem(ListItem<?>) line: 584	
		item.render();
/c

/s
ListItem<T>(Component).internalRender() line: 2345	
		IMarkupFragment markup = getMarkup();
<ul wicket:id="listView">
	<li wicket:id="label"></li>
</ul>


/s
/ stack trace	,

/ .onRender is altijd comkponent specifiek	,

	ComponentTag.writeOutput(Response, boolean, String) line: 720	
	ListItem<T>(Component).renderComponentTag(ComponentTag) line: 4034	
			behaviors
/ TODO
			// Write the tag
			tag.writeOutput(getResponse(), !needToRenderTag(null),
				getMarkup().getMarkupResourceStream().getWicketNamespace());

	ListItem<T>(Component).internalRenderComponent() line: 2556	
			else
			{
				renderComponentTag(tag);					/ prints alleen in response <ul wicket:id="listView" ...> 

				getMarkupSourcingStrategy().onComponentTagBody(this, markupStream, tag); / prints listitems	,


	ListItem<T>(MarkupContainer).onRender() line: 1698					/ listitem is inderdaad een container,	
	ListItem<T>(Component).internalRender() line: 2380	
	ListItem<T>(Component).render() line: 2308	
	ListViewPage$1(ListView<T>).renderItem(ListItem<?>) line: 584	
	ListViewPage$1(ListView<T>).renderChild(Component) line: 573	
	ListViewPage$1(AbstractRepeater).onRender() line: 102				/ listview is een repeater
	ListViewPage$1(Component).internalRender() line: 2380	
	ListViewPage$1(Component).render() line: 2308	
	ListViewPage(MarkupContainer).renderNext(MarkupStream) line: 1524	
	ListViewPage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	ListViewPage(Page).onRender() line: 879						
	ListViewPage(WebPage).onRender() line: 141							/ page	,	
	ListViewPage(Component).internalRender() line: 2380	
	ListViewPage(Component).render() line: 2308	
	ListViewPage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ debug	, 
/s
ComponentTag.writeOutput(Response, boolean, String) line: 720	

this	ComponentTag  (id=8621)	
<ul wicket:id="listView" wicketpath="listView_0">
...
response=
<!doctype html>
<head>
</head>
<body>
<ul wicket:id="listView" wicketpath="listView_0"> 		/ heeft deze .writeOutput gedaan	,

/c
	ListItem<T>(MarkupContainer).renderNext(MarkupStream) line: 1508	
	ListItem<T>(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	/ weer MarkupContainer.renderAll, ListItem is net als Page een container	, 

		while (markupStream.hasMore())
			boolean rawMarkup = renderNext(markupStream);
markupStream=
<ul wicket:id="listView">
	<li wicket:id="label"></li>
</ul>,


	ListItem<T>(MarkupContainer).renderComponentTagBody(MarkupStream, ComponentTag) line: 1734	
			renderAll(markupStream, openTag);

	ListItem<T>(MarkupContainer).onComponentTagBody(MarkupStream, ComponentTag) line: 1657	
		renderComponentTagBody(markupStream, openTag);

	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
		component.onComponentTagBody(markupStream, openTag);

	ListItem<T>(Component).internalRenderComponent() line: 2565	
				renderComponentTag(tag);
/d
				getMarkupSourcingStrategy().onComponentTagBody(this, markupStream, tag);


	ListItem<T>(MarkupContainer).onRender() line: 1698	
		internalRenderComponent();

	ListItem<T>(Component).internalRender() line: 2380	
	ListItem<T>(Component).render() line: 2308	
	ListViewPage$1(ListView<T>).renderItem(ListItem<?>) line: 584	
	ListViewPage$1(ListView<T>).renderChild(Component) line: 573	
	ListViewPage$1(AbstractRepeater).onRender() line: 102	
	ListViewPage$1(Component).internalRender() line: 2380	
	ListViewPage$1(Component).render() line: 2308	
	ListViewPage(MarkupContainer).renderNext(MarkupStream) line: 1524	
	ListViewPage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	ListViewPage(Page).onRender() line: 879	
	ListViewPage(WebPage).onRender() line: 141	
	ListViewPage(Component).internalRender() line: 2380	
	ListViewPage(Component).render() line: 2308	
	ListViewPage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ Intermezzo

	public ListViewPage() {
		List<Person>list=Arrays.asList(new Person("Foo","Bar"),new Person("Gee","Hee"));
		ListView<Person>listView=new ListView<Person>("listView",list) {
			@Override	
			protected void populateItem(ListItem<Person> item) {
				Label label=new Label("label", new PropertyModel<String>(item.getDefaultModel(),"full"));
				item.add(label);
				
			}
		};		
		add(listView);

<ul wicket:id="listView">
	<li wicket:id="label"></li>
</ul>


/ Einde Intermezzo



/ debug	,
/s
ListItem<T>(MarkupContainer).renderNext(MarkupStream) line: 1508	

		final MarkupElement element = markupStream.get();
		if ((element instanceof ComponentTag) && !markupStream.atCloseTag())
		{
			// Get element as tag
			final ComponentTag tag = (ComponentTag)element;
<li wicket:id="label">

			// Get component id
			final String id = tag.getId();
label

			// Get the component for the id from the given container
			Component component = get(id);
component	Label  (id=13880)	
	data	PropertyModel<T>  (id=13933)	
		expression	"full" (id=13935)	
		target	ListItemModel<T>  (id=13873)	
	id	"label" (id=13934)	
	markup	null	
	parent	ListItem<T>  (id=13883)	

				component.render();
/s
Label(Component).render() line: 2308	
			internalRender();
/s
Label(Component).internalRender() line: 2352	

		IMarkupFragment markup = getMarkup();
/s
Label(Component).getMarkup() line: 755	
		if (markup != null)
/ NEE
		markup = parent.getMarkup(this);
/s
ListItem<T>(MarkupContainer).getMarkup(Component) line: 502	
		return getMarkupSourcingStrategy().getMarkup(this, child);
/s
DefaultMarkupSourcingStrategy.getMarkup(MarkupContainer, Component) line: 93	

		IMarkupFragment containerMarkup = container.getMarkup();
<ul wicket:id="listView">
	<li wicket:id="label"></li>
</ul>

		IMarkupFragment childMarkup = containerMarkup.find(child.getId());
/////////////////////////////////////////////////
/ Hier wordt de id van het Label used	,


/ Intermezzo

/s
ListItem<T>(MarkupContainer).getMarkup(Component) line: 502	
this	ListItem<T>  (id=8337)	

		return getMarkupSourcingStrategy().getMarkup(this, child);
/s
DefaultMarkupSourcingStrategy.getMarkup(MarkupContainer, Component) line: 93	

		IMarkupFragment containerMarkup = container.getMarkup();
container	ListItem<T>  (id=8337)	

child	Label  (id=8653)	
containerMarkup	MarkupFragment  (id=8310)	
	markup	Markup  (id=8281)	
		markupElements	Collections$UnmodifiableRandomAccessList<E>  (id=8552)	
			c	ArrayList<E>  (id=8553)	
				elementData	Object[15]  (id=8554)	
					[0]	RawMarkup  (id=8555)	
					[1]	ComponentTag  (id=8556)	
					[2]	RawMarkup  (id=8557)	
					[3]	ComponentTag  (id=8558)	
					[4]	RawMarkup  (id=8559)	
					[5]	ComponentTag  (id=8560)	
<ul wicket:id="listView">
					[6]	RawMarkup  (id=8561)	
					[7]	ComponentTag  (id=8562)	
					[8]	ComponentTag  (id=8563)	
					[9]	RawMarkup  (id=8564)	
					[10]	ComponentTag  (id=8565)	
					[11]	RawMarkup  (id=8566)	
				size	12	
	size	6	
	startIndex	5	
/ TODO (5 , 6, 12)

		// Find the child's markup
		IMarkupFragment childMarkup = containerMarkup.find(child.getId());

/ Einde Intermezzo

/s
MarkupFragment.find(String) line: 154	
		return find(id, 1);
id="listView"
/s
MarkupFragment(AbstractMarkupFragment).find(String, int) line: 43	

this	MarkupFragment  (id=8310)	
	markup	Markup  (id=8281)	
	size	6	
	startIndex	5	
id	"listItem" (id=8323)	
streamOffset	1	

		while (stream.hasMore())
		{
			MarkupElement elem = stream.get();
<li wicket:id="listItem">

			if (elem instanceof ComponentTag)
						return stream.getMarkupFragment();
/t
DefaultMarkupSourcingStrategy.getMarkup(MarkupContainer, Component) line: 94	
		// Find the child's markup
		IMarkupFragment childMarkup = containerMarkup.find(child.getId());
/d
childMarkup	MarkupFragment  (id=8760)	
	markup	MarkupFragment  (id=8310)	
	size	2	
	startIndex	2	

		return ...
/t
Label(Component).getMarkup() line: 756	
		// Ask the parent for find the markup for me
		markup = parent.getMarkup(this);
		return markup;
/t
Label(Component).internalRender() line: 2346	
		IMarkupFragment markup = getMarkup();
/d

/ Intermezzo

markup	MarkupFragment  (id=13958)	 	/ (***)
	markup	MarkupFragment  (id=13892)	/ (**)
		markup	Markup  (id=13913)		/(*)
			markupElements	Collections$UnmodifiableRandomAccessList<E>  (id=13972)	
			markupResourceStream	MarkupResourceStream  (id=13921)	
		size	6	
		startIndex	5	
	size	2	
	startIndex	2	

/ (*)
/=
<!doctype html>
<head>
</head>
<body>
<ul wicket:id="listView">
	<li wicket:id="label"></li>
</ul>
</body>

/ (**)
/=
<ul wicket:id="listView">
	<li wicket:id="label"></li>
</ul>

/ (***)
/=
<li wicket:id="label"></li>

/ In meer detail	,

markup	MarkupFragment  (id=13958)	
	markup	MarkupFragment  (id=13892)	
		markup	Markup  (id=13913)	
			markupElements	Collections$UnmodifiableRandomAccessList<E>  (id=13972)	
				c	ArrayList<E>  (id=13974)	
					elementData	Object[15]  (id=13990)	
						[0]	RawMarkup  (id=13992)	
						[1]	ComponentTag  (id=13876)	
						[2]	RawMarkup  (id=13994)	
						[3]	ComponentTag  (id=13995)	
						[4]	RawMarkup  (id=13997)	
						[5]	ComponentTag  (id=13890)	
						[6]	RawMarkup  (id=13925)	
						[7]	ComponentTag  (id=13926)	
						[8]	ComponentTag  (id=14001)	
						[9]	RawMarkup  (id=14002)	
						[10]	ComponentTag  (id=14003)	
						[11]	RawMarkup  (id=14029)	
					modCount	12	
					size	12	
				list	ArrayList<E>  (id=13974)	
			markupResourceStream	MarkupResourceStream  (id=13921)	
		size	6	
		startIndex	5	
	size	2	
	startIndex	2	

/ Einde Intermezzo


this	Label  (id=8653)	
	data	PropertyModel<T>  (id=8662)	
		expression	"full" (id=8326)	
		target	ListItemModel<T>  (id=8338)	
	id	"label" (id=8323)	
	markup	MarkupFragment  (id=8760)	
		markup	MarkupFragment  (id=8310)	
		size	2	
		startIndex	2	
	markupSourcingStrategy	DefaultMarkupSourcingStrategy  (id=8587)	
	parent	ListItem<T>  (id=8337)	

markup	MarkupFragment  (id=8760)	
	markup	MarkupFragment  (id=8310)	
	size	2	
	startIndex	2	

/ we zijn nog in	,
Label(Component).internalRender() line: 2380	
		IMarkupFragment markup = getMarkup();
/d
				onRender();
/s
Label(WebComponent).onRender() line: 60	
		internalRenderComponent();
/s
Label(Component).internalRenderComponent() line: 2508	

		final IMarkupFragment markup = getMarkup();
<li wicket:id="label"></li>
/ was er al	,

		onComponentTag(tag);
<li wicket:id="label" id="label1" wicketpath="listView_0_label">

			else
			{
				renderComponentTag(tag);
/s
Label(Component).renderComponentTag(ComponentTag) line: 3982	
			// Write the tag
			tag.writeOutput(getResponse(), !needToRenderTag(null),
				getMarkup().getMarkupResourceStream().getWicketNamespace());
/s
ComponentTag.writeOutput(Response, boolean, String) line: 720	
...
reponse=
...
<li wicket:id="label" id="label1" wicketpath="listView_0_label">

/t
Label(Component).internalRenderComponent() line: 2565	
				renderComponentTag(tag);
/d
			}
			markupStream.next();
				getMarkupSourcingStrategy().onComponentTagBody(this, markupStream, tag);
/s
DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
		component.onComponentTagBody(markupStream, openTag);
/s
Label.onComponentTagBody(MarkupStream, ComponentTag) line: 115	
		replaceComponentTagBody(markupStream, openTag, getDefaultModelObjectAsString());
/s
Label(Component).getDefaultModelObjectAsString() line: 1654	
		return getDefaultModelObjectAsString(getDefaultModelObject());
/s
Label(Component).getDefaultModelObject() line: 1620	

		final IModel<?> model = getDefaultModel();
model	PropertyModel<T>  (id=13933)	
	expression	"full" (id=13935)	
	target	ListItemModel<T>  (id=13873)	
		index	0	
		listView	ListViewPage$1  (id=13859)	
			data	ListModel<T>  (id=13857)	
				object	Arrays$ArrayList<E>  (id=13858)	
					a	ListViewPage$Person[2]  (id=13863)	
						[0]	ListViewPage$Person  (id=14179)	
						[1]	ListViewPage$Person  (id=14180)	

				return model.getObject();
/s
PropertyModel<T>(AbstractPropertyModel<T>).getObject() line: 71	
		final String expression = propertyExpression();
"full"
		final Object target = getInnermostModelOrObject();
/s
		Object object = getTarget();
object	ListItemModel<T>  (id=13873)	

		while (object instanceof IModel)
/ JA
		{
			Object tmp = ((IModel<?>)object).getObject();
/s
ListItemModel<T>.getObject() line: 61					
		return listView.getModelObject().get(index);
///////////////////////////////////////////////////////////////
/ Dit is hoe ListItemModel werkt	,	

/ HIER HIER HIER

/s
ListViewPage$1(ListView<T>).getModelObject() line: 643	
		return (List<T>)getDefaultModelObject();
/s
ListViewPage$1(Component).getDefaultModelObject() line: 1621	

		final IModel<?> model = getDefaultModel();
model	ListModel<T>  (id=13857)	
	object	Arrays$ArrayList<E>  (id=13858)	

				return model.getObject();
Arrays$ArrayList met 2 Person	,
/t
ListItemModel<T>.getObject() line: 61	
		return listView.getModelObject().get(index);
/pd
/ en dan .get(0)	, of later .get(1)

/t
PropertyModel<T>(AbstractPropertyModel<T>).getInnermostModelOrObject() line: 265	
			Object tmp = ((IModel<?>)object).getObject();
/d
tmp	ListViewPage$Person  (id=14179)	
			object = tmp;
		return object;

/t
PropertyModel<T>(AbstractPropertyModel<T>).getObject() line: 84	
		final Object target = getInnermostModelOrObject();
/d
target	ListViewPage$Person  (id=14179)	
            return (T)PropertyResolver.getValue(expression, target);
/expression="full"

/ MORGENOCHTEND





























/ Einde WICET 7 LISTVIEW




















/ Hierboven: de page id blijft 0, maar de counter wordt steeds 1 meer, als we op link click	, (de link heeft void onClick)	,


/ 1313	. 

$ vi LinkOnlyStudyPage2.java

		Link<String>link=new Link<String>("link",model2) {
			@Override
			public void onClick() {
				setResponsePage(LinkOnlyStudyPage2.this);
				
			}
		};

/ click de link	, 
/ dan vallen we in	,
/s
Daemon Thread [http-nio-9090-exec-112] (Suspended (breakpoint at line 389 in DefaultPageStore$SerializedPagesCache))	
	DefaultPageStore$SerializedPagesCache.getPage(String, Integer) line: 389	
/ hieronder,	
	DefaultPageStore$SerializedPagesCache.getPage(Object, Object) line: 304	

	DefaultPageStore(AbstractCachingPageStore<P>).getPage(String, int) line: 58	
		P fromCache = pagesCache.getPage(sessionId, pageId);

	PageStoreManager$SessionEntry.getPage(int) line: 203	
-->>
			// try to find page with same id
			if (sessionCache != null)
/ JA
this	PageStoreManager$SessionEntry  (id=152)	
	sessionCache	ArrayList<E>  (id=357)	
		elementData	Object[1]  (id=367)	
			[0]	LinkOnlyStudyPage2  (id=369)	
/
			{
				IManageablePage page = findPage(id);
null
/ TODO
			// not found, ask pagestore for the page
			return getPageStore().getPage(sessionId, id);

	PageStoreManager$PersistentRequestAdapter.getPage(int) line: 357	
		{
			IManageablePage touchedPage = findPage(id);
null
			// try to get session entry for this session
			SessionEntry entry = getSessionEntry(false);
			if (entry != null)
			{
				return entry.getPage(id);

	PageStoreManager(AbstractPageManager).getPage(int) line: 82	
		IManageablePage page = getRequestAdapter().getPage(id);
0
	PageAccessSynchronizer$2(PageManagerDecorator).getPage(int) line: 50	
		return delegate.getPage(id);

	PageAccessSynchronizer$2.getPage(int) line: 246	
		return new PageManagerDecorator(pagemanager)
		{
			@Override
			public IManageablePage getPage(int pageId)
			{
				IManageablePage page = null;
				try
				{
					lockPage(pageId);
					page = super.getPage(pageId);

	DefaultMapperContext.getPageInstance(int) line: 113	
		IManageablePage manageablePage = Session.get().getPageManager().getPage(pageId);

	PageAndComponentProvider(PageProvider).getStoredPage(int) line: 296	
		IRequestablePage storedPageInstance = getPageSource().getPageInstance(pageId);

	PageAndComponentProvider(PageProvider).resolvePageInstance(Integer, Class<IRequestablePage>, PageParameters, Integer) line: 261	
		if (pageId != null)
0
		{
			page = getStoredPage(pageId);

	PageAndComponentProvider(PageProvider).getPageInstance() line: 166	
		if (pageInstance == null)
		{
			resolvePageInstance(pageId, pageClass, pageParameters, renderCount);

	ListenerInterfaceRequestHandler.getPage() line: 96	
		return pageComponentProvider.getPageInstance();

	ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 157	
->		final IRequestablePage page = getPage();

	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 837	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ Intermezzo

/ Bij ->, 
/ Hiervoor kwamen we altijd 	,
    RenderPageRequestHandler.respond(IRequestCycle) line: 175       
		PageRenderer renderer = Application.get().getPageRendererProvider().get(this);
		renderer.respond((RequestCycle)requestCycle);
/s
    WebPageRenderer.respond(RequestCycle) line: 193 
		if (shouldRenderPageAndWriteResponse(requestCycle, currentUrl, targetUrl))

/ Bij -->>

/ Einde Intermezzo

/s
DefaultPageStore$SerializedPagesCache.getPage(String, Integer) line: 389	
/=
		public SerializedPage getPage(String sessionId, Integer pageId)
sessionId	"834ACDD3143E19D35F6C8D508F3F1A4E" (id=160)	
pageId	Integer  (id=165)	
0
				SerializedPage sample = new SerializedPage(sessionId, pageId, null);
/ null data	,
				for (Iterator<SoftReference<SerializedPage>> i = cache.iterator(); i.hasNext();)
/ NEE
			return result;
null
/t
DefaultPageStore(AbstractCachingPageStore<P>).getPage(String, int) line: 59	
		P fromCache = pagesCache.getPage(sessionId, pageId);
null
		byte[] data = getPageData(sessionId, pageId);
DefaultPageStore(AbstractPageStore).getPageData(String, int) line: 83	
		return dataStore.getData(sessionId, pageId);
/s
AsynchronousDataStore.getData(String, int) line: 139	
		Entry entry = getEntry(sessionId, id);
/s
AsynchronousDataStore.getEntry(String, int) line: 130	
		return entryMap.get(getKey(sessionId, id));
/ key=0:::834ACDD3143E19D35F6C8D508F3F1A4E
null
/t
AsynchronousDataStore.getData(String, int) line: 140	
		Entry entry = getEntry(sessionId, id);
/d
null
		byte[] data = dataStore.getData(sessionId, id);
/s
DiskDataStore.getData(String, int) line: 116	
		SessionEntry sessionEntry = getSessionEntry(sessionId, false);
/s
DiskDataStore.getSessionEntry(String, boolean) line: 202	
		if (!create)
		{
			return sessionEntryMap.get(sessionId);
null
/t
DiskDataStore.getData(String, int) line: 118	
		SessionEntry sessionEntry = getSessionEntry(sessionId, false);
null
		return pageData;
null
/t
AsynchronousDataStore.getData(String, int) line: 152	
		byte[] data = dataStore.getData(sessionId, id);
null
		return data;
/t
DefaultPageStore(AbstractCachingPageStore<P>).getPage(String, int) line: 65	
		byte[] data = getPageData(sessionId, pageId);
null
		if (data != null)
/ NEE
		{
			return deserializePage(data);
/ NIET
/ MORGENOCHTEND















/ 7	.

/ detach model	,

$ vi ChainingModel.class

	@Override
	public void detach()
	{
		// Detach nested object if it's a detachable
		if (target instanceof IDetachable)
		{
			((IDetachable)target).detach();
		}
	}
/ target = LabelOnlyStudyPage.class inst	, en deze is NIET instanceof IDetachable	,

/ we gaan het doen	,
/c
RequestCycle.processRequestAndDetach() line: 293	
			result = processRequest();
/d
		}
		finally
		{
			detach();
/s
RequestCycle.onDetach() line: 641	
		try
		{
			requestHandlerExecutor.detach();
/s
RequestCycle$HandlerExecutor(RequestHandlerStack).detach() line: 180	
		for (IRequestHandler handler : inactiveRequestHandlers)
		{
			try
			{
				detach(handler);
/s
RequestCycle$HandlerExecutor.detach(IRequestHandler) line: 848	
			handler.detach(RequestCycle.this);
/s
RenderPageRequestHandler.detach(IRequestCycle) line: 156	
		pageProvider.detach();
/s
PageProvider.detach() line: 327	
			pageInstance.detach();
/s
LabelOnlyStudyPage(Component).detach() line: 1159	
		// always detach models because they can be attached without the
		// component. eg component has a compoundpropertymodel and one of its
		// children component's getmodelobject is called
		detachModels();
/s
LabelOnlyStudyPage(Page).detachModels() line: 228	
		super.detachModels();
/s
LabelOnlyStudyPage(Component).detachModels() line: 1255	
		// Detach any detachable model from this component
		detachModel();
/s
LabelOnlyStudyPage(Component).detachModel() line: 3625	
		IModel<?> model = getModelImpl();
null
/ Dus doet NIETS	,
/t
LabelOnlyStudyPage(Component).detach() line: 1175	
		detachModels();
/d
/ doet NIETS	, want de page heeft geen model	,

		// always detach children because components can be attached
		// independently of their parents
		detachChildren();
/s
LabelOnlyStudyPage(MarkupContainer).detachChildren() line: 1647	
		super.detachChildren();
/ NIETS
		for (int i = children_size(); i-- > 0;)
		{
			Object child = children_get(i, false);
			if (child instanceof Component)
			{
				Component component = (Component)child;
component	Label  (id=10905)	
				component.detach();
/s
Label(Component).detach() line: 1159	

/ dezelfde method als waar we al in zijn	, maar nu op het label	,

		// always detach models because they can be attached without the
		// component. eg component has a compoundpropertymodel and one of its
		// children component's getmodelobject is called
		detachModels();
/s
Label(Component).detachModels() line: 1255	
		// Detach any detachable model from this component
		detachModel();
/s
Label(Component).detachModel() line: 3625	
		IModel<?> model = getModelImpl();
/s
Label(Component).getModelImpl() line: 3010	
		if (getFlag(FLAG_MODEL_SET))
		{
			return (IModel<?>)data_get(0);
/s
				return data;
/t
Label(Component).detachModel() line: 3626	
		IModel<?> model = getModelImpl();
/d
model	PropertyModel<T>  (id=10907)	
		if (model != null)
		{
			model.detach();
/s
PropertyModel<T>(ChainingModel<T>).detach() line: 63	

this	PropertyModel<T>  (id=10907)	
	LOG	Log4jLogger  (id=10910)	
	serialVersionUID	1	
	serialVersionUID	1	
	expression	"text" (id=8252)	
	target	LabelOnlyStudyPage  (id=10887)	

		// Detach nested object if it's a detachable
		if (target instanceof IDetachable)
/ NEE
		{
			((IDetachable)target).detach();
/ NIET
		}

/ MORGENOCHTEND
























/ Einde DEBUG WICKET 7 GET

/ RM DEBUG WICKET 7 GET


/t
PageAccessSynchronizer$2.commitRequest() line: 274	
			@Override
			public void commitRequest()
			{
				try
				{
					super.commitRequest();
/d
				}
				finally
				{
					unlockAllPages();
/s
PageAccessSynchronizer.unlockAllPages() line: 176	
		internalUnlockPages(null);
/s
PageAccessSynchronizer.internalUnlockPages(Integer) line: 192	
		final Thread thread = Thread.currentThread();
Thread[http-nio-9090-exec-6,5,main]
		final Iterator<PageLock> locks = this.locks.get().values().iterator();
		while (locks.hasNext())
/ NEE
/t
Application$3.onDetach(RequestCycle) line: 1754	
					Session.get().getPageManager().commitRequest();
/d
/t
RequestCycleListenerCollection$3.notify(IRequestCycleListener) line: 105	
	@Override
	public void onDetach(final RequestCycle cycle)
	{
		reversedNotifyIgnoringExceptions(new INotifier<IRequestCycleListener>()
		{
			@Override
			public void notify(IRequestCycleListener listener)
			{
				listener.onDetach(cycle);
/s
RequestLoggerRequestCycleListener(AbstractRequestCycleListener).onDetach(RequestCycle) line: 41	
/=
public abstract class AbstractRequestCycleListener implements IRequestCycleListener
{
	@Override
	public void onDetach(RequestCycle cycle)
	{
	}
...
/t
RequestCycle.onDetach() line: 646	
		finally
		{
			listeners.onDetach(this);
/d
		}

		if (Session.exists())
		{
			Session.get().detach();
/s
WebSession(Session).detach() line: 648	
		detachFeedback();
/ NIETS
		if (sessionInvalidated)
/ NEE
		else
		{
			// WICKET-5103 container might have changed id
			updateId();
/s
WebSession(Session).updateId() line: 398	
		RequestCycle requestCycle = RequestCycle.get();
		if (requestCycle != null)
		{
			id = getSessionStore().getSessionId(requestCycle.getRequest(), false);

































/ JA
[[Page class = my.test.own.LinkOnlyStudyPage, id = 0, render count = 1]]

			List<IManageablePage> statefulPages = new ArrayList<IManageablePage>( touchedPages.size());
			for (IManageablePage page : touchedPages)
			{
				boolean isPageStateless;
				try
				{
					isPageStateless = page.isPageStateless();
false
				if (isPageStateless == false)
				{
					statefulPages.add(page);

			if (statefulPages.isEmpty() == false)
			{
				storeTouchedPages(statefulPages);
/s
PageStoreManager$PersistentRequestAdapter.storeTouchedPages(List<IManageablePage>) line: 398	

/ Intermezzo

/ we zijn nog in	,

RequestCycle.onDetach() line: 645	
		finally
		{
			listeners.onDetach(this);

/ Einde Intermezzo

			if (!touchedPages.isEmpty())
			{
				SessionEntry entry = getSessionEntry(true);
/s
PageStoreManager$PersistentRequestAdapter.getSessionEntry(boolean) line: 372	
/=
		private SessionEntry getSessionEntry(boolean create)
create=true
			String attributeName = getAttributeName();
/s
PageStoreManager.getAttributeName(){
				return ATTRIBUTE_NAME + " - " + applicationName;
wicket:persistentPageManagerData - wicket-testing
/t
			SessionEntry entry = (SessionEntry)getSessionAttribute(attributeName);
/s
PageStoreManager$PersistentRequestAdapter(RequestAdapter).getSessionAttribute(String) line: 100	
		return context.getSessionAttribute(key);
/s
DefaultPageManagerContext.getSessionAttribute(String) line: 66	
		return Session.get().getAttribute(key);
/s
WebSession(Session).getAttribute(String) line: 731	
		if (!isTemporary())
		{
			RequestCycle cycle = RequestCycle.get();
			if (cycle != null)
			{
				return getSessionStore().getAttribute(cycle.getRequest(), name);
/s
HttpSessionStore.getAttribute(Request, String) line: 261	
/=
	public final Serializable getAttribute(final Request request, final String name)
name=wicket:persistentPageManagerData - wicket-testing
		HttpSession httpSession = getHttpSession(request, false);
null
/ TODO
		return null;
/t
PageStoreManager$PersistentRequestAdapter.getSessionEntry(boolean) line: 374	
			SessionEntry entry = (SessionEntry)getSessionAttribute(attributeName);
null
			if (entry == null && create)
			{
				bind();
/s
PageStoreManager$PersistentRequestAdapter(RequestAdapter).bind() line: 78	
		context.bind();
/s
DefaultPageManagerContext.bind() line: 43	
		Session.get().bind();
/s
WebSession(Session).bind() line: 257	

		ISessionStore store = getSessionStore();
store	HttpSessionStore  (id=5529)	
	log	Log4jLogger  (id=6077)	
	bindListeners	CopyOnWriteArraySet<E>  (id=6078)	
	unboundListeners	CopyOnWriteArraySet<E>  (id=6079)	

		Request request = RequestCycle.get().getRequest();
		if (store.lookup(request) == null)
/s
HttpSessionStore.lookup(Request) line: 198	
		String sessionId = getSessionId(request, false);
/s
HttpSessionStore.getSessionId(Request, boolean) line: 157	
		String id=null;
		HttpSession httpSession = getHttpSession(request, false);
		if (httpSession != null)
/ NEE
		else if (create)
/ NEE
		return id;
null
/t
HttpSessionStore.lookup(Request) line: 203	
		String sessionId = getSessionId(request, false);
		if (sessionId != null)
/ NEE
		return null;
/t
WebSession(Session).bind() line: 264	
		if (store.lookup(request) == null)
JA
		{
			// explicitly create a session
			id = store.getSessionId(request, true);
/s
HttpSessionStore.getSessionId(Request, boolean) line: 159	
		String id = null;
		HttpSession httpSession = getHttpSession(request, false);
		if (httpSession != null)
/ NEE
		else if (create)
/ Ja
		{
			httpSession = getHttpSession(request, true);
...
/s
Request.doGetSession(boolean) line: 2906	
        } else {
            session = manager.createSession(null);
/ WH
        }

        // Creating a new session cookie based on that session
        if (session != null
                && context.getServletContext()
                        .getEffectiveSessionTrackingModes()
                        .contains(SessionTrackingMode.COOKIE)) {
            Cookie cookie =																	/ Tomcat's code !
                ApplicationSessionCookieConfig.createSessionCookie(
                        context, session.getIdInternal(), isSecure());

            response.addSessionCookieInternal(cookie);
...
/t
HttpSessionStore.getSessionId(Request, boolean) line: 167	
		else if (create)
		{
			httpSession = getHttpSession(request, true);
/d
			id = httpSession.getId();
0B497E1F2E182D30DABD67C39689D9A9
		return id;
/t
WebSession(Session).bind() line: 267	
			// explicitly create a session
			id = store.getSessionId(request, true);
			// bind it
			store.bind(request, this);
/s
HttpSessionStore.bind(Request, Session) line: 104	
		if (getAttribute(request, Session.SESSION_ATTRIBUTE_NAME) != newSession)
null!=newSession
/ JA
		{
			// call template method
			onBind(request, newSession);
/ NIETS
			for (BindListener listener : getBindListeners())
[]
/ NEE
			if (httpSession != null)
/ JA
org.apache.catalina.session.StandardSessionFacade@56b12d2
			{
				// register an unbinding listener for cleaning up
				String applicationKey = Application.get().getName();
wicket-testing
				httpSession.setAttribute("Wicket:SessionUnbindingListener-" + applicationKey,
					new SessionBindingListener(applicationKey, newSession));
/ TODO

				// register the session object itself
				setAttribute(request, Session.SESSION_ATTRIBUTE_NAME, newSession);
/s
HttpSessionStore.setAttribute(Request, String, Serializable) line: 328	

		// ignore call if the session was marked invalid
		HttpSession httpSession = getHttpSession(request, false);
org.apache.catalina.session.StandardSessionFacade@56b12d2

		if (httpSession != null)
/ JA
		{
			String attributeName = getSessionAttributePrefix(request) + name;
wicket:wicket-testing:session
			...
			httpSession.setAttribute(attributeName, value);
/ TODO
...
/t
PageStoreManager$PersistentRequestAdapter.getSessionEntry(boolean) line: 377	
				bind();
/d
/ TODO
				entry = new SessionEntry(applicationName, getSessionId());
this	PageStoreManager$PersistentRequestAdapter  (id=5494)	
	this$0	PageStoreManager  (id=5421)	
		applicationName	"wicket-testing" (id=5425)	
getSessionId()=0B497E1F2E182D30DABD67C39689D9A9

				setSessionAttribute(attributeName, entry);
attributeName	"wicket:persistentPageManagerData - wicket-testing" (id=5525)	
/s
PageStoreManager$PersistentRequestAdapter(RequestAdapter).setSessionAttribute(String, Serializable) line: 89	
		context.setSessionAttribute(key, value);
/s
DefaultPageManagerContext.setSessionAttribute(String, Serializable) line: 99	
		Session.get().setAttribute(key, value);
/s
WebSession(Session).setAttribute(String, Serializable) line: 823	
		if (!isTemporary())
/ JA
		{
			RequestCycle cycle = RequestCycle.get();
			ISessionStore store = getSessionStore();
/ uit Application	,
			Request request = cycle.getRequest();
			// Set the actual attribute
			store.setAttribute(request, name, value);

name	"wicket:persistentPageManagerData - wicket-testing" (id=5525)	
value	PageStoreManager$SessionEntry  (id=6120)	
	serialVersionUID	1	
	afterReadObject	null	
	applicationName	"wicket-testing" (id=5425)	
	sessionCache	null	
	sessionId	"0B497E1F2E182D30DABD67C39689D9A9" (id=6094)	
/s
HttpSessionStore.setAttribute(Request, String, Serializable) line: 328	
		// ignore call if the session was marked invalid
		HttpSession httpSession = getHttpSession(request, false);
		if (httpSession != null)
/NEE
...
/t
PageStoreManager$PersistentRequestAdapter.storeTouchedPages(List<IManageablePage>) line: 399	



































 

















































/s
LinkOnlyStudyPage(Page).isPageStateless() line: 448	

		if (isBookmarkable() == false)
/ NEE
/ TODO
		if (stateless == null)
		{
			Component statefulComponent = visitChildren(Component.class,
				new IVisitor<Component, Component>()
				{
					@Override
					public void component(final Component component, final IVisit<Component> visit)
					{
						if (!component.isStateless())
/s
LinkOnlyStudyPage$1(Component).isStateless() line: 2072	

		if (!getStatelessHint())
/s
LinkOnlyStudyPage$1(Link<T>).getStatelessHint() line: 170	
		return false;

/t
LinkOnlyStudyPage(Page).isPageStateless() line: 488	
		if (stateless == null)
		{
			Component statefulComponent = visitChildren(Component.class,
				...
/d
[Link [Component id = link]]
			stateless = statefulComponent == null;
false
		return stateless;
false

/t
WebPageRenderer.respond(RequestCycle) line: 236	
		if (shouldRenderPageAndWriteResponse(requestCycle, currentUrl, targetUrl))
/ NEE
		else
		{
			...
			// redirect to buffer
			BufferedWebResponse response = renderPage(beforeRenderUrl, requestCycle);
...
/s
LinkOnlyStudyPage(Component).render() line: 2296	
				internalPrepareForRender(true);
			// Do the render
			internalRender();
				// Cleanup
				afterRender();

/ eerst	,
				internalPrepareForRender(true);
...
/s
LinkOnlyStudyPage(Component).internalBeforeRender() line: 940	
	...
			onBeforeRender();
/s
LinkOnlyStudyPage(Page).onBeforeRender() line: 808	
			getSession().bind();
/s
WebSession(Session).bind() line: 262	
		ISessionStore store = getSessionStore();
store	org.apache.wicket.session.HttpSessionStore  (id=5492)	

		Request request = RequestCycle.get().getRequest();
		if (store.lookup(request) == null)
/ JA
		{
			// explicitly create a session
			id = store.getSessionId(request, true);
/s
HttpSessionStore.getSessionId(Request, boolean) line: 159	
		HttpSession httpSession = getHttpSession(request, false);
/s
HttpSessionStore.getHttpSession(Request, boolean) line: 95	
		return getHttpServletRequest(request).getSession(create);
/s
RequestFacade.getSession(boolean) line: 895	
       } else {
            return request.getSession(create);
/s
Request.getSession(boolean) line: 2256	
        Session session = doGetSession(create);
/s
Request.doGetSession(boolean) line: 2845	
        Context context = getContext();
context	org.apache.catalina.core.StandardContext  (id=5524)	
        Manager manager = context.getManager();
manager	org.apache.catalina.session.StandardManager  (id=5541)	
        if (requestedSessionId != null) {
/ Ja
this	org.apache.catalina.connector.Request  (id=5502)	
	requestedSessionId	"1llua8yc8hq0d14hmf8vs3f621" (id=5544)	
           try {
                session = manager.findSession(requestedSessionId);
null
        // Create a new session if requested and the response is not committed
        if (!create) {
            return (null);
...
/t
HttpSessionStore.getSessionId(Request, boolean) line: 160	
/=
	public String getSessionId(final Request request, final boolean create)
create=true
		HttpSession httpSession = getHttpSession(request, false);
/d
null
		else if (create)
		{
			httpSession = getHttpSession(request, true);
/ DINSDAGOCHTEND
/s
HttpSessionStore.getHttpSession(Request, boolean) line: 95	
		return getHttpServletRequest(request).getSession(create);
...
/s
Request.getSession(boolean) line: 2256	
        Session session = doGetSession(create);
/s
Request.doGetSession(boolean) line: 2844	
        // There cannot be a session if no context has been assigned yet
        Context context = getContext();
        // Return the requested session if it exists and is valid
        Manager manager = context.getManager();
        if (requestedSessionId != null) {
            try {
                session = manager.findSession(requestedSessionId);
null
        // Create a new session if requested and the response is not committed
        if (!create) {
/ NEE
/ Nu , zonet JA
        // Attempt to reuse session id if one was submitted in a cookie
        // Do not reuse the session id if it is from a URL, to prevent possible
        // phishing attacks
        // Use the SSL session ID if one is present.
        if (("/".equals(context.getSessionCookiePath())
/ NEE	, 
/ context.sessionCookiePath=null	,
                && isRequestedSessionIdFromCookie()) || requestedSessionSSL ) {
/ isRequestedSessionIdFromCookie()=this.requestedSessionCoookie==true
/ requestedSessionSSL=false

       } else {
/ JA
            session = manager.createSession(null);

this	org.apache.catalina.connector.Request  (id=5502)	
	session	org.apache.catalina.session.StandardSession  (id=6227)	

        // Creating a new session cookie based on that session
        if (session != null
                && context.getServletContext()
                        .getEffectiveSessionTrackingModes()
                        .contains(SessionTrackingMode.COOKIE)) {
/ JA
            Cookie cookie =
                ApplicationSessionCookieConfig.createSessionCookie( context, session.getIdInternal(), isSecure());
/ session.getIdInternal()=session.id="B2A40BD0BE7F072A50956ABE1C8D70F8"
            response.addSessionCookieInternal(cookie);
/ isSecure()==false
/ Tomcat fct	,
            response.addSessionCookieInternal(cookie);
/ Tomcat fct	,



 




			// bind it
			store.bind(request, this);








/ Einde Intermezzo
































	








































/ Einde RM DEBUG WICKET 7 GET

/ DEBUG AJAX CLOCK

/ 7	. 

/ de browser doet om 5 sec request	,

Headers

Remote Address:[::1]:9090
Request URL:http://localhost:9090/wicket-examples-step-by-step/ajax/clock?2-1.IBehaviorListener.0-clock&_=1458801536297
Request Method:GET
Status Code:200 OK

Request Headers
Accept:application/xml, text/xml, */*; q=0.01
Accept-Encoding:gzip,deflate,sdch
Accept-Language:en-US,en;q=0.8
Connection:keep-alive
Cookie:wicketDebugBarState=expanded; wicket-modal-window-positions=modal-1%3A%3A419px%2C1px%2C626px%2C451px%7Cmodal-2%3A%3A423px%2C107px%2C600px%2C387px%7C; JSESSIONID=E1485111503BB26D85D21016EAD649B6; visited=yes; JSESSIONID=1llua8yc8hq0d14hmf8vs3f621
Host:localhost:9090
Referer:http://localhost:9090/wicket-examples-step-by-step/ajax/clock?2
User-Agent:Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.104 Safari/537.36
Wicket-Ajax:true
Wicket-Ajax-BaseURL:clock?2
X-Requested-With:XMLHttpRequest

Query String Parameters
2-1.IBehaviorListener.0-clock:
_:1458801536297

Response Headers
Cache-Control:no-cache, no-store
Content-Type:text/xml;charset=UTF-8
Date:Thu, 24 Mar 2016 06:43:09 GMT
Expires:Thu, 01 Jan 1970 00:00:00 GMT
Pragma:no-cache
Server:Apache-Coyote/1.1
Transfer-Encoding:chunked

Preview
Response

<?xml version="1.0" encoding="UTF-8"?><ajax-response><priority-evaluate><![CDATA[clientTimeVariable = new Date().getTime();]]></priority-evaluate><component id="clock2" ><![CDATA[<span wicket:id="clock" style="border: 3px solid red; padding: 10px;" id="clock2" wicketpath="clock">Wednesday, March 23, 2016 11:43:03 PM PDT</span>]]></component><header-contribution><![CDATA[<head xmlns:wicket="http://wicket.apache.org"><script type="text/javascript" src="./wicket/resource/org.apache.wicket.resource.JQueryResourceReference/jquery/jquery-2.2.0-ver-1455723568000.js"></script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-event-jquery-ver-1455723568000.js"></script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-ajax-jquery-ver-1455723568000.js"></script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-ajax-jquery-debug-ver-1455723568000.js"></script>
<script type="text/javascript" id="wicket-ajax-debug-enable">
/*<![CDATA[*/
Wicket.Ajax.DebugWindow.enabled=true;
/*]]]]><![CDATA[>*/
</script>
<script type="text/javascript" id="wicket-ajax-base-url">
/*<![CDATA[*/
Wicket.Ajax.baseUrl="clock?2";
/*]]]]><![CDATA[>*/
</script>
</head>]]></header-contribution><evaluate><![CDATA[(function(){Wicket.Timer.set('clock2', function(){Wicket.Ajax.ajax({"u":"./clock?2-1.IBehaviorListener.0-clock","c":"clock2"});}, 5000);})();]]></evaluate><evaluate><![CDATA[window.defaultStatus='Server parsetime: 60.184s, Client parsetime: ' + (new Date().getTime() - clientTimeVariable)/1000 +  's';]]></evaluate></ajax-response>

/ we zien ajax in client (browser) die WH om 5 sec call doet	,

/s
/ stack trace

	ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 157	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ we debug	, 
/s
	ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 157	
		final IRequestablePage page = getPage();
		final boolean freshPage = pageComponentProvider.isPageInstanceFresh();
false
/ TODO (WH uit sessipn)
		final boolean isAjax = ((WebRequest)requestCycle.getRequest()).isAjax();
/s
ServletWebRequest(WebRequest).isAjax() line: 117	
		return Strings.isTrue(getHeader(HEADER_AJAX)) ||
true	, 
HEADER_AJAX=Wicket-Ajax
/ TODO
			Strings.isTrue(getRequestParameters().getParameterValue(PARAM_AJAX).toString());
null
/ Dus true || null == true
/t
ServletWebRequest(WebRequest).isAjax() line: 117	
		final boolean isAjax = ((WebRequest)requestCycle.getRequest()).isAjax();
		IRequestableComponent component;
		try
		{
			component = getComponent();
/s
ListenerInterfaceRequestHandler.getComponent() line: 90	
		return pageComponentProvider.getComponent();
/s
PageAndComponentProvider.getComponent() line: 160	
		if (component == null)
		{
			IRequestablePage page = getPageInstance();
			component = page.get(componentPath);
componentPath="clock"
/ TODO
/t
ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 184	
			component = getComponent();
/d
component	Clock  (id=7567)	
			// initialize the page to be able to check whether it is stateless
			((Page)page).internalInitialize();
		}
		final boolean isStateless = page.isPageStateless();
false
/ TODO
		invokeListener();
/s
ListenerInterfaceRequestHandler.invokeListener() line: 248	

this	ListenerInterfaceRequestHandler  (id=7530)	
	behaviorId	Integer  (id=7562)	
0
	listenerInterface	RequestListenerInterface  (id=7563)	

				Behavior behavior = getComponent().getBehaviorById(behaviorId);
behavior	AjaxSelfUpdatingTimerBehavior  (id=7576)	

				listenerInterface.invoke(getComponent(), behavior);
...
/s
RequestListenerInterface.internalInvoke(Component, Object) line: 258	
			method.invoke(target);
this	RequestListenerInterface  (id=7563)	
	method	Method  (id=7579)	
public abstract void org.apache.wicket.behavior.IBehaviorListener.onRequest()
/s
AjaxSelfUpdatingTimerBehavior(AbstractDefaultAjaxBehavior).onRequest() line: 587	

/ Nu net als hier beneden	,

/c
/ stack trace
/s
	AjaxSelfUpdatingTimerBehavior(AbstractDefaultAjaxBehavior).onRequest() line: 587	

	RequestListenerInterface.internalInvoke(Component, Object) line: 258	
			method.invoke(target);
method= public abstract void org.apache.wicket.behavior.IBehaviorListener.onRequest()

	RequestListenerInterface.invoke(IRequestableComponent, Behavior) line: 241	
		internalInvoke(component, behavior);

	ListenerInterfaceRequestHandler.invokeListener() line: 248						/ ListenerInterfaceRequestHandler -> Behavior op component	,
																					/////////////////////////////////////////////////////////////////	
				Behavior behavior = getComponent().getBehaviorById(behaviorId);
behavior	AjaxSelfUpdatingTimerBehavior  (id=7645)	
				listenerInterface.invoke(getComponent(), behavior);

	ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 234				/ Dus nu NIET RenderPageRequestHandler	, die -> .renderAll()	,	
																					////////////////////////////////////////////////////////////////////
		final boolean isAjax = ((WebRequest)requestCycle.getRequest()).isAjax();
true
/ TODO
			component = getComponent();
Clock
/ TODO
		final boolean isStateless = page.isPageStateless();
false
/ TODO
		invokeListener();															/ Dit is dus wat onze handler nu doet, ipv -> renderAll()	,
																					/////////////////////////////////////////////////////////////////////

	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
				handler.respond(RequestCycle.this);

	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
			respond(handler);

	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
			IRequestHandler handler = resolveRequestHandler();
handler	ListenerInterfaceRequestHandler  (id=7880)					/ Dus GEEN RenderPageRequestHandler	,	
/ TODO
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/////////////////////////////////////////////////
/ Deze listener moet van het ajax req komen	, want normaal geven we Enter op de url in de browser -> get url, en dan RenderPageRequestHandler	,

/we gaan debug	,

AjaxSelfUpdatingTimerBehavior(AbstractDefaultAjaxBehavior).onRequest() line: 587	
		WebApplication app = (WebApplication)getComponent().getApplication();
		AjaxRequestTarget target = app.newAjaxRequestTarget(getComponent().getPage());
/s
AjaxApplication(WebApplication).newAjaxRequestTarget(Page) line: 907	
		AjaxRequestTarget target = getAjaxRequestTargetProvider().get(page);
/s
WebApplication$DefaultAjaxRequestTargetProvider.get(Page) line: 1073	
			return new AjaxRequestHandler(page);
/s
AjaxRequestHandler.<init>(Page) line: 115	
		update = new XmlPartialPageUpdate(page)
/s
AjaxRequestHandler$1(PartialPageUpdate).<init>(Page) line: 135	
		this.page = page;
		WebResponse response = (WebResponse) page.getResponse();
		bodyBuffer = new ResponseBuffer(response);
		headerBuffer = new ResponseBuffer(response);

/t
AjaxApplication(WebApplication).newAjaxRequestTarget(Page) line: 910	
		AjaxRequestTarget target = getAjaxRequestTargetProvider().get(page);
/d
		return target;
/c
/t
AjaxSelfUpdatingTimerBehavior(AbstractDefaultAjaxBehavior).onRequest() line: 593	
		AjaxRequestTarget target = app.newAjaxRequestTarget(getComponent().getPage());

		RequestCycle requestCycle = RequestCycle.get();
		requestCycle.scheduleRequestHandlerAfterCurrent(target);
/ TODO
		respond(target);
/s
AjaxSelfUpdatingTimerBehavior(AbstractAjaxTimerBehavior).respond(AjaxRequestTarget) line: 126	
		if (shouldTrigger())
		{
			onTimer(target);
/s
AjaxSelfUpdatingTimerBehavior.onTimer(AjaxRequestTarget) line: 51	
		target.add(getComponent());
/s
AjaxRequestHandler.add(Component...) line: 231	
		for (final Component component : components)
		{
			add(component, component.getMarkupId());						/ is gen	,
component.getMarkupId()="markup2"
/s
AjaxRequestHandler.add(Component, String) line: 238	
		update.add(component, markupId);
/s
AjaxRequestHandler$1(PartialPageUpdate).add(Component, String) line: 390	
		component.setMarkupId(markupId);									/ markupId is WH de id die we in HTML zien , bijv clock2
/s
Clock(Component).setMarkupId(String) line: 2923	
		setMarkupIdImpl(markupId);
/s
Clock(Component).setMarkupIdImpl(Object) line: 2878	
		setOutputMarkupId(true);
		generatedMarkupId = -1;
		setMetaData(MARKUP_ID_KEY, (String)markupId);
/ TODO
/t
AjaxRequestHandler$1(PartialPageUpdate).add(Component, String) line: 391	
		component.setMarkupId(markupId);
/d
		markupIdToComponent.put(markupId, component);

this	AjaxRequestHandler$1  (id=7952)	
	appendJavaScripts	ArrayList<E>  (id=7954)	
	bodyBuffer	PartialPageUpdate$ResponseBuffer  (id=7955)	
	componentsFrozen	false	
	domReadyJavaScripts	ArrayList<E>  (id=7960)	
	header	null	
	headerBuffer	PartialPageUpdate$ResponseBuffer  (id=7961)	
	headerRendering	false	
	headerResponse	null	
	markupIdToComponent	LinkedHashMap<K,V>  (id=7962)	
/=
{clock2=[Component id = clock]}
	page	ClockPage  (id=7633)	
	prependJavaScripts	ArrayList<E>  (id=7963)	
	this$0	AjaxRequestHandler  (id=7939)	

/ Intermezzo

/ In AjaxRequestHandler is update=XmlPartialPageUpdate	,

/ Einde Intermezzo

/t
AjaxSelfUpdatingTimerBehavior.onTimer(AjaxRequestTarget) line: 52	
		target.add(getComponent());
/d
/t
AjaxSelfUpdatingTimerBehavior(AbstractAjaxTimerBehavior).respond(AjaxRequestTarget) line: 133	
		if (shouldTrigger())
		{
			onTimer(target);
/d
			if (shouldTrigger())
			{
				// re-add timeout
				hasTimeout = false;

				addTimeout(target.getHeaderResponse());
/s
AjaxRequestHandler.getHeaderResponse() line: 419	
		return update.getHeaderResponse();
/s
AjaxRequestHandler$1(PartialPageUpdate).getHeaderResponse() line: 463	
			headerResponse = new PartialHeaderResponse();
/t
/s
AjaxSelfUpdatingTimerBehavior(AbstractAjaxTimerBehavior).addTimeout(IHeaderResponse) line: 193	

this	AjaxSelfUpdatingTimerBehavior  (id=7576)	
	component	Clock  (id=7567)	
	hasTimeout	true	
	stopped	false	
	updateInterval	Duration  (id=7609)	
5 seconds

			headerResponse.render(
				OnLoadHeaderItem.forScript(getJsTimeoutCall(updateInterval)));
/s
AjaxSelfUpdatingTimerBehavior(AbstractAjaxTimerBehavior).getJsTimeoutCall(Duration) line: 111	
		CharSequence js = getCallbackScript();
/s
AjaxSelfUpdatingTimerBehavior(AbstractDefaultAjaxBehavior).getCallbackScript() line: 453	
		return getCallbackScript(getComponent());
/s
AjaxSelfUpdatingTimerBehavior(AbstractDefaultAjaxBehavior).getCallbackScript(Component) line: 465	
->		CharSequence ajaxAttributes = renderAjaxAttributes(component);
		return "Wicket.Ajax.ajax(" + ajaxAttributes + ");";
/s
AjaxSelfUpdatingTimerBehavior(AbstractDefaultAjaxBehavior).renderAjaxAttributes(Component) line: 184	
/=
	/**
	 * <pre>
	 * 				{
	 * 					u: 'editable-label?6-1.IBehaviorListener.0-text1-label',  // url
	 * 					m: 'POST',          // method name. Default: 'GET'
	 * 					c: 'label7',        // component id (String) or window for page
	 * 					e: 'click',         // event name
	 * 					sh: [],             // list of success handlers
	 * 					fh: [],             // list of failure handlers
	 * 					pre: [],            // list of preconditions. If empty set default : Wicket.$(settings{c}) !== null
	 * 					ep: {},             // extra parameters
	 * 					async: true|false,  // asynchronous XHR or not
	 * 					ch: 'someName|d',   // AjaxChannel
	 * 					i: 'indicatorId',   // indicator component id
	 * 					ad: true,           // allow default
	 * 				}
	 * </pre>
	 * 
	 * @param component
	 *            the component with that behavior
	 * @return the attributes as string in JSON format
	 */
	protected final CharSequence renderAjaxAttributes(final Component component)
		AjaxRequestAttributes attributes = getAttributes();

attributes	AjaxRequestAttributes  (id=7662)	
	ajaxCallListeners	null	
	async	true	
	channel	null	
	childSelector	null	
	dataType	"xml" (id=7650)	
	dynamicExtraParameters	null	
	eventNames	String[0]  (id=7667)	
	eventPropagation	AjaxRequestAttributes$EventPropagation  (id=7652)	
	extraParameters	null	
	formId	null	
	method	AjaxRequestAttributes$Method  (id=7653)	
GET
	multipart	false	
	preventDefault	false	
	requestTimeout	null	
	serializeRecursively	false	
	submittingComponentName	null	
	throttlingSettings	null	
	wicketAjaxResponse	true	

		return renderAjaxAttributes(component, attributes);
/s
AjaxSelfUpdatingTimerBehavior(AbstractDefaultAjaxBehavior).renderAjaxAttributes(Component, AjaxRequestAttributes) line: 201	
		JSONObject attributesJson = new JSONObject();
		try
		{
			attributesJson.put(AjaxAttributeName.URL.jsonName(), getCallbackUrl());
/s
AjaxSelfUpdatingTimerBehavior(AbstractAjaxBehavior).getCallbackUrl() line: 86	
		rli = IBehaviorListener.INTERFACE;

rli	RequestListenerInterface  (id=7563)	
	includeRenderCount	true	
	listenerInterfaceClass	Class<T> (org.apache.wicket.behavior.IBehaviorListener) (id=3415)	
	method	Method  (id=7579)							/ public abstract void org.apache.wicket.behavior.IBehaviorListener.onRequest()
	name	"IBehaviorListener" (id=7591)	
	renderPageAfterInvocation	true	

		return getComponent().urlFor(this, rli, new PageParameters());
./clock?2-3.IBehaviorListener.0-clock
/ TODO
/t
AjaxSelfUpdatingTimerBehavior(AbstractDefaultAjaxBehavior).renderAjaxAttributes(Component, AjaxRequestAttributes) line: 201	
			attributesJson.put(AjaxAttributeName.URL.jsonName(), getCallbackUrl());
/pd
{"u":"./clock?2-3.IBehaviorListener.0-clock"}
/d
			Method method = attributes.getMethod();
GET
			if (component instanceof Page == false)
			{
				String componentId = component.getMarkupId();
clock2
				attributesJson.put(AjaxAttributeName.MARKUP_ID.jsonName(), componentId);
{"u":"./clock?2-3.IBehaviorListener.0-clock","c":"clock2"}

		String attributesAsJson = attributesJson.toString();
{"u":"./clock?2-3.IBehaviorListener.0-clock","c":"clock2"}
		return attributesAsJson;
/t
AjaxSelfUpdatingTimerBehavior(AbstractDefaultAjaxBehavior).getCallbackScript(Component) line: 466	
		CharSequence ajaxAttributes = renderAjaxAttributes(component);
/d
		return "Wicket.Ajax.ajax(" + ajaxAttributes + ");";
/t
AjaxSelfUpdatingTimerBehavior(AbstractAjaxTimerBehavior).getJsTimeoutCall(Duration) line: 113	
		CharSequence js = getCallbackScript();
/d
Wicket.Ajax.ajax({"u":"./clock?2-3.IBehaviorListener.0-clock","c":"clock2"});

		return String.format("Wicket.Timer.set('%s', function(){%s}, %d);",
				getComponent().getMarkupId(), js, updateInterval.getMilliseconds());
"Wicket.Timer.set('clock2', function(){Wicket.Ajax.ajax({"u":"./clock?2-3.IBehaviorListener.0-clock","c":"clock2"});}, 5000);" 
/t
AjaxSelfUpdatingTimerBehavior(AbstractAjaxTimerBehavior).addTimeout(IHeaderResponse) line: 197	
			headerResponse.render(
				OnLoadHeaderItem.forScript(getJsTimeoutCall(updateInterval)));
/pd
/s
OnLoadHeaderItem.forScript(CharSequence) line: 47	
/=
	public static OnLoadHeaderItem forScript(CharSequence javaScript)
javaScript	"Wicket.Timer.set('clock2', function(){Wicket.Ajax.ajax({"u":"./clock?2-3.IBehaviorListener.0-clock","c":"clock2"});}, 5000);" (id=7744)	

		return new OnLoadHeaderItem(javaScript);
/t
/s
PartialPageUpdate$PartialHeaderResponse.render(HeaderItem) line: 573	
/=
		public void render(HeaderItem item)
item	OnLoadHeaderItem  (id=7746)	
	javaScript	"Wicket.Timer.set('clock2', function(){Wicket.Ajax.ajax({"u":"./clock?2-3.IBehaviorListener.0-clock","c":"clock2"});}, 5000);" (id=7744)	

			if (item instanceof OnLoadHeaderItem)
			{
				if (!wasItemRendered(item))
				{
					PartialPageUpdate.this.appendJavaScript(((OnLoadHeaderItem) item).getJavaScript());
/s
AjaxRequestHandler$1(PartialPageUpdate).appendJavaScript(CharSequence) line: 338	
		appendJavaScripts.add(javascript);
/t
PartialPageUpdate$PartialHeaderResponse.render(HeaderItem) line: 588	
					PartialPageUpdate.this.appendJavaScript(((OnLoadHeaderItem) item).getJavaScript());
/d
					markItemRendered(item);
/s
PartialPageUpdate$PartialHeaderResponse(HeaderResponse).markItemRendered(HeaderItem) line: 71	
		for (Object curToken : item.getRenderTokens())
/s
OnLoadHeaderItem.getRenderTokens() line: 95	
		return Collections.singletonList("javascript-load-" + getJavaScript());
[javascript-load-Wicket.Timer.set('clock2', function(){Wicket.Ajax.ajax({"u":"./clock?2-3.IBehaviorListener.0-clock","c":"clock2"});}, 5000);]
/ 'n Iterable<T>	,

/t
PartialPageUpdate$PartialHeaderResponse(HeaderResponse).markItemRendered(HeaderItem) line: 73	
		for (Object curToken : item.getRenderTokens())
		{
			markRendered(curToken);
curToken= javascript-load-Wicket.Timer.set('clock2', function(){Wicket.Ajax.ajax({"u":"./clock?2-3.IBehaviorListener.0-clock","c":"clock2"});}, 5000);
/ 'n String
/s
PartialPageUpdate$PartialHeaderResponse(HeaderResponse).markRendered(Object) line: 46	
		rendered.add(object);
/t
AjaxSelfUpdatingTimerBehavior(AbstractAjaxTimerBehavior).respond(AjaxRequestTarget) line: 135	
			if (shouldTrigger())
			{
				// re-add timeout
				hasTimeout = false;

				addTimeout(target.getHeaderResponse());
/d
				return;
/t
AjaxSelfUpdatingTimerBehavior(AbstractDefaultAjaxBehavior).onRequest() line: 593	
		respond(target);
/d
	ListenerInterfaceRequestHandler.invokeListener() line: 248		
		invokeListener();										
/d
/t
RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 97	
/=
	public void execute(final IRequestHandler handler)
handler	ListenerInterfaceRequestHandler  (id=7530)	
			respond(handler);
/d
		IRequestHandler scheduled = scheduledAfterCurrent;
scheduled	AjaxRequestHandler  (id=7601)	

		else if (scheduled != null)
		{
			execute(scheduled);
/s
RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
/=
	public void execute(final IRequestHandler handler)
handler	AjaxRequestHandler  (id=7601)	
			respond(handler);
/s
RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
				handler.respond(RequestCycle.this);
/s
AjaxRequestHandler.respond(IRequestCycle) line: 324	
		final Application app = page.getApplication();
		page.send(app, Broadcast.BREADTH, this);
/ WH NIETS 

/ NIETS	,
/s
ClockPage(Component).send(IEventSink, Broadcast, T) line: 4514	
		new ComponentEventSender(this, getApplication().getFrameworkSettings()).send(sink, type,
			payload);
/s
ComponentEventSender.<init>(Component, IEventDispatcher) line: 54	
		this.source = source;
ClockPage
		this.dispatcher = dispatcher;
dispatcher	FrameworkSettings  (id=7790)	
/t
/s
ComponentEventSender.send(IEventSink, Broadcast, T) line: 60	
		ComponentEvent<?> event = new ComponentEvent<T>(sink, source, type, payload);

this	ComponentEventSender  (id=7821)	
	dispatcher	FrameworkSettings  (id=7790)	
	source	ClockPage  (id=7551)	
sink	AjaxApplication  (id=7599)	
type	Broadcast  (id=7789)	
payload	AjaxRequestHandler  (id=7601)	

		switch (type)
		{
			case BREADTH :
				breadth(event);
/s
ComponentEventSender.breadth(ComponentEvent<?>) line: 109	
/=
	private void breadth(final ComponentEvent<?> event)

event	ComponentEvent<T>  (id=7844)	
	payload	AjaxRequestHandler  (id=7601)	
	shallow	false	
	sink	AjaxApplication  (id=7599)	
	source	ClockPage  (id=7551)	
	stop	false	
	type	Broadcast  (id=7789)	

		IEventSink sink = event.getSink();
		boolean targetsApplication = sink instanceof Application;
true
		boolean targetsSession = targetsApplication || sink instanceof Session;
true
		boolean targetsCycle = targetsSession || sink instanceof RequestCycle;
true
		boolean targetsComponent = sink instanceof Component;
false

		if (!targetsComponent && !targetsCycle)
/NEE
		if (targetsApplication)
/ JA
		{
			dispatcher.dispatchEvent(source.getApplication(), event, null);
/s
FrameworkSettings.dispatchEvent(Object, IEvent<?>, Component) line: 145	
		else if (sink instanceof IEventSink)
		{
			((IEventSink)sink).onEvent(event);
/ NIETS
		if (eventDispatchers == null)
		{
			return;
/t
		if (targetsSession)
		{
			dispatcher.dispatchEvent(source.getSession(), event, null);
/ Hetzelfde	,
		Component cursor = targetsCycle ? source.getPage() : (Component)sink;
cursor	ClockPage  (id=7551)	
		dispatchToComponent(dispatcher, cursor, event);
/s
ComponentEventSender.dispatchToComponent(IEventDispatcher, Component, ComponentEvent<?>) line: 298	
/=
	private static void dispatchToComponent(IEventDispatcher dispatcher, Component object,
		ComponentEvent<?> e)
		List<? extends Behavior> behaviors = object.getBehaviors();
null
object=ClockPage

/t
AjaxRequestHandler.respond(IRequestCycle) line: 352	
		page.send(app, Broadcast.BREADTH, this);
/d
/ Einde NIETS

		final String encoding = app.getRequestCycleSettings().getResponseRequestEncoding();
UTF-8
		update.setContentType(response, encoding);
/s
			response.setContentType("text/xml; charset=" + encoding);

		final StringResponse bodyResponse = new StringResponse();
		update.writeTo(bodyResponse, encoding);
/s
AjaxRequestHandler$1(PartialPageUpdate).writeTo(Response, String) line: 153	
			writeHeader(response, encoding);
/s
AjaxRequestHandler$1(XmlPartialPageUpdate).writeHeader(Response, String) line: 57	
		response.write("<?xml version=\"1.0\" encoding=\"");
		response.write(encoding);
		response.write("\"?>");
		response.write(START_ROOT_ELEMENT);
<ajax-response>
/t
AjaxRequestHandler$1(PartialPageUpdate).writeTo(Response, String) line: 155	
			writeHeader(response, encoding);
/d
			onBeforeRespond(response);
/ NIETS	,
/s
AjaxRequestHandler$1.onBeforeRespond(Response) line: 125	
/=
	public AjaxRequestHandler(final Page page)
	{
		update = new XmlPartialPageUpdate(page)
		{
->			protected void onBeforeRespond(final Response response)
/t
AjaxRequestHandler$1(PartialPageUpdate).writeTo(Response, String) line: 155	
			onBeforeRespond(response);
/d
			writeComponents(response, encoding);
/s
AjaxRequestHandler$1(PartialPageUpdate).writeComponents(Response, String) line: 245	

/ Intermezzo

/ stack

/s
	AjaxRequestHandler$1(PartialPageUpdate).writeTo(Response, String) line: 153	

	AjaxRequestHandler.respond(IRequestCycle) line: 358	
		update.writeTo(bodyResponse, encoding);

this	AjaxRequestHandler  (id=7452)	
	update	AjaxRequestHandler$1  (id=7451)	 AjaxRequestHandler$XmlPartialPageUpdate

	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
				handler.respond(RequestCycle.this);

	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
			respond(handler);
handler	AjaxRequestHandler  (id=7452)	

	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 97	
			respond(handler);
handler	ListenerInterfaceRequestHandler  (id=7443)	
/ TODO
->			execute(scheduled);
scheduled	AjaxRequestHandler  (id=7452)	


	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ See TODO

/ Einde Intermezzo

		// process component markup
		for (Map.Entry<String, Component> stringComponentEntry : markupIdToComponent.entrySet())
stringComponentEntry	LinkedHashMap$Entry<K,V>  (id=7503)	
/=
clock3=[Component id = clock]
		{
			final Component component = stringComponentEntry.getValue();
component	Clock  (id=7459)	

			if (!containsAncestorFor(component))
/ JA	, 
/ this=AjaxRequestHandler$XmlPartialPageUpdate, of netter de this.markupIdToConponent heeft niet de ClockPage	, (alleen de Clock)	, 
			{
				writeComponent(response, component.getAjaxRegionMarkupId(), component, encoding);
/s
AjaxRequestHandler$1(XmlPartialPageUpdate).writeComponent(Response, String, Component, String) line: 66	
		component.setOutputMarkupId(true);
component	Clock  (id=7459)	

		// substitute our encoding response for the old one so we can capture
		// component's markup in a manner safe for transport inside CDATA block
		Response oldResponse = RequestCycle.get().setResponse(bodyBuffer);
/ TODO

		try
		{
			bodyBuffer.reset();
			
			page.startComponentRender(component);
/s
Page.class.startComponentRender()
				renderedComponents = null;
/t
			try{
				component.prepareForRender();
/ TODO
				// render any associated headers of the component
				writeHeaderContribution(response, component);
/s
AjaxRequestHandler$1(PartialPageUpdate).writeHeaderContribution(Response, Component) line: 481	

		// create the htmlheadercontainer if needed
		if (header == null)
		{
			header = new PartialHtmlHeaderContainer(this);
/s
PartialPageUpdate$PartialHtmlHeaderContainer.<init>(PartialPageUpdate) line: 543	
			super(HtmlHeaderSectionHandler.HEADER_ID);
/ HtmlHeaderSectionHandler.HEADER_ID='_header_'
/ TODO
			page.addOrReplace(header);
/s
ClockPage(MarkupContainer).addOrReplace(Component...) line: 267	
			else
			{
				replace(child);
child	PartialPageUpdate$PartialHtmlHeaderContainer  (id=7548)	
/s
ClockPage(MarkupContainer).replace(Component) line: 836	
		if (child.getParent() != this)
/ JA
null!=ClockPage
			final Component replaced = children_put(child);
/s
ClockPage(MarkupContainer).children_put(Component) line: 1342	
		if (children instanceof List)
		{
			List<Component> childrenList = children();

this	ClockPage  (id=7407)	
child	PartialPageUpdate$PartialHtmlHeaderContainer  (id=7548)	
childrenList	ArrayList<E>  (id=7526)	
	elementData	Object[10]  (id=7569)	
		[0]	WicketExampleHeader  (id=7571)	
		[1]	BookmarkablePageLink<T>  (id=7572)	
		[2]	Clock  (id=7459)	
		[3]	HtmlHeaderContainer  (id=7418)	
	size	4	

			// first see if the child replaces an existing child
			for (int i = 0; i < childrenList.size(); i++)
			{
				Component curChild = childrenList.get(i);
				if (curChild.getId().equals(child.getId()))
/ JA	, 
/ de laatste	,
				{
					return childrenList.set(i, child);
/t
ClockPage(MarkupContainer).replace(Component) line: 839	
			final Component replaced = children_put(child);

this	ClockPage  (id=7407)	
	autoIndex	0	
	children	ArrayList<E>  (id=7526)	
		elementData	Object[10]  (id=7569)	
			[0]	WicketExampleHeader  (id=7571)	
			[1]	BookmarkablePageLink<T>  (id=7572)	
			[2]	Clock  (id=7459)	
			[3]	PartialPageUpdate$PartialHtmlHeaderContainer  (id=7548)			/ vervangen	,
		size	4	
replaced	HtmlHeaderContainer  (id=7418)	
/ De oude	,

			// first remove the component.
			removedComponent(replaced);
/s
ClockPage(MarkupContainer).removedComponent(Component) line: 1472	
		final Page page = component.findPage();
		component.detach();
/s
HtmlHeaderContainer(Component).detach() line: 1174	
			detachModels();
/ TODO
			// detach any behaviors
			new Behaviors(this).detach();
/ TODO
		detachChildren();
/ TODO
...
/ TODO
/t
ClockPage(MarkupContainer).removedComponent(Component) line: 1477	
		component.detach();
/d
		component.internalOnRemove();
/ TODO
		// Component is removed
		component.setParent(null);
/t
ClockPage(MarkupContainer).replace(Component) line: 850	
			removedComponent(replaced);
/d
			child.setMarkupId(replaced);
			// then add the other one.
			addedComponent(child);
/ TODO
...
/t
AjaxRequestHandler$1(PartialPageUpdate).writeHeaderContribution(Response, Component) line: 485	
			page.addOrReplace(header);
/d
		// save old response, set new
		Response oldResponse = requestCycle.setResponse(headerBuffer);

		try {
			headerBuffer.reset();

			IHeaderRenderStrategy strategy = AbstractHeaderRenderStrategy.get();
strategy	ChildFirstHeaderRenderStrategy  (id=7660)	

			strategy.renderHeader(header, null, component);
/s
ChildFirstHeaderRenderStrategy.renderHeader(HtmlHeaderContainer, HtmlHeaderContainer$HeaderStreamState, Component) line: 54	
/=
	public void renderHeader(final HtmlHeaderContainer headerContainer,
		HeaderStreamState headerStreamState, final Component rootComponent)

this	ChildFirstHeaderRenderStrategy  (id=7660)	
headerContainer	PartialPageUpdate$PartialHtmlHeaderContainer  (id=7548)	
headerStreamState	null	
rootComponent	Clock  (id=7459)	

		// First the application level headers
		renderApplicationLevelHeaders(headerContainer);
/ NIETS
		// Then its child hierarchy
		renderChildHeaders(headerContainer, rootComponent);
/ NIETS
		// Then the root component's headers
		renderRootComponent(headerContainer, headerStreamState, rootComponent);
/s
ChildFirstHeaderRenderStrategy(AbstractHeaderRenderStrategy).renderRootComponent(HtmlHeaderContainer, HtmlHeaderContainer$HeaderStreamState, Component) line: 118	

this	ChildFirstHeaderRenderStrategy  (id=7660)	
headerContainer	PartialPageUpdate$PartialHtmlHeaderContainer  (id=7548)	
headerStreamState	null	
rootComponent	Clock  (id=7459)	

		headerContainer.renderHeaderTagBody(headerStreamState);
/ NIETS
		rootComponent.internalRenderHead(headerContainer);
/s
Clock(Component).internalRenderHead(HtmlHeaderContainer) line: 2691	
/=
	 * Print to the web response what ever the component wants to contribute to the head section.
	 * Make sure that all attached behaviors are asked as well.
	 */
	public void internalRenderHead(final HtmlHeaderContainer container)

this	Clock  (id=7459)	
container	PartialPageUpdate$PartialHtmlHeaderContainer  (id=7548)	

			IHeaderResponse response = container.getHeaderResponse();
response	ResourceAggregator  (id=7678)	

			// Allow component to contribute
			if (response.wasRendered(this) == false)
/ JA
			{
				StringResponse markupHeaderResponse = new StringResponse();

				Response oldResponse = getResponse();
/s
					return getRequestCycle().getResponse()
oldResponse	PartialPageUpdate$ResponseBuffer  (id=7457)	

				RequestCycle.get().setResponse(markupHeaderResponse);

				try
				{
					// Make sure the markup source strategy contributes to the header first
					// to be backward compatible. WICKET-3761
					getMarkupSourcingStrategy().renderHead(this, container);
/ NIETS
					CharSequence headerContribution = markupHeaderResponse.getBuffer();
					if (Strings.isEmpty(headerContribution) == false)
/ NEE
				finally
				{
					RequestCycle.get().setResponse(oldResponse);

				// Then let the component itself to contribute to the header
				renderHead(this, response);
/s
					renderHead(response);
/ NIETS
/t
Clock(Component).internalRenderHead(HtmlHeaderContainer) line: 2727	
				renderHead(this, response);
/d
			// Then ask all behaviors
			for (Behavior behavior : getBehaviors())

behavior	AjaxSelfUpdatingTimerBehavior  (id=7446)	

			{
				if (isBehaviorAccepted(behavior))
				{
					if (response.wasRendered(behavior) == false)
					{
						behavior.renderHead(this, response);
/s
AjaxSelfUpdatingTimerBehavior(AbstractDefaultAjaxBehavior).renderHead(Component, IHeaderResponse) line: 96	
		super.renderHead(component, response);
/ NIETS
		CoreLibrariesContributor.contributeAjax(component.getApplication(), response);
/s
CoreLibrariesContributor.contributeAjax(Application, IHeaderResponse) line: 60	

application	AjaxApplication  (id=7454)	
response	ResourceAggregator  (id=7678)	

		JavaScriptLibrarySettings jsLibrarySettings = application.getJavaScriptLibrarySettings();

application	AjaxApplication  (id=7454)	
response	ResourceAggregator  (id=7678)	
jsLibrarySettings	JavaScriptLibrarySettings  (id=7744)	
	jQueryReference	JavaScriptResourceReference  (id=7748)	
		data	ResourceReference$Key  (id=7767)	
scope: org.apache.wicket.resource.JQueryResourceReference; name: jquery/jquery-2.2.0.js; locale: null; style: null; variation: null
		readBuffered	true	
		urlAttributesCacheMap	ConcurrentHashMap<K,V>  (id=7768)	
	wicketAjaxDebugReference	WicketAjaxDebugJQueryResourceReference  (id=7749)	
		data	ResourceReference$Key  (id=7807)	
scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-ajax-jquery-debug.js; locale: null; style: null; variation: null
		readBuffered	true	
		urlAttributesCacheMap	ConcurrentHashMap<K,V>  (id=7808)	
	wicketAjaxReference	WicketAjaxJQueryResourceReference  (id=7750)	
		data	ResourceReference$Key  (id=7756)	
scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-ajax-jquery.js; locale: null; style: null; variation: null
		readBuffered	true	
		urlAttributesCacheMap	ConcurrentHashMap<K,V>  (id=7757)	
	wicketEventReference	WicketEventJQueryResourceReference  (id=7751)	
		data	ResourceReference$Key  (id=7762)	
scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-event-jquery.js; locale: null; style: null; variation: null
		readBuffered	true	
		urlAttributesCacheMap	ConcurrentHashMap<K,V>  (id=7763)	

/ Intermezzo

/ BEHAVIORS

/ Waar zijn deze 3 behviors ...	? 
/ Wat hebben de js met behavior te maken?

[eric@localhost wicket]$ vi ./wicket-core/src/main/java/org/apache/wicket/ajax/WicketEventJQueryResourceReference.java

package org.apache.wicket.ajax;
public class WicketEventJQueryResourceReference extends JavaScriptResourceReference
{
    private WicketEventJQueryResourceReference()
    {
        super(AbstractDefaultAjaxBehavior.class, "res/js/wicket-event-jquery.js");
    }
/ TODO

$ vi ./wicket-core/src/main/java/org/apache/wicket/ajax/WicketAjaxJQueryResourceReference.java

package org.apache.wicket.ajax;
public class WicketAjaxJQueryResourceReference extends JavaScriptResourceReference

    private WicketAjaxJQueryResourceReference()
    {
        super(AbstractDefaultAjaxBehavior.class, "res/js/wicket-ajax-jquery.js");
/ TODO

$ vi ./wicket-core/src/main/java/org/apache/wicket/ajax/WicketAjaxDebugJQueryResourceReference.java

package org.apache.wicket.ajax;
public class WicketAjaxDebugJQueryResourceReference extends JavaScriptResourceReference
{
    private WicketAjaxDebugJQueryResourceReference()
    {
        super(AbstractDefaultAjaxBehavior.class, "res/js/wicket-ajax-jquery-debug.js");
    }
/ TODO


/ Einde Intermezzo

/s
/ stack trace

	WicketEventJQueryResourceReference.getDependencies() line: 56	
this=scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-event-jquery.js; locale: null; style: null; variation: null

			backingLibraryReference = Application.get()
				.getJavaScriptLibrarySettings()
				.getJQueryReference();
scope: org.apache.wicket.resource.JQueryResourceReference; name: jquery/jquery-2.2.0.js; locale: null; style: null; variation: null

	JavaScriptReferenceHeaderItem.getDependencies() line: 92	
		return getReference().getDependencies();

reference=JavaScriptReferenceHeaderItem  (id=7614)	
	async	false	
	charset	null	
	condition	null	
	defer	false	
	markupId	null	
	pageParameters	null	
	reference	WicketEventJQueryResourceReference  (id=7447)	


	ResourceAggregator.renderDependencies(HeaderItem, Set<HeaderItem>) line: 240	
		for (HeaderItem curDependency : item.getDependencies())
/ (***)

	ResourceAggregator.recordHeaderItem(HeaderItem, Set<HeaderItem>) line: 226	
		renderDependencies(item, depsDone);

	ResourceAggregator.renderDependencies(HeaderItem, Set<HeaderItem>) line: 245	
		for (HeaderItem curDependency : item.getDependencies())
/ (**)
		{
			if (depsDone.add(curDependency))
			{
				recordHeaderItem(curDependency, depsDone);
curDependency=JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-event-jquery.js; locale: null; style: null; variation: null, null)
depsDone=[JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-ajax-jquery-debug.js; locale: null; style: null; variation: null, null), JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-ajax-jquery.js; locale: null; style: null; variation: null, null), JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-event-jquery.js; locale: null; style: null; variation: null, null)]

	ResourceAggregator.recordHeaderItem(HeaderItem, Set<HeaderItem>) line: 226	
		renderDependencies(item, depsDone);
item=JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-ajax-jquery.js; locale: null; style: null; variation: null, null)

	ResourceAggregator.renderDependencies(HeaderItem, Set<HeaderItem>) line: 245	
		for (HeaderItem curDependency : item.getDependencies())
/ (*) 
		{
			if (depsDone.add(curDependency))
			{
				recordHeaderItem(curDependency, depsDone);
curDependency=JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-ajax-jquery.js; locale: null; style: null; variation: null, null)
depsDone=[JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-ajax-jquery-debug.js; locale: null; style: null; variation: null, null), JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-ajax-jquery.js; locale: null; style: null; variation: null, null)]

	ResourceAggregator.recordHeaderItem(HeaderItem, Set<HeaderItem>) line: 226	
		renderDependencies(item, depsDone);
item=JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-ajax-jquery-debug.js; locale: null; style: null; variation: null, null)

	ResourceAggregator.render(HeaderItem) line: 273	
			recordHeaderItem(item, depsDone);
item=JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-ajax-jquery-debug.js; locale: null; style: null; variation: null, null)

	CoreLibrariesContributor.contributeAjax(Application, IHeaderResponse) line: 65	
			response.render(JavaScriptHeaderItem.forReference(jsLibrarySettings.getWicketAjaxDebugReference()));

/ Einde stacktrace	,

/ debug	,

/ Bij (*)
/s
JavaScriptReferenceHeaderItem.getDependencies() line: 92	
		return getReference().getDependencies();

this	JavaScriptReferenceHeaderItem  (id=7592)	
	async	false	
	charset	null	
	condition	null	
	defer	false	
	markupId	null	
	pageParameters	null	
	reference	WicketAjaxDebugJQueryResourceReference  (id=7445)	
/s
WicketAjaxDebugJQueryResourceReference.getDependencies() line: 53	
			wicketAjaxReference = Application.get().getJavaScriptLibrarySettings().getWicketAjaxReference();
scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-ajax-jquery.js; locale: null; style: null; variation: null

/ Bij (**)
JavaScriptReferenceHeaderItem.getDependencies() line: 92	

this	JavaScriptReferenceHeaderItem  (id=7603)	
	async	false	
	charset	null	
	condition	null	
	defer	false	
	markupId	null	
	pageParameters	null	
	reference	WicketAjaxJQueryResourceReference  (id=7446)	
/s
JavaScriptReferenceHeaderItem.getDependencies() line: 92	
		return getReference().getDependencies();
/s
WicketAjaxJQueryResourceReference.getDependencies() line: 53	
			wicketEventReference = Application.get().getJavaScriptLibrarySettings().getWicketEventReference();
scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-event-jquery.js; locale: null; style: null; variation: null

/  Na (***)	,
/t
ResourceAggregator.renderDependencies(HeaderItem, Set<HeaderItem>) line: 245	
		for (HeaderItem curDependency : item.getDependencies())
/d
JavaScriptReferenceHeaderItem(scope: org.apache.wicket.resource.JQueryResourceReference; name: jquery/jquery-2.2.0.js; locale: null; style: null; variation: null, null)
		{
			curDependency = getItemToBeRendered(curDependency);
			if (depsDone.add(curDependency))
depsDone=[JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-ajax-jquery-debug.js; locale: null; style: null; variation: null, null), JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-ajax-jquery.js; locale: null; style: null; variation: null, null), JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-event-jquery.js; locale: null; style: null; variation: null, null), JavaScriptReferenceHeaderItem(scope: org.apache.wicket.resource.JQueryResourceReference; name: jquery/jquery-2.2.0.js; locale: null; style: null; variation: null, null)]
			{
				recordHeaderItem(curDependency, depsDone);
/s
ResourceAggregator.recordHeaderItem(HeaderItem, Set<HeaderItem>) line: 226	
		renderDependencies(item, depsDone);
/s
ResourceAggregator.renderDependencies(HeaderItem, Set<HeaderItem>) line: 240	
		for (HeaderItem curDependency : item.getDependencies())
[]
/ Dus geen for loop	,
/ want	,
/s
JavaScriptReferenceHeaderItem.getDependencies() line: 92	
		return getReference().getDependencies();

this	JavaScriptReferenceHeaderItem  (id=7629)	
	async	false	
	charset	null	
	condition	null	
	defer	false	
	markupId	null	
	pageParameters	null	
	reference	JavaScriptResourceReference  (id=7444)	
reference=JavaScriptReferenceHeaderItem(scope: org.apache.wicket.resource.JQueryResourceReference; name: jquery/jquery-2.2.0.js; locale: null; style: null; variation: null, null)
/s
JavaScriptResourceReference(ResourceReference).getDependencies() line: 499	
		return new ArrayList<>();
/t
ResourceAggregator.recordHeaderItem(HeaderItem, Set<HeaderItem>) line: 230	
		renderDependencies(item, depsDone);
/d
item=JavaScriptReferenceHeaderItem(scope: org.apache.wicket.resource.JQueryResourceReference; name: jquery/jquery-2.2.0.js; locale: null; style: null; variation: null, null)
depsDone=[JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-ajax-jquery-debug.js; locale: null; style: null; variation: null, null), JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-ajax-jquery.js; locale: null; style: null; variation: null, null), JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-event-jquery.js; locale: null; style: null; variation: null, null), JavaScriptReferenceHeaderItem(scope: org.apache.wicket.resource.JQueryResourceReference; name: jquery/jquery-2.2.0.js; locale: null; style: null; variation: null, null)]

		RecordedHeaderItem recordedItem = itemsToBeRendered.get(item);
null
itemsToBeRendered={}
		if (recordedItem == null)
		{
			recordedItem = new RecordedHeaderItem(item);
			itemsToBeRendered.put(item, recordedItem);
		}
		recordedItem.addLocation(renderBase, indexInRenderBase, indexInRequest);
		indexInRenderBase++;
		indexInRequest++;

this	ResourceAggregator  (id=7416)	
item	JavaScriptReferenceHeaderItem  (id=7629)	
depsDone	LinkedHashSet<E>  (id=7593)	
recordedItem	ResourceAggregator$RecordedHeaderItem  (id=7652)	
	item	JavaScriptReferenceHeaderItem  (id=7629)	
	locations	ArrayList<E>  (id=7653)	
		elementData	Object[10]  (id=7661)	
			[0]	ResourceAggregator$RecordedHeaderItemLocation  (id=7662)	
				indexInRenderBase	0	
				indexInRequest	0	
				renderBase	AjaxSelfUpdatingTimerBehavior  (id=7396)	
		size	1	

/t
ResourceAggregator.renderDependencies(HeaderItem, Set<HeaderItem>) line: 251	
				recordHeaderItem(curDependency, depsDone);
/d
curDependency=JavaScriptReferenceHeaderItem(scope: org.apache.wicket.resource.JQueryResourceReference; name: jquery/jquery-2.2.0.js; locale: null; style: null; variation: null, null)
			depsDone.remove(curDependency);
/t
ResourceAggregator.recordHeaderItem(HeaderItem, Set<HeaderItem>) line: 227	
		renderDependencies(item, depsDone);
/d
item=JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-event-jquery.js; locale: null; style: null; variation: null, null)
/ Klopt	, we hebben de deps van wicket-event-jquery.js : jquery.js rendered	,

		RecordedHeaderItem recordedItem = itemsToBeRendered.get(item);
null
		if (recordedItem == null)
		{
			recordedItem = new RecordedHeaderItem(item);
			itemsToBeRendered.put(item, recordedItem);
		}
		recordedItem.addLocation(renderBase, indexInRenderBase, indexInRequest);
		indexInRenderBase++;
		indexInRequest++;
/t
ResourceAggregator.renderDependencies(HeaderItem, Set<HeaderItem>) line: 251	

item=JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-ajax-jquery.js; locale: null; style: null; variation: null, null)
		for (HeaderItem curDependency : item.getDependencies())
		{
			curDependency = getItemToBeRendered(curDependency);
			if (depsDone.add(curDependency))
			{
				recordHeaderItem(curDependency, depsDone);
/d
curDependency=JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-event-jquery.js; locale: null; style: null; variation: null, null)
			depsDone.remove(curDependency);
/t
ResourceAggregator.recordHeaderItem(HeaderItem, Set<HeaderItem>) line: 227	
		renderDependencies(item, depsDone);
/d
item=JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-ajax-jquery.js; locale: null; style: null; variation: null, null)
		RecordedHeaderItem recordedItem = itemsToBeRendered.get(item);
		if (recordedItem == null)
		{
			recordedItem = new RecordedHeaderItem(item);
			itemsToBeRendered.put(item, recordedItem);
		}
		recordedItem.addLocation(renderBase, indexInRenderBase, indexInRequest);
		indexInRenderBase++;
		indexInRequest++;

this	ResourceAggregator  (id=7416)	
	domReadyItemsToBeRendered	ArrayList<E>  (id=7435)	
	indexInRenderBase	2	
	indexInRequest	2	
	itemsToBeRendered	LinkedHashMap<K,V>  (id=7436)	
{JavaScriptReferenceHeaderItem(scope: org.apache.wicket.resource.JQueryResourceReference; name: jquery/jquery-2.2.0.js; locale: null; style: null; variation: null, null)=[AjaxSelfUpdatingTimerBehavior@0]:JavaScriptReferenceHeaderItem(scope: org.apache.wicket.resource.JQueryResourceReference; name: jquery/jquery-2.2.0.js; locale: null; style: null; variation: null, null),
JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-event-jquery.js; locale: null; style: null; variation: null, null)=[AjaxSelfUpdatingTimerBehavior@1]:JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-event-jquery.js; locale: null; style: null; variation: null, null),
JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-ajax-jquery.js; locale: null; style: null; variation: null, null)=[AjaxSelfUpdatingTimerBehavior@2]:JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-ajax-jquery.js; locale: null; style: null; variation: null, null)}
	loadItemsToBeRendered	ArrayList<E>  (id=7437)	
	realResponse	PartialPageUpdate$PartialHeaderResponse  (id=7412)	
	renderBase	AjaxSelfUpdatingTimerBehavior  (id=7396)	

/t
ResourceAggregator.renderDependencies(HeaderItem, Set<HeaderItem>) line: 245	

item=JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-ajax-jquery-debug.js; locale: null; style: null; variation: null, null)
		for (HeaderItem curDependency : item.getDependencies())
		{
			curDependency = getItemToBeRendered(curDependency);
			if (depsDone.add(curDependency))
			{
				recordHeaderItem(curDependency, depsDone);
/d
			depsDone.remove(curDependency);
/t
ResourceAggregator.recordHeaderItem(HeaderItem, Set<HeaderItem>) line: 227	
		renderDependencies(item, depsDone);
/d
item=JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-ajax-jquery-debug.js; locale: null; style: null; variation: null, null)
		RecordedHeaderItem recordedItem = itemsToBeRendered.get(item);
		if (recordedItem == null)
		{
			recordedItem = new RecordedHeaderItem(item);
			itemsToBeRendered.put(item, recordedItem);
		}
		recordedItem.addLocation(renderBase, indexInRenderBase, indexInRequest);
		indexInRenderBase++;
		indexInRequest++;

this	ResourceAggregator  (id=7416)	
	domReadyItemsToBeRendered	ArrayList<E>  (id=7435)	
	indexInRenderBase	4	
	indexInRequest	4	
	itemsToBeRendered	LinkedHashMap<K,V>  (id=7436)	
{JavaScriptReferenceHeaderItem(scope: org.apache.wicket.resource.JQueryResourceReference; name: jquery/jquery-2.2.0.js; locale: null; style: null; variation: null, null)=[AjaxSelfUpdatingTimerBehavior@0]:JavaScriptReferenceHeaderItem(scope: org.apache.wicket.resource.JQueryResourceReference; name: jquery/jquery-2.2.0.js; locale: null; style: null; variation: null, null),
JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-event-jquery.js; locale: null; style: null; variation: null, null)=[AjaxSelfUpdatingTimerBehavior@1]:JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-event-jquery.js; locale: null; style: null; variation: null, null),
JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-ajax-jquery.js; locale: null; style: null; variation: null, null)=[AjaxSelfUpdatingTimerBehavior@2]:JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-ajax-jquery.js; locale: null; style: null; variation: null, null),
JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-ajax-jquery-debug.js; locale: null; style: null; variation: null, null)=[AjaxSelfUpdatingTimerBehavior@3]:JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-ajax-jquery-debug.js; locale: null; style: null; variation: null, null)}
	loadItemsToBeRendered	ArrayList<E>  (id=7437)	
	realResponse	PartialPageUpdate$PartialHeaderResponse  (id=7412)	
	renderBase	AjaxSelfUpdatingTimerBehavior  (id=7396)	

/t
CoreLibrariesContributor.contributeAjax(Application, IHeaderResponse) line: 66	
			response.render(JavaScriptHeaderItem.forReference(jsLibrarySettings.getWicketAjaxDebugReference()));
/d
application	AjaxApplication  (id=7404)	
response	ResourceAggregator  (id=7416)	
	domReadyItemsToBeRendered	ArrayList<E>  (id=7435)	
	indexInRenderBase	4	
	indexInRequest	4	
	itemsToBeRendered	LinkedHashMap<K,V>  (id=7436)	
{JavaScriptReferenceHeaderItem(scope: org.apache.wicket.resource.JQueryResourceReference; name: jquery/jquery-2.2.0.js; locale: null; style: null; variation: null, null)=[AjaxSelfUpdatingTimerBehavior@0]:JavaScriptReferenceHeaderItem(scope: org.apache.wicket.resource.JQueryResourceReference; name: jquery/jquery-2.2.0.js; locale: null; style: null; variation: null, null),
JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-event-jquery.js; locale: null; style: null; variation: null, null)=[AjaxSelfUpdatingTimerBehavior@1]:JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-event-jquery.js; locale: null; style: null; variation: null, null),
JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-ajax-jquery.js; locale: null; style: null; variation: null, null)=[AjaxSelfUpdatingTimerBehavior@2]:JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-ajax-jquery.js; locale: null; style: null; variation: null, null),
JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-ajax-jquery-debug.js; locale: null; style: null; variation: null, null)=[AjaxSelfUpdatingTimerBehavior@3]:JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-ajax-jquery-debug.js; locale: null; style: null; variation: null, null)}
	loadItemsToBeRendered	ArrayList<E>  (id=7437)	
	realResponse	PartialPageUpdate$PartialHeaderResponse  (id=7412)	
	renderBase	AjaxSelfUpdatingTimerBehavior  (id=7396)	

			response.render(JavaScriptHeaderItem.forScript("Wicket.Ajax.DebugWindow.enabled=true;", "wicket-ajax-debug-enable"));
/s
JavaScriptHeaderItem.forScript(CharSequence, String) line: 243	

javascript	"Wicket.Ajax.DebugWindow.enabled=true;" (id=7453)	
id	"wicket-ajax-debug-enable" (id=7454)	

		return forScript(javascript, id, null);
/s
JavaScriptHeaderItem.forScript(CharSequence, String, String) line: 260	
		return new JavaScriptContentHeaderItem(javascript, id, condition);
condition=null
/t
CoreLibrariesContributor.contributeAjax(Application, IHeaderResponse) line: 66	
			response.render(JavaScriptHeaderItem.forScript("Wicket.Ajax.DebugWindow.enabled=true;",
				"wicket-ajax-debug-enable"));
/pd
/s
ResourceAggregator.render(HeaderItem) line: 258	
/=
	public void render(HeaderItem item)
item	JavaScriptContentHeaderItem  (id=7458)	

		else
		{
			Set<HeaderItem> depsDone = new LinkedHashSet<>();
			depsDone.add(item);
			recordHeaderItem(item, depsDone);
/s
ResourceAggregator.recordHeaderItem(HeaderItem, Set<HeaderItem>) line: 226	
/=
	private void recordHeaderItem(HeaderItem item, Set<HeaderItem> depsDone)

this	ResourceAggregator  (id=7443)	
item	JavaScriptContentHeaderItem  (id=7458)	
	condition	null	
	javaScript	"Wicket.Ajax.DebugWindow.enabled=true;" (id=7453)	
	markupId	"wicket-ajax-debug-enable" (id=7454)	
depsDone	LinkedHashSet<E>  (id=7464)	
[JavaScriptHeaderItem(Wicket.Ajax.DebugWindow.enabled=true;)]

		renderDependencies(item, depsDone);
/ NIETS	, zijn er niet	,
		RecordedHeaderItem recordedItem = itemsToBeRendered.get(item);
nul
		if (recordedItem == null)

		{
			recordedItem = new RecordedHeaderItem(item);
			itemsToBeRendered.put(item, recordedItem);
		}
this	ResourceAggregator  (id=7443)	
	itemsToBeRendered	LinkedHashMap<K,V>  (id=7448)	
{JavaScriptReferenceHeaderItem(scope: org.apache.wicket.resource.JQueryResourceReference; name: jquery/jquery-2.2.0.js; locale: null; style: null; variation: null, null)=[AjaxSelfUpdatingTimerBehavior@0]:JavaScriptReferenceHeaderItem(scope: org.apache.wicket.resource.JQueryResourceReference; name: jquery/jquery-2.2.0.js; locale: null; style: null; variation: null, null), 
JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-event-jquery.js; locale: null; style: null; variation: null, null)=[AjaxSelfUpdatingTimerBehavior@1]:JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-event-jquery.js; locale: null; style: null; variation: null, null), 
JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-ajax-jquery.js; locale: null; style: null; variation: null, null)=[AjaxSelfUpdatingTimerBehavior@2]:JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-ajax-jquery.js; locale: null; style: null; variation: null, null), 
JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-ajax-jquery-debug.js; locale: null; style: null; variation: null, null)=[AjaxSelfUpdatingTimerBehavior@3]:JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-ajax-jquery-debug.js; locale: null; style: null; variation: null, null), 
JavaScriptHeaderItem(Wicket.Ajax.DebugWindow.enabled=true;)=[]:JavaScriptHeaderItem(Wicket.Ajax.DebugWindow.enabled=true;)}

		recordedItem.addLocation(renderBase, indexInRenderBase, indexInRequest);
/ TODO
		indexInRenderBase++;
		indexInRequest++;

/t
AjaxSelfUpdatingTimerBehavior(AbstractDefaultAjaxBehavior).renderHead(Component, IHeaderResponse) line: 98	
		CoreLibrariesContributor.contributeAjax(component.getApplication(), response);
/d
		Url baseUrl = requestCycle.getUrlRenderer().getBaseUrl();
clock?4
		response.render(JavaScriptHeaderItem.forScript("Wicket.Ajax.baseUrl=\"" + ajaxBaseUrl
			+ "\";", "wicket-ajax-base-url"));
/s
JavaScriptHeaderItem.forScript(CharSequence, String) line: 243	
/=
	public static JavaScriptContentHeaderItem forScript(CharSequence javascript, String id)

javascript	"Wicket.Ajax.baseUrl="clock?4";" (id=7554)	
id	"wicket-ajax-base-url" (id=7555)	

/t
/s
ResourceAggregator.render(HeaderItem) line: 258	
		else
		{
			Set<HeaderItem> depsDone = new LinkedHashSet<>();
			depsDone.add(item);
			recordHeaderItem(item, depsDone);
/s
ResourceAggregator.recordHeaderItem(HeaderItem, Set<HeaderItem>) line: 226	
		renderDependencies(item, depsDone);
/ NIETS	, zijn er niet	,
		RecordedHeaderItem recordedItem = itemsToBeRendered.get(item);
null
		if (recordedItem == null)
		{
			recordedItem = new RecordedHeaderItem(item);
			itemsToBeRendered.put(item, recordedItem);
		}
		recordedItem.addLocation(renderBase, indexInRenderBase, indexInRequest);
		indexInRenderBase++;
		indexInRequest++;

/ Intermezzo

/ 1 in detail	,

this	ResourceAggregator  (id=7443)	
	itemsToBeRendered	LinkedHashMap<K,V>  (id=7448)	
		accessOrder	false	
		entrySet	HashMap$EntrySet  (id=7480)	
		hashSeed	0	
		header	LinkedHashMap$Entry<K,V>  (id=7506)	
		keySet	null	
		loadFactor	0.75	
		modCount	6	
		size	6	
		table	HashMap$Entry<K,V>[16]  (id=7511)	
			[0]	LinkedHashMap$Entry<K,V>  (id=7514)	
				after	LinkedHashMap$Entry<K,V>  (id=7518)	
				before	LinkedHashMap$Entry<K,V>  (id=7515)	
				hash	267752544	
				key	JavaScriptReferenceHeaderItem  (id=7519)	
				next	LinkedHashMap$Entry<K,V>  (id=7521)	
				value	ResourceAggregator$RecordedHeaderItem  (id=7522)	
					item	JavaScriptReferenceHeaderItem  (id=7519)	
						async	false	
						charset	null	
						condition	null	
						defer	false	
						markupId	null	
						pageParameters	null	
						reference	WicketAjaxJQueryResourceReference  (id=7527)	
							data	ResourceReference$Key  (id=7568)	
								locale	null	
								name	"res/js/wicket-ajax-jquery.js" (id=7571)	
								scope	"org.apache.wicket.ajax.AbstractDefaultAjaxBehavior" (id=7572)	
								style	null	
								variation	null	
							readBuffered	true	
							urlAttributesCacheMap	ConcurrentHashMap<K,V>  (id=7569)	
					locations	ArrayList<E>  (id=7525)	
						elementData	Object[10]  (id=7531)	
							[0]	ResourceAggregator$RecordedHeaderItemLocation  (id=7533)	
								indexInRenderBase	2	
								indexInRequest	2	
								renderBase	AjaxSelfUpdatingTimerBehavior  (id=7422)	
						modCount	1	
						size	1	
			[3]	LinkedHashMap$Entry<K,V>  (id=7515)	
			[6]	LinkedHashMap$Entry<K,V>  (id=7516)	
			[9]	LinkedHashMap$Entry<K,V>  (id=7560)	
		threshold	12	
		values	null	
	loadItemsToBeRendered	ArrayList<E>  (id=7449)	
	realResponse	PartialPageUpdate$PartialHeaderResponse  (id=7439)	
	renderBase	AjaxSelfUpdatingTimerBehavior  (id=7422)	


/ Einde Intermezzo

/t
AjaxSelfUpdatingTimerBehavior(AbstractDefaultAjaxBehavior).renderHead(Component, IHeaderResponse) line: 104	
		response.render(JavaScriptHeaderItem.forScript("Wicket.Ajax.baseUrl=\"" + ajaxBaseUrl
			+ "\";", "wicket-ajax-base-url"));
/d
		renderExtraHeaderContributors(component, response);
/ NIETS
/t
AjaxSelfUpdatingTimerBehavior(AbstractAjaxTimerBehavior).renderHead(Component, IHeaderResponse) line: 98	
		super.renderHead(component, response);
/d
		if (isStopped() == false)
		{
			addTimeout(response);
/ NIETS
/t
Clock(Component).internalRenderHead(HtmlHeaderContainer) line: 2728	
			// Then ask all behaviors
			for (Behavior behavior : getBehaviors())
			{
				if (isBehaviorAccepted(behavior))
				{
					if (response.wasRendered(behavior) == false)
					{
						behavior.renderHead(this, response);
/d
						List<IClusterable> pair = Arrays.asList(this, behavior);
[[Component id = clock], org.apache.wicket.ajax.AjaxSelfUpdatingTimerBehavior@10f016db]
						response.markRendered(pair);
/s
ResourceAggregator.markRendered(Object) line: 204	
		super.markRendered(object);
/s
ResourceAggregator(DecoratingHeaderResponse).markRendered(Object) line: 69	
		realResponse.markRendered(object);
/s
PartialPageUpdate$PartialHeaderResponse(HeaderResponse).markRendered(Object) line: 46	
		rendered.add(object);
rendered=
[
[[Component id = clock], org.apache.wicket.ajax.AjaxSelfUpdatingTimerBehavior@10f016db], 
javascript-load-Wicket.Timer.set('clock4', function(){Wicket.Ajax.ajax({"u":"./clock?4-1.IBehaviorListener.0-clock","c":"clock4"});}, 5000);, 
[Component id = clock]
]

/t
Clock(Component).internalRenderHead(HtmlHeaderContainer) line: 2734	
			// Then ask all behaviors
			for (Behavior behavior : getBehaviors())
			{
				if (isBehaviorAccepted(behavior))
				{
					if (response.wasRendered(behavior) == false)
					{
						behavior.renderHead(this, response);
						List<IClusterable> pair = Arrays.asList(this, behavior);
						response.markRendered(pair);
/d
/ volgende	,
			for (Behavior behavior : getBehaviors())
/ is er NIET	,

/t
AjaxRequestHandler$1(PartialPageUpdate).writeHeaderContribution(Response, Component) line: 498	
			strategy.renderHeader(header, null, component);
/d
		} finally {
			// revert to old response
			requestCycle.setResponse(oldResponse);
oldResponse	PartialPageUpdate$ResponseBuffer  (id=7432)	
/ TODO
		writeHeaderContribution(response);
/ NIETS	,
		headerRendering = false;
/t
AjaxRequestHandler$1(XmlPartialPageUpdate).writeComponent(Response, String, Component, String) line: 119	

			page.startComponentRender(component);
/d
				component.render();
component=[Component id = clock]
/s
Clock(Component).render() line: 2301	
				internalPrepareForRender(true);
/ NIETS
			// Do the render
			internalRender();
/s
Clock(Component).internalRender() line: 2345	
		// Make sure there is a markup available for the Component
		IMarkupFragment markup = getMarkup();

/ Clock heeft zelf geen markup	, er is geen Clock.html (WH reden TODO)	, 
/ Wicket vraagt aan parent om markup	, er is wel ClockPage.html	, zoek daarin naar wicket:id TODO

/s
Clock(Component).internalRender() line: 2345	
		IMarkupFragment markup = getMarkup();
/s
Clock(Component).getMarkup() line: 755	
		if (markup != null)
/ NEE
		markup = parent.getMarkup(this);
/s
ClockPage(MarkupContainer).getMarkup(Component) line: 502	
		// Delegate request to attached markup sourcing strategy.
		return getMarkupSourcingStrategy().getMarkup(this, child);
/s
DefaultMarkupSourcingStrategy.getMarkup(MarkupContainer, Component) line: 81	
		IMarkupFragment containerMarkup = container.getMarkup();
container	ClockPage  (id=7428)	
/s
ClockPage(Component).getMarkup() line: 734	
		// Markup already determined or preset?
		if (markup != null)
/ NEE
//////////////////////
/ Dus de ClockPage heeft ook nog geen markup!

		// No parent, than check associated markup files
		if (parent == null)
/ JA
		{
			// Must be a MarkupContainer to have associated markup file
			if (this instanceof MarkupContainer)
/ JA
			{
				MarkupContainer container = (MarkupContainer)this;
				Markup associatedMarkup = container.getAssociatedMarkup();
/s
ClockPage(MarkupContainer).getAssociatedMarkup() line: 456	
			Markup markup = MarkupFactory.get().getMarkup(this, false);
/s
MarkupFactory.get() line: 61	
		return Application.get().getMarkupSettings().getMarkupFactory();
/t
ClockPage(MarkupContainer).getAssociatedMarkup() line: 456	
			Markup markup = MarkupFactory.get().getMarkup(this, false);
/pd
s/
MarkupFactory.getMarkup(MarkupContainer, boolean) line: 194	
		return getMarkup(container, container.getClass(), enforceReload);
/s
MarkupFactory.getMarkup(MarkupContainer, Class<?>, boolean) line: 219	

		IMarkupCache cache = getMarkupCache();

container	ClockPage  (id=7428)	
clazz	Class<T> (org.apache.wicket.examples.ajax.builtin.ClockPage) (id=3416)	
containerClass	Class<T> (org.apache.wicket.examples.ajax.builtin.ClockPage) (id=3416)	
cache	MarkupCache  (id=7685)	
	application	AjaxApplication  (id=7431)	
	markupCache	MarkupCache$DefaultCacheImplementation<K,V>  (id=7700)	
		cache	ConcurrentHashMap<K,V>  (id=7705)	
/ (*)
	markupCacheKeyProvider	DefaultMarkupCacheKeyProvider  (id=7701)	
	markupKeyCache	MarkupCache$DefaultCacheImplementation<K,V>  (id=7702)	
		cache	ConcurrentHashMap<K,V>  (id=7718)	
/ (**)

/ Intermezzo

(*)=
this	MarkupFactory  (id=7682)	
container	ClockPage  (id=7428)	
clazz	Class<T> (org.apache.wicket.examples.ajax.builtin.ClockPage) (id=3416)	
enforceReload	false	
containerClass	Class<T> (org.apache.wicket.examples.ajax.builtin.ClockPage) (id=3416)	
cache	MarkupCache  (id=7685)	
	application	AjaxApplication  (id=7431)	
	markupCache	MarkupCache$DefaultCacheImplementation<K,V>  (id=7700)	
		cache	ConcurrentHashMap<K,V>  (id=7705)	
			entrySet	ConcurrentHashMap$EntrySet  (id=7836)	
			hashSeed	0	
			keySet	null	
			keySet	null	
			segmentMask	15	
			segments	ConcurrentHashMap$Segment<K,V>[16]  (id=7711)	
				[0]	ConcurrentHashMap$Segment<K,V>  (id=7738)	
					count	3	
					loadFactor	0.75	
					modCount	3	
					sync	ReentrantLock$NonfairSync  (id=7749)	
					table	ConcurrentHashMap$HashEntry<K,V>[4]  (id=7750)	
						[1]	ConcurrentHashMap$HashEntry<K,V>  (id=7754)	
							hash	32261817	
							key	"jar:file:/home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28/webapps/wicket-examples-step-by-step/WEB-INF/lib/wicket-devutils-7.2.0.jar!/org/apache/wicket/devutils/debugbar/StandardDebugPanel.html" (id=7815)	
							next	null	
							value	Markup  (id=7816)	
/ (***)
						[2]	ConcurrentHashMap$HashEntry<K,V>  (id=7756)	
							hash	152173886	
							key	"org.apache.wicket.markup.html.WebMarkupContainer_en_US.html" (id=7818)	
							next	null	
							value	Markup  (id=7781)	
						[3]	ConcurrentHashMap$HashEntry<K,V>  (id=7758)	
							hash	44567371	
							key	"jar:file:/home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28/webapps/wicket-examples-step-by-step/WEB-INF/lib/wicket-devutils-7.2.0.jar!/org/apache/wicket/devutils/debugbar/DebugBar.html" (id=7823)	
							next	null	
							value	Markup  (id=7824)	
/ (***)
					threshold	3	
				[2]	ConcurrentHashMap$Segment<K,V>  (id=7739)	
					count	1	
					loadFactor	0.75	
					modCount	1	
					sync	ReentrantLock$NonfairSync  (id=7765)	
					table	ConcurrentHashMap$HashEntry<K,V>[4]  (id=7766)	
						[0]	ConcurrentHashMap$HashEntry<K,V>  (id=7778)	
							hash	586308980	
							key	"org.apache.wicket.markup.html.link.BookmarkablePageLink_en_US.html" (id=7780)	
							next	null	
							value	Markup  (id=7781)	
					threshold	3	
				[7]	ConcurrentHashMap$Segment<K,V>  (id=7740)	
					count	1	
					loadFactor	0.75	
					modCount	1	
					sync	ReentrantLock$NonfairSync  (id=7768)	
					table	ConcurrentHashMap$HashEntry<K,V>[4]  (id=7769)	
						[2]	ConcurrentHashMap$HashEntry<K,V>  (id=7787)	
							hash	2063800854	
							key	"file:/home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28/webapps/wicket-examples-step-by-step/WEB-INF/classes/org/apache/wicket/examples/ajax/builtin/BasePage.html" (id=7789)	
							next	null	
							value	Markup  (id=7791)	
					threshold	3	
				[9]	ConcurrentHashMap$Segment<K,V>  (id=7741)	
					count	1	
					loadFactor	0.75	
					modCount	1	
					sync	ReentrantLock$NonfairSync  (id=7771)	
					table	ConcurrentHashMap$HashEntry<K,V>[4]  (id=7772)	
						[2]	ConcurrentHashMap$HashEntry<K,V>  (id=7793)	
							hash	-1785508378	
							key	"file:/home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28/webapps/wicket-examples-step-by-step/WEB-INF/classes/org/apache/wicket/examples/WicketExampleHeader.html" (id=7794)	
							next	null	
							value	Markup  (id=7795)	
					threshold	3	
				[12]	ConcurrentHashMap$Segment<K,V>  (id=7742)	
					count	1	
					loadFactor	0.75	
					modCount	1	
					sync	ReentrantLock$NonfairSync  (id=7774)	
					table	ConcurrentHashMap$HashEntry<K,V>[4]  (id=7796)	
						[0]	ConcurrentHashMap$HashEntry<K,V>  (id=7797)	
							hash	-1045363704	
							key	"org.apache.wicket.devutils.debugbar.DebugBar$3_en_US.html" (id=7798)	
							next	null	
							value	Markup  (id=7781)	
					threshold	3	
				[13]	ConcurrentHashMap$Segment<K,V>  (id=7743)	
					count	1	
					loadFactor	0.75	
					modCount	1	
					sync	ReentrantLock$NonfairSync  (id=7799)	
					table	ConcurrentHashMap$HashEntry<K,V>[4]  (id=7800)	
						[1]	ConcurrentHashMap$HashEntry<K,V>  (id=7801)	
							hash	-777804595	
							key	"org.apache.wicket.page.PartialPageUpdate$PartialHtmlHeaderContainer_en_US.html" (id=7802)	
							next	null	
							value	Markup  (id=7781)	
					threshold	3	
				[14]	ConcurrentHashMap$Segment<K,V>  (id=7745)	
					count	1	
					loadFactor	0.75	
					modCount	1	
					sync	ReentrantLock$NonfairSync  (id=7803)	
					table	ConcurrentHashMap$HashEntry<K,V>[4]  (id=7804)	
						[0]	ConcurrentHashMap$HashEntry<K,V>  (id=7805)	
							hash	-440201632	
							key	"org.apache.wicket.markup.html.TransparentWebMarkupContainer_en_US.html" (id=7806)	
							next	null	
							value	Markup  (id=7781)	
					threshold	3	
				[15]	ConcurrentHashMap$Segment<K,V>  (id=7487)	
					count	2	
					loadFactor	0.75	
					modCount	2	
					sync	ReentrantLock$NonfairSync  (id=7492)	
					table	ConcurrentHashMap$HashEntry<K,V>[4]  (id=7493)	
						[1]	ConcurrentHashMap$HashEntry<K,V>  (id=7500)	
							hash	-16439719	
							key	"org.apache.wicket.markup.html.internal.HtmlHeaderContainer_en_US.html" (id=7503)	
							next	ConcurrentHashMap$HashEntry<K,V>  (id=7504)	
								hash	-190501791	
								key	"file:/home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28/webapps/wicket-examples-step-by-step/WEB-INF/classes/org/apache/wicket/examples/ajax/builtin/BasePage.html:file:/home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28/webapps/wicket-examples-step-by-step/WEB-INF/classes/org/apache/wicket/examples/ajax/builtin/ClockPage.html" (id=7458)	
								next	null	
								value	MergedMarkup  (id=7460)	
							value	Markup  (id=7505)	
(****)
					threshold	3	
			segmentShift	28	
			values	null	
			values	null	

/ bij (***) is value != null	, maar is een html page	, 
/ TODO

/ bij (****)
<html xmlns:wicket="http://wicket.apache.org">
<head>
	<title>Wicket Examples - Ajax</title>
    <link rel="stylesheet" type="text/css" href="style.css"/>
</head>
<body>
    <span wicket:id="mainNavigation"></span>
    <a href="Index.html" wicket:id="back">[go back]</a><p></p>
    <wicket:child><wicket:extend xmlns:wicket="http://wicket.apache.org">

This example demonstrates a AjaxSelfUpdatingTimerBehavior.
This behavior can be attached to any component to make it update itself every x number of milliseconds.
The clock below is updated every five seconds.

<br/><br/>
The server time now is: <span wicket:id="clock" style="border: 3px solid red; padding: 10px;">[clock]</span>

</wicket:extend></wicket:child>
</body>
</html>


/ Einde Intermezzo

/we zijn nog in	,
MarkupFactory.getMarkup(MarkupContainer, Class<?>, boolean) line: 236	

		IMarkupCache cache = getMarkupCache();
/d
		if (cache != null)
		{
			// MarkupCache acts as pull-through cache. It'll call the same loadMarkup() method as
			// below, if needed.
			// @TODO may be that can be changed. I don't like it too much.
			return cache.getMarkup(container, containerClass, enforceReload);
/s
MarkupCache.getMarkup(MarkupContainer, Class<?>, boolean) line: 272	

	// Get the cache key to be associated with the markup resource stream.
		// If the cacheKey returned == null, than caching is disabled for the resource stream.
		final String cacheKey = getMarkupCacheKeyProvider(container).getCacheKey(container,
			containerClass);
/s
DefaultMarkupCacheKeyProvider.getCacheKey(MarkupContainer, Class<?>) line: 53	

		final String classname = clazz.getName();
		final StringBuilder buffer = new StringBuilder(classname.length() + 64);
		buffer.append(classname);

		final String variation = container.getVariation();
null
		final String style = container.getStyle();
null

		final Locale locale = container.getLocale();
		if (locale != null)
		{
			buffer.append('_').append(locale.toString());
		}

		buffer.append('.').append(container.getMarkupType().getExtension());
		return buffer.toString();
org.apache.wicket.examples.ajax.builtin.ClockPage_en_US.html
/t
MarkupCache.getMarkup(MarkupContainer, Class<?>, boolean) line: 280	
		final String cacheKey = getMarkupCacheKeyProvider(container).getCacheKey(container,
			containerClass);
/d
		if ((enforceReload == false) && (cacheKey != null))
		{
			markup = getMarkupFromCache(cacheKey, container);
/s
MarkupCache.getMarkupFromCache(String, MarkupContainer) line: 417	
			String locationString = markupKeyCache.get(cacheKey);
cacheKey=org.apache.wicket.examples.ajax.builtin.ClockPage_en_US.html
locationString=file:/home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28/webapps/wicket-examples-step-by-step/WEB-INF/classes/org/apache/wicket/examples/ajax/builtin/BasePage.html:file:/home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28/webapps/wicket-examples-step-by-step/WEB-INF/classes/org/apache/wicket/examples/ajax/builtin/ClockPage.html

return markupCache.get(locationString);
/t
MarkupCache.getMarkup(MarkupContainer, Class<?>, boolean) line: 287	
		if ((enforceReload == false) && (cacheKey != null))
		{
			markup = getMarkupFromCache(cacheKey, container);
/d
this	MergedMarkup  (id=7460)	
	markupElements	ArrayList<E>  (id=7462)	
		elementData	Object[33]  (id=7627)	
			[0]	RawMarkup  (id=7630)	
			[1]	ComponentTag  (id=7631)	
			[2]	RawMarkup  (id=7632)	
			[3]	ComponentTag  (id=7633)	
			[4]	RawMarkup  (id=7634)	
			[5]	ComponentTag  (id=7635)	
			[6]	RawMarkup  (id=7636)	
			[7]	ComponentTag  (id=7637)	
			[8]	ComponentTag  (id=7641)	
			[9]	RawMarkup  (id=7648)	
			[10]	ComponentTag  (id=7650)	
			[11]	RawMarkup  (id=7651)	
			[12]	ComponentTag  (id=7672)	
			[13]	RawMarkup  (id=7673)	
			[14]	RawMarkup  (id=7674)	
			[15]	RawMarkup  (id=7675)	
			[16]	WicketTag  (id=7676)	
			[17]	WicketTag  (id=7677)	
			[18]	RawMarkup  (id=7678)	
			[19]	ComponentTag  (id=7679)	
			[20]	RawMarkup  (id=7680)	
			[21]	ComponentTag  (id=7681)	
			[22]	RawMarkup  (id=7682)	
			[23]	WicketTag  (id=7683)	
			[24]	WicketTag  (id=7684)	
			[25]	RawMarkup  (id=7685)	
		size	26	
/ Hij scheidt op wicket tags	, en hun sluitingstags	,

/ TODO (Laad Wicket load markup, 	de 1ste keer, nu is het er al)	,

/t
ClockPage(MarkupContainer).getAssociatedMarkup() line: 459	
			Markup markup = MarkupFactory.get().getMarkup(this, false);
/d
/= ClockPage.html

				return markup;
/t
ClockPage(Component).getMarkup() line: 740	
				Markup associatedMarkup = container.getAssociatedMarkup();
associatedMarkup	MergedMarkup  (id=7460)	
/d
					markup = associatedMarkup;
					return markup;
/t
DefaultMarkupSourcingStrategy.getMarkup(MarkupContainer, Component) line: 82	
		IMarkupFragment containerMarkup = container.getMarkup();
/d
/ container=ClockPage heeft container.markup=MergedMarkup ClockPage.html

		MarkupStream stream = new MarkupStream(this);
		stream.setCurrentIndex(streamOffset);
		while (stream.hasMore())
		{
			MarkupElement elem = stream.get();

			if (elem instanceof ComponentTag)
			{
				ComponentTag tag = stream.getTag();

				if (tag.isOpen() || tag.isOpenClose())
				{
					if (canFind && tag.getId().equals(id))
					{
						return stream.getMarkupFragment();
id="clock"
/t
DefaultMarkupSourcingStrategy.getMarkup(MarkupContainer, Component) line: 94	
		// Find the child's markup
		IMarkupFragment childMarkup = containerMarkup.find(child.getId());
/d
<span wicket:id="clock" style="border: 3px solid red; padding: 10px;">[clock]</span>

			return childMarkup;
/t
Clock(Component).getMarkup() line: 756	
		markup = parent.getMarkup(this);
/d
<span wicket:id="clock" style="border: 3px solid red; padding: 10px;">[clock]</span>

		return markup;
/t
Clock(Component).internalRender() line: 2352	
		IMarkupFragment markup = getMarkup();
/d
				onRender();
/s
Clock(WebComponent).onRender() line: 60	
		internalRenderComponent();
/s
Clock(Component).internalRenderComponent() line: 2508	
		onComponentTag(tag);
<span wicket:id="clock" style="border: 3px solid red; padding: 10px;" id="clock6" wicketpath="clock">
			else
			{
				renderComponentTag(tag);
/s
Clock(Component).renderComponentTag(ComponentTag) line: 3982	

			// apply behaviors that are attached to the component tag.
			if (tag.hasBehaviors())
/ NEE
/ TODO
			// Apply behavior modifiers
			List<? extends Behavior> behaviors = getBehaviors();
[org.apache.wicket.ajax.AjaxSelfUpdatingTimerBehavior@e18038f]

				for (Behavior behavior : behaviors)
				{
					// Components may reject some behavior components
					if (isBehaviorAccepted(behavior))
					{
						behavior.onComponentTag(this, tag);
/s
AjaxSelfUpdatingTimerBehavior(AbstractAjaxBehavior).onComponentTag(Component, ComponentTag) line: 98	
		onComponentTag(tag);
/s
AjaxSelfUpdatingTimerBehavior(AbstractAjaxBehavior).onComponentTag(ComponentTag) line: 129	
/ LEEG	,
/t
Clock(Component).renderComponentTag(ComponentTag) line: 4034	
						behavior.onComponentTag(this, tag);
/d
			// Write the tag
			tag.writeOutput(getResponse(), !needToRenderTag(null),
				getMarkup().getMarkupResourceStream().getWicketNamespace());
/s
ComponentTag.writeOutput(Response, boolean, String) line: 720	
...
		response.write(">");

reponnse.buffer=
<span wicket:id="clock" style="border: 3px solid red; padding: 10px;" id="clock6" wicketpath="clock">

/ Dit is alleen nog de tag	, nu de body, met de tijd er in	,

/t
Clock(Component).internalRenderComponent() line: 2565	
			else
			{
				renderComponentTag(tag);
/d
			if (tag.isOpen())
			{
				// Render the body. The default strategy will simply call the component's
				// onComponentTagBody() implementation.
				getMarkupSourcingStrategy().onComponentTagBody(this, markupStream, tag);
/s
DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	

		component.onComponentTagBody(markupStream, openTag);
component = clock
/s
Clock(Label).onComponentTagBody(MarkupStream, ComponentTag) line: 115	

		replaceComponentTagBody(markupStream, openTag, getDefaultModelObjectAsString());

//////////////////////////////////////////
/ Hier zien we hoe een dynamic model werkt	,

/s
Clock(Component).getDefaultModelObjectAsString() line: 1654	
		return getDefaultModelObjectAsString(getDefaultModelObject());
/s
Clock(Component).getDefaultModelObject() line: 1620	

		final IModel<?> model = getDefaultModel();
/s
Clock(Component).getDefaultModel() line: 1600	
		IModel<?> model = getModelImpl();
/s
Clock(Component).getModelImpl() line: 3018	
			return (IModel<?>)data_get(0);
/s
Clock(Component).data_get(int) line: 530	
/=
	final Object data_get(int index)
index=0

this	Clock  (id=7408)	
	data	Object[4]  (id=7622)	
		[0]	Clock$ClockModel  (id=7827)	
		[1]	MetaDataEntry<T>  (id=7828)	
		[2]	AjaxSelfUpdatingTimerBehavior  (id=7394)	
		[3]	Behaviors$BehaviorIdList  (id=7831)	
	id	"clock" (id=7623)	
	markup	MarkupFragment  (id=7716)	
	parent	ClockPage  (id=7400)	
/ TODO

		else if (data instanceof Object[] && !(data instanceof MetaDataEntry<?>[]))
		{
			Object[] array = (Object[])data;
			return index < array.length ? array[index] : null;
/t
Clock(Component).getDefaultModel() line: 1602	
		IModel<?> model = getModelImpl();
/d
model	Clock$ClockModel  (id=7827)	
		return model;
/t
Clock(Component).getDefaultModelObject() line: 1621	
		final IModel<?> model = getDefaultModel();
/d
model	Clock$ClockModel  (id=7827)	

				// Get model value for this component.
				return model.getObject();
/s
Clock$ClockModel.getObject() line: 72	
			return df.format(new Date());
/t
Clock(Component).getDefaultModelObjectAsString() line: 1654	
		return getDefaultModelObjectAsString(getDefaultModelObject());
/pd
/s
Clock(Component).getDefaultModelObjectAsString(Object) line: 1674	
/=
	public final String getDefaultModelObjectAsString(final Object modelObject)
modelObject	"Tuesday, April 5, 2016 11:51:29 PM PDT" (id=7857)	
/ 'n String	,
/t
Clock(Label).onComponentTagBody(MarkupStream, ComponentTag) line: 115	
		replaceComponentTagBody(markupStream, openTag, getDefaultModelObjectAsString());
/pd
/s
Clock(Component).replaceComponentTagBody(MarkupStream, ComponentTag, CharSequence) line: 4054	
/=
	protected final void replaceComponentTagBody(final MarkupStream markupStream,
		final ComponentTag tag, final CharSequence body)

markupStream=
<span wicket:id="clock" style="border: 3px solid red; padding: 10px;">[clock]</span>, index = 1, current = [Raw markup]]
tag=<span wicket:id="clock" style="border: 3px solid red; padding: 10px;" id="clock7" wicketpath="clock">
body=Wednesday, April 6, 2016 10:30:38 PM PDT

/ Intermezzo

/s
	Clock(Component).replaceComponentTagBody(MarkupStream, ComponentTag, CharSequence) line: 4054	
	Clock(Label).onComponentTagBody(MarkupStream, ComponentTag) line: 115	
	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
	Clock(Component).internalRenderComponent() line: 2565	
			else
			{
->				renderComponentTag(tag);
			}
			markupStream.next();

			// Render the body only if open-body-close. Do not render if open-close.
			if (tag.isOpen())
			{
				// Render the body. The default strategy will simply call the component's
				// onComponentTagBody() implementation.
->>				getMarkupSourcingStrategy().onComponentTagBody(this, markupStream, tag);

				// Render close tag
				if (openTag.isOpen())
				{
->>>				renderClosingComponentTag(markupStream, tag, getRenderBodyOnly());

	Clock(WebComponent).onRender() line: 60	
	Clock(Component).internalRender() line: 2380	
	Clock(Component).render() line: 2308	
	AjaxRequestHandler$1(XmlPartialPageUpdate).writeComponent(Response, String, Component, String) line: 119	
	AjaxRequestHandler$1(PartialPageUpdate).writeComponents(Response, String) line: 245	
	AjaxRequestHandler$1(PartialPageUpdate).writeTo(Response, String) line: 158	
	AjaxRequestHandler.respond(IRequestCycle) line: 358	
**		update.writeTo(bodyResponse, encoding);

	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
			try
			{
*				handler.respond(RequestCycle.this);

	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 97	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ 13	. 

/ ->> we zijn in render body , de tag <span ...> zelf was al rendered	,	

/ ** een van de dingen die AjaxRequestHandler.respond doet is PartialPageUpdate.writeTo 	, logisch	,

public class AjaxRequestHandler implements AjaxRequestTarget
/ we zien in Clock of ClockPage geen  AjaxRequestTarget	, zoals in boek (20)
/ TODO

/ bij * zijn we altijd, nu is de handler de AjaxRequestHandler	, 
/ eerder was ListenerInterfaceRequestHandler dit	, 
/ TODO

/ Einde Intermezzo

		if (body != null)
		{
			// Write the new body
			getResponse().write(body);

getRequestCycle().getResponse()
	buffer
<span wicket:id="clock" style="border: 3px solid red; padding: 10px;" id="clock7" wicketpath="clock">Wednesday, April 6, 2016 10:30:38 PM PDT

/t
Clock(Component).internalRenderComponent() line: 2570	
				renderComponentTag(tag);
			markupStream.next();
				getMarkupSourcingStrategy().onComponentTagBody(this, markupStream, tag);
/d
				if (openTag.isOpen())
				{
					renderClosingComponentTag(markupStream, tag, getRenderBodyOnly());
/s
Clock(Component).renderClosingComponentTag(MarkupStream, ComponentTag, boolean) line: 4284	
...
					getResponse().write(openTag.syntheticCloseTagString());
/t
Clock(Component).render() line: 2320	
			// Do the render
			internalRender();
/d
				// Cleanup
				afterRender();
/t
AjaxRequestHandler$1(XmlPartialPageUpdate).writeComponent(Response, String, Component, String) line: 125	
				component.render();
/d
			page.endComponentRender(component);
/s
ClockPage(Page).endComponentRender(Component) line: 321	
			renderedComponents = null;
/t
AjaxRequestHandler$1(XmlPartialPageUpdate).writeComponent(Response, String, Component, String) line: 133	
			page.endComponentRender(component);
/d
		finally
		{
			// Restore original response
			RequestCycle.get().setResponse(oldResponse);

/ Wat RequestCycle.get().getResonse().buffer was	, is,
this	AjaxRequestHandler$1  (id=7408)	
	bodyBuffer	PartialPageUpdate$ResponseBuffer  (id=7413)	
		buffer	AppendingStringBuffer  (id=7508)	
<span wicket:id="clock" style="border: 3px solid red; padding: 10px;" id="clock7" wicketpath="clock">Wednesday, April 6, 2016 10:30:38 PM PDT</span>

response=
<?xml version="1.0" encoding="UTF-8"?><ajax-response>

		response.write("<component id=\"");
		response.write(markupId);
		response.write("\" ><![CDATA[");
		response.write(encode(bodyBuffer.getContents()));
		response.write("]]></component>");

<?xml version="1.0" encoding="UTF-8"?><ajax-response><component id="clock7" ><![CDATA[<span wicket:id="clock" style="border: 3px solid red; padding: 10px;" id="clock7" wicketpath="clock">Wednesday, April 6, 2016 10:30:38 PM PDT</span>]]></component>
		bodyBuffer.reset();

/t
AjaxRequestHandler$1(PartialPageUpdate).writeComponents(Response, String) line: 247	

		for (Map.Entry<String, Component> stringComponentEntry : markupIdToComponent.entrySet())
{clock8=[Component id = clock]}
/ WH met add	, TODO
		{
			final Component component = stringComponentEntry.getValue();
component	Clock  (id=7422)	
			if (!containsAncestorFor(component))
			{
				writeComponent(response, component.getAjaxRegionMarkupId(), component, encoding);
/d

this	AjaxRequestHandler$1  (id=7408)	
	markupIdToComponent	LinkedHashMap<K,V>  (id=7484)	
{clock7=[Component id = clock]}
/ Dus maar 1	,

		if (header != null)
			// now, close the response (which may render things)
			header.getHeaderResponse().close();
/s
ResourceAggregator.close() line: 280	
		renderHeaderItems();
/s
ResourceAggregator.renderHeaderItems() line: 311	

		List<RecordedHeaderItem> sortedItemsToBeRendered = new ArrayList<>( itemsToBeRendered.values());

/ Intermezzo

sortedItemsToBeRendered
/=
sortedItemsToBeRendered	ArrayList<E>  (id=7611)	
	elementData	Object[6]  (id=7616)	
		[0]	ResourceAggregator$RecordedHeaderItem  (id=7609)	
			item	JavaScriptReferenceHeaderItem  (id=7432)	
JavaScriptReferenceHeaderItem(scope: org.apache.wicket.resource.JQueryResourceReference; name: jquery/jquery-2.2.0.js; locale: null; style: null; variation: null, null)
			locations	ArrayList<E>  (id=7630)	
[AjaxSelfUpdatingTimerBehavior@0]

		[1]	ResourceAggregator$RecordedHeaderItem  (id=7623)	
			item	JavaScriptReferenceHeaderItem  (id=7431)	
JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-event-jquery.js; locale: null; style: null; variation: null, null)
			locations	ArrayList<E>  (id=7634)	
[AjaxSelfUpdatingTimerBehavior@1]

		[2]	ResourceAggregator$RecordedHeaderItem  (id=7624)	
			item	JavaScriptReferenceHeaderItem  (id=7429)	
JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-ajax-jquery.js; locale: null; style: null; variation: null, null)
			locations	ArrayList<E>  (id=7636)	
[AjaxSelfUpdatingTimerBehavior@2]

		[3]	ResourceAggregator$RecordedHeaderItem  (id=7625)	
			item	JavaScriptReferenceHeaderItem  (id=7434)	
JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-ajax-jquery-debug.js; locale: null; style: null; variation: null, null)
			locations	ArrayList<E>  (id=7638)	
[AjaxSelfUpdatingTimerBehavior@3]

		[4]	ResourceAggregator$RecordedHeaderItem  (id=7626)	
			item	JavaScriptContentHeaderItem  (id=7435)	
JavaScriptHeaderItem(Wicket.Ajax.DebugWindow.enabled=true;)
			locations	ArrayList<E>  (id=7640)	
[AjaxSelfUpdatingTimerBehavior@4]

		[5]	ResourceAggregator$RecordedHeaderItem  (id=7627)	
			item	JavaScriptContentHeaderItem  (id=7437)	
JavaScriptHeaderItem(Wicket.Ajax.baseUrl="clock?7";)
			locations	ArrayList<E>  (id=7642)	
[AjaxSelfUpdatingTimerBehavior@5]
	size	6	

/ Einde Intermezzo

		for (RecordedHeaderItem curRenderItem : sortedItemsToBeRendered)
		{
			if (markItemRendered(curRenderItem.getItem()))
			{
				getRealResponse().render(curRenderItem.getItem());

curRenderItem	ResourceAggregator$RecordedHeaderItem  (id=7609)	
	item	JavaScriptReferenceHeaderItem  (id=7432)	
	locations	ArrayList<E>  (id=7630)	
/s
PartialPageUpdate$PartialHeaderResponse.render(HeaderItem) line: 573	
/=
		public void render(HeaderItem item)

item	JavaScriptReferenceHeaderItem  (id=7453)	
JavaScriptReferenceHeaderItem(scope: org.apache.wicket.resource.JQueryResourceReference; name: jquery/jquery-2.2.0.js; locale: null; style: null; variation: null, null)

			else if (headerRendering)
			{
				super.render(item);
/s
PartialPageUpdate$PartialHeaderResponse(HeaderResponse).render(HeaderItem) line: 54	
		if (!closed && !wasItemRendered(item))
		{
			item.render(getResponse());
/s
JavaScriptReferenceHeaderItem.render(Response) line: 106	

		internalRenderJavaScriptReference(response, getUrl(), getId(), isDefer(), getCharset(),
			getCondition(), isAsync());
/s
JavaScriptReferenceHeaderItem.getUrl() line: 128	

		IRequestHandler handler = new ResourceReferenceRequestHandler(getReference(), getPageParameters());
/ TODO (Afmaken)
./wicket/resource/org.apache.wicket.resource.JQueryResourceReference/jquery/jquery-2.2.0-ver-1455723568000.js


/ SAMENVATTING

/ 7	 

/ de ListenerInterfaceRequestHandler invokes AjaxSelfUpdatingTimerBehavior(AbstractDefaultAjaxBehavior).onRequest()	, die de AjaxRequestHandler	creates bij **	, en vraagt aan de request cycle om deze als scheduleAfterCurrent te laten zijn	,

/ see *	, de enigste wat * doet is voor ***	,

/ stack trace	,
/s
	RequestCycle$HandlerExecutor(RequestHandlerStack).schedule(IRequestHandler) line: 131	
		scheduledAfterCurrent = handler;

	RequestCycle.scheduleRequestHandlerAfterCurrent(IRequestHandler) line: 820	
		requestHandlerExecutor.schedule(handler);

	AjaxSelfUpdatingTimerBehavior(AbstractDefaultAjaxBehavior).onRequest() line: 591	
		WebApplication app = (WebApplication)getComponent().getApplication();
		AjaxRequestTarget target = app.newAjaxRequestTarget(getComponent().getPage());
		RequestCycle requestCycle = RequestCycle.get();
		requestCycle.scheduleRequestHandlerAfterCurrent(target);		/ **

	RequestListenerInterface.internalInvoke(Component, Object) line: 258	
	RequestListenerInterface.invoke(IRequestableComponent, Behavior) line: 241	
	ListenerInterfaceRequestHandler.invokeListener() line: 248	
				Behavior behavior = getComponent().getBehaviorById(behaviorId); /= org.apache.wicket.ajax.AjaxSelfUpdatingTimerBehavior@726026ea
				listenerInterface.invoke(getComponent(), behavior);

	ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 234	
this	ListenerInterfaceRequestHandler  (id=7402)	
	behaviorId	Integer  (id=7444)									0
	listenerInterface	RequestListenerInterface  (id=7410) 		
/=
[RequestListenerInterface name=IBehaviorListener, method=public abstract void org.apache.wicket.behavior.IBehaviorListener.onRequest()]	
		invokeListener();


	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
				handler.respond(RequestCycle.this);
org.apache.wicket.core.request.handler.ListenerInterfaceRequestHandler@3a1c5252

	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
->			respond(handler);		/ *	, voor ***, * calls handler's <behavior>.onRequest	, die de AjaxRequestHandler creates, en schedules,	 
			execute(scheduled);	 / *** 	, 

	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	


/ 7	. 

/ De scheduleAfterCurrent=AjaxRequestHandler's repond wordt called	,

/s
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 97	
			respond(handler);
handler	ListenerInterfaceRequestHandler  (id=7396)				/ eerst	, 

			execute(scheduled);									/ dan	,
scheduled	AjaxRequestHandler  (id=7407)	


/ 7	. 

			respond(handler);
handler	ListenerInterfaceRequestHandler  (id=7396)				/ eerst	, 



/ stack trace
/s
	AjaxRequestHandler.add(Component, String) line: 238	
		update.add(component, markupId);			/ sets component=Clock in update.markupIdToComponent={clock8=[Component id = clock]}
/***
	AjaxRequestHandler.add(Component...) line: 231	
			add(component, component.getMarkupId());
/s
	AjaxSelfUpdatingTimerBehavior.onTimer(AjaxRequestTarget) line: 51	
		target.add(getComponent());
getComponent=Clock
/**

	AjaxSelfUpdatingTimerBehavior(AbstractAjaxTimerBehavior).respond(AjaxRequestTarget) line: 126	
		if (shouldTrigger())
		{
->			onTimer(target);
target	AjaxRequestHandler  (id=7407)	

	AjaxSelfUpdatingTimerBehavior(AbstractDefaultAjaxBehavior).onRequest() line: 588	
	{
		WebApplication app = (WebApplication)getComponent().getApplication();
		AjaxRequestTarget target = app.newAjaxRequestTarget(getComponent().getPage());

		RequestCycle requestCycle = RequestCycle.get();
		requestCycle.scheduleRequestHandlerAfterCurrent(target);

->		respond(target);

	Method.invoke(Object, Object...) line: 606	
	RequestListenerInterface.internalInvoke(Component, Object) line: 258	
	RequestListenerInterface.invoke(IRequestableComponent, Behavior) line: 241	
	ListenerInterfaceRequestHandler.invokeListener() line: 248	
				Behavior behavior = getComponent().getBehaviorById(behaviorId);
				listenerInterface.invoke(getComponent(), behavior);

	ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 234	
		invokeListener();
/*

	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ bij * zien we dat de ListenerInterfaceRequestHandler de listener invokes: RequestListenerInterface, let op de namen 	,
/ bij ** zien we dat de behavior zelf de component adds aan de AjaxRequestHandler, de AjaxRequestTarget	,
/ TODO
/////////////////////////////////
/ bij *** staat het	, update = new XmlPartialPageUpdate(page)	, dus we add de component Clock aan een ... TODO	, zoals we altijd add	,  

/ 7	. 

/s
	AjaxSelfUpdatingTimerBehavior(AbstractDefaultAjaxBehavior).getCallbackScript(Component) line: 466	
		CharSequence ajaxAttributes = renderAjaxAttributes(component);
{"u":"./clock?10-1.IBehaviorListener.0-clock","c":"clock9"}
		return "Wicket.Ajax.ajax(" + ajaxAttributes + ");";

	AjaxSelfUpdatingTimerBehavior(AbstractDefaultAjaxBehavior).getCallbackScript() line: 453	
		return getCallbackScript(getComponent());

	AjaxSelfUpdatingTimerBehavior(AbstractAjaxTimerBehavior).getJsTimeoutCall(Duration) line: 111	
		CharSequence js = getCallbackScript();
Wicket.Ajax.ajax({"u":"./clock?10-1.IBehaviorListener.0-clock","c":"clock9"});
		return String.format("Wicket.Timer.set('%s', function(){%s}, %d);",
				getComponent().getMarkupId(), js, updateInterval.getMilliseconds());

	AjaxSelfUpdatingTimerBehavior(AbstractAjaxTimerBehavior).addTimeout(IHeaderResponse) line: 197	
    			headerResponse.render( OnLoadHeaderItem.forScript(getJsTimeoutCall(updateInterval)));	/ *
 
	AjaxSelfUpdatingTimerBehavior(AbstractAjaxTimerBehavior).respond(AjaxRequestTarget) line: 133	
		if (shouldTrigger())
		{
			onTimer(target);	/ hierboven done	,

			if (shouldTrigger())
			{
				// re-add timeout
				hasTimeout = false;

->				addTimeout(target.getHeaderResponse());

				return;
	AjaxSelfUpdatingTimerBehavior(AbstractDefaultAjaxBehavior).onRequest() line: 593	
	RequestListenerInterface.internalInvoke(Component, Object) line: 258	
	RequestListenerInterface.invoke(IRequestableComponent, Behavior) line: 241	
	ListenerInterfaceRequestHandler.invokeListener() line: 248	
	ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 234	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
->			respond(handler);
			execute(scheduled);	/ straks	,

	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ debug verder	in *,
/s
AjaxSelfUpdatingTimerBehavior(AbstractAjaxTimerBehavior).addTimeout(IHeaderResponse) line: 197	
			headerResponse.render( OnLoadHeaderItem.forScript(getJsTimeoutCall(updateInterval))); / *
/s
PartialPageUpdate$PartialHeaderResponse.render(HeaderItem) line: 587	
			if (item instanceof OnLoadHeaderItem)
			{
				if (!wasItemRendered(item))
				{
					PartialPageUpdate.this.appendJavaScript(((OnLoadHeaderItem) item).getJavaScript());
/getJavaScript()=Wicket.Timer.set('clock9', function(){Wicket.Ajax.ajax({"u":"./clock?10-1.IBehaviorListener.0-clock","c":"clock9"});}, 5000);

/ 7	. 

/ Dan komt RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) in execute(scheduled)	, dit is rec. call	, nu met AjaxRequestHandler, ipv ListenerInterfaceRequestHandler	, 

/ debug	,
/s
RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 97	
			execute(scheduled);
/s
RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
			respond(handler);
/s
RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
				handler.respond(RequestCycle.this);
/s
AjaxRequestHandler.respond(IRequestCycle) line: 358	
		update.writeTo(bodyResponse, encoding);
/s
AjaxRequestHandler$1(PartialPageUpdate).writeTo(Response, String) line: 153	



  


/ 7	. 

			execute(scheduled);									/ dan	,
scheduled	AjaxRequestHandler  (id=7407)	

/ stack trace	,
/s
	AjaxRequestHandler$1(PartialPageUpdate).writeComponents(Response, String) line: 236	
		for (Map.Entry<String, Component> stringComponentEntry : markupIdToComponent.entrySet())
markupIdToComponent={clock8=[Component id = clock]} was door update.add(Clock)	,
		{
			final Component component = stringComponentEntry.getValue();
component=Clock
->				writeComponent(response, component.getAjaxRegionMarkupId(), component, encoding);
...
			// now, close the response (which may render things)
			header.getHeaderResponse().close();

	AjaxRequestHandler$1(PartialPageUpdate).writeTo(Response, String) line: 158	
			// process added components
			writeComponents(response, encoding);

	AjaxRequestHandler.respond(IRequestCycle) line: 358	
		update.writeTo(bodyResponse, encoding);

	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
			respond(handler);		/ handler=AjaxRequestHandler	,

	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 97	
			respond(handler); 		/ handler=ListenerInterfaceRequestHandler	,
->			execute(scheduled); 	/ scheduled=AjaxRequestHandler	,

	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ 7	. 

/ Later	,

/ stack trace	,

/s
	Clock$ClockModel.getObject() line: 72	
			return df.format(new Date());

	Clock(Component).getDefaultModelObject() line: 1620	
		final IModel<?> model = getDefaultModel();
				return model.getObject();

	Clock(Component).getDefaultModelObjectAsString() line: 1654	
		return getDefaultModelObjectAsString(getDefaultModelObject());

	Clock(Label).onComponentTagBody(MarkupStream, ComponentTag) line: 115	
		replaceComponentTagBody(markupStream, openTag, getDefaultModelObjectAsString());

	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
		component.onComponentTagBody(markupStream, openTag);

	Clock(Component).internalRenderComponent() line: 2565	
				renderComponentTag(tag);						/ de tag zelf	,
			markupStream.next();
				getMarkupSourcingStrategy().onComponentTagBody(this, markupStream, tag); / de body van de tag	,

	Clock(WebComponent).onRender() line: 60	
		internalRenderComponent();

	Clock(Component).internalRender() line: 2380	
				onRender();

	Clock(Component).render() line: 2308	
			// Do the render
			internalRender();
	AjaxRequestHandler$1(XmlPartialPageUpdate).writeComponent(Response, String, Component, String) line: 119	
				component.render();

	AjaxRequestHandler$1(PartialPageUpdate).writeComponents(Response, String) line: 245	
		for (Map.Entry<String, Component> stringComponentEntry : markupIdToComponent.entrySet())
		{
->				writeComponent(response, component.getAjaxRegionMarkupId(), component, encoding);
			// now, close the response (which may render things)
			header.getHeaderResponse().close();

	AjaxRequestHandler$1(PartialPageUpdate).writeTo(Response, String) line: 158	
	AjaxRequestHandler.respond(IRequestCycle) line: 358	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 97	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ MORGENOCHTEND
/ Ook zagen we onderweg Header	,
/ setScheduler	, : AjaxRequestHandler	,



/ Einde SAMENVATTING







/ MORGENOCHTEND
/ we zijn bij ->
/ we hebben b set op ->
/s
	FilenameWithVersionResourceCachingStrategy.decorateUrl(ResourceUrl, IStaticCacheableResource) line: 105	
	BasicResourceReferenceMapper.mapHandler(IRequestHandler) line: 240	
	ResourceReferenceMapper(ParentPathReferenceRewriter).mapHandler(IRequestHandler) line: 91	
	SystemMapper(CompoundRequestMapper).mapHandler(IRequestHandler) line: 213	
	RequestCycle.mapUrlFor(IRequestHandler) line: 434	
	RequestCycle.urlFor(IRequestHandler) line: 534	
	JavaScriptReferenceHeaderItem.getUrl() line: 130	
	JavaScriptReferenceHeaderItem.getRenderTokens() line: 113	
	PartialPageUpdate$PartialHeaderResponse(HeaderResponse).wasItemRendered(HeaderItem) line: 61	
	PartialPageUpdate$PartialHeaderResponse(HeaderResponse).render(HeaderItem) line: 52	
	PartialPageUpdate$PartialHeaderResponse.render(HeaderItem) line: 616	
	ResourceAggregator.renderHeaderItems() line: 311	
		for (RecordedHeaderItem curRenderItem : sortedItemsToBeRendered)
		{
			if (markItemRendered(curRenderItem.getItem()))
			{
->				getRealResponse().render(curRenderItem.getItem());
	ResourceAggregator.close() line: 280	
	AjaxRequestHandler$1(PartialPageUpdate).writeComponents(Response, String) line: 262	
	AjaxRequestHandler$1(PartialPageUpdate).writeTo(Response, String) line: 158	
	AjaxRequestHandler.respond(IRequestCycle) line: 358	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 97	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	






/ Einde DEBUG AJAX CLOCK

/ CLASSES PROTOTYPES

/ Geef in google	,
java classes javascript prototypes
/ Lees	,
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Details_of_the_Object_Model

/ Einde CLASSES PROTOTYPES

/ DEBUG AJAX CLOCK JAVASCRIPT

/ 7	 .

/ we zien in Global	,

Wicket: Object
	$: function (arg) {
	$$: function (element) {
	Ajax: Object
	Browser: Object
	Channel: function () {
	ChannelManager: function () {
	Class: Object
	DOM: Object
	Drag: Object
	Event: Object
	Focus: Object
	Form: Object
	Head: Object
	Log: Object
	Throttler: function () {
	ThrottlerEntry: function () {
	Timer: Object
	TimerHandles: Object
	Xml: Object
	bind: function (fn, context) {
	channelManager: Object
	merge: function (object1, object2) {
	throttler: Object
	__proto__: Object

/ Hier begint het	,de client doet een script in <head/>	,
/s
<script type="text/javascript">
/*<![CDATA[*/
Wicket.Event.add(window, "load", function(event) { 
	Wicket.Timer.set('clock9', function(){
		Wicket.Ajax.ajax({"u":"./clock?10-2.IBehaviorListener.0-clock","c":"clock9"});
	}, 5000);;
;});
/*]]>*/
</script>
/= 			(zien we in devtools, Sources)	,
(function(){
	Wicket.Timer.set('clock9', function(){
		Wicket.Ajax.ajax({"u":"./clock?10-2.IBehaviorListener.0-clock","c":"clock9"});
	}, 5000);
})();
/s
jQuery.extend.Ajax.ajax (wicket-ajax-jqu…568000.js:1948)
			ajax: function(attrs) {

attrs: Object
c: "clock9"
u: "./clock?10-4.IBehaviorListener.0-clock"

				attrs.c = attrs.c || window;
				attrs.e = attrs.e || [ 'domready' ];


attrs: Object
c: "clock9"
e: Array[1]
	0:"domready"
	length: 1
u: "./clock?10-4.IBehaviorListener.0-clock"

				jQuery.each(attrs.e, function (idx, evt) {
evt="domready"
					Wicket.Event.add(attrs.c, evt, function (jqEvent, data) {
/s
			/**
			 * Binds an event listener for an element
			 *
			 * Also supports the special 'domready' event on window.
			 * 'domready' is event fired when the DOM is complete, but
			 * before loading external resources (images, scripts, ...)
			 *
jQuery.extend.Event.add (wicket-event-jq…3568000.js:205)
				if (type === 'domready') {
					jQuery(fn);
...
/s
				jQuery.each(attrs.e, function (idx, evt) {
					Wicket.Event.add(attrs.c, evt, function (jqEvent, data) {
->						var call = new Wicket.Ajax.Call();

/ Intermezzo

(anonymous function) (wicket-ajax-jqu…568000.js:1957)
fire (jquery-2.2.0-ve…568000.js:3182)
self.add (jquery-2.2.0-ve…568000.js:3241)
jQuery.fn.ready (jquery-2.2.0-ve…568000.js:3491)
	// Add the callback
	jQuery.ready.promise().done( fn );

jQuery.fn.init (jquery-2.2.0-ve…568000.js:2922)
jQuery (jquery-2.2.0-ve…23568000.js:75)
jQuery.extend.Event.add (wicket-event-jq…3568000.js:206)
(anonymous function) (wicket-ajax-jqu…568000.js:1956)
jQuery.extend.each (jquery-2.2.0-ve…3568000.js:360)
jQuery.extend.Ajax.ajax (wicket-ajax-jqu…568000.js:1955)
(anonymous function) (VM173:1)

/ Wicket.Event.add=
			add: function (element, type, fn, data, selector) {
				if (type === 'domready') {
					jQuery(fn);
/ en jQuery(fn)=$(document).ready(fn)	,
/ document was al ready	, dus fn wordt meteen called	,
fn=
			return function () {
                this.initialize.apply(this, arguments);
            };


/ Einde Intermezzo

/ Intermezzo

/ jQuery.ready rond 3515	,

/ Einde Intermezzo

/ we zijn in	,
						var call = new Wicket.Ajax.Call();
/s
			return function () {
->                this.initialize.apply(this, arguments);
            };

/ Intermezzo



	Wicket.Ajax.Call = Wicket.Class.create();

	Wicket.Ajax.Call.prototype = {
		initialize: jQuery.noop,

/ Einde Intermezzo


this.__proto__===Wicket.Ajax.Call.prototype
true

/ Intermezzo

$ vi wicket-ajax-jquery.js
	Wicket.Ajax.Call = Wicket.Class.create();
/=
			return function () {
				this.initialize.apply(this, arguments);
			};

	Wicket.Ajax.Call.prototype = {
		initialize: jQuery.noop,

/ Dus Wicket.Ajax.Call is een fct	, maar het belang is fct.prototype	, 

/ Einde Intermezzo

/t
jQuery.extend.Event.add (wicket-event-jq…3568000.js:205)
                        var call = new Wicket.Ajax.Call();
/d
call: Object
__proto__: Object
_asParamArray: function (parameters) {
_calculateDynamicParameters: function (attrs) {
_executeHandlers: function (handlers) {
_getTarget: function (attrs) {
_initializeDefaults: function (attrs) {
ajax: function (attrs) {
doAjax: function (attrs) {
done: function (attrs) {
failure: function (context, jqXHR, errorMessage, textStatus) {
handleMultipartComplete: function (event) {
initialize: function () {}
loadedCallback: function (envelope, context) {
process: function (data) {
processAjaxResponse: function (data, textStatus, jqXHR, context) {
processComponent: function (context, node) {
processEvaluation: function (context, node) {
processFocusedComponentMark: function (context) {
processFocusedComponentReplaceCheck: function (steps, lastReplaceComponentStep) {
processHeaderContribution: function (context, node) {
processRedirect: function (context, node) {
submitMultipartForm: function (context) {
success: function (context) {
__proto__: Object
/ Het gaat om deze __proto__	,

						var attributes = jQuery.extend({}, attrs);
attributes: Object
c: "clocka"
e: Array[1]
u: "./clock?11-1.IBehaviorListener.0-clock"
__proto__: Object
						attributes.event = Wicket.Event.fix(jqEvent);
Wicket: Object
	Event: Object
		Topic: Object
		add: function (element, type, fn, data, selector) {
		fire: function (element, event) {
		fix: function (evt) {
		getId: function (element) {
		idCounter: 0
		keyCode: function (evt) {
		publish: function (topic) {
		remove: function (element, type, fn) {
		stop: function (evt, immediate) {
		subscribe: function (topic, subscriber) {
		unsubscribe: function (topic, subscriber) {
		__proto__: Object

/s
			fix: function (evt) {
				var evnt = evt || window.event;
				return jQuery.event.fix(evnt);
/t
				jQuery.each(attrs.e, function (idx, evt) {
					Wicket.Event.add(attrs.c, evt, function (jqEvent, data) {
						var call = new Wicket.Ajax.Call();
						var attributes = jQuery.extend({}, attrs);
						attributes.event = Wicket.Event.fix(jqEvent);
/d
/ jqEvent
/ TODO
						call._executeHandlers(attributes.ih, attributes);
/ NIETS
						Wicket.Event.publish(Wicket.Event.Topic.AJAX_CALL_INIT, attributes);
Wicket.Event.Topic.AJAX_CALL_INIT="/ajax/call/init"
attributes: Object
c: "clocka"
e: Array[1] ["domready"]
event: jQuery.Event
u: "./clock?11-5.IBehaviorListener.0-clock"
/ TODO

						else {
							call.ajax(attributes);
/s
Wicket.Ajax.Call.ajax (wicket-ajax-jqu…3568000.js:560)
			this._initializeDefaults(attrs);
/s
	Wicket.Ajax.Call.prototype = {
		initialize: jQuery.noop,

		/**
		 * Initializes the default values for Ajax request attributes.
		 * The defaults are not set at the server side to save some bytes
		 * for the network transfer
		 *
		 * @param attrs {Object} - the ajax request attributes to enrich
		 * @private
		 */
		_initializeDefaults: function (attrs) {
			// (ajax channel)
			if (typeof(attrs.ch) !== 'string') {
attrs.ch===undefined
/ JA
				attrs.ch = '0|s';

			// (wicketAjaxResponse) be default the Ajax result should be processed for <ajax-response>
			if (typeof(attrs.wr) !== 'boolean') {
attrs.wr===undefined
				attrs.wr = true;

			// (dataType) by default we expect XML responses from the Ajax behaviors
			if (typeof(attrs.dt) !== 'string') {
attrs.dt===undefined
				attrs.dt = 'xml';


			if (typeof(attrs.m) !== 'string') {
attrs.m===undefined
				attrs.m = 'GET';
			}

			if (attrs.async !== false) {
attrs.async===undefined
				attrs.async = true;
			}

			if (!jQuery.isNumeric(attrs.rt)) {
attrs.rt===undefined
				attrs.rt = 0;
			}

			if (attrs.pd !== true) {
attrs.pd===undefined
				attrs.pd = false;
			}

			if (!attrs.sp) {
attrs.sp===undefined
				attrs.sp = "bubble";
			}

			if (!attrs.sr) {
attrs.sr===undefined
				attrs.sr = false;
			}

/t
Wicket.Ajax.Call.ajax (wicket-ajax-jqu…3568000.js:560)
			this._initializeDefaults(attrs);
/d
			var res = Wicket.channelManager.schedule(attrs.ch, Wicket.bind(function () {
				this.doAjax(attrs);
			}, this));
/this=new Wicket.Ajax.Call()	, Wicket.Ajax.Call.prototype={...,doAjax:function(){...},...}
/ bind fct hier met this	, dat is wat hierboven de call was	, een leeg obj met prototype al die ajax fcts	,, dus in de fct straks is this= wat hier nu this is	,
/s
	Wicket.ChannelManager.prototype = {
		// Schedules the callback to channel with given name.
		schedule: function (channel, callback) {
->			var parsed = new Wicket.Channel(channel);
channel="0|s"
callback=function () {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		}
/=jQuery.proxy

/ Intermezzo

/ 137	,

	Wicket.Ajax.Call = Wicket.Class.create();
/=function(){...}

	Wicket.Ajax.Call.prototype = {
/ we set de prototype van deze function hierboven	,

/ 137	,


/ Ook hier 	, net als Wicket.Ajax.Call	, is WicketChannelManager een leeg obj, met een prototype	,

/ we deden	,
						var call = new Wicket.Ajax.Call();
							call.ajax(attributes);

/ Nu	,
	Wicket.ChannelManager = Wicket.Class.create();

	Wicket.ChannelManager.prototype = {

	jQuery.extend(true, Wicket, {

		channelManager: new Wicket.ChannelManager(),

/ We doen zelf	,

mychannelmgr=new Wicket.ChannelManager()
jQuery.extend(true,Wicket,{mychannelmgr:mychannelmgr})

mychannelmgr
	channels: Object
	__proto__: Object
		done: function (channel) {
		initialize: function () {
		schedule: function (channel, callback) {
		__proto__: Object

Wicket.channelManager
	channels: Object
	done: function (channel) {
	initialize: function () {
	schedule: function (channel, callback) {
	__proto__: Object							/ Object.prototype

/ Omdat ik mychannelmgr=new Wicket.ChannelManager() is er naast Wicket.channelManager ook  mychannelmgr, 	en je ziet het verschil, je ziet wat jQuery.extend doet	, 
/ TODO

/ Ook	, 
Wicket.channelManager.__proto__===Object.prototype
true
/ en dus NIET Wicket.ChannelManager.prototype	,

/ 13	. 
	Wicket.Channel = Wicket.Class.create();
/=
function () {
				this.initialize.apply(this, arguments);
			};

	Wicket.Channel.prototype = {
		initialize: function (name) {

/ Met new Wicket.Channel("0|s") executes the ctor , de anoymous fct hierboven	,

/ Einde Intermezzo

			var parsed = new Wicket.Channel(channel);
/s
		initialize: function (name) {
			name = name || '0|s';
			var res = name.match(/^([^|]+)\|(d|s|a)$/);
			else {
				this.name = res[1];
'0'
				this.type = res[2];
's'
			}
			this.callbacks = [];
			this.busy = false;
		},
/t
	Wicket.ChannelManager.prototype = {
		schedule: function (channel, callback) {
			var parsed = new Wicket.Channel(channel);
/d
parsed: Object
busy: false
callbacks: Array[0]
name: "0"
type: "s"
			var c = this.channels[parsed.name];
undefined
			if (isUndef(c)) {
				c = parsed;
				this.channels[c.name] = c;
this: Object
channels: Object
0: Object
busy: false
callbacks: Array[0]
name: "0"
type: "s"
__proto__: Object
__proto__: Object
done: function (channel) {
initialize: function () {
schedule: function (channel, callback) {
__proto__: Object

			return c.schedule(callback);
/ .schedule is die uit Wicket.Channel.prototype	,
/ callback=jQuery.proxy boven	, naar Wicket.Ajax.Call.prototype..doAjax(attrs);
/s
	Wicket.Channel.prototype = {
		schedule: function (callback) {
			if (this.busy === false) {
				this.busy = true;
				try {
					return callback();
/s
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
/s
/ context=call eerder=new Wicket.Ajax.Call()	, 
/s
	Wicket.Ajax.Call.prototype = {
		ajax: function (attrs) {
			var res = Wicket.channelManager.schedule(attrs.ch, Wicket.bind(function () {
->				this.doAjax(attrs);
			}, this));
/s
		doAjax: function (attrs) {
/ this=call eerder=new Wicket.Ajax.Call()	, 
attrs: Object
async: true
c: "clocka"
ch: "0|s"
dt: "xml"
e: Array[1]
event: jQuery.Event
m: "GET"
pd: false
rt: 0
sp: "bubble"
sr: false
u: "./clock?11-9.IBehaviorListener.0-clock"
wr: true
__proto__: Object

			var
				// the headers to use for each Ajax request
				headers = {
					'Wicket-Ajax': 'true',
					'Wicket-Ajax-BaseURL': getAjaxBaseUrl()
/s
	getAjaxBaseUrl = function () {
		var baseUrl = Wicket.Ajax.baseUrl || '.';
clock?11
/ TODO (Klopt	, we gaven http://localhost:9090/wicket-examples-step-by-step/ajax/clock?11	, maar hoe is Wicket.Ajax.baseUrl set?)
		return baseUrl;
	};

				// the precondition to use if there are no explicit ones
				defaultPrecondition = [ function (attributes) {
...
				}],

				// a context that brings the common data for the success/fialure/complete handlers
				context = {
					attrs: attrs,

					// initialize the array for steps (closures that execute each action)
					steps: []
				},

			var preconditions = attrs.pre || [];
			preconditions = defaultPrecondition.concat(preconditions);
/ Zojuist def	,
			if (jQuery.isArray(preconditions)) {

				var that = this._getTarget(attrs);
document
/ want,	
/s
	Wicket.Ajax.Call.prototype = {
		_getTarget: function (attrs) {
			var target;
			if (attrs.event) {
				target = attrs.event.target;
#document
				for (var p = 0; p < preconditions.length; p++) {
					var precondition = preconditions[p];
					var result;
					if (jQuery.isFunction(precondition)) {
						result = precondition.call(that, attrs);
/s
that=document
attrs , see boven	,
/s
				defaultPrecondition = [ function (attributes) {
					if (attributes.c) {
"clocka"
						if (attributes.f) {
/ NEE
						} else {
							return Wicket.$$(attributes.c);
/s
		/**
		 * returns if the element belongs to current document
		 * if the argument is not element, function returns true
		 */
		$$: function (element) {
			return Wicket.DOM.inDoc(element);
/s
element="clocka"
				if (typeof(element) === "string") {
					element = Wicket.$(element);
/s
		$: function (arg) {
			return Wicket.DOM.get(arg);
/s
			get: function (arg) {
				} else if (typeof arg === 'string') {
					return document.getElementById(arg);
/t
		DOM: {
			inDoc: function (element) {
					element = Wicket.$(element);
span#clocka
element.__proto__===HTMLSpanElement.prototype
true

				else {
					return document.getElementById(id) === element;
/ JA
/ TODO (We deden net: document.getElementById	)

/t
		doAjax: function (attrs) {
						result = precondition.call(that, attrs);
true
			we.publish(topic.AJAX_CALL_PRECONDITION, attrs);

			} else if (attrs.c && !jQuery.isWindow(attrs.c)) {
/ JA	, 
"clocka"
				// serialize just the form component with id == attrs.c
				var el = Wicket.$(attrs.c);
span#clocka
				data = data.concat(Wicket.Form.serializeElement(el, attrs.sr));
/ sr=serializeRecursively	,
[]
/ Speelt alleen rol als el=input/select/textArea	,

			// convert to URL encoded string
			data = jQuery.param(data);
""

			// execute the request
			var jqXHR = jQuery.ajax({
				url: attrs.u,
"./clock?11-9.IBehaviorListener.0-clock"
				type: attrs.m,
"GET"
				context: self,
/ call eerder	,
				beforeSend: function (jqXHR, settings) {
...
				},
				data: data,
[]
				dataType: attrs.dt,
"xml"
				async: attrs.async,
true
				timeout: attrs.rt,
0
				cache: false,
				headers: headers,
{
Wicket-Ajax: "true"
Wicket-Ajax-BaseURL: "clock?11"
__proto__: Object
}
				success: function(data, textStatus, jqXHR) {
					if (attrs.wr) {
						self.processAjaxResponse(data, textStatus, jqXHR, context);
					} else {
						self._executeHandlers(attrs.sh, attrs, jqXHR, data, textStatus);
						we.publish(topic.AJAX_CALL_SUCCESS, attrs, jqXHR, data, textStatus);
					}
				},
				error: function(jqXHR, textStatus, errorMessage) {
					self.failure(context, jqXHR, errorMessage, textStatus);
				},
				complete: function (jqXHR, textStatus) {

					context.steps.push(jQuery.proxy(function (notify) {
						if (attrs.i && context.isRedirecting !== true) {
							Wicket.DOM.hideIncrementally(attrs.i);
						}

						self._executeHandlers(attrs.coh, attrs, jqXHR, textStatus);
						we.publish(topic.AJAX_CALL_COMPLETE, attrs, jqXHR, textStatus);

						self.done(attrs);
						return FunctionsExecuter.DONE;
					}, self));

					var executer = new FunctionsExecuter(context.steps);
					executer.start();
				}
			});
/s
	ajax: function( url, options ) {
url=
async: true
beforeSend: function (jqXHR, settings) {
cache: false
complete: function (jqXHR, textStatus) {
context: Object
data: ""
dataType: "xml"
error: function (jqXHR, textStatus, errorMessage) {
headers: Object
success: function (data, textStatus, jqXHR) {
timeout: 0
type: "GET"
url: "./clock?11-9.IBehaviorListener.0-clock"
__proto__: Object
options=
undefined

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
/ JA
			options = url;
			url = undefined;
		}
		var transport,
...
			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),
/s
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :
/ jQuery.ajaxSettings=
accepts: Object
	*: "*/*"
	html: "text/html"
	json: "application/json, text/javascript"
	script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
	text: "text/plain"
	xml: "application/xml, text/xml"
	__proto__: Object
async: true
contentType: "application/x-www-form-urlencoded; charset=UTF-8"
contents: Object
	html: /\bhtml/
	json: /\bjson\b/
	script: /\b(?:java|ecma)script\b/
	xml: /\bxml\b/
	__proto__: Object
converters: Object
	* text: function String() { [native code] }
	text html: true
	text json: function ( data ) {
	text script: function ( text ) {
	text xml: function ( data ) {
	__proto__: Object
flatOptions: Object
global: true
isLocal: false
jsonp: "callback"
jsonpCallback: function () {
processData: true
responseFields: Object
type: "GET"
url: "http://localhost:9090/wicket-examples-step-by-step/ajax/clock?11" 		/ TODO
xhr: function () {
__proto__: Object

/ setttings=
async: true
beforeSend: function (jqXHR, settings) {
cache: false
complete: function (jqXHR, textStatus) {
context: Object
data: ""
dataType: "xml"
error: function (jqXHR, textStatus, errorMessage) {
headers: Object
success: function (data, textStatus, jqXHR) {
timeout: 0
type: "GET"
url: "./clock?11-9.IBehaviorListener.0-clock"
__proto__: Object

target: Object
	accepts: Object
	async: true
	beforeSend: function (jqXHR, settings) {
	cache: false
	complete: function (jqXHR, textStatus) {
	contentType: "application/x-www-form-urlencoded; charset=UTF-8"
	contents: Object
	context: Object
	converters: Object
	data: ""
	dataType: "xml"
	error: function (jqXHR, textStatus, errorMessage) {
	flatOptions: Object
	global: true
	headers: Object
	isLocal: false
	jsonp: "callback"
	jsonpCallback: function () {
	processData: true
	responseFields: Object
	success: function (data, textStatus, jqXHR) {
	timeout: 0
	type: "GET"
	url: "./clock?11-10.IBehaviorListener.0-clock"
	xhr: function () {
	__proto__: Object

/ target heet hieronder s	,
 
			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
/ TODO

/t
/ jQuery's
	ajax: function( url, options ) {
			s = jQuery.ajaxSetup( {}, options ),
/d
/ bijv	,
s.url=
"./clock?11-9.IBehaviorListener.0-clock"

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Fake xhr
			jqXHR = {
				readyState: 0,
...
/ TODO
		// Attach deferreds
		deferred.promise( jqXHR ).complete = completeDeferred.add;
///////////////////////////////////////
/ Nu heeft jqXHR alle promise methods	,
jqXHR: Object
abort: function ( statusText ) {
always: function () {
complete: function () {
done: function () {
error: function () {
fail: function () {
getAllResponseHeaders: function () {
getResponseHeader: function ( key ) {
overrideMimeType: function ( type ) {
pipe: function ( /* fnDone, fnFail, fnProgress */ ) {
progress: function () {
promise: function ( obj ) {
readyState: 0
setRequestHeader: function ( name, value ) {
state: function () {
statusCode: function ( map ) {
success: function () {
then: function ( /* fnDone, fnFail, fnProgress */ ) {
__proto__: Object

		jqXHR.success = jqXHR.done;
/ TODO (See *)
		jqXHR.error = jqXHR.fail;

		jqXHR.setRequestHeader(...)
/ we zijn in jQuery.ajax	, een local is requestHeaders	, jqXHR is ook een local, jqXHR.setRequestHeader  sluit requestHeaders in	,  dus jqXHR.setRequestHeader is een closure	,

/ local	,
requestHeaders: Object
Accept: "application/xml, text/xml, */*; q=0.01"
__proto__: Object

		// Check for headers option
		for ( i in s.headers ) {
Wicket-Ajax: "true"
Wicket-Ajax-BaseURL: "clock?11"
			jqXHR.setRequestHeader( i, s.headers[ i ] );

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );

/ jqXHR.success(s.success)	, 
/ jqXHR.error(s.error)	, 
/ jqXHR.complete(s.complete)	, 
/ De success fct van de promise wordt dus s.success	,
/s
jQuery.Callbacks = function( options ) {
		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
->				if ( list ) {
/ OK	,
/ we geloven het nu	,


/ Intermezzo

/ Ad *

/ Waar is .done def	?

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks( "once memory" ), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks( "memory" ) ]
			],

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[ 1 ] ] = list.add;

/ Einde Intermezzo

/ Intermezzo

var
8005
	prefilters = {},
	transports = {},


8021
// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {				/= jQuery.ajaxPrefilter	, jQuery.ajaxTransport	, 
																/ hij returns inderdaad steeds een nieuwe fct	 		
		///////////////////////////////
		/ in deze fct wordt prefilter en transports create	,

/ er is ook	,
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {


transports={
	*: Array[1]
		0: function ( options ) { 	/= jQuery.ajaxTransport(function(opttions){...})
		length: 1
		__proto__: Array[0]
	script: Array[1]
		0: function ( s ) {			/= jQuery.ajaxTransport("script",function(s){...})
		length: 1
		__proto__: Array[0]
	__proto__: Object


8348
jQuery.extend( {
	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

9051
Query.ajaxTransport( function( options ) {
		return {
			send: function( headers, complete ) {
			abort: function() {

jQuery.ajaxTransport( "script", function( s ) {
		return {
			send: function( _, complete ) {
			abort: function() {

/ MORGENOCHTEND




/ Einde Intermezzo

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );
/s
	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
/s
	function inspect( dataType ) {
dataType="xml"
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
/ GEEN , want structure heeft alleen * en script als key	,

		return selected;
undefined
/t
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {
	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
/pd
/s
	function inspect( dataType ) {
dataType='*'
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
/s
jQuery.ajaxTransport( function( options ) {
		return {
			send: function( headers, complete ) {
...
			abort: function() {
...
/t
	var inspected = {},
		seekingTransport = ( structure === transports );
true
	function inspect( dataType ) {
/ closure	, want sluit inspected, seekingTransport in	,
		inspected[ dataType ] = true;
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
{
			send: function( headers, complete ) {
			abort: function() {
}
			} else if ( seekingTransport ) {
/ JA
				return !( selected = dataTypeOrTransport );
/ Met ! stoppen we jQuery.each	,
		return selected;
/t
	ajax: function( url, options ) {
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );
/d
transport: Object
abort: function () {
send: function ( headers, complete ) {
__proto__: Object
}

		} else {
			jqXHR.readyState = 1;

/ jqXHR is de promise,	

			try {
				state = 1;
				transport.send( requestHeaders, done );
/s
jQuery.ajaxTransport( function( options ) {
		return {
			send: function( headers, complete ) {

headers: Object
Accept: "application/xml, text/xml, */*; q=0.01"
Wicket-Ajax: "true"
Wicket-Ajax-BaseURL: "clock?11"

complete=done fct, die onder de transport.send call staat	,

				var i,
					xhr = options.xhr();
/s
jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
/t
				xhr.open(
					options.type,		/ "GET"
					options.url,		/ "./clock?11-9.IBehaviorListener.0-clock&_=1462090889545"
					options.async,		/ true
					options.username,	/ undefined
					options.password	/ undefined
				);
/ options zijn de samengevoegde options hier boven, met ajaxSettings.optipons	,

/ MAANDAGOCHTEND




















/ Einde DEBUG AJAX CLOCK JAVASCRIPT


/ MAVEN SERVLET JQUERY 

/ 13	. 

/ we maken nieuw project in wicket7.3 workspace	, 
web
/ met maven-archetype-webapp
/ in project/ run-config: 
base directory: /home/eric/Devel/Java/Eclipse/eclipse-jee-test/workspace-wicket7_3/web
Goals: tomcat7:undeploy clean tomcat7:deploy

/ we download jquery-2.2.3.js	, en we set deze in webapps/	, 
/ ook index.html in webapps/	, 

/ 13	. 

$ vi pom.xml

<project  ...>
  <modelVersion>4.0.0</modelVersion>
  <groupId>my.own</groupId>
  <artifactId>web</artifactId>
  <packaging>war</packaging>
  <version>0.0.1-SNAPSHOT</version>

	<properties>
				<tomcat.version>2.2</tomcat.version>
		
	</properties>
  
  <build>
    <finalName>web</finalName>
    	<plugins>
    			<plugin>
				<groupId>org.apache.tomcat.maven</groupId>
				<artifactId>tomcat7-maven-plugin</artifactId>
				<version>${tomcat.version}</version>
				<configuration>
	    			<port>8080</port>
	    			<path>/${project.artifactId}</path>
	    			<url>http://localhost:9090/manager/text</url>
	    			<server>my_tomcat</server>
 	 			</configuration>
			</plugin>
		</plugins>
			
  </build>
</project>

/ we zien ${project.artifactId}	, die we gewoon kunnen use	, 
/ TODO
/ ${tomcat.version} moeten we wel opgeven in <properties/>

/ 13	. 

/ start Tomcat	,
[eric@localhost apache-tomcat-8.0.28]$ bin/catalina.sh jpda run

/ 13	. 

$ vi index.html

<head>
<script src="jquery-2.2.3.js" ></script>
<script>
$(document).ready(function(){
	alert("Foo Bar");
});
</script>
</head>
/ OK

/ 13	. 

/ Lees	,
http://www.journaldev.com/4742/jquery-ajax-servlet-jsp-web-application-integration-example-tutorial

/ 13	. 

/ er is al index.jsp in webapps/	, maar hij pakt index.html	,
/ als index.html er niet is	, pakt hij index.jsp	,

/ als we een jsp hebben	, moeten we ook 

$ vi pom.xml

	<properties>
				<servlet.version>3.1.0</servlet.version>
	</properties>
	
	<dependencies>
		<dependency>
		    <groupId>javax.servlet</groupId>
		    <artifactId>javax.servlet-api</artifactId>
		    <version>${servlet.version}</version>
			<scope>provided</scope>
		</dependency>
	</dependencies>

/13	. 

[eric@localhost tmp]$ (cd servlet/; jar xvf /home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28/lib/servlet-api.jar )
[eric@localhost tmp]$ cat servlet/META-INF/MANIFEST.MF 
Specification-Version: 3.1

/ Is 3.1.0 in de POM OK	?
/ als we 4.0.0-b01 nemen,	 dan ook OK	,

[eric@localhost apache-tomcat-8.0.28]$ jar tvf lib/servlet-api.jar 
   473 Wed Oct 07 19:25:38 CEST 2015 javax/servlet/Servlet.class
  8530 Wed Oct 07 19:25:38 CEST 2015 javax/servlet/http/HttpServlet.class

/ we zien precies hetzelfde	, als we 	,
[eric@localhost apache-tomcat-8.0.28]$ jar tvf ~/.m2/repository/javax/servlet/javax.servlet-api/3.1.0/javax.servlet-api-3.1.0.jar 

/ we doen ook	,
[eric@localhost apache-tomcat-8.0.28]$ (cd /tmp/servlet;jar xvf ~/.m2/repository/javax/servlet/javax.servlet-api/3.1.0/javax.servlet-api-3.1.0.jar )
[eric@localhost apache-tomcat-8.0.28]$ cat /tmp/servlet/META-INF/MANIFEST.MF 
Manifest-Version: 1.0
Export-Package: javax.servlet;uses:="javax.servlet.descriptor,javax.se
 rvlet.annotation";version="3.1.0",javax.servlet.descriptor;version="3
 .1.0",javax.servlet.annotation;uses:="javax.servlet";version="3.1.0",
 javax.servlet.http;uses:="javax.servlet";version="3.1.0"
Implementation-Version: 3.1.0
Built-By: shichan
Specification-Vendor: Oracle Corporation
Tool: Bnd-0.0.255
Bundle-Name: Java Servlet API
Created-By: 1.7.0_13 (Oracle Corporation)
Bundle-Vendor: GlassFish Community
Implementation-Vendor: GlassFish Community
Implementation-Vendor-Id: org.glassfish
Bundle-Version: 3.1.0
Build-Jdk: 1.7.0_13
Bnd-LastModified: 1366933945581
Bundle-ManifestVersion: 2
Bundle-License: https://glassfish.dev.java.net/nonav/public/CDDL+GPL.h
 tml
Bundle-Description: Java(TM) Servlet 3.1 API Design Specification
Specification-Version: 3.1
Import-Package: javax.servlet;version="3.1.0",javax.servlet.annotation
 ;version="3.1.0",javax.servlet.descriptor;version="3.1.0",javax.servl
 et.http;version="3.1.0"
Bundle-SymbolicName: javax.servlet-api
Bundle-DocURL: https://glassfish.dev.java.net
Extension-Name: javax.servlet
Archiver-Version: Plexus Archiver


/ 13	. 

/ Lees	, 
http://www.journaldev.com/4742/jquery-ajax-servlet-jsp-web-application-integration-example-tutorial

/ 13	. 

/ we maken zoiets als op	,
http://www.journaldev.com/4742/jquery-ajax-servlet-jsp-web-application-integration-example-tutorial

/ we hoeven in de pom  alleen javax.servlet.api , provided	, 
/ Maakt de versie nog uit? 
/ wH wel voor web.xml	,
/ TODO

[eric@localhost apache-tomcat-8.0.28]$ pwd
/home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28
[eric@localhost apache-tomcat-8.0.28]$ (cd /tmp/servlet/;jar xvf /home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28/lib/servlet-api.jar )
[eric@localhost apache-tomcat-8.0.28]$ less /tmp/servlet/META-INF/MANIFEST.MF 
Specification-Version: 3.1

/ dus we nemen web.xml version 3.1	,

/ Lees	,
http://www.mkyong.com/web-development/the-web-xml-deployment-descriptor-examples/

/ in src/main/webapp
$ vi WEB-INF/web.xml

<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee  http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1" >
</web-app>

/ Intermezzo

/ In tomcat-8.0.28-src vinden we vrijwel deze <web-app/> 	, alleen dan met een extra attr	,
  metadata-complete="true"
/ Maar dan werkt @WebServlet op de servlet NIET	, 

/ Lees	,
http://stackoverflow.com/questions/9820379/what-to-do-with-annotations-after-setting-metadata-complete-true-which-resolv

/ Einde Intermezzo


/ in src/main/java	, 
$ vi MyServlet.java

package web;

import java.io.IOException;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

@WebServlet("/foobar")
public class MyServlet extends HttpServlet{
	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp)
			throws ServletException, IOException {
		resp.setContentType("text/plain");
		resp.getWriter().write(("Foo Bar Gee Hee"));
	}

}

$ vi index.html

<!doctype html>

<head>
<script src="jquery-2.2.3.js" ></script>
<script>
$(document).ready(function(){
	$.get("foobar")
		.done(function(data){
			alert(data);
		});
});
</script>
</head>

/ Geef	,
http://localhost:9090/web/
/ OK

http://www.journaldev.com/4742/jquery-ajax-servlet-jsp-web-application-integration-example-tutorial

/ 13	. 

/ we moeten	/ in ,
@WebServlet("/foobar")
/ we moeten GEEN / in	,
	$.get("foobar")

/ Einde MAVEN SERVLET JQUERY 


/ MAVEN JSP JQUERY

/ Lees	, 
http://beginnersbook.com/2013/11/jsp-expression-language-el/
http://www.java-samples.com/showtutorial.php?tutorialid=551
http://stackoverflow.com/questions/2422468/how-to-upload-files-to-server-using-jsp-servlet?rq=1	 / balusC

/ 7	.

/ Lees	,
http://www.java-samples.com/showtutorial.php?tutorialid=551

/ Ook	,
http://docs.oracle.com/javaee/5/tutorial/doc/bnair.html

/ workspace wicket7.3
/ project web

/ in src/main/java
$ vi model/Person.java

package model;

public class Person {
	public String getName() {
		return "Foo Bar";

	}
}


/ in src/main/webapp	,
$ vi index.jsp

<jsp:useBean id="person" class="model.Person"></jsp:useBean>
<html>
<body>
<h2>${person.name }</h2>
</body>
</html>

/ we copy de web.xml uit Tomcat	,
/ Maar dan ZONDER metadata-complete="true"	, of WEL metadata-complete="false"
/ Voor hier maakt dat niet uit	, maar wel als we een servlet hebben met @WebServlet	,

[eric@localhost apache-tomcat-8.0.28]$ find ../apache-tomcat-8.0.28-src/ -name web.xml
../apache-tomcat-8.0.28-src/test/webapp-3.1/WEB-INF/web.xml

$ vi WEB-INF/web.xml

<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee  http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1"
         
         >
</web-app>

/ Geef	,
http://localhost:9090/web/index.jsp
/ we zien 
Foo Bar

/ 13	. 

/ we geven een GET parameter	,

/ in src/main/java
$ vi model/Person.java

package model;

public class Person {
	public String getName() {
		return "Hello "+name+"!";

	}
	public void setName(String n){
		name=n;
	}
	private String name;
}

/ in src/main/webapp
$ vi index.jsp
<jsp:useBean id="person" class="model.Person">
	<jsp:setProperty name="person" property="*"></jsp:setProperty>
</jsp:useBean>
<html>
<body>
<h2>${person.name }</h2>
</body>
</html>

/ Geef	,
http://localhost:9090/web/index.jsp?name=Eric%20Van%20der%20Velden
/ we zien
Hello Eric Van der Velden

	<jsp:setProperty name="person" property="*"></jsp:setProperty>
/ geldt voor GET en POST	,

/ 13	. 

/ we hebben zojuist een GET gedaan	, 
/ Nu willen we een POST doen	, het makkelijkst is dat met een form	,
/ Maar de default method van een form is een GET	, 
/ we zullen zien dat we met een form een GET en een POST kunnen doen	,

/ Onveranderd	,
$ vi model/Person.java

package model;

public class Person {
	public String getName() {
		return "Hello "+name+"!";

	}
	public void setName(String n){
		name=n;
	}
	private String name;
}

/ in src/main/webapp	,
$ vi index.jsp

<jsp:useBean id="person" class="model.Person">
	<jsp:setProperty name="person" property="*"></jsp:setProperty>
</jsp:useBean>
<html>
<body>
<h2>${person.name }</h2>
<form action="index.jsp" method="post">
	<input type="text" name="name">
	<input type="submit">
</form>
</body>
</html>

/ Let op: de form's method=post	,
/ Geef	,
http://localhost:9090/web/index.jsp 

/ we zien 
Hello null!
/ Geef Eric Van der Velden, submit	,
/ we zien
Hello Eric Van der Velden
/ In de url zien we nog steeds
http://localhost:9090/web/index.jsp 

/ Nu maken we de form's method = get	, de default	,
<form action="index.jsp" >

/ we zien 
Hello null!
/ Geef Eric Van der Velden, submit	,
/ we zien
Hello Eric Van der Velden
/ In de url zien we nog steeds
http://localhost:9090/web/index.jsp?name=Eric+J.+Van+der+Velden

/ 7	. 

/ Lees	,
http://www.java-samples.com/showtutorial.php?tutorialid=7

/ over JSP & cookies	, 

/ 7	. 

/ we willen een ajax form create	,

/ Lees	,
http://api.jquery.com/jQuery.post/

/ workspace-wicket7_3
/ project web

/ Tot nu toe,	

$ vi index2.jsp

<jsp:useBean id="person" class="model.Person">
	<jsp:setProperty name="person" property="*"></jsp:setProperty>
</jsp:useBean>
<!doctype html>
<html>
<body>
<h2>${person.name }</h2>
<form>
	<input type="text" name="name">
	<input type="submit">
</form>
</body>
</html>

/ als we submit,	 komt door line	,
    <jsp:setProperty name="person" property="*"></jsp:setProperty>
/ dat de submit data wordt processed	,

/ Nu gaan we het eigenlijk zelf doen	,

$ vi index2.jsp

<jsp:useBean id="person" class="model.Person">
	<jsp:setProperty name="person" property="*"></jsp:setProperty>
</jsp:useBean>
<!doctype html>
<html>
<head>
<script src="jquery-2.2.3.js" ></script>
<script>
$(document).ready(function(){
	$("form").submit(function(ev){
		ev.preventDefault();
		alert("Foo Bar");
	});
});
</script>

</head>
<body>
<h2>${person.name }</h2>
<form>
	<input type="text" name="name">
	<input type="submit">
</form>
</body>
</html>

/ we zien nu als we submit geen nieuwe page	, en we zien de alert	,

$ vi index2.jsp

<jsp:useBean id="person" class="model.Person">
	<jsp:setProperty name="person" property="*"></jsp:setProperty>
</jsp:useBean>
<!doctype html>
<html>
<head>
<script src="jquery-2.2.3.js" ></script>
<script>
$(document).ready(function(){
	$("form").submit(function(ev){
		ev.preventDefault();
		var name=$(this).find("input[name='name']").val();		/ *
		var url=$(this).attr("action");
		var promise=$.post(url,{name:name});
		promise.done(function(data){
			var x=$(data).find("input[name='name']");			/ **
			var b=false;
		});
	});;
});
</script>
</head>
<body>
<h2>${person.name }</h2>
<form action="index2.jsp">
	<input type="text" name="name">
	<input type="submit">
</form>
</body>
</html>

/ Bij * heeft input[name] een .val()	, Eric J. Van der Velden	,
/ bij ** is .val() ""	, 
/ TODO

/ Bij *	,
		var name=$(this).find("input[name='name']").val();
name="Eric J. Van der Velden"

/ In console	,
/ *
> this
<form action="index2.jsp" _lpchecked="1">…</form>
> $(this).find("input[name]")
[ <input type="text" name="name"> ]
> $(this).find("input[name]").val()
"Eric J. Van der Velden"
> $(this).parent().parent().parent()
[ #document ]

/ **
> this
Object {url: "index2.jsp", type: "POST", isLocal: false, global: true, processData: true…}
/ TODO

> $(data) [ #text , <script src="jquery-2.2.3.js"></script> , #text , <script>…</script> , #text , <h2>Hello Eric J. Van der Velden!</h2> , #text , <form action="index2.jsp">…</form> , #text ]
$(data).find("form")
[]
$(data).find("input")
[ <input type="text" name="name"> , <input type="submit"> ]
/ dus .find kijkt alleen in de children	, niet in self	,
/ TODO
$(data).find("input").val()
""

/ MORGENOCHTEND
/ Waarom is in de done $(data).find("input[name]").val()===""
/ TODO

/ 7	. 

/ jsp als controller	, see Java->Web voor een aantal voorbeelden waar ze een servlet als controller 	,

/ Einde MAVEN JSP JQUERY

/ JQUERY DEFERRED

/ ws wicket7_3
/ project web

$ vi index3.jsp

<body>
<button>Go</button>
<p>Ready...</p>
<script>
var f=function(){
	$('p').append(' 1 ');
}
var d=$.Deferred();
d.done(f);
$('button').on('click',function(){
	d.resolve();
});
</script>
</body>

/ 7	.

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [
				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks( "once memory" ), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks( "memory" ) ]
			],
/ Er is 1 fct jQuery.Callbacks	, iedere call maakt en returns een Object self	,dus in tuples zijn 3 verschillende Object's 	,  we noemen ze Callbacks obj	,

		var 
			promise = {
				state: function() {
				always: function() {
				then: function( /* fnDone, fnFail, fnProgress */ ) {
/ Er is 1 promise	,  
/ Deze promse gaan we uitbreiden	,

		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],						/ 1 van de 3 Callbacks obj's hierboven	,		

			promise[ tuple[ 1 ] ] = list.add;
/ promise.done=list.add	, list is 1 van de 3 Callbacks obj's hierboven	, 

promise: Object
	always: function () {
	done: function () {
	pipe: function ( /* fnDone, fnFail, fnProgress */ ) {
	promise: function ( obj ) {
	state: function () {
	then: function ( /* fnDone, fnFail, fnProgress */ ) {
	__proto__: Object 

			// Handle state
			if ( stateString ) {
				list.add( function() {						/ promise.done call	, dus add 'n handler	,

					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
/ Zet al 3 handlers op de list van handlers	, 

/ 7	. 

$ vi index3.js
var d=$.Deferred();
d.done(f);
/s
jQuery.Callbacks = function( options ) {
	return self;
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function() {
									list.push( arg );
				return this;
			}
			fireWith: function( context, args ) {


/ self is een coll. closures	, want bijv. self.add sluit list in	, de feitenlijke list van callbacks	,
/ this is de Deferred, d	,

/ d heeft een promise	, en deze heeft done, fail fcts	, done is self.add van een self	, fail is self.add van een andere self	, deze .add registers de handler,	in de closed in list	,

/ de Deferred d of z'n promise d.promise() hebben de fct done, fail	,	 beide zijn closures	, en sluiten elk een eigen list in van handlers	, 
/ er is 1 Callbacks fct	, deze wordt called voor done en voor fail	 	, maar telkens met nieuwe locals , bijv list	, die done en fail insluiten	,
/ Dat is altijd bij een fct zo	, als je hem call	, steeds nieuwe locals	,

/ 13	. 

jQuery.extend( {
	Deferred: function( func ) {
		var tuples = [ [ "resolve", "done", jQuery.Callbacks( "once memory" ), "resolved" ],...
		promise = {... }
		deferred={}

		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],						/= coll (obj) van closures	, die allemaal dezelfde objs insluiten, zoals 																// list van handlers, 	
			promise[ tuple[ 1 ] ] = list.add;

			list.add( function() { state = stateString; }, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock ); }	/ add 3 handlers to 																					/ list 

			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? promise : this, arguments );
				return this;
			};
		} );

		promise.promise( deferred );	/ deferred krijgt alle closures van promise	, zoals done, fail	,  

		return deferred;
	},

/ dus 'n Deferred bestaat uit closures	. done , resolve, resolveWith sluiten dezelfde objs in 	, fail, reject, rejectWith sluiten andere dezelfde objs in 	, zoals een list van handlers	, 
/ done, resolveWith zitten in 1 coll van closures	, self heet deze	, die dezelfde objs insluiten. Hier heet self list	, een list van closures	, OK	, en de handlers die deze closures insluiten heet ook list	, 

/ 7	. 

/ we click de button	,
/s
jQuery.extend( {
	Deferred: function( func ) {
		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			// deferred[ resolve | reject | notify ]
			deferred[ tuple[ 0 ] ] = function() {
->				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? promise : this, arguments );
/s
jQuery.Callbacks = function( options ) {
		self = {
			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
context=promise obj	,
					queue.push( args );
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ]; 
					if ( !firing ) {
						fire();
/s
		fire = function() {
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
/= wat args is hierboven	, 
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
/s
/ eerst de 3 handlers	, die altijd worden set	,
/ TODO
var f=function(){
	$('p').append(' 1 ');
}

/ In f is this=Promise obj	, 
/ TODO



/ Einde JQUERY DEFERRED

/ JQUERY AJAX

/ ajax in jquery-2.2.3.js begint op  8017 met	,
var
	rhash = /#.*$/,

/ en eindigt op 9501

/ Geef	,
localhost:9090/web/index2.jsp
/ jquery wordt exec	, 

prefilters={}
transports={}
/c
jQuery.extend( {
	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),	/ 8379	, dus dit is jQuery.ajaxPrefilter	, een closure	, die prefilters insluit	,
/s
function addToPrefiltersOrTransports( structure ) {		/ 8053
	return function( dataTypeExpression, func ) {			/ closure	,	/ = jQuery.ajaxPrefilter 
/t
	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),	
/d
/c
jQuery.extend( {
	ajaxTransport: addToPrefiltersOrTransports( transports ),	/ 8380		/ dus dit is jQuery.ajaxTransport	,	 een closure	,i die transports insluit	,
/s
function addToPrefiltersOrTransports( structure ) {		/ 8053 
	return function( dataTypeExpression, func ) {			/ closure	,	/ = jQuery.ajaxTransport

/c
jQuery.ajxTransport( function( options ) (**) {	/ 9082	/ call jQuery.ajaxTransport	, die hierboven is def	,
												/ deze fct (**) wordt var transports={"*":[fct(**)]}

/ Intermezzo

/ fct (**) is de fct die straks de ajax call doet	, komt achter "*" in transports	,

function( options ) {				/ (**)
	var callback, errorCallback;
		return {
			send: function( headers, complete ) {
				callback = function( type ) {
					return function() {
/TODO
				try{
					xhr.send( options.hasContent && options.data || null );
			abort: function() {
		}
}

/ Einde Intermezzo

/s
function addToPrefiltersOrTransports( structure ) {
	return function( dataTypeExpression, func ) {		/ closure, sluit structure in	, structure= var transports={}  

		if ( typeof dataTypeExpression !== "string" ) {	/ 8058
/ JA	, want is de fct (**) hierboven 
			func = dataTypeExpression;
			dataTypeExpression = "*";

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {
/ JA

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {
/ JA	, 
"*"
				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
/ NEE
				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );

structure: Object
	*: Array[1]
		0: function ( options ) { 	/= (**)
/t
jQuery.ajaxSetup( {	/ 9226
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );
/s
jQuery.extend( {
	ajaxSetup: function( target, settings ) {

		return settings ?
/ NEE
settings=undefinedd
			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );

/ Nu	, 
ajaxSettings: Object
	accepts: Object
		*: "*/*"
		html: "text/html"
		json: "application/json, text/javascript"
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
		text: "text/plain"
		xml: "application/xml, text/xml"
		__proto__: Object
	async: true
	contentType: "application/x-www-form-urlencoded; charset=UTF-8"
	contents: Object
		html: /\bhtml/
		json: /\bjson\b/
		script: /\b(?:java|ecma)script\b/
		xml: /\bxml\b/
		__proto__: Object
	converters: Object
		* text: function String() { [native code] }
		text html: true
		text json: function ( data ) {
		text script: function ( text ) {
		text xml: function ( data ) {
		__proto__: Object
	flatOptions: Object
	context: true
	url: true
	__proto__: Object
	global: true
	isLocal: false
	processData: true
	responseFields: Object
		json: "responseJSON"
		text: "responseText"
		xml: "responseXML"
		__proto__: Object
	type: "GET"
	url: "http://localhost:9090/web/index2.jsp"
	xhr: function () {
	__proto__: Object


/t
/s
jQuery.ajaxPrefilter( "script", function( s ) (***){	/ 9243	
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );
/s
function addToPrefiltersOrTransports( structure ) {	 / structure= var preFilters
	return function( dataTypeExpression, func ) {		/ = jQuery.ajaxPrefilter	,
		if ( typeof dataTypeExpression !== "string" ) {
/ NEE
		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];
dataTypeExpression="script"
["script"]
		if ( jQuery.isFunction( func ) ) {
/ JA
/ fct (***)
			while ( ( dataType = dataTypes[ i++ ] ) ) {
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );

/ Nu is	, 
var prefilters={"script":[fct (***)]}

/t
jQuery.ajaxTransport( "script", function( s ) (****){	/ 9253
/s
function addToPrefiltersOrTransports( structure ) {	/= var transports={"*":[fct (**) ]]
	return function( dataTypeExpression, func ) {	/=jQuery.ajaxTransport
dataTypeExpression="script"
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );

/ Nu is 
var transports={
	"*":fct (**)
	"script:"fct (****)
}

/t
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
} );
/ Deze komen bij jQuery.settings	,

var rnotwhite = ( /\S+/g );

jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

/ achter json en achter jsonp komen in prefilters dezelfde fct	,

/s
function addToPrefiltersOrTransports( structure ) {
	return function( dataTypeExpression, func ) {
		if ( typeof dataTypeExpression !== "string" ) {
/ NEE
		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];
/ rnotWhite
dataTypes: Array[2]
	0: "json"
	1: "jsonp"
	length: 2
	__proto__: Array[0]

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );

/ 7	. 

/ click submit	,

		var promise=$.post(url,{name:name});
url="index2.jsp"
name="Eric J. Van der Velden"	
/s
jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {
		return jQuery.ajax( jQuery.extend( {
			url: url,						/ "index2.jsp"
			type: method,					/ "post"
			dataType: type,					/ undefined 
			data: data,						/ {name:"Eric J. Van der Velden"}
			success: callback				/ undefined
		}, jQuery.isPlainObject( url ) && url ) );	 false && ... TODO
	};
/s
	ajax: function( url, options ) {
url: Object
	data: Object
		name: "Eric J. Van der Velden"
	__proto__: Object
	dataType: undefined
	success: undefined
	type: "post"
	url: "/web/index2.jsp"
	__proto__: Object

		if ( typeof url === "object" ) {
			options = url;
			url = undefined;

options: Object
	data: Object
		name: ""
	__proto__: Object
	dataType: undefined
	success: undefined
	type: "post"
	url: "/web/index2.jsp"
	__proto__: Object

		var transport,
			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),
/s
	ajaxSetup: function( target, settings ) {
		return settings ?
			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :
/t
s=(WH)copy van jQuery.settings + options	,
s: Object
	accepts: Object
		*: "*/*"
		html: "text/html"
		json: "application/json, text/javascript"
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
		text: "text/plain"
		xml: "application/xml, text/xml"
		__proto__: Object
	async: true
	contentType: "application/x-www-form-urlencoded; charset=UTF-8"
	contents: Object
	converters: Object
	data: Object
		name: ""
	__proto__: Object
	flatOptions: Object
	global: true
	isLocal: false
	jsonp: "callback"
	jsonpCallback: function () {
	processData: true
	responseFields: Object
	type: "post"
	url: "/web/index2.jsp"
	xhr: function () {
	__proto__: Object

		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
/ TODO

			jqXHR = {
				readyState: 0,
				getResponseHeader: function( key ) {
						match = responseHeaders[ key.toLowerCase() ];
				setRequestHeader: function( name, value ) {
						requestHeaders[ name ] = value;
				...
/ jqXHR wordt straks een promise	,
/ getResponseHeader, setRequestHeader zijn 2 closures die dezelfde obj insluiten	, requestHeaders , maar done zal andere objs insluiten	,
/ jQuery.ajax zal return jqXHR,	 dus jqXXHR is coll closures	, die over het algemeen elk andere objs insluiten	,

		deferred.promise( jqXHR ).complete = completeDeferred.add;
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;




		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
s
	data: "name=Eric+J.+Van+der+Velden"

		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );
prefilters: Object
json: Array[1]
jsonp: Array[1]
script: Array[1]
__proto__: Object
/ jQuery.ajax sluit prefilters in	,

/ Intermezzo

/ WH is jQuery.ajax een closure, die prefilters insluit	,

/ stack trace	,

jQuery.extend.ajax (jquery-2.2.3.js:8562)
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

jQuery.(anonymous function) (jquery-2.2.3.js:8835)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
(anonymous function) (index2.jsp:14)
		var promise=$.post(url,{name:name});

jQuery.event.dispatch (jquery-2.2.3.js:4737)
						handleObj.handler ).apply( matched.elem, args );

elemData.handle (jquery-2.2.3.js:4549)
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;

/ Einde Intermezzo

/s
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
options.dataTypes[ 0 ]="*"
inspected={}
/s
	function inspect( dataType ) {
dataType="*"
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
/ GEEN	, want sturcture=prefilters heeft key "*" niet	,
		return selected;
undefined
/t
	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
/pd
/ in de inspect call is inspected["*"]=true set	,
/ dus undefined || false === false 	, dus GEEN call op inspect("*")	,
 
/t
jQuery.ajax	,
		s.type = s.type.toUpperCase();
"POST"
		s.hasContent = !rnoContent.test( s.type );
true
		cacheURL = s.url;
"index2.jsp"

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
"application/x-www-form-urlencoded; charset=UTF-8"

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
s.dataTypes=["*"]
s.accepts={
*: "*/*"
html: "text/html"
json: "application/json, text/javascript"
script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
text: "text/plain"
xml: "application/xml, text/xml"
}
				s.accepts[ s.dataTypes[ 0 ] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);
/s
jQuery
	ajax: function( url, options ) {
		var transport,
			responseHeaders,
			jqXHR = {
->				setRequestHeader: function( name, value ) {
name="Accept"
value="*/*"
->					var lname = name.toLowerCase();
"accept"
					if ( !state ) {
/ JA
state=0	, 
state is local in jQuery.ajax	, en jqXHR.setRequestHeader sluit state in	,
requestHeaders is local in jQuery.ajax	, en jqXHR.setRequestHeader sluit state in	,
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
"Accept"
						requestHeaders[ name ] = value;
requestHeaders: Object
Accept: "*/*"
Content-Type: "application/x-www-form-urlencoded; charset=UTF-8"
__proto__: Object
					}
					return this;
this=jqXHR


/ Intermezzo

var f=function(){
	var x=7;	
	var g=function(){
		...
	}
	g()
}
f()
/ g sluit x in	, 
/ Noem je g een closure	?
/ TODO
/ Als we g willen use als f al is returned	, moeten we g return	, 

var f=function(){
	var x=7;	
	var g=function(){
		...
	}
	return g;
}
f()()

/ Einde Intermezzo

/t
		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
s["success"]===undefined
s["error"]===undefined
s["complete"]===undefined
/ Dus hier gebeurt NIETS	, 
/ TODO

		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );
/ options zijn de originele args	, 
options: Object
	data: Object
		name: "Eric J. Van der Velden"
		__proto__: Object
	dataType: undefined
	success: undefined
	type: "post"
	url: "index2.jsp"
	__proto__: Object
/s
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

/ Dus options=s in caller	,
/ originalOptions=options in caller	,
options.dataTypes=["*"]

		seekingTransport = ( structure === transports );
true
	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
	function inspect( dataType ) {
dataType="*"
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
structure=transports in caller	,
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
/s
/ prefilterOrFactory is het arg van jQuery.ajaxTransport( function( options (*) ) {
	return{
		send:	 /closure, 	want sluit options (*) in	, dat s is in caller	,
		abort:
/t	
			} else if ( seekingTransport ) {
/ JA
				return !( selected = dataTypeOrTransport );
false
/t
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
/ GEEN volgende meer
/ WH door false	,
/ TODO
		return selected;
/t
jQuery.ajax
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );
/d
		} else {
			jqXHR.readyState = 1;
			try {
				state = 1;
				transport.send( requestHeaders, done );		
/s
			send: function( headers, complete ) { 	/ closure	, sluit options in 	,
													/ complete=done	,
					xhr = options.xhr();
				xhr.open(
					options.type,	 / 	"POST"
					options.url,	/ "index2.jsp"
					options.async,	/ true
					options.username,	/ undefined
					options.password	/ undefined
				);

				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
headers={
	Accept: */*"
	Content-Type: "application/x-www-form-urlencoded; charset=UTF-8"
	X-Requested-With: "XMLHttpRequest"
}
				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );

				// Listen to events
				xhr.onload = callback();
/s
				callback = function( type ) {
					return function() {			/ (**)
									complete(	/ complete=done	,

/t
jQuery.ajaxTransport.send
				xhr.onload = callback();	/ = function , die done calls	,
/d

/ Dus xhr.onload=function() (**)

/ Intermezzo

/ Geef in google	,
xhr onreadystatechange vs onload
/ Lees	,
http://stackoverflow.com/questions/9181090/is-onload-equal-to-readystate-4-in-xmlhttprequest

It should be the same thing. onload was added in XMLHttpRequest 2 whereas onreadystatechange has been around since the original spec.

/ Einde Intermezzo

				errorCallback = xhr.onerror = callback( "error" );
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				// Create the abort callback
				callback = callback( "abort" );

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
options.hasContent=true
options.data="name=Eric+J.+Van+der+Velden"

		return jqXHR;
/t
		var promise=$.post(url,{name:name});
/d
		promise.done(function(data){
/ OK	, adds handler	,
/c
/s
				callback = function( type ) {
					return function() {	 			/ (**)
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },			<-
									xhr.getAllResponseHeaders()
								);
/s
		function done( status, nativeStatusText, responses, headers ) {
status=200
nativeStatusText="OK"
resonses=
responses: Object
text: "↵	↵↵<!doctype html>↵<html>↵<head>↵<script src="jquery-2.2.3.js" ></script>↵<script>↵$(document).ready(function(){↵	$("form").submit(function(ev){↵		ev.preventDefault();↵		var name=$(this).find("input[name='name']").val();↵		var url=$(this).attr("action");↵		var promise=$.post(url,{name:name});↵		promise.done(function(data){↵			var x=$(data).find("input[name]");↵			var y=$(data).find("span");↵			var b=false;↵		});↵	});;↵});↵</script>↵↵</head>↵<body>↵<h2>Hello Eric J. Van der Velden!</h2>↵<form action="index2.jsp">↵	<input type="text" name="name">↵	<input type="submit">↵</form>↵<div id="result"></div>↵<span id="foo">Foo Bar</span>↵</body>↵</html>↵"
__proto__: Object
}
headers={
Date: Fri, 27 May 2016 16:15:40 GMT
Server: Apache-Coyote/1.1
Content-Length: 653
Content-Type: text/html;charset=ISO-8859-1
}
		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			// State is "done" now
			state = 2;

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;
4
			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;
true
			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
/s
function ajaxHandleResponses( s, jqXHR, responses ) {
s.dataTypes=['*"]
s.contents={
html: /\bhtml/
json: /\bjson\b/
script: /\b(?:java|ecma)script\b/
xml: /\bxml\b/
__proto__: Object
}
	var ct
	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
/ JA
		dataTypes.shift();
		if ( ct === undefined ) {
/ JA
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
s.mimeType=undefined
/s
			jqXHR = {
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
/ JA
						if ( !responseHeaders ) {
/ JA	, 
responseHeaders=undefined
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
rheaders: /^(.*?):[ \t]*([^\r\n]*)$/gm	 ={
	global: true
	ignoreCase: false
	lastIndex: 35
	multiline: true
	source: "^(.*?):[ \t]*([^\r\n]*)$"
	__proto__: /(?:)/
}
/ responseHeadersString is set in done	,
/="
"Date: Mon, 30 May 2016 06:25:49 GMT
Server: Apache-Coyote/1.1
Content-Length: 653
Content-Type: text/html;charset=ISO-8859-1
"
match: Array[3]										/ 1ste	,
	0: "Date: Mon, 30 May 2016 06:25:49 GMT"
	1: "Date"
	2: "Mon, 30 May 2016 06:25:49 GMT"
	index: 0
	input: "Date: Mon, 30 May 2016 06:25:49 GMT
		↵Server: Apache-Coyote/1.1
		↵Content-Length: 653
		↵Content-Type: text/html;charset=ISO-8859-1
		↵"
	length: 3
	__proto__: Array[0]

								responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
							}
						}
/ als allemaal	, dan	,
responseHeaders={
	content-length: "653"
	content-type: "text/html;charset=ISO-8859-1"
	date: "Mon, 30 May 2016 06:25:49 GMT"
	server: "Apache-Coyote/1.1"
	__proto__: Object 
}
						match = responseHeaders[ key.toLowerCase() ];
key="Content-Type"
"text/html;charset=ISO-8859-1"
					}
					return match == null ? null : match;
				},
/t
function ajaxHandleResponses( s, jqXHR, responses ) {
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
/d
	if ( ct ) {
/ JA	, 
/ ct=
"text/html;charset=ISO-8859-1"

dataTypes=[]
		for ( type in contents ) {
contents: Object
	html: /\bhtml/										/ er zijn 4 types	, html komt voor in ct="text/html;charset=..."
	json: /\bjson\b/
	script: /\b(?:java|ecma)script\b/
	xml: /\bxml\b/
	__proto__: Object
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
/ JA
type="html"
				dataTypes.unshift( type );
				break;

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
/ NEE	, 
dataTypes[0]="html"
reponses={"text":"..."}

		for ( type in responses ) {
"text"
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
/ JA
s.converters: Object
	* text: function String() { [native code] }
	text html: true
	text json: function ( data ) {
	text script: function ( text ) {
	text xml: function ( data ) {
	__proto__: Object
				finalDataType = type;
"text"
				break;

	if ( finalDataType ) {
"text"
		if ( finalDataType !== dataTypes[ 0 ] ) {
/ JA
dataTypes=["html"]
			dataTypes.unshift( finalDataType );
dataTypes=["text","html"]
		return responses[ finalDataType ];
responses={text: "↵	↵↵<!doctype html>↵<html>↵<head>↵<script src="jquery-2.2.3.js" ></script>↵<script>↵$(document).ready(function(){↵	$("form").submit(function(ev){↵		ev.preventDefault();↵		var name=$(this).find("input[name='name']").val();↵		var url=$(this).attr("action");↵		var promise=$.post(url,{name:name});↵		promise.done(function(data){↵			var x=$(data).find("input[name]");↵			var y=$(data).find("span");↵			var b=false;↵		});↵	});;↵});↵</script>↵↵</head>↵<body>↵<h2>Hello Eric J. Van der Velden!</h2>↵<form action="index2.jsp">↵	<input type="text" name="name">↵	<input type="submit">↵</form>↵<div id="result"></div>↵<span id="foo">Foo Bar</span>↵</body>↵</html>↵"}
/t
		function done( status, nativeStatusText, responses, headers ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
/d
			response = ajaxConvert( s, response, jqXHR, isSuccess );
/s
function ajaxConvert( s, response, jqXHR, isSuccess ) {

		// Work with a copy of dataTypes in case we need to modify it for conversion
/ TODO
		dataTypes = s.dataTypes.slice();
["text","html"]
	current = dataTypes.shift();
"text"

	// Convert to each sequential dataType
	while ( current ) {
"text"

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
s.responseFields: Object
	json: "responseJSON"
	text: "responseText"
	xml: "responseXML"
jqXHR.responseText: "↵	↵↵<!doctype html>↵<html>↵<head>↵<script src="jquery-2.2.3.js" ></script>↵<script>↵$(document).ready(function(){↵	$("form").submit(function(ev){↵		ev.preventDefault();↵		var name=$(this).find("input[name='name']").val();↵		var url=$(this).attr("action");↵		var promise=$.post(url,{name:name});↵		promise.done(function(data){↵			var x=$(data).find("input[name]");↵			var y=$(data).find("span");↵			var b=false;↵		});↵	});;↵});↵</script>↵↵</head>↵<body>↵<h2>Hello Eric J. Van der Velden!</h2>↵<form action="index2.jsp">↵	<input type="text" name="name">↵	<input type="submit">↵</form>↵<div id="result"></div>↵<span id="foo">Foo Bar</span>↵</body>↵</html>↵"

		prev = current;
"text"
		current = dataTypes.shift();
"html"
			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];
true
/ Verder NIETS	,

/ volgende	,
	// Convert to each sequential dataType
	while ( current ) {
"html"
		if ( s.responseFields[ current ] ) {
/ NEE
		prev = current;
"hmtl"
		current = dataTypes.shift();
undefined
		if ( current ) {
/ NEE
/ Verder NIETS	,
	return { state: "success", data: response };
/t
		function done( status, nativeStatusText, responses, headers ) {
			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );
/d
response: Object
data: "↵	↵↵<!doctype html>↵<html>↵<head>↵<script src="jquery-2.2.3.js" ></script>↵<script>↵$(document).ready(function(){↵	$("form").submit(function(ev){↵		ev.preventDefault();↵		var name=$(this).find("input[name='name']").val();↵		var url=$(this).attr("action");↵		var promise=$.post(url,{name:name});↵		promise.done(function(data){↵			var x=$(data).find("input[name]");↵			var y=$(data).find("span");↵			var b=false;↵		});↵	});;↵});↵</script>↵↵</head>↵<body>↵<h2>Hello Eric J. Van der Velden!</h2>↵<form action="index2.jsp">↵	<input type="text" name="name">↵	<input type="submit">↵</form>↵<div id="result"></div>↵<span id="foo">Foo Bar</span>↵</body>↵</html>↵"
state: "success"

			// If successful, handle type chaining
			if ( isSuccess ) {
				} else {
					statusText = response.state;
"success"
					success = response.data;
					error = response.error;
undefined
					isSuccess = !error;
true
			// Set data for the fake xhr object
			jqXHR.status = status;
200
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";
"OK"
nativeStatusText="OK"
statusText="success"

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
success: "↵	↵↵<!doctype html>↵<html>↵<head>↵<script src="jquery-2.2.3.js" ></script>↵<script>↵$(document).ready(function(){↵	$("form").submit(function(ev){↵		ev.preventDefault();↵		var name=$(this).find("input[name='name']").val();↵		var url=$(this).attr("action");↵		var promise=$.post(url,{name:name});↵		promise.done(function(data){↵			var x=$(data).find("input[name]");↵			var y=$(data).find("span");↵			var b=false;↵		});↵	});;↵});↵</script>↵↵</head>↵<body>↵<h2>Hello Eric J. Van der Velden!</h2>↵<form action="index2.jsp">↵	<input type="text" name="name">↵	<input type="submit">↵</form>↵<div id="result"></div>↵<span id="foo">Foo Bar</span>↵</body>↵</html>↵"
statusText: "success"
jqXHR=promise	,
/s
		self = {
			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {				/ closure: closes in : fire, queue	, locals of Callbacks fct
																/ resolveWith, rejectWith: aparte closures	, 	
					queue.push( args );
					args = [ context, args.slice ? args.slice() : args ];
					if ( !firing ) {
						fire();
/s
jQuery.Callbacks = function( options ) {
		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = options.once;
true
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
memory: Array[2]
0: Object 			/ context
1: Array[3]
	0: "↵	↵↵<!doctype html>↵<html>↵<head>↵<script src="jquery-2.2.3.js" ></script>↵<script>↵$(document).ready(function(){↵	$("form").submit(function(ev){↵		ev.preventDefault();↵		var name=$(this).find("input[name='name']").val();↵		var url=$(this).attr("action");↵		var promise=$.post(url,{name:name});↵		promise.done(function(data){↵			var x=$(data).find("input[name]");↵			var y=$(data).find("span");↵			var b=false;↵		});↵	});;↵});↵</script>↵↵</head>↵<body>↵<h2>Hello Eric J. Van der Velden!</h2>↵<form action="index2.jsp">↵	<input type="text" name="name">↵	<input type="submit">↵</form>↵<div id="result"></div>↵<span id="foo">Foo Bar</span>↵</body>↵</html>↵"
	1: "success"
	2: Object		/ jqXHR promise	,
	length: 3
	__proto__: Array[0]
length: 2
__proto__: Array[0]

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
/ list is list van callbacks, 	handlers	, de 4de is die van ons	,

/ We gaven	,
http://localhost:9090/web/index2.jsp


/ Einde JQUERY AJAX

/ WICKET AJAX

/ ws wicket7.3
/ proj wicket-testing

$ vi AjaxLinkStudyPage.java
	private String text;
	private int counter;
	public AjaxLinkStudyPage() {

		IModel<AjaxLinkStudyPage>model=new CompoundPropertyModel<AjaxLinkStudyPage>(this);
		setDefaultModel(model);

		final Label textl=new Label("text");
		textl.setOutputMarkupId(true);
		add(textl);
		final Label counterl=new Label("counter");
		counterl.setOutputMarkupId(true);
		add(counterl);

		AjaxLink<Void>ajaxLink=new AjaxLink<Void>("ajaxlink") {
			@Override
			public void onClick(AjaxRequestTarget target) {
				text="["+text+"]";
				counter+=13;
				target.add(textl);
				target.add(counterl);
				
			}
		};

/ we zien de response	,
<?xml version="1.0" encoding="UTF-8"?>
<ajax-response>
	<component id="text2" >
		<![CDATA[<span wicket:id="text" id="text2" wicketpath="text">[[[[null]]]]</span>]]>
	</component>
	<component id="counter3" >
		<![CDATA[<span wicket:id="counter" id="counter3" wicketpath="counter">52</span>]]></component></ajax-response>

/ de Wicket's JS moet hier wat mee doen	, 
/ TODO
/ MORGENOCHTEND

/ Einde WICKET AJAX

/ DEBUG WICKET AJAX

/ ws wicket7_3
/ project wicket-testing
/ AjaxLinkStudyPage

/ we hebben hier REQUEST en RESPONSE

/ Intermezzo

/ 7	. 

$ vi wicket-ajax-jquery.js

	Wicket.Class = {
		create: function () {			/ er is 1 fct Wicket.Class.create
			return function () {		/ bij iedere call Wicket.Class.create() wordt er een nieuwe function create	,
				this.initialize.apply(this, arguments);
			};
		}
	};
	Wicket.ChannelManager = Wicket.Class.create();
	Wicket.ChannelManager.prototype = {
		initialize: function () {...,
		schedule: function (channel, callback) {...,

	jQuery.extend(true, Wicket, {
		channelManager: new Wicket.ChannelManager(),

Wicket={
	ChannelManager:function(){...}
	channelManager={
		channels={... },
		done:function(){...},
		initialize:function(){},
		schedule:function(){}
	}
	...
}

/ 7	. 

$ vi wicket-ajax-jquery.js
	Wicket.Ajax={}								/ moet WH voor volgende line	,
	Wicket.Ajax.Call = Wicket.Class.create();
	Wicket.Ajax.Call.prototype = {
		initialize: jQuery.noop,
		_initializeDefaults: function (attrs) {
		ajax: function (attrs) {
		doAjax: function (attrs) {
		...
	}

	jQuery.extend(true, Wicket, {
		 Ajax: {				/ l. 1903 
			Call: Wicket.Ajax.Call,			/ heeft grote prototype		,
/ TODO (Wat gebeurt hier?)
			get: function (attrs) {
			post: function (attrs) {
			ajax: function(attrs) {

$ vi wicket-event-jquery.js

	jQuery.extend(true, Wicket, {
		Browser: {
		Event: {

/ In beide wicket-ajax-jquery.js en wicket-event-jquery.js wordt Wicket obj create	, 

/ Einde Intermezzo

/ 7	. 

/ TODO (load page	, execs bijv	,

	jQuery.extend(true, Wicket, {
		 Ajax: {
			ajax: function(attrs) {
->				jQuery.each(attrs.e, function (idx, evt) {
					Wicket.Event.add(attrs.c, evt, function (jqEvent, data) {

/ Wanneer in ->
/ TODO

/ REQUEST

/ 7	. 

///////////////////////////////////
/ click de link	,

	jQuery.extend(true, Wicket, {
			ajax: function(attrs) {
				jQuery.each(attrs.e, function (idx, evt) {
					Wicket.Event.add(attrs.c, evt, function (jqEvent, data) {
->						var call = new Wicket.Ajax.Call();
/s
	Wicket.Class = {
		create: function () {
			return function () {
->				this.initialize.apply(this, arguments);
/s
jQuery.extend( {
	noop: function() {},

/ Intermezzo

/ want	,

	Wicket.Ajax.Call.prototype = {
		initialize: jQuery.noop,

/ Einde Intermezzo

/t
					Wicket.Event.add(attrs.c, evt, function (jqEvent, data) {
						var call = new Wicket.Ajax.Call();
/d
/ call ={}, maar met grote __proto__	, met ajax, done, ... fct's	,

						var attributes = jQuery.extend({}, attrs);
/ attrs={
c: "ajaxlink4"
e: Array[1]
u: "./ajaxlinkstudy?1-8.IBehaviorListener.0-ajaxlink"
__proto__: Object
}
/ de anony fct sluit attrs in	, is closure	,

						attributes.event = Wicket.Event.fix(jqEvent);
						if (data) {
/ NEE	, 
undefined
						call._executeHandlers(attributes.ih, attributes);
/ NIETS
attributes.in=undefined
						Wicket.Event.publish(Wicket.Event.Topic.AJAX_CALL_INIT, attributes);
Wicket.Event.Topic.AJAX_CALL_INIT="/ajax/call/init"	, 
/ TODO
/s
	jQuery.extend(true, Wicket, {
		Event: {
			publish: function (topic) {
				if (topic) {
					// cut the topic argument
					var args = Array.prototype.slice.call(arguments).slice(1);
arguments=
0:"/ajax/call/init"
1: Object
	c: "ajaxlink4"
	e: Array[1]
		0: "click"
		length: 1
		__proto__: Array[0]
	event: jQuery.Event
	u: "./ajaxlinkstudy?1-11.IBehaviorListener.0-ajaxlink"
	__proto__: Object

args=
1: Object
	c: "ajaxlink4"
	e: Array[1]
		0: "click"
		length: 1
		__proto__: Array[0]
	event: jQuery.Event
	u: "./ajaxlinkstudy?1-11.IBehaviorListener.0-ajaxlink"
	__proto__: Object

					jQuery(document).triggerHandler(topic, args);
					jQuery(document).triggerHandler('*', args);
/ TODO
	jQuery.extend(true, Wicket, {
		 Ajax: {
			ajax: function(attrs) {
/t
				jQuery.each(attrs.e, function (idx, evt) {
					Wicket.Event.add(attrs.c, evt, function (jqEvent, data) {
...
						else {
							call.ajax(attributes);
attributes={
	c: "ajaxlink4"
	e: Array[1]
		0: "click"
		length: 1
		__proto__: Array[0]
	event: jQuery.Event
	u: "./ajaxlinkstudy?1-11.IBehaviorListener.0-ajaxlink"
	__proto__: Object
}
/s
	Wicket.Ajax.Call.prototype = {
		ajax: function (attrs) {
			this._initializeDefaults(attrs);
/s
		_initializeDefaults: function (attrs) {
			// (ajax channel)
			if (typeof(attrs.ch) !== 'string') {
				attrs.ch = '0|s';
			}

			// (wicketAjaxResponse) be default the Ajax result should be processed for <ajax-response>
			if (typeof(attrs.wr) !== 'boolean') {
				attrs.wr = true;
			}

			// (dataType) by default we expect XML responses from the Ajax behaviors
			if (typeof(attrs.dt) !== 'string') {
				attrs.dt = 'xml';
			}

			if (typeof(attrs.m) !== 'string') {
				attrs.m = 'GET';
			}

			if (attrs.async !== false) {
				attrs.async = true;
			}

			if (!jQuery.isNumeric(attrs.rt)) {
				attrs.rt = 0;
			}

			if (attrs.pd !== true) {
				attrs.pd = false;
			}

			if (!attrs.sp) {
				attrs.sp = "bubble";
			}

			if (!attrs.sr) {
				attrs.sr = false;
			}
/t
		ajax: function (attrs) {
			this._initializeDefaults(attrs);
/d
attrs:Object
async: true
c: "ajaxlink4"
ch: "0|s"
dt: "xml"
e: Array[1]
event: jQuery.Event
m: "GET"
pd: false
rt: 0
sp: "bubble"
sr: false
u: "./ajaxlinkstudy?1-11.IBehaviorListener.0-ajaxlink"
wr: true
__proto__: Object

			var res = Wicket.channelManager.schedule(attrs.ch, 
				Wicket.bind(function () { this.doAjax(attrs); }, this));
this=call hierboven	, = Wicket.Ajax.Call inst	,
/s
	jQuery.extend(true, Wicket, {
		bind: function(fn, context) {
			return jQuery.proxy(fn, context);
/ context=call hierboven	,
/t
/s
	Wicket.ChannelManager.prototype = {
		schedule: function (channel, callback) {
			var parsed = new Wicket.Channel(channel);
channel="0|s"
/s
	Wicket.Class = {
		create: function () {
			return function () {							/ ctor	,
->				this.initialize.apply(this, arguments);
this: Object
__proto__: Object
	done: function () {
	initialize: function (name) {
	schedule: function (callback) {
	__proto__: Object

/ Intermezzo

	Wicket.Channel = Wicket.Class.create(); 	/ 'n fct	, 

	Wicket.Channel.prototype = {				/ set prototype van deze fct	,
		initialize: function (name) {
		schedule: function (callback) {
		done: function () {

/ Einde Intermezzo

/s
	Wicket.Channel.prototype = {
		initialize: function (name) {
name="0|s"
			name = name || '0|s';
			var res = name.match(/^([^|]+)\|(d|s|a)$/);
			if (isUndef(res)) {
/ NEE
			}
			else {
				this.name = res[1];
"0"
				this.type = res[2];
"s"
			}
			this.callbacks = [];
			this.busy = false;
/t
	Wicket.ChannelManager.prototype = {
		schedule: function (channel, callback) {
			var parsed = new Wicket.Channel(channel);
/d
parsed={
busy: false
callbacks: Array[0]
name: "0"
type: "s"
__proto__: Object
}
			var c = this.channels[parsed.name];
undefined
			if (isUndef(c)) {
				c = parsed;
c.__proto__===Wicket.Channel.prototype
true
				this.channels[c.name] = c;
this
	channels: Object
		"0": Object
			busy: false
			callbacks: Array[0]
			name: "0"
			type: "s"
			__proto__: Object
		__proto__: Object
	done: function (channel) {
	initialize: function () {
	schedule: function (channel, callback) {
	__proto__: Object

			return c.schedule(callback);
/ callback= Wicket.bind(function () { this.doAjax(attrs); }, this)
/s
	Wicket.Channel.prototype = {
		schedule: function (callback) {
/ callback= Wicket.bind(function () { this.doAjax(attrs); }, this)

			if (this.busy === false) {
				this.busy = true;
				try {
					return callback();
/s
jQuery.extend( {
	proxy: function( fn, context ) {
		return proxy;
		proxy = function() {				/ closure	, closes context in	,
											/ this=window, context=call	,	
->			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
/s
		ajax: function (attrs) {
			this._initializeDefaults(attrs);
			var res = Wicket.channelManager.schedule(attrs.ch, Wicket.bind(function () {
->				this.doAjax(attrs);
this=call	, Wicket.Call inst	,
attrs={
async: true
c: "ajaxlink4"
ch: "0|s"
dt: "xml"
e: Array[1]
event: jQuery.Event
m: "GET"
pd: false
rt: 0
sp: "bubble"
sr: false
u: "./ajaxlinkstudy?1-11.IBehaviorListener.0-ajaxlink"
wr: true
__proto__: Object
}
/s
	Wicket.Ajax.Call.prototype = {
		doAjax: function (attrs) {
				// the headers to use for each Ajax request
				headers = {
					'Wicket-Ajax': 'true',
					'Wicket-Ajax-BaseURL': getAjaxBaseUrl()
/s
	getAjaxBaseUrl = function () {
		var baseUrl = Wicket.Ajax.baseUrl || '.';
/ Wicket.Ajax.baseUrl=ajaxlinkstudy?1
/ TODO (Wanneer set?)

/t
				// the request (extra) parameters
				data = this._asParamArray(attrs.ep),
attrs.ap=undefined
data=[]
				self = this,
call

				// the precondition to use if there are no explicit ones
				defaultPrecondition = [ function (attributes) {
					if (attributes.c) {
						if (attributes.f) {
							return Wicket.$$(attributes.c) && Wicket.$$(attributes.f);
						} else {
							return Wicket.$$(attributes.c);
						}
					}
					return true;
				}],

				// a context that brings the common data for the success/fialure/complete handlers
				context = {
					attrs: attrs,

					// initialize the array for steps (closures that execute each action)
					steps: []
				},
ontext: Object
	attrs: Object
		async: true
		c: "ajaxlink4"
		ch: "0|s"
		dt: "xml"
		e: Array[1]
		0: "click"
		length: 1
		__proto__: Array[0]
		event: jQuery.Event
		m: "GET"
		pd: false
		rt: 0
		sp: "bubble"
		sr: false
		u: "./ajaxlinkstudy?1-14.IBehaviorListener.0-ajaxlink"
		wr: true
		__proto__: Object
	steps: Array[0]
		length: 0
		__proto__: Object
	__proto__: Object
	
			self._executeHandlers(attrs.bh, attrs);
/ NIETS
			we.publish(topic.AJAX_CALL_BEFORE, attrs);

			var preconditions = attrs.pre || [];
[]
			preconditions = defaultPrecondition.concat(preconditions);
[defaultPrecondition]
			if (jQuery.isArray(preconditions)) {
				var that = this._getTarget(attrs);
/s
		_getTarget: function (attrs) {
			var target;
			if (attrs.event) {
				target = attrs.event.target;
a#ajaxLink4
			return target
/t
		doAjax: function (attrs) {
				var that = this._getTarget(attrs);
/d
				for (var p = 0; p < preconditions.length; p++) {

					var precondition = preconditions[p];
					var result;
					if (jQuery.isFunction(precondition)) {
						result = precondition.call(that, attrs);
/s
				defaultPrecondition = [ function (attributes) {
					if (attributes.c) {
						if (attributes.f) {
/ NEE
						} else {
							return Wicket.$$(attributes.c);
/s
		$$: function (element) {
			return Wicket.DOM.inDoc(element);
/s
			inDoc: function (element) {
				if (typeof(element) === "string") {
					element = Wicket.$(element);
/s
		$: function (arg) {
			return Wicket.DOM.get(arg);
/s
			get: function (arg) {
arg="ajaxLink4"
				} else if (typeof arg === 'string') {
					return document.getElementById(arg);
/t
			inDoc: function (element) {
				if (typeof(element) === "string") {
					element = Wicket.$(element);
/d
a#ajaxLink4
				var id = element.getAttribute('id');
				else {
					return document.getElementById(id) === element;
/ TODO
/t
		doAjax: function (attrs) {
				for (var p = 0; p < preconditions.length; p++) {
					if (jQuery.isFunction(precondition)) {
						result = precondition.call(that, attrs);
/d
true
			if (attrs.mp) { // multipart form. jQuery.ajax() doesn't help here ...
/ NEE
/ TODO
			if (attrs.f) {
				// serialize the form with id == attrs.f
/ NEE
/ f is form	,
			} else if (attrs.c && !jQuery.isWindow(attrs.c)) {
				// serialize just the form component with id == attrs.c
				var el = Wicket.$(attrs.c);
attrs.c="ajaxLink4
el=DOM elem a#ajaxLink4
				data = data.concat(Wicket.Form.serializeElement(el, attrs.sr));
attrs.sr=false
data=[]
/ TODO

/ TODO (AjaxForm)
/ Lees	,
http://examples7x.wicket.apache.org/index.html

			// convert to URL encoded string
			data = jQuery.param(data);
""

			// execute the request
			var jqXHR = jQuery.ajax({
				url: attrs.u,		"./ajaxlinkstudy?1-14.IBehaviorListener.0-ajaxlink"
				type: attrs.m,		"GET"
				context: self,		call
				beforeSend: function (jqXHR, settings) {
				data: data,			""
				dataType: attrs.dt, "xml"
				async: attrs.async,
				timeout: attrs.rt,
				cache: false,
				headers: headers,
Wicket-Ajax: "true"
Wicket-Ajax-BaseURL: "ajaxlinkstudy?1"
				success: function(data, textStatus, jqXHR) {
				error: function(jqXHR, textStatus, errorMessage) {
				complete: function (jqXHR, textStatus) {
			});
/s
	ajax: function( url, options ) {
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}
/////////////////////////////
/ Nu zijn er WEL s.success	, s.error	, s.complete fct's	,
/t
		doAjax: function (attrs) {
			var jqXHR = jQuery.ajax({
/d
			// execute after handlers right after the Ajax request is fired
			self._executeHandlers(attrs.ah, attrs);
			we.publish(topic.AJAX_CALL_AFTER, attrs);

			return jqXHR;
/t
		ajax: function (attrs) {
			var res = Wicket.channelManager.schedule(attrs.ch, Wicket.bind(function () {
				this.doAjax(attrs);
			}, this));
/d
res=undefined
			return res !== null ? res: true;
/t
	jQuery.extend(true, Wicket, {
		 Ajax: {
			ajax: function(attrs) {
				jQuery.each(attrs.e, function (idx, evt) {
					Wicket.Event.add(attrs.c, evt, function (jqEvent, data) {
						else {
							call.ajax(attributes);
/d

/ Einde REQUEST

/ RESPONSE

/ we geven	, 
/c


/s
jQuery.ajaxTransport( function( options ) {
				// Callback
				callback = function( type ) {
					return function() {
->						if ( callback ) {
/ JA	,
/= deze fct	,
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;
null
/ TODO
							} else {
								complete(
done
									xhrSuccessStatus[ xhr.status ] || xhr.status,
xhr.status=200
xhrSuccessStatus[ xhr.status ]=undefined
									xhr.statusText,
"OK"
									// Support: IE9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
xhr.responseType=""
									typeof xhr.responseText !== "string" ?
/ NEE
"<ajax-response><redirect><![CDATA[./ajaxlinkstudy?1]]></redirect></ajax-response>"
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
"Pragma: no-cache
Date: Fri, 03 Jun 2016 06:26:46 GMT
Server: Apache-Coyote/1.1
Transfer-Encoding: chunked
Content-Type: text/xml;charset=UTF-8
Cache-Control: no-cache, no-store
Ajax-Location: ./ajaxlinkstudy?1
Expires: Thu, 01 Jan 1970 00:00:00 GMT
								);
							}
/s
		function done( status, nativeStatusText, responses, headers ) {

			// State is "done" now
			state = 2;					/ WAS 1

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";
"Pragma: no-cache
Date: Mon, 06 Jun 2016 05:20:00 GMT
Server: Apache-Coyote/1.1
Transfer-Encoding: chunked
Content-Type: text/xml;charset=UTF-8
Cache-Control: no-cache, no-store
Ajax-Location: ./ajaxlinkstudy?1
Expires: Thu, 01 Jan 1970 00:00:00 GMT
"

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;
4
status=200
			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;
true


			// Get response data
			if ( responses ) {
/ JA
responses={
text: "<ajax-response><redirect><![CDATA[./ajaxlinkstudy?1]]></redirect></ajax-response>"
__proto__: Object
}
				response = ajaxHandleResponses( s, jqXHR, responses );
/s
function ajaxHandleResponses( s, jqXHR, responses ) {
	var ... 

		contents = s.contents, 
{
html: /\bhtml/
json: /\bjson\b/
script: /\b(?:java|ecma)script\b/
xml: /\bxml\b/
__proto__: Object
}
		dataTypes = s.dataTypes;
[
0: "xml"
length: 1
__proto__: Array[0]
]

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
/ NEE
dataTypes[0]="xml"	, reponses={text:...}
		finalDataType = dataTypes[ 0 ];
/ NIET	,
		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
/ JA
s.converters={
* text: function String() { [native code] }
text html: true
text json: function ( data ) {
text script: function ( text ) {
text xml: function ( data ) {			<-
__proto__: Object
				finalDataType = type;
"text"
				break;

	if ( finalDataType ) {
/ JA
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
["text","xml"]
		}
		return responses[ finalDataType ];
"<ajax-response><redirect><![CDATA[./ajaxlinkstudy?1]]></redirect></ajax-response>"
/t
		function done( status, nativeStatusText, responses, headers ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
"<?xml version="1.0" encoding="UTF-8"?><ajax-response><component id="text5" ><![CDATA[<span wicket:id="text" id="text5" wicketpath="text">[[[[[null]]]]]</span>]]></component><component id="counter6" ><![CDATA[<span wicket:id="counter" id="counter6" wicketpath="counter">65</span>]]></component></ajax-response>"

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );
/s
function ajaxConvert( s, response, jqXHR, isSuccess ) {

	current = dataTypes.shift();
"text"

s.responseFields
json: "responseJSON"
text: "responseText"
xml: "responseXML"
__proto__: Object

	// Convert to each sequential dataType
	while ( current ) {
		if ( s.responseFields[ current ] ) {
/ JA
			jqXHR[ s.responseFields[ current ] ] = response;
jqXHR.responseText="<?xml version="1.0" encoding="UTF-8"?><ajax-response><component id="text5" ><![CDATA[<span wicket:id="text" id="text5" wicketpath="text">[[[[[null]]]]]</span>]]></component><component id="counter6" ><![CDATA[<span wicket:id="counter" id="counter6" wicketpath="counter">65</span>]]></component></ajax-response>"

		prev = current;
"text"
		current = dataTypes.shift();
"xml"
			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];
/=jQuery.parseXML

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {
					} else {
						try {
							response = conv( response );
/s
jQuery.parseXML = function( data ) {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
#document
	return xml;
/t
function ajaxConvert( s, response, jqXHR, isSuccess ) {
						response = conv( response );
/d
/ volgende loop	,
	while ( current ) {
current="xml"		
		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
jqXHR.reponseXML=#document

		prev = current;
		current = dataTypes.shift();
undefined

/ volgende while loop	, is er niet	,
	return { state: "success", data: response };
response=#document

/ Intermezzo

/ Normaal
document: document
	body: body
	childNodes: NodeList[2]
		0:<!DOCTYPE html>
		1: html
	docType:<!DOCTYPE html>
	documentElement html

/ Nu	,
response: document
	body: body
	childNodes: NodeList[2]
		0: ajax-response
			childNodes: NodeList[2]
				0: component#text5
					childNodes: NodeList[1]
						0: cdata-section
							data: "<span wicket:id="text" id="text5" wicketpath="text">[[[[[null]]]]]</span>"
				1: component#counter6
					childNodes: NodeList[1]
						0: cdata-section
							data: "<span wicket:id="counter" id="counter6" wicketpath="counter">65</span>" 
	docType: null
	documentElement: ajax-response

/ Einde Intermezzo

/t
		function done( status, nativeStatusText, responses, headers ) {
			response = ajaxConvert( s, response, jqXHR, isSuccess );
{ state: "success", data: #document};

			if ( isSuccess ) {
				} else {
					statusText = response.state;
"succes"														/ WAS: "OK"
					success = response.data;
#document
					error = response.error;
undefined
					isSuccess = !error;
true
			jqXHR.status = status;
200
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";
"OK"
			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
> callbackContext.__proto__===Wicket.Ajax.Call.prototype
> true
success=#document
statusText="success"

/ Intermezzo

/ xhr is geen promise	, jQuery wil met promises	, dus daarom introduce ze jqXHR	, het is alsof xhr een promise geeft	,
/ eerst was deferred > jqXHR=promise, maar nu ALLEEN in jqXHR zit responseText	, responseXML	, readyState	,

/ Dat is WH altijd zo, dat de data in de promise zit	?
/ TODO

/ Einde Intermezzo
/s
			fireWith: function( context, args ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
/s
		fire = function() {
			// Enforce single-firing
			locked = options.once;
true
			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
memory: Array[2]
	0: Object
	1: Array[3]
		0: document
		1: "success"
		2: Object		/ jqXHR	, de promise 	, met responseXML	, 
		length: 3
		__proto__: Array[0]
	length: 2
	__proto__: Array[0]

					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
memory
	0: Wicket.Class.create
	__proto__: Object
	1: Array[3]
		0: document
		1: "success"
		2: Object			/ jqXHR obj	, promise 	, met responseText	,
	__proto__: Array[0]
/s
Wicket.Ajax.Call
		doAjax: function (attrs) {
			var jqXHR = jQuery.ajax({
				success: function(data, textStatus, jqXHR) {
->					if (attrs.wr) {
						self.processAjaxResponse(data, textStatus, jqXHR, context);
/s
Wicket.Ajax.Call
		processAjaxResponse: function (data, textStatus, jqXHR, context) {
			if (jqXHR.readyState === 4) {
				// first try to get the redirect header
				var redirectUrl;
				try {
					redirectUrl = jqXHR.getResponseHeader('Ajax-Location');
null
				if (typeof(redirectUrl) !== "undefined" && redirectUrl !== null && redirectUrl !== "") {
/ NEE
				else {
					// no redirect, just regular response
					if (Wicket.Log.enabled()) {
/ JA
						var responseAsText = jqXHR.responseText;
						Wicket.Log.info("Received ajax response (" + responseAsText.length + " characters)");
						Wicket.Log.info("\n" + responseAsText);
					}

					// invoke the loaded callback with an xml document
					return this.loadedCallback(data, context);
data=#document (XML)
	children NodeList[1] 
		0: ajax-response
			children: HTMLCollection[2]
				0: component#text5
				1: component#count6
/s
Wicket.Ajax.Call
		// Processes the response
		loadedCallback: function (envelope, context) {
			// To process the response, we go through the xml document and add a function for every action (step).
			// After this is done, a FunctionExecuter object asynchronously executes these functions.
			// The asynchronous execution is necessary, because some steps might involve loading external javascript,
			// which must be asynchronous, so that it doesn't block the browser, but we also have to maintain
			// the order in which scripts are loaded and we have to delay the next steps until the script is
			// loaded.
			try {
				var root = envelope.getElementsByTagName("ajax-response")[0];
				var steps = context.steps;
[]
				// go through the ajax response and for every action (component, js evaluation, header contribution)
				// ad the proper closure to steps
				var stepIndexOfLastReplacedComponent = -1;
				for (var c = 0; c < root.childNodes.length; ++c) {
					var node = root.childNodes[c];
component#text5
					if (node.tagName === "component") {
						if (stepIndexOfLastReplacedComponent === -1) {
/ JA
							this.processFocusedComponentMark(context);
/s
		// mark the focused component so that we know if it has been replaced by response
		processFocusedComponentMark: function (context) {
			context.steps.push(function (notify) {
				...
						}
/t
Wicket.Ajax.Call
		// Processes the response
		loadedCallback: function (envelope, context) {
							this.processFocusedComponentMark(context);
/d
						stepIndexOfLastReplacedComponent = steps.length;
1
						this.processComponent(context, node);
/s
Wicket.Ajax.Call
		// Adds a closure that replaces a component
		processComponent: function (context, node) {
			...
/t
Wicket.Ajax.Call
		// Processes the response
		loadedCallback: function (envelope, context) {
				for (var c = 0; c < root.childNodes.length; ++c) {
					var node = root.childNodes[c];
component#counter6
					if (node.tagName === "component") {
						if (stepIndexOfLastReplacedComponent === -1) {
/ NEE
						stepIndexOfLastReplacedComponent = steps.length;
2
						this.processComponent(context, node);
/s
Wicket.Ajax.Call
		// Adds a closure that replaces a component
		processComponent: function (context, node) {
			context.steps.push(function (notify) {
				...
/t
Wicket.Ajax.Call
		// Processes the response
		loadedCallback: function (envelope, context) {
				for (var c = 0; c < root.childNodes.length; ++c) {
/ NEE	, 
/ Geen volgende meer	,
				if (stepIndexOfLastReplacedComponent !== -1) {
					this.processFocusedComponentReplaceCheck(steps, stepIndexOfLastReplacedComponent);
/s
		// detect if the focused component was replaced
		processFocusedComponentReplaceCheck: function (steps, lastReplaceComponentStep) {
			// add this step imediately after all components have been replaced
			steps.splice(lastReplaceComponentStep + 1, 0, function (notify) {
				...
/ add anon. fct to end of steps	,
/ steps zijn nu 4 fct's	,


/ Intermezzo

var fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.splice(2, 1, "Lemon", "Kiwi");
[Banana,Orange,Lemon,Kiwi,Mango]

/ splice adds/removes item to/from an array	,
/ 2: starting index	,
/ 1: count how many to remove	,
/ "Lemon", "Kiwi": add these	,
/ Einde Intermezzo

/t
Wicket.Ajax.Call
		loadedCallback: function (envelope, context) {
					this.processFocusedComponentReplaceCheck(steps, stepIndexOfLastReplacedComponent);
/d
				// add the last step, which should trigger the success call the done method on request
				this.success(context);
/s
Wicket.Ajax.Call
		// Adds a closure to steps that should be invoked after all other steps have been successfully executed
		success: function (context) {
			context.steps.push(jQuery.proxy(function (notify) {
				...

...
/t
		function done( status, nativeStatusText, responses, headers ) {
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
/d
			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );
/s
			fireWith: function( context, args ) {
						...
						fire();
/s
		fire = function() {
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {
					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
/ Er is maar 1 listener	,
/s
				complete: function (jqXHR, textStatus) {
					context.steps.push(jQuery.proxy(function (notify) {
						...
					var executer = new FunctionsExecuter(context.steps);
attrs: Object
rs: Object
async: true
c: "ajaxlink4"
ch: "0|s"
dt: "xml"
e: Array[1]
event: jQuery.Event
m: "GET"
pd: false
rt: 0
sp: "bubble"
sr: false
u: "./ajaxlinkstudy?1-24.IBehaviorListener.0-ajaxlink"
wr: true
__proto__: Object
steps: Array[6]
0: function (notify) {
1: function (notify) {
2: function (notify) {
3: function (notify) {
4: function () {
5: function () {
length: 6
					executer.start();
/s
	var FunctionsExecuter = function (functions) {
		this.start = function () {
			var retValue = FunctionsExecuter.DONE;
			while (retValue === FunctionsExecuter.DONE) {
				retValue = this.processNext();
/s
		this.processNext = function () {
			if (this.current < this.functions.length) {
/ JA	, 
0<5
				f = this.functions[this.current];
				run = function () {
					...
				run = jQuery.proxy(run, this);
				this.current++;
				} else {
					var retValue = run();
/s
				run = function () {
					try {
						var n = jQuery.proxy(this.notify, this);
						return f(n);
/s
		// mark the focused component so that we know if it has been replaced by response
		processFocusedComponentMark: function (context) {									/ fct in Wicket.Ajax.Call.prototype
			context.steps.push(function (notify) {
				Wicket.Focus.markFocusedComponent();
/s
			// mark the focused component so that we know if it has been replaced or not by response
			markFocusedComponent: function () {
				var focusedElement = WF.getFocusedElement();
undefined
				} else {
					WF.refocusLastFocusedComponentAfterResponse = false;
/t
		// mark the focused component so that we know if it has been replaced by response
		processFocusedComponentMark: function (context) {
			context.steps.push(function (notify) {
				Wicket.Focus.markFocusedComponent();
/d
				// continue to next step
				return FunctionsExecuter.DONE;
/t
	var FunctionsExecuter = function (functions) {
				} else {
					var retValue = run();
/d
1
					return retValue;
/t
	var FunctionsExecuter = function (functions) {
		this.start = function () {
			var retValue = FunctionsExecuter.DONE;
			while (retValue === FunctionsExecuter.DONE) {
				retValue = this.processNext();
/d
/ volgende	,
			while (retValue === FunctionsExecuter.DONE) {
				retValue = this.processNext();
/s
		this.processNext = function () {
				...
				} else {
					var retValue = run();
/s
		this.processNext = function () {
				run = function () {
					try {
						var n = jQuery.proxy(this.notify, this);
						return f(n);
/s
		// Adds a closure that replaces a component
		processComponent: function (context, node) {		/ fct in Wicket.Ajax.Call.prototype	,
			context.steps.push(function (notify) {
				// get the component id
				var compId = node.getAttribute("id");
"text5"
/ node =component#text5	, de closure , de anon. fct, closes node in	,
				// get existing component
				var element = Wicket.$(compId);
span#text5
				} else {
					var text = Wicket.DOM.text(node);
"<span wicket:id="text" id="text5" wicketpath="text">[[[[[[[null]]]]]]]</span>"

					// replace the component
					Wicket.DOM.replace(element, text);
/s
			replace: function (element, text) {
				} else {
					// jQuery 1.9+ expects '<' as the very first character in text
					var cleanedText = jQuery.trim(text);
"<span wicket:id="text" id="text5" wicketpath="text">[[[[[[[null]]]]]]]</span>"

					var $newElement = jQuery(cleanedText);
/ Een DOM elem	, 
span#text5
					jQuery(element).replaceWith($newElement);
/s
	replaceWith: function() {
		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
this=$(span#text5)
arguments={$(span#text5)	, callee:function(){...}}
/s
function domManip( collection, args, callback, ignored ) {
/ TODO (Afmaken)

/t
			replace: function (element, text) {		/ Wicket.DOM.replace
					jQuery(element).replaceWith($newElement);
/d
				// continue to next step
				return FunctionsExecuter.DONE;
/t
		this.processNext = function () {
				} else {
					var retValue = run();
/d
					return retValue;
1
/t
		this.start = function () {
			var retValue = FunctionsExecuter.DONE;
			while (retValue === FunctionsExecuter.DONE) {
				retValue = this.processNext();
/d
/ volgende	,
			while (retValue === FunctionsExecuter.DONE) {
				retValue = this.processNext();
/s
		this.processNext = function () {
			...
				} else {
					var retValue = run();
/s
		this.processNext = function () {
				run = function () {
					try {
						var n = jQuery.proxy(this.notify, this);
						return f(n);
/s
		// Adds a closure that replaces a component
		processComponent: function (context, node) {
			context.steps.push(function (notify) {
				// get the component id
				var compId = node.getAttribute("id");
node=component#counter6
/ closes in	,
				// get existing component
				var element = Wicket.$(compId);
span#counter6

/ Intermezzo

/ Er zijn 2 DOM's	, een uit XML en 1 uit HTML	,

/ Einde Intermezzo

				} else {
					var text = Wicket.DOM.text(node);
/s
			text: function (node) {
				if (node.childNodes.length > 0) {
					for (var i = 0; i < node.childNodes.length; i++) {
						var thisNode = node.childNodes[i];
#data-section
						switch (thisNode.nodeType) {
							case 4: // CDATA_SECTION_NODE
								result.push(thisNode.nodeValue);
thisNode.nodeValue=
"<span wicket:id="counter" id="counter6" wicketpath="counter">91</spanek;
								break;
				return result.join("");
/t
		// Adds a closure that replaces a component
		processComponent: function (context, node) { 	/ In Wicket.Ajax.Call.prototype	,
			context.steps.push(function (notify) {
				} else {
					var text = Wicket.DOM.text(node);
/d
"<span wicket:id="counter" id="counter6" wicketpath="counter">91</span>"
					// replace the component
					Wicket.DOM.replace(element, text);
/ TODO
				// continue to next step
				return FunctionsExecuter.DONE;
/t
		this.processNext = function () {
				} else {
					var retValue = run();
/d
1
					return retValue;
/t
		this.start = function () {
			var retValue = FunctionsExecuter.DONE;
			while (retValue === FunctionsExecuter.DONE) {
				retValue = this.processNext();
/d
/ volgende	,
			while (retValue === FunctionsExecuter.DONE) {
				retValue = this.processNext();
/s
		this.processNext = function () {
				} else {
					var retValue = run();
/s
				run = function () {
					try {
						var n = jQuery.proxy(this.notify, this);
						return f(n);
/s
		// detect if the focused component was replaced
		processFocusedComponentReplaceCheck: function (steps, lastReplaceComponentStep) {	 / In Wicket.Ajax.Call.prototype	,
			// add this step imediately after all components have been replaced
			steps.splice(lastReplaceComponentStep + 1, 0, function (notify) {
->				Wicket.Focus.checkFocusedComponentReplaced();
/ NIETS	,
				// continue to next step
				return FunctionsExecuter.DONE;
/t
		this.processNext = function () {
				} else {
					var retValue = run();
/d
1
					return retValue;
/t
		this.start = function () {
			var retValue = FunctionsExecuter.DONE;
			while (retValue === FunctionsExecuter.DONE) {
				retValue = this.processNext();
/d
/ volgende	,
			while (retValue === FunctionsExecuter.DONE) {
				retValue = this.processNext();
/s
		this.processNext = function () {
				} else {
					var retValue = run();
/s
		this.processNext = function () {
				run = function () {
					try {
						var n = jQuery.proxy(this.notify, this);
						return f(n);
/s

		// Adds a closure to steps that should be invoked after all other steps have been successfully executed
		success: function (context) {
			context.steps.push(jQuery.proxy(function (notify) {
				var attrs = context.attrs;
				this._executeHandlers(attrs.sh, attrs, null, null, 'success');
/s
/ MORGENOCHTEND


/ Einde RESPONSE




 Einde DEBUG WICKET AJAX

/ WICKET AJAX 


/ ws wicket7_3
/ project wicket-testing
/ AjaxLinkStudyPage

/ 7	. 

/ Geef 	,
http://localhost:9090/wicket-testing/ajaxlinkstudy

/ Iedere keer als we 
http://localhost:9090/wicket-testing/ajaxlinkstudy
/ geven	, komen we op een nieuwe page	, we zien nl	, als we steeds Enter geven	,

http://localhost:9090/wicket-testing/ajaxlinkstudy?1
http://localhost:9090/wicket-testing/ajaxlinkstudy?2
http://localhost:9090/wicket-testing/ajaxlinkstudy?3
...
/ We zien ook steeds dat er HTML terug komt	, de hele page	, en geen XML door een AJAX call	, en we zien ook dat de state initial is	, omdat we een nieuwe page krijgen	, dus er is new AjaxLinkStudyPage() gedaan	, de models zijn ook initial	,
[Ajax Link] 0
/ Als we Ajax calls doen, door op de link te click	, komt er XML terug en zien we	,
[Ajax Link] [null] 13 
[Ajax Link] [[null]] 39
...

/ 13	. 

/ we maken een RequestHandler	, 
/ Als we Enter geven op de url text field	, en we geven http://localhost:9090/wicket-testing/ajaxlinkstudy 	, dan gaat hij een bookmarkable page handler maken: een RenderPageRequestHandler	,
/ Dus bookmarkable page <-> RenderPageRequestHandler
/ TODO

/ 13	. 

/ Later	,  
/ een page renderer op een page provider	,
	private static class WebPageRendererProvider implements IPageRendererProvider
	{
		@Override
		public PageRenderer get(RenderPageRequestHandler handler)
		{
			return new WebPageRenderer(handler);

/ Dan	,
WebPageRenderer.respond(RequestCycle) line: 185	

/ MORGENOCHTEND
Daemon Thread [http-nio-9090-exec-7] (Suspended)	
	WebPageRenderer.respond(RequestCycle) line: 185	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ 7	. 

/ In de code 	,
/s
MountedMapper(AbstractBookmarkableMapper).mapRequest(Request) line: 358	
/ we lezen over listener interface url
/ we geven dit in google en 	,
/ Lees	,
https://ci.apache.org/projects/wicket/guide/6.x/guide/advanced.html
/ en we lezen	,
project CallbackURLExample
/ Geef dit in Google	,
/ Lees	,
https://github.com/bitstorm/Wicket-tutorial-examples
/ ->
http://examples-wickettutorial.rhcloud.com/

class OnChangeSingleChoiceBehavior extends Behavior implements IBehaviorListener{
        public CharSequence getCallbackUrl(){
                if (boundComponent == null){
                        throw new IllegalArgumentException(
                                "Behavior must be bound to a component to create the URL");
                }

                final RequestListenerInterface rli;

                rli = IBehaviorListener.INTERFACE;

                return boundComponent.urlFor(this, rli, new PageParameters());
         }
/ TODO

/ 7	. 

/ we hebben gewone link page	,
http://localhost:9090/wicket-testing/linkonlystudy
/we hebben ajax link page	,
http://localhost:9090/wicket-testing/ajaxlinkstudy

/ 13	. 

/ GET gewone link page	,

<a wicket:id="link" wicketpath="link" href="./linkonlystudy?0-2.ILinkListener-link">[Link]</a>

/ click de link	,
/ we zien in Network 2 requests	,

/ 1313	. 

Remote Address:[::1]:9090
Request URL:http://localhost:9090/wicket-testing/linkonlystudy?0-2.ILinkListener-link
Request Method:GET
Status Code:302 Found

/ Geen response	,

/ 1313

Remote Address:[::1]:9090
Request URL:http://localhost:9090/wicket-testing/linkonlystudy?0
Request Method:GET
Status Code:200 OK

/ response:
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
<h1>LinkStudyTargetPage</h1>

<a wicket:id="link" wicketpath="link" href="./linkonlystudy?0-3.ILinkListener-link">[Link]</a>
<span wicket:id="text" wicketpath="text"></span>
<span wicket:id="counter" wicketpath="counter">0</span>

</body>
</html>


/ 13	. 

/ de ajax link page	,

<a wicket:id="ajaxlink" id="ajaxlink1" wicketpath="ajaxlink" href="javascript:;">[Ajax Link]</a>

/ we zien eerst een redirect	, om naar de goede version te request	, en dan de echte GET	,

Remote Address:[::1]:9090
Request URL:http://localhost:9090/wicket-testing/ajaxlinkstudy
Request Method:GET
Status Code:302 Found
Request Headersview source

Remote Address:[::1]:9090
Request URL:http://localhost:9090/wicket-testing/ajaxlinkstudy?1
Request Method:GET
Status Code:200 OK

Remote Address:[::1]:9090
Request URL:http://localhost:9090/wicket-testing/wicket/resource/org.apache.wicket.resource.JQueryResourceReference/jquery/jquery-2.2.0-ver-1455723568000.js
Request Method:GET
Status Code:200 OK (from cache)

/ click de link	,

Remote Address:[::1]:9090
Request URL:http://localhost:9090/wicket-testing/ajaxlinkstudy?1-1.IBehaviorListener.0-ajaxlink&_=1466486837047
Request Method:GET
Status Code:200 OK

/ Als we een nieuwe GET doen	,

Remote Address:[::1]:9090
Request URL:http://localhost:9090/wicket-testing/ajaxlinkstudy
Request Method:GET
Status Code:302 Found

Remote Address:[::1]:9090
Request URL:http://localhost:9090/wicket-testing/ajaxlinkstudy?5
Request Method:GET
Status Code:200 OK

/ en we click de link	,

Remote Address:[::1]:9090
Request URL:http://localhost:9090/wicket-testing/ajaxlinkstudy?5-1.IBehaviorListener.0-ajaxlink&_=1466487723045
Request Method:GET
Status Code:200 OK


/ 7	. 

/ Ad	, 
https://cwiki.apache.org/confluence/display/WICKET/Multiple+submit+buttons	 / cancel button 
To have more than one submit buttons in a Form, we need to create custom Button by subclassing from wicket.markup.html.form.Button. We define the custom Button behaviour by overiding the onSubmit() method and add the buttons to the Form. When the user click on any of the buttons, the specific behaviour of the button is executed by calling the button's onSubmit() method followed by execution of form's onSubmit() method.

/ een ajax button moet e.preventDefault	, 



/ Einde WICKET AJAX

/ DEBUG WICKET GET PAGE WITH AJAX LINK

/ 7	. 


/s
/**
	 * Returns URL for the request handler or <code>null</code> if the handler couldn't have been
	 * encoded.
	 * <p>
	 * <strong>Note</strong>: The produced URL is relative to the filter path. Application code most
	 * probably need URL relative to the currently used page, for this use
	 * {@linkplain #urlFor(org.apache.wicket.request.IRequestHandler)}
	 * </p>
	 *
/ In web.xml is dat /* 
/ TODO 
RequestCycle.mapUrlFor(IRequestHandler) line: 434	
		final Url url = requestMapper.mapHandler(handler);
/s
SystemMapper(CompoundRequestMapper).mapHandler(IRequestHandler) line: 211	
/=
	public Url mapHandler(final IRequestHandler handler)
handler	RenderPageRequestHandler  (id=7119)	

/ Intermezzo

/ Eerst waren we in	,
public class CompoundRequestMapper implements ICompoundRequestMapper
	public IRequestHandler mapRequest(final Request request)

/ Einde Intermezzo

		for (IRequestMapper mapper : mappers)
		{
			Url url = mapper.mapHandler(handler);

/ 7	. 
/c
/s
WebPageRenderer.respond(RequestCycle) line: 193	
		if (shouldRenderPageAndWriteResponse(requestCycle, currentUrl, targetUrl))
/s
	/**
	 * Should the page be rendered immediately.
	 */
WebPageRenderer.shouldRenderPageAndWriteResponse(RequestCycle, Url, Url) line: 329	
		return 
		(	
			compatibleProtocols(currentUrl.getProtocol(), targetUrl.getProtocol())	// (http,null) -> true
		)
		&&
		(	neverRedirect(getRedirectPolicy())								// AUTO_REDIRECT != NEVER_REDIRECT -> false
			|| 
			(	
				(	
					isOnePassRender() && notForcedRedirect(getRedirectPolicy())		// REDIRECT_TO_BUFFER != ONE_PASS_RENDER -> false 
																					// && true
				) 
				|| 
				(
					targetUrl.equals(currentUrl) 											// true
					&& 
					notNewAndNotStatelessPage(isNewPageInstance(), isPageStateless())		// (true,false)-> true
				)
			) 
			|| 	
			(targetUrl.equals(currentUrl) && isRedirectToRender())
			|| 
			(shouldPreserveClientUrl(cycle) && notForcedRedirect(getRedirectPolicy()))
		);
/s
WebPageRenderer.isPageStateless() line: 287	
		return getPage().isPageStateless();
/s
WebPageRenderer(PageRenderer).getPage() line: 78	
		return getPageProvider().getPageInstance();
/s
PageProvider.getPageInstance() line: 169	
		if (pageInstance == null)
		{
			resolvePageInstance(pageId, pageClass, pageParameters, renderCount);
/s
DefaultMapperContext.newPageInstance(Class<IRequestablePage>, PageParameters) line: 102	
		if (pageParameters == null)
		{
			return application.getPageFactory().newPage(pageClass);
/s
DefaultPageFactory.newPage(Class<C>) line: 67	
		try
		{
			// throw an exception in case default constructor is missing
			// => improved error message
			Constructor<C> constructor = pageClass.getDeclaredConstructor((Class<?>[]) null);

			return processPage(newPage(constructor, null), null);
/s
DefaultPageFactory.processPage(C, PageParameters) line: 207	
		((Page)page).setWasCreatedBookmarkable(true);							<-
/s
	 * Sets the flag that determines whether or not this page was created using one of its
	 * bookmarkable constructors
	 * 
			setFlag(FLAG_WAS_CREATED_BOOKMARKABLE, wasCreatedBookmarkable);
/t
WebPageRenderer.isPageStateless() line: 287	
		return getPage().isPageStateless();
/pd
/s
	/**
	 * Gets whether the page is stateless. Components on stateless page must not render any stateful
	 * urls, and components on stateful page must not render any stateless urls. Stateful urls are
	 * urls, which refer to a certain (current) page instance.
	 * 
	 * @return Whether this page is stateless
	 */
AjaxLinkStudyPage(Page).isPageStateless() line: 448	
		if (isBookmarkable() == false)
/s
	/**
	 * Bookmarkable page can be instantiated using a bookmarkable URL.
	 * 
AjaxLinkStudyPage(Page).isBookmarkable() line: 411	
		Boolean bookmarkable = pageToBookmarkableCache.get(pageClass.getName());
null
				if (pageClass.getDeclaredConstructor(new Class[] { }) != null)
public my.test.own.AjaxLinkStudyPage()
					bookmarkable = Boolean.TRUE;
			Boolean tmpBookmarkable = pageToBookmarkableCache.putIfAbsent(pageClass.getName(), bookmarkable);
			if (tmpBookmarkable != null)
			{
				bookmarkable = tmpBookmarkable;
		return bookmarkable;


/ De page (eig. page class)  is bookmarkable als hij een ctor() of een ctor(PageParameter[]) heeft	, 
/ Klopt	, deze zijn bookmarkable
localhost:8080/foo/bar 
ocalhost:8080/foo/bar?baz=gee&hee=fee 

/t
AjaxLinkStudyPage(Page).isPageStateless() line: 448	
		if (isBookmarkable() == false)
/d
NEE
			stateless = Boolean.FALSE;
/ NIET

/ WH als een url bookmarkable is , is de page stateless	, 
/ TODO
/ als er state in de url zit, kun je hem niet bookmark, en is de page stateful	, 
/ TODO


		if (getStatelessHint() == false)
/ NEE
/ want	,
/s
			return getFlag(FLAG_STATELESS_HINT);
true

/ Default is een page stateless	, maar je kunt ... TODO

/ Intermezzo

Page.class
	/** True if the page should try to be stateless */
	private static final int FLAG_STATELESS_HINT = FLAG_RESERVED5;			// 65536

Component.class

	/** Component flags. See FLAG_* for possible non-exclusive flag values. */
	private int flags = FLAG_VISIBLE | FLAG_ESCAPE_MODEL_STRINGS | FLAG_VERSIONED | FLAG_ENABLED |
		FLAG_IS_RENDER_ALLOWED | FLAG_VISIBILITY_ALLOWED | FLAG_RESERVED5 /* page's stateless hint */;

/ Einde Intermezzo

/t
AjaxLinkStudyPage(Page).isPageStateless() line: 463	
		if (stateless == null)
/ JA
			internalInitialize();
/s
AjaxLinkStudyPage(MarkupContainer).internalInitialize() line: 1085	
		super.fireInitialize();
		visitChildren(new IVisitor<Component, Void>()
		{
			@Override
			public void component(final Component component, final IVisit<Void> visit)
			{
->				component.fireInitialize();
/s
AjaxLinkStudyPage$1(Component).fireInitialize() line: 877	
			onInitialize();
/s
AjaxLinkStudyPage$1(AjaxLink<T>).onInitialize() line: 67	
		super.onInitialize();
->		add(newAjaxEventBehavior("click"));
/s
AjaxLinkStudyPage$1(AjaxLink<T>).newAjaxEventBehavior(String) line: 77	
		return new AjaxEventBehavior(event)
...

/ Intermezzo

/ stack	,
	AjaxLinkStudyPage$1(AjaxLink<T>).newAjaxEventBehavior(String) line: 77	
	AjaxLinkStudyPage$1(AjaxLink<T>).onInitialize() line: 67	
	AjaxLinkStudyPage$1(Component).fireInitialize() line: 877	
	MarkupContainer$3.component(Component, IVisit<Void>) line: 1090	
	MarkupContainer$3.component(Object, IVisit) line: 1086	
	Visits.visitChildren(Iterable<? super S>, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 144	
	Visits.visitChildren(Iterable<? super S>, IVisitor<S,R>, IVisitFilter) line: 123	
	Visits.visitChildren(Iterable<? super S>, IVisitor<S,R>) line: 192	
	AjaxLinkStudyPage(MarkupContainer).visitChildren(IVisitor<Component,R>) line: 981	
	AjaxLinkStudyPage(MarkupContainer).internalInitialize() line: 1085	
	AjaxLinkStudyPage(Page).isPageStateless() line: 465	
	WebPageRenderer.isPageStateless() line: 287	
		if (stateless == null)
		{
			internalInitialize();

	WebPageRenderer.shouldRenderPageAndWriteResponse(RequestCycle, Url, Url) line: 329	
	WebPageRenderer.respond(RequestCycle) line: 193	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	


/ Einde Intermezzo

/t
AjaxLinkStudyPage$1(AjaxLink<T>).onInitialize() line: 67	
		add(newAjaxEventBehavior("click"));
/pd
/s
AjaxLinkStudyPage$1(Component).add(Behavior...) line: 4559	
		new Behaviors(this).add(behaviors);
/s
Behaviors.add(Behavior...) line: 45	
		for (Behavior behavior : behaviors)
		{
			internalAdd(behavior);
/s
Behaviors.internalAdd(Behavior) line: 65	
		component.data_add(behavior);
/s
AjaxLinkStudyPage$1(Component).data_add(Object) line: 562	
		data_insert(-1, object);
/s
AjaxLinkStudyPage$1(Component).data_insert(int, Object) line: 577	
		int currentLength = data_length();
0
		if (position == -1)
/ JA
		{
			position = currentLength;
0
		if (currentLength == 0)
		{
			data = object;
/t
Behaviors.internalAdd(Behavior) line: 66	
		component.data_add(behavior);
/d
		if (behavior.getStatelessHint(component) == false)
/ JA
/ TODO
		{
			getBehaviorId(behavior);
0
/t
Behaviors.add(Behavior...) line: 53	
			internalAdd(behavior);
/d
			if (!behavior.isTemporary(component))
/ JA
			{
				component.addStateChange();
/ TODO
			// Give handler the opportunity to bind this component
			behavior.bind(component);
/TODO
/t
AjaxLinkStudyPage$1(Component).add(Behavior...) line: 4560	
		new Behaviors(this).add(behaviors);
/d
		return this;
/t
AjaxLinkStudyPage$1(AjaxLink<T>).onInitialize() line: 67	
		add(newAjaxEventBehavior("click"));
/d
...
/t
AjaxLinkStudyPage(Page).isPageStateless() line: 463	
			internalInitialize();
/d
			if (isStateless() == false)
/s
AjaxLinkStudyPage(Component).isStateless() line: 2069	
this=AjaxLinkStudyPage
		if (
		(
			// the component is either invisible or disabled
			isVisibleInHierarchy() 									/ true
			&& isEnabledInHierarchy()) == false 					/ true == false = false
		// and it can't call listener interfaces
			&& canCallListenerInterface(null) == false				/ true == false = false
		)
		if (!getStatelessHint())
/ NEE
		for (Behavior behavior : getBehaviors())
/ NEE
		return true;
/t
AjaxLinkStudyPage(Page).isPageStateless() line: 473	
		if (stateless == null)
		{
...
			if (isStateless() == false)
/ NEE
		if (stateless == null)
			Component statefulComponent = visitChildren(Component.class,
				new IVisitor<Component, Component>()
				{
					@Override
					public void component(final Component component, final IVisit<Component> visit)
component	Label  (id=7138)	, id="text"
					{
						if (!component.isStateless())
/s
AjaxLinkStudyPage(Component).isStateless() line: 2069	
this=AjaxLinkStudyPage
		if (
		(
			// the component is either invisible or disabled
			isVisibleInHierarchy() 									/ true
			&& isEnabledInHierarchy()) == false 					/ true == false = false
		// and it can't call listener interfaces
			&& canCallListenerInterface(null) == false				/ true == false = false
		)
		if (!getStatelessHint())
/ NEE
		for (Behavior behavior : getBehaviors())
/ NEE
		return true;
/t
Page$2.component(Component, IVisit<Component>) line: 485	
		if (stateless == null)
		{
			Component statefulComponent = visitChildren(Component.class,
				new IVisitor<Component, Component>()
				{
					@Override
					public void component(final Component component, final IVisit<Component> visit)
					{
						if (!component.isStateless())
/d
/ NEE
/ c
/ volgende,	
						if (!component.isStateless())
component	Label  (id=7142)	, id="counter"

/ volgende	,
						if (!component.isStateless())
component	AjaxLinkStudyPage$1  (id=7177)	
/=
[AjaxLink [Component id = ajaxlink]]
/s
AjaxLinkStudyPage$1(Component).isStateless() line: 2087	

		if (
		// the component is either invisible or disabled
		(isVisibleInHierarchy() && isEnabledInHierarchy()) == false &&

		// and it can't call listener interfaces
			canCallListenerInterface(null) == false)
/ NEE
		if (!getStatelessHint())
/ NEE
		for (Behavior behavior : getBehaviors())

		{
			if (!behavior.getStatelessHint(this))
/s
AjaxLink$1(Behavior).getStatelessHint(Component) line: 155	
/=
	/**
	 * This method returns false if the behavior generates a callback url (for example ajax
	 * behaviors)
	 * 
	 * @param component
	 *            the component that has this behavior coupled.
	 * 
	 * @return boolean true or false.
	 */
	public boolean getStatelessHint(Component component)
	{
		if (this instanceof IBehaviorListener)
		{
			// this behavior implements a callback interface, so it cannot be stateless
			return false;

/ TODO

/ Intermezzo

/**
 * An ajax behavior that is attached to a certain client-side (usually javascript) event, such as
 * click, change, keydown, etc.
 * <p>
 * Example:
 * 
 * <pre>
 *         WebMarkupContainer div=new WebMarkupContainer(...);
 *         div.setOutputMarkupId(true);
 *         div.add(new AjaxEventBehavior(&quot;click&quot;) {
 *             protected void onEvent(AjaxRequestTarget target) {
 *                 System.out.println(&quot;ajax here!&quot;);
 *             }
 *         }
 * </pre>
 * 
 * This behavior will be linked to the <em>click</em> javascript event of the div WebMarkupContainer
 * represents, and so anytime a user clicks this div the {@link #onEvent(AjaxRequestTarget)} of the
 * behavior is invoked.
 *
 * <p>
 * <strong>Note</strong>: {@link #getEvent()} method cuts any <em>on</em> prefix from the given event name(s).
 * This is being done for easier migration of applications coming from Wicket 1.5.x where Wicket used
 * inline attributes like 'onclick=...'. If the application needs to use custom events with names starting with
 * <em>on</em> then {@link #getEvent()} should be overridden.
 * </p>
 *
 * @since 1.2
 * 
 * @author Igor Vaynberg (ivaynberg)
 * @see #onEvent(AjaxRequestTarget)
 */
public abstract class AjaxEventBehavior extends AbstractDefaultAjaxBehavior

/**
 * Listens for requests to behaviors. When {@link org.apache.wicket.behavior.Behavior}s are
 * 'enriched' with this interface, they can receive requests themselves. You can use this for
 * example to implement AJAX behavior, though you'll probably want to extend from
 * {@link org.apache.wicket.behavior.AbstractAjaxBehavior} directly instead in that case.
 * 
 * @author Eelco Hillenius
 */
public interface IBehaviorListener extends IRequestListener
{
	/** Behavior listener interface */
	public static final RequestListenerInterface INTERFACE = new RequestListenerInterface(
		IBehaviorListener.class);

	/**
	 * Called when a request to a behavior is received.
	 */
	void onRequest();
}

/ Einde Intermezzo

/t
AjaxLinkStudyPage$1(Component).isStateless() line: 2089	
		for (Behavior behavior : getBehaviors())
		{
			if (!behavior.getStatelessHint(this))
			{
				return false;
/t
AjaxLinkStudyPage(Page).isPageStateless() line: 488	
		if (stateless == null)
		{
			Component statefulComponent = visitChildren(Component.class,
				new IVisitor<Component, Component>()
				{
					@Override
					public void component(final Component component, final IVisit<Component> visit)
					{
						if (!component.isStateless())
/d
/ JA
						{
							visit.stop(component);
						}
					}
				});

			stateless = statefulComponent == null;
false
statefulComponent	AjaxLinkStudyPage$1  (id=7177)	

		return stateless;
false
/t
WebPageRenderer.notNewAndNotStatelessPage(boolean, boolean) line: 339	
/=
	private static boolean notNewAndNotStatelessPage(boolean newPageInstance, boolean pageStateless)
	{
		return !newPageInstance && !pageStateless;
!true && !false = false
/t
/s
WebPageRenderer.shouldPreserveClientUrl(RequestCycle) line: 297	
		return ((WebRequest)requestCycle.getRequest()).shouldPreserveClientUrl();
false
/ TODO
/t
WebPageRenderer.respond(RequestCycle) line: 201	
		if (shouldRenderPageAndWriteResponse(requestCycle, currentUrl, targetUrl))
/d
false
		else if (shouldRedirectToTargetUrl(requestCycle, currentUrl, targetUrl))
/s
WebPageRenderer.shouldRedirectToTargetUrl(RequestCycle, Url, Url) line: 305	

		return alwaysRedirect(getRedirectPolicy()) //
false
AUTO_REDIRECT != ALWAYS_REDIRECT
			|| isRedirectToRender() //
false
AUTO_REDIRECT != REDIRECT_TO_RENDER
			|| (isAjax(cycle) && targetUrl.equals(currentUrl)) //
false
/ we doen nu GET index.html TODO
			|| (!targetUrl.equals(currentUrl) && (isNewPageInstance() || (isSessionTemporary() && isPageStateless())));
false
(!true && true) || ( false && false)

/t
WebPageRenderer.respond(RequestCycle) line: 201	
		else if (shouldRedirectToTargetUrl(requestCycle, currentUrl, targetUrl))
/d
/ NEE
		else
		{
			Url beforeRenderUrl = requestCycle.mapUrlFor(getRenderPageRequestHandler());
ajaxlinkstudy?13
/ TODO (We gaven localhost:9090/wicket-testing/ajaxlinkstudy )

			// redirect to buffer
			BufferedWebResponse response = renderPage(beforeRenderUrl, requestCycle);
/s
	/**
	 * Renders page to a {@link BufferedWebResponse}. All URLs in page will be rendered relative to
	 * <code>targetUrl</code>
	 * 
WebPageRenderer.renderPage(Url, RequestCycle) line: 119	
/=
	protected BufferedWebResponse renderPage(Url targetUrl, RequestCycle requestCycle)
targetUrl=ajaxlinkstudy?13

		// keep the original base URL
		Url originalBaseUrl = requestCycle.getUrlRenderer().setBaseUrl(targetUrl);
/s
UrlRenderer.setBaseUrl(Url) line: 76	
/=
	public Url setBaseUrl(final Url base)
		Url original = baseUrl;
ajaxLinkStudy
		baseUrl = base;
/ ajaxLinkStudy?13 is nu baseUrl	,
		return original;
/t
WebPageRenderer.renderPage(Url, RequestCycle) line: 123	
		// keep the original base URL
		Url originalBaseUrl = requestCycle.getUrlRenderer().setBaseUrl(targetUrl);
/d
/ targetUrl=ajaxLinkStudy?13 is nu de baseUrl	, de oude ajaxLinkStudy is originalBaseUrl	,

			requestablePage.renderPage();
/s
AjaxLinkStudyPage(Page).renderPage() line: 1018	
			render();
/s
AjaxLinkStudyPage(Component).render() line: 2308	
			// Do the render
			internalRender();
/s
AjaxLinkStudyPage(Component).internalRender() line: 2345	
		// Make sure there is a markup available for the Component
		IMarkupFragment markup = getMarkup();
...
				onRender();
/s
AjaxLinkStudyPage(WebPage).onRender() line: 141	
...
		super.onRender();
/s
AjaxLinkStudyPage(WebPage).onRender() line: 141	
		renderAll(markupStream, null);
/s
AjaxLinkStudyPage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1746	

		while (markupStream.hasMore())
			// Render the markup element
			boolean rawMarkup = renderNext(markupStream);
/s
AjaxLinkStudyPage(MarkupContainer).renderNext(MarkupStream) line: 1524	
			// Get element as tag
			final ComponentTag tag = (ComponentTag)element;
<head>
			// Get component id
			final String id = tag.getId();
_header_
			// Failed to find it?
			if (component != null)
			{
				component.render();
/s
HtmlHeaderContainer(Component).render() line: 2308	
			// Do the render
			internalRender();
/s
HtmlHeaderContainer(Component).internalRender() line: 2380	
				onRender();
/s
HtmlHeaderContainer(MarkupContainer).onRender() line: 1698	
		internalRenderComponent();
/s
HtmlHeaderContainer(Component).internalRenderComponent() line: 2565	
		// Call any tag handler
		onComponentTag(tag);
<head wicketpath="__header__">
			else
			{
				renderComponentTag(tag);
/ TODO
			// Render the body only if open-body-close. Do not render if open-close.
			if (tag.isOpen())
			{
				// Render the body. The default strategy will simply call the component's
				// onComponentTagBody() implementation.
				getMarkupSourcingStrategy().onComponentTagBody(this, markupStream, tag);
/s
DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
		component.onComponentTagBody(markupStream, openTag);
/s
HtmlHeaderContainer.onComponentTagBody(MarkupStream, ComponentTag) line: 171	
			// Render the header sections of all components on the page
			AbstractHeaderRenderStrategy.get().renderHeader(this,
				new HeaderStreamState(markupStream, openTag), getPage());
/s
ChildFirstHeaderRenderStrategy.renderHeader(HtmlHeaderContainer, HtmlHeaderContainer$HeaderStreamState, Component) line: 57	
		// Then its child hierarchy
		renderChildHeaders(headerContainer, rootComponent);
/s
ChildFirstHeaderRenderStrategy.renderChildHeaders(HtmlHeaderContainer, Component) line: 78	
		if (rootComponent instanceof MarkupContainer)
		{
			new DeepChildFirstVisitor()
			{
				@Override
				public void component(final Component component, final IVisit<Void> visit)
				{
					if (component != rootComponent)
/ JA
this	ChildFirstHeaderRenderStrategy$1  (id=7953)	
	val$rootComponent	AjaxLinkStudyPage  (id=7890)	
component	AjaxLinkStudyPage$1  (id=7896)	
					{
->						component.internalRenderHead(headerContainer);
/s
AjaxLinkStudyPage$1(Component).internalRenderHead(HtmlHeaderContainer) line: 2727	
			// Then ask all behaviors
			for (Behavior behavior : getBehaviors())
behavior	AjaxLink$1  (id=7959)	
			{
				if (isBehaviorAccepted(behavior))
				{
					if (response.wasRendered(behavior) == false)
					{
						behavior.renderHead(this, response);
/s
AjaxLink$1(AjaxEventBehavior).renderHead(Component, IHeaderResponse) line: 90	
		super.renderHead(component, response);
/s
AjaxLink$1(AbstractDefaultAjaxBehavior).renderHead(Component, IHeaderResponse) line: 104	

//////////////////////////////////////
/ Centrale fct	,

		CoreLibrariesContributor.contributeAjax(component.getApplication(), response);
/s

	/**
	 * Contributes the Ajax backing library plus wicket-event.js and wicket-ajax.js implementations.
	 * Additionally if Ajax debug is enabled then wicket-ajax-debug.js implementation is also added.
	 * 
CoreLibrariesContributor.contributeAjax(Application, IHeaderResponse) line: 60	
/ TODO

/t
AjaxLink$1(AbstractDefaultAjaxBehavior).renderHead(Component, IHeaderResponse) line: 98	

		RequestCycle requestCycle = component.getRequestCycle();
		Url baseUrl = requestCycle.getUrlRenderer().getBaseUrl();
ajaxlinkstudy?11
		CharSequence ajaxBaseUrl = Strings.escapeMarkup(baseUrl.toString());
		response.render(JavaScriptHeaderItem.forScript("Wicket.Ajax.baseUrl=\"" + ajaxBaseUrl
			+ "\";", "wicket-ajax-base-url"));

		renderExtraHeaderContributors(component, response);
/s
AjaxLink$1(AbstractDefaultAjaxBehavior).renderExtraHeaderContributors(Component, IHeaderResponse) line: 119	
		AjaxRequestAttributes attributes = getAttributes();
/s
AjaxLink$1(AbstractDefaultAjaxBehavior).getAttributes() line: 146	
		updateAjaxAttributes(attributes);
/s
AjaxLink$1.updateAjaxAttributes(AjaxRequestAttributes) line: 90	
/=
		return new AjaxEventBehavior(event)
		{
			private static final long serialVersionUID = 1L;

			@Override
			protected void onEvent(AjaxRequestTarget target)
			{
				onClick(target);
			}

			@Override
			protected void updateAjaxAttributes(AjaxRequestAttributes attributes)
			{
->				super.updateAjaxAttributes(attributes);
/s
AjaxLink$1(AjaxEventBehavior).updateAjaxAttributes(AjaxRequestAttributes) line: 103	
		super.updateAjaxAttributes(attributes);
/s
	/**
	 * Gives a chance to the specializations to modify the attributes.
	 * 
AjaxLink$1(AbstractDefaultAjaxBehavior).updateAjaxAttributes(AjaxRequestAttributes) line: 158	
{
}
/t
AjaxLink$1(AjaxEventBehavior).updateAjaxAttributes(AjaxRequestAttributes) line: 105	
		super.updateAjaxAttributes(attributes);
/d
		String evt = getEvent();
"click"
		attributes.setEventNames(evt);
/t
AjaxLink$1.updateAjaxAttributes(AjaxRequestAttributes) line: 91	
/=
		return new AjaxEventBehavior(event)
		{
			private static final long serialVersionUID = 1L;

			@Override
			protected void onEvent(AjaxRequestTarget target)
			{
				onClick(target);
			}

			@Override
			protected void updateAjaxAttributes(AjaxRequestAttributes attributes)
			{
				super.updateAjaxAttributes(attributes);
/d
				AjaxLink.this.updateAjaxAttributes(attributes);
/s
	protected void updateAjaxAttributes(AjaxRequestAttributes attributes)
{
}
/t
AjaxLink$1(AbstractDefaultAjaxBehavior).getAttributes() line: 147	
		updateAjaxAttributes(attributes);
/d
		return attributes;
/t
AjaxLink$1(AbstractDefaultAjaxBehavior).renderExtraHeaderContributors(Component, IHeaderResponse) line: 121	
		AjaxRequestAttributes attributes = getAttributes();
/d
		List<IAjaxCallListener> ajaxCallListeners = attributes.getAjaxCallListeners();
[]
/t
AjaxLink$1(AjaxEventBehavior).renderHead(Component, IHeaderResponse) line: 90	
		super.renderHead(component, response);
/d
		if (component.isEnabledInHierarchy())
		{
			CharSequence js = getCallbackScript(component);
/s
	/**
	 * @param component
	 *            the component to use when generating the attributes
	 * @return script that can be used to execute this Ajax behavior.
	 */
AjaxLink$1(AbstractDefaultAjaxBehavior).getCallbackScript(Component) line: 465	
		CharSequence ajaxAttributes = renderAjaxAttributes(component);
component	AjaxLinkStudyPage$1  (id=7896)	
/s
	/**
	 * <pre>
	 * 				{
	 * 					u: 'editable-label?6-1.IBehaviorListener.0-text1-label',  // url
	 * 					m: 'POST',          // method name. Default: 'GET'
	 * 					c: 'label7',        // component id (String) or window for page
	 * 					e: 'click',         // event name
	 * 					sh: [],             // list of success handlers
	 * 					fh: [],             // list of failure handlers
	 * 					pre: [],            // list of preconditions. If empty set default : Wicket.$(settings{c}) !== null
	 * 					ep: {},             // extra parameters
	 * 					async: true|false,  // asynchronous XHR or not
	 * 					ch: 'someName|d',   // AjaxChannel
	 * 					i: 'indicatorId',   // indicator component id
	 * 					ad: true,           // allow default
	 * 				}
	 * </pre>
	 * 
	 * @param component
	 *            the component with that behavior
	 * @return the attributes as string in JSON format
	 */
AjaxLink$1(AbstractDefaultAjaxBehavior).renderAjaxAttributes(Component) line: 185	
		AjaxRequestAttributes attributes = getAttributes();
attributes	AjaxRequestAttributes  (id=7280)	
	eventNames	String[1]  (id=7283)	
["click"]
		return renderAjaxAttributes(component, attributes);
/s
AjaxLink$1(AbstractDefaultAjaxBehavior).renderAjaxAttributes(Component, AjaxRequestAttributes) line: 201	
		JSONObject attributesJson = new JSONObject();
		try
		{
			attributesJson.put(AjaxAttributeName.URL.jsonName(), getCallbackUrl());
/s
AjaxLink$1(AbstractDefaultAjaxBehavior).renderAjaxAttributes(Component, AjaxRequestAttributes) line: 201	
			attributesJson.put(AjaxAttributeName.URL.jsonName(), getCallbackUrl());
/s
AjaxLink$1(AbstractAjaxBehavior).getCallbackUrl() line: 86	
		final RequestListenerInterface rli;
		rli = IBehaviorListener.INTERFACE;
[RequestListenerInterface name=IBehaviorListener, method=public abstract void org.apache.wicket.behavior.IBehaviorListener.onRequest()]

/ Intermezzo

/**
 * Listens for requests to behaviors. When {@link org.apache.wicket.behavior.Behavior}s are
 * 'enriched' with this interface, they can receive requests themselves. You can use this for
 * example to implement AJAX behavior, though you'll probably want to extend from
 * {@link org.apache.wicket.behavior.AbstractAjaxBehavior} directly instead in that case.
 * 
 * @author Eelco Hillenius
 */
public interface IBehaviorListener extends IRequestListener
{
	/** Behavior listener interface */
	public static final RequestListenerInterface INTERFACE = new RequestListenerInterface(
		IBehaviorListener.class);

	/**
	 * Called when a request to a behavior is received.
	 */
	void onRequest();
}

/ Einde Intermezzo

		return getComponent().urlFor(this, rli, new PageParameters());
this	AjaxLink$1  (id=7959)	
rli	RequestListenerInterface  (id=8053)	
	includeRenderCount	true	
	listenerInterfaceClass	Class<T> (org.apache.wicket.behavior.IBehaviorListener) (id=2443)	
	method	Method  (id=8056)	
public abstract void org.apache.wicket.behavior.IBehaviorListener.onRequest()
	name	"IBehaviorListener" (id=8057)	
	renderPageAfterInvocation	true	
/s
AjaxLinkStudyPage$1(Component).urlFor(Behavior, RequestListenerInterface, PageParameters) line: 3347	
/=
	public final CharSequence urlFor(final Behavior behaviour,
		final RequestListenerInterface listener, final PageParameters parameters)
	{
		int id = getBehaviorId(behaviour);
/s
AjaxLinkStudyPage$1(Component).getBehaviorId(Behavior) line: 4547	
		return new Behaviors(this).getBehaviorId(behavior);
/s
Behaviors.getBehaviorId(Behavior) line: 252	

this	Behaviors  (id=8085)	
	component	AjaxLinkStudyPage$1  (id=7896)	
		data	Object[2]  (id=8010)	
			[0]	AjaxLink$1  (id=7959)	
			[1]	Behaviors$BehaviorIdList  (id=8089)	

			if (behavior == component.data_get(i))
behavior	AjaxLink$1  (id=7959)	
		ArrayList<Behavior> ids = getBehaviorsIdList(true);
/ calls component.data_get(1)
ids	Behaviors$BehaviorIdList  (id=8089)	
	elementData	Object[1]  (id=8091)	
		[0]	AjaxLink$1  (id=7959)	
			component	AjaxLinkStudyPage$1  (id=7896)	
			event	"click" (id=7898)	
			this$0	AjaxLinkStudyPage$1  (id=7896)	
	size	1	

/t
AjaxLinkStudyPage$1(Component).urlFor(Behavior, RequestListenerInterface, PageParameters) line: 3348	
		int id = getBehaviorId(behaviour);
0
		IRequestHandler handler = createRequestHandler(listener, parameters, id);
/s
AjaxLinkStudyPage$1(Component).createRequestHandler(RequestListenerInterface, PageParameters, Integer) line: 3358	
		PageAndComponentProvider provider = new PageAndComponentProvider(page, this, parameters);
/s
PageAndComponentProvider.<init>(IRequestablePage, IRequestableComponent, PageParameters) line: 140	
		super(page);
/s
PageAndComponentProvider(PageProvider).<init>(IRequestablePage) line: 159	
		pageInstance = page;
		pageId = page.getPageId();
10
		renderCount = page.getRenderCount();
1
/t
PageAndComponentProvider.<init>(IRequestablePage, IRequestableComponent, PageParameters) line: 147	
		super(page);
/d
		this.component = component;
/t
AjaxLinkStudyPage$1(Component).createRequestHandler(RequestListenerInterface, PageParameters, Integer) line: 3366	
		PageAndComponentProvider provider = new PageAndComponentProvider(page, this, parameters);
/d
		if (page.isPageStateless()
			|| (getApplication().getPageSettings().getRecreateBookmarkablePagesAfterExpiry()
				&& page.isBookmarkable() && page.wasCreatedBookmarkable()))
/ JA
		{
			return new BookmarkableListenerInterfaceRequestHandler(provider, listener, id);
/s
BookmarkableListenerInterfaceRequestHandler.<init>(IPageAndComponentProvider, RequestListenerInterface, Integer) line: 59	
/=
	public BookmarkableListenerInterfaceRequestHandler(
		IPageAndComponentProvider pageComponentProvider,
		RequestListenerInterface listenerInterface, Integer behaviorIndex)
	{
		this.pageComponentProvider = pageComponentProvider;
		this.listenerInterface = listenerInterface;
		this.behaviorIndex = behaviorIndex;
/t
AjaxLinkStudyPage$1(Component).urlFor(Behavior, RequestListenerInterface, PageParameters) line: 3349	
		IRequestHandler handler = createRequestHandler(listener, parameters, id);
/d
		return getRequestCycle().urlFor(handler);
/s
RequestCycle.urlFor(IRequestHandler) line: 534	
			Url mappedUrl = mapUrlFor(handler);
/s
RequestCycle.mapUrlFor(IRequestHandler) line: 434	
		final Url url = requestMapper.mapHandler(handler);
/s
SystemMapper(CompoundRequestMapper).mapHandler(IRequestHandler) line: 213	
		for (IRequestMapper mapper : mappers)
		{
			Url url = mapper.mapHandler(handler);
/s

MountedMapper [mountSegments=ajaxlinkstudy]
		Url url = super.mapHandler(requestHandler);
/s
MountedMapper(AbstractBookmarkableMapper).mapHandler(IRequestHandler) line: 396	
/=
	public Url mapHandler(IRequestHandler requestHandler)
requestHandler	BookmarkableListenerInterfaceRequestHandler  (id=8214)	

		else if (requestHandler instanceof BookmarkableListenerInterfaceRequestHandler)
		{
			Integer renderCount = null;
			if (handler.getListenerInterface().isIncludeRenderCount())
			{
				renderCount = handler.getRenderCount();
1
			PageInfo pageInfo = getPageInfo(handler);
pageInfo	PageInfo  (id=8270)	
	pageId	Integer  (id=8192)	
10
			ComponentInfo componentInfo = new ComponentInfo(
				renderCount,
1
				requestListenerInterfaceToString(handler.getListenerInterface()),
IBehaviorListener		/= name 	
				handler.getComponentPath(), 
ajaxLink
				handler.getBehaviorIndex());
0			/= index in list van behaviors	,

//////////////////////////////////////////////////////////////////////
/ Dus	, 
			ComponentInfo componentInfo = new ComponentInfo(
=
1.IBehaviorListener.0-ajaxlink
/ Dat is <render count>.<request handler interface name>.<index in behavior list>-<component id> 

requestHandler	BookmarkableListenerInterfaceRequestHandler  (id=8214)	
	behaviorIndex	Integer  (id=8183)	
0
	listenerInterface	RequestListenerInterface  (id=8053)	
		method	Method  (id=8056)	
public abstract void org.apache.wicket.behavior.IBehaviorListener.onRequest()
		name	"IBehaviorListener" (id=8057)	

			PageParameters parameters = getRecreateMountedPagesAfterExpiry() ? new PageParameters(
				handler.getPage().getPageParameters()).mergeWith(handler.getPageParameters())
				: handler.getPageParameters();
/ GEEN
			UrlInfo urlInfo = new UrlInfo(new PageComponentInfo(pageInfo, componentInfo),
				pageClass, parameters);
			return buildUrl(urlInfo);
/s
MountedMapper.buildUrl(AbstractBookmarkableMapper$UrlInfo) line: 199	
		Url url = new Url();
/ segments=[]	, parameters=[]
		for (String s : mountSegments)
ajaxlinkstudy
		{
			url.getSegments().add(s);

		encodePageComponentInfo(url, info.getPageComponentInfo());
/s
MountedMapper(AbstractComponentMapper).encodePageComponentInfo(Url, PageComponentInfo) line: 98	
			String s = info.toString();
////////////////////////////////////////////////
10-1.IBehaviorListener.0-ajaxlink
/ Dat is <render count>.<request handler interface name>.<index in behavior list>-<component id> 

			if (!Strings.isEmpty(s))
			{
				QueryParameter parameter = new QueryParameter(s, "");
parameter	Url$QueryParameter  (id=7432)	
11-1.IBehaviorListener.0-ajaxlink
				url.getQueryParameters().add(parameter);
url	Url  (id=8396)	
	parameters	ArrayList<E>  (id=8401)	
[10-1.IBehaviorListener.0-ajaxlink]
	segments	ArrayList<E>  (id=8402)	
[ajaxlinkstudy]

/ Dus in Url zijn parameters de query string parameters	,
/t
MountedMapper.buildUrl(AbstractBookmarkableMapper$UrlInfo) line: 205	
		encodePageComponentInfo(url, info.getPageComponentInfo());
/d
		PageParameters copy = new PageParameters(info.getPageParameters());
/ Leeg	, 
/ ant info.getPageParameters()=null	,
		if (setPlaceholders(copy, url) == false)
/s
	/**
	 * Replaces mandatory and optional parameters with their values.
	 *
	 * If a mandatory parameter is not provided then the method returns {@code false}
	 * indicating that there is a problem.
	 * Optional parameters with missing values are just dropped.
	 *
	 * @param parameters
	 *          The parameters with the values
	 * @param url
	 *          The url with the placeholders
	 * @return
	 *          {@code true} if all mandatory parameters are properly substituted,
	 *          {@code false} - otherwise
	 */
MountedMapper(AbstractBookmarkableMapper).setPlaceholders(PageParameters, Url) line: 756	
/=
	protected boolean setPlaceholders(PageParameters parameters, Url url)
/ TODO
/t
MountedMapper.buildUrl(AbstractBookmarkableMapper$UrlInfo) line: 212	

		return encodePageParameters(url, copy, pageParametersEncoder);
url=
ajaxlinkstudy?11-1.IBehaviorListener.0-ajaxlink
copy=
<leeg>
/s
MountedMapper(AbstractMapper).encodePageParameters(Url, PageParameters, IPageParametersEncoder) line: 208	
		Url parametersUrl = encoder.encodePageParameters(pageParameters);
parameters=[], segments=[]
/ Leeg dus	,

		if (parametersUrl != null)
/ JA
/ Maar wel leeg, 	
		{
			// copy the url
			url = new Url(url);
ajaxlinkstudy?10-1.IBehaviorListener.0-ajaxlink

			for (String s : parametersUrl.getSegments())
/ NEE
			{
				url.getSegments().add(s);
/ NIET
			}
			for (QueryParameter p : parametersUrl.getQueryParameters())
/ NEE
			{
				url.getQueryParameters().add(p);
/ NIET
			}
		}
		return url;
/t
MountedMapper.mapHandler(IRequestHandler) line: 161	
		Url url = super.mapHandler(requestHandler);
/d
requestHandler=org.apache.wicket.core.request.handler.BookmarkableListenerInterfaceRequestHandler@4c12f050
url=
ajaxlinkstudy?10-1.IBehaviorListener.0-ajaxlink

		return url;
/t
SystemMapper(CompoundRequestMapper).mapHandler(IRequestHandler) line: 216	
		for (IRequestMapper mapper : mappers)
		{
			Url url = mapper.mapHandler(handler);
/d
			if (url != null)
			{
				return url;
/t
RequestCycle.mapUrlFor(IRequestHandler) line: 435	
		final Url url = requestMapper.mapHandler(handler);
/d
		listeners.onUrlMapped(this, handler, url);
		return url;
/t
RequestCycle.urlFor(IRequestHandler) line: 535	
			Url mappedUrl = mapUrlFor(handler);
/d
ajaxlinkstudy?11-1.IBehaviorListener.0-ajaxlink

			CharSequence url = renderUrl(mappedUrl, handler);
/s
RequestCycle.renderUrl(Url, IRequestHandler) line: 548	
            String renderedUrl = getUrlRenderer().renderUrl(url);
/s
UrlRenderer.renderUrl(Url) line: 100
        if (shouldRenderAsFull(url))
/s
renderer.shouldRenderAsFull(Url) line: 380
/=
	protected boolean shouldRenderAsFull(final Url url)
		Url clientUrl = request.getClientUrl();
ajaxlinkstudy
		if (url.isContextAbsolute())
/ NEE
/ want	,
/s
	/**
	 * Returns whether the Url is context absolute. Absolute Urls start with a '{@literal /}'.
	 *
Url.isContextAbsolute() line: 492	
		return !isFull() && 
!false=true	, /= getHost()!=null
			!getSegments().isEmpty() && 
true
			Strings.isEmpty(getSegments().get(0));
false
/ TODO
/t
UrlRenderer.shouldRenderAsFull(Url) line: 380	
		if (url.isContextAbsolute())
/ NEE
		return false;
/t
UrlRenderer.renderUrl(Url) line: 118	
		if (shouldRenderAsFull(url))
/ NEE
		else
		{
			renderedUrl = renderRelativeUrl(url);
/ TODO
url=
ajaxlinkstudy?11-1.IBehaviorListener.0-ajaxlink
renderedUrl=
./ajaxlinkstudy?11-1.IBehaviorListener.0-ajaxlink
		return renderedUrl;
/t
RequestCycle.renderUrl(Url, IRequestHandler) line: 554	
			String renderedUrl = getUrlRenderer().renderUrl(url);
/d
./ajaxlinkstudy?11-1.IBehaviorListener.0-ajaxlink

			else
			{
				renderedUrl = getOriginalResponse().encodeURL(renderedUrl);
/ TODO
./ajaxlinkstudy?11-1.IBehaviorListener.0-ajaxlink
			return renderedUrl;
/t
RequestCycle.urlFor(IRequestHandler) line: 536	
			CharSequence url = renderUrl(mappedUrl, handler);
/d
./ajaxlinkstudy?11-1.IBehaviorListener.0-ajaxlink

			return url;
/t
AjaxLinkStudyPage$1(Component).urlFor(Behavior, RequestListenerInterface, PageParameters) line: 3349	
		return getRequestCycle().urlFor(handler);
/d
/t
AjaxLink$1(AbstractAjaxBehavior).getCallbackUrl() line: 88	
		final RequestListenerInterface rli;

		rli = IBehaviorListener.INTERFACE;

		return getComponent().urlFor(this, rli, new PageParameters());
/d
AjaxLink$1(AbstractDefaultAjaxBehavior).renderAjaxAttributes(Component, AjaxRequestAttributes) line: 201	
			attributesJson.put(AjaxAttributeName.URL.jsonName(), getCallbackUrl());
/d
{"u":"./ajaxlinkstudy?11-1.IBehaviorListener.0-ajaxlink"}

/ AAJXEVENTBEHAVIOR -> HEADER
Wicket.Event.add(window, "domready", function(event) { 
	Wicket.Ajax.ajax({"u":"./ajaxlinkstudy?9-4.IBehaviorListener.0-ajaxlink","c":"ajaxlink19","e":"click"});;
;});
/ we zijn in	,
/ stack trace	,
	AjaxLink$1(AbstractDefaultAjaxBehavior).renderAjaxAttributes(Component, AjaxRequestAttributes) line: 202	
	AjaxLink$1(AbstractDefaultAjaxBehavior).renderAjaxAttributes(Component) line: 185	
	AjaxLink$1(AbstractDefaultAjaxBehavior).getCallbackScript(Component) line: 465	
	AjaxLink$1(AjaxEventBehavior).renderHead(Component, IHeaderResponse) line: 94	
			CharSequence js = getCallbackScript(component);

	AjaxLinkStudyPage$1(Component).internalRenderHead(HtmlHeaderContainer) line: 2727	
			// Then ask all behaviors
			for (Behavior behavior : getBehaviors())
				...
->						behavior.renderHead(this, response);

	ChildFirstHeaderRenderStrategy$1.component(Component, IVisit<Void>) line: 85	
						component.internalRenderHead(headerContainer);
[AjaxLink [Component id = ajaxlink]]

	ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component, Visit<Void>) line: 96	
	ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component, Visit<Void>) line: 87	
	ChildFirstHeaderRenderStrategy$1(DeepChildFirstVisitor).visit(Component) line: 51	
	ChildFirstHeaderRenderStrategy.renderChildHeaders(HtmlHeaderContainer, Component) line: 78	
	ChildFirstHeaderRenderStrategy.renderHeader(HtmlHeaderContainer, HtmlHeaderContainer$HeaderStreamState, Component) line: 57	
		// Then its child hierarchy
		renderChildHeaders(headerContainer, rootComponent);

	HtmlHeaderContainer.onComponentTagBody(MarkupStream, ComponentTag) line: 171	
			// Render the header sections of all components on the page
			AbstractHeaderRenderStrategy.get().renderHeader(this,
				new HeaderStreamState(markupStream, openTag), getPage());

	DefaultMarkupSourcingStrategy.onComponentTagBody(Component, MarkupStream, ComponentTag) line: 70	
	HtmlHeaderContainer(Component).internalRenderComponent() line: 2565	
				getMarkupSourcingStrategy().onComponentTagBody(this, markupStream, tag);

	HtmlHeaderContainer(MarkupContainer).onRender() line: 1698	
	HtmlHeaderContainer(Component).internalRender() line: 2380	
	HtmlHeaderContainer(Component).render() line: 2308	
	AjaxLinkStudyPage(MarkupContainer).renderNext(MarkupStream) line: 1524	
	AjaxLinkStudyPage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	AjaxLinkStudyPage(Page).onRender() line: 879	
	AjaxLinkStudyPage(WebPage).onRender() line: 141	
	AjaxLinkStudyPage(Component).internalRender() line: 2380	
	AjaxLinkStudyPage(Component).render() line: 2308	
	AjaxLinkStudyPage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

			Method method = attributes.getMethod();
method	AjaxRequestAttributes$Method  (id=7158)	
GET
/=
	public enum Method
	{
		/** get */
		GET,

		/** post */
		POST;

			if (component instanceof Page == false)
/ JA
[AjaxLink [Component id = ajaxlink]]
			{
				String componentId = component.getMarkupId();
ajaxlink22
				attributesJson.put(AjaxAttributeName.MARKUP_ID.jsonName(), componentId);
attributesJson	JSONObject  (id=7144)	
{"u":"./ajaxlinkstudy?12-1.IBehaviorListener.0-ajaxlink","c":"ajaxlink22"}

			String formId = attributes.getFormId();
null
			if (attributes.isMultipart())
/ NEE
			String submittingComponentId = attributes.getSubmittingComponentName();
null
			CharSequence childSelector = attributes.getChildSelector();
null
			if (attributes.isSerializeRecursively())
/ NEE
			String indicatorId = findIndicatorId();
null
			for (IAjaxCallListener ajaxCallListener : attributes.getAjaxCallListeners())
/ GEEN
			JSONArray extraParameters = JsonUtils.asArray(attributes.getExtraParameters());
[]
			List<CharSequence> dynamicExtraParameters = attributes.getDynamicExtraParameters();
[]
			if (dynamicExtraParameters != null)
			{
				for (CharSequence dynamicExtraParameter : dynamicExtraParameters)
/ GEEN
			if (attributes.isAsynchronous() == false)
/ NEE
			String[] eventNames = attributes.getEventNames();
			if (eventNames.length == 1)
			{
				attributesJson.put(AjaxAttributeName.EVENT_NAME.jsonName(), eventNames[0]);
{"u":"./ajaxlinkstudy?12-1.IBehaviorListener.0-ajaxlink","c":"ajaxlink22","e":"click"}

			AjaxChannel channel = attributes.getChannel();
			if (channel != null && channel.equals(AjaxChannel.DEFAULT) == false)
/ NEE
			if (attributes.isPreventDefault())
/ NEE
			if (AjaxRequestAttributes.EventPropagation.STOP
				.equals(attributes.getEventPropagation()))
/ NEE
			else if (AjaxRequestAttributes.EventPropagation.STOP_IMMEDIATE.equals(attributes
/ NEE
			Duration requestTimeout = attributes.getRequestTimeout();
null
			boolean wicketAjaxResponse = attributes.isWicketAjaxResponse();
true
			String dataType = attributes.getDataType();
xml
			ThrottlingSettings throttlingSettings = attributes.getThrottlingSettings();
null
			postprocessConfiguration(attributesJson, component);
/ TODO
		String attributesAsJson = attributesJson.toString();
{"u":"./ajaxlinkstudy?12-1.IBehaviorListener.0-ajaxlink","c":"ajaxlink22","e":"click"}
		return attributesAsJson;
/t
AjaxLink$1(AbstractDefaultAjaxBehavior).getCallbackScript(Component) line: 466	
		CharSequence ajaxAttributes = renderAjaxAttributes(component);
/d
{"u":"./ajaxlinkstudy?12-1.IBehaviorListener.0-ajaxlink","c":"ajaxlink22","e":"click"}
		return "Wicket.Ajax.ajax(" + ajaxAttributes + ");";
/t
AjaxLink$1(AjaxEventBehavior).renderHead(Component, IHeaderResponse) line: 96	
		if (component.isEnabledInHierarchy())
[AjaxLink [Component id = ajaxlink]]
		{
			CharSequence js = getCallbackScript(component);
Wicket.Ajax.ajax({"u":"./ajaxlinkstudy?12-1.IBehaviorListener.0-ajaxlink","c":"ajaxlink22","e":"click"});

			response.render(OnDomReadyHeaderItem.forScript(js.toString()));

/ Intermezzo

/ Wat we maken hier is dat op de page in <head/> staat	,
<script type="text/javascript">
/*<![CDATA[*/
	Wicket.Event.add(window, "domready", function(event) { 
		Wicket.Ajax.ajax({"u":"./ajaxlinkstudy?9-4.IBehaviorListener.0-ajaxlink","c":"ajaxlink19","e":"click"});;
		Wicket.Event.publish(Wicket.Event.Topic.AJAX_HANDLERS_BOUND);
	;});
/*]]>*/
</script>

/ Einde Intermezzo

/s
OnDomReadyHeaderItem.forScript(CharSequence) line: 47	
/=
/**
 * {@link HeaderItem} for scripts that need to be executed directly after the DOM has been built,
 * but before external resources, such as images, are loaded.
 * 
 * @author papegaaij
 */
public class OnDomReadyHeaderItem extends HeaderItem
	/**
	 * Creates a {@link OnDomReadyHeaderItem} for the script.
	 * 
	public static OnDomReadyHeaderItem forScript(CharSequence javaScript)
	{
		return new OnDomReadyHeaderItem(javaScript);
/s
OnDomReadyHeaderItem.<init>(CharSequence) line: 69	
		this.javaScript = javaScript;
Wicket.Ajax.ajax({"u":"./ajaxlinkstudy?12-1.IBehaviorListener.0-ajaxlink","c":"ajaxlink22","e":"click"});
/t
AjaxLink$1(AjaxEventBehavior).renderHead(Component, IHeaderResponse) line: 96	
			response.render(OnDomReadyHeaderItem.forScript(js.toString()));
/pd
/s
ResourceAggregator.render(HeaderItem) line: 258	
		if (item instanceof OnDomReadyHeaderItem || item instanceof OnEventHeaderItem)
		{
			renderDependencies(item, new LinkedHashSet<HeaderItem>());
/s
ResourceAggregator.renderDependencies(HeaderItem, Set<HeaderItem>) line: 242	
		for (HeaderItem curDependency : item.getDependencies())
 item.getDependencies()=
[JavaScriptReferenceHeaderItem(scope: org.apache.wicket.ajax.AbstractDefaultAjaxBehavior; name: res/js/wicket-event-jquery.js; locale: null; style: null; variation: null, null)]

			curDependency = getItemToBeRendered(curDependency);
/ NIETS
			if (depsDone.add(curDependency))
			{
				recordHeaderItem(curDependency, depsDone);
/s
ResourceAggregator.recordHeaderItem(HeaderItem, Set<HeaderItem>) line: 226	
		renderDependencies(item, depsDone);

/ TODO (Afmaken)
/c

/t
AjaxLinkStudyPage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1746	
/ volgende,	
		while (markupStream.hasMore())
			// Render the markup element
			boolean rawMarkup = renderNext(markupStream);
/s
AjaxLinkStudyPage(MarkupContainer).renderNext(MarkupStream) line: 1545	

		// If it's a tag like <wicket..> or <span wicket:id="..." >
		if ((element instanceof ComponentTag) && !markupStream.atCloseTag())
/ NEE
element	RawMarkup  (id=7248)	
<body>
		else
		{
			// Render as raw markup
			if (canRenderRawTag(element))
			{
				getResponse().write(element.toCharSequence());
			}
			return true;
/t
AjaxLinkStudyPage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1767	
			// Render the markup element
			boolean rawMarkup = renderNext(markupStream);
/d
			if (rawMarkup)
			{
				markupStream.next();
/ volgende	,
		while (markupStream.hasMore())
			// Render the markup element
			boolean rawMarkup = renderNext(markupStream);
/s
AjaxLinkStudyPage(MarkupContainer).renderNext(MarkupStream) line: 1498	
		// Get the current markup element
		final MarkupElement element = markupStream.get();
<a wicket:id="ajaxlink">
			// Get element as tag
			final ComponentTag tag = (ComponentTag)element;

			// Get component id
			final String id = tag.getId();

			// Get the component for the id from the given container
			Component component = get(id);
/s
AjaxLinkStudyPage(MarkupContainer).get(String) line: 383	

/ we hebben de markup <a wicket:id="ajaxLink">,	 eerder is daar al een ComponentTag create (TODO)	, nu gaan we op zoek naar de Component in de Page 	,

		// Get child by id
		Component child = container.children_get(id); 
child	AjaxLinkStudyPage$1  (id=7308)	
[AjaxLink [Component id = ajaxlink]]

/t
AjaxLinkStudyPage(MarkupContainer).renderNext(MarkupStream) line: 1524	
			Component component = get(id);
/d
				component.render();
/s
AjaxLinkStudyPage$1(Component).render() line: 2296	
			// Do the render
			internalRender();
/s
AjaxLinkStudyPage$1(Component).internalRender() line: 2345	

		IMarkupFragment markup = getMarkup();
markup	MarkupFragment  (id=7316)	
<a wicket:id="ajaxlink">[Ajax Link]</a>

/ Intermezzo

/ MarkupFragment is niets meer dan Markup + index van element daarin	,
/ Markup ={ RawMarkup, ComponentTag}

/ Einde Intermezzo

				onRender();
/s
AjaxLinkStudyPage$1(Component).internalRender() line: 2380	
		internalRenderComponent();
/s
	/**
	 * THIS METHOD IS NOT PART OF THE WICKET PUBLIC API. DO NOT USE IT.
	 * <p>
	 * Renders the component at the current position in the given markup stream. The method
	 * onComponentTag() is called to allow the component to mutate the start tag. The method
	 * onComponentTagBody() is then called to permit the component to render its body.
	 */
AjaxLinkStudyPage$1(Component).internalRenderComponent() line: 2508	

/ Intermezzo

WebPage.onRender is niet zoals MarkupContainer.onRender	,

/ stack
	AjaxLinkStudyPage$1(Component).internalRenderComponent() line: 2508	
	AjaxLinkStudyPage$1(MarkupContainer).onRender() line: 1698	
	AjaxLinkStudyPage$1(Component).internalRender() line: 2380	
	AjaxLinkStudyPage$1(Component).render() line: 2308	
	AjaxLinkStudyPage(MarkupContainer).renderNext(MarkupStream) line: 1524	
	AjaxLinkStudyPage(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1759	
	AjaxLinkStudyPage(Page).onRender() line: 879	
	AjaxLinkStudyPage(WebPage).onRender() line: 141	
	AjaxLinkStudyPage(Component).internalRender() line: 2380	
	AjaxLinkStudyPage(Component).render() line: 2308	
	AjaxLinkStudyPage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	


/ Einde Intermezzo

		// Get mutable copy of next tag
		final ComponentTag openTag = markupStream.getTag();
		final ComponentTag tag = openTag.mutable();
/ TODO
		// Call any tag handler
		onComponentTag(tag);
////////////////////////////////////
/ Verander ComponentTag

/s
AjaxLinkStudyPage$1(AjaxLink<T>).onComponentTag(ComponentTag) line: 103	
		super.onComponentTag(tag);
/ wicketpath is set	,
		if (isEnabledInHierarchy())
		{
			String tagName = tag.getName();
			
			if (tagName.equalsIgnoreCase("a") || tagName.equalsIgnoreCase("link") ||
				tagName.equalsIgnoreCase("area"))
			{
/ JA
				// disable any href attr in markup
				tag.put("href", "javascript:;");
/t
AjaxLinkStudyPage$1(Component).internalRenderComponent() line: 2524	
		// Call any tag handler
		onComponentTag(tag);
/d
tag	ComponentTag  (id=7366)	
	autoComponentFactory	null	
	behaviors	null					<-
	flags	2	
	id	"ajaxlink" (id=7281)	
	markupClassRef	null	
	openTag	null	
	userData	null	
	xmlTag	XmlTag  (id=7374)	
		attributes	ValueMap  (id=7389)	
wicket:id = "ajaxlink" id = "ajaxlink28" wicketpath = "ajaxlink" href = "javascript:;"
		closes	null	
		copyOf	XmlTag  (id=7288)	
		httpTagType	null	
		isMutable	true	
		name	"a" (id=7295)	
		namespace	null	
		text	null	
		type	XmlTag$TagType  (id=7298)	
OPEN
/ onComponentTag heeft href attr add	,

			else
			{
				renderComponentTag(tag);
/s
AjaxLinkStudyPage$1(Component).renderComponentTag(ComponentTag) line: 3982	
		if (needToRenderTag(tag))
		{
			// apply behaviors that are attached to the component tag.
			if (tag.hasBehaviors())
/ NEE
			// Apply behavior modifiers
			List<? extends Behavior> behaviors = getBehaviors();
/s
AjaxLinkStudyPage$1(Component).getBehaviors() line: 4571	
		return getBehaviors(null);
/s
AjaxLinkStudyPage$1(Component).getBehaviors(Class<M>) line: 3695	
		return new Behaviors(this).getBehaviors(type);
/s
Behaviors.getBehaviors(Class<M>) line: 88	
/=
	public <M extends Behavior> List<M> getBehaviors(Class<M> type)
type=null
		for (int i = component.data_start(); i < len; i++)
		{
			Object obj = component.data_get(i);
obj	AjaxLink$1  (id=7404)	

/ Intermezzo

this	AjaxLinkStudyPage$1  (id=7308)	/ new AjaxLink<Void>("ajaxLink"){...}	
	data	Object[2]  (id=7310)	/ Met .add added	,	
		[0]	AjaxLink$1  (id=7404)	/ new AjaxEventBehavior(event){...}	
		[1]	Behaviors$BehaviorIdList  (id=7405)	/ TODO	

$ vi AjaxLink

	@Override
	protected void onInitialize()
	{
		super.onInitialize();
		add(newAjaxEventBehavior("click"));
	}
	protected AjaxEventBehavior newAjaxEventBehavior(String event)
	{
		return new AjaxEventBehavior(event)
			...

/ Einde Intermezzo

			if (obj != null && obj instanceof Behavior)
/ JA
/ TODO
				if (type == null || type.isAssignableFrom(obj.getClass()))
				{
/ JA
					subset.add((M)obj);
/ volgende	,
		for (int i = component.data_start(); i < len; i++)
		{
			Object obj = component.data_get(i);
obj	Behaviors$BehaviorIdList  (id=7405)	
			if (obj != null && obj instanceof Behavior)
/ NEE
		return Collections.unmodifiableList(subset);
/t
AjaxLinkStudyPage$1(Component).renderComponentTag(ComponentTag) line: 4001	
			// Apply behavior modifiers
			List<? extends Behavior> behaviors = getBehaviors();
/d
[org.apache.wicket.ajax.markup.html.AjaxLink$1@4c45536a]
				tag = tag.mutable();
				for (Behavior behavior : behaviors)
				{
					// Components may reject some behavior components
					if (isBehaviorAccepted(behavior))
					{
						behavior.onComponentTag(this, tag);
/s
AjaxLink$1(AbstractAjaxBehavior).onComponentTag(Component, ComponentTag) line: 98	
		onComponentTag(tag);
/ DOET NIETS	,
/t
AjaxLinkStudyPage$1(Component).renderComponentTag(ComponentTag) line: 4015	
/ volgende	,
				for (Behavior behavior : behaviors)
/ GEEN	,
			// Write the tag
			tag.writeOutput(getResponse(), !needToRenderTag(null),
				getMarkup().getMarkupResourceStream().getWicketNamespace());
/s
ComponentTag.writeOutput(Response, boolean, String) line: 720	
...
response=
		<a wicket:id="ajaxlink" id="ajaxlink28" wicketpath="ajaxlink" href="javascript:;">

/t
AjaxLinkStudyPage$1(Component).internalRenderComponent() line: 2558	
			else
			{
				renderComponentTag(tag);
/d
			markupStream.next();

			// Render the body only if open-body-close. Do not render if open-close.
			if (tag.isOpen())
			{
				// Render the body. The default strategy will simply call the component's
				// onComponentTagBody() implementation.
				getMarkupSourcingStrategy().onComponentTagBody(this, markupStream, tag);
/s
AjaxLinkStudyPage$1(MarkupContainer).onComponentTagBody(MarkupStream, ComponentTag) line: 1657	
		renderComponentTagBody(markupStream, openTag);
/s
AjaxLinkStudyPage$1(MarkupContainer).renderComponentTagBody(MarkupStream, ComponentTag) line: 1734	
			renderAll(markupStream, openTag);
/s
AjaxLinkStudyPage$1(MarkupContainer).renderAll(MarkupStream, ComponentTag) line: 1750	
this	AjaxLinkStudyPage$1  (id=7308)	
/ Writes [AjaxLink] in response	,

/t
AjaxLinkStudyPage$1(Component).internalRenderComponent() line: 2568	
				getMarkupSourcingStrategy().onComponentTagBody(this, markupStream, tag);
/d
				// Render close tag
				if (openTag.isOpen())
				{
					renderClosingComponentTag(markupStream, tag, getRenderBodyOnly());
/ TODO
/t
AjaxLinkStudyPage$1(Component).internalRender() line: 2381	
				onRender();
/d
/ TODO (Afmaken)

/ 7	. 

/c
/ we vallen in JS	,
<script type="text/javascript" >
/*<![CDATA[*/
->	Wicket.Event.add(window, "domready", function(event) { 
		Wicket.Ajax.ajax({"u":"./ajaxlinkstudy?15-1.IBehaviorListener.0-ajaxlink","c":"ajaxlink2b","e":"click"});;
/s
jQuery.extend.Event.add (wicket-event-jq…3568000.js:205)
/=
			add: function (element, type, fn, data, selector) {
type="domready"
/ fn=anon. fct function(event){
				if (type === 'domready') 
					jQuery(fn);
/ Dus de anon. fct wordt exec als DOMContentLoaded event wordt exec,
/ Maar dit is even later	,
/c
<script type="text/javascript" >
/*<![CDATA[*/
	Wicket.Event.add(window, "domready", function(event) { 
->		Wicket.Ajax.ajax({"u":"./ajaxlinkstudy?15-1.IBehaviorListener.0-ajaxlink","c":"ajaxlink2b","e":"click"});;

/ Intermezzo

(anonymous function) (ajaxlinkstudy?17:23)
	Wicket.Ajax.ajax({"u":"./ajaxlinkstudy?17-1.IBehaviorListener.0-ajaxlink","c":"ajaxlink31","e":"click"});;

jQuery.Callbacks.fire (jquery-2.2.0-ve…568000.js:3182)
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&

jQuery.Callbacks.self.fireWith (jquery-2.2.0-ve…568000.js:3312)
						fire();

jQuery.extend.ready (jquery-2.2.0-ve…568000.js:3531)
		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

completed (jquery-2.2.0-ve…568000.js:3547)
	jQuery.ready();

/ Einde Intermezzo
/s
jQuery.extend.Ajax.ajax (wicket-ajax-jqu…568000.js:1951)
/=
			ajax: function(attrs) {
attrs: Object
	c: "ajaxlink2b"
	e: "click"
	u: "./ajaxlinkstudy?15-1.IBehaviorListener.0-ajaxlink"
	__proto__: Obje

				if (!jQuery.isArray(attrs.e)) {
					attrs.e = [ attrs.e ];
				}
				jQuery.each(attrs.e, function (idx, evt) {
->					Wicket.Event.add(attrs.c, evt, function (jqEvent, data) {
						...
/s
jQuery.extend.Event.add (wicket-event-jq…3568000.js:207)
/=
			add: function (element, type, fn, data, selector) {
type="click"
				} else {
					var el = element;
"ajaxLink2b"
					if (typeof(element) === 'string') {
						el = document.getElementById(element);
a#ajaxLin2b
/ DOM elem	,
					jQuery(el).on(type, selector, data, fn);
type="click"
fn= 			jQuery.each(attrs.e, function (idx, evt) {			
					Wicket.Event.add(attrs.c, evt, function (jqEvent, data) {		<- deze anon. fct	, in deze Wicket.Event.add
																		/  zitten we nu in	, attrs=c='ajaxLink2b', evt='click'
						var call = new Wicket.Ajax.Call();
						var attributes = jQuery.extend({}, attrs);
attrs: Object
	c: "ajaxlink31"
	e: Array[1]
		'click'
	u: "./ajaxlinkstudy?17-1.IBehaviorListener.0-ajaxlink"
/ De anon. fct is een closure, sluit deze attrs in 	, ihb attrs.u	,











/ See AJXEVENTBEHAVIOR -> HEADER

/ Einde DEBUG WICKET GET PAGE WITH AJAX LINK

/ DEBUG WICKET CLICK AJAX LINK

/ CLIENT SIDE

/ we click de link	, 
/ stack trace	,
/s
(anonymous function) (wicket-ajax-jqu…568000.js:1957)
/=
					Wicket.Event.add(attrs.c, evt, function (jqEvent, data) {
->						var call = new Wicket.Ajax.Call();

jQuery.event.dispatch (jquery-2.2.0-ve…568000.js:4732)
						handleObj.handler ).apply( matched.elem, args );

jQuery.event.add.elemData.handle (jquery-2.2.0-ve…568000.js:4544)
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
/ TODO

/ debug	,
/s
						var call = new Wicket.Ajax.Call();
call: Wicket.Class.create
__proto__: Object
...
ajax: function (attrs) {
doAjax: function (attrs) {
						var attributes = jQuery.extend({}, attrs);
attrs: Object
	c: "ajaxlink31"
	e: Array[1]
		'click'
	u: "./ajaxlinkstudy?17-1.IBehaviorListener.0-ajaxlink"

						call._executeHandlers(attributes.ih, attributes);
/ NIETS	, 
/ attributes.in=undefined

						else {
							call.ajax(attributes);
/s
		ajax: function (attrs) {
			this._initializeDefaults(attrs);
attrs: Object
async: true
c: "ajaxlink31"
ch: "0|s"
dt: "xml"
e: Array[1]
	0: "click"
	length: 1
	__proto__: Array[0]
event: jQuery.Event
m: "GET"
pd: false
rt: 0
sp: "bubble"
sr: false
u: "./ajaxlinkstudy?17-1.IBehaviorListener.0-ajaxlink"
wr: true
__proto__: Object

			var res = Wicket.channelManager.schedule(attrs.ch, Wicket.bind(function () {
				this.doAjax(attrs);
			}, this));
/s
		// Schedules the callback to channel with given name.
		schedule: function (channel, callback) {
			var parsed = new Wicket.Channel(channel);
channel='0|s'

/ Intermezzo

	Wicket.Class = {
		create: function () {
			return function () {
				this.initialize.apply(this, arguments);

	Wicket.Channel = Wicket.Class.create();

	Wicket.Channel.prototype = {
		initialize: function (name) {
			name = name || '0|s';
			...

/ Einde Intermezzo

			else {
				this.name = res[1];
'0'
				this.type = res[2];
's'
			var c = this.channels[parsed.name];
			if (isUndef(c)) {
				c = parsed;
				this.channels[c.name] = c;
c: Wicket.Class.create
busy: false
callbacks: Array[0]
name: "0"
type: "s"
__proto__: Object

			return c.schedule(callback);
/s
		schedule: function (callback) {
			if (this.busy === false) {
				this.busy = true;
				try {
					return callback();
/s
		ajax: function (attrs) {
			var res = Wicket.channelManager.schedule(attrs.ch, Wicket.bind(function () {
->				this.doAjax(attrs);
			}, this));
/s
		doAjax: function (attrs) {
			var
				// the headers to use for each Ajax request
				headers = {
					'Wicket-Ajax': 'true',
					'Wicket-Ajax-BaseURL': getAjaxBaseUrl()
				},
/s
	getAjaxBaseUrl = function () {
		var baseUrl = Wicket.Ajax.baseUrl || '.';
		return baseUrl;
	};
Wicket.Ajax={
Call: function () {
DebugWindow: Object
_handleEventCancelation: function (attrs) {
ajax: function (attrs) {
baseUrl: "ajaxlinkstudy?17"					/ TODO
get: function (attrs) {
post: function (attrs) {
process: function (data) {
redirect: function (url) {
__proto__: Object
}

headers: Object
	Wicket-Ajax: "true"
	Wicket-Ajax-BaseURL: "ajaxlinkstudy?17"

			} else if (attrs.c && !jQuery.isWindow(attrs.c)) {
				// serialize just the form component with id == attrs.c
				var el = Wicket.$(attrs.c);
				data = data.concat(Wicket.Form.serializeElement(el, attrs.sr));
			}
[]
/ TODO
			// convert to URL encoded string
			data = jQuery.param(data);
""
/ TODO
			// execute the request
			var jqXHR = jQuery.ajax({
				url: attrs.u,
"./ajaxlinkstudy?17-1.IBehaviorListener.0-ajaxlink"


/ Einde CLIENT SIDE

/ SERVER SIDE

/ we hebben maar 1 mount gedaan	, alleen ajaxLinkStudy	,

/s
RequestCycle.processRequest() line: 219	
			IRequestHandler handler = resolveRequestHandler();
/s
RequestCycle.resolveRequestHandler() line: 189	
		return requestMapper.mapRequest(request);
/s
SystemMapper(CompoundRequestMapper).mapRequest(Request) line: 132	
		for (IRequestMapper mapper : mappers)
this	SystemMapper  (id=8313)	
	mappers	CopyOnWriteArrayList<E>  (id=8320)	
		array	Object[8]  (id=8325)	
			[0]	MountedMapper  (id=8328)				/ MountedMapper [mountSegments=ajaxlinkstudy]	
			[1]	BufferedResponseMapper  (id=8330)	
			[2]	RestartResponseAtInterceptPageException$1  (id=8331)	
			[3]	UrlResourceReferenceMapper  (id=8334)	
			[4]	ResourceReferenceMapper  (id=8335)	
			[5]	HomePageMapper  (id=8336)	
			[6]	BookmarkableMapper  (id=8337)	
			[7]	PageInstanceMapper  (id=8338)	
/ TODO
		for (MapperWithScore mapperWithScore : list)
		{
			IRequestMapper mapper = mapperWithScore.getMapper();
MountedMapper [mountSegments=ajaxlinkstudy]
			IRequestHandler handler = mapper.mapRequest(request);
/s
MountedMapper(AbstractBookmarkableMapper).mapRequest(Request) line: 346	
		UrlInfo urlInfo = parseRequest(request);
/s
MountedMapper.parseRequest(Request) line: 126	
		Url url = request.getUrl();
ajaxlinkstudy?0-1.IBehaviorListener.0-ajaxlink&_=1467010989701

		// check if the URL starts with the proper segments
		else if (urlStartsWithMountedSegments(url))
/s
MountedMapper(AbstractBookmarkableMapper).urlStartsWithMountedSegments(Url) line: 802	
		else
		{
			return getMatchedSegmentSizes(url) != null;
/s
MountedMapper(AbstractBookmarkableMapper).getMatchedSegmentSizes(Url) line: 661	
this
	pathSegemnts= [(0) 0-0 ajaxlinkstudy, (1) 0-0 (end)]		/ Deze komt WH uit de mount , in Application	,

				if (segmentsMatch(url.getSegments()				/ vergl. de segment uit de url , met die uit de mount, 	 
						.get(segmentIndex + count), curPathSegment.getFixedPart()))
				{
					foundFixedPart = true;
					segmentIndex += count + 1;
					ret[pathSegmentIndex] = count + curPathSegment.getMinParameters() + 1;
ret=[1,0]
/ TODO
					break;
				}
		return ret;
/t
MountedMapper.parseRequest(Request) line: 139	
		else if (urlStartsWithMountedSegments(url))
/ JA
		{
			// try to extract page and component information from URL
			PageComponentInfo info = getPageComponentInfo(url);
url=
ajaxlinkstudy?0-1.IBehaviorListener.0-ajaxlink&_=1467010989701
info	PageComponentInfo  (id=9008)	
	componentInfo	ComponentInfo  (id=9005)	
		behaviorId	Integer  (id=8985)	
0
		componentPath	"ajaxlink" (id=9010)	
		listenerInterface	"IBehaviorListener" (id=9011)	
		renderCount	Integer  (id=8988)	
1
	pageInfo	PageInfo  (id=9003)	
		pageId	Integer  (id=8985)	
0
			Class<? extends IRequestablePage> pageClass = getPageClass();
class my.test.own.AjaxLinkStudyPage
			PageParameters pageParameters = extractPageParameters(request, url);
_=[1467010989701]
/ TODO
			return new UrlInfo(info, pageClass, pageParameters);
/t
MountedMapper(AbstractBookmarkableMapper).mapRequest(Request) line: 348	
		UrlInfo urlInfo = parseRequest(request);
/d
		if (urlInfo != null)
		{
			PageComponentInfo info = urlInfo.getPageComponentInfo();
info	PageComponentInfo  (id=9008)	
	componentInfo	ComponentInfo  (id=9005)	
		behaviorId	Integer  (id=8985)	
0
		componentPath	"ajaxlink" (id=9010)	
		listenerInterface	"IBehaviorListener" (id=9011)	
		renderCount	Integer  (id=8988)	
1
	pageInfo	PageInfo  (id=9003)	
		pageId	Integer  (id=8985)	
0
			Class<? extends IRequestablePage> pageClass = urlInfo.getPageClass();
			PageParameters pageParameters = urlInfo.getPageParameters();

			else if (info.getComponentInfo() != null)
/ Hoe ging dat bij GET page	?
/ TODO 
			{
				// with both page instance and component+listener this is a listener interface URL
				return processListener(info, pageClass, pageParameters);
/s
MountedMapper(AbstractBookmarkableMapper).processListener(PageComponentInfo, Class<IRequestablePage>, PageParameters) line: 300	
		PageInfo pageInfo = pageComponentInfo.getPageInfo();
		ComponentInfo componentInfo = pageComponentInfo.getComponentInfo();
		if (componentInfo != null)
		{
			renderCount = componentInfo.getRenderCount();
1
			listenerInterface = requestListenerInterfaceFromString(componentInfo.getListenerInterface());
/s
MountedMapper(AbstractComponentMapper).requestListenerInterfaceFromString(String) line: 71	
/=
	protected RequestListenerInterface requestListenerInterfaceFromString(String interfaceName)
interfaceName	"IBehaviorListener" (id=9011)	

		return getContext().requestListenerInterfaceFromString(interfaceName);
/s
DefaultMapperContext.requestListenerInterfaceFromString(String) line: 87	
		return RequestListenerInterface.forName(interfaceName);
/s
RequestListenerInterface.forName(String) line: 59	
		return interfaces.get(interfaceName);
interfaces=
{IFormSubmitListener=[RequestListenerInterface name=IFormSubmitListener, method=public abstract void org.apache.wicket.markup.html.form.IFormSubmitListener.onFormSubmitted()],
 IBehaviorListener=[RequestListenerInterface name=IBehaviorListener, method=public abstract void org.apache.wicket.behavior.IBehaviorListener.onRequest()],
 IOnChangeListener=[RequestListenerInterface name=IOnChangeListener, method=public abstract void org.apache.wicket.markup.html.form.IOnChangeListener.onSelectionChanged()],
 ILinkListener=[RequestListenerInterface name=ILinkListener, method=public abstract void org.apache.wicket.markup.html.link.ILinkListener.onLinkClicked()],
 IResourceListener=[RequestListenerInterface name=IResourceListener, method=public abstract void org.apache.wicket.IResourceListener.onResourceRequested()]
}
/t
MountedMapper(AbstractBookmarkableMapper).processListener(PageComponentInfo, Class<IRequestablePage>, PageParameters) line: 311	
			listenerInterface = requestListenerInterfaceFromString(componentInfo.getListenerInterface());
/d
[RequestListenerInterface name=IBehaviorListener, method=public abstract void org.apache.wicket.behavior.IBehaviorListener.onRequest()]

		if (listenerInterface != null)
[RequestListenerInterface name=IBehaviorListener, method=public abstract void org.apache.wicket.behavior.IBehaviorListener.onRequest()]
		{
			PageAndComponentProvider provider = new PageAndComponentProvider(pageInfo.getPageId(),
				pageClass, pageParameters, renderCount, componentInfo.getComponentPath());
provider	PageAndComponentProvider  (id=9097)	
	serialVersionUID	1	
	component	null	
	componentPath	"ajaxlink" (id=9010)	
	pageClass	Class<T> (my.test.own.AjaxLinkStudyPage) (id=118)	
	pageId	Integer  (id=8985)	
0
	pageInstance	null	
	pageInstanceIsFresh	false	
	pageParameters	null	
	pageSource	null	
	renderCount	Integer  (id=8988)	
1
			provider.setPageSource(getContext());
/ zoiets als Application	,
			return new ListenerInterfaceRequestHandler(provider, listenerInterface,
				componentInfo.getBehaviorId());
...
/t
RequestCycle.processRequest() line: 220	
			IRequestHandler handler = resolveRequestHandler();
/d
handler	ListenerInterfaceRequestHandler  (id=7011)	
	behaviorId	Integer  (id=7019)	
0
	listenerInterface	RequestListenerInterface  (id=7020)	
		interfaces	Collections$SynchronizedMap<K,V>  (id=7023)	
		log	Log4jLogger  (id=7024)	
		includeRenderCount	true	
		listenerInterfaceClass	Class<T> (org.apache.wicket.behavior.IBehaviorListener) (id=5355)	
		method	Method  (id=7026)	
public abstract void org.apache.wicket.behavior.IBehaviorListener.onRequest()
		name	"IBehaviorListener" (id=7028)	
		renderPageAfterInvocation	true	
	pageComponentProvider	PageAndComponentProvider  (id=7021)	
		serialVersionUID	1	
		component	null	
		componentPath	"ajaxlink" (id=7036)	
		pageClass	Class<T> (my.test.own.AjaxLinkStudyPage) (id=63)	
		pageId	Integer  (id=7039)	
1
		pageInstance	null	
		pageInstanceIsFresh	false	
		pageParameters	null	
		pageSource	DefaultMapperContext  (id=7043)	
		renderCount	Integer  (id=7039)	
1
/ In browser	, 
http://localhost:9090/wicket-testing/ajaxlinkstudy?1

				execute(handler);
/s
...
/s
ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 157	
		final boolean canCallListenerInterfaceAfterExpiry = component != null
				? component.canCallListenerInterfaceAfterExpiry()
/s
AjaxLinkStudyPage$1(Component).canCallListenerInterfaceAfterExpiry() line: 4577	
       	return getApplication().getPageSettings()
        		.getCallListenerInterfaceAfterExpiry() || isStateless();
/s
AjaxLinkStudyPage$1(Component).isStateless() line: 2087	

		for (Behavior behavior : getBehaviors())
		{
			if (!behavior.getStatelessHint(this))
/s
AjaxLink$1(Behavior).getStatelessHint(Component) line: 155	
/=
	/**
	 * This method returns false if the behavior generates a callback url (for example ajax
	 * behaviors)
	 * 
	 * @param component
	 *            the component that has this behavior coupled.
	 * 
	 * @return boolean true or false.
	 */
	public boolean getStatelessHint(Component component)

this	AjaxLink$1  (id=7137)						/ de Behavior	,
	component	AjaxLinkStudyPage$1  (id=7114)	
	event	"click" (id=7160)	
	{
		if (this instanceof IBehaviorListener)
		{
			// this behavior implements a callback interface, so it cannot be stateless
			return false;
		}

this instanceof Behavior 
true
this instanceof IBehaviorListener
true

/t
ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 197	
		final boolean canCallListenerInterfaceAfterExpiry = component != null
				? component.canCallListenerInterfaceAfterExpiry()
/d
false
/TODO
		invokeListener();
/s
ListenerInterfaceRequestHandler.invokeListener() line: 239	
				Behavior behavior = getComponent().getBehaviorById(behaviorId);
				listenerInterface.invoke(getComponent(), behavior);
/s
RequestListenerInterface.invoke(IRequestableComponent, Behavior) line: 231	
/=
	public final void invoke(final IRequestableComponent rcomponent, final Behavior behavior)
this	RequestListenerInterface  (id=7020)	
rcomponent	AjaxLinkStudyPage$1  (id=7114)	= [AjaxLink [Component id = ajaxlink]]
behavior	AjaxLink$1  (id=7137)	

		internalInvoke(component, behavior);
/s
RequestListenerInterface.internalInvoke(Component, Object) line: 248	
/=
	private void internalInvoke(final Component component, final Object target)
component	AjaxLinkStudyPage$1  (id=7114)	
target	AjaxLink$1  (id=7137)	
		try
			method.invoke(target);
/s
AjaxLink$1(AbstractDefaultAjaxBehavior).onRequest() line: 587	



/ Intermezzo

	public AjaxLinkStudyPage() {
		
		AjaxLink<Void>ajaxLink=new AjaxLink<Void>("ajaxlink") {
			
			private static final long serialVersionUID = 1L;

			@Override
			public void onClick(AjaxRequestTarget target) {
				text="["+text+"]";
				counter+=13;
				target.add(textl);
				target.add(counterl);
				
			}
		};
		add(ajaxLink);

public abstract class AjaxLink<T> extends AbstractLink implements IAjaxLink, IGenericComponent<T>

	protected AjaxEventBehavior newAjaxEventBehavior(String event)
	{
		return new AjaxEventBehavior(event)
		{
			private static final long serialVersionUID = 1L;

			@Override
			protected void onEvent(AjaxRequestTarget target)
			{
				onClick(target);
			}


public abstract class AjaxEventBehavior extends AbstractDefaultAjaxBehavior
	public AjaxEventBehavior(String event)
	{
		this.event = event;						/ TODO
	}
	@Override
	protected final void respond(final AjaxRequestTarget target)
	{
		onEvent(target);
	}
	/**
	 * Listener method for the ajax event
	 * 
	 * @param target
	 *      the current request handler
	 */
	protected abstract void onEvent(final AjaxRequestTarget target);
}

public abstract class AbstractDefaultAjaxBehavior extends AbstractAjaxBehavior
	@Override
	public final void onRequest()
	{
		WebApplication app = (WebApplication)getComponent().getApplication();
		AjaxRequestTarget target = app.newAjaxRequestTarget(getComponent().getPage());

		RequestCycle requestCycle = RequestCycle.get();
		requestCycle.scheduleRequestHandlerAfterCurrent(target);

		respond(target);
	}

	/**
	 * @param target
	 *            The AJAX target
	 */
	protected abstract void respond(AjaxRequestTarget target);
}


**
 * Abstract class for handling Ajax roundtrips. This class serves as a base for javascript specific
 * implementations, like ones based on Dojo or Scriptaculous, or Wicket's default.
 */
public abstract class AbstractAjaxBehavior extends Behavior implements IBehaviorListener


/**
 * Listens for requests to behaviors. When {@link org.apache.wicket.behavior.Behavior}s are
 * 'enriched' with this interface, they can receive requests themselves. You can use this for
 * example to implement AJAX behavior, though you'll probably want to extend from
 * {@link org.apache.wicket.behavior.AbstractAjaxBehavior} directly instead in that case.
 */
public interface IBehaviorListener extends IRequestListener
{
	/** Behavior listener interface */
	public static final RequestListenerInterface INTERFACE = new RequestListenerInterface(
		IBehaviorListener.class);

	/**
	 * Called when a request to a behavior is received.
	 */
	void onRequest();
}



/ Einde Intermezzo

/ we waren in	,
/s
AjaxLink$1(AbstractDefaultAjaxBehavior).onRequest() line: 587	

///////////////////////////////////////////////////////////////////
/ we doen een request op de behavior	,

		WebApplication app = (WebApplication)getComponent().getApplication();
		AjaxRequestTarget target = app.newAjaxRequestTarget(getComponent().getPage());
/s
WicketApplication(WebApplication).newAjaxRequestTarget(Page) line: 907	
		AjaxRequestTarget target = getAjaxRequestTargetProvider().get(page);
/s
WebApplication$DefaultAjaxRequestTargetProvider.get(Page) line: 1073	
/=
public abstract class WebApplication extends Application
	private static class DefaultAjaxRequestTargetProvider implements
		IContextProvider<AjaxRequestTarget, Page>
	{
		@Override
		public AjaxRequestTarget get(Page page)
		{
			return new AjaxRequestHandler(page);
/s
AjaxRequestHandler.<init>(Page) line: 115	
/=
public class AjaxRequestHandler implements AjaxRequestTarget
	public AjaxRequestHandler(final Page page)
	{
		update = new XmlPartialPageUpdate(page)

/ Intermezzo

/ stack	,
	AjaxRequestHandler.<init>(Page) line: 115	
	WebApplication$DefaultAjaxRequestTargetProvider.get(Page) line: 1073	
	WebApplication$DefaultAjaxRequestTargetProvider.get(Object) line: 1067	
	WicketApplication(WebApplication).newAjaxRequestTarget(Page) line: 907	
	AjaxLink$1(AbstractDefaultAjaxBehavior).onRequest() line: 588	
	RequestListenerInterface.internalInvoke(Component, Object) line: 258	
	RequestListenerInterface.invoke(IRequestableComponent, Behavior) line: 241	
	ListenerInterfaceRequestHandler.invokeListener() line: 248	
	ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 234	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ Einde Intermezzo

/s
AjaxRequestHandler$1(XmlPartialPageUpdate).<init>(Page) line: 45	
		super(page);
/t
AjaxLink$1(AbstractDefaultAjaxBehavior).onRequest() line: 590	
		AjaxRequestTarget target = app.newAjaxRequestTarget(getComponent().getPage());
/d
[AjaxRequestHandler@1701777932 responseObject [org.apache.wicket.ajax.AjaxRequestHandler$1@3e1]

		RequestCycle requestCycle = RequestCycle.get();
		requestCycle.scheduleRequestHandlerAfterCurrent(target);
/ TODO
		respond(target);
/s
AjaxLink$1(AjaxEventBehavior).respond(AjaxRequestTarget) line: 155	
		onEvent(target);
/s
AjaxLink$1.onEvent(AjaxRequestTarget) line: 84	
/=
		return new AjaxEventBehavior(event)
		{
			private static final long serialVersionUID = 1L;

			@Override
			protected void onEvent(AjaxRequestTarget target)
			{
->				onClick(target);
/s
AjaxLinkStudyPage$1.onClick(AjaxRequestTarget) line: 42	
/=
		AjaxLink<Void>ajaxLink=new AjaxLink<Void>("ajaxlink") {
			
			private static final long serialVersionUID = 1L;

			@Override
			public void onClick(AjaxRequestTarget target) {
->				text="["+text+"]";
				counter+=13;
				target.add(textl);
/s
AjaxRequestHandler.add(Component...) line: 221	
/=
	public void add(Component... components)
		for (final Component component : components)
		{
			add(component, component.getMarkupId());
/s
AjaxRequestHandler.add(Component, String) line: 238	
		update.add(component, markupId);
/s
AjaxRequestHandler$1(PartialPageUpdate).add(Component, String) line: 369	
		component.setMarkupId(markupId);
"text8"
		markupIdToComponent.put(markupId, component);
/t
AjaxLinkStudyPage$1.onClick(AjaxRequestTarget) line: 45	
				target.add(textl);
/d
				target.add(counterl);
...
/s
AjaxRequestHandler$1(PartialPageUpdate).add(Component, String) line: 391	
		markupIdToComponent.put(markupId, component);
{text8=[Component id = text], counter9=[Component id = counter]}

/t
RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 97	
			respond(handler);
/d
		else if (scheduled != null)
		{
			execute(scheduled);
/s
RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
			respond(handler);
handler=
[AjaxRequestHandler@1701777932 responseObject [org.apache.wicket.ajax.AjaxRequestHandler$1@3e1]
/s
RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
				handler.respond(RequestCycle.this);
/s
AjaxRequestHandler.respond(IRequestCycle) line: 349	
		// Set content type based on markup type for page
		update.setContentType(response, encoding);
/s
AjaxRequestHandler$1(XmlPartialPageUpdate).setContentType(WebResponse, String) line: 51	
		response.setContentType("text/xml; charset=" + encoding);
/t
AjaxRequestHandler.respond(IRequestCycle) line: 355	
		update.setContentType(response, encoding);
/d
		final StringResponse bodyResponse = new StringResponse();
		update.writeTo(bodyResponse, encoding);														<-
/s
AjaxRequestHandler$1(PartialPageUpdate).writeTo(Response, String) line: 153	
			writeHeader(response, encoding);
response=
<?xml version="1.0" encoding="UTF-8"?><ajax-response>

			onBeforeRespond(response);
response=
<?xml version="1.0" encoding="UTF-8"?><ajax-response>

			// process added components
			writeComponents(response, encoding);
/s
AjaxRequestHandler$1(PartialPageUpdate).writeComponents(Response, String) line: 247	
		for (Map.Entry<String, Component> stringComponentEntry : markupIdToComponent.entrySet())
		{
			final Component component = stringComponentEntry.getValue();

			if (!containsAncestorFor(component))
			{
				writeComponent(response, component.getAjaxRegionMarkupId(), component, encoding);
response=
<?xml version="1.0" encoding="UTF-8"?><ajax-response><component id="text8" ><![CDATA[<span wicket:id="text" id="text8" wicketpath="text">[null]</span>]]></component>
response=
<?xml version="1.0" encoding="UTF-8"?><ajax-response><component id="text8" ><![CDATA[<span wicket:id="text" id="text8" wicketpath="text">[null]</span>]]></component><component id="counter9" ><![CDATA[<span wicket:id="counter" id="counter9" wicketpath="counter">13</span>]]></component>

/t
AjaxRequestHandler$1(PartialPageUpdate).writeTo(Response, String) line: 160	
			// process added components
			writeComponents(response, encoding);
/d

			// execute the dom ready javascripts as first javascripts
			// after component replacement
			List<CharSequence> evaluationScripts = new ArrayList<>();
			evaluationScripts.addAll(domReadyJavaScripts);
[]
/ TODO
			evaluationScripts.addAll(appendJavaScripts);
[]
/ TODO
			writeNormalEvaluations(response, evaluationScripts);
[]
/ TODO
			writeFooter(response, encoding);
response=
<?xml version="1.0" encoding="UTF-8"?><ajax-response><component id="text8" ><![CDATA[<span wicket:id="text" id="text8" wicketpath="text">[null]</span>]]></component><component id="counter9" ><![CDATA[<span wicket:id="counter" id="counter9" wicketpath="counter">13</span>]]></component></ajax-response>

/t
AjaxRequestHandler.respond(IRequestCycle) line: 359	
		final StringResponse bodyResponse = new StringResponse();
		update.writeTo(bodyResponse, encoding);
/d
bodyResponse=
<?xml version="1.0" encoding="UTF-8"?><ajax-response><component id="text8" ><![CDATA[<span wicket:id="text" id="text8" wicketpath="text">[null]</span>]]></component><component id="counter9" ><![CDATA[<span wicket:id="counter" id="counter9" wicketpath="counter">13</span>]]></component></ajax-response>

		CharSequence filteredResponse = invokeResponseFilters(bodyResponse);
		response.write(filteredResponse);
/ MORGENOCHTEND




/ Onthoud	,
RequestFacade.getQueryString()





/ Einde DEBUG WICKET CLICK AJAX LINK

/ WICKET BEHAVIOR

/ 7	. 

/ AjaxLink adds a AjaxEventBehavior	,

/ wat doet een behavior	?
/ hij adds elems to the target	, en die verschijnen in de xml partial update	,

/ Nu in wicket-examples-step-by-step	,
/ in org.apache.wicket.examples.ajax.builtin
ClockPage
/ clock.add(new AjaxSelfUpdatingTimerBehavior(Duration.seconds(5)))
/ net als AjaxLink zelf doet	,
		add(newAjaxEventBehavior("click"));
/Wat ClockPage voor clock doet	, doet AjaxLink zelf	,

/ De AjaxEventBehavior.onEvent adds elements to the AjaxRequestTarget	, dus de  AjaxRequestHandler, wiens respond fct calls de AjaxREquestHandler$1=PartialPageUpdate's writeTo fct	, dus de elements die waren add worden rendered	,

/ Bijvoorbeeld	,

	public AjaxLinkStudyPage() {
		AjaxLink<Void>ajaxLink=new AjaxLink<Void>("ajaxlink") {
			@Override
			public void onClick(AjaxRequestTarget target) {
				text="["+text+"]";
				counter+=13;
				target.add(textl);
				target.add(counterl);
			}
		};
		add(ajaxLink);

public abstract class AjaxLink<T> extends AbstractLink implements IAjaxLink, IGenericComponent<T>

	protected AjaxEventBehavior newAjaxEventBehavior(String event)
	{
		return new AjaxEventBehavior(event)
		{
			@Override
			protected void onEvent(AjaxRequestTarget target)			<- called als je hebt clicked	, (*)
			{
				onClick(target);

	@Override
	public abstract void onClick(final AjaxRequestTarget target);

/ (*) via InterfaceRequestHandler	,
/ TODO

/ 7	. 



/ Einde WICKET BEHAVIOR

/ DEBUG WICKET CLOCK

/ we komen in 	,
/ stack

	ClockPage.<init>() line: 38	
	DefaultPageFactory.newPage(Constructor<C>, PageParameters) line: 175	
	DefaultPageFactory.newPage(Class<C>) line: 67	
	DefaultMapperContext.newPageInstance(Class<IRequestablePage>, PageParameters) line: 102	
	PageProvider.resolvePageInstance(Integer, Class<IRequestablePage>, PageParameters, Integer) line: 271	
	PageProvider.getPageInstance() line: 169	
	WebPageRenderer(PageRenderer).getPage() line: 78	
	WebPageRenderer.isPageStateless() line: 287												<-
	WebPageRenderer.shouldRenderPageAndWriteResponse(RequestCycle, Url, Url) line: 329	
	WebPageRenderer.respond(RequestCycle) line: 193	
		if (shouldRenderPageAndWriteResponse(requestCycle, currentUrl, targetUrl))

	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/s
ClockPage.<init>() line: 38	

		// add the clock component
		Clock clock = new Clock("clock", TimeZone.getTimeZone("America/Los_Angeles"));
		add(clock);

		// add the ajax behavior which will keep updating the component every 5
		// seconds
		clock.add(new AjaxSelfUpdatingTimerBehavior(Duration.seconds(5)));

/ Intermezzo

public class AjaxSelfUpdatingTimerBehavior extends AbstractAjaxTimerBehavior
	protected final void onTimer(final AjaxRequestTarget target)
/e
public abstract class AbstractAjaxTimerBehavior extends AbstractDefaultAjaxBehavior		<-
	protected final void respond(final AjaxRequestTarget target)
			onTimer(target);

/ Einde Intermezzo

/s
Clock(Component).add(Behavior...) line: 4559	
		new Behaviors(this).add(behaviors);
...
/s
Clock(Component).data_insert(int, Object) line: 612	
this	Clock  (id=7279)	
	data	Object[2]  (id=7329)	
		[0]	Clock$ClockModel  (id=7292)	
		[1]	AjaxSelfUpdatingTimerBehavior  (id=7288)	
///////////////////////////////////////////////////////////////////////////////
/ Dus de behavior komt NIET in children	, maar naast het model in data	,

Behaviors.internalAdd(Behavior) line: 68	
		component.data_add(behavior);
/d
		if (behavior.getStatelessHint(component) == false)
/ JA	,
/s
Behavior.class
	public boolean getStatelessHint(Component component)
	{
		if (this instanceof IBehaviorListener)
		{
			// this behavior implements a callback interface, so it cannot be stateless
			return false;
/t
Behaviors.internalAdd(Behavior) line: 68	
		if (behavior.getStatelessHint(component) == false)
/ d
			...
/t
WebPageRenderer.isPageStateless() line: 287	
		return getPage().isPageStateless();
/pd
/s
ClockPage(Page).isPageStateless() line: 448	
		if (isBookmarkable() == false)
/ NEE

/ TODO (Afmaken)

/ 7	. 

/ we zien in devtools	,
Query String Parameters
16-2.IBehaviorListener.0-clock&_=1467357688434

/ Response=
<?xml version="1.0" encoding="UTF-8"?>
<ajax-response>
	<priority-evaluate><![CDATA[clientTimeVariable = new Date().getTime();]]></priority-evaluate>
	<component id="clockc" >
		<![CDATA[<span wicket:id="clock" style="border: 3px solid red; padding: 10px;" id="clockc" wicketpath="clock">Friday, July 1, 2016 12:26:07 AM PDT</span>]]></component>
	<header-contribution>
		<![CDATA[<head xmlns:wicket="http://wicket.apache.org">
			<script type="text/javascript" src="./wicket/resource/org.apache.wicket.resource.JQueryResourceReference/jquery/jquery-2.2.0-ver-1455723568000.js"></script>
			<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-event-jquery-ver-1455723568000.js"></script>
			<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-ajax-jquery-ver-1455723568000.js"></script>
			<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-ajax-jquery-debug-ver-1455723568000.js"></script>
			<script type="text/javascript" id="wicket-ajax-debug-enable">
				/*<![CDATA[*/
				Wicket.Ajax.DebugWindow.enabled=true;
				/*]]]]><![CDATA[>*/
				</script>
				<script type="text/javascript" id="wicket-ajax-base-url">
				/*<![CDATA[*/
				Wicket.Ajax.baseUrl="clock?16";
				/*]]]]><![CDATA[>*/
			</script>
		</head>]]>
	</header-contribution>
	<evaluate>
		<![CDATA[(function(){Wicket.Timer.set('clockc', function(){Wicket.Ajax.ajax({"u":"./clock?16-2.IBehaviorListener.0-clock","c":"clockc"});}, 5000);})();]]></evaluate>
		<evaluate><![CDATA[window.defaultStatus='Server parsetime: 0.003s, Client parsetime: ' + (new Date().getTime() - clientTimeVariable)/1000 +  's';]]></evaluate>
</ajax-response>

/ Die header-contributions zijn WH die dingen rechtsboven	,
/ TODO

/ 7	. 

/ SET UP DEBUGGING WICKET EXAMPLES

/ Intermezzo

/ we willen voor het debuggen van het menu rechtsboven af	, en van het DebugWindow	,

package org.apache.wicket.examples;
class WicketExampleApplication
	protected void init()
	{
		// [ERICJ]
//		getDebugSettings().setDevelopmentUtilitiesEnabled(true);
		getDebugSettings().setDevelopmentUtilitiesEnabled(false);

package org.apache.wicket.examples.ajax.builtin;
public class AjaxApplication extends WicketExampleApplication
	protected void init()
//		getDebugSettings().setAjaxDebugModeEnabled(true);
		getDebugSettings().setAjaxDebugModeEnabled(false);
/ MORGENOCHTEND

/ Einde Intermezzo

/ Geef	,
http://localhost:9090/wicket-examples-step-by-step/ajax/clock

/ we zien in HTML	,
/s
(function(){Wicket.Timer.set('clockc', function(){Wicket.Ajax.ajax({"u":"./clock?16-2.IBehaviorListener.0-clock","c":"clockc"});}, 5000);})();
/c
/ Op server	,
/s
WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
		if (requestCycle.processRequestAndDetach())
...
/s
RequestCycle.processRequest() line: 220	
			IRequestHandler handler = resolveRequestHandler();
org.apache.wicket.core.request.handler.ListenerInterfaceRequestHandler@6faec393
				execute(handler);

/ Intermezzo

/ ListenerInterfaceRequestHandler -> Behavior	

/ Ajax Behaviors listens	,  met de .onRequest method	, TODO event heeft IBehaviorListener -> Handler -> hier	, 
/ Eerst click events,	 wat nu voor event	?

/ Einde Intermezzo
...
/s
ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 234	
		invokeListener();
/s
ListenerInterfaceRequestHandler.invokeListener() line: 248	
				Behavior behavior = getComponent().getBehaviorById(behaviorId);
org.apache.wicket.ajax.AjaxSelfUpdatingTimerBehavior@2e54c5be
				listenerInterface.invoke(getComponent(), behavior);
/s
RequestListenerInterface.internalInvoke(Component, Object) line: 258	
/=
	private void internalInvoke(final Component component, final Object target)
this	RequestListenerInterface  (id=8607)	
	includeRenderCount	true	
	listenerInterfaceClass	Class<T> (org.apache.wicket.behavior.IBehaviorListener) (id=2359)	
	method	Method  (id=8614)	
public abstract void org.apache.wicket.behavior.IBehaviorListener.onRequest()
	name	"IBehaviorListener" (id=8615)	
	renderPageAfterInvocation	true	
target	AjaxSelfUpdatingTimerBehavior  (id=8597)	

			method.invoke(target);
/s
AjaxSelfUpdatingTimerBehavior(AbstractDefaultAjaxBehavior).onRequest() line: 587	
		AjaxRequestTarget target = app.newAjaxRequestTarget(getComponent().getPage());
		respond(target);
/s
AjaxSelfUpdatingTimerBehavior(AbstractAjaxTimerBehavior).respond(AjaxRequestTarget) line: 126	

/////////////////////////////////////////////////
/ We zijn in de .respond van de behavior	,
/ Deze writes de header	,

			onTimer(target);
/s
AjaxSelfUpdatingTimerBehavior.onTimer(AjaxRequestTarget) line: 51	
		target.add(getComponent());
/////////////////////////////////////////
/ we add clock aan target	, zoals wij ook zelf altijd doen	,
/s
AjaxRequestHandler$1(PartialPageUpdate).add(Component, String) line: 391	
		markupIdToComponent.put(markupId, component);
{clock14=[Component id = clock]}
/t
AjaxSelfUpdatingTimerBehavior(AbstractAjaxTimerBehavior).respond(AjaxRequestTarget) line: 133	
			onTimer(target);
/d
				addTimeout(target.getHeaderResponse());
/s
AjaxSelfUpdatingTimerBehavior(AbstractAjaxTimerBehavior).addTimeout(IHeaderResponse) line: 197	
			headerResponse.render(
				OnLoadHeaderItem.forScript(getJsTimeoutCall(updateInterval)));
updateInterval=
5 seconds
getJsTimeoutCall(updateInterval)=
Wicket.Timer.set('clock14', function(){Wicket.Ajax.ajax({"u":"./clock?30-1.IBehaviorListener.0-clock","c":"clock14"});}, 5000);
/s
PartialPageUpdate$PartialHeaderResponse.render(HeaderItem) line: 587	
			if (item instanceof OnLoadHeaderItem)
			{
				if (!wasItemRendered(item))
				{
					PartialPageUpdate.this.appendJavaScript(((OnLoadHeaderItem) item).getJavaScript());
/s
AjaxRequestHandler$1(PartialPageUpdate).appendJavaScript(CharSequence) line: 338	
		appendJavaScripts.add(javascript);
this	AjaxRequestHandler$1  (id=7484)	
	appendJavaScripts	ArrayList<E>  (id=7518)	
[Wicket.Timer.set('clock1', function(){Wicket.Ajax.ajax({"u":"./clock?0-2.IBehaviorListener.0-clock","c":"clock1"});}, 5000);]
	markupIdToComponent	LinkedHashMap<K,V>  (id=7504)	
{clock1=[Component id = clock]}

/ Intermezzo

	markupIdToComponent	LinkedHashMap<K,V>  (id=7504)	
{clock1=[Component id = clock]}

/ Deze was set in 
AjaxSelfUpdatingTimerBehavior(AbstractAjaxTimerBehavior).respond(AjaxRequestTarget) line: 133	
			onTimer(target);									<- 	Komt dus in de XML	,
				addTimeout(target.getHeaderResponse());			/ nu	,	 adds JS	,

/ Einde Intermezzo

/t
RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 97	
			respond(handler);
handler	ListenerInterfaceRequestHandler  (id=7463)	
/d
			execute(scheduled);
scheduled	AjaxRequestHandler  (id=8644)	
	update	AjaxRequestHandler$1  (id=8647)	
/s
RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
			respond(handler);
/s
AjaxRequestHandler.respond(IRequestCycle) line: 324	

/////////////////////////////////////////
/ we zijn nu in de .respond van de request handler	,
/ Deze writes de body	,

		final StringResponse bodyResponse = new StringResponse();
		update.writeTo(bodyResponse, encoding);
/s
AjaxRequestHandler$1(PartialPageUpdate).writeTo(Response, String) line: 153	
			writeHeader(response, encoding);
<?xml version="1.0" encoding="UTF-8"?><ajax-response>

			// process added components
			writeComponents(response, encoding);
<?xml version="1.0" encoding="UTF-8"?><ajax-response><component id="clock1" ><![CDATA[<span wicket:id="clock" style="border: 3px solid red; padding: 10px;" id="clock1" wicketpath="clock">Monday, July 4, 2016 11:12:29 PM PDT</span>]]></component><header-contribution><![CDATA[<head xmlns:wicket="http://wicket.apache.org"><script type="text/javascript" src="./wicket/resource/org.apache.wicket.resource.JQueryResourceReference/jquery/jquery-2.2.0-ver-1455723568000.js"></script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-event-jquery-ver-1455723568000.js"></script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-ajax-jquery-ver-1455723568000.js"></script>
<script type="text/javascript" id="wicket-ajax-base-url">
/*<![CDATA[*/
Wicket.Ajax.baseUrl="clock?0";
/*]]]]><![CDATA[>*/
</script>
</head>]]></header-contribution>

			writeFooter(response, encoding);
<?xml version="1.0" encoding="UTF-8"?><ajax-response><component id="clock1" ><![CDATA[<span wicket:id="clock" style="border: 3px solid red; padding: 10px;" id="clock1" wicketpath="clock">Monday, July 4, 2016 11:12:29 PM PDT</span>]]></component><header-contribution><![CDATA[<head xmlns:wicket="http://wicket.apache.org"><script type="text/javascript" src="./wicket/resource/org.apache.wicket.resource.JQueryResourceReference/jquery/jquery-2.2.0-ver-1455723568000.js"></script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-event-jquery-ver-1455723568000.js"></script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-ajax-jquery-ver-1455723568000.js"></script>
<script type="text/javascript" id="wicket-ajax-base-url">
/*<![CDATA[*/
Wicket.Ajax.baseUrl="clock?0";
/*]]]]><![CDATA[>*/
</script>
</head>]]></header-contribution></ajax-response>

		} finally {
			if (header != null) {
				// restore a normal header
				page.replace(new HtmlHeaderContainer(HtmlHeaderSectionHandler.HEADER_ID));
				header = null;
/ TODO

/t
AjaxRequestHandler.respond(IRequestCycle) line: 360	
		update.writeTo(bodyResponse, encoding);
/d
bodyResponse=
<?xml version="1.0" encoding="UTF-8"?>
<ajax-response>
	<component id="clock1" >
		<![CDATA[<span wicket:id="clock" style="border: 3px solid red; padding: 10px;" id="clock1" wicketpath="clock">Monday, July 4, 2016 11:56:15 PM PDT</span>]]></component>
	<header-contribution><![CDATA[<head xmlns:wicket="http://wicket.apache.org">
		<script type="text/javascript" src="./wicket/resource/org.apache.wicket.resource.JQueryResourceReference/jquery/jquery-2.2.0-ver-1455723568000.js"></script>
		<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-event-jquery-ver-1455723568000.js"></script>
		<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-ajax-jquery-ver-1455723568000.js"></script>
		<script type="text/javascript" id="wicket-ajax-base-url">/*<![CDATA[*/
			Wicket.Ajax.baseUrl="clock?0";
			/*]]]]><![CDATA[>*/
		</script>
	</head>]]></header-contribution>
	<evaluate><![CDATA[(function(){Wicket.Timer.set('clock1', function(){Wicket.Ajax.ajax({"u":"./clock?0-1.IBehaviorListener.0-clock","c":"clock1"});}, 5000);})();]]></evaluate>
</ajax-response>
		CharSequence filteredResponse = invokeResponseFilters(bodyResponse);
/ onveranderd	,
		response.write(filteredResponse);

/ Intermezzo

/ we zien in devtools deze reponses	,

<?xml version="1.0" encoding="UTF-8"?>
<ajax-response>
	<priority-evaluate><![CDATA[clientTimeVariable = new Date().getTime();]]></priority-evaluate>
	<component id="clock1" >
		<![CDATA[<span wicket:id="clock" style="border: 3px solid red; padding: 10px;" id="clock1" wicketpath="clock">Monday, July 4, 2016 11:23:02 PM PDT</span>]]></component>
	<header-contribution>
		<![CDATA[<head xmlns:wicket="http://wicket.apache.org">
			<script type="text/javascript" src="./wicket/resource/org.apache.wicket.resource.JQueryResourceReference/jquery/jquery-2.2.0-ver-1455723568000.js"></script>
			<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-event-jquery-ver-1455723568000.js"></script>
			<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-ajax-jquery-ver-1455723568000.js"></script>
			<script type="text/javascript" id="wicket-ajax-base-url">
				/*<![CDATA[*/
					Wicket.Ajax.baseUrl="clock?0";
				/*]]]]><![CDATA[>*/
			</script>
		</head>]]>
	</header-contribution>
	<evaluate>
		<![CDATA[(function(){Wicket.Timer.set('clock1', function(){Wicket.Ajax.ajax({"u":"./clock?0-1.IBehaviorListener.0-clock","c":"clock1"});}, 5000);})();]]></evaluate>
	<evaluate><![CDATA[window.defaultStatus='Server parsetime: 0.004s, Client parsetime: ' + (new Date().getTime() - clientTimeVariable)/1000 +  's';]]></evaluate></ajax-response>


/ Einde Intermezzo


/ 7	. 

/ JS pakt op	,


jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;
		return {
			send: function( headers, complete ) {
				callback = function( type ) {
					return function() {
						if ( callback ) {					<-
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
xhr.responseText=
"<?xml version="1.0" encoding="UTF-8"?><ajax-response><priority-evaluate><![CDATA[clientTimeVariable = new Date().getTime();]]></priority-evaluate><component id="clock5" ><![CDATA[<span wicket:id="clock" style="border: 3px solid red; padding: 10px;" id="clock5" wicketpath="clock">Tuesday, July 5, 2016 11:16:26 PM PDT</span>]]></component><header-contribution><![CDATA[<head xmlns:wicket="http://wicket.apache.org"><script type="text/javascript" src="./wicket/resource/org.apache.wicket.resource.JQueryResourceReference/jquery/jquery-2.2.0-ver-1455723568000.js"></script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-event-jquery-ver-1455723568000.js"></script>
<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-ajax-jquery-ver-1455723568000.js"></script>
<script type="text/javascript" id="wicket-ajax-base-url">
/*<![CDATA[*/
Wicket.Ajax.baseUrl="clock?6";
/*]]]]><![CDATA[>*/
</script>
</head>]]></header-contribution><evaluate><![CDATA[(function(){Wicket.Timer.set('clock5', function(){Wicket.Ajax.ajax({"u":"./clock?6-1.IBehaviorListener.0-clock","c":"clock5"});}, 5000);})();]]></evaluate><evaluate><![CDATA[window.defaultStatus='Server parsetime: 0.006s, Client parsetime: ' + (new Date().getTime() - clientTimeVariable)/1000 +  's';]]></evaluate></ajax-response>"

										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
/=
"Pragma: no-cache
Date: Wed, 06 Jul 2016 06:16:26 GMT
Cache-Control: no-cache, no-store
Server: Apache-Coyote/1.1
Content-Type: text/xml;charset=UTF-8
Transfer-Encoding: chunked
Expires: Thu, 01 Jan 1970 00:00:00 GMT

"
/s
	// Main method
	ajax: function( url, options ) {
		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess )
response: Object
	data: document
	state: "success"
/ data is nu een #document	, NIET meer XML (text)	, 
/ TODO

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
/s
Wicket.Ajax.Call.doAjax.jQuery.ajax.success (wicket-ajax-jqu…3568000.js:705)
/=
			// execute the request
			var jqXHR = jQuery.ajax({
				success: function(data, textStatus, jqXHR) {
					if (attrs.wr) {
						self.processAjaxResponse(data, textStatus, jqXHR, context);
/s
Wicket.Ajax.Call.processAjaxResponse (wicket-ajax-jqu…3568000.js:769)
/=
					redirectUrl = jqXHR.getResponseHeader('Ajax-Location');
undefind
/ Ajax-Location staat niet in het lijstje boven	,

				else {
					// no redirect, just regular response
					// invoke the loaded callback with an xml document
					return this.loadedCallback(data, context);
data=#document 	, van XML
context: Object
	attrs: Object
		async: true
		c: "clock5"
		ch: "0|s"
		dt: "xml"
		e: Array[1]
		event: jQuery.Event
		m: "GET"
		pd: false
		rt: 0
		sp: "bubble"
		sr: false
		u: "./clock?6-1.IBehaviorListener.0-clock"
		wr: true
		__proto__: Object
	steps: Array[0]
/s
Wicket.Ajax.Call.loadedCallback (wicket-ajax-jqu…568000.js:1036)
/=
		loadedCallback: function (envelope, context) {
/ envelope=#document
				var root = envelope.getElementsByTagName("ajax-response")[0];
root: ajax-response
childNodes: NodeList[5]
	0: priority-evaluate
	1: component#clock5
	2: header-contribution
	3: evaluate
	4: evaluate
	length: 5
	__proto__: NodeList
/s
				for (var i = 0; i < root.childNodes.length; ++i) {
					var childNode = root.childNodes[i];
					} else if (childNode.tagName === "priority-evaluate") {
						this.processEvaluation(context, childNode);
/s
Wicket.Ajax.Call.processEvaluation (wicket-ajax-jqu…568000.js:1167)
/=
		processEvaluation: function (context, node) {
node: priority-evaluate
			// get the javascript body
			var text = Wicket.DOM.text(node);
"clientTimeVariable = new Date().getTime();"

			} else {
				steps.push(evaluate(text));
steps: Array[1]
	0: function (notify) {
/t
		// Processes the response
		loadedCallback: function (envelope, context) {
/ volgende	,

				// go through the ajax response and execute all priority-invocations first
				for (var i = 0; i < root.childNodes.length; ++i) {
					var childNode = root.childNodes[i];
					if (childNode.tagName === "header-contribution") {
/JA
						this.processHeaderContribution(context, childNode);
/s
Wicket.Ajax.Call.processHeaderContribution (wicket-ajax-jqu…568000.js:1244)
			var c = Wicket.Head.Contributor;
			c.processContribution(context, node);
/s
Wicket.Ajax.Call.processHeaderContribution (wicket-ajax-jqu…568000.js:1244)
				// Processes the parsed header contribution
				processContribution: function (context, headerNode) {
					var xmldoc = this.parse(headerNode);
/s
jQuery.extend.Head.Contributor.parse (wicket-ajax-jqu…568000.js:2024)
/=
				parse: function (headerNode) {
...
/t
Wicket.Ajax.Call.processHeaderContribution (wicket-ajax-jqu…568000.js:1244)
					var xmldoc = this.parse(headerNode);
/d
xmldoc: document
	children: HTMLCollection[4]
		0: script
		1: script
		2: script
		3: script#wicket-ajax-base-url

					// go through the individual elements and process them according to their type
					for (var i = 0; i < rootNode.childNodes.length; i++) {
						var node = rootNode.childNodes[i];

							var name = node.tagName.toLowerCase();
"script"
							} else if (name === "script") {
								this.processScript(context, node);
/s
				// Process a script element (both inline and external)
				processScript: function (context, node) {
					context.steps.push(function (notify) {
...
/t
				// Processes the parsed header contribution
				processContribution: function (context, headerNode) {
/ volgende	,
					// go through the individual elements and process them according to their type
					for (var i = 0; i < rootNode.childNodes.length; i++) {
...
/t
		loadedCallback: function (envelope, context) {

				// go through the ajax response and execute all priority-invocations first
/ and header-contribution	,
				for (var i = 0; i < root.childNodes.length; ++i) {
					var childNode = root.childNodes[i];
					if (childNode.tagName === "header-contribution") {
						this.processHeaderContribution(context, childNode);
/d
steps: Array[5]
0: function (notify) {
1: function (notify) {
2: function (notify) {
3: function (notify) {
4: function (notify) {
length: 5

/ now the component , evaluate's 
				// go through the ajax response and for every action (component, js evaluation, header contribution)
				// ad the proper closure to steps
				var stepIndexOfLastReplacedComponent = -1;
				for (var c = 0; c < root.childNodes.length; ++c) {
					if (node.tagName === "component") {
						if (stepIndexOfLastReplacedComponent === -1) {
							this.processFocusedComponentMark(context);
/s
		processFocusedComponentMark: function (context) {
			context.steps.push(function (notify) {
...
/t
		loadedCallback: function (envelope, context) {
							this.processFocusedComponentMark(context);
/d
						}
						stepIndexOfLastReplacedComponent = steps.length;
						this.processComponent(context, node);
/s
		// Adds a closure that replaces a component
		processComponent: function (context, node) {
			context.steps.push(function (notify) {
...
/t
		loadedCallback: function (envelope, context) {
/ volgende	,
				for (var c = 0; c < root.childNodes.length; ++c) {
					var node = root.childNodes[c];
					} else if (node.tagName === "evaluate") {
						this.processEvaluation(context, node);
/s
		/**
		 * Adds a closure that evaluates javascript code.
		 * @param context {Object} - the object that brings the executer's steps and the attributes
		 * @param node {XmlElement} - the <[priority-]evaluate> element with the script to evaluate
		 */
		processEvaluation: function (context, node) {
context: Object
attrs: Object
async: true
c: "clock5"
ch: "0|s"
dt: "xml"
e: Array[1]
event: jQuery.Event
m: "GET"
pd: false
rt: 0
sp: "bubble"
sr: false
u: "./clock?6-4.IBehaviorListener.0-clock"
wr: true
__proto__: Object
steps: Array[7]
0: function (notify) {
1: function (notify) {
2: function (notify) {
3: function (notify) {
4: function (notify) {
5: function (notify) {
6: function (notify) {
length: 7

node: evaluate
childNodes: NodeList[1]
0: cdata-section
baseURI: ""
childNodes: NodeList[0]
data: "(function(){Wicket.Timer.set('clock5', function(){Wicket.Ajax.ajax({"u":"./clock?6-4.IBehaviorListener.0-clock","c":"clock5"});}, 5000);})();"

			// get the javascript body
			var text = Wicket.DOM.text(node);
"(function(){Wicket.Timer.set('clock5', function(){Wicket.Ajax.ajax({"u":"./clock?6-4.IBehaviorListener.0-clock","c":"clock5"});}, 5000);})();"

			} else {
				steps.push(evaluate(text));
/t
		loadedCallback: function (envelope, context) {
/volgende	,
					} else if (node.tagName === "evaluate") {
						this.processEvaluation(context, node);

stepIndexOfLastReplacedComponent: 6
steps: Array[9]
0: function (notify) {
1: function (notify) {
2: function (notify) {
3: function (notify) {
4: function (notify) {
5: function (notify) {
6: function (notify) {
7: function (notify) {
8: function (notify) {
length: 9

				if (stepIndexOfLastReplacedComponent !== -1) {
					this.processFocusedComponentReplaceCheck(steps, stepIndexOfLastReplacedComponent);
/s
Wicket.Ajax.Call.processFocusedComponentReplaceCheck (wicket-ajax-jqu…568000.js:1268)
			// add this step imediately after all components have been replaced
			steps.splice(lastReplaceComponentStep + 1, 0, function (notify) {

lastReplaceComponentStep: 6
steps: Array[10]
0: function (notify) {
1: function (notify) {
2: function (notify) {
3: function (notify) {
4: function (notify) {
5: function (notify) {
6: function (notify) {
7: function (notify) {
8: function (notify) {
9: function (notify) {
length: 10
/ 1 erbij	,

/t
		loadedCallback: function (envelope, context) {
					this.processFocusedComponentReplaceCheck(steps, stepIndexOfLastReplacedComponent);
/d
				// add the last step, which should trigger the success call the done method on request
				this.success(context);
/s
		// Adds a closure to steps that should be invoked after all other steps have been successfully executed
		success: function (context) {
			context.steps.push(jQuery.proxy(function (notify) {
...
/t
		function done( status, nativeStatusText, responses, headers ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
/d
			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );
/s
jQuery.Callbacks.fire (jquery-2.2.0-ve…568000.js:3182)
					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
/s
Wicket.Ajax.Call.doAjax.jQuery.ajax.complete (wicket-ajax-jqu…3568000.js:728)

					context.steps.push(jQuery.proxy(function (notify) {
...

context: Object
attrs: Object
steps: Array[12]
0: function (notify) {
1: function (notify) {
2: function (notify) {
3: function (notify) {
4: function (notify) {
5: function (notify) {
6: function (notify) {
7: function (notify) {
8: function (notify) {
9: function (notify) {
10: function () {
11: function () {
length: 12

/ Dan	,
					var executer = new FunctionsExecuter(context.steps);
					executer.start();
/s
		this.start = function () {
			var retValue = FunctionsExecuter.DONE;
			while (retValue === FunctionsExecuter.DONE) {
				retValue = this.processNext();
/s
		this.processNext = function () {
			if (this.current < this.functions.length) {
/ JA
this.current=0
				f = this.functions[this.current];
				run = function () {
...
				run = jQuery.proxy(run, this);
				this.current++;
				} else {
					var retValue = run();
/s
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
/ args=[]
/ arguments=Arguments[0]{callee=function(){...}}
/s
jQuery.extend.proxy.proxy (jquery-2.2.0-ve…3568000.js:492)
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
/s
FunctionsExecuter.processNext.run (wicket-ajax-jqu…3568000.js:157)
				run = function () {
					try {
						var n = jQuery.proxy(this.notify, this);
						return f(n);												<-
/s
Wicket.Ajax.Call.processEvaluation.evaluate (wicket-ajax-jqu…568000.js:1204)
			var evaluate = function (script) {
				return function(notify) {
					// just evaluate the javascript
					try {
						// do the evaluation
						eval(script);										<-
/script=
"clientTimeVariable = new Date().getTime();"
///////////////////////////////////////////////////////////
/ we zien een global clientTimeVariable: 1468055480043
/ TODO (Is dit de bedoeling?)

					// continue to next step
					return FunctionsExecuter.DONE;
/s
FunctionsExecuter.processNext (wicket-ajax-jqu…3568000.js:172)
				} else {
					var retValue = run();
/d
					return retValue;
/t
FunctionsExecuter.start (wicket-ajax-jqu…3568000.js:184)
/ volgende	,
			while (retValue === FunctionsExecuter.DONE) {
				retValue = this.processNext();
/s
FunctionsExecuter.processNext (wicket-ajax-jqu…3568000.js:172)
		this.processNext = function () {
			if (this.current < this.functions.length) {
				var f, run;
				f = this.functions[this.current];
				run = function () {
						var n = jQuery.proxy(this.notify, this);
						return f(n);
				};
				run = jQuery.proxy(run, this);
				this.current++;
				} else {
					var retValue = run();
/s
jQuery.extend.proxy.proxy (jquery-2.2.0-ve…3568000.js:492)
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
/s
FunctionsExecuter.processNext.run (wicket-ajax-jqu…3568000.js:156)
				run = function () {
					try {
						var n = jQuery.proxy(this.notify, this);
						return f(n);
/s
				// Process a script element (both inline and external)
				processScript: function (context, node) {
					context.steps.push(function (notify) {
						} else {
							var res = Wicket.Head.containsElement(node, "src");				<-
node.outerHTML=
"<script type="text/javascript" src="./wicket/resource/org.apache.wicket.resource.JQueryResourceReference/jquery/jquery-2.2.0-ver-1455723568000.js"/>"
//////////
/ Als het script er al is,	 zijn we al klaar	,
/s
jQuery.extend.Head.containsElement (wicket-ajax-jqu…568000.js:2315)
				var attr = element.getAttribute(mandatoryAttribute);
mandatoryAttribute: "src"
attr=
"./wicket/resource/org.apache.wicket.resource.JQueryResourceReference/jquery/jquery-2.2.0-ver-1455723568000.js"

				var elementTagName = element.tagName.toLowerCase();
"script"
				var elementId = element.getAttribute("id");
null
				var head = document.getElementsByTagName("head")[0];

				if (elementTagName === "script") {
/ JA
					head = document;
				}

				var nodes = head.getElementsByTagName(elementTagName);
nodes: HTMLCollection[7]
0: script
1: script
2: script
3: script
4: script#wicket-ajax-base-url
5: script
6: script
length: 7

				for (var i = 0; i < nodes.length; ++i) {
					var node = nodes[i];
node.outerHTML=
"<script type="text/javascript">
/*<![CDATA[*/
var clientTimeVariable = new Date().getTime();
/*]]>*/
</script>"

						var loadedUrl = node.getAttribute(mandatoryAttribute);
null
						var loadedUrl_ = node.getAttribute(mandatoryAttribute+"_");
null
						if (loadedUrl === attr || loadedUrl_ === attr) {
/ NEE
						} else if (elementId && elementId === node.getAttribute("id")) {
/NEE
/ volgende	,
				for (var i = 0; i < nodes.length; ++i) {
					var node = nodes[i];
node.outerHTML=
"<script type="text/javascript" src="./wicket/resource/org.apache.wicket.resource.JQueryResourceReference/jquery/jquery-2.2.0-ver-1455723568000.js"></script>"
					if (node.tagName.toLowerCase() === elementTagName) {
						var loadedUrl = node.getAttribute(mandatoryAttribute);
"./wicket/resource/org.apache.wicket.resource.JQueryResourceReference/jquery/jquery-2.2.0-ver-1455723568000.js"
						var loadedUrl_ = node.getAttribute(mandatoryAttribute+"_");
null
						if (loadedUrl === attr || loadedUrl_ === attr) {
/ JA
							return {
								contains: true
/t
				processScript: function (context, node) {
					context.steps.push(function (notify) {
						} else {
							var res = Wicket.Head.containsElement(node, "src");
{contains: true}
							if (res.contains) {
								// an element with same src attribute is in document, skip it
								return FunctionsExecuter.DONE;
/t
FunctionsExecuter.start (wicket-ajax-jqu…3568000.js:184)
/ volgende	,
			while (retValue === FunctionsExecuter.DONE) {
				retValue = this.processNext();
/s
FunctionsExecuter.processNext (wicket-ajax-jqu…3568000.js:172)
			if (this.current < this.functions.length) {
				var f, run;
				f = this.functions[this.current];
				run = function () {
					try {
						var n = jQuery.proxy(this.notify, this);
						return f(n);
					}
				};
				run = jQuery.proxy(run, this);
				this.current++;

				} else {
					var retValue = run();
/s
jQuery.extend.proxy.proxy (jquery-2.2.0-ve…3568000.js:492)
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
/s
FunctionsExecuter.processNext.run (wicket-ajax-jqu…3568000.js:157)
				run = function () {
					try {
						var n = jQuery.proxy(this.notify, this);
						return f(n);									<-
/s
				processScript: function (context, node) {
					context.steps.push(function (notify) {
						} else {
							var res = Wicket.Head.containsElement(node, "src");	 <-
node.outerHTML=
"<script type="text/javascript" src="./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-event-jquery-ver-1455723568000.js"/>"
/s
jQuery.extend.Head.containsElement (wicket-ajax-jqu…568000.js:2315)
				var attr = element.getAttribute(mandatoryAttribute);
mandatoryAttribute: "src"
attr=
"./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-event-jquery-ver-1455723568000.js"
				var elementTagName = element.tagName.toLowerCase();
"script"
				var elementId = element.getAttribute("id");
null
				var head = document.getElementsByTagName("head")[0];

				if (elementTagName === "script") {
					head = document;
				var nodes = head.getElementsByTagName(elementTagName);
nodes: HTMLCollection[7]
0: script
1: script
2: script
3: script
4: script#wicket-ajax-base-url
5: script
6: script
length: 7

				for (var i = 0; i < nodes.length; ++i) {
/ De 1ste 2 slaan we over	,
					var node = nodes[i];

					// check node names and mandatory attribute values
					// we also have to check for attribute name that is suffixed by "_".
					// this is necessary for filtering script references
					if (node.tagName.toLowerCase() === elementTagName) {

						var loadedUrl = node.getAttribute(mandatoryAttribute);
"./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-event-jquery-ver-1455723568000.js"
...
						if (loadedUrl === attr || loadedUrl_ === attr) {
/ JA
/t
				processScript: function (context, node) {
					context.steps.push(function (notify) {

						} else {
							var res = Wicket.Head.containsElement(node, "src");
							if (res.contains) {
/ JA
								// an element with same src attribute is in document, skip it
								return FunctionsExecuter.DONE;
/t
/ volgende	,
FunctionsExecuter.start (wicket-ajax-jqu…3568000.js:184)
			while (retValue === FunctionsExecuter.DONE) {
				retValue = this.processNext();
...
/s
				// Process a script element (both inline and external)
				processScript: function (context, node) {
					context.steps.push(function (notify) {

						if (!node.getAttribute("src") && Wicket.DOM.containsElement(node)) {
							// if an inline element with same id is already in document, skip it
							return FunctionsExecuter.DONE;
						} else {
							var res = Wicket.Head.containsElement(node, "src");
/s
				var attr = element.getAttribute(mandatoryAttribute);
"./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/res/js/wicket-ajax-jquery-ver-1455723568000.js"

/ de 4de node uit de lijst is het	,
				var nodes = head.getElementsByTagName(elementTagName);
				for (var i = 0; i < nodes.length; ++i) {
					var node = nodes[i];

					// check node names and mandatory attribute values
					// we also have to check for attribute name that is suffixed by "_".
					// this is necessary for filtering script references
					if (node.tagName.toLowerCase() === elementTagName) {

						var loadedUrl = node.getAttribute(mandatoryAttribute);
						var loadedUrl_ = node.getAttribute(mandatoryAttribute+"_");
						if (loadedUrl === attr || loadedUrl_ === attr) {
							return {
								contains: true
/t
FunctionsExecuter.start (wicket-ajax-jqu…3568000.js:184)
/ volgende	,
			while (retValue === FunctionsExecuter.DONE) {
				retValue = this.processNext();
...
/s
				// Process a script element (both inline and external)
				processScript: function (context, node) {
					context.steps.push(function (notify) {
						} else {
							var res = Wicket.Head.containsElement(node, "src");
/s
jQuery.extend.Head.containsElement (wicket-ajax-jqu…568000.js:2315)
node.outerHTML=
"<script type="text/javascript" id="wicket-ajax-base-url">
/*<![CDATA[*/
Wicket.Ajax.baseUrl="clock?6";
/*]]>*/
</script>"
						if (!node.getAttribute("src") && Wicket.DOM.containsElement(node)) {
/ TODO (step into  Wicket.DOM.containsElement(node)
							// if an inline element with same id is already in document, skip it
							return FunctionsExecuter.DONE;
/t
FunctionsExecuter.start (wicket-ajax-jqu…3568000.js:184)
/ volgende	,
			while (retValue === FunctionsExecuter.DONE) {
				retValue = this.processNext();
...
/s
FunctionsExecuter.processNext.run (wicket-ajax-jqu…3568000.js:157)
				run = function () {
					try {
						var n = jQuery.proxy(this.notify, this);
						return f(n);
/s
		// mark the focused component so that we know if it has been replaced by response
		processFocusedComponentMark: function (context) {
			context.steps.push(function (notify) {
				Wicket.Focus.markFocusedComponent();
/s
jQuery.extend.Focus.markFocusedComponent (wicket-ajax-jqu…568000.js:2666)
				var WF = Wicket.Focus;
				} else {
					WF.refocusLastFocusedComponentAfterResponse = false;
/t
FunctionsExecuter.start (wicket-ajax-jqu…3568000.js:184)
/ volgende	,
			while (retValue === FunctionsExecuter.DONE) {
				retValue = this.processNext();
/s

		// Adds a closure that replaces a component
		processComponent: function (context, node) {
			context.steps.push(function (notify) {
				// get the component id
				var compId = node.getAttribute("id");
node.outerHTML
/=
"<component id="clock5"><![CDATA[<span wicket:id="clock" style="border: 3px solid red; padding: 10px;" id="clock5" wicketpath="clock">Saturday, July 9, 2016 12:16:51 AM PDT</span>]]></component>"

				// get the component id
				var compId = node.getAttribute("id");
"clock5"
				// get existing component
				var element = Wicket.$(compId);
element: span#clock5
				} else {
					var text = Wicket.DOM.text(node);
"<span wicket:id="clock" style="border: 3px solid red; padding: 10px;" id="clock5" wicketpath="clock">Saturday, July 9, 2016 12:16:51 AM PDT</span>"
					// replace the component
					Wicket.DOM.replace(element, text);
/s
jQuery.extend.DOM.replace (wicket-ajax-jqu…568000.js:1757)
				var we = Wicket.Event;
				var topic = we.Topic;

				we.publish(topic.DOM_NODE_REMOVING, element);
/s
jQuery.extend.Event.publish (wicket-event-jq…3568000.js:283)
				if (topic) {
/ JA
"/dom/node/removing"
					// cut the topic argument
					var args = Array.prototype.slice.call(arguments).slice(1);
arguments=[
0: span#clock5
]
					jQuery(document).triggerHandler(topic, args);
/s
jQuery.fn.extend.triggerHandler (jquery-2.2.0-ve…568000.js:7878)
/=
	triggerHandler: function( type, data ) {
type: "/dom/node/removing"
data: Array[1]
	0: span#clock5
		var elem = this[ 0 ];
document
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
/s
jQuery.extend.trigger (jquery-2.2.0-ve…568000.js:7788)
/=
jQuery.extend( jQuery.event, {
	trigger: function( event, data, elem, onlyHandlers ) {
event
	type: "/dom/node/removing"
/ TODO (Het 1ste arg was toch type)
...
7787			if ( handle ) {
				handle.apply( cur, data );
/s
jQuery.event.add.elemData.handle (jquery-2.2.0-ve…568000.js:4544)
/=
jQuery.event = {
	add: function( elem, types, handler, data, selector ) {
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;					<-
/s
jQuery.event.dispatch (jquery-2.2.0-ve…568000.js:4732)
...
4731				ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );
/s
	/**
	 * Remove any scheduled timers on the removed element.
	 * This wont remove the timer for elements which are children of the removed one.
	 */
	Wicket.Event.subscribe('/dom/node/removing', function(jqEvent, element) {
		var id = element.id;
		if (Wicket.TimerHandles && Wicket.TimerHandles[id]) {
			window.clearTimeout(Wicket.TimerHandles[id]);
			delete Wicket.TimerHandles[id];
/ MORGENOCHTEND







(anonymous function) (wicket-ajax-jqu…568000.js:2875)
jQuery.event.dispatch (jquery-2.2.0-ve…568000.js:4732)
jQuery.event.add.elemData.handle (jquery-2.2.0-ve…568000.js:4544)
jQuery.extend.trigger (jquery-2.2.0-ve…568000.js:7788)
jQuery.fn.extend.triggerHandler (jquery-2.2.0-ve…568000.js:7878)
jQuery.extend.Event.publish (wicket-event-jq…3568000.js:285)
jQuery.extend.DOM.replace (wicket-ajax-jqu…568000.js:1760)
(anonymous function) (wicket-ajax-jqu…568000.js:1152)
FunctionsExecuter.processNext.run (wicket-ajax-jqu…3568000.js:157)
jQuery.extend.proxy.proxy (jquery-2.2.0-ve…3568000.js:492)
FunctionsExecuter.processNext (wicket-ajax-jqu…3568000.js:172)
FunctionsExecuter.start (wicket-ajax-jqu…3568000.js:184)
Wicket.Ajax.Call.doAjax.jQuery.ajax.complete (wicket-ajax-jqu…3568000.js:729)
jQuery.Callbacks.fire (jquery-2.2.0-ve…568000.js:3182)
jQuery.Callbacks.self.fireWith (jquery-2.2.0-ve…568000.js:3312)
done (jquery-2.2.0-ve…568000.js:8769)
jQuery.ajaxTransport.send.callback (jquery-2.2.0-ve…568000.js:9120)






















jQuery.extend.Head.containsElement (wicket-ajax-jqu…568000.js:2315)
(anonymous function) (wicket-ajax-jqu…568000.js:2204)
FunctionsExecuter.processNext.run (wicket-ajax-jqu…3568000.js:157)
jQuery.extend.proxy.proxy (jquery-2.2.0-ve…3568000.js:492)
FunctionsExecuter.processNext (wicket-ajax-jqu…3568000.js:172)
FunctionsExecuter.start (wicket-ajax-jqu…3568000.js:184)
Wicket.Ajax.Call.doAjax.jQuery.ajax.complete (wicket-ajax-jqu…3568000.js:729)
jQuery.Callbacks.fire (jquery-2.2.0-ve…568000.js:3182)
jQuery.Callbacks.self.fireWith (jquery-2.2.0-ve…568000.js:3312)
done (jquery-2.2.0-ve…568000.js:8769)
jQuery.ajaxTransport.send.callback (jquery-2.2.0-ve…568000.js:9120)









FunctionsExecuter.processNext.run (wicket-ajax-jqu…3568000.js:156)
jQuery.extend.proxy.proxy (jquery-2.2.0-ve…3568000.js:492)
FunctionsExecuter.processNext (wicket-ajax-jqu…3568000.js:172)
FunctionsExecuter.start (wicket-ajax-jqu…3568000.js:184)
Wicket.Ajax.Call.doAjax.jQuery.ajax.complete (wicket-ajax-jqu…3568000.js:729)
jQuery.Callbacks.fire (jquery-2.2.0-ve…568000.js:3182)
jQuery.Callbacks.self.fireWith (jquery-2.2.0-ve…568000.js:3312)
done (jquery-2.2.0-ve…568000.js:8769)
jQuery.ajaxTransport.send.callback (jquery-2.2.0-ve…568000.js:9120)











/ Einde DEBUG WICKET CLOCK


/ WICKET BEHAVIOR

[eric@localhost wicket]$ find -name "*Ajax*Behavior*java"
./wicket-core/src/test/java/org/apache/wicket/ajax/AjaxEventBehaviorTest.java
./wicket-core/src/test/java/org/apache/wicket/ajax/form/AjaxFormSubmitBehaviorTest.java
./wicket-core/src/test/java/org/apache/wicket/ajax/form/AjaxFormSubmitBehaviorTestPage.java

/ Einde WICKET BEHAVIOR

/ WICKET BREAKPOINTS DISABLE

ServletWebRequest.getContextRelativeUrl(String, String) line: 178	
ServletWebRequest.setParameters(Url) line: 170	
RequestCycle.<init>(RequestCycleContext) line: 129	



/ Einde WICKET BREAKPOINTS DISABLE

/ WICKET COOKIES

/ Lees	,
https://cwiki.apache.org/confluence/display/WICKET/Dealing+with+cookies

/ Einde WICKET COOKIES

/ JSP JSTL EL

/ we hebben download	,
-rw-r-----. 1 eric eric 4393085 Jul 18 08:36 bergsten_jsp.pdf
/ 3rd edition	,

/ Lees ook	,
http://archive.oreilly.com/pub/a/oreilly/java/news/jsptips_1100.html
http://www.ibm.com/developerworks/library/j-jstl0211/

/ 13	. 

/ we kunnen  <jsp:getProperty ...> of ${...} of <c:out>
/ TODO ( ze use <c:out ${...}> altijd samen	, dus hoezo 3rd alternative?)

/ we kunnen <jsp:setProperty ...> of   <c:set>

/ 13

/ get	,

/ par 6.3.1

To include the current fileName property value in the page, simply use this tag: 

<jsp:getProperty name="cartoon" property="fileName" /> 

The name attribute, set to cartoon, refers to the specific bean instance declared by 
the <jsp:useBean> action. The <jsp:getProperty> action locates this bean and 
asks it for the value of the property specified by the property attribute.

/ we zien in par 6.3.2
The JSP Expression Language (EL) also supports access to bean properties.
Reading a bean property with the JSTL EL 

<jsp:useBean id="cartoon" class="com.ora.jsp.beans.motd.CartoonBean" /> 
 <img src="images/${cartoon.fileName}"> 

 A third alternative that I'll discuss in Chapter 8 is the JSTL <c:out> action. 


/ 13	. 

/ set	,

/ par 6.4	,

If a bean property is writable (write-only or read/write access), there are two actions 
you can use to set the value: <jsp:setProperty> or <c:set>. 

/ we zien in par 6.4.2	, 

An alternative to the <jsp:setProperty> standard action is the JSTL <c:set>

action: 
 ... 
 <c:set target="${msg}" property="category" value="thoughts" /> 
 ... 
 <c:set target="${msg}" property="category" value="quotes" /> 
 ... 

The target attribute contains an EL expression that evaluates to the bean, the 
property attribute specifies the property name (as a static string or as an EL 
expression), and the value attribute contains the value (as a static string or as an EL 
expression). 
As with the choice between <jsp:getProperty> and an EL expression for reading a 
property value, using <jsp:setProperty> or <c:set> is largely a matter of 
preference. The <c:set> action is more flexible as you'll see later, so as long as you 
don't need to be JSP 1.1 compatible, it should be your first choice.  

/ Einde JSP JSTL EL

/ WEB JSP CLIENT SIDE

/ ws . wicket-testing_7.3
/ proj web

/ 13	. 

/ In index.html call op servlet 	, heeft service method	,
/ In pages gen by index.jsp  call op index.jsp	, dat is eq. met call op 'n servlet's service	,
/ 13	. 

/ index.jsp is echt server side 

/ Geef
http://localhost:9090/web/index.jsp
/ Geef	,
π and ε
/ we zien in devtools	,

Response Headers
Content-Type:text/html;charset=ISO-8859-1

Response
<html>
<body>
<h2>Hello &#960; and &#949;!</h2>
<form>
	<input type="text" name="name">
	<input type="submit">
</form>
</body>
</html>

/ In url field	,
http://localhost:9090/web/index.jsp?name=%26%23960%3B+and+%26%23949%3B 

/ charset moet utf-8	,
/ TODO
/ toch is reponse OK	,
/ TODO

/ 13	. 

/ Geef	,
http://localhost:9090/web/index2.jsp

/ Lees	,
http://api.jquery.com/triggerHandler/

/ index2.jsp
/ we moeten client-side de h2 update	, of #result	,
/ TODO
/ MORGENOCHTEND


/ Einde WEB JSP CLIENT SIDE

/ JQUERY TRIGGERHANDLER

/ Lees	,
http://api.jquery.com/triggerHandler/

.triggerHandler( eventType ) executes all handlers bound with jQuery for the event type.

/ Dus het doet wat er staat: trigger alle handlers bij de event	,


/ Einde JQUERY TRIGGERHANDLER

/ SITES 

http://examples-wickettutorial.rhcloud.com/wicket/bookmarkable/org.wicketTutorial.callbackurl.HomePage?0
https://ci.apache.org/projects/wicket/guide/6.x/guide/advanced.html
http://www.catonmat.net/blog/awk-one-liners-explained-part-two/
http://articles.slicehost.com/2007/10/10/rsync-exclude-files-and-folders
https://cwiki.apache.org/confluence/display/WICKET/Multiple+submit+buttons	 / cancel button 


/ Einde SITES 

/ JAVA CONCURRENCY

/ 7. 	

/ we maken in  ws wicket7_3  een Java project scratch	,

/ 7	. 

/ Zoek op
fail-fast iterator
fail-safe iterator

/ Geef fail-fast iterator
/ Lees  ,
http://javahungry.blogspot.com/2014/04/fail-fast-iterator-vs-fail-safe-iterator-difference-with-example-in-java.html

/ Geef  ,
concurrentmodificationexception recursive call
/ Lees  ,
http://stackoverflow.com/questions/8744714/java-list-and-recursion-leads-to-concurrent-modification-exception
/ MORGEN

/ 7	. 

/ Lees	, 
http://javahungry.blogspot.com/2014/04/fail-fast-iterator-vs-fail-safe-iterator-difference-with-example-in-java.html

/ ws wicket7_3
/ proj scratch

$ vi FailFast.java

public class FailFast {
	public static void main(String[] args) {
		HashMap<String, String>hashMap=new HashMap<String, String>();
		hashMap.put("apple","iphone");
		hashMap.put("samsumg", "galaxy");
		hashMap.put("lg", "nexus");
		
		Iterator<String>iterator=hashMap.keySet().iterator();
		while(iterator.hasNext()){
			String key=iterator.next();
			String value=hashMap.get(key);
			System.out.println(key+":"+value);
			hashMap.put("foo", "bar");
		}
	}
}

/ Zonder	, OK	,
			hashMap.put("foo", "bar");

/ Met	,	ERR	,
			hashMap.put("foo", "bar");
/ we zien	,
lg:nexus
Exception in thread "main" java.util.ConcurrentModificationException
	at java.util.HashMap$HashIterator.nextEntry(HashMap.java:922)
	at java.util.HashMap$KeyIterator.next(HashMap.java:956)
	at scratch.FailFast.main(FailFast.java:15)

/ Heel makkelijk oplossing	,  vervang HashMap door ConcurrentHashMap	,

$ vi FailSafe.java

public class FailSafe
	public static void main(String[] args) {
		ConcurrentHashMap<String, String>hashMap=new ConcurrentHashMap<String, String>();			// <-
		hashMap.put("apple","iphone");
		hashMap.put("samsumg", "galaxy");
		hashMap.put("lg", "nexus");
		
		Iterator<String>iterator=hashMap.keySet().iterator();
		while(iterator.hasNext()){
			String key=iterator.next();
			String value=hashMap.get(key);
			System.out.println(key+":"+value);
			hashMap.put("foo", "bar");
		}
	}
}

/ we kunnen deze voorbeelden ook maken met lists	,

$ vi FailFast2.java

public class FailFast2 {
	public static void main(String[] args) {
		List<String>list=new ArrayList<String>();									// or	,
//		List<String>list=Collections.synchronizedList(new ArrayList<String>());

		list.add("iphone");
		list.add("galaxy");
		list.add("lg");
		
		Iterator<String>iterator=list.iterator();
		while(iterator.hasNext()){
			String value=iterator.next();
			System.out.println(value);
			list.add("foo");			
		}
	}
}

/ Zonder	, OK	, 
			list.add("foo");			
/ Met 	, ERR
			list.add("foo");			
iphone
Exception in thread "main" java.util.ConcurrentModificationException
	at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:859)
	at java.util.ArrayList$Itr.next(ArrayList.java:831)
	at scratch.FailFast2.main(FailFast2.java:18)

/ we zien dus dat Collections.synchronizedList NIET helpt	,

/ Geef	,
concurrent list java
/ Lees	,
http://stackoverflow.com/questions/6916385/is-there-a-concurrent-list-in-javas-jdk

/ oplossing: CopyOnWriteArrayList	,

$ vi FailSafe2.java

public class FailSafe2 {
	public static void main(String[] args) {
		CopyOnWriteArrayList<String>list=new CopyOnWriteArrayList<String>();
		list.add("iphone");
		list.add("galaxy");
		list.add("lg");
		
		Iterator<String>iterator=list.iterator();
		while(iterator.hasNext()){
			String value=iterator.next();
			System.out.println(value);
			list.add("foo");			
		}

/ 7	. 

/ lees	,
http://stackoverflow.com/questions/8744714/java-list-and-recursion-leads-to-concurrent-modification-exception

/ ws wicket7_3
/ project scratch

$ vi Divide.java

public class Divide {
	public static void main(String[] args) {
		new Divide();
		
		
	}
	public Divide() {
		List<Integer>list=new ArrayList<Integer>();
		for(int i=0;i<8;i++)list.add(i+10);
		List<Integer>list2=divide(list);
		for(Integer i:list2){
			System.out.println(i);
		}
	}
	public List<Integer>divide(List<Integer>list){
		int n=list.size();
		
		
		if(n==2){
			return list;
		}
		else{
			List<Integer>left=list.subList(0, n/2);
			left=divide(left);
			List<Integer>right=list.subList(n/2, n);
			right=divide(right);
			left.addAll(right);
			return left;
		}
	}
}

Exception in thread "main" java.util.ConcurrentModificationException
	at java.util.ArrayList$SubList.checkForComodification(ArrayList.java:1169)
	at java.util.ArrayList$SubList.addAll(ArrayList.java:1037)
	at java.util.ArrayList$SubList.addAll(ArrayList.java:1028)
	at scratch.Divide.divide(Divide.java:32)
	at scratch.Divide.<init>(Divide.java:15)
	at scratch.Divide.main(Divide.java:8)

/ we hoeven alleen left te copy	, omdat ... TODO

$ vi Divide2.java

public class Divide2 {
	public static void main(String[] args) {
		new Divide2();
		
		
	}
	public Divide2() {
		List<Integer>list=new ArrayList<Integer>();
		for(int i=0;i<8;i++)list.add(i+10);
		List<Integer>list2=divide(list);
		for(Integer i:list2){
			System.out.println(i);
		}
	}
	public List<Integer>divide(List<Integer>list){
		int n=list.size();
		
		
		if(n==2){
			return list;
		}
		else{
			List<Integer>left= new ArrayList(list.subList(0, n/2));		// <-
			left=divide(left);
			List<Integer>right=list.subList(n/2, n);
			right=divide(right);
			left.addAll(right);
			return left;
		}
		
	}
	
}

/ OK	,

10
11
12
13
14
15
16
17

/ copy list	,
/ Lees	, 
http://stackoverflow.com/questions/689370/java-collections-copy-list-i-dont-understand

/ Dus OK	,
			List<Integer>left= new ArrayList(list.subList(0, n/2));
/ ERR	, ArrayOutOfBoundsException	,
			List<Integer>left=new ArrayList<Integer>(n/2);
			Collections.copy(left,list.subList(0, n/2));
/ left heeft size 0
/ TODO

/ 7	. 

/ Zoek op 	,
concurrentmodificationexception for loop

/ 7	. 

/ we hebben  zelf FailFast3, waar we de coll veranderen terwijl we loop	, maar we zien geen ConcurrentModificationException	,

/ ws wicket7_3
/ project scratch	,
$ vi FailFast3.java

public class FailFast3 {
	public static void main(String[] args) {
		List<String>list=new MyList<String>();									

		list.add("iphone");
		list.add("galaxy");
		list.add("lg");
		
		Iterator<String>iterator=list.iterator();
		while(iterator.hasNext()){
			String value=iterator.next();
			System.out.println(value);
			((MyList<String>)list).setFoo(7);
			
		}
		
		for(String s:list){
			System.out.println(s);
			((MyList<String>)list).setFoo(7);
		}
		
	}
}
class MyList<E> extends ArrayList<E>{
	private Integer foo;

	public Integer getFoo() {
		return foo;
	}

	public void setFoo(Integer foo) {
		this.foo = foo;
	}
	
	
}

/ we zien	, 

iphone
galaxy
lg
iphone
galaxy
lg

/ Probeer ook eens een TreeSet	, vervang root in deze TreeSet	, 
/ Lees	, 
https://docs.oracle.com/javase/7/docs/api/
/ MAANDAGOCHTEND

/ Einde JAVA CONCURRENCY

/ ACTIVEMQ TESTING

/ Geef in google	,
activemq testing
/ Lees	,
http://stackoverflow.com/questions/5217315/simulating-jms-junit
http://stackoverflow.com/questions/10463492/test-case-for-activemq
https://raymondhlee.wordpress.com/2012/08/18/testing-with-activemq-embedded-broker/

/ Lees	,
http://stackoverflow.com/questions/22684156/how-to-integration-test-some-spring-jms-config

/ Einde ACTIVEMQ TESTING

/ HIBERNATE LEAKS

/ Lees	,
https://softdevbuilttolast.wordpress.com/2010/09/30/making-sure-hibernate-does-not-leak-sessionsentity-managers/

/ Einde HIBERNATE LEAKS

/ MVC JQUERY

/ Lees	,
/ http://www.mkyong.com/spring-mvc/spring-mvc-jquery-autocomplete-example/

/ Einde MVC JQUERY

/ WICKET JSF

/ Lees	,
https://ci.apache.org/projects/wicket/guide/7.x/guide/modelsforms.html#modelsforms_6

/ 7	.

/ In JSF

$ vi register.xhtml
	<span>#{person.name}</span>

$ vi Person.java
public class Person{
	private String n;
	public String getName(){return n;}
	public void setName(String n){this.n=n;}
} 

/ In Wicket moeten we naast de HTML ook een Java file create	,

$ vi Register.html
	<span wicket:id="name"></span>


$ vi Person.java
public class Person{
	private String n;
	public String getName(){return n;}
	public void setName(String n){this.n=n;}
} 

$ vi Register.java
	Label name=new Label("name",new Model(person.getName()); 
	add(name);

/ we kunnen ook	,
	Label name=new Label("name",new PropertyModel(person,"name")); 

/ we kunnen ook	,
	setDefaultModel(new CompoundPropertyModel(person);		/ de page krijgt dit model	, 
	Label name=new Label("name");							/ de label heeft geen model, Wicket zoekt in parent 	,
	add(name);	

/ In Wicket build we zelf de component tree, de models hebben ref naar de backing object, een Person bijv,	
/ als we de component tree build, moeten we ook de models geven, de models zijn onderdeel van de components	,

//////////////////////////////////////////////////
/ een model is onderdeel van de component	, 
/ een model heeft ref naar backing object	,
/ deze ref is variable	,

/ 7	.

/ In wicket	,

IModel timeStampModel = new Model<String>(){
	@Override
	public String getObject() {
		return new Date().toString();
	}
};
add(new Label("timeStamp", timeStampModel));

/ Hoe in JSF	?
/ TODO




/ 7	. 

$ vi ./wicket-core/src/main/java/org/apache/wicket/model/LoadableDetachableModel.java

public abstract class LoadableDetachableModel<T> implements IModel<T>

   /** Keeps track of whether this model is attached or detached */
    private transient InternalState state = InternalState.DETACHED;
    /** temporary, transient object. */
    private transient T transientModelObject;

   @Override
    public final T getObject()
    {
            transientModelObject = load();
        return transientModelObject;

   @Override
    public void detach()
                state = InternalState.DETACHED;
                transientModelObject = null;





/ Einde WICKET JSF



/ MEMCACHED

/ Lees	,
http://stackoverflow.com/questions/12978895/heroku-postgres-ram-for-cache-vs-memcache-ram
http://wiki.postgresql.org/wiki/Tuning_Your_PostgreSQL_Server

/ Einde MEMCACHED

/ WICKET 7 LINKS

/ 7	. 

/ geef in google	,
wicket urlfor page
/ Lees	,
http://stackoverflow.com/questions/9580071/wicket-1-5-and-obtaining-a-url-to-page-instance

/ In 1.4 doen we	,
MyPage page = new MyPage(some, parameters);
getRequestCycle().urlFor(page).toString()
/ in 7	,
cycle.urlFor(new RenderPageRequestHandler(new PageProvider(page)))

/ LinkStudyPage in wicket7.
/ MORGEN


/ Lees over String externalLink in model op LinkStudyTargetPage	,
/ geef in google	,
wicket No get method defined for class:
http://stackoverflow.com/questions/8266110/propertymodel-expressions-exception-org-apache-wicket-wicketruntimeexception

/ Lees	,
http://wicketinaction.com/2011/07/wicket-1-5-mounting-resources/
http://wicketinaction.com/

/ 7	. 

/ als we de page voor het eerst query, dan zien we in de url bar	,
http://localhost:9090/wicket-testing/?0
/ en in HTML van de link	,
<a wicket:id="link" wicketpath="link" href="./?0-1.ILinkListener-link">[Link]</a>

/ dit zijn pageId-versionId	,

/ Als we enter geven in de url bar, of op de link click	, dan  loopt versionId op	, dus we zien	,
<a wicket:id="link" wicketpath="link" href="./?0-2.ILinkListener-link">[Link]</a>
<a wicket:id="link" wicketpath="link" href="./?0-3.ILinkListener-link">[Link]</a>
...

/ Ook zien we de text veranderen , dus [] 13	, [[]] 26	, ...
/ Dus iedere page heeft een versionId	, 

http://localhost:9090/wicket-testing
/ geven	, dan zien we in de url bar	,
http://localhost:9090/wicket-testing/?1
/ en in HTML van de link	,
<a wicket:id="link" wicketpath="link" href="./?1-1.ILinkListener-link">[Link]</a>

/ we kunnen  als we wicket-testing/?4 voor ons hebben, met een bepaalde versionId, terug gaan naar wicket-testing/?0	, we zien dan waar we waren gebleven, deze text kan veel langer zijn, [[[[[[[[[]]]]]]]] 130	, 
/ als we op ?0 zijn, en naar ?4 gaan	, en terug naar ?0	, dan is in de link de versionId met 2 verhoogt	, 
/ TODO

  


/ Einde WICKET 7 LINKS

/ DEBUG WICKET 7 LINKS

Daemon Thread [http-bio-9090-exec-71] (Suspended)	
	HomePageMapper(AbstractBookmarkableMapper).mapHandler(IRequestHandler) line: 422	
	HomePageMapper(MountedMapper).mapHandler(IRequestHandler) line: 159	
	SystemMapper(CompoundRequestMapper).mapHandler(IRequestHandler) line: 213	
	RequestCycle.mapUrlFor(IRequestHandler) line: 434	
	RequestCycle.urlFor(IRequestHandler) line: 534	
	LinkStudyPage.<init>() line: 63	

	@Override
	public Url mapHandler(IRequestHandler requestHandler)
this	HomePageMapper  (id=305)	
requestHandler	RenderPageRequestHandler  (id=150)	

		else if (requestHandler instanceof RenderPageRequestHandler)
		{
			if (handler.getPageProvider().isNewPageInstance())
false
/ want	,
/s
		boolean isNew = pageInstance == null;
false
/t
			IRequestablePage page = handler.getPage();
page	LinkStudyPage  (id=78)	

			if (checkPageInstance(page) &&
				(!pageMustHaveBeenCreatedBookmarkable() || ...)
/ JA
				PageInfo info = getPageInfo(handler);
/s
HomePageMapper(AbstractBookmarkableMapper).getPageInfo(IPageRequestHandler) line: 505	
		if (handler.isPageInstanceCreated())
/s
		return pageProvider.hasPageInstance();
true
/t
		{
			IRequestablePage page = handler.getPage();

			if (page.isPageStateless() == false)
/ NEE
/ want	,
/s
LinkStudyPage(Page).isPageStateless() line: 448	
		if (isBookmarkable() == false)
/ NEE
		if (getStatelessHint() == false)
/ NEE

/ MORGEN,
Page.class	, waar stateless=true set	?
/ TODO

			{
				pageId = page.getPageId();
/ NIET

/ NOTES 

WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
		processRequest(request, response, chain);
...
/s
WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
		if (!requestCycle.processRequestAndDetach())
/s
RequestCycle.processRequestAndDetach() line: 293	
			result = processRequest();
		}
		finally
		{
			detach();




/ Einde NOTES 

/ Einde DEBUG WICKET 7 LINKS

/ DEBUG WICKET 7 UNDEPLOY 

/ we maken een nieuwe tomcat	, en zorgen ervoor dat de appl NIET deployed is	, 
/ dan gaat filter eerst een Application maken	,

/ Als de appl al deployed is en we undeploy	, dan is de Application er al	, WH door Tomat of Wicket unser	TODO

/ ws /home/eric/Devel/Java/Eclipse/eclipse-jee-test/workspace-wicket7_2
/ project wicket-testing

/ debug tomcat7-or-jetty-remote-debug-on-wicket-examples-step-by-step
/ debug wicket-testing

/ KLAD
package org.apache.wicket.pageStore.DefaultPageStore
package org.apache.wicket.pageStore.DiskDataStore
package org.apache.wicket.pageStore.AsynchronousDataStore

/ 7	. 

/ we zien dat er 2 threads active	,

/ 13	. 
	DiskDataStore.removeData(String) line: 169	
	AsynchronousDataStore.removeData(String) line: 204	
	DefaultPageStore(AbstractPageStore).removePageData(String) line: 105	
	DefaultPageStore(AbstractCachingPageStore<P>).unbind(String) line: 95	
	PageStoreManager$SessionEntry.valueUnbound(HttpSessionBindingEvent) line: 309	
	...

/ 13	.
	WicketApplication(Application).internalDestroy() line: 741	
	WicketApplication(WebApplication).internalDestroy() line: 704	
	WicketFilter.destroy() line: 605	
	...


/ 13	. 

/ we debug eerst de 1ste,	

	PageStoreManager$SessionEntry.valueUnbound(HttpSessionBindingEvent) line: 309	

/ Intermezzo

/ de 2de thread was eerder in	, 
public class DefaultPageManagerProvider implements IPageManagerProvider
    @Override
    public IPageManager get(IPageManagerContext pageManagerContext)
    {
        IDataStore dataStore = newDataStore();

        StoreSettings storeSettings = getStoreSettings();

        if (dataStore.canBeAsynchronous())
        {
            int capacity = storeSettings.getAsynchronousQueueCapacity();
            dataStore = new AsynchronousDataStore(dataStore, capacity);
        }

        IPageStore pageStore = newPageStore(dataStore);
        return new PageStoreManager(application.getName(), pageStore, pageManagerContext);
	}
    protected IPageStore newPageStore(IDataStore dataStore)
    {
        int inmemoryCacheSize = getStoreSettings().getInmemoryCacheSize();
        ISerializer pageSerializer = application.getFrameworkSettings().getSerializer();
        return new DefaultPageStore(pageSerializer, dataStore, inmemoryCacheSize);
    }

    protected IDataStore newDataStore()
    {
        StoreSettings storeSettings = getStoreSettings();
        Bytes maxSizePerSession = storeSettings.getMaxSizePerSession();
        File fileStoreFolder = storeSettings.getFileStoreFolder();

        return new DiskDataStore(application.getName(), fileStoreFolder, maxSizePerSession);
    }

/ Einde Intermezzo

/ Intermezzo

this	PageStoreManager$SessionEntry  (id=6407)	
	serialVersionUID	1	
	afterReadObject	null	
	applicationName	"RepeaterExamplesApplication" (id=6444)	
	sessionCache	ArrayList<E>  (id=6445)	
	sessionId	"8C5C14ACC6C3D4ABCA814C31591160E3" (id=6419)	
store	DefaultPageStore  (id=6406)	


/ Einde Intermezzo

	DefaultPageStore(AbstractCachingPageStore<P>).unbind(String) line: 95	
	DefaultPageStore(AbstractPageStore).removePageData(String) line: 105	
	AsynchronousDataStore.removeData(String) line: 204	
	DiskDataStore.removeData(String) line: 169	

/ Einde DEBUG WICKET 7 UNDEPLOY 

/ DEBUG WICKET 7 DEPLOY

/ 7	. 

/ 13	. 

[eric@localhost apache-tomcat-8.0.28]$ bin/catalina.sh jpda run
/ ws workspace-wicket7
/ wicket-testing proj	,

tomcat7-or-jetty-remote-on-wicket-testing
wicket-testing-deploy


[eric@localhost Tomcat]$ pwd
/home/eric/Devel/Java/Tomcat
[eric@localhost Tomcat]$ tar xvzf  ~/Downloads/apache-tomcat-8.0.28.tar.gz
[eric@localhost apache-tomcat-8.0.28]$ vi conf/server.xml 
    <Connector port="9090" protocol="HTTP/1.1"
               connectionTimeout="20000"
               redirectPort="8443" />

$ vi bin/catalina.sh
#   JPDA_ADDRESS    (Optional) Java runtime options used when the "jpda start"
#                   command is executed. The default is localhost:8000.
JPDA_ADDRESS=9966
[eric@localhost apache-tomcat-8.0.28]$ bin/catalina.sh jpda run

$ vi conf/tomcat-users.xml
...
<role rolename="manager-gui"/>
<role rolename="manager-script"/>
<user username="tomcat" password="s3cret" roles="manager-gui,manager-script"/>
</tomcat-users>

/ we doen in eclipse	,
tomcat7-or-jetty-remote-on-wicket-testing
wicket-testing-deploy

/ er is nog geen wicket app deployed	, 

/ 13	. 

/ we voegen in eclipse als source dir	, file system toe	,
/home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28-src/java
/ check 'check subfolders'	,

/ 13	. 

[eric@localhost wicket-testing]$ less ./src/main/webapp/WEB-INF/web.xml
<web-app ...>
        <filter>
                <filter-name>wicket-testing</filter-name>
                <filter-class>org.apache.wicket.protocol.http.WicketFilter</filter-class>
                <init-param>
                        <param-name>applicationClassName</param-name>
                        <param-value>my.test.own.WicketApplication</param-value>
                </init-param>
        </filter>


/ we komen in	,

	WicketFilter.init(FilterConfig) line: 353	
		init(false, filterConfig);

	ApplicationFilterConfig.initFilter() line: 279	
            filter.init(this);
this	ApplicationFilterConfig  (id=3556)	
	context	StandardContext  (id=3552)	
	filter	WicketFilter  (id=3555)	
	filterDef	FilterDef  (id=3588)	
	instanceManager	DefaultInstanceManager  (id=3589)	
	...

	ApplicationFilterConfig.getFilter() line: 260	
        String filterClass = filterDef.getFilterClass();
        this.filter = (Filter) getInstanceManager().newInstance(filterClass);

        initFilter();

	ApplicationFilterConfig.<init>(Context, FilterDef) line: 105	
       if (filterDef.getFilter() == null) {
            getFilter();
 
	StandardContext.filterStart() line: 4583	
            for (Entry<String,FilterDef> entry : filterDefs.entrySet()) {
this	StandardContext  (id=3552)	
	filterDefs	HashMap<K,V>  (id=4853)	
		size	2	
		table	HashMap$Entry<K,V>[16]  (id=4918)	
			[0]	null	
			[1]	null	
			[2]	HashMap$Entry<K,V>  (id=4849)	
				key	"wicket-testing" (id=3818)	
				value	FilterDef  (id=3588)
					serialVersionUID	1	
					sm	StringManager  (id=3814)	
					asyncSupported	"false" (id=3815)	
					description	null	
					displayName	null	
					filter	null	
					filterClass	"org.apache.wicket.protocol.http.WicketFilter" (id=3816)	
					filterName	"wicket-testing" (id=3818)	
					largeIcon	null	
					parameters	HashMap<K,V>  (id=3820)	
{applicationClassName=my.test.own.WicketApplication}
					smallIcon	null	

                String name = entry.getKey();
                if (getLogger().isDebugEnabled()) {
                    getLogger().debug(" Starting filter '" + name + "'");
                }
                try {
                    ApplicationFilterConfig filterConfig =
                            new ApplicationFilterConfig(this, entry.getValue());

 


/ we vallen in	,
/s
WicketFilter.init(FilterConfig) line: 353	
		init(false, filterConfig);
/s
WicketFilter.init(boolean, FilterConfig) line: 386	
			// locate application instance unless it was already specified during construction
			if (application == null)
/ JA
			{
				applicationFactory = getApplicationFactory();
/s
WicketFilter.getApplicationFactory() line: 304	
		final String appFactoryClassName = filterConfig.getInitParameter(APP_FACT_PARAM);
null
		if (appFactoryClassName == null)
		{
			// If no context param was specified we return the default factory
			return new ContextParamWebApplicationFactory();
/t
WicketFilter.init(boolean, FilterConfig) line: 387	
				applicationFactory = getApplicationFactory();
/d
				application = applicationFactory.createApplication(this);
/s
ContextParamWebApplicationFactory.createApplication(WicketFilter) line: 38	
		final String applicationClassName = filter.getFilterConfig().getInitParameter(APP_CLASS_PARAM);
APP_CLASS_PARAM="applicationClassName"
applicationClassName	"my.test.own.WicketApplication" (id=3606)	
filter	WicketFilter  (id=3555)								/ wicket class
	filterConfig	ApplicationFilterConfig  (id=3556)		/ tomcat class
		filter	WicketFilter  (id=3555)	
		filterDef	FilterDef  (id=3588)	
			filterClass	"org.apache.wicket.protocol.http.WicketFilter" (id=3816)	
			filterName	"wicket-testing" (id=3818)	
			largeIcon	null	
			parameters	HashMap<K,V>  (id=3820)	
{applicationClassName=my.test.own.WicketApplication}
		instanceManager	DefaultInstanceManager  (id=3589)	

		return createApplication(applicationClassName);
/s
ContextParamWebApplicationFactory.createApplication(String) line: 64	
			final Class<?> applicationClass = Class.forName(applicationClassName, false, loader);
				return (WebApplication)applicationClass.newInstance();
/s
WicketApplication.<init>() line: 14	
/s
WicketApplication(WebApplication).<init>() line: 186	
/s
WicketApplication(Application).<init>() line: 269	

	// Listeners

	/** */
	private final ComponentOnBeforeRenderListenerCollection componentPreOnBeforeRenderListeners = new ComponentOnBeforeRenderListenerCollection();

	/** */
	private final ComponentOnBeforeRenderListenerCollection componentPostOnBeforeRenderListeners = new ComponentOnBeforeRenderListenerCollection();

	/** */
	private final ComponentOnAfterRenderListenerCollection componentOnAfterRenderListeners = new ComponentOnAfterRenderListenerCollection();

	/** */
	private final RequestCycleListenerCollection requestCycleListeners = new RequestCycleListenerCollection();

	private final ApplicationListenerCollection applicationListeners = new ApplicationListenerCollection();

	private final SessionListenerCollection sessionListeners = new SessionListenerCollection();

	/** list of {@link IComponentInstantiationListener}s. */
	private final ComponentInstantiationListenerCollection componentInstantiationListeners = new ComponentInstantiationListenerCollection();

	/** list of {@link IComponentInitializationListener}s. */
	private final ComponentInitializationListenerCollection componentInitializationListeners = new ComponentInitializationListenerCollection();

	/** list of {@link org.apache.wicket.application.IComponentOnConfigureListener}s. */
	private final ComponentOnConfigureListenerCollection componentOnConfigureListeners = new ComponentOnConfigureListenerCollection();

	/** list of {@link IHeaderContributor}s. */
	private final HeaderContributorListenerCollection headerContributorListeners = new HeaderContributorListenerCollection();

	private final BehaviorInstantiationListenerCollection behaviorInstantiationListeners = new BehaviorInstantiationListenerCollection();

///////////////////////////////

	/**
	 * Context for PageManager to interact with rest of Wicket
	 */
	private final IPageManagerContext pageManagerContext = new DefaultPageManagerContext();

		// Install default component instantiation listener that uses
		// authorization strategy to check component instantiations.
		getComponentInstantiationListeners().add(new IComponentInstantiationListener()
			...

	/*
	 * Can contain at most 1000 responses and each entry can live at most one minute. For now there
	 * is no need to configure these parameters externally.
	 */
	private final StoredResponsesMap storedResponses = new StoredResponsesMap(1000, Duration.seconds(60));

		ajaxRequestTargetListeners = new AjaxRequestTargetListenerCollection();

/ Uiteindelijk	,

this	WicketApplication  (id=3847)	
	applicationKeyToApplication	HashMap<K,V>  (id=4750)	
	CONFIGURATION	"configuration" (id=4751)	
	log	Log4jLogger  (id=4752)	
	log	Log4jLogger  (id=4753)	
	META_INF_RESOURCES	"META-INF/resources" (id=4754)	
	PROPERTIES_FILE_EXTENSION	".properties" (id=4755)	
	ajaxRequestTargetListeners	AjaxRequestTargetListenerCollection  (id=4749)	
	ajaxRequestTargetProvider	null	
	applicationListeners	ApplicationListenerCollection  (id=4756)	
		logger	Log4jLogger  (id=4766)	
		serialVersionUID	1	
		listeners	CopyOnWriteArrayList<E>  (id=4767)	
	applicationSettings	null	
	behaviorInstantiationListeners	BehaviorInstantiationListenerCollection  (id=4757)	
	componentInitializationListeners	ComponentInitializationListenerCollection  (id=4758)	
	componentInstantiationListeners	ComponentInstantiationListenerCollection  (id=4760)	
	componentOnAfterRenderListeners	ComponentOnAfterRenderListenerCollection  (id=4761)	
	componentOnConfigureListeners	ComponentOnConfigureListenerCollection  (id=4763)	
	componentPostOnBeforeRenderListeners	ComponentOnBeforeRenderListenerCollection  (id=4769)	
	componentPreOnBeforeRenderListeners	ComponentOnBeforeRenderListenerCollection  (id=4770)	
	configurationType	null	
	converterLocator	null	
	debugSettings	null	
	encoderContext	null	
	exceptionMapperProvider	null	
	exceptionSettings	null	
	filterFactoryManager	null	
	frameworkSettings	null	
	headerContributorListeners	HeaderContributorListenerCollection  (id=4775)	
	headerResponseDecorator	null	
	initializers	ArrayList<E>  (id=4776)	
	javaScriptLibrarySettings	null	
	markupSettings	null	
	metaData	null	
	name	null	
	pageFactory	null	
	pageManager	null	
	pageManagerContext	DefaultPageManagerContext  (id=4777)	
	pageManagerProvider	null	
	pageRendererProvider	null	
	pageSettings	null	
	requestCycleListeners	RequestCycleListenerCollection  (id=4778)	
	requestCycleProvider	null	
	requestCycleSettings	null	
	requestLogger	null	
	requestLoggerSettings	null	
	resourceBundles	null	
	resourceReferenceRegistry	null	
	resourceSettings	null	
	rootRequestMapper	null	
	securitySettings	null	
	servletContext	null	
	sessionAttributePrefix	null	
	sessionListeners	SessionListenerCollection  (id=4779)	
	sessionStore	null	
	sessionStoreProvider	null	
	settingsAccessible	false	
	sharedResources	null	
	storedResponses	StoredResponsesMap  (id=4780)	
	storeSettings	null	
	wicketFilter	null	

/ TODO CopyOnWriteArrayList<E> 

/t
WicketFilter.init(boolean, FilterConfig) line: 390	
				application = applicationFactory.createApplication(this);
/d
			application.setName(filterConfig.getFilterName());
filterConfig	ApplicationFilterConfig  (id=3556)	
	filterDef	FilterDef  (id=3588)	
		filterName	"wicket-testing" (id=3818)	

			application.setWicketFilter(this);
/s
WicketApplication(WebApplication).setWicketFilter(WicketFilter) line: 669	
		this.wicketFilter = wicketFilter;
		servletContext = wicketFilter.getFilterConfig().getServletContext();
/ antwoord	,
StandardEngine[Catalina].StandardHost[localhost].StandardContext[/wicket-testing]
/ want	,
/s
ApplicationFilterConfig.getServletContext() line: 204	/ Tomcat	,
this	ApplicationFilterConfig  (id=4354)	
        return this.context.getServletContext();
/antwoord	,
this	ApplicationFilterConfig  (id=4354)	
	context	StandardContext  (id=4346)	
		context	ApplicationContext  (id=5412)	
			facade	ApplicationContextFacade  (id=4417)		 /facade om context ApplicationContext  (id=5412)
/ StandardContext=webapp	, wat is ApplicationContext?
/TODO
/ want	,
/s
StandardContext.getServletContext() line: 2168	
        return (context.getFacade());
/=
        	return (this.facade);

/t
WicketFilter.init(boolean, FilterConfig) line: 394	
			application.setWicketFilter(this);
/d
/ HIER HIER HIER
			// Allow the filterPath to be preset via setFilterPath()
			String configureFilterPath = getFilterPath();
null
/=WicketFilter.filterPath
			if (configureFilterPath == null)
			{
				configureFilterPath = getFilterPathFromConfig(filterConfig);
/s
WicketFilter.getFilterPathFromConfig(FilterConfig) line: 573	
		String result = filterConfig.getInitParameter(FILTER_MAPPING_PARAM);
FILTER_MAPPING_PARAM="filterMappingUrlPattern"
null

/ de ApplicationFilterConfig wordt steeds meegegeven	, 
filterConfig	ApplicationFilterConfig  (id=3556)	
	filterDef	FilterDef  (id=3588)	
		filterClass	"org.apache.wicket.protocol.http.WicketFilter" (id=3816)	
		filterName	"wicket-testing" (id=3818)	
		parameters	HashMap<K,V>  (id=3820)	
{applicationClassName=my.test.own.WicketApplication}

		return result;
null

/t
WicketFilter.init(boolean, FilterConfig) line: 400	
			// Allow the filterPath to be preset via setFilterPath()
			String configureFilterPath = getFilterPath();
/=
					return filterPath;
null
			if (configureFilterPath == null)
			{
				configureFilterPath = getFilterPathFromConfig(filterConfig);
/s
WicketFilter.getFilterPathFromConfig(FilterConfig) line: 573	
		String result = filterConfig.getInitParameter(FILTER_MAPPING_PARAM);
FILTER_MAPPING_PARAM="filterMappingUrlPattern"

/ Intermezzo

/ Dit kan dus WH in de web.xml	,
/ TODO

	<filter>
		<filter-name>wicket-testing</filter-name>
		<filter-class>org.apache.wicket.protocol.http.WicketFilter</filter-class>
		<init-param>
			<param-name>applicationClassName</param-name>
			<param-value>my.test.own.WicketApplication</param-value>
		</init-param>
		<init-param>
			<param-name>filterMappingUrlPattern</param-name>
			<param-value>/*</param-value>
		</init-param>
	</filter>
<!--
	<filter-mapping>
		<filter-name>wicket-testing</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
-->
/ TODO

/ Ook, 	<filter-name>wicket-testing</filter-name>
/ Moet dit de app name zijn , dat is wicket-testing.war	?
/ WH NIET,	 wordt WH alleen used in <filter-mapping/>	, maar ook wicket uses deze name, wordt application's name	,
/ TODO

/ Einde Intermezzo

				if (configureFilterPath == null)
				{
					configureFilterPath = getFilterPathFromWebXml(isServlet, filterConfig);
/ isServlet=false, want het is een filter	,
/s
WicketFilter.getFilterPathFromWebXml(boolean, FilterConfig) line: 533	
		return new WebXmlFile().getUniqueFilterPath(isServlet, filterConfig);
/s
WebXmlFile.getUniqueFilterPath(boolean, FilterConfig) line: 66	
/=
	public final String getUniqueFilterPath(final boolean isServlet, final FilterConfig filterConfig)
isServlet=false
		String filterName = filterConfig.getFilterName();
wicket-testing
		Set<String> paths = getFilterPath(isServlet, filterConfig.getServletContext(), filterName);
[]
/s
ApplicationFilterConfig.getServletContext() line: 204	
        return this.context.getServletContext();
this	ApplicationFilterConfig  (id=3556)	
	context	StandardContext  (id=3552)	
		context	ApplicationContext  (id=4902)	
			facade	ApplicationContextFacade  (id=5140)	
/t
/s
WebXmlFile.getFilterPath(boolean, ServletContext, String) line: 83	
/=
	public final Set<String> getFilterPath(final boolean isServlet,inal ServletContext servletContext, final String filterName)
this	WebXmlFile  (id=5087)	
isServlet	false	
servletContext	ApplicationContextFacade  (id=5140)	
filterName	"wicket-testing" (id=3818)	

		InputStream is = servletContext.getResourceAsStream("/WEB-INF/web.xml");
//////////////////
/ Hier hij use servletContext=webapp	, om /WEB-INF/web.xml te vinden	,k

				return getFilterPath(isServlet, filterName, is);
/s
WebXmlFile.getFilterPath(boolean, String, InputStream) line: 201	

		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		DocumentBuilder builder = factory.newDocumentBuilder();

		// try to pull DTD from local set of entities
		builder.setEntityResolver(CustomEntityResolver.getPreloaded());
/ TODO
		Document document = builder.parse(is);

		String tag = (isServlet ? "servlet" : "filter");
filter
		String mapping = tag + "-mapping";
filter-mapping
		String name = tag + "-name";
filter-name

$ vi web.xml
	<filter-mapping>
		<filter-name>wicket-testing</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

		Set<String> urlPatterns = getFilterPaths(filterName, mapping, name, document.getChildNodes());
mapping="filter-mapping"
name="filter-name"
[/*]
/ TODO
		for (String urlPattern : urlPatterns)
		{
			stripped.add(urlPattern.substring(1, urlPattern.length() - 1));
		}
		return stripped;
[""]
/ is Map	, "":new Object()	, 

/ substring(a,b) is vanaf index a tot b	, dus [a,b>	, 
/ hier  

/t
WebXmlFile.getUniqueFilterPath(boolean, FilterConfig) line: 68	
		Set<String> paths = getFilterPath(isServlet, filterConfig.getServletContext(), filterName);
/d
paths	HashSet<E>  (id=5773)	
	map	HashMap<K,V>  (id=5785)	
		size	1	
		table	HashMap$Entry<K,V>[1]  (id=5797)	
			[0]	HashMap$Entry<K,V>  (id=5800)	
				key	"" (id=5802)	
				value	Object  (id=5782)	

		return uniquePath(paths, isServlet, filterName);
/=
			if (paths.size() == 1)
			{
				return paths.iterator().next();
/t
WicketFilter.init(boolean, FilterConfig) line: 404	
					configureFilterPath = getFilterPathFromWebXml(isServlet, filterConfig);
""
/ Hij filter dus nergens op	, 
/ Hij heeft blijkbaar de key "" gepakt	, WH is een Set de keys uit de HashMap in de Set	,

				if (configureFilterPath != null)
				{
					setFilterPath(configureFilterPath);
/s
WicketFilter.setFilterPath(String) line: 696	
			else
			{
				filterPathLength = filterPath.length();
0
			}
		}
		this.filterPath = filterPath;
""
/t
WicketFilter.init(boolean, FilterConfig) line: 423	
					setFilterPath(configureFilterPath);
/d
			ThreadContext.setApplication(application);
/ ThreadContext is een wicket class	,
/s
ThreadContext.setApplication(Application) line: 90	
		ThreadContext context = get(true);
/s
ThreadContext.get(boolean) line: 44	
/=
	public static ThreadContext get(boolean createIfDoesNotExist)

		ThreadContext context = threadLocal.get();
null
			if (createIfDoesNotExist)
/ JA
			{
				context = new ThreadContext();
				threadLocal.set(context);
		return context;

context	ThreadContext  (id=6832)	
	threadLocal	ThreadLocal<T>  (id=6831)	
	application	null	
	requestCycle	null	
	session	null	


/ Intermezzo

/ ThreadLocal is een manager om het data objects heen	, die ervoor zorgt dat iedere thread een eigen data object heeft	,

/ Voorbeeld	,

public class ThrLocTest2{

    public class R implements Runnable{
        private ThreadLocal<Integer>l=new ThreadLocal<Integer>();
        @Override public void run(){
            l.set((int)(Math.random()*1000));
            try{Thread.sleep(2000);}catch(Exception e){}
            System.out.println(l.get());
            l.remove();
        }
    }

    public static void main(String...args){
        new ThrLocTest2();
    }
    public ThrLocTest2(){
        R r=new R();
        Thread t1=new Thread(r);
        Thread t2=new Thread(r);
        t1.start();
        t2.start();
        try{t1.join();}catch(Exception _){}
        try{t2.join();}catch(Exception _){}
    }
}
/ Einde Intermezzo


/t
ThreadContext.setApplication(Application) line: 91	
		ThreadContext context = get(true);
/d
		context.application = application;

/ Dus application is per thread
/ TODO

/t
WicketFilter.init(boolean, FilterConfig) line: 426	
			ThreadContext.setApplication(application);
/d
			try
			{
				application.initApplication();
/s
WicketApplication(Application).initApplication() line: 909	
		if (name == null)
/ NEE
/ Intermezzo

/ Called in 

$ vi web.xml

	<filter>
		<filter-name>wicket-testing</filter-name>
		<filter-class>org.apache.wicket.protocol.http.WicketFilter</filter-class>
		<init-param>
			<param-name>applicationClassName</param-name>
			<param-value>my.test.own.WicketApplication</param-value>
		</init-param>
	</filter>

	<filter-mapping>
		<filter-name>wicket-testing</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>


WicketFilter.class
	public void init(final boolean isServlet, final FilterConfig filterConfig)
		throws ServletException
	{
				application = applicationFactory.createApplication(this);
			application.setName(filterConfig.getFilterName());

/ Dus filter-name wordt niet alleen used door filter-mapping	, maar  wicket use ook 	,
j
/ Einde Intermezzo

		internalInit();
/s
WicketApplication(WebApplication).internalInit() line: 723	
		super.internalInit();
/s
WicketApplication(Application).internalInit() line: 777	
		PageSettings pageSettings = getPageSettings();
/s
WicketApplication(Application).getPageSettings() line: 1295	
		if (pageSettings == null)
		{
			pageSettings = new PageSettings();
/t
WicketApplication(Application).internalInit() line: 781	
		PageSettings pageSettings = getPageSettings();
/d
		// Install default component resolvers
		pageSettings.addComponentResolver(new MarkupInheritanceResolver());
/ detects <wicket:extend/> and <wicket:child/>
		pageSettings.addComponentResolver(new HtmlHeaderResolver());
/ handles <head/> and <wicket:head/>
		pageSettings.addComponentResolver(new WicketLinkTagHandler());
/ handles <a href="..."/> en NIET <wicket:link/>
		pageSettings.addComponentResolver(new WicketMessageResolver());
/ handles <wicket:message/>
		pageSettings.addComponentResolver(new FragmentResolver());
		pageSettings.addComponentResolver(new RelativePathPrefixHandler());
/ handles href="my.gif" to href="/the/path/my.gif"
		pageSettings.addComponentResolver(new EnclosureHandler());
		pageSettings.addComponentResolver(new InlineEnclosureHandler());
		pageSettings.addComponentResolver(new WicketMessageTagHandler());
		pageSettings.addComponentResolver(new WicketContainerResolver());
/ resolves <wicket:container/>

/ Zonet page settings, 	nu resource settings,	

		getResourceSettings().getResourceFinders().add(new ClassPathResourceFinder(""));
/s
WicketApplication(Application).getResourceSettings() line: 1387	
		if (resourceSettings == null)
		{
			resourceSettings = new ResourceSettings(this);
/s
ResourceSettings.<init>(Application) line: 220	
		this.application = application;
		stringResourceLoaders.add(new ComponentStringResourceLoader());
		stringResourceLoaders.add(new PackageStringResourceLoader());
		stringResourceLoaders.add(new ClassStringResourceLoader(application.getClass()));
application.getClass()=my.test.own.WicketApplication
/s
	public ClassStringResourceLoader(final Class<?> clazz)
	{
		clazzRef = new WeakReference<Class<?>>(clazz);
/ TODO
/t
		stringResourceLoaders.add(new ValidatorStringResourceLoader());
		stringResourceLoaders.add(new InitializerStringResourceLoader(application.getInitializers()));
application.getInitializers()=[]
/t
WicketApplication(Application).internalInit() line: 792	
		getResourceSettings().getResourceFinders().add(new ClassPathResourceFinder(""));
/d
this	WicketApplication  (id=3534)	
	resourceSettings	ResourceSettings  (id=3559)	
		resourceFinders	ArrayList<E>  (id=3562)	
[[classpath]]
		stringResourceLoaders	ArrayList<E>  (id=3630)	
[org.apache.wicket.resource.loader.ComponentStringResourceLoader@4c9fbd73,
 org.apache.wicket.resource.loader.PackageStringResourceLoader@b4ef052,
 org.apache.wicket.resource.loader.ClassStringResourceLoader@6b839d4a,
 org.apache.wicket.resource.loader.ValidatorStringResourceLoader@dcb9c6b,
 org.apache.wicket.resource.loader.InitializerStringResourceLoader@328a3be0]

		// Install button image resource factory
		getResourceSettings().addResourceFactory("buttonFactory",
			new DefaultButtonImageResourceFactory());

this	WicketApplication  (id=3534)	
	resourceSettings	ResourceSettings  (id=3559)	
		nameToResourceFactory	HashMap<K,V>  (id=3624)	
{buttonFactory=org.apache.wicket.markup.html.image.resource.DefaultButtonImageResourceFactory@209752ed}

		String applicationKey = getApplicationKey();
/=getName()==name="wicket-testing"
		applicationKeyToApplication.put(applicationKey, this);
/ was AL	,

		converterLocator = newConverterLocator();
/=
			return new ConverterLocator();
/ 'n registry	,
/s
	private final Map<String, IConverter<?>> classToConverter = new HashMap<String, IConverter<?>>();
ConverterLocator.<init>() line: 161	
		set(Boolean.TYPE, BooleanConverter.INSTANCE);
/=
			return classToConverter.put(c.getName(), converter);
		set(Boolean.class, BooleanConverter.INSTANCE);
		set(Byte.TYPE, ByteConverter.INSTANCE);
		set(Byte.class, ByteConverter.INSTANCE);
		set(Character.TYPE, CharacterConverter.INSTANCE);
		set(Character.class, CharacterConverter.INSTANCE);
		set(Double.TYPE, DoubleConverter.INSTANCE);
		set(Double.class, DoubleConverter.INSTANCE);
		set(Float.TYPE, FloatConverter.INSTANCE);
		set(Float.class, FloatConverter.INSTANCE);
		set(Integer.TYPE, IntegerConverter.INSTANCE);
		set(Integer.class, IntegerConverter.INSTANCE);
		set(Long.TYPE, LongConverter.INSTANCE);
		set(Long.class, LongConverter.INSTANCE);
		set(Short.TYPE, ShortConverter.INSTANCE);
		set(Short.class, ShortConverter.INSTANCE);
		set(BigDecimal.class, new BigDecimalConverter());
		set(BigInteger.class, new BigIntegerConverter());
		set(Date.class, new DateConverter());
		set(java.sql.Date.class, new SqlDateConverter());
		set(java.sql.Time.class, new SqlTimeConverter());
		set(java.sql.Timestamp.class, new SqlTimestampConverter());
		set(Calendar.class, new CalendarConverter());

/t
WicketApplication(Application).internalInit() line: 803	
		converterLocator = newConverterLocator();
/d
		setPageManagerProvider(new DefaultPageManagerProvider(this));
IPageManagerProvider implementation that creates new instance of IPageManager that persists the pages in DiskDataStore
		resourceReferenceRegistry = newResourceReferenceRegistry();
/=
			return new ResourceReferenceRegistry();
/s
ResourceReferenceRegistry.<init>() line: 101	
		this(new DefaultResourceReferenceFactory());
/s
ResourceReferenceRegistry.<init>(IResourceReferenceFactory) line: 115	
		this.resourceReferenceFactory = Args.notNull(resourceReferenceFactory, "resourceReferenceFactory");
		// Initial the auto-add list for a maximum of 1000 entries
		setAutoAddedCapacity(autoAddedCapacity);
1000

/t
WicketApplication(Application).internalInit() line: 805	
		resourceReferenceRegistry = newResourceReferenceRegistry();
/d
		sharedResources = newSharedResources(resourceReferenceRegistry);
/s
			return new SharedResources(registry);
/s
		this.registry = Args.notNull(registry, "registry");
/t
WicketApplication(Application).internalInit() line: 805	
		sharedResources = newSharedResources(resourceReferenceRegistry);
/d
		resourceBundles = newResourceBundles(resourceReferenceRegistry);
/s
	public ResourceBundles(final ResourceReferenceRegistry registry)
	{
		this.registry = Args.notNull(registry, "registry");
		this.providedResourcesToBundles = new HashMap<HeaderItem, HeaderItem>();
/t
WicketApplication(Application).internalInit() line: 809	
		resourceBundles = newResourceBundles(resourceReferenceRegistry);
/d
		// set up default request mapper
		setRootRequestMapper(new SystemMapper(this));
/s
public class SystemMapper extends CompoundRequestMapper
{
	public SystemMapper(final Application application)
	{
		this.application = application;

this	SystemMapper  (id=4680)	
	application	WicketApplication  (id=3534)	
	mappers	CopyOnWriteArrayList<E>  (id=4683)	
/ set door CompoundRequestMapper.<init>	,

		add(new PageInstanceMapper());
Decodes and encodes the following URLs: ...
		add(new BookmarkableMapper());
Decodes and encodes the following URLs: ...
/s
BookmarkableMapper.<init>() line: 60	
		this(new PageParametersEncoder());

		add(new HomePageMapper(new HomePageProvider(application)));
		add(new ResourceReferenceMapper(new PageParametersEncoder(),
			new ParentFolderPlaceholderProvider(application), getResourceCachingStrategy()));
		add(new UrlResourceReferenceMapper());
		add(RestartResponseAtInterceptPageException.MAPPER);
		add(new BufferedResponseMapper());
/t
SystemMapper.<init>(Application) line: 50	
		add(new BookmarkableMapper());
/d
		add(new HomePageMapper(new HomePageProvider(application)));
A mapper that is used when a request to the home page ("/") is made
/ HomePageMapper extends MountedMapper	,

/ Intermezzo

public class SystemMapper extends CompoundRequestMapper
{
	private static class ParentFolderPlaceholderProvider implements IProvider<String>
	{
		private final Application application;

		public ParentFolderPlaceholderProvider(Application application)
		{
			this.application = application;
		}

		@Override
		public String get()
		{
			return application.getResourceSettings().getParentFolderPlaceholder();
		}
	}

	private static class HomePageProvider<C extends IRequestablePage> implements IProvider<Class<C>>
	{
		private final Application application;

		private HomePageProvider(final Application application)
		{
			this.application = application;
		}

		@Override
		public Class<C> get()
		{
			return (Class<C>) application.getHomePage();
		}
	}

	private IProvider<IResourceCachingStrategy> getResourceCachingStrategy()
	{
		return new IProvider<IResourceCachingStrategy>()
		{
			@Override
			public IResourceCachingStrategy get()
			{
				return application.getResourceSettings().getCachingStrategy();
			}
		};
	}

/ Einde Intermezzo

		add(new ResourceReferenceMapper(new PageParametersEncoder(), new ParentFolderPlaceholderProvider(application), getResourceCachingStrategy()));
/s
 * Simple encoder with direct indexed/named parameters mapping.
	public PageParametersEncoder()
/t
/s
ResourceReferenceMapper.<init>(IPageParametersEncoder, IProvider<String>, IProvider<IResourceCachingStrategy>) line: 53	
/=
	public ResourceReferenceMapper(IPageParametersEncoder pageParametersEncoder, IProvider<String> parentPathPartEscapeSequence, IProvider<IResourceCachingStrategy> cachingStrategy)
		super(new BasicResourceReferenceMapper(pageParametersEncoder, cachingStrategy), parentPathPartEscapeSequence); 

/t
SystemMapper.<init>(Application) line: 53	
		add(new ResourceReferenceMapper(new PageParametersEncoder(), new ParentFolderPlaceholderProvider(application), getResourceCachingStrategy()));
		add(new UrlResourceReferenceMapper());
		add(RestartResponseAtInterceptPageException.MAPPER);
		add(new BufferedResponseMapper());

/t
WicketApplication(Application).internalInit() line: 809	
		// set up default request mapper
		setRootRequestMapper(new SystemMapper(this));
/s
			this.rootRequestMapper = rootRequestMapper;
/t
WicketApplication(Application).internalInit() line: 809	
		pageFactory = newPageFactory();
/s
			return new DefaultPageFactory();

/ Intermezzo

/ zonet	,
		setPageManagerProvider(new DefaultPageManagerProvider(this));
/ een page manager provider creates new instance of IPageManager that persists the pages in DiskDataStore 

/ een page factory constructs Pages.

/ Einde Intermezzo

/t
WicketApplication(Application).internalInit() line: 813	
		pageFactory = newPageFactory();
/d
		requestCycleProvider = new DefaultRequestCycleProvider();
/s
Application$DefaultRequestCycleProvider.<init>(Application$1) line: 1722	
/ creates RequestCycle's	,

		exceptionMapperProvider = new DefaultExceptionMapperProvider();
/s
Application$DefaultExceptionMapperProvider.<init>(Application$1) line: 1710	
/ create DefaultExceptionMapper's	,

		// add a request cycle listener that logs each request for the requestlogger.
		getRequestCycleListeners().add(new RequestLoggerRequestCycleListener());

/t
WicketApplication(WebApplication).internalInit() line: 725	
		super.internalInit();
/d
		getResourceSettings().getResourceFinders().add(new WebApplicationPath(getServletContext(), ""));
/s
public final class WebApplicationPath implements IResourceFinder
{
	/**
	 * Constructor
	 * 
	 * @param servletContext
	 *            The webapplication context where the resources must be loaded from
	 * @param path
	 *            The path inside the app context where to look.
	 */
	public WebApplicationPath(final ServletContext servletContext, String path)
		this.servletContext = servletContext;
		if (!path.startsWith("/"))
		{
			path = "/" + path;
path="/"
		this.path = path;
/t
WicketApplication(WebApplication).internalInit() line: 727	
		getResourceSettings().getResourceFinders().add(
			new WebApplicationPath(getServletContext(), ""));
/d
		getResourceSettings().getResourceFinders().add(
			new ClassPathResourceFinder(META_INF_RESOURCES));
/s
ClassPathResourceFinder.<init>(String) line: 51	
			this.prefix = prefix + "/";
prefix	"META-INF/resources" (id=3828)	
/t
WicketApplication(WebApplication).internalInit() line: 731	
		getResourceSettings().getResourceFinders().add(
			new ClassPathResourceFinder(META_INF_RESOURCES));
/d
this	WicketApplication  (id=3195)	
	resourceSettings	ResourceSettings  (id=3853)	
		resourceFinders	ArrayList<E>  (id=3858)	
[[classpath], [webapppath: /], [classpath: META-INF/resources/]]

/ In meer detail	,
this	WicketApplication  (id=3195)	
	resourceSettings	ResourceSettings  (id=3853)	
		resourceCachingStrategy	null	
		resourceFinders	ArrayList<E>  (id=3858)	
			elementData	Object[10]  (id=3868)	
				[0]	ClassPathResourceFinder  (id=3871)	
					prefix	"" (id=3873)	
				[1]	WebApplicationPath  (id=4397)	
					WEB_INF	"WEB-INF/" (id=4448)	
					path	"/" (id=4400)	
					servletContext	ApplicationContextFacade  (id=3855)	
					prefix	"META-INF/resources/" (id=4445)	
				[2]	ClassPathResourceFinder  (id=4402)	
					prefix	"META-INF/resources/" (id=4445)	

		// Set default error pages for HTML markup
		getApplicationSettings().setPageExpiredErrorPage(PageExpiredErrorPage.class);
/s
	/**
	 * Sets the page expired page class. The class must be bookmarkable and must extend Page.
	 *
	 * @param pageExpiredErrorPage
	 *            The pageExpiredErrorPage to set.
	 * @return {@code this} object for chaining
	 */
	public ApplicationSettings setPageExpiredErrorPage(final Class<? extends Page> pageExpiredErrorPage)
	{
		this.pageExpiredErrorPage = new WeakReference<Class<? extends Page>>(pageExpiredErrorPage);
/s
/**
 * Base class for HTML pages. This subclass of Page simply returns HTML when asked for its markup
 * type. It also has a method which subclasses can use to retrieve a bookmarkable link to the
 * application's home page.
 * <p>
 * WebPages can be constructed with any constructor when they are being used in a Wicket session,
 * but if you wish to link to a Page using a URL that is "bookmarkable" (which implies that the URL
 * will not have any session information encoded in it, and that you can call this page directly
 * without having a session first directly from your browser), you need to implement your Page with
 * a no-arg constructor or with a constructor that accepts a PageParameters argument (which wraps
 * any query string parameters for a request). In case the page has both constructors, the
 * constructor with PageParameters will be used.
 * 
 */
public class WebPage extends Page
...

/ Intermezzo

/ session = http session = ? wanneer gestart	?
/ probeer wicket page binnen en buiten een session	,
/ TODO

/ Einde Intermezzo

		getApplicationSettings().setInternalErrorPage(InternalErrorPage.class);
		getApplicationSettings().setAccessDeniedPage(AccessDeniedPage.class);


		// Add resolver for automatically resolving HTML links
		getPageSettings().addComponentResolver(new AutoLinkResolver());
/s
AutoLinkResolver.<init>() line: 766	
		// register tag reference resolvers
		TagReferenceResolver hrefTagReferenceResolver = new TagReferenceResolver("href");
/s
AutoLinkResolver$TagReferenceResolver.<init>(String) line: 717	
			this.attribute = attribute;
"href"
/t
AutoLinkResolver.<init>() line: 767	
		TagReferenceResolver hrefTagReferenceResolver = new TagReferenceResolver("href");
/d
		TagReferenceResolver srcTagReferenceResolver = new TagReferenceResolver("src");
		tagNameToTagReferenceResolvers.put("a", hrefTagReferenceResolver);
		tagNameToTagReferenceResolvers.put("link", hrefTagReferenceResolver);
		tagNameToTagReferenceResolvers.put("script", srcTagReferenceResolver);
		tagNameToTagReferenceResolvers.put("img", srcTagReferenceResolver);
		tagNameToTagReferenceResolvers.put("input", srcTagReferenceResolver);
		tagNameToTagReferenceResolvers.put("embed", srcTagReferenceResolver);

/ <a/> en <link/> hebben href attr	, <script/>, <img/>, <input/> en <embed/> hebben src attr	,

		// register autolink resolver delegates
		tagNameToAutolinkResolverDelegates.put("a", new AnchorResolverDelegate());
/*
		tagNameToAutolinkResolverDelegates.put("link", new ResourceReferenceResolverDelegate("href"));
/**

		ResourceReferenceResolverDelegate srcResRefResolver = new ResourceReferenceResolverDelegate("src");
		tagNameToAutolinkResolverDelegates.put("script", srcResRefResolver);
		tagNameToAutolinkResolverDelegates.put("img", srcResRefResolver);
		tagNameToAutolinkResolverDelegates.put("input", srcResRefResolver);
		tagNameToAutolinkResolverDelegates.put("embed", srcResRefResolver);

/ Intermezzo

/*
/s
	/**
	 * Resolves to anchor/ link components.
	 */
	private static final class AnchorResolverDelegate extends AbstractAutolinkResolverDelegate
	{
		/** the attribute to fetch. */
		private static final String attribute = "href";

		/**
		 * Set of supported extensions for creating bookmarkable page links. Anything that is not in
		 * this list will be handled as a resource reference.
		 */
		private final Set<String> supportedPageExtensions = new HashSet<>(4);

		/**
		 * Construct.
		 */
		public AnchorResolverDelegate()
		{
			// Initialize supported list of file name extension which'll create
			// bookmarkable pages
			supportedPageExtensions.add("html");
			supportedPageExtensions.add("xml");
			supportedPageExtensions.add("wml");
			supportedPageExtensions.add("svg");

/**
/s
	/**
	 * Resolves to {@link ResourceReference} link components. Typically used for header
	 * contributions like javascript and css files.
	 */
	private static final class ResourceReferenceResolverDelegate extends
		AbstractAutolinkResolverDelegate
	{
		private final String attribute;

		/**
		 * Construct.
		 * 
		 * @param attribute
		 */
		public ResourceReferenceResolverDelegate(final String attribute)
		{
			this.attribute = attribute;




/ Einde Intermezzo

/t
WicketApplication(WebApplication).internalInit() line: 736	
		getPageSettings().addComponentResolver(new AutoLinkResolver());
/d
/s
			componentResolvers.add(resolver);
/t
WicketApplication(WebApplication).internalInit() line: 736	
		getPageSettings().addComponentResolver(new AutoLabelResolver());
		getPageSettings().addComponentResolver(new AutoLabelTextResolver());

		getResourceSettings().setFileCleaner(new FileCleaner());
/**
 * Default implementation of {@link IFileCleaner} that uses Apache commons-io
 * {@link FileCleaningTracker} to track and clean the temporary created files.
 * <p>
 * Note: this implementation starts a daemon thread to do the actual work, so it may not be used in
 * some environments like Google AppEngine.
 */
public class FileCleaner implements IFileCleaner

/t
WicketApplication(WebApplication).internalInit() line: 742	
		if (getConfigurationType() == RuntimeConfigurationType.DEVELOPMENT)
/s
WicketApplication(WebApplication).getConfigurationType() line: 841	
		if (configurationType == null)
		{
			configurationType = RuntimeConfigurationType.DEVELOPMENT;
/t
		if (getConfigurationType() == RuntimeConfigurationType.DEVELOPMENT)
/ JA
		{
			// Add optional sourceFolder for resources.
			String resourceFolder = getInitParameter("sourceFolder");
/s
WicketApplication(WebApplication).getInitParameter(String) line: 210	
		if (wicketFilter != null)
		{
			return wicketFilter.getFilterConfig().getInitParameter(key);
null
/t
WicketApplication(WebApplication).internalInit() line: 751	
			String resourceFolder = getInitParameter("sourceFolder");
null
			if (resourceFolder != null)
/ NEE

		setPageRendererProvider(new WebPageRendererProvider());
		setSessionStoreProvider(new WebSessionStoreProvider());
		setAjaxRequestTargetProvider(new DefaultAjaxRequestTargetProvider());

		getAjaxRequestTargetListeners().add(new AjaxEnclosureListener());

		// Configure the app.
		configure();
/s
WicketApplication(Application).configure() line: 300	

		// As long as this is public api the development and deployment mode
		// should counter act each other for all properties.
		switch (getConfigurationType())
/s
WicketApplication(WebApplication).getConfigurationType() line: 841	
/ WH
		if (configurationType == null)
		{
			configurationType = RuntimeConfigurationType.DEVELOPMENT;
/t
WicketApplication(Application).configure() line: 300	
		switch (getConfigurationType())
/d
		{
			case DEVELOPMENT : {
				getResourceSettings().setResourcePollFrequency(Duration.ONE_SECOND);
/s
					this.resourcePollFrequency = resourcePollFrequency;
/ Used?
/ TODO
/t
				getResourceSettings().setJavaScriptCompressor(null);
/s
					javascriptCompressor = compressor;
/t
				getResourceSettings().setUseMinifiedResources(false);
/s
	/**
	 * Sets whether to use pre-minified resources when available. Minified resources are detected by
	 * name. The minified version of {@code x.js} is expected to be called {@code x.min.js}. For css
	 * files, the same convention is used: {@code x.min.css} is the minified version of
	 * {@code x.css}. When this is null, minified resources will only be used in deployment
	 * configuration.
	 *
	 * @param useMinifiedResources
	 *            The new value for the setting
	 * @return {@code this} object for chaining
	 */
	public ResourceSettings setUseMinifiedResources(boolean useMinifiedResources)
	{
		this.useMinifiedResources = useMinifiedResources;
/t
				getMarkupSettings().setStripWicketTags(false);
/s
					this.stripWicketTags = stripWicketTags;
/t
				getExceptionSettings().setUnexpectedExceptionDisplay( ExceptionSettings.SHOW_EXCEPTION_PAGE);
/s
	/**
	 * The exception display type determines how the framework displays exceptions to you as a
	 * developer or user.
	 * <p>
	 * The default value for exception display type is SHOW_EXCEPTION_PAGE. When this value is set
	 * and an unhandled runtime exception is thrown by a page, a redirect to a helpful exception
	 * display page will occur.
	 * <p>
	 * This is a developer feature, however, and you may want to instead show an internal error page
	 * without developer details that allows a user to start over at the application's home page.
	 * This can be accomplished by setting the exception display type to SHOW_INTERNAL_ERROR_PAGE.
	 * <p>
	 * Finally, if you are having trouble with the exception display pages themselves, you can
	 * disable exception displaying entirely with the value SHOW_NO_EXCEPTION_PAGE. This will cause
	 * the framework to re-throw any unhandled runtime exceptions after wrapping them in a
	 * ServletException wrapper.
	 *
	 * @param unexpectedExceptionDisplay
	 *            The unexpectedExceptionDisplay to set.
	 * @return {@code this} object for chaining
	 */
	public ExceptionSettings setUnexpectedExceptionDisplay(UnexpectedExceptionDisplay unexpectedExceptionDisplay)
	{
		this.unexpectedExceptionDisplay = unexpectedExceptionDisplay;

/t
				getDebugSettings().setComponentUseCheck(true);
/s
					this.componentUseCheck = componentUseCheck;
/ TODO
/t
				getDebugSettings().setAjaxDebugModeEnabled(true);
/s
					ajaxDebugModeEnabled = enable;
/t
				getDebugSettings().setDevelopmentUtilitiesEnabled(true);
/s
	/**
	 * Enables all of the panels and pages, etc, from wicket-devutils package.
	 *
	 * @param enable
	 * @return {@code this} object for chaining
	 */
	public DebugSettings setDevelopmentUtilitiesEnabled(boolean enable)
	{
		developmentUtilitiesEnabled = enable;
/ TODO
/t
				getRequestCycleSettings().addResponseFilter(EmptySrcAttributeCheckFilter.INSTANCE);
	/**
	 * Adds a response filter to the list. Filters are evaluated in the order they have been added.
	 *
	 * @param responseFilter
	 *            The {@link IResponseFilter} that is added
	 * @return {@code this} object for chaining
	 */
	public RequestCycleSettings addResponseFilter(IResponseFilter responseFilter)
	{
		responseFilters.add(responseFilter);
/ TODO
/t
		switch (getConfigurationType())
		{
			case DEVELOPMENT : {
				getRequestCycleSettings().addResponseFilter(EmptySrcAttributeCheckFilter.INSTANCE);
/d
				break;
/t
WicketApplication(Application).initApplication() line: 914	
		internalInit();
/d
		initializeComponents();
/s
	 * @deprecated This method will become 'private' in Wicket 8.x. And the support for /wicket.properties
	 * will be dropped
	 */
	@Deprecated
	public final void initializeComponents()
	{
		// Load any wicket properties files we can find
		try
		{
			collectWicketProperties();
/s
WicketApplication(Application).collectWicketProperties() line: 491	
/=
	/**
	 * Finds all /META-INF/wicket/**.properties files and registers any {@link org.apache.wicket.IInitializer}s
	 * found in them.
	 */
	private void collectWicketProperties() throws IOException, URISyntaxException
		Iterator<URL> wicketResources = getApplicationSettings().getClassResolver().getResources("META-INF/wicket/");
/s
DefaultClassResolver(AbstractClassResolver).getResources(String) line: 117	
/=
	public Iterator<URL> getResources(final String name)
name	"META-INF/wicket/" (id=5327)	

			// Try the classloader for the wicket jar/bundle
			Enumeration<URL> resources = Application.class.getClassLoader().getResources(name);
			loadResources(resources, resultSet);
/s
DefaultClassResolver(AbstractClassResolver).loadResources(Enumeration<URL>, Set<URL>) line: 152	
			while (resources.hasMoreElements())
			{
				final URL url = resources.nextElement();
jar:file:/home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28/webapps/wicket-testing/WEB-INF/lib/wicket-extensions-7.0.0-M4.jar!/META-INF/wicket/
jar:file:/home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28/webapps/wicket-testing/WEB-INF/lib/wicket-core-7.0.0-M4.jar!/META-INF/wicket/
jar:file:/home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28/webapps/wicket-testing/WEB-INF/lib/wicket-devutils-7.0.0-M4.jar!/META-INF/wicket/

/t
DefaultClassResolver(AbstractClassResolver).getResources(String) line: 126	
			// Try the classloader for the wicket jar/bundle
			Enumeration<URL> resources = Application.class.getClassLoader().getResources(name);
			loadResources(resources, resultSet);
/d
			// Try the classloader for the user's application jar/bundle
			resources = Application.get().getClass().getClassLoader().getResources(name);
/s
	/**
	 * Get Application for current thread.
	 */
	public static Application get()
	{
		Application application = ThreadContext.getApplication();
		return application;
/t
			loadResources(resources, resultSet);
/s
DefaultClassResolver(AbstractClassResolver).loadResources(Enumeration<URL>, Set<URL>) line: 148	
			while (resources.hasMoreElements())
			{
				final URL url = resources.nextElement();
jar:file:/home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28/webapps/wicket-testing/WEB-INF/lib/wicket-extensions-7.0.0-M4.jar!/META-INF/wicket/
jar:file:/home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28/webapps/wicket-testing/WEB-INF/lib/wicket-core-7.0.0-M4.jar!/META-INF/wicket/
jar:file:/home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28/webapps/wicket-testing/WEB-INF/lib/wicket-devutils-7.0.0-M4.jar!/META-INF/wicket/

/t
DefaultClassResolver(AbstractClassResolver).getResources(String) line: 131	
			// Try the classloader for the wicket jar/bundle
			Enumeration<URL> resources = Application.class.getClassLoader().getResources(name);
			loadResources(resources, resultSet);

			// Try the classloader for the user's application jar/bundle
			resources = Application.get().getClass().getClassLoader().getResources(name);
			loadResources(resources, resultSet);
/d
			// Try the context class loader
			resources = getClassLoader().getResources(name);
			loadResources(resources, resultSet);
/  Application.class.getClassLoader()=Application.get().getClass().getClassLoader()==getClassLoader()
/ TODO
		return resultSet.iterator();
/t
WicketApplication(Application).collectWicketProperties() line: 492	
		Iterator<URL> wicketResources = getApplicationSettings().getClassResolver().getResources("META-INF/wicket/");
/d
		while (wicketResources.hasNext())
			URL metaInfWicket = wicketResources.next();
jar:file:/home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28/webapps/wicket-testing/WEB-INF/lib/wicket-core-7.0.0-M4.jar!/META-INF/wicket/
			String protocol = metaInfWicket.getProtocol();
"jar"
				JarURLConnection jarURLConnection = (JarURLConnection) metaInfWicket.openConnection();
				JarFile jarFile = jarURLConnection.getJarFile();
				Enumeration<JarEntry> jarEntries = jarFile.entries();
				while (jarEntries.hasMoreElements())
				{
					JarEntry jarEntry = jarEntries.nextElement();
					String entryName = jarEntry.getName();
META-INF/
					if (entryName.startsWith("META-INF/wicket/") && entryName.endsWith(".properties"))
/ NEE
/ volgende	,
                    JarEntry jarEntry = jarEntries.nextElement();
                    String entryName = jarEntry.getName();
META-INF/MANIFEST.MF
					if (entryName.startsWith("META-INF/wicket/") && entryName.endsWith(".properties"))
/ NEE
/ volgende	,
                    JarEntry jarEntry = jarEntries.nextElement();
                    String entryName = jarEntry.getName();
META-INF/wicket/
					if (entryName.startsWith("META-INF/wicket/") && entryName.endsWith(".properties"))
/ NEE
/ volgende	,
                    JarEntry jarEntry = jarEntries.nextElement();
                    String entryName = jarEntry.getName();
org/
/ we geven continue	,
					JarEntry jarEntry = jarEntries.nextElement();
					String entryName = jarEntry.getName();
META-INF/wicket/org.apache.wicket.core.properties
					if (entryName.startsWith("META-INF/wicket/") && entryName.endsWith(".properties"))
/ JA
						try (InputStream jarEntryStream = jarFile.getInputStream(jarEntry))
						{
							Properties properties = new Properties();
							properties.load(jarEntryStream);
{initializer=org.apache.wicket.Initializer}
							load(properties);
/s
WicketApplication(Application).load(Properties) line: 717	
		addInitializer(properties.getProperty("initializer"));
/s
WicketApplication(Application).addInitializer(String) line: 678	
		IInitializer initializer = WicketObjects.newInstance(className);
Wicket core library initializer
			initializers.add(initializer);
/t
WicketApplication(Application).load(Properties) line: 717	
		addInitializer(properties.getProperty("initializer"));
/d
		addInitializer(properties.getProperty(getName() + "-initializer"));
/ getName()="wicket-testing"
/ properties.getProperty(getName() + "-initializer")=null
/ addInitializer doet niets als argument null	,

/t
WicketApplication(Application).collectWicketProperties() line: 494	

/ volgende	,
		while (wicketResources.hasNext())
		{
			URL metaInfWicket = wicketResources.next();
jar:file:/home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28/webapps/wicket-testing/WEB-INF/lib/wicket-devutils-7.0.0-M4.jar!/META-INF/wicket/
			String protocol = metaInfWicket.getProtocol();

			if ("jar".equals(protocol))
			{
				JarURLConnection jarURLConnection = (JarURLConnection) metaInfWicket.openConnection();
				JarFile jarFile = jarURLConnection.getJarFile();
				Enumeration<JarEntry> jarEntries = jarFile.entries();
				while (jarEntries.hasMoreElements())
				{
					JarEntry jarEntry = jarEntries.nextElement();
					String entryName = jarEntry.getName();
META-INF/wicket/org.apache.wicket.devutils.properties
					if (entryName.startsWith("META-INF/wicket/") && entryName.endsWith(".properties"))
/ JA
						try (InputStream jarEntryStream = jarFile.getInputStream(jarEntry))
						{
							Properties properties = new Properties();
							properties.load(jarEntryStream);
{initializer=org.apache.wicket.devutils.debugbar.DebugBarInitializer}k
							load(properties);
							break; // atm there is no need to have more than one .properties file

/ volgende,	
		while (wicketResources.hasNext())
		{
			URL metaInfWicket = wicketResources.next();
jar:file:/home/eric/Devel/Java/Tomcat/apache-tomcat-8.0.28/webapps/wicket-testing/WEB-INF/lib/wicket-extensions-7.0.0-M4.jar!/META-INF/wicket/
			String protocol = metaInfWicket.getProtocol();

			if ("jar".equals(protocol))
			{
				JarURLConnection jarURLConnection = (JarURLConnection) metaInfWicket.openConnection();
				JarFile jarFile = jarURLConnection.getJarFile();
				Enumeration<JarEntry> jarEntries = jarFile.entries();
				while (jarEntries.hasMoreElements())
				{
					JarEntry jarEntry = jarEntries.nextElement();
					String entryName = jarEntry.getName();
META-INF/wicket/org.apache.wicket.extensions.properties
					if (entryName.startsWith("META-INF/wicket/") && entryName.endsWith(".properties"))
					{
						try (InputStream jarEntryStream = jarFile.getInputStream(jarEntry))
						{
							Properties properties = new Properties();
							properties.load(jarEntryStream);
{initializer=org.apache.wicket.extensions.Initializer}
							load(properties);
							break; // atm there is no need to have more than one .properties file
/t
WicketApplication(Application).initializeComponents() line: 593	
		try
		{
			collectWicketProperties();
/d
this	WicketApplication  (id=4648)	
	initializers	ArrayList<E>  (id=5642)	
[Wicket core library initializer, DevUtils DebugBar Initializer, Wicket extensions initializer]

			// Load properties files used by all libraries

			final Iterator<URL> resources = getApplicationSettings().getClassResolver() .getResources("wicket.properties");
/s
DefaultClassResolver(AbstractClassResolver).getResources(String) line: 122	

			// Try the classloader for the wicket jar/bundle
			Enumeration<URL> resources = Application.class.getClassLoader().getResources(name);
			loadResources(resources, resultSet);
/s
	private void loadResources(Enumeration<URL> resources, Set<URL> loadedResources)
	{
		if (resources != null)
		{
			while (resources.hasMoreElements())
/ NEE
/t
DefaultClassResolver(AbstractClassResolver).getResources(String) line: 122	
			// Try the classloader for the wicket jar/bundle
			Enumeration<URL> resources = Application.class.getClassLoader().getResources(name);
			loadResources(resources, resultSet);
/d
/ resultSet=[]
			// Try the classloader for the user's application jar/bundle
			resources = Application.get().getClass().getClassLoader().getResources(name);
			loadResources(resources, resultSet);
/ resultSet=[]

			// Try the context class loader
			resources = getClassLoader().getResources(name);
			loadResources(resources, resultSet);
/ resultSet=[]
		return resultSet.iterator();
/t
WicketApplication(Application).initializeComponents() line: 612	
			final Iterator<URL> resources = getApplicationSettings().getClassResolver() .getResources("wicket.properties");
/d
			while (resources.hasNext())
/ NEE
		// now call any initializers we read
		initInitializers();
/s
WicketApplication(Application).initInitializers() line: 707	
		for (IInitializer initializer : initializers)
		{
			initializer.init(this);
/s
Initializer.init(Application) line: 40	
		// Register listener interfaces explicitly (even though they implicitly
		// register when loaded) because deserialization of an object that
		// implements an interface does not load the interfaces it implements!
		IBehaviorListener.INTERFACE.register();
		IFormSubmitListener.INTERFACE.register();
		ILinkListener.INTERFACE.register();
		IOnChangeListener.INTERFACE.register();
		IResourceListener.INTERFACE.register();

/ Intermezzo

/ 13	. 

/ Wat hierboven staat klopt	, alle RequestListenerInterface inst's hierboven, ILinkListener.INTERFACE bijv	, zitten al in Map<equestListenerInterface> RequestListenerInterface.interfaces	,

/ 13	. 

/ IBehaviorListener.INTERFACE, IFormSubmitListener.INTERFACE, ... zijn allemaal verschillede RequestListenerInterface inst	, maar 
public class RequestListenerInterface
{
	public void register()
	{
		// Register this listener interface
		registerRequestListenerInterface(this);
	}
	private void registerRequestListenerInterface(final RequestListenerInterface requestListenerInterface)
	{
		// Check that a different interface method with the same name has not
		// already been registered
		final RequestListenerInterface existingInterface = RequestListenerInterface.forName(requestListenerInterface.getName());
	public static RequestListenerInterface forName(final String interfaceName)
	{
		return interfaces.get(interfaceName);
	}

/ dus in de static Map<String, RequestListenerInterface> RequestListenerInterface.interfaces worden ze allemaal saved	, 
/////////// 

/ 13	.

public interface IBehaviorListener extends IRequestListener
{
	/** Behavior listener interface */
	public static final RequestListenerInterface INTERFACE = new RequestListenerInterface( IBehaviorListener.class);

	/**
	 * Called when a request to a behavior is received.
	 */
	void onRequest();
}

public interface IFormSubmitListener extends IRequestListener
{
	/** Listener interface */
	public static final RequestListenerInterface INTERFACE = new RequestListenerInterface(
		IFormSubmitListener.class);

	/**
	 * Called when a form is submitted
	 */
	void onFormSubmitted();
}

public interface ILinkListener extends IRequestListener
{
	/** Listener interface */
	public static final RequestListenerInterface INTERFACE = new RequestListenerInterface(
		ILinkListener.class);

	/**
	 * Called when a link is clicked.
	 */
	void onLinkClicked();
}



/ Dus de rol van de "ILinkListener": RequestListenerInterface  inst is dat hij een method heeft: ILinkListener.onLinkClicked, en deze wordt called op de component die zojuist is resolved  ,

/ Link.class implements ILinkListener: heeft de onLinkClicked method    , een RequestListenerInterface is een drager van deze Method    , calls .invoke daarop  ,


/ Einde Intermezzo

/t
WicketApplication(Application).initInitializers() line: 706	
		for (IInitializer initializer : initializers)
		{
			initializer.init(this);
/s
DebugBarInitializer.init(Application) line: 35	
		if (application.getDebugSettings().isDevelopmentUtilitiesEnabled())
/ JA
		{
			// register standard debug contributors
			DebugBar.registerContributor(VersionDebugContributor.DEBUG_BAR_CONTRIB, application);
			DebugBar.registerContributor(InspectorDebugPanel.DEBUG_BAR_CONTRIB, application);
			DebugBar.registerContributor(SessionSizeDebugPanel.DEBUG_BAR_CONTRIB, application);
			DebugBar.registerContributor(PageSizeDebugPanel.DEBUG_BAR_CONTRIB, application);
/t
WicketApplication(Application).initInitializers() line: 706	
		for (IInitializer initializer : initializers)
		{
			initializer.init(this);
/s
Initializer.init(Application) line: 37	
		new UploadProgressBar.ComponentInitializer().init(application);
/s
UploadProgressBar$ComponentInitializer.init(Application) line: 90	
/=
public class UploadProgressBar extends Panel
{
	private static final String RESOURCE_NAME = UploadProgressBar.class.getName();

	/**
	 * Initializer for this component; binds static resources.
	 */
	public final static class ComponentInitializer implements IInitializer
	{
		@Override
		public void init(final Application application)
		{
			// register the upload status resource
			application.getSharedResources().add(RESOURCE_NAME, new UploadStatusResource());

/ Intermezzo

application.getSharedResources()={}
/ WAS	, 
 
class UploadStatusResource extends AbstractResource
...

/ Einde Intermezzo

/t
WicketApplication(Application).initApplication() line: 915	
		initializeComponents();
/d
		init();
/s
WicketApplication.init() line: 60	
/ Mijn eigen class	,

		super.init();
/ calls WebApplication.init, calls Application.init	,
/ NIETS

		getDebugSettings().setComponentPathAttributeName("wicketpath");
/s
			this.componentPathAttributeName = componentPathAttributeName;

/t
WicketApplication.init() line: 67	
		getDebugSettings().setComponentPathAttributeName("wicketpath");
/d
		getStoreSettings().setMaxSizePerSession(Bytes.kilobytes(500));
/s
StoreSettings.<init>(Application) line: 55	
	/**
	 * By default the second level cache is disabled.
	 *
	 * @see <a href="https://issues.apache.org/jira/browse/WICKET-5554">WICKET-5554</a>
	 * @see <a href="https://cwiki.apache.org/confluence/x/qIaoAQ">Wicket Page storages</a>
	 */
	private static final int DEFAULT_CACHE_SIZE = 0;
	private int inmemoryCacheSize = DEFAULT_CACHE_SIZE;
/ in mem	,

	private static final Bytes DEFAULT_MAX_SIZE_PER_SESSION = Bytes.megabytes(10);
	private Bytes maxSizePerSession = DEFAULT_MAX_SIZE_PER_SESSION;
/ op disk	,

	private File fileStoreFolder = null;

	private static final int DEFAULT_ASYNCHRONOUS_QUEUE_CAPACITY = 100;
	private int asynchronousQueueCapacity = DEFAULT_ASYNCHRONOUS_QUEUE_CAPACITY;

	private boolean isAsynchronous = true;

/t
/s
public final class Bytes extends LongValue
{
	public static Bytes kilobytes(final long kilobytes)
	{
		return bytes(kilobytes * 1024);
/s
	public static Bytes bytes(final long bytes)
	{
		return new Bytes(bytes);
/t
WicketApplication.init() line: 68	
		getStoreSettings().setMaxSizePerSession(Bytes.kilobytes(500));
/t
/s
			this.maxSizePerSession = Args.notNull(maxSizePerSession, "maxSizePerSession");
/t
		getStoreSettings().setInmemoryCacheSize(50);
/s
			this.inmemoryCacheSize = inmemoryCacheSize;

/t
WicketApplication(Application).initApplication() line: 916	
		init();
/d
		applicationListeners.onAfterInitialized(this);
/ TODO
		validateInit();
/ OK
/t
WicketFilter.init(boolean, FilterConfig) line: 429	
			try
			{
				application.initApplication();
/d
				// Give the application the option to log that it is started
				application.logStarted();
/s
WicketApplication(WebApplication).logStarted() line: 922	
			String version = getFrameworkSettings().getVersion();
/s
WicketApplication(Application).getFrameworkSettings() line: 1272	
			frameworkSettings = new FrameworkSettings(this);
/s
public class FrameworkSettings implements IEventDispatcher
{
	private IDetachListener detachListener;

	private List<IEventDispatcher> eventDispatchers = null;

	/**
	 * The {@link ISerializer} that will be used to convert the pages to/from byte arrays
	 */
	private ISerializer serializer;

	public FrameworkSettings(final Application application)
	{
		serializer = new JavaSerializer(application.getApplicationKey());
/t
WicketApplication(WebApplication).logStarted() line: 922	
			String version = getFrameworkSettings().getVersion();
/d
/s
FrameworkSettings.getVersion() line: 82	
		String implVersion = null;
		Package pkg = getClass().getPackage();
package org.apache.wicket.settings, Wicket Core, version 7.0.0-M4
		if (pkg != null)
		{
			implVersion = pkg.getImplementationVersion();
/t
WicketApplication(WebApplication).logStarted() line: 923	
			String version = getFrameworkSettings().getVersion();
/d
"7.0.0-M4"
			StringBuilder b = new StringBuilder();
			b.append("[").append(getName()).append("] Started Wicket ");
			if (!"n/a".equals(version))
			{
				b.append("version ").append(version).append(" ");
			}
			b.append("in ").append(getConfigurationType()).append(" mode");
[wicket-testing] Started Wicket version 7.0.0-M4 in DEVELOPMENT mode
			log.info(b.toString());

		if (usesDevelopmentConfig())
/ JA
		{
			outputDevelopmentModeWarning();
/s
WicketApplication(WebApplication).outputDevelopmentModeWarning() line: 948	
		System.err.print("********************************************************************\n"
			+ "*** WARNING: Wicket is running in DEVELOPMENT mode.              ***\n"
			+ "***                               ^^^^^^^^^^^                    ***\n"
			+ "*** Do NOT deploy to your live server(s) without changing this.  ***\n"
			+ "*** See Application#getConfigurationType() for more information. ***\n"
			+ "********************************************************************\n");
	}

/t
WicketFilter.init(boolean, FilterConfig) line: 433	
			ThreadContext.setApplication(application);
/ Hier: ThreadLocal.set(new ThreadContext())

				application.initApplication();
				application.logStarted();
/d
			}
			finally
			{
				ThreadContext.detach();
/s
ThreadContext.detach() line: 142	
		ThreadContext value = threadLocal.get();
value	ThreadContext  (id=4768)	
	threadLocal	ThreadLocal<T>  (id=4767)	
	application	WicketApplication  (id=4753)	
	requestCycle	null	
	session	null	

		threadLocal.remove();
		return value;
/t
ApplicationFilterConfig.initFilter() line: 283	
        } else {
            filter.init(this);
/d
        }
        // Expose filter via JMX
        registerJMX();
/ TODO

/ NOTES PAGESTORE DATASTORE 

WicketFilter.init(boolean, FilterConfig) line: 426	
			ThreadContext.setApplication(application);
				application.initApplication();
				ThreadContext.detach();

/ In 	,
				application.initApplication();
/s
					internalInit();
/s
						super.internalInit();
/s
WicketApplication(Application).internalInit() line: 803	
		setPageManagerProvider(new DefaultPageManagerProvider(this));
/s
this=WebApplication
			pageManagerProvider = provider;


/ DefaultPageManagerProvider maakt een PageStoreManager 	, 

	public IPageManager get(IPageManagerContext pageManagerContext)
	{
		IDataStore dataStore = newDataStore();
/ disk	,

		StoreSettings storeSettings = getStoreSettings();

		if (dataStore.canBeAsynchronous())
		{
			int capacity = storeSettings.getAsynchronousQueueCapacity();
			dataStore = new AsynchronousDataStore(dataStore, capacity);
		}

		IPageStore pageStore = newPageStore(dataStore);
/ 2nd level mem store	,
		return new PageStoreManager(application.getName(), pageStore, pageManagerContext);

	}

////////////////////////////////////////////////////////////////////
/ dus PageStoreManager heeft dus de 2nd level store	, pageStore	, en die heeft ref naar de disk store , dataStore	, 


/ Einde NOTES PAGESTORE DATASTORE 

/ Einde DEBUG WICKET 7 DEPLOY

/ TOMCAT

/ Lees	,
https://tomcat.apache.org/tomcat-8.0-doc/index.html

/ we zien 
Apache Tomcat User Guide
	...
Reference
	Apache Tomcat Server Configuration Reference 
/ Hier lezen we over Context,  Engine	, ...


/ Einde TOMCAT

/ DEBUG WICKET 7 UNDEPLOY 

/ eclipse-jee-test
/ wicket-testing

/ eerst de Debug config tomcat7-or-jetty-remote-on-wicket-testing
/ dan de Debug config wicket-testing-deploy

/ Intermezzo


/ We doen in 
$ vi WicketApplication.java

	@Override
	public void init()
	{
		super.init();
		getDebugSettings().setComponentPathAttributeName("wicketpath");
		
		getStoreSettings().setMaxSizePerSession(Bytes.kilobytes(500));
		getStoreSettings().setInmemoryCacheSize(50);

///////////////////////////////////////////////
/ max size per session is 500K= space op disk in cache per session	,
/ in memory cache size=50=50 pages in 2nd level cache	,

 
/ Einde Intermezzo

/ debug	,

WicketApplication(Application).internalDestroy() line: 741	
		...
		PropertyResolver.destroy(this);
/ TODO
		destroyInitializers();
/s
WicketApplication(Application).destroyInitializers() line: 694	
		for (IInitializer initializer : initializers)
[Wicket core library initializer, DevUtils DebugBar Initializer, Wicket extensions initializer]
/ TODO
		{
			initializer.destroy(this);
/ NIETS	,

/ Intermezzo

/ Maak een run config	,
wicket-testing-dependency-sources
base dir: /home/eric/Devel/Java/Wicket/wicket-testing
Goals: dependency:sources

/ Run	, dat is bijv wicket-devutils-7.0.0-M4-sources.jar in de .m2/repository	,

/ Einde Intermezzo

/t
WicketApplication(Application).internalDestroy() line: 764	
		destroyInitializers();
/d
		internalGetPageManager().destroy();
/s
WicketApplication(Application).internalGetPageManager() line: 1508	
					pageManager = pageManagerProvider.get(getPageManagerContext());
/s
DefaultPageManagerProvider.get(IPageManagerContext) line: 56	
		IDataStore dataStore = newDataStore();
/s
DefaultPageManagerProvider.newDataStore() line: 85	

		StoreSettings storeSettings = getStoreSettings();
/s
DefaultPageManagerProvider.getStoreSettings() line: 90	
		return application.getStoreSettings();
/s
WicketApplication(Application).getStoreSettings() line: 1433	
		if (storeSettings == null)
		{
			storeSettings = new StoreSettings(this);
/s
StoreSettings.<init>(Application) line: 53	
	private int inmemoryCacheSize = DEFAULT_CACHE_SIZE;
0
	private Bytes maxSizePerSession = DEFAULT_MAX_SIZE_PER_SESSION;
10M
	private File fileStoreFolder = null;
	private int asynchronousQueueCapacity = DEFAULT_ASYNCHRONOUS_QUEUE_CAPACITY;
100
	private boolean isAsynchronous = true;

/t
DefaultPageManagerProvider.newDataStore() line: 85	
		StoreSettings storeSettings = getStoreSettings();
/d
		Bytes maxSizePerSession = storeSettings.getMaxSizePerSession();
maxSizePerSession	Bytes  (id=5793)	
	value	10485760	
500K

		File fileStoreFolder = storeSettings.getFileStoreFolder();
/s
StoreSettings.getFileStoreFolder(){
		if (fileStoreFolder == null)
		{
			if (WebApplication.exists())
			{
				fileStoreFolder = (File) WebApplication.get().getServletContext()
					.getAttribute("javax.servlet.context.tempdir");
/t
fileStoreFolder	File  (id=5792)	
/home/eric/Devel/Java/Tomcat/apache-tomcat-7.0.57/work/Catalina/localhost/wicket-testing

/t
		return new DiskDataStore(application.getName(), fileStoreFolder, maxSizePerSession);
/s
DiskDataStore.<init>(String, File, Bytes) line: 74	
applicationName	"wicket-testing" (id=5789)	
fileStoreFolder	File  (id=5792)	
maxSizePerSession	Bytes  (id=5793)	
500K

/ Intermezzo

/ 7	. 

[eric@localhost trunk]$ ls /home/eric/Devel/Java/Tomcat/apache-tomcat-7.0.57/work/Catalina/localhost/wicket-testing
wicket-testing-filestore
[eric@localhost trunk]$ less /home/eric/Devel/Java/Tomcat/apache-tomcat-7.0.57/work/Catalina/localhost/wicket-testing/wicket-testing-filestore/5392/550/9D43E55223DCBF526AC1BB281319477E/data 
/ binary file	,


/ Einde Intermezzo

/s
	public DiskDataStore(final String applicationName, final File fileStoreFolder, final Bytes maxSizePerSession)

		this.applicationName = applicationName;
		this.fileStoreFolder = fileStoreFolder;
		maxSizePerPageSession = Args.notNull(maxSizePerSession, "maxSizePerSession");
500K
		sessionEntryMap = new ConcurrentHashMap<>();

/ Intermezzo

/ rol maxSizePerSession

/ Dit is de size van de cache op disk	, per session	,

$ vi DiskDataStore.class

	public DiskDataStore(final String applicationName, final File fileStoreFolder, final Bytes maxSizePerSession) {
		this.applicationName = applicationName;
		this.fileStoreFolder = fileStoreFolder;
		maxSizePerPageSession = Args.notNull(maxSizePerSession, "maxSizePerSession");
		sessionEntryMap = new ConcurrentHashMap<>();
/ map van session entries	, dus de cache op disk ={ cache per session }	,

	protected static class SessionEntry implements Serializable
	{
		private PageWindowManager manager;

		public PageWindowManager getManager()
		{
			if (manager == null)
			{
				manager = new PageWindowManager(diskDataStore.maxSizePerPageSession.bytes());
			}
			return manager;

		public synchronized void savePage(int pageId, byte data[])
		{
			if (data != null)
			{
				// allocate window for page
				PageWindow window = getManager().createPageWindow(pageId, data.length);

/ De page window manager regelt hoe de pages in de cache (per session) terecht komen	, de size van deze cache (per session) is 500K. Er is een page manager per session. Dus de page manager  krijgt de size van de cache per session	,

/ Einde Intermezzo

		try
		{
			if (this.fileStoreFolder.exists() || this.fileStoreFolder.mkdirs())
			{
				loadIndex();
/s
DiskDataStore.loadIndex() line: 216	

		File storeFolder = getStoreFolder();
/=
		return new File(fileStoreFolder, applicationName + "-filestore");
/t
/home/eric/Devel/Java/Tomcat/apache-tomcat-7.0.57/work/Catalina/localhost/wicket-testing/wicket-testing-filestore

		File index = new File(storeFolder, INDEX_FILE_NAME);
/home/eric/Devel/Java/Tomcat/apache-tomcat-7.0.57/work/Catalina/localhost/wicket-testing/wicket-testing-filestore/DiskDataStoreIndex
		if (index.exists() && index.length() > 0)
/ NEE
/ TODO (Moet je deze zelf create?)

		Files.remove(index);

/t
DefaultPageManagerProvider.get(IPageManagerContext) line: 58	
		IDataStore dataStore = newDataStore();
/d
dataStore	DiskDataStore  (id=6407)	

		StoreSettings storeSettings = getStoreSettings();
/=
			return application.getStoreSettings();
storeSettings	StoreSettings  (id=5780)	
	asynchronousQueueCapacity	100	
	fileStoreFolder	File  (id=5792)	
/home/eric/Devel/Java/Tomcat/apache-tomcat-7.0.57/work/Catalina/localhost/wicket-testing
	inmemoryCacheSize	50	
	isAsynchronous	true	
	maxSizePerSession	Bytes  (id=5793)	

		if (dataStore.canBeAsynchronous())
/ JA
		{
			int capacity = storeSettings.getAsynchronousQueueCapacity();
100
			dataStore = new AsynchronousDataStore(dataStore, capacity);
/s
AsynchronousDataStore.<init>(IDataStore, int) line: 97	
		this.dataStore = dataStore;
		entries = new LinkedBlockingQueue<Entry>(capacity);
		entryMap = new ConcurrentHashMap<String, Entry>();

//////////////////////////////////
/ WH is datastore dist	, en entries memory	,

		PageSavingRunnable savingRunnable = new PageSavingRunnable(dataStore, entries, entryMap);
		pageSavingThread = new Thread(savingRunnable, "Wicket-PageSavingThread");
		pageSavingThread.setDaemon(true);
		pageSavingThread.start();

/ Intermezzo

/ AsynchronousDataStore.java

/ er is entryMap (mem) en dataStore (disk)
/ een page is of in entryMap of in dataStore

/ er is ook een queue entries, voor pages die daarna naar dataStore gaan	,

/ een page gaat eerst naar entryMap, en naar entries , en later in een thread worden de pages uit entries uit entryMap gehaald en in dataStore set	, als entries vol, dan meteen (wat de thread doet)	,

/ In storeData gaat een page naar entryMap, en ook naa entries, om later (*) naar dataStore te gaan	,  maar als entries vol is , wordt het hier (**) al gedaan	, 

	public void storeData(final String sessionId, final int id, final byte[] data)
	{
		Entry entry = new Entry(sessionId, id, data);
		String key = getKey(entry);
		entryMap.put(key, entry);
		try
		{
			boolean added = entries.offer(entry, OFFER_WAIT, TimeUnit.MILLISECONDS);

			if (added == false)
			{
				log.debug("Storing synchronously page with id '{}' in session '{}'", id, sessionId);
				entryMap.remove(key);
				dataStore.storeData(sessionId, id, data);
/ Dit is de abnormale manier (**)	, gebeurt hetzelfde als bij (*)	,

/ Dit is de normale manier waar een page in entries uit de entryMap wordt gehaald in dataStore wordt set,	
/ (*)
	private static class PageSavingRunnable implements Runnable
	{
		@Override
		public void run()
		{
			while (!Thread.interrupted())
					entry = entries.poll(POLL_WAIT, TimeUnit.MILLISECONDS);
				if (entry != null)
				{
					dataStore.storeData(entry.sessionId, entry.pageId, entry.data);
					entryMap.remove(getKey(entry));

/ een page komt eerst in entryMap (mem). 

/ Einde Intermezzo

/t
DefaultPageManagerProvider.get(IPageManagerContext) line: 66	
			dataStore = new AsynchronousDataStore(dataStore, capacity);
/d
		IPageStore pageStore = newPageStore(dataStore);
/s
DefaultPageManagerProvider.newPageStore(IDataStore) line: 73	
		int inmemoryCacheSize = getStoreSettings().getInmemoryCacheSize();
0
		ISerializer pageSerializer = application.getFrameworkSettings().getSerializer();
		return new DefaultPageStore(pageSerializer, dataStore, inmemoryCacheSize);

/ Intermezzo

/ bij ons is de  inmemorycachesize 50	, dat komt omdat we hem hebben set	,

/ Lees	,
https://ci.apache.org/projects/wicket/guide/7.x/guide/versioningCaching.html

@Override
public void init()
{
	super.init();
	getStoreSettings().setInmemoryCacheSize(50);
}

/ Einde Intermezzo

/s
DefaultPageStore.<init>(ISerializer, IDataStore, int) line: 55	
		return new DefaultPageStore(pageSerializer, dataStore, inmemoryCacheSize);
/s

/ Intermezzo

/ DefaultPageStore 			: serialize
/ - AsynchronousDataStore 	: stores in mem, starts worker thread die stores in	, 
/ - DiskDataStore			: store op disk	,

/ Einde Intermezzo

/ Intermezzo

public class DefaultPageStore extends AbstractCachingPageStore<DefaultPageStore.SerializedPage>

public abstract class AbstractCachingPageStore<P> extends AbstractPageStore
	/**
	 * The cache implementation
	 */
	protected final SecondLevelPageCache<String, Integer, P> pagesCache;

/ Dus AbstractCachingPageStore heeft/is de 2nd level cache	,


/ Einde Intermezzo

/s
DefaultPageStore.<init>(ISerializer, IDataStore, int) line: 55	
/=
	public DefaultPageStore(final ISerializer pageSerializer, final IDataStore dataStore,
		final int cacheSize)

/ cacheSize is de 2nd level cache size	,

		super(pageSerializer, dataStore, new SerializedPagesCache(cacheSize));
/s
DefaultPageStore$SerializedPagesCache.<init>(int) line: 317	
/=
	static class SerializedPagesCache implements SecondLevelPageCache<String, Integer, SerializedPage>
		public SerializedPagesCache(final int maxSize)
maxSize=0
		{
			this.maxSize = maxSize;
/ Aantal pages in 2nd level cache	,

			cache = new ConcurrentLinkedDeque<>();
/t
/s
DefaultPageStore(AbstractCachingPageStore<P>).<init>(ISerializer, IDataStore, SecondLevelPageCache<String,Integer,P>) line: 50	
/ Intermezzo

public abstract class AbstractCachingPageStore<P> extends AbstractPageStore

	protected final SecondLevelPageCache<String, Integer, P> pagesCache;

	protected AbstractCachingPageStore(ISerializer pageSerializer, IDataStore dataStore, SecondLevelPageCache<String, Integer, P> pagesCache)
	{
pageSerializer	JavaSerializer  (id=5712)	
dataStore	AsynchronousDataStore  (id=5705)	
pagesCache	DefaultPageStore$SerializedPagesCache  (id=5727)	

		super(pageSerializer, dataStore);
/s
			this.pageSerializer = pageSerializer;
			this.dataStore = dataStore;
/t
		this.pagesCache = Args.notNull(pagesCache, "pagesCache");
...
/t
DefaultPageManagerProvider.get(IPageManagerContext) line: 67	
		IPageStore pageStore = newPageStore(dataStore);
pageStore	DefaultPageStore  (id=6857)	
	dataStore	AsynchronousDataStore  (id=6851)	
/ disk	,
	pagesCache	DefaultPageStore$SerializedPagesCache  (id=6861)	
/ 2nd level	,
	pageSerializer	JavaSerializer  (id=6852)	

/d
		return new PageStoreManager(application.getName(), pageStore, pageManagerContext);
/s
PageStoreManager.<init>(String, IPageStore, IPageManagerContext) line: 60	
		super(context);
/s
			this.context = Args.notNull(context, "context");
/t
		this.applicationName = applicationName;
		this.pageStore = pageStore;
		MANAGERS.put(applicationName, this);
...
/t
WicketApplication(Application).internalGetPageManager() line: 1510	
					pageManager = pageManagerProvider.get(getPageManagerContext());
/d
		return pageManager;
/t
WicketApplication(Application).internalDestroy() line: 764	
		internalGetPageManager().destroy();
/s
PageStoreManager.destroy() line: 436	
		MANAGERS.remove(applicationName);
/ WAS
{wicket-testing=org.apache.wicket.page.PageStoreManager@25eaca50}
/ NU
{}
		pageStore.destroy();
/s
DefaultPageStore(AbstractCachingPageStore<P>).destroy() line: 102	
		super.destroy();
/s
DefaultPageStore(AbstractPageStore).destroy() line: 53	
		dataStore.destroy();
/s
AsynchronousDataStore.destroy() line: 106	
		if (pageSavingThread.isAlive())
		{
			pageSavingThread.interrupt();
			try
			{
				pageSavingThread.join();

		pagesCache.destroy();
/s
DiskDataStore.destroy() line: 105	
		saveIndex();
/s
DistDataStore.class
	private void saveIndex()
	{
		File storeFolder = getStoreFolder();
		if (storeFolder.exists())
/ NEE
/t
DefaultPageStore(AbstractCachingPageStore<P>).destroy() line: 103	
		super.destroy();
/d
		pagesCache.destroy();
/s
DefaultPageStore$SerializedPagesCache.destroy() line: 460	
			cache.clear();
...
/t
WicketApplication(Application).internalDestroy() line: 765	
		internalGetPageManager().destroy();
/d
		getSessionStore().destroy();
/s
WicketApplication(Application).getSessionStore() line: 465	
		if (sessionStore == null)
		{
			synchronized (this)
			{
				if (sessionStore == null)
				{
					sessionStore = sessionStoreProvider.get();
/s
WebApplication.class
	private static class WebSessionStoreProvider implements IProvider<ISessionStore>
	{
		@Override
		public ISessionStore get()
		{
			return new HttpSessionStore();
/ 'n wicket ding	,
...
/t
WicketApplication(Application).getSessionStore() line: 466	
					sessionStore = sessionStoreProvider.get();
/d
					sessionStore.registerUnboundListener(this);
/ this=WicketApplication inst	,
/=
						unboundListeners.add(listener);
/t
		return sessionStore;
...
/t
WicketApplication(Application).internalDestroy() line: 767	
		getSessionStore().destroy();
/d
/s
HttpSessionStore.class
	@Override
	public void destroy()
	{
	}
/t
WicketApplication(Application).internalDestroy() line: 767	
		getSessionStore().destroy();
/d
		applicationKeyToApplication.remove(getApplicationKey());
/ applicationKeyToApplication={} 	, al
/s
WicketApplication(WebApplication).getApplicationKey() line: 196	
		return getName();
...
/t
WicketFilter.destroy() line: 609	
				application.internalDestroy();
/d
			}
			finally
			{
				ThreadContext.detach();
				application = null;

		if (applicationFactory != null)
		{
			try
			{
				applicationFactory.destroy(this);
/ this=WicketFilter	,
/s
ContextParamWebApplicationFactory.destroy(WicketFilter) line: 110	
	public void destroy(WicketFilter filter)
	{
	}
/t
WicketFilter.destroy() line: 622	
				applicationFactory.destroy(this);
/d
			}
			finally
			{
				applicationFactory = null;





/ Einde DEBUG WICKET 7 DEPLOY 

/ DEBUG WICKET 7 DEPLOY 

/ eclipse-jee-test
/ project wicket-testing

/ als we de app=project deploy	,

	WicketApplication(Application).internalInit() line: 781	
		...

	WicketApplication(WebApplication).internalInit() line: 723	
		super.internalInit();

	WicketApplication(Application).initApplication() line: 913	
this	WicketApplication  (id=6188)	
	name	"wicket-testing" (id=6311)	
		internalInit();

	WicketFilter.init(boolean, FilterConfig) line: 426	
				application.initApplication();

	WicketFilter.init(FilterConfig) line: 353	
		init(false, filterConfig);

	...

/ we gaan verder debug	,
WicketApplication(Application).internalInit() line: 809	
		...
		// set up default request mapper
		setRootRequestMapper(new SystemMapper(this));
/s
SystemMapper.<init>(Application) line: 46	
/s
SystemMapper(CompoundRequestMapper).<init>() line: 101	
	private final List<IRequestMapper> mappers = new CopyOnWriteArrayList<>();
/t
SystemMapper.<init>(Application) line: 47	
		add(new PageInstanceMapper());
		add(new BookmarkableMapper());
		add(new HomePageMapper(new HomePageProvider(application)));
		add(new ResourceReferenceMapper(new PageParametersEncoder(),
			new ParentFolderPlaceholderProvider(application), getResourceCachingStrategy()));
		add(new UrlResourceReferenceMapper());
		add(RestartResponseAtInterceptPageException.MAPPER);
		add(new BufferedResponseMapper());

/ Einde DEBUG WICKET 7 DEPLOY 




/ LATER	, 

/ 7	.
SystemMapper(CompoundRequestMapper).mapRequest(Request) line: 132	

/ 7	.

/ LATER	, 

	DefaultPageStore.<init>(ISerializer, IDataStore, int) line: 55	
	DefaultPageManagerProvider.newPageStore(IDataStore) line: 75	
	DefaultPageManagerProvider.get(IPageManagerContext) line: 66	
	DefaultPageManagerProvider.get(Object) line: 38	
	WicketApplication(Application).internalGetPageManager() line: 1508	
	WicketApplication(Application).fetchCreateAndSetSession(RequestCycle) line: 1681	
	Session.get() line: 169	
	LinkOnlyStudyPage(Component).getSession() line: 1827	
	LinkOnlyStudyPage(Page).dirty(boolean) line: 278	
	LinkOnlyStudyPage(WebPage).dirty(boolean) line: 324	
	LinkOnlyStudyPage(Page).init() line: 717	
	LinkOnlyStudyPage(Component).<init>(String, IModel<?>) line: 685	
	LinkOnlyStudyPage(MarkupContainer).<init>(String, IModel<?>) line: 120	
	LinkOnlyStudyPage(Page).<init>(PageParameters, IModel<?>) line: 170	
	LinkOnlyStudyPage(Page).<init>() line: 134	
	LinkOnlyStudyPage(WebPage).<init>() line: 76	
	LinkOnlyStudyPage.<init>(PageParameters) line: 32	
	NativeConstructorAccessorImpl.newInstance0(Constructor, Object[]) line: not available [native method]	
	NativeConstructorAccessorImpl.newInstance(Object[]) line: 57	
	DelegatingConstructorAccessorImpl.newInstance(Object[]) line: 45	
	Constructor<T>.newInstance(Object...) line: 526	
	DefaultPageFactory.newPage(Constructor<C>, PageParameters) line: 171	
	DefaultPageFactory.newPage(Class<C>) line: 76	
	DefaultMapperContext.newPageInstance(Class<IRequestablePage>, PageParameters) line: 102	
			return application.getPageFactory().newPage(pageClass);

	PageProvider.resolvePageInstance(Integer, Class<IRequestablePage>, PageParameters, Integer) line: 268	
	PageProvider.getPageInstance() line: 166	
	WebPageRenderer(PageRenderer).getPage() line: 78	
	WebPageRenderer.isPageStateless() line: 287	
		return getPage().isPageStateless();

	WebPageRenderer.shouldRenderPageAndWriteResponse(RequestCycle, Url, Url) line: 329	
		return (compatibleProtocols(currentUrl.getProtocol(), targetUrl.getProtocol())) &&
				(neverRedirect(getRedirectPolicy())
			|| ((isOnePassRender() && notForcedRedirect(getRedirectPolicy())) || (targetUrl
				.equals(currentUrl) && notNewAndNotStatelessPage(isNewPageInstance(),
				isPageStateless()))) || (targetUrl.equals(currentUrl) && isRedirectToRender())
			|| (shouldPreserveClientUrl(cycle) && notForcedRedirect(getRedirectPolicy())));

	WebPageRenderer.respond(RequestCycle) line: 193	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 837	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
			IRequestHandler handler = resolveRequestHandler();
			if (handler != null)
			{
				execute(handler);

	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	
	...


/ WICKET BOOKMARKABLE

/ 7	.

/ Lees	,
https://mail-archives.apache.org/mod_mbox/wicket-users/200907.mbox/%3C24659329.post@talk.nabble.com%3E

/ en 	, 
http://mail-archives.apache.org/mod_mbox/wicket-users/200907.mbox/%3C24659430.post@talk.nabble.com%3E

/ en	,
http://users.wicket.apache.narkive.com/bUKIbJt3/bookmarkablepagelink-to-an-existing-instance-of-a-page

Then the page is no longer bookmarkable, since you depend on state.
page.getClass() will work though.

/ en	,
http://stackoverflow.com/questions/6390953/how-can-i-create-a-wicket-url-that-hides-its-parameters
/ MORGEN	,

/ Kun je de state van een page restore met page paramaters?
/ TODO


/ 7	.





/ Einde WICKET BOOKMARKABLE

/ WICKET REPEATABLE VIEW

/ 7	. 

/ proj wicket_book

$ vi Ch55.html
		<li wicket:id="rvlist"></li>

$ vi Ch55.java
		RepeatingView rview=new RepeatingView("rvlist");
		add(rview);
		for(int i=0;i<5;i++){
			String id=Integer.toString(i+100);
			Label label=new Label(id, "value "+String.valueOf(i));	// label is bound to <li/>
			rview.add(label);
			label.setOutputMarkupId(true);
			boolean b=false;
		}

/ we zien	,
value 0
value 1
value 2
value 3
value 4

/s



/ Einde WICKET REPEATABLE VIEW

/ WICKET EXAMPLES

/ Geef	,
http://www.wicket-library.com/wicket-examples/index.html
http://www.wicket-library.com/wicket-examples/ajax
...
/ See 
/home/eric/Devel/Java/Wicket/wicket/wicket-examples

/ Lees	,
https://www.atlassian.com/git/tutorials/syncing/git-pull


/ Einde WICKET EXAMPLES

/ SPRING WICKET

/ Lees	,
http://stackoverflow.com/questions/9507239/spring-mvc-or-wicket

http://alex-ilies.blogspot.nl/2013/07/wicketspring-basic-example.html

/ Einde SPRING WICKET

/ GIT

/ 7	. 

[eric@localhost wicket]$ pwd
/home/eric/Devel/Java/Wicket/wicket

/ we hadden BaseWicketTester.java (per ongeluk) edit,	 
/ we kunnen nu NIET,	 

$ git pull

https://git-scm.com/book/en/v2/Git-Basics-Undoing-Things

Unmodifying a Modified File
[eric@localhost wicket]$ git checkout -- wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java
/ OK
[eric@localhost wicket]$ git pull
/ OK




/ Einde GIT

/ DEBUG CLICKLINK

/ we volgen .clickLink naar .sendRedirect	,

	MockHttpServletResponse.sendRedirect(String) line: 609	
	BaseWicketTester$WicketTesterServletWebResponse(ServletWebResponse).sendRedirect(String) line: 298	
	BaseWicketTester$WicketTesterServletWebResponse.sendRedirect(String) line: 2884	
	WebPageRenderer.redirectTo(Url, RequestCycle) line: 161	
	WebPageRenderer.respond(RequestCycle) line: 280	
	BaseWicketTester$LastPageRecordingPageRendererProvider$1.respond(RequestCycle) line: 2672	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 837	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 97	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler, boolean) line: 667	
	WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler) line: 606	
	WicketTester(BaseWicketTester).executeListener(Component, RequestListenerInterface) line: 1064	
	WicketTester(BaseWicketTester).clickLink(String, boolean) line: 1914	
	WicketTester(BaseWicketTester).clickLink(String) line: 1771	
	RedirectStudyPageTest.test() line: 26	

RedirectStudyPageTest.test() line: 42	
		wicketTester.clickLink("jsp");
/s
WicketTester(BaseWicketTester).clickLink(String, boolean) line: 1914	
		// if the link is a normal link (or ResourceLink)
		else if (linkComponent instanceof AbstractLink)
/ JA
			else
			{
				executeListener(link, ILinkListener.INTERFACE);
/s
WicketTester(BaseWicketTester).executeListener(Component, RequestListenerInterface) line: 1064	
		// Process the request
		processRequest(request, null);
/s
WicketTester(BaseWicketTester).processRequest(MockHttpServletRequest, IRequestHandler, boolean) line: 667	
		try
		{
			if (!requestCycle.processRequestAndDetach())
/s
RequestCycle.processRequestAndDetach() line: 293	
		try
		{
			result = processRequest();
/s
RequestCycle.processRequest() line: 222	

			IRequestHandler handler = resolveRequestHandler();
handler	ListenerInterfaceRequestHandler  (id=232)	

			if (handler != null)
			{
				execute(handler);
/s
RequestCycle.execute(IRequestHandler) line: 265	
			requestHandlerExecutor.execute(handler);
/s
RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 93	

		if (replacementHandler != null)
replacementHandler	RedirectRequestHandler  (id=207)	
/ TODO
		{
			execute(replacementHandler);
/s
RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
/=
	public void execute(final IRequestHandler handler)
handler	RedirectRequestHandler  (id=207)	
		try
		{
			respond(handler);
/s
RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 837	
	private class HandlerExecutor extends RequestHandlerStack
	{
		@Override
		protected void respond(IRequestHandler handler)
		{
			Response originalResponse = getResponse();
			try
			{
->				handler.respond(RequestCycle.this);
handler	RedirectRequestHandler  (id=207)	
/s
RedirectRequestHandler.respond(IRequestCycle) line: 116	
		if (status == HttpServletResponse.SC_MOVED_TEMPORARILY)
		{
->			response.sendRedirect(location);
		}
		else
		{
			response.setStatus(status);
			response.setHeader("Location", location);
		}
/ HIER WAREN WE NAAR OPZOEK	, 
/ Met jsp bij ->	,
response	BaseWicketTester$WicketTesterServletWebResponse  (id=206)	

/s
BaseWicketTester$WicketTesterServletWebResponse.sendRedirect(String) line: 2887	
	private static class WicketTesterServletWebResponse extends ServletWebResponse
		implements
			IMetaDataBufferingWebResponse
	{
		@Override
		public void sendRedirect(String url)
		{
			super.sendRedirect(url);
			try
			{
->				getContainerResponse().sendRedirect(url);
MockHttpServletResponse.sendRedirect(String) line: 609	

/ 7	. 

/ Bij jsp2, 

RedirectStudyPageTest.test1() line: 60	
		wicketTester.clickLink("jsp2");
...
/s
RedirectRequestHandler.respond(IRequestCycle) line: 99	
 		if (status == HttpServletResponse.SC_MOVED_TEMPORARILY)
/ NEE
		{
			response.sendRedirect(location);
/ NIET
		}
		else
/ JA
		{
			response.setStatus(status);
			response.setHeader("Location", location);

/ Hoe wicket test?


/ Einde DEBUG CLICKLINK

/ WICKET JAVASCRIPT

/ 7	. 

/ verander de jquery.js in wicket	, 

/ lees	,
http://stackoverflow.com/questions/18200451/replace-wicket-6-3-jquery

@Override 
protected void init() {
    getJavaScriptLibrarySettings().setJQueryReference(new UrlResourceReference(Url.parse("http://cdnjs.cloudflare.com/ajax/libs/jquery/1.8.3/jquery.min.js")));
}

$ vi Counter2AjaxPageTest.java

	@Before
	public void fixture(){
		wicketTester=new WicketTester();
		WebApplication webApplication=wicketTester.getApplication();
		JavaScriptLibrarySettings javaScriptLibrarySettings=webApplication.getJavaScriptLibrarySettings();
		ResourceReference resourceReference=javaScriptLibrarySettings.getJQueryReference();

resourceReference	JQueryResourceReference  (id=157)	
	data	ResourceReference$Key  (id=168)	
		locale	null	
		name	"jquery/jquery-1.11.1.js" (id=170)	
		scope	"org.apache.wicket.resource.JQueryResourceReference" (id=174)	
		style	null	
		variation	null	
	urlAttributesCacheMap	null	


/ Einde WICKET JAVASCRIPT

/ SERVLET JAVASCRIPT

/ WEBAPP WITH JS

/ Lees	,
http://www.tutorialspoint.com/servlets/servlets-first-example.htm

/ we maken in workspace-wicket7	, proj. webapp-with-js	,

/ we maken de simpelste webapp die er bestaat	,

$ vi pom.xml

<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>
	<groupId>my.own</groupId>
	<artifactId>webapp-with-js</artifactId>
	<packaging>war</packaging>
	<version>0.0.1-SNAPSHOT</version>

	<name>quickstart</name>
	<description></description>
	
	<properties>
		<tomcat.version>2.2</tomcat.version>
	</properties>
	<dependencies>

		<dependency>
		    <groupId>javax.servlet</groupId>
		    <artifactId>servlet-api</artifactId>
		    <version>2.5</version>
		    <scope>provided</scope>
		</dependency>

	</dependencies>
	<build>
		<finalName>${project.artifactId}</finalName>
		<resources>
		</resources>
		<testResources>
		</testResources>
		<plugins>

			<plugin>
				<groupId>org.apache.tomcat.maven</groupId>
				<artifactId>tomcat7-maven-plugin</artifactId>
				<version>${tomcat.version}</version>
				<configuration>
	    			<port>8080</port>
	    			<path>/${project.artifactId}</path>
	    			<url>http://localhost:9090/manager/text</url>
	    			<server>my_tomcat</server>
 	 			</configuration>
			</plugin>

		</plugins>
	</build>
</project>

/ In src/main/java, package my.own.webapp_with_js	,
$ vi MyServlet.java

public class MyServlet extends HttpServlet{

	private static final long serialVersionUID = 1L;
	
	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp)
			throws ServletException, IOException {
		resp.setContentType("text/html");
		PrintWriter printWriter=resp.getWriter();
		printWriter.println("<h1>Foo Bar</h1>");
		
	}
}

/ In src/main/webapp, 
$ vi WEB-INF/web.xml

<?xml version="1.0" encoding="ISO-8859-1"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	version="2.5">

	<display-name>webapp-with-js</display-name>

	<servlet>
		<servlet-name>my</servlet-name>
		<servlet-class>my.own.webapp_with_js.MyServlet</servlet-class>
	</servlet>
	
	<servlet-mapping>
		<servlet-name>my</servlet-name>
		<url-pattern>/my</url-pattern>
	</servlet-mapping>
</web-app>

////////////////////////////
/ Als we annotations use	, dan GEEN XML config	,

$ vi MyServlet.java

@WebServlet("/my")
public class MyServlet extends HttpServlet{

/ web.xml is dan LEEG	,

$ vi web.xml

<?xml version="1.0" encoding="ISO-8859-1"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	version="2.5">

/////////////////


/ Geef in chrome	,
http://localhost:9090/webapp-with-js/my

/ we zien	, 
Foo Bar

/ we hebben geen index.jsp	, dus ERR bij	,
http://localhost:9090/webapp-with-js


/ 7	. 

/ workspace-wicket	, proj. webapp-with-js	, Deployed Resources	,

$ vi form1.html

		$("#form").submit(function(event){
			alert("Foo Bar");
			event.preventDefault();
			
		}) 
/ Dit is de BINDING van de submit event met de handler	,

		$("#other").click(function(){
			$("#form").submit();
		})
/ Hier call we de handler	, 
/ / we call de handler ook als we de submit button click	,  
/ Dat zien we ook in form2.html: we kunnen de <input type="submit" click , of in js .submit() call	,
//////////////////////////////////////////////////////////////////////

/ In form1.html jquery	, maar GEEN ajax	,

/ 7	. 

/ workspace-wicket	, proj. webapp-with-js	, Deployed Resources	,

/ we use de jquery.form.js	,

$ vi form2.html

<head>
<meta charset="UTF-8">
<title>Insert title here</title>
<script type="text/javascript" src="jquery-2.1.4.js"></script>
<script type="text/javascript" src="jquery.form.js"></script>
<script type="text/javascript">
	$(document).ready(function(){
		$("#form").ajaxForm(function(){
			alert("Foo Bar")
		})
	})
</script>
</head>

<body>
<form id="form" action="form" method="POST">
	<input type="text" name="first">
	<br>
	<input type="text" name="last">
	<br>
	<input type="submit" value="submit">
</form>
</body>

/ we zien alleen de alert, de normale actie zien we NIET: het laden van de response gebeurt NIET	,

/ 7	.

/ we maken zelf een ajax script	,

$ vi myjquery2.html

<head>
<meta charset="UTF-8">
<title>Insert title here</title>
<script type="text/javascript" src="jquery-2.1.4.js"></script>
<script type="text/javascript" src="my2.js"></script>
</head>
<body>
	<input type="text" name="foo">
</body>

$ vi my2.js

$.ajax({
	method:"post",
	url:"form",
	data:{first:"Foo",last:"Bar"}
}).done(function(msg){
	alert(msg);
});

$ vi FormServlet.java

@WebServlet("/form")
public class FormServlet extends HttpServlet{
	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp)
			throws ServletException, IOException {
		resp.setContentType("text/html");
		PrintWriter pw=resp.getWriter();
		String html="<!doctype html>"+
				"<body>"+
				"<h1>"+req.getParameter("first")+"</h1>"+
				"<h1>"+req.getParameter("last")+"</h1>";
				
		pw.println(html);
		
		
	}
/ als we in chrome 
http://localhost:9090/webapp-with-js/myjquery2.html
/ dan zien we dat de oorspronkelijke page blijft staan, en er een alert verschijnt de response van de servlet, deze verschijnt dus niet als response page	, wat zonder ajax het geval is	,

/ op de alert staat	,
<!doctype html><body><h1>Foo</h1><h1>Bar</h1>

/ 7	. 

/ we set de html op de page, ipv op de alert	,

$ vi my2.js

$.ajax({
	method:"post",
	url:"form",
	data:{first:"Foo",last:"Bar"}
}).done(function(msg){
//	alert(msg);
	$("#result").html(msg);
});

/ we zien dat het antwoord op de page terecht komt	, 
/ we zien de html	,

<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
<script type="text/javascript" src="jquery-2.1.4.js"></script>
<script type="text/javascript" src="my2.js"></script>
</head>
<body>
	<input type="text" name="foo">
	<div id="result"><h1>Foo</h1><h1>Bar</h1>
</div>
</body></html>

/ 7	.

/ Schrijf Selenium test	,
/ TODO

/ 7	.

//////////////////////////////////////////////////
/ De js .submit fct is een alternatief voor click een <input type="submit"> , het form wordt gewoon verstuurd   ,

/ proj webapp-with-js in wicket7 workspace  ,

$ vi form2.html

<body>
<form id="form" action="form" method="POST">
    <input type="text" name="first">
    <br>
    <input type="text" name="last">
    <br>
    <input type="button"    onclick="my()" id="m" value="alt submit">
    <input type="submit" value="submit">
</form>
<script type="text/javascript">
function  my(){
    var form=document.getElementById("form");
    form.submit();
}
</script>

/ Let op dat de id="m" niet id="my" is  , anders zegt hij dat het obj "my" geen fct is  ,

/ als we debug, zien we dat na
    form.submit();
/ het request niet meteen wordt verstuurd	, WH pas als js returns	,
/ TODO

/ 7	.

$ vi form3.html

/ 7	. 

/ Lees	,
https://learn.jquery.com/ajax/ajax-and-forms/

/ Lees	,
https://learn.jquery.com/ajax/ajax-and-forms/

/ we maken zelf een ajax form	,

/ proj. webapp-with-js

$ vi myjquery3.html

	<form id="form" action="form" method="POST">
		<input type="text" name="first">
		<br>
		<input type="text" name="last">
		<br>
		<input type="submit" value="submit">
	</form>
	<div id="result"></div>

$ vi my3.js

$(document).ready(function(){
	
	$("#form").submit(function(event){
		event.preventDefault()
		$.ajax({
			method:"post",
			url:"form",
			data:{first:$('input[name=first]').val(),last:$('input[name=last]').val()}
		}).done(function(msg){
		//	alert(msg);
			$("#result").html(msg);
		})
	})
	
})

////////////////////////////////////////////////////
/ Vergeet niet	;
		event.preventDefault()
/ anders gaat hij toch weer het oude gedrag doen	, en een nieuwe page create in de browser	,

/ we zien het form nog steeds	, en de result HTML is set in div.#result	,

/ 7	.

/ proj. wicket-book	,

/ 13	. 

/ Eerst gewone link	, 

/ we zien als response de hele page	, 

/ 13	. 

$ vi Ch1_3_2.html

	<a href="#" wicket:id="link2">lnk2</a>
	<h1 wicket:id="label2"></h1>
	<h1 wicket:id="label3"></h1>

$ vi Ch1_3_2.java

		Link<Void>link2=new AjaxFallbackLink<Void>("link2") {
			@Override
			public void onClick(AjaxRequestTarget target) {
				counter2++;
				if(target!=null){
					target.add(label2);
					target.add(label3);
				}
				
			}
		};
		add(link2);

		IModel<Integer>model2=new PropertyModel<Integer>(this, "counter2");
		
		label2=new Label("label2",model2);
		label2.setOutputMarkupId(true);
		add(label2);
		
		label3=new Label("label3",model2);
		label3.setOutputMarkupId(true);
		add(label3);

/ Als we click op link2	,
/ headers	,
Request URL:http://localhost:9090/wicket-book/?0-6.IBehaviorListener.0-link2&_=1435925259338 
/ TODO
/ respoonse	,
<?xml version="1.0" encoding="UTF-8"?>
<ajax-responsHe>
	<component id="label23" >
		<![CDATA[<h1 wicket:id="label2" id="label23">4</h1>]]>
	</component>
	<component id="label34" >
		<![CDATA[<h1 wicket:id="label3" id="label34">4</h1>]]>
	</component>
</ajax-response> 

/ we zien in HTML	,
<h1 wicket:id="label2" id="label23">4</h1>
<h1 wicket:id="label3" id="label34">4</h1>

/ we zien net als bij een ajax form  






/ Einde SERVLET JAVASCRIPT

/ RECENT SELENIUM

/ 7	.

/ Lees	,
http://www.tutorialspoint.com/servlets/servlets-form-data.htm
http://www.gitshah.com/2010/10/how-to-run-selenium-tests-as-part-of.html

/ Lees	,
http://books.sonatype.com/mcookbook/reference/ch08s02.html

/ Ze doen daar iets anders,	 we doen alleen	,

$ vi pom.xml

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<skip>true</skip>
				</configuration>
				<executions>
					<execution>
						<phase>integration-test</phase>
						<goals>
							<goal>test</goal>
						</goals>
						<configuration>
							<skip>false	</skip>
						</configuration>
					</execution>
				</executions>
			</plugin>

/ Deze runs alle tests, dat zijn er 2	, in src/test/java : MySeleniumTest.java, FormSeleniumTest.java	, 

/ Doe tomcat7:undeploy clean tomcat7:deploy integration-test

/ we kunnen geven	,
http://localhost:9090/webapp-with-js/form
/ we zien 	,
null
null
http://localhost:9090/webapp-with-js/form?first=foo&last=bar
/ we zien	, 
foo
bar
/ FormServlet.doGet is called	,

/ we kunnen geven	,
http://localhost:9090/webapp-with-js/form.html
/ we zien form	,
/ we geven	,
foo
bar
/ we geven enter	, 
/ we zien
foo
bar
/ FormServlet.doPost is called	,

$ vi src/main/java/FormServlet.java

@WebServlet("/form")
public class FormServlet extends HttpServlet{
	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp)
			throws ServletException, IOException {
		resp.setContentType("text/html");
		PrintWriter pw=resp.getWriter();
		String html="<!doctype html>"+
				"<body>"+
				"<h1>"+req.getParameter("first")+"</h1>"+
				"<h1>"+req.getParameter("last")+"</h1>";
				
		pw.println(html);
	}
}

$ vi src/main/webapp/form.html

<form action="form">
	<input type="text" name="first">
	<br>
	<input type="text" name="last">
	<br>
	<input type="submit" value="submit">
</form>

/ Open in chrome
http://localhost:9090/webapp-with-js/form.html
/ fill in : 
Eric
Van der Velden
/ click submit	, 
/ de hele page wordt vervangen! 
/ we zien op de antwoord page de url	,
http://localhost:9090/webapp-with-js/form?first=Eric&last=Van+der+Velden

/ we hebben de selenium tests	,

$ vi FormSeleniumTest.java

@Before
  public void setUp() throws Exception {
    driver = new ChromeDriver();
    baseUrl = "http://localhost:9090/";
    driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
  }

  @Test
  public void testFormSelenium() throws Exception {
    driver.get(baseUrl + "/webapp-with-js/form.html");
    driver.findElement(By.name("first")).clear();
    driver.findElement(By.name("first")).sendKeys("eric");
    driver.findElement(By.name("last")).clear();
    driver.findElement(By.name("last")).sendKeys("Van der Velden");
    driver.findElement(By.cssSelector("input[type=\"submit\"]")).click();
    assertEquals("eric", driver.findElement(By.cssSelector("h1")).getText());
    try {
      assertEquals("eric", driver.findElement(By.cssSelector("h1")).getText());
    } catch (Error e) {
      verificationErrors.append(e.toString());
    }
    assertEquals("Van der Velden", driver.findElement(By.xpath("//h1[2]")).getText());
    try {
      assertEquals("Van der Velden", driver.findElement(By.xpath("//h1[2]")).getText());
    } catch (Error e) {
      verificationErrors.append(e.toString());
    }
  }

/ OK

/ 7.	 

/ We maken de form een POST form	, 
/ In form.html moeten we <form method="post"/>	, in de servlet moeten we een doPost method create	, maar deze == doGet	, dus in de servlet verandert er eig. niets	,

/ 7	. 

/ NB. 

/ we write de selenium test in maven junit.  Maar het is geen junit test in de test phase, want dat is te vroge	, het is een integration test	,

$ vi pom.xml
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<skip>true</skip>	/ skip this test (although written in junit), because it is an integration test	,
				</configuration>
				<executions>
					<execution>
						<phase>integration-test</phase>
						<goals>
							<goal>test</goal>
						</goals>
						<configuration>
							<skip>false	</skip>
						</configuration>
					</execution>
				</executions>
			</plugin>

/ 7	. 

/ DEBUG INTEGRATION TEST WITH MAVEN	

/ Lees	,
https://doc.nuxeo.com/display/CORG/How+to+Debug+a+Test+Run+with+Maven

/ start tomcat, 

/ In eclipse	, 
/ ws wicket7	, project webapp-with-js	,
/ RUN webapp-with-js-integration-test-debuggable
/ DEBUG mvm-remote-on-wicket-testing

/ Meer detail	, 
$ vi bin/catalina.sh 
JPDA_ADDRESS=9966
/ NIET op 5005	, want dat gaan we zo doen	, 
/ start tomcat	, 
Listening for transport dt_socket at address: 9966

/ Run de config
$ vi webapp-with-js-integration-test-debuggable
Base dir: /home/eric/Devel/Java/Eclipse/eclipse-jee-test/workspace-wicket7/webapp-with-js
Goals: -Dmaven.surefire.debug integration-test

/ 7	. 
Listening for transport dt_socket at address: 5005
/ Dubbel click op deze link	, 
/ Hij valt in beide tests	, omdat we daar b's hebben staan	,
/ TODO (Hoe werkt dit?)

/ 7	. 
$ mvm-remote-on-wicket-testing
/ Project: wicket-testing
Host: localhost
Port 5005
/ Hij valt in beide tests	, omdat we daar b's hebben staan	,




/ Einde RECENT SELENIUM

/ RECENT SELENIUM WICKET 

/ eclipse-jee-test
/ ws wicket7	,
/ project wicket-testing
/ LinkOnlyStudyPage

/ we hebben LinkOnlyStudyPage, met een link er op	, 
/ we maken een test, die de link click	,

//////////////////////////////////////////
/ play seleniumIDE kan alleen HTML	,

/ wicket caches , dus als we opnieuw http://localhost:9090/wicket-testing/?0 geven, gaat hij verder met waar hij was	,  maar seleniumIDE draait z'n recordings af	, dus als je het aantal haakjes telt, of het getal	, klopt het niet	,

/ Lees	,
http://www.jdev.it/testing-a-wicket-application-with-selenium-ide/

/ Voor RECORDING, voor seleniumIDE moeten we	,

[eric@localhost testing]$ cat wicketPathLocatorBuilder/user-extensions.js 
LocatorBuilders.add('wicketpath', function(e) {
        this.log.debug("wicketpath: e=" + e);
        if (e.attributes && e.hasAttribute("wicketpath")) {
            this.log.info("found attribute " + e.getAttribute("wicketpath"));
            return "//" + this.xpathHtmlElement(e.nodeName.toLowerCase()) +
                "[@wicketpath=" + this.attributeValue(e.getAttribute("wicketpath")) + "]";
        }
        return null;
    });
LocatorBuilders.order.unshift(LocatorBuilders.order.pop());

/ en deze register in de seleniumIDE. 	, Options, Options, General	,
Selenium Core extensions (user-extensions.js)
/home/eric/testing/wicketPathLocatorBuilder/user-extensions.js

/ Voor de app	,
$ vi WicketApplication.java

protected void init() {
   	super.init();
   	getDebugSettings().setOutputComponentPath(true);
/ deprecated	,
/ of	,
	getDebugSettings().setComponentPathAttributeName("wicketpath");
/ OK	,
}


/ In onze app hebben we	, 

$ vi ApplicationUtils.java

		if (ApplicationServerType.PRODUCTION != serverType) {
			Application.get().getDebugSettings().setOutputComponentPath(true);
		}

/ we hebben dit gedaan op trunk, maar nu voor mposcs = SCS Demo = 2015.01

/ 7	. 

/ seleniumIDE

/ ga met muis op elem staan, bijv [[[[[[[[[[[[[]]]]]]]]]]]]]]] of 235	,
/ right click 	, kies .verify of .assert	,

/ we zien 2 play buttons: speel ze allen, of alleen de selected	,







/ Einde RECENT SELENIUM WICKET 

/ SPRING-MVC

/ Lees	,
http://www.mkyong.com/maven/how-to-create-a-web-application-project-with-maven/


/ Einde SPRING-MVC


/ LINKS IN CHROME

http://stackoverflow.com/questions/5800974/redirect-to-external-non-wicket-page-in-wicket-1-5
http://apache-wicket.1842946.n4.nabble.com/How-to-test-setResponsePage-td1864354.html
http://stackoverflow.com/questions/22756153/the-superclass-javax-servlet-http-httpservlet-was-not-found-on-the-java-build
http://stackoverflow.com/questions/12779511/refresh-entire-page-wicket
http://stackoverflow.com/questions/3244216/how-do-i-change-link-text-in-wicket
http://stackoverflow.com/questions/1652692/using-mockito-to-mock-classes-with-generic-parameters
http://stackoverflow.com/questions/7769504/testing-wicket-panels-with-constructor-arguments
http://stackoverflow.com/questions/27366681/what-is-testexecutionlisteners-and-what-they-do
http://stackoverflow.com/questions/7414794/difference-between-contextannotation-config-vs-contextcomponent-scan
http://codesolid.com/spring-unit-testing-using-junit/
http://stackoverflow.com/questions/20270330/how-to-create-date-filtered-column-property-in-wicket
http://stackoverflow.com/questions/2003505/delete-a-git-branch-both-locally-and-remotely
http://stackoverflow.com/questions/7548926/git-and-the-branch-x-is-not-fully-merged-error
http://www.postgresql.org/docs/9.1/static/queries-with.html
http://stackoverflow.com/questions/791959/download-a-specific-tag-with-git
http://stackoverflow.com/questions/4330610/switch-to-another-git-tag
http://www.postgresql.org/docs/current/interactive/explicit-joins.html


/ Einde LINKS IN CHROME

/ LESS

/ geef	,
:h
/ we zien alle commands	, zoals	,
     33                           SEARCHING
     34 
     35   /pattern          *  Search forward for (N-th) matching line.
     36   ?pattern          *  Search backward for (N-th) matching line.
     37   n                 *  Repeat previous search (for N-th occurrence).
     38   N                 *  Repeat previous search in reverse direction.


/ Einde LESS

/ WICKET1.4 JUNIT

/ 7	.

Thread [main] (Suspended)	
	...
	MyCssPanelTest.css() line: 26	
		Panel myCssPanel=wicketTester.startPanel(MyCssPanel.class);
/s
	WicketTester(BaseWicketTester).startPanel(Class<C>) line: 399	
		return (Panel)startPage(new ITestPageSource()
/s
	WicketTester(BaseWicketTester).startPage(ITestPageSource) line: 244	
		startPage(DummyHomePage.class);
/s
	WicketTester(BaseWicketTester).startPage(Class<C>) line: 303	
		processRequestCycle(pageClass);
/s
	WicketTester(MockWebApplication).processRequestCycle(Class<C>) line: 414	
		processRequestCycle(pageClass, null);
/s
	WicketTester(MockWebApplication).processRequestCycle(Class<C>, PageParameters) line: 428	
		final WebRequestCycle cycle = setupRequestAndResponse();
...
/s
WicketTester(MockWebApplication).setupRequestAndResponse(boolean) line: 677	
this	WicketTester  (id=157)	
	servletRequest	MockHttpServletRequest  (id=210)	
	servletResponse	MockWebApplication$3  (id=199) 	
		/ een MockHttpServletReponse inst, alleen addCookie is overwrite	,
	servletSession	MockHttpSession  (id=237)	
	wicketRequest	ServletWebRequest  (id=240)	
	wicketResponse	WebResponse  (id=244)	
	wicketSession	WebSession  (id=247)	

/ Intermezzo

	public MockHttpServletResponse getServletResponse()
	{
		return servletResponse;

/ Dus servletResponse in 1.4 == lastResponse in 7	,

/ Einde Intermezzo

/ Intermezzo

$ vi MyCssPanelTest.java

		Panel myCssPanel=wicketTester.startPanel(MyCssPanel.class);
		MockHttpServletResponse mockHttpServletResponse=wicketTester.getServletResponse();
mockHttpServletResponse	MockWebApplication$3  (id=187)	
	byteStream	ByteArrayOutputStream  (id=215)	
	characterEncoding	"UTF-8" (id=218)	
	code	200	
	cookies	ArrayList<E>  (id=223)	
	errorMessage	null	
	headers	ValueMap  (id=230)	
	locale	Locale  (id=234)	
	mode	2	
	printWriter	MockHttpServletResponse$2  (id=236)	
	redirectLocation	null	
	servletRequest	MockHttpServletRequest  (id=184)	
	servletStream	MockHttpServletResponse$1  (id=241)	
	status	200	
	stringWriter	StringWriter  (id=244)	
	this$0	WicketTester  (id=158)	

/ en	,
	stringWriter	StringWriter  (id=244)	
<?xml version="1.0" encoding="UTF-8"?>
<!--
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->
<html>
<body>
  <span wicket:id="panel"><wicket:panel>
	<span wicket:id="first" class="first">First Label</span>
	<span wicket:id="prev" class="prev">Prev Label</span>
</wicket:panel></span>
</body>
</html>

/ we zien hetzelfde als in wicket7	, 
/ In de MockHttpServletResponse zien we de HTML	,

/ de HTML van de page is	,

[markup = jar:file:/home/eric/Devel/Java/Eclipse/eclipse-jee/workspace/trunk/base-framework/core/lib/jar/wicket-1.4.23/wicket-1.4.23.jar!/org/apache/wicket/util/tester/DummyHomePage.html

<!--
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->
<html>
<head></head><body>
  <a href="#" wicket:id="testPage">link to test page</a>
</body>
</html>
, index = 8, current = [Raw markup]]


/ Einde Intermezzo

/ Intermezzo

$ vi MockWebApplication.class

		servletResponse = new MockHttpServletResponse(servletRequest)
		{
			@Override
			public void addCookie(Cookie cookie)

/ Einde Intermezzo

		servletRequest.initialize();
		servletResponse.initialize();
		wicketRequest = application.newWebRequest(servletRequest);
		wicketResponse = application.newWebResponse(servletResponse);

/ 7	. 

$ vi MyCssPanel2Test.java

	@Test
	public void css(){
		wicketTester.startPanel(new TestPanelSource());
		...
	}
	
	private class TestPanelSource implements ITestPanelSource {

	    private static final long serialVersionUID = 1L;

	    public Panel getTestPanel(String panelId) {
	        return new MyCssPanel2(panelId,"Foo Bar");
	    }

	}

$ vi MyCssPanel2.java

ublic class MyCssPanel2 extends Panel {
	
	public MyCssPanel2(String id,String string) {
		super(id);
		string.length();
		...
		
	}

}

/ we debug	,

/ 13	. 

	MyCssPanel2Test.css() line: 27	
	@Test
	public void css(){
		wicketTester.startPanel(new TestPanelSource());
/s
	WicketTester(BaseWicketTester).startPanel(ITestPanelSource) line: 377	
	public final Panel startPanel(final ITestPanelSource testPanelSource)
	{
->		return (Panel)startPage(new ITestPageSource()
		{
			private static final long serialVersionUID = 1L;

			public Page getTestPage()
			{
				return new DummyPanelPage(testPanelSource);
			}
		}).get(DummyPanelPage.TEST_PANEL_ID);
	}

/ Geef continue	,
 
/ 13	. 

	BaseWicketTester$2.getTestPage() line: 383	
	DummyHomePage$TestLink.onClick() line: 88	
	DummyHomePage$TestLink(Link<T>).onLinkClicked() line: 225	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 57	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 606	
	RequestListenerInterface.invoke(Page, Component) line: 182	
	ListenerInterfaceRequestTarget.processEvents(RequestCycle) line: 73	
	WebRequestCycleProcessor(AbstractRequestCycleProcessor).processEvents(RequestCycle) line: 92	
	WebRequestCycle(RequestCycle).processEventsAndRespond() line: 1279	
	WebRequestCycle(RequestCycle).step() line: 1358	
	WebRequestCycle(RequestCycle).steps() line: 1465	
	WebRequestCycle(RequestCycle).request() line: 545	
	WicketTester(MockWebApplication).processRequestCycle(WebRequestCycle) line: 528	
	WicketTester(BaseWicketTester).executeListener(Component) line: 263	
	WicketTester(BaseWicketTester).startPage(ITestPageSource) line: 248	
	WicketTester(BaseWicketTester).startPanel(ITestPanelSource) line: 377	
	MyCssPanel2Test.css() line: 27	

/ di.

public final Panel startPanel(final ITestPanelSource testPanelSource)
	{
		return (Panel)startPage(new ITestPageSource()
		{
			private static final long serialVersionUID = 1L;

			public Page getTestPage()
			{
	->			return new DummyPanelPage(testPanelSource);
			}
		}).get(DummyPanelPage.TEST_PANEL_ID);
	}

/ we gaan verder	,
	->			return new DummyPanelPage(testPanelSource);
/s
DummyPanelPage.<init>(ITestPanelSource) line: 42	
	public DummyPanelPage(final ITestPanelSource testPanelSource)
	{
		add(testPanelSource.getTestPanel(TEST_PANEL_ID));
/s
MyCssPanel2Test$TestPanelSource.getTestPanel(String) line: 48	
	private class TestPanelSource implements ITestPanelSource {

	    private static final long serialVersionUID = 1L;

	    public Panel getTestPanel(String panelId) {
->        return new MyCssPanel2(panelId,"Foo Bar");
	    }

	}
/ Onze eigen code	,


/ Einde WICKET1.4 JUNIT

/ WICKET7 JUNIT

/ 7	. 

/ we proberen hetzelfde te doen als hierboven in wicket1.4	,

$ vi MyCssPanelTest.java

		wicketTester.startComponentInPage(new MyCssPanel("panel"));
		wicketTester.assertLabel("panel:first", "First Label");
		wicketTester.assertComponent("panel:first", Label.class);

/ of	,

		wicketTester.startComponentInPage(MyCssPanel.class);
		wicketTester.assertLabel("first", "First Label");
		wicketTester.assertComponent("first", Label.class);

/ als we een class geven als arg aan .startComponentInPage	, doet Wicket new (see 1), en een inst wordt create	, en hij sets de inst als instantiated	, de test bij (2) loopt dan door, en we hoeven alleen de id van component (label) op het panel te geven,  de test loopt door WH omdat we de id van het panel niet kennen	, (al is het "testObject)	,
/ als we een panel inst geven, moeten we ook de id van het panel geven, dat kan omdat we deze kennen	, het panel is dan NIET instantiated, omdat Wicket deze niet instantiated heeft	,


/ (1)
[eric@localhost wicket]$ vi ./wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java
    public final <C extends Component> C startComponentInPage(final C component,
        IMarkupFragment pageMarkup)
    {
       }
        else
        {
            componentInPage = new ComponentInPage();
            componentInPage.component = component;
1428:      	componentInPage.isInstantiated = true;

/ (2)
/ Dan gaat de test in	,
$ vi BaseWicketTester.java

	public Component getComponentFromLastRenderedPage(String path,
		final boolean wantVisibleInHierarchy)
	{
1517:		if (componentInPage != null && componentInPage.isInstantiated)
		{
			String componentIdPageId = componentInPage.component.getId() + ':';
			if (path.startsWith(componentIdPageId) == false)
			{
				path = componentIdPageId + path;
			}
		}
/ als  Wicket de panel inst heeft instantiated, dan moeten we de panel id niet geven (die kennen we ook niet).

/ 7	. 

/ Dit hebben we gedaan, voor de ticket, maar was onnodig	,

/ we lezen	,
https://wicket.apache.org/contribute/patch.html

[eric@localhost wicket]$ git add ./wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java
[eric@localhost wicket]$ git diff --cached 
diff --git a/wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java b/wicket-core/src/main/java/org/apache/wicket/util/t
index f94305c..61decfc 100644
--- a/wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java
+++ b/wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java
@@ -1425,6 +1425,7 @@ public class BaseWicketTester
                {
                        componentInPage = new ComponentInPage();
                        componentInPage.component = component;
+                       componentInPage.isInstantiated = true;
                }
                return component;
        }

/ 7	. 

/ als een panel ctor meerdere args heeft, gaat dat heel gemakkelijk in Wicket 7	, in wicket 1.4 moesten we een truc doen	, 

/ 1.4
    @Test
    public void css(){
        wicketTester.startPanel(new TestPanelSource());
        wicketTester.assertLabel("panel:first", "First Label");

    }

    private class TestPanelSource implements ITestPanelSource {

        private static final long serialVersionUID = 1L;

        public Panel getTestPanel(String panelId) {
            return new MyCssPanel2(panelId,"Foo Bar");
        }
	}

/ in 7	, 

	@Test
	public void css(){
		wicketTester.startComponentInPage(new MyCssPanel2("panel","First Label"));
		wicketTester.assertLabel("panel:first", "First Label");




/ Einde WICKET7 JUNIT

/ MOCKITO

/ wicket 7	, MockFirstTest.java	,

/ Ga naar 
http://mockito.org/

/ we zien de link	,
maven central 2.0.14beta	, 
/ we zien dat we org.mockito:mockito-core moeten hebben 	,

/ in proj. wicket-testing 	, 
$ vi pom.xml
		...
		<dependency>
		    <groupId>org.mockito</groupId>
		    <artifactId>mockito-core</artifactId>
		    <version>${mockito.version}</version>
		</dependency>
	</dependencies>

/ Lees	,
http://site.mockito.org/mockito/docs/current/org/mockito/Mockito.html

/ we checkout	, voor voorbeelden	,
[eric@localhost Mockito]$ pwd
/home/eric/Devel/Java/Mockito
[eric@localhost Mockito]$ git clone https://github.com/mockito/mockito.git
[eric@localhost Mockito]$ cd mockito/

/ lees over mocking generic types	,,
https://docs.oracle.com/javase/1.5.0/docs/guide/language/static-import.html

/ 7	.

$ vi MockFirstTest.java

public class MockFirstTest {

	@Test
	public void test() {
		List list=mock(List.class);
		list.add("one");
		list.clear();
		when(list.size()).thenReturn(7);
		
		verify(list).add("one");
		verify(list).clear();
		
		assertEquals(7, list.size());
	}
	

	@Test
	public void test4(){
		MyI myI=mock(MyI.class);
		assertEquals(null, myI.getName());
		when(myI.getName()).thenReturn("Foo Bar");
		assertEquals("Foo Bar", myI.getName());
	}
	
	@Test(expected=RuntimeException.class)
	public void test5(){
		LinkedList list=mock(LinkedList.class);
		when(list.get(0)).thenReturn("Foo Bar");
		when(list.get(1)).thenThrow(new RuntimeException());
		assertEquals("Foo Bar", list.get(0));
		list.get(1);
		
		verify(list).get(0);
		// TODO
	}
	
/ when(list.get(0)).thenReturn("Foo Bar"): als list.get(0) wordt called, dan komt er "Foo Bar" uit	,	

/ 7	. 

/ we kunnen ook een stub call verify	,

		Assert.assertEquals(1, list.size());
		Mockito.verify(list).size();
/ passes	, 

/ maar	,
		Mockito.verify(list).size();
/ passes NIET	,	
/ want hij is niet called	, 


/ we kunnen ook de exception test	,

	@Test(expected=RuntimeException.class)
	public void test5(){
		LinkedList list=mock(LinkedList.class);
		when(list.get(1)).thenThrow(new RuntimeException());
		list.get(1);
	}
/ OK

/ 7	.

/ junit heeft dependency	,
		<dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-core</artifactId>
            <version>1.3</version>
        </dependency>

/ 	7. 

	@Test
	public void test6(){
		LinkedList list=Mockito.mock(LinkedList.class);
		Mockito.when(list.get(0)).thenReturn("Foo Bar");
		Assert.assertEquals("Foo Bar",list.get(7));

/ Deze faalt	, 
/ Maar	, 

	@Test
	public void test6(){
		LinkedList list=Mockito.mock(LinkedList.class);
		int i=Mockito.anyInt();
		Assert.assertEquals(0, i);
		Mockito.when(list.get(0)).thenReturn("Foo Bar");
		Assert.assertEquals("Foo Bar",list.get(7));

/ deze passeert	, 
/ er gebeurt blijkbaar nog meer	,

/ we kunnen korter schrijven	,

/ 7	.

/ in proj wicket-testing in wicket 7	,

$ vi MockFirstTest.java

		Mockito.anyInt();
		Mockito.when(list.get(6)).thenReturn("Foo Bar");
		Assert.assertEquals("Foo Bar",list.get(7));

		Mockito.verify(list).get(Mockito.anyInt());
/ Hebben we een .get gedaan op de list	, met welk argument dan ook?

/ OK

/ 13	. 

/ Beter is	,
		Mockito.when(list.get(Mockito.anyInt())).thenReturn("Foo Bar");


/ we mogen Mockito.anyInt() apart doen en dan .get(6)	, hij ziet WH de 6 niet	, 
/ NB	. .get(7) gebeurt in een Mockito fct, Mockito.when	,

/ 13	. 

/ bij de volgende kan je NIET splitsen	,

		Mockito.verify(list).get(Mockito.anyInt());
/ OK
/ maar ERR	,
		Mockito.anyInt();
		Mockito.verify(list).get(5);



/ 13	. 

		Mockito.verify(list,Mockito.never()).get(5);
/ OK	,


/ 13	.

/ Het ziet er naar uit dat we al dan niet los	,
	Mockito.anyInt()
/ maar dat we daarna (bijv. ?) Mockito.get moeten doen	, in een Mockito method	, zoals Mockito.when()	,

/ Dus OK	,
		Mockito.anyInt();
		Mockito.when(list.get(6)).thenReturn("Foo Bar");
		Assert.assertEquals("Foo Bar",list.get(7));

/ En ERR	,
		Mockito.anyInt();
		Mockito.when(list.get(Mockito.anyInt())).thenReturn("Foo Bar");
		Assert.assertEquals("Foo Bar",list.get(7));

/ want er is 1 Mockito.anyInt te veel	,



/ 7	. 

/ Mockito.verify is ipv. Assert.assert...

	private class IsListOfTwoElements extends ArgumentMatcher<List>{
		@Override
		public boolean matches(Object argument) {
			return ((List)argument).size()==2;
		}
	}
	@Test
	public void test6b(){
		List mock=Mockito.mock(List.class);
		Mockito.when(mock.addAll(Mockito.argThat(new IsListOfTwoElements()))).thenReturn(true);
		mock.addAll(Arrays.asList("one","two"));
		Mockito.verify(mock).addAll(Mockito.argThat(new IsListOfTwoElements()));
// of	,
		Assert.assertEquals(true, mock.addAll(Arrays.asList("one","two")));
		
	}

/ 7	. 

/ we kunnen op 2 manieren testen	,

	private class EqualsAString extends ArgumentMatcher<String>{

		@Override
		public boolean matches(Object argument) {
			return ((String)argument).equals("one");
		}
		
	}
	@Test
	public void test6f(){
		List mock=Mockito.mock(List.class);
		Mockito.when(mock.contains(Mockito.argThat(new EqualsAString()))).thenReturn(false);
		
		mock.contains("one");
		Mockito.verify(mock).contains(Mockito.argThat(new EqualsAString()));
		
	}
	@Test
	public void test6f2(){
		List mock=Mockito.mock(List.class);
		Mockito.when(mock.contains(Mockito.argThat(new EqualsAString()))).thenReturn(true);
		
		Assert.assertEquals(true, mock.contains("one"));
	}

/ 7	.

/ anyOf	,

	@Test @Ignore
	public void test6a2(){
		LinkedList mock=Mockito.mock(LinkedList.class);

		Matcher<String>one=CoreMatchers.equalTo("one");
		Matcher<String>two=CoreMatchers.equalTo("two");
		Matcher<String>anyOf=CoreMatchers.anyOf(one,two);

//		String argThat=Mockito.argThat(anyOf);
/ ERR
/ TODO

		Mockito.when(mock.contains(Mockito.argThat(CoreMatchers.anyOf(CoreMatchers.equalTo("one"), CoreMatchers.equalTo("two"))))).thenReturn(true);
		
		mock.contains(Arrays.asList("one"));
		Mockito.verify(mock).contains(Mockito.argThat(CoreMatchers.equalTo(CoreMatchers.anyOf(CoreMatchers.equalTo("one"), CoreMatchers.equalTo("two")))));

/ we geven NIET de OK	,
		mock.contains("one"
/ of	,
		mock.contains(Arrays.asList("one"));
/ Hij verwacht iets anders	,
/ TODO

/ 7	.

/ Deze matcher werkt ook	,

$ vi MockFirstTest.java

	private class EqualsAString2 extends ArgumentMatcher<String>{

		@Override
		public boolean matches(Object argument) {
			Assert.assertEquals("one", (String)argument);
			return true;
		}
		
	}
	@Test
	public void test6f2(){
		List mock=Mockito.mock(List.class);
		Mockito.when(mock.contains(Mockito.argThat(new EqualsAString2()))).thenReturn(true);
		
		Assert.assertEquals(true, mock.contains("two"));
	}

/
/ Deze matcher werkt ook	,

$ vi MockFirstTest.java

	private class EqualsAString2 extends ArgumentMatcher<String>{

		@Override
		public boolean matches(Object argument) {
			Assert.assertEquals("one", (String)argument);
			return true;
		}
		
	}
	@Test
	public void test6f2(){
		List mock=Mockito.mock(List.class);
		Mockito.when(mock.contains(Mockito.argThat(new EqualsAString2()))).thenReturn(true);
		
		Assert.assertEquals(true, mock.contains("two"));
	}
		
/ Deze test fails, omdat 
	mock.contains("two")

/ 7	.

/ capture	,

$ vi MockFirstTest.java

	private interface Sample{
		String getName() ;
		
		void setName(String name) ;
		
		boolean setOtherSample(Sample sample);
	}
	private class SampleImpl  implements Sample{
		private String name;

		@Override
		public String getName() {
			return name;
		}
		@Override
		public void setName(String name) {
			this.name = name;
		}
		@Override
		public boolean setOtherSample(Sample sample){	
			return false;
		}
	}
	private class SampleMatcher extends ArgumentMatcher<Sample>{
		@Override
		public boolean matches(Object argument) {
			return "name".equals(((Sample)argument).getName());
		}	
	}
	@Test
	public void test9(){
		final Sample mock=Mockito.mock(Sample.class);
		Mockito.when(mock.setOtherSample(Mockito.argThat(new SampleMatcher()))).thenReturn(true);
		final Sample other=new SampleImpl();
		other.setName("name");
		Assert.assertEquals(true, mock.setOtherSample(other));
		
	}
	@Test
	public void test9a(){
		final Sample mock=Mockito.mock(Sample.class);
		final Sample other=new SampleImpl();
		other.setName("name");
		mock.setOtherSample(other);
		final ArgumentCaptor<Sample>argumentCaptor=ArgumentCaptor.forClass(Sample.class);
		Mockito.verify(mock).setOtherSample(argumentCaptor.capture());
		Assert.assertEquals("name", argumentCaptor.getValue().getName());
	}
	
/ test9 en test9a kunnen allebei	,

/ NB. 
/ Sample.setOtherSample moet bijv. boolean	, we kunnen dan .thenReturn(true)	,
/ we hadden eerst void, maar dat kan NIET	, 
/ TODO
/ Kan hij geen .thenReturn()	?
/ TODO

/ 7	. 

/ Matchers	,

$ vi JUnitTest.java

public class JUnitTest {
	@Test
	public void test2(){
		List mock=Mockito.mock(List.class);
		Mockito.when(mock.addAll(Mockito.argThat(new ContainsAString2()))).thenReturn(true);
		Assert.assertEquals(true, mock.addAll(Arrays.asList("one","two")));
		
	}
	private class ContainsAString2 extends ArgumentMatcher<List>{
		@Override
		public boolean matches(Object argument) {
			return ((List)argument).contains("one");
		}
	}
/ OK

/ Maar we kunnen ook extends van hamcrest's BaseMatcher	,

	@Test
	public void test3(){
		List mock=Mockito.mock(List.class);
		Mockito.when(mock.addAll(Mockito.argThat(new ContainsAString3()))).thenReturn(true);
		Assert.assertEquals(true, mock.addAll(Arrays.asList("one","two")));
		
	}
	public class ContainsAString3 extends BaseMatcher<List>{

		@Override
		public boolean matches(Object item) {
			return ((List)item).contains("one");
		}

		@Override
		public void describeTo(Description description) {
			// TODO Auto-generated method stub
			
		}
		
	}

/ we kunnen zelfs implement hamcrest's Matcher	,

	@Test
	public void test4(){
		List mock=Mockito.mock(List.class);
		Mockito.when(mock.addAll(Mockito.argThat(new ContainsAString4()))).thenReturn(true);
		Assert.assertEquals(true, mock.addAll(Arrays.asList("one","two")));
		
	}
	public class ContainsAString4 implements Matcher<List>{

		@Override
		public void describeTo(Description description) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public boolean matches(Object item) {
			return ((List)item).contains("one");
		}

		@Override
		public void describeMismatch(Object item,
				Description mismatchDescription) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void _dont_implement_Matcher___instead_extend_BaseMatcher_() {
			// TODO Auto-generated method stub
			
		}
		
	}


/ 7	. 

/ Hoe mock List<String> bijvoorbeeld?


/ Lees	,
http://stackoverflow.com/questions/1652692/using-mockito-to-mock-classes-with-generic-parameters

/ 13	. 

/ In MockitoTest.java	,

/ Inderdaad	, 

	@Test
	public void test10() {
		List<String> list=(List<String>)Mockito.mock(List.class);
		list.add("one");
		list.add(13);
/ ERR 1
		list.clear();
		Mockito.when(list.size()).thenReturn(1);
		Mockito.when(list.get(0)).thenReturn(7);
/ ERR 2

/ ERR 1	,
The method add(int, String) in the type List<String> is not applicable for the arguments (int)

/ ERR 2	,
The method thenReturn(String) in the type OngoingStubbing<String> is not applicable for the arguments (int)

/ 13	. 

/ In Mockito2Test.java

public class Mockito2Test {
	
	private @Mock List<String> list;
	
	@Before 
	public void initMocks(){
		MockitoAnnotations.initMocks(this);
	}
	
	@Test
	public void test(){
		list.add("one");
		list.clear();
		Mockito.verify(list,Mockito.times(1)).add("one");
	}
	
	@Test
	public void test2(){
		list.add("one");
		list.clear();
		Mockito.verify(list,Mockito.times(1)).add("one");
	}

}
/ OK
/ we zien dat het meteen OK gaat met generic list	, List<String>	,

/ we zien ook dat de @Before goed werkt, in elke test is List.add() 1 keer called	, 

/ 13	. 

/ we kunnen de fixture zelfs weglaten  als we @RunWith(MockitoJUnitRunner.class) op de class set	,

$ vi Mockito3Test.java

@RunWith(MockitoJUnitRunner.class)
public class Mockito3Test {
	
	private @Mock List<String> list;
	
	@Test
	public void test(){
		list.add("one");
		list.clear();
		Mockito.verify(list,Mockito.times(1)).add("one");
	}
	
	@Test
	public void test2(){
		list.add("one");
		list.clear();
		Mockito.verify(list,Mockito.times(1)).add("one");
	}

}



/ Einde MOCKITO

/ EASYMOCK

/ Lees	,
http://easymock.org/getting-started.html

/ Lees	,
https://github.com/easymock/easymock/tree/master/easymock/src/samples/java/org/easymock/samples

[eric@localhost Testing]$ pwd
/home/eric/Devel/Java/Testing
[eric@localhost Testing]$ git clone https://github.com/easymock/easymock.git

[eric@localhost samples]$ pwd
/home/eric/Devel/Java/Testing/easymock/easymock/src/samples/java/org/easymock/samples

/ 7	.

/ In workspace-wicket7	, proj. wicket-testing	,

/ EasyMockTest is without @, EasyModk2Test en EasyMock3Test zijn met @	, en vrijwel hetzelfde	,

/ 13	. 

/ Als we 	,
	@Mock
	private Collaborator mock;
	
	@TestSubject
	private ClassUnder classUnder=new ClassUnder();

/////////////////////////////////////////////
/ dan wordt de mock injected in de classUnder, WH op grond van de type 	, omdat ClassUnder een field heeft van type Collaborator	, 


$ vi EasyMockTest.java

public class EasyMockTest extends EasyMockSupport{
	
	private static class Document{
		private Printer printer;
		private String content;
		public void setPrinter(Printer printer) {
			this.printer = printer;
		}
		public void setContent(String content) {
			this.content = content;
		}
		public void print(){
			printer.print(content);
		}
	}
	
	private static interface Printer{
		void print(String content);
	}
	
	private Printer printer;
	private Document document;
	
	@Before
	public void fixture(){
		printer=createMock(Printer.class);
		document=new Document();
		document.setPrinter(printer);
	}
	@Test
	public void test(){
		printer.print("Foo Bar");
		replayAll();
		
		document.setContent("Foo Bar");
		document.print();
		verifyAll();
	}
}

$ vi EasyMock2Test.java

@RunWith(EasyMockRunner.class)
public class EasyMock2Test extends EasyMockSupport{
	
	private static class Document{
		...
	}
	
	private static interface Printer{
		...
	}
	
	@Mock
	private Printer printer;
	
	@TestSubject
	private Document document=new Document();
	
	@Test
	public void test(){
		printer.print("Foo Bar");
		replayAll();
		
		document.setContent("Foo Bar");
		document.print();
		verifyAll();
	}
}

$ vi EasyMock3Test.java

public class EasyMock3Test extends EasyMockSupport{
	
	private interface Collaborator {
		void documentAdded(String title);
	}

	private class ClassUnder {
		private Collaborator listener;
		
		public void addDocument(String title,byte[]content){
			listener.documentAdded(title);
		}

		public Collaborator getListener() {
			return listener;
		}

		public void setListener(Collaborator listener) {
			this.listener = listener;
		}
	}
	
	@Mock
	private Collaborator mock;
	
	@TestSubject
	private ClassUnder classUnder=new ClassUnder();
	
	@Test
	public void test(){
		mock.documentAdded("Foo Bar");
		replayAll();
		
		classUnder.addDocument("Foo Bar", new byte[]{});
		verifyAll();
	}
}

//////////////////////////////////////////////
/ Let op dat je het @TestObject new 	, 
	@TestSubject
	private ClassUnder classUnder=new ClassUnder();


/ Einde EASYMOCK


/ HAMCREST

/ Lees boek(48)

/ in wicket7  (al doet dat er nu niet toe, maar daar staat: ) , proj wicket-testing	, 

$ vi HamcrestTest.java

import org.hamcrest.CoreMatchers;
import org.hamcrest.Matcher;
import org.hamcrest.core.AnyOf;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

public class HamcrestTest {
	
	private List<String> list;

	@Before
	public void setup(){
		list=new ArrayList<String>();
		list. add("x");
		list. add("y");
		list.add("z");
	}

	@Test
	public void test() {
		Assert.assertTrue(list.contains("one")||
				list.contains("two")||
				list.contains("z"));
	}
	@Test
	public void test2(){

		Assert.assertThat(list, CoreMatchers.hasItem(CoreMatchers.anyOf(CoreMatchers.equalTo("one"), CoreMatchers.equalTo("two"),CoreMatchers.equalTo("z"))));

		Matcher<String>one=CoreMatchers.equalTo("one");
/ org.hamcrest.core.IsEqual inst	,
		Matcher<String>two=CoreMatchers.equalTo("two");
		Matcher<String>three=CoreMatchers.equalTo("z");
		Matcher<String>anyOf=CoreMatchers.anyOf(one,two,three);
/ org.hamcrest.core.AnyOf inst	,
		Matcher<Iterable<? super String>>matcher=CoreMatchers.hasItem(anyOf);
/ org.hamcrest.core.IsCollectionContaining inst	,
		Assert.assertThat(list, matcher);
	}

/ Assert.assertThat heeft inderdaad een org.hamcrest.Matcher als 2de arg	,

/ Dus we geven Assert.assertThat een inst (list) en een Matcher	, en de list moet voldoen aan de matcher	,

/ 13	. 

/ we hebben rm	, 
import static org.hamcrest.CoreMatchers.anyOf;
import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.hasItem;
import static org.junit.Assert.assertThat;
import static org.junit.Assert.assertTrue;

/ want we schrijven CoreMatchers.equalTo 	, ipv. equalTo	,


/ 13	. 

/ we kregen ambiguous ERR op hasItem	, toen we static imports met *'s hadden	, 
/ TODO
/ we hebben organize imports gedaan	, toen OK	,

		Matcher<Iterable<? super String>>matcher=hasItem(anyOf);
/ Matcher<Iterable<String>>matcher=... is ERR, see 

/ 13	. 

/ org.hamcrest.CoreMatchers is 'n class	, en org.hamcrest.CoreMatchers.anyOf is een method, die een org.hamcrest.core.AnyOf inst returns	,
  
/ org.hamcrest.Matcher is een interface	, 
/ org.hamcrest.core.IsEqual	, een class	,

/13	 



/ Einde HAMCREST

/ JAVA GENERICS

/ 7	. 

/ we kunnen NIET	,
		List<? extends Number>list=new ArrayList<Integer>();
/ of	,
		List<? extends Integer>list=new ArrayList<Integer>();

		list.add(7);

/ want list is NIET van type List<Integer>

/ 7	. 

/ Dit is OK	,

		List<Integer>list=new ArrayList<Integer>();
		list.add(7);
		list.add(13);
		List<? extends Number>list2=list;
		for(Number n:list2){
			n.doubleValue();
		}

/ 7	.

		List<String>list=new ArrayList<String>();
		list.add("Foo Bar");
		List<? extends String>list2=list;

//		List<String>list3=list2;
/ ERR

/ we kunnen van String -> ? extends String	, maar NIET van ? extends String -> String	,

/ Einde JAVA GENERICS

/ WICKET QUICKSTART

/ 7	. 

/ Lees	,
https://wicket.apache.org/start/quickstart.html

/ we doen in eclipse	,
org.apache.wicket:wicket-archetype-quickstart

/ we maken wicket-unittests	 proj	,
/ we zien in src/test/java: 
Start.java, 
/ Met embedded jetty	,
TestHomePage.java	,
/ Met WicketTester	, 

/ Beide pakken de WicketApplication	, want	,
$ vi TestHomePage.java
		tester = new WicketTester(new WicketApplication());
$ vi Start.java
		bb.setWar("src/main/webapp");

$ ls src/main/webapp 
logo.png  style.css  WEB-INF
$ vi WEB-INF/web.xml
<web-app ...>
   <filter>
        <filter-name>wicket.wicket-unittests</filter-name>
        <filter-class>org.apache.wicket.protocol.http.WicketFilter</filter-class>
        <init-param>
            <param-name>applicationClassName</param-name>
            <param-value>my.own.wicket_unittests.WicketApplication</param-value>
        </init-param>
    </filter>

    <filter-mapping>
        <filter-name>wicket.wicket-unittests</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
</web-app>

/ Als we in eclipse Start run as Java Application	, dan is dat iets anders als 
$ mvn jetty:run	,

/ Intermezzo

/ Lees	,
http://www.eclipse.org/jetty/documentation/9.2.6.v20141205/maven-and-jetty.html

/ we kunnen ipv Start call vanuit eclipse met Run As -> Java Application ook met mvn exec:java
/ Gaat dat dan toch goed met de dependencies?
/ TODO

/ Einde Intermezzo

/ we doen op Start in Eclipse Run As -> Java Application	,
/ we zien	,
/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.71-2.5.3.0.fc20.x86_64/bin/java 
-Dfile.encoding=UTF-8 
-classpath 
/home/eric/Devel/Java/Wicket/wicket-unittests/target/test-classes:
/home/eric/Devel/Java/Wicket/wicket-unittests/target/classes:
/home/eric/.m2/repository/org/apache/wicket/wicket-core/7.0.0-M5/wicket-core-7.0.0-M5.jar:
/home/eric/.m2/repository/org/apache/wicket/wicket-request/7.0.0-M5/wicket-request-7.0.0-M5.jar:
/home/eric/.m2/repository/org/apache/wicket/wicket-util/7.0.0-M5/wicket-util-7.0.0-M5.jar:
/home/eric/.m2/repository/commons-fileupload/commons-fileupload/1.3.1/commons-fileupload-1.3.1.jar:
/home/eric/.m2/repository/commons-io/commons-io/2.4/commons-io-2.4.jar:
/home/eric/.m2/repository/org/slf4j/slf4j-api/1.7.10/slf4j-api-1.7.10.jar:
/home/eric/.m2/repository/org/apache/logging/log4j/log4j-slf4j-impl/2.1/log4j-slf4j-impl-2.1.jar:
/home/eric/.m2/repository/org/apache/logging/log4j/log4j-api/2.1/log4j-api-2.1.jar:
/home/eric/.m2/repository/org/apache/logging/log4j/log4j-core/2.1/log4j-core-2.1.jar:
/home/eric/.m2/repository/junit/junit/4.12/junit-4.12.jar:
/home/eric/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:
/home/eric/.m2/repository/org/eclipse/jetty/jetty-server/9.2.6.v20141205/jetty-server-9.2.6.v20141205.jar:
/home/eric/.m2/repository/javax/servlet/javax.servlet-api/3.1.0/javax.servlet-api-3.1.0.jar:
/home/eric/.m2/repository/org/eclipse/jetty/jetty-http/9.2.6.v20141205/jetty-http-9.2.6.v20141205.jar:
/home/eric/.m2/repository/org/eclipse/jetty/jetty-io/9.2.6.v20141205/jetty-io-9.2.6.v20141205.jar:
/home/eric/.m2/repository/org/eclipse/jetty/jetty-webapp/9.2.6.v20141205/jetty-webapp-9.2.6.v20141205.jar:
/home/eric/.m2/repository/org/eclipse/jetty/jetty-xml/9.2.6.v20141205/jetty-xml-9.2.6.v20141205.jar:
/home/eric/.m2/repository/org/eclipse/jetty/jetty-servlet/9.2.6.v20141205/jetty-servlet-9.2.6.v20141205.jar:
/home/eric/.m2/repository/org/eclipse/jetty/jetty-security/9.2.6.v20141205/jetty-security-9.2.6.v20141205.jar:
/home/eric/.m2/repository/org/eclipse/jetty/jetty-util/9.2.6.v20141205/jetty-util-9.2.6.v20141205.jar:
/home/eric/.m2/repository/org/eclipse/jetty/jetty-jmx/9.2.6.v20141205/jetty-jmx-9.2.6.v20141205.jar 
my.own.wicket_unittests.Start

/ we zien allemaal mvn repo's  

/ 7	. 

/ we proberen Start vanuit maven	, zoals op  
http://www.eclipse.org/jetty/documentation/9.2.6.v20141205/maven-and-jetty.html


/ Lees	,
http://www.mojohaus.org/exec-maven-plugin/
/ click Changing the classpath scope when running java programs	, 
http://www.mojohaus.org/exec-maven-plugin/examples/example-exec-or-java-change-classpath-scope.html

$ vi pom.xml
			<plugin>
		        <groupId>org.codehaus.mojo</groupId>
		        <artifactId>exec-maven-plugin</artifactId>
		        <version>1.4.0</version>
		        <executions>
		          <execution><goals><goal>java</goal></goals></execution>
		        </executions>
		        <configuration>
		        	<classpathScope>test</classpathScope>
		          	<mainClass>my.own.wicket_unittests.Start</mainClass>
		        </configuration>
      </plugin>

/ Let op de	,
		        	<classpathScope>test</classpathScope>

[eric@localhost Wicket]$  find wicket-unittests/
...
wicket-unittests/target/test-classes/my/own/wicket_unittests
wicket-unittests/target/test-classes/my/own/wicket_unittests/Start.class
wicket-unittests/target/test-classes/my/own/wicket_unittests/TestHomePage.class
wicket-unittests/target/classes
wicket-unittests/target/classes/log4j2.xml
wicket-unittests/target/classes/my
wicket-unittests/target/classes/my/own
wicket-unittests/target/classes/my/own/wicket_unittests
wicket-unittests/target/classes/my/own/wicket_unittests/WicketApplication.class
wicket-unittests/target/classes/my/own/wicket_unittests/HomePage.html
wicket-unittests/target/classes/my/own/wicket_unittests/HomePage.class

10346 13913 10345  2722 pts/2    10345 Sl+   1000   0:13 /usr/lib/jvm/java-1.7.0-openjdk-1.7.0.71-2.5.3.0.fc20.x86_64/bin/java -Dmaven.home=/usr/share/maven -Dclassworlds.conf=/home/eric/Devel/Java/Eclipse/eclipse-jee-test/workspace-wicket7/.metadata/.plugins/org.eclipse.m2e.launching/launches/m2conf4885011617906789001.tmp -Dmaven.bootclasspath=/usr/share/maven/boot/plexus-classworlds.jar -Dfile.encoding=UTF-8 -classpath /usr/share/maven/boot/plexus-classworlds.jar org.codehaus.classworlds.Launcher -B -s /home/eric/.m2/settings.xml clean test-compile exec:java

/ we zien dus niet het hele classpath	, 
/ TODO

/ we lezen 	,
http://www.eclipse.org/jetty/documentation/9.2.6.v20141205/maven-and-jetty.html

[eric@localhost wicket-unittests]$ mvn dependency:tree
[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building quickstart 0.0.1-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-dependency-plugin:2.8:tree (default-cli) @ wicket-unittests ---
[INFO] my.own:wicket-unittests:war:0.0.1-SNAPSHOT
[INFO] +- org.apache.wicket:wicket-core:jar:7.0.0-M5:compile
[INFO] |  +- org.apache.wicket:wicket-request:jar:7.0.0-M5:compile
[INFO] |  +- org.apache.wicket:wicket-util:jar:7.0.0-M5:compile
[INFO] |  |  +- commons-fileupload:commons-fileupload:jar:1.3.1:compile
[INFO] |  |  \- commons-io:commons-io:jar:2.4:compile
[INFO] |  \- org.slf4j:slf4j-api:jar:1.7.10:compile
[INFO] +- org.apache.logging.log4j:log4j-slf4j-impl:jar:2.1:compile
[INFO] |  \- org.apache.logging.log4j:log4j-api:jar:2.1:compile
[INFO] +- org.apache.logging.log4j:log4j-core:jar:2.1:compile
[INFO] +- junit:junit:jar:4.12:test
[INFO] |  \- org.hamcrest:hamcrest-core:jar:1.3:test
[INFO] +- org.eclipse.jetty:jetty-server:jar:9.2.6.v20141205:test
[INFO] |  +- javax.servlet:javax.servlet-api:jar:3.1.0:test
[INFO] |  +- org.eclipse.jetty:jetty-http:jar:9.2.6.v20141205:test
[INFO] |  \- org.eclipse.jetty:jetty-io:jar:9.2.6.v20141205:test
[INFO] +- org.eclipse.jetty:jetty-webapp:jar:9.2.6.v20141205:test
[INFO] |  +- org.eclipse.jetty:jetty-xml:jar:9.2.6.v20141205:test
[INFO] |  \- org.eclipse.jetty:jetty-servlet:jar:9.2.6.v20141205:test
[INFO] |     \- org.eclipse.jetty:jetty-security:jar:9.2.6.v20141205:test
[INFO] +- org.eclipse.jetty:jetty-util:jar:9.2.6.v20141205:test
[INFO] \- org.eclipse.jetty:jetty-jmx:jar:9.2.6.v20141205:test
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS

/ TODO

/ Einde WICKET QUICKSTART

/ TOMCAT

/ 7	.

/ Lees	,
http://tomcat.apache.org/tomcat-7.0-doc/config/context.html

When autoDeploy or deployOnStartup operations are performed by a Host, the name and context path of the web application are derived from the name(s) of the file(s) that define(s) the web application. Consequently, the context path may not be defined in a META-INF/context.xml embedded in the application and there is a close relationship between the context name, context path, context version and the base file name (the name minus any .war or .xml extension) of the file.

/ 7	.

/ Lees	,
http://archive.oreilly.com/pub/a/java/archive/tomcat.html?page=2

After you've created the web application directory structure, you must add a new ServletContext to Tomcat. The ServletContext defines a set of methods that are used by components of a web application to communicate with the servlet container. The ServletContext acts as a container for the web application. There is only one ServletContext per web application. We will discuss the relationship between a ServletContext and its web application in much more detail in Part 4, "Web Applications and the ServletContext."



To add a new ServletContext to Tomcat you need to add the following entry to the TOMCAT_HOME/conf/server.xml file, setting the values for the path and docBase to the name of your web application. Notice again that the name we are using is onjava.

<Context path="/onjava" docBase="onjava" debug="0" reloadable="true" />

There are two things here we need to focus on. The first, path="/onjava", tells the servlet container that all requests with /onjava appended to the server's URL belong to the onjava web application. The second, docBase="onjava", tells the servlet container that the web application exists in the /onjava directory.

/ Maar lees	, 
http://tomcat.apache.org/tomcat-7.0-doc/config/context.html

The Context element represents a web application, which is run within a particular virtual host. 

When autoDeploy or deployOnStartup operations are performed by a Host, the name and context path of the web application are derived from the name(s) of the file(s) that define(s) the web application. Consequently, the context path may not be defined in a META-INF/context.xml embedded in the application and there is a close relationship between the context name, context path, context version and the base file name (the name minus any .war or .xml extension) of the file.

If you want to deploy a WAR file or a directory using a context path that is not related to the base file name then one of the following options must be used to prevent double-deployment:

Disable autoDeploy and deployOnStartup and define all Contexts in server.xml
Locate the WAR and/or directory outside of the Host's appBase and use a context.xml file with a docBase attribute to define it.

It is NOT recommended to place <Context> elements directly in the server.xml file. This is because it makes modifying the Context configuration more invasive since the main conf/server.xml file cannot be reloaded without restarting Tomcat.


/ 7	.

/ tomcat standardcontext, servletcontext	,

/ Lees	,
https://tomcat.apache.org/tomcat-7.0-doc/api/org/apache/catalina/core/StandardContext.html

public class StandardContext
extends ContainerBase
implements Context, NotificationEmitter
Standard implementation of the Context interface. Each child container must be a Wrapper implementation to process the requests directed to a particular servlet.

fields
protected ApplicationContext	context
The ServletContext implementation associated with this Context.

/ Lees	,
https://tomcat.apache.org/tomcat-7.0-doc/api/org/apache/catalina/core/ApplicationContext.html

public class ApplicationContext
extends Object
implements ServletContext
Standard implementation of ServletContext that represents a web application's execution environment. An instance of this class is associated with each instance of StandardContext.

/ Lees	,
https://tomcat.apache.org/tomcat-7.0-doc/api/org/apache/catalina/Context.html

A Context is a Container that represents a servlet context, and therefore an individual web application, in the Catalina servlet engine. It is therefore useful in almost every deployment of Catalina (even if a Connector attached to a web server (such as Apache) uses the web server's facilities to identify the appropriate Wrapper to handle this request. It also provides a convenient mechanism to use Interceptors that see every request processed by this particular web application.

/ Lees	,
https://tomcat.apache.org/tomcat-7.0-doc/servletapi/javax/servlet/ServletContext.html?is-external=true

public interface ServletContext
Defines a set of methods that a servlet uses to communicate with its servlet container, for example, to get the MIME type of a file, dispatch requests, or write to a log file.
There is one context per "web application" per Java Virtual Machine. (A "web application" is a collection of servlets and content installed under a specific subset of the server's URL namespace such as /catalog and possibly installed via a .war file.)




/ 7	. 

/ docBase, appBase	,

/ Lees	,
http://www.lisnichenko.com/articles/tomcat-appbase-and-docbase.html

docBase	
The Document Base (also known as the Context Root) directory for this web application, or the pathname to the web application archive file (if this web application is being executed directly from the WAR file). You may specify an absolute pathname for this directory or WAR file, or a pathname that is relative to the appBase directory of the owning Host.

If a symbolic link is used for docBase then changes to the symbolic link will only be effective after a Tomcat restart or by undeploying and redeploying the context. A context reload is not sufficient.

Do not choose a docBase that starts with your Host's appBase string. The default appBase is "webapps" so do not choose a docBase like "webapps-foo." Doing so will lead to deployment errors: see Bugzilla for details.

The value of this field must not be set when the Context is configured using a META-INF/context.xml file as it will be inferred by the automatic deployment process.

appBase	
The Application Base directory for this virtual host. This is the pathname of a directory that may contain web applications to be deployed on this virtual host. You may specify an absolute pathname for this directory, or a pathname that is relative to the $CATALINA_BASE directory. See Automatic Application Deployment for more information on automatic recognition and deployment of web applications to be deployed automatically.If not specified, the default of webapps will be used.

/ appBase	,
[eric@localhost apache-tomcat-7.0.57]$ vi conf/server.xml 
     <Host name="localhost"  appBase="webapps" unpackWARs="true" autoDeploy="true">

/ we zien dat webapps/ de appBase is en dat autoDeploy="true"	,

/ docBase	,

$ vi   webapps/host-manager/manager.xml

<Context docBase="${catalina.home}/webapps/manager"
...

/ Maar we zien wat het is	,
[eric@localhost apache-tomcat-7.0.57]$ ls webapps/wicket-testing
logo.png  META-INF  style.css  WEB-INF



/ Einde TOMCAT

/ GIT

/ 7	. 

/ Lees	,
http://stackoverflow.com/questions/791959/download-a-specific-tag-with-git

[eric@localhost Sources]$ pwd
/home/eric/Devel/Java/Wicket/Sources

[eric@localhost Sources]$ git clone https://git-wip-us.apache.org/repos/asf/wicket.git
[eric@localhost Sources]$ git tag -l
...
[eric@localhost Sources]$ git checkout tags/wicket-7.0.0-M1
[eric@localhost Sources]$ git checkout tags/wicket-1.4.23
/ We zien inderdaad andere sources	,

[eric@localhost Sources]$ git checkout tags/wicket-7.0.0-M1
Previous HEAD position was 2095230... changes to notice files
HEAD is now at aac6981... [maven-release-plugin] prepare release wicket-7.0.0-M5
[eric@localhost wicket]$ vi ./wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java
    public final <C extends Component> C startComponentInPage(final Class<C> componentClass)
    {
        return startComponentInPage(componentClass, null);


[eric@localhost wicket]$ git checkout tags/wicket-1.4.23
Previous HEAD position was aac6981... [maven-release-plugin] prepare release wicket-7.0.0-M5
HEAD is now at 2095230... changes to notice files
[eric@localhost wicket]$ vi ./wicket/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java

/ we zien dat in BaseWicketTester.java	, 
/ in wicket-1.4.23	,
    public void startComponent(Component component)
...
    public final <C extends Panel> Panel startPanel(final Class<C> panelClass)

/ in wicket-7	,
    public final <C extends Component> C startComponentInPage(final Class<C> componentClass)


/ 7	. 

/ git update	,

[eric@localhost wicket]$  pwd
/home/eric/Devel/Java/Wicket/wicket
/ of	,
/home/eric/Devel/Java/Wicket/Sources/wicket

[eric@localhost wicket]$ git pull
Already up-to-date.
[eric@localhost wicket]$ git branch
* master
[eric@localhost wicket]$ git checkout master
Already on 'master'
Your branch is up-to-date with 'origin/master'.
[eric@localhost wicket]$ git branch
* master

/ Als *master, dan zien we,	
 
[eric@localhost wicket]$ git checkout tags/wicket-1.4.23
Note: checking out 'tags/wicket-1.4.23'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at 2095230... changes to notice files

[eric@localhost wicket]$ git branch
* (detached from wicket-1.4.23)
  master

/ Maar als NIET *master, dan zien we,	

[eric@localhost wicket]$ git checkout tags/wicket-7.0.0-M5
Previous HEAD position was 2095230... changes to notice files
HEAD is now at aac6981... [maven-release-plugin] prepare release wicket-7.0.0-M5

/ 7	.

/ create branch	,

[eric@localhost wicket]$ git branch
* (detached from wicket-1.4.23)
  master

[eric@localhost wicket]$ git checkout -b my
Switched to a new branch 'my'
[eric@localhost wicket]$ git branch
  master
* my

[eric@localhost wicket]$ git checkout my
Already on 'my'

[eric@localhost wicket]$  git branch -d my
error: Cannot delete the branch 'my' which you are currently on.
[eric@localhost wicket]$ git checkout master
Switched to branch 'master'
Your branch is up-to-date with 'origin/master'.
[eric@localhost wicket]$  git branch -d my
error: The branch 'my' is not fully merged.
If you are sure you want to delete it, run 'git branch -D my'.




/ Einde GIT

/ ECLIPSE

/ 7	.

/ mvn	,

/ in eclipse	, 
window, preferences, maven, installation
External /usr/share/maven (3.1.1)
/ click Add	, select /usr/share	, click op Name, sorts	, kies maven	,
/ we zien dat ook Global settings is ingevuld	, 
/usr/share/maven/conf/settings.xml

window, preferences, maven,  archetypes
catalog file: http://repo1.maven.org/maven2/archetype-catalog.xml
name: repo1

/ 7	.

/ rm workspace

/ Lees	,
http://stackoverflow.com/questions/514833/how-to-delete-a-workspace-in-eclipse

/ we rm op fs de workspace, 
/ daarna in eclipse	,

[eric@localhost eclipse-jee-test]$ rm workspace-wicket.1.4/ -rf
[eric@localhost eclipse-jee-test]$ rm workspace-wicket-source7/ -rf

/ rm de list uit de sugeesties als we eclipse start	,
/ Ga in eclipse, naar window, preferences, general, startup and shutdown	,
/ rm beide uit de list	,





/ Einde ECLIPSE

/ ECLIPSE WICKET SOURCE

/ 7	. 

/ we maken met eclipse-jee-test een aparte workspace	, workspace-wicket-source7	,
/ we import	, 
/home/eric/Devel/Java/Wicket/wicket




/ Einde ECLIPSE WICKET SOURCE

/ JAVASCRIPT

/ browsersync	,

/ Einde JAVASCRIPT

/ WICKET MODELS

/ in proj. wicket-testing	,

public class Simple extends WebPage {
	public Simple() {
		final IModel<String>model=new Model<String>();
		Label label=new Label("title",model);
		add(label);
//		model.setObject("Foo Bar");
/ OK
		new Thread(){
			public void run() {
				try{Thread.sleep(3000);}catch(InterruptedException e){}
				model.setObject("Foo Bar");
/ WERKT NIET
			}
		}.start();

/ de page is al rendered	, 		



/ Einde WICKET MODELS

/ BASH SCRIPTS

/ 7	 .

/ we hebben chromedriver in ~/testing set	,

[eric@localhost bin]$ pwd
/home/eric/bin
[eric@localhost bin]$ ln -s ~/testing/chromedriver .

/ 7	. 

/ we kunnen NIET	,



/ Einde BASH SCRIPTS

/ SELENIUM FITNESSE

/ Geef in firefox: addons.mozilla.org
/ Search for : xebium
/ Op de gewone manier lukt het niet	,




/ Einde SELENIUM FITNESSE

/ SELENIUM

-rw-rw-r--. 1 eric eric  908 Jun 24  2015 EasyMock3Test.java
-rw-rw-r--. 1 eric eric 1100 Jun 24  2015 EasyMock2Test.java
-rw-rw-r--. 1 eric eric  985 Jun 24  2015 EasyMockTest.java
-rw-rw-r--. 1 eric eric 7640 Dec  7 10:22 MockitoTest.java
-rw-rw-r--. 1 eric eric  618 Dec  7 14:51 HomePageTest.java
-rw-r--r--. 1 eric eric 2226 Dec  7 14:57 XFirefoxIDETest.java
-rw-r--r--. 1 eric eric 2321 Dec  7 17:04 XChromeIDE4Test.java
-rw-r--r--. 1 eric eric 2356 Dec  8 10:10 XFirefoxIncotermsTest.java
-rw-r--r--. 1 eric eric 2009 Dec  9 13:47 XMisc6Test.java
-rw-r--r--. 1 eric eric 4606 Dec  9 13:55 XMisc5Test.java
-rw-r--r--. 1 eric eric 1969 Dec 10 10:22 XFramesTest.java
-rw-r--r--. 1 eric eric 2068 Dec 11 13:23 XNuTest.java
-rw-r--r--. 1 eric eric 2126 Dec 11 13:51 XJQueryTest.java
-rw-r--r--. 1 eric eric 3145 Dec 11 13:51 XFirefoxIDE3Test.java
-rw-r--r--. 1 eric eric 2264 Dec 11 13:53 XFirefoxIDE2Test.java
-rw-r--r--. 1 eric eric 2217 Dec 11 14:16 XJQuery2Test.java
-rw-r--r--. 1 eric eric 2091 Dec 11 14:21 XFrames2Test.java


/ Einde SELENIUM

/ FITNESSE

/ geef in google	,
fitnesse java application

/ geef in google	,
fitnesse java spring application
http://stackoverflow.com/questions/6512838/how-to-load-springs-application-context-with-a-fitnesse-test-fixture


/ Einde FITNESSE

/ MPO

https://test.scs.mp-objects.com/pnloms/core/index_frameset
/ Einde MPO

/ SKYPE INSTALL

/ Lees	,
http://www.if-not-true-then-false.com/2012/install-skype-on-fedora-centos-red-hat-rhel-scientific-linux-sl/

[eric@localhost Ehcache]$   sudo yum install alsa-lib.i686 fontconfig.i686 freetype.i686 \
> glib2.i686 libSM.i686 libXScrnSaver.i686 libXi.i686 \
> libXrandr.i686 libXrender.i686 libXv.i686 libstdc++.i686 \
> pulseaudio-libs.i686 qt.i686 qt-x11.i686 zlib.i686 qtwebkit.i686
Loaded plugins: langpacks, refresh-packagekit
Package fontconfig-2.11.0-2.fc20.i686 already installed and latest version
Package freetype-2.5.0-5.fc20.i686 already installed and latest version
Package glib2-2.38.2-2.fc20.i686 already installed and latest version
Package libSM-1.2.1-6.fc20.i686 already installed and latest version
Package libXi-1.7.4-1.fc20.i686 already installed and latest version
Package libXrandr-1.4.1-2.fc20.i686 already installed and latest version
Package libXrender-0.9.8-2.fc20.i686 already installed and latest version
Package libstdc++-4.8.3-7.fc20.i686 already installed and latest version
Package zlib-1.2.8-3.fc20.i686 already installed and latest version
Resolving Dependencies
--> Running transaction check
---> Package alsa-lib.i686 0:1.0.27.2-2.fc20 will be installed
---> Package libXScrnSaver.i686 0:1.2.2-6.fc20 will be installed
---> Package libXv.i686 0:1.0.9-2.fc20 will be installed
---> Package pulseaudio-libs.i686 0:5.0-7.fc20 will be installed
--> Processing Dependency: libwrap.so.0 for package: pulseaudio-libs-5.0-7.fc20.i686
--> Processing Dependency: libsndfile.so.1(libsndfile.so.1.0) for package: pulseaudio-libs-5.0-7.fc20.i686
--> Processing Dependency: libsndfile.so.1 for package: pulseaudio-libs-5.0-7.fc20.i686
--> Processing Dependency: libjson-c.so.2 for package: pulseaudio-libs-5.0-7.fc20.i686
--> Processing Dependency: libasyncns.so.0 for package: pulseaudio-libs-5.0-7.fc20.i686
--> Processing Dependency: libXtst.so.6 for package: pulseaudio-libs-5.0-7.fc20.i686
---> Package qt.i686 1:4.8.6-10.fc20 will be installed
--> Processing Dependency: libsqlite3.so.0 for package: 1:qt-4.8.6-10.fc20.i686
---> Package qt-x11.i686 1:4.8.6-10.fc20 will be installed
--> Processing Dependency: libmng.so.1 for package: 1:qt-x11-4.8.6-10.fc20.i686
---> Package qtwebkit.i686 0:2.3.3-7.fc20 will be installed
--> Processing Dependency: libxslt.so.1(LIBXML2_1.1.9) for package: qtwebkit-2.3.3-7.fc20.i686
--> Processing Dependency: libxslt.so.1(LIBXML2_1.0.24) for package: qtwebkit-2.3.3-7.fc20.i686
--> Processing Dependency: libxslt.so.1(LIBXML2_1.0.22) for package: qtwebkit-2.3.3-7.fc20.i686
--> Processing Dependency: libxslt.so.1(LIBXML2_1.0.11) for package: qtwebkit-2.3.3-7.fc20.i686
--> Processing Dependency: libxslt.so.1 for package: qtwebkit-2.3.3-7.fc20.i686
--> Processing Dependency: libxml2.so.2(LIBXML2_2.6.6) for package: qtwebkit-2.3.3-7.fc20.i686
--> Processing Dependency: libxml2.so.2(LIBXML2_2.6.0) for package: qtwebkit-2.3.3-7.fc20.i686
--> Processing Dependency: libxml2.so.2(LIBXML2_2.4.30) for package: qtwebkit-2.3.3-7.fc20.i686
--> Processing Dependency: libxml2.so.2 for package: qtwebkit-2.3.3-7.fc20.i686
--> Processing Dependency: libwebp.so.4 for package: qtwebkit-2.3.3-7.fc20.i686
--> Processing Dependency: libgstvideo-0.10.so.0 for package: qtwebkit-2.3.3-7.fc20.i686
--> Processing Dependency: libgstreamer-0.10.so.0 for package: qtwebkit-2.3.3-7.fc20.i686
--> Processing Dependency: libgstpbutils-0.10.so.0 for package: qtwebkit-2.3.3-7.fc20.i686
--> Processing Dependency: libgstinterfaces-0.10.so.0 for package: qtwebkit-2.3.3-7.fc20.i686
--> Processing Dependency: libgstbase-0.10.so.0 for package: qtwebkit-2.3.3-7.fc20.i686
--> Processing Dependency: libgstapp-0.10.so.0 for package: qtwebkit-2.3.3-7.fc20.i686
--> Processing Dependency: libQtSensors.so.1 for package: qtwebkit-2.3.3-7.fc20.i686
--> Processing Dependency: libQtLocation.so.1 for package: qtwebkit-2.3.3-7.fc20.i686
--> Running transaction check
---> Package gstreamer.i686 0:0.10.36-6.fc20 will be installed
---> Package gstreamer-plugins-base.i686 0:0.10.36-6.fc20 will be installed
--> Processing Dependency: libvorbisenc.so.2 for package: gstreamer-plugins-base-0.10.36-6.fc20.i686
--> Processing Dependency: libvorbis.so.0 for package: gstreamer-plugins-base-0.10.36-6.fc20.i686
--> Processing Dependency: libvisual-0.4.so.0 for package: gstreamer-plugins-base-0.10.36-6.fc20.i686
--> Processing Dependency: libtheoraenc.so.1(libtheoraenc_1.0) for package: gstreamer-plugins-base-0.10.36-6.fc20.i686
--> Processing Dependency: libtheoraenc.so.1 for package: gstreamer-plugins-base-0.10.36-6.fc20.i686
--> Processing Dependency: libtheoradec.so.1(libtheoradec_1.0) for package: gstreamer-plugins-base-0.10.36-6.fc20.i686
--> Processing Dependency: libtheoradec.so.1 for package: gstreamer-plugins-base-0.10.36-6.fc20.i686
--> Processing Dependency: liborc-test-0.4.so.0 for package: gstreamer-plugins-base-0.10.36-6.fc20.i686
--> Processing Dependency: liborc-0.4.so.0 for package: gstreamer-plugins-base-0.10.36-6.fc20.i686
--> Processing Dependency: libogg.so.0 for package: gstreamer-plugins-base-0.10.36-6.fc20.i686
--> Processing Dependency: libcdda_paranoia.so.0 for package: gstreamer-plugins-base-0.10.36-6.fc20.i686
--> Processing Dependency: libcdda_interface.so.0 for package: gstreamer-plugins-base-0.10.36-6.fc20.i686
---> Package json-c.i686 0:0.11-6.fc20 will be installed
---> Package libXtst.i686 0:1.2.2-2.fc20 will be installed
---> Package libasyncns.i686 0:0.8-6.fc20 will be installed
---> Package libmng.i686 0:1.0.10-12.fc20 will be installed
--> Processing Dependency: liblcms.so.1 for package: libmng-1.0.10-12.fc20.i686
---> Package libsndfile.i686 0:1.0.25-8.fc20 will be installed
--> Processing Dependency: libgsm.so.1 for package: libsndfile-1.0.25-8.fc20.i686
--> Processing Dependency: libFLAC.so.8 for package: libsndfile-1.0.25-8.fc20.i686
---> Package libwebp.i686 0:0.3.1-3.fc20 will be installed
---> Package libxml2.i686 0:2.9.1-2.fc20 will be installed
---> Package libxslt.i686 0:1.1.28-5.fc20 will be installed
---> Package qt-mobility-location.i686 0:1.2.2-0.16.20140317git169da60c.fc20 will be installed
--> Processing Dependency: qt-mobility-common(x86-32) = 1.2.2-0.16.20140317git169da60c.fc20 for package: qt-mobility-location-1.2.2-0.16.20140317git169da60c.fc20.i686
--> Processing Dependency: libproj.so.0 for package: qt-mobility-location-1.2.2-0.16.20140317git169da60c.fc20.i686
---> Package qt-mobility-sensors.i686 0:1.2.2-0.16.20140317git169da60c.fc20 will be installed
---> Package sqlite.i686 0:3.8.6-2.fc20 will be installed
--> Processing Dependency: libtinfo.so.5 for package: sqlite-3.8.6-2.fc20.i686
--> Processing Dependency: libreadline.so.6 for package: sqlite-3.8.6-2.fc20.i686
--> Processing Dependency: libncurses.so.5 for package: sqlite-3.8.6-2.fc20.i686
---> Package tcp_wrappers-libs.i686 0:7.6-76.fc20 will be installed
--> Running transaction check
---> Package cdparanoia-libs.i686 0:10.2-14.fc20 will be installed
---> Package flac-libs.i686 0:1.3.0-3.fc20 will be installed
---> Package gsm.i686 0:1.0.13-10.fc20 will be installed
---> Package lcms-libs.i686 0:1.19-10.fc20 will be installed
---> Package libogg.i686 2:1.3.0-6.fc20 will be installed
---> Package libtheora.i686 1:1.1.1-9.fc20 will be installed
---> Package libvisual.i686 0:0.4.0-14.fc20 will be installed
---> Package libvorbis.i686 1:1.3.4-1.fc20 will be installed
---> Package ncurses-libs.i686 0:5.9-12.20130511.fc20 will be installed
---> Package orc.i686 0:0.4.22-2.fc20 will be installed
---> Package proj.i686 0:4.8.0-5.fc20 will be installed
---> Package qt-mobility-common.i686 0:1.2.2-0.16.20140317git169da60c.fc20 will be installed
---> Package readline.i686 0:6.2-10.fc20 will be installed
--> Finished Dependency Resolution

Dependencies Resolved

==========================================================================================================================================
 Package                              Arch               Version                                              Repository             Size
==========================================================================================================================================
Installing:
 alsa-lib                             i686               1.0.27.2-2.fc20                                      fedora                388 k
 libXScrnSaver                        i686               1.2.2-6.fc20                                         fedora                 24 k
 libXv                                i686               1.0.9-2.fc20                                         fedora                 17 k
 pulseaudio-libs                      i686               5.0-7.fc20                                           updates               498 k
 qt                                   i686               1:4.8.6-10.fc20                                      updates               4.8 M
 qt-x11                               i686               1:4.8.6-10.fc20                                      updates                13 M
 qtwebkit                             i686               2.3.3-7.fc20                                         updates                20 M
Installing for dependencies:
 cdparanoia-libs                      i686               10.2-14.fc20                                         fedora                 52 k
 flac-libs                            i686               1.3.0-3.fc20                                         fedora                172 k
 gsm                                  i686               1.0.13-10.fc20                                       fedora                 30 k
 gstreamer                            i686               0.10.36-6.fc20                                       fedora                961 k
 gstreamer-plugins-base               i686               0.10.36-6.fc20                                       fedora                1.2 M
 json-c                               i686               0.11-6.fc20                                          updates                31 k
 lcms-libs                            i686               1.19-10.fc20                                         fedora                106 k
 libXtst                              i686               1.2.2-2.fc20                                         fedora                 20 k
 libasyncns                           i686               0.8-6.fc20                                           fedora                 26 k
 libmng                               i686               1.0.10-12.fc20                                       fedora                174 k
 libogg                               i686               2:1.3.0-6.fc20                                       fedora                 24 k
 libsndfile                           i686               1.0.25-8.fc20                                        fedora                161 k
 libtheora                            i686               1:1.1.1-9.fc20                                       fedora                140 k
 libvisual                            i686               0.4.0-14.fc20                                        fedora                138 k
 libvorbis                            i686               1:1.3.4-1.fc20                                       updates               179 k
 libwebp                              i686               0.3.1-3.fc20                                         updates               165 k
 libxml2                              i686               2.9.1-2.fc20                                         fedora                651 k
 libxslt                              i686               1.1.28-5.fc20                                        fedora                236 k
 ncurses-libs                         i686               5.9-12.20130511.fc20                                 fedora                305 k
 orc                                  i686               0.4.22-2.fc20                                        updates               169 k
 proj                                 i686               4.8.0-5.fc20                                         fedora                174 k
 qt-mobility-common                   i686               1.2.2-0.16.20140317git169da60c.fc20                  updates                35 k
 qt-mobility-location                 i686               1.2.2-0.16.20140317git169da60c.fc20                  updates               592 k
 qt-mobility-sensors                  i686               1.2.2-0.16.20140317git169da60c.fc20                  updates               122 k
 readline                             i686               6.2-10.fc20                                          updates               186 k
 sqlite                               i686               3.8.6-2.fc20                                         updates               440 k
 tcp_wrappers-libs                    i686               7.6-76.fc20                                          fedora                 66 k

Transaction Summary
==========================================================================================================================================
Install  7 Packages (+27 Dependent packages)

Total download size: 45 M
Installed size: 140 M
Is this ok [y/d/N]: 

[eric@localhost Ehcache]$ cd /tmp
[eric@localhost tmp]$ wget --trust-server-names http://www.skype.com/go/getskype-linux-dynamic
--2014-10-17 17:32:39--  http://www.skype.com/go/getskype-linux-dynamic
Resolving www.skype.com (www.skype.com)... 157.56.114.105
Connecting to www.skype.com (www.skype.com)|157.56.114.105|:80... connected.
HTTP request sent, awaiting response... 302 Found
Location: http://download.skype.com/linux/skype-4.3.0.37.tar.bz2 [following]
--2014-10-17 17:32:39--  http://download.skype.com/linux/skype-4.3.0.37.tar.bz2
Resolving download.skype.com (download.skype.com)... 95.100.97.58, 95.100.97.34
Connecting to download.skype.com (download.skype.com)|95.100.97.58|:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 19310701 (18M) [application/octet-stream]
Saving to: ‘skype-4.3.0.37.tar.bz2’

100%[================================================================================================>] 19,310,701  6.69MB/s   in 2.8s   

2014-10-17 17:32:42 (6.69 MB/s) - ‘skype-4.3.0.37.tar.bz2’ saved [19310701/19310701]

[eric@localhost tmp]$ sudo mkdir /opt/skype
[eric@localhost tmp]$ sudo tar xvf skype-4.3* -C /opt/skype --strip-components=1

[eric@localhost tmp]$ sudo ln -s /opt/skype/skype.desktop /usr/share/applications/skype.desktop
[eric@localhost tmp]$ sudo ln -s /opt/skype/icons/SkypeBlue_48x48.png /usr/share/icons/skype.png
[eric@localhost tmp]$ sudo ln -s /opt/skype/icons/SkypeBlue_48x48.png /usr/share/pixmaps/skype.png
[eric@localhost tmp]$ sudo touch /usr/bin/skype
[eric@localhost tmp]$ sudo touch /usr/bin/skype
[eric@localhost tmp]$ ls -l /usr/bin/skype
-rw-r--r--. 1 root root 0 Oct 17 17:35 /usr/bin/skype
[eric@localhost tmp]$ sudo chmod 755 /usr/bin/skype
[eric@localhost tmp]$ ls -l /usr/bin/skype
-rwxr-xr-x. 1 root root 0 Oct 17 17:35 /usr/bin/skype

$ sudo vi /usr/bin/skype
#!/bin/sh
export SKYPE_HOME="/opt/skype"
 
$SKYPE_HOME/skype --resources=$SKYPE_HOME $*

$ skype

/ Account:
ericjvandervelden
rtdMpo45



/ Einde SKYPE INSTALL

/ OPEN IN ECLIPSE

https://github.com/apache/wicket
http://tomcat.apache.org/maven-plugin-2.2/tomcat7-maven-plugin/plugin-info.html
http://www.mkyong.com/maven/how-to-deploy-maven-based-war-file-to-tomcat/
http://www.mkyong.com/wicket/how-do-setup-wicket-examples-in-eclipse/
http://www.wicket-library.com/wicket-examples/index.html
http://stackoverflow.com/questions/2059431/get-source-jars-from-maven-repository
http://www.journaldev.com/3481/hibernate-save-vs-saveorupdate-vs-persist-vs-merge-vs-update-explanation-with-examples
http://stackoverflow.com/questions/16047306/how-is-docker-io-different-from-a-normal-virtual-machine/16048358#16048358
http://localhost:9090/simple-webapp/weather.x?zip=60202
http://en.wikibooks.org/wiki/Java_Persistence
http://serverfault.com/questions/554359/postgresql-timezone-does-not-match-system-timezone
http://stackoverflow.com/questions/5459176/difference-between-hibernate-update-by-session-update-and-hibernatetemplate-merg
http://dzone.com/page/research

/ Einde OPEN IN ECLIPSE

/ NETWORKING

[eric@localhost isbscs]$ host www.mp-objects.com
www.mp-objects.com is an alias for www.mp-objects.com.cname.jxshosting.nl.
www.mp-objects.com.cname.jxshosting.nl has address 81.4.97.68
www.mp-objects.com.cname.jxshosting.nl has IPv6 address 2001:828:405:27::5104:6144

/ Lees	,
https://developers.google.com/speed/public-dns/docs/using

; <<>> DiG 9.9.4-P2-RedHat-9.9.4-15.P2.fc20 <<>> @8.8.8.8 www.mp-objects.com
; (1 server found)
;; global options: +cmd
;; Got answer:
;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 6043
;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 512
;; QUESTION SECTION:
;www.mp-objects.com.		IN	A

;; ANSWER SECTION:
www.mp-objects.com.	3129	IN	A	208.91.197.132

;; Query time: 14 msec
;; SERVER: 8.8.8.8#53(8.8.8.8)
;; WHEN: Tue Jan 06 15:12:50 CET 2015
;; MSG SIZE  rcvd: 63


/ Einde NETWORKING


/ JSP TLD TAGLIB

[eric@localhost Jsp]$ pwd
/home/eric/Devel/Java/Jsp
[eric@localhost Jsp]$ ls
jsp  jspbook

/ 13	. 

$ vi date.jsp

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Insert title here</title>
</head>
<body>
	<jsp:useBean id="clock" class="java.util.Date">
		<ul>
			<li>Date: <jsp:getProperty property="date" name="clock"/>
			<li>Month: <jsp:getProperty property="month" name="clock"/>
			<li>${clock.date}</li>
			<li>${clock.month}</li>
		</ul>
	</jsp:useBean>
</body>
</html>

/ 13	.

/ Lees	,
http://stackoverflow.com/questions/20280203/name-was-not-previously-introduced-as-per-jsp-5-3

But, more importantly, you're coding your JSPs as if we were still in 1999. Since then, the JSP EL and the JSTL have been introduced, and scriptlets and jsp:xxx tags shouldn't be used anymore in JSPs. Your JSP should simply be:

<%@ page 
    language="java" 
    contentType="text/html; charset=ISO-8859-1" 
    pageEncoding="ISO-8859-1"
%>
<!DOCTYPE html>
<html>
  <head>
    <title>Result</title>
  </head>
  <body>
    ${user.firstName}
  </body>
</html>
Or, even better, you should be using the JSTL and make sure special characters in the firstName are properly escaped:

/ 13	. 

<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>
...
<c:out value="${user.firstName}"/>

/////////////////////////////////////////////////////////
/ we use hier jstl en el

$ vi pom.xml

  	<dependency>
		    <groupId>javax.servlet</groupId>
		    <artifactId>jstl</artifactId>
		    <version>1.2</version>
		    <scope>runtime</scope>
		</dependency>
		

			<plugin>
				<groupId>org.apache.tomcat.maven</groupId>
				<artifactId>tomcat7-maven-plugin</artifactId>
				<version>${tomcat.version}</version>
				<configuration>
	    			<url>http://localhost:9090/manager/text</url>
	    			<server>my_tomcat</server>
 	 			</configuration>
			</plugin>

/////////////////////////////////////////////////////////////////////
/ Let op 	, javax.servlet:jstl is runtime	, alleen bij execution dus	, provided is fout	,

/ we moeten jstl dependency toevoegen	, omdat we hebben	,
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>

/ oef met <c:out>

/ lees	,
http://stackoverflow.com/questions/2276083/include-jstl-dependency-with-maven

/ 13	. 

/ Geef in eclipse	,
jsp tutorial	,
/ we download van 
http://www.javatpoint.com/jstl

[eric@localhost Jsp]$ unzip  ~/Downloads/out.zip 
/ TODO

/ 13	.

/ wat we misten was el	,

/ Lees	,
http://stackoverflow.com/questions/793983/jsp-el-expression-is-not-evaluated

/////////////////////////////////////////
/ el werkt OK als we in web.xml (NIET in de jsp dus) het volgende	,

/////////////////////////////////////////
$ vi web.xml	,

<?xml version="1.0" encoding="ISO-8859-1"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	version="2.5">

	<display-name>jsp</display-name>
</web-app>

/ We HADDEN	, 

///////////////////////////////////////
$ vi web.xml
<!DOCTYPE web-app PUBLIC
 "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
 "http://java.sun.com/dtd/web-app_2_3.dtd" >

<web-app>
  <display-name>Archetype Created Web Application</display-name>
</web-app>
/ ERR

$ vi date.jsp

<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>

	<jsp:useBean id="clock" class="java.util.Date"></jsp:useBean>
		<ul>
			<li>Date: <jsp:getProperty property="date" name="clock"/>
			<li>Month: <jsp:getProperty property="month" name="clock"/>
			<li>${clock.date}</li>
			<li>${clock.month}</li>
			
		</ul>
		<c:out value="${clock.date}"/>


/ 13	. 

/ we maken 
userinfo.html
userinfo1.jsp
jsp.my.UserInfoBean.java
/ OK

$ vi userinfo.html

<form action="userinfo1.jsp" method="post">
	<span>Name</span>
	<input type="text" name="firstName" id="first">
</form>

/////////////////////////////////////////////////////////////////////
/ JSP werkt via de name attr	, see boek(65, 66)

/ userinfo1.jsp levert de response page	, dus daarom is userinfo1.jsp de action	,

/ <input name="..."> corresp. met <jsp:setProperty property="*"> 

$ vi userinfo1.jsp

<jsp:useBean id="userInfo" class="jsp.my.UserInfoBean">
	<jsp:setProperty name="userInfo" property="*"/>
</jsp:useBean>


<h1>We see</h1>
<jsp:getProperty property="firstName" name="userInfo"/>

$ vi jsp/my/UserInfoBean.java

	private String firstName;

	public String getFirstName() {
		return firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

/ 13	.

/ in greeting.jsp	,

	<jsp:useBean id="clock" class="java.util.Date"></jsp:useBean>
	<% if(clock.getHours()<12){ %>
		Good morning!
	<% }else if(clock.getHours()<17){ %>
		Good day!
	<% }else{ %>
		Good evening!
	<% } %>

/ 13.

/ we maken loop.jsp	, 

	<form action="loop.jsp">
		<input type="checkbox" name="fruits" value="apple">Apple<br>
		<input type="checkbox" name="fruits" value="pear">Pear<br>
		<input type="checkbox" name="fruits" value="orange">Orange<br>
		<input type="submit">
	</form>
	<%
		String[] picked=request.getParameterValues("fruits");
		if(picked!=null && picked.length!=0){
	%>
	<ul>
	<% 
			for(int i=0;i<picked.length;i++){
				out.println("<li>"+picked[i]);
			}
	%>
	</ul>
	<%
		}
	%>

/ OK

/////////////////////////////////////////////////////////////////////
/ JSP werkt via de name attr	, see boek(65, 66)

/ 13	. 

/ we passen date.jsp van boven aan, met <%= ...	,

	<jsp:useBean id="clock" class="java.util.Date"></jsp:useBean>
	<ul>
		<li>Date: <jsp:getProperty property="date" name="clock"/></li>
		<li>Date: <%= clock.getDate() %></li>
		<li><c:out value="${clock.date}"/></li>
	</ul>

Date: 24
Date: 24
24

/ we kunnen op 3 manieren print	,

/13	. 

/ Lees	,
http://www.javatpoint.com/jstl

$ vi out.html

<form action="out.jsp" method="post">
FirstName:<input type="text" name="fname"/><br/>
LastName:<input type="text" name="lname"/><br/>
<input type="submit" value="submit"/>
</form>

$ vi out.jsp

<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
First Name:<c:out value="${param.fname}"></c:out><br/>
Last Name:<c:out value="${param.lname}"></c:out>

/ OK

/ CUSTOM TAGS

/ 13	. 

/ Lees	,
http://www.java2s.com/Tutorial/Java/0360__JSP/CustomTagSupport.htm

[eric@localhost Jsp]$ pwd
/home/eric/Devel/Java/Jsp
[eric@localhost Jsp]$ unzip  ~/Downloads/CustomTagTagSupport.zip 

/ 13	. 

/ Lees	,
http://www.java2s.com/Tutorial/Java/0360__JSP/CustomTagSupport.htm


/ Lees	,
http://stackoverflow.com/questions/2276083/include-jstl-dependency-with-maven

/ Lees	,
http://stackoverflow.com/questions/20093237/java-lang-classnotfoundexception-javax-servlet-jsp-tagext-tag

/ Voor javax.servlet.jsp.tagext.TagSupport	,

		<dependency>
		    <groupId>javax.servlet.jsp</groupId>
		    <artifactId>jsp-api</artifactId>
		    <version>2.2</version>
		    <scope>provided</scope>
		</dependency>

/ we zien in tomcat	,
./lib/el-api.jar
./lib/jsp-api.jar

///////////////////////////////////////////////////////////////
/ Dus el is er al, en jsp-api ook	, daarom hebben we hier jsp-api provided	,

/ Voor	,
			HttpServletResponse response=(HttpServletResponse)pageContext.getResponse();
 doen we	,
		<dependency>
		    <groupId>javax.servlet</groupId>
		    <artifactId>servlet-api</artifactId>
		    <version>2.5</version>
		    <scope>provided</scope>
		</dependency>

/ 13	. 

/ tld's zitten in WEB-INF	, naast web.xml	,

/ Lees	,
http://docs.oracle.com/javaee/5/tutorial/doc/bnamu.html

<taglib
    xsi:schemaLocation="http://java.sun.com/xml/ns/javaee web-jsptaglibrary_2_1.xsd"
    xmlns="http://java.sun.com/xml/ns/javaee"|
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    version="2.1"
> 
/ TODO

/ Lees	,
http://www.tutorialspoint.com/jsp/jsp_custom_tags.htm
http://www.java2s.com/Tutorial/Java/0360__JSP/CustomTagSupport.htm

/ 7	.
//////////////////////////////////////////////////////

/ uiteindelijke custom tag	,

/ Lees	,
http://www.tutorialspoint.com/jsp/jsp_custom_tags.htm

$ vi pom.xml

		
   		<dependency>
		    <groupId>javax.servlet</groupId>
		    <artifactId>jstl</artifactId>
		    <version>1.2</version>
		    <scope>runtime</scope>
		</dependency>
		
		<dependency>
		    <groupId>javax.servlet.jsp</groupId>
		    <artifactId>jsp-api</artifactId>
		    <version>2.2</version>
		    <scope>provided</scope>
		</dependency>
		
    
		<plugin>
			<groupId>org.apache.tomcat.maven</groupId>
			<artifactId>tomcat7-maven-plugin</artifactId>
			<version>${tomcat.version}</version>
			<configuration>
	    		<url>http://localhost:9090/manager/text</url>
	    		<server>my_tomcat</server>
 	 		</configuration>
		</plugin>

$ vi HelloTag.java

public class HelloTag extends SimpleTagSupport{
	@Override
	public void doTag() throws JspException, IOException {
		JspWriter out=getJspContext().getOut();
		out.println("Hello, I am a custom tag");
		
	}
}

$ vi custom.tld

<?xml version="1.0" encoding="UTF-8"?>
<taglib>
	<tlib-version>1.0</tlib-version>  
	<jsp-version>2.1</jsp-version>
	<short-name></short-name>
	 <tag>
    	<name>Hello</name>
    	<tag-class>jsp.my.HelloTag</tag-class>
    	<body-content>empty</body-content>
  	</tag>
</taglib>

$ vi usetld.jsp

<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib prefix="ex" uri="custom.tld" %>
<ex:Hello/>

/ 7	. 

/ Met attributes	,

/ de pom.xml is onveranderd	,

$ vi HelloTag2.java

public class HelloTag2 extends SimpleTagSupport{
	private String message;
	private StringWriter writer;
	
	@Override
	public void doTag() throws JspException, IOException {
		JspWriter out=getJspContext().getOut();
		writer=new StringWriter();
		if(message==null){
			JspFragment fragment=getJspBody();
			fragment.invoke(writer);
			out.println(writer.toString());
		}
		else{
			out.println(message);
		}
		
	}
	...

$ vi custom2.tld

<taglib>
	<tlib-version>1.0</tlib-version>  
	<jsp-version>2.1</jsp-version>
	<short-name></short-name>
	<tag>
    	<name>Hello2</name>
    	<tag-class>jsp.my.HelloTag2</tag-class>
    	<body-content>scriptless</body-content>
    	<attribute>
    		<name>message</name>
    	</attribute>
  	</tag>
</taglib>

$ vi usetld2.jsp

<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib prefix="ex" uri="custom2.tld" %>
<ex:Hello2>Hello, this is message 2</ex:Hello2>


/ we zien dus <name>Hello2</name> in custom2.tld	, en in usetld2.jsp <ex:Hello2>

/ 7	. 

/ we kunnen ook de  uri veranderen	, we geven dan niet de tld file in de webapp	,

$ vi custom.tld

<taglib>
	 <tag>
    		<name>Hello</name>
    		<tag-class>jsp.my.HelloTag</tag-class>
    		<body-content>empty</body-content>
  	</tag>
</taglib>

$ vi web.xml

<web-app>
	<jsp-config>
		<taglib>
    			<taglib-uri>http://localhost/custom</taglib-uri>
    			<taglib-location>/custom.tld</taglib-location>
  		</taglib>
	</jsp-config>
</web-app>

$ vi usetld_a.jsp

<%@ taglib prefix="ex" uri="http://localhost/custom" %>
<ex:Hello/>



/ 13	. 

/ Hoeft NIET	,
	<dependency>
	        <groupId>taglibs</groupId>
	        <artifactId>standard</artifactId>
	        <scope>runtime</scope>
	        <version>1.1.2</version>
    </dependency>
/ Zou moeten voor	,
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>

    <dependency>
        <groupId>taglibs</groupId>
        <artifactId>c</artifactId>
        <version>1.1.2</version>
        <scope>runtime</scope>
        <type>tld</type>
    </dependency>
    <dependency>
        <groupId>taglibs</groupId>
        <artifactId>fmt</artifactId>
        <version>1.1.2</version>
        <scope>runtime</scope>
        <type>tld</type>
    </dependency>

/ 7	. 

/ Dependencies	,

/ 13	. 

/ Als we deze NIET	,
  <dependency>
    <groupId>javax.servlet.jsp</groupId>
    <artifactId>javax.servlet.jsp-api</artifactId>
    <version>2.3.2-b01</version>
    <scope>provided</scope>
  </dependency>

/ Dan kent hij NIET in HelloTag.java	,
import javax.servlet.jsp.JspContext;
import javax.servlet.jsp.JspException;
import javax.servlet.jsp.JspWriter;
import javax.servlet.jsp.tagext.SimpleTagSupport;

/ Het project builds dan NIET	,

/ we zien in onze locale maven reop	,dat  hij dependencies heeft	,
[eric@localhost repository]$ vi javax/servlet/jsp/javax.servlet.jsp-api/2.3.2-b01/javax.servlet.jsp-api-2.3.2-b01.pom

   <dependencies>
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>3.0.1</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>javax.el</groupId>
            <artifactId>javax.el-api</artifactId>
            <version>[3.0.0,)</version>
            <scope>provided</scope>
        </dependency>
   </dependencies>


/ 13	. 

/ als we NIET	,
		<dependency>
		    <groupId>javax.servlet</groupId>
		    <artifactId>javax.servlet-api</artifactId>
		    <version>3.1.0</version>
		    <scope>provided</scope>
		</dependency> 

/ dan zegt eclipse in de jsp's, 
The superclass "javax.servlet.http.HttpServlet" was not found on the Java Build Path

/ we zagen dat deze een dep is op javax.servlet.jsp-api	, maar eclipse ziet dat niet	? 
/ TODO

/ 13	. 

/ we kunnen ook	,

		<dependency>
		    <groupId>javax.servlet.jsp</groupId>
		    <artifactId>jsp-api</artifactId>
		    <version>2.0</version>
		    <scope>provided</scope>
		</dependency>
		
		<dependency>
		    <groupId>javax.servlet</groupId>
		    <artifactId>servlet-api</artifactId>
		    <version>2.5</version>
		    <scope>provided</scope>
		</dependency>

/ jsp-api MOET, servlet-api is voor Eclispe	, 

/ 7	. 

/ we probeerden net als in scs	, een <uri/> in de <taglib/>	, bij ->

/ proj jsp	, in workspace	, 

$ vi src/main/webapp/custom.tld

<?xml version="1.0" encoding="UTF-8"?>
<taglib>
	<tlib-version>1.0</tlib-version>  
	<jsp-version>2.1</jsp-version>
	<short-name></short-name>
->	<uri>http://localhost/custom</uri>
	 <tag>
    	<name>Hello</name>
    	<tag-class>jsp.my.HelloTag</tag-class>
    	<body-content>empty</body-content>
  	</tag>
</taglib>

/ en dan comment out in 	,

$ vi src/main/webapp/WEB-INF/web.xml

<web-app ... >

	<display-name>jsp</display-name>

<!--	
	<jsp-config>
		<taglib>
    		<taglib-uri>http://localhost/custom</taglib-uri>
    		<taglib-location>/custom.tld</taglib-location>
  		</taglib>
	</jsp-config>
-->

</web-app>

/ dan	,

$ vi src/main/webapp/usetld_a.jsp

<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib prefix="ex" uri="http://localhost/custom" %>

	<ex:Hello/>

/ en 	,

$ vi src/main/java/HelloTag.java

public class HelloTag extends SimpleTagSupport{
	@Override
	public void doTag() throws JspException, IOException {
		JspWriter out=getJspContext().getOut();
		out.println("Hello, I am a custom tag");
		
	}
}

/ Maar ERR	,
/ We moeten in web.xml de uri geven	, ipv  in de .tld	,
/ TODO 
 


/ Einde JSP TLD TAGLIB

/ OPEN IN ECLIPSE

http://beginnersbook.com/jsp-tutorial-for-beginners/


/ Einde OPEN IN ECLIPSE

/ COCOON

/ Lees	,
http://cocoon.apache.org/2.2/1159_1_1.html
http://stackoverflow.com/questions/9142533/plugin-execution-not-covered-by-lifecycle-configuration-jbossas-7-ear-archetype
http://cocoon.apache.org/2.2/maven-plugins/maven-plugin/1.0/1297_1_1.html

/ 7	.

/ op de command line	,

[eric@localhost Cocoon]$ pwd
/home/eric/Devel/Java/Cocoon
[eric@localhost Cocoon]$  mvn archetype:generate -DarchetypeCatalog=http://cocoon.apache.org
[INFO] Generating project in Interactive mode
[INFO] No archetype defined. Using maven-archetype-quickstart (org.apache.maven.archetypes:maven-archetype-quickstart:1.0)
Choose archetype:
1: http://cocoon.apache.org -> org.apache.cocoon:cocoon-22-archetype-block-plain (Creates an empty Cocoon block; useful if you want to add another block to a Cocoon application)
2: http://cocoon.apache.org -> org.apache.cocoon:cocoon-22-archetype-block (Creates a Cocoon block containing some small samples)
3: http://cocoon.apache.org -> org.apache.cocoon:cocoon-22-archetype-webapp (Creates a web application configured to host Cocoon blocks. Just add the block dependencies)
Choose a number or apply filter (format: [groupId:]artifactId, case sensitive contains): : 2			/ Geef	,
Define value for property 'groupId': : my.own.test								/ Geef	,
Define value for property 'artifactId': : myBlock2								/ Geef	,
Define value for property 'version':  1.0-SNAPSHOT: : 
Define value for property 'package':  my.own.test: : 
Confirm properties configuration:
groupId: my.own.test
artifactId: myBlock2
version: 1.0-SNAPSHOT
package: my.own.test
 Y: : 
...

[eric@localhost Cocoon]$ ls
myBlock2 ...
[eric@localhost Cocoon]$ cd myBlock2/
[eric@localhost myBlock2]$ mvn jetty:run

/ Geef in chrome	,
http://localhost:8888/myBlock2/
/ OK

/ 7	. 

/ In eclipse	,

/ we hebben project my.test.own:cocoon-block
/ Kies archetype group:artifact:version=org.apache.cocoon:cocoon-22-archetype-block:1.0.0 
/ maak run config : clean jetty:run
/ Geef in chrome	,
http://localhost:8888/cocoon-block
/ OK
/ WH hetzelfde als myBlock2 hierboven	,

/ we zien	,

Apache Cocoon: Welcome

This block my.test.own:cocoon-first was created by the Cocoon block archetype.

Link to the output of a simple Flowscript that accesses a Spring bean.

/ 7	.

/ In eclipse	,

/ we hebben project my.test.own:cocoon-webapp
/ Kies archetype group:artifact:version=org.apache.cocoon:cocoon-22-archetype-webapp:1.0.0 
/ maak run config : clean jetty:run
/ ERR	,



/ Einde COCOON

/ JMX

/ Lees
http://docs.oracle.com/javase/tutorial/jmx/

/ Lees 
/ Introducing MBeans

/ 7	.

/ Kies Standard MBeans

/ Lees
http://docs.oracle.com/javase/tutorial/jmx/mbeans/standard.html

/ in eclipse met create Java project moet je de project een name geven, en een location	,
/ bij maven project geef je bij location de dir op waarin proj, met eigen dir, wordt create	,
/ bij java project is location inderdaad de dir van het project zelf	,

/ we maken project jmx-first in Devel/Java/JMX/jmx-first	,

/ De src/ folder in onze source folder	, we hebben dus niet src/main/java	,
/ in deze src folder maken we een interface HelloMBean	, en geven meteen package com.example	,

[eric@localhost jmx-examples]$ pwd
/home/eric/Devel/Java/JMX/jmx-examples
[eric@localhost jmx-examples]$ unzip  ~/Downloads/jmx_examples.zip 

/ we edit HelloMBean, Hello, Main	, 
/ we click op Main	, Run as Java Application	,
/ in de console zien we 
Waiting forever...

$ jconsole
/ Kies com.example.Main
/ kies unsecure

/ als we het attribute cacheSize in jconsole set , zien we inderdaad in eclipse' console
.setCacheSize to 150
/ omdat we hebben	, 


public class Hello implements HelloMBean {
	@Override
	public void sayHello() {
		System.out.println("Hello World!");
	}
	@Override
	public void setCacheSize(int size) {
		cacheSize=size;
		System.out.println(".setCacheSize to "+size);

	}

/ click bij operations sayHello	, 
/ we zien in eclipse's console	,
Hello World!

/ 7	. 

/ Kies MXBeans	,

/ we maken ook QueueSample	,


/ 7	.

/ we maken Hello2	, 

/ Let op dat we dan ook Hello2MBean maken	, en Hello2 extends Hello2MBean	,

/ 7	. 

/ op de command line kan ook 	,


[eric@localhost jmx-examples]$ pwd
/home/eric/Devel/Java/JMX/jmx-examples
[eric@localhost jmx-examples]$ javac $(find -name *.java)

/ Voor jconsole kunnen we 
[eric@localhost jmx-examples]$ java com.example.Main
/ In ander window	,
[eric@localhost ]$ jconsole
/ kies com.example.Main, Connect	,
/ SSL issues
/ TODO
/ Kies MBeans, open com.example.Hello	,
/ we zien Attributes, Notifications	,
/ we kunnen de attr CacheSize wel veranderen, maar als we ons niet als listener hebben reg , krijgen we geen not.	,
/ click eerst Notification, en click Subscribe	,
/ ga dan terug naar attributes, en verander CacheSize	,
/ ga terug naar notifications	, we zien dat we een not. hebben gekregen	,



/ Maar voor com.example.Client 	,
[eric@localhost jmx-examples]$ java -Dcom.sun.management.jmxremote.port=9999 -Dcom.sun.management.jmxremote.authenticate=false  -Dcom.sun.management.jmxremote.ssl=false com.example.Main
...
/ In ander window	,
eric@localhost jmx-examples]$   java com.example.Client
...

/ 7	. 

/ Lees	,
http://docs.oracle.com/javase/tutorial/jmx/remote/jconsole.html

[eric@localhost jmx-examples]$ java -Dcom.sun.management.jmxremote.port=9999 \
>      -Dcom.sun.management.jmxremote.authenticate=false \
>      -Dcom.sun.management.jmxremote.ssl=false \
>      com.example.Main

$ jconsole
/ we zien new Connection	,
/ we kozen altijd com.example.Main uit het rijtje	, maar nu kiezen we 	,
Remote process	: localhost:9999
/ OK





/ Einde JMX

/ ECLIPSE

[eric@localhost eclipse-interfacing]$ pwd
/home/eric/Devel/Java/Eclipse/eclipse-interfacing
[eric@localhost eclipse-interfacing]$ tar xvzf ~/Downloads/eclipse-jee-luna-SR2-linux-gtk-x86_64.tar.gz 
[eric@localhost eclipse-interfacing]$ ls
eclipse  workspace
/ we maken de workspace hier	,

[eric@localhost eclipse-interfacing]$ tar xvzf ~/Downloads/eclipse-jee-luna-SR2-linux-gtk-x86_64.tar.gz 
[eric@localhost eclipse-interfacing]$ ls
eclipse  workspace

/ Geef in Work with:
http://download.jboss.org/jbosstools/updates/stable/luna/
/ Click add
name: JBoss Tools
/ we zien in Work with:
JBoss Tools - http://download.jboss.org/jbosstools/updates/stable/luna/


/ Einde ECLIPSE


/ FTP

/ 7	. 

/ bij mpo	,

[eric@localhost apache-activemq-5.10.1]$ ftp ftp-test
username: test01		/ of test02, ... , test05
password: test01@mpo
ftp> pwd
257 "/" is the current directory
ftp> ls
227 Entering Passive Mode (192,168,3,105,141,235).
150 Opening ASCII mode data connection for file list
drwxr-xr-x   4 test01   ftpuser      4096 Oct 14  2010 dsvcts
...


/ 7	.

[eric@localhost pnloms]$ sudo yum install vsftpd
[eric@localhost pnloms]$ sudo systemctl restart vsftpd
[eric@localhost pnloms]$ sudo systemctl enable vsftpd

[eric@localhost eclipse-interfacing]$ repoquery -l vsftpd
...
/var/ftp/pub

[eric@localhost tmp]$ ftp localhost
Connected to localhost (::1).
Name (localhost:eric): anonymous
Password:							/ Lege string , geef Enter	,
ftp> pwd
257 "/"
ftp> ls
/=
ftp> dir 
drwxr-xr-x    2 0        0            4096 Sep 10  2013 pub

/ local commands met ! ervoor	, 
/ maar niet !cd	, use lcd	,

ftp> !ls
anonymous4550147228924059539webdriver-profile  entity_generator-2982464165801481516.xml
...
ftp> lcd /home/eric/tmp
Local directory now /home/eric/tmp
ftp> !ls
dsvcts.fdb.bak	hibernate-core-3.3.0.GA  hibernate-core-3.6.7.Final-sources
ftp> quit
221 Goodbye.
[eric@localhost tmp]$ pwd
/tmp

/ als we lcd hebben use, en we quit ftp client, dan terug in de dir waar we begonnen, /tmp	,

[eric@localhost tmp]$ echo "Foo Bar
> Gee Hee">foo.txt

[eric@localhost tmp]$ ftp localhost
Name (localhost:eric): anonymous
Password:
ftp> cd pub
250 Directory successfully changed.
ftp> put foo.txt
local: foo.txt remote: foo.txt
229 Entering Extended Passive Mode (|||42629|).
550 Permission denied.

[eric@localhost tmp]$ sudo vi /etc/vsftpd/vsftpd.conf 
anon_upload_enable=YES
anon_mkdir_write_enable=YES

[eric@localhost tmp]$ sudo systemctl restart vsftpd

[eric@localhost tmp]$ ftp localhost
Name (localhost:eric): anonymous
Password:
ftp> cd pub
ftp> put foo.txt
553 Could not create file.

/ 7	. 

/ voor ftp's put moeten we eerst lcd  doen, dan put <filename>	, 
/ we kunnen bijv niet in /home/eric $ ftp	, en put /tmp/foo.txt	, we moeten eerst lcd /tmp en dan put foo.txt	,

[eric@localhost ~]$ ftp localhost
Name (localhost:eric): 
331 Please specify the password.
ftp> !pwd
/home/eric
ftp> pwd
257 "/home/eric"
ftp> cd tmp
ftp> pwd
257 "/home/eric/tmp"
ftp> put /tmp/foo.txt 
/ We zien niets in /home/eric/tmp	,
ftp> lcd /tmp
Local directory now /tmp
ftp> !pwd
/tmp
ftp> put foo.txt 
/ OK, we zien foo.txt in /home/eric/tmp

/ 7	.

[eric@localhost tmp]$ sudo mkdir /var/ftp/pub/anon
[eric@localhost tmp]$  sudo chmod a+w /var/ftp/pub/anon/

[eric@localhost tmp]$ ftp localhost
Name (localhost:eric): anonymous
Password:
ftp> pwd
257 "/"
ftp> cd pub/anon
ftp> lcd /tmp/src
ftp> put foo.txt 
ftp> ls
-rw-------    1 14       50              0 Mar 10 08:44 foo.txt
ftp> quit

[eric@localhost tmp]$  sudo ls -l  /var/ftp/pub/anon/
total 0
-rw-------. 1 ftp ftp 0 Mar 10 09:44 foo.txt

/ 7	. 

[eric@localhost trunk]$ sudo vi /etc/vsftpd/vsftpd.conf 

#chroot_local_user=YES
#user_sub_token=$USER
#local_root=/var/ftp/$USER

/ Lees	,
http://howto.gumph.org/content/setup-virtual-users-and-directories-in-vsftpd/

/ Lees	,
$ man vsftpd.conf

/ 7	.

/ eric komt weer in /hom/eric	,

/ in /home/eric/tmp/orders/ staan first.txt en second.txt

[eric@localhost file-copy]$ ftp localhost
Name (localhost:eric): 
331 Please specify the password.
ftp> cd tmp
ftp> cd orders
ftp> ls
-rw-rw-r--    1 1000     1000           37 Mar 11 07:17 first.txt
-rw-rw-r--    1 1000     1000           38 Mar 11 07:17 second.txt
ftp> lcd /tmp
ftp> get first.txt

/ Nu zijn in in /tmp first.txt	,

/ we kunnen ook andersom doen, 
ftp> put <filename> 
/ maar deze moet er dan zijn in /tmp en komt dan in ~eric/tmp/orders/	,

/ Einde FTP

/ CAMEL

/ 7	. 

[eric@localhost eclipse-interfacing-testing]$ eclipse/eclipse 
...
/ workspace-interfacing


/ 7	.

[eric@localhost Camel]$ pwd
/home/eric/Devel/Java/Camel
[eric@localhost Camel]$ git clone https://github.com/camelinaction/camelinaction.git

/ 7	.

/ we use eclipse luna	,

[eric@localhost Camel]$ pwd
/home/eric/Devel/Java/Camel
[eric@localhost Camel]$ vi camelinaction/pom.xml 
    <camel-version>2.14.1</camel-version>

/ er stond 2.14.2	, en die bestaat niet in repo1	,

/ we import een bestaand maven project	, chapter1	, 

/ we import ook chapter2 	,

/ 7	. 

/ Chapter 1	,

/ In eclipse kunnen we gewoon op FileCopierWithCamel Run as , Java application	; op de cmd line moeten we moeite doen	,

/ 13	, 
/ als we NIET noop=true 	, zien we inderdaad dat message1.xml rm is in inbox/	, en staat in outbox/	,
/ als we outbox/ rm, en FileCopierWithCamel run	, dan onstaat er weer een outbox/	, als we outbox/ laten staan (als er is)	, dan ook OK	, 

/ 7	. 

/ multiple routes

/ we maken	,

data/
	inbox/
		message1.xml
	inbox2/
		message2.xml

/ 13	. 

/ als we 	,

      context.addRoutes(new RouteBuilder() {
            public void configure() {
                from("file:data/inbox?noop=true").to("file:data/outbox")
                .from("file:data/inbox2?noop=true").to("file:data/outbox2");
			}
	})

/ dan krijgen we	,

data/
	outbox/
		message1.xml
		message2.xml
	inbox2/
		message1.xml
		message2.xml

/ we maken de run config in file-copy ,
exec:java -Dexec.mainClass=camelinaction.FileCopier

/ 13	. 

/ als we	,

       context.addRoutes(new RouteBuilder() {
            public void configure() {
                from("file:data/inbox?noop=true").to("file:data/outbox");
                
            }
        });
        context.addRoutes(new RouteBuilder() {
			
			@Override
			public void configure() throws Exception {
				from("file:data/inbox2?noop=true").to("file:data/outbox2");
			}
		});

/ dan krijgen we	,

data/
	outbox/
		message1.xml
	inbox2/
		message2.xml

/ 13	. 
/ we kunnen  ook	,

       context.addRoutes(new RouteBuilder() {
            public void configure() {
                from("file:data/inbox?noop=true").to("file:data/outbox");
                from("file:data/inbox2?noop=true").to("file:data/outbox2");
                
            }
        });

/ let op ; 	,

/ dan krijgen we	,

data/
	outbox/
		message1.xml
	inbox2/
		message2.xml




'/ 7	

$ pwd
/home/eric
$ mkdir tmp/orders
$ cd ~/tmp/orders
[eric@localhost orders]$ ls
first.txt  second.txt

/ in project chapter1-file-copy	,
$ vi MyFileCopierWithCamel.java

                from("ftp://localhost/tmp/orders?username=eric&password=rtdMpo45")
                .to("file:data/outbox");

$ vi pom.xml
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-ftp</artifactId>
    </dependency>

/ OK
/ we zien in 	,
[eric@localhost data]$ pwd
/home/eric/Devel/Java/Camel/camelinaction/chapter1/file-copy/data
[eric@localhost data]$ ls outbox/
first.txt  second.txt


/ 7	.

/ we draaien from, to om	,

$ vi MyFileCopierWithCamel2.java

            	from("file:data/inbox?noop=true")
            	.to("ftp://localhost/tmp/orders?username=eric&password=rtdMpo45");

/ we zien dat	,
[eric@localhost data]$ pwd
/home/eric/Devel/Java/Camel/camelinaction/chapter1/file-copy/data
[eric@localhost data]$ ls inbox/
message1.xml

/ terecht komt in 	,
[eric@localhost orders]$ pwd
/home/eric/tmp/orders
[eric@localhost orders]$ ls
first.txt  message1.xml  second.txt

/ 7	. 

/ we doen , 

$ vi MyFileFtpCopierWithCamel.java

               from("ftp://localhost/tmp/orders?username=eric&password=rtdMpo45")
                .to("file:data/outbox");
               	from("file:data/inbox?noop=true")
            	.to("ftp://localhost/tmp/orders?username=eric&password=rtdMpo45");

/ we kunnen deze 2 routes ook verwisselen van volgorde	, maakt niet uit	,

/ we beginnen met	,
[eric@localhost data]$ ls
inbox
[eric@localhost data]$ ls inbox
message1.xml
[eric@localhost data]$ ls ~/tmp/orders/
first.txt second.txt

/ Na run	,
[eric@localhost data]$ ls 
inbox outbox
[eric@localhost data]$ ls outbox/
first.txt  message1.xml  second.txt
[eric@localhost data]$ ls ~/tmp/orders/
first.txt  message1.xml  second.txt

/ Dus orders/ na dat message1 daarin is set, komt in outbox/
/ Is er geen volgorde van de routes aan te geven?
/ TODO

/ 7	. 

/ we doen	,
$ vi MyFileCopierWithCamel.java

        // add our route to the CamelContext
        context.addRoutes(new RouteBuilder() {
            public void configure() {
            	Processor p=new Processor() {
					
					@Override
					public void process(Exchange arg0) throws Exception {
						System.out.println(
								"\n**********\n"+
								"we just downloaded : "+arg0.getIn().getHeader("CamelFileName")+
								"\n**********\n"
						);		
					}
				};
                from("file:data/inbox?noop=true").
                process(p).
                to("file:data/outbox");
                from("file:data/inbox2?noop=true").to("file:data/outbox2");
                
            }
        });

/ we zien	,


**********
we just downloaded : message1.xml
**********


/ 7	.

/ ch 2	,

$ project chapter2-my	,

$ vi MyFileJms.java

       	ConnectionFactory factory=new ActiveMQConnectionFactory("vm://localhost");
        Component component=JmsComponent.jmsComponentAutoAcknowledge(factory);
        context.addComponent("jms", component);

        // add our route to the CamelContext
        context.addRoutes(new RouteBuilder() {
            public void configure() {

            	Processor toJms=new Processor() {
					@Override
					public void process(Exchange exchange) throws Exception {
						System.out.println(
								"\n**********\n"+
								"To Jms: "+exchange.getIn().getHeader("CamelFileName")+
								"\n**********\n"
						);		
					}
				};
				
             	Processor fromJms=new Processor() {
					@Override
					public void process(Exchange exchange) throws Exception {
						System.out.println(
								"\n**********\n"+
								"From Jms "+exchange.getIn().getHeader("CamelFileName")+
								"\n**********\n"
						);		
					}
				};

            	
                from("file:data/inbox?noop=true")
                .process(toJms)
                .to("jms:incomingOrders");
                
                from("jms:incomingOrders")
                .process(fromJms)
                .to("file:data/outbox");

            
	
      // start the route and let it do its work
        context.start();
        Thread.sleep(20000);
        // stop the CamelContext
        context.stop();               

                
            }
        });

/ component is een JmsComponent 	,


$ vi pom.xml

    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-core</artifactId>
    </dependency>

    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-jms</artifactId>
    </dependency>
    
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-ftp</artifactId>
    </dependency>

    <dependency>
      <groupId>org.apache.activemq</groupId>
      <artifactId>activemq-all</artifactId>
    </dependency>

/ we maken run config,	
exec:java -Dexec.mainClass=camelinaction.FileCopier

/ we start dus NIET met de hand activemq op	, we doen zoiets als jetty:run	, 
/ dat is omdat we doen	,
       	ConnectionFactory factory=new ActiveMQConnectionFactory("vm://localhost");
        Component component=JmsComponent.jmsComponentAutoAcknowledge(factory);
        context.addComponent("jms", component);
/ Hoe een bestaande activemq use?
/ TODO
 

/ We hebben		,
[eric@localhost my]$ pwd
/home/eric/Devel/Java/Camel/camelinaction/chapter2/my
data
	inbox
		message1.xml

/ we run	,
/ we zien in console in Eclipse	,

**********
To Jms: message1.xml
**********


**********
From Jms message1.xml
**********

/ we doen op de command line,	
[eric@localhost my]$ echo "Foo Bar"> data/inbox/message2.xml

/ we zien dat Camel deze direct process 	,

**********
To Jms: message2.xml
**********

**********
From Jms message2.xml
**********

 

/ als we hebben run, verschijnt er een dir activemq-data/	,
/ TODO

/ Lees	,
http://camel.apache.org/ftp2.html
http://camel.apache.org/routes.html

/ 13	. 

/ GEEN ?noop=true	,

$ vi MyFileJms.java

              from("file:data/inbox")
                .process(toJms)
                .to("jms:incomingOrders");
 
/ we run , en doen ook,	
[eric@localhost data]$ echo "Foo Bar"> inbox/message2.xml

/ we zien dat er in inbox/ een .camel/ wordt create	, en dat daar de processed files in komen	,
[eric@localhost data]$ ls -al inbox/
total 12
drwxrwxr-x. 3 eric eric 4096 Jun 26 07:29 .
drwxrwxr-x. 4 eric eric 4096 Mar 16 07:27 ..
drwxrwxr-x. 2 eric eric 4096 Jun 26 07:29 .camel

[eric@localhost data]$ ls -al inbox/.camel/
total 16
drwxrwxr-x. 2 eric eric 4096 Jun 26 07:29 .
drwxrwxr-x. 3 eric eric 4096 Jun 26 07:29 ..
-rw-rw-r--. 1 eric eric   89 Mar 12 09:09 message1.xml
-rw-rw-r--. 1 eric eric    8 Jun 26 07:29 message2.xml

/ we zullen zien dat ftp itt file continue polls	, en dat we dat kunnen vermijden door move=.done te geven	, 
/dus file en ftp hebben vrijwel tegenovergestelde defaults:
/ file polls niet, en writes processed files to .camel/	, als we noop=true, dan niet, maar hij gaat niet poll	, dus is niet helemaal tegenovergesteld aan ftp	,
/ ftp polls	, en als we move=.done, dat gaan processed files naar .done/ , en polss niet meer	,



/ 7	. 

/ Hoe  met Main, ipv CamelContext.start()	, Thread.sleep(3000), CamelContext.stop()	?

/ we doen	,
[eric@localhost Camel]$ pwd
/home/eric/Devel/Java/Camel
[eric@localhost Camel]$ git clone https://git-wip-us.apache.org/repos/asf/camel.git

/ Intermezzo

/ Let op verschil	,

[eric@localhost camel]$ grep Main -r <(find examples/ -name "*.java")
/ Zoekt naar Main in file names	,

[eric@localhost camel]$ grep Main -r $(find examples/ -name "*.java")
/ Zoekt naar Main in de files	,

/ Einde Intermezzo

/ TODO

/ 7	.

/ In chapter2-ftp-jms	,

/ we hebben	,
[eric@localhost orders]$ pwd
/home/eric/tmp/orders
[eric@localhost orders]$ ls
first.txt  message1.xml  second.txt

/ we willen deze naar	,
[eric@localhost ftp-jms]$ pwd
/home/eric/Devel/Java/Camel/camelinaction/chapter2/ftp-jms

/ we zien na de run	, 
[eric@localhost ftp-jms]$ ls data/outbox/
first.txt  message1.xml  second.txt

/ we hoeven data/ NIET te maken	, dat doet Camel	,
 
$ vi MyFtpToJMSToFile.java

   public static void main(String args[]) throws Exception {

        // create CamelContext
        CamelContext context = new DefaultCamelContext();
        
        // connect to embedded ActiveMQ JMS broker
        ConnectionFactory connectionFactory = 
            new ActiveMQConnectionFactory("vm://localhost");
        Component component=JmsComponent.jmsComponentAutoAcknowledge(connectionFactory);
        context.addComponent("jms",component);

        // add our route to the CamelContext
       	RoutesBuilder routesBuilder=new RouteBuilder() {
            @Override
            public void configure() {
                from("ftp://localhost/tmp/orders?username=eric&password=rtdMpo45")
                .to("jms:incomingOrders");
                from("jms:incomingOrders")
                .to("file://data/outbox");
            }
        };
       	context.addRoutes(routesBuilder);

		context.start();
        Thread.sleep(3000);
        context.stop();

/ we laten het program dus 3 sec lopen	,

/ we geven	,
                .to("jms:incomingOrders");
/ Camel of ActiveMQ maakt zelf de queue incomingOrders	,
/ Inderdaad, de default is queue, we kunnen ook	,
                .to("jms:queue:incomingOrders");

/ 7	.

/ we voegen een processor in	,


$ vi MyFtpToJMSToFileWithProcessor.java

        // create CamelContext
       	CamelContext context = new DefaultCamelContext();
        
        // connect to embedded ActiveMQ JMS broker
        ConnectionFactory connectionFactory = 
            new ActiveMQConnectionFactory("vm://localhost");
        Component component=JmsComponent.jmsComponentAutoAcknowledge(connectionFactory);
        context.addComponent("jms",component);

      final Processor fromFtpToJms=new Processor() {	
 			@Override
 			public void process(Exchange exchange) throws Exception {
 				String message="\n\n*************\n\n"
 							+"From Ftp To Jms: "+exchange.getExchangeId()+","+exchange.getIn().getHeader("CamelFileName")
 							+"\n\n*************\n\n";
 				System.out.println(message);
 			}
 		};
        final Processor fromJmsToFile=new Processor() {	
  			@Override
  			public void process(Exchange exchange) throws Exception {
  				String message="\n\n*************\n\n"
  							+"From Jms To File: "+exchange.getExchangeId()+","+exchange.getIn().getHeader("CamelFileName")
  							+"\n\n*************\n\n";
  				System.out.println(message);
  			}
  		};
        RoutesBuilder routesBuilder=new RouteBuilder() {
            @Override
            public void configure() {
                from("ftp://localhost/tmp/orders?username=eric&password=rtdMpo45")
                .process(fromFtpToJms)
                .to("jms:queue:incomingOrders");
                
                from("jms:incomingOrders")
                .process(fromJmsToFile)
                .to("file://data/outbox");
            }
        };
        context.addRoutes(routesBuilder);

        // start the route and let it do its work
        context.start();
        Thread.sleep(3000);
        // stop the CamelContext
        context.stop();

/ een processor is een EIP	,

/ we zien dat ftp component polls , en als we een file add, komt die erbij	, maar het gaat maar door	, 

/ tenzij we	move=.done geven	,

           public void configure() {
                from("ftp://localhost/tmp/orders?username=eric&password=rtdMpo45&move=.done")
                .process(fromFtpToJms)
                .to("jms:queue:incomingOrders");

/ dan zien we 	, 1 keer	,

From Ftp To Jms: ID-localhost-localdomain-45857-1435297214015-0-2,message1.xml
From Jms To File: ID-localhost-localdomain-45857-1435297214015-0-3,message1.xml

/ we doen	,
[eric@localhost orders]$ echo "Foo Bar" >message2.xml
/ we zien meteen	, 1 keer	,

From Ftp To Jms: ID-localhost-localdomain-45857-1435297214015-0-5,message2.xml
From Jms To File: ID-localhost-localdomain-45857-1435297214015-0-6,message2.xml

 

/ 7	.

/ spring

/ we lezen	,
http://camel.apache.org/camel-maven-plugin.html

/ we zien	,

camel:run
Boots up Camel in the context of a separately initiated Java thread using the Spring configuration at META-INF/spring/*.xml and runs your routing rules. 

/ dus de spring config file moet in src/main/resources, in META-INF/spring/ 	, 
/ wen WH mag je zelf weten hoe hij heet	, en mogen er meerdere zijn	, 
/ TODO


/ we maken in workspace-interfacting-testing een proj. chapter2-spring-my 
/ in ~eric/Devel/Java/Camel/camelinaction/chapter2/spring-my 

/ we add voor spring maar 1 dep	, 
$ vi pom.xml

    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-spring</artifactId>
    </dependency>

     <plugin>
        <groupId>org.apache.camel</groupId>
        <artifactId>camel-maven-plugin</artifactId>
         <configuration>
          <includePluginDependencies>false</includePluginDependencies>
        </configuration>
      </plugin>


/ We hoeven alleen camel-spring dep te add	, de andere spring deps komen met deze	,

/ we zien dat  de volgende spring deps meekomen	,
[eric@localhost repository]$ less org/apache/camel/camel-spring/2.14.1/camel-spring-2.14.1.pom
   	<dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-context</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-aop</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-tx</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-jdbc</artifactId>
      <scope>test</scope>
    </dependency>
 	...

/ Lees	,
http://www.mojohaus.org/exec-maven-plugin/examples/example-exec-using-plugin-dependencies.html
/ TODO

/ Lees	,
http://camel.apache.org/spring.html
http://camel.apache.org/camel-maven-plugin.html

/ 13	. 

/ In context.xml	,

/ deze kent hij	,
<camel:camelContext></camel:camelContext>
/ <camelContext/> kent hij niet	,

/ Maar als we	,
<camelContext xmlns="http://camel.apache.org/schema/spring">
/ dan validates hij	,

/ 13	. 

$ vi context.xml

<bean id="jms" class="org.apache.camel.component.jms.JmsComponent">
	<property name="connectionFactory">
		<bean class="org.apache.activemq.ActiveMQConnectionFactory"> 
			<property name="brokerURL" value="vm://localhost"></property>
		</bean>
	</property>
</bean>

<camelContext xmlns="http://camel.apache.org/schema/spring">
	<route>
		<from uri="file://data/inbox?noop=true"></from>
		<process ref="logProcessor"></process>
		<to uri="jms:queue:incomingOrders"></to>
	</route>
</camelContext>

<bean id="logProcessor" class="camelinaction.LogProcessor"></bean>


/ We hoeven dus geen RoutesBuilder te create	, want dat hebben we in spring config set hier	,
/ Alleen een Processor	,  

$ vi LogProcessor.java

public class LogProcessor implements Processor {

	@Override
	public void process(Exchange exchange) throws Exception {
		System.out.println("\n\n*************\n\n"+
				exchange.getExchangeId()+","+exchange.getIn().getHeader("CamelFileName")+
				"\n\n*************\n\n");
	}
}

$ mvn clean camel:run
...
/ als we op de command line een file add	,
[eric@localhost spring-my]$ echo "Foo Bar" >data/inbox/message2.xml
/ dan zien we in Eclipse's console dat deze meteen wordt processed	,

/ Lees de api over CamelContext.start	,
http://camel.apache.org/maven/current/camel-core/apidocs/
/ we zien een link naar 
start() - to start (important: the start method is not blocked, see more details here)
 we click 'here'	,
http://camel.apache.org/maven/current/camel-core/apidocs/

The Main class is provided in the following two components
camel-core JAR in the org.apache.camel.Main class (requires Camel 2.6)
camel-spring JAR in the org.apache.camel.spring.Main class

/ Klopt, we zagen WH Main used in de spring-maven-plugin's camel:run hierboven	,

/ 13	. 

/ Toch zien we wel een verschil	,  
/ als er 2 messages zijn in de dir	, of je voegt er nog 1 toe, dan zien we, dat activemq steeds wordt start/stop?
/ TODO

pache.camel.spring.Main.main()] MainSupport                    INFO  Apache Camel 2.14.1 starting
[pache.camel.spring.Main.main()] SpringCamelContext             INFO  Apache Camel 2.14.1 (CamelContext: camel-1) is starting
[pache.camel.spring.Main.main()] ManagedManagementStrategy      INFO  JMX is enabled
[pache.camel.spring.Main.main()] DefaultTypeConverter           INFO  Loaded 182 type converters
[pache.camel.spring.Main.main()] SpringCamelContext             INFO  AllowUseOriginalMessage is enabled. If access to the original message is not needed, then its recommended to turn this option off as it may improve performance.
[pache.camel.spring.Main.main()] SpringCamelContext             INFO  StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html
[pache.camel.spring.Main.main()] FileEndpoint                   INFO  Endpoint is configured with noop=true so forcing endpoint to be idempotent as well
[pache.camel.spring.Main.main()] FileEndpoint                   INFO  Using default memory based idempotent repository with cache max size: 1000
[pache.camel.spring.Main.main()] SpringCamelContext             INFO  Route: route1 started and consuming from: Endpoint[file://data/inbox?noop=true]
[pache.camel.spring.Main.main()] SpringCamelContext             INFO  Total 1 routes, of which 1 is started.
[pache.camel.spring.Main.main()] SpringCamelContext             INFO  Apache Camel 2.14.1 (CamelContext: camel-1) started in 0.248 seconds


*************

ID-localhost-localdomain-45680-1435299268834-0-2,message1.xml

*************


[                 JMX connector] ManagementContext              INFO  JMX consoles can connect to service:jmx:rmi:///jndi/rmi://localhost:1099/jmxrmi
[ thread #0 - file://data/inbox] PListStoreImpl                 INFO  PListStore:[/home/eric/Devel/Java/Camel/camelinaction/chapter2/spring-my/activemq-data/localhost/tmp_storage] started
[ thread #0 - file://data/inbox] BrokerService                  INFO  Using Persistence Adapter: KahaDBPersistenceAdapter[/home/eric/Devel/Java/Camel/camelinaction/chapter2/spring-my/activemq-data/localhost/KahaDB]
[ thread #0 - file://data/inbox] BrokerService                  INFO  Apache ActiveMQ 5.10.1 (localhost, ID:localhost.localdomain-49212-1435299270658-0:1) is starting
[ thread #0 - file://data/inbox] BrokerService                  INFO  Apache ActiveMQ 5.10.1 (localhost, ID:localhost.localdomain-49212-1435299270658-0:1) started
[ thread #0 - file://data/inbox] BrokerService                  INFO  For help or more information please see: http://activemq.apache.org
[ thread #0 - file://data/inbox] TransportConnector             INFO  Connector vm://localhost started
[ thread #0 - file://data/inbox] TransportConnector             INFO  Connector vm://localhost stopped
[ thread #0 - file://data/inbox] BrokerService                  INFO  Apache ActiveMQ 5.10.1 (localhost, ID:localhost.localdomain-49212-1435299270658-0:1) is shutting down
[ thread #0 - file://data/inbox] PListStoreImpl                 INFO  PListStore:[/home/eric/Devel/Java/Camel/camelinaction/chapter2/spring-my/activemq-data/localhost/tmp_storage] stopped
[ thread #0 - file://data/inbox] KahaDBStore                    INFO  Stopping async queue tasks
[ thread #0 - file://data/inbox] KahaDBStore                    INFO  Stopping async topic tasks
[ thread #0 - file://data/inbox] KahaDBStore                    INFO  Stopped KahaDB
[ thread #0 - file://data/inbox] BrokerService                  INFO  Apache ActiveMQ 5.10.1 (localhost, ID:localhost.localdomain-49212-1435299270658-0:1) uptime 0.872 seconds
[ thread #0 - file://data/inbox] BrokerService                  INFO  Apache ActiveMQ 5.10.1 (localhost, ID:localhost.localdomain-49212-1435299270658-0:1) is shutdown


*************

ID-localhost-localdomain-45680-1435299268834-0-4,message2.xml

*************


[                 JMX connector] ManagementContext              INFO  JMX consoles can connect to service:jmx:rmi:///jndi/rmi://localhost:1099/jmxrmi
[ thread #0 - file://data/inbox] PListStoreImpl                 INFO  PListStore:[/home/eric/Devel/Java/Camel/camelinaction/chapter2/spring-my/activemq-data/localhost/tmp_storage] started
[ thread #0 - file://data/inbox] BrokerService                  INFO  Using Persistence Adapter: KahaDBPersistenceAdapter[/home/eric/Devel/Java/Camel/camelinaction/chapter2/spring-my/activemq-data/localhost/KahaDB]
[ thread #0 - file://data/inbox] MessageDatabase                INFO  KahaDB is version 5
[ thread #0 - file://data/inbox] MessageDatabase                INFO  Recovering from the journal ...
[ thread #0 - file://data/inbox] MessageDatabase                INFO  Recovery replayed 1 operations from the journal in 0.002 seconds.
[ thread #0 - file://data/inbox] BrokerService                  INFO  Apache ActiveMQ 5.10.1 (localhost, ID:localhost.localdomain-49212-1435299270658-0:2) is starting
[ thread #0 - file://data/inbox] BrokerService                  INFO  Apache ActiveMQ 5.10.1 (localhost, ID:localhost.localdomain-49212-1435299270658-0:2) started
[ thread #0 - file://data/inbox] BrokerService                  INFO  For help or more information please see: http://activemq.apache.org
[ thread #0 - file://data/inbox] TransportConnector             INFO  Connector vm://localhost started
[ thread #0 - file://data/inbox] TransportConnector             INFO  Connector vm://localhost stopped
[ thread #0 - file://data/inbox] BrokerService                  INFO  Apache ActiveMQ 5.10.1 (localhost, ID:localhost.localdomain-49212-1435299270658-0:2) is shutting down
[ thread #0 - file://data/inbox] PListStoreImpl                 INFO  PListStore:[/home/eric/Devel/Java/Camel/camelinaction/chapter2/spring-my/activemq-data/localhost/tmp_storage] stopped
[ thread #0 - file://data/inbox] KahaDBStore                    INFO  Stopping async queue tasks
[ thread #0 - file://data/inbox] KahaDBStore                    INFO  Stopping async topic tasks
[ thread #0 - file://data/inbox] KahaDBStore                    INFO  Stopped KahaDB
[ thread #0 - file://data/inbox] BrokerService                  INFO  Apache ActiveMQ 5.10.1 (localhost, ID:localhost.localdomain-49212-1435299270658-0:2) uptime 0.737 seconds
[ thread #0 - file://data/inbox] BrokerService                  INFO  Apache ActiveMQ 5.10.1 (localhost, ID:localhost.localdomain-49212-1435299270658-0:2) is shutdown

/ 7	. 

/ we maken de processors ook als spring beans	, dat is beter, want nu zijn ze in de route program, en dat is fout	,

/ de route en processor heten ftpToJ... 	, maar we doen voorlopig fileToJ...

/ in project chapter2-spring-my	, 

$ vi context2.xml

<bean id="jms" class="org.apache.camel.component.jms.JmsComponent">
	<property name="connectionFactory">
		<bean class="org.apache.activemq.ActiveMQConnectionFactory"> 
			<property name="brokerURL" value="vm://localhost"></property>
		</bean>
	</property>
</bean>

<camelContext xmlns="http://camel.apache.org/schema/spring">
	<camel:routeBuilder ref="ftpToJmsToFileRoute"/>
</camelContext>

<bean id="ftpToJmsToFileRoute" class="camelinaction.FtpToJmsToFileRoute">
	<property name="ftpToJmsProcessor" ref="ftpToJmsProcessor"></property>
	<property name="jmsToFileProcessor" ref="jmsToFileProcessor"></property>
</bean>

<bean id="ftpToJmsProcessor" class="camelinaction.FtpToJmsProcessor"></bean>
<bean id="jmsToFileProcessor" class="camelinaction.JmsToFileProcessor"></bean>

</beans>

$ vi FtpToJmsToFileRoute.java

public class FtpToJmsToFileRoute extends RouteBuilder {
	
	private Processor ftpToJmsProcessor;
	private Processor jmsToFileProcessor;

	
	@Override
	public void configure() throws Exception {

		from("file://data/inbox?noop=true")
		.process(getFtpToJmsProcessor())
		.to("jms:orders");
		
		from("jms:orders")
		.process(getJmsToFileProcessor())
		.to("file://data/outbox");
		
	}

	public Processor getFtpToJmsProcessor() {
		return ftpToJmsProcessor;
	}

	public void setFtpToJmsProcessor(Processor ftpToJmsProcessor) {
		this.ftpToJmsProcessor = ftpToJmsProcessor;
	}

	public Processor getJmsToFileProcessor() {
		return jmsToFileProcessor;
	}

	public void setJmsToFileProcessor(Processor jmsToFileProcessor) {
		this.jmsToFileProcessor = jmsToFileProcessor;
	}

}

$ vi  FtpToJmsProcessor.java

public class FtpToJmsProcessor implements Processor {

	@Override
	public void process(Exchange exchange) throws Exception {
		System.out.println("\n\n"+"FileToJms: "+exchange.getExchangeId()+","+exchange.getIn().getHeader("CamelFileName")+"\n\n");
	}
}

$ vi  JmsToFileProcessor.java

public class JmsToFileProcessor implements Processor {

	@Override
	public void process(Exchange exchange) throws Exception {
		System.out.println("\n\n"+"JmsToFile: "+exchange.getExchangeId()+","+exchange.getIn().getHeader("CamelFileName")+"\n\n");
	}
}

/ 13	. 

/ Verschil	,

/ we doen	,
		from("file://data/inbox?noop=true")

/ als we message2.xml add	, dan zien we hem processed	,
/ als we message2.xml rm, en daarna weer add	, dan wordt deze NIET processed	,

/ als we doen	,
		from("file://data/inbox")
/ dan zien we dat als we message2.xml add, hij naar .camel/ gaat, 
/ als we nog een keer message2.xml add, wordt hij WEER processed, en gaat naar .camel/ 

/ TODO

/ 7	.

/ Main	,

/ Lees	,
http://camel.apache.org/spring-java-config-example.html
http://camel.apache.org/spring-java-config.html


/ 7	.

/ annotations	,

/ proj. chapter2-spring-my-annotations2
/ proj. chapter2-spring-my-annotations

/ Het is maar gedeeltelijk gelukt	, 

/ Het lukt om de processors te inject in de route, met @Component en @Autowired	,
/ See proj. chapter2-spring-my-annotations2

/ maar de camel context lukt NIET	, met de route	,
/ See proj. chapter2-spring-my-annotations
/ TODO

/ 13	. 

/ proj. chapter2-spring-my-annotations2


$ vi FtpToJmsToFileRoute.java

@Component
public class FtpToJmsToFileRoute extends RouteBuilder {
	
	@Autowired
	private Processor ftpToJmsProcessor;
	@Autowired
	private Processor jmsToFileProcessor;

	
	@Override
	public void configure() throws Exception {
		from("file://data/inbox?noop=true")
		.process(ftpToJmsProcessor)
		.to("jms:orders");
		
		from("jms:orders")
		.process(jmsToFileProcessor)
		.to("file://data/outbox");
		
	}
}

$ vi FtpToJmsProcessor.java

@Component
public class FtpToJmsProcessor implements Processor {

	@Override
	public void process(Exchange exchange) throws Exception {
		System.out.println("\n\n"+"FileToJms: "+exchange.getExchangeId()+","+exchange.getIn().getHeader("CamelFileName")+"\n\n");
	}
}

$ vi JmsToFileProcessor.java

@Component
public class JmsToJmsProcessor implements Processor {

	@Override
	public void process(Exchange exchange) throws Exception {
		System.out.println("\n\n"+"JmsToFile: "+exchange.getExchangeId()+","+exchange.getIn().getHeader("CamelFileName")+"\n\n");
	}
}

/ in src/main/resources/	, META-INF/spring/	, 

$ vi context2.xml

<context:component-scan base-package="camelinaction"></context:component-scan>

<bean id="jms" class="org.apache.camel.component.jms.JmsComponent">
	<property name="connectionFactory">
		<bean class="org.apache.activemq.ActiveMQConnectionFactory"> 
			<property name="brokerURL" value="vm://localhost"></property>
		</bean>
	</property>
</bean>

<camel:camelContext>
	<camel:routeBuilder ref="ftpToJmsToFileRoute"/>
</camel:camelContext>

/ OK


/ 13	. 

/ Maar	,

/ proj. chapter2-spring-my-annotations

/ Lees	,
http://camel.apache.org/spring-java-config.html

/ proj. chapter2-spring-my-annotations	,

[eric@localhost camelinaction]$ pwd
/home/eric/Devel/Java/Camel/camelinaction
[eric@localhost camelinaction]$ vi pom.xml 

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.apache.camel</groupId>
        <artifactId>camel-spring-javaconfig</artifactId>
        <version>${camel-version}</version>
      </dependency>

$ vi pom.xml

<dependencies>
   <dependency>
	    <groupId>org.apache.camel</groupId>
	    <artifactId>camel-spring-javaconfig</artifactId>
	</dependency>
   
/ nu kunnen we	(hij kent org.apache.camel.spring.javaconfig.CamelConfiguration)	,

$ vi RouteConfiguration.java

import org.apache.camel.spring.javaconfig.CamelConfiguration;

/ 7	.

$ vi RouteConfiguration.java

@Configuration
@ComponentScan(basePackages="camelinaction")
public class RouteConfiguration extends CamelConfiguration{
	@Bean
	public JmsComponent getJmsComponent(){
		ConnectionFactory factory=new ActiveMQConnectionFactory("vm://localhost");
        JmsComponent jmsComponent=JmsComponent.jmsComponentAutoAcknowledge(factory);
        return jmsComponent;
	}
}

/ Maar hoe geven we deze op ( zoals in een AnnotationConfigApplicationContext)	?
/ TODO
	 

 7	.

/ See voor Main	,
http://camel.apache.org/spring-java-config-example.html

/ Lees ook	,
[eric@localhost camel]$ vi components/camel-spring-javaconfig/src/main/java/org/apache/camel/spring/javaconfig/Main.java 
/ Lees	,
http://camel.apache.org/running-camel-standalone-and-have-it-keep-running.html

/ 7	. 

/ lees	,
http://stackoverflow.com/questions/138511/what-are-java-command-line-options-to-set-to-allow-jvm-to-be-remotely-debugged

/ we kunnen 	,

[eric@localhost ShortTests]$ pwd
/home/eric/Devel/Java/ShortTests
[eric@localhost ShortTests]$ java -Xdebug -Xrunjdwp:transport=dt_socket,address=9966,server=y,suspend=n MyDateAppl 1
Listening for transport dt_socket at address: 9966
Thu Jan 01 01:00:00 CET 1970
[eric@localhost ShortTests]$ man jdb
[eric@localhost ShortTests]$ java -agentlib:jdwp=transport=dt_socket,address=8000,server=y,suspend=n MyDateAppl 1
Listening for transport dt_socket at address: 8000
Thu Jan 01 01:00:00 CET 1970

/ Hij loopt door	,
/ TODO

$ mvn exec:java -DmainClass=camelinaction.JmsToFile
/ OK
/ Hoe met exec:exec	?

/ -Dmaven.surefire.debug kunnen we wel debug: de source files worden gevonden	, 

/ als we chapter2-my debug	, worden de source files niet gevonden	,

/////////////////////////////////////////////
/ DEBUG MAVEN PLUGIN

/ Lees	,
http://docs.alfresco.com/4.2/tasks/dev-extensions-maven-sdk-eclipse-remote-debugging.html

/ we kunnen in eclipse in het project onder 
Maven dependencies
/ de class opzoeken	, en een b set	,

/ op de command line	,
[eric@localhost spring-my]$ /usr/share/maven/bin/mvnDebug clean camel:run

/ In eclipse maken we een remote debug	,
Name: remote-mvn-chapter2-spring-my
project: chapter2-spring-my
Host: localhost
Port: 8000

/ we zien mvn  camel:run 2 args heeft	,
[0]	"-d" (id=36)	
[1]	"-1" (id=37)	


/ 7	.

/ we maken zelf in chapter2-spring-my een App die spring.Main calls	, net als $ mvn camel:run dat doet	,
/ TODO

/ 7	. 

/ chapter2-cbr	,

[eric@localhost chapter2]$ ls cbr/src/data/
message1.xml  message2.csv  message3.csl  message4.bad

/ OrderRouter	, Run as -> Java Application
/ we zien	,
Received CSV order: message2.csv
Received XML order: message1.xml

/ OrderRouterOtherwise	, Run as -> Java Application
/ we zien	,
Received CSV order: message2.csv
Received XML order: message1.xml
Received bad order: message4.bad
Received CSV order: message3.csl

/ als we zelf ook	,
[eric@localhost chapter2]$ echo "Foo Bar" >cbr/src/data/message5.xml
/ dan	,
Received XML order: message5.xml
/ als we deze file modify, process Camel deze NIET	,
/ TODO

/ 7	. 

/ in chapter2-recipientlist	,

/ we voegen even een processor ertussen	,

$ vi OrderRouterWithRecipientList.java

               	from("jms:xmlOrders")
                .setHeader("customer", xpath("/order/@customer"))
->              .process(new Processor() {
					@Override
					public void process(Exchange exchange) throws Exception {
						System.out.println("***\n"+exchange.getIn().getHeader("customer",String.class)+"\n***");
					}
				})
                .process(new Processor() {
                    public void process(Exchange exchange) throws Exception {
                        String recipients = "jms:accounting";
                        String customer = exchange.getIn().getHeader("customer", String.class);
                        if (customer.equals("honda")) {
                            recipients += ",jms:production";
                        }
                        exchange.getIn().setHeader("recipients", recipients);
                    }
                })
                .recipientList(header("recipients"));

/ we zien 
***
honda
***
Accounting received order: message1.xml
Production received order: message1.xml
***
joe's bikes
***
Accounting received order: message2.xml


/ wat er gebeurt:
                .setHeader("customer", xpath("/order/@customer"))

$ vi src/data/message1.xml
<?xml version="1.0" encoding="UTF-8"?>
<order name="motor" amount="1000" customer="honda"/>

/ Camel haalt de customer attr, @customer uit de message, en sets hem in de header van de exchange	,

/ 7	. 

/ ch 3

/ we import als Maven proj	,
/home/eric/Devel/Java/Camel/camelinaction/chapter3

/ Exec unit test	
OrderToCsvProcessorTest

[eric@localhost transform]$ cat  target/orders/received/report-20091208.csv 
000000444,20091208,000001212,1217,1478,2132

/ 13	. 

/ we hebben b's set in de unit test	, 

$ vi OrderToCsvProcessorTest.java

->1       return new RouteBuilder() {
            @Override
            public void configure() throws Exception {
->2             from("direct:start")
                    // format inhouse to csv using a processor
                    .process(new OrderToCsvProcessor())
                    // and save it to a file
                    .to("file://target/orders/received?fileName=report-${header.Date}.csv");

/ direct:start moet zo heten : WH Camel unit test onderdeel	,
/ TODO

/ Na	,
        template.sendBodyAndHeader("direct:start", inhouse, "Date", "20091208");
/ is de report file target/orders/received/report-20091208.csv er	,
/ omdat dan 	,
             from("direct:start")
             .process(new OrderToCsvProcessor())
             .to("file://target/orders/received?fileName=report-${header.Date}.csv");

/ 13	. 

/ we debug het camel junit framework een beetje	,

/ 1 wordt called in 	,
OrderToCsvProcessorTest(CamelTestSupport).setUp() line: 217	
/=
   @Before
    public void setUp() throws Exception {
        } else {
            doSetUp();
/s
OrderToCsvProcessorTest(CamelTestSupport).doSetUp() line: 299	
        if (isUseRouteBuilder()) {
            RouteBuilder[] builders = createRouteBuilders();
/s
OrderToCsvProcessorTest(CamelTestSupport).createRouteBuilders() line: 529	
        return new RouteBuilder[] {createRouteBuilder()};

/ 2 wordt called in 	,
OrderToCsvProcessorTest(CamelTestSupport).doSetUp() line: 302	
        if (isUseRouteBuilder()) {
->1            RouteBuilder[] builders = createRouteBuilders();
            for (RouteBuilder builder : builders) {
                log.debug("Using created route builder: " + builder);
->2                context.addRoutes(builder);
...
/s
DefaultCamelContext$1.call() line: 731	
    public void addRoutes(final RoutesBuilder builder) throws Exception {
        log.debug("Adding routes from builder: {}", builder);
        doWithDefinedClassLoader(new Callable<Void>() {
            @Override
            public Void call() throws Exception {
->                builder.addRoutesToCamelContext(DefaultCamelContext.this);
/ builder is onze RouteBuilder	,
/s
OrderToCsvProcessorTest$1(RouteBuilder).addRoutesToCamelContext(CamelContext) line: 306	
this	OrderToCsvProcessorTest$1  (id=66)	
/ onze RouteBilder	,
        configureRoutes((ModelCamelContext) context);
/s
OrderToCsvProcessorTest$1(RouteBuilder).configureRoutes(ModelCamelContext) line: 323	
        checkInitialized();
/s
OrderToCsvProcessorTest$1(RouteBuilder).checkInitialized() line: 382	
            configure();
/ this is onze RouteBuilder	,

/ 13	. 

/ bean of processor heeft niets met spring te maken	, 
/ see OrderToCsvBeanTest.java	,


/ 13	. 

$ vi PurchaseOrderJaxbTest.java

        MockEndpoint mock = getMockEndpoint("mock:order");

/ mock:order : mock:<name> is OK	, maar mock moet zo blijven	, anders ERR	,

/ 13	. 

/ In voorbeelden boek is er  een Spring test, WH betekent dit de routing in XML	,	
PurchaseOrderJaxbTest	, 
/ we maken de niet spring config variant	, 

$ vi MyNotSpringPurchaseOrderJaxbTest.java

import org.apache.camel.converter.jaxb.JaxbDataFormat;
import org.apache.camel.spi.DataFormat;

public class MyNotSpringPurchaseOrderJaxbTest extends CamelTestSupport {

    @Test
    public void testJaxb() throws Exception {
        MockEndpoint mock = getMockEndpoint("mock:order");
        mock.expectedMessageCount(1);
        mock.message(0).body().isInstanceOf(PurchaseOrder.class);

        PurchaseOrder order = new PurchaseOrder();
        order.setName("Camel in Action");
        order.setPrice(4995);
        order.setAmount(1);

        template.sendBody("direct:order", order);

        assertMockEndpointsSatisfied();
    }
/ onveranderd	,

	@Override
	protected RouteBuilder createRouteBuilder() throws Exception {
		RouteBuilder routeBuilder=new RouteBuilder() {
			
			DataFormat jaxbDataFormat=new JaxbDataFormat("camelinaction");
			
			@Override
			public void configure() throws Exception {
				
				from("direct:order")
				.marshal(jaxbDataFormat)
				.to("seda:order");
				
				from("seda:order")
				.unmarshal(jaxbDataFormat)
				.to("mock:order");
			}
		};
		return routeBuilder;
	}
}

/ er is ook org.apache.camel.model.dataformat.JaxbDataFormat
/ TODO

/ Lees	Architecture>Data Format	,
http://camel.apache.org/data-format.html

/ Lees over Main	,
http://camel.apache.org/running-camel-standalone-and-have-it-keep-running.html


/ 7	. 

/ in proj. chapter3-order is 

$ vi src/test/java/camelinaction/PurchaseOrderJaxbTest.java
$ vi src/test/resources/camelinaction/order-jaxb.xml	 / routes
$ vi src/test/resources/camelinaction/jaxb.index
PurchaseOrder

/ de route is in spring XML, 
/ jaxb.index moet er altijd zijn 	, ook als we hieronder de routes in Java	,

/ Lees	,
Architecture > Data Format > JAXB
http://people.apache.org/~dkulp/camel/jaxb.html

/ we maken de route in Java	,

$ vi MyNotSpringPurchaseOrderJaxbTest.java

   @Test
    public void testJaxb() throws Exception {
        MockEndpoint mock = getMockEndpoint("mock:order");
        mock.expectedMessageCount(1);
        mock.message(0).body().isInstanceOf(PurchaseOrder.class);

        PurchaseOrder order = new PurchaseOrder();
        order.setName("Camel in Action");
        order.setPrice(4995);
        order.setAmount(1);

        template.sendBody("direct:order", order);

        assertMockEndpointsSatisfied();
        
    }

	@Override
	protected RouteBuilder createRouteBuilder() throws Exception {
		RouteBuilder routeBuilder=new RouteBuilder() {
			
			DataFormat jaxbDataFormat=new JaxbDataFormat("camelinaction");
			
			@Override
			public void configure() throws Exception {
				
				from("direct:order")
				.marshal(jaxbDataFormat)
				.to("seda:order");
				
				from("seda:order")
				.unmarshal(jaxbDataFormat)
				.to("mock:order");
			}
		};
		return routeBuilder;
	}

/ 13	. 
			DataFormat jaxbDataFormat=new JaxbDataFormat("camelinaction");
/ WH
/ In classpath	, 
$ vi camelinaction/jaxb.index
PurchaseOrder
/ Dus leest hij in PurchaseOrder de @'s , @XmlRootElement	, ...





/ 7	. 

/ csv

/ In dit voorbeeld slaan we .marshall over, door direct met de .csv file te beginnen	, 
 	from("file://src/test/resources?noop=true&fileName=order.csv")

[eric@localhost camelinaction]$ cat chapter3/order/src/test/resources/order.csv
Camel in Action,4995,1
Activemq in Action,4495,2

/ er is als een test met/zonder spring XML	,

 	from("file://src/test/resources?noop=true&fileName=order.csv")
    .unmarshal()
	.csv()
    .split(body())
    .to("mock:queue.csv");

/ ze spit de body in rows	, en sturen deze 1 voor 1 de queue in	,

/ we deden	, 
				.marshal(jaxbDataFormat)
/ nu doen we 	,
    .unmarshal().csv()
/ WH kunnen deze niet zonder elkaar	,
/ we kunnen er geen processor tussen set	,

/ 13	. 

/ Hoe in docs te zoeken naar .csv()	?
/ geef in google : camel route csv	,
/ we komen in	,

Documentation > Architecture > Data Format > CSV
http://people.apache.org/~dkulp/camel/csv.html 


/ we maken zelf een debugger	, 

   
    private class MyProcessor implements Processor{

		@Override
		public void process(Exchange exchange) throws Exception {
			System.out.println("+++++++++");
			System.out.println(exchange.getIn().getBody());
			System.out.println("+++++++++");

		}
    	
    }

/ we kunnen deze set op 	,

               from("file://src/test/resources?noop=true&fileName=order.csv")
                .unmarshal()
                .csv()
                .process(new MyProcessor())
                .split(body())
                .to("mock:queue.csv");
 
/ we zien	,
+++++++++
[[Camel in Action, 4995, 1], [Activemq in Action, 4495, 2]]
+++++++++

/ we kunnen deze set op	, 

                from("file://src/test/resources?noop=true&fileName=order.csv")
                .unmarshal()
                .csv()
                .split(body())
                .process(new MyProcessor())
                .to("mock:queue.csv");

/ we zien	,

+++++++++
[Camel in Action, 4995, 1]
+++++++++
...
+++++++++
[Activemq in Action, 4495, 2]
+++++++++

/ we kunnen de processor NIET	,

                from("file://src/test/resources?noop=true&fileName=order.csv")
                .unmarshal()
                .process(new MyProcessor())
                .csv()
                .split(body())
                .to("mock:queue.csv");

/ dan geeft Eclipse ERR	,
The method process(PurchaseOrderCsvTest.MyProcessor) is undefined for the type DataFormatClause<ProcessorDefinition<RouteDefinition>>
/ TODO

/ we kunnen	,
                from("file://src/test/resources?noop=true&fileName=order.csv")
                .process(new MyProcessor())
                .unmarshal()
                .csv()
                .split(body())
                .to("mock:queue.csv");

/ we zien	,

+++++++++
GenericFile[order.csv]
+++++++++

/ we kunnen	,

                from("file://src/test/resources?noop=true&fileName=order.csv")
                .unmarshal()
                .csv()
                .split(body())
                .to("mock:queue.csv")
                .process(new MyProcessor());

/ we zien	,
+++++++++
[Camel in Action, 4995, 1]
+++++++++
...
+++++++++
[Activemq in Action, 4495, 2]
+++++++++

/ 7	.

/ boek(82): we moeten bij bindy ook de package name opgeven	,
                from("direct:toCsv")
                .marshal().bindy(BindyType.Csv, "camelinaction.bindy")
                .to("mock:result");

/ jaxb	,
			DataFormat jaxbDataFormat=new JaxbDataFormat("camelinaction");

/ maar bij jaxb moeten we ook in camelinaction/ een jaxb.index geven	, daar staat in 
PurchaseOrder

/ TODO

/ 7	. 

/ ProducerTemplate.sendBody/ requestBody	,

/ chapter3-converter	,


public class PurchaseOrderConverterTest extends TestCase {

    public void testPurchaseOrderConverter() throws Exception {
        ProducerTemplate template = context.createProducerTemplate();
        PurchaseOrder order = template.requestBody("direct:start", data, PurchaseOrder.class);

/ chapter3-order	,

public class PurchaseOrderBindyTest extends TestCase {

    @Test
    public void testBindy() throws Exception {
        ProducerTemplate template = context.createProducerTemplate();
        template.sendBody("direct:toCsv", order);

/ Lees boek(230)	,

/ Lees	,
Architecture > Endpoint	,
http://camel.apache.org/endpoint.html

/ Lees	,
 Components > Direct
http://camel.apache.org/direct.html

The direct: component provides direct, synchronous invocation of any consumers when a producer sends a message exchange.
/ TODO

/ 7	. 

/ WH

$ vi MyFtpToJMSToFileWithProcessor {

              from("ftp://localhost/tmp/orders?username=eric&password=rtdMpo45&move=.done")
                .process(fromFtpToJms)
                .to("jms:queue:incomingOrders"); 	/ producer
                
                from("jms:incomingOrders")			/ consumer
                .process(fromJmsToFile)
                .to("file://data/outbox");

/ dus to("jms:queue:incomingOrders") creates a Producer	, en from ("jms:incomingOrders") een Consumer	, 

/ een ProducerTemplate creates een Producer, en dan kunnen we in een test meteen in een from sturen	,

$ vi PurchaseOrderBindyTest extends TestCase {

       ProducerTemplate template = context.createProducerTemplate();
       template.sendBody("direct:toCsv", order);

                from("direct:toCsv")
                        .marshal().bindy(BindyType.Csv, "camelinaction.bindy")
                        .to("mock:result");

/ 7	. 

/ Lees	,
Components > File
http://camel.apache.org/file2.html

Lets illustrate this with an example:
from("file://inbox?move=.done").to("bean:handleOrder");
When a file is dropped in the inbox folder, the file consumer notices this and creates a new FileExchange that is routed to the handleOrder bean. The bean then processes the File object. At this point in time the file is still located in the inbox folder. After the bean completes, and thus the route is completed, the file consumer will perform the move operation and move the file to the .done sub-folder.





/ Einde CAMEL

/ ACTIVEMQ

/ Ga naar	,
http://localhost:8161/admin/queues.jsp



/ Einde ACTIVEMQ

/ WICKET APPLICATION

/ project wicket-book	, MyLocaleStyle	,

		Application application=Application.get();
		ResourceSettings resourceSettings=application.getResourceSettings();

		Localizer localizer=resourceSettings.getLocalizer();
		List<IStringResourceLoader>stringResourceLoaders=resourceSettings.getStringResourceLoaders();
		for(IStringResourceLoader stringResourceLoader:stringResourceLoaders){
						System.out.println(stringResourceLoader.getClass().getName());
		}

/ we zien in Tomcat's server output	,

org.apache.wicket.resource.loader.ComponentStringResourceLoader
org.apache.wicket.resource.loader.PackageStringResourceLoader
org.apache.wicket.resource.loader.ClassStringResourceLoader
org.apache.wicket.resource.loader.ValidatorStringResourceLoader
org.apache.wicket.resource.loader.InitializerStringResourceLoader


/ we lezen in Application docs	,

Settings - Application settings are partitioned into sets of related settings using interfaces in the org.apache.wicket.settings package. These interfaces are returned by the following methods, which should be used to configure framework settings for your application: 
	getApplicationSettings(), 
	getDebugSettings(), 
	getExceptionSettings(), 
	getMarkupSettings(), 
	getPageSettings(), 
	getRequestCycleSettings(), 
	getSecuritySettings and 
	getSessionSettings(). 
These settings are configured by default through the constructor or internalInit methods. Default the application is configured for DEVELOPMENT. You can configure this globally to DEPLOYMENT or override specific settings by implementing the init() method.

Shared Resources - Resources added to an Application's SharedResources have application-wide scope and can be referenced using a logical scope and a name with the ResourceReference class. ResourceReferences can then be used by multiple components in the same application without additional overhead (beyond the ResourceReference instance held by each referee) and will yield a stable URL, permitting efficient browser caching of the resource (even if the resource is dynamically generated). Resources shared in this manner may also be localized. See ResourceReference for more details.

/ In wicket 7 is er geen .addStringResourceLoader meer	,
/ we moeten doen	,
IStringResourceLoader stringResourceLoader = new OurOwnResourceLoaderImpl();               
Application.get().getResourceSettings().getStringResourceLoaders().add(stringResourceLoader);




/ org.apache.wicket.Application

/ Einde WICKET APPLICATION

/ WICKET

/ Hoe zien we de model in het object?

/ 7	. 

/ proj wicket-book	,

$ vi Misc2.java

public class Misc2 extends WebPage{
	public Misc2() {
		Data d=new Data();
		d.setS("Foo");
		d.setI(13);
		IModel<Data>model=new Model<>(d);
		setDefaultModel(model);
		boolean b=false;
		
	}
	private class Data implements Serializable{
		String s;
		int i;
		public String getS() {
			return s;
		}
		public void setS(String s) {
			this.s = s;
		}
		public int getI() {
			return i;
		}
		public void setI(int i) {
			this.i = i;
		}
	}
}

$ vi Misc2.html
/ Leeg	,

/ Debug	,
       setDefaultModel(model);
/d
this	Misc2  (id=4700)	
	data	Model<T>  (id=4699)	
		object	Misc2$Data  (id=4704)	

/ 7	.

		IModel<Data>model=new CompoundPropertyModel<>(d);
		setDefaultModel(model);

this	Misc2  (id=5076)	
	data	CompoundPropertyModel<T>  (id=5183)	
		target	Misc2$Data  (id=5182)	

/ 7	.

		IModel<Data>model=new PropertyModel<>(d, "s");
		setDefaultModel(model);

this	Misc2  (id=5756)	
	data	PropertyModel<T>  (id=5766)	
		expression	"s" (id=5776)	
		target	Misc2$Data  (id=5764)	




/ Einde WICKET

/ OPEN IN BASH

[eric@localhost mpo]$ PGPASSWORD=mpopostgres@mpo psql -U mpopostgres -h  interstream-a.intermax.mp-objects.com isbscs
[eric@localhost mpo]$ interstream-acceptance.bash 

[eric@localhost mpo]$ carcon-p.bash -i dsv_2015_01_15-query-2.sql
[eric@localhost forticlientsslvpn]$ forticlientsslvpn.bash 

[eric@localhost trunk]$ cp ./base-framework/core/conf/language_en.properties /home/eric/Devel/Java/JBoss/jboss-4.0.5.GA/server/pnloms/conf
[eric@localhost ActiveMQ]$ gedit ~/Downloads/SHIPMENT_ORDER_MSG.TransientObjectException\ \(1\).xml

[eric@localhost dsvcts]$ pwd
/home/eric/Devel/Firebird/scripts/dsvcts
[eric@localhost dsvcts]$ ls
anti-patch-0000-create-tables.sql                             patch-0002-cil_shipment_order_fk.sql
anti-patch-0001.sql                                           patch-0003-businessobjects.sql
...

[eric@localhost Firebird]$ isql-fb dsvcts.fdb -u sysdba -p masterkey
[eric@localhost repository]$ PGPASSWORD=mpopostgres@mpo psql -U mpopostgres pnloms

[eric@localhost eclipse-jee]$ pwd
/home/eric/Devel/Java/Eclipse/eclipse-jee
[eric@localhost eclipse-jee-test]$ pwd
/home/eric/Devel/Java/Eclipse/eclipse-jee-test
[eric@localhost pnloms]$ pwd
/home/eric/Devel/Java/JBoss/jboss-4.0.5.GA/server/pnloms
[eric@localhost jmx-examples]$ pwd
/home/eric/Devel/Java/JMX/jmx-examples
[eric@localhost trunk]$ pwd
/home/eric/Devel/Java/Eclipse/eclipse-jee/workspace/trunk
[eric@localhost apache-activemq-5.10.1]$  pwd
/home/eric/Devel/Java/ActiveMQ/apache-activemq-5.10.1
[eric@localhost apache-activemq-5.10.1]$ bin/activemq console
[eric@localhost apache-tomcat-7.0.57]$ pwd
/home/eric/Devel/Java/Tomcat/apache-tomcat-7.0.57
[eric@localhost Ehcache]$ pwd
/home/eric/Devel/Java/Ehcache
[eric@localhost demo-base]$ pwd
/home/eric/Devel/Java/Jetty/jetty-distribution-9.2.6.v20141205/demo-base
[eric@localhost ehcache-core-2.6.10-sources]$ pwd
/home/eric/Devel/Java/Ehcache/ehcache-core-2.6.10-sources



/ Einde OPEN IN BASH

/ CHROME

/ WAS	,
[root@localhost ~]# vi /etc/yum.repos.d/google-chrome.repo 
[google-chrome]
name=google-chrome
baseurl=http://dl.google.com/linux/chrome/rpm/stable/x86_64
enabled=1
gpgcheck=1

/ Lees	,
http://www.if-not-true-then-false.com/2010/install-google-chrome-with-yum-on-fedora-red-hat-rhel/comment-page-10/

[root@localhost ~]# vi /etc/yum.repos.d/google-chrome.repo 
[google-chrome]
name=google-chrome - \$basearch
baseurl=http://dl.google.com/linux/chrome/rpm/stable/\$basearch
enabled=1
gpgcheck=1
gpgkey=https://dl-ssl.google.com/linux/linux_signing_key.pub



/ Einde CHROME

/ ACTIVEMQ BOOK

[eric@localhost ActiveMQ]$ unzip -l ~/Downloads/$(grep AMQ < <(ls -1 ~/Downloads/ ))
/ OK
/ Hoe met pipes	?
/ TODO

[eric@localhost ActiveMQ]$  pwd
/home/eric/Devel/Java/ActiveMQ

/ we hadden deze al unzip	,

[eric@localhost ActiveMQ]$ ls
apache-activemq-5.10.1		/ src code	, ook met examples	,

[eric@localhost apache-activemq-5.10.1]$ bin/activemq console
/ start activemq	,

/ we maken een nieuwe ws in eclipse-interfacting-testing/	,  workspace-activemq	,
/ en daarin de src code van het boek	,
[eric@localhost workspace-activemq]$ pwd
/home/eric/Devel/Java/Eclipse/eclipse-interfacing-testing/workspace-activemq
[eric@localhost workspace-activemq]$ ls
amq-in-action-example-src  RemoteSystemsTempFiles

/ we import in eclipse amq-in-action-example-src	, 
File, Import,  Maven, Existing Maven Project	, 
/ Duurt een tijd	, moet allerlei Maven deps download	,

/ 7	. 

/ we maken zelf een maven project	, 
/ simple, 	zonder archetype	, 
$ vi pom.xml

<project ...> 
  <modelVersion>4.0.0</modelVersion>
  <groupId>my.own.activemq</groupId>
  <artifactId>first</artifactId>
  <version>0.0.1-SNAPSHOT</version>
</project>

/ Het is heel makkelijk om add	, 
$ vi pom.xml

  <properties>
  
  </properties>
  <dependencies>
  
  </dependencies>
  <build>
  
  </build>
</project>

/ Maar in Eclipse in src/main/java een package	,
my.test.own.activemq.book.ch2
/ en daarin een class	, Producer	,

/ Intermezzo

/ final's ERR als init in exc's try-catch block	, but not if method throws exc	,

$ vi Producer.java

/ OK,	 
public class Producer {
	private final String brokerUrl="http://localhost:61616";
	private final ActiveMQConnectionFactory connectionFactory;
	private final Connection connection;
	private final Session session;
	
	public Producer()throws JMSException{
		connectionFactory=new ActiveMQConnectionFactory(brokerUrl);		
		connection=connectionFactory.createConnection();
		connection.start();
		session=connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
		
	}
}

/ Maar als we de exc catch dan zegt Eclipse: may not be initialized	, 

/ ERR
public class Producer {
	private final String brokerUrl="http://localhost:61616";
	private final ActiveMQConnectionFactory connectionFactory;
	private final Connection connection;
	private final Session session;
	
	public Producer(){
	try{
		connectionFactory=new ActiveMQConnectionFactory(brokerUrl);		
		connection=connectionFactory.createConnection();
		connection.start();
		session=connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
	}catch(JMSException e){
	}
	}
}

/ TODO 

/ Einde Intermezzo


/ 7	. 

/ we download een nieuwe activemq	, voor testing	, apart van die van mpo	,
[eric@localhost My]$ pwd
/home/eric/Devel/Java/ActiveMQ/My
[eric@localhost My]$ tar xvzf ~/Downloads/apache-activemq-5.13.3-bin.tar.gz 
$ cd apache-activemq-5.13.3
[eric@localhost apache-activemq-5.13.3]$ bin/activemq console
/ Geef in chrome	,
http://localhost:8161/admin/index.jsp
/ we zien 1 topic	, 
ActiveMQ.Advisory.MasterBroker
/ TODO

Exception in thread "main" java.lang.NoClassDefFoundError: com/thoughtworks/xstream/converters/Converter
	at org.apache.activemq.transport.xstream.XStreamWireFormatFactory.createWireFormat(XStreamWireFormatFactory.java:31)
	at org.apache.activemq.transport.TransportFactory.createWireFormat(TransportFactory.java:197)
	at org.apache.activemq.transport.TransportFactory.doConnect(TransportFactory.java:123)
	at org.apache.activemq.transport.TransportFactory.connect(TransportFactory.java:69)
	at org.apache.activemq.ActiveMQConnectionFactory.createTransport(ActiveMQConnectionFactory.java:330)
	at org.apache.activemq.ActiveMQConnectionFactory.createActiveMQConnection(ActiveMQConnectionFactory.java:345)
	at org.apache.activemq.ActiveMQConnectionFactory.createActiveMQConnection(ActiveMQConnectionFactory.java:303)
	at org.apache.activemq.ActiveMQConnectionFactory.createConnection(ActiveMQConnectionFactory.java:243)
	at my.own.activemq.book.ch2.Producer.<init>(Producer.java:32)
	at my.own.activemq.book.ch2.Producer.main(Producer.java:20) 

/ 7	. 

/ Dit was niet nodig	, want Eclipse vindt de src via Maven	,

/ we download ook de src	,
[eric@localhost My]$ mkdir $(awk '{gsub(/.zip/,"");print}' <(grep source <(grep activemq <(ls -t ~/Downloads/))))
[eric@localhost My]$ ls
activemq-parent-5.13.3-source-release  apache-activemq-5.13.3

[eric@localhost My]$ _DIR=$(awk '{gsub(/.zip/,"");print}' <(grep source <(grep activemq <(ls -t ~/Downloads/)))) echo $_DIR
activemq-parent-5.13.3-source-release

[eric@localhost My]$ _DIR=$(awk '{gsub(/.zip/,"");print}' <(grep source <(grep activemq <(ls -t ~/Downloads/)))) (cd $_DIR)

[eric@localhost My]$ _DIR=$(awk '{gsub(/.zip/,"");print}' <(grep source <(grep activemq <(ls -t ~/Downloads/))));(cd $_DIR;unzip  ~/Downloads/$_DIR".zip")
/ Nu moeten we ;	,

[eric@localhost My]$ ls activemq-parent-5.13.3-source-release/activemq-parent-5.13.3/
activemq-all/                activemq-jms-pool/           activemq-ra/                 assembly/
activemq-amqp/               activemq-kahadb-store/       activemq-rar/                DEPENDENCIES
activemq-blueprint/          activemq-karaf/              activemq-run/                doap.rdf
activemq-broker/             activemq-karaf-itest/        activemq-runtime-config/     etc/
activemq-camel/              activemq-leveldb-store/      activemq-shiro/              KEYS
activemq-client/             activemq-log4j-appender/     activemq-spring/             LICENSE
activemq-console/            activemq-mqtt/               activemq-stomp/              NOTICE
activemq-fileserver/         activemq-openwire-generator/ activemq-tooling/            pom.xml
activemq-http/               activemq-openwire-legacy/    activemq-unit-tests/         README.txt
activemq-itests-spring31/    activemq-osgi/               activemq-web/                trash/
activemq-jaas/               activemq-partition/          activemq-web-console/        
activemq-jdbc-store/         activemq-pool/               activemq-web-demo/    
[eric@localhost My]$ ls activemq-parent-5.13.3-source-release/activemq-parent-5.13.3/activemq-all/
pom.xml  src

/ 7	. 

[eric@localhost activemq-parent-5.13.3]$ ls ~/.m2/repository/org/apache/activemq/activemq-all/5.13.3/
activemq-all-5.13.3.jar               activemq-all-5.13.3.pom.lastUpdated   activemq-all-5.13.3-sources.jar.sha1
activemq-all-5.13.3.jar.lastUpdated   activemq-all-5.13.3.pom.md5           m2e-lastUpdated.properties
activemq-all-5.13.3.jar.md5           activemq-all-5.13.3.pom.sha1          _remote.repositories
activemq-all-5.13.3.jar.sha1          activemq-all-5.13.3-sources.jar       
activemq-all-5.13.3.pom               activemq-all-5.13.3-sources.jar.md5   
/ we zien de src jar's	,



/ 7	. 

/ Lees	,
http://activemq.apache.org/activemq-5133-release.html

/ Hoe start activemq met maven	?

/ Lees	Tools>Maven2 ActiveMQ Broker Plugin	,
http://activemq.apache.org/maven2-activemq-broker-plugin.html

$ mvn org.apache.activemq.tooling:maven-activemq-plugin:5.1:run
/ of	,
/ maak entry in pom.xml	, en
$ mvn activemq:run

/ in search.maven.org	,
org.apache.activemq.tooling:activemq-maven-pugin

package my.own.activemq.book.ch2;

/ 7	. 

/ Hoe exec:exec	?
/ TODO

/ Voordat we Run as , Java Application 
/ moeten we eerst: mvn package	, voorals als je eest mvn clean doet	,
/ TODO

/ 7	. 

/ we hadden per ongeluk	,
	private final String brokerUrl="http://localhost:61616";
/ maar we moeten	,
	private final String brokerUrl="tcp://localhost:61616";

/ we kwamen tegen	, met http	, 
lang.NoClassDefFoundError: org/apache/http/message/AbstractHttpMessage
/ Lees	,
http://activemq.2283324.n4.nabble.com/http-transport-instead-of-tcp-td4654580.html
/ refs -> 
https://cwiki.apache.org/confluence/display/ACTIVEMQ/HTTP+and+HTTPs+Transports+Reference

/ lees	,
http://hc.apache.org/httpclient-3.x/
The Commons HttpClient project is now end of life, and is no longer being developed. It has been replaced by the Apache HttpComponents project in its HttpClient and HttpCore modules, which offer better performance and more flexibility.
/ refs ->
http://hc.apache.org/

/ met http	,
$ vi pom.xml

  <dependencies>
  	<dependency>
    	<groupId>org.apache.activemq</groupId>
    	<artifactId>activemq-all</artifactId>
    	<version>${activemq-version}</version>
	</dependency>
	<dependency>
	    <groupId>com.thoughtworks.xstream</groupId>
	    <artifactId>xstream</artifactId>
	    <version>${xstream-version}</version>
	</dependency>
	<dependency>
	    <groupId>org.apache.httpcomponents</groupId>
	    <artifactId>httpclient</artifactId>
	    <version>4.5.2</version>
	</dependency>
	
  </dependencies>

/ we zien ERR	,
Exception in thread "main" javax.jms.JMSException: Could not connect to broker URL: http://localhost:61616. Reason: java.io.IOException: Failed to perform GET on: http://localhost:61616 as response was: null
	at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:36)
	at org.apache.activemq.ActiveMQConnectionFactory.createActiveMQConnection(ActiveMQConnectionFactory.java:373)
	at org.apache.activemq.ActiveMQConnectionFactory.createActiveMQConnection(ActiveMQConnectionFactory.java:303)
	at org.apache.activemq.ActiveMQConnectionFactory.createConnection(ActiveMQConnectionFactory.java:243)
	at my.own.activemq.book.ch2.Producer.<init>(Producer.java:34)
	at my.own.activemq.book.ch2.Producer.main(Producer.java:22)
Caused by: java.io.IOException: Failed to perform GET on: http://localhost:61616 as response was: null
	at org.apache.activemq.transport.http.HttpClientTransport.doStart(HttpClientTransport.java:282)
	at org.apache.activemq.util.ServiceSupport.start(ServiceSupport.java:55)
	at org.apache.activemq.transport.AbstractInactivityMonitor.start(AbstractInactivityMonitor.java:168)
	at org.apache.activemq.transport.InactivityMonitor.start(InactivityMonitor.java:52)
	at org.apache.activemq.transport.TransportFilter.start(TransportFilter.java:58)
	at org.apache.activemq.transport.TransportFilter.start(TransportFilter.java:58)
	at org.apache.activemq.ActiveMQConnectionFactory.createActiveMQConnection(ActiveMQConnectionFactory.java:353)
	... 4 more

/ configure activemq	, WH in activemq.xml	,
/ TODO

/ 7	. 

/ we oef met files	,

/ eclipse interfacing-testing
/ ws workspace-activemq
/ we maken project scratch	,

/ 7	. 

/ large file
/ TODO

BlobMessage message = session.createBlobMessage(new File("/foo/bar");
producer.send(message);
/ TODO

/ 7	. 

http://activemq.apache.org/rest.html

/ 7	. 

/ file -> string	,

/ geef in google	,

/ lees	,
http://stackoverflow.com/questions/326390/how-do-i-create-a-java-string-from-the-contents-of-a-file
/ oplossing	,
  byte[] encoded = Files.readAllBytes(Paths.get(path));
  return new String(encoded, encoding);

This answer largely replaces my Java 6 version. The utility of Java 7 safely simplifies the code, and the old answer, which used a mapped byte buffer, prevented the file that was read from being deleted until the mapped buffer was garbage collected. You can view the old version via the "edited" link on this answer.

/ Lees	,
http://javarevisited.blogspot.nl/2012/01/memorymapped-file-and-io-in-java.html
/ RandomAccessFile	,

$ vi Producer2.java

	public void send()throws JMSException,IOException{
		String job="suspend";
		Destination destination=session.createQueue("JOBS"+job);
		String uri="/home/eric/Integration/Geosco/04-DESADV-ID-SH-1248.xml";
		Path path=Paths.get(uri);
		byte[]bytes=Files.readAllBytes(path);
		String file=new String(bytes);
		
		TextMessage message = session.createTextMessage(file);
		
		producer.send(destination, message);
	}

/ Doe in eclipse	,
first clean package
first Producer2

/ 7	. 

/ Producer is met text message	,
/ Producer2 is met text file	,
/ Producer2a is Producer2	, met try, catch ipv throws	, TODO 
/ Producer3a is refactored Producer2a	, met constructor injection	, 
/ Producer3b is  setter-injection	, 

/ 7	. 

/ start activemq	,
[eric@localhost apache-activemq-5.13.3]$ bin/activemq console

/ We run in eclipse Producer nog een keer	, 
right click, Run as , Java application	,
/ Ga naar 	,
http://localhost:8161/admin/queues.jsp
/ we zien JOBSsupsend queue van 7 -> 8		, als we de page reload	,


 


/ Einde ACTIVEMQ BOOK

/ FILE IO 

/ eclipse interfacing-testing
/ ws workspace-activemq


/ We hebben FindInResources	, 
/ Paths.get werkt met file system	,
/ getClass().getResourceAsStream : hiermee kun je een file uit classpath halen	,

	public void g(){
		InputStream inputStream=this.getClass().getResourceAsStream("/foo.xml");
		InputStreamReader inputStreamReader=new InputStreamReader(inputStream);
		BufferedReader bufferedReader=new BufferedReader(inputStreamReader);
		String line=null;
		FileWriter fileWriter=null;
		try{
			fileWriter=new FileWriter("/tmp/foo.xml");
		}catch(IOException exception){
			exception.printStackTrace();
		}
		try{
			line=bufferedReader.readLine();
			fileWriter.write(line);
			
		}catch(IOException exception){
			exception.printStackTrace();
		}
	}

/ we kunnen ook IOUtils use	,
/ Lees	,
http://www.google.com/url?q=http%3A%2F%2Fstackoverflow.com%2Fquestions%2F10308221%2Fhow-to-copy-file-inside-jar-to-outside-the-jar&sa=D&sntz=1&usg=AFQjCNHPKz8T0QoLaKJVOs--qbLfM6o9JA

/ TODO


/ Einde FILE IO 

/ WICKET FILTER 

public class DataTableFilterToolbarPage extends ExamplePage
	public DataTableFilterToolbarPage()
		SortableContactDataProvider dataProvider = new SortableContactDataProvider();			
/ 
		DataTable<Contact, String> tableWithFilterForm = new DataTable<>("tableWithFilterForm", columns,dataProvider, 8);

		FilterForm<ContactFilter> filterForm = new FilterForm<>("filterForm", dataProvider);	
		filterForm.add(new TextField<>("dateFrom", PropertyModel.of(dataProvider, "filterState.dateFrom")));
		filterForm.add(new TextField<>("dateTo", PropertyModel.of(dataProvider, "filterState.dateTo")));	
/ Zorgt dat from date, en to date naar de server gaan	,

		filterForm.add(tableWithFilterForm);
 


/ Einde WICKET FILTER 

/ DEBUG WICKET FILTER 

/s
		SortableContactDataProvider dataProvider = new SortableContactDataProvider();
/s
SortableContactDataProvider.<init>() line: 38	
/s
public abstract class SortableDataProvider<T, S> implements ISortableDataProvider<T, S>			/ Wicket class	,
	private final SingleSortState<S> state = new SingleSortState<>();
/t
	private ContactFilter contactFilter = new ContactFilter();
/s
ContactFilter.<init>() line: 22	
    private Date dateFrom;
null
    private Date dateTo;
null
/t
SortableContactDataProvider.<init>() line: 46	
		// set default sort
		setSort("firstName", SortOrder.ASCENDING);
/s
SortableContactDataProvider(SortableDataProvider<T,S>).setSort(S, SortOrder) line: 85	
		state.setPropertySortOrder(property, order);
/s
SingleSortState<T>.setPropertySortOrder(T, SortOrder) line: 53	
/=
	public void setPropertySortOrder(final T property, final SortOrder order)
		else
		{
			param = new SortParam<>(property, order == SortOrder.ASCENDING);
this	SingleSortState<T>  (id=14024)	
	param	SortParam<T>  (id=14030)	
		ascending	true	
		property	"firstName" (id=14025)	
/t
DataTableFilterToolbarPage.<init>() line: 78	
		SortableContactDataProvider dataProvider = new SortableContactDataProvider();
dataProvider	SortableContactDataProvider  (id=13493)	
	contactFilter	ContactFilter  (id=14023)	
		dateFrom	null	
		dateTo	null	
	state	SingleSortState<T>  (id=14024)	
		param	SortParam<T>  (id=14030)	
			ascending	true	
			property	"firstName" (id=14025)	

/c
/s
/ stack	,
	SortableContactDataProvider.filterContacts(List<Contact>) line: 66	
	SortableContactDataProvider.size() line: 96	
	DataTable$DefaultDataGridView(DataViewBase<T>).internalGetItemCount() line: 142	
	DataTable$DefaultDataGridView(AbstractPageableView<T>).getItemCount() line: 235	
	DataTable$DefaultDataGridView(AbstractPageableView<T>).getRowCount() line: 216	
	DataTable$DefaultDataGridView(AbstractPageableView<T>).getViewSize() line: 314	
	DataTable$DefaultDataGridView(AbstractPageableView<T>).getItemModels() line: 99	
	DataTable$DefaultDataGridView(RefreshingView<T>).onPopulate() line: 93	
	DataTable$DefaultDataGridView(AbstractRepeater).onBeforeRender() line: 124	
	DataTable$DefaultDataGridView(AbstractPageableView<T>).onBeforeRender() line: 115	
	DataTable$DefaultDataGridView(Component).internalBeforeRender() line: 949	
	DataTable$DefaultDataGridView(Component).beforeRender() line: 1017	
	WebMarkupContainer(MarkupContainer).onBeforeRenderChildren() line: 1866	
	WebMarkupContainer(Component).onBeforeRender() line: 3877	
	WebMarkupContainer(Component).internalBeforeRender() line: 949	
	WebMarkupContainer(Component).beforeRender() line: 1017	
	DataTable<T,S>(MarkupContainer).onBeforeRenderChildren() line: 1866	
	DataTable<T,S>(Component).onBeforeRender() line: 3877	
	DataTable<T,S>(Component).internalBeforeRender() line: 949	
	DataTable<T,S>(Component).beforeRender() line: 1017	
	FilterForm<T>(MarkupContainer).onBeforeRenderChildren() line: 1866	
	FilterForm<T>(Component).onBeforeRender() line: 3877	
	FilterForm<T>(Form<T>).onBeforeRender() line: 1807	
	FilterForm<T>(Component).internalBeforeRender() line: 949	
	FilterForm<T>(Component).beforeRender() line: 1017	
	DataTableFilterToolbarPage(MarkupContainer).onBeforeRenderChildren() line: 1866	
	DataTableFilterToolbarPage(Component).onBeforeRender() line: 3877	
	DataTableFilterToolbarPage(Page).onBeforeRender() line: 801	
	DataTableFilterToolbarPage(Component).internalBeforeRender() line: 949	
	DataTableFilterToolbarPage(Component).beforeRender() line: 1017	
	DataTableFilterToolbarPage(Component).internalPrepareForRender(boolean) line: 2215	
	DataTableFilterToolbarPage(Page).internalPrepareForRender(boolean) line: 242	
	DataTableFilterToolbarPage(Component).render() line: 2304	
	DataTableFilterToolbarPage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ debug	, 
/s
SortableContactDataProvider.size() line: 96	
		return filterContacts(getContactsDB().getIndex(getSort())).size();
///////////////////////////////////
/ Eerst sort	, dan filter	, 
///////////////////////////////////////////////
/ dus de sortable dat provider filters ook	,
/ Voor filtering moeten we in een sortable data provider zijn	,

/ Intermezzo

"getContactsDB()"	 (pending)	
	fnameDescIdx	Collections$SynchronizedRandomAccessList<E>  (id=14286)	
	fnameIdx	Collections$SynchronizedRandomAccessList<E>  (id=14266)	
	lnameDescIdx	Collections$SynchronizedRandomAccessList<E>  (id=14287)	
	lnameIdx	Collections$SynchronizedRandomAccessList<E>  (id=14288)	
	map	Collections$SynchronizedMap<K,V>  (id=14289)	

map=
{1=[Contact id=1 firstName=Jose lastName=Graham homePhone=838-555-7575 cellPhone=303-555-7828],
 2=[Contact id=2 firstName=Matthew lastName=Allen homePhone=504-555-8006 cellPhone=872-555-3765],
 3=[Contact id=3 firstName=Emily lastName=Rose homePhone=227-555-5740 cellPhone=487-555-4347],
 4=[Contact id=4 firstName=Timothy lastName=Allen homePhone=681-555-5250 cellPhone=283-555-4656],
 5=[Contact id=5 firstName=Jacob lastName=Gonzalez homePhone=735-555-3215 cellPhone=344-555-2284],
 6=[Contact id=6 firstName=Keith lastName=Bailey homePhone=244-555-1838 cellPhone=384-555-4247],
 7=[Contact id=7 firstName=Christopher lastName=Davis homePhone=615-555-5100 cellPhone=521-555-5751],
 8=[Contact id=8 firstName=Pamela lastName=Bailey homePhone=537-555-8567 cellPhone=251-555-5536],
 9=[Contact id=9 firstName=Michael lastName=Donahue homePhone=212-555-7884 cellPhone=437-555-7171],
 10=[Contact id=10 firstName=Sandra lastName=Bailey homePhone=382-555-4551 cellPhone=520-555-2656],
 11=[Contact id=11 firstName=Jose lastName=Fisher homePhone=518-555-1221 cellPhone=451-555-4148],
 12=[Contact id=12 firstName=Jack lastName=Hall homePhone=556-555-5815 cellPhone=664-555-3164],
 13=[Contact id=13 firstName=Abner lastName=Black homePhone=484-555-1380 cellPhone=837-555-6711],
 14=[Contact id=14 firstName=Abby lastName=Fisher homePhone=752-555-1271 cellPhone=404-555-7473],
 15=[Contact id=15 firstName=Linda lastName=Cruz homePhone=212-555-7864 cellPhone=672-555-6261],
 17=[Contact id=17 firstName=Timothy lastName=Williams homePhone=460-555-1885 cellPhone=717-555-4161],
 16=[Contact id=16 firstName=Virginia lastName=Gonzalez homePhone=738-555-5567 cellPhone=746-555-8824],
 19=[Contact id=19 firstName=Samuel lastName=Jones homePhone=444-555-3565 cellPhone=552-555-3481],
 18=[Contact id=18 firstName=Samuel lastName=Lee homePhone=616-555-1108 cellPhone=411-555-4656],
 21=[Contact id=21 firstName=Maria lastName=Williams homePhone=251-555-5611 cellPhone=758-555-7417],
 20=[Contact id=20 firstName=Nicholas lastName=Clark homePhone=850-555-2841 cellPhone=304-555-2572],
 23=[Contact id=23 firstName=Willie lastName=Donahue homePhone=447-555-3412 cellPhone=308-555-5753],
 22=[Contact id=22 firstName=Gerald lastName=Graham homePhone=266-555-5582 cellPhone=267-555-6410],
 25=[Contact id=25 firstName=Douglas lastName=Davis homePhone=317-555-1614 cellPhone=601-555-7182],
 24=[Contact id=24 firstName=Sarah lastName=Ortiz homePhone=875-555-2276 cellPhone=367-555-6051],
 27=[Contact id=27 firstName=Emily lastName=Rose homePhone=607-555-4265 cellPhone=628-555-3576],
 26=[Contact id=26 firstName=Nicholas lastName=Donahue homePhone=382-555-6351 cellPhone=545-555-8317],
 29=[Contact id=29 firstName=Virginia lastName=Clark homePhone=486-555-5743 cellPhone=321-555-1353],
 28=[Contact id=28 firstName=Hailey lastName=Donahue homePhone=282-555-3288 cellPhone=803-555-2011],
 31=[Contact id=31 firstName=Joshua lastName=Murray homePhone=313-555-5146 cellPhone=536-555-1833],
 30=[Contact id=30 firstName=Matthew lastName=Williams homePhone=275-555-2146 cellPhone=831-555-5868],
 34=[Contact id=34 firstName=Hailey lastName=Nelson homePhone=468-555-1462 cellPhone=887-555-2186],
 35=[Contact id=35 firstName=Joshua lastName=Allen homePhone=438-555-2811 cellPhone=850-555-7513],
 32=[Contact id=32 firstName=Nicholas lastName=Moore homePhone=212-555-1243 cellPhone=386-555-6807],
 33=[Contact id=33 firstName=Kathleen lastName=Graham homePhone=770-555-4208 cellPhone=806-555-1576],
 38=[Contact id=38 firstName=Virginia lastName=Bailey homePhone=375-555-8632 cellPhone=228-555-5602],
 39=[Contact id=39 firstName=Sarah lastName=Baker homePhone=718-555-6411 cellPhone=835-555-3737],
 36=[Contact id=36 firstName=Sarah lastName=Cruz homePhone=853-555-6423 cellPhone=246-555-1717],
 37=[Contact id=37 firstName=Jacob lastName=Fisher homePhone=841-555-6051 cellPhone=872-555-6567],
 42=[Contact id=42 firstName=Sandra lastName=Smiith homePhone=716-555-2870 cellPhone=623-555-8024],
 43=[Contact id=43 firstName=Kathleen lastName=Jones homePhone=246-555-6823 cellPhone=607-555-1387],
 40=[Contact id=40 firstName=Abner lastName=Bailey homePhone=540-555-7400 cellPhone=402-555-6224],
 41=[Contact id=41 firstName=Emily lastName=Baker homePhone=200-555-7370 cellPhone=857-555-6775],
 46=[Contact id=46 firstName=Virginia lastName=Black homePhone=236-555-1514 cellPhone=370-555-6114],
 47=[Contact id=47 firstName=Hailey lastName=Allen homePhone=730-555-1750 cellPhone=280-555-4732],
 44=[Contact id=44 firstName=Linda lastName=Allen homePhone=263-555-2471 cellPhone=253-555-8017],
 45=[Contact id=45 firstName=Abner lastName=Clark homePhone=217-555-1378 cellPhone=887-555-8002],
 50=[Contact id=50 firstName=Sandra lastName=Cruz homePhone=532-555-6421 cellPhone=672-555-8305],
 49=[Contact id=49 firstName=Willie lastName=Cruz homePhone=274-555-4160 cellPhone=364-555-3530],
 48=[Contact id=48 firstName=Sarah lastName=Wilson homePhone=586-555-1604 cellPhone=788-555-6148]}

fnameIdx=
[[Contact id=14 firstName=Abby lastName=Fisher homePhone=752-555-1271 cellPhone=404-555-7473],
 [Contact id=13 firstName=Abner lastName=Black homePhone=484-555-1380 cellPhone=837-555-6711],
 [Contact id=40 firstName=Abner lastName=Bailey homePhone=540-555-7400 cellPhone=402-555-6224],
 [Contact id=45 firstName=Abner lastName=Clark homePhone=217-555-1378 cellPhone=887-555-8002],
 [Contact id=7 firstName=Christopher lastName=Davis homePhone=615-555-5100 cellPhone=521-555-5751],
 [Contact id=25 firstName=Douglas lastName=Davis homePhone=317-555-1614 cellPhone=601-555-7182],
 [Contact id=3 firstName=Emily lastName=Rose homePhone=227-555-5740 cellPhone=487-555-4347],
 [Contact id=27 firstName=Emily lastName=Rose homePhone=607-555-4265 cellPhone=628-555-3576],
 [Contact id=41 firstName=Emily lastName=Baker homePhone=200-555-7370 cellPhone=857-555-6775],
 [Contact id=22 firstName=Gerald lastName=Graham homePhone=266-555-5582 cellPhone=267-555-6410],
 [Contact id=28 firstName=Hailey lastName=Donahue homePhone=282-555-3288 cellPhone=803-555-2011],
 [Contact id=34 firstName=Hailey lastName=Nelson homePhone=468-555-1462 cellPhone=887-555-2186],
 [Contact id=47 firstName=Hailey lastName=Allen homePhone=730-555-1750 cellPhone=280-555-4732],
 [Contact id=12 firstName=Jack lastName=Hall homePhone=556-555-5815 cellPhone=664-555-3164],
 [Contact id=5 firstName=Jacob lastName=Gonzalez homePhone=735-555-3215 cellPhone=344-555-2284],
 [Contact id=37 firstName=Jacob lastName=Fisher homePhone=841-555-6051 cellPhone=872-555-6567],
 [Contact id=1 firstName=Jose lastName=Graham homePhone=838-555-7575 cellPhone=303-555-7828],
 [Contact id=11 firstName=Jose lastName=Fisher homePhone=518-555-1221 cellPhone=451-555-4148],
 [Contact id=31 firstName=Joshua lastName=Murray homePhone=313-555-5146 cellPhone=536-555-1833],
 [Contact id=35 firstName=Joshua lastName=Allen homePhone=438-555-2811 cellPhone=850-555-7513],
 [Contact id=33 firstName=Kathleen lastName=Graham homePhone=770-555-4208 cellPhone=806-555-1576],
 [Contact id=43 firstName=Kathleen lastName=Jones homePhone=246-555-6823 cellPhone=607-555-1387],
 [Contact id=6 firstName=Keith lastName=Bailey homePhone=244-555-1838 cellPhone=384-555-4247],
 [Contact id=15 firstName=Linda lastName=Cruz homePhone=212-555-7864 cellPhone=672-555-6261],
 [Contact id=44 firstName=Linda lastName=Allen homePhone=263-555-2471 cellPhone=253-555-8017],
 [Contact id=21 firstName=Maria lastName=Williams homePhone=251-555-5611 cellPhone=758-555-7417],
 [Contact id=2 firstName=Matthew lastName=Allen homePhone=504-555-8006 cellPhone=872-555-3765],
 [Contact id=30 firstName=Matthew lastName=Williams homePhone=275-555-2146 cellPhone=831-555-5868],
 [Contact id=9 firstName=Michael lastName=Donahue homePhone=212-555-7884 cellPhone=437-555-7171],
 [Contact id=20 firstName=Nicholas lastName=Clark homePhone=850-555-2841 cellPhone=304-555-2572],
 [Contact id=26 firstName=Nicholas lastName=Donahue homePhone=382-555-6351 cellPhone=545-555-8317],
 [Contact id=32 firstName=Nicholas lastName=Moore homePhone=212-555-1243 cellPhone=386-555-6807],
 [Contact id=8 firstName=Pamela lastName=Bailey homePhone=537-555-8567 cellPhone=251-555-5536],
 [Contact id=18 firstName=Samuel lastName=Lee homePhone=616-555-1108 cellPhone=411-555-4656],
 [Contact id=19 firstName=Samuel lastName=Jones homePhone=444-555-3565 cellPhone=552-555-3481],
 [Contact id=10 firstName=Sandra lastName=Bailey homePhone=382-555-4551 cellPhone=520-555-2656],
 [Contact id=42 firstName=Sandra lastName=Smiith homePhone=716-555-2870 cellPhone=623-555-8024],
 [Contact id=50 firstName=Sandra lastName=Cruz homePhone=532-555-6421 cellPhone=672-555-8305],
 [Contact id=24 firstName=Sarah lastName=Ortiz homePhone=875-555-2276 cellPhone=367-555-6051],
 [Contact id=36 firstName=Sarah lastName=Cruz homePhone=853-555-6423 cellPhone=246-555-1717],
 [Contact id=39 firstName=Sarah lastName=Baker homePhone=718-555-6411 cellPhone=835-555-3737],
 [Contact id=48 firstName=Sarah lastName=Wilson homePhone=586-555-1604 cellPhone=788-555-6148],
 [Contact id=4 firstName=Timothy lastName=Allen homePhone=681-555-5250 cellPhone=283-555-4656],
 [Contact id=17 firstName=Timothy lastName=Williams homePhone=460-555-1885 cellPhone=717-555-4161],
 [Contact id=16 firstName=Virginia lastName=Gonzalez homePhone=738-555-5567 cellPhone=746-555-8824],
 [Contact id=29 firstName=Virginia lastName=Clark homePhone=486-555-5743 cellPhone=321-555-1353],
 [Contact id=38 firstName=Virginia lastName=Bailey homePhone=375-555-8632 cellPhone=228-555-5602],
 [Contact id=46 firstName=Virginia lastName=Black homePhone=236-555-1514 cellPhone=370-555-6114],
 [Contact id=23 firstName=Willie lastName=Donahue homePhone=447-555-3412 cellPhone=308-555-5753],
 [Contact id=49 firstName=Willie lastName=Cruz homePhone=274-555-4160 cellPhone=364-555-3530]]

lnameIdx=
[[Contact id=2 firstName=Matthew lastName=Allen homePhone=504-555-8006 cellPhone=872-555-3765],
 [Contact id=4 firstName=Timothy lastName=Allen homePhone=681-555-5250 cellPhone=283-555-4656],
 [Contact id=35 firstName=Joshua lastName=Allen homePhone=438-555-2811 cellPhone=850-555-7513],
 [Contact id=44 firstName=Linda lastName=Allen homePhone=263-555-2471 cellPhone=253-555-8017],
 [Contact id=47 firstName=Hailey lastName=Allen homePhone=730-555-1750 cellPhone=280-555-4732],
 [Contact id=6 firstName=Keith lastName=Bailey homePhone=244-555-1838 cellPhone=384-555-4247],
 [Contact id=8 firstName=Pamela lastName=Bailey homePhone=537-555-8567 cellPhone=251-555-5536],
 [Contact id=10 firstName=Sandra lastName=Bailey homePhone=382-555-4551 cellPhone=520-555-2656],
 [Contact id=38 firstName=Virginia lastName=Bailey homePhone=375-555-8632 cellPhone=228-555-5602],
 [Contact id=40 firstName=Abner lastName=Bailey homePhone=540-555-7400 cellPhone=402-555-6224],
 [Contact id=39 firstName=Sarah lastName=Baker homePhone=718-555-6411 cellPhone=835-555-3737],
 [Contact id=41 firstName=Emily lastName=Baker homePhone=200-555-7370 cellPhone=857-555-6775],
 [Contact id=13 firstName=Abner lastName=Black homePhone=484-555-1380 cellPhone=837-555-6711],
 [Contact id=46 firstName=Virginia lastName=Black homePhone=236-555-1514 cellPhone=370-555-6114],
 [Contact id=20 firstName=Nicholas lastName=Clark homePhone=850-555-2841 cellPhone=304-555-2572],
 [Contact id=29 firstName=Virginia lastName=Clark homePhone=486-555-5743 cellPhone=321-555-1353],
 [Contact id=45 firstName=Abner lastName=Clark homePhone=217-555-1378 cellPhone=887-555-8002],
 [Contact id=15 firstName=Linda lastName=Cruz homePhone=212-555-7864 cellPhone=672-555-6261],
 [Contact id=36 firstName=Sarah lastName=Cruz homePhone=853-555-6423 cellPhone=246-555-1717],
 [Contact id=49 firstName=Willie lastName=Cruz homePhone=274-555-4160 cellPhone=364-555-3530],
 [Contact id=50 firstName=Sandra lastName=Cruz homePhone=532-555-6421 cellPhone=672-555-8305],
 [Contact id=7 firstName=Christopher lastName=Davis homePhone=615-555-5100 cellPhone=521-555-5751],
 [Contact id=25 firstName=Douglas lastName=Davis homePhone=317-555-1614 cellPhone=601-555-7182],
 [Contact id=9 firstName=Michael lastName=Donahue homePhone=212-555-7884 cellPhone=437-555-7171],
 [Contact id=23 firstName=Willie lastName=Donahue homePhone=447-555-3412 cellPhone=308-555-5753],
 [Contact id=26 firstName=Nicholas lastName=Donahue homePhone=382-555-6351 cellPhone=545-555-8317],
 [Contact id=28 firstName=Hailey lastName=Donahue homePhone=282-555-3288 cellPhone=803-555-2011],
 [Contact id=11 firstName=Jose lastName=Fisher homePhone=518-555-1221 cellPhone=451-555-4148],
 [Contact id=14 firstName=Abby lastName=Fisher homePhone=752-555-1271 cellPhone=404-555-7473],
 [Contact id=37 firstName=Jacob lastName=Fisher homePhone=841-555-6051 cellPhone=872-555-6567],
 [Contact id=5 firstName=Jacob lastName=Gonzalez homePhone=735-555-3215 cellPhone=344-555-2284],
 [Contact id=16 firstName=Virginia lastName=Gonzalez homePhone=738-555-5567 cellPhone=746-555-8824],
 [Contact id=1 firstName=Jose lastName=Graham homePhone=838-555-7575 cellPhone=303-555-7828],
 [Contact id=22 firstName=Gerald lastName=Graham homePhone=266-555-5582 cellPhone=267-555-6410],
 [Contact id=33 firstName=Kathleen lastName=Graham homePhone=770-555-4208 cellPhone=806-555-1576],
 [Contact id=12 firstName=Jack lastName=Hall homePhone=556-555-5815 cellPhone=664-555-3164],
 [Contact id=19 firstName=Samuel lastName=Jones homePhone=444-555-3565 cellPhone=552-555-3481],
 [Contact id=43 firstName=Kathleen lastName=Jones homePhone=246-555-6823 cellPhone=607-555-1387],
 [Contact id=18 firstName=Samuel lastName=Lee homePhone=616-555-1108 cellPhone=411-555-4656],
 [Contact id=32 firstName=Nicholas lastName=Moore homePhone=212-555-1243 cellPhone=386-555-6807],
 [Contact id=31 firstName=Joshua lastName=Murray homePhone=313-555-5146 cellPhone=536-555-1833],
 [Contact id=34 firstName=Hailey lastName=Nelson homePhone=468-555-1462 cellPhone=887-555-2186],
 [Contact id=24 firstName=Sarah lastName=Ortiz homePhone=875-555-2276 cellPhone=367-555-6051],
 [Contact id=3 firstName=Emily lastName=Rose homePhone=227-555-5740 cellPhone=487-555-4347],
 [Contact id=27 firstName=Emily lastName=Rose homePhone=607-555-4265 cellPhone=628-555-3576],
 [Contact id=42 firstName=Sandra lastName=Smiith homePhone=716-555-2870 cellPhone=623-555-8024],
 [Contact id=17 firstName=Timothy lastName=Williams homePhone=460-555-1885 cellPhone=717-555-4161],
 [Contact id=21 firstName=Maria lastName=Williams homePhone=251-555-5611 cellPhone=758-555-7417],
 [Contact id=30 firstName=Matthew lastName=Williams homePhone=275-555-2146 cellPhone=831-555-5868],
 [Contact id=48 firstName=Sarah lastName=Wilson homePhone=586-555-1604 cellPhone=788-555-6148]]

$ vi RepeaterApplication
public class RepeaterApplication extends WebApplication
{
	private final ContactsDatabase contactsDB = new ContactsDatabase(50);
/s
public class ContactsDatabase
{
	private final Map<Long, Contact> map = Collections.synchronizedMap(new HashMap<Long, Contact>());
	private final List<Contact> fnameIdx = Collections.synchronizedList(new ArrayList<Contact>());
	private final List<Contact> lnameIdx = Collections.synchronizedList(new ArrayList<Contact>());
	private final List<Contact> fnameDescIdx = Collections.synchronizedList(new ArrayList<Contact>());
	private final List<Contact> lnameDescIdx = Collections.synchronizedList(new ArrayList<Contact>());

	public ContactsDatabase(int count)
	{
		for (int i = 0; i < count; i++)
		{
			add(ContactGenerator.getInstance().generate());
		}
		updateIndecies();
/ Deze sorts de indices	,


/ Einde Intermezzo

/ we waren in	,
		filterContacts( getContactsDB().getIndex(getSort()) ).size();
"getSort()"	 (pending)	
	ascending	true	
	property	"firstName" (id=14025)	
/s
public class ContactsDatabase
	public List<Contact> getIndex(SortParam sort)
	{
		if (sort == null)
		{
			return fnameIdx;
		}

		if (sort.getProperty().equals("firstName"))
		{
			return sort.isAscending() ? fnameIdx : fnameDescIdx;
		}
/ Dus returns fnameIdx	,
/t
/s
SortableContactDataProvider.size() line: 96	
/=
	private List<Contact> filterContacts(List<Contact> contactsFound)
contactsFound=
/=
fnameIdx
/=
[[Contact id=14 firstName=Abby lastName=Fisher homePhone=752-555-1271 cellPhone=404-555-7473],
 [Contact id=13 firstName=Abner lastName=Black homePhone=484-555-1380 cellPhone=837-555-6711],
 [Contact id=40 firstName=Abner lastName=Bailey homePhone=540-555-7400 cellPhone=402-555-6224],
 [Contact id=45 firstName=Abner lastName=Clark homePhone=217-555-1378 cellPhone=887-555-8002],
 [Contact id=7 firstName=Christopher lastName=Davis homePhone=615-555-5100 cellPhone=521-555-5751],
 [Contact id=25 firstName=Douglas lastName=Davis homePhone=317-555-1614 cellPhone=601-555-7182],
 [Contact id=3 firstName=Emily lastName=Rose homePhone=227-555-5740 cellPhone=487-555-4347],
 [Contact id=27 firstName=Emily lastName=Rose homePhone=607-555-4265 cellPhone=628-555-3576],
 [Contact id=41 firstName=Emily lastName=Baker homePhone=200-555-7370 cellPhone=857-555-6775],
 [Contact id=22 firstName=Gerald lastName=Graham homePhone=266-555-5582 cellPhone=267-555-6410],
 [Contact id=28 firstName=Hailey lastName=Donahue homePhone=282-555-3288 cellPhone=803-555-2011],
 [Contact id=34 firstName=Hailey lastName=Nelson homePhone=468-555-1462 cellPhone=887-555-2186],
 [Contact id=47 firstName=Hailey lastName=Allen homePhone=730-555-1750 cellPhone=280-555-4732],
 [Contact id=12 firstName=Jack lastName=Hall homePhone=556-555-5815 cellPhone=664-555-3164],
 [Contact id=5 firstName=Jacob lastName=Gonzalez homePhone=735-555-3215 cellPhone=344-555-2284],
 [Contact id=37 firstName=Jacob lastName=Fisher homePhone=841-555-6051 cellPhone=872-555-6567],
 [Contact id=1 firstName=Jose lastName=Graham homePhone=838-555-7575 cellPhone=303-555-7828],
 [Contact id=11 firstName=Jose lastName=Fisher homePhone=518-555-1221 cellPhone=451-555-4148],
 [Contact id=31 firstName=Joshua lastName=Murray homePhone=313-555-5146 cellPhone=536-555-1833],
 [Contact id=35 firstName=Joshua lastName=Allen homePhone=438-555-2811 cellPhone=850-555-7513],
 [Contact id=33 firstName=Kathleen lastName=Graham homePhone=770-555-4208 cellPhone=806-555-1576],
 [Contact id=43 firstName=Kathleen lastName=Jones homePhone=246-555-6823 cellPhone=607-555-1387],
 [Contact id=6 firstName=Keith lastName=Bailey homePhone=244-555-1838 cellPhone=384-555-4247],
 [Contact id=15 firstName=Linda lastName=Cruz homePhone=212-555-7864 cellPhone=672-555-6261],
 [Contact id=44 firstName=Linda lastName=Allen homePhone=263-555-2471 cellPhone=253-555-8017],
 [Contact id=21 firstName=Maria lastName=Williams homePhone=251-555-5611 cellPhone=758-555-7417],
 [Contact id=2 firstName=Matthew lastName=Allen homePhone=504-555-8006 cellPhone=872-555-3765],
 [Contact id=30 firstName=Matthew lastName=Williams homePhone=275-555-2146 cellPhone=831-555-5868],
 [Contact id=9 firstName=Michael lastName=Donahue homePhone=212-555-7884 cellPhone=437-555-7171],
 [Contact id=20 firstName=Nicholas lastName=Clark homePhone=850-555-2841 cellPhone=304-555-2572],
 [Contact id=26 firstName=Nicholas lastName=Donahue homePhone=382-555-6351 cellPhone=545-555-8317],
 [Contact id=32 firstName=Nicholas lastName=Moore homePhone=212-555-1243 cellPhone=386-555-6807],
 [Contact id=8 firstName=Pamela lastName=Bailey homePhone=537-555-8567 cellPhone=251-555-5536],
 [Contact id=18 firstName=Samuel lastName=Lee homePhone=616-555-1108 cellPhone=411-555-4656],
 [Contact id=19 firstName=Samuel lastName=Jones homePhone=444-555-3565 cellPhone=552-555-3481],
 [Contact id=10 firstName=Sandra lastName=Bailey homePhone=382-555-4551 cellPhone=520-555-2656],
 [Contact id=42 firstName=Sandra lastName=Smiith homePhone=716-555-2870 cellPhone=623-555-8024],
 [Contact id=50 firstName=Sandra lastName=Cruz homePhone=532-555-6421 cellPhone=672-555-8305],
 [Contact id=24 firstName=Sarah lastName=Ortiz homePhone=875-555-2276 cellPhone=367-555-6051],
 [Contact id=36 firstName=Sarah lastName=Cruz homePhone=853-555-6423 cellPhone=246-555-1717],
 [Contact id=39 firstName=Sarah lastName=Baker homePhone=718-555-6411 cellPhone=835-555-3737],
 [Contact id=48 firstName=Sarah lastName=Wilson homePhone=586-555-1604 cellPhone=788-555-6148],
 [Contact id=4 firstName=Timothy lastName=Allen homePhone=681-555-5250 cellPhone=283-555-4656],
 [Contact id=17 firstName=Timothy lastName=Williams homePhone=460-555-1885 cellPhone=717-555-4161],
 [Contact id=16 firstName=Virginia lastName=Gonzalez homePhone=738-555-5567 cellPhone=746-555-8824],
 [Contact id=29 firstName=Virginia lastName=Clark homePhone=486-555-5743 cellPhone=321-555-1353],
 [Contact id=38 firstName=Virginia lastName=Bailey homePhone=375-555-8632 cellPhone=228-555-5602],
 [Contact id=46 firstName=Virginia lastName=Black homePhone=236-555-1514 cellPhone=370-555-6114],
 [Contact id=23 firstName=Willie lastName=Donahue homePhone=447-555-3412 cellPhone=308-555-5753],
 [Contact id=49 firstName=Willie lastName=Cruz homePhone=274-555-4160 cellPhone=364-555-3530]]

/ de bornDate's of the Contact's are not printed	,

	    ArrayList<Contact> result = new ArrayList<>();
	    Date dateFrom = contactFilter.getDateFrom();
null
	    Date dateTo = contactFilter.getDateTo();
null
/ In dit geval wordt er niet filtered	, result=contactsList	,

/c
/s
/ stack	,
	SortableContactDataProvider.iterator(long, long) line: 57	
	DataViewBase$ModelIterator<T>.<init>(IDataProvider<T>, long, long) line: 107	
	DataTable$DefaultDataGridView(DataViewBase<T>).getItemModels(long, long) line: 74	
	DataTable$DefaultDataGridView(AbstractPageableView<T>).getItemModels() line: 101	
	DataTable$DefaultDataGridView(RefreshingView<T>).onPopulate() line: 93	
	DataTable$DefaultDataGridView(AbstractRepeater).onBeforeRender() line: 124	
	DataTable$DefaultDataGridView(AbstractPageableView<T>).onBeforeRender() line: 115	
	DataTable$DefaultDataGridView(Component).internalBeforeRender() line: 949	
	DataTable$DefaultDataGridView(Component).beforeRender() line: 1017	
	WebMarkupContainer(MarkupContainer).onBeforeRenderChildren() line: 1866	
	WebMarkupContainer(Component).onBeforeRender() line: 3877	
	WebMarkupContainer(Component).internalBeforeRender() line: 949	
	WebMarkupContainer(Component).beforeRender() line: 1017	
	DataTable<T,S>(MarkupContainer).onBeforeRenderChildren() line: 1866	
	DataTable<T,S>(Component).onBeforeRender() line: 3877	
	DataTable<T,S>(Component).internalBeforeRender() line: 949	
	DataTable<T,S>(Component).beforeRender() line: 1017	
	FilterForm<T>(MarkupContainer).onBeforeRenderChildren() line: 1866	
	FilterForm<T>(Component).onBeforeRender() line: 3877	
	FilterForm<T>(Form<T>).onBeforeRender() line: 1807	
	FilterForm<T>(Component).internalBeforeRender() line: 949	
	FilterForm<T>(Component).beforeRender() line: 1017	
	DataTableFilterToolbarPage(MarkupContainer).onBeforeRenderChildren() line: 1866	
	DataTableFilterToolbarPage(Component).onBeforeRender() line: 3877	
	DataTableFilterToolbarPage(Page).onBeforeRender() line: 801	
	DataTableFilterToolbarPage(Component).internalBeforeRender() line: 949	
	DataTableFilterToolbarPage(Component).beforeRender() line: 1017	
	DataTableFilterToolbarPage(Component).internalPrepareForRender(boolean) line: 2215	
	DataTableFilterToolbarPage(Page).internalPrepareForRender(boolean) line: 242	
	DataTableFilterToolbarPage(Component).render() line: 2304	
	DataTableFilterToolbarPage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ debug	,
/s
SortableContactDataProvider.iterator(long, long) line: 57	
/=
	public Iterator<Contact> iterator(long first, long count)
first=0
count=8
		List<Contact> contactsFound = getContactsDB().getIndex(getSort());
fnameIdx
		return filterContacts(contactsFound).
			subList((int)first, (int)(first + count)).
			iterator();

/ Intermezzo

///////////////////////////
/ SortableContactDataProvider.filterContacts is de method die een sorted list van Contact's krijgt, bij ons is dat fnameIdx, dus sorted op first Name, ascending	, en die filters op bornDate van de Contact's	, deze method is geen Wicket method	, maar moet worden gemaakt	, 

/ SortableContactDataProvider.filterContacts wordt called door  
SortableContactDataProvider.iterator
SortableContactDataProvider.size

/ Einde Intermezzo

/c
/s
/ stack
	SortableContactDataProvider.model(Contact) line: 105									/ (**)	
	SortableContactDataProvider.model(Object) line: 36	
	DataViewBase$ModelIterator<T>.next() line: 135	
	DataViewBase$ModelIterator<T>.next() line: 85	
	AbstractPageableView$CappedIteratorAdapter<T>.next() line: 377	
	AbstractPageableView$CappedIteratorAdapter<T>.next() line: 328	
	DefaultItemReuseStrategy$1.next() line: 74	
	DefaultItemReuseStrategy$1.next() line: 56	
	DataTable$DefaultDataGridView(RefreshingView<T>).addItems(Iterator<Item<T>>) line: 189		/ (*)
	DataTable$DefaultDataGridView(RefreshingView<T>).onPopulate() line: 97	
	DataTable$DefaultDataGridView(AbstractRepeater).onBeforeRender() line: 124	
	DataTable$DefaultDataGridView(AbstractPageableView<T>).onBeforeRender() line: 115	
	DataTable$DefaultDataGridView(Component).internalBeforeRender() line: 949	
	DataTable$DefaultDataGridView(Component).beforeRender() line: 1017	
	WebMarkupContainer(MarkupContainer).onBeforeRenderChildren() line: 1866	
	WebMarkupContainer(Component).onBeforeRender() line: 3877	
	WebMarkupContainer(Component).internalBeforeRender() line: 949	
	WebMarkupContainer(Component).beforeRender() line: 1017	
	DataTable<T,S>(MarkupContainer).onBeforeRenderChildren() line: 1866	
	DataTable<T,S>(Component).onBeforeRender() line: 3877	
	DataTable<T,S>(Component).internalBeforeRender() line: 949	
	DataTable<T,S>(Component).beforeRender() line: 1017	
	FilterForm<T>(MarkupContainer).onBeforeRenderChildren() line: 1866	
	FilterForm<T>(Component).onBeforeRender() line: 3877	
	FilterForm<T>(Form<T>).onBeforeRender() line: 1807	
	FilterForm<T>(Component).internalBeforeRender() line: 949	
	FilterForm<T>(Component).beforeRender() line: 1017	
	DataTableFilterToolbarPage(MarkupContainer).onBeforeRenderChildren() line: 1866	
	DataTableFilterToolbarPage(Component).onBeforeRender() line: 3877	
	DataTableFilterToolbarPage(Page).onBeforeRender() line: 801	
	DataTableFilterToolbarPage(Component).internalBeforeRender() line: 949	
	DataTableFilterToolbarPage(Component).beforeRender() line: 1017	
	DataTableFilterToolbarPage(Component).internalPrepareForRender(boolean) line: 2215	
	DataTableFilterToolbarPage(Page).internalPrepareForRender(boolean) line: 242	
	DataTableFilterToolbarPage(Component).render() line: 2304	
	DataTableFilterToolbarPage(Page).renderPage() line: 1018	
	WebPageRenderer.renderPage(Url, RequestCycle) line: 124	
	WebPageRenderer.respond(RequestCycle) line: 236	
	RenderPageRequestHandler.respond(IRequestCycle) line: 175	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ In (*)	,
	protected void addItems(Iterator<Item<T>> items)
items=
[[Contact id=6 firstName=Abner lastName=Ortiz homePhone=331-555-7522 cellPhone=467-555-3737],
 [Contact id=21 firstName=Abner lastName=Gonzalez homePhone=308-555-3048 cellPhone=805-555-3487],
 [Contact id=38 firstName=Abner lastName=Smiith homePhone=241-555-4372 cellPhone=378-555-1418],
 [Contact id=5 firstName=Christopher lastName=Wilson homePhone=521-555-8205 cellPhone=206-555-5115],
 [Contact id=16 firstName=Christopher lastName=Moore homePhone=436-555-1343 cellPhone=318-555-4230],
 [Contact id=29 firstName=Christopher lastName=Moore homePhone=713-555-4788 cellPhone=488-555-3477],
 [Contact id=35 firstName=Christopher lastName=Donahue homePhone=211-555-5723 cellPhone=566-555-6715],
 [Contact id=15 firstName=Debra lastName=Nelson homePhone=836-555-4054 cellPhone=768-555-7340]]

/ In (**)
	SortableContactDataProvider.model(Contact) line: 105	
/ Deze wordt 8 keer called	, iedere Contact in een Model	,

/ Dit zijn de 1ste 8 Contact's	,

/ 7	. 

/ we fill in form	, 
1/1/60
1/1/70
/ en click Enter	,

/s
/ stack	,
	SortableContactDataProvider.size() line: 96	
	DataTable$DefaultDataGridView(DataViewBase<T>).internalGetItemCount() line: 142	
	DataTable$DefaultDataGridView(AbstractPageableView<T>).getItemCount() line: 235	
	DataTable$DefaultDataGridView(AbstractPageableView<T>).getRowCount() line: 216	
	DataTable$DefaultDataGridView(AbstractPageableView<T>).getPageCount() line: 287	
	DataTable<T,S>.getPageCount() line: 298	
	PagingNavigationLink<T>.cullPageNumber(long) line: 97	
	PagingNavigationLink<T>.getPageNumber() line: 79	
	PagingNavigationLink<T>.linksTo(Page) line: 137	
	PagingNavigationLink<T>(Link<T>).isEnabled() line: 159	
	PagingNavigationLink<T>(Component).isEnabledInHierarchy() line: 4426	
	Form$8.component(Component, IVisit<Boolean>) line: 1169	
	Form$8.component(Object, IVisit) line: 1165	
	Visits.visitChildren(Iterable<? super S>, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 144	
	Visits.visitChildren(Iterable<? super S>, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 162	
	Visits.visitChildren(Iterable<? super S>, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 162	
	Visits.visitChildren(Iterable<? super S>, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 162	
	Visits.visitChildren(Iterable<? super S>, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 162	
	Visits.visitChildren(Iterable<? super S>, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 162	
	Visits.visitChildren(Iterable<? super S>, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 162	
	Visits.visitChildren(Iterable<? super S>, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 162	
	Visits.visitChildren(Iterable<? super S>, IVisitor<S,R>, IVisitFilter, Visit<R>) line: 162	
	Visits.visitChildren(Iterable<? super S>, IVisitor<S,R>, IVisitFilter) line: 123	
	FilterForm<T>(MarkupContainer).visitChildren(Class<?>, IVisitor<S,R>) line: 966	
	FilterForm<T>(Form<T>).anyFormComponentError() line: 1164	
	FilterForm<T>(Form<T>).hasError() line: 654	
	FilterForm<T>(Form<T>).process(IFormSubmitter) line: 946	
	FilterForm<T>(Form<T>).onFormSubmitted(IFormSubmitter) line: 795	
	FilterForm<T>(Form<T>).onFormSubmitted() line: 708	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 57	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 606	
	RequestListenerInterface.internalInvoke(Component, Object) line: 258	
	RequestListenerInterface.invoke(IRequestableComponent) line: 216	
	ListenerInterfaceRequestHandler.invokeListener() line: 241	
	ListenerInterfaceRequestHandler.respond(IRequestCycle) line: 234	
	RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 895	
	RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64	
	RequestCycle.execute(IRequestHandler) line: 265	
	RequestCycle.processRequest() line: 222	
	RequestCycle.processRequestAndDetach() line: 293	
	WicketFilter.processRequestCycle(RequestCycle, WebResponse, HttpServletRequest, HttpServletResponse, FilterChain) line: 261	
	WicketFilter.processRequest(ServletRequest, ServletResponse, FilterChain) line: 203	
	WicketFilter.doFilter(ServletRequest, ServletResponse, FilterChain) line: 284	

/ Debug	,
/s
SortableContactDataProvider.size() line: 96	
		return filterContacts(getContactsDB().getIndex(getSort())).size();
/s
SortableContactDataProvider.filterContacts(List<Contact>) line: 66	
	    ArrayList<Contact> result = new ArrayList<>();
	    Date dateFrom = contactFilter.getDateFrom();
Fri Jan 01 00:00:00 CET 1960
	    Date dateTo = contactFilter.getDateTo();
Thu Jan 01 00:00:00 CET 1970

	    for (Contact contact : contactsFound)
	    {
		Date bornDate = contact.getBornDate();
Sun Jun 12 10:28:20 CEST 1977
		
		if(dateFrom != null && bornDate.before(dateFrom))
/ NEE
		if(dateTo != null && bornDate.after(dateTo))
/ JA
		{
		    continue;
		}
/ Dus deze valt buiten het filter	,


/ Einde Intermezzo

/ Einde DEBUG WICKET FILTER 

/ ECLIPSE WICKET 

/ we maken een nieuwe workspace-wicket7_4	, voor debug wicket applications	, in workspace-wicket7_3 teveel b's	,

/ Add Debug Perspective	,
/ Add Expressions View	,
/ Import Existing Maven projects	,
/home/eric/Devel/Java/Wicket/wicket-examples-step-by-step/
/ In Eclipse ga in deze dir	, en import	,

/ right click pom.xml
/ Kies Run As, Build build...
Maven Build
wicket-examples-step-by-step-deploy
/home/eric/Devel/Java/Wicket/wicket-examples-step-by-step
tomcat7:undeploy clean tomcat7:deploy
/ we konden NIET via 	, een config maken	,
/ Run, Run Configurations	,
/ TODO

/ Run, Debug Configurations	,
Remote Java Application
Name: tomcat7-remote-debug
Project: wicket-examples-step-by-step	 / Maakt WH niet uit	,
Host: localhost
Port: 9966

/ we hoeven geen Wicket src's toe te voegen	, 
/TODO


/ Einde ECLIPSE WICKET 

/ DEBUG JQUERY TRIGGER 

/ workspace-wicket7_3
/ proj web

$ bin/catalina.sh jpda run
/ Geef http://localhost:9090/web/index2.html

/ 7	. 

$ vim index2.html

<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>triggerHandler demo</title>
  <script src="jquery-2.2.3.js" ></script>
</head>
<body>
 
<button id="old">.trigger( "focus" )</button>
<button id="new">.triggerHandler( "focus" )</button><br><br>
 
<input type="text" value="To Be Focused">
 
<script>
$( "#old" ).click(function() {
  $( "input" ).trigger( "focus" );
});
$( "#new" ).click(function() {
  $( "input" ).triggerHandler( "focus" );
});
$( "input" ).focus(function() {
  $( "<span>Focused!</span>" ).appendTo( "body" ).fadeOut( 1000 );
});
</script>
 
</body>
</html>

/ 7	. 


/ Einde DEBUG JQUERY TRIGGER 

/ DEBUG JQUERY DATA

/ 7	. 

/ Lees	,
http://stackoverflow.com/questions/5309926/how-to-get-the-data-id-attribute

/ workspace-wicket7_3
/ proj web

$ bin/catalina.sh jpda run
/ Geef http://localhost:9090/web/index3.html

/ 7. 	

/ Lees	,
http://api.jquery.com/data/

<div data-role="page" data-last-value="43" data-hidden="true" data-options='{"name":"John"}'></div>

$( "div" ).data( "role" ) === "page";
$( "div" ).data( "lastValue" ) === 43;
$( "div" ).data( "hidden" ) === true;
$( "div" ).data( "options" ).name === "John";
/ 7	. 

$ vim index3.html

<div id="foo" data-id="foo-13" data-foo-bar="123">foo</div>
 
<script>
var id=$("div").data("id");
console.log(id);
var fooBar=$('div').data('fooBar');
console.log(fooBar);
</script>

<script>
$("div").on('click',function(){
	var id=$(this).attr('data-id');
	var fooBar=$(this).attr('data-foo-bar');
	console.log(id);
	console.log(fooBar);
})
</script>

/ we zien dat .data 123 als number returns	, .attr geeft "123" string	, 

/ 7	. 

/ Lees	,
http://tutorialzine.com/2015/03/15-must-know-chrome-devtools-tips-tricks/
 

/ 7	. 

/ debug	,
<script>
var id=$("div").data("id");
/s

/ HIER HIER HIER




/ Einde DEBUG JQUERY DATA

/ WICKET FILTER SCS

/s 
/ stack	,
	HiddenField(Component).setDefaultModelObject(Object) line: 3167	
		// Check whether this will result in an actual change
		if (!getModelComparator().compare(this, object))
		{
			model.setObject(object);
object="filter49"

	HiddenField(FormComponent).updateModel() line: 1183	
		setDefaultModelObject(getConvertedInput());

	Form$FormModelUpdateVisitor.component(Component) line: 231	
this	Form$FormModelUpdateVisitor  (id=20147)	
form	FilterForm  (id=20148)	
component	HiddenField  (id=20146)	
								((IFormModelUpdateListener)component).updateModel();

	FormComponent.visitComponentsPostOrderHelper(Component, IVisitor<Component>) line: 519	
		return visitor.component(component);

	FormComponent.visitComponentsPostOrderHelper(Component, IVisitor<Component>) line: 498	
			final MarkupContainer container = (MarkupContainer)component;
FilterForm
					final Iterator<? extends Component> children = container.iterator();
					while (children.hasNext())
					{
						final Component child = children.next();
child	HiddenField  (id=20146)	

						Object value = visitComponentsPostOrderHelper(child, visitor);

	FormComponent.visitComponentsPostOrder(Component, IVisitor<Component>) line: 470	
		visitComponentsPostOrderHelper(component, visitor);

	FilterForm(Form).internalUpdateFormComponentModels() line: 2158	
		FormComponent.visitComponentsPostOrder(this, new FormModelUpdateVisitor(this));

	FilterForm(Form).updateFormComponentModels() line: 2126	
		internalUpdateFormComponentModels();

	FilterForm(Form).process() line: 1051	
			// Update model using form data
			updateFormComponentModels();

	FilterForm(Form).process(IFormSubmittingComponent) line: 957	
		// process the form for this request
		if (process())

	FilterForm(Form).onFormSubmitted() line: 922	
				else
				{
					// this is the root form
					Form<?> formToProcess = this;
this	FilterForm  (id=20148)	
					// find out whether it was a nested form that was submitted
					if (submittingComponent != null)
submittingComponent	GoFilter$1  (id=20232)	
/ 'n Button	,
					{
						formToProcess = submittingComponent.getForm();
					}

formToProcess==this
					// process the form for this request
					formToProcess.process(submittingComponent);
				}
	RequestListenerInterface.invoke(Page, Component) line: 182	
	ListenerInterfaceRequestTarget.processEvents(RequestCycle) line: 73	
	WebRequestCycleProcessor(AbstractRequestCycleProcessor).processEvents(RequestCycle) line: 92	
	MpoWebRequestCycle(RequestCycle).processEventsAndRespond() line: 1279	
	MpoWebRequestCycle(RequestCycle).step() line: 1358	
	MpoWebRequestCycle(RequestCycle).steps() line: 1465	
	MpoWebRequestCycle(RequestCycle).request() line: 545	
	WicketFilter.doGet(HttpServletRequest, HttpServletResponse) line: 486	
	WicketServlet.doPost(HttpServletRequest, HttpServletResponse) line: 160	
	WicketServlet(HttpServlet).service(HttpServletRequest, HttpServletResponse) line: 717	
	WicketServlet(HttpServlet).service(ServletRequest, ServletResponse) line: 810	

/ volgende	,
/ TODO

/ 7	. 

/c
/ SCS's	,
$ vi AbstractEventListPage.java

	protected final HashMap<String, AbstractColumn> getAllColumns() {
		addColumn("serviceOrderVO.ExecutedByPartyVO.partyId");

	private void addColumn(String aKey, int aSize) {
		columns.put(aKey, new ExtendedConfigurableTextFilteredPropertyColumn(prefix, aKey, true,
				new ConfigurableTextFilteredPropertyColumn.FilterTextfieldBuilder<String>(aSize)));
	}

/ SCS's	, 
$ vi ExtendedConfigurableTextFilteredPropertyColumn.java
public class ExtendedConfigurableTextFilteredPropertyColumn<T> extends ConfigurableTextFilteredPropertyColumn<T> {

/ SCS's	,
$ vi ConfigurableTextFilteredPropertyColumn.java
public class ConfigurableTextFilteredPropertyColumn<T> extends FilteredPropertyColumn<T> {

/ Wicket's 	,
public abstract class FilteredPropertyColumn<T> extends PropertyColumn<T>

/ HIER HIER HIER





/ Einde WICKET FILTER SCS

