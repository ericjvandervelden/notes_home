/ INSTALL IDE 

/ we zijn op 	,
http://www.scala-lang.org/download/

/ we zien de IDE	,
/ -> 
http://scala-ide.org/download/sdk.html

/ we maken	,
[eric@almond scala]$ pwd
/home/eric/Devel/Java/scala

[eric@almond scala]$ pwd
/home/eric/Devel/Eclipse/scala
[eric@almond scala]$ tar xvzf ~/Downloads/scala-SDK-4.4.1-vfinal-2.11-linux.gtk.x86_64.tar.gz 

/ op de downloads page, onderaan zien we videos	,
http://scala-ide.org/docs/videos.html

/ lees	, 
http://scala-ide.org/docs/current-user-doc/gettingstarted/index.html

/ Einde INSTALL IDE 

/ TUTORIAL

http://docs.scala-lang.org/tutorials/tour/tour-of-scala

/ we maken een scala project	, 
New, Scala project
tour


/ Einde TUTORIAL

/ BOOK

/ lees	, 
http://booksites.artima.com/programming_in_scala
Browse the source code of the book examples
http://booksites.artima.com/programming_in_scala/examples

/ ch2

/ scripts in eclipse
/ lees	,
http://stackoverflow.com/questions/1502110/using-scala-as-a-scripting-language-from-eclipse

/ we maken een nieuw Scala project	 ,
book

/ right click project book, Scala,  create Scala interpreter in book	, 
/ we zien in de console	,

scala> 1+2
res0: Int = 3

scala> res0*2
res1: Int = 6

scala> println("hello")
hello

scala> def max(x:Int,y:Int):Int={ if(x>y)x else y}
max: (x: Int, y: Int)Int
scala> max(3,7)
res3: Int = 7

/ 13	. 

/ we zien niet hoe we in eclipse een script kunnen maken 	, 
/ we doen daarom een object met een main	,

$ vi Step4.scala

object Step4{
  def main(args: Array[String]): Unit = {
    println("hello");
  }
}
/ Deze kunnen we run	, 
/ we mogen ook step4.scala noemen, 
/ TODO

$ vi Step4.scala

object Step4{
  def main(args: Array[String]): Unit = {
    args.foreach( { x => println(x) })
    args.foreach { x => println(x) }
    args.foreach(f)
  }
  def f(x:Any):Unit={
    println(x)
  }
}

/ ch3

$ vi ch3.scala

object ch3 {
  def main(args: Array[String]): Unit = {
    val g=new Array[String](3)
    g(0)="hello"
    g(1)=","
    g(2)="world\n"
    
    for(i <- 0 to 2 ){
      print(g(i))
    }
    for(i <- (0).to ( 2) ){
      print(g(i))
    }
    for(i <- 0 to 2 ){
      print(g.apply(i))
    }

    
    println(10)
    Console println 10
  }
}

/ we kunnen NIET aan de linkerkant	, 
	g.apply(1)=""

/ ch4

/ lees	, 
http://booksites.artima.com/programming_in_scala/examples/
Classes and Objects
http://booksites.artima.com/programming_in_scala/examples/html/ch04.html
4.1 Classes, fields, and methods
/ bijv	,
http://booksites.artima.com/programming_in_scala/examples/classes-and-objects/ChecksumCalculator3.scala

/ 13	. 

$ less ch4/Ex3.scala

package ch4

object Ex3 {
  class ChecksumAccumulator {
    private var sum = 0
    def add(b: Byte): Unit = sum += b
    def checksum(): Int = ~(sum & 0xFF) + 1
  }

  def main(args: Array[String]) {
    val calc = new ChecksumAccumulator
    calc.add(3)
    
    println("calc.checksum [" + calc.checksum + "]")
  }
}

/ een arg van fct is val, bijv b in add(b: Byte), 

/ right click in eclipse, Run as , Scala application
checksum: -13

/ 13	. 

/ in eclipse	, als je op src staat, right click new scala obj, geef in de name ch4. mee, dan komt obj in package ch4	, als je op pkg ch4 staat, right click geeft al ch4. in de name	, 

$ less ch4.SemiInference.scala

object SemiInference {

  /* This method has multiple statements on the same line,
   * so you need to write semicolons explicitly. */
  def printProd2() {
    val s = "hello"; println(s)
  }

  /* This method has just one statement.  The compiler
   * will not insert semicolons in the middle of an if. */
  def check(x: Int) {
    if (x < 2)
      println("too small")
    else
      println("ok")
  }
}

 /Wat kunnen we met dit obj	?
/ TODO
/ Dit is een singleton	,

/ 4.3 Singleton objects

/ in eclipse ook ctrl+shift+u, 3c0 geeft π

$ vi ch4.Ex5.scala

package ch4

import scala.collection.mutable.Map
import ch4.Ex3.ChecksumAccumulator

object Ex5{
  
  object ChecksumAccumulator2{
    
    private val cache=Map[String,Int]()
    
    def calculate(s:String):Int=
      if(cache.contains(s))
        cache(s)
      else{
        val acc=new ChecksumAccumulator
        for(c<-s)
          acc.add(c.toByte)
        val cs=acc.checksum()
        cache+=(s->cs)
        cs
      }    
  }  
  
  def main(args: Array[String]): Unit = {
    val sum=ChecksumAccumulator2.calculate("hello")
    val sum2=ChecksumAccumulator2.calculate("π")
    println(sum.toHexString)
    println(sum2.toHexString)
  }
  
}

/ eclipse voegt de imports toe	,
/ de class 
 












/ Einde BOOK

